[
  {
    "owner": "layerzero-labs",
    "repo": "devtools",
    "content": "TITLE: Initializing LayerZero Configuration in TypeScript for Hardhat Networks\nDESCRIPTION: Generates a `layerzero.config.ts` file with pathway configurations and contract bindings between hardhat networks, supporting LayerZero's cross-chain messaging and lzRead features. The config contains contract endpoint IDs, peer contract names, channel IDs, library addresses, and ULN (Ultra Light Node) parameters such as executors and decentralized validator nodes required for secure messaging. This initialization assists developers in formatting required network and connection parameters systematically.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/uniswap-read/README.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { EndpointId } from '@layerzerolabs/lz-definitions'\nconst arbsep_testnetContract = {\n    eid: EndpointId.ARBSEP_V2_TESTNET,\n    contractName: 'MyOAppRead',\n}\nconst sepolia_testnetContract = {\n    eid: EndpointId.SEPOLIA_V2_TESTNET,\n    contractName: 'MyOAppRead',\n}\nexport default {\n    contracts: [\n        {\n            contract: arbsep_testnetContract,\n            config: {\n                readChannelConfigs: [\n                    {\n                        channelId: 4294967295,\n                        readLibrary: '0x54320b901FDe49Ba98de821Ccf374BA4358a8bf6',\n                        ulnConfig: {\n                            executor: '0x5Df3a1cEbBD9c8BA7F8dF51Fd632A9aef8308897',\n                            requiredDVNs: ['0xcb998B0CeC8b45B268336b99811533728880F08a'],\n                            optionalDVNs: [],\n                            optionalDVNThreshold: 0,\n                        },\n                    },\n                ],\n            },\n        },\n        {\n            contract: sepolia_testnetContract,\n            config: {\n                readChannelConfigs: [\n                    {\n                        channelId: 4294967295,\n                        readLibrary: '0x908E86e9cb3F16CC94AE7569Bf64Ce2CE04bbcBE',\n                        ulnConfig: {\n                            executor: '0x718B92b5CB0a5552039B593faF724D182A881eDA',\n                            requiredDVNs: ['0xDd0Dd2155e17E5363346cE2Bcb80A3990DD1F97F'],\n                            optionalDVNs: [],\n                            optionalDVNThreshold: 0,\n                        },\n                    },\n                ],\n            },\n        },\n    ],\n    connections: [\n        {\n            from: arbsep_testnetContract,\n            to: sepolia_testnetContract,\n            config: {\n                sendLibrary: '0x4f7cd4DA19ABB31b0eC98b9066B9e857B1bf9C0E',\n                receiveLibraryConfig: { receiveLibrary: '0x75Db67CDab2824970131D5aa9CECfC9F69c69636', gracePeriod: 0 },\n                sendConfig: {\n                    executorConfig: { maxMessageSize: 10000, executor: '0x5Df3a1cEbBD9c8BA7F8dF51Fd632A9aef8308897' },\n                    ulnConfig: {\n                        confirmations: 1,\n                        requiredDVNs: ['0x53f488E93b4f1b60E8E83aa374dBe1780A1EE8a8'],\n                        optionalDVNs: [],\n                        optionalDVNThreshold: 0,\n                    },\n                },\n                receiveConfig: {\n                    ulnConfig: {\n                        confirmations: 2,\n                        requiredDVNs: ['0x53f488E93b4f1b60E8E83aa374dBe1780A1EE8a8'],\n                        optionalDVNs: [],\n                        optionalDVNThreshold: 0,\n                    },\n                },\n            },\n        },\n        {\n            from: sepolia_testnetContract,\n            to: arbsep_testnetContract,\n            config: {\n                sendLibrary: '0xcc1ae8Cf5D3904Cef3360A9532B477529b177cCE',\n                receiveLibraryConfig: { receiveLibrary: '0xdAf00F5eE2158dD58E0d3857851c432E34A3A851', gracePeriod: 0 },\n                sendConfig: {\n                    executorConfig: { maxMessageSize: 10000, executor: '0x718B92b5CB0a5552039B593faF724D182A881eDA' },\n                    ulnConfig: {\n                        confirmations: 2,\n                        requiredDVNs: ['0x8eebf8b423B73bFCa51a1Db4B7354AA0bFCA9193'],\n                        optionalDVNs: [],\n                        optionalDVNThreshold: 0,\n                    },\n                },\n                receiveConfig: {\n                    ulnConfig: {\n                        confirmations: 1,\n                        requiredDVNs: ['0x8eebf8b423B73bFCa51a1Db4B7354AA0bFCA9193'],\n                        optionalDVNs: [],\n                        optionalDVNThreshold: 0,\n                    },\n                },\n            },\n        },\n    ],\n}\n```\n\n----------------------------------------\n\nTITLE: LayerZero OApp Configuration Example (YAML)\nDESCRIPTION: This YAML snippet shows an example of a `layerzero.config.ts` file generated by the `lz:oapp-read:config:init` task.  It includes configurations for different contracts on different networks (arbitrum-sepolia and sepolia), defining the endpoint ID, contract name, and settings for read channel configurations, including ULN (Ultra Light Node) configurations. It also defines connections between the different networks, send/receive library configurations, and send/receive configurations.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/oapp-read/README.md#_snippet_2\n\nLANGUAGE: yml\nCODE:\n```\nimport { EndpointId } from '@layerzerolabs/lz-definitions'\nconst arbsep_testnetContract = {\n    eid: EndpointId.ARBSEP_V2_TESTNET,\n    contractName: 'MyOAppRead',\n}\nconst sepolia_testnetContract = {\n    eid: EndpointId.SEPOLIA_V2_TESTNET,\n    contractName: 'MyOAppRead',\n}\nexport default {\n    contracts: [\n        {\n            contract: arbsep_testnetContract,\n            config: {\n                readChannelConfigs: [\n                    {\n                        channelId: 4294967295,\n                        readLibrary: '0x54320b901FDe49Ba98de821Ccf374BA4358a8bf6',\n                        ulnConfig: {\n                            executor: '0x5Df3a1cEbBD9c8BA7F8dF51Fd632A9aef8308897',\n                            requiredDVNs: ['0xcb998B0CeC8b45B268336b99811533728880F08a'],\n                            optionalDVNs: [],\n                            optionalDVNThreshold: 0,\n                        },\n                    },\n                ],\n            },\n        },\n        {\n            contract: sepolia_testnetContract,\n            config: {\n                readChannelConfigs: [\n                    {\n                        channelId: 4294967295,\n                        readLibrary: '0x908E86e9cb3F16CC94AE7569Bf64Ce2CE04bbcBE',\n                        ulnConfig: {\n                            executor: '0x718B92b5CB0a5552039B593faF724D182A881eDA',\n                            requiredDVNs: ['0xDd0Dd2155e17E5363346cE2Bcb80A3990DD1F97F'],\n                            optionalDVNs: [],\n                            optionalDVNThreshold: 0,\n                        },\n                    },\n                ],\n            },\n        },\n    ],\n    connections: [\n        {\n            from: arbsep_testnetContract,\n            to: sepolia_testnetContract,\n            config: {\n                sendLibrary: '0x4f7cd4DA19ABB31b0eC98b9066B9e857B1bf9C0E',\n                receiveLibraryConfig: { receiveLibrary: '0x75Db67CDab2824970131D5aa9CECfC9F69c69636', gracePeriod: 0 },\n                sendConfig: {\n                    executorConfig: { maxMessageSize: 10000, executor: '0x5Df3a1cEbBD9c8BA7F8dF51Fd632A9aef8308897' },\n                    ulnConfig: {\n                        confirmations: 1,\n                        requiredDVNs: ['0x53f488E93b4f1b60E8E83aa374dBe1780A1EE8a8'],\n                        optionalDVNs: [],\n                        optionalDVNThreshold: 0,\n                    },\n                },\n                receiveConfig: {\n                    ulnConfig: {\n                        confirmations: 2,\n                        requiredDVNs: ['0x53f488E93b4f1b60E8E83aa374dBe1780A1EE8a8'],\n                        optionalDVNs: [],\n                        optionalDVNThreshold: 0,\n                    },\n                },\n            },\n        },\n        {\n            from: sepolia_testnetContract,\n            to: arbsep_testnetContract,\n            config: {\n                sendLibrary: '0xcc1ae8Cf5D3904Cef3360A9532B477529b177cCE',\n                receiveLibraryConfig: { receiveLibrary: '0xdAf00F5eE2158dD58E0d3857851c432E34A3A851', gracePeriod: 0 },\n                sendConfig: {\n                    executorConfig: { maxMessageSize: 10000, executor: '0x718B92b5CB0a5552039B593faF724D182A881eDA' },\n                    ulnConfig: {\n                        confirmations: 2,\n                        requiredDVNs: ['0x8eebf8b423B73bFCa51a1Db4B7354AA0bFCA9193'],\n                        optionalDVNs: [],\n                        optionalDVNThreshold: 0,\n                    },\n                },\n                receiveConfig: {\n                    ulnConfig: {\n                        confirmations: 1,\n                        requiredDVNs: ['0x8eebf8b423B73bFCa51a1Db4B7354AA0bFCA9193'],\n                        optionalDVNs: [],\n                        optionalDVNThreshold: 0,\n                    },\n                },\n            },\n        },\n    ],\n}\n```\n\n----------------------------------------\n\nTITLE: Apply LZ Config Wiring - Bash\nDESCRIPTION: This command uses the Hardhat LayerZero plugin to apply the configurations defined in your `layerzero.config.ts` file. It wires your OApp contracts on different networks, allowing them to send and receive messages via LayerZero V2. Ensure your config file is correctly set up before running.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/oft/README.md#_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\nnpx hardhat lz:oapp:wire --oapp-config layerzero.config.ts\n```\n\n----------------------------------------\n\nTITLE: Wiring Contracts from EVM to Move-VM Using pnpm Bash Command\nDESCRIPTION: Executes wiring transactions using pnpm script from EVM networks to Move VM networks, utilizing the LayerZero configuration file. Supports optional simulation mode, mnemonic index selection, and calldata-only generation for multisig. Requires correct config with owner and delegate addresses assigned. Outputs cross-chain wiring transaction or simulated calldata.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/oft-aptos-move/README.md#_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\npnpm run lz:sdk:evm:wire --oapp-config move.layerzero.config.ts\n```\n\n----------------------------------------\n\nTITLE: Configuring LayerZero Networks in hardhat.config.ts (YAML)\nDESCRIPTION: This YAML snippet demonstrates how to configure LayerZero networks within your `hardhat.config.ts` file.  It defines network parameters such as endpoint ID (`eid`), RPC URL, and accounts for different testnet environments (arbitrum-sepolia, base-sepolia). These configurations are essential for deploying and interacting with LayerZero contracts on the specified networks. Requires `hardhat-deploy`.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/oapp-read/README.md#_snippet_0\n\nLANGUAGE: yml\nCODE:\n```\n'arbitrum-sepolia': {\n    eid: EndpointId.ARBSEP_V2_TESTNET,\n    url: process.env.RPC_URL_ARBSEP_TESTNET,\n    accounts,\n},\n'base-sepolia': {\n    eid: EndpointId.BASESEP_V2_TESTNET,\n    url: process.env.RPC_URL_BASE_TESTNET,\n    accounts,\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying LayerZero contracts using Hardhat lz:deploy task\nDESCRIPTION: Enables deploying LayerZero contracts across configured networks using Hardhat's CLI, leveraging 'hardhat-deploy'. It reads network configs from 'hardhat.config.ts' and supports deployment options via tags like contract name. Returns a list of networks available for deployment.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/oft-upgradeable/README.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\n 'arbitrum-sepolia': { eid: EndpointId.ARBSEP_V2_TESTNET, url: process.env.RPC_URL_ARBSEP_TESTNET, accounts },\n 'base-sepolia': { eid: EndpointId.BASESEP_V2_TESTNET, url: process.env.RPC_URL_BASE_TESTNET, accounts }\n```\n\n----------------------------------------\n\nTITLE: Deploying LayerZero EVM Contracts (Bash)\nDESCRIPTION: Uses the Hardhat LayerZero plugin (`lz:deploy`) to deploy the EVM portions of the Omnichain Application. The command prompts the user to select the target EVM networks for deployment.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/oft-adapter-initia/README.md#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nnpx hardhat lz:deploy\n```\n\n----------------------------------------\n\nTITLE: Configuring Cross-Chain Pathways with Send and Receive Settings in TypeScript\nDESCRIPTION: This complex snippet elaborates on pathway configuration by setting detailed parameters for message transmission and reception between Ethereum and Arbitrum. It includes send libraries, receive libraries, timeouts, gas limits, confirmation thresholds, DVN (Decentralized Validation Node) requirements, and enforced options such as gas and message types, facilitating secure and controlled messaging across chains.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/view-pure-read/README.md#_snippet_21\n\nLANGUAGE: TypeScript\nCODE:\n```\nconnections: [\n  // ETH <--> ARB PATHWAY: START\n  {\n    from: ethereumContract,\n    to: arbitrumContract,\n    config: {\n      sendLibrary: contractsConfig.ethereum.sendLib302,\n      receiveLibraryConfig: {\n        receiveLibrary: contractsConfig.ethereum.receiveLib302,\n        gracePeriod: BigInt(0),\n      },\n      receiveLibraryTimeoutConfig: {\n        lib: \"0x0000000000000000000000000000000000000000\",\n        expiry: BigInt(0),\n      },\n      sendConfig: {\n        executorConfig: {\n          maxMessageSize: 10000,\n          executor: contractsConfig.ethereum.executor,\n        },\n        ulnConfig: {\n          confirmations: BigInt(15),\n          requiredDVNs: [\n            contractsConfig.ethereum.horizenDVN,\n            contractsConfig.ethereum.polyhedraDVN,\n            contractsConfig.ethereum.animocaBlockdaemonDVN,\n            contractsConfig.ethereum.lzDVN,\n          ],\n          optionalDVNs: [],\n          optionalDVNThreshold: 0,\n        },\n      },\n      receiveConfig: {\n        ulnConfig: {\n          confirmations: BigInt(20),\n          requiredDVNs: [\n            contractsConfig.ethereum.lzDVN,\n            contractsConfig.ethereum.animocaBlockdaemonDVN,\n            contractsConfig.ethereum.horizenDVN,\n            contractsConfig.ethereum.polyhedraDVN,\n          ],\n          optionalDVNs: [],\n          optionalDVNThreshold: 0,\n        },\n      },\n      enforcedOptions: [\n        {\n          msgType: 1,\n          optionType: ExecutorOptionType.LZ_RECEIVE,\n          gas: 65000,\n          value: 0,\n        },\n        {\n          msgType: 2,\n          optionType: ExecutorOptionType.LZ_RECEIVE,\n          gas: 65000,\n          value: 0,\n        },\n        {\n          msgType: 2,\n          optionType: ExecutorOptionType.COMPOSE,\n          index: 0,\n          gas: 50000,\n          value: 0,\n        },\n      ],\n    },\n  },\n  {\n    from: arbitrumContract,\n    to: ethereumContract,\n  },\n  // ETH <--> ARB PATHWAY: END\n];\n```\n\n----------------------------------------\n\nTITLE: Configuring LayerZero Cross-Chain Message Parameters in TypeScript\nDESCRIPTION: This comprehensive snippet extends the pathway definition by including detailed configuration settings per direction. It sets up send and receive libraries, message grace periods, optional timeouts, and executor configurations such as maximum message size and gas limits. Verification parameters include required and optional Decentralized Verification Network (DVN) addresses with confirmation counts on each chain. The configuration also specifies enforced execution options governing gas usage per message type. All parameter values depend on pre-defined contract config objects (contractsConfig) and constants like ExecutorOptionType. The inputs are structured objects describing communication details; the outputs are configurations employed by the LayerZero protocol to direct cross-chain message verification and execution behavior.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/oft/README.md#_snippet_23\n\nLANGUAGE: TypeScript\nCODE:\n```\nconnections: [\n  // ETH <--> ARB PATHWAY: START\n  {\n    from: ethereumContract,\n    to: arbitrumContract,\n    config: {\n      sendLibrary: contractsConfig.ethereum.sendLib302,\n      receiveLibraryConfig: {\n        receiveLibrary: contractsConfig.ethereum.receiveLib302,\n        gracePeriod: BigInt(0),\n      },\n      // Optional Receive Library Timeout for when the Old Receive Library Address will no longer be valid\n      receiveLibraryTimeoutConfig: {\n        lib: \"0x0000000000000000000000000000000000000000\",\n        expiry: BigInt(0),\n      },\n      // Optional Send Configuration\n      // @dev Controls how the `from` chain sends messages to the `to` chain.\n      sendConfig: {\n        executorConfig: {\n          maxMessageSize: 10000,\n          // The configured Executor address\n          executor: contractsConfig.ethereum.executor,\n        },\n        ulnConfig: {\n          // The number of block confirmations to wait on BSC before emitting the message from the source chain.\n          confirmations: BigInt(15),\n          // The address of the DVNs you will pay to verify a sent message on the source chain ).\n          // The destination tx will wait until ALL `requiredDVNs` verify the message.\n          requiredDVNs: [\n            contractsConfig.ethereum.horizenDVN, // Horizen\n            contractsConfig.ethereum.polyhedraDVN, // Polyhedra\n            contractsConfig.ethereum.animocaBlockdaemonDVN, // Animoca-Blockdaemon (only available on ETH <-> Arbitrum One)\n            contractsConfig.ethereum.lzDVN, // LayerZero Labs\n          ],\n          // The address of the DVNs you will pay to verify a sent message on the source chain ).\n          // The destination tx will wait until the configured threshold of `optionalDVNs` verify a message.\n          optionalDVNs: [],\n          // The number of `optionalDVNs` that need to successfully verify the message for it to be considered Verified.\n          optionalDVNThreshold: 0,\n        },\n      },\n      // Optional Receive Configuration\n      // @dev Controls how the `from` chain receives messages from the `to` chain.\n      receiveConfig: {\n        ulnConfig: {\n          // The number of block confirmations to expect from the `to` chain.\n          confirmations: BigInt(20),\n          // The address of the DVNs your `receiveConfig` expects to receive verifications from on the `from` chain ).\n          // The `from` chain's OApp will wait until the configured threshold of `requiredDVNs` verify the message.\n          requiredDVNs: [\n            contractsConfig.ethereum.lzDVN, // LayerZero Labs DVN\n            contractsConfig.ethereum.animocaBlockdaemonDVN, // Blockdaemon-Animoca\n            contractsConfig.ethereum.horizenDVN, // Horizen Labs\n            contractsConfig.ethereum.polyhedraDVN, // Polyhedra\n          ],\n          // The address of the `optionalDVNs` you expect to receive verifications from on the `from` chain ).\n          // The destination tx will wait until the configured threshold of `optionalDVNs` verify the message.\n          optionalDVNs: [],\n          // The number of `optionalDVNs` that need to successfully verify the message for it to be considered Verified.\n          optionalDVNThreshold: 0,\n        },\n      },\n      // Optional Enforced Options Configuration\n      // @dev Controls how much gas to use on the `to` chain, which the user pays for on the source `from` chain.\n      enforcedOptions: [\n        {\n          msgType: 1,\n          optionType: ExecutorOptionType.LZ_RECEIVE,\n          gas: 65000,\n          value: 0,\n        },\n        {\n          msgType: 2,\n          optionType: ExecutorOptionType.LZ_RECEIVE,\n          gas: 65000,\n          value: 0,\n        },\n        {\n          msgType: 2,\n          optionType: ExecutorOptionType.COMPOSE,\n          index: 0,\n          gas: 50000,\n          value: 0,\n        },\n      ],\n    },\n  },\n  {\n    from: arbitrumContract,\n    to: ethereumContract,\n  },\n  // ETH <--> ARB PATHWAY: END\n];\n```\n\n----------------------------------------\n\nTITLE: Defining Ethereum and Arbitrum Contracts in TypeScript for LayerZero\nDESCRIPTION: Defines two contract configuration objects in TypeScript, representing Ethereum and Arbitrum LayerZero endpoints respectively. Each object uses a specified EndpointId enumeration and assigns a contract name string. These objects serve as references for building pathways between chains in the omnichain application configuration.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/oft-alt/README.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nconst ethereumContract: OmniPointHardhat = {\n  eid: EndpointId.ETHEREUM_V2_MAINNET,\n  contractName: \"MyOFTAdapter\",\n};\n\nconst arbitrumContract: OmniPointHardhat = {\n  eid: EndpointId.ARBITRUM_V2_MAINNET,\n  contractName: \"MyOFT\",\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Contract Configurations for Ethereum and Arbitrum Using TypeScript\nDESCRIPTION: This snippet sets up the contract details for Ethereum and Arbitrum networks, specifying network identifiers and contract names. These objects serve as the basis for establishing pathways and message configurations, ensuring correct network-linking for cross-chain interactions.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/view-pure-read/README.md#_snippet_19\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst ethereumContract: OmniPointHardhat = {\n  eid: EndpointId.ETHEREUM_V2_MAINNET,\n  contractName: \"MyOAppRead\",\n};\n\nconst arbitrumContract: OmniPointHardhat = {\n  eid: EndpointId.ARBITRUM_V2_MAINNET,\n  contractName: \"MyOAppRead\",\n};\n```\n\n----------------------------------------\n\nTITLE: Deploying Contracts with LayerZero Hardhat Plugin (Bash)\nDESCRIPTION: Deploys the compiled contracts to the configured target blockchains using the LayerZero Hardhat plugin task `lz:deploy`. Requires Hardhat, the LayerZero Hardhat plugin, and a properly configured `.env` file with deployer credentials and sufficient funds.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/native-oft-adapter/README.md#_snippet_8\n\nLANGUAGE: Bash\nCODE:\n```\nnpx hardhat lz:deploy\n```\n\n----------------------------------------\n\nTITLE: Deploy Contracts using Hardhat LayerZero plugin (Bash)\nDESCRIPTION: This command deploys the contracts to the configured blockchains using the LayerZero Hardhat plugin. It requires the `.env` file to be configured with a deployer wallet/account.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/oft-adapter/README.md#_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nnpx hardhat lz:deploy\n```\n\n----------------------------------------\n\nTITLE: Sending Tokens from Move VM to EVM via LayerZero SDK\nDESCRIPTION: Initiates a cross-chain token transfer from a Move VM (like Aptos) to an EVM chain using the `lz:sdk:move:send-from-move-oft` command. Requires specifying the OApp config, amounts (in lowest denomination), source Move address, destination EVM address, gas limit for the destination transaction, and the destination LayerZero Endpoint ID (eid).\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/oft-adapter-aptos-move/README.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npnpm run lz:sdk:move:send-from-move-oft \\\n  --oapp-config move.layerzero.config.ts \\\n  --amount-ld <amount-to-send> \\\n  --min-amount-ld <minimum-amount-to-receive> \\\n  --src-address <your-move-account-address> \\\n  --to-address <destination-evm-address> \\\n  --gas-limit 400000 \\\n  --dst-eid <destination-chain-eid>\n```\n\n----------------------------------------\n\nTITLE: Configuring Hardhat Network with Endpoint ID (EID) - TypeScript\nDESCRIPTION: This code snippet demonstrates how to configure a hardhat network with an Endpoint ID (EID).  This configuration is required for tooling to properly link network names to LayerZero endpoints, enabling successful OApp wiring. The `eid` property links user-defined network names to LayerZero endpoint IDs.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/CHEATSHEET.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// hardhat.config.ts\n\nconst config: HardhatUserConfig = {\n  networks: {\n    \"ethereum-mainnet\": {\n      eid: EndpointId.ETHEREUM_MAINNET,\n      // ...\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Get LayerZero Project Code\nDESCRIPTION: Uses the create-lz-oapp utility to initialize the project repository with the migration example enabled. This fetches the necessary code structure and files.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/lzapp-migration/README.md#_snippet_3\n\nLANGUAGE: Bash\nCODE:\n```\nLZ_ENABLE_MIGRATION_EXAMPLE=1 npx create-lz-oapp@latest\n```\n\n----------------------------------------\n\nTITLE: Initializing LayerZero OApp Project via CLI in Bash\nDESCRIPTION: This snippet provides the commands to quickly bootstrap a new LayerZero OApp project using different Node.js package runners like npx, yarn, pnpm, and bunx. It requires having one of these package managers installed and uses the create-lz-oapp package tagged with the latest version to scaffold the project structure. The commands are intended to be run from a terminal and generate a base project ready for LayerZero smart contract development.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/packages/create-lz-oapp/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-lz-oapp@latest\n# or\nyarn create lz-oapp\n# or\npnpm create lz-oapp\n# or\nbunx create-lz-oapp\n```\n\n----------------------------------------\n\nTITLE: Deploy LayerZero OApp Contracts - Bash\nDESCRIPTION: This command initiates the deployment process for LayerZero OApp contracts configured in your project. Ensure your deployer wallet/account is set up with sufficient funds in the `.env` file before running.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/oft/README.md#_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nnpx hardhat lz:deploy\n```\n\n----------------------------------------\n\nTITLE: Initializing LayerZero OApp Configuration (Bash)\nDESCRIPTION: This bash command initializes a `layerzero.config.ts` file for configuring cross-chain communication between OApps.  It sets up pathways between Hardhat networks with default LayerZero settings.  The task requires the contract name and file name as input parameters, which determine the contract identifier and config file name, respectively.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/oapp-read/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx hardhat lz:oapp-read:config:init --contract-name CONTRACT_NAME --oapp-config FILE_NAME\n```\n\n----------------------------------------\n\nTITLE: Gnosis Safe Configuration in hardhat.config.ts\nDESCRIPTION: Example configuration for using a Gnosis Safe multisig as the signer for transactions in the network configuration. The configuration includes a safeUrl for the Safe API and a safeAddress.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/oft/README.md#_snippet_4\n\nLANGUAGE: yml\nCODE:\n```\n// hardhat.config.ts\n\nnetworks: {\n  // Include configurations for other networks as needed\n  fuji: {\n    /* ... */\n    // Network-specific settings\n    safeConfig: {\n      safeUrl: 'http://something', // URL of the Safe API, not the Safe itself\n      safeAddress: 'address'\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Move OApp Delegate via LayerZero SDK\nDESCRIPTION: Executes the LayerZero SDK command `lz:sdk:move:set-delegate` using pnpm to update the OApp's delegate address on the Move VM based on the configuration provided in the specified `--oapp-config` file.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/oft-adapter-aptos-move/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm run lz:sdk:move:set-delegate --oapp-config move.layerzero.config.ts\n```\n\n----------------------------------------\n\nTITLE: Wiring LayerZero OApp Contracts Using Hardhat Bash Task\nDESCRIPTION: Executes on-chain calls to configure peer connections, libraries, and set enforced options for deployed LayerZero OApp contracts across configured pathways based on the `layerzero.config.ts` file. This Bash command invokes a Hardhat task that programmatically applies any new or modified configuration settings, including send/receive libraries and read channel activations, to ensure proper interoperability and security across chains. Requires correct environment variables for private keys and RPC endpoints.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/uniswap-read/README.md#_snippet_2\n\nLANGUAGE: Bash\nCODE:\n```\nnpx hardhat lz:oapp-read:wire --oapp-config YOUR_LAYERZERO_CONFIG_FILE\n```\n\n----------------------------------------\n\nTITLE: Sending Tokens from Move VM OFT (Bash)\nDESCRIPTION: Initiates a cross-chain transfer of OFT tokens from a Move VM (like Initia) to another chain using the LayerZero SDK. Requires specifying the amount (`--amount-ld`), minimum amount (`--min-amount-ld`), source address (`--src-address` in hex), destination address (`--to-address` in the destination chain's format converted to bytes32/hex), gas limit for the destination execution (`--gas-limit`), and the destination LayerZero Endpoint ID (`--dst-eid`).\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/oft-adapter-initia/README.md#_snippet_28\n\nLANGUAGE: bash\nCODE:\n```\npnpm run lz:sdk:move:send-from-move-oft \\\n  --amount-ld <your-amount-ld> \\\n  --min-amount-ld <your-min-amount-ld> \\\n  --src-address <your-source-account-address> \\\n  --to-address <your-destination-account-address> \\\n  --gas-limit <your-gas-limit> \\\n  --dst-eid <your-dst-eid>\\\n```\n\n----------------------------------------\n\nTITLE: Wiring cross-chain OApp contracts based on configuration using Hardhat lz:oapp:config:wire\nDESCRIPTION: Automates the process of calling configuration functions on deployed OApp contracts across networks using the specified 'layerzero.config.ts'. It updates peer addresses, protocol settings, and library addresses, optionally supporting multisig signers with Safe configurations.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/oft-upgradeable/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx hardhat lz:oapp:wire --oapp-config YOUR_LAYERZERO_CONFIG_FILE\n```\n\n----------------------------------------\n\nTITLE: Programmatic Non-Target Contract Verification using Hardhat Deploy (TypeScript)\nDESCRIPTION: Presents a TypeScript example for verifying contracts deployed dynamically (non-targets), such as from within another contract's deployment script, using `verifyHardhatDeployNonTarget`. This method requires explicitly providing an array of contract details, including each contract's address, network, the relevant deployment file name (relative to the deployments path), constructor arguments, and the fully-qualified contract name, in addition to deployment paths and network API details.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/packages/verify-contract/README.md#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { verifyHardhatDeployNonTarget } from \"@layerzerolabs/verify-contract\";\n\n// Programmatic usage allows for more fine-grained and multi-network verification\nverifyHardhatDeployNonTarget({\n  paths: {\n    deployments: \"./my/little/deployments/folder\",\n  },\n  networks: {\n    whatachain: {\n      apiUrl: \"https://api.whatachain.io/api\",\n      apiKey: \"david.hasselhoff.1234\",\n    },\n  },\n  // The contracts array is used to pass the contract details\n  contracts: [\n    {\n      address: \"0x0\",\n      network: \"whatachain\",\n      // We'll need to pass the name of the deployment file to use (relative to the deployments path)\n      deployment: \"OtherContract.json\",\n      constructorArguments: [1000, \"0x0\"],\n      // In this case we'll need to pass a fully-qualified contract name\n      contractName: \"contracts/examples/Pool.sol\",\n    },\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Deploying Contracts on EVM Networks Using Hardhat CLI in Bash\nDESCRIPTION: Executes a Hardhat plugin command to deploy LayerZero contracts across selected EVM networks. Excludes Aptos, Movement, Solana, or Initia chains. Requires Node.js, Hardhat environment, and Hardhat LayerZero plugin. Outputs contract deployment receipts on chosen EVM networks.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/oft-aptos-move/README.md#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nnpx hardhat lz:deploy\n```\n\n----------------------------------------\n\nTITLE: Customize LZ Config OmniPointHardhat - TypeScript\nDESCRIPTION: This TypeScript snippet shows how to define an `OmniPointHardhat` object within your `layerzero.config.ts`. It specifies the endpoint ID (`eid`) for a particular network (e.g., Optimism or Avalanche testnet) and the `contractName` of your OApp deployed on that chain. This configuration is used for wiring contracts.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/oft/README.md#_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nconst optimismContract: OmniPointHardhat = {\n  eid: EndpointId.OPTSEP_V2_TESTNET,\n  contractName: \"MyOFTAdapter\",\n};\n\nconst avalancheContract: OmniPointHardhat = {\n  eid: EndpointId.AVALANCHE_V2_TESTNET,\n  contractName: \"MyOFT\",\n};\n```\n\n----------------------------------------\n\nTITLE: Sending Tokens from EVM to Move VM via LayerZero SDK\nDESCRIPTION: Initiates a cross-chain token transfer from an EVM chain to a Move VM (like Aptos) using the `lz:sdk:evm:send-evm` command. Requires specifying the OApp config, source and destination LayerZero Endpoint IDs (eid), the destination Move address, and the amounts (in standard denomination).\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/oft-adapter-aptos-move/README.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npnpm run lz:sdk:evm:send-evm \\\n  --oapp-config move.layerzero.config.ts \\\n  --src-eid <source-chain-eid> \\\n  --dst-eid <destination-chain-eid> \\\n  --to <destination-move-address> \\\n  --amount <amount-to-send> \\\n  --min-amount <minimum-amount-to-receive>\n```\n\n----------------------------------------\n\nTITLE: Defining Cross-Chain Pathways\nDESCRIPTION: This TypeScript snippet defines the communication pathways between the defined contracts on Ethereum and Arbitrum. It specifies the `from` and `to` contracts for each direction of communication, enabling messages to be sent and received across chains. The configuration uses the contract instances defined previously.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/oapp-read/README.md#_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nconnections: [\n  // ETH <--> ARB PATHWAY: START\n  {\n    from: ethereumContract,\n    to: arbitrumContract,\n  },\n  {\n    from: arbitrumContract,\n    to: ethereumContract,\n  },\n  // ETH <--> ARB PATHWAY: END\n];\n```\n\n----------------------------------------\n\nTITLE: Sending Tokens from Move VM OFT\nDESCRIPTION: Command to send a specified amount of tokens from a Move VM OFT to a destination address. Includes parameters for source address, destination address, amount, minimum amount accepted, gas limit, and destination eid.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/oft-aptos-move/README.md#_snippet_30\n\nLANGUAGE: bash\nCODE:\n```\npnpm run lz:sdk:move:send-from-move-oft \\\n  --oapp-config move.layerzero.config.ts \\\n  --amount-ld <your-amount-ld> \\\n  --min-amount-ld <your-min-amount-ld> \\\n  --src-address <your-source-account-address> \\\n  --to-address <your-destination-account-address> \\\n  --gas-limit <your-gas-limit> \\\n  --dst-eid <your-dst-eid>\n```\n\n----------------------------------------\n\nTITLE: Configuring Advanced LayerZero Pathway Settings in TypeScript\nDESCRIPTION: Comprehensive TypeScript configuration for a LayerZero pathway showing send and receive libraries, executor settings, ULN configurations with DVNs, confirmations, and enforced options for cross-chain message passing between Ethereum and Arbitrum.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/oft-upgradeable/README.md#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nconnections: [\n  // ETH <--> ARB PATHWAY: START\n  {\n    from: ethereumContract,\n    to: arbitrumContract,\n    config: {\n      sendLibrary: contractsConfig.ethereum.sendLib302,\n      receiveLibraryConfig: {\n        receiveLibrary: contractsConfig.ethereum.receiveLib302,\n        gracePeriod: BigInt(0),\n      },\n      // Optional Receive Library Timeout for when the Old Receive Library Address will no longer be valid\n      receiveLibraryTimeoutConfig: {\n        lib: \"0x0000000000000000000000000000000000000000\",\n        expiry: BigInt(0),\n      },\n      // Optional Send Configuration\n      // @dev Controls how the `from` chain sends messages to the `to` chain.\n      sendConfig: {\n        executorConfig: {\n          maxMessageSize: 10000,\n          // The configured Executor address\n          executor: contractsConfig.ethereum.executor,\n        },\n        ulnConfig: {\n          // The number of block confirmations to wait on BSC before emitting the message from the source chain.\n          confirmations: BigInt(15),\n          // The address of the DVNs you will pay to verify a sent message on the source chain ).\n          // The destination tx will wait until ALL `requiredDVNs` verify the message.\n          requiredDVNs: [\n            contractsConfig.ethereum.horizenDVN, // Horizen\n            contractsConfig.ethereum.polyhedraDVN, // Polyhedra\n            contractsConfig.ethereum.animocaBlockdaemonDVN, // Animoca-Blockdaemon (only available on ETH <-> Arbitrum One)\n            contractsConfig.ethereum.lzDVN, // LayerZero Labs\n          ],\n          // The address of the DVNs you will pay to verify a sent message on the source chain ).\n          // The destination tx will wait until the configured threshold of `optionalDVNs` verify a message.\n          optionalDVNs: [],\n          // The number of `optionalDVNs` that need to successfully verify the message for it to be considered Verified.\n          optionalDVNThreshold: 0,\n        },\n      },\n      // Optional Receive Configuration\n      // @dev Controls how the `from` chain receives messages from the `to` chain.\n      receiveConfig: {\n        ulnConfig: {\n          // The number of block confirmations to expect from the `to` chain.\n          confirmations: BigInt(20),\n          // The address of the DVNs your `receiveConfig` expects to receive verifications from on the `from` chain ).\n          // The `from` chain's OApp will wait until the configured threshold of `requiredDVNs` verify the message.\n          requiredDVNs: [\n            contractsConfig.ethereum.lzDVN, // LayerZero Labs DVN\n            contractsConfig.ethereum.animocaBlockdaemonDVN, // Blockdaemon-Animoca\n            contractsConfig.ethereum.horizenDVN, // Horizen Labs\n            contractsConfig.ethereum.polyhedraDVN, // Polyhedra\n          ],\n          // The address of the `optionalDVNs` you expect to receive verifications from on the `from` chain ).\n          // The destination tx will wait until the configured threshold of `optionalDVNs` verify the message.\n          optionalDVNs: [],\n          // The number of `optionalDVNs` that need to successfully verify the message for it to be considered Verified.\n          optionalDVNThreshold: 0,\n        },\n      },\n      // Optional Enforced Options Configuration\n      // @dev Controls how much gas to use on the `to` chain, which the user pays for on the source `from` chain.\n      enforcedOptions: [\n        {\n          msgType: 1,\n          optionType: ExecutorOptionType.LZ_RECEIVE,\n          gas: 65000,\n          value: 0,\n        },\n        {\n          msgType: 2,\n          optionType: ExecutorOptionType.LZ_RECEIVE,\n          gas: 65000,\n          value: 0,\n        },\n        {\n          msgType: 2,\n          optionType: ExecutorOptionType.COMPOSE,\n          index: 0,\n          gas: 50000,\n          value: 0,\n        },\n      ],\n    },\n  },\n  {\n    from: arbitrumContract,\n    to: ethereumContract,\n  },\n  // ETH <--> ARB PATHWAY: END\n];\n```\n\n----------------------------------------\n\nTITLE: Programmatic Target Contract Verification using Hardhat Deploy (TypeScript)\nDESCRIPTION: Provides a TypeScript example demonstrating how to programmatically verify contracts that were direct compilation targets using `verifyHardhatDeployTarget`. It requires specifying deployment paths, network API details (URL and key), and allows optional filtering of contracts to verify based on name, a boolean flag, or a custom function. This method automatically extracts necessary information from the corresponding Hardhat deployment file.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/packages/verify-contract/README.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { verifyHardhatDeployTarget } from \"@layerzerolabs/verify-contract\";\n\n// Programmatic usage allows for more fine-grained and multi-network verification\nverifyHardhatDeployTarget({\n  paths: {\n    deployments: \"./my/little/deployments/folder\",\n  },\n  networks: {\n    whatachain: {\n      apiUrl: \"https://api.whatachain.io/api\",\n      apiKey: \"david.hasselhoff.1234\",\n    },\n  },\n  // The filter option allows you to limit the scope of verification to\n  // specific contracts\n  //\n  // It supports several ways of scoping the verification:\n  //\n  // A list of case-sensitive contract names\n  filter: [\"Factory\", \"Router\"],\n  // A single contract name\n  filter: \"ONFT1155\",\n  // Boolean to toggle the verification as a whole\n  filter: false,\n  // A function that gets passed the contract name and an relative contract path and returns a boolean to signify the contract needs to be verified\n  filter: (name, path) => name.startsWith(\"Potato721\"),\n});\n```\n\n----------------------------------------\n\nTITLE: Wiring LayerZero OApps (Bash)\nDESCRIPTION: This bash command wires your deployed OApp contracts across different chains according to the `layerzero.config.ts` file. It calls the configuration functions required for cross-chain messaging. Requires a valid `layerzero.config.ts` file with correctly defined configurations.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/oapp-read/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpx hardhat lz:oapp-read:wire --oapp-config YOUR_LAYERZERO_CONFIG_FILE\n```\n\n----------------------------------------\n\nTITLE: Building and Deploying LayerZero Move Contracts (Bash)\nDESCRIPTION: Builds and deploys the Move VM contracts (for Initia) using the LayerZero SDK deploy script. It requires the OApp configuration file, specifies an address name for the deployment ('oft'), points to a Move deployment script (`deploy-move/OFTInitParams.ts`), and identifies the OApp type as 'oft'.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/oft-adapter-initia/README.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\npnpm run lz:sdk:move:deploy --oapp-config move.layerzero.config.ts --address-name oft --move-deploy-script deploy-move/OFTInitParams.ts --oapp-type oft\n```\n\n----------------------------------------\n\nTITLE: Building and Deploying Move Contracts via pnpm Bash Command\nDESCRIPTION: Runs pnpm script to both build and deploy Move contracts for the OFT open application, using the specified oapp config, contract address name, and deployment Move script. Requires valid environment, Move source files, configs, and the deploy Move script. Deploys compiled contracts and initializes them on the blockchain.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/oft-aptos-move/README.md#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\npnpm run lz:sdk:move:deploy --oapp-config move.layerzero.config.ts --address-name oft --move-deploy-script deploy-move/OFTInitParams.ts --oapp-type oft\n```\n\n----------------------------------------\n\nTITLE: Creating an OmniPoint in TypeScript\nDESCRIPTION: Demonstrates how to define an OmniPoint object that uniquely identifies a contract in an omnichain universe. An OmniPoint consists of an endpoint ID (eid) indicating the network and the contract's address.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/packages/devtools/README.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { EndpointId } from \"@layerzerolabs/lz-definitions\";\nimport { OmniPoint } from \"@layerzerolabs/devtools\";\n\nconst omniPoint: OmniPoint = {\n  eid: EndpointId.ETHEREUM_MAINNET,\n  address: \"0xEe6cF2E1Bc7645F8439d241ce37820305F2BB3F8\",\n};\n```\n\n----------------------------------------\n\nTITLE: Sending tokens from EVM to Move VM\nDESCRIPTION: A bash command to send tokens from an EVM environment to a Move VM address. This command specifies the source and destination endpoint IDs, destination address, amount, and minimum amount.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/oft-initia/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npnpm run lz:sdk:evm:send-evm \\\n  --oapp-config move.layerzero.config.ts \\\n  --src-eid <your-src-eid> \\\n  --dst-eid <your-dst-eid> \\\n  --to <your-source-account-address> \\\n  --amount <your-amount> \\\n  --min-amount <your-min-amount>\n```\n\n----------------------------------------\n\nTITLE: Configuring OFT Metadata in TypeScript\nDESCRIPTION: Defines metadata configuration object for an OFT, specifying token name, symbol, icon URI, project URI, and number of decimals. Intended to be inserted into deploy parameter files before setting delegate and initializing the OFT. Requires update with desired token metadata values. Used as input to initialization scripts to configure token properties.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/oft-aptos-move/README.md#_snippet_12\n\nLANGUAGE: ts\nCODE:\n```\nconst oftMetadata = {\n  token_name: \"MyMoveOFT\",\n  token_symbol: \"MMOFT\",\n  icon_uri: \"\",\n  project_uri: \"\",\n  localDecimals: 8,\n};\n```\n\n----------------------------------------\n\nTITLE: Deploying Contracts with Hardhat\nDESCRIPTION: This command deploys contracts using Hardhat with the `lz:deploy` task.  It requires a configured deployer wallet/account in `.env`.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/oapp-read/README.md#_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nnpx hardhat lz:deploy\n```\n\n----------------------------------------\n\nTITLE: Setting Delegate and Owner Addresses in TypeScript Config for LayerZero OFT Deployment\nDESCRIPTION: Defines a contract entry object in a TypeScript configuration file with endpoint ID and contract name for a Movement testnet OFT deployment. The snippet shows how to specify the delegate and owner addresses in the contracts array, binding them to the deployer account for ownership and privileged operations. Requires TypeScript environment, LayerZero SDK types, and proper address strings. Prepares configuration for use by deployment scripts.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/oft-aptos-move/README.md#_snippet_8\n\nLANGUAGE: ts\nCODE:\n```\n// Create contract entries for all contracts you would like to deploy.\n// This is an example entry for Movement testnet.\nconst movementContract: OmniPointHardhat = {\n    eid: EndpointId.MOVEMENT_V2_TESTNET,\n    contractName: 'MyOFT',\n}\n\n...\n\n    contracts: [\n        {\n            contract: movementContract,\n            config: {\n                delegate: 'YOUR_ACCOUNT_ADDRESS',\n                owner: 'YOUR_ACCOUNT_ADDRESS',\n            },\n        },\n    ],\n```\n\n----------------------------------------\n\nTITLE: Creating OFT on Solana using Hardhat and LayerZero CLI (bash)\nDESCRIPTION: This command creates an Off-Chain Fungible Token (OFT) on the Solana blockchain using Hardhat, specifying the endpoint ID and program ID. Usage of optional flags allows adding minters and setting initial minting amounts, influencing token distribution at creation.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/lzapp-migration/README.md#_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\npnpm hardhat lz:oft:solana:create --eid 40168 --program-id <PROGRAM_ID>\n```\n\n----------------------------------------\n\nTITLE: Installing @layerzerolabs/devtools-evm Using Yarn, PNPM, or NPM - Bash\nDESCRIPTION: These Bash commands demonstrate the installation of the @layerzerolabs/devtools-evm package for JavaScript or TypeScript projects using Yarn, PNPM, or NPM. Ensure that package managers (yarn, npm, or pnpm) are installed and that the destination project uses a compatible bundler or runtime environment. No parameters are required; simply run the chosen command in your project directory. The output will register the dependency in your project's package.json and install it in node_modules.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/packages/devtools-evm/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @layerzerolabs/devtools-evm\n\npnpm add @layerzerolabs/devtools-evm\n\nnpm install @layerzerolabs/devtools-evm\n```\n\n----------------------------------------\n\nTITLE: Defining LayerZero Contract Endpoints (TypeScript)\nDESCRIPTION: Defines `OmniPointHardhat` objects representing OApp contracts on specific chains (Ethereum and Arbitrum). Each object includes the LayerZero Endpoint ID (`eid`) and the `contractName` deployed on that chain.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/uniswap-read/README.md#_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nconst ethereumContract: OmniPointHardhat = {\n  eid: EndpointId.ETHEREUM_V2_MAINNET,\n  contractName: \"MyOAppRead\",\n};\n\nconst arbitrumContract: OmniPointHardhat = {\n  eid: EndpointId.ARBITRUM_V2_MAINNET,\n  contractName: \"MyOAppRead\",\n};\n```\n\n----------------------------------------\n\nTITLE: Linking contracts with configuration files\nDESCRIPTION: Command to wire deployed contracts by providing an OApp configuration file, enabling integration and setup of cross-chain communication.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/oapp/README.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nnpx hardhat lz:oapp:wire --oapp-config layerzero.config.ts\n```\n\n----------------------------------------\n\nTITLE: Installing LayerZero Devtools with npm - Bash\nDESCRIPTION: This snippet explains how to install the @layerzerolabs/protocol-devtools package using npm. It adds the package as a project dependency and downloads it from the npm registry. The command uses the 'install' command without any special flags as npm manages dependencies automatically.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/packages/protocol-devtools/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @layerzerolabs/protocol-devtools\n```\n\n----------------------------------------\n\nTITLE: Set PRIVATE_KEY in .env file\nDESCRIPTION: This is the other option (besides mnemonic) for setting your deployer wallet/account in your .env file.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/oft-adapter/README.md#_snippet_11\n\nLANGUAGE: text\nCODE:\n```\nPRIVATE_KEY=\"0xabc...def\"\n```\n\n----------------------------------------\n\nTITLE: Installing Node.js Dependencies with pnpm Package Manager\nDESCRIPTION: This snippet installs all Node.js dependencies specified in the project manifest using the pnpm package manager. pnpm is recommended for faster and disk space optimized package installations.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/oft-solana/README.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npnpm install\n```\n\n----------------------------------------\n\nTITLE: Install Dependencies using pnpm (Bash)\nDESCRIPTION: This command uses the pnpm package manager to install all project dependencies as defined in `package.json`. It is a necessary first step before compiling or testing contracts.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/oft-adapter/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm install\n```\n\n----------------------------------------\n\nTITLE: Filesystem Utilities - isFile Function in @layerzerolabs/io-devtools\nDESCRIPTION: Determines if a specified filesystem path points to a file, returning true if it does. Handles errors gracefully by returning false if the path does not exist or is not a file. Utilizes Node.js filesystem methods to perform synchronous checks.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/packages/io-devtools/README.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction isFile(path) {\n  try {\n    const stat = fs.statSync(path);\n    return stat.isFile();\n  } catch (error) {\n    return false;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Network Endpoints in hardhat.config.ts\nDESCRIPTION: Example configuration for network endpoints in hardhat.config.ts file showing how to define Arbitrum Sepolia and Base Sepolia networks with their respective endpoint IDs, RPC URLs, and accounts.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/oft/README.md#_snippet_0\n\nLANGUAGE: yml\nCODE:\n```\n'arbitrum-sepolia': {\n    eid: EndpointId.ARBSEP_V2_TESTNET,\n    url: process.env.RPC_URL_ARBSEP_TESTNET,\n    accounts,\n},\n'base-sepolia': {\n    eid: EndpointId.BASESEP_V2_TESTNET,\n    url: process.env.RPC_URL_BASE_TESTNET,\n    accounts,\n},\n```\n\n----------------------------------------\n\nTITLE: Defining Bi-Directional Cross-Chain Connections in TypeScript\nDESCRIPTION: This snippet declares an array of connection objects that specify 'from' and 'to' contracts to establish pathways for cross-chain communication between Ethereum and Arbitrum networks. It provides the foundational mapping of communication directions but does not include configuration settings. It requires valid contract objects such as ethereumContract and arbitrumContract to be pre-defined, representing deployed smart contracts on respective chains.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/oft/README.md#_snippet_22\n\nLANGUAGE: TypeScript\nCODE:\n```\nconnections: [\n  // ETH <--> ARB PATHWAY: START\n  {\n    from: ethereumContract,\n    to: arbitrumContract,\n  },\n  {\n    from: arbitrumContract,\n    to: ethereumContract,\n  },\n  // ETH <--> ARB PATHWAY: END\n];\n```\n\n----------------------------------------\n\nTITLE: Sending Tokens from EVM using LayerZero SDK CLI (Bash)\nDESCRIPTION: Executes the `lz:sdk:evm:send-evm` command via pnpm to initiate a token transfer from a source EVM chain to a destination chain. Requires specifying the OApp configuration file, source and destination Endpoint IDs (EIDs), the recipient address (in hex format), the amount to send, and the minimum amount to receive. Placeholder values need to be replaced with actual configuration.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/oft-adapter-initia/README.md#_snippet_29\n\nLANGUAGE: Bash\nCODE:\n```\npnpm run lz:sdk:evm:send-evm \\\n  --oapp-config move.layerzero.config.ts \\\n  --src-eid <your-src-eid> \\\n  --dst-eid <your-dst-eid> \\\n  --to <your-source-account-address> \\\n  --amount <your-amount> \\\n  --min-amount <your-min-amount>\n```\n\n----------------------------------------\n\nTITLE: Compiling Contracts with Forge\nDESCRIPTION: This command compiles smart contracts using the Forge build tool. It executes the `forge build` command which requires Forge to be installed and configured correctly.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/uniswap-read/README.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\npnpm compile:forge\n```\n\n----------------------------------------\n\nTITLE: Installing LayerZero OApp EVM with pnpm - Bash\nDESCRIPTION: This bash command installs the @layerzerolabs/oapp-evm package using pnpm, a fast, disk space efficient package manager. Prerequisite: pnpm must be installed globally on your system. Use this command in your project directory to add LayerZero OApp for EVM-based development. The command requires no parameters and does not produce any output unless errors are encountered.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/packages/oapp-evm/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm install @layerzerolabs/oapp-evm\n```\n\n----------------------------------------\n\nTITLE: Deploy Solana Program with Priority Fee\nDESCRIPTION: Deploys the compiled Solana OFT program (`oft.so`) to the Devnet using the specified program ID keypair. Includes the `--with-compute-unit-price` flag to attach a priority fee, which can help land the transaction during network congestion.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/lzapp-migration/README.md#_snippet_16\n\nLANGUAGE: Bash\nCODE:\n```\nsolana program deploy --program-id target/deploy/oft-keypair.json target/verifiable/oft.so -u devnet --with-compute-unit-price <COMPUTE_UNIT_PRICE_IN_MICRO_LAMPORTS>\n```\n\n----------------------------------------\n\nTITLE: Configuring Pathway Settings\nDESCRIPTION: This TypeScript snippet provides detailed configuration settings for a cross-chain pathway between Ethereum and Arbitrum. It includes configurations for send and receive libraries, optional receive library timeouts, and configurations for sending and receiving messages, including DVN (Decentralized Verification Network) settings and enforced options for gas usage.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/oapp-read/README.md#_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nconnections: [\n  // ETH <--> ARB PATHWAY: START\n  {\n    from: ethereumContract,\n    to: arbitrumContract,\n    config: {\n      sendLibrary: contractsConfig.ethereum.sendLib302,\n      receiveLibraryConfig: {\n        receiveLibrary: contractsConfig.ethereum.receiveLib302,\n        gracePeriod: BigInt(0),\n      },\n      // Optional Receive Library Timeout for when the Old Receive Library Address will no longer be valid\n      receiveLibraryTimeoutConfig: {\n        lib: \"0x0000000000000000000000000000000000000000\",\n        expiry: BigInt(0),\n      },\n      // Optional Send Configuration\n      // @dev Controls how the `from` chain sends messages to the `to` chain.\n      sendConfig: {\n        executorConfig: {\n          maxMessageSize: 10000,\n          // The configured Executor address\n          executor: contractsConfig.ethereum.executor,\n        },\n        ulnConfig: {\n          // The number of block confirmations to wait on BSC before emitting the message from the source chain.\n          confirmations: BigInt(15),\n          // The address of the DVNs you will pay to verify a sent message on the source chain ).\n          // The destination tx will wait until ALL `requiredDVNs` verify the message.\n          requiredDVNs: [\n            contractsConfig.ethereum.horizenDVN, // Horizen\n            contractsConfig.ethereum.polyhedraDVN, // Polyhedra\n            contractsConfig.ethereum.animocaBlockdaemonDVN, // Animoca-Blockdaemon (only available on ETH <-> Arbitrum One)\n            contractsConfig.ethereum.lzDVN, // LayerZero Labs\n          ],\n          // The address of the DVNs you will pay to verify a sent message on the source chain ).\n          // The destination tx will wait until the configured threshold of `optionalDVNs` verify a message.\n          optionalDVNs: [],\n          // The number of `optionalDVNs` that need to successfully verify the message for it to be considered Verified.\n          optionalDVNThreshold: 0,\n        },\n      },\n      // Optional Receive Configuration\n      // @dev Controls how the `from` chain receives messages from the `to` chain.\n      receiveConfig: {\n        ulnConfig: {\n          // The number of block confirmations to expect from the `to` chain.\n          confirmations: BigInt(20),\n          // The address of the DVNs your `receiveConfig` expects to receive verifications from on the `from` chain ).\n          // The `from` chain's OApp will wait until the configured threshold of `requiredDVNs` verify the message.\n          requiredDVNs: [\n            contractsConfig.ethereum.lzDVN, // LayerZero Labs DVN\n            contractsConfig.ethereum.animocaBlockdaemonDVN, // Blockdaemon-Animoca\n            contractsConfig.ethereum.horizenDVN, // Horizen Labs\n            contractsConfig.ethereum.polyhedraDVN, // Polyhedra\n          ],\n          // The address of the `optionalDVNs` you expect to receive verifications from on the `from` chain ).\n          // The destination tx will wait until the configured threshold of `optionalDVNs` verify the message.\n          optionalDVNs: [],\n          // The number of `optionalDVNs` that need to successfully verify the message for it to be considered Verified.\n          optionalDVNThreshold: 0,\n        },\n      },\n      // Optional Enforced Options Configuration\n      // @dev Controls how much gas to use on the `to` chain, which the user pays for on the source `from` chain.\n      enforcedOptions: [\n        {\n          msgType: 1,\n          optionType: ExecutorOptionType.LZ_RECEIVE,\n          gas: 65000,\n          value: 0,\n        },\n        {\n          msgType: 2,\n          optionType: ExecutorOptionType.LZ_RECEIVE,\n          gas: 65000,\n          value: 0,\n        },\n        {\n          msgType: 2,\n          optionType: ExecutorOptionType.COMPOSE,\n          index: 0,\n          gas: 50000,\n          value: 0,\n        },\n      ],\n    },\n  },\n  {\n    from: arbitrumContract,\n    to: ethereumContract,\n  },\n  // ETH <--> ARB PATHWAY: END\n];\n```\n\n----------------------------------------\n\nTITLE: Initializing LayerZero OApp configuration file using Hardhat lz:oapp:config:init\nDESCRIPTION: Generates a 'layerzero.config.ts' file that defines pathways and connection settings between networks for deployed OApps, using provided contract name and output file name. It sets up default placeholders and connection parameters necessary for cross-chain operations.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/oft-upgradeable/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx hardhat lz:oapp:config:init --contract-name CONTRACT_NAME --oapp-config FILE_NAME\n```\n\n----------------------------------------\n\nTITLE: Installing OFT EVM Upgradeable Package with PNPM\nDESCRIPTION: Command to install the @layerzerolabs/oft-evm-upgradeable package using PNPM package manager.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/packages/oft-evm-upgradeable/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm install @layerzerolabs/oft-evm-upgradeable\n```\n\n----------------------------------------\n\nTITLE: Installing with pnpm\nDESCRIPTION: Installs the @layerzerolabs/protocol-devtools-evm package and adds it to the project dependencies using the pnpm package manager. The `--save` flag ensures the package is added to the `dependencies` section of the `package.json` file.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/packages/protocol-devtools-evm/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm install --save @layerzerolabs/protocol-devtools-evm\n```\n\n----------------------------------------\n\nTITLE: Sending message from Sepolia to Solana using Hardhat (bash)\nDESCRIPTION: This command initiates a cross-chain message from Sepolia testnet to Solana, specifying the destination address and amount. It triggers token transfer and message passing across the chain boundary.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/lzapp-migration/README.md#_snippet_25\n\nLANGUAGE: bash\nCODE:\n```\nnpx hardhat --network sepolia-testnet lz:oft-v1:send --dst-eid 40168 --amount 1000000000000000000 --to <SOLANA_ADDRESS>\n```\n\n----------------------------------------\n\nTITLE: Setting Up Basic LayerZero Pathway Connections in TypeScript\nDESCRIPTION: TypeScript configuration for defining bidirectional pathways between contracts deployed on different chains, allowing cross-chain communication between Ethereum and Arbitrum networks.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/oft-upgradeable/README.md#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nconnections: [\n  // ETH <--> ARB PATHWAY: START\n  {\n    from: ethereumContract,\n    to: arbitrumContract,\n  },\n  {\n    from: arbitrumContract,\n    to: ethereumContract,\n  },\n  // ETH <--> ARB PATHWAY: END\n];\n```\n\n----------------------------------------\n\nTITLE: Documenting LayerZero Configuration\nDESCRIPTION: This snippet adds documentation comments for layerzero.config, assisting developers in understanding configuration options and setup procedures within the project.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/packages/toolbox-hardhat/CHANGELOG.md#_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n// Documentation notes for layerzero.config setup and usage.\n```\n\n----------------------------------------\n\nTITLE: Creating Aptos Multisig Transaction via Aptos CLI\nDESCRIPTION: Uses the `aptos multisig create-transaction` command to generate a multisig transaction proposal on the Aptos blockchain from a JSON file previously exported by a CLI command (like the LayerZero SDK commands when choosing the export option). Requires the JSON file path, the multisig account address, and the proposer's private key.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/oft-adapter-aptos-move/README.md#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\naptos multisig create-transaction \\\n    --json-file <path-to-json-file> \\\n    --multisig-address <your-multisig-address> \\\n    --private-key-file <path-to-private-key> \\\n    --assume-yes\n```\n\n----------------------------------------\n\nTITLE: Generate Default LZ Config File - Bash\nDESCRIPTION: This command uses the Hardhat LayerZero plugin to initialize a default `layerzero.config.ts` file. It populates the file with configurations for the specified contract name across the networks declared in your `hardhat.config.ts`. Replace `[YOUR_CONTRACT_NAME]` and `[CONFIG_NAME]` with your desired values.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/oft/README.md#_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\nnpx hardhat lz:oapp:config:init --contract-name [YOUR_CONTRACT_NAME] --oapp-config [CONFIG_NAME]\n```\n\n----------------------------------------\n\nTITLE: Generating Default Config File\nDESCRIPTION: This bash command generates a default configuration file for declared hardhat networks, utilizing the provided contract name and configuration name. The command uses `npx hardhat` to execute the `lz:oapp-read:config:init` task.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/oapp-read/README.md#_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\nnpx hardhat lz:oapp-read:config:init --contract-name [YOUR_CONTRACT_NAME] --oapp-config [CONFIG_NAME]\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies using pnpm\nDESCRIPTION: This command installs the necessary project dependencies using the pnpm package manager.  This is a prerequisite step for compiling, testing, and deploying the smart contracts in this project.  It fetches and installs all the required packages listed in the `package.json` file.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/onft721-zksync/README.md#_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\npnpm install\n```\n\n----------------------------------------\n\nTITLE: Minting Tokens to Move VM OFT (Bash)\nDESCRIPTION: Mints a specified amount of tokens (`--amount-ld` in lowest denomination) to a target address (`--to-address` in hex format) on the Move VM OFT. This command uses the LayerZero SDK and requires the `mint` function to be added to the contract and the contract to be redeployed/initialized. Intended for testing.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/oft-adapter-initia/README.md#_snippet_27\n\nLANGUAGE: bash\nCODE:\n```\npnpm run lz:sdk:move:mint-to-move-oft --oapp-config move.layerzero.config.ts --amount-ld 1000000000000000000 --to-address <your-move-account-address>\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables for Initia/EVM (Bash)\nDESCRIPTION: Defines necessary environment variables in a `.env` file for deployment. It includes credentials for both EVM (mnemonic or private key) and Initia (bech32 address, private key hex, key name, REST/RPC URLs, chain ID). The Initia address must be in bech32 format.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/oft-adapter-initia/README.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# You only need to set one of these values based on your preference\nEVM_MNEMONIC=\nEVM_PRIVATE_KEY=\n\n# All Initia values below are required - testnet values can be found in the .env.example file\nINITIA_ACCOUNT_ADDRESS=<your-initia-bech32-account-address>\nINITIA_PRIVATE_KEY=<your-initia-private-key-hex>\nINITIA_KEY_NAME=<your-initia-key-name>\nINITIA_REST_URL=<your-initia-rest-url>\nINITIA_RPC_URL=<your-initia-rpc-url>\nINITIA_CHAIN_ID=<your-desired-initia-chain-id>\n```\n\n----------------------------------------\n\nTITLE: Permanently Disabling Blocklist on OFT Using pnpm Bash Command\nDESCRIPTION: Executes a script disabling blocklisting functionality permanently on the OFT contract to show commitment to no restrictions. Requires LayerZero config and deployed OFT. Outputs permanent state change disabling blocklist capabilities.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/oft-aptos-move/README.md#_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\npnpm run lz:sdk:move:permanently-disable-blocklist --oapp-config move.layerzero.config.ts\n```\n\n----------------------------------------\n\nTITLE: Initializing LayerZero OApp Configuration\nDESCRIPTION: Command to generate a default configuration file for LayerZero OApps based on the declared Hardhat networks, specifying the contract name and configuration name to be used.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/oft-upgradeable/README.md#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nnpx hardhat lz:oapp:config:init --contract-name [YOUR_CONTRACT_NAME] --oapp-config [CONFIG_NAME]\n```\n\n----------------------------------------\n\nTITLE: Normalizing Zero EVM Addresses with ignoreZero - TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates the use of ignoreZero from the @layerzerolabs/devtools-evm library to convert EVM zero addresses or null-like values to undefined. The function accepts an EVM address (as string, null, or undefined) and returns the original address string unless it is the EVM zero address ('0x0000000000000000000000000000000000000000'), null, or undefined, in which case it returns undefined. This utility is beneficial for sanitizing address input and simplifying checks for valid user-provided addresses in contract-interfacing applications. No additional dependencies are required beyond package installation.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/packages/devtools-evm/README.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ignoreZero } from \"@layerzerolabs/devtools-evm\";\n\nignoreZero(\"0xEe6cF2E1Bc7645F8439d241ce37820305F2BB3F8\"); // Returns '0xEe6cF2E1Bc7645F8439d241ce37820305F2BB3F8'\nignoreZero(\"0x0000000000000000000000000000000000000000\"); // Returns undefined\nignoreZero(undefined); // Returns undefined\nignoreZero(null); // Returns undefined\n```\n\n----------------------------------------\n\nTITLE: Generating Connection Config without Custom Parameters in TypeScript\nDESCRIPTION: Example of using the metadata-tools package to generate connection configurations between contracts on different chains with default parameters. This configures cross-chain messaging with enforced options for gas and value settings.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/packages/metadata-tools/README.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { generateConnectionsConfig } from \"@layerzerolabs/metadata-tools\";\n\nconst EVM_ENFORCED_OPTIONS: OAppEnforcedOption[] = [\n    {\n        msgType: 1,\n        optionType: ExecutorOptionType.LZ_RECEIVE,\n        gas: 80000,\n        value: 0,\n    },\n]\n\n// [srcContract, dstContract, [requiredDVNs, [optionalDVNs, threshold]], [srcToDstConfirmations, dstToSrcConfirmations]], [enforcedOptionsSrcToDst, enforcedOptionsDstToSrc]\nconst pathways = [\n  [avalancheContract, polygonContract, [['LayerZero Labs'], []], [1, 1], [EVM_ENFORCED_OPTIONS, EVM_ENFORCED_OPTIONS]],\n]\n\nconst connections = await generateConnectionsConfig(pathways)\n```\n\n----------------------------------------\n\nTITLE: Checking LayerZero OApp Pathway Configuration (Bash)\nDESCRIPTION: Execute this Hardhat task via the command line to retrieve and display the current configuration for your OApp on each configured chain and pathway. The output presents a comparison of your Custom Configuration (from `layerzero.config.ts`), the LayerZero Default Configuration, and the resulting Active Configuration. Specify the path to your OApp configuration file using the `--oapp-config` flag.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/view-pure-read/README.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpx hardhat lz:oapp-read:config:get --oapp-config YOUR_OAPP_CONFIG\n```\n\n----------------------------------------\n\nTITLE: Sending OFT from Solana to Sepolia\nDESCRIPTION: Command to send OFT tokens from Solana to Sepolia, specifying the amount, source endpoint ID, destination address, and destination endpoint ID.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/oft-solana/README.md#_snippet_23\n\nLANGUAGE: bash\nCODE:\n```\nnpx hardhat lz:oft:solana:send --amount <AMOUNT> --from-eid 40168 --to <TO> --to-eid 40161\n```\n\n----------------------------------------\n\nTITLE: Configuring Gnosis Safe in Hardhat\nDESCRIPTION: This snippet shows how to configure a Gnosis Safe as a signer for LayerZero transactions within a Hardhat project. This involves adding `safeConfig` to each network configuration within `hardhat.config.ts`.  The `safeUrl` and `safeAddress` are used to specify the Safe API URL and the Safe's address, respectively.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/oapp-read/README.md#_snippet_4\n\nLANGUAGE: YAML\nCODE:\n```\n// hardhat.config.ts\n\nnetworks: {\n  // Include configurations for other networks as needed\n  fuji: {\n    /* ... */\n    // Network-specific settings\n    safeConfig: {\n      safeUrl: 'http://something', // URL of the Safe API, not the Safe itself\n      safeAddress: 'address'\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Getting HardhatRuntimeEnvironment by Endpoint ID - TypeScript\nDESCRIPTION: This code snippet demonstrates how to get the HardhatRuntimeEnvironment (hre) by specifying an Endpoint ID (EID). The `createGetHreByEid` factory function from `@layerzerolabs/devtools-evm-hardhat` is used to instantiate an environment factory. The EID should be specified in the hardhat config under network `eid` field.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/CHEATSHEET.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// By endpoint ID (as specified in hardhat config, using the eid property of a network)\nimport { createGetHreByEid } from \"@layerzerolabs/devtools-evm-hardhat\";\n\n// In this case we need to instantiate an environment factory\nconst getEnvironment = createGetHreByEid();\n\nconst eid = EndpointId.AVALANCHE_TESTNET;\nconst environment = await getNetworkRuntimeEnvironmentByEid(eid);\n```\n\n----------------------------------------\n\nTITLE: Initializing Aptos CLI for Movement Chain in Bash\nDESCRIPTION: Initializes the Aptos CLI client to connect to a custom Movement chain network using a specified private key. Requires Aptos CLI installed and valid Movement network parameters. Produces CLI configs with RPC endpoints and authentication for interacting with the Movement testnet.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/oft-aptos-move/README.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\naptos init --network=custom --private-key=<your-private-key>\n```\n\n----------------------------------------\n\nTITLE: Creating and Syncing Solana Program ID Keypairs using Solana CLI and Anchor\nDESCRIPTION: This series of commands generates new Solana keypairs for the 'endpoint' and 'oft' programs using 'solana-keygen new' with the --force flag to overwrite existing keys. The 'anchor keys sync' synchronizes the generated keypairs with Anchor project configuration. These keypairs uniquely identify the deployed programs on Solana.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/oft-solana/README.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nsolana-keygen new -o target/deploy/endpoint-keypair.json --force\nsolana-keygen new -o target/deploy/oft-keypair.json --force\n\nanchor keys sync\n```\n\n----------------------------------------\n\nTITLE: Filesystem Utilities - isDirectory Function in @layerzerolabs/io-devtools\nDESCRIPTION: Checks whether a given path is a directory without throwing errors if the path does not exist. Returns true for directories, false for files, non-existent paths, or other filesystem entries. Requires Node.js filesystem modules and handles exceptions internally.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/packages/io-devtools/README.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction isDirectory(path) {\n  try {\n    const stat = fs.statSync(path);\n    return stat.isDirectory();\n  } catch (error) {\n    return false;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Detailed Messaging and Executor Settings for LayerZero Pathways in TypeScript\nDESCRIPTION: Defines an extended pathway connection configuration for LayerZero omnichain contracts including advanced messaging options. The configuration contains properties to specify send and receive libraries, timeout settings, and detailed send/receive behavior including executor gas limits, confirmation counts, and designated Decentralized Verification Nodes (DVNs). It also includes enforced options for gas use based on message types and executor option types. This configuration enables fine-tuned cross-chain interactions and verification control.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/oft-alt/README.md#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nconnections: [\n  // ETH <--> ARB PATHWAY: START\n  {\n    from: ethereumContract,\n    to: arbitrumContract,\n    config: {\n      sendLibrary: contractsConfig.ethereum.sendLib302,\n      receiveLibraryConfig: {\n        receiveLibrary: contractsConfig.ethereum.receiveLib302,\n        gracePeriod: BigInt(0),\n      },\n      // Optional Receive Library Timeout for when the Old Receive Library Address will no longer be valid\n      receiveLibraryTimeoutConfig: {\n        lib: \"0x0000000000000000000000000000000000000000\",\n        expiry: BigInt(0),\n      },\n      // Optional Send Configuration\n      // @dev Controls how the `from` chain sends messages to the `to` chain.\n      sendConfig: {\n        executorConfig: {\n          maxMessageSize: 10000,\n          // The configured Executor address\n          executor: contractsConfig.ethereum.executor,\n        },\n        ulnConfig: {\n          // The number of block confirmations to wait on BSC before emitting the message from the source chain.\n          confirmations: BigInt(15),\n          // The address of the DVNs you will pay to verify a sent message on the source chain ).\n          // The destination tx will wait until ALL `requiredDVNs` verify the message.\n          requiredDVNs: [\n            contractsConfig.ethereum.horizenDVN, // Horizen\n            contractsConfig.ethereum.polyhedraDVN, // Polyhedra\n            contractsConfig.ethereum.animocaBlockdaemonDVN, // Animoca-Blockdaemon (only available on ETH <-> Arbitrum One)\n            contractsConfig.ethereum.lzDVN, // LayerZero Labs\n          ],\n          // The address of the DVNs you will pay to verify a sent message on the source chain ).\n          // The destination tx will wait until the configured threshold of `optionalDVNs` verify a message.\n          optionalDVNs: [],\n          // The number of `optionalDVNs` that need to successfully verify the message for it to be considered Verified.\n          optionalDVNThreshold: 0,\n        },\n      },\n      // Optional Receive Configuration\n      // @dev Controls how the `from` chain receives messages from the `to` chain.\n      receiveConfig: {\n        ulnConfig: {\n          // The number of block confirmations to expect from the `to` chain.\n          confirmations: BigInt(20),\n          // The address of the DVNs your `receiveConfig` expects to receive verifications from on the `from` chain ).\n          // The `from` chain's OApp will wait until the configured threshold of `requiredDVNs` verify the message.\n          requiredDVNs: [\n            contractsConfig.ethereum.lzDVN, // LayerZero Labs DVN\n            contractsConfig.ethereum.animocaBlockdaemonDVN, // Blockdaemon-Animoca\n            contractsConfig.ethereum.horizenDVN, // Horizen Labs\n            contractsConfig.ethereum.polyhedraDVN, // Polyhedra\n          ],\n          // The address of the `optionalDVNs` you expect to receive verifications from on the `from` chain ).\n          // The destination tx will wait until the configured threshold of `optionalDVNs` verify the message.\n          optionalDVNs: [],\n          // The number of `optionalDVNs` that need to successfully verify the message for it to be considered Verified.\n          optionalDVNThreshold: 0,\n        },\n      },\n      // Optional Enforced Options Configuration\n      // @dev Controls how much gas to use on the `to` chain, which the user pays for on the source `from` chain.\n      enforcedOptions: [\n        {\n          msgType: 1,\n          optionType: ExecutorOptionType.LZ_RECEIVE,\n          gas: 65000,\n          value: 0,\n        },\n        {\n          msgType: 2,\n          optionType: ExecutorOptionType.LZ_RECEIVE,\n          gas: 65000,\n          value: 0,\n        },\n        {\n          msgType: 2,\n          optionType: ExecutorOptionType.COMPOSE,\n          index: 0,\n          gas: 50000,\n          value: 0,\n        },\n      ],\n    },\n  },\n  {\n    from: arbitrumContract,\n    to: ethereumContract,\n  },\n  // ETH <--> ARB PATHWAY: END\n];\n```\n\n----------------------------------------\n\nTITLE: Get LayerZero Executor Config - Bash\nDESCRIPTION: This command retrieves the LayerZero Executor configuration for each network defined in your `hardhat.config.ts`. It's useful for inspecting parameters like `nativeCap`, which indicates the maximum gas you can request for execution options on a destination network. Requires the LayerZero Hardhat plugin.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/oft/README.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpx hardhat lz:oapp:config:get:executor --oapp-config YOUR_OAPP_CONFIG\n```\n\n----------------------------------------\n\nTITLE: Transferring Move VM Object Ownership via LayerZero SDK\nDESCRIPTION: Executes the `lz:sdk:move:transfer-object-owner` command using pnpm to transfer the ownership (which includes upgrade authority) of the underlying Move VM object to a new address. Requires the OApp configuration file and the new owner's address.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/oft-adapter-aptos-move/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npnpm run lz:sdk:move:transfer-object-owner --oapp-config move.layerzero.config.ts --new-owner <new-owner-address>\n```\n\n----------------------------------------\n\nTITLE: Compiling Contracts Using Hardhat and Forge via pnpm Bash\nDESCRIPTION: Builds smart contracts supporting both Hardhat and Forge toolchains by default. Using `pnpm compile` runs both compilers sequentially. Separate commands allow runner-specific compilation. This flexibility facilitates interoperability in multi-tool environments.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/oft-alt/README.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\npnpm compile\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm compile:forge\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm compile:hardhat\n```\n\n----------------------------------------\n\nTITLE: Deploying LayerZero-enabled Contracts\nDESCRIPTION: Commands for deploying LayerZero-enabled contracts to various blockchains using the LayerZero deployment script, with options to get more information using the help flag.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/oft-upgradeable/README.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nnpx hardhat lz:deploy\nnpx hardhat lz:deploy --help\n```\n\n----------------------------------------\n\nTITLE: Deploying Contracts with Hardhat and lz:deploy\nDESCRIPTION: This command deploys the contracts to the desired blockchains using Hardhat's lz:deploy task.  It relies on the `.env` file being set up with a deployer wallet, which should be pre-funded with the necessary native tokens. The `lz:deploy` task is a custom Hardhat task provided by the project.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/onft721-zksync/README.md#_snippet_8\n\nLANGUAGE: Bash\nCODE:\n```\nnpx hardhat lz:deploy\n```\n\n----------------------------------------\n\nTITLE: Wiring LayerZero Pathways Between Chains\nDESCRIPTION: Command to wire the pathways specified in the LayerZero config file, connecting the OFT contracts across different chains.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/oft-solana/README.md#_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\nnpx hardhat lz:oapp:wire --oapp-config layerzero.config.ts\n```\n\n----------------------------------------\n\nTITLE: Compiling Contracts Using npm Scripts\nDESCRIPTION: npm scripts for compiling smart contracts with both Hardhat and Forge build systems, allowing developers to choose their preferred compilation method or use both.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/oft-upgradeable/README.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npnpm compile\npnpm compile:forge\npnpm compile:hardhat\n```\n\n----------------------------------------\n\nTITLE: Running Tests with Forge and Hardhat (Bash)\nDESCRIPTION: Runs the combined test command which executes both Forge tests (`forge test`) and Hardhat tests (`hardhat test`) sequentially by default.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/view-pure-read/README.md#_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\npnpm test\n```\n\n----------------------------------------\n\nTITLE: Installing LayerZero Test DevTools via NPM\nDESCRIPTION: Command for installing the @layerzerolabs/test-devtools package using NPM. This package provides internal helpers for testing LayerZero packages in a development environment.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/packages/test-devtools/README.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @layerzerolabs/test-devtools\n```\n\n----------------------------------------\n\nTITLE: Initializing OFT Program Configuration via Hardhat (bash)\nDESCRIPTION: This command initializes the OFT program's send and receive configurations on Solana, setting up necessary accounts and pathway parameters for cross-chain messaging. It should be run only once during initial setup or when adding new pathways.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/lzapp-migration/README.md#_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\nnpx hardhat lz:oft:solana:init-config --oapp-config layerzero.config.ts --solana-eid <SOLANA_ENDPOINT_ID>\n```\n\n----------------------------------------\n\nTITLE: Defining LayerZero OApp Contract Points in TypeScript\nDESCRIPTION: TypeScript code showing how to define contract endpoints for different chains, specifying the endpoint ID (eid) and contract name for each chain to connect via LayerZero.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/oft-upgradeable/README.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nconst ethereumContract: OmniPointHardhat = {\n  eid: EndpointId.ETHEREUM_V2_MAINNET,\n  contractName: \"MyOFTAdapter\",\n};\n\nconst arbitrumContract: OmniPointHardhat = {\n  eid: EndpointId.ARBITRUM_V2_MAINNET,\n  contractName: \"MyOFT\",\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Basic LayerZero Connection Pathways (TypeScript)\nDESCRIPTION: Illustrates the basic structure for defining communication pathways between contracts in the `connections` array within `layerzero.config.ts`. This example sets up a bidirectional pathway between the previously defined Ethereum and Arbitrum contracts.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/uniswap-read/README.md#_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nconnections: [\n  // ETH <--> ARB PATHWAY: START\n  {\n    from: ethereumContract,\n    to: arbitrumContract,\n  },\n  {\n    from: arbitrumContract,\n    to: ethereumContract,\n  },\n  // ETH <--> ARB PATHWAY: END\n];\n```\n\n----------------------------------------\n\nTITLE: Compiling Contracts with Hardhat\nDESCRIPTION: This command compiles contracts using Hardhat. It runs the `hardhat compile` command.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/oapp-read/README.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\npnpm compile:hardhat\n```\n\n----------------------------------------\n\nTITLE: Upgrade Contract Dependencies to Version 2.1.7\nDESCRIPTION: This patch increases contract dependencies to version 2.1.7, enabling latest contract features, bug fixes, and optimizations across related packages.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/packages/toolbox-hardhat/CHANGELOG.md#_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n// Dependency upgrade to contract dependencies version 2.1.7.\n```\n\n----------------------------------------\n\nTITLE: Creating Solana OFT Token Using Hardhat with Custom Parameters\nDESCRIPTION: This snippet runs a Hardhat task defined as 'lz:oft:solana:create', which creates the OFT token on Solana, specifying the endpoint ID and the deployed program ID. It supports flags for additional minters via CSV and amount to mint. This bridges OFT token creation from development environment to blockchain.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/oft-solana/README.md#_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\npnpm hardhat lz:oft:solana:create --eid 40168 --program-id <PROGRAM_ID>\n```\n\n----------------------------------------\n\nTITLE: Getting HardhatRuntimeEnvironment by Network Name - TypeScript\nDESCRIPTION: This code snippet shows how to obtain the HardhatRuntimeEnvironment (hre) for a given network name. This function utilizes the `@layerzerolabs/devtools-evm-hardhat` package.  The network name must be defined in the hardhat configuration file.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/CHEATSHEET.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// By network name (as specified in hardhat config)\nimport { getHreByNetworkName } from \"@layerzerolabs/devtools-evm-hardhat\";\n\nconst environment = await getHreByNetworkName(\"avalanche-testnet\");\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies using pnpm\nDESCRIPTION: This command installs all the project dependencies using the `pnpm` package manager. It's recommended for managing dependencies, but other package managers can be used. It fetches and installs all the necessary packages defined in `package.json` to set up the project environment.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/onft721/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm install\n```\n\n----------------------------------------\n\nTITLE: Compiling contracts with pnpm\nDESCRIPTION: Default command to compile smart contracts supporting both Hardhat and Forge tools. It executes both compilation scripts unless tailored otherwise.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/oapp/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm compile\n```\n\n----------------------------------------\n\nTITLE: Compile Contracts (Forge & Hardhat) - Bash\nDESCRIPTION: This command executes the default compile script defined in `package.json`, which typically runs both Forge and Hardhat compilation tasks sequentially to build all smart contracts in the project.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/oft/README.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\npnpm compile\n```\n\n----------------------------------------\n\nTITLE: Define lzCompose Gas Profiling Script - JSON\nDESCRIPTION: This JSON snippet defines a pnpm script in `package.json` to run a Foundry script (`GasProfiler.s.sol`) specifically configured to profile the gas usage of the `lzCompose` function across multiple runs. It uses the `--via-ir` flag for compilation and specifies the exact function signature.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/oft/README.md#_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n\"gas:lzCompose\": \"forge script scripts/GasProfiler.s.sol:GasProfilerScript --via-ir --sig 'run_lzCompose(string,address,uint32,address,uint32,address,address,bytes,uint256,uint256)'\"\n```\n\n----------------------------------------\n\nTITLE: Installing @layerzerolabs/build-devtools using pnpm\nDESCRIPTION: Installs the @layerzerolabs/build-devtools package using the pnpm package manager. This command downloads and adds the package to your project's dependencies.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/packages/build-devtools/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm install @layerzerolabs/build-devtools\n```\n\n----------------------------------------\n\nTITLE: Defining LayerZero Contract Read Configurations (TypeScript)\nDESCRIPTION: Shows how to configure the `contracts` array in `layerzero.config.ts`. This example focuses on setting up `readChannelConfigs` for the Arbitrum contract, including the read library, channel ID, activity status, ULN config (executor, required/optional DVNs, threshold), and enforced options controlling gas usage and payload size for read operations.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/uniswap-read/README.md#_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\ncontracts: [\n  {\n    contract: arbitrumContract,\n    config: {\n      readChannelConfigs: [\n        {\n          channelId: 4294967295,\n          readLibrary: contractsConfig.arbitrum.readLib1002\n          active: true,\n          ulnConfig: {\n            // The address of the Executor that will deliver the message\n            executor: contractConfig.arbitrum.lzExecutor\n            // The address of the DVNs your `receiveConfig` expects to receive verifications from on the `from` chain ).\n            // The `from` chain's OApp will wait until the configured threshold of `requiredDVNs` verify the message.\n            requiredDVNs: [\n              contractsConfig.arbitrum.lzDVN, // LayerZero Labs DVN\n              contractsConfig.arbitrum.nethermindDVN, // Nethermind DVN\n            ],\n            // The address of the `optionalDVNs` you expect to receive verifications from on the `from` chain ).\n            // The destination tx will wait until the configured threshold of `optionalDVNs` verify the message.\n            optionalDVNs: [],\n            // The number of `optionalDVNs` that need to successfully verify the message for it to be considered Verified.\n            optionalDVNThreshold: 0,\n          },\n          // Optional Enforced Options Configuration\n          // @dev Controls how much gas to use when delivering the resolved payload, as well as the expected size of the payload\n          enforcedOptions: [\n            {\n              msgType: 1,\n              optionType: ExecutorOptionType.LZ_READ,\n              gas: 65000,\n              value: 0,\n              size: 100,\n            },\n          ],\n        },\n      ],\n    },\n  },\n  {\n    contract: ethereumContract,\n  },\n],\n```\n\n----------------------------------------\n\nTITLE: Running lz:oapp:wire Task with OApp Configuration\nDESCRIPTION: Command to execute the wiring process that configures connections between deployed OApp contracts on different chains based on the specified LayerZero configuration file.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/oft/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpx hardhat lz:oapp:wire --oapp-config YOUR_LAYERZERO_CONFIG_FILE\n```\n\n----------------------------------------\n\nTITLE: Setting Adapter Rate Limit for Move Contract (Bash)\nDESCRIPTION: Configures the rate limit for token transfers from the Move VM OFT to a specific destination Endpoint ID (eid). It specifies the maximum amount (`--rate-limit` in local decimals) allowed within a time window (`--window-seconds`). Capacity is netted against received tokens and replenishes over the window.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/oft-adapter-initia/README.md#_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\npnpm run lz:sdk:move:adapter-set-rate-limit --oapp-config move.layerzero.config.ts --rate-limit 10000 --window-seconds number --to-eid number\n```\n\n----------------------------------------\n\nTITLE: Setting Rate Limit for OFT Transfers Using pnpm Bash Command\nDESCRIPTION: Sets a rate limit and capacity window for OFT token transfers across specific chain pathways per interval, controlling maximum net token transfer. Inputs include rate limit tokens and window seconds. Updates on-chain state to enforce rate limiting on the named endpoint. Requires LayerZero config with target endpoint specified.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/oft-aptos-move/README.md#_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\npnpm run lz:sdk:move:set-rate-limit --oapp-config move.layerzero.config.ts --rate-limit 10000 --window-seconds 60 --to-eid number\n```\n\n----------------------------------------\n\nTITLE: Configuring ONFT721Adapter\nDESCRIPTION: This code snippet shows how to configure the `ONFT721Adapter` in the `hardhat.config.ts` file. It involves specifying the address of the ERC721 token that the adapter should interact with. Replace `0x0` with the actual token address. This configuration is crucial for enabling the ONFT721 functionality with a specific ERC721 token.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/onft721/README.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n  // Replace `0x0` with the address of the ERC721 token you want to adapt to the ONFT721 functionality.\n  onft721Adapter: {\n      tokenAddress: '0x0',\n  }\n```\n\n----------------------------------------\n\nTITLE: Configuring Foundry project to include @layerzerolabs/toolbox-foundry - toml\nDESCRIPTION: Instructions for including the @layerzerolabs/toolbox-foundry library path in the Foundry project configuration file (foundry.toml). This setup is necessary to enable Foundry to resolve the package during build or tests by specifying it in the libs array alongside any other library folders.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/packages/toolbox-foundry/README.md#_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\nlibs = [\n  'node_modules/@layerzerolabs/toolbox-foundry/lib',\n  # Any other library folders you need, e.g.\n  'node_modules'\n]\n```\n\n----------------------------------------\n\nTITLE: Running Tests with Hardhat\nDESCRIPTION: This command runs tests using the Hardhat testing environment.  It executes the `hardhat test` command, assuming Hardhat is installed and configured correctly within the project.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/uniswap-read/README.md#_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\npnpm test:hardhat\n```\n\n----------------------------------------\n\nTITLE: LayerZero OApp Configuration Example\nDESCRIPTION: Shows an example of a `layerzero.config.ts` file, which defines the contract configurations and connections between different networks. This configuration includes details like endpoint IDs, contract names, send/receive libraries, and ULN (Ultra Light Node) configurations. This configuration is used to define how messages are sent between chains.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/oft-alt/README.md#_snippet_2\n\nLANGUAGE: YAML\nCODE:\n```\nimport { EndpointId } from '@layerzerolabs/lz-definitions'\n\nconst arbsepContract = {\n    eid: EndpointId.ARBSEP_V2_TESTNET,\n    contractName: 'MyOFT',\n}\nconst sepoliaContract = {\n    eid: EndpointId.SEPOLIA_V2_TESTNET,\n    contractName: 'MyOFT',\n}\n\nexport default {\n    contracts: [{ contract: arbsepContract }, { contract: sepoliaContract }],\n    connections: [\n        {\n            from: arbsepContract,\n            to: sepoliaContract,\n            config: {\n                sendLibrary: '0x4f7cd4DA19ABB31b0eC98b9066B9e857B1bf9C0E',\n                receiveLibraryConfig: { receiveLibrary: '0x75Db67CDab2824970131D5aa9CECfC9F69c69636', gracePeriod: 0 },\n                sendConfig: {\n                    executorConfig: { maxMessageSize: 10000, executor: '0x5Df3a1cEbBD9c8BA7F8dF51Fd632A9aef8308897' },\n                    ulnConfig: {\n                        confirmations: 1,\n                        requiredDVNs: ['0x53f488E93b4f1b60E8E83aa374dBe1780A1EE8a8'],\n                        optionalDVNs: [],\n                        optionalDVNThreshold: 0,\n                    },\n                },\n                // receiveConfig: {\n                //     ulnConfig: {\n                //         confirmations: 2,\n                //         requiredDVNs: ['0x53f488E93b4f1b60E8E83aa374dBe1780A1EE8a8'],\n                //         optionalDVNs: [],\n                //         optionalDVNThreshold: 0,\n                //     },\n                // },\n            },\n        },\n        {\n            from: sepoliaContract,\n            to: arbsepContract,\n            config: {\n                sendLibrary: '0xcc1ae8Cf5D3904Cef3360A9532B477529b177cCE',\n                receiveLibraryConfig: { receiveLibrary: '0xdAf00F5eE2158dD58E0d3857851c432E34A3A851', gracePeriod: 0 },\n                // sendConfig: {\n                //     executorConfig: { maxMessageSize: 10000, executor: '0x718B92b5CB0a5552039B593faF724D182A881eDA' },\n                //     ulnConfig: {\n                //         confirmations: 2,\n                //         requiredDVNs: ['0x8eebf8b423B73bFCa51a1Db4B7354AA0bFCA9193'],\n                //         optionalDVNs: [],\n                //         optionalDVNThreshold: 0,\n                //     },\n                // },\n                receiveConfig: {\n                    ulnConfig: {\n                        confirmations: 1,\n                        requiredDVNs: ['0x8eebf8b423B73bFCa51a1Db4B7354AA0bFCA9193'],\n                        optionalDVNs: [],\n                        optionalDVNThreshold: 0,\n                    },\n                },\n            },\n        },\n    ],\n}\n```\n\n----------------------------------------\n\nTITLE: Compile Contracts with Forge - Bash\nDESCRIPTION: This command executes the Forge-specific compilation script defined in `package.json`. Use this if you only want to compile contracts using the Foundry build system.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/oft/README.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\npnpm compile:forge\n```\n\n----------------------------------------\n\nTITLE: Using Hardhat-specific compile command\nDESCRIPTION: Command to compile contracts solely with Hardhat, useful for projects favoring Hardhat tools.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/oapp/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npnpm compile:hardhat\n```\n\n----------------------------------------\n\nTITLE: Expected JSON Output for Move OApp Admin Verification\nDESCRIPTION: Shows the expected JSON structure within the output of the `aptos account list` command when verifying the OApp administrator. The `admin` field inside the specific OApp's `OAppStore` resource indicates the address designated as the administrator.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/oft-adapter-aptos-move/README.md#_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n    {\n      \"<your-oft-address>::oapp_store::OAppStore\": {\n        \"admin\": \"0x<ADMIN_ADDRESS>\",\n        ...\n      }\n    }\n```\n\n----------------------------------------\n\nTITLE: Installing @layerzerolabs/oft-evm with npm in Bash\nDESCRIPTION: This snippet provides the command to install the @layerzerolabs/oft-evm package using the npm package manager. It requires npm to be installed and will add the package to the project's dependencies for use in EVM-based blockchain development environments.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/packages/oft-evm/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @layerzerolabs/oft-evm\n```\n\n----------------------------------------\n\nTITLE: Configuring Detailed LayerZero Connection Pathways (TypeScript)\nDESCRIPTION: Provides a detailed example of configuring a specific pathway (Ethereum to Arbitrum) within the `connections` array. It includes settings for send/receive libraries, optional library timeouts, send/receive ULN configurations (confirmations, required/optional DVNs, thresholds), and enforced options for gas usage and message types.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/uniswap-read/README.md#_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nconnections: [\n  // ETH <--> ARB PATHWAY: START\n  {\n    from: ethereumContract,\n    to: arbitrumContract,\n    config: {\n      sendLibrary: contractsConfig.ethereum.sendLib302,\n      receiveLibraryConfig: {\n        receiveLibrary: contractsConfig.ethereum.receiveLib302,\n        gracePeriod: BigInt(0),\n      },\n      // Optional Receive Library Timeout for when the Old Receive Library Address will no longer be valid\n      receiveLibraryTimeoutConfig: {\n        lib: \"0x0000000000000000000000000000000000000000\",\n        expiry: BigInt(0),\n      },\n      // Optional Send Configuration\n      // @dev Controls how the `from` chain sends messages to the `to` chain.\n      sendConfig: {\n        executorConfig: {\n          maxMessageSize: 10000,\n          // The configured Executor address\n          executor: contractsConfig.ethereum.executor,\n        },\n        ulnConfig: {\n          // The number of block confirmations to wait on BSC before emitting the message from the source chain.\n          confirmations: BigInt(15),\n          // The address of the DVNs you will pay to verify a sent message on the source chain ).\n          // The destination tx will wait until ALL `requiredDVNs` verify the message.\n          requiredDVNs: [\n            contractsConfig.ethereum.horizenDVN, // Horizen\n            contractsConfig.ethereum.polyhedraDVN, // Polyhedra\n            contractsConfig.ethereum.animocaBlockdaemonDVN, // Animoca-Blockdaemon (only available on ETH <-> Arbitrum One)\n            contractsConfig.ethereum.lzDVN, // LayerZero Labs\n          ],\n          // The address of the DVNs you will pay to verify a sent message on the source chain ).\n          // The destination tx will wait until the configured threshold of `optionalDVNs` verify a message.\n          optionalDVNs: [],\n          // The number of `optionalDVNs` that need to successfully verify the message for it to be considered Verified.\n          optionalDVNThreshold: 0,\n        },\n      },\n      // Optional Receive Configuration\n      // @dev Controls how the `from` chain receives messages from the `to` chain.\n      receiveConfig: {\n        ulnConfig: {\n          // The number of block confirmations to expect from the `to` chain.\n          confirmations: BigInt(20),\n          // The address of the DVNs your `receiveConfig` expects to receive verifications from on the `from` chain ).\n          // The `from` chain's OApp will wait until the configured threshold of `requiredDVNs` verify the message.\n          requiredDVNs: [\n            contractsConfig.ethereum.lzDVN, // LayerZero Labs DVN\n            contractsConfig.ethereum.animocaBlockdaemonDVN, // Blockdaemon-Animoca\n            contractsConfig.ethereum.horizenDVN, // Horizen Labs\n            contractsConfig.ethereum.polyhedraDVN, // Polyhedra\n          ],\n          // The address of the `optionalDVNs` you expect to receive verifications from on the `from` chain ).\n          // The destination tx will wait until the configured threshold of `optionalDVNs` verify the message.\n          optionalDVNs: [],\n          // The number of `optionalDVNs` that need to successfully verify the message for it to be considered Verified.\n          optionalDVNThreshold: 0,\n        },\n      },\n      // Optional Enforced Options Configuration\n      // @dev Controls how much gas to use on the `to` chain, which the user pays for on the source `from` chain.\n      enforcedOptions: [\n        {\n          msgType: 1,\n          optionType: ExecutorOptionType.LZ_RECEIVE,\n          gas: 65000,\n          value: 0,\n        },\n        {\n          msgType: 2,\n          optionType: ExecutorOptionType.LZ_RECEIVE,\n          gas: 65000,\n          value: 0,\n        },\n        {\n          msgType: 2,\n          optionType: ExecutorOptionType.COMPOSE,\n          index: 0,\n          gas: 50000,\n          value: 0,\n        },\n      ],\n    },\n  },\n  {\n    from: arbitrumContract,\n    to: ethereumContract,\n  },\n  // ETH <--> ARB PATHWAY: END\n];\n```\n\n----------------------------------------\n\nTITLE: Verifying Aptos CLI Configuration in Bash\nDESCRIPTION: Outputs the contents of the Aptos CLI configuration file to verify correct setup of RPC endpoints, private keys, and account addresses. Requires proper initialization done prior. Outputs YAML data with configuration details.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/oft-aptos-move/README.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncat .aptos/config.yaml\n```\n\n----------------------------------------\n\nTITLE: Unsetting Rate Limit for OFT Transfers Using pnpm Bash Command\nDESCRIPTION: Removes any configured rate limit on OFT token transfers for the specified endpoint ID, restoring unrestricted token movement across that pathway. Requires LayerZero config file. Outputs updated on-chain state for rate limiting removal.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/oft-aptos-move/README.md#_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\npnpm run lz:sdk:move:unset-rate-limit --oapp-config move.layerzero.config.ts --to-eid number\n```\n\n----------------------------------------\n\nTITLE: Installing OFT EVM Upgradeable Package with NPM\nDESCRIPTION: Command to install the @layerzerolabs/oft-evm-upgradeable package using NPM package manager.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/packages/oft-evm-upgradeable/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @layerzerolabs/oft-evm-upgradeable\n```\n\n----------------------------------------\n\nTITLE: Previewing Rent Costs for Solana Program Deployment\nDESCRIPTION: This snippet calculates the rent-exempt minimum SOL required to deploy the compiled Solana program by piping the compiled program file's byte size to the 'solana rent' command. This helps developers estimate required SOL funds for deployment.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/oft-solana/README.md#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nsolana rent $(wc -c < target/verifiable/oft.so)\n```\n\n----------------------------------------\n\nTITLE: Specifying Solana OFT Address in JSON for Move-VM Wiring\nDESCRIPTION: Provides JSON snippet to specify the OFT store address for the Solana contract to enable wiring between Solana and Move VM chains. Requires appropriate address obtained from Solana deployments. This file is placed under deployments/solana-mainnet or solana-testnet folders depending on network used.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/oft-aptos-move/README.md#_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"address\": <oft-store-address-from-solana-deployment-folder>\n}\n```\n\n----------------------------------------\n\nTITLE: Building Move Contracts for LayerZero OFT Using pnpm Bash Command\nDESCRIPTION: Invokes a pnpm script to build Move VM OFT contracts specified in the given config file. The command runs the LayerZero SDK build process targeting the OFT open application type. Requires pnpm environment, Move contract sources, and a valid move.layerzero.config.ts file. Outputs compiled Move bytecode ready for deployment.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/oft-aptos-move/README.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\npnpm run lz:sdk:move:build --oapp-config move.layerzero.config.ts --oapp-type oft\n```\n\n----------------------------------------\n\nTITLE: Wiring LayerZero OApp Configurations\nDESCRIPTION: Command to apply the LayerZero configurations defined in the configuration file to the deployed contracts, setting up the pathways between different chains for cross-chain communication.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/oft-upgradeable/README.md#_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nnpx hardhat lz:oapp:wire --oapp-config layerzero.config.ts\n```\n\n----------------------------------------\n\nTITLE: Running tests with pnpm\nDESCRIPTION: Default command to run tests supporting both Forge and Hardhat, executing both test suites unless customized.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/oapp/README.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npnpm test\n```\n\n----------------------------------------\n\nTITLE: Establishing Pathway Connections Between Ethereum and Arbitrum Contracts in TypeScript\nDESCRIPTION: Creates a bidirectional connection array object defining LayerZero cross-chain pathways from Ethereum to Arbitrum and vice versa. Each pathway uses the previously defined contract objects as `from` and `to` properties, enabling communication routes. This configuration is essential to set up cross-chain messaging in the omnichain setup.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/oft-alt/README.md#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nconnections: [\n  // ETH <--> ARB PATHWAY: START\n  {\n    from: ethereumContract,\n    to: arbitrumContract,\n  },\n  {\n    from: arbitrumContract,\n    to: ethereumContract,\n  },\n  // ETH <--> ARB PATHWAY: END\n];\n```\n\n----------------------------------------\n\nTITLE: Configuring Solana Contract in LayerZero Config\nDESCRIPTION: TypeScript configuration for Solana contract in the LayerZero config file. The address is auto-populated with the OFT store address from the deployment file.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/oft-solana/README.md#_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nconst solanaContract: OmniPointHardhat = {\n  eid: EndpointId.SOLANA_V2_TESTNET,\n  address: getOftStoreAddress(EndpointId.SOLANA_V2_TESTNET),\n};\n```\n\n----------------------------------------\n\nTITLE: Compile Contracts using Forge (Bash)\nDESCRIPTION: This command compiles contracts specifically using the Forge build tool.  It is useful when you only want to compile using Forge.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/oft-adapter/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npnpm compile:forge\n```\n\n----------------------------------------\n\nTITLE: Compiling Contracts with Forge\nDESCRIPTION: This command compiles the smart contracts using Forge. It's an alternative to the default compilation process and is used when targeting Forge. This command builds all contracts defined in the project and provides tooling specific artifacts.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/onft721/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npnpm compile:forge\n```\n\n----------------------------------------\n\nTITLE: Transferring Move OApp Ownership via LayerZero SDK\nDESCRIPTION: Runs the `lz:sdk:move:transfer-oapp-owner` command via pnpm to transfer the administrative ownership of the OApp on the Move VM to a specified new owner address. Requires the OApp configuration file and the new owner's address.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/oft-adapter-aptos-move/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm run lz:sdk:move:transfer-oapp-owner --oapp-config move.layerzero.config.ts --new-owner <new-owner-address>\n```\n\n----------------------------------------\n\nTITLE: Minting tokens to a Move OFT account\nDESCRIPTION: A bash command to mint tokens to a specified Move account address. This command uses the LayerZero SDK and requires a configured Move OFT setup.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/oft-initia/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm run lz:sdk:move:mint-to-move-oft --oapp-config move.layerzero.config.ts --amount-ld 1000000000000000000 --to-address <your-move-account-address>\n```\n\n----------------------------------------\n\nTITLE: Bootstrapping OFT Solana Example Project Using npx Command\nDESCRIPTION: This snippet uses npx to run a package from the npm registry called 'create-lz-oapp' with an environment variable flag to enable the Solana OFT example setup. This command scaffolds the project directory and files for the OFT example, facilitating quick project initialization.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/oft-solana/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nLZ_ENABLE_SOLANA_OFT_EXAMPLE=1 npx create-lz-oapp@latest\n```\n\n----------------------------------------\n\nTITLE: Compiling Contracts using pnpm\nDESCRIPTION: This command compiles the smart contracts in the project. By default, it executes both Hardhat and Forge compilation. It utilizes the tooling specific command for compilation based on configuration, generating the necessary artifacts for deployment and testing. The output includes compiled contract ABIs and bytecode.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/onft721/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm compile\n```\n\n----------------------------------------\n\nTITLE: Configuring Contract Wiring Owner and Delegate Addresses in TypeScript\nDESCRIPTION: Shows assignment of owner and delegate addresses in the contracts array inside a TypeScript LayerZero config file. Ensures correct ownership is set for contract wiring operations. Requires consistent addresses and valid LayerZero configuration format for cross-chain wiring commands.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/oft-aptos-move/README.md#_snippet_15\n\nLANGUAGE: ts\nCODE:\n```\n    contracts: [\n        {\n            contract: your_contract_name,\n            config: {\n                owner: 'YOUR_ACCOUNT_ADDRESS',\n                delegate: 'YOUR_ACCOUNT_ADDRESS',\n            },\n        },\n        ...\n    ]\n```\n\n----------------------------------------\n\nTITLE: Testing Contracts using pnpm\nDESCRIPTION: The `pnpm test` command runs the tests defined within the project's test suites, using both hardhat and forge. Similar to compilation, it runs both testing commands by default, which can be configured by altering the `package.json`.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/onft721-zksync/README.md#_snippet_5\n\nLANGUAGE: Bash\nCODE:\n```\npnpm test\n```\n\n----------------------------------------\n\nTITLE: Installing dependencies with pnpm\nDESCRIPTION: Command to install project dependencies using pnpm package manager, recommended for setting up the development environment.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/oapp/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm install\n```\n\n----------------------------------------\n\nTITLE: Deploying Sepolia OFT Peer using Hardhat\nDESCRIPTION: Command to deploy an OFT peer contract on Sepolia EVM chain using the interactive Hardhat deployment process.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/oft-solana/README.md#_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\npnpm hardhat lz:deploy # follow the prompts\n```\n\n----------------------------------------\n\nTITLE: Setting Fee Basis Points for Move-VM OFT Using pnpm Bash Command\nDESCRIPTION: Configures the fee basis points (bps) charged on OFT cross-chain transfers to a specified endpoint ID using the LayerZero config file. Requires valid project config and endpoint IDs. Outputs updated fee configuration on-chain for the OFT routes.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/oft-aptos-move/README.md#_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\npnpm run lz:sdk:move:set-fee --oapp-config move.layerzero.config.ts --fee-bps 1000 --to-eid number\n```\n\n----------------------------------------\n\nTITLE: Get LayerZero OApp Executor Config (Hardhat Bash)\nDESCRIPTION: Executes the LayerZero Hardhat task `lz:oapp:config:get:executor` to retrieve the executor configuration for the specified OApp config file (`YOUR_OAPP_CONFIG`). This command helps users verify network-specific executor settings, such as the maximum destination gas (`nativeCap`). Requires Node.js, Hardhat, and the LayerZero Hardhat plugin (`@layerzerolabs/hardhat-lz-oapp`) to be installed and configured.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/uniswap-read/README.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpx hardhat lz:oapp:config:get:executor --oapp-config YOUR_OAPP_CONFIG\n```\n\n----------------------------------------\n\nTITLE: Transferring Ownership of OFT Contracts\nDESCRIPTION: Command to transfer ownership of OFT contracts after configuring the owner in the LayerZero config file.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/oft-solana/README.md#_snippet_26\n\nLANGUAGE: bash\nCODE:\n```\nnpx hardhat lz:ownable:transfer-ownership --oapp-config layerzero.config.ts\n```\n\n----------------------------------------\n\nTITLE: Installing Specific Solana CLI Version v1.17.31 Using Shell Command\nDESCRIPTION: This snippet installs Solana CLI version 1.17.31 by executing a shell command that downloads and runs the official Solana installer script. This allows developers to interact with the Solana blockchain for building and deploying programs. Using the specified version is critical for compatibility with the Anchor framework version used.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/oft-solana/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsh -c \"$(curl -sSfL https://release.solana.com/v1.17.31/install)\"\n```\n\n----------------------------------------\n\nTITLE: Configuring EVM Contract Delegate and Owner (TypeScript)\nDESCRIPTION: Specifies the owner and delegate addresses for EVM contracts within the `move.layerzero.config.ts` configuration file before wiring. Replace `YOUR_ACCOUNT_ADDRESS` with the appropriate EVM address.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/oft-adapter-initia/README.md#_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\n    contracts: [\n        {\n            contract: your_contract_name,\n            config: {\n                owner: 'YOUR_ACCOUNT_ADDRESS',\n                delegate: 'YOUR_ACCOUNT_ADDRESS',\n            },\n        },\n        ...\n    ]\n```\n\n----------------------------------------\n\nTITLE: Updating LayerZero configuration in TypeScript file (TypeScript)\nDESCRIPTION: This code updates the `layerzero.config.ts` file by setting the `solanaContract.address` to the `oftStore` address, which is required for cross-chain token contracts to function correctly. The placeholder TODO indicates user needs to fill in the actual address.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/lzapp-migration/README.md#_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nconst solanaContract: OmniPointHardhat = {\n  eid: EndpointId.SOLANA_V2_TESTNET,\n  address: \"\" // <---TODO update this with the OFTStore address.\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Delegate for OFT Using pnpm Bash Command\nDESCRIPTION: Runs a pnpm script to set the delegate address for OFT deployment, referencing the provided move.layerzero.config.ts configuration. Requires build and configuration files present. Used to assign delegate privileges enabling deployment and operational control over the OFT smart contracts.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/oft-aptos-move/README.md#_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\npnpm run lz:sdk:move:set-delegate --oapp-config move.layerzero.config.ts\n```\n\n----------------------------------------\n\nTITLE: Hardhat Configuration Initialization Example\nDESCRIPTION: This is an example of the generated `layerzero.config.ts` file after running the `lz:oapp-read:config:init` task. It defines the contract, read channel configurations, ULN config, and connection details including libraries, and send/receive configurations, for different networks like arbitrum-sepolia and sepolia-testnet.  It uses LayerZero's EndpointId and relies on imported modules.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/view-pure-read/README.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { EndpointId } from '@layerzerolabs/lz-definitions'\nconst arbsep_testnetContract = {\n    eid: EndpointId.ARBSEP_V2_TESTNET,\n    contractName: 'MyOAppRead',\n}\nconst sepolia_testnetContract = {\n    eid: EndpointId.SEPOLIA_V2_TESTNET,\n    contractName: 'MyOAppRead',\n}\nexport default {\n    contracts: [\n        {\n            contract: arbsep_testnetContract,\n            config: {\n                readChannelConfigs: [\n                    {\n                        channelId: 4294967295,\n                        readLibrary: '0x54320b901FDe49Ba98de821Ccf374BA4358a8bf6',\n                        ulnConfig: {\n                            executor: '0x5Df3a1cEbBD9c8BA7F8dF51Fd632A9aef8308897',\n                            requiredDVNs: ['0xcb998B0CeC8b45B268336b99811533728880F08a'],\n                            optionalDVNs: [],\n                            optionalDVNThreshold: 0,\n                        },\n                    },\n                ],\n            },\n        },\n        {\n            contract: sepolia_testnetContract,\n            config: {\n                readChannelConfigs: [\n                    {\n                        channelId: 4294967295,\n                        readLibrary: '0x908E86e9cb3F16CC94AE7569Bf64Ce2CE04bbcBE',\n                        ulnConfig: {\n                            executor: '0x718B92b5CB0a5552039B593faF724D182A881eDA',\n                            requiredDVNs: ['0xDd0Dd2155e17E5363346cE2Bcb80A3990DD1F97F'],\n                            optionalDVNs: [],\n                            optionalDVNThreshold: 0,\n                        },\n                    },\n                ],\n            },\n        },\n    ],\n    connections: [\n        {\n            from: arbsep_testnetContract,\n            to: sepolia_testnetContract,\n            config: {\n                sendLibrary: '0x4f7cd4DA19ABB31b0eC98b9066B9e857B1bf9C0E',\n                receiveLibraryConfig: { receiveLibrary: '0x75Db67CDab2824970131D5aa9CECfC9F69c69636', gracePeriod: 0 },\n                sendConfig: {\n                    executorConfig: { maxMessageSize: 10000, executor: '0x5Df3a1cEbBD9c8BA7F8dF51Fd632A9aef8308897' },\n                    ulnConfig: {\n                        confirmations: 1,\n                        requiredDVNs: ['0x53f488E93b4f1b60E8E83aa374dBe1780A1EE8a8'],\n                        optionalDVNs: [],\n                        optionalDVNThreshold: 0,\n                    },\n                },\n                receiveConfig: {\n                    ulnConfig: {\n                        confirmations: 2,\n                        requiredDVNs: ['0x53f488E93b4f1b60E8E83aa374dBe1780A1EE8a8'],\n                        optionalDVNs: [],\n                        optionalDVNThreshold: 0,\n                    },\n                },\n            },\n        },\n        {\n            from: sepolia_testnetContract,\n            to: arbsep_testnetContract,\n            config: {\n                sendLibrary: '0xcc1ae8Cf5D3904Cef3360A9532B477529b177cCE',\n                receiveLibraryConfig: { receiveLibrary: '0xdAf00F5eE2158dD58E0d3857851c432E34A3A851', gracePeriod: 0 },\n                sendConfig: {\n                    executorConfig: { maxMessageSize: 10000, executor: '0x718B92b5CB0a5552039B593faF724D182A881eDA' },\n                    ulnConfig: {\n                        confirmations: 2,\n                        requiredDVNs: ['0x8eebf8b423B73bFCa51a1Db4B7354AA0bFCA9193'],\n                        optionalDVNs: [],\n                        optionalDVNThreshold: 0,\n                    },\n                },\n                receiveConfig: {\n                    ulnConfig: {\n                        confirmations: 1,\n                        requiredDVNs: ['0x8eebf8b423B73bFCa51a1Db4B7354AA0bFCA9193'],\n                        optionalDVNs: [],\n                        optionalDVNThreshold: 0,\n                    },\n                },\n            },\n        },\n    ],\n}\n```\n\n----------------------------------------\n\nTITLE: Request Solana Devnet Airdrop\nDESCRIPTION: Requests an airdrop of 5 SOL tokens to the configured wallet on the Solana Devnet. These tokens are needed for paying transaction fees during deployment and testing.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/lzapp-migration/README.md#_snippet_4\n\nLANGUAGE: Bash\nCODE:\n```\nsolana airdrop 5 -u devnet\n```\n\n----------------------------------------\n\nTITLE: Permanently Disabling Blocklist for Move OFT (Bash)\nDESCRIPTION: Permanently disables the blocklisting feature for the OFT on the Move VM. This action is irreversible and demonstrates that the blocklist capability will not be used. Requires the OApp config.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/oft-adapter-initia/README.md#_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\npnpm run lz:sdk:move:adapter-permanently-disable-blocklist --oapp-config move.layerzero.config.ts\n```\n\n----------------------------------------\n\nTITLE: Wiring EVM to Move-VM Contracts (Bash)\nDESCRIPTION: Configures the communication pathways from deployed EVM contracts to Move VM contracts using the LayerZero SDK wiring command. It reads network configurations and endpoint IDs from `move.layerzero.config.ts`. Optional flags allow simulation, specifying mnemonic index, or generating only calldata.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/oft-adapter-initia/README.md#_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\npnpm run lz:sdk:evm:wire --oapp-config move.layerzero.config.ts\n```\n\n----------------------------------------\n\nTITLE: Deploying Contracts with Hardhat\nDESCRIPTION: This command deploys the contracts to the specified blockchain using Hardhat. It utilizes the Hardhat CLI with the LayerZero deployment plugin. Before running, ensure that the deployer wallet is configured with the correct private key and funded with native tokens on the target chain.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/onft721/README.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nnpx hardhat lz:deploy\n```\n\n----------------------------------------\n\nTITLE: Installing OFT EVM Upgradeable Package with Yarn\nDESCRIPTION: Command to install the @layerzerolabs/oft-evm-upgradeable package using Yarn package manager.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/packages/oft-evm-upgradeable/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn install @layerzerolabs/oft-evm-upgradeable\n```\n\n----------------------------------------\n\nTITLE: Wire All Configuration Example - JSON\nDESCRIPTION: This is an example of the wire all configuration JSON file.  It includes settings for proxy contract, contract, chain and remote chain configs. These settings are used by the `wireAll` task to set up the cross-chain interactions, including fees, adapter parameters and min gas settings.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/packages/ua-devtools-evm-hardhat/README.md#_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"proxyContractConfig\": {\n    \"chain\": \"avalanche\",\n    \"name\": \"ProxyOFT\"\n  },\n  \"contractConfig\": {\n    \"name\": \"OFT\"\n  },\n  \"chainConfig\": {\n    \"avalanche\": {\n      \"defaultFeeBp\": 2,\n      \"useCustomAdapterParams\": true,\n      \"remoteNetworkConfig\": {\n        \"ethereum\": {\n          \"feeBpConfig\": {\n            \"feeBp\": 5,\n            \"enabled\": true\n          },\n          \"minDstGasConfig\": {\n            \"packetType_0\": 100000,\n            \"packetType_1\": 200000\n          }\n        },\n        \"polygon\": {\n          \"minDstGasConfig\": {\n            \"packetType_0\": 100000,\n            \"packetType_1\": 160000\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example Gnosis Safe Configuration for LayerZero Devtools\nDESCRIPTION: This JSON snippet provides an example configuration for integrating Gnosis Safe with LayerZero devtools. It defines the Gnosis `safeAddress` and the Gnosis Safe API `url` for multiple chains (Ethereum, BSC, Avalanche), which are required for interacting with Gnosis Safe on those specific networks. Refer to Gnosis Safe documentation for supported chains and URLs.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/packages/ua-devtools-evm-hardhat/README.md#_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"ethereum\": {\n    \"safeAddress\": \"0xa36B7e7894aCfaa6c35A8A0EC630B71A6B8A6D22\",\n    \"url\": \"https://safe-transaction.mainnet.gnosis.io/\"\n  },\n  \"bsc\": {\n    \"safeAddress\": \"0x4755D44c1C196dC524848200B0556A09084D1dFD\",\n    \"url\": \"https://safe-transaction.bsc.gnosis.io/\"\n  },\n  \"avalanche\": {\n    \"safeAddress\": \"0x4FF2C33FD9042a76eaC920C037383E51659417Ee\",\n    \"url\": \"https://safe-transaction.avalanche.gnosis.io/\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing pnpm at a Specific Version in Bash\nDESCRIPTION: Installs the Node.js package manager pnpm globally at version 8.14.0 using npm. It ensures the right pnpm version is used for dependency installation and building. Requires Node.js and npm preinstalled. Outputs a globally available pnpm command on the machine.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/oft-aptos-move/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -g pnpm@8.14.0\n```\n\n----------------------------------------\n\nTITLE: Compile Contracts using Hardhat (Bash)\nDESCRIPTION: This command compiles contracts specifically using the Hardhat compilation tool. It is useful when you only want to compile using Hardhat.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/oft-adapter/README.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npnpm compile:hardhat\n```\n\n----------------------------------------\n\nTITLE: Initialize OApp Configuration in Hardhat\nDESCRIPTION: This task initializes a `layerzero.config.ts` file, setting up configurations for all available pathways between your hardhat networks using LayerZero's default placeholder settings.  It takes the `contract-name` and `file-name` as inputs and creates a config file with connections for every pathway, including lzRead configuration.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/view-pure-read/README.md#_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\nnpx hardhat lz:oapp-read:config:init --contract-name CONTRACT_NAME --oapp-config FILE_NAME\n```\n\n----------------------------------------\n\nTITLE: Modifying package.json to Test only with Forge\nDESCRIPTION: This diff shows how to modify the `package.json` file to run tests only with Forge, removing the Hardhat test command.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/oapp-read/README.md#_snippet_14\n\nLANGUAGE: diff\nCODE:\n```\n- \"test\": \"$npm_execpath test:forge && $npm_execpath test:hardhat\",\n- \"test:forge\": \"forge test\",\n- \"test:hardhat\": \"$npm_execpath hardhat test\"\n+ \"test\": \"forge test\"\n```\n\n----------------------------------------\n\nTITLE: Switch Solana CLI back to v1.17.31\nDESCRIPTION: Switches the active Solana command-line interface version back to v1.17.31 after deployment. This version is required for building artifacts, as noted in the requirements.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/lzapp-migration/README.md#_snippet_17\n\nLANGUAGE: Bash\nCODE:\n```\nsh -c \"$(curl -sSfL https://release.solana.com/v1.17.31/install)\"\n```\n\n----------------------------------------\n\nTITLE: Setting Adapter Fee for Move Contract (Bash)\nDESCRIPTION: Sets the fee basis points (bps) for sending messages through the LayerZero adapter on the Move VM for a specific destination Endpoint ID (eid). Uses the LayerZero SDK command and requires the OApp config, fee bps, and target eid.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/oft-adapter-initia/README.md#_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\npnpm run lz:sdk:move:adapter-set-fee --oapp-config move.layerzero.config.ts --fee-bps 1000 --to-eid number\n```\n\n----------------------------------------\n\nTITLE: Getting the default OApp config\nDESCRIPTION: Retrieves the configuration of the default OApp. This command is executed using hardhat, and it fetches the configuration details configured by the previous task\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/DEVELOPMENT.md#_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\npnpm hardhat lz:oapp:config:get:default\n```\n\n----------------------------------------\n\nTITLE: Wiring Move-VM to EVM Contracts (Bash)\nDESCRIPTION: Configures the communication pathways from deployed Move VM contracts to EVM contracts using the LayerZero SDK wiring command. It reads network configurations, endpoint IDs, and confirmation settings from `move.layerzero.config.ts`. Pay attention to the `confirmations` parameter for security.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/oft-adapter-initia/README.md#_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\npnpm run lz:sdk:move:wire --oapp-config move.layerzero.config.ts\n```\n\n----------------------------------------\n\nTITLE: Running Tests with Hardhat and Forge\nDESCRIPTION: This command runs tests using both Hardhat and Forge.  It executes both `forge test` and `hardhat test` commands sequentially.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/oapp-read/README.md#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\npnpm test\n```\n\n----------------------------------------\n\nTITLE: Run Tests (Forge & Hardhat) - Bash\nDESCRIPTION: This command executes the default test script defined in `package.json`, which typically runs both Forge and Hardhat test suites sequentially to verify contract functionality.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/oft/README.md#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\npnpm test\n```\n\n----------------------------------------\n\nTITLE: Installing LayerZero Devtools with yarn - Bash\nDESCRIPTION: This snippet shows how to install the @layerzerolabs/protocol-devtools package using yarn. It adds the package as a project dependency and downloads it from the npm registry. The command uses the 'install' command without any additional flags, as yarn manages dependencies automatically.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/packages/protocol-devtools/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn install @layerzerolabs/protocol-devtools\n```\n\n----------------------------------------\n\nTITLE: Checking OApp Configuration Across Chains Using Hardhat\nDESCRIPTION: Command to display the current OApp configuration across chains and pathways, showing custom, default, and active configurations. This helps verify that your LayerZero OApp is properly configured before deployment.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/uniswap-read/README.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n┌────────────────────┬───────────────────────────────────────────────────────────────────────────────┬───────────────────────────────────────────────────────────────────────────────┬───────────────────────────────────────────────────────────────────────────────┐\n│                    │ Custom OApp Config                                                            │ Default OApp Config                                                           │ Active OApp Config                                                            │\n├────────────────────┼───────────────────────────────────────────────────────────────────────────────┼───────────────────────────────────────────────────────────────────────────────┼───────────────────────────────────────────────────────────────────────────────┤\n│ localNetworkName   │ arbsep                                                                        │ arbsep                                                                        │ arbsep                                                                        │\n├────────────────────┼───────────────────────────────────────────────────────────────────────────────┼───────────────────────────────────────────────────────────────────────────────┼───────────────────────────────────────────────────────────────────────────────┤\n│ remoteNetworkName  │ sepolia                                                                       │ sepolia                                                                       │ sepolia                                                                       │\n├────────────────────┼───────────────────────────────────────────────────────────────────────────────┼───────────────────────────────────────────────────────────────────────────────┼───────────────────────────────────────────────────────────────────────────────┤\n│ sendLibrary        │ 0x4f7cd4DA19ABB31b0eC98b9066B9e857B1bf9C0E                                    │ 0x4f7cd4DA19ABB31b0eC98b9066B9e857B1bf9C0E                                    │ 0x4f7cd4DA19ABB31b0eC98b9066B9e857B1bf9C0E                                    │\n├────────────────────┼───────────────────────────────────────────────────────────────────────────────┼───────────────────────────────────────────────────────────────────────────────┼───────────────────────────────────────────────────────────────────────────────┤\n│ receiveLibrary     │ 0x75Db67CDab2824970131D5aa9CECfC9F69c69636                                    │ 0x75Db67CDab2824970131D5aa9CECfC9F69c69636                                    │ 0x75Db67CDab2824970131D5aa9CECfC9F69c69636                                    │\n├────────────────────┼───────────────────────────────────────────────────────────────────────────────┼───────────────────────────────────────────────────────────────────────────────┼───────────────────────────────────────────────────────────────────────────────┤\n│ sendUlnConfig      │ ┌──────────────────────┬────────────────────────────────────────────────────┐ │ ┌──────────────────────┬────────────────────────────────────────────────────┐ │ ┌──────────────────────┬────────────────────────────────────────────────────┐ │\n│                    │ │ confirmations        │ 1                                                  │ │ │ confirmations        │ 1                                                  │ │ │ confirmations        │ 1                                                  │ │\n│                    │ ├──────────────────────┼────────────────────────────────────────────────────┤ │ ├──────────────────────┼────────────────────────────────────────────────────┤ │ ├──────────────────────┼────────────────────────────────────────────────────┤ │\n│                    │ │ requiredDVNs         │ ┌───┬────────────────────────────────────────────┐ │ │ │ requiredDVNs         │ ┌───┬────────────────────────────────────────────┐ │ │ │ requiredDVNs         │ ┌───┬────────────────────────────────────────────┐ │ │\n│                    │ │                      │ │ 0 │ 0x53f488E93b4f1b60E8E83aa374dBe1780A1EE8a8 │ │ │ │                      │ │ 0 │ 0x53f488E93b4f1b60E8E83aa374dBe1780A1EE8a8 │ │ │ │                      │ │ 0 │ 0x53f488E93b4f1b60E8E83aa374dBe1780A1EE8a8 │ │ │\n│                    │ │                      │ └───┴────────────────────────────────────────────┘ │ │ │                      │ └───┴────────────────────────────────────────────┘ │ │ │                      │ └───┴────────────────────────────────────────────┘ │ │\n│                    │ │                      │                                                    │ │ │                      │                                                    │ │ │                      │                                                    │ │\n│                    │ ├──────────────────────┼────────────────────────────────────────────────────┤ │ ├──────────────────────┼────────────────────────────────────────────────────┤ │ ├──────────────────────┼────────────────────────────────────────────────────┤ │\n│                    │ │ optionalDVNs         │                                                    │ │ │ optionalDVNs         │                                                    │ │ │ optionalDVNs         │                                                    │ │\n│                    │ ├──────────────────────┼────────────────────────────────────────────────────┤ │ ├──────────────────────┼────────────────────────────────────────────────────┤ │ ├──────────────────────┼────────────────────────────────────────────────────┤ │\n│                    │ │ optionalDVNThreshold │ 0                                                  │ │ │ optionalDVNThreshold │ 0                                                  │ │ │ optionalDVNThreshold │ 0                                                  │ │\n│                    │ └──────────────────────┴────────────────────────────────────────────────────┘ │ └──────────────────────┴────────────────────────────────────────────────────┘ │ └──────────────────────┴────────────────────────────────────────────────────┘ │\n│                    │                                                                               │                                                                               │                                                                               │\n├────────────────────┼───────────────────────────────────────────────────────────────────────────────┼───────────────────────────────────────────────────────────────────────────────┼───────────────────────────────────────────────────────────────────────────────┤\n│ sendExecutorConfig │ ┌────────────────┬────────────────────────────────────────────┐               │ ┌────────────────┬────────────────────────────────────────────┐               │ ┌────────────────┬────────────────────────────────────────────┐               │\n│                    │ │ executor       │ 0x5Df3a1cEbBD9c8BA7F8dF51Fd632A9aef8308897 │               │ │ executor       │ 0x5Df3a1cEbBD9c8BA7F8dF51Fd632A9aef8308897 │               │ │ executor       │ 0x5Df3a1cEbBD9c8BA7F8dF51Fd632A9aef8308897 │               │\n│                    │ ├────────────────┼────────────────────────────────────────────┤               │ ├────────────────┼────────────────────────────────────────────┤               │ ├────────────────┼────────────────────────────────────────────┤               │\n│                    │ │ maxMessageSize │ 10000                                      │               │ │ maxMessageSize │ 10000                                      │               │ │ maxMessageSize │ 10000                                      │               │\n│                    │ └────────────────┴────────────────────────────────────────────┘               │ └────────────────┴────────────────────────────────────────────┘               │ └────────────────┴────────────────────────────────────────────┘               │\n│                    │                                                                               │                                                                               │                                                                               │\n├────────────────────┼───────────────────────────────────────────────────────────────────────────────┼───────────────────────────────────────────────────────────────────────────────┼───────────────────────────────────────────────────────────────────────────────┤\n│ receiveUlnConfig   │ ┌──────────────────────┬────────────────────────────────────────────────────┐ │ ┌──────────────────────┬────────────────────────────────────────────────────┐ │ ┌──────────────────────┬────────────────────────────────────────────────────┐ │\n```\n\n----------------------------------------\n\nTITLE: Deploy EVM Contracts\nDESCRIPTION: Deploys the EVM (EndpointV1 OFT) contracts to the chains configured in the Hardhat network settings. The deployer wallet is set up via environment variables.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/lzapp-migration/README.md#_snippet_13\n\nLANGUAGE: Bash\nCODE:\n```\nnpx hardhat lz:deploy\n```\n\n----------------------------------------\n\nTITLE: Initializing Move OFT Adapter (Bash)\nDESCRIPTION: Initializes the Fungible Asset (FA) adapter for the OFT on the Move VM using the LayerZero SDK. It requires the OApp configuration file and the Move deployment script (`deploy-move/OFTAdapterInitParams.ts`) containing the adapter parameters.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/oft-adapter-initia/README.md#_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\npnpm run lz:sdk:move:init-fa-adapter --oapp-config move.layerzero.config.ts --move-deploy-script deploy-move/OFTAdapterInitParams.ts\n```\n\n----------------------------------------\n\nTITLE: Running the wire command to setup cross-chain communication (bash)\nDESCRIPTION: This command executes the wiring process that configures the cross-chain communication pathway according to the specified app configuration and Solana endpoint ID. It aligns smart contracts with the correct trusted remotes and messaging libraries.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/lzapp-migration/README.md#_snippet_23\n\nLANGUAGE: bash\nCODE:\n```\nnpx hardhat lz:oapp:wire --oapp-config layerzero.config.ts --solana-eid <SOLANA_ENDPOINT_ID>\n```\n\n----------------------------------------\n\nTITLE: Sending tokens from Move VM\nDESCRIPTION: A bash command to send tokens from a Move VM account to another address. This command specifies the amount, minimum amount, source and destination addresses, gas limit, and destination endpoint ID.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/oft-initia/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm run lz:sdk:move:send-from-move-oft \\\n  --amount-ld <your-amount-ld> \\\n  --min-amount-ld <your-min-amount-ld> \\\n  --src-address <your-source-account-address> \\\n  --to-address <your-destination-account-address> \\\n  --gas-limit <your-gas-limit> \\\n  --dst-eid <your-dst-eid>\\\n```\n\n----------------------------------------\n\nTITLE: Application Configuration Example - JSON\nDESCRIPTION: This is an example of an application configuration file, used as input for `setConfig`. It specifies configurations for different chains, including addresses, versions, and remote chain configurations. The `remoteConfigs` define settings for cross-chain interactions, such as relayer and oracle addresses, and proof library versions.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/packages/ua-devtools-evm-hardhat/README.md#_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"ethereum\": {\n    \"address\": \"\",\n    \"name\": \"ProxyOFT\",\n    \"sendVersion\": 2,\n    \"receiveVersion\": 2,\n    \"remoteConfigs\": [\n      {\n        \"remoteChain\": \"bsc\",\n        \"inboundProofLibraryVersion\": 1,\n        \"inboundBlockConfirmations\": 20,\n        \"relayer\": \"0x902F09715B6303d4173037652FA7377e5b98089E\",\n        \"outboundProofType\": 1,\n        \"outboundBlockConfirmations\": 15,\n        \"oracle\": \"0x5a54fe5234E811466D5366846283323c954310B2\"\n      },\n      {\n        \"remoteChain\": \"avalanche\",\n        \"inboundProofLibraryVersion\": 1,\n        \"inboundBlockConfirmations\": 12,\n        \"relayer\": \"0x902F09715B6303d4173037652FA7377e5b98089E\",\n        \"outboundProofType\": 1,\n        \"outboundBlockConfirmations\": 15,\n        \"oracle\": \"0x5a54fe5234E811466D5366846283323c954310B2\"\n      }\n    ]\n  },\n  \"bsc\": {\n    \"address\": \"0x0702c7B1b18E5EBf022e17182b52F0AC262A8062\",\n    \"name\": \"\",\n    \"sendVersion\": 2,\n    \"receiveVersion\": 2,\n    \"remoteConfigs\": [\n      {\n        \"remoteChain\": \"ethereum\",\n        \"inboundProofLibraryVersion\": 1,\n        \"inboundBlockConfirmations\": 15,\n        \"relayer\": \"0xA27A2cA24DD28Ce14Fb5f5844b59851F03DCf182\",\n        \"outboundProofType\": 1,\n        \"outboundBlockConfirmations\": 20,\n        \"oracle\": \"0x5a54fe5234E811466D5366846283323c954310B2\"\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Contract Read Configurations for Cross-Chain Verification\nDESCRIPTION: This snippet sets up the read configurations for the Arbitrum contract, specifying read libraries, executor addresses, required and optional DVNs, confirmation thresholds, and enforced options including message type, gas, and payload size. This configuration enables secure and verified read access across chains for specific channels.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/view-pure-read/README.md#_snippet_22\n\nLANGUAGE: TypeScript\nCODE:\n```\ncontracts: [\n  {\n    contract: arbitrumContract,\n    config: {\n      readChannelConfigs: [\n        {\n          channelId: 4294967295,\n          readLibrary: contractsConfig.arbitrum.readLib1002,\n          active: true,\n          ulnConfig: {\n            executor: contractConfig.arbitrum.lzExecutor,\n            requiredDVNs: [\n              contractsConfig.arbitrum.lzDVN,\n              contractsConfig.arbitrum.nethermindDVN,\n            ],\n            optionalDVNs: [],\n            optionalDVNThreshold: 0,\n          },\n          enforcedOptions: [\n            {\n              msgType: 1,\n              optionType: ExecutorOptionType.LZ_READ,\n              gas: 65000,\n              value: 0,\n              size: 100,\n            },\n          ],\n        },\n      ],\n    },\n  },\n  {\n    contract: ethereumContract,\n  },\n],\n```\n\n----------------------------------------\n\nTITLE: Listing Available CLI Options for create-lz-oapp in Bash\nDESCRIPTION: This snippet shows the command to display the help menu for the create-lz-oapp CLI tool, listing all supported options and flags. It allows users to understand configurable parameters like project destination directory, example templates, CI mode, package manager choice, log level settings, and version information. The output provides essential information to tailor the behavior of the project initialization process.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/packages/create-lz-oapp/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-lz-oapp@latest --help\n```\n\n----------------------------------------\n\nTITLE: Installing @layerzerolabs/oapp-alt-evm using yarn\nDESCRIPTION: This snippet shows the command to install the @layerzerolabs/oapp-alt-evm package using yarn.  It installs the package and any necessary dependencies into the project's node_modules directory, managing the package's versions using a yarn.lock file. It expects the user to have Yarn installed globally.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/packages/oapp-alt-evm/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn install @layerzerolabs/oapp-alt-evm\n```\n\n----------------------------------------\n\nTITLE: Compiling Contracts with Forge and Hardhat (Bash)\nDESCRIPTION: Runs the combined compile command which executes both `forge build` and `hardhat compile` sequentially by default. This ensures contract artifacts are generated for both toolchains.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/view-pure-read/README.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\npnpm compile\n```\n\n----------------------------------------\n\nTITLE: Defining Contract Instances\nDESCRIPTION: This TypeScript snippet defines two contract instances, `ethereumContract` and `arbitrumContract`, representing OApp contracts deployed on Ethereum and Arbitrum networks, respectively. The `OmniPointHardhat` type is used to define the configuration, including the endpoint ID and the contract name.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/oapp-read/README.md#_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nconst ethereumContract: OmniPointHardhat = {\n  eid: EndpointId.ETHEREUM_V2_MAINNET,\n  contractName: \"MyOAppRead\",\n};\n\nconst arbitrumContract: OmniPointHardhat = {\n  eid: EndpointId.ARBITRUM_V2_MAINNET,\n  contractName: \"MyOAppRead\",\n};\n```\n\n----------------------------------------\n\nTITLE: Adding Mint Function to Move OFT Contract (Rust/Move)\nDESCRIPTION: Adds a public entry function `mint` to the Move contract (`oft_fa.move`) to allow minting tokens for testing purposes. This function checks if the caller is the admin and then uses the primary fungible store to mint tokens to a specified recipient address. This function is intended for testing only.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/oft-adapter-initia/README.md#_snippet_26\n\nLANGUAGE: rust\nCODE:\n```\npublic entry fun mint(\n    admin: &signer,\n    recipient: address,\n    amount: u64,\n) acquires OftImpl {\n    assert_admin(address_of(admin));\n    primary_fungible_store::mint(&store().mint_ref, recipient, amount);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an OmniContract instance in TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates creating an `OmniContract` object. It imports necessary types from `@layerzerolabs/lz-definitions` and `@layerzerolabs/devtools-evm`, which are fundamental dependencies.  The `OmniContract` interface represents an ethers.js contract connected to an endpoint, and is defined using an endpoint id and an ethers.js contract instance.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/packages/devtools-evm-hardhat/README.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { EndpointId } from \"@layerzerolabs/lz-definitions\";\nimport { OmniContract } from \"@layerzerolabs/devtools-evm\";\n\nconst omniContract: OmniContract = {\n  eid: EndpointId.ETHEREUM_MAINNET,\n  contract: new Contract(address, abi),\n};\n```\n\n----------------------------------------\n\nTITLE: Running Contract Tests with npm Scripts\nDESCRIPTION: npm scripts for testing smart contracts using both Hardhat and Forge testing frameworks, providing flexibility for developers to use their preferred testing environment.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/oft-upgradeable/README.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\npnpm test\npnpm test:forge\npnpm test:hardhat\n```\n\n----------------------------------------\n\nTITLE: OFTAdapter Configuration in hardhat.config.ts (Typescript)\nDESCRIPTION: This code snippet shows how to configure the `hardhat.config.ts` file to specify the ERC20 token address for the OFTAdapter. Replace `'0x0'` with the actual address of the ERC20 token you want to adapt.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/oft-adapter/README.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// Replace `0x0` with the address of the ERC20 token you want to adapt to the OFT functionality.\noftAdapter: {\n    tokenAddress: '0x0',\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Tokens from EVM via PNPM\nDESCRIPTION: Command to transfer tokens from an EVM-compatible chain to a destination address, specifying source and destination EIDs, amounts, and minimum amounts. Utilizes the move.layerzero.config.ts configuration.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/oft-aptos-move/README.md#_snippet_31\n\nLANGUAGE: bash\nCODE:\n```\npnpm run lz:sdk:evm:send-evm \\\n  --oapp-config move.layerzero.config.ts \\\n  --src-eid <your-src-eid> \\\n  --dst-eid <your-dst-eid> \\\n  --to <your-source-account-address> \\\n  --amount <your-amount> \\\n  --min-amount <your-min-amount>\n```\n\n----------------------------------------\n\nTITLE: Adjusting package.json Compile Script Using diff\nDESCRIPTION: Shows how to edit the compile scripts in package.json to remove forge compilation, using a diff format. This allows developers to customize which compilation tools they want active when running `pnpm compile`. Dependencies include having forge and hardhat commands in the environment.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/oft-alt/README.md#_snippet_7\n\nLANGUAGE: diff\nCODE:\n```\n- \"compile\": \"$npm_execpath run compile:forge && $npm_execpath run compile:hardhat\",\n- \"compile:forge\": \"forge build\",\n- \"compile:hardhat\": \"hardhat compile\",\n+ \"compile\": \"hardhat compile\"\n```\n\n----------------------------------------\n\nTITLE: Requesting 5 SOL on Solana Devnet Using Solana CLI Airdrop Command\nDESCRIPTION: This snippet requests an airdrop of 5 SOL tokens from the Solana Devnet faucet to the user's wallet, providing necessary funds for development and transaction fees on the test network.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/oft-solana/README.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nsolana airdrop 5 -u devnet\n```\n\n----------------------------------------\n\nTITLE: Initializing Move VM OFT Using pnpm Bash Command\nDESCRIPTION: Initializes the Omni Fungible Token smart contract on the Move VM via a pnpm script, using configuration and a Move deploy script for initialization parameters. Requires valid config and metadata file configured. Outputs initialized OFT deployed on specified chain.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/oft-aptos-move/README.md#_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\npnpm run lz:sdk:move:init-fa --oapp-config move.layerzero.config.ts --move-deploy-script deploy-move/OFTInitParams.ts\n```\n\n----------------------------------------\n\nTITLE: Transferring OFT Ownership of OApp with PNPM\nDESCRIPTION: Executes a command to transfer the ownership of the OApp, specifying the new owner's address. It updates the administrative control over the OFT within the Move VM environment.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/oft-aptos-move/README.md#_snippet_26\n\nLANGUAGE: bash\nCODE:\n```\npnpm run lz:sdk:move:transfer-oapp-owner --oapp-config move.layerzero.config.ts --new-owner <new-owner-address>\n```\n\n----------------------------------------\n\nTITLE: Creating OFT Mint-And-Burn Adapter (MABA) with Hardhat (bash)\nDESCRIPTION: This command creates a Mint-And-Burn Adapter (MABA) on Solana, enabling tokens to be burned on cross-chain transfer and minted on arrival. It requires existing token mint and program IDs. Note that token's Mint Authority must be transferable, not renounced, and must be set appropriately in deployment files.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/lzapp-migration/README.md#_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\npnpm hardhat lz:oft:solana:create --eid 40168 --program-id <PROGRAM_ID> --mint <TOKEN_MINT> --token-program <TOKEN_PROGRAM_ID>\n```\n\n----------------------------------------\n\nTITLE: Deploying Contracts Using LayerZero Hardhat Plugin YAML Configurations\nDESCRIPTION: Defines network configurations in YAML format specifying endpoint IDs, RPC URLs, and accounts setup for deploying contracts across multiple EVM-compatible testnets. These configurations serve as inputs for the `npx hardhat lz:deploy` task to select target networks and deploy contracts using the Hardhat Deploy plugin integration.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/uniswap-read/README.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\n'arbitrum-sepolia': {\n    eid: EndpointId.ARBSEP_V2_TESTNET,\n    url: process.env.RPC_URL_ARBSEP_TESTNET,\n    accounts,\n},\n'base-sepolia': {\n    eid: EndpointId.BASESEP_V2_TESTNET,\n    url: process.env.RPC_URL_BASE_TESTNET,\n    accounts,\n},\n```\n\n----------------------------------------\n\nTITLE: Checking LayerZero Executor Configuration in Bash\nDESCRIPTION: Command to retrieve the LayerZero Executor configuration for each network in hardhat.config.ts, showing metrics like baseGas, multiplierBps, floorMarginUSD, and nativeCap which determines the maximum destination gas in wei that can be requested.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/oft-upgradeable/README.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpx hardhat lz:oapp:config:get:executor --oapp-config YOUR_OAPP_CONFIG\n```\n\n----------------------------------------\n\nTITLE: Getting LayerZero Executor Config using Hardhat (Bash)\nDESCRIPTION: This command retrieves the LayerZero Executor configuration for each network defined in your hardhat.config.ts file. It uses the LayerZero hardhat plugin task `lz:oapp:config:get:executor`. You need to specify the path to your OApp configuration file using the `--oapp-config` flag. The output includes details like the local network name and executor addresses, providing information necessary for setting execution options like `nativeCap`.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/view-pure-read/README.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpx hardhat lz:oapp:config:get:executor --oapp-config YOUR_OAPP_CONFIG\n```\n\n----------------------------------------\n\nTITLE: Deploying Contracts with Hardhat LayerZero Plugin\nDESCRIPTION: This command deploys smart contracts to the configured blockchains using the Hardhat LayerZero plugin.  It requires the plugin to be installed and configured in `hardhat.config.js`, and the deployer wallet to be set up.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/uniswap-read/README.md#_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\nnpx hardhat lz:deploy\n```\n\n----------------------------------------\n\nTITLE: Install Project Dependencies\nDESCRIPTION: Installs project dependencies listed in `package.json` using the pnpm package manager. This includes dependencies for Hardhat, Forge, and other development tools.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/lzapp-migration/README.md#_snippet_7\n\nLANGUAGE: Bash\nCODE:\n```\npnpm install\n```\n\n----------------------------------------\n\nTITLE: Getting Help with LayerZero SDK CLI (Bash)\nDESCRIPTION: Executes the `lz:sdk:help` command via pnpm to display help information, including available commands and options for the LayerZero SDK command-line interface.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/oft-adapter-initia/README.md#_snippet_30\n\nLANGUAGE: Bash\nCODE:\n```\npnpm run lz:sdk:help\n```\n\n----------------------------------------\n\nTITLE: Transferring Move-VM Object Ownership with PNPM\nDESCRIPTION: Runs a command to transfer the ownership of a specific object in the Move VM, affecting the upgrade authority. The command requires the new owner’s address to be specified.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/oft-aptos-move/README.md#_snippet_27\n\nLANGUAGE: bash\nCODE:\n```\npnpm run lz:sdk:move:transfer-object-owner --oapp-config move.layerzero.config.ts --new-owner <new-owner-address>\n```\n\n----------------------------------------\n\nTITLE: Run Tests using pnpm (Bash)\nDESCRIPTION: This command executes tests using both Hardhat and Forge. It runs both hardhat and forge tests.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/oft-adapter/README.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\npnpm test\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies using pnpm\nDESCRIPTION: This command installs project dependencies using the pnpm package manager. It assumes pnpm is installed globally and that a `package.json` file exists in the current directory defining the project's dependencies.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/uniswap-read/README.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\npnpm install\n```\n\n----------------------------------------\n\nTITLE: Installing LayerZero Metadata Tools via package managers\nDESCRIPTION: Instructions for installing the @layerzerolabs/metadata-tools package using different Node.js package managers including yarn, pnpm, and npm.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/packages/metadata-tools/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @layerzerolabs/metadata-tools\n\npnpm add @layerzerolabs/metadata-tools\n\nnpm install @layerzerolabs/metadata-tools\n```\n\n----------------------------------------\n\nTITLE: Example Output for Ownership and Admin Verification\nDESCRIPTION: JSON snippet showing the expected structure of resource data to verify proper ownership and admin assignment after transfer, highlighting key fields for validation.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/oft-aptos-move/README.md#_snippet_34\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"0x1::object::ObjectCore\": {\n    ...\n    \"owner\": \"0x<OWNER_ADDRESS>\",\n    ...\n  }\n  ...\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"<your-oft-address>::oapp_store::OAppStore\": {\n    \"admin\": \"0x<ADMIN_ADDRESS>\",\n    ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installation commands for @layerzerolabs/oft-alt-evm via package managers\nDESCRIPTION: Provides command-line instructions to install the @layerzerolabs/oft-alt-evm package using pnpm, yarn, and npm. These commands enable developers to include the package as a dependency in their projects, ensuring access to its functionalities. No executable code is present beyond the installation instructions.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/packages/oft-alt-evm/README.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\npnpm install @layerzerolabs/oft-alt-evm\n```\n\nLANGUAGE: Shell\nCODE:\n```\nyarn install @layerzerolabs/oft-alt-evm\n```\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install @layerzerolabs/oft-alt-evm\n```\n\n----------------------------------------\n\nTITLE: Generating Aptos Key Pair Using Aptos CLI in Bash\nDESCRIPTION: Generates a new Aptos key pair, saving the public key in the specified output file. Requires Aptos CLI installed and configured. Outputs newly created public key file (and private key locally) used for network authentication.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/oft-aptos-move/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\naptos key generate --output-file my_key.pub\n```\n\n----------------------------------------\n\nTITLE: Run Project Tests\nDESCRIPTION: Executes both Hardhat and Forge tests defined in the project. This verifies the correctness of the smart contracts and related logic.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/lzapp-migration/README.md#_snippet_8\n\nLANGUAGE: Bash\nCODE:\n```\npnpm test\n```\n\n----------------------------------------\n\nTITLE: Filtering Networks in Export Deployments\nDESCRIPTION: Example showing how to filter networks when generating deployment files using the createIncludeDirent utility to include or exclude specific networks.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/packages/export-deployments/README.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  createIncludeDirent,\n  generateSafe,\n} from \"@layerzerolabs/export-deployments\";\n\nconst includedNetworks = [\"arbitrum-mainnet\"];\nconst excludedNetworks = [\"telos-testnet\"];\n\ngenerateSafe({\n  deploymentsDir: \"./my/deployments\",\n  outDir: \"./generated\",\n  includeNetworkDir: createIncludeDirent(includedNetworks, excludedNetworks),\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with pnpm (Bash)\nDESCRIPTION: Executes the `pnpm install` command to download and install all project dependencies defined in the package manager configuration. This is a recommended first step before compiling or testing.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/view-pure-read/README.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\npnpm install\n```\n\n----------------------------------------\n\nTITLE: Getting Help for Deployment\nDESCRIPTION: This command displays the help information for the `lz:deploy` task in Hardhat, providing detailed information on the available CLI arguments. The output includes descriptions of each argument, allowing the user to correctly use the `lz:deploy` task.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/onft721/README.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nnpx hardhat lz:deploy --help\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependencies with pnpm in Bash\nDESCRIPTION: Runs pnpm to install all dependencies defined in the project package manifest (package.json or equivalent). This is a prerequisite step before building or deploying. Requires pnpm installed. Outputs installed node_modules and prepares environment for build and deployment.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/oft-aptos-move/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm install\n```\n\n----------------------------------------\n\nTITLE: Installing @layerzerolabs/verify-contract via Package Managers (Bash)\nDESCRIPTION: Demonstrates how to install the `@layerzerolabs/verify-contract` package using yarn, pnpm, or npm package managers. This package is required for verifying LayerZero contracts deployed with Hardhat.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/packages/verify-contract/README.md#_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\nyarn add @layerzerolabs/verify-contract\n\npnpm add @layerzerolabs/verify-contract\n\nnpm install @layerzerolabs/verify-contract\n```\n\n----------------------------------------\n\nTITLE: Modifying package.json for Custom Compilation Workflow\nDESCRIPTION: Example of how to modify the package.json file to customize the compilation workflow by removing Forge build commands if only using Hardhat for compilation.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/oft-upgradeable/README.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n- \"compile\": \"$npm_execpath run compile:forge && $npm_execpath run compile:hardhat\",\n- \"compile:forge\": \"forge build\",\n- \"compile:hardhat\": \"hardhat compile\",\n+ \"compile\": \"hardhat compile\"\n```\n\n----------------------------------------\n\nTITLE: Installing LayerZero DevTools with npm\nDESCRIPTION: This snippet demonstrates the installation of the @layerzerolabs/devtools-evm-hardhat package using npm. It's a command-line instruction for adding the specified package as a project dependency using the npm package manager.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/packages/devtools-evm-hardhat/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @layerzerolabs/devtools-evm-hardhat\n```\n\n----------------------------------------\n\nTITLE: Compiling Contracts with Hardhat\nDESCRIPTION: This command compiles smart contracts using the Hardhat development environment.  It uses the `hardhat compile` command, assuming Hardhat is installed and configured in the project.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/uniswap-read/README.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\npnpm compile:hardhat\n```\n\n----------------------------------------\n\nTITLE: Cloning Aptos CLI Version Manager Repository in Bash\nDESCRIPTION: Clones the LayerZero Aptos CLI Version Manager repository to simplify Aptos CLI version management for deployment. Required dependencies include git and bash. The snippet requires git to be installed and internet access to fetch the repository. It outputs the repository files for managing specific Aptos CLI versions for different chains.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/oft-aptos-move/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/LayerZero-Labs/aptosup\n```\n\n----------------------------------------\n\nTITLE: Installing Make on Unix Systems\nDESCRIPTION: Instructions for installing the 'make' utility on Debian and Alpine Linux systems, which is a prerequisite for building the LayerZero devtools package.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/packages/toolbox-foundry/DEVELOPMENT.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# On Debian\napt-get install build-essential\n\n# On Apline\napk add --no-cache make\n```\n\n----------------------------------------\n\nTITLE: Configuring Deployer Wallet Environment Variables (Text)\nDESCRIPTION: Shows example environment variables (`MNEMONIC` or `PRIVATE_KEY`) to set in a `.env` file for configuring the deployer wallet account. Choose either mnemonic or private key, not both. This file should be renamed from `.env.example`.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/native-oft-adapter/README.md#_snippet_7\n\nLANGUAGE: Text\nCODE:\n```\nMNEMONIC=\"test test test test test test test test test test test junk\"\nor...\nPRIVATE_KEY=\"0xabc...def\"\n```\n\n----------------------------------------\n\nTITLE: Adding External Libraries to LayerZero Devtools\nDESCRIPTION: Demonstrates how to add new libraries to the LayerZero devtools package using git submodules, with examples for ds-test and forge-std libraries.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/packages/toolbox-foundry/DEVELOPMENT.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# In your terminal, navigate to the root of the devtools repository\n\n# Add a git submodule\n#\n# These two examples show the commands for the two existing libraries, forge-std and ds-test\ngit submodule add --name \"toolbox-foundry/ds-test\" --force https://github.com/dapphub/ds-test packages/toolbox-foundry/lib/ds-test\ngit submodule add --name \"toolbox-foundry/forge-std\" --force https://github.com/foundry-rs/forge-std packages/toolbox-foundry/lib/forge-std\n```\n\n----------------------------------------\n\nTITLE: Setting Mnemonic for Deployer Account\nDESCRIPTION: This line shows an example of setting the deployer wallet using a mnemonic phrase. This is for demonstration purposes only and should NOT be used in a production environment. A secure mnemonic should be stored and accessed safely.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/uniswap-read/README.md#_snippet_15\n\nLANGUAGE: null\nCODE:\n```\nMNEMONIC=\"test test test test test test test test test test test junk\"\n```\n\n----------------------------------------\n\nTITLE: Expected JSON Output for Move VM Object Owner Verification\nDESCRIPTION: Illustrates the expected JSON structure within the output of the `aptos account list` command when verifying object ownership. The `owner` field inside the `0x1::object::ObjectCore` resource indicates the address holding ownership of the Move VM object.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/oft-adapter-aptos-move/README.md#_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"0x1::object::ObjectCore\": {\n    ...\n    \"owner\": \"0x<OWNER_ADDRESS>\",\n    ...\n  }\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Run Tests with Forge - Bash\nDESCRIPTION: This command executes the Forge-specific test script defined in `package.json`. Use this if you only want to run tests using the Foundry test runner.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/oft/README.md#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\npnpm test:forge\n```\n\n----------------------------------------\n\nTITLE: Filtering Contract Deployments in Export Deployments\nDESCRIPTION: Example showing how to filter deployment files by contract names, using the createIncludeDirent utility to include or exclude specific contracts.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/packages/export-deployments/README.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  createIncludeDirent,\n  generateSafe,\n} from \"@layerzerolabs/export-deployments\";\n\n// createIncludeDirent will handle the json extension internally\nconst includedContracts = [\"MyContract\", \"OtherContract.json\"];\nconst excludedContracts = [\"TopSecret\"];\n\ngenerateSafe({\n  deploymentsDir: \"./my/deployments\",\n  outDir: \"./generated\",\n  includeDeploymentFile: createIncludeDirent(\n    includedContracts,\n    excludedContracts,\n  ),\n});\n```\n\n----------------------------------------\n\nTITLE: Install Rust Programming Language\nDESCRIPTION: Installs the Rust programming language and its toolchain using the official rustup script. This is a prerequisite for building Solana programs.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/lzapp-migration/README.md#_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\ncurl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y\n```\n\n----------------------------------------\n\nTITLE: Running Tests with Forge\nDESCRIPTION: This command runs tests using Forge. It executes the `forge test` command.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/oapp-read/README.md#_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\npnpm test:forge\n```\n\n----------------------------------------\n\nTITLE: Wiring Contracts from Move-VM to EVM Using pnpm Bash Command\nDESCRIPTION: Runs a pnpm script to wire contracts from Move VM chain to EVM networks per the LayerZero config file. Important to carefully set 'confirmations' parameter for block confirmation security. Requires configuration of endpoints and blockchain accounts for message emission. Outputs cross-chain wiring transactions on Aptos/Move VM networks.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/oft-aptos-move/README.md#_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\npnpm run lz:sdk:move:wire --oapp-config move.layerzero.config.ts\n```\n\n----------------------------------------\n\nTITLE: Defining lzRead Configurations\nDESCRIPTION: This TypeScript snippet defines `lzRead` configurations for the Arbitrum and Ethereum contracts. It includes the contract instance, configuration for read channel configs, including channel ID, read library, active status, and ULN (Universal LayerZero Network) configuration including DVN settings and enforced options for gas usage and payload size.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/oapp-read/README.md#_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\ncontracts: [\n  {\n    contract: arbitrumContract,\n    config: {\n      readChannelConfigs: [\n        {\n          channelId: 4294967295,\n          readLibrary: contractsConfig.arbitrum.readLib1002\n          active: true,\n          ulnConfig: {\n            // The address of the Executor that will deliver the message\n            executor: contractConfig.arbitrum.lzExecutor\n            // The address of the DVNs your `receiveConfig` expects to receive verifications from on the `from` chain ).\n            // The `from` chain's OApp will wait until the configured threshold of `requiredDVNs` verify the message.\n            requiredDVNs: [\n              contractsConfig.arbitrum.lzDVN, // LayerZero Labs DVN\n              contractsConfig.arbitrum.nethermindDVN, // Nethermind DVN\n            ],\n            // The address of the `optionalDVNs` you expect to receive verifications from on the `from` chain ).\n            // The destination tx will wait until the configured threshold of `optionalDVNs` verify the message.\n            optionalDVNs: [],\n            // The number of `optionalDVNs` that need to successfully verify the message for it to be considered Verified.\n            optionalDVNThreshold: 0,\n          },\n          // Optional Enforced Options Configuration\n          // @dev Controls how much gas to use when delivering the resolved payload, as well as the expected size of the payload\n          enforcedOptions: [\n            {\n              msgType: 1,\n              optionType: ExecutorOptionType.LZ_READ,\n              gas: 65000,\n              value: 0,\n              size: 100,\n            },\n          ],\n        },\n      ],\n    },\n  },\n  {\n    contract: ethereumContract,\n  },\n],\n```\n\n----------------------------------------\n\nTITLE: Retrieving current OApp pathway configuration using Hardhat lz:oapp:config:get\nDESCRIPTION: Outputs a comparison table of your custom OApp settings, default placeholder configurations, and currently active configurations for each network pathway. Useful for verifying and troubleshooting cross-chain pathway setups.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/oft-upgradeable/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpx hardhat lz:oapp:config:get --oapp-config YOUR_OAPP_CONFIG\n```\n\n----------------------------------------\n\nTITLE: Running Tests with Forge (Bash)\nDESCRIPTION: Executes the `pnpm test:forge` command, which typically runs `forge test`, to run the test suite using only the Forge toolchain.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/view-pure-read/README.md#_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\npnpm test:forge\n```\n\n----------------------------------------\n\nTITLE: Connecting Contracts with Hardhat\nDESCRIPTION: This command wires the deployed contracts, configuring the necessary cross-chain communication using the LayerZero framework. It connects the contracts based on the configuration provided in `layerzero.config.ts`. This step is crucial for enabling cross-chain interaction.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/onft721/README.md#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nnpx hardhat lz:oapp:wire --oapp-config layerzero.config.ts\n```\n\n----------------------------------------\n\nTITLE: Running Tests with Forge\nDESCRIPTION: This command runs tests using the Forge testing framework.  It invokes the `forge test` command, which assumes Forge is installed and configured correctly.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/uniswap-read/README.md#_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\npnpm test:forge\n```\n\n----------------------------------------\n\nTITLE: Creating OFT Mint-And-Burn Adapter on Solana using Hardhat\nDESCRIPTION: Command to create an OFT Mint-And-Burn Adapter on Solana using an existing token where tokens will be burned when sending and minted when receiving from other chains.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/oft-solana/README.md#_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\npnpm hardhat lz:oft:solana:create --eid 40168 --program-id <PROGRAM_ID> --mint <TOKEN_MINT> --token-program <TOKEN_PROGRAM_ID>\n```\n\n----------------------------------------\n\nTITLE: Running Tests with pnpm (Bash)\nDESCRIPTION: Executes the default test script defined in `package.json`, which typically runs tests using both Forge and Hardhat test runners.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/native-oft-adapter/README.md#_snippet_4\n\nLANGUAGE: Bash\nCODE:\n```\npnpm test\n```\n\n----------------------------------------\n\nTITLE: Initializing Aptos CLI for Aptos Chain in Bash\nDESCRIPTION: Initializes the Aptos CLI client, configuring it to connect to the Aptos testnet network using a provided private key. Requires Aptos CLI installed and a valid private key. Outputs configuration files containing the network endpoints, account credentials, and RPC links.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/oft-aptos-move/README.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\naptos init --network=testnet --private-key=<your-private-key>\n```\n\n----------------------------------------\n\nTITLE: Setting a New Mint Authority Multisig for Solana OFT\nDESCRIPTION: Command to create and set a new mint authority for Solana OFT by specifying the endpoint ID, token mint, program ID, escrow, and additional minters.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/oft-solana/README.md#_snippet_25\n\nLANGUAGE: bash\nCODE:\n```\npnpm hardhat lz:oft:solana:setauthority --eid <SOLANA_EID> --mint <TOKEN_MINT> --program-id <PROGRAM_ID> --escrow <ESCROW> --additional-minters <MINTERS_CSV>\n```\n\n----------------------------------------\n\nTITLE: Creating CLI setup with EVM functionality using Hardhat\nDESCRIPTION: Example setup file that integrates EVM functionality based on Hardhat. This file creates the necessary functionality for the CLI to run by setting up SDKs, configuration functions, and signing functions.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/packages/devtools-cli/README.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  createConnectedContractFactory,\n  createSignerFactory,\n  createDefaultContext,\n} from \"@layerzerolabs/devtools-evm-hardhat\";\nimport { createOAppFactory } from \"@layerzerolabs/ua-devtools-evm\";\n\nimport type { CLISetup } from \"@layerzerolabs/devtools-cli\";\n\n/**\n * Since we are not in hardhat CLI, we'll need to create the context first\n */\ncreateDefaultContext();\n\n/**\n * This is a setup file for @layerzerolabs/devtools-cli.\n *\n * At the moment, @layerzerolabs/devtools-cli is in development\n * and will be available\n */\nconst setup: CLISetup = {\n  createSdk: createOAppFactory(createConnectedContractFactory()),\n  createSigner: createSignerFactory(),\n};\n\nexport default setup;\n```\n\n----------------------------------------\n\nTITLE: Checking Wired Configurations - Shell\nDESCRIPTION: This snippet shows the usage of `checkWireAllConfig` task.  This task returns the current wired up configurations of the specified contract. It accepts environment (e), flags to show use custom adapter params (u), trusted remotes (t), and min destination gas (m). It also takes parameters for chains, addresses (optional), contract name (optional) and proxy contract details.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/packages/ua-devtools-evm-hardhat/README.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\npnpm hardhat checkWireAllConfig --e testnet --u --t --m --chains ethereum-testnet,arbitrum-testnet --contract ExampleOFTV2\n```\n\nLANGUAGE: shell\nCODE:\n```\npnpm hardhat checkWireAllConfig --e testnet --u --t --m --chains ethereum-testnet,arbitrum-testnet,optimism-testnet --contract OFTV2 --proxy-contract ProxyOFTV2 --proxy-chain optimism-testnet\n```\n\nLANGUAGE: shell\nCODE:\n```\npnpm hardhat checkWireAllConfig --e testnet --u --t --m --chains ethereum-testnet,arbitrum-testnet,optimism-testnet --addresses \"0xD90E022dE858DfDFC3C0f66b0D9ACD12CA6eA3Ec,0x137d4e9C2431A3DCBa6e615E9438F2c558353a17,0x27631753FC88e7b45a46679B9Cd2e06378cB43dC\"\n```\n\n----------------------------------------\n\nTITLE: Running lz:oapp:config:init Task with Command Line Arguments\nDESCRIPTION: Command to initialize a LayerZero configuration file by specifying the contract name and desired output file name. This creates a properly formatted config template.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/oft/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx hardhat lz:oapp:config:init --contract-name CONTRACT_NAME --oapp-config FILE_NAME\n```\n\n----------------------------------------\n\nTITLE: Creating OFT Adapter on Solana using Hardhat\nDESCRIPTION: Command to create an OFT Adapter on Solana using an existing token where tokens will be locked when sending to other chains and unlocked when receiving.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/oft-solana/README.md#_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\npnpm hardhat lz:oft-adapter:solana:create --eid 40168 --program-id <PROGRAM_ID> --mint <TOKEN_MINT> --token-program <TOKEN_PROGRAM_ID>\n```\n\n----------------------------------------\n\nTITLE: Executing decode-lz-options CLI with Package Managers - Bash\nDESCRIPTION: These commands demonstrate how to execute the `decode-lz-options` command-line interface (CLI) tool using various JavaScript package managers. The tool is used for decoding LayerZero OApp options. Each command runs the CLI from the installed package without requiring a global installation.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/packages/decode-lz-options/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx decode-lz-options@latest\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn decode-lz-options\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm decode-lz-options\n```\n\nLANGUAGE: bash\nCODE:\n```\nbunx decode-lz-options\n```\n\n----------------------------------------\n\nTITLE: Configuring zkSync Network Settings in Hardhat\nDESCRIPTION: This code snippet shows how to configure the network settings for zkSync in the `hardhat.config.ts` file.  The `zksync: true` flag is crucial for telling Hardhat to use the zkSync compiler. It also defines the necessary details for the zkSync Sepolia testnet, including its endpoint ID, RPC URL, accounts, and Ethereum network association.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/onft721-zksync/README.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nnetworks: {\n  'zksync-testnet': {\n      eid: EndpointId.ZKSYNCSEP_V2_TESTNET,\n      url: process.env.RPC_URL_ZKSYNCSEP || 'https://sepolia.era.zksync.dev',\n      accounts,\n      zksync: true, // This flag is crucial for zkSync networks\n      ethNetwork: 'sepolia', // Use 'sepolia' to match the Ethereum network zkSync Sepolia is using\n      verifyURL: 'https://explorer.sepolia.era.zksync.dev/contract_verification', // Adjusted API URL for zkSync Sepolia\n  },\n},\n```\n\n----------------------------------------\n\nTITLE: Creating OFT Adapter for Solana with LayerZero Hardhat CLI (bash)\nDESCRIPTION: This command sets up an OFT Adapter on Solana, linking an existing token to cross-chain messaging capabilities. It requires the endpoint ID, program ID, token mint address, and token program ID. The adapter handles token lock/unlock when transferring across chains.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/lzapp-migration/README.md#_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\npnpm hardhat lz:oft-adapter:solana:create --eid 40168 --program-id <PROGRAM_ID> --mint <TOKEN_MINT> --token-program <TOKEN_PROGRAM_ID>\n```\n\n----------------------------------------\n\nTITLE: Compiling Contracts using Forge\nDESCRIPTION: This command specifically compiles the contracts using the Forge build process.  This command would typically be run when you're using Forge as your primary build tool for the project and can be customized in the `package.json`.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/onft721-zksync/README.md#_snippet_3\n\nLANGUAGE: Bash\nCODE:\n```\npnpm compile:forge\n```\n\n----------------------------------------\n\nTITLE: Modifying package.json to Remove Forge Compilation (Diff)\nDESCRIPTION: Shows the changes needed in `package.json` to modify the `compile` script. It removes the Forge-specific compilation steps (`compile:forge`) and makes the main `compile` script directly call `hardhat compile` instead of both.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/view-pure-read/README.md#_snippet_11\n\nLANGUAGE: diff\nCODE:\n```\n- \"compile\": \"$npm_execpath run compile:forge && $npm_execpath run compile:hardhat\",\n- \"compile:forge\": \"forge build\",\n- \"compile:hardhat\": \"hardhat compile\",\n+ \"compile\": \"hardhat compile\"\n```\n\n----------------------------------------\n\nTITLE: Compiling Contracts using pnpm\nDESCRIPTION: The `pnpm compile` command compiles the smart contracts in the project using either hardhat or forge. It runs both build commands by default, but you can customize this behavior by modifying the `package.json`. This step generates the necessary contract artifacts for deployment.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/onft721-zksync/README.md#_snippet_2\n\nLANGUAGE: Bash\nCODE:\n```\npnpm compile\n```\n\n----------------------------------------\n\nTITLE: Initializing LayerZero OApp Configuration\nDESCRIPTION: Illustrates the usage of the `lz:oapp:config:init` Hardhat task to generate a `layerzero.config.ts` file. The command takes the contract name and desired file name as parameters. This command initializes a configuration file with default LayerZero settings, streamlining the configuration process for OApps.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/oft-alt/README.md#_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\nnpx hardhat lz:oapp:config:init --contract-name CONTRACT_NAME --oapp-config FILE_NAME\n```\n\n----------------------------------------\n\nTITLE: Installing with yarn\nDESCRIPTION: Installs the `@layerzerolabs/oapp-evm-upgradeable` package using the yarn package manager. This command adds the package as a dependency to your project.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/packages/oapp-evm-upgradeable/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn install @layerzerolabs/oapp-evm-upgradeable\n```\n\n----------------------------------------\n\nTITLE: Prepare Environment File\nDESCRIPTION: Copies the example environment file `.env.example` to `.env`. The user must then edit `.env` to configure private keys and RPC URLs for deployment.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/lzapp-migration/README.md#_snippet_5\n\nLANGUAGE: Bash\nCODE:\n```\ncp .env.example .env\n```\n\n----------------------------------------\n\nTITLE: Running Automated Tests with pnpm for the Project\nDESCRIPTION: This command executes the project's test suite through pnpm, which runs the configured test scripts defined in the package manifest. It is important for validating correct functionality before deployment.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/oft-solana/README.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npnpm test\n```\n\n----------------------------------------\n\nTITLE: Converting Null or Undefined to Zero EVM Address with makeZeroAddress - TypeScript\nDESCRIPTION: This TypeScript example shows how to use makeZeroAddress from the @layerzerolabs/devtools-evm package to convert null, undefined, or the EVM zero address into a standardized EVM zero address string ('0x0000000000000000000000000000000000000000'). The function takes an address (string, null, or undefined) and ensures that only valid addresses are returned as-is, while falsey or zero values return the canonical zero address. This utility aids in address normalization before transaction calls or storage, especially when null or undefined values need to be made compliant with EVM requirements. Only the @layerzerolabs/devtools-evm package is required.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/packages/devtools-evm/README.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { makeZeroAddress } from \"@layerzerolabs/devtools-evm\";\n\nmakeZeroAddress(\"0xEe6cF2E1Bc7645F8439d241ce37820305F2BB3F8\"); // Returns '0xEe6cF2E1Bc7645F8439d241ce37820305F2BB3F8'\nmakeZeroAddress(\"0x0000000000000000000000000000000000000000\"); // Returns '0x0000000000000000000000000000000000000000'\nmakeZeroAddress(undefined); // Returns '0x0000000000000000000000000000000000000000'\nmakeZeroAddress(null); // Returns '0x0000000000000000000000000000000000000000'\n```\n\n----------------------------------------\n\nTITLE: Loading Environment Variables (Bash)\nDESCRIPTION: Loads the environment variables defined in the `.env` file into the current shell session using the `source` command.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/oft-adapter-initia/README.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nsource .env\n```\n\n----------------------------------------\n\nTITLE: Estimate lzReceive Gas Usage - Bash\nDESCRIPTION: This command executes the `gas:lzReceive` pnpm script, which runs a Foundry script to estimate the gas usage of the `lzReceive` function. It requires various parameters like RPC URL, endpoint addresses, endpoint IDs, sender/receiver addresses, message payload, message value, and number of runs.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/oft/README.md#_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\npnpm gas:lzReceive\n  <rpcUrl> \\\n  <endpointAddress> \\\n  <srcEid> \\\n  <sender> \\\n  <dstEid> \\\n  <receiver> \\\n  <message> \\\n  <msg.value> \\\n  <numOfRuns>\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm gas:lzCompose <RPC_URL> <DST_ENDPOINT_ADDRESS> <srcEid> <SenderOApp> <dstEid> <ReceiverOApp> <composer> <composeMsg> <msg.value> <numOfRuns>\n```\n\n----------------------------------------\n\nTITLE: Applying LayerZero OApp Read Configuration (Bash)\nDESCRIPTION: Hardhat command used to apply the configurations defined in the specified OApp configuration file (e.g., `layerzero.config.ts`). This command executes the necessary transactions to wire the OApp Read contracts according to the defined pathways and settings.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/uniswap-read/README.md#_snippet_24\n\nLANGUAGE: bash\nCODE:\n```\nnpx hardhat lz:oapp-read:wire --oapp-config layerzero.config.ts\n```\n\n----------------------------------------\n\nTITLE: Initializing OFT Program's SendConfig and ReceiveConfig Accounts\nDESCRIPTION: Command to initialize the pathway configuration for Solana OFT, which is a step unique to pathways involving Solana.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/oft-solana/README.md#_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\nnpx hardhat lz:oft:solana:init-config --oapp-config layerzero.config.ts\n```\n\n----------------------------------------\n\nTITLE: Get help using Hardhat LayerZero plugin (Bash)\nDESCRIPTION: This command shows all of the commands available in the LayerZero Hardhat plugin.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/oft-adapter/README.md#_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nnpx hardhat lz:deploy --help\n```\n\n----------------------------------------\n\nTITLE: Compiling Contracts with Forge (Bash)\nDESCRIPTION: Executes the `pnpm compile:forge` command, which typically runs `forge build`, to compile the smart contracts using only the Forge toolchain.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/view-pure-read/README.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\npnpm compile:forge\n```\n\n----------------------------------------\n\nTITLE: Basic Programmatic Usage of Export Deployments\nDESCRIPTION: Example of programmatically using the export deployments package with either error-safe or error-throwing functions to generate deployment files.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/packages/export-deployments/README.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// generateSafe is an error-safe function that returns an Either<Error, OutputFile[]> object\nimport { generateSafe } from \"@layerzerolabs/export-deployments\";\n\n// if throwing an error is desired, generate is a better option\nimport { generate } from \"@layerzerolabs/export-deployments\";\n\ngenerateSafe({\n  deploymentsDir: \"./my/deployments\",\n  outDir: \"./generated\",\n});\n```\n\n----------------------------------------\n\nTITLE: Compiling Contracts with Hardhat and Forge\nDESCRIPTION: This command compiles smart contracts using both Hardhat and Forge.  It executes both `forge build` and `hardhat compile` commands sequentially.  The user is expected to have both tools installed and configured properly.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/uniswap-read/README.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\npnpm compile\n```\n\n----------------------------------------\n\nTITLE: LayerZero Configuration File Template\nDESCRIPTION: Example of a generated LayerZero configuration file showing endpoint definitions and connection configurations between Arbitrum Sepolia and Sepolia testnet networks, including send/receive libraries and DVN settings.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/oft/README.md#_snippet_2\n\nLANGUAGE: yml\nCODE:\n```\nimport { EndpointId } from '@layerzerolabs/lz-definitions'\n\nconst arbsepContract = {\n    eid: EndpointId.ARBSEP_V2_TESTNET,\n    contractName: 'MyOFT',\n}\nconst sepoliaContract = {\n    eid: EndpointId.SEPOLIA_V2_TESTNET,\n    contractName: 'MyOFT',\n}\n\nexport default {\n    contracts: [{ contract: arbsepContract }, { contract: sepoliaContract }],\n    connections: [\n        {\n            from: arbsepContract,\n            to: sepoliaContract,\n            config: {\n                sendLibrary: '0x4f7cd4DA19ABB31b0eC98b9066B9e857B1bf9C0E',\n                receiveLibraryConfig: { receiveLibrary: '0x75Db67CDab2824970131D5aa9CECfC9F69c69636', gracePeriod: 0 },\n                sendConfig: {\n                    executorConfig: { maxMessageSize: 10000, executor: '0x5Df3a1cEbBD9c8BA7F8dF51Fd632A9aef8308897' },\n                    ulnConfig: {\n                        confirmations: 1,\n                        requiredDVNs: ['0x53f488E93b4f1b60E8E83aa374dBe1780A1EE8a8'],\n                        optionalDVNs: [],\n                        optionalDVNThreshold: 0,\n                    },\n                },\n                // receiveConfig: {\n                //     ulnConfig: {\n                //         confirmations: 2,\n                //         requiredDVNs: ['0x53f488E93b4f1b60E8E83aa374dBe1780A1EE8a8'],\n                //         optionalDVNs: [],\n                //         optionalDVNThreshold: 0,\n                //     },\n                // },\n            },\n        },\n        {\n            from: sepoliaContract,\n            to: arbsepContract,\n            config: {\n                sendLibrary: '0xcc1ae8Cf5D3904Cef3360A9532B477529b177cCE',\n                receiveLibraryConfig: { receiveLibrary: '0xdAf00F5eE2158dD58E0d3857851c432E34A3A851', gracePeriod: 0 },\n                // sendConfig: {\n                //     executorConfig: { maxMessageSize: 10000, executor: '0x718B92b5CB0a5552039B593faF724D182A881eDA' },\n                //     ulnConfig: {\n                //         confirmations: 2,\n                //         requiredDVNs: ['0x8eebf8b423B73bFCa51a1Db4B7354AA0bFCA9193'],\n                //         optionalDVNs: [],\n                //         optionalDVNThreshold: 0,\n                //     },\n                // },\n                receiveConfig: {\n                    ulnConfig: {\n                        confirmations: 1,\n                        requiredDVNs: ['0x8eebf8b423B73bFCa51a1Db4B7354AA0bFCA9193'],\n                        optionalDVNs: [],\n                        optionalDVNThreshold: 0,\n                    },\n                },\n            },\n        },\n    ],\n}\n```\n\n----------------------------------------\n\nTITLE: Wiring LayerZero OApp Configuration\nDESCRIPTION: Demonstrates the usage of the `lz:oapp:wire` Hardhat task to configure OApp contracts on different chains based on the provided `layerzero.config.ts`.  The command configures connections and settings between deployed OApp contracts, based on the settings found in the configuration file. This includes setting peers, configuring message libraries, and enforced options.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/oft-alt/README.md#_snippet_3\n\nLANGUAGE: Bash\nCODE:\n```\nnpx hardhat lz:oapp:wire --oapp-config YOUR_LAYERZERO_CONFIG_FILE\n```\n\n----------------------------------------\n\nTITLE: Compile Contracts using pnpm (Bash)\nDESCRIPTION: This command compiles contracts using both Hardhat and Forge. It ensures that both Solidity and any other contract languages are built before deployment or testing.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/oft-adapter/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm compile\n```\n\n----------------------------------------\n\nTITLE: Installing @layerzerolabs/omnicounter-devtools-evm via npm (Shell)\nDESCRIPTION: This snippet provides the shell command to install the @layerzerolabs/omnicounter-devtools-evm package using npm, which is necessary to add the LayerZero Omnicounter devtools to a JavaScript or TypeScript project. The only prerequisite is that Node.js and npm are already installed on the system. The command must be run from a terminal within the target project directory, and it will add the package and its dependencies to the project's node_modules folder. This operation modifies the project's package.json and package-lock.json files as appropriate.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/packages/omnicounter-devtools-evm/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ npm install @layerzerolabs/omnicounter-devtools-evm\n```\n\n----------------------------------------\n\nTITLE: Setting New Delegate for Move Contract (Bash)\nDESCRIPTION: Executes the command to set the delegate address for the Move VM OApp to the value specified in the `move.layerzero.config.ts` file. This is the first step in transferring ownership.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/oft-adapter-initia/README.md#_snippet_23\n\nLANGUAGE: bash\nCODE:\n```\npnpm run lz:sdk:move:set-delegate --oapp-config move.layerzero.config.ts\n```\n\n----------------------------------------\n\nTITLE: Sending OFT from Sepolia to Solana\nDESCRIPTION: Command to send OFT tokens from Sepolia to Solana, specifying the network, destination endpoint ID, amount, and destination address.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/oft-solana/README.md#_snippet_24\n\nLANGUAGE: bash\nCODE:\n```\nnpx hardhat --network sepolia-testnet send --dst-eid 40168 --amount <AMOUNT> --to <TO>\n```\n\n----------------------------------------\n\nTITLE: Sending message from Solana to Sepolia V1 (bash)\nDESCRIPTION: This command sends an OFT message from Solana to Sepolia, specifying recipient address, amount, mint address, and program ID. It facilitates cross-chain token transfers from Solana to EVM-compatible networks.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/lzapp-migration/README.md#_snippet_26\n\nLANGUAGE: bash\nCODE:\n```\nnpx hardhat lz:oft:solana:send --amount 1000000000 --from-eid 40168 --to <EVM_ADDRESS> --to-eid 10161 --mint <MINT_ADDRESS> --program-id <PROGRAM_ID> --escrow <ESCROW>\n```\n\n----------------------------------------\n\nTITLE: CLI Utility - promptToContinue Function with Custom Messages in @layerzerolabs/io-devtools\nDESCRIPTION: Prompts the user with a yes/no question in the command line interface, awaiting a response. Supports custom message prompts and default responses, returning a boolean indicating user confirmation. Utilizes Node.js readline to handle input/output streams.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/packages/io-devtools/README.md#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nasync function promptToContinue(message?: string, defaultValue: boolean = true): Promise<boolean> {\n  const rl = readline.createInterface({ input: process.stdin, output: process.stdout });\n  const promptMessage = message ? message + ' (yes/no): ' : 'Do you want to continue? (yes/no): ';\n  return new Promise((resolve) => {\n    rl.question(promptMessage, (answer) => {\n      rl.close();\n      const normalized = answer.trim().toLowerCase();\n      if (normalized === 'yes' || normalized === 'y') {\n        resolve(true);\n      } else if (normalized === 'no' || normalized === 'n') {\n        resolve(false);\n      } else {\n        resolve(defaultValue);\n      }\n    });\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Wiring OApp Read Configurations\nDESCRIPTION: This bash command wires the OApp read configurations using the specified configuration file, utilizing the `lz:oapp-read:wire` task. This action is used to set the configuration settings defined in the configuration file.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/oapp-read/README.md#_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\nnpx hardhat lz:oapp-read:wire --oapp-config layerzero.config.ts\n```\n\n----------------------------------------\n\nTITLE: Creating Bidirectional Cross-Chain Pathways with Basic Connections\nDESCRIPTION: This snippet defines a simple set of connections between Ethereum and Arbitrum contracts to enable two-way communication, forming pathways for message passing. It sets the 'from' and 'to' contracts for each direction, establishing the primary linkages for cross-chain interactions.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/view-pure-read/README.md#_snippet_20\n\nLANGUAGE: TypeScript\nCODE:\n```\nconnections: [\n  // ETH <--> ARB PATHWAY: START\n  {\n    from: ethereumContract,\n    to: arbitrumContract,\n  },\n  {\n    from: arbitrumContract,\n    to: ethereumContract,\n  },\n  // ETH <--> ARB PATHWAY: END\n];\n```\n\n----------------------------------------\n\nTITLE: Creating Multisig Transaction with Aptos CLI\nDESCRIPTION: This command creates a multisig transaction using the Aptos CLI. It requires a JSON file containing the transaction details, the multisig address, and the private key of the signer. The `--assume-yes` flag automatically confirms the transaction.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/oapp-aptos-move/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\naptos multisig create-transaction \\\n    --json-file <path-to-json-file> \\\n    --multisig-address <your-multisig-address> \\\n    --private-key-file <path-to-private-key> \\\n    --assume-yes\n```\n\n----------------------------------------\n\nTITLE: Installing Anchor CLI Version 0.29.0 Using Cargo in Bash\nDESCRIPTION: This snippet installs the Anchor CLI version 0.29.0 from the Coral repository using Cargo (Rust's package manager and build tool). The flagged '--locked' ensures the Cargo.lock file versions are respected. Anchor CLI is essential for Solana smart contract development, deployment, and testing.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/oft-solana/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncargo install --git https://github.com/coral-xyz/anchor --tag v0.29.0 anchor-cli --locked\n```\n\n----------------------------------------\n\nTITLE: Show Hardhat Deploy Help\nDESCRIPTION: Displays the available command-line arguments and options for the `lz:deploy` Hardhat task.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/lzapp-migration/README.md#_snippet_14\n\nLANGUAGE: Bash\nCODE:\n```\nnpx hardhat lz:deploy --help\n```\n\n----------------------------------------\n\nTITLE: Help Command for lz:deploy\nDESCRIPTION: This command utilizes the `--help` flag to display help information for the `lz:deploy` Hardhat task. It provides details about the available CLI arguments, allowing users to configure the deployment process effectively. This enables users to understand the available options and parameters they can use to deploy the contracts.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/onft721-zksync/README.md#_snippet_9\n\nLANGUAGE: Bash\nCODE:\n```\nnpx hardhat lz:deploy --help\n```\n\n----------------------------------------\n\nTITLE: Installing LayerZero DevTools CLI using package managers\nDESCRIPTION: Various methods to install and run the LayerZero DevTools CLI using different package managers like npm, yarn, pnpm, and bun.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/packages/devtools-cli/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx @layerzerolabs/devtools-cli@latest\n# or\nyarn @layerzerolabs/devtools-cli\n# or\npnpm @layerzerolabs/devtools-cli\n# or\nbunx @layerzerolabs/devtools-cli\n```\n\n----------------------------------------\n\nTITLE: Reading OApp Configuration with Hardhat\nDESCRIPTION: This Bash command executes a Hardhat task (`lz:oapp-read:config:get`) to display the current OApp configuration for each chain and pathway. The output is presented in three columns: custom configuration, default configuration, and active configuration. This allows for checking the different configurations that are used in the message pathway.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/oapp-read/README.md#_snippet_5\n\nLANGUAGE: Bash\nCODE:\n```\nnpx hardhat lz:oapp-read:config:get --oapp-config YOUR_OAPP_CONFIG\n```\n\n----------------------------------------\n\nTITLE: Removing Forge Build from Compilation Process\nDESCRIPTION: This diff shows how to modify the `package.json` file to remove the Forge build step from the default compile command. This will make `pnpm compile` only execute `hardhat compile`.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/uniswap-read/README.md#_snippet_10\n\nLANGUAGE: diff\nCODE:\n```\n- \"compile\": \"$npm_execpath run compile:forge && $npm_execpath run compile:hardhat\",\n- \"compile:forge\": \"forge build\",\n- \"compile:hardhat\": \"hardhat compile\",\n+ \"compile\": \"hardhat compile\"\n```\n\n----------------------------------------\n\nTITLE: Initializing LayerZero OApp Read Configuration File (Bash)\nDESCRIPTION: Hardhat command to generate a default `layerzero.config.ts` file. Requires specifying the contract name and an optional config name. This command scaffolds the configuration based on networks defined in the Hardhat setup.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/uniswap-read/README.md#_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\nnpx hardhat lz:oapp-read:config:init --contract-name [YOUR_CONTRACT_NAME] --oapp-config [CONFIG_NAME]\n```\n\n----------------------------------------\n\nTITLE: Installing LayerZero Devtools with pnpm - Bash\nDESCRIPTION: This snippet demonstrates how to install the @layerzerolabs/protocol-devtools package using pnpm. It adds the package as a project dependency and downloads it from the npm registry. The command uses the '--save' flag to update the project's package.json file.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/packages/protocol-devtools/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm install --save @layerzerolabs/protocol-devtools\n```\n\n----------------------------------------\n\nTITLE: Displaying Help for OFT SDK Commands\nDESCRIPTION: Provides a command to display help information and available options for the OFT SDK through PNPM.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/oft-aptos-move/README.md#_snippet_32\n\nLANGUAGE: bash\nCODE:\n```\npnpm run lz:sdk:help\n```\n\n----------------------------------------\n\nTITLE: Customizing DVN Configuration with Custom Metadata Fetching in TypeScript\nDESCRIPTION: Advanced example showing how to extend the default metadata with custom Data Validator Nodes (DVNs) for specific networks. This demonstrates adding a custom DVN named 'SuperCustomDVN' to both Amoy Testnet and Fuji networks.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/packages/metadata-tools/README.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { generateConnectionsConfig, defaultFetchMetadata, IMetadata, IMetadataDvns } from \"@layerzerolabs/metadata-tools\";\n\n// create a custom fetchMetadata implementation\nconst customFetchMetadata = async (): Promise<IMetadata> => {\n    // get the default metadata\n    const defaultMetadata = await defaultFetchMetadata() \n\n    // extend the Amoy DVNs with custom DVN(s)\n    const amoyTestnetDVNsWithCustom: IMetadataDvns = {\n      ...metadata['amoy-testnet']!.dvns,\n      '0x9f0e79aeb198750f963b6f30b99d87c6ee5a0467': {\n          version: 2,\n          canonicalName: 'SuperCustomDVN',\n          id: 'super-custom-dvn',\n      },\n    }\n    // extend the Fuji DVNs with custom DVN(s)\n    const fujiDVNsWithCustom: IMetadataDvns = {\n        ...metadata.fuji!.dvns,\n        '0x9f0e79aeb198750f963b6f30b99d87c6ee5a0467': {\n            version: 2,\n            canonicalName: 'SuperCustomDVN',\n            id: 'super-custom-dvn',\n        },\n    }\n\n    return {\n        ...metadata,\n        'amoy-testnet': {\n            ...metadata['amoy-testnet']!,\n            dvns: amoyTestnetDVNsWithCustom,\n        },\n        fuji: {\n            ...metadata.fuji!,\n            dvns: fujiDVNsWithCustom,\n        },\n    }\n}\n\n// declare enforced options like in the example without custom fetchMetadata\n\n  // We can now pass 'SuperCustomDVN' as a DVN value in our pathway(s)\nconst pathways = [\n  [avalancheContract, polygonContract, [['SuperCustomDVN'], []], [1, 1], [EVM_ENFORCED_OPTIONS, EVM_ENFORCED_OPTIONS]],\n]\n\nconst connections = await generateConnectionsConfig(pathways, { fetchMetadata: customFetchMetadata })\n```\n\n----------------------------------------\n\nTITLE: Setting Delegate for Move Contract (Bash)\nDESCRIPTION: Sets the delegate address for the deployed Move VM OApp using the LayerZero SDK. It reads the delegate address specified in the `move.layerzero.config.ts` file.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/oft-adapter-initia/README.md#_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\npnpm run lz:sdk:move:set-delegate --oapp-config move.layerzero.config.ts\n```\n\n----------------------------------------\n\nTITLE: Installing @layerzerolabs/oft-evm with yarn in Bash\nDESCRIPTION: This snippet demonstrates how to install the @layerzerolabs/oft-evm npm package using the yarn package manager. It requires yarn to be installed and adds the package to the dependencies of a JavaScript or TypeScript project compatible with EVM chains.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/packages/oft-evm/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn install @layerzerolabs/oft-evm\n```\n\n----------------------------------------\n\nTITLE: Configuring Delegate for Move OFT using TypeScript\nDESCRIPTION: Defines the configuration for a Move OFT, specifically setting the delegate account address in the move.layerzero.config.ts file. This setup is necessary before executing the delegate transfer command to change ownership or delegation.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/oft-aptos-move/README.md#_snippet_24\n\nLANGUAGE: TypeScript\nCODE:\n```\n    contracts: [\n        {\n            contract: your_contract_name,\n            config: {\n                delegate: 'YOUR_DESIRED_DELEGATE_ACCOUNT_ADDRESS',\n            },\n        },\n        ...\n    ]\n```\n\n----------------------------------------\n\nTITLE: Estimate lzCompose Gas Usage - Bash\nDESCRIPTION: This command executes the `gas:lzCompose` pnpm script, which runs a Foundry script to estimate the gas usage of the `lzCompose` function. It requires various parameters including RPC URL, endpoint addresses, endpoint IDs, sender/receiver OApps, composer address, compose message payload, message value, and number of runs.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/oft/README.md#_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\npnpm gas:lzCompose\n  <rpcUrl> \\\n  <endpointAddress> \\\n  <srcEid> \\\n  <sender> \\\n  <dstEid> \\\n  <receiver> \\\n  <composer> \\\n  <composeMsg> \\\n  <msg.value> \\\n  <numOfRuns>\n```\n\n----------------------------------------\n\nTITLE: Install Anchor CLI v0.29.0\nDESCRIPTION: Installs a specific version of the Anchor CLI (v0.29.0) from its GitHub repository using Cargo. This version is required for compiling the Solana OFT program.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/lzapp-migration/README.md#_snippet_2\n\nLANGUAGE: Bash\nCODE:\n```\ncargo install --git https://github.com/coral-xyz/anchor --tag v0.29.0 anchor-cli --locked\n```\n\n----------------------------------------\n\nTITLE: Compile Project Contracts\nDESCRIPTION: Compiles both EVM contracts using Hardhat and Forge, and Solana contracts using Anchor. This prepares the build artifacts for deployment.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/lzapp-migration/README.md#_snippet_9\n\nLANGUAGE: Bash\nCODE:\n```\npnpm compile\n```\n\n----------------------------------------\n\nTITLE: Filesystem Utilities - isReadable Function in @layerzerolabs/io-devtools\nDESCRIPTION: Checks if a filesystem path is readable by the current user. Returns true if access is permitted; if the path does not exist or is inaccessible, returns false. Uses fs.accessSync with the fs.constants.R_OK flag for permission verification.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/packages/io-devtools/README.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction isReadable(path) {\n  try {\n    fs.accessSync(path, fs.constants.R_OK);\n    return true;\n  } catch (error) {\n    return false;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using an OmniContractFactory in TypeScript\nDESCRIPTION: This snippet illustrates how to use an `OmniContractFactory`. It imports required types like `EndpointId`, `OmniPoint`, and `OmniContractFactory` from specific LayerZero devtools packages.  The `OmniContractFactory` is a function designed to construct an `OmniContract` from an `OmniPoint`.  The example shows how to create an OmniPoint and use the factory to get the corresponding OmniContract.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/packages/devtools-evm-hardhat/README.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { EndpointId } from \"@layerzerolabs/lz-definitions\";\nimport { OmniPoint } from \"@layerzerolabs/devtools\";\nimport { OmniContractFactory } from \"@layerzerolabs/devtools-evm\";\n\ndeclare const omniContractFactory: OmniContractFactory;\n\nconst omniPoint: OmniPoint = {\n  eid: EndpointId.ETHEREUM_MAINNET,\n  address: \"0xEe6cF2E1Bc7645F8439d241ce37820305F2BB3F8\",\n};\n\nconst omniContract = await omniContractFactory(omniPoint);\n```\n\n----------------------------------------\n\nTITLE: Installing @layerzerolabs/oft-evm with pnpm in Bash\nDESCRIPTION: This snippet shows the command to install the @layerzerolabs/oft-evm npm package using the pnpm package manager. It requires pnpm to be installed on the system and executes a straightforward package installation for Node.js projects. The command adds the package to the project's dependencies.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/packages/oft-evm/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm install @layerzerolabs/oft-evm\n```\n\n----------------------------------------\n\nTITLE: Deploy Contract to Network in Hardhat\nDESCRIPTION: Deploys a contract to any available network based on the configuration in `hardhat.config.ts`. The task takes a deploy tag (defaults to the contract name) as input and returns a list of selectable networks for deployment.  It utilizes `hardhat-deploy` and leverages configurations defined in `hardhat.config.ts`.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/view-pure-read/README.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\n{\n    'arbitrum-sepolia': {\n        eid: EndpointId.ARBSEP_V2_TESTNET,\n        url: process.env.RPC_URL_ARBSEP_TESTNET,\n        accounts,\n    },\n    'base-sepolia': {\n        eid: EndpointId.BASESEP_V2_TESTNET,\n        url: process.env.RPC_URL_BASE_TESTNET,\n        accounts,\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: Installing LayerZero OApp EVM with npm - Bash\nDESCRIPTION: This bash command uses npm to install the @layerzerolabs/oapp-evm package, making it available for use in your Node.js project. Ensure npm is installed and initialized in your project directory. The command downloads and adds LayerZero's OApp library as a dependency with default settings, without requiring additional arguments or configuration.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/packages/oapp-evm/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @layerzerolabs/oapp-evm\n```\n\n----------------------------------------\n\nTITLE: Setting destination minimum gas (bash)\nDESCRIPTION: This command sets the minimal gas requirement for receiving messages, defaulting to 1, which bypasses gas assertion checks. It targets the Sepolia test network for cross-chain messaging configuration.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/lzapp-migration/README.md#_snippet_24\n\nLANGUAGE: bash\nCODE:\n```\nnpx hardhat --network sepolia-testnet lz:lzapp:set-min-dst-gas --dst-eid 40168\n```\n\n----------------------------------------\n\nTITLE: Implementing a New LayerZero Devtools CLI Operation in TypeScript\nDESCRIPTION: Defines a new CLI operation class 'MoveBuildOperation' implementing the 'INewOperation' interface to add a 'build' command for the 'move' virtual machine. It specifies required arguments and provides an asynchronous implementation that calls the external 'buildMove' function. This snippet depends on the 'INewOperation' interface and the 'buildMove' function imported from a Move task module. It demonstrates the structure needed to integrate custom operations into the LayerZero Devtools CLI and export them for further extension.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/packages/devtools-extensible-cli/README.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { build as buildMove } from \"../../tasks/move/build\";\nimport { INewOperation } from \"./NewOperation\";\n\nclass MoveBuildOperation implements INewOperation {\n  // the vm to use\n  vm = \"move\";\n  // the name of this operation\n  operation = \"build\";\n  // the required arguments for the operation\n  reqArgs = [\"oapp_config\", \"named_addresses\", \"move_deploy_script\"];\n  // arguments that you want to create in addition to the pre-defined ones\n  addArgs = [];\n\n  // the implementation of the operation\n  async impl(args: any): Promise<void> {\n    await buildMove(args);\n  }\n}\n\nconst NewOperation = new MoveBuildOperation();\nexport { NewOperation };\n```\n\n----------------------------------------\n\nTITLE: Deploying Contracts Using Hardhat CLI Bash\nDESCRIPTION: Deploys the LayerZero omnichain smart contracts to configured blockchains using the Hardhat framework. The deployer wallet configuration must be set in a `.env` file, containing either the mnemonic or private key for the deployer account funded with native tokens. Runs `npx hardhat lz:deploy` from the project root to start deployment and supports inspecting CLI arguments with `--help`.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/oft-alt/README.md#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nnpx hardhat lz:deploy\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpx hardhat lz:deploy --help\n```\n\n----------------------------------------\n\nTITLE: Deploying contracts with Hardhat CLI\nDESCRIPTION: Command to deploy contracts to desired blockchains using Hardhat, with environment variables for wallet configuration. Run in the project directory.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/oapp/README.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nnpx hardhat lz:deploy\n```\n\n----------------------------------------\n\nTITLE: Adding Mint Function to Move OFT Source Code in Rust\nDESCRIPTION: Provides a Rust function to mint tokens within the OFT implementation for testing purposes. This function should be added to the source file to enable minting via move SDK scripts, primarily for development and testing.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/oft-aptos-move/README.md#_snippet_28\n\nLANGUAGE: Rust\nCODE:\n```\npublic entry fun mint(\n    admin: &signer,\n    recipient: address,\n    amount: u64,\n) acquires OftImpl {\n    assert_admin(address_of(admin));\n    primary_fungible_store::mint(&store().mint_ref, recipient, amount);\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Contract Configuration - Shell\nDESCRIPTION: This snippet illustrates the use of the `setConfig` task, used for setting the configuration of a specific contract.  It takes the path to a configuration file, network, and contract name (or address) as parameters. Optionally it accepts a gnosis configuration file path.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/packages/ua-devtools-evm-hardhat/README.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\npnpm hardhat setConfig --networks ethereum,bsc,avalanche --name OFT --config-path \"./appConfig.json\" --gnosis-config-path \"./gnosisConfig.json\"\n```\n\n----------------------------------------\n\nTITLE: Modifying package.json to Remove Hardhat Tests (Diff)\nDESCRIPTION: Shows the changes needed in `package.json` to modify the `test` script. It removes the Hardhat-specific test steps (`test:hardhat`) and makes the main `test` script directly call `forge test` instead of both.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/view-pure-read/README.md#_snippet_15\n\nLANGUAGE: diff\nCODE:\n```\n- \"test\": \"$npm_execpath test:forge && $npm_execpath test:hardhat\",\n- \"test:forge\": \"forge test\",\n- \"test:hardhat\": \"$npm_execpath hardhat test\"\n+ \"test\": \"forge test\"\n```\n\n----------------------------------------\n\nTITLE: Generate Base58 Private Key\nDESCRIPTION: Uses a Hardhat task to output the configured wallet's private key in base58 format. This is necessary if the Solana private key in the `.env` file needs to be in base58.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/lzapp-migration/README.md#_snippet_6\n\nLANGUAGE: Bash\nCODE:\n```\nnpx hardhat lz:solana:base-58\n```\n\n----------------------------------------\n\nTITLE: Getting Help for lz:deploy Hardhat Task (Bash)\nDESCRIPTION: Runs the `npx hardhat lz:deploy` command with the `--help` flag to display available command-line arguments and options for customizing the deployment process.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/view-pure-read/README.md#_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\nnpx hardhat lz:deploy --help\n```\n\n----------------------------------------\n\nTITLE: Running the OApp Wiring Task in Hardhat\nDESCRIPTION: This command executes the lz:oapp:wire Hardhat task which automates the process of connecting multiple OApp contracts together by calling setPeer on each contract. This simplifies the cross-chain application setup process.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/packages/toolbox-hardhat/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm hardhat lz:oapp:wire\n```\n\n----------------------------------------\n\nTITLE: Installing @layerzerolabs/omnicounter-devtools\nDESCRIPTION: This code snippet demonstrates how to install the @layerzerolabs/omnicounter-devtools package using npm. It requires npm to be installed on the system. The command installs the package and its dependencies.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/packages/omnicounter-devtools/README.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ npm install @layerzerolabs/omnicounter-devtools\n```\n\n----------------------------------------\n\nTITLE: Configuring OFT Adapter Metadata (TypeScript)\nDESCRIPTION: Modifies the `deploy-move/OFTAdapterInitParams.ts` file to set the `move_vm_fa_address` within the `oftMetadata` constant. This address should be the Fungible Asset address of your deployed token on Initia.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/oft-adapter-initia/README.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nconst oftMetadata = {\n  move_vm_fa_address: \"<your fungible asset address>\",\n};\n```\n\n----------------------------------------\n\nTITLE: Transferring OApp Ownership on Move VM (Bash)\nDESCRIPTION: Transfers the ownership of the LayerZero OApp configuration on the Move VM to a new address using the LayerZero SDK. Requires the OApp config and the new owner's address (in hex format).\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/oft-adapter-initia/README.md#_snippet_24\n\nLANGUAGE: bash\nCODE:\n```\npnpm run lz:sdk:move:transfer-oapp-owner --oapp-config move.layerzero.config.ts --new-owner <new-owner-address>\n```\n\n----------------------------------------\n\nTITLE: Compiling Contracts with Hardhat (Bash)\nDESCRIPTION: Executes the `pnpm compile:hardhat` command, which typically runs `hardhat compile`, to compile the smart contracts using only the Hardhat framework.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/view-pure-read/README.md#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\npnpm compile:hardhat\n```\n\n----------------------------------------\n\nTITLE: Using the CLI Interface for Export Deployments\nDESCRIPTION: Commands for using the CLI interface of the @layerzerolabs/export-deployments package, either when installed locally or via npx.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/packages/export-deployments/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# When installed locally\n@layerzerolabs/export-deployments --help\n\n# Or using npx, preferred\nnpx @layerzerolabs/export-deployments\n```\n\n----------------------------------------\n\nTITLE: Configuring Deployer Wallet Environment Variables (Text)\nDESCRIPTION: Provides examples of setting environment variables (`MNEMONIC` or `PRIVATE_KEY`) in a `.env` file to configure the deployer account wallet. One of these options is required for deployment and should contain a funded private key or mnemonic.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/view-pure-read/README.md#_snippet_16\n\nLANGUAGE: text\nCODE:\n```\nMNEMONIC=\"test test test test test test test test test test test junk\"\nor...\nPRIVATE_KEY=\"0xabc...def\"\n```\n\n----------------------------------------\n\nTITLE: Adding addChecksum Utility Function\nDESCRIPTION: This patch adds the addChecksum utility to the codebase, providing a method to generate or verify checksums essential for data integrity verification.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/packages/toolbox-hardhat/CHANGELOG.md#_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n// Utility function addChecksum added for data integrity verification.\n```\n\n----------------------------------------\n\nTITLE: Updating Dependencies for SDK and Test Utilities\nDESCRIPTION: This snippet reflects dependency updates to support improved SDK functionalities and testing capabilities within the development environment.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/packages/toolbox-hardhat/CHANGELOG.md#_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n// Update dependencies for SDK functionalities and test utilities.\n```\n\n----------------------------------------\n\nTITLE: Executing Multisig Transactions with Aptos CLI\nDESCRIPTION: Steps to create and approve multisig transactions on Aptos by generating a transaction JSON, then creating and approving with specified private keys and addresses. Includes linking to detailed multisig tutorial resources.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/oft-aptos-move/README.md#_snippet_35\n\nLANGUAGE: bash\nCODE:\n```\naptos multisig create-transaction \\\n    --json-file <path-to-json-file> \\\n    --multisig-address <your-multisig-address> \\\n    --private-key-file <path-to-private-key> \\\n    --assume-yes\n```\n\nLANGUAGE: bash\nCODE:\n```\naptos multisig approve \\\n    --multisig-address <your-multisig-address> \\\n    --sequence-number <your-sequence-number> \\\n    --private-key-file <path-to-private-key> \\\n    --assume-yes\n```\n\n----------------------------------------\n\nTITLE: Unsetting Adapter Rate Limit for Move Contract (Bash)\nDESCRIPTION: Removes a previously set rate limit for token transfers from the Move VM OFT to a specific destination Endpoint ID (eid). Uses the LayerZero SDK command and requires the OApp config and target eid.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/oft-adapter-initia/README.md#_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\npnpm run lz:sdk:move:adapter-unset-rate-limit --oapp-config move.layerzero.config.ts --to-eid number\n```\n\n----------------------------------------\n\nTITLE: Verifying Move VM Object Ownership using Aptos CLI\nDESCRIPTION: Uses the `aptos account list` command to query the resources associated with a specific Move VM object address on an Aptos network. This command helps verify the current owner of the object after an ownership transfer by checking the `owner` field in the `0x1::object::ObjectCore` resource.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/oft-adapter-aptos-move/README.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\naptos account list \\\n  --account <OBJECT_ADDRESS> \\\n  --url https://fullnode.testnet.aptoslabs.com \\\n  --query resources\n```\n\n----------------------------------------\n\nTITLE: Exposing Test Networks on Localhost\nDESCRIPTION: Starts the Docker containers, exposing the test networks defined in `docker-compose.yaml` on `localhost`. Allows direct interaction with the test networks via `hardhat` tasks, and also builds tasks when a source file is changed using `pnpm dev`.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/DEVELOPMENT.md#_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\npnpm start\n```\n\n----------------------------------------\n\nTITLE: Running Tests Using Hardhat and Forge via pnpm Bash\nDESCRIPTION: Executes tests with both Hardhat and Forge frameworks by default using the `pnpm test` command. Like compilation, specific test runner commands enable targeting one framework. This supports parallel testing strategies and ease of migration or comparison.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/oft-alt/README.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\npnpm test\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm test:forge\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm test:hardhat\n```\n\n----------------------------------------\n\nTITLE: Updating Dependencies for Project Package Public Access\nDESCRIPTION: This patch makes the project packages publicly accessible by updating dependencies, facilitating broader usage and integration.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/packages/toolbox-hardhat/CHANGELOG.md#_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n// Dependencies updated to make packages public.\n```\n\n----------------------------------------\n\nTITLE: Running Hardhat Script to Wire Cross-Chain Configurations\nDESCRIPTION: This command executes the Hardhat script to apply the layerzero configuration settings defined in 'layerzero.config.ts'. It sets up the cross-chain relay and messaging protocols, enabling the pathways and configurations previously defined to take effect in deployment.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/view-pure-read/README.md#_snippet_23\n\nLANGUAGE: Shell\nCODE:\n```\nnpx hardhat lz:oapp-read:wire --oapp-config layerzero.config.ts\n```\n\n----------------------------------------\n\nTITLE: Converting Initia Bech32 Address to Hex (Bash)\nDESCRIPTION: Uses the `initiad` CLI tool to parse an Initia bech32 address (prefixed with 'init') and output its corresponding hex representation in JSON format. This hex address is required for configuration files like `move.layerzero.config.ts`.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/oft-adapter-initia/README.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ninitiad keys parse <your-bech32-addresss> --output json\n```\n\n----------------------------------------\n\nTITLE: Updating Hardhat Deploy Package Version\nDESCRIPTION: This snippet details an update to the hardhat-deploy package, which streamlines deployment tasks in Hardhat environments. It enhances deployment scripts and tooling within the development workflow.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/packages/toolbox-hardhat/CHANGELOG.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n// Update to hardhat-deploy package to the latest version for improved deployment workflows.\n```\n\n----------------------------------------\n\nTITLE: Adding documentation for layerzero.config\nDESCRIPTION: This snippet provides documentation annotations for layerzero.config, aiding developers in configuring and understanding project setup.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/packages/toolbox-hardhat/CHANGELOG.md#_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n// Documentation comments added for layerzero.config setup.\n```\n\n----------------------------------------\n\nTITLE: Approving Multisig Transaction with Aptos CLI\nDESCRIPTION: This command approves a multisig transaction using the Aptos CLI. It requires the multisig address, the sequence number of the transaction, and the private key of the approver. The `--assume-yes` flag automatically confirms the approval.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/oapp-aptos-move/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\naptos multisig approve \\\n    --multisig-address <your-multisig-address> \\\n    --sequence-number <your-sequence-number> \\\n    --private-key-file <path-to-private-key> \\\n    --assume-yes\n```\n\n----------------------------------------\n\nTITLE: Feature-Flagged lz:deploy Hardhat Task\nDESCRIPTION: This snippet adds a feature-flag-controlled 'lz:deploy' task to Hardhat, allowing conditional deployment actions based on configuration flags.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/packages/toolbox-hardhat/CHANGELOG.md#_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n// Conditional feature-flagged 'lz:deploy' task added for deployment control.\n```\n\n----------------------------------------\n\nTITLE: Transferring Object Ownership on Move VM (Bash)\nDESCRIPTION: Transfers the ownership of the underlying Move VM object (which includes upgrade authority) to a new address using the LayerZero SDK. Requires the OApp config and the new owner's address (in hex format).\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/oft-adapter-initia/README.md#_snippet_25\n\nLANGUAGE: bash\nCODE:\n```\npnpm run lz:sdk:move:transfer-object-owner --oapp-config move.layerzero.config.ts --new-owner <new-owner-address>\n```\n\n----------------------------------------\n\nTITLE: Verifying Ownership Transfer on Aptos\nDESCRIPTION: Runs a command to list resources for a given object address, verifying the owner and admin addresses in the blockchain resource data to confirm successful ownership transfer. Requires the fullnode URL and object address.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/oft-aptos-move/README.md#_snippet_33\n\nLANGUAGE: bash\nCODE:\n```\naptos account list \\\n  --account <OBJECT_ADDRESS> \\\n  --url <your-fullnode-url> \\\n  --query resources\n```\n\n----------------------------------------\n\nTITLE: Linting the entire Project using PNPM\nDESCRIPTION: This command lints the entire project using `pnpm`.  It uses `pnpm lint` to analyze the project for code style and quality issues.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/DEVELOPMENT.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npnpm lint\n```\n\n----------------------------------------\n\nTITLE: Running Tests with Hardhat (Bash)\nDESCRIPTION: Executes the `pnpm test:hardhat` command, which typically runs `hardhat test`, to run the test suite using only the Hardhat framework.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/view-pure-read/README.md#_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\npnpm test:hardhat\n```\n\n----------------------------------------\n\nTITLE: Running Project Tests using pnpm Shell Command\nDESCRIPTION: Runs the entire test suite for the repository using `pnpm` to verify the correctness of the code and ensure all tests pass before submitting contributions. Requires `pnpm` and project build completion.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/README.md#_snippet_7\n\nLANGUAGE: Shell\nCODE:\n```\npnpm test\n```\n\n----------------------------------------\n\nTITLE: Configuring Gnosis Safe Signer in Hardhat Networks (JavaScript)\nDESCRIPTION: To use a Gnosis Safe multisig for signing transactions, add the `safeConfig` property to the network configuration within the `networks` object in your `hardhat.config.ts` file. This configuration requires the URL of the Safe API and the Safe's address. This setting is utilized when tasks like `lz:oapp:wire` are executed with the `--safe` flag.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/view-pure-read/README.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// hardhat.config.ts\n\nnetworks: {\n  // Include configurations for other networks as needed\n  fuji: {\n    /* ... */\n    // Network-specific settings\n    safeConfig: {\n      safeUrl: 'http://something', // URL of the Safe API, not the Safe itself\n      safeAddress: 'address'\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing @layerzerolabs/toolbox-foundry with Node Package Managers - bash\nDESCRIPTION: Commands to install the @layerzerolabs/toolbox-foundry package using common JavaScript package managers: yarn, pnpm, and npm. This snippet enables developers to add the package as a dependency to their project environment and is the prerequisite step before configuring or using the package.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/packages/toolbox-foundry/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @layerzerolabs/toolbox-foundry\n\npnpm add @layerzerolabs/toolbox-foundry\n\nnpm install @layerzerolabs/toolbox-foundry\n```\n\n----------------------------------------\n\nTITLE: Build Solana OFT Program\nDESCRIPTION: Builds the Solana OFT program using the Anchor CLI. The `-e OFT_ID=<OFT_PROGRAM_ID>` flag injects the OFT program ID into the build process. Requires Docker to be running.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/lzapp-migration/README.md#_snippet_12\n\nLANGUAGE: Bash\nCODE:\n```\nanchor build -v -e OFT_ID=<OFT_PROGRAM_ID>\n```\n\n----------------------------------------\n\nTITLE: Running Forge Tests\nDESCRIPTION: This command runs the tests using Forge. It focuses on tests written for the Forge testing framework. It compiles the contracts and executes the test suites defined in the project's test files. The output is the test results.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/onft721/README.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\npnpm test:forge\n```\n\n----------------------------------------\n\nTITLE: Modifying package.json to Remove Hardhat Tests (Diff)\nDESCRIPTION: Illustrates how to modify the `package.json` file to adjust the default `test` script, specifically removing the Hardhat test step (`test:hardhat`) to rely solely on Forge tests.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/native-oft-adapter/README.md#_snippet_6\n\nLANGUAGE: Diff\nCODE:\n```\n- \"test\": \"$npm_execpath test:forge && $npm_execpath test:hardhat\",\n- \"test:forge\": \"forge test\",\n- \"test:hardhat\": \"$npm_execpath hardhat test\"\n+ \"test\": \"forge test\"\n```\n\n----------------------------------------\n\nTITLE: Updating Dependencies to Monorepo 2.1.12\nDESCRIPTION: This patch updates dependencies to match the monorepo version 2.1.12, ensuring all packages are synchronized and compatible within the monorepo structure.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/packages/toolbox-hardhat/CHANGELOG.md#_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n// Dependencies updated to align with monorepo version 2.1.12.\n```\n\n----------------------------------------\n\nTITLE: Installing @layerzerolabs/test-devtools-evm-foundry with npm\nDESCRIPTION: This command installs the @layerzerolabs/test-devtools-evm-foundry package using npm.  The package provides tools for testing LayerZero applications within an EVM Foundry environment. It adds the package and its dependencies to your project.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/packages/test-devtools-evm-foundry/README.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ npm install @layerzerolabs/test-devtools-evm-foundry\n```\n\n----------------------------------------\n\nTITLE: Configuring Move Contract Delegate in TypeScript\nDESCRIPTION: Specifies the desired delegate account address within the `contracts` array in the `move.layerzero.config.ts` configuration file. This configuration is essential for the `lz:sdk:move:set-delegate` command.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/oft-adapter-aptos-move/README.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n    contracts: [\n        {\n            contract: your_contract_name,\n            config: {\n                delegate: 'YOUR_DESIRED_DELEGATE_ACCOUNT_ADDRESS',\n            },\n        },\n        ...\n    ]\n```\n\n----------------------------------------\n\nTITLE: Permanently Disabling Freezing on OFT Using pnpm Bash Command\nDESCRIPTION: Runs the command to disable freezing functionality permanently on the OFT contract, ensuring holders that freezing powers will not be used. Requires LayerZero config and deployed OFT. Outputs a permanent state change disabling freezing features.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/oft-aptos-move/README.md#_snippet_23\n\nLANGUAGE: bash\nCODE:\n```\npnpm run lz:sdk:move:permanently-disable-freezing --oapp-config move.layerzero.config.ts\n```\n\n----------------------------------------\n\nTITLE: Configuring New Delegate for Ownership Transfer (TypeScript)\nDESCRIPTION: Updates the `move.layerzero.config.ts` file to specify the new delegate address before running the `set-delegate` command as part of the ownership transfer process. The address must be in hex format.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/oft-adapter-initia/README.md#_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\n    contracts: [\n        {\n            contract: your_contract_name,\n            config: {\n                delegate: 'YOUR_DESIRED_DELEGATE_ACCOUNT_ADDRESS',\n            },\n        },\n        ...\n    ]\n```\n\n----------------------------------------\n\nTITLE: Run Tests using Forge (Bash)\nDESCRIPTION: This command executes tests using the Forge testing framework only. It will run only Forge tests.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/oft-adapter/README.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\npnpm test:forge\n```\n\n----------------------------------------\n\nTITLE: Implementing mint function for Move VM OFT\nDESCRIPTION: A Rust function to add to oft_fa.move that enables minting functionality for testing purposes. It checks admin permissions and mints tokens to the specified recipient address.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/oft-initia/README.md#_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\npublic entry fun mint(\n    admin: &signer,\n    recipient: address,\n    amount: u64,\n) acquires OftImpl {\n    assert_admin(address_of(admin));\n    primary_fungible_store::mint(&store().mint_ref, recipient, amount);\n}\n```\n\n----------------------------------------\n\nTITLE: Define lzReceive Gas Profiling Script - JSON\nDESCRIPTION: This JSON snippet defines a pnpm script in `package.json` to run a Foundry script (`GasProfiler.s.sol`) specifically configured to profile the gas usage of the `lzReceive` function across multiple runs. It uses the `--via-ir` flag for compilation and specifies the exact function signature.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/oft/README.md#_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n\"gas:lzReceive\": \"forge script scripts/GasProfiler.s.sol:GasProfilerScript --via-ir --sig 'run_lzReceive(string,address,uint32,address,uint32,address,bytes,uint256,uint256)'\"\n```\n\n----------------------------------------\n\nTITLE: Getting a Disconnected Contract Instance - TypeScript\nDESCRIPTION: This code snippet shows how to get a disconnected contract instance using the `createContractFactory` from the `@layerzerolabs/devtools-evm-hardhat` package. The contract can be retrieved by its name or address along with the Endpoint ID.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/CHEATSHEET.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// By OmniPointHardhat\nimport { createContractFactory } from \"@layerzerolabs/devtools-evm-hardhat\";\n\n// In this case we need to instantiate a contract factory\nconst createContract = createContractFactory();\n\nconst eid = EndpointId.BST_MAINNET;\n\n// We can ask for the contract by its name and eid\nconst contract = await createContract({ eid: address: '0x' })\n\n// Or its name\nconst contract = await createContract({ eid: contractName: 'MyOApp' })\n```\n\n----------------------------------------\n\nTITLE: Command to Set Delegate for Move OFT via PNPM\nDESCRIPTION: Runs a command to update the delegate address of a Move OFT implementation, affecting the delegate's control over the OFT. Requires the path to the configuration file and the target delegate account address.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/oft-aptos-move/README.md#_snippet_25\n\nLANGUAGE: bash\nCODE:\n```\npnpm run lz:sdk:move:set-delegate --oapp-config move.layerzero.config.ts\n```\n\n----------------------------------------\n\nTITLE: Installing with pnpm\nDESCRIPTION: Installs the `@layerzerolabs/oapp-evm-upgradeable` package using the pnpm package manager. This command adds the package as a dependency to your project.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/packages/oapp-evm-upgradeable/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm install @layerzerolabs/oapp-evm-upgradeable\n```\n\n----------------------------------------\n\nTITLE: Adding Initia Key with Initiad CLI (Bash)\nDESCRIPTION: Generates a new secp256k1 key pair for Initia using the `initiad` CLI tool, assigns it a name, specifies the coin type (118 for Cosmos-based chains), and stores it in the test keyring backend. Replace `<your-key-name>` with the desired alias.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/oft-adapter-initia/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ninitiad keys add <your-key-name> --key-type secp256k1 --coin-type 118 --keyring-backend test\n```\n\n----------------------------------------\n\nTITLE: Modifying package.json to Compile only with Hardhat\nDESCRIPTION: This diff shows how to modify the `package.json` file to compile contracts only with Hardhat, removing the Forge build command.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/oapp-read/README.md#_snippet_10\n\nLANGUAGE: diff\nCODE:\n```\n- \"compile\": \"$npm_execpath run compile:forge && $npm_execpath run compile:hardhat\",\n- \"compile:forge\": \"forge build\",\n- \"compile:hardhat\": \"hardhat compile\",\n+ \"compile\": \"hardhat compile\"\n```\n\n----------------------------------------\n\nTITLE: Initializing Git Submodules\nDESCRIPTION: This command initializes and updates the git submodules after cloning the repository without the `--recurse-submodules` flag. It uses the `git submodule update --init` command to fetch the submodules required for the project.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/DEVELOPMENT.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit submodule update --init\n```\n\n----------------------------------------\n\nTITLE: Committing Library Changes with Git\nDESCRIPTION: Instructions for committing changes after adding a new library submodule, including a workaround for known issues with pre-commit hooks in the monorepo structure.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/packages/toolbox-foundry/DEVELOPMENT.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngit commit -m \"chore: Adding XXX library\" --no-verify\n```\n\n----------------------------------------\n\nTITLE: Configuring Solana OFT Address for Wiring (JSON)\nDESCRIPTION: Creates or modifies a JSON file in the Solana deployment directory (e.g., `deployments/solana-mainnet/MyOFT.json`) to include the deployed OFT store address. This is required when wiring Solana to a Move-VM chain.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/oft-adapter-initia/README.md#_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"address\": <oft-store-address-from-solana-deployment-folder>\n}\n```\n\n----------------------------------------\n\nTITLE: Minting TO Move OFT for Testing via PNPM\nDESCRIPTION: Command to invoke the mint function in the Move SDK, minting tokens to a specified address. Used only in testing environments; involves setting the amount and recipient address.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/oft-aptos-move/README.md#_snippet_29\n\nLANGUAGE: bash\nCODE:\n```\npnpm run lz:sdk:move:mint-to-move-oft --oapp-config move.layerzero.config.ts --amount-ld 1000000000000000000 --to-address <your-move-account-address>\n```\n\n----------------------------------------\n\nTITLE: Gnosis Safe Configuration Example\nDESCRIPTION: Shows how to configure a Hardhat network to use a Gnosis Safe multisig as the signer for transactions.  This configuration specifies the URL of the Safe API and the address of the Safe contract.  This configuration enables the use of a Gnosis Safe multisig for signing transactions during the wiring process.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/oft-alt/README.md#_snippet_4\n\nLANGUAGE: YAML\nCODE:\n```\nnetworks: {\n  // Include configurations for other networks as needed\n  fuji: {\n    /* ... */\n    // Network-specific settings\n    safeConfig: {\n      safeUrl: 'http://something', // URL of the Safe API, not the Safe itself\n      safeAddress: 'address'\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using isDeepEqual Utility Function in TypeScript\nDESCRIPTION: Demonstrates the isDeepEqual utility function that compares two objects by value, returning true if they match exactly and false otherwise. This can be used for comparing complex objects within the LayerZero ecosystem.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/packages/devtools/README.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nisDeepEqual({ a: 1 }, { a: 1 }); // true\nisDeepEqual({ a: 1 }, { a: \"1\" }); // false\n```\n\n----------------------------------------\n\nTITLE: Getting a Connected Contract Instance - TypeScript\nDESCRIPTION: This code snippet demonstrates how to get a connected contract instance using `createConnectedContractFactory` from the `@layerzerolabs/devtools-evm-hardhat` package. A connected contract instance has a provider attached and can be used to interact with the blockchain. It retrieves contract instances using either the contract address or name with Endpoint ID\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/CHEATSHEET.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// By OmniPointHardhat\nimport { createConnectedContractFactory } from \"@layerzerolabs/devtools-evm-hardhat\";\n\n// In this case we need to instantiate a contract factory\nconst createContract = createConnectedContractFactory();\n\nconst eid = EndpointId.BST_MAINNET;\n\n// We can ask for the contract by its address and eid\nconst contract = await createContract({ eid, address: \"0x\" });\n\n// Or its name and eid\nconst contract = await createContract({ eid, contractName: \"MyOApp\" });\n```\n\n----------------------------------------\n\nTITLE: Testing Contracts using Forge\nDESCRIPTION: This command specifically runs the tests using the Forge testing framework. This enables you to test the contracts using the Forge test runner if it is your preferred tool. The command can be configured via modification of the `package.json` file.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/onft721-zksync/README.md#_snippet_6\n\nLANGUAGE: Bash\nCODE:\n```\npnpm test:forge\n```\n\n----------------------------------------\n\nTITLE: Installing onft-evm with pnpm\nDESCRIPTION: This command installs the `@layerzerolabs/onft-evm` package using the pnpm package manager.  The package is a reference OmniChain implementation of the ERC721 token standard. No specific parameters are used in this command; it installs the package and its dependencies into the project.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/packages/onft-evm/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm install @layerzerolabs/onft-evm\n```\n\n----------------------------------------\n\nTITLE: Pushing Changes to Fork using Git Shell Command\nDESCRIPTION: Example Git command to push committed changes from a local feature branch (e.g., `feat/your-feature-name`) to the corresponding branch on the contributor's forked repository (`origin`) on GitHub. Requires Git and a configured remote.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/README.md#_snippet_8\n\nLANGUAGE: Shell\nCODE:\n```\ngit push origin feat/your-feature-name\n```\n\n----------------------------------------\n\nTITLE: Checking Make Availability for LayerZero Development\nDESCRIPTION: Verifies that the required 'make' CLI utility is available on your system, which is necessary for building the LayerZero devtools package.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/packages/toolbox-foundry/DEVELOPMENT.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake --help\n```\n\n----------------------------------------\n\nTITLE: Building LayerZero Move Contracts (Bash)\nDESCRIPTION: Builds the Move VM contracts (for Initia) using the LayerZero SDK build script. It references the OApp configuration file (`move.layerzero.config.ts`) and specifies the OApp type as 'oft'. This command compiles the contracts without deploying them.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/oft-adapter-initia/README.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\npnpm run lz:sdk:move:build --oapp-config move.layerzero.config.ts --oapp-type oft\n```\n\n----------------------------------------\n\nTITLE: Deploying Solana Program with Priority Fee Using solana program deploy\nDESCRIPTION: This command deploys the compiled Solana program to the specified program ID on the devnet network while attaching a compute unit price fee for prioritization during network congestion. It uses the '--with-compute-unit-price' flag with a value in micro lamports to expedite processing.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/oft-solana/README.md#_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nsolana program deploy --program-id target/deploy/oft-keypair.json target/verifiable/oft.so -u devnet --with-compute-unit-price <COMPUTE_UNIT_PRICE_IN_MICRO_LAMPORTS>\n```\n\n----------------------------------------\n\nTITLE: Checking Forge Version and Updating with Foundryup in Bash\nDESCRIPTION: This code snippet provides troubleshooting steps when compiling or running tests with Forge. It specifies checking Forge's version to ensure it is newer than 01-05-2023, and instructs updating Forge using the foundryup tool if necessary. Dependencies include Forge and foundryup installed in the development environment.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/DEVELOPMENT.md#_snippet_32\n\nLANGUAGE: bash\nCODE:\n```\nforge --version\n```\n\nLANGUAGE: bash\nCODE:\n```\nfoundryup\n```\n\n----------------------------------------\n\nTITLE: List Anchor Program IDs\nDESCRIPTION: Lists the program IDs (public keys) associated with the keypairs configured in Anchor, typically showing the ID for the 'oft' program.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/lzapp-migration/README.md#_snippet_11\n\nLANGUAGE: Bash\nCODE:\n```\nanchor keys list\n```\n\n----------------------------------------\n\nTITLE: Hardhat Network Configuration YAML\nDESCRIPTION: Defines network configurations within a Hardhat project, including endpoint IDs, RPC URLs, and account details. This configuration is used by LayerZero Hardhat tasks for deploying and configuring contracts on specified networks. The `eid` field specifies the LayerZero Endpoint ID.  `url` specifies the RPC endpoint for the network. `accounts` provides the accounts to be used for deployment.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/oft-alt/README.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\n'arbitrum-sepolia': {\n    eid: EndpointId.ARBSEP_V2_TESTNET,\n    url: process.env.RPC_URL_ARBSEP_TESTNET,\n    accounts,\n},\n'base-sepolia': {\n    eid: EndpointId.BASESEP_V2_TESTNET,\n    url: process.env.RPC_URL_BASE_TESTNET,\n    accounts,\n}\n```\n\n----------------------------------------\n\nTITLE: Installing @layerzerolabs/oapp-alt-evm using npm\nDESCRIPTION: This snippet shows the command to install the @layerzerolabs/oapp-alt-evm package using npm.  The package is downloaded and installed along with its dependencies.  The command utilizes npm's package management capabilities which includes the creation or update of a package-lock.json file.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/packages/oapp-alt-evm/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @layerzerolabs/oapp-alt-evm\n```\n\n----------------------------------------\n\nTITLE: Run Tests with Hardhat - Bash\nDESCRIPTION: This command executes the Hardhat-specific test script defined in `package.json`. Use this if you only want to run tests using the Hardhat test runner.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/oft/README.md#_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\npnpm test:hardhat\n```\n\n----------------------------------------\n\nTITLE: Creating an OmniVector in TypeScript\nDESCRIPTION: Shows how to define an OmniVector that represents a connection between two contracts in an omnichain universe. An OmniVector consists of two OmniPoint objects representing the source and destination contracts.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/packages/devtools/README.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { EndpointId } from \"@layerzerolabs/lz-definitions\";\nimport { OmniVector } from \"@layerzerolabs/devtools\";\n\nconst from: OmniPoint = {\n  eid: EndpointId.ETHEREUM_MAINNET,\n  address: \"0xEe6cF2E1Bc7645F8439d241ce37820305F2BB3F8\",\n};\n\nconst to: OmniPoint = {\n  eid: EndpointId.AVALANCHE_MAINNET,\n  address: \"0xEe6cF2E1Bc7645F8439d241ce37820305F2BB3F8\",\n};\n\nconst omniVector: OmniVector = { from, to };\n```\n\n----------------------------------------\n\nTITLE: Setting up Default Endpoint and OApp\nDESCRIPTION: Sets up the default `EndpointV2` and `DefaultOApp` contracts. This command uses hardhat tasks to deploy these contracts within the exposed test networks, readying the environment for testing.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/DEVELOPMENT.md#_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\npnpm hardhat lz:test:oapp:deploy\n```\n\n----------------------------------------\n\nTITLE: Compiling Contracts with Hardhat and Forge\nDESCRIPTION: This command compiles contracts using both Hardhat and Forge. It executes both `forge build` and `hardhat compile` commands sequentially.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/oapp-read/README.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\npnpm compile\n```\n\n----------------------------------------\n\nTITLE: Installing onft-evm with npm\nDESCRIPTION: This command installs the `@layerzerolabs/onft-evm` package using the npm package manager. The package is a reference OmniChain implementation of the ERC721 token standard. No specific parameters are used in this command; it installs the package and its dependencies into the project.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/packages/onft-evm/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @layerzerolabs/onft-evm\n```\n\n----------------------------------------\n\nTITLE: Cleaning Deployment Artifacts to Fix Failing Local Deployments in Bash\nDESCRIPTION: This snippet suggests cleaning all deployment directories when facing failing deployment transactions during local tests. It uses a custom pnpm clean command, likely configured to remove leftover artifacts from prior Hardhat runs. This helps ensure deployments start from a clean state to prevent stale data errors.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/DEVELOPMENT.md#_snippet_33\n\nLANGUAGE: bash\nCODE:\n```\npnpm clean\n```\n\n----------------------------------------\n\nTITLE: Wire OApp Contracts in Hardhat\nDESCRIPTION: This task calls the configuration functions between deployed OApp contracts on each chain, based on the provided `layerzero.config.ts` file. Running `lz:oapp:wire` applies the settings defined in the config and uses environment variables for keys and RPCs. It will only apply new changes.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/view-pure-read/README.md#_snippet_3\n\nLANGUAGE: Bash\nCODE:\n```\nnpx hardhat lz:oapp-read:wire --oapp-config YOUR_LAYERZERO_CONFIG_FILE\n```\n\n----------------------------------------\n\nTITLE: Configuring Gnosis Safe for LayerZero OApp Deployment\nDESCRIPTION: Configuration for using a Gnosis Safe multisig as the signer for LayerZero transactions in the hardhat.config.ts file. Defines safeConfig with safeUrl and safeAddress for a specific network.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/uniswap-read/README.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// hardhat.config.ts\n\nnetworks: {\n  // Include configurations for other networks as needed\n  fuji: {\n    /* ... */\n    // Network-specific settings\n    safeConfig: {\n      safeUrl: 'http://something', // URL of the Safe API, not the Safe itself\n      safeAddress: 'address'\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Requiring LayerZero and Ethers Plugins in Hardhat (JavaScript)\nDESCRIPTION: This JavaScript snippet shows how to require both @nomiclabs/hardhat-ethers and @layerzerolabs/ua-devtools-evm-hardhat plugins within a Hardhat configuration file (hardhat.config.js). Both plugins must be required to enable Ethers.js integration and LayerZero development tools. This code should be placed at the top-level scope of your configuration file, and assumes the packages are already installed.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/packages/ua-devtools-evm-hardhat/README.md#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nrequire(\"@nomiclabs/hardhat-ethers\");\nrequire(\"@layerzerolabs/ua-devtools-evm-hardhat\");\n```\n\n----------------------------------------\n\nTITLE: Configuring .huskyrc file\nDESCRIPTION: Ensures correct shell environment and path configuration within the `.huskyrc` file, which is necessary for git hooks. This setup is crucial for tools like `nvm` to function correctly during commit operations.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/DEVELOPMENT.md#_snippet_29\n\nLANGUAGE: bash\nCODE:\n```\n# This loads nvm.sh and sets the correct PATH before running hook\nexport NVM_DIR=\"$HOME/.nvm\"\n[ -s \"$NVM_DIR/nvm.sh\" ] && \\. \"$NVM_DIR/nvm.sh\"\n```\n\n----------------------------------------\n\nTITLE: Compiling Contracts with Specific Tools (Bash)\nDESCRIPTION: Shows commands to compile contracts using either Forge (`pnpm compile:forge`) or Hardhat (`pnpm compile:hardhat`) individually. These scripts are typically defined in `package.json`.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/native-oft-adapter/README.md#_snippet_2\n\nLANGUAGE: Bash\nCODE:\n```\npnpm compile:forge\npnpm compile:hardhat\n```\n\n----------------------------------------\n\nTITLE: Displaying Hardhat Deploy Help\nDESCRIPTION: This command displays the help information for the `lz:deploy` Hardhat task, listing available CLI arguments.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/oapp-read/README.md#_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nnpx hardhat lz:deploy --help\n```\n\n----------------------------------------\n\nTITLE: Getting CLI help for deployment\nDESCRIPTION: Command to display available arguments and options for the deployment script to customize deployment parameters.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/oapp/README.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nnpx hardhat lz:deploy --help\n```\n\n----------------------------------------\n\nTITLE: Approving Aptos Multisig Transaction via Aptos CLI\nDESCRIPTION: Uses the `aptos multisig approve` command for a signer (who is part of the multisig account) to approve a pending multisig transaction proposal identified by its sequence number. Requires the multisig address, the transaction sequence number, and the approver's private key.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/oft-adapter-aptos-move/README.md#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\naptos multisig approve \\\n    --multisig-address <your-multisig-address> \\\n    --sequence-number <your-sequence-number> \\\n    --private-key-file <path-to-private-key> \\\n    --assume-yes\n```\n\n----------------------------------------\n\nTITLE: Executing the build-lz-options tool using Node.js package managers - Bash\nDESCRIPTION: These commands demonstrate various ways to run the build-lz-options command-line tool from your terminal using popular Node.js package managers. The tool provides an interface to interactively build and serialize LayerZero OApp Options. Requires Node.js and one of the listed package managers installed.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/packages/build-lz-options/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx build-lz-options@latest\n# or\nyarn build-lz-options\n# or\npnpm build-lz-options\n# or\nbunx build-lz-options\n```\n\n----------------------------------------\n\nTITLE: Stopping the local registry\nDESCRIPTION: Stops the local NPM registry service.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/DEVELOPMENT.md#_snippet_27\n\nLANGUAGE: bash\nCODE:\n```\npnpm registry:stop\n```\n\n----------------------------------------\n\nTITLE: Set MNEMONIC in .env file\nDESCRIPTION: This is one option for setting your deployer wallet/account in your .env file.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/oft-adapter/README.md#_snippet_10\n\nLANGUAGE: text\nCODE:\n```\nMNEMONIC=\"test test test test test test test test test test test junk\"\n```\n\n----------------------------------------\n\nTITLE: Running Tests with Specific Tools (Bash)\nDESCRIPTION: Shows commands to run contract tests using either Forge (`pnpm test:forge`) or Hardhat (`pnpm test:hardhat`) individually. These scripts are typically defined in `package.json`.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/native-oft-adapter/README.md#_snippet_5\n\nLANGUAGE: Bash\nCODE:\n```\npnpm test:forge\npnpm test:hardhat\n```\n\n----------------------------------------\n\nTITLE: Removing Hardhat Tests from Testing Process\nDESCRIPTION: This diff demonstrates how to remove Hardhat tests from the default testing process by modifying the `package.json` file. This will cause `pnpm test` to execute only `forge test`.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/uniswap-read/README.md#_snippet_14\n\nLANGUAGE: diff\nCODE:\n```\n- \"test\": \"$npm_execpath test:forge && $npm_execpath test:hardhat\",\n- \"test:forge\": \"forge test\",\n- \"test:hardhat\": \"$npm_execpath hardhat test\"\n+ \"test\": \"forge test\"\n```\n\n----------------------------------------\n\nTITLE: Adjusting package.json Test Script Using diff\nDESCRIPTION: Shows how to modify the test command in package.json to remove hardhat tests and run only forge tests, using a diff. This customization allows users to tailor testing workflows as needed.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/oft-alt/README.md#_snippet_9\n\nLANGUAGE: diff\nCODE:\n```\n- \"test\": \"$npm_execpath test:forge && $npm_execpath test:hardhat\",\n- \"test:forge\": \"forge test\",\n- \"test:hardhat\": \"$npm_execpath hardhat test\"\n+ \"test\": \"forge test\"\n```\n\n----------------------------------------\n\nTITLE: Displaying LayerZero SDK Help Information\nDESCRIPTION: Runs the `lz:sdk:help` command using pnpm to display help information, listing available commands and options for the LayerZero SDK.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/oft-adapter-aptos-move/README.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\npnpm run lz:sdk:help\n```\n\n----------------------------------------\n\nTITLE: Retrieving Contract Configuration - Shell\nDESCRIPTION: This snippet shows how to use the `getConfig` task to fetch the configuration of a specific contract. It takes the contract address or name, network, and a list of remote networks as parameters. The contract name must be specified if the contract was deployed using `hardhat-deploy`.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/packages/ua-devtools-evm-hardhat/README.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\npnpm hardhat getConfig --network ethereum --remote-networks bsc,polygon,avalanche --name OFT\n```\n\n----------------------------------------\n\nTITLE: Setting Wire All Configuration - Shell\nDESCRIPTION: This example shows the usage of the `wireAll` task, which sets the wire all configuration of the specified contract. It uses environment (e) as a parameter, and optional flags for noPrompt (noPrompt), configPath, send to gnosis (n), and gnosisConfigPath.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/packages/ua-devtools-evm-hardhat/README.md#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\npnpm hardhat --network ethereum-testnet wireAll --e testnet\n```\n\n----------------------------------------\n\nTITLE: Deploying Contracts with LayerZero Hardhat Task (Bash)\nDESCRIPTION: Executes the `npx hardhat lz:deploy` command to initiate the deployment process for the LayerZero contracts using the configured deployer wallet and Hardhat tasks. Requires a properly configured `.env` file with `MNEMONIC` or `PRIVATE_KEY` and a funded deployer address.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/view-pure-read/README.md#_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\nnpx hardhat lz:deploy\n```\n\n----------------------------------------\n\nTITLE: Running Tests using pnpm\nDESCRIPTION: This command runs the tests for the project. By default, both Hardhat and Forge tests are executed. It executes the tests specified in the project configuration to verify the contracts' functionality. The output includes the test results and any errors encountered.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/onft721/README.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npnpm test\n```\n\n----------------------------------------\n\nTITLE: Modify package.json to remove Hardhat tests (Diff)\nDESCRIPTION: This shows how to modify the `package.json` file to remove the hardhat tests. If you are not using Hardhat, you can remove the hardhat tests from your tests step.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/oft-adapter/README.md#_snippet_9\n\nLANGUAGE: diff\nCODE:\n```\n- \"test\": \"$npm_execpath test:forge && $npm_execpath test:hardhat\",\n- \"test:forge\": \"forge test\",\n- \"test:hardhat\": \"$npm_execpath hardhat test\"\n+ \"test\": \"forge test\"\n```\n\n----------------------------------------\n\nTITLE: Installing @layerzerolabs/ua-devtools via NPM\nDESCRIPTION: This shell command utilizes the Node Package Manager (npm) to download and install the `@layerzerolabs/ua-devtools` package and its dependencies into the current Node.js project or globally, depending on configuration. Requires npm and Node.js to be pre-installed.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/packages/ua-devtools/README.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n$ npm install @layerzerolabs/ua-devtools\n```\n\n----------------------------------------\n\nTITLE: Installing onft-evm with yarn\nDESCRIPTION: This command installs the `@layerzerolabs/onft-evm` package using the yarn package manager. The package is a reference OmniChain implementation of the ERC721 token standard. No specific parameters are used in this command; it installs the package and its dependencies into the project.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/packages/onft-evm/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn install @layerzerolabs/onft-evm\n```\n\n----------------------------------------\n\nTITLE: Refining Tested Packages using `DOCKER_COMPOSE_RUN_TESTS_TURBO_ARGS`\nDESCRIPTION: Defines the `DOCKER_COMPOSE_RUN_TESTS_TURBO_ARGS` environment variable to run tests only for specific packages. The environment variable passes arguments to the `turbo` command, enabling filtering of test suites.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/DEVELOPMENT.md#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n# To only run tests for @layerzerolabs/ua-devtools-evm-hardhat-test package\nDOCKER_COMPOSE_RUN_TESTS_TURBO_ARGS=--filter=ua-devtools-evm-hardhat-test pnpm test:ci\n```\n\n----------------------------------------\n\nTITLE: Installing with npm\nDESCRIPTION: Installs the `@layerzerolabs/oapp-evm-upgradeable` package using the npm package manager. This command adds the package as a dependency to your project.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/packages/oapp-evm-upgradeable/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @layerzerolabs/oapp-evm-upgradeable\n```\n\n----------------------------------------\n\nTITLE: Building Packages and Examples using pnpm Shell Command\nDESCRIPTION: Executes the build process for all packages and examples within the repository using `pnpm`. This command compiles necessary code and prepares the tools for use. Requires dependencies to be installed first.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/README.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\npnpm build\n```\n\n----------------------------------------\n\nTITLE: Creating Associated Token Account for Solana OFT\nDESCRIPTION: Command to create an Associated Token Account for your address on Solana, which is required before minting OFT tokens.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/oft-solana/README.md#_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\nspl-token create-account <TOKEN_MINT>\n```\n\n----------------------------------------\n\nTITLE: Filtering and running tests\nDESCRIPTION: Runs tests with pattern matching, using `DOCKER_COMPOSE_RUN_TESTS_TURBO_ARGS`. This enables running specific test suites based on their file patterns (e.g., only tests matching `wire.test`).\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/DEVELOPMENT.md#_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nDOCKER_COMPOSE_RUN_TESTS_TURBO_ARGS=\"--filter=ua-devtools-evm-hardhat-test -- wire.test\" pnpm test:ci\n```\n\n----------------------------------------\n\nTITLE: Switch Solana CLI to v1.18.26\nDESCRIPTION: Temporarily switches the active Solana command-line interface version to v1.18.26. This version provides improved program deployment features like priority fees.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/lzapp-migration/README.md#_snippet_15\n\nLANGUAGE: Bash\nCODE:\n```\nsh -c \"$(curl -sSfL https://release.solana.com/v1.18.26/install)\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving Default Configuration - Shell\nDESCRIPTION: This snippet demonstrates how to use the `getDefaultConfig` task.  The task retrieves the default configuration for specified chains.  It accepts a comma-separated list of network names as an argument.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/packages/ua-devtools-evm-hardhat/README.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npnpm hardhat getDefaultConfig --networks ethereum,bsc,polygon,avalanche\n```\n\n----------------------------------------\n\nTITLE: Running User Tests\nDESCRIPTION: Runs the E2E (end-to-end) user tests using the command `pnpm test:user`. This test suite simulates a user environment, publishing packages to a local NPM registry to verify example functionality.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/DEVELOPMENT.md#_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\npnpm test:user\n```\n\n----------------------------------------\n\nTITLE: Adding Feature-Flagged Task for Deployments\nDESCRIPTION: This patch introduces a feature-flagged task for deployment in Hardhat, enabling conditional execution of deployment processes based on feature flags.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/packages/toolbox-hardhat/CHANGELOG.md#_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n// Feature-flagged deployment task added to Hardhat tasks.\n```\n\n----------------------------------------\n\nTITLE: Configuring OFTAdapter in Hardhat Config\nDESCRIPTION: Configuration needed in hardhat.config.ts to specify the ERC20 token address that will be adapted with OFT functionality when deploying the OFTAdapter.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/mint-burn-oft-adapter/README.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// Replace `0x0` with the address of the ERC20 token you want to adapt to the OFT functionality.\noftAdapter: {\n    tokenAddress: '0x0',\n}\n```\n\n----------------------------------------\n\nTITLE: Downloading LayerZero OFT Example for Initia\nDESCRIPTION: Uses `npx` to download the LayerZero Omnichain Application (OApp) example template, specifically enabling experimental Initia examples via an environment variable.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/oft-adapter-initia/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nLZ_ENABLE_EXPERIMENTAL_INITIA_EXAMPLES=1 npx create-lz-oapp@latest\n```\n\n----------------------------------------\n\nTITLE: Installing @layerzerolabs/build-devtools using npm\nDESCRIPTION: Installs the @layerzerolabs/build-devtools package using the npm package manager. This command downloads and adds the package to your project's dependencies.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/packages/build-devtools/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @layerzerolabs/build-devtools\n```\n\n----------------------------------------\n\nTITLE: Using Forge-specific compile command\nDESCRIPTION: Command to compile contracts exclusively with Forge, bypassing Hardhat. Useful for developers preferring Forge for compilation.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/oapp/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm compile:forge\n```\n\n----------------------------------------\n\nTITLE: Building code when it changes\nDESCRIPTION: Runs `pnpm dev` from the project root. Useful if developing tasks, as the code will be automatically built when source files are modified.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/DEVELOPMENT.md#_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Switching Back Solana CLI Version to v1.17.31 After Deployment\nDESCRIPTION: This snippet reverts the Solana CLI version back to v1.17.31 for compatibility with Anchor 0.29.0 and rebuilds post-deployment. It runs the official Solana version installer shell script for v1.17.31.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/oft-solana/README.md#_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nsh -c \"$(curl -sSfL https://release.solana.com/v1.17.31/install)\"\n```\n\n----------------------------------------\n\nTITLE: Cloning LayerZero Devtools Repository using SSH\nDESCRIPTION: This code snippet demonstrates cloning the LayerZero devtools repository using SSH.  It uses the `git clone` command with the `--recurse-submodules` flag to ensure that git submodules are also cloned. SSH authentication is used instead of HTTPS.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/DEVELOPMENT.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit clone --recurse-submodules git@github.com:LayerZero-Labs/devtools.git\n```\n\n----------------------------------------\n\nTITLE: Compiling Contracts with pnpm (Bash)\nDESCRIPTION: Executes the default compile script defined in `package.json`, which typically compiles contracts using both Forge and Hardhat.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/native-oft-adapter/README.md#_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\npnpm compile\n```\n\n----------------------------------------\n\nTITLE: Testing the entire Project in CI environment\nDESCRIPTION: This command runs all project tests within a containerized environment using `pnpm test:ci`. This is typically performed in a Continuous Integration (CI) pipeline.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/DEVELOPMENT.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\npnpm test:ci\n```\n\n----------------------------------------\n\nTITLE: Install Project Dependencies - Bash\nDESCRIPTION: This command uses the pnpm package manager to install all project dependencies listed in the `package.json` file. It is the recommended way to set up the project environment.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/oft/README.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\npnpm install\n```\n\n----------------------------------------\n\nTITLE: Listing Initia Keys with Initiad CLI (Bash)\nDESCRIPTION: Lists all keys currently stored in the test keyring backend using the `initiad` CLI tool.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/oft-adapter-initia/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ninitiad keys list --keyring-backend test\n```\n\n----------------------------------------\n\nTITLE: Adding Signature to lz:errors:list Output\nDESCRIPTION: This update enhances the 'lz:errors:list' task to include signatures in its output, improving error validation and traceability.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/packages/toolbox-hardhat/CHANGELOG.md#_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n// Enhancements to 'lz:errors:list' task to include signatures in output.\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with pnpm\nDESCRIPTION: This command installs the project's dependencies using the pnpm package manager. Ensure pnpm is installed on your system before running this command.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/oapp-read/README.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\npnpm install\n```\n\n----------------------------------------\n\nTITLE: Get LayerZero Deploy Help - Bash\nDESCRIPTION: This command displays detailed information about the available arguments and options for the Hardhat LayerZero deployment task, helping you customize the deployment process.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/oft/README.md#_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nnpx hardhat lz:deploy --help\n```\n\n----------------------------------------\n\nTITLE: Using Hardhat-specific tests\nDESCRIPTION: Command to run tests only with Hardhat, ideal for projects reliant on Hardhat testing framework.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/oapp/README.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\npnpm test:hardhat\n```\n\n----------------------------------------\n\nTITLE: Installing @layerzerolabs/build-devtools using yarn\nDESCRIPTION: Installs the @layerzerolabs/build-devtools package using the yarn package manager. This command downloads and adds the package to your project's dependencies.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/packages/build-devtools/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn install @layerzerolabs/build-devtools\n```\n\n----------------------------------------\n\nTITLE: Updating Dependencies for EVM Testing in Hardhat and Foundry\nDESCRIPTION: This patch adds EVM testing capabilities to Hardhat and Foundry environments, expanding testing options for smart contracts.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/packages/toolbox-hardhat/CHANGELOG.md#_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n// Dependencies updated to add EVM testing abilities for Hardhat and Foundry.\n```\n\n----------------------------------------\n\nTITLE: Minting OFT Tokens on Solana\nDESCRIPTION: Command to mint OFT tokens on Solana, specifying the amount in local decimals and using the appropriate mint authority.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/oft-solana/README.md#_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\nspl-token mint <TOKEN_MINT> <AMOUNT> --multisig-signer ~/.config/solana/id.json --owner <MINT_AUTHORITY>\n```\n\n----------------------------------------\n\nTITLE: Using Forge-specific tests\nDESCRIPTION: Command to run tests exclusively with Forge, suitable for developers preferring Forge testing environment.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/oapp/README.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npnpm test:forge\n```\n\n----------------------------------------\n\nTITLE: Running Tests in Local Mode\nDESCRIPTION: This command runs tests in local mode using `pnpm test:local`. In this mode, tests run on the developer's machine, and `hardhat` nodes are accessible from the host. This is used for local development and debugging.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/DEVELOPMENT.md#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\npnpm test:local\n```\n\n----------------------------------------\n\nTITLE: Stopping the Network Containers\nDESCRIPTION: Stops the network containers that are running. Note that the state of local networks is not persisted.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/DEVELOPMENT.md#_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\npnpm stop\n```\n\n----------------------------------------\n\nTITLE: Compiling Contracts with Forge\nDESCRIPTION: This command compiles contracts using Forge. It runs the `forge build` command.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/oapp-read/README.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\npnpm compile:forge\n```\n\n----------------------------------------\n\nTITLE: Importing testing helpers from forge-std with Solidity - solidity\nDESCRIPTION: Example Solidity code illustrating the import of forge-std testing utilities included out of the box with the package, allowing usage of forge test helpers without separate installation. It imports 'console.sol' for logging and the 'Test' contract for writing tests, supporting Solidity test development alongside @layerzerolabs dependencies like solidity-bytes-utils.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/packages/toolbox-foundry/README.md#_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\n// forge-std is automatically resolved without needing to install it\n// so you can start using forge test helpers in your tests\nimport \"forge-std/console.sol\";\nimport { Test } from \"forge-std/Test.sol\";\n```\n\n----------------------------------------\n\nTITLE: Installing local packages in your project\nDESCRIPTION: Installs local packages in your project, which is required after setting up the local registry.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/DEVELOPMENT.md#_snippet_25\n\nLANGUAGE: bash\nCODE:\n```\npnpm i\n```\n\n----------------------------------------\n\nTITLE: Running Hardhat Tests\nDESCRIPTION: This command runs the tests using Hardhat. It is used specifically for tests built using the Hardhat testing framework. This will execute the tests defined within the project, ensuring the correct behavior and functionality of the smart contracts.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/onft721/README.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\npnpm test:hardhat\n```\n\n----------------------------------------\n\nTITLE: Listing Generated Solana Program IDs Using Anchor CLI\nDESCRIPTION: This command lists the Solana program IDs registered with Anchor, showing the public keys associated with keys synced in the project. It helps verify correct keypair generation needed for program deployment.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/oft-solana/README.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nanchor keys list\n```\n\n----------------------------------------\n\nTITLE: Building the Solana OFT Program with Anchor and Setting Program ID\nDESCRIPTION: This snippet builds the Solana OFT program using Anchor's build tool in verbose mode and sets an environment variable OFT_ID to the program ID of the OFT. This compiles the Rust smart contract into the target format for deployment, ensuring correct linkage to the program ID.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/oft-solana/README.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nanchor build -v -e OFT_ID=<OFT_PROGRAM_ID>\n```\n\n----------------------------------------\n\nTITLE: Importing LayerZero and Ethers Plugins in Hardhat (TypeScript)\nDESCRIPTION: This TypeScript snippet illustrates how to import @nomiclabs/hardhat-ethers and @layerzerolabs/ua-devtools-evm-hardhat within a Hardhat configuration file (hardhat.config.ts). These imports enable Ether.js support and LayerZero development tooling, and must be at the top of the configuration file. Ensure both dependencies are installed and TypeScript is properly configured in the project.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/packages/ua-devtools-evm-hardhat/README.md#_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nimport \"@nomiclabs/hardhat-ethers\";\nimport \"@layerzerolabs/ua-devtools-evm-hardhat\";\n```\n\n----------------------------------------\n\nTITLE: Starting Development Mode for Specific Packages\nDESCRIPTION: Starts the development mode specifically for the `create-lz-oapp` package and its dependencies, using the `--filter` option of the `turbo` CLI. This limits the scope of the development build and is useful when making changes to specific modules.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/DEVELOPMENT.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\npnpm dev --filter=create-lz-oapp...\n```\n\n----------------------------------------\n\nTITLE: Clearing pnpm module cache\nDESCRIPTION: Clears the pnpm module cache.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/DEVELOPMENT.md#_snippet_26\n\nLANGUAGE: bash\nCODE:\n```\npnpm store prune\n```\n\n----------------------------------------\n\nTITLE: Setting Required PNPM Version (Bash)\nDESCRIPTION: Installs a specific version (8.14.0) of pnpm globally using npm. This ensures compatibility with the project's dependencies and scripts.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/oft-adapter-initia/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -g pnpm@8.14.0\n```\n\n----------------------------------------\n\nTITLE: Accessing LayerZero SDK help\nDESCRIPTION: A bash command to display help information for the LayerZero SDK, providing details on available commands and their usage.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/oft-initia/README.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npnpm run lz:sdk:help\n```\n\n----------------------------------------\n\nTITLE: Prepare Solana Program Keypairs\nDESCRIPTION: Generates new Solana keypair files (`endpoint-keypair.json` and `oft-keypair.json`) for the program IDs in the `target/deploy/` directory, overwriting existing ones. It then syncs these keys with Anchor.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/lzapp-migration/README.md#_snippet_10\n\nLANGUAGE: Bash\nCODE:\n```\nsolana-keygen new -o target/deploy/endpoint-keypair.json --force\nsolana-keygen new -o target/deploy/oft-keypair.json --force\n\nanchor keys sync\n```\n\n----------------------------------------\n\nTITLE: Cloning LayerZero Devtools Repository using HTTPS\nDESCRIPTION: This code snippet demonstrates cloning the LayerZero devtools repository using HTTPS. It uses the `git clone` command with the `--recurse-submodules` flag to ensure that git submodules are also cloned, which is crucial for the project's dependencies.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/DEVELOPMENT.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone --recurse-submodules https://github.com/LayerZero-Labs/devtools.git\n```\n\n----------------------------------------\n\nTITLE: Getting Help for LayerZero Deployment Command (Bash)\nDESCRIPTION: Displays the help menu for the LayerZero Hardhat deployment task (`lz:deploy`), showing available command-line arguments, flags, and options.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/native-oft-adapter/README.md#_snippet_9\n\nLANGUAGE: Bash\nCODE:\n```\nnpx hardhat lz:deploy --help\n```\n\n----------------------------------------\n\nTITLE: Example Environment Variable Definitions for Aptos and Movement in Bash\nDESCRIPTION: Defines environment variables for EVM private key/mnemonic, Movement chain indexer/fullnode URLs, and Aptos account credentials to configure deployment and interaction parameters for Move VM and EVM networks. Requires user to replace placeholders with actual keys and addresses. Variables are sourced into shell environment for subsequent commands.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/oft-aptos-move/README.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nEVM_PRIVATE_KEY=<your-evm-private-key>\nEVM_MNEMONIC=<your-mnemonic>\n\n# If you are deploying to Movement chain\nMOVEMENT_INDEXER_URL=<indexer-url>\nMOVEMENT_FULLNODE_URL=<fullnode-url>\nMOVEMENT_ACCOUNT_ADDRESS=<your-movement-account-address>\nMOVEMENT_PRIVATE_KEY=<your-movement-private-key>\n\n# If you are deploying to Aptos chain\nAPTOS_ACCOUNT_ADDRESS=<your-aptos-account-address>\nAPTOS_PRIVATE_KEY=<your-aptos-private-key>\n```\n\n----------------------------------------\n\nTITLE: Compiling Contracts with Hardhat\nDESCRIPTION: This command compiles the smart contracts using Hardhat. It's an alternative to the default compilation process and is used when targeting Hardhat. The output of this command is the contract artifacts that can be used by the Hardhat deployment and test scripts.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/onft721/README.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npnpm compile:hardhat\n```\n\n----------------------------------------\n\nTITLE: Compiling Contracts using Hardhat\nDESCRIPTION: This command specifically compiles the contracts using the Hardhat build process. This command would typically be run when you're using Hardhat as your primary build tool and can be customized within the `package.json` file.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/onft721-zksync/README.md#_snippet_4\n\nLANGUAGE: Bash\nCODE:\n```\npnpm compile:hardhat\n```\n\n----------------------------------------\n\nTITLE: Monitoring Container Logs\nDESCRIPTION: Monitors the logs generated by the Docker containers, typically the `hardhat` nodes, using `pnpm logs`. This is useful for debugging and observing network activity within the test environment.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/DEVELOPMENT.md#_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\npnpm logs\n```\n\n----------------------------------------\n\nTITLE: Compile Contracts with Hardhat - Bash\nDESCRIPTION: This command executes the Hardhat-specific compilation script defined in `package.json`. Use this if you only want to compile contracts using the Hardhat development environment.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/oft/README.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\npnpm compile:hardhat\n```\n\n----------------------------------------\n\nTITLE: Running Tests with Hardhat and Forge\nDESCRIPTION: This command executes tests using both Hardhat and Forge testing frameworks. It sequentially runs both `forge test` and `hardhat test`.  It requires both tools to be properly installed and configured.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/uniswap-read/README.md#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\npnpm test\n```\n\n----------------------------------------\n\nTITLE: Configuring Initia Contract Delegate and Owner (TypeScript)\nDESCRIPTION: Specifies the initial delegate and owner addresses for an Initia contract within the `move.layerzero.config.ts` configuration file. These addresses must be in hex format and should initially be set to the deployer's account address.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/oft-adapter-initia/README.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n    contracts: [\n        {\n            contract: your_initia_contract_name,\n            config: {\n                delegate: 'your_initia_hex_account_address',\n                owner: 'your_initia_hex_account_address',\n            },\n        },\n    ],\n```\n\n----------------------------------------\n\nTITLE: Modify package.json to remove Forge build (Diff)\nDESCRIPTION: This shows how to modify the `package.json` file to remove the forge build command. If you are not using Forge, you can remove the forge build command from your compilation step.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/oft-adapter/README.md#_snippet_5\n\nLANGUAGE: diff\nCODE:\n```\n- \"compile\": \"$npm_execpath run compile:forge && $npm_execpath run compile:hardhat\",\n- \"compile:forge\": \"forge build\",\n- \"compile:hardhat\": \"hardhat compile\",\n+ \"compile\": \"hardhat compile\"\n```\n\n----------------------------------------\n\nTITLE: Run Tests using Hardhat (Bash)\nDESCRIPTION: This command executes tests using the Hardhat testing framework. It will run only Hardhat tests.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/oft-adapter/README.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\npnpm test:hardhat\n```\n\n----------------------------------------\n\nTITLE: Running Tests with Hardhat\nDESCRIPTION: This command runs tests using Hardhat. It runs the `hardhat test` command.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/oapp-read/README.md#_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\npnpm test:hardhat\n```\n\n----------------------------------------\n\nTITLE: Testing Contracts using Hardhat\nDESCRIPTION: This command runs the tests using the Hardhat testing framework.  This is typically run when you are using Hardhat as the primary testing tool. This test command is configurable within the `package.json` file.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/onft721-zksync/README.md#_snippet_7\n\nLANGUAGE: Bash\nCODE:\n```\npnpm test:hardhat\n```\n\n----------------------------------------\n\nTITLE: Modifying package.json to Remove Forge Compilation (Diff)\nDESCRIPTION: Illustrates how to modify the `package.json` file to adjust the default `compile` script, specifically removing the Forge build step (`compile:forge`) to rely solely on Hardhat compilation.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/native-oft-adapter/README.md#_snippet_3\n\nLANGUAGE: Diff\nCODE:\n```\n- \"compile\": \"$npm_execpath run compile:forge && $npm_execpath run compile:hardhat\",\n- \"compile:forge\": \"forge build\",\n- \"compile:hardhat\": \"hardhat compile\",\n+ \"compile\": \"hardhat compile\"\n```\n\n----------------------------------------\n\nTITLE: Modifying package.json for Custom Testing Workflow\nDESCRIPTION: Example of how to modify the package.json file to customize the testing workflow by removing Hardhat tests if only using Forge for testing.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/oft-upgradeable/README.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n- \"test\": \"$npm_execpath test:forge && $npm_execpath test:hardhat\",\n- \"test:forge\": \"forge test\",\n- \"test:hardhat\": \"$npm_execpath hardhat test\"\n+ \"test\": \"forge test\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Registry using PNPM\nDESCRIPTION: Sets the PNPM registry to a local registry.  This is a crucial step to use the local NPM registry that was previously published, allowing the project to install packages from the local source.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/DEVELOPMENT.md#_snippet_24\n\nLANGUAGE: bash\nCODE:\n```\npnpm config set registry http://localhost:4873/\n\n# Verify that the registry has been set\npnpm config get registry\n```\n\n----------------------------------------\n\nTITLE: Setting Private Key for Deployer Account\nDESCRIPTION: This line demonstrates how to set the deployer account using a private key. The private key should be handled with extreme care and never committed to version control or exposed publicly.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/uniswap-read/README.md#_snippet_16\n\nLANGUAGE: null\nCODE:\n```\nPRIVATE_KEY=\"0xabc...def\"\n```\n\n----------------------------------------\n\nTITLE: Running Project in Development Mode with PNPM\nDESCRIPTION: This command runs the project in development mode using `pnpm dev`. The command is an alias for turbo CLI, which supports turbo options like filtering packages.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/DEVELOPMENT.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Running Tests in CI mode\nDESCRIPTION: This command runs tests in the CI (Continuous Integration) mode. The tests execute within a Docker container using `pnpm test:ci`. Two `hardhat` nodes, accessible internally, are set up for the tests. The test results will be determined by the output of `jest` within the container.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/DEVELOPMENT.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\npnpm test:ci\n```\n\n----------------------------------------\n\nTITLE: Building the entire Project using PNPM\nDESCRIPTION: This command builds the entire project using `pnpm`. It utilizes the `pnpm build` command to compile and generate the necessary artifacts.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/DEVELOPMENT.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npnpm build\n```\n\n----------------------------------------\n\nTITLE: Install Solana CLI v1.17.31\nDESCRIPTION: Installs a specific version of the Solana command-line interface (v1.17.31). This version is required for compiling the Anchor build artifacts.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/lzapp-migration/README.md#_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\nsh -c \"$(curl -sSfL https://release.solana.com/v1.17.31/install)\"\n```\n\n----------------------------------------\n\nTITLE: Adjusting Docker Commands using `DOCKER_COMPOSE_ARGS`\nDESCRIPTION: This command adjusts the behavior of `docker compose up` and `docker compose run` commands. It sets the `DOCKER_COMPOSE_ARGS` environment variable to pass arguments to the `docker compose` command. This enables customizing the build process, such as forcing a rebuild using `--build`.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/DEVELOPMENT.md#_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nDOCKER_COMPOSE_ARGS=--build pnpm test:local\n```\n\n----------------------------------------\n\nTITLE: Publishing and monitoring local registry\nDESCRIPTION: Publishes and monitors a local NPM registry. This involves publishing packages to the local registry, monitoring the publishing progress and logs.  It's used to simulate user flows without requiring public publishing.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/DEVELOPMENT.md#_snippet_23\n\nLANGUAGE: bash\nCODE:\n```\npnpm registry:publish\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm registry:logs\n```\n\n----------------------------------------\n\nTITLE: Installing Node.js Dependencies Using pnpm Bash\nDESCRIPTION: Installs project dependencies using the pnpm package manager, which is recommended for managing JavaScript/TypeScript dependencies in the LayerZero devtools project. This command requires pnpm to be installed globally or available in the environment.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/oft-alt/README.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npnpm install\n```\n\n----------------------------------------\n\nTITLE: Updating Jest Snapshots with Environment Variable Control in Bash\nDESCRIPTION: This snippet demonstrates how to update Jest snapshots by setting environment variables that influence test output, particularly for packages whose snapshot results differ based on shell or CI environment. The snippet requires a Unix-compatible shell environment and pnpm to run tests with snapshot updates. The command sets the CI environment variable to 1 to simulate a CI environment for consistency in snapshot results.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/DEVELOPMENT.md#_snippet_31\n\nLANGUAGE: bash\nCODE:\n```\nCI=1 pnpm test\n```\n\n----------------------------------------\n\nTITLE: Adding fp-ts Dependency in Project\nDESCRIPTION: This snippet showcases a patch update where the project introduces the 'fp-ts' library into the dependencies list. This dependency supports functional programming paradigms within the codebase, providing types and combinators for functional composition.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/packages/toolbox-hardhat/CHANGELOG.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n// Dependency addition of 'fp-ts' to enhance functional programming capabilities.\n```\n\n----------------------------------------\n\nTITLE: Installing LayerZero DevTools with pnpm\nDESCRIPTION: This snippet demonstrates the installation of the @layerzerolabs/devtools-evm-hardhat package using pnpm. It's a command-line instruction for adding the specified package as a project dependency using the pnpm package manager.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/packages/devtools-evm-hardhat/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm add @layerzerolabs/devtools-evm-hardhat\n```\n\n----------------------------------------\n\nTITLE: Installing LayerZero Devtools using Package Managers\nDESCRIPTION: Instructions for installing the @layerzerolabs/devtools package using different Node.js package managers (yarn, pnpm, and npm).\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/packages/devtools/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @layerzerolabs/devtools\n\npnpm add @layerzerolabs/devtools\n\nnpm install @layerzerolabs/devtools\n```\n\n----------------------------------------\n\nTITLE: Installing LayerZero OApp EVM with Yarn - Bash\nDESCRIPTION: This bash command installs the @layerzerolabs/oapp-evm package using Yarn, a popular JavaScript package manager. Prerequisite: Yarn should be installed on your development environment. Run this command inside the root folder of your Node project to integrate LayerZero OApp for EVM. No extra inputs or options are required; the command will modify your package.json accordingly.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/packages/oapp-evm/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn install @layerzerolabs/oapp-evm\n```\n\n----------------------------------------\n\nTITLE: Installing with npm\nDESCRIPTION: Installs the @layerzerolabs/protocol-devtools-evm package and adds it to the project dependencies using the npm package manager. Npm automatically saves the dependency to `package.json` in recent versions.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/packages/protocol-devtools-evm/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @layerzerolabs/protocol-devtools-evm\n```\n\n----------------------------------------\n\nTITLE: Installing @layerzerolabs/oapp-alt-evm using pnpm\nDESCRIPTION: This snippet provides the command to install the @layerzerolabs/oapp-alt-evm package using pnpm. It's a straightforward command that downloads and installs the package and its dependencies. The package is downloaded from the npm registry.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/packages/oapp-alt-evm/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm install @layerzerolabs/oapp-alt-evm\n```\n\n----------------------------------------\n\nTITLE: Installing LayerZero DevTools\nDESCRIPTION: This snippet demonstrates the installation of the @layerzerolabs/devtools-evm-hardhat package using yarn.  It's a command-line instruction for adding the specified package as a project dependency. The command utilizes the yarn package manager.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/packages/devtools-evm-hardhat/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @layerzerolabs/devtools-evm-hardhat\n```\n\n----------------------------------------\n\nTITLE: Installing LayerZero EVM DevTools Plugin (Shell)\nDESCRIPTION: This shell command installs the @layerzerolabs/ua-devtools-evm-hardhat package via npm for use in a Hardhat project. You must run this from your project root, and ensure npm is installed. Successful execution downloads all required dependencies for the plugin.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/packages/ua-devtools-evm-hardhat/README.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @layerzerolabs/ua-devtools-evm-hardhat\n```\n\n----------------------------------------\n\nTITLE: Installing with yarn\nDESCRIPTION: Installs the @layerzerolabs/protocol-devtools-evm package and adds it to the project dependencies using the yarn package manager. Yarn automatically saves the dependency to `package.json`.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/packages/protocol-devtools-evm/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn install @layerzerolabs/protocol-devtools-evm\n```\n\n----------------------------------------\n\nTITLE: Installing the LayerZero Export Deployments Package\nDESCRIPTION: Commands for installing the @layerzerolabs/export-deployments package using different package managers including yarn, pnpm, and npm.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/packages/export-deployments/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @layerzerolabs/export-deployments\n\npnpm add @layerzerolabs/export-deployments\n\nnpm install @layerzerolabs/export-deployments\n```\n\n----------------------------------------\n\nTITLE: Creating a Changeset using pnpm Shell Command\nDESCRIPTION: Initiates the Changesets workflow using `pnpm` to record changes made to packages. This interactive command helps manage versioning and generate changelogs during contributions. Requires `pnpm` and Changesets setup.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/README.md#_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\npnpm changeset\n```\n\n----------------------------------------\n\nTITLE: Using NVM and Corepack to Set Up Environment\nDESCRIPTION: This snippet guides setting up the project environment using `nvm` and `corepack`. It first uses `nvm` to choose the correct Node.js version. `corepack enable` enables package managers such as pnpm, and `pnpm install` installs project dependencies.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/DEVELOPMENT.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# or nvm install if nvm use fails\nnvm use\n\n# If pnpm is not installed on your local machine, you can install it using corepack\ncorepack enable\n\n# Install project dependencies\npnpm install\n```\n\n----------------------------------------\n\nTITLE: Running Linter and Auto-Fixing Issues using pnpm Shell Command\nDESCRIPTION: Executes the configured linter for the project via `pnpm` and attempts to automatically fix any identified code style or formatting issues, ensuring adherence to project standards. Requires `pnpm` and linter setup.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/README.md#_snippet_6\n\nLANGUAGE: Shell\nCODE:\n```\npnpm lint:fix\n```\n\n----------------------------------------\n\nTITLE: Silencing bigint-buffer Warning via Dependency Update\nDESCRIPTION: This patch updates dependencies to suppress warnings from bigint-buffer, improving build output clarity. It indicates maintenance practices for dependency updates to manage runtime or build warnings effectively.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/packages/toolbox-hardhat/CHANGELOG.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n// Dependency update to silence bigint-buffer warnings in the build process.\n```\n\n----------------------------------------\n\nTITLE: Resetting the npm registry configuration\nDESCRIPTION: Resets the NPM registry configuration to the public NPM registry.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/DEVELOPMENT.md#_snippet_28\n\nLANGUAGE: bash\nCODE:\n```\npnpm config set registry https://registry.npmjs.org/\n```\n\n----------------------------------------\n\nTITLE: Combining Environment Variables for Test Execution\nDESCRIPTION: This command demonstrates combining multiple environment variables: `DOCKER_COMPOSE_RUN_TESTS_TURBO_ARGS` and `DOCKER_COMPOSE_ARGS`. It filters the tests to a specific package and forces a rebuild of the Docker images before running the tests.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/DEVELOPMENT.md#_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nDOCKER_COMPOSE_RUN_TESTS_TURBO_ARGS=--filter=ua-devtools-evm-hardhat-test DOCKER_COMPOSE_ARGS=--build pnpm test:local\n```\n\n----------------------------------------\n\nTITLE: Switching Solana CLI Version to v1.18.26 for Deployment\nDESCRIPTION: This command installs Solana CLI version v1.18.26, which provides enhanced features like priority fees and improved deployment process. It is recommended to switch to this version temporarily for deploying the program, then revert after deployment.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/oft-solana/README.md#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nsh -c \"$(curl -sSfL https://release.solana.com/v1.18.26/install)\"\n```\n\n----------------------------------------\n\nTITLE: Getting Help with Hardhat LayerZero Deploy Command\nDESCRIPTION: This command displays help information and available arguments for the `hardhat lz:deploy` command. This is useful for understanding the available options and configurations for the deployment process.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/uniswap-read/README.md#_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\nnpx hardhat lz:deploy --help\n```\n\n----------------------------------------\n\nTITLE: Installing Rust Using Official Rustup Script in Bash\nDESCRIPTION: This snippet installs Rust programming language version management using rustup via a shell script executed over HTTPS. It requires a Unix-like shell environment with curl installed. Running this command sets up Rust toolchain support, enabling further Rust development and compilation.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/oft-solana/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y\n```\n\n----------------------------------------\n\nTITLE: Dependency Range Alignment and Version Updates in LayerZero Labs Projects\nDESCRIPTION: This snippet documents multiple patch updates that align dependency ranges to specified versions across various layerzero labs packages. It ensures consistent versioning for dependencies such as '@layerzerolabs/devtools' and related packages, facilitating synchronized updates and dependencies management.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/packages/toolbox-hardhat/CHANGELOG.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n// Patch updates to align dependency ranges and update dependencies to specific versions for consistency and stability.\n```\n\n----------------------------------------\n\nTITLE: Displaying CLI Help for @layerzerolabs/verify-contract (Bash)\nDESCRIPTION: Shows the command to display the help menu for the `@layerzerolabs/verify-contract` command-line interface (CLI) using npx. The CLI allows for contract verification on a single network at a time.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/packages/verify-contract/README.md#_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\nnpx @layerzerolabs/verify-contract --help\n```\n\n----------------------------------------\n\nTITLE: Updating Snapshots with Jest\nDESCRIPTION: This command updates Jest snapshots by using `--updateSnapshot` flag while running tests in local mode.  The `CI=1` is crucial to avoid generating new snapshots by default and makes sure that missing snapshots are checked.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/DEVELOPMENT.md#_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nCI=1 DOCKER_COMPOSE_RUN_TESTS_TURBO_ARGS=\"--filter=\\!./examples/* -- --updateSnapshot\" pnpm test:local\n```\n\n----------------------------------------\n\nTITLE: Updating LayerZero Dependencies to Version 2.1.15\nDESCRIPTION: This update increases core dependencies to version 2.1.15, ensuring compatibility with recent features and fixes, contributing to overall project stability.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/packages/toolbox-hardhat/CHANGELOG.md#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n// Dependency updates for core @layerzerolabs packages to version 2.1.15.\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependencies using pnpm Shell Command\nDESCRIPTION: Command to install all project dependencies using the `pnpm` package manager, as recommended for this repository. Requires `pnpm` to be installed.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/README.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\npnpm install\n```\n\n----------------------------------------\n\nTITLE: Adding Debug Logging for SDKs\nDESCRIPTION: This snippet introduces debug logging into SDKs, facilitating better troubleshooting and information tracing during development and execution.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/packages/toolbox-hardhat/CHANGELOG.md#_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n// Debug logging capability added to SDKs for troubleshooting.\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependencies using pnpm (Bash)\nDESCRIPTION: Installs all necessary project dependencies using the pnpm package manager. Requires pnpm to be installed globally or available in the environment.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/examples/native-oft-adapter/README.md#_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\npnpm install\n```\n\n----------------------------------------\n\nTITLE: Cloning the Repository using Git Shell Commands\nDESCRIPTION: Provides the necessary Git commands to clone the LayerZero devtools repository from GitHub and navigate into the newly created directory. Requires Git to be installed.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/README.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\ngit clone https://github.com/LayerZero-Labs/devtools.git\ncd devtools\n```\n\n----------------------------------------\n\nTITLE: Resolving Turbo Concurrency Issues in Bash\nDESCRIPTION: This snippet addresses concurrency errors from Turbo when running the dev script using pnpm. It shows the error output indicating a persistent task count exceeding the configured concurrency, and provides the command to increase concurrency via a command-line flag. Required dependencies include pnpm and Turbo build tool. The input is a standard pnpm dev invocation, and output is successful execution without concurrency errors.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/DEVELOPMENT.md#_snippet_30\n\nLANGUAGE: diff\nCODE:\n```\n- error preparing engine: Invalid persistent task configuration:\n- You have 18 persistent tasks but `turbo` is configured for concurrency of 10. Set --concurrency to at least 19\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm dev --concurrency 19\n```\n\n----------------------------------------\n\nTITLE: Listing Example Projects in Shell\nDESCRIPTION: Displays the contents of the `examples/` directory using the `ls` command, showcasing available sample projects for LayerZero OApps, OFTs, ONFTs, and other integrations.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/README.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n$ ls examples\nmint-burn-oft-adapter  oapp                 oft                   oft-solana            omnicounter-solana    onft721-zksync\nnative-oft-adapter     oapp-read            oft-adapter           oft-upgradeable       onft721               uniswap-read\n```\n\n----------------------------------------\n\nTITLE: Updating Monorepo Dependencies to 2.1.2\nDESCRIPTION: This patch updates dependencies to reflect the monorepo release 2.1.2, ensuring all sub-packages are synchronized and compatible.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/packages/toolbox-hardhat/CHANGELOG.md#_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n// Dependencies updated to monorepo version 2.1.2.\n```\n\n----------------------------------------\n\nTITLE: Listing NPM Packages in Shell\nDESCRIPTION: Displays the contents of the `packages/` directory using the `ls` command, listing available NPM packages, libraries, and tools provided by LayerZero for development, testing, and deployment.\nSOURCE: https://github.com/layerzero-labs/devtools/blob/main/README.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n$ ls packages\nbuild-devtools            devtools-evm-hardhat      oft-evm                   protocol-devtools-solana  toolbox-hardhat\nbuild-lz-options          devtools-solana           oft-evm-upgradeable       test-devtools             ua-devtools\ncreate-lz-oapp            export-deployments        omnicounter-devtools      test-devtools-evm-foundry ua-devtools-evm\ndecode-lz-options         io-devtools               omnicounter-devtools-evm  test-devtools-evm-hardhat ua-devtools-evm-hardhat\ndevtools                  oapp-alt-evm              onft-evm                  test-devtools-solana      ua-devtools-solana\ndevtools-cli              oapp-evm                  oapp-evm-upgradeable      test-devtools-ton         verify-contract\ndevtools-evm              oapp-evm-upgradeable      protocol-devtools         toolbox-foundry\n```"
  }
]