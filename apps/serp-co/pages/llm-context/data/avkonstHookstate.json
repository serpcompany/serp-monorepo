[
  {
    "owner": "avkonst",
    "repo": "hookstate",
    "content": "TITLE: Concatenating Arrays with Hookstate\nDESCRIPTION: This snippet shows the recommended method for concatenating arrays using Hookstate.  Using `state.merge` efficiently merges the new array into the existing Hookstate array.\nSOURCE: https://github.com/avkonst/hookstate/blob/master/docs/index/docs/04-nested-state.md#_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\nstate.merge([3000, 4000])\n```\n\n----------------------------------------\n\nTITLE: Hookstate Object Partial Update & Deletion\nDESCRIPTION: This code shows using the `merge` method for partial updates and deletions in a Hookstate object. This method allows for inserting, updating, and deleting properties in a single call.\nSOURCE: https://github.com/avkonst/hookstate/blob/master/docs/index/docs/04-nested-state.md#_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nconst state = useHookstate<Record<string, number>>({\n    propertyToUpdate: 1,\n    propertyToDelete: 2\n})\nstate.merge({\n    propertyToUpdate: 2,\n    propertyToDelete: none,\n    propertyToAdd: 1\n}) // state value will be: { propertyToUpdate: 2, propertyToAdd: 1 }\n```\n\n----------------------------------------\n\nTITLE: Hookstate Object Update Property\nDESCRIPTION: These snippets show the recommended methods to update a nested property within a Hookstate object.  Using `state.a.set()` or `state.merge()` allows for targeted updates, rerendering only components that use the specific property.\nSOURCE: https://github.com/avkonst/hookstate/blob/master/docs/index/docs/04-nested-state.md#_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nstate.a.set(p => p + 1) // increments value of property a\n// or\nstate['a'].set(p => p + 1)\n// or\nstate.merge(p => ({ a: p.a + 1 }))\n```\n\n----------------------------------------\n\nTITLE: Appending to Array with Hookstate\nDESCRIPTION: This snippet demonstrates the recommended way to append a new element to a Hookstate array. Using `state[state.length].set(value)` or `state.merge([value])` will efficiently add the new element.\nSOURCE: https://github.com/avkonst/hookstate/blob/master/docs/index/docs/04-nested-state.md#_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nstate[state.length].set(2000)\n// or \nstate.merge([2000])\n```\n\n----------------------------------------\n\nTITLE: Hookstate Object Delete Property\nDESCRIPTION: These snippets show the recommended methods to delete an existing property within a Hookstate object using the `none` value. Using `state.b.set(none)` or `state.merge({ b: none })` allows deleting the properties from the state.\nSOURCE: https://github.com/avkonst/hookstate/blob/master/docs/index/docs/04-nested-state.md#_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nimport { none } from '@hookstate/core'\n\nconst state = useHookstate<{ a: number, b?: number }>({ a: 1, b: 2 }) // notice b property is optional\n\nstate.b.set(none)\n// or\nstate['b'].set(none)\n// or\nstate.merge({ b: none })\n```\n\n----------------------------------------\n\nTITLE: Partial Array Updates with Hookstate Merge\nDESCRIPTION: This snippet uses `state.merge` to perform partial updates and deletions in a Hookstate array. It allows for inserting, updating, and deleting elements in a single call.\nSOURCE: https://github.com/avkonst/hookstate/blob/master/docs/index/docs/04-nested-state.md#_snippet_28\n\nLANGUAGE: typescript\nCODE:\n```\nstate.merge({\n    0: 2,\n    1: none,\n    3: 4000\n}) // state value will be: [2, 3000, 4000]\n```\n\n----------------------------------------\n\nTITLE: Updating Array Element with Hookstate\nDESCRIPTION: This snippet demonstrates the recommended way to update a specific element within a Hookstate array.  It uses `state[index].set` or `state.merge` to efficiently update the element without triggering unnecessary re-renders.\nSOURCE: https://github.com/avkonst/hookstate/blob/master/docs/index/docs/04-nested-state.md#_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nstate[0].set(p => p + 1) // increments value of an element at 0 position\n// or\nstate.merge(p => ({ 0: p[0] + 1 }))\n```\n\n----------------------------------------\n\nTITLE: Hookstate Object Swap Properties\nDESCRIPTION: This code shows the recommended method to swap the values of two properties within a Hookstate object. Using `state.merge()` provides an efficient way to perform the swap.\nSOURCE: https://github.com/avkonst/hookstate/blob/master/docs/index/docs/04-nested-state.md#_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nconst state = useHookstate<Record<string, number>>({ a: 1, b: 2 })\n\nstate.merge(p => ({ b: p.a, a: p.b }))\n```\n\n----------------------------------------\n\nTITLE: Splicing Array Elements with Hookstate\nDESCRIPTION: This snippet shows how to use the `splice` function to manipulate a Hookstate array.  It allows for removing, replacing, or inserting elements at specific indices.\nSOURCE: https://github.com/avkonst/hookstate/blob/master/docs/index/docs/04-nested-state.md#_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\nstate.set(p => {\n    p.splice(0, 0, 1000, 2000);\n    return p;\n})\n```\n\n----------------------------------------\n\nTITLE: Defining a custom interface for Hookstate\nDESCRIPTION: This code defines a custom interface that wraps a Hookstate state object. This allows you to expose a specific set of properties and methods related to the state without exposing the underlying Hookstate implementation. This approach can be used to create a more controlled and maintainable API for accessing and modifying global state.\nSOURCE: https://github.com/avkonst/hookstate/blob/master/docs/index/docs/07-exporting-state.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { PreviewSample } from '../src/PreviewSample'\n\n<PreviewSample example=\"global-getting-started-interface\" />\n```\n\n----------------------------------------\n\nTITLE: Hookstate Object Add New Property\nDESCRIPTION: These snippets show the recommended methods to add a new nested property within a Hookstate object. Using `state.b.set()` or `state.merge()` allows adding new properties to the state.\nSOURCE: https://github.com/avkonst/hookstate/blob/master/docs/index/docs/04-nested-state.md#_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nconst state = useHookstate<{ a: number, b?: number }>({ a: 1 }) // notice b property is optional\n\nstate.b.set(2)\n// or \nstate['b'].set(2)\n// or\nstate.merge({ b: 2 })\n```\n\n----------------------------------------\n\nTITLE: Hookstate Array Set State Value with Function\nDESCRIPTION: This code shows setting a new state value for a Hookstate array using a function that takes the previous state as input and returns a new state.  This allows for transforming the array based on its previous values.\nSOURCE: https://github.com/avkonst/hookstate/blob/master/docs/index/docs/04-nested-state.md#_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\nstate.set(p => [p[0] + 1, p[1] - 1])\n```\n\n----------------------------------------\n\nTITLE: Suspending Rendering with Hookstate and React 18\nDESCRIPTION: This snippet shows how to suspend rendering of a component until an asynchronous Hookstate state is loaded using the `suspend` function.  It utilizes React 18's suspend feature to prevent rendering until the promise resolves, displaying a fallback message while loading. If the state is available, it displays the state's value.\nSOURCE: https://github.com/avkonst/hookstate/blob/master/docs/index/docs/05-async-state.md#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nfunction MyComponent() {\n    let state = useHookstate(new Promise(...))\n    return suspend(state) ?? <p>State is loaded: {state.value}</p>\n}\n```\n\n----------------------------------------\n\nTITLE: Hookstate Object Set State Value with Function\nDESCRIPTION: This example shows setting a new state value using a function that takes the previous state as input and returns a new state. This approach allows for calculations based on the existing state.\nSOURCE: https://github.com/avkonst/hookstate/blob/master/docs/index/docs/04-nested-state.md#_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nstate.set(p => ({ a: p.a + 1, b: p.b - 1 }))\n```\n\n----------------------------------------\n\nTITLE: Hookstate Array Set State Value\nDESCRIPTION: This code demonstrates how to set a new state value for a Hookstate array using the `set` method. It replaces the existing array with a new array containing updated values.\nSOURCE: https://github.com/avkonst/hookstate/blob/master/docs/index/docs/04-nested-state.md#_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\nstate.set([2, 3])\n```\n\n----------------------------------------\n\nTITLE: Functional Component with useHookstate\nDESCRIPTION: This functional component demonstrates accessing and updating the global state using the `useHookstate` hook. The component renders an input element whose value is bound to the global state and is updated on change using `state.set(e.target.value)`. It depends on the `hookstate` and `useHookstate` functions from the hookstate library.\nSOURCE: https://github.com/avkonst/hookstate/blob/master/docs/index/docs/08-using-without-statehook.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst globalState = hookstate('');\n\nconst MyComponent = () => {\n    const state = useHookstate(globalState);\n    return <input value={state.value}\n        onChange={e => state.set(e.target.value)} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Safely Accessing Nested State Using ornull - Typescript\nDESCRIPTION: This snippet demonstrates the recommended way to check for null/undefined state values before unfolding nested states. It leverages the 'ornull' property of the state object to conditionally access nested properties.\nSOURCE: https://github.com/avkonst/hookstate/blob/master/docs/index/docs/04c-nullable-state.md#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n// type is for clarity, it is inferred by the compiler\nconst stateOrNull: State<Task> | null = state.ornull\nif (stateOrNull) {\n    // neither compilation nor runtime errors\n    stateOrNull.name.value\n\n    // neither compilation nor runtime errors\n    stateOrNull.value.name\n}\n```\n\n----------------------------------------\n\nTITLE: Hookstate Array Initialization\nDESCRIPTION: This code initializes a Hookstate array with initial values. This sets up a state that can be managed using Hookstate's methods for updating and accessing elements.\nSOURCE: https://github.com/avkonst/hookstate/blob/master/docs/index/docs/04-nested-state.md#_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\nconst state = useHookstate([1, 2])\n```\n\n----------------------------------------\n\nTITLE: Hookstate Object Initialization\nDESCRIPTION: This code initializes a Hookstate object with properties 'a' and 'b'. It sets up a state that can be managed using Hookstate's methods for updating and accessing properties.\nSOURCE: https://github.com/avkonst/hookstate/blob/master/docs/index/docs/04-nested-state.md#_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nconst state = useHookstate({ a: 1, b: 2 })\n```\n\n----------------------------------------\n\nTITLE: Accessing Promise Resolution with Hookstate\nDESCRIPTION: This code snippet demonstrates how to access the underlying promise associated with a Hookstate state and attach a `.then()` handler to execute code upon promise resolution. The `hookstate` function initializes a state with a Promise.  The .then method allows execution after the promise resolves.\nSOURCE: https://github.com/avkonst/hookstate/blob/master/docs/index/docs/05-async-state.md#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst state = hookstate(new Promise(...));\nstate.promise.then(() => {})\n```\n\n----------------------------------------\n\nTITLE: Initializing Hookstate Array\nDESCRIPTION: This snippet demonstrates how to initialize a Hookstate with an array of numbers. The `useHookstate` function is used to create a state object that manages the array.\nSOURCE: https://github.com/avkonst/hookstate/blob/master/docs/index/docs/04-nested-state.md#_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nconst state = useHookstate([1, 2])\n```\n\n----------------------------------------\n\nTITLE: Hookstate Dictionary Initialization\nDESCRIPTION: This code initializes a Hookstate dictionary with dynamic string keys and number values. It demonstrates the use of `hookstate` to create a state object that can hold a record of string to number mappings.\nSOURCE: https://github.com/avkonst/hookstate/blob/master/docs/index/docs/04-nested-state.md#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst dictionaryState = hookstate<Record<string, number>>({})\n```\n\n----------------------------------------\n\nTITLE: Swapping Array Elements with Hookstate\nDESCRIPTION: This snippet demonstrates the recommended method to swap elements in a Hookstate array, using `state.merge`. It efficiently swaps elements by updating only the necessary indices.\nSOURCE: https://github.com/avkonst/hookstate/blob/master/docs/index/docs/04-nested-state.md#_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\nstate.merge(p => ({ 1: p[0], 0: p[1] }))\n```\n\n----------------------------------------\n\nTITLE: Hookstate Object Get Keys\nDESCRIPTION: This code demonstrates how to retrieve an array of property names from a Hookstate object using the `keys` property.  It returns an array containing the names of the existing properties in the state.\nSOURCE: https://github.com/avkonst/hookstate/blob/master/docs/index/docs/04-nested-state.md#_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nconst keys = state.keys // will be ['a', 'b'] for the above example\n```\n\n----------------------------------------\n\nTITLE: Setting State After Timeout with Promise\nDESCRIPTION: This code snippet illustrates how to set a Hookstate state after a delay using `setTimeout` and how to access and handle the promise associated with the initial state. This example demonstrates initially setting the state to `none`, then setting it with `state.set` after a 1-second delay.\nSOURCE: https://github.com/avkonst/hookstate/blob/master/docs/index/docs/05-async-state.md#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nconst state = hookstate(none);\nstate.promise.then(() => {})\nsetTimeout(() => state.set(...), 1000)\n```\n\n----------------------------------------\n\nTITLE: Class-based Component with StateFragment\nDESCRIPTION: This class-based component demonstrates accessing and updating the global state using the `StateFragment` component. The component's `render` method returns a `StateFragment` which provides the state as a render prop. The input's value is bound to the state, and its `onChange` handler updates the state.\nSOURCE: https://github.com/avkonst/hookstate/blob/master/docs/index/docs/08-using-without-statehook.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst globalState = hookstate('');\n\nclass MyComponent extends React.Component {\n    render() {\n        return <StateFragment state={globalState}>{{\n            state => <input value={state.value}\n                onChange={e => state.set(e.target.value)}>\n        }}</StateFragment>\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Component Handling Nullable State with || - Typescript\nDESCRIPTION: This component showcases an alternative approach using the '||' operator to provide a default value when the state is null, allowing the component to render even with a null state. It renders an input field with either the state's value or a default value.\nSOURCE: https://github.com/avkonst/hookstate/blob/master/docs/index/docs/04c-nullable-state.md#_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nconst MyInputField = (props: { state: State<string | null>}) => {\n    // state value is an instance of string or null here:\n    return <input value={state.value || 'my default'} onChange={(v) => state.set(v.target.value)} />\n}\n```\n\n----------------------------------------\n\nTITLE: Hookstate Nested State Access by Known Name\nDESCRIPTION: This snippet illustrates accessing nested state by index syntax when the dynamic property name is known at compile time. This is an alternative to using the `nested` method, and works as long as the dynamic property does not collide with state methods.\nSOURCE: https://github.com/avkonst/hookstate/blob/master/docs/index/docs/04-nested-state.md#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nfunction NestedStateByName(props: {\n        // note: compiler knows allowed names\n        stateKey: 'property1' | 'property2'\n    }) {\n    const state = useHookstate(dictionaryState)\n    // so access by index works, which would be equivalent to:\n    // state.nested(props.stateKey).value\n    return <>{state[props.stateKey].value}</>\n}\n```\n\n----------------------------------------\n\nTITLE: Hookstate Nested State Access by Name\nDESCRIPTION: This code shows how to access nested state using the `nested` method when the property name is dynamic.  It is necessary to use `state.nested(props.stateKey).value` instead of `state[props.stateKey].value` when the `stateKey` prop is of type string and is not known at compile time.\nSOURCE: https://github.com/avkonst/hookstate/blob/master/docs/index/docs/04-nested-state.md#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nfunction NestedStateByName(props: { stateKey: string }) {\n    const state = useHookstate(dictionaryState)\n    ...\n}\n\nstate.nested(props.stateKey).value\n```\n\n----------------------------------------\n\nTITLE: Initializing Hookstate String\nDESCRIPTION: This initializes a Hookstate with a string value.  The `useHookstate` function is used to create a state object that manages the string.\nSOURCE: https://github.com/avkonst/hookstate/blob/master/docs/index/docs/04-nested-state.md#_snippet_29\n\nLANGUAGE: typescript\nCODE:\n```\nconst state = useHookstate(\"Hello \")\n```\n\n----------------------------------------\n\nTITLE: Deleting Array Element with Hookstate\nDESCRIPTION: This snippet shows how to delete an element from a Hookstate array using `state[index].set(none)` or `state.merge({ index: none })`.  The `none` value, imported from `@hookstate/core`, effectively removes the element.\nSOURCE: https://github.com/avkonst/hookstate/blob/master/docs/index/docs/04-nested-state.md#_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nimport { none } from '@hookstate/core'\n\nstate[1].set(none)\n// or\nstate.merge({ 1: none })\n```\n\n----------------------------------------\n\nTITLE: Enabling Scoped State with useHookstate - Typescript\nDESCRIPTION: This code snippet demonstrates how to enable scoped state in Hookstate by replacing a direct state assignment with a call to the `useHookstate` hook. This allows Hookstate to rerender only the affected children components when the state changes.\nSOURCE: https://github.com/avkonst/hookstate/blob/master/docs/index/docs/04b-scoped-state.md#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst taskState = useHookstate(props.taskState);\n```\n\n----------------------------------------\n\nTITLE: Hookstate Global State Example\nDESCRIPTION: This snippet uses the PreviewSample component to display a live example of global state management with Hookstate. It renders the \"global-getting-started\" example, showcasing the core functionality of creating and using a global state across different parts of an application.\nSOURCE: https://github.com/avkonst/hookstate/blob/master/docs/index/docs/02-global-state.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n<PreviewSample example=\"global-getting-started\" />\n```\n\n----------------------------------------\n\nTITLE: Functional Component with StateFragment\nDESCRIPTION: This functional component demonstrates accessing and updating the global state using the `StateFragment` component instead of the `useHookstate` hook.  It renders an input element whose value is bound to the global state and is updated on change using `state.set(e.target.value)`. The component utilizes a render prop pattern within `StateFragment`.\nSOURCE: https://github.com/avkonst/hookstate/blob/master/docs/index/docs/08-using-without-statehook.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst globalState = hookstate('');\n\nconst MyComponent = () => <StateFragment state={globalState}>{{\n    state => <input value={state.value}\n        onChange={e => state.set(e.target.value)}>\n}}</StateFragment>\n```\n\n----------------------------------------\n\nTITLE: Install Hookstate Core - yarn\nDESCRIPTION: This command installs the core Hookstate package using yarn.  It adds the `@hookstate/core` package as a dependency to your project.\nSOURCE: https://github.com/avkonst/hookstate/blob/master/docs/index/docs/01-getting-started.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @hookstate/core\n```\n\n----------------------------------------\n\nTITLE: Accessing Function in State Object with noproxy - Typescript\nDESCRIPTION: This code snippet demonstrates how to access a function stored within a Hookstate object when the value is an instance of the Object class. It requires explicitly setting the `noproxy` option to `true` before accessing the function to ensure correct tracking and prevent unintended side effects. Failure to do so may result in incorrect state updates.\nSOURCE: https://github.com/avkonst/hookstate/blob/master/docs/index/docs/12-using-with-non-json.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nlet state = useHookstate({ callback: () => {} })\nstate.get({ noproxy: true }).callback()\n```\n\n----------------------------------------\n\nTITLE: Initializing Global Hookstate\nDESCRIPTION: Initializes a global Hookstate with an empty string as its initial value.  This global state can then be used across multiple components. The state is created using `hookstate('')` and assigned to `globalState`. \nSOURCE: https://github.com/avkonst/hookstate/blob/master/docs/index/docs/08-using-without-statehook.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst globalState = hookstate('');\n```\n\n----------------------------------------\n\nTITLE: Handling Nullable States with value Property in Hookstate (TSX)\nDESCRIPTION: Shows how to access state values that may be null or undefined using the 'value' property.  The example illustrates how the 'value' property allows TypeScript to correctly infer the type of the state value, enabling safe operations.\nSOURCE: https://github.com/avkonst/hookstate/blob/master/docs/index/docs/typedoc-hookstate-core.md#_snippet_1\n\nLANGUAGE: TSX\nCODE:\n```\nconst state = useHookstate<number | undefined>(0)\nconst myvalue: number = state.value\n     ? state.value + 1\n     : 0; // <-- compiles\nconst myvalue: number = state.get()\n     ? state.get() + 1\n     : 0; // <-- does not compile\n```\n\n----------------------------------------\n\nTITLE: Getting Array Keys with Hookstate\nDESCRIPTION: This snippet retrieves the keys (indexes) of the array managed by Hookstate.  The `state.keys` property returns an array containing the numerical indexes of the existing elements in the Hookstate array.\nSOURCE: https://github.com/avkonst/hookstate/blob/master/docs/index/docs/04-nested-state.md#_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nconst keys = state.keys // will be [0, 1] for the above example\n```\n\n----------------------------------------\n\nTITLE: Initializing devtools with identifiable extension - Hookstate\nDESCRIPTION: This code snippet demonstrates how to initialize the `devtools` extension in Hookstate when the `identifiable` extension is already attached. It requires importing both `identifiable` and `devtools` from their respective packages and using the `extend` function to combine them before passing them to the `hookstate` function. The `identifiable` extension is initialized with a label to identify the state.\nSOURCE: https://github.com/avkonst/hookstate/blob/master/docs/index/docs/40-devtools-overview.md#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { identifiable } from '@hookstate/identifiable'\nimport { devtools } from '@hookstate/devtools'\nlet state = hookstate(value, extend(identifiable('my-state-label'), devtools()))\n```\n\n----------------------------------------\n\nTITLE: Accessing Nested State Path in Hookstate (TSX)\nDESCRIPTION: Demonstrates how to access the 'path' property of nested states within a Hookstate. The 'path' property represents the object path to an element relative to the root object in the state.\nSOURCE: https://github.com/avkonst/hookstate/blob/master/docs/index/docs/typedoc-hookstate-core.md#_snippet_0\n\nLANGUAGE: TSX\nCODE:\n```\nconst state = useHookstate([{ name: 'First Task' }])\nstate.path IS []\nstate[0].path IS [0]\nstate.[0].name.path IS [0, 'name']\n```\n\n----------------------------------------\n\nTITLE: Handling Nullable State with useHookstate - Typescript\nDESCRIPTION: This snippet demonstrates the issue of accessing nested properties of a potentially null state directly. It showcases how both Javascript and Typescript will raise errors at runtime and compile time respectively.\nSOURCE: https://github.com/avkonst/hookstate/blob/master/docs/index/docs/04c-nullable-state.md#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\ninterface Task { name: string, priority?: number }\n\nconst MyComponent = () => {\n    const state = useHookstate<Task | null>(null)\n    \n    // JS - runtime error, TS - compilation error\n    state.name.value\n    // JS - runtime error, TS - compilation error\n    state.value.name\n}\n```\n\n----------------------------------------\n\nTITLE: Install Hookstate Core - npm\nDESCRIPTION: This command installs the core Hookstate package using npm. It adds the `@hookstate/core` package as a dependency to your project.\nSOURCE: https://github.com/avkonst/hookstate/blob/master/docs/index/docs/01-getting-started.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save @hookstate/core\n```\n\n----------------------------------------\n\nTITLE: Initializing devtools with key - Hookstate\nDESCRIPTION: This code snippet demonstrates how to initialize the `devtools` extension in Hookstate when the `identifiable` extension is not attached. It requires importing `devtools` from `@hookstate/devtools` and passing it as the second argument to the `hookstate` function, with a `key` option to identify the state.\nSOURCE: https://github.com/avkonst/hookstate/blob/master/docs/index/docs/40-devtools-overview.md#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { devtools } from '@hookstate/devtools'\nlet state = hookstate(value, devtools({ key: 'my-state-label' }))\n```\n\n----------------------------------------\n\nTITLE: Component Handling Nullable State with ornull - Typescript\nDESCRIPTION: This component example demonstrates handling a state that can be null using 'ornull'. If the state is null, it returns an empty fragment; otherwise, it renders an input field bound to the state.\nSOURCE: https://github.com/avkonst/hookstate/blob/master/docs/index/docs/04c-nullable-state.md#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nconst MyInputField = (props: { state: State<string | null>}) => {\n    const state: State<string> | null = props.state.ornull;\n    // state is either null or an instance of State<string>:\n    if (!state) {\n        // state value was null, do not render form field\n        return <></>;\n    }\n    // state value is an instance of string, can not be null here:\n    return <input value={state.value} onChange={(v) => state.set(v.target.value)} />\n}\n```\n\n----------------------------------------\n\nTITLE: Inefficient Appending to Array with Hookstate\nDESCRIPTION: This snippet demonstrates a less efficient way to append an element to a Hookstate array.  It sets the entire array, potentially causing unnecessary re-renders.\nSOURCE: https://github.com/avkonst/hookstate/blob/master/docs/index/docs/04-nested-state.md#_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nstate.set(p => p.concat([2000]))\n```\n\n----------------------------------------\n\nTITLE: Calling State Value Object (HOOKSTATE-214)\nDESCRIPTION: This exception occurs when attempting to call a Hookstate state's value object as a function. This operation is not supported.\nSOURCE: https://github.com/avkonst/hookstate/blob/master/docs/index/docs/50-exceptions.md#_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\nconst state = useHookstate(...)\nstate.value() // <== Error!\nstate.value.prop() // <== Error!\n```\n\n----------------------------------------\n\nTITLE: New Operator on State Object (HOOKSTATE-211)\nDESCRIPTION: This exception occurs when attempting to use the `new` operator on a Hookstate state object. This operation is not supported.\nSOURCE: https://github.com/avkonst/hookstate/blob/master/docs/index/docs/50-exceptions.md#_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nconst state = useHookstate(...)\nnew state.prop // <== Error!\n```\n\n----------------------------------------\n\nTITLE: Reading Property of Primitive State Value (HOOKSTATE-107)\nDESCRIPTION: This exception arises when attempting to access a property of a Hookstate state where the underlying value is a primitive type (e.g., number, string).\nSOURCE: https://github.com/avkonst/hookstate/blob/master/docs/index/docs/50-exceptions.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst state = useHookstate(1)\nstate.prop // <== Error!\n\nconst state = useHookstate({ child: 1 })\nstate.child.prop // <== Error!\n```\n\n----------------------------------------\n\nTITLE: Writing To Unresolved Asynchronous State (HOOKSTATE-104)\nDESCRIPTION: This exception occurs when attempting to set or merge a Hookstate state's value while it is backed by an unresolved or rejected promise.\nSOURCE: https://github.com/avkonst/hookstate/blob/master/docs/index/docs/50-exceptions.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst state = useHookstate(new Promise(...))\nstate.set(...) // <== Error!\nstate.merge(...) // <== Error!\n```\n\n----------------------------------------\n\nTITLE: Setting Nested State to a Promise (HOOKSTATE-105)\nDESCRIPTION: This exception occurs when attempting to set a nested state property directly to a promise. Nested states do not support asynchronous state separate from the root state.\nSOURCE: https://github.com/avkonst/hookstate/blob/master/docs/index/docs/50-exceptions.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst state = useHookstate({ prop: ... })\nstate.prop.set(new Promise(...)) // <== Error!\n```\n\n----------------------------------------\n\nTITLE: Setting State To Another State's Value (HOOKSTATE-102)\nDESCRIPTION: This exception occurs when trying to set the value of a Hookstate state to the `.value` of another Hookstate state. Use `JSON.parse(JSON.stringify(state1.value))` to deep copy the value before setting it.\nSOURCE: https://github.com/avkonst/hookstate/blob/master/docs/index/docs/50-exceptions.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst state1 = useHookstate(...)\nconst state2 = useHookstate(...)\nstate2.set(state1.value) // <== Error!\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst state1 = useHookstate(...)\nconst state2 = useHookstate(...)\nstate2.set(\n    // simplest way to clone an object\n    JSON.parse(JSON.stringify(state1.value)))\n```\n\n----------------------------------------\n\nTITLE: Creating New State From Existing State Value (HOOKSTATE-101)\nDESCRIPTION: This exception occurs when attempting to create a new Hookstate state using the `.value` of an existing Hookstate state as the initial value. To create a new state as a clone, use `JSON.parse(JSON.stringify(state1.value))` to deep copy the value.\nSOURCE: https://github.com/avkonst/hookstate/blob/master/docs/index/docs/50-exceptions.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst state1 = useHookstate(...)\nconst state2 = useHookstate(state1.value) // <== Error!\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst state1 = useHookstate(...)\nconst state2 = useHookstate(\n    // simplest way to clone an object\n    JSON.parse(JSON.stringify(state1.value)))\n```\n\n----------------------------------------\n\nTITLE: Setting State Property via Direct Assignment (HOOKSTATE-201)\nDESCRIPTION: This exception occurs when attempting to directly assign a value to a state property. Use `state.prop.set('some value')` instead.\nSOURCE: https://github.com/avkonst/hookstate/blob/master/docs/index/docs/50-exceptions.md#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nconst state = useHookstate(...)\nstate.prop = 'some value' // <== Error!\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst state = useHookstate(...)\nstate.prop.set('some value')\n```\n\n----------------------------------------\n\nTITLE: Inefficient Element Swapping with Hookstate\nDESCRIPTION: This snippet shows an inefficient way to swap elements in a Hookstate array. It involves manual swapping within the array, which can lead to unnecessary re-renders.\nSOURCE: https://github.com/avkonst/hookstate/blob/master/docs/index/docs/04-nested-state.md#_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\nstate.set(p => {\n    const tmp = p[0];\n    p[0] = p[1];\n    p[1] = tmp;\n    return p\n})\n```\n\n----------------------------------------\n\nTITLE: Defining New Property Directly on State Object (HOOKSTATE-207)\nDESCRIPTION: This exception occurs when attempting to define a new property directly on a Hookstate state object. Use `state.prop.set(...)` instead.\nSOURCE: https://github.com/avkonst/hookstate/blob/master/docs/index/docs/50-exceptions.md#_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nconst state = useHookstate(...)\nObject.defineProperty(state, 'prop', ...) // <== Error!\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst state = useHookstate(...)\nstate.prop.set(...)\n```\n\n----------------------------------------\n\nTITLE: Avoidable Array Update with Hookstate and State.value\nDESCRIPTION: This snippet showcases a way to update an element that can lead to unnecessary re-renders. Using `state[0].value` marks the property as used, causing a re-render on update, even if it wasn't actively being used in the rendering process.\nSOURCE: https://github.com/avkonst/hookstate/blob/master/docs/index/docs/04-nested-state.md#_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nstate[0].set(state[0].value + 1) // increments value of an element at 0\n```\n\n----------------------------------------\n\nTITLE: Accessing Unattached Plugin Instance (HOOKSTATE-120)\nDESCRIPTION: This exception (deprecated in Hookstate 4) occurred when a plugin attempted to get its own instance from a state without being attached beforehand. Attach the plugin to the state using `state.attach(PluginName)` before using the plugin function.\nSOURCE: https://github.com/avkonst/hookstate/blob/master/docs/index/docs/50-exceptions.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nconst state = useHookstate(...)\nInitial(state) // <== Error!\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst state = useHookstate(...)\nstate.attach(Initial)\nInitial(state)\n```\n\n----------------------------------------\n\nTITLE: Inefficient Deletion in Array with Hookstate\nDESCRIPTION: This snippet demonstrates an inefficient way to delete an element from a Hookstate array. Using delete and returning the mutated array causes unnecessary re-renders.\nSOURCE: https://github.com/avkonst/hookstate/blob/master/docs/index/docs/04-nested-state.md#_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\nstate.set(p => {\n    delete p[1]\n    return p\n})\n```\n\n----------------------------------------\n\nTITLE: Reinitializing State with Different Store (HOOKSTATE-111)\nDESCRIPTION: This exception happens when attempting to reinitialize a Hookstate on rerender with another store source, likely due to passing a new property value to a child component that refers to a different Hookstate State.  This can also occur with Next.js and Vite's hot module reload (HMR).\nSOURCE: https://github.com/avkonst/hookstate/blob/master/docs/index/docs/50-exceptions.md#_snippet_10\n\n\n\n----------------------------------------\n\nTITLE: Inefficient Array Update with Hookstate\nDESCRIPTION: This snippet demonstrates a less efficient way to update an element in a Hookstate array. It updates the entire array state, causing re-renders of components that depend on any element of the array.\nSOURCE: https://github.com/avkonst/hookstate/blob/master/docs/index/docs/04-nested-state.md#_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nstate.set(p => ([p[0] + 1].concat(p.slice(1))))\n```\n\n----------------------------------------\n\nTITLE: Setting State Value Property via Direct Assignment (HOOKSTATE-202)\nDESCRIPTION: This exception occurs when attempting to directly assign a value to a property of the state's value. Use `state.prop.set('some value')` instead.\nSOURCE: https://github.com/avkonst/hookstate/blob/master/docs/index/docs/50-exceptions.md#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nconst state = useHookstate(...)\nstate.value.prop = 'some value' // <== Error!\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst state = useHookstate(...)\nstate.prop.set('some value')\n```\n\n----------------------------------------\n\nTITLE: Preventing Extensions of State Object (HOOKSTATE-205)\nDESCRIPTION: This exception occurs when attempting to prevent extensions of a Hookstate state object. This operation is not supported.\nSOURCE: https://github.com/avkonst/hookstate/blob/master/docs/index/docs/50-exceptions.md#_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nconst state = useHookstate(...)\nObject.preventExtensions(state) // <== Error!\n```\n\n----------------------------------------\n\nTITLE: Preventing Extensions of State Value (HOOKSTATE-206)\nDESCRIPTION: This exception occurs when attempting to prevent extensions of a Hookstate state's value. This operation is not supported.\nSOURCE: https://github.com/avkonst/hookstate/blob/master/docs/index/docs/50-exceptions.md#_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nconst state = useHookstate(...)\nObject.preventExtensions(state.value) // <== Error!\n```\n\n----------------------------------------\n\nTITLE: Delete Operator on State Object (HOOKSTATE-209)\nDESCRIPTION: This exception occurs when attempting to use the `delete` operator on a property of a Hookstate state object. Use `state.prop.set(none)` instead.\nSOURCE: https://github.com/avkonst/hookstate/blob/master/docs/index/docs/50-exceptions.md#_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nconst state = useHookstate(...)\ndelete state.prop // <== Error!\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { none, useHookstate } from '@hookstate/core'\nconst state = useHookstate(...)\nstate.prop.set(none)\n```\n\n----------------------------------------\n\nTITLE: Calling State Object (HOOKSTATE-213)\nDESCRIPTION: This exception occurs when attempting to call a Hookstate state object as a function. This operation is not supported.\nSOURCE: https://github.com/avkonst/hookstate/blob/master/docs/index/docs/50-exceptions.md#_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\nconst state = useHookstate(...)\nstate() // <== Error!\nstate.prop() // <== Error!\n```\n\n----------------------------------------\n\nTITLE: Reading Unresolved Asynchronous State (HOOKSTATE-103)\nDESCRIPTION: This exception occurs when attempting to access the `.value`, `.keys`, or `.map` properties of a Hookstate state that is backed by a promise which has not yet resolved or rejected. Access the `.promised` property or `.promise.then(...)` instead.\nSOURCE: https://github.com/avkonst/hookstate/blob/master/docs/index/docs/50-exceptions.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst state = useHookstate(new Promise(...))\nstate.value // <== Error!\nstate.keys // <== Error!\nstate.map(...) // <== Error!\nstate.promised // <== OK\nstate.promise.then(...) // <== OK\n```\n\n----------------------------------------\n\nTITLE: Setting State After Unmount (HOOKSTATE-106)\nDESCRIPTION: In Hookstate versions prior to 4.0.2, this exception occurred when attempting to set the state after the component was unmounted. Now, setting state after unmount no longer throws an exception. This exception could arise from asynchronous operations triggered within a component's `useEffect` that attempt to update state after the component has been unmounted.\nSOURCE: https://github.com/avkonst/hookstate/blob/master/docs/index/docs/50-exceptions.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst state = hookstate(...)\ndestroy(state)\nstate.set(...) // <== Error!\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst state = useHookstate(...)\nReact.useEffect(() => {\n    setTimeout(() => {\n        state.set(...)\n    }, 5000)\n    // <== Error is not cancelling the timeout when a component is unmounted!\n})\n```\n\n----------------------------------------\n\nTITLE: Using Function Property of Object State (HOOKSTATE-110)\nDESCRIPTION: This error occurs when a state property of type function is being used and a parent object class is just Object. To fix it, use `state.get({ noproxy: true }).callback()`\nSOURCE: https://github.com/avkonst/hookstate/blob/master/docs/index/docs/50-exceptions.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nconst state = useHookstate({ callback: () => {} })\nstate.callback // <== Error!\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst state = useHookstate({ callback: () => {} })\nstate.get({ noproxy: true }).callback() // <== OK\n```\n\n----------------------------------------\n\nTITLE: Defining New Property Directly on State Value (HOOKSTATE-208)\nDESCRIPTION: This exception occurs when attempting to define a new property directly on a Hookstate state's value. Use `state.prop.set(...)` instead.\nSOURCE: https://github.com/avkonst/hookstate/blob/master/docs/index/docs/50-exceptions.md#_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nconst state = useHookstate(...)\nObject.defineProperty(state.value, 'prop', ...) // <== Error!\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst state = useHookstate(...)\nstate.prop.set(...)\n```\n\n----------------------------------------\n\nTITLE: Setting Prototype of State Object (HOOKSTATE-203)\nDESCRIPTION: This exception occurs when attempting to set the prototype of a Hookstate state object. This operation is not supported.\nSOURCE: https://github.com/avkonst/hookstate/blob/master/docs/index/docs/50-exceptions.md#_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nconst state = useHookstate(...)\nObject.setPrototypeOf(state, ...) // <== Error!\n```\n\n----------------------------------------\n\nTITLE: Delete Operator on State Value Object (HOOKSTATE-210)\nDESCRIPTION: This exception occurs when attempting to use the `delete` operator on a property of a Hookstate state's value object. Use `state.prop.set(none)` instead.\nSOURCE: https://github.com/avkonst/hookstate/blob/master/docs/index/docs/50-exceptions.md#_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nconst state = useHookstate(...)\ndelete state[self.value].prop // <== Error!\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { none, useHookstate } from '@hookstate/core'\nconst state = useHookstate(...)\nstate.prop.set(none)\n```\n\n----------------------------------------\n\nTITLE: New Operator on State Value Object (HOOKSTATE-212)\nDESCRIPTION: This exception occurs when attempting to use the `new` operator on a Hookstate state's value object. This operation is not supported.\nSOURCE: https://github.com/avkonst/hookstate/blob/master/docs/index/docs/50-exceptions.md#_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\nconst state = useHookstate(...)\nnew state.value.prop // <== Error!\n```\n\n----------------------------------------\n\nTITLE: Setting Prototype of State Value (HOOKSTATE-204)\nDESCRIPTION: This exception occurs when attempting to set the prototype of a Hookstate state's value. This operation is not supported.\nSOURCE: https://github.com/avkonst/hookstate/blob/master/docs/index/docs/50-exceptions.md#_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nconst state = useHookstate(...)\nObject.setPrototypeOf(state.value, ...) // <== Error!\n```\n\n----------------------------------------\n\nTITLE: useEffect with Hookstate State Object (HOOKSTATE-100)\nDESCRIPTION: This exception occurs when a Hookstate State object is used directly in a standard React `useEffect` dependency array, and Hookstate is configured to intercept such usage.  The solution is to use the Hookstate provided `useHookstateEffect` hook instead.\nSOURCE: https://github.com/avkonst/hookstate/blob/master/docs/index/docs/50-exceptions.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst state1 = useHookstate(...)\nuseEffect(() => {...}, [state1]) // <== Error in development mode!\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst state1 = useHookstate(...)\nuseHookstateEffect(() => {...}, [state1]) // <== OK\n```\n\n----------------------------------------\n\nTITLE: Dispatch Breakpoint Action - Hookstate Devtools\nDESCRIPTION: This code snippet shows the format of a dispatch action that can be sent from the Redux development tools to trigger a breakpoint on any state update within the application. Sending this action again will disable the breakpoint.\nSOURCE: https://github.com/avkonst/hookstate/blob/master/docs/index/docs/40-devtools-overview.md#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n{\n    type: 'BREAKPOINT',\n}\n```\n\n----------------------------------------\n\nTITLE: Basic State Assignment - Typescript\nDESCRIPTION: This code snippet represents the original approach before enabling scoped state.  It demonstrates a direct assignment of the state.  This is replaced by `useHookstate` for optimization.\nSOURCE: https://github.com/avkonst/hookstate/blob/master/docs/index/docs/04b-scoped-state.md#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nconst taskState = props.taskState;\n```\n\n----------------------------------------\n\nTITLE: Concatenating Strings with Hookstate\nDESCRIPTION: This snippet demonstrates how to concatenate strings using Hookstate, using `state.merge` or `state.set`.  Both methods efficiently update the string state.\nSOURCE: https://github.com/avkonst/hookstate/blob/master/docs/index/docs/04-nested-state.md#_snippet_30\n\nLANGUAGE: typescript\nCODE:\n```\nstate.merge(\" World\") // state.value will be \"Hello World\"\n// or the same\nstate.set(p => p + \" World\")\n```\n\n----------------------------------------\n\nTITLE: Serializing State Object to JSON (HOOKSTATE-108, HOOKSTATE-109)\nDESCRIPTION: This exception occurs when attempting to directly serialize a Hookstate state object to JSON using `JSON.stringify`.  Instead, serialize the state's value using `JSON.stringify(state.value)`.\nSOURCE: https://github.com/avkonst/hookstate/blob/master/docs/index/docs/50-exceptions.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst state = useHookstate(...)\nJSON.stringify(state) // <== Error!\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst state = useHookstate(...)\nJSON.stringify(state.value)\n```\n\n----------------------------------------\n\nTITLE: Hookstate Object Set State Value\nDESCRIPTION: This code demonstrates how to set a new state value for a Hookstate object using the `set` method.  It replaces the existing state with a new object containing updated property values.\nSOURCE: https://github.com/avkonst/hookstate/blob/master/docs/index/docs/04-nested-state.md#_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nstate.set({ a: 2, b: 3 })\n```"
  }
]