[
  {
    "owner": "dunglas",
    "repo": "frankenphp",
    "content": "TITLE: Configuring Docker Compose for FrankenPHP Service\nDESCRIPTION: This `compose.yaml` file defines a `php` service based on the `dunglas/frankenphp` image (or a custom-built one derived from it). It ensures the container restarts automatically (`restart: always`), maps standard web ports (80 for HTTP, 443 for HTTPS and HTTP/3), and defines named volumes (`caddy_data`, `caddy_config`) to persist Caddy's TLS certificates and configuration across container restarts, which is crucial for production.\nSOURCE: https://github.com/dunglas/frankenphp/blob/main/docs/production.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  php:\n    image: dunglas/frankenphp\n    restart: always\n    ports:\n      - \"80:80\" # HTTP\n      - \"443:443\" # HTTPS\n      - \"443:443/udp\" # HTTP/3\n    volumes:\n      - caddy_data:/data\n      - caddy_config:/config\n\n# Volumes needed for Caddy certificates and configuration\nvolumes:\n  caddy_data:\n  caddy_config:\n```\n\n----------------------------------------\n\nTITLE: Running FrankenPHP with Docker\nDESCRIPTION: Starts a FrankenPHP container using the official Docker image (`dunglas/frankenphp`). It mounts the current host directory (`.`) to `/app/public` inside the container, allowing FrankenPHP to serve its contents. Ports 80 (HTTP), 443 (HTTPS/TCP), and 443 (HTTPS/UDP for HTTP/3) are mapped from the host to the container.\nSOURCE: https://github.com/dunglas/frankenphp/blob/main/README.md#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\ndocker run -v .:/app/public \\\n    -p 80:80 -p 443:443 -p 443:443/udp \\\n    dunglas/frankenphp\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic FrankenPHP Application Dockerfile (dockerfile)\nDESCRIPTION: This Dockerfile uses the official `dunglas/frankenphp` image as a base and copies the current directory's content (containing the PHP application) into the `/app/public` directory within the container. This serves as the fundamental setup for deploying a PHP application using FrankenPHP.\nSOURCE: https://github.com/dunglas/frankenphp/blob/main/docs/docker.md#_snippet_0\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM dunglas/frankenphp\n\nCOPY . /app/public\n```\n\n----------------------------------------\n\nTITLE: Defining a Production Docker Image for FrankenPHP Application\nDESCRIPTION: This Dockerfile sets up a production environment for a PHP application using the official `dunglas/frankenphp` base image. It configures the server name for Caddy's automatic HTTPS via the `SERVER_NAME` environment variable, switches to production PHP settings (`php.ini-production`), and copies the application code into the `/app/public` directory. For frameworks like Symfony or Laravel, the entire project should be copied to `/app` instead.\nSOURCE: https://github.com/dunglas/frankenphp/blob/main/docs/production.md#_snippet_0\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM dunglas/frankenphp\n\n# Be sure to replace \"your-domain-name.example.com\" by your domain name\nENV SERVER_NAME=your-domain-name.example.com\n# If you want to disable HTTPS, use this value instead:\n#ENV SERVER_NAME=:80\n\n# Enable PHP production settings\nRUN mv \"$PHP_INI_DIR/php.ini-production\" \"$PHP_INI_DIR/php.ini\"\n\n# Copy the PHP files of your project in the public directory\nCOPY . /app/public\n# If you use Symfony or Laravel, you need to copy the whole project instead:\n#COPY . /app\n```\n\n----------------------------------------\n\nTITLE: Running Laravel with FrankenPHP Docker Container (Console)\nDESCRIPTION: Runs the official 'dunglas/frankenphp' Docker image to serve a Laravel application. It maps HTTP (80) and HTTPS (443 TCP/UDP) ports and mounts the current host directory (containing the Laravel app) to the '/app' directory within the container. This command should be run from the root directory of the Laravel project.\nSOURCE: https://github.com/dunglas/frankenphp/blob/main/docs/laravel.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ndocker run -p 80:80 -p 443:443 -p 443:443/udp -v $PWD:/app dunglas/frankenphp\n```\n\n----------------------------------------\n\nTITLE: Installing Additional PHP Extensions in FrankenPHP Dockerfile (dockerfile)\nDESCRIPTION: This Dockerfile demonstrates adding PHP extensions to the `dunglas/frankenphp` base image. It utilizes the built-in `install-php-extensions` script to easily install common extensions like `pdo_mysql`, `gd`, `intl`, `zip`, and `opcache`, which might be required by the PHP application.\nSOURCE: https://github.com/dunglas/frankenphp/blob/main/docs/docker.md#_snippet_2\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM dunglas/frankenphp\n\n# add additional extensions here:\nRUN install-php-extensions \\\n\tpdo_mysql \\\n\tgd \\\n\tintl \\\n\tzip \\\n\topcache\n```\n\n----------------------------------------\n\nTITLE: Building and Running a FrankenPHP Docker Container (console)\nDESCRIPTION: These commands first build a Docker image tagged as `my-php-app` from the Dockerfile in the current directory. The second command then runs an interactive (`-it`), auto-removing (`--rm`) container named `my-running-app` based on the newly built `my-php-app` image.\nSOURCE: https://github.com/dunglas/frankenphp/blob/main/docs/docker.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\ndocker build -t my-php-app .\ndocker run -it --rm --name my-running-app my-php-app\n```\n\n----------------------------------------\n\nTITLE: Overriding PHP ini Settings from the Caddyfile - Caddyfile\nDESCRIPTION: This snippet demonstrates how to set PHP ini directives directly from the Caddyfile using the php_ini option, either as a direct assignment or via a block mapping multiple settings. Useful for customizing PHP behaviour at server start time. Key parameters are directives like memory_limit and max_execution_time. Requires the frankenphp module and Caddyfile integration.\nSOURCE: https://github.com/dunglas/frankenphp/blob/main/docs/config.md#_snippet_11\n\nLANGUAGE: caddyfile\nCODE:\n```\n{\n    frankenphp {\n        php_ini memory_limit 256M\n\n        # or\n\n        php_ini {\n            memory_limit 256M\n            max_execution_time 15\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Building FrankenPHP with Custom Caddy Modules via Multi-Stage Dockerfile (dockerfile)\nDESCRIPTION: This multi-stage Dockerfile outlines the process for compiling a custom FrankenPHP binary incorporating additional Caddy modules. The first stage (`builder`) uses the `dunglas/frankenphp:builder` image and `xcaddy` to build the binary with specified modules (e.g., `caddy-cbrotli`, optionally removing default ones like Mercure/Vulcain). It requires setting `CGO_ENABLED` and other build flags. The second stage (`runner`) takes a standard `dunglas/frankenphp` image and replaces the default binary with the custom-built one from the builder stage.\nSOURCE: https://github.com/dunglas/frankenphp/blob/main/docs/docker.md#_snippet_3\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM dunglas/frankenphp:builder AS builder\n\n# Copy xcaddy in the builder image\nCOPY --from=caddy:builder /usr/bin/xcaddy /usr/bin/xcaddy\n\n# CGO must be enabled to build FrankenPHP\nRUN CGO_ENABLED=1 \\\n    XCADDY_SETCAP=1 \\\n    XCADDY_GO_BUILD_FLAGS=\"-ldflags='-w -s' -tags=nobadger,nomysql,nopgx\" \\\n    CGO_CFLAGS=$(php-config --includes) \\\n    CGO_LDFLAGS=\"$(php-config --ldflags) $(php-config --libs)\" \\\n    xcaddy build \\\n        --output /usr/local/bin/frankenphp \\\n        --with github.com/dunglas/frankenphp=./ \\\n        --with github.com/dunglas/frankenphp/caddy=./caddy/ \\\n        --with github.com/dunglas/caddy-cbrotli \\\n        # Mercure and Vulcain are included in the official build, but feel free to remove them\n        --with github.com/dunglas/mercure/caddy \\\n        --with github.com/dunglas/vulcain/caddy\n        # Add extra Caddy modules here\n\nFROM dunglas/frankenphp AS runner\n\n# Replace the official binary by the one contained your custom modules\nCOPY --from=builder /usr/local/bin/frankenphp /usr/local/bin/frankenphp\n```\n\n----------------------------------------\n\nTITLE: Running FrankenPHP Worker with Docker - Console\nDESCRIPTION: This snippet demonstrates how to launch a FrankenPHP worker process inside a Docker container, specifying the PHP worker script path using the FRANKENPHP_CONFIG environment variable. Dependencies include Docker, the dunglas/frankenphp image, and an application worker script mapped into the container via a volume. Parameters include the path to the script, the local directory to mount, and the chosen TCP/UDP ports to expose. The command initializes the PHP app in worker mode for high-speed request processing.\nSOURCE: https://github.com/dunglas/frankenphp/blob/main/docs/worker.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ndocker run \\\n    -e FRANKENPHP_CONFIG=\\\"worker /app/path/to/your/worker/script.php\\\" \\\n    -v $PWD:/app \\\n    -p 80:80 -p 443:443 -p 443:443/udp \\\n    dunglas/frankenphp\n```\n\n----------------------------------------\n\nTITLE: Creating Static Laravel Binary with FrankenPHP Builder (Dockerfile)\nDESCRIPTION: Defines a multi-stage Dockerfile using the 'dunglas/frankenphp:static-builder' image to compile a standalone, static binary of a Laravel application for Linux (amd64). It copies the application code, removes unnecessary files (like tests), prepares the '.env' file for production, installs composer dependencies (excluding dev dependencies), and uses the 'build-static.sh' script provided by the builder image to embed the application into the FrankenPHP binary. Note potential conflicts with '.dockerignore' files that might exclude 'vendor/' or '.env'.\nSOURCE: https://github.com/dunglas/frankenphp/blob/main/docs/laravel.md#_snippet_5\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM --platform=linux/amd64 dunglas/frankenphp:static-builder\n\n# Copy your app\nWORKDIR /go/src/app/dist/app\nCOPY . .\n\n# Remove the tests and other unneeded files to save space\n# Alternatively, add these files to a .dockerignore file\nRUN rm -Rf tests/\n\n# Copy .env file\nRUN cp .env.example .env\n# Change APP_ENV and APP_DEBUG to be production ready\nRUN sed -i'' -e 's/^APP_ENV=.*/APP_ENV=production/' -e 's/^APP_DEBUG=.*/APP_DEBUG=false/' .env\n\n# Make other changes to your .env file if needed\n\n# Install the dependencies\nRUN composer install --ignore-platform-reqs --no-dev -a\n\n# Build the static binary\nWORKDIR /go/src/app/\nRUN EMBED=dist/app/ ./build-static.sh\n```\n\n----------------------------------------\n\nTITLE: Configuring Caddyfile for Local Laravel FrankenPHP Server (Caddyfile)\nDESCRIPTION: Defines the Caddyfile configuration for running a Laravel application locally using a FrankenPHP binary. It enables FrankenPHP, sets 'localhost' as the domain, specifies the webroot as the 'public/' directory (standard for Laravel), enables content encoding (zstd, br, gzip), and configures the PHP server to handle requests, attempting to serve static files first and falling back to 'index.php'.\nSOURCE: https://github.com/dunglas/frankenphp/blob/main/docs/laravel.md#_snippet_1\n\nLANGUAGE: caddyfile\nCODE:\n```\n{\n\tfrankenphp\n}\n\n# The domain name of your server\nlocalhost {\n\t# Set the webroot to the public/ directory\n\troot public/\n\t# Enable compression (optional)\n\tencode zstd br gzip\n\t# Execute PHP files from the public/ directory and serve assets\n\tphp_server {\n\t\ttry_files {path} index.php\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling FrankenPHP Root Symlink Resolution in Caddyfile\nDESCRIPTION: Disables the automatic resolution of the document root if it's a symbolic link by setting `resolve_root_symlink` to `false` within the `php_server` directive. This optimization provides a performance benefit primarily when the `root` directive uses placeholders, otherwise the gain is negligible. Only use this if the document root is guaranteed not to be a symlink.\nSOURCE: https://github.com/dunglas/frankenphp/blob/main/docs/performance.md#_snippet_3\n\nLANGUAGE: caddyfile\nCODE:\n```\nphp_server {\n    resolve_root_symlink false\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Laravel Octane with FrankenPHP Server (Console)\nDESCRIPTION: Starts the Laravel Octane server using the FrankenPHP driver via the Artisan command 'octane:frankenphp'. This command boots the application and keeps it in memory using worker processes managed by FrankenPHP for improved performance. Several command-line options are available to customize its behavior (host, port, workers, etc.).\nSOURCE: https://github.com/dunglas/frankenphp/blob/main/docs/laravel.md#_snippet_4\n\nLANGUAGE: console\nCODE:\n```\nphp artisan octane:frankenphp\n```\n\n----------------------------------------\n\nTITLE: Starting the Application with Docker Compose in Production\nDESCRIPTION: This command navigates into the project directory (where `compose.yaml` resides) and starts the application services using Docker Compose. The `up` command builds (if necessary) and starts the services defined in `compose.yaml`. The `-d` flag runs the containers in detached mode (background), and `--wait` makes the command wait until containers are healthy (requires health checks). This command effectively launches the PHP application managed by FrankenPHP.\nSOURCE: https://github.com/dunglas/frankenphp/blob/main/docs/production.md#_snippet_5\n\nLANGUAGE: console\nCODE:\n```\ndocker compose up -d --wait\n```\n\n----------------------------------------\n\nTITLE: Example DNS A Record Configuration for Domain Mapping\nDESCRIPTION: This snippet shows an example DNS `A` record configuration. It maps the subdomain `your-domain-name.example.com` to a specific server IP address (e.g., `207.154.233.113`). This DNS configuration is essential for users to access the application via the domain name and enables Caddy (within FrankenPHP) to automatically obtain Let's Encrypt TLS certificates, as Let's Encrypt requires a valid domain name.\nSOURCE: https://github.com/dunglas/frankenphp/blob/main/docs/production.md#_snippet_3\n\nLANGUAGE: dns\nCODE:\n```\nyour-domain-name.example.com.  IN  A     207.154.233.113\n```\n\n----------------------------------------\n\nTITLE: Configuring FrankenPHP Service with Docker Compose (yaml)\nDESCRIPTION: This `compose.yaml` file defines a service named `php` using the `dunglas/frankenphp` image for easy local development setup. It maps standard web ports (80, 443 TCP/UDP), mounts the current directory to `/app/public` for code synchronization, and defines named volumes (`caddy_data`, `caddy_config`) for persistent Caddy data like TLS certificates. Includes `tty: true` for developer-friendly logs and comments indicating options for using a custom build or production settings like `restart: always`.\nSOURCE: https://github.com/dunglas/frankenphp/blob/main/docs/docker.md#_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n# compose.yaml\n\nservices:\n  php:\n    image: dunglas/frankenphp\n    # uncomment the following line if you want to use a custom Dockerfile\n    #build: .\n    # uncomment the following line if you want to run this in a production environment\n    # restart: always\n    ports:\n      - \"80:80\" # HTTP\n      - \"443:443\" # HTTPS\n      - \"443:443/udp\" # HTTP/3\n    volumes:\n      - ./:/app/public\n      - caddy_data:/data\n      - caddy_config:/config\n    # comment the following line in production, it allows to have nice human-readable logs in dev\n    tty: true\n\n# Volumes needed for Caddy certificates and configuration\nvolumes:\n  caddy_data:\n  caddy_config:\n```\n\n----------------------------------------\n\nTITLE: Watching for File Changes with FrankenPHP Worker - Console\nDESCRIPTION: This command runs the frankenphp php-server in worker mode and monitors PHP files for changes, triggering worker restarts on modification. Dependencies include the frankenphp binary and an accessible PHP worker script. The --watch parameter expects a glob path to files being monitored, aiding in live reload workflows. Inputs are worker script and watch path; the worker is automatically restarted upon relevant file edit.\nSOURCE: https://github.com/dunglas/frankenphp/blob/main/docs/worker.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nfrankenphp php-server --worker /path/to/your/worker/script.php --watch \\\"/path/to/your/app/**/*.php\\\"\n```\n\n----------------------------------------\n\nTITLE: Running Custom FrankenPHP Worker with Docker - Console\nDESCRIPTION: This Docker command runs a custom worker script as defined in the previous PHP example, mapping in the application code and exposing needed ports. The FRANKENPHP_CONFIG environment variable points to the script, which is started in worker mode. Additional parameters and the ability to scale worker count are configurable via appended arguments and environment variables.\nSOURCE: https://github.com/dunglas/frankenphp/blob/main/docs/worker.md#_snippet_6\n\nLANGUAGE: console\nCODE:\n```\ndocker run \\\n    -e FRANKENPHP_CONFIG=\\\"worker ./public/index.php\\\" \\\n    -v $PWD:/app \\\n    -p 80:80 -p 443:443 -p 443:443/udp \\\n    dunglas/frankenphp\n```\n\n----------------------------------------\n\nTITLE: Restarting FrankenPHP Workers via Caddy Admin API - Console\nDESCRIPTION: This curl example sends a POST request to the Caddy server admin endpoint to trigger a graceful restart of all FrankenPHP worker processes. The Caddy admin API must be enabled and accessible. The only parameter is the endpoint URL, and the HTTP method is POST. Useful for automated worker recovery and maintenance workflows.\nSOURCE: https://github.com/dunglas/frankenphp/blob/main/docs/worker.md#_snippet_8\n\nLANGUAGE: console\nCODE:\n```\ncurl -X POST http://localhost:2019/frankenphp/workers/restart\n```\n\n----------------------------------------\n\nTITLE: Watching and Restarting Workers on File Changes - Caddyfile\nDESCRIPTION: This Caddyfile worker block enables worker process restarts when files change by using the watch directive. This feature is primarily helpful in development, automatically picking up changes in the specified app worker script. The worker file path is provided, and a watch option enables file change detection. Requires the frankenphp environment and correct worker script location.\nSOURCE: https://github.com/dunglas/frankenphp/blob/main/docs/config.md#_snippet_7\n\nLANGUAGE: caddyfile\nCODE:\n```\n{\n\tfrankenphp {\n\t\tworker {\n\t\t\tfile  /path/to/app/public/worker.php\n\t\t\twatch\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling and Serving PHP with FrankenPHP - Minimal Caddyfile\nDESCRIPTION: This Caddyfile snippet provides a minimal configuration to enable the FrankenPHP executor and serve a PHP app. It demonstrates how to set the frankenphp global option and use the php_server directive within a site block, with optional compression enabled. Key options are the frankenphp activation and asset serving using php_server. No dependencies are needed aside from a working Caddy and FrankenPHP setup.\nSOURCE: https://github.com/dunglas/frankenphp/blob/main/docs/config.md#_snippet_1\n\nLANGUAGE: caddyfile\nCODE:\n```\n{\n\t# Enable FrankenPHP\n\tfrankenphp\n}\n\nlocalhost {\n\t# Enable compression (optional)\n\tencode zstd br gzip\n\t# Execute PHP files in the current directory and serve assets\n\tphp_server\n}\n```\n\n----------------------------------------\n\nTITLE: Installing FrankenPHP via Homebrew (macOS/Linux)\nDESCRIPTION: Installs the FrankenPHP package using the Homebrew package manager. It utilizes a custom tap (`dunglas/frankenphp`) to provide the formula. This is a recommended installation method for macOS and Linux users.\nSOURCE: https://github.com/dunglas/frankenphp/blob/main/README.md#_snippet_4\n\nLANGUAGE: console\nCODE:\n```\nbrew install dunglas/frankenphp/frankenphp\n```\n\n----------------------------------------\n\nTITLE: Adding a Worker (Short Form) - Caddyfile\nDESCRIPTION: This snippet uses the short-form notation to add a worker to the FrankenPHP configuration in the Caddyfile. It simplifies worker creation by specifying the file and number of threads directly without nested directive syntax. Parameters are <file> (the PHP worker script) and <num> (threads count). Requires the frankenphp module and proper PHP script path.\nSOURCE: https://github.com/dunglas/frankenphp/blob/main/docs/config.md#_snippet_3\n\nLANGUAGE: caddyfile\nCODE:\n```\n{\n\tfrankenphp {\n\t\tworker <file> <num>\n\t}\n}\n\n# ...\n```\n\n----------------------------------------\n\nTITLE: Running FrankenPHP Container with Volume Mount for Development (console)\nDESCRIPTION: This command runs the `my-php-app` Docker container optimized for development. It uses `-v $PWD:/app/public` to mount the host's current directory (containing the source code) into the container, allowing live code changes. Ports 80 (HTTP), 443 (HTTPS), and 443/udp (HTTP/3) are mapped. The `--tty` flag ensures human-readable logs instead of JSON, aiding debugging.\nSOURCE: https://github.com/dunglas/frankenphp/blob/main/docs/docker.md#_snippet_5\n\nLANGUAGE: console\nCODE:\n```\ndocker run -v $PWD:/app/public -p 80:80 -p 443:443 -p 443:443/udp --tty my-php-app\n```\n\n----------------------------------------\n\nTITLE: Configuring FrankenPHP Docker Image to Run as Non-Root User (dockerfile)\nDESCRIPTION: This Dockerfile configures the container to run FrankenPHP as a non-root user (`appuser`). It creates the user, grants the `CAP_NET_BIND_SERVICE` capability to the `frankenphp` binary using `setcap` (allowing it to bind to privileged ports 80/443), ensures the user owns necessary Caddy directories (`/data/caddy`, `/config/caddy`), and switches to the `appuser` using the `USER` instruction. Note the comment regarding `adduser -D` for Alpine-based images.\nSOURCE: https://github.com/dunglas/frankenphp/blob/main/docs/docker.md#_snippet_7\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM dunglas/frankenphp\n\nARG USER=appuser\n\nRUN \\\n\t# Use \"adduser -D ${USER}\" for alpine based distros\n\tuseradd ${USER}; \\\n\t# Add additional capability to bind to port 80 and 443\n\tsetcap CAP_NET_BIND_SERVICE=+eip /usr/local/bin/frankenphp; \\\n\t# Give write access to /data/caddy and /config/caddy\n\tchown -R ${USER}:${USER} /data/caddy && chown -R ${USER}:${USER} /config/caddy\n\nUSER ${USER}\n```\n\n----------------------------------------\n\nTITLE: Configuring FrankenPHP Worker Mode via Environment Variable in Dockerfile (dockerfile)\nDESCRIPTION: This Dockerfile snippet shows how to enable FrankenPHP's worker mode by default. Setting the `FRANKENPHP_CONFIG` environment variable to `\"worker ./public/index.php\"` instructs FrankenPHP to start using the specified PHP script as a long-running worker process when the container launches.\nSOURCE: https://github.com/dunglas/frankenphp/blob/main/docs/docker.md#_snippet_4\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM dunglas/frankenphp\n\n# ...\n\nENV FRANKENPHP_CONFIG=\"worker ./public/index.php\"\n```\n\n----------------------------------------\n\nTITLE: Enabling HTTPS and HTTP/2/3 in FrankenPHP Binary - Console\nDESCRIPTION: This command starts the embedded FrankenPHP binary web server, enabling HTTPS (and HTTP/2, HTTP/3 where supported) with automatic Let's Encrypt certificate generation. Requires a --domain argument, which should be a valid hostname. The binary handles LE challenge/response; outputs a web server listening with valid TLS certificates for the given domain.\nSOURCE: https://github.com/dunglas/frankenphp/blob/main/docs/embed.md#_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n./my-app php-server --domain localhost\n```\n\n----------------------------------------\n\nTITLE: Configuring PHP Threads, Workers, and ini Values - Caddyfile\nDESCRIPTION: This configuration expands on the Caddyfile's frankenphp global option, specifying thread count, runtime limits, php.ini directives, and detailed worker definitions. It illustrates how advanced worker management and environment configuration are achieved in FrankenPHP via the Caddyfile. Key parameters include num_threads, max_threads, max_wait_time, php_ini, and nested worker directive options such as file, env, watch, and name.\nSOURCE: https://github.com/dunglas/frankenphp/blob/main/docs/config.md#_snippet_2\n\nLANGUAGE: caddyfile\nCODE:\n```\n{\n\tfrankenphp {\n\t\tnum_threads <num_threads> # Sets the number of PHP threads to start. Default: 2x the number of available CPUs.\n\t\tmax_threads <num_threads> # Limits the number of additional PHP threads that can be started at runtime. Default: num_threads. Can be set to 'auto'.\n\t\tmax_wait_time <duration> # Sets the maximum time a request may wait for a free PHP thread before timing out. Default: disabled.\n\t\tphp_ini <key> <value> # Set a php.ini directive. Can be used several times to set multiple directives.\n\t\tworker {\n\t\t\tfile <path> # Sets the path to the worker script.\n\t\t\tnum <num> # Sets the number of PHP threads to start, defaults to 2x the number of available CPUs.\n\t\t\tenv <key> <value> # Sets an extra environment variable to the given value. Can be specified more than once for multiple environment variables.\n\t\t\twatch <path> # Sets the path to watch for file changes. Can be specified more than once for multiple paths.\n\t\t\tname <name> # Sets the name of the worker, used in logs and metrics. Default: absolute path of worker file\n\t\t}\n\t}\n}\n\n# ...\n```\n\n----------------------------------------\n\nTITLE: Running FrankenPHP Embedded Binary in Web Server Mode - Console\nDESCRIPTION: This command launches the embedded FrankenPHP binary in PHP web server mode, exposing the PHP application bundled within. There are no required arguments; ./my-app refers to the output binary from the build process. The script assumes the binary is executable and built with appropriate entrypoints. Output is a running production-grade web server for the embedded app.\nSOURCE: https://github.com/dunglas/frankenphp/blob/main/docs/embed.md#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n./my-app php-server\n```\n\n----------------------------------------\n\nTITLE: Building FrankenPHP Go Application - Console\nDESCRIPTION: This snippet handles downloading the FrankenPHP project, navigating to the Go source directory, and compiling it with custom CGO flags reflecting the PHP build configuration. It requires Go, curl, tar, and a configured PHP installation accessible via php-config. Users can pass build tags to control which features are compiled. Output is a FrankenPHP binary.\nSOURCE: https://github.com/dunglas/frankenphp/blob/main/docs/compile.md#_snippet_5\n\nLANGUAGE: console\nCODE:\n```\ncurl -L https://github.com/dunglas/frankenphp/archive/refs/heads/main.tar.gz | tar xz\ncd frankenphp-main/caddy/frankenphp\nCGO_CFLAGS=$(php-config --includes) CGO_LDFLAGS=\"$(php-config --ldflags) $(php-config --libs)\" go build -tags=nobadger,nomysql,nopgx\n```\n\n----------------------------------------\n\nTITLE: Compiling with xcaddy for Caddy Modules and FrankenPHP - Shell\nDESCRIPTION: This snippet demonstrates how to leverage xcaddy to build FrankenPHP alongside custom Caddy modules. It sets Go build flags, CGO settings, and passes in desired modules. This is useful when a customized HTTP server is required. The snippet uses shell environment variable assignments, requires xcaddy, Go, and PHP headers/libs to be available.\nSOURCE: https://github.com/dunglas/frankenphp/blob/main/docs/compile.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nCGO_ENABLED=1 \\\nXCADDY_GO_BUILD_FLAGS=\"-ldflags='-w -s' -tags=nobadger,nomysql,nopgx\" \\\nCGO_CFLAGS=$(php-config --includes) \\\nCGO_LDFLAGS=\"$(php-config --ldflags) $(php-config --libs)\" \\\nxcaddy build \\\n    --output frankenphp \\\n    --with github.com/dunglas/frankenphp/caddy \\\n    --with github.com/dunglas/mercure/caddy \\\n    --with github.com/dunglas/vulcain/caddy\n    # Add extra Caddy modules here\n```\n\n----------------------------------------\n\nTITLE: Running FrankenPHP as Non-Root User without Network Capabilities (dockerfile)\nDESCRIPTION: This Dockerfile demonstrates running FrankenPHP as a non-root user (`appuser`) without granting any special capabilities. It creates the user, removes all capabilities from the `frankenphp` binary using `setcap -r`, ensures the user owns necessary Caddy directories, and switches to the `appuser`. This configuration requires FrankenPHP to be configured to listen on a non-privileged port (>= 1024), typically by setting the `SERVER_NAME` environment variable (e.g., `:8000`).\nSOURCE: https://github.com/dunglas/frankenphp/blob/main/docs/docker.md#_snippet_8\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM dunglas/frankenphp\n\nARG USER=appuser\n\nRUN \\\n\t# Use \"adduser -D ${USER}\" for alpine based distros\n\tuseradd ${USER}; \\\n\t# Remove default capability\n\tsetcap -r /usr/local/bin/frankenphp; \\\n\t# Give write access to /data/caddy and /config/caddy\n\tchown -R ${USER}:${USER} /data/caddy && chown -R ${USER}:${USER} /config/caddy\n\nUSER ${USER}\n```\n\n----------------------------------------\n\nTITLE: Building Fully Static FrankenPHP Binary Using Docker (Console)\nDESCRIPTION: This snippet demonstrates how to build a fully static FrankenPHP binary using Docker's buildx bake for the musl libc variant and copy it from the container to the host system. This approach creates a portable, dependency-free binary but without dynamic extension support. Dependencies: Docker with buildx support; outputs a ready-to-run static binary. Input is the target architecture, output is the frankenphp binary on the host.\nSOURCE: https://github.com/dunglas/frankenphp/blob/main/docs/static.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ndocker buildx bake --load static-builder-musl\ndocker cp $(docker create --name static-builder-musl dunglas/frankenphp:static-builder-musl):/go/src/app/dist/frankenphp-linux-$(uname -m) frankenphp ; docker rm static-builder-musl\n```\n\n----------------------------------------\n\nTITLE: Customizing PHP Extensions in Static Build Using Docker ARG (Console)\nDESCRIPTION: Shows how to restrict built-in PHP extensions in a FrankenPHP static build by setting the PHP_EXTENSIONS Docker ARG. The buildx --set flag is used to only include the specified extensions, improving security and minimizing binary size. Input: a comma-separated list of extension names; output: tailored static binary.\nSOURCE: https://github.com/dunglas/frankenphp/blob/main/docs/static.md#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\ndocker buildx bake --load --set static-builder-musl.args.PHP_EXTENSIONS=opcache,pdo_sqlite static-builder-musl\n# ...\n```\n\n----------------------------------------\n\nTITLE: Building Standalone Binary with Docker - Console\nDESCRIPTION: This command builds a Docker image containing a statically linked binary of your application using the specified Dockerfile. It requires Docker to be installed, the static-build.Dockerfile present in the app repository, and application code available in the build context. The output image is tagged as 'static-app', ready for binary extraction.\nSOURCE: https://github.com/dunglas/frankenphp/blob/main/docs/embed.md#_snippet_8\n\nLANGUAGE: console\nCODE:\n```\ndocker build -t static-app -f static-build.Dockerfile .\n```\n\n----------------------------------------\n\nTITLE: Enabling Mimalloc Memory Allocator in Fully Static Build (Console)\nDESCRIPTION: Enables mimalloc, a high-performance allocator, for the musl-based static FrankenPHP build via Docker. It uses the build argument MIMALLOC=1 for improved concurrency performance at build time. Requires Docker with buildx configured. Outputs a static binary linked with mimalloc instead of musl's default allocator.\nSOURCE: https://github.com/dunglas/frankenphp/blob/main/docs/static.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\ndocker buildx bake --load --set static-builder-musl.args.MIMALLOC=1 static-builder-musl\n```\n\n----------------------------------------\n\nTITLE: Cloning, Navigating, and Running Static Build Script on macOS/Linux (Shell)\nDESCRIPTION: These shell commands clone the FrankenPHP repository, move into it, and execute a provided static build script. The process automates static binary generation for macOS (and works on Linux), with Homebrew as a prerequisite. Inputs: repository URL; output: locally built static FrankenPHP binary.\nSOURCE: https://github.com/dunglas/frankenphp/blob/main/docs/static.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/dunglas/frankenphp\ncd frankenphp\n./build-static.sh\n```\n\n----------------------------------------\n\nTITLE: Executing Embedded PHP CLI Script in FrankenPHP Binary - Console\nDESCRIPTION: This command launches the embedded PHP binary in CLI mode, executing an internal script such as Symfony's bin/console. Parameters after php-cli specify the script and any arguments. Requires that the script exists in the embedded application path and the binary is built with CLI entrypoint support. Output is whatever the executed PHP CLI tool prints to stdout/stderr.\nSOURCE: https://github.com/dunglas/frankenphp/blob/main/docs/embed.md#_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n./my-app php-cli bin/console\n```\n\n----------------------------------------\n\nTITLE: Starting Laravel Octane via Static Binary (Console)\nDESCRIPTION: Starts a standalone binary that includes a Laravel Octane application. It executes the 'artisan octane:frankenphp' command using the binary's embedded PHP CLI ('php-cli'). Requires the binary to be named 'frankenphp' and be accessible in the system's PATH environment variable.\nSOURCE: https://github.com/dunglas/frankenphp/blob/main/docs/laravel.md#_snippet_12\n\nLANGUAGE: console\nCODE:\n```\nPATH=\"$PWD:$PATH\" frankenphp php-cli artisan octane:frankenphp\n```\n\n----------------------------------------\n\nTITLE: Extracting Built FrankenPHP Binary from Docker Container - Console\nDESCRIPTION: This chained command extracts the statically linked FrankenPHP binary out of a built Docker image for use as a standalone executable. It first creates a temporary container, copies the binary from a known path inside, and then removes the container. Dependencies are Docker, and assumes the binary exists under /go/src/app/dist/frankenphp-linux-x86_64. Output is the binary placed as my-app in the working directory.\nSOURCE: https://github.com/dunglas/frankenphp/blob/main/docs/embed.md#_snippet_7\n\nLANGUAGE: console\nCODE:\n```\ndocker cp $(docker create --name static-app-tmp static-app):/go/src/app/dist/frankenphp-linux-x86_64 my-app ; docker rm static-app-tmp\n```\n\n----------------------------------------\n\nTITLE: Starting FrankenPHP Server with Static Binary (Console)\nDESCRIPTION: Starts the web server embedded within the static 'frankenphp' binary using the 'php-server' command. This makes the packaged Laravel application accessible over HTTP/HTTPS.\nSOURCE: https://github.com/dunglas/frankenphp/blob/main/docs/laravel.md#_snippet_11\n\nLANGUAGE: console\nCODE:\n```\nfrankenphp php-server\n```\n\n----------------------------------------\n\nTITLE: Generating Laravel App Key with Static Binary (Console)\nDESCRIPTION: Generates the Laravel application's encryption key ('artisan key:generate') using the static 'frankenphp' binary in PHP command-line interface ('php-cli') mode. This sets the 'APP_KEY' environment variable in the '.env' file, essential for securing sessions and encrypted data.\nSOURCE: https://github.com/dunglas/frankenphp/blob/main/docs/laravel.md#_snippet_10\n\nLANGUAGE: console\nCODE:\n```\nfrankenphp php-cli artisan key:generate\n```\n\n----------------------------------------\n\nTITLE: Optimizing Laravel Caches with Static Binary (Console)\nDESCRIPTION: Runs Laravel's optimization commands ('artisan optimize') using the extracted static 'frankenphp' binary in PHP command-line interface ('php-cli') mode. This pre-compiles configuration and route caches within the embedded application.\nSOURCE: https://github.com/dunglas/frankenphp/blob/main/docs/laravel.md#_snippet_8\n\nLANGUAGE: console\nCODE:\n```\nfrankenphp php-cli artisan optimize\n```\n\n----------------------------------------\n\nTITLE: Configuring Laravel Octane for FrankenPHP Server (Console)\nDESCRIPTION: Executes the Laravel Artisan command 'octane:install' after the package is installed. The '--server=frankenphp' flag specifically installs Octane's configuration files tailored for use with the FrankenPHP server.\nSOURCE: https://github.com/dunglas/frankenphp/blob/main/docs/laravel.md#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\nphp artisan octane:install --server=frankenphp\n```\n\n----------------------------------------\n\nTITLE: Extracting Static FrankenPHP Binary from Docker (Console)\nDESCRIPTION: Extracts the compiled static binary from the previously built Docker image ('static-laravel-app'). It creates a temporary container, copies the binary ('/go/src/app/dist/frankenphp-linux-x86_64') from the container to the host filesystem (renaming it to 'frankenphp'), and then removes the temporary container.\nSOURCE: https://github.com/dunglas/frankenphp/blob/main/docs/laravel.md#_snippet_7\n\nLANGUAGE: console\nCODE:\n```\ndocker cp $(docker create --name static-laravel-app-tmp static-laravel-app):/go/src/app/dist/frankenphp-linux-x86_64 frankenphp ; docker rm static-laravel-app-tmp\n```\n\n----------------------------------------\n\nTITLE: Running FrankenPHP Server (Standalone Binary)\nDESCRIPTION: Starts the FrankenPHP server using the installed standalone binary. It serves the content of the current working directory. This command is typically run after installing FrankenPHP using the installation script or manual download.\nSOURCE: https://github.com/dunglas/frankenphp/blob/main/README.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nfrankenphp php-server\n```\n\n----------------------------------------\n\nTITLE: Installing Laravel Octane via Composer (Console)\nDESCRIPTION: Uses the Composer package manager to download and install the 'laravel/octane' package, adding it as a dependency to the Laravel project. This is the first step required to use Laravel Octane.\nSOURCE: https://github.com/dunglas/frankenphp/blob/main/docs/laravel.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\ncomposer require laravel/octane\n```\n\n----------------------------------------\n\nTITLE: Cloning the Project Repository onto the Server using Git\nDESCRIPTION: This command uses Git to clone the application's source code repository onto the deployment server. Replace `<username>/<project-name>` with the actual path to the Git repository (e.g., on GitHub or GitLab). This step transfers the application code, including the `Dockerfile` and `compose.yaml`, to the server, preparing for the build and deployment process.\nSOURCE: https://github.com/dunglas/frankenphp/blob/main/docs/production.md#_snippet_4\n\nLANGUAGE: console\nCODE:\n```\ngit clone git@github.com:<username>/<project-name>.git\n```\n\n----------------------------------------\n\nTITLE: Connecting to the Deployment Server via SSH\nDESCRIPTION: This command demonstrates how to establish an SSH connection to the deployment server using its IP address. Replace `<droplet-ip>` with the actual IP address of the provisioned virtual machine (e.g., a DigitalOcean Droplet). Access requires proper SSH key setup or password authentication configured on the server.\nSOURCE: https://github.com/dunglas/frankenphp/blob/main/docs/production.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nssh root@<droplet-ip>\n```\n\n----------------------------------------\n\nTITLE: Running Database Migrations with Static Binary (Console)\nDESCRIPTION: Executes Laravel's database migrations ('artisan migrate') using the static 'frankenphp' binary in PHP command-line interface ('php-cli') mode. This step is necessary if the application uses a database to set up the schema.\nSOURCE: https://github.com/dunglas/frankenphp/blob/main/docs/laravel.md#_snippet_9\n\nLANGUAGE: console\nCODE:\n```\nfrankenphp php-cli artisan migrate\n```\n\n----------------------------------------\n\nTITLE: Extracting and Entering PHP Source Directory - Console\nDESCRIPTION: This snippet demonstrates how to extract downloaded PHP source archives and navigate into the extracted directory using standard Unix commands. No external dependencies are required aside from the tar utility and a standard GNU/Linux or Mac terminal. It expects the downloaded PHP archive to be present; the output is a change of working directory to the PHP source folder.\nSOURCE: https://github.com/dunglas/frankenphp/blob/main/docs/compile.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ntar xf php-*\ncd php-*/\n```\n\n----------------------------------------\n\nTITLE: Running FrankenPHP with Host Networking Using Docker (Console)\nDESCRIPTION: This Docker command runs the FrankenPHP container using the host's networking stack, assigning 127.0.0.1 as the server name. The command mounts the current directory as a volume and passes necessary environment variables. This method is intended for Linux systems and does not work on Mac or Windows due to host networking limitations.\nSOURCE: https://github.com/dunglas/frankenphp/blob/main/docs/known-issues.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ndocker run \\\n    -e SERVER_NAME=\\\"127.0.0.1\\\" \\\n    -v $PWD:/app/public \\\n    --network host \\\n    dunglas/frankenphp\n```\n\n----------------------------------------\n\nTITLE: Running Symfony App with FrankenPHP Runtime via Docker - Console\nDESCRIPTION: The Docker command runs a Symfony application using FrankenPHP worker mode and configures the APP_RUNTIME environment variable for integration with the Symfony Runtime bridge. Prerequisites include a Docker environment, dunglas/frankenphp image, and a pre-built Symfony application. Environment variables define the worker script and runtime class, while ports are mapped for HTTP/HTTPS access.\nSOURCE: https://github.com/dunglas/frankenphp/blob/main/docs/worker.md#_snippet_4\n\nLANGUAGE: console\nCODE:\n```\ndocker run \\\n    -e FRANKENPHP_CONFIG=\\\"worker ./public/index.php\\\" \\\n    -e APP_RUNTIME=Runtime\\\\FrankenPhpSymfony\\\\Runtime \\\n    -v $PWD:/app \\\n    -p 80:80 -p 443:443 -p 443:443/udp \\\n    dunglas/frankenphp\n```\n\n----------------------------------------\n\nTITLE: Running FrankenPHP Server (Homebrew Installation)\nDESCRIPTION: Starts the FrankenPHP server after installing it via Homebrew. It serves the content of the current working directory. This command assumes the `frankenphp` binary installed by Homebrew is available in the system's PATH.\nSOURCE: https://github.com/dunglas/frankenphp/blob/main/README.md#_snippet_5\n\nLANGUAGE: console\nCODE:\n```\nfrankenphp php-server\n```\n\n----------------------------------------\n\nTITLE: Building Static Laravel App Docker Image (Console)\nDESCRIPTION: Builds a Docker image using the configuration defined in 'static-build.Dockerfile'. The resulting image is tagged as 'static-laravel-app' and contains the build environment and the compiled static binary.\nSOURCE: https://github.com/dunglas/frankenphp/blob/main/docs/laravel.md#_snippet_6\n\nLANGUAGE: console\nCODE:\n```\ndocker build -t static-laravel-app -f static-build.Dockerfile .\n```\n\n----------------------------------------\n\nTITLE: Installing FrankenPHP Standalone Binary via Shell Script (Linux/macOS)\nDESCRIPTION: Downloads an installation script using curl, executes it using sh to install the appropriate FrankenPHP binary for the system, and then moves the downloaded binary to /usr/local/bin/ for system-wide access. This method is primarily for development and testing.\nSOURCE: https://github.com/dunglas/frankenphp/blob/main/README.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ncurl https://frankenphp.dev/install.sh | sh\nmv frankenphp /usr/local/bin/\n```\n\n----------------------------------------\n\nTITLE: Installing Mac Build Dependencies with Homebrew - Console\nDESCRIPTION: This snippet uses Homebrew to install several build-time dependencies required for PHP on macOS, and modifies the PATH to use Homebrew's Bison. Dependencies are Homebrew itself and the specified packages. After running these commands, the shell environment on Mac will be set up to use the required tools for building PHP.\nSOURCE: https://github.com/dunglas/frankenphp/blob/main/docs/compile.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nbrew install libiconv bison brotli re2c pkg-config\necho 'export PATH=\"/opt/homebrew/opt/bison/bin:$PATH\"' >> ~/.zshrc\n```\n\n----------------------------------------\n\nTITLE: Custom File Watch Patterns for Worker Auto-reload - Caddyfile\nDESCRIPTION: This snippet shows how to add multiple watch directives to a worker definition, specifying different file patterns and paths to watch for live reloading or worker restart. Patterns include recursive wildcards for extensions (php, twig), and demonstrate flexible directory specification. Key for development setups where code and template changes must trigger immediate reloads.\nSOURCE: https://github.com/dunglas/frankenphp/blob/main/docs/config.md#_snippet_8\n\nLANGUAGE: caddyfile\nCODE:\n```\n{\n\tfrankenphp {\n\t\tworker {\n\t\t\tfile  /path/to/app/public/worker.php\n\t\t\twatch /path/to/app # watches all files in all subdirectories of /path/to/app\n\t\t\twatch /path/to/app/*.php # watches files ending in .php in /path/to/app\n\t\t\twatch /path/to/app/**/*.php # watches PHP files in /path/to/app and subdirectories\n\t\t\twatch /path/to/app/**/*.{php,twig} # watches PHP and Twig files in /path/to/app and subdirectories\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Installing FrankenPHP Symfony Runtime with Composer - Console\nDESCRIPTION: This command installs the FrankenPHP Symfony Runtime bridge using Composer, enabling worker support for Symfony applications. Prerequisite: Composer must be installed, and the current directory must be a valid PHP project. The only parameter is the package name. Once installed, the project can leverage FrankenPHP-specific Symfony Runtime features.\nSOURCE: https://github.com/dunglas/frankenphp/blob/main/docs/worker.md#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\ncomposer require runtime/frankenphp-symfony\n```\n\n----------------------------------------\n\nTITLE: Injecting Global Caddy Options via Environment Variable - Shell\nDESCRIPTION: This shell snippet shows how to set the CADDY_GLOBAL_OPTIONS environment variable with a servers block that enables full duplex mode before running Caddy. Used to inject configuration dynamically when starting FrankenPHP containers, the main parameter is the content of the environment variable which must match a valid Caddyfile global options block.\nSOURCE: https://github.com/dunglas/frankenphp/blob/main/docs/config.md#_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\nCADDY_GLOBAL_OPTIONS=\"servers {\n  enable_full_duplex\n}\"\n```\n\n----------------------------------------\n\nTITLE: Building Static PHP Binary Using FrankenPHP Builder - Dockerfile\nDESCRIPTION: This Dockerfile sets up a build environment to embed an application into a static FrankenPHP binary targeting Linux. It pulls the static-builder image, copies application files, sets working directories, and invokes the static build script referencing the embedded app root. Dependencies include Docker, the dunglas/frankenphp:static-builder base image, and application source code. Inputs are relative paths and Docker build context; output is a built binary in dist/. Some .dockerignore configurations may omit needed files.\nSOURCE: https://github.com/dunglas/frankenphp/blob/main/docs/embed.md#_snippet_1\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM --platform=linux/amd64 dunglas/frankenphp:static-builder\n\n# Copy your app\nWORKDIR /go/src/app/dist/app\nCOPY . .\n\n# Build the static binary\nWORKDIR /go/src/app/\nRUN EMBED=dist/app/ ./build-static.sh\n```\n\n----------------------------------------\n\nTITLE: Starting FrankenPHP Container with Debug Mode via Environment Variable - Console\nDESCRIPTION: This console example shows the command to run a Docker container for FrankenPHP with the debug mode enabled by setting the CADDY_GLOBAL_OPTIONS environment variable. Key parameters include the local directory mounting, environment variable, and port exposure. The main dependency is the dunglas/frankenphp image, and it's suited for development and troubleshooting.\nSOURCE: https://github.com/dunglas/frankenphp/blob/main/docs/config.md#_snippet_12\n\nLANGUAGE: console\nCODE:\n```\ndocker run -v $PWD:/app/public \\\n    -e CADDY_GLOBAL_OPTIONS=debug \\\n    -p 80:80 -p 443:443 -p 443:443/udp \\\n    dunglas/frankenphp\n```\n\n----------------------------------------\n\nTITLE: Workaround Shell Script for FrankenPHP and Composer (Bash)\nDESCRIPTION: This Bash script replaces the default PHP binary used by Composer scripts, filtering out unsupported -d flags before delegating to the FrankenPHP CLI. Place this script at /usr/local/bin/php and ensure it is executable. This method bypasses limitations in Composer when running PHP commands or scripts under FrankenPHP, particularly regarding unsupported runtime flags.\nSOURCE: https://github.com/dunglas/frankenphp/blob/main/docs/known-issues.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n#!/usr/bin/env bash\nargs=(\"$@\")\nindex=0\nfor i in \"$@\"\ndo\n    if [ \"$i\" == \"-d\" ]; then\n        unset 'args[$index]'\n        unset 'args[$index+1]'\n    fi\n    index=$((index+1))\ndone\n\n/usr/local/bin/frankenphp php-cli ${args[@]}\n```\n\n----------------------------------------\n\nTITLE: Sending 103 Early Hints with Preload Link in PHP\nDESCRIPTION: This PHP snippet demonstrates sending an HTTP 103 Early Hints response using FrankenPHP. It sets a `Link` header to suggest preloading a CSS file (`style.css`) and then uses `headers_send(103)` to dispatch the hints immediately. This allows the browser to start fetching the resource while the server continues with potentially time-consuming operations before sending the final HTML document.\nSOURCE: https://github.com/dunglas/frankenphp/blob/main/docs/early-hints.md#_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nheader('Link: </style.css>; rel=preload; as=style');\nheaders_send(103);\n\n// your slow algorithms and SQL queries 🤪\n\necho <<<'HTML'\n<!DOCTYPE html>\n<title>Hello FrankenPHP</title>\n<link rel=\"stylesheet\" href=\"style.css\">\nHTML;\n\n```\n\n----------------------------------------\n\nTITLE: Running Performance Test Script with Bash and Docker - Shell\nDESCRIPTION: Executes a Bash script ('perf-test.sh') located in the testdata/performance directory, which builds the frankenphp-dev Docker image and starts it under the name 'load-test-container'. The script also runs a k6 test in a separate Grafana container, directing outputs such as 'flamegraph.svg' to the appropriate directory. Requirements include Docker and Bash installations. No direct parameters are needed, as the script is run from the project root; outputs are performance test results and generated flamegraph visualizations.\nSOURCE: https://github.com/dunglas/frankenphp/blob/main/testdata/performance/performance-testing.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nbash testdata/performance/perf-test.sh\n```\n\n----------------------------------------\n\nTITLE: Starting FrankenPHP in Debug Mode with Docker (Console)\nDESCRIPTION: This Docker command starts the FrankenPHP container with debug logging enabled, facilitating troubleshooting for TLS and connection issues. It sets environment variables to enable global Caddy debugging and specifies the server name, mounts the public directory, and binds required ports. Used primarily during setup or when access to 127.0.0.1 fails.\nSOURCE: https://github.com/dunglas/frankenphp/blob/main/docs/known-issues.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\ndocker run \\\n    -e CADDY_GLOBAL_OPTIONS=\\\"debug\\\" \\\n    -e SERVER_NAME=\\\"127.0.0.1\\\" \\\n    -v $PWD:/app/public \\\n    -p 80:80 -p 443:443 -p 443:443/udp \\\n    dunglas/frankenphp\n```\n\n----------------------------------------\n\nTITLE: Initializing PHP Config Templates in Docker - Dockerfile\nDESCRIPTION: This Dockerfile snippet demonstrates how to copy production or development php.ini templates inside a Docker image using the environment variable $PHP_INI_DIR. It is intended for customizing the PHP configuration in a FrankenPHP-based container. The dependencies are a base image (dunglas/frankenphp) and proper access to the PHP ini templates. The main parameters are the file names chosen for copying; the outputs are the updated ini files inside the image.\nSOURCE: https://github.com/dunglas/frankenphp/blob/main/docs/config.md#_snippet_0\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM dunglas/frankenphp\n\n# Production:\nRUN cp $PHP_INI_DIR/php.ini-production $PHP_INI_DIR/php.ini\n\n# Or development:\nRUN cp $PHP_INI_DIR/php.ini-development $PHP_INI_DIR/php.ini\n```\n\n----------------------------------------\n\nTITLE: Configuring Number of FrankenPHP Workers in Docker - Console\nDESCRIPTION: This Docker command runs the FrankenPHP worker script and explicitly sets the number of worker processes to 42 by appending the value to FRANKENPHP_CONFIG. Requires Docker, application code, and tuned worker count as input for load scaling. Inputs are the worker script path and desired concurrency level; outputs are the number of simultaneous worker processes running.\nSOURCE: https://github.com/dunglas/frankenphp/blob/main/docs/worker.md#_snippet_7\n\nLANGUAGE: console\nCODE:\n```\ndocker run \\\n    -e FRANKENPHP_CONFIG=\\\"worker ./public/index.php 42\\\" \\\n    -v $PWD:/app \\\n    -p 80:80 -p 443:443 -p 443:443/udp \\\n    dunglas/frankenphp\n```\n\n----------------------------------------\n\nTITLE: Building Static PHP Binary with Shell Script - Console\nDESCRIPTION: This shell script pulls the FrankenPHP repository and invokes the static build process, embedding a specified application path into a platform-specific binary. Dependencies are Git, shell, and a valid FrankenPHP build environment. The EMBED parameter must point to the directory containing the ready-to-embed application. The produced binary is output in the dist/ directory; requires the environment to support static linking for the target OS/architecture.\nSOURCE: https://github.com/dunglas/frankenphp/blob/main/docs/embed.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\ngit clone https://github.com/dunglas/frankenphp\ncd frankenphp\nEMBED=/path/to/your/app ./build-static.sh\n```\n\n----------------------------------------\n\nTITLE: Launching FrankenPHP Embedded Worker Script - Console\nDESCRIPTION: This command invokes the embedded application binary in PHP web server mode while specifying a worker script (such as Symfony's public/index.php) to handle background processing. It takes a --worker argument pointing to the desired script. The binary must be built with the relevant PHP application and worker code; requires the worker script to be present at the indicated path within the embedded app.\nSOURCE: https://github.com/dunglas/frankenphp/blob/main/docs/embed.md#_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n./my-app php-server --worker public/index.php\n```\n\n----------------------------------------\n\nTITLE: Preparing and Optimizing Symfony App for Embedding - Console\nDESCRIPTION: This sequence of shell commands exports a clean snapshot of a Symfony application, sets up the production environment, removes unnecessary files, installs runtime dependencies, and optimizes environmental configuration for embedding into a static binary. Dependencies include Composer and Git. Parameters include paths such as $TMPDIR, and they expect a Git-managed Symfony project. Outputs a production-ready app directory free of development artifacts or tests, but assumes proper environment access and POSIX shell tools.\nSOURCE: https://github.com/dunglas/frankenphp/blob/main/docs/embed.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n# Export the project to get rid of .git/, etc\nmkdir $TMPDIR/my-prepared-app\ngit archive HEAD | tar -x -C $TMPDIR/my-prepared-app\ncd $TMPDIR/my-prepared-app\n\n# Set proper environment variables\necho APP_ENV=prod > .env.local\necho APP_DEBUG=0 >> .env.local\n\n# Remove the tests and other unneeded files to save space\n# Alternatively, add these files with the export-ignore attribute in your .gitattributes file\nrm -Rf tests/\n\n# Install the dependencies\ncomposer install --ignore-platform-reqs --no-dev -a\n\n# Optimize .env\ncomposer dump-env prod\n```\n\n----------------------------------------\n\nTITLE: Building Mostly Static FrankenPHP Binary with Dynamic Extension Support (Console)\nDESCRIPTION: Performs a build for a glibc-based FrankenPHP binary, supporting dynamic extension loading, using Docker buildx. The binary is partly static (except for glibc) and suitable for most Linux distros with glibc ≥ 2.17. Required: Docker/buildx. Outputs a binary named frankenphp in the current directory.\nSOURCE: https://github.com/dunglas/frankenphp/blob/main/docs/static.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\ndocker buildx bake --load static-builder-gnu\ndocker cp $(docker create --name static-builder-gnu dunglas/frankenphp:static-builder-gnu):/go/src/app/dist/frankenphp-linux-$(uname -m) frankenphp ; docker rm static-builder-gnu\n```\n\n----------------------------------------\n\nTITLE: Launching FrankenPHP Worker Using Standalone Binary - Console\nDESCRIPTION: This command runs FrankenPHP directly using the php-server command with the --worker option, serving application content via a specified worker script. Requires the frankenphp binary on the host. The key parameter is the path to the PHP worker script. The command serves the current directory with worker process orchestration, suitable for local development and non-Dockerized deployment.\nSOURCE: https://github.com/dunglas/frankenphp/blob/main/docs/worker.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nfrankenphp php-server --worker /path/to/your/worker/script.php\n```\n\n----------------------------------------\n\nTITLE: Multiple Worker Setup for Multiple Apps - Caddyfile\nDESCRIPTION: This example demonstrates defining multiple workers and related sites for serving several PHP applications from the same server within a single Caddyfile. Each worker is associated with a specific application entry point and number of threads, and separate site blocks manage routing. Parameters include worker file path and thread count, and each site block specifies the document root and enables php_server.\nSOURCE: https://github.com/dunglas/frankenphp/blob/main/docs/config.md#_snippet_4\n\nLANGUAGE: caddyfile\nCODE:\n```\n{\n\tfrankenphp {\n\t\tworker /path/to/app/public/index.php <num>\n\t\tworker /path/to/other/public/index.php <num>\n\t}\n}\n\napp.example.com {\n\troot /path/to/app/public\n\tphp_server\n}\n\nother.example.com {\n\troot /path/to/other/public\n\tphp_server\n}\n\n# ...\n```\n\n----------------------------------------\n\nTITLE: Separating Static Assets and PHP Handling in Caddyfile using Route\nDESCRIPTION: Demonstrates an alternative Caddyfile configuration using the `route` directive to handle static assets and PHP requests separately for potentially better performance, especially eliminating unnecessary filesystem checks for PHP requests. Requests matching `/assets/*` are served by `file_server`, while all other requests are rewritten to `index.php` and handled by the `php` directive.\nSOURCE: https://github.com/dunglas/frankenphp/blob/main/docs/performance.md#_snippet_2\n\nLANGUAGE: caddyfile\nCODE:\n```\nroute {\n    @assets {\n        path /assets/*\n    }\n\n    # everything behind /assets is handled by the file server\n    file_server @assets {\n        root /root/to/your/app\n    }\n\n    # everything that is not in /assets is handled by your index or worker PHP file\n    rewrite index.php\n    php {\n        root /root/to/your/app # explicitly adding the root here allows for better caching\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom FrankenPHP Worker Script - PHP\nDESCRIPTION: This PHP script example illustrates how to implement a custom FrankenPHP worker for advanced application scenarios without relying on external frameworks. It boots the application, sets up request handling in a loop, and manages resource cleanup. Dependencies include autoloaded application code (via Composer), the frankenphp_handle_request function, and adherence to environment variables (e.g., MAX_REQUESTS). Inputs include HTTP superglobals; outputs are generated responses. The script invokes garbage collection and terminating handlers and respects a max request count for worker restarts.\nSOURCE: https://github.com/dunglas/frankenphp/blob/main/docs/worker.md#_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\n// public/index.php\n\n// Prevent worker script termination when a client connection is interrupted\nignore_user_abort(true);\n\n// Boot your app\nrequire __DIR__.'/vendor/autoload.php';\n\n$myApp = new \\App\\Kernel();\n$myApp->boot();\n\n// Handler outside the loop for better performance (doing less work)\n$handler = static function () use ($myApp) {\n    // Called when a request is received,\n    // superglobals, php://input and the like are reset\n    echo $myApp->handle($_GET, $_POST, $_COOKIE, $_FILES, $_SERVER);\n};\n\n$maxRequests = (int)($_SERVER['MAX_REQUESTS'] ?? 0);\nfor ($nbRequests = 0; !$maxRequests || $nbRequests < $maxRequests; ++$nbRequests) {\n    $keepRunning = \\frankenphp_handle_request($handler);\n\n    // Do something after sending the HTTP response\n    $myApp->terminate();\n\n    // Call the garbage collector to reduce the chances of it being triggered in the middle of a page generation\n    gc_collect_cycles();\n\n    if (!$keepRunning) break;\n}\n\n// Cleanup\n$myApp->shutdown();\n```\n\n----------------------------------------\n\nTITLE: Optimizing FrankenPHP try_files Directive in Caddyfile\nDESCRIPTION: Configures the `try_files` directive within `php_server` to explicitly check only for the requested path (`{path}`) and then the `index.php` file. This avoids default checks for directory index files (`/path/` -> `/path/index.php`), reducing unnecessary file system operations. Explicitly setting the `root` directive is also recommended for better caching.\nSOURCE: https://github.com/dunglas/frankenphp/blob/main/docs/performance.md#_snippet_1\n\nLANGUAGE: caddyfile\nCODE:\n```\nphp_server {\n    try_files {path} index.php\n    root /root/to/your/app # explicitly adding the root here allows for better caching\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling FrankenPHP Default File Server in Caddyfile\nDESCRIPTION: Disables the built-in file server within the `php_server` directive in FrankenPHP's Caddyfile configuration. This can improve performance by avoiding unnecessary checks for static files if they are handled differently or not needed. By default, `php_server` includes a file server.\nSOURCE: https://github.com/dunglas/frankenphp/blob/main/docs/performance.md#_snippet_0\n\nLANGUAGE: caddyfile\nCODE:\n```\nphp_server {\n    file_server off\n}\n```\n\n----------------------------------------\n\nTITLE: php_server Directive Options - Caddyfile\nDESCRIPTION: This snippet documents the extended options available when using the php_server directive in a Caddyfile block, enabling root folder setting, path splitting, environment variable injection, and disabling file_server if desired. It is useful for users needing to customize PHP site handling in Caddy, with main parameters like root, split_path, env, and file_server off.\nSOURCE: https://github.com/dunglas/frankenphp/blob/main/docs/config.md#_snippet_6\n\nLANGUAGE: caddyfile\nCODE:\n```\nphp_server [<matcher>] {\n\troot <directory> # Sets the root folder to the site. Default: `root` directive.\n\tsplit_path <delim...> # Sets the substrings for splitting the URI into two parts. The first matching substring will be used to split the \"path info\" from the path. The first piece is suffixed with the matching substring and will be assumed as the actual resource (CGI script) name. The second piece will be set to PATH_INFO for the script to use. Default: `.php`\n\tresolve_root_symlink false # Disables resolving the `root` directory to its actual value by evaluating a symbolic link, if one exists (enabled by default).\n\tenv <key> <value> # Sets an extra environment variable to the given value. Can be specified more than once for multiple environment variables.\n\tfile_server off # Disables the built-in file_server directive.\n}\n```\n\n----------------------------------------\n\nTITLE: Manual Equivalent of php_server Directive - Caddyfile Route Block\nDESCRIPTION: This advanced Caddyfile route block shows explicitly how the php_server directive is internally implemented, including matchers for files, redirection for directories, and route handling for PHP files. It is useful for users needing fine-grained control over PHP request handling or for performance tuning. Key elements include file matchers, redirection, try_files logic, and explicit invocation of the php and file_server directives.\nSOURCE: https://github.com/dunglas/frankenphp/blob/main/docs/config.md#_snippet_5\n\nLANGUAGE: caddyfile\nCODE:\n```\nroute {\n\t# Add trailing slash for directory requests\n\t@canonicalPath {\n\t\tfile {path}/index.php\n\t\tnot path */\n\t}\n\tredir @canonicalPath {path}/ 308\n\t# If the requested file does not exist, try index files\n\t@indexFiles file {\n\t\ttry_files {path} {path}/index.php index.php\n\t\tsplit_path .php\n\t}\n\trewrite @indexFiles {http.matchers.file.relative}\n\t# FrankenPHP!\n\t@phpFiles path *.php\n\tphp @phpFiles\n\tfile_server\n}\n```\n\n----------------------------------------\n\nTITLE: Building and Installing Xdebug PHP Extension in Static FrankenPHP Container (Console)\nDESCRIPTION: Details step-by-step Docker and shell commands for compiling the Xdebug extension within a glibc-based FrankenPHP container. The process involves building the container, entering it, cloning Xdebug, configuring with ZTS and custom php-config, compiling, and extracting binaries. Outputs: xdebug-zts.so and frankenphp binaries for manual integration.\nSOURCE: https://github.com/dunglas/frankenphp/blob/main/docs/static.md#_snippet_8\n\nLANGUAGE: console\nCODE:\n```\ndocker build -t gnu-ext -f static-builder-gnu.Dockerfile --build-arg FRANKENPHP_VERSION=1.0 .\ndocker create --name static-builder-gnu -it gnu-ext /bin/sh\ndocker start static-builder-gnu\ndocker exec -it static-builder-gnu /bin/sh\ncd /go/src/app/dist/static-php-cli/buildroot/bin\ngit clone https://github.com/xdebug/xdebug.git && cd xdebug\nsource scl_source enable devtoolset-10\n../phpize\n./configure --with-php-config=/go/src/app/dist/static-php-cli/buildroot/bin/php-config\nmake\nexit\ndocker cp static-builder-gnu:/go/src/app/dist/static-php-cli/buildroot/bin/xdebug/modules/xdebug.so xdebug-zts.so\ndocker cp static-builder-gnu:/go/src/app/dist/frankenphp-linux-$(uname -m) ./frankenphp\ndocker stop static-builder-gnu\ndocker rm static-builder-gnu\ndocker rmi gnu-ext\n```\n\n----------------------------------------\n\nTITLE: Stopping and Removing Load Test Docker Container - Shell\nDESCRIPTION: Stops and removes the Docker container named 'load-test-container', which is used for running load or performance tests. These commands are helpful in cases where the test container needs to be manually cleaned up due to premature termination or interruption. The commands require Docker to be installed and expect a container named 'load-test-container' to exist. Outputs are status messages from Docker regarding the stopped and removed containers, and there are no input arguments.\nSOURCE: https://github.com/dunglas/frankenphp/blob/main/testdata/performance/performance-testing.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ndocker stop load-test-container\ndocker rm load-test-container\n```\n\n----------------------------------------\n\nTITLE: Accessing Original and Request-Bound Superglobals in FrankenPHP Worker - PHP\nDESCRIPTION: This PHP snippet demonstrates capturing the original $_SERVER superglobal before processing any requests, then comparing it with the modified version inside a handler callback during a worker request. Dependencies include the FrankenPHP runtime and proper setup of worker execution context. Inputs are the superglobal arrays; output is their value dump for debugging or context inspection. Purpose is to allow access to both script and request-scoped server information in a worker.\nSOURCE: https://github.com/dunglas/frankenphp/blob/main/docs/worker.md#_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n<?php\n// Copy worker's $_SERVER superglobal before the first call to frankenphp_handle_request()\n$workerServer = $_SERVER;\n\n$handler = static function () use ($workerServer) {\n    var_dump($_SERVER); // Request-bound $_SERVER\n    var_dump($workerServer); // $_SERVER of the worker script\n};\n\n// ...\n```\n\n----------------------------------------\n\nTITLE: Executing PHP CLI Scripts with FrankenPHP (Standalone Binary)\nDESCRIPTION: Runs a PHP script using the command-line interface (CLI) provided by the FrankenPHP binary. Replace `/path/to/your/script.php` with the actual path to the PHP script you want to execute.\nSOURCE: https://github.com/dunglas/frankenphp/blob/main/README.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nfrankenphp php-cli /path/to/your/script.php\n```\n\n----------------------------------------\n\nTITLE: Including Extra Caddy Modules via XCADDY_ARGS in Build (Console)\nDESCRIPTION: Illustrates augmenting the FrankenPHP static build with extra Caddy modules by setting the XCADDY_ARGS Docker argument. Modules are specified using xcaddy's --with syntax, and all modules must be listed explicitly if XCADDY_ARGS is customized. Inputs: XCADDY_ARGS string listing additional modules; output: static FrankenPHP binary with custom Caddy plugins.\nSOURCE: https://github.com/dunglas/frankenphp/blob/main/docs/static.md#_snippet_5\n\nLANGUAGE: console\nCODE:\n```\ndocker buildx bake \\\n  --load \\\n  --set static-builder-musl.args.XCADDY_ARGS=\"--with github.com/darkweak/souin/plugins/caddy --with github.com/dunglas/caddy-cbrotli --with github.com/dunglas/mercure/caddy --with github.com/dunglas/vulcain/caddy\" \\\n  static-builder-musl\n```\n\n----------------------------------------\n\nTITLE: Adding Extra Libraries to PHP Extensions in Static Build (Console)\nDESCRIPTION: Demonstrates passing additional system libraries to the build for use by specified PHP extensions (e.g., for GD support). Uses multiple --set flags to inject library dependencies at build time. Inputs: PHP_EXTENSIONS and PHP_EXTENSION_LIBS; output: static binary with extended extension capabilities.\nSOURCE: https://github.com/dunglas/frankenphp/blob/main/docs/static.md#_snippet_4\n\nLANGUAGE: console\nCODE:\n```\ndocker buildx bake \\\n  --load \\\n  --set static-builder-musl.args.PHP_EXTENSIONS=gd \\\n  --set static-builder-musl.args.PHP_EXTENSION_LIBS=libjpeg,libwebp \\\n  static-builder-musl\n```\n\n----------------------------------------\n\nTITLE: Enabling HTTP/1 Full Duplex Mode - Caddyfile\nDESCRIPTION: This snippet enables full-duplex mode for HTTP/1.x in a Caddyfile by inserting the enable_full_duplex option under the servers global option. This configuration allows sending responses before reading the entire request body, needed for use cases like WebSockets or SSE. It should be used with caution as it may break old HTTP/1 clients.\nSOURCE: https://github.com/dunglas/frankenphp/blob/main/docs/config.md#_snippet_9\n\nLANGUAGE: caddyfile\nCODE:\n```\n{\n  servers {\n    enable_full_duplex\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting OpenSSL Certificate Environment Variables (Console)\nDESCRIPTION: This snippet configures environment variables so that OpenSSL can locate the CA certificate files when using static FrankenPHP binaries. Set SSL_CERT_FILE and SSL_CERT_DIR to the system's CA certificate locations to resolve TLS verification and connection issues. Used when static builds lack bundled CA certificates for secure communication.\nSOURCE: https://github.com/dunglas/frankenphp/blob/main/docs/known-issues.md#_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n# Set TLS certificates environment variables\nexport SSL_CERT_FILE=/etc/ssl/certs/ca-certificates.crt\nexport SSL_CERT_DIR=/etc/ssl/certs\n```\n\n----------------------------------------\n\nTITLE: Running FrankenPHP with Multiple Server Names Using Docker (Console)\nDESCRIPTION: This snippet demonstrates how to run FrankenPHP in a Docker container, exposing standard HTTP and HTTPS ports while specifying multiple server names. The SERVER_NAME environment variable includes both 127.0.0.1 and a dynamically determined container IP, allowing TLS certificate generation for both addresses. Users must replace the example IP with the actual assigned IP address for the container.\nSOURCE: https://github.com/dunglas/frankenphp/blob/main/docs/known-issues.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\ndocker run \\\n    -e SERVER_NAME=\\\"127.0.0.1, 172.17.0.3\\\" \\\n    -v $PWD:/app/public \\\n    -p 80:80 -p 443:443 -p 443:443/udp \\\n    dunglas/frankenphp\n```\n\n----------------------------------------\n\nTITLE: Setting GitHub Personal Access Token for Docker Builds (Console)\nDESCRIPTION: Sets a GITHUB_TOKEN environment variable to bypass GitHub API rate-limits when building FrankenPHP with Docker. This is especially useful for CI/CD or frequent builds involving GitHub-hosted components. Inputs: GITHUB_TOKEN value; output: successful Docker build invocation.\nSOURCE: https://github.com/dunglas/frankenphp/blob/main/docs/static.md#_snippet_6\n\nLANGUAGE: console\nCODE:\n```\nGITHUB_TOKEN=\"xxx\" docker --load buildx bake static-builder-musl\n# ...\n```\n\n----------------------------------------\n\nTITLE: Setting PHP Binary and Running Composer (Console)\nDESCRIPTION: This snippet sets the PHP_BINARY environment variable to point to the custom shell script and then runs composer install. It ensures Composer uses the modified wrapper script instead of the default PHP binary. Intended to work in conjunction with the provided Bash script workaround for FrankenPHP compatibility.\nSOURCE: https://github.com/dunglas/frankenphp/blob/main/docs/known-issues.md#_snippet_4\n\nLANGUAGE: console\nCODE:\n```\nexport PHP_BINARY=/usr/local/bin/php\ncomposer install\n```\n\n----------------------------------------\n\nTITLE: Configuring PHP for Linux - Console\nDESCRIPTION: This snippet shows the required flags for running the PHP configure script on Linux for a build compatible with FrankenPHP. It uses shell line continuation for readability. Prerequisites are a Bash-like shell and an extracted PHP source tree. Input parameters are predefined flags; the result is a configuration set up for a dynamic, embeddable PHP build with ZTS and max execution timers enabled.\nSOURCE: https://github.com/dunglas/frankenphp/blob/main/docs/compile.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n./configure \\\n    --enable-embed \\\n    --enable-zts \\\n    --disable-zend-signals \\\n    --enable-zend-max-execution-timers\n```\n\n----------------------------------------\n\nTITLE: Configuring PHP for Mac with Static Embedding - Console\nDESCRIPTION: This snippet configures the PHP build on macOS to enable static embedding and disables certain features not needed for FrankenPHP. It also specifies the path to libiconv. Similar to the Linux configure snippet, but with additional options to enable static linking and no shared libraries. The snippet should be run from the PHP source directory.\nSOURCE: https://github.com/dunglas/frankenphp/blob/main/docs/compile.md#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n./configure \\\n    --enable-embed=static \\\n    --enable-zts \\\n    --disable-zend-signals \\\n    --disable-opcache-jit \\\n    --enable-static \\\n    --enable-shared=no \\\n    --with-iconv=/opt/homebrew/opt/libiconv/\n```\n\n----------------------------------------\n\nTITLE: Compiling and Installing PHP - Console\nDESCRIPTION: This snippet compiles PHP sources using all available CPU cores and installs the compiled binaries system-wide. It uses GNU Make and expects the PHP source to be properly configured beforehand. The two commands should be run sequentially for a successful installation.\nSOURCE: https://github.com/dunglas/frankenphp/blob/main/docs/compile.md#_snippet_4\n\nLANGUAGE: console\nCODE:\n```\nmake -j\"$(getconf _NPROCESSORS_ONLN)\"\nsudo make install\n```\n\n----------------------------------------\n\nTITLE: Adjusting Stack Size for musl libc and Symfony - Shell\nDESCRIPTION: This snippet modifies the XCADDY_GO_BUILD_FLAGS environment variable to increase the stack size when building on platforms using musl libc (e.g., Alpine Linux) with Symfony. It addresses a specific PHP fatal error caused by stack overflows. The variable should be adapted if a different stack size is needed.\nSOURCE: https://github.com/dunglas/frankenphp/blob/main/docs/compile.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nXCADDY_GO_BUILD_FLAGS=$'-ldflags \"-w -s -extldflags \\'-Wl,-z,stack-size=0x80000\\'\"'\n```\n\n----------------------------------------\n\nTITLE: Sample TLS Error Output Message (Text)\nDESCRIPTION: This text snippet shows a typical error message encountered when TLS/SSL certificate verification fails with static binaries lacking CA certificates. It helps identify missing CA certificate issues during troubleshooting and is referenced in the documentation as a sign that OpenSSL cannot find required system certificates.\nSOURCE: https://github.com/dunglas/frankenphp/blob/main/docs/known-issues.md#_snippet_6\n\nLANGUAGE: text\nCODE:\n```\nUnable to connect with STARTTLS: stream_socket_enable_crypto(): SSL operation failed with code 5. OpenSSL Error messages:\nerror:80000002:system library::No such file or directory\nerror:80000002:system library::No such file or directory\nerror:80000002:system library::No such file or directory\nerror:0A000086:SSL routines::certificate verify failed\n```"
  }
]