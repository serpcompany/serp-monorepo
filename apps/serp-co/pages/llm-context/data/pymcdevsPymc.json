[
  {
    "owner": "pymc-devs",
    "repo": "pymc",
    "content": "TITLE: Implementing Bayesian Linear Regression for Plant Growth Modeling in PyMC\nDESCRIPTION: This example demonstrates a complete Bayesian workflow using PyMC to model plant growth based on environmental factors (sunlight, water, soil nitrogen). It includes data generation, model definition, parameter inference, and posterior prediction.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/README.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport pymc as pm\n\n# Taking draws from a normal distribution\nseed = 42\nx_dist = pm.Normal.dist(shape=(100, 3))\nx_data = pm.draw(x_dist, random_seed=seed)\n\n# Independent Variables:\n# Sunlight Hours: Number of hours the plant is exposed to sunlight daily.\n# Water Amount: Daily water amount given to the plant (in milliliters).\n# Soil Nitrogen Content: Percentage of nitrogen content in the soil.\n\n\n# Dependent Variable:\n# Plant Growth (y): Measured as the increase in plant height (in centimeters) over a certain period.\n\n\n# Define coordinate values for all dimensions of the data\ncoords={\n \"trial\": range(100),\n \"features\": [\"sunlight hours\", \"water amount\", \"soil nitrogen\"],\n}\n\n# Define generative model\nwith pm.Model(coords=coords) as generative_model:\n   x = pm.Data(\"x\", x_data, dims=[\"trial\", \"features\"])\n\n   # Model parameters\n   betas = pm.Normal(\"betas\", dims=\"features\")\n   sigma = pm.HalfNormal(\"sigma\")\n\n   # Linear model\n   mu = x @ betas\n\n   # Likelihood\n   # Assuming we measure deviation of each plant from baseline\n   plant_growth = pm.Normal(\"plant growth\", mu, sigma, dims=\"trial\")\n\n\n# Generating data from model by fixing parameters\nfixed_parameters = {\n \"betas\": [5, 20, 2],\n \"sigma\": 0.5,\n}\nwith pm.do(generative_model, fixed_parameters) as synthetic_model:\n   idata = pm.sample_prior_predictive(random_seed=seed) # Sample from prior predictive distribution.\n   synthetic_y = idata.prior[\"plant growth\"].sel(draw=0, chain=0)\n\n\n# Infer parameters conditioned on observed data\nwith pm.observe(generative_model, {\"plant growth\": synthetic_y}) as inference_model:\n   idata = pm.sample(random_seed=seed)\n\n   summary = pm.stats.summary(idata, var_names=[\"betas\", \"sigma\"])\n   print(summary)\n```\n\n----------------------------------------\n\nTITLE: Using Shape for Efficient Batched Draws in PyMC\nDESCRIPTION: Show how to use the shape argument to create efficient batched draws from a Normal distribution.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/docs/source/learn/core_notebooks/dimensionality.ipynb#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nnormal_dists = pm.Normal.dist(shape=(3,))\ndraw(normal_dists)\n\nnormal_dists = pm.Normal.dist(shape=(4, 3))\ndraw(normal_dists)\n```\n\n----------------------------------------\n\nTITLE: Computing Element-wise Log Probability in PyMC\nDESCRIPTION: Demonstrates how to compute the element-wise log probability of a PyMC model for specific values. This snippet extracts value variables and evaluates the log probability graph.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/docs/source/learn/core_notebooks/pymc_pytensor.ipynb#2025-04-21_snippet_40\n\nLANGUAGE: python\nCODE:\n```\nmu_value = model_2.rvs_to_values[mu]\nsigma_log_value = model_2.rvs_to_values[sigma]\nx_value = model_2.rvs_to_values[x]\nlogp_graph = pt.stack(model_2.logp(sum=False))\nlogp_graph.eval({mu_value: 0, sigma_log_value: -10, x_value: 0})\n```\n\n----------------------------------------\n\nTITLE: Building a bioassay experiment model in PyMC\nDESCRIPTION: Definition of a bioassay experiment model using PyMC's context manager. The model includes data preparation, prior distributions for latent variables (alpha and beta), a linear combination using the inverse logit function, and a binomial likelihood function for observed deaths.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/docs/source/learn/usage_overview.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# Set style\naz.style.use(\"arviz-darkgrid\")\n\n# Data\nn = np.ones(4)*5\ny = np.array([0, 1, 3, 5])\ndose = np.array([-.86,-.3,-.05,.73])\n\nwith pm.Model() as bioassay_model:\n\n    # Prior distributions for latent variables\n    alpha = pm.Normal('alpha', 0, sigma=10)\n    beta = pm.Normal('beta', 0, sigma=1)\n\n    # Linear combination of parameters\n    theta = pm.invlogit(alpha + beta * dose)\n\n    # Model likelihood\n    deaths = pm.Binomial('deaths', n=n, p=theta, observed=y)\n```\n\n----------------------------------------\n\nTITLE: Sampling from a PyMC model and visualizing results\nDESCRIPTION: Demonstrates sampling from the posterior distribution of a PyMC model using the NUTS algorithm. The code draws 1000 samples with 2000 tuning steps across 2 cores, and then creates a forest plot of the 'alpha' and 'beta' parameters with convergence diagnostics.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/docs/source/learn/usage_overview.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nwith bioassay_model:\n\n    # Draw samples\n    idata = pm.sample(1000, tune=2000, cores=2)\n    # Plot two parameters\n    az.plot_forest(idata, var_names=['alpha', 'beta'], r_hat=True)\n```\n\n----------------------------------------\n\nTITLE: Creating Conditional Distributions for Gaussian Processes in PyMC\nDESCRIPTION: Shows how to create conditional distributions for both individual (f1, f2) and combined (f) Gaussian processes. Individual GPs require additional arguments like X, y, noise, and gp to be passed through the 'given' parameter, while the combined GP conditional can be created directly.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/docs/source/guides/Gaussian_Processes.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nwith model:\n    # conditional distributions of f1 and f2\n    f1_star = gp1.conditional(\"f1_star\", X_star,\n                              given={\"X\": X, \"y\": y, \"noise\": noise, \"gp\": gp})\n    f2_star = gp2.conditional(\"f2_star\", X_star,\n                              given={\"X\": X, \"y\": y, \"noise\": noise, \"gp\": gp})\n\n    # conditional of f1 + f2, `given` not required\n    f_star = gp.conditional(\"f_star\", X_star)\n```\n\n----------------------------------------\n\nTITLE: Using DrawValuesContext for Custom Distributions\nDESCRIPTION: Custom distributions that call draw_values multiple times in their random method or invoke many calls to other distribution's random methods must use the _DrawValuesContext context manager to maintain proper conditional relationships between parameters.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/RELEASE-NOTES.md#2025-04-21_snippet_21\n\nLANGUAGE: Python\nCODE:\n```\nfrom pymc3.distributions.distribution import _DrawValuesContext\n\nwith _DrawValuesContext() as context:\n    # Multiple calls to draw_values or other distribution's random methods\n    ...\n```\n\n----------------------------------------\n\nTITLE: Basic PyMC Model Definition and MCMC Sampling Example\nDESCRIPTION: A simple example demonstrating how to define a Bayesian model in PyMC using a context manager, create Beta distributions, and sample from the posterior distribution.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/ARCHITECTURE.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nwith pm.Model() as model:\n  theta = pm.Beta(\"theta\", alpha=1, beta=2)\n  p = pm.Beta(\"n\", p=theta, n=2, observed=[1,2])\n  inf_data = pm.sample()\n\n\n```\n\n----------------------------------------\n\nTITLE: Compiling Log Probability Function in PyMC\nDESCRIPTION: Shows how to compile a PyTensor function for the model's log probability using compile_logp. This creates a callable function that can be used for efficient probability computations.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/docs/source/learn/core_notebooks/pymc_pytensor.ipynb#2025-04-21_snippet_38\n\nLANGUAGE: python\nCODE:\n```\nlogp_function = model.compile_logp(sum=False)\n```\n\n----------------------------------------\n\nTITLE: Fitting an Additive Gaussian Process Model in PyMC\nDESCRIPTION: This code sketch demonstrates how to define and fit an additive Gaussian Process model in PyMC. It shows the creation of individual GPs, combining them, and using the marginal likelihood for inference.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/docs/source/guides/Gaussian_Processes.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nwith pm.Model() as model:\n    gp1 = pm.gp.Marginal(mean_func1, cov_func1)\n    gp2 = pm.gp.Marginal(mean_func2, cov_func2)\n\n    # gp represents f1 + f2.\n    gp = gp1 + gp2\n\n    f = gp.marginal_likelihood(\"f\", X, y, noise)\n\n    idata = pm.sample(1000)\n```\n\n----------------------------------------\n\nTITLE: LogP Function Implementation\nDESCRIPTION: Shows the basic structure of a logp function implementation in PyMC distributions.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/docs/source/contributing/developer_guide.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ndef logp(self, value):\n    # GET PARAMETERS\n    param1, param2, ... = self.params1, self.params2, ...\n    # EVALUATE LOG-LIKELIHOOD FUNCTION, all inputs are (or array that could be convert to) PyTensor tensor\n    total_log_prob = f(param1, param2, ..., value)\n    return total_log_prob\n```\n\n----------------------------------------\n\nTITLE: Using logp and draw Functions with PyMC Distributions\nDESCRIPTION: Shows how to use the key distribution functions in PyMC: logp for calculating log-probability and draw for generating random samples from a distribution.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/docs/source/guides/Probability_Distributions.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nwith pm.Model():\n    x = pm.Normal('x', mu=0, sigma=1)\n\n# Calculate log-probability\nlog_prob = pm.logp(x, 0.5)\n\n# Generate samples\nsamples = pm.draw(x, size=100)\n```\n\n----------------------------------------\n\nTITLE: Testing Custom PyMC Distribution\nDESCRIPTION: This code snippet demonstrates how to test a new custom distribution in PyMC. It includes a quick check for basic functionality and shows how to use the support_point, logp, and logcdf methods.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/docs/source/contributing/implementing_distribution.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport pymc as pm\nfrom pymc.distributions.distribution import support_point\n\n# pm.blah = pm.Normal in this example\nblah = pm.blah.dist(mu=0, sigma=1)\n\n# Test that the returned blah_op is still working fine\npm.draw(blah, random_seed=1)\n# array(-1.01397228)\n\n# Test the support_point method\nsupport_point(blah).eval()\n# array(0.)\n\n# Test the logp method\npm.logp(blah, [-0.5, 1.5]).eval()\n# array([-1.04393853, -2.04393853])\n\n# Test the logcdf method\npm.logcdf(blah, [-0.5, 1.5]).eval()\n# array([-1.17591177, -0.06914345])\n```\n\n----------------------------------------\n\nTITLE: Combining Gaussian Processes in PyMC\nDESCRIPTION: This snippet shows how to create additive Gaussian Processes in PyMC by combining multiple GP objects. It demonstrates the addition of two Marginal GP objects.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/docs/source/guides/Gaussian_Processes.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ngp1 = pm.gp.Marginal(mean_func1, cov_func1)\ngp2 = pm.gp.Marginal(mean_func2, cov_func2)\ngp3 = gp1 + gp2\n```\n\n----------------------------------------\n\nTITLE: Using MLDA Multi-level Sampler\nDESCRIPTION: Example of using the new MLDA stepper for hierarchical sampling with multiple approximate posteriors. Provides improved efficiency for high-dimensional problems.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/RELEASE-NOTES.md#2025-04-21_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nimport pymc as pm\nwith pm.Model() as model:\n    step = pm.MLDA()\n```\n\n----------------------------------------\n\nTITLE: Comparing PyMC Log Probability to SciPy for Complex Model\nDESCRIPTION: Compares the log probability computation in PyMC with SciPy's implementation for a more complex model. This demonstrates how to break down the model's components and compute probabilities separately.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/docs/source/learn/core_notebooks/pymc_pytensor.ipynb#2025-04-21_snippet_41\n\nLANGUAGE: python\nCODE:\n```\nprint(\n    f\"\"\"\nmu_value -> {scipy.stats.norm.logpdf(x=0, loc=0, scale=2)}\nsigma_log_value -> {-10 + scipy.stats.halfnorm.logpdf(x=np.exp(-10), loc=0, scale=3)}\nx_value -> {scipy.stats.norm.logpdf(x=0, loc=0, scale=np.exp(-10))}\n\"\"\"\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Distribution with CustomDist in PyMC\nDESCRIPTION: Demonstrates how to define a custom distribution by providing a logp function that calculates the log-probability. This example shows a simple quadratic log-probability function.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/docs/source/guides/Probability_Distributions.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef custom_logp(value, mu):\n    return -0.5 * (value - mu)**2\n\ncustom_dist = pm.CustomDist('custom', dist=custom_logp, mu=0)\n```\n\n----------------------------------------\n\nTITLE: Combining Covariance Functions in PyMC\nDESCRIPTION: These snippets show how to combine covariance functions in PyMC using algebraic operations. They demonstrate summing, multiplying, and scaling covariance functions to create new ones.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/docs/source/guides/Gaussian_Processes.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ncov_func = pm.gp.cov.ExpQuad(...) + pm.gp.cov.ExpQuad(...)\n```\n\nLANGUAGE: python\nCODE:\n```\ncov_func = pm.gp.cov.ExpQuad(...) * pm.gp.cov.Periodic(...)\n```\n\nLANGUAGE: python\nCODE:\n```\ncov_func = eta**2 * pm.gp.cov.Matern32(...)\n```\n\n----------------------------------------\n\nTITLE: Gaussian Process API Changes in PyMC\nDESCRIPTION: The Gaussian Process module has undergone significant updates including parameter renaming, explicit keyword arguments, and implementation changes to improve numerical stability.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/RELEASE-NOTES.md#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n# Required explicit keyword arguments:\ngp.Latent(name, cov_func=my_cov, mean_func=my_mean)\ngp.Marginal(name, cov_func=my_cov, mean_func=my_mean)\n\n# shape parameter renamed to size\ngp.prior(name, size=10, cov_func=my_cov, mean_func=my_mean)\n\n# Exposed stabilization parameter\ngp.util.stabilize(matrix, jitter=1e-6)\n```\n\n----------------------------------------\n\nTITLE: Defining Complex PyMC Model\nDESCRIPTION: Creates a more complex PyMC model with multiple random variables. This model includes normal and half-normal distributions, demonstrating how to construct hierarchical models in PyMC.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/docs/source/learn/core_notebooks/pymc_pytensor.ipynb#2025-04-21_snippet_39\n\nLANGUAGE: python\nCODE:\n```\nwith pm.Model() as model_2:\n    mu = pm.Normal(name=\"mu\", mu=0, sigma=2)\n    sigma = pm.HalfNormal(name=\"sigma\", sigma=3)\n    x = pm.Normal(name=\"x\", mu=mu, sigma=sigma)\n```\n\n----------------------------------------\n\nTITLE: Creating Conditional Distribution for Gaussian Process in PyMC\nDESCRIPTION: This snippet demonstrates how to create a conditional distribution for a Gaussian Process at new input points in PyMC using the conditional method.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/docs/source/guides/Gaussian_Processes.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nf_star = gp.conditional(\"f_star\", X_star)\n```\n\n----------------------------------------\n\nTITLE: Comprehensive Example of Dimensionality Flavors in PyMC\nDESCRIPTION: This code provides a comprehensive example of different dimensionality approaches in PyMC, including vector, implicit matrix, and explicit matrix, using a Multivariate Normal distribution.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/docs/source/learn/core_notebooks/dimensionality.ipynb#2025-04-21_snippet_27\n\nLANGUAGE: python\nCODE:\n```\ncoords = {\n    \"batch\": [0, 1, 2, 3],\n    \"support\": [\"A\", \"B\", \"C\"],\n}\nwith pm.Model(coords=coords) as model:\n    pm.MvNormal(\"vector\", mu=[0, 0, 0], cov=np.eye(3), dims=(\"support\",))\n    pm.MvNormal(\"matrix (implicit)\", mu=np.zeros((4, 3)), cov=np.eye(3), dims=(\"batch\", \"support\"))\n    pm.MvNormal(\n        \"matrix (explicit)\", mu=[0, 0, 0], cov=np.eye(3), shape=(4, 3), dims=(\"batch\", \"support\")\n    )\n\npm.model_to_graphviz(model)\n```\n\n----------------------------------------\n\nTITLE: Fitting Additive Gaussian Process Model in PyMC\nDESCRIPTION: Sets up and fits an additive Gaussian Process model using PyMC, including defining individual GPs, combining them, and sampling from the posterior.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/docs/source/learn/core_notebooks/Gaussian_Processes.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nwith pm.Model() as model:\n    gp1 = pm.gp.Marginal(mean_func1, cov_func1)\n    gp2 = pm.gp.Marginal(mean_func2, cov_func2)\n\n    # gp represents f1 + f2.\n    gp = gp1 + gp2\n\n    f = gp.marginal_likelihood(\"f\", X, y, sigma)\n\n    idata = pm.sample(1000)\n```\n\n----------------------------------------\n\nTITLE: Initializing Exponentiated Quadratic Covariance Function in PyMC\nDESCRIPTION: This snippet demonstrates how to create an exponentiated quadratic covariance function that operates on specific dimensions of the input matrix in PyMC. It shows how to set lengthscales, input dimensions, and active dimensions for the covariance function.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/docs/source/guides/Gaussian_Processes.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nls = [2, 5] # the lengthscales\ncov_func = pm.gp.cov.ExpQuad(input_dim=3, ls=ls, active_dims=[1, 2])\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Implicit Batch Dimensions in PyMC Multinomial Distribution\nDESCRIPTION: This snippet shows how to use implicit batch dimensions with PyMC's Multinomial distribution, allowing different parameters for each batched dimension.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/docs/source/learn/core_notebooks/dimensionality.ipynb#2025-04-21_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nmultinomial_dist = pm.Multinomial.dist(n=[5, 10], p=[0.1, 0.3, 0.6])\ndraw(multinomial_dist)\n```\n\n----------------------------------------\n\nTITLE: Extracting Joint Probability in PyMC Model\nDESCRIPTION: Demonstrates how to extract the joint probability of all variables in a PyMC model using the logp method. This creates a PyTensor graph representing the model's log probability.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/docs/source/learn/core_notebooks/pymc_pytensor.ipynb#2025-04-21_snippet_37\n\nLANGUAGE: python\nCODE:\n```\npytensor.dprint(model.logp(sum=False))\n```\n\n----------------------------------------\n\nTITLE: Traversing a PyTensor Computational Graph\nDESCRIPTION: Uses a breadth-first search algorithm to traverse and print the components of a PyTensor computational graph, showing operations and their inputs.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/docs/source/learn/core_notebooks/pymc_pytensor.ipynb#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n# start from the top\nstack = [w]\n\nwhile stack:\n    print(\"---\")\n    var = stack.pop(0)\n    print(f\"Checking variable {var} of type {var.type}\")\n    # check variable is not a root variable\n    if var.owner is not None:\n        print(f\" > Op is {var.owner.op}\")\n        # loop over the inputs\n        for i, input in enumerate(var.owner.inputs):\n            print(f\" > Input {i} is {input}\")\n            stack.append(input)\n    else:\n        print(f\" > {var} is a root variable\")\n```\n\n----------------------------------------\n\nTITLE: Implementing Hierarchical Model in PyMC\nDESCRIPTION: Creates and samples from a hierarchical model with random effects using non-centered parameterization.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/docs/source/learn/core_notebooks/model_comparison.ipynb#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nwith pm.Model() as hierarchical:\n    eta = pm.Normal(\"eta\", 0, 1, shape=J)\n    # Hierarchical mean and SD\n    mu = pm.Normal(\"mu\", 0, sigma=10)\n    tau = pm.HalfNormal(\"tau\", 10)\n\n    # Non-centered parameterization of random effect\n    theta = pm.Deterministic(\"theta\", mu + tau * eta)\n\n    obs = pm.Normal(\"obs\", theta, sigma=sigma, observed=y)\n\n    trace_h = pm.sample(2000, target_accept=0.9)\n```\n\n----------------------------------------\n\nTITLE: Implementing Pooled Model in PyMC\nDESCRIPTION: Creates and samples from a pooled model assuming a single fixed effect across all schools.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/docs/source/learn/core_notebooks/model_comparison.ipynb#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nwith pm.Model() as pooled:\n    # Latent pooled effect size\n    mu = pm.Normal(\"mu\", 0, sigma=1e6)\n\n    obs = pm.Normal(\"obs\", mu, sigma=sigma, observed=y)\n\n    trace_p = pm.sample(2000)\n```\n\n----------------------------------------\n\nTITLE: Initializing Bernoulli Distribution with Logit Probability in PyMC3\nDESCRIPTION: Add logit_p keyword to pm.Bernoulli to specify the logit of the success probability. This is faster and more stable than using p=tt.nnet.sigmoid(logit_p).\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/RELEASE-NOTES.md#2025-04-21_snippet_22\n\nLANGUAGE: Python\nCODE:\n```\npm.Bernoulli(logit_p=logit_p)\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Positive Continuous Distribution in PyMC\nDESCRIPTION: This code snippet demonstrates how to create a custom positive continuous distribution in PyMC by subclassing PositiveContinuous. It implements required methods such as dist(), support_point(), logp(), and placeholders for logcdf() and icdf().\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/docs/source/contributing/implementing_distribution.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# Subclassing `PositiveContinuous` will dispatch a default `log` transformation\nclass Blah(PositiveContinuous):\n    # This will be used by the metaclass `DistributionMeta` to dispatch the\n    # class `logp` and `logcdf` methods to the `blah` `Op` defined in the last line of the code above.\n    rv_op = blah\n\n    # dist() is responsible for returning an instance of the rv_op.\n    # We pass the standard parametrizations to super().dist\n    @classmethod\n    def dist(cls, param1, param2=None, alt_param2=None, **kwargs):\n        param1 = pt.as_tensor_variable(param1)\n        if param2 is not None and alt_param2 is not None:\n            raise ValueError(\"Only one of param2 and alt_param2 is allowed.\")\n        if alt_param2 is not None:\n            param2 = 1 / alt_param2\n        param2 = pt.as_tensor_variable(param2)\n\n        # The first value-only argument should be a list of the parameters that\n        # the rv_op needs in order to be instantiated\n        return super().dist([param1, param2], **kwargs)\n\n    # support_point returns a symbolic expression for the stable point from which to start sampling\n    # the variable, given the implicit `rv`, `size` and `param1` ... `paramN`.\n    # This is typically a \"representative\" point such as the the mean or mode.\n    def support_point(rv, size, param1, param2):\n        support_point, _ = pt.broadcast_arrays(param1, param2)\n        if not rv_size_is_none(size):\n            support_point = pt.full(size, support_point)\n        return support_point\n\n    # Logp returns a symbolic expression for the elementwise log-pdf or log-pmf evaluation\n    # of the variable given the `value` of the variable and the parameters `param1` ... `paramN`.\n    def logp(value, param1, param2):\n        logp_expression = value * (param1 + pt.log(param2))\n\n        # A switch is often used to enforce the distribution support domain\n        bounded_logp_expression = pt.switch(\n            pt.gt(value >= 0),\n            logp_expression,\n            -np.inf,\n        )\n\n        # We use `check_parameters` for parameter validation. After the default expression,\n        # multiple comma-separated symbolic conditions can be added.\n        # Whenever a bound is invalidated, the returned expression raises an error\n        # with the message defined in the optional `msg` keyword argument.\n        return check_parameters(\n            bounded_logp_expression,\n            param2 >= 0,\n            msg=\"param2 >= 0\",\n        )\n\n    # logcdf works the same way as logp. For bounded variables, it is expected to return\n    # `-inf` for values below the domain start and `0` for values above the domain end.\n    def logcdf(value, param1, param2):\n        ...\n\n    def icdf(value, param1, param2):\n        ...\n```\n\n----------------------------------------\n\nTITLE: Implementing KL Divergence Operator in PyMC\nDESCRIPTION: Shows the core application method of the KL divergence operator used in Variational Inference. Calculates the objective function using normalized log probabilities.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/docs/source/contributing/developer_guide.md#2025-04-21_snippet_19\n\nLANGUAGE: python\nCODE:\n```\ndef apply(self, f):\n    return -self.datalogp_norm + self.beta * (self.logq_norm - self.varlogp_norm)\n```\n\n----------------------------------------\n\nTITLE: Posterior Predictive Sampling in PyMC for New Plant Growth Data\nDESCRIPTION: This code demonstrates how to use a previously trained Bayesian model to make predictions on new data points. It shows how to set up new coordinates, update the data, and generate posterior predictive samples.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/README.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# Simulate new data conditioned on inferred parameters\nnew_x_data = pm.draw(\n   pm.Normal.dist(shape=(3, 3)),\n   random_seed=seed,\n)\nnew_coords = coords | {\"trial\": [0, 1, 2]}\n\nwith inference_model:\n   pm.set_data({\"x\": new_x_data}, coords=new_coords)\n   pm.sample_posterior_predictive(\n      idata,\n      predictions=True,\n      extend_inferencedata=True,\n      random_seed=seed,\n   )\n\npm.stats.summary(idata.predictions, kind=\"stats\")\n```\n\n----------------------------------------\n\nTITLE: Creating and Drawing from a Multivariate Normal Distribution in PyMC\nDESCRIPTION: Define a Multivariate Normal distribution and take a random draw to demonstrate its vector nature.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/docs/source/learn/core_notebooks/dimensionality.ipynb#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nmvnormal_dist = pm.MvNormal.dist(mu=np.ones(3), cov=np.eye(3))\nmvnormal_draw = draw(mvnormal_dist)\nmvnormal_draw, mvnormal_draw.ndim\n```\n\n----------------------------------------\n\nTITLE: Evaluating Log Probability in PyMC\nDESCRIPTION: Shows how to evaluate the log probability of a normal distribution using PyMC's eval method. This snippet computes the log probability for specific input values.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/docs/source/learn/core_notebooks/pymc_pytensor.ipynb#2025-04-21_snippet_35\n\nLANGUAGE: python\nCODE:\n```\nz_logp.eval({z_value: [0, 0]})\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Invalid Combination of Implicit and Explicit Dimensions\nDESCRIPTION: This code shows an invalid case where implicit batch dimensions cannot be broadcasted to the explicit batch dimensions, resulting in a ValueError.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/docs/source/learn/core_notebooks/dimensionality.ipynb#2025-04-21_snippet_21\n\nLANGUAGE: python\nCODE:\n```\ntry:\n    draw(pm.Multinomial.dist(n=[5, 10], p=[0.1, 0.3, 0.6], shape=(2, 4, 3)))\nexcept ValueError as error:\n    print(error)\n```\n\n----------------------------------------\n\nTITLE: Building Conditional LogP with Shared Variables\nDESCRIPTION: Shows how to create a conditional log probability function using PyTensor shared variables for fixed parameters.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/docs/source/contributing/developer_guide.md#2025-04-21_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nshared = pytensor.shared(inputlist[1])\nfunc2 = pytensor.function([m.free_RVs[0]], m.logpt, givens=[(m.free_RVs[1], shared)])\nprint(func2(inputlist[0]))\n\nlogpt_grad2 = pytensor.grad(m.logpt, m.free_RVs[0])\nfunc_d2 = pytensor.function([m.free_RVs[0]], logpt_grad2, givens=[(m.free_RVs[1], shared)])\nprint(func_d2(inputlist[0]))\n```\n\n----------------------------------------\n\nTITLE: Combining 'dims' with 'coords' for Enhanced Dimension Labeling\nDESCRIPTION: This snippet shows how to combine 'dims' with 'coords' in a PyMC model to provide unique labels for each dimension entry, further improving model readability.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/docs/source/learn/core_notebooks/dimensionality.ipynb#2025-04-21_snippet_26\n\nLANGUAGE: python\nCODE:\n```\ncoords = {\"year\": [2020, 2021, 2022]}\nwith pm.Model(coords=coords) as model:\n    pm.Normal(\"profit\", dims=\"year\")\n\npm.model_to_graphviz(model)\n```\n\n----------------------------------------\n\nTITLE: Forward Sampling Example in PyMC\nDESCRIPTION: Demonstrates forward sampling with shape handling in PyMC using a hierarchical normal model. Shows how to generate prior predictive samples with proper broadcasting.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/docs/source/contributing/developer_guide.md#2025-04-21_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nwith pm.Model() as m:\n    mu = pm.Normal('mu', 0., 1., shape=(5, 1))\n    sigma = pm.HalfNormal('sigma', 5., shape=(1, 10))\n    pm.Normal('x', mu=mu, sigma=sigma, observed=np.random.randn(2, 5, 10))\n    trace = pm.sample_prior_predictive(100)\n\ntrace['x'].shape # ==> should be (100, 2, 5, 10)\n\npm.Normal.dist(mu=np.zeros(2), sigma=1).random(size=(10, 4))\n```\n\n----------------------------------------\n\nTITLE: Correctly Sampling from PyMC Model Variable\nDESCRIPTION: Shows the proper way to generate different random samples from a PyMC model variable using pm.draw().\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/docs/source/learn/core_notebooks/pymc_pytensor.ipynb#2025-04-21_snippet_32\n\nLANGUAGE: python\nCODE:\n```\nfor i in range(10):\n    print(f\"Sample {i}: {pm.draw(z)}\")\n```\n\n----------------------------------------\n\nTITLE: DensityDist Interface Changes in PyMC\nDESCRIPTION: The DensityDist class has changed its signature for accepting logp functions and distribution parameters. It no longer accepts logp as its first position argument.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/RELEASE-NOTES.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n# New approach:\npm.DensityDist(name, logp=my_logp_function, ...)\npm.DensityDist(name, param1, param2)  # Pass parameters directly\n\n# Deprecated approach:\n# pm.DensityDist(name, my_logp_function)\n# pm.DensityDist(name, observed={'param1': value1, 'param2': value2})\n```\n\n----------------------------------------\n\nTITLE: Correctly Sampling from PyMC Distribution\nDESCRIPTION: Shows the proper way to generate random samples from a PyMC distribution using pm.draw() and visualizes the results with a histogram.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/docs/source/learn/core_notebooks/pymc_pytensor.ipynb#2025-04-21_snippet_27\n\nLANGUAGE: python\nCODE:\n```\nfig, ax = plt.subplots(figsize=(8, 6))\nax.hist(pm.draw(x, draws=1_000), color=\"C1\", bins=15)\nax.set(title=\"Samples from a normal distribution using pymc\", ylabel=\"count\");\n```\n\n----------------------------------------\n\nTITLE: Model Bijection and Variable Mapping in PyMC\nDESCRIPTION: Shows how PyMC models handle mapping between dictionaries and arrays for model variables. Demonstrates initialization and transformation of model parameters.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/docs/source/contributing/developer_guide.md#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nwith pm.Model() as m:\n    z = pm.Normal('z', 0., 10., shape=10)\n    x = pm.Normal('x', z, 1., shape=10)\n\nprint(m.initial_point)\nprint(m.dict_to_array(m.initial_point))  # ==> m.bijection.map(m.initial_point)\nprint(m.bijection.rmap(np.arange(20)))\n```\n\n----------------------------------------\n\nTITLE: Bayesian Counterfactual Analysis in PyMC\nDESCRIPTION: This code demonstrates a counterfactual analysis by simulating posterior predictions under a specific scenario where the first beta parameter is set to zero. It shows how to use the do-operator for causal inference.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/README.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# Simulate new data, under a scenario where the first beta is zero\nwith pm.do(\n inference_model,\n {inference_model[\"betas\"]: inference_model[\"betas\"] * [0, 1, 1]},\n) as plant_growth_model:\n   new_predictions = pm.sample_posterior_predictive(\n      idata,\n      predictions=True,\n      random_seed=seed,\n   )\n\npm.stats.summary(new_predictions, kind=\"stats\")\n```\n\n----------------------------------------\n\nTITLE: Computing Log Probability with PyMC\nDESCRIPTION: Demonstrates how to use pymc.logp to compute the log probability of a random variable. It creates a PyTensor graph representing the log probability of a normal random variable evaluated at a specific value.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/docs/source/learn/core_notebooks/pymc_pytensor.ipynb#2025-04-21_snippet_34\n\nLANGUAGE: python\nCODE:\n```\nz_value = pt.vector(name=\"z\")\nz_logp = pm.logp(rv=z, value=z_value)\n```\n\n----------------------------------------\n\nTITLE: Creating a Normal Distribution within a PyMC Model\nDESCRIPTION: Demonstrates how to create a multivariate normal distribution within a PyMC model context and print its computational graph.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/docs/source/learn/core_notebooks/pymc_pytensor.ipynb#2025-04-21_snippet_28\n\nLANGUAGE: python\nCODE:\n```\nwith pm.Model() as model:\n    z = pm.Normal(name=\"z\", mu=np.array([0, 0]), sigma=np.array([1, 2]))\n\npytensor.dprint(z)\n```\n\n----------------------------------------\n\nTITLE: PyMC Shape Utils Module Functions\nDESCRIPTION: Key utility functions provided by the shape_utils module include to_tuple for tuple conversion, rv_size_is_none for checking random variable size, and change_dist_size for modifying distribution sizes. These functions help manage broadcasting of samples in hierarchical probabilistic models.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/docs/source/api/shape_utils.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nto_tuple\nrv_size_is_none\nchange_dist_size\n```\n\n----------------------------------------\n\nTITLE: PyMC sampling output example\nDESCRIPTION: Sample console output from running the NUTS sampler in PyMC. This shows the progress bar and diagnostic information displayed during the MCMC sampling process, indicating successful completion of 6000 iterations across 2 chains with no divergences.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/docs/source/learn/usage_overview.rst#2025-04-21_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nAuto-assigning NUTS sampler...\nInitializing NUTS using jitter+adapt_diag...\nMultiprocess sampling (2 chains in 2 jobs)\nNUTS: [beta, alpha]\n|██████████████████████████████████████| 100.00% [6000/6000 00:04<00:00 Sampling 2 chains, 0 divergences]\n```\n\n----------------------------------------\n\nTITLE: Debugging with eval() Method in PyTensor\nDESCRIPTION: Shows how to use the eval() method for debugging by evaluating a tensor with specific input values without compiling a function.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/docs/source/learn/core_notebooks/pymc_pytensor.ipynb#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nw.eval({x: 0, y: [1, np.e]})\n```\n\n----------------------------------------\n\nTITLE: Initializing Exponentiated Quadratic Covariance Function in PyMC\nDESCRIPTION: Creates an exponentiated quadratic covariance function that operates on the second and third columns of a three-column input matrix. It specifies lengthscales, input dimensions, and active dimensions.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/docs/source/learn/core_notebooks/Gaussian_Processes.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nls = [2, 5] # the lengthscales\ncov_func = pm.gp.cov.ExpQuad(input_dim=3, ls=ls, active_dims=[1, 2])\n```\n\n----------------------------------------\n\nTITLE: Implementing an Exponential Survival Distribution in PyMC\nDESCRIPTION: Shows how to create a more complex custom distribution for survival analysis. This example implements an exponential survival function with failure indicators and survival times.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/docs/source/guides/Probability_Distributions.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndef logp(value, t, lam):\n    return (value * log(lam) - lam * t).sum()\n\nexp_surv = pm.CustomDist('exp_surv', dist=logp, t=t, lam=lam, observed=failure)\n```\n\n----------------------------------------\n\nTITLE: Creating Prior Distribution for Latent Function in PyMC\nDESCRIPTION: Generates a PyMC random variable representing the prior distribution of a latent function using a Gaussian Process.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/docs/source/learn/core_notebooks/Gaussian_Processes.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nf = gp.prior(\"f\", X)\n```\n\n----------------------------------------\n\nTITLE: Visualizing 2D Samples from a PyMC Normal Distribution\nDESCRIPTION: Generates and visualizes 10,000 samples from a 2D normal distribution in a PyMC model using a 2D histogram.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/docs/source/learn/core_notebooks/pymc_pytensor.ipynb#2025-04-21_snippet_33\n\nLANGUAGE: python\nCODE:\n```\nfig, ax = plt.subplots(figsize=(8, 8))\nz_draws = pm.draw(vars=z, draws=10_000)\nax.hist2d(x=z_draws[:, 0], y=z_draws[:, 1], bins=25)\nax.set(title=\"Samples Histogram\");\n```\n\n----------------------------------------\n\nTITLE: Compiling and Optimizing a Modified PyTensor Graph\nDESCRIPTION: Shows how PyTensor optimizes the modified graph when compiled, removing redundant operations like the exponential and logarithm pair that form an identity.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/docs/source/learn/core_notebooks/pymc_pytensor.ipynb#2025-04-21_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nf = pytensor.function(inputs=[x, y], outputs=new_w)\n\npytensor.dprint(f)\n```\n\n----------------------------------------\n\nTITLE: Using PyMC Distributions Outside Model Context\nDESCRIPTION: Demonstrates how to create and use PyMC distribution objects outside of a model context using the dist class method. Shows calculating log-probability and drawing random samples.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/docs/source/guides/Probability_Distributions.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ny = pm.Binomial.dist(n=10, p=0.5)\n```\n\n----------------------------------------\n\nTITLE: Implementing Additive Gaussian Processes in PyMC\nDESCRIPTION: Demonstrates how to create and combine multiple Gaussian Process objects to form an additive GP model in PyMC.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/docs/source/learn/core_notebooks/Gaussian_Processes.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ngp1 = pm.gp.Marginal(mean_func1, cov_func1)\ngp2 = pm.gp.Marginal(mean_func2, cov_func2)\ngp3 = gp1 + gp2\n```\n\n----------------------------------------\n\nTITLE: Testing the Compiled Modified PyTensor Function\nDESCRIPTION: Executes the compiled function with the optimized graph to verify that it correctly implements the intended operation.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/docs/source/learn/core_notebooks/pymc_pytensor.ipynb#2025-04-21_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nf(x=0, y=[1, np.e])\n```\n\n----------------------------------------\n\nTITLE: Distribution Initialization with DensityDist\nDESCRIPTION: Example of new DensityDist functionality in PyMC 4, supporting optional logcdf and moment arguments for custom distribution definitions.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/RELEASE-NOTES.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\npm.DensityDist(..., logcdf=function, moment=function)\n```\n\n----------------------------------------\n\nTITLE: Defining a Normal Distribution in PyMC\nDESCRIPTION: Shows how to create a basic Normal distribution variable within a PyMC model context. This initializes a scalar random variable with a mean of 0 and standard deviation of 1.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/docs/source/guides/Probability_Distributions.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nwith pm.Model():\n\n    x = pm.Normal('x', mu=0, sigma=1)\n```\n\n----------------------------------------\n\nTITLE: Modifying a PyTensor Graph with clone_replace\nDESCRIPTION: Uses the clone_replace function to create a modified copy of a computational graph with substituted operations, demonstrating PyTensor's graph manipulation capabilities.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/docs/source/learn/core_notebooks/pymc_pytensor.ipynb#2025-04-21_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nnew_w = pytensor.clone_replace(output=[w], replace={parent_of_w: new_parent_of_w})[0]\nnew_w.name = \"log(exp(x + y))\"\npytensor.dprint(new_w)\n```\n\n----------------------------------------\n\nTITLE: Creating a PyMC Normal Distribution\nDESCRIPTION: Defines a normal distribution using PyMC's distribution class and prints its computational graph to compare with PyTensor's random variable.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/docs/source/learn/core_notebooks/pymc_pytensor.ipynb#2025-04-21_snippet_25\n\nLANGUAGE: python\nCODE:\n```\nx = pm.Normal.dist(mu=0, sigma=1)\npytensor.dprint(x)\n```\n\n----------------------------------------\n\nTITLE: Creating a Callable PyTensor Function\nDESCRIPTION: Compiles the computational graph into a callable function using pytensor.function(), which enables pushing values through the graph.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/docs/source/learn/core_notebooks/pymc_pytensor.ipynb#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nf = pytensor.function(inputs=[x, y], outputs=w)\n```\n\n----------------------------------------\n\nTITLE: Data Container Declaration\nDESCRIPTION: Syntax for creating immutable and mutable data containers in PyMC 4, with options for dimension specification.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/RELEASE-NOTES.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\npm.Data(..., mutable=False)\npm.Data(..., mutable=True)\npm.Data(..., dims=...)\n```\n\n----------------------------------------\n\nTITLE: Creating Conditional Distributions for Gaussian Process Models in PyMC\nDESCRIPTION: This code snippet demonstrates how to create conditional distributions for different components of a Gaussian Process model using PyMC. It shows the creation of conditionals for f1, f2, and their sum f, highlighting the differences in required arguments due to caching behavior.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/docs/source/learn/core_notebooks/Gaussian_Processes.rst#2025-04-21_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\nwith model:\n    # conditional distributions of f1 and f2\n    f1_star = gp1.conditional(\"f1_star\", X_star,\n                              given={\"X\": X, \"y\": y, \"sigma\": sigma, \"gp\": gp})\n    f2_star = gp2.conditional(\"f2_star\", X_star,\n                              given={\"X\": X, \"y\": y, \"sigma\": sigma, \"gp\": gp})\n\n    # conditional of f1 + f2, `given` not required\n    f_star = gp.conditional(\"f_star\", X_star)\n```\n\n----------------------------------------\n\nTITLE: Importing Distribution Utilities from PyMC\nDESCRIPTION: This code snippet shows the import statements for various distribution-related classes from the PyMC library. It includes Continuous and Discrete distributions, the base Distribution class, SymbolicRandomVariable, and DiracDelta.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/docs/source/api/distributions/utilities.rst#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom pymc import Continuous, Discrete, Distribution, SymbolicRandomVariable, DiracDelta\n```\n\n----------------------------------------\n\nTITLE: Using Compiled Log Probability Function in PyMC\nDESCRIPTION: Demonstrates how to use the compiled log probability function from a PyMC model. This function takes a dictionary of variable names and values as input, allowing for efficient probability computations.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/docs/source/learn/core_notebooks/pymc_pytensor.ipynb#2025-04-21_snippet_42\n\nLANGUAGE: python\nCODE:\n```\nmodel_2.compile_logp(sum=False)({\"mu\": 0, \"sigma_log__\": -10, \"x\": 0})\n```\n\n----------------------------------------\n\nTITLE: Combining Covariance Functions in PyMC\nDESCRIPTION: Demonstrates how to combine covariance functions using sum, product, and scalar multiplication operations in PyMC.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/docs/source/learn/core_notebooks/Gaussian_Processes.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ncov_func = pm.gp.cov.ExpQuad(...) + pm.gp.cov.ExpQuad(...)\n\ncov_func = pm.gp.cov.ExpQuad(...) * pm.gp.cov.Periodic(...)\n\ncov_func = eta**2 * pm.gp.cov.Matern32(...)\n```\n\n----------------------------------------\n\nTITLE: Creating Batched Multinomial Distributions in PyMC\nDESCRIPTION: Demonstrate how to create batched Multinomial distributions and the importance of dimension ordering.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/docs/source/learn/core_notebooks/dimensionality.ipynb#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\ndraw(pm.Multinomial.dist(n=5, p=[0.1, 0.3, 0.6], shape=(5, 3)))\n\ndraw(pm.Multinomial.dist(n=5, p=[0.1, 0.3, 0.6], shape=(5, 4)))\n\ndraw(pm.Multinomial.dist(n=5, p=[0.1, 0.3, 0.6], shape=(3, 5)))\n```\n\n----------------------------------------\n\nTITLE: Computing Model Comparison Metrics\nDESCRIPTION: Calculates log-likelihood and LOO cross-validation metrics for both models.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/docs/source/learn/core_notebooks/model_comparison.ipynb#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nwith pooled:\n    pm.compute_log_likelihood(trace_p)\n\npooled_loo = az.loo(trace_p)\n\nwith hierarchical:\n    pm.compute_log_likelihood(trace_h)\n\nhierarchical_loo = az.loo(trace_h)\n\ndf_comp_loo = az.compare({\"hierarchical\": trace_h, \"pooled\": trace_p})\n```\n\n----------------------------------------\n\nTITLE: PyMC Core Utility Functions\nDESCRIPTION: Core utility functions including compute_log_likelihood for calculating log likelihood of models, compute_log_prior for prior probability calculations, find_constrained_prior for identifying constrained priors, and DictToArrayBijection for converting between dictionary and array representations.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/docs/source/api/misc.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ncompute_log_likelihood\ncompute_log_prior\nfind_constrained_prior\nDictToArrayBijection\n```\n\n----------------------------------------\n\nTITLE: Defining Basic PyTensor Tensors\nDESCRIPTION: Creates scalar and vector tensors in PyTensor and prints their types and names. This demonstrates the basic tensor creation in PyTensor.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/docs/source/learn/core_notebooks/pymc_pytensor.ipynb#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nx = pt.scalar(name=\"x\")\ny = pt.vector(name=\"y\")\n\nprint(\n    f\"\"\"\nx type: {x.type}\nx name = {x.name}\n---\ny type: {y.type}\ny name = {y.name}\n\"\"\"\n)\n```\n\n----------------------------------------\n\nTITLE: Combining Implicit and Explicit Batch Dimensions in PyMC\nDESCRIPTION: Show how to combine explicit shape dimensions with implicit batch dimensions in PyMC distributions.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/docs/source/learn/core_notebooks/dimensionality.ipynb#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nnormal_dists = pm.Normal.dist(mu=np.array([0, 1, 2]), sigma=1, shape=(3,))\ndraw(normal_dists)\n\nnormal_dists = pm.Normal.dist(mu=np.array([0, 1, 2]), sigma=1, shape=(4, 3))\ndraw(normal_dists)\n```\n\n----------------------------------------\n\nTITLE: Listing Core Transform Methods\nDESCRIPTION: This snippet outlines the three core methods that all transforms in PyMC must implement: forward, backward, and log_jac_det. These methods are essential for mapping between constrained and unconstrained spaces and calculating the correct posterior log-probability.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/docs/source/api/distributions/transforms.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n* ``forward``: The map from a constrained space to the unconstrained space.\n* ``backward``: The inverse map from the unconstrained space to a constrained space.\n* ``log_jac_det``: The log of the determinant of the Jacobian of the ``backward`` map. This is used to account for the transformed random variable correctly in the posterior log-probability.\n```\n\n----------------------------------------\n\nTITLE: JAX Sampling Methods\nDESCRIPTION: New JAX-based sampling methods available in PyMC 4, including NumPyro and BlackJAX NUTS samplers.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/RELEASE-NOTES.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\npymc.sampling_jax.sample_numpyro_nuts()\npymc.sampling_jax.sample_blackjax_nuts()\n```\n\n----------------------------------------\n\nTITLE: Implementing Core Multinomial Function for Vectorization\nDESCRIPTION: This code defines a core multinomial function and vectorizes it to demonstrate how PyMC handles implicit batch dimensions internally.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/docs/source/learn/core_notebooks/dimensionality.ipynb#2025-04-21_snippet_17\n\nLANGUAGE: python\nCODE:\n```\ndef core_multinomial(n, p):\n    print(\">>\", n, p)\n    return draw(pm.Multinomial.dist(n, p))\n\n\nvectorized_multinomial = np.vectorize(core_multinomial, signature=\"(),(p)->(p)\")\nvectorized_multinomial([5, 10], [0.1, 0.3, 0.6])\n```\n\n----------------------------------------\n\nTITLE: Evaluating a PyTensor Function with Concrete Values\nDESCRIPTION: Demonstrates how to execute the compiled PyTensor function by passing concrete values for the input variables.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/docs/source/learn/core_notebooks/pymc_pytensor.ipynb#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nf(x=0, y=[1, np.e])\n```\n\n----------------------------------------\n\nTITLE: Creating a new RandomVariable Op in PyTensor\nDESCRIPTION: Demonstrates how to create a new RandomVariable Op for PyMC, including defining the class structure, rng_fn method for sampling, and other required attributes.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/docs/source/contributing/implementing_distribution.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom pytensor.tensor.var import TensorVariable\nfrom pytensor.tensor.random.op import RandomVariable\nfrom typing import List, Tuple\n\nclass BlahRV(RandomVariable):\n    name: str = \"blah\"\n    signature: \"(),()->()\"\n    dtype: str = \"floatX\"\n    _print_name: Tuple[str, str] = (\"blah\", \"\\\\operatorname{blah}\")\n\n    def __call__(self, loc=0.0, scale=1.0, **kwargs) -> TensorVariable:\n        return super().__call__(loc, scale, **kwargs)\n\n    @classmethod\n    def rng_fn(\n        cls,\n        rng: np.random.RandomState,\n        loc: np.ndarray,\n        scale: np.ndarray,\n        size: Tuple[int, ...],\n    ) -> np.ndarray:\n        return scipy.stats.blah.rvs(loc, scale, random_state=rng, size=size)\n\nblah = BlahRV()\n```\n\n----------------------------------------\n\nTITLE: Accessing Distribution Parameter Properties in PyMC\nDESCRIPTION: This snippet shows how to access the core dimensionality and signature properties of a PyMC distribution, which are used internally for handling dimensions.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/docs/source/learn/core_notebooks/dimensionality.ipynb#2025-04-21_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nmultinomial_dist.owner.op.ndims_params\n```\n\nLANGUAGE: python\nCODE:\n```\nmultinomial_dist.owner.op.signature\n```\n\n----------------------------------------\n\nTITLE: Defining Division Operation in PyTensor\nDESCRIPTION: Creates tensors for division operation to demonstrate PyTensor's ability to optimize mathematical operations.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/docs/source/learn/core_notebooks/pymc_pytensor.ipynb#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\na = pt.scalar(name=\"a\")\nb = pt.scalar(name=\"b\")\n\nc = a / b\nc.name = \"a / b\"\n\npytensor.dprint(c)\n```\n\n----------------------------------------\n\nTITLE: Sampling from a PyTensor Random Variable\nDESCRIPTION: Demonstrates how to generate a sample from a PyTensor random variable using the eval() method, highlighting a limitation that it produces the same value repeatedly.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/docs/source/learn/core_notebooks/pymc_pytensor.ipynb#2025-04-21_snippet_23\n\nLANGUAGE: python\nCODE:\n```\ny.eval()\n```\n\n----------------------------------------\n\nTITLE: Comparing Scalar, Implicit, and Explicit Dimensions in PyMC\nDESCRIPTION: This snippet creates a PyMC model with scalar, implicitly defined vector, and explicitly defined vector random variables, then visualizes their dimensionality using Graphviz.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/docs/source/learn/core_notebooks/dimensionality.ipynb#2025-04-21_snippet_24\n\nLANGUAGE: python\nCODE:\n```\nwith pm.Model() as pmodel:\n    pm.Normal(\"scalar (support)\")\n    pm.Normal(\"vector (implicit)\", mu=[1, 2, 3])\n    pm.Normal(\"vector (explicit)\", shape=(4,))\n\npm.model_to_graphviz(pmodel)\n```\n\n----------------------------------------\n\nTITLE: Evaluating Log Probability in PyMC\nDESCRIPTION: Demonstrates evaluating the log probability density function for a Normal distribution variable.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/docs/source/contributing/developer_guide.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nwith pm.Model():\n    z = pm.Normal(\"z\", 0, 5)\nsymbolic = pm.logp(z, 2.5)\nnumeric = symbolic.eval()\n# array(-2.65337645)\n```\n\n----------------------------------------\n\nTITLE: Computing Model Log Probability\nDESCRIPTION: Demonstrates how PyMC computes the total log probability of a model by combining log probabilities of random variables and potential terms.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/docs/source/contributing/developer_guide.md#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n@property\ndef logpt(self):\n    \"\"\"PyTensor scalar of log-probability of the model\"\"\"\n    with self:\n        factors = [var.logpt for var in self.basic_RVs] + self.potentials\n        logp = at.sum([at.sum(factor) for factor in factors])\n        ...\n        return logp\n```\n\n----------------------------------------\n\nTITLE: Retrieving Input Tensors from a PyTensor Graph\nDESCRIPTION: Shows how to get the input tensors of a computational graph using the graph_inputs function.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/docs/source/learn/core_notebooks/pymc_pytensor.ipynb#2025-04-21_snippet_14\n\nLANGUAGE: python\nCODE:\n```\n# get input tensors\nlist(pytensor.graph.graph_inputs(graphs=[w]))\n```\n\n----------------------------------------\n\nTITLE: Creating Pairplot for Sampled Parameters in PyMC3\nDESCRIPTION: New pairplot function for plotting scatter or hexbin matrices of sampled parameters, with optional plotting of divergences.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/RELEASE-NOTES.md#2025-04-21_snippet_25\n\nLANGUAGE: Python\nCODE:\n```\npm.pairplot(trace, divergences=True)\n```\n\n----------------------------------------\n\nTITLE: Visualizing PyMC Model Dimensionality with Graphviz\nDESCRIPTION: This code demonstrates how to use the model_to_graphviz function to visualize and understand the dimensionality of variables in a PyMC model.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/docs/source/learn/core_notebooks/dimensionality.ipynb#2025-04-21_snippet_23\n\nLANGUAGE: python\nCODE:\n```\npm.model_to_graphviz(pmodel)\n```\n\n----------------------------------------\n\nTITLE: Accessing RandomVariable Op Type\nDESCRIPTION: Shows how to access the underlying RandomVariable Op type from a PyMC distribution variable.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/docs/source/contributing/developer_guide.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nwith pm.Model():\n    z = pm.Normal(\"z\", 0, 5)\nprint(type(z.owner.op))\n# ==> pytensor.tensor.random.basic.NormalRV\nisinstance(z.owner.op, pytensor.tensor.random.basic.RandomVariable)\n# ==> True\n```\n\n----------------------------------------\n\nTITLE: Implementing a PyMC Distribution class\nDESCRIPTION: Demonstrates the structure of a PyMC Distribution class, inheriting from a base Distribution class and implementing required methods.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/docs/source/contributing/implementing_distribution.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport pytensor.tensor as pt\nfrom pymc.distributions.continuous import PositiveContinuous\nfrom pymc.distributions.dist_math import check_parameters\nfrom pymc.distributions.shape_utils import rv_size_is_none\n```\n\n----------------------------------------\n\nTITLE: Combining Implicit and Explicit Batch Dimensions in PyMC\nDESCRIPTION: This snippet demonstrates how to combine implicit batch dimensions from multidimensional parameters with explicit shape information in PyMC distributions.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/docs/source/learn/core_notebooks/dimensionality.ipynb#2025-04-21_snippet_20\n\nLANGUAGE: python\nCODE:\n```\ndraw(pm.Multinomial.dist(n=[5, 10], p=[0.1, 0.3, 0.6], shape=(2, 3)))\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Invalid Batch Dimension Combination\nDESCRIPTION: This code shows an example of invalid batch dimensions that cannot be broadcasted together, resulting in a ValueError.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/docs/source/learn/core_notebooks/dimensionality.ipynb#2025-04-21_snippet_19\n\nLANGUAGE: python\nCODE:\n```\ntry:\n    draw(pm.Multinomial.dist(n=[5, 10], p=[[0.1, 0.3, 0.6], [0.1, 0.3, 0.6], [0.1, 0.3, 0.6]]))\nexcept ValueError as error:\n    print(error)\n```\n\n----------------------------------------\n\nTITLE: Creating Random Variables in PyMC Model\nDESCRIPTION: Demonstrates creating random variables within a PyMC model context and accessing their properties. Shows how to create Normal distributions and evaluate their log probability.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/docs/source/contributing/developer_guide.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nwith pm.Model() as m:\n    x = pm.Normal('x', mu=0., sigma=1.)\n\nprint(type(x))                              # ==> <class 'pytensor.tensor.var.TensorVariable'>\nprint(m.free_RVs)                           # ==> [x]\nprint(logpt(x, 5.0))                        # ==> Elemwise{switch,no_inplace}.0\nprint(logpt(x, 5.).eval({}))                # ==> -13.418938533204672\nprint(m.logp({'x': 5.}))                    # ==> -13.418938533204672\n```\n\n----------------------------------------\n\nTITLE: Inspecting Dimensionality in PyMC Model\nDESCRIPTION: This snippet demonstrates how to inspect the shapes of random variables in a PyMC model using the eval_rv_shapes() method.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/docs/source/learn/core_notebooks/dimensionality.ipynb#2025-04-21_snippet_22\n\nLANGUAGE: python\nCODE:\n```\nwith pm.Model() as pmodel:\n    mu = pm.Normal(\"x\", mu=0, shape=(3))\n    sigma = pm.HalfNormal(\"sigma\")\n    y = pm.Normal(\"y\", mu=mu, sigma=sigma)\n\nfor rv, shape in pmodel.eval_rv_shapes().items():\n    print(f\"{rv:>11}: shape={shape}\")\n```\n\n----------------------------------------\n\nTITLE: Referencing DifferentialEquation Class in PyMC\nDESCRIPTION: This snippet shows how to reference the DifferentialEquation class from the PyMC ODE module. This class is likely used for defining and solving differential equations within the PyMC framework.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/docs/source/api/ode.rst#2025-04-21_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n.. autosummary::\n    :toctree: generated/\n\n    DifferentialEquation\n```\n\n----------------------------------------\n\nTITLE: Building Direct LogP Function with PyTensor\nDESCRIPTION: Demonstrates how to directly build and compile a log probability function using PyTensor, including gradient calculations.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/docs/source/contributing/developer_guide.md#2025-04-21_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nimport pytensor\nfunc = pytensor.function(m.free_RVs, m.logpt)\nfunc(*inputlist)\n# array(-51.0769075)\n\nlogpt_grad = pytensor.grad(m.logpt, m.free_RVs)\nfunc_d = pytensor.function(m.free_RVs, logpt_grad)\nfunc_d(*inputlist)\n```\n\n----------------------------------------\n\nTITLE: Testing a new RandomVariable Op in PyMC\nDESCRIPTION: Shows how to quickly test a new RandomVariable Op by using pm.draw to generate samples.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/docs/source/contributing/implementing_distribution.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\npm.draw(blah([0, 0], [1, 2], size=(10, 2)), random_seed=1)\n```\n\n----------------------------------------\n\nTITLE: Creating Implicit Batch Dimensions in PyMC\nDESCRIPTION: Demonstrate how to create implicit batch dimensions by passing parameters with higher dimensions without specifying shape.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/docs/source/learn/core_notebooks/dimensionality.ipynb#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nnormal_dists = pm.Normal.dist(mu=np.array([0, 0, 0]), sigma=np.array([1, 1, 1]))\ndraw(normal_dists)\n\ndraw(pm.Normal.dist(mu=[1, 10, 100], sigma=0.0001))\n```\n\n----------------------------------------\n\nTITLE: Accessing Model Log-Likelihood in NUTS and HMC Samplers\nDESCRIPTION: Track the model log-likelihood as a sampler stat for NUTS and HMC samplers, accessible via the trace object.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/RELEASE-NOTES.md#2025-04-21_snippet_20\n\nLANGUAGE: Python\nCODE:\n```\ntrace.get_sampler_stats('model_logp')\n```\n\n----------------------------------------\n\nTITLE: Setting Up PyMC Code Preamble\nDESCRIPTION: Python code for initializing random seed and configuring ArviZ style settings for PyMC notebooks.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/docs/source/contributing/jupyter_style.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nRANDOM_SEED = 8927\nrng = np.random.default_rng(RANDOM_SEED)\naz.style.use(\"arviz-darkgrid\")\n```\n\n----------------------------------------\n\nTITLE: Creating Conditional Distribution for Latent Function in PyMC\nDESCRIPTION: Generates the conditional distribution of a latent function at new input points using a Gaussian Process in PyMC.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/docs/source/learn/core_notebooks/Gaussian_Processes.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nf_star = gp.conditional(\"f_star\", X_star)\n```\n\n----------------------------------------\n\nTITLE: PyMC Model Implementation Example\nDESCRIPTION: Shows implementation of a simple hierarchical model with two Normal distributions in PyMC.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/docs/source/contributing/developer_guide.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nwith pm.Model() as model:\n    z = pm.Normal('z', mu=0., sigma=5.)             # ==> pytensor.tensor.var.TensorVariable\n    x = pm.Normal('x', mu=z, sigma=1., observed=5.) # ==> pytensor.tensor.var.TensorVariable\n# The log-prior of z=2.5\npm.logp(z, 2.5).eval()                              # ==> -2.65337645\n# ???????\nx.logp({'z': 2.5})                                  # ==> -4.0439386\n# ???????\nmodel.logp({'z': 2.5})                              # ==> -6.6973152\n```\n\n----------------------------------------\n\nTITLE: Creating Vector-Valued Variables in PyMC\nDESCRIPTION: Demonstrates how to specify a matrix-shaped random variable using the shape parameter. Creates a 3x3 matrix of Beta-distributed random variables with alpha=1 and beta=1.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/docs/source/guides/Probability_Distributions.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nwith pm.Model():\n\n    p = pm.Beta('p', 1, 1, shape=(3, 3))\n```\n\n----------------------------------------\n\nTITLE: Creating a Latent Gaussian Process in PyMC\nDESCRIPTION: This snippet shows how to instantiate a Latent Gaussian Process object in PyMC using mean and covariance functions. It also demonstrates how to create a prior random variable for the GP.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/docs/source/guides/Gaussian_Processes.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ngp = pm.gp.Latent(mean_func, cov_func)\n```\n\nLANGUAGE: python\nCODE:\n```\nf = gp.prior(\"f\", X)\n```\n\n----------------------------------------\n\nTITLE: Adding Tests for New PyMC RandomVariable\nDESCRIPTION: This code snippet shows how to add tests for a new RandomVariable in PyMC. It demonstrates the use of BaseTestDistributionRandom class to check inputs, draws, and shape inference.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/docs/source/contributing/implementing_distribution.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom pymc.testing import BaseTestDistributionRandom, seeded_scipy_distribution_builder\n\n\nclass TestBlah(BaseTestDistributionRandom):\n    pymc_dist = pm.Blah\n    # Parameters with which to test the blah pymc Distribution\n    pymc_dist_params = {\"param1\": 0.25, \"param2\": 2.0}\n    # Parameters that are expected to have passed as inputs to the RandomVariable op\n    expected_rv_op_params = {\"param1\": 0.25, \"param2\": 2.0}\n    # If the new `RandomVariable` is simply calling a `numpy`/`scipy` method,\n    # we can make use of `seeded_[scipy|numpy]_distribution_builder` which\n    # will prepare a seeded reference distribution for us.\n    reference_dist_params = {\"mu\": 0.25, \"loc\": 2.0}\n    reference_dist = seeded_scipy_distribution_builder(\"blah\")\n    tests_to_run = [\n        \"check_pymc_params_match_rv_op\",\n        \"check_pymc_draws_match_reference\",\n        \"check_rv_size\",\n    ]\n\n\nclass TestBlahAltParam2(BaseTestDistributionRandom):\n\n    pymc_dist = pm.Blah\n    # param2 is equivalent to 1 / alt_param2\n    pymc_dist_params = {\"param1\": 0.25, \"alt_param2\": 4.0}\n    expected_rv_op_params = {\"param1\": 0.25, \"param2\": 2.0}\n    tests_to_run = [\"check_pymc_params_match_rv_op\"]\n```\n\n----------------------------------------\n\nTITLE: Running Single Test File in PyMC\nDESCRIPTION: Executes all tests from a specific test file using pytest with verbose output.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/docs/source/contributing/running_the_test_suite.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npytest -v tests/model/test_core.py\n```\n\n----------------------------------------\n\nTITLE: Examining PyTensor Graph Components\nDESCRIPTION: Explores the structure of a PyTensor computational graph by printing details about the tensor's type, name, owner, inputs, operation, and outputs.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/docs/source/learn/core_notebooks/pymc_pytensor.ipynb#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nprint(\n    f\"\"\"\nz type: {z.type}\nz name = {z.name}\nz owner = {z.owner}\nz owner inputs = {z.owner.inputs}\nz owner op = {z.owner.op}\nz owner output = {z.owner.outputs}\n\"\"\"\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Univariate Normal Distribution in PyMC\nDESCRIPTION: Define a simple univariate Normal distribution using PyMC's dist method outside of a PyMC Model.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/docs/source/learn/core_notebooks/dimensionality.ipynb#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nnormal_dist = pm.Normal.dist()\n```\n\n----------------------------------------\n\nTITLE: Defining Continuous Distributions Module in PyMC using reStructuredText\nDESCRIPTION: This RST code snippet defines the module for continuous distributions in PyMC and creates an autosummary table of all available continuous distributions. It uses the 'distribution.rst' template for generating individual distribution documentation pages.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/docs/source/api/distributions/continuous.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n**********\nContinuous\n**********\n\n.. currentmodule:: pymc\n.. autosummary::\n   :toctree: generated/\n   :template: distribution.rst\n\n   AsymmetricLaplace\n   Beta\n   Cauchy\n   ChiSquared\n   ExGaussian\n   Exponential\n   Flat\n   Gamma\n   Gumbel\n   HalfCauchy\n   HalfFlat\n   HalfNormal\n   HalfStudentT\n   Interpolated\n   InverseGamma\n   Kumaraswamy\n   Laplace\n   Logistic\n   LogitNormal\n   LogNormal\n   Moyal\n   Normal\n   Pareto\n   PolyaGamma\n   Rice\n   SkewNormal\n   SkewStudentT\n   StudentT\n   Triangular\n   TruncatedNormal\n   Uniform\n   VonMises\n   Wald\n   Weibull\n```\n\n----------------------------------------\n\nTITLE: Random Variable LogP Evaluation\nDESCRIPTION: Shows how logp is evaluated for free and observed random variables in PyMC.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/docs/source/contributing/developer_guide.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n# self is a pytensor.tensor with a distribution attached\nself.logp_sum_unscaledt = distribution.logp_sum(self)\nself.logp_nojac_unscaledt = distribution.logp_nojac(self)\n```\n\n----------------------------------------\n\nTITLE: Filtering PyMC Tests by Pattern\nDESCRIPTION: Runs specific test cases that match a pattern using pytest's -k flag. Example shows filtering for tests containing 'coord' in their name.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/docs/source/contributing/running_the_test_suite.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npytest -v tests/model/test_core.py -k coord\n```\n\n----------------------------------------\n\nTITLE: Instantiating Latent Gaussian Process in PyMC\nDESCRIPTION: Creates a Latent Gaussian Process object with specified mean and covariance functions in PyMC.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/docs/source/learn/core_notebooks/Gaussian_Processes.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ngp = pm.gp.Latent(mean_func, cov_func)\n```\n\n----------------------------------------\n\nTITLE: Manipulating a PyTensor Computational Graph\nDESCRIPTION: Demonstrates how to modify a PyTensor computational graph by adding an exponential operation before a logarithm to create an identity function.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/docs/source/learn/core_notebooks/pymc_pytensor.ipynb#2025-04-21_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nparent_of_w = w.owner.inputs[0]  # get z tensor\nnew_parent_of_w = pt.exp(parent_of_w)  # modify the parent of w\nnew_parent_of_w.name = \"exp(x + y)\"\n```\n\n----------------------------------------\n\nTITLE: Displaying Random Variable Graph in PyTensor\nDESCRIPTION: Prints the computational graph of a random variable in PyTensor, showing the inputs (rng, size, and distribution parameters).\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/docs/source/learn/core_notebooks/pymc_pytensor.ipynb#2025-04-21_snippet_22\n\nLANGUAGE: python\nCODE:\n```\npytensor.dprint(y)\n```\n\n----------------------------------------\n\nTITLE: Creating Table of Contents for PyMC Core Notebooks using Sphinx\nDESCRIPTION: This code snippet creates a table of contents for PyMC core feature notebooks using Sphinx's toctree directive. It lists various notebook topics related to PyMC's core functionality.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/docs/source/learn/core_notebooks/index.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n:::{toctree}\n:maxdepth: 1\n\npymc_overview\nGLM_linear\nmodel_comparison\nposterior_predictive\ndimensionality\npymc_pytensor\nGaussian_Processes\n:::\n```\n\n----------------------------------------\n\nTITLE: Defining Explicit Support Dimensions for Multivariate Normal in PyMC\nDESCRIPTION: Show how to use shape to explicitly define support dimensions for a Multivariate Normal distribution, noting that it's ignored in practice.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/docs/source/learn/core_notebooks/dimensionality.ipynb#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nexplicit_mvnormal = pm.MvNormal.dist(mu=np.ones(3), cov=np.eye(3), shape=(3,))\ndraw(explicit_mvnormal)\n\nignored_shape_mvnormal = pm.MvNormal.dist(mu=np.ones(3), cov=np.eye(3), shape=(4,))\ndraw(ignored_shape_mvnormal)\n```\n\n----------------------------------------\n\nTITLE: Generating PyMC Test Coverage Report\nDESCRIPTION: Executes tests with coverage reporting enabled, showing which lines of code were executed during testing.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/docs/source/contributing/running_the_test_suite.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npytest -v --cov=pymc --cov-report term-missing tests/<name of test>.py\n```\n\n----------------------------------------\n\nTITLE: Automatic Variable Transformation in PyMC\nDESCRIPTION: Demonstrates how continuous variables with constrained supports are automatically transformed for efficient MCMC sampling. Shows a Gamma distribution being log-transformed.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/docs/source/guides/Probability_Distributions.rst#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nwith pm.Model() as model:\n    g = pm.Gamma('g', 1, 1)\n```\n\n----------------------------------------\n\nTITLE: Configuring Random Number Generator for Reproducibility\nDESCRIPTION: Set up a random number generator with a specific seed for reproducible results when drawing from distributions.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/docs/source/learn/core_notebooks/dimensionality.ipynb#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# Just patching the draw function for reproducibility\nrng = np.random.default_rng(seed=sum(map(ord, \"dimensionality\")))\ndraw = partial(pm.draw, random_seed=rng)\n```\n\n----------------------------------------\n\nTITLE: Equivalent Verbose Representation of Batched Multinomial Distribution\nDESCRIPTION: This code demonstrates the more verbose equivalent of the previous implicit batch dimension example, explicitly specifying the probability vector for each batch.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/docs/source/learn/core_notebooks/dimensionality.ipynb#2025-04-21_snippet_15\n\nLANGUAGE: python\nCODE:\n```\ndraw(pm.Multinomial.dist(n=[5, 10], p=[[0.1, 0.3, 0.6], [0.1, 0.3, 0.6]]))\n```\n\n----------------------------------------\n\nTITLE: Setting Up Pre-commit Hooks\nDESCRIPTION: Commands to install and run pre-commit hooks for code quality checks, with options for manual runs or automatic execution before each commit.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/docs/source/contributing/pr_tutorial.md#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\npip install pre-commit\npre-commit run --all      # 👈 to run it manually\npre-commit install        # 👈 to run it automatically before each commit\n```\n\n----------------------------------------\n\nTITLE: Calculating Conditional Log Probability\nDESCRIPTION: Demonstrates calculating conditional log probability and its gradient in PyMC. Shows how to handle subset of variables and compile gradient functions.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/docs/source/contributing/developer_guide.md#2025-04-21_snippet_14\n\nLANGUAGE: python\nCODE:\n```\ninputlist = [np.random.randn(*x.tag.test_value.shape) for x in m.free_RVs]\n\nfunc = m.logp_dlogp_function()\nfunc.set_extra_values({})\ninput_dict = {x.name: y for x, y in zip(m.free_RVs, inputlist)}\nprint(input_dict)\ninput_array = func.dict_to_array(input_dict)\nprint(input_array)\nprint(\" ===== \")\nfunc(input_array)\n\nirv = 1\nprint(\"Condition Logp: take %s as input and conditioned on the rest.\"%(m.free_RVs[irv].name))\nfunc_conditional = m.logp_dlogp_function(grad_vars=[m.free_RVs[irv]])\nfunc_conditional.set_extra_values(input_dict)\ninput_array2 = func_conditional.dict_to_array(input_dict)\nprint(input_array2)\nprint(\" ===== \")\nfunc_conditional(input_array2)\n```\n\n----------------------------------------\n\nTITLE: Inspecting Transformed Variables in PyMC\nDESCRIPTION: Shows how to inspect the automatically transformed variables in a model using the value_vars attribute, revealing the log-transformed Gamma variable.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/docs/source/guides/Probability_Distributions.rst#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n>>> model.value_vars\n[g_log__]\n```\n\n----------------------------------------\n\nTITLE: Demonstrating PyTensor's Optimization Capabilities\nDESCRIPTION: Shows how PyTensor can simplify expressions by creating a multiplication operation that should cancel out a previous division.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/docs/source/learn/core_notebooks/pymc_pytensor.ipynb#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nd = b * c\nd.name = \"b * c\"\n\npytensor.dprint(d)\n```\n\n----------------------------------------\n\nTITLE: Distribution Methods API Changes in PyMC\nDESCRIPTION: Distribution methods like logp, logcdf, and random are now accessed through standalone functions rather than as methods of distribution objects.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/RELEASE-NOTES.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# New syntax:\npm.logp(pm.Distribution(...), x)\npm.logcdf(pm.Distribution(...), x)\npm.draw(pm.Distribution(...), draws=x)\n\n# Deprecated syntax:\n# pm.Distribution(...).logp(x)\n# pm.Distribution(...).logcdf(x)\n# pm.Distribution(...).random(size=x)\n```\n\n----------------------------------------\n\nTITLE: Running mypy check manually for PyMC project\nDESCRIPTION: Python command to run the mypy static type check manually for the PyMC project. This is useful for troubleshooting type-related issues.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/docs/source/contributing/python_style.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\npython scripts/run_mypy.py [--verbose]\n```\n\n----------------------------------------\n\nTITLE: Creating GLM Models with Formula Interface\nDESCRIPTION: Methods for creating Generalized Linear Models and Linear Components using statistical formulas with variable extraction from calling scope.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/RELEASE-NOTES.md#2025-04-21_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nGLM.from_formula\nLinearComponent.from_formula\n```\n\n----------------------------------------\n\nTITLE: Using Unnamed Distributions in PyMC for Sampling\nDESCRIPTION: This example shows how to create and use an unnamed distribution in PyMC. It demonstrates creating a Normal distribution outside of a model context and drawing samples from it.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/docs/source/glossary.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport pymc as pm\n\nunnamed_dist = pm.Normal.dist(mu=1, sigma=2)\npm.draw(unnamed_dist, draws=10)\n```\n\n----------------------------------------\n\nTITLE: Updated Bound Interface Usage in PyMC\nDESCRIPTION: The signature for pm.Bound has changed to accept instantiated distributions rather than callable classes. It's now used as a regular PyMC distribution and no longer supports predictive random sampling.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/RELEASE-NOTES.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\npm.Bound(distribution.dist(), lower=0, upper=10)  # New approach\n# Old approach no longer works: pm.Bound(SomeDistributionClass, lower=0, upper=10)\n```\n\n----------------------------------------\n\nTITLE: Activating Environment and Installing Package\nDESCRIPTION: Commands to activate the conda environment and install the PyMC package in development mode.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/docs/source/contributing/pr_tutorial.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nconda activate pymc-dev\npip install -e .\n```\n\n----------------------------------------\n\nTITLE: Working with Model Log Probability\nDESCRIPTION: Shows how to work with log probability in a PyMC model, including creating random variables and evaluating their log probability values.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/docs/source/contributing/developer_guide.md#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nwith pm.Model() as m:\n    z = pm.Normal('z', 0., 10., shape=10)\n    x = pm.Normal('x', z, 1., shape=10)\n    y = pm.Normal('y', x.sum(), 1., observed=2.5)\n\nprint(m.basic_RVs)    # ==> [z, x, y]\nprint(m.free_RVs)     # ==> [z, x]\n\ntype(m.logpt)\n# pytensor.tensor.var.TensorVariable\n\nm.logpt.eval({x: np.random.randn(*x.tag.test_value.shape) for x in m.free_RVs})\n```\n\n----------------------------------------\n\nTITLE: Accessing New PyMC JAX Samplers\nDESCRIPTION: Example of importing and using the new experimental JAX samplers from pymc.sample_jax module. Requires JAX and either TensorFlow Probability or NumPyro as dependencies.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/RELEASE-NOTES.md#2025-04-21_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nimport pymc\nfrom pymc.sample_jax import sample\n```\n\n----------------------------------------\n\nTITLE: Importing PyMC and ArviZ packages for statistical modeling\nDESCRIPTION: Basic imports required for building statistical models with PyMC and visualizing results with ArviZ. This includes PyMC for Bayesian modeling, NumPy for numerical operations, and ArviZ for visualization and diagnostics.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/docs/source/learn/usage_overview.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport arviz as az\nimport numpy as np\nimport pymc as pm\n```\n\n----------------------------------------\n\nTITLE: Displaying the Graph of a PyMC Random Variable\nDESCRIPTION: Prints the computational graph of a random variable from a PyMC model to understand its structure.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/docs/source/learn/core_notebooks/pymc_pytensor.ipynb#2025-04-21_snippet_30\n\nLANGUAGE: python\nCODE:\n```\npytensor.dprint(model.basic_RVs[0])\n```\n\n----------------------------------------\n\nTITLE: Alternative Development Setup with pip\nDESCRIPTION: Alternative approach to set up a development environment using pip instead of conda, typically within a virtual environment.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/docs/source/contributing/pr_tutorial.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\npip install -e .\npip install -r requirements-dev.txt\n```\n\n----------------------------------------\n\nTITLE: Initial Value Setting in PyMC Models\nDESCRIPTION: Changed the approach for setting initial values in PyMC distributions and models. Test values are now separate from initial values.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/RELEASE-NOTES.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n# New approach:\npm.Distribution(initval=...)  # Set initial value\nmodel.initial_values[variable_name] = value  # Set directly in dict\n\n# Deprecated approach:\n# pm.Distribution(testval=...)  # For initial values\n# Model.update_start_values(...)\n```\n\n----------------------------------------\n\nTITLE: Importing Required Libraries for PyMC Distribution Examples\nDESCRIPTION: Import necessary libraries including functools, numpy, pytensor, and pymc for working with PyMC distributions.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/docs/source/learn/core_notebooks/dimensionality.ipynb#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom functools import partial\n\nimport numpy as np\nimport pytensor.tensor as pt\n\nimport pymc as pm\n```\n\n----------------------------------------\n\nTITLE: Testing Repeated Sampling from PyTensor Random Variable\nDESCRIPTION: Shows that repeated sampling from a PyTensor random variable using eval() produces the same value each time due to the fixed random seed.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/docs/source/learn/core_notebooks/pymc_pytensor.ipynb#2025-04-21_snippet_24\n\nLANGUAGE: python\nCODE:\n```\nfor i in range(10):\n    print(f\"Sample {i}: {y.eval()}\")\n```\n\n----------------------------------------\n\nTITLE: Installing pre-commit for PyMC project\nDESCRIPTION: Commands to install pre-commit within a virtual environment for the PyMC project. This step is crucial for running code-quality checks before committing changes.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/docs/source/contributing/python_style.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install pre-commit\n```\n\n----------------------------------------\n\nTITLE: Comparing Vector Normals and Broadcasted Normals in PyMC\nDESCRIPTION: Illustrate the difference between defining a vector of Normal distributions and broadcasting a single Normal to a vector shape.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/docs/source/learn/core_notebooks/dimensionality.ipynb#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nvector_normals = pm.Normal.dist(shape=(3,))\nbroadcasted_normal = pt.broadcast_to(pm.Normal.dist(), (3,))\n\ndraw(vector_normals), draw(broadcasted_normal)\n```\n\n----------------------------------------\n\nTITLE: Initializing Data Container Class in PyMC3\nDESCRIPTION: New Data container class that wraps Theano SharedVariable to allow models to track inputs and outputs, along with a set_data function for updating variables.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/RELEASE-NOTES.md#2025-04-21_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nData\n```\n\n----------------------------------------\n\nTITLE: Installing NumPyro for JAX Sampling Backend\nDESCRIPTION: Installs the NumPyro package which enables using the JAX backend for sampling in PyMC. This is an optional dependency that needs to be installed manually.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/docs/source/installation.md#2025-04-21_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nconda install numpyro\n```\n\n----------------------------------------\n\nTITLE: Testing Repeated Sampling from PyMC Distribution with eval()\nDESCRIPTION: Demonstrates that sampling from a PyMC distribution using eval() also produces the same value repeatedly, similar to PyTensor.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/docs/source/learn/core_notebooks/pymc_pytensor.ipynb#2025-04-21_snippet_26\n\nLANGUAGE: python\nCODE:\n```\nfor i in range(10):\n    print(f\"Sample {i}: {x.eval()}\")\n```\n\n----------------------------------------\n\nTITLE: Viewing Generated PyMC Documentation\nDESCRIPTION: Command to open the generated PyMC documentation in a web browser using Python's webbrowser module. This allows for easy preview of the static website.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/docs/source/contributing/build_docs.md#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nmake view\n```\n\n----------------------------------------\n\nTITLE: Drawing Values from Conditionally Dependent RVs in PyMC3\nDESCRIPTION: distribution.draw_values can now draw values from conditionally dependent RVs, such as autotransformed RVs.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/RELEASE-NOTES.md#2025-04-21_snippet_27\n\nLANGUAGE: Python\nCODE:\n```\ndistribution.draw_values(params)\n```\n\n----------------------------------------\n\nTITLE: Installing PyMC with conda\nDESCRIPTION: Creates a new conda environment named 'pymc_env' with PyMC version 5 or higher installed from the conda-forge channel, then activates this environment.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/docs/source/installation.md#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nconda create -c conda-forge -n pymc_env \"pymc>=5\"\nconda activate pymc_env\n```\n\n----------------------------------------\n\nTITLE: Converting Tensor-like Objects to TensorVariable in PyTensor\nDESCRIPTION: This snippet demonstrates how to use pytensor.tensor.as_tensor_variable to convert a nested list into a TensorVariable. It showcases the flexibility of tensor-like inputs in PyTensor.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/docs/source/glossary.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport pytensor.tensor as pt\n\npt.as_tensor_variable([[1, 2.0], [0, 0]])\n```\n\n----------------------------------------\n\nTITLE: Syncing with Upstream and Pushing Changes\nDESCRIPTION: Commands to fetch changes from the upstream repository, rebase the feature branch on top of the main branch, and push the changes to the forked repository.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/docs/source/contributing/pr_tutorial.md#2025-04-21_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ngit fetch upstream\ngit rebase upstream/main\n```\n\n----------------------------------------\n\nTITLE: Using 'dims' for Human-Readable Dimension Labels in PyMC\nDESCRIPTION: This code demonstrates the use of the 'dims' argument in PyMC to provide human-readable labels for dimensions, improving model interpretability.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/docs/source/learn/core_notebooks/dimensionality.ipynb#2025-04-21_snippet_25\n\nLANGUAGE: python\nCODE:\n```\nwith pm.Model() as model:\n    pm.Normal(\"profit\", shape=(3,), dims=\"year\")\n\npm.model_to_graphviz(model)\n```\n\n----------------------------------------\n\nTITLE: Installing Nutpie for Faster Sampling\nDESCRIPTION: Installs the Nutpie package from conda-forge channel, which provides a performance-optimized sampling backend using Numba as compiler and Rust-based samplers.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/docs/source/installation.md#2025-04-21_snippet_3\n\nLANGUAGE: console\nCODE:\n```\nconda install -c conda-forge nutpie\n```\n\n----------------------------------------\n\nTITLE: Attempted Combined LogP and Gradient Function\nDESCRIPTION: Demonstrates an unsuccessful attempt to combine log probability and gradient calculations into a single function.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/docs/source/contributing/developer_guide.md#2025-04-21_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nfunc_logp_and_grad = pytensor.function(m.free_RVs, [m.logpt, logpt_grad])\n# ==> ERROR\n```\n\n----------------------------------------\n\nTITLE: Demonstrating NumPy Broadcasting Limitation for PyMC's Approach\nDESCRIPTION: This snippet shows that naive NumPy broadcasting doesn't work for PyMC's implicit batch dimensions, highlighting the need for PyMC's specialized approach.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/docs/source/learn/core_notebooks/dimensionality.ipynb#2025-04-21_snippet_16\n\nLANGUAGE: python\nCODE:\n```\ntry:\n    np.broadcast_arrays([5, 10], [0.1, 0.3, 0.6])\nexcept ValueError as exc:\n    print(exc)\n```\n\n----------------------------------------\n\nTITLE: Building PyMC Docker Image\nDESCRIPTION: Commands to build a Docker image for PyMC. This requires Docker to be installed and the PyMC repository to be cloned.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/docs/source/contributing/docker_container.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd pymc\nbash scripts/docker_container.sh build\n```\n\n----------------------------------------\n\nTITLE: Setting Up Development Environment on Linux/MacOS\nDESCRIPTION: Commands to create a conda environment for PyMC development on Linux or MacOS using the provided environment file, activate it, and install the project in development mode.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/docs/source/contributing/pr_tutorial.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nconda env create -f conda-envs/environment-dev.yml\n```\n\n----------------------------------------\n\nTITLE: Listing Model Logp Methods\nDESCRIPTION: Lists all available logp-related methods in a PyMC Model instance. Shows various methods for calculating log probabilities and their derivatives.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/docs/source/contributing/developer_guide.md#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nlist(filter(lambda x: \"logp\" in x, dir(pm.Model)))\n```\n\n----------------------------------------\n\nTITLE: Creating New Tensors Through Operations\nDESCRIPTION: Demonstrates how to perform operations on tensors by adding a scalar and vector together, resulting in a new tensor.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/docs/source/learn/core_notebooks/pymc_pytensor.ipynb#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nz = x + y\nz.name = \"x + y\"\n```\n\n----------------------------------------\n\nTITLE: Python Context Manager Example\nDESCRIPTION: Demonstrates the basic concept of Python context managers which PyMC uses for model definition.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/docs/source/contributing/developer_guide.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nwith EXPR as VAR:\n    # DO SOMETHING\n    USERCODE\n    # DO SOME ADDITIONAL THINGS\n```\n\n----------------------------------------\n\nTITLE: Comparing PyMC Log Probability to SciPy\nDESCRIPTION: Compares the log probability computation in PyMC with SciPy's implementation for a normal distribution. This demonstrates the equivalence of PyMC's results with standard statistical libraries.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/docs/source/learn/core_notebooks/pymc_pytensor.ipynb#2025-04-21_snippet_36\n\nLANGUAGE: python\nCODE:\n```\nscipy.stats.norm.logpdf(x=np.array([0, 0]), loc=np.array([0, 0]), scale=np.array([1, 2]))\n```\n\n----------------------------------------\n\nTITLE: Emulating ReadTheDocs Build for PyMC Documentation\nDESCRIPTION: Command to simulate a ReadTheDocs build environment for PyMC documentation. This includes cleaning the build directory and setting extra options to mimic the ReadTheDocs build process.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/docs/source/contributing/build_docs.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nmake rtd\n```\n\n----------------------------------------\n\nTITLE: Building PyMC Documentation with Make Commands\nDESCRIPTION: Commands to build the PyMC documentation using make. It includes cleaning the build directory and generating HTML files using sphinx-build.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/docs/source/contributing/build_docs.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmake clean\nmake html\n```\n\n----------------------------------------\n\nTITLE: Documenting PyMC Model Conditioning Functions in reStructuredText\nDESCRIPTION: A reStructuredText documentation block that defines and organizes PyMC's model conditioning functions. It uses autosummary to generate documentation for the do, observe, change_value_transforms, and remove_value_transforms functions from the pymc.model.transform.conditioning module.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/docs/source/api/model/conditioning.rst#2025-04-21_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. currentmodule:: pymc.model.transform.conditioning\n.. autosummary::\n   :toctree: generated/\n\n   do\n   observe\n   change_value_transforms\n   remove_value_transforms\n```\n\n----------------------------------------\n\nTITLE: Setting Up Development Environment on Windows\nDESCRIPTION: Commands to create a conda environment for PyMC development on Windows using the provided environment file.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/docs/source/contributing/pr_tutorial.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nconda env create -f .\\conda-envs\\windows-environment-dev.yml\n```\n\n----------------------------------------\n\nTITLE: Testing support_point Method for PyMC Distributions\nDESCRIPTION: This snippet demonstrates how to test the support_point method of a new PyMC distribution using assert_support_point_is_expected. It includes parameterized tests for various input combinations.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/docs/source/contributing/implementing_distribution.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nimport pytest\nfrom pymc.distributions import Blah\nfrom pymc.testing import assert_support_point_is_expected\n\n\n@pytest.mark.parametrize(\n    \"param1, param2, size, expected\",\n    [\n        (0, 1, None, 0),\n        (0, np.ones(5), None, np.zeros(5)),\n        (np.arange(5), 1, None, np.arange(5)),\n        (np.arange(5), np.arange(1, 6), (2, 5), np.full((2, 5), np.arange(5))),\n    ],\n)\ndef test_blah_support_point(param1, param2, size, expected):\n    with Model() as model:\n        Blah(\"x\", param1=param1, param2=param2, size=size)\n    assert_support_point_is_expected(model, expected)\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for PyMC Documentation Build\nDESCRIPTION: Commands to install the required dependencies for building PyMC documentation. This includes using conda to install environment dependencies and pip to install the local PyMC version.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/docs/source/contributing/build_docs.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nconda install -f conda-envs/environment-docs.yml  # or make sure all dependencies listed here are installed\npip install -e .  # Install local pymc version as installable package\n```\n\n----------------------------------------\n\nTITLE: Model Compilation Method Changes in PyMC\nDESCRIPTION: Model compilation and evaluation methods have been renamed and restructured for more consistency. Many methods with 'fast_' prefix and jacobian variations have been consolidated.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/RELEASE-NOTES.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n# New approach:\nmodel.compile_logp(jacobian=True)  # Compile function with jacobian\nmodel.compile_dlogp(jacobian=False)  # Without jacobian\nmodel.logpt(jacobian=True, sum=True)  # With options\n\n# Deprecated methods:\n# model.logp, model.dlogp, model.d2logp and variations with _nojac\n# model.fast_logp and other fast_* methods\n# model.makefn (now model.compile_fn)\n```\n\n----------------------------------------\n\nTITLE: Renaming PyMC Plotting Functions\nDESCRIPTION: Code snippet showing how to rename deprecated PyMC plotting function calls to their new names for future-proofing code.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/RELEASE-NOTES.md#2025-04-21_snippet_11\n\nLANGUAGE: Python\nCODE:\n```\npm.traceplot → pm.plot_trace\npm.compareplot → pm.plot_compare\npm.autocorrplot → pm.plot_autocorr\npm.forestplot → pm.plot_forest\npm.kdeplot → pm.plot_kde\npm.energyplot → pm.plot_energy\npm.densityplot → pm.plot_density\npm.pairplot → pm.plot_pair\n```\n\n----------------------------------------\n\nTITLE: Testing logp and logcdf Methods for PyMC Distributions\nDESCRIPTION: This snippet demonstrates how to use check_logp and check_logcdf helpers to test the logp and logcdf methods of a new PyMC distribution. It includes setting up domains, parameter domains, and comparing against reference scipy functions.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/docs/source/contributing/implementing_distribution.md#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom pymc.testing import Domain, check_logp, check_logcdf, select_by_precision\n\nR = Domain([-np.inf, -2.1, -1, -0.01, 0.0, 0.01, 1, 2.1, np.inf])\nRplus = Domain([0, 0.01, 0.1, 0.9, 0.99, 1, 1.5, 2, 100, np.inf])\n\n\ndef test_blah():\n    check_logp(\n        pymc_dist=pm.Blah,\n        # Domain of the distribution values\n        domain=R,\n        # Domains of the distribution parameters\n        paramdomains={\"mu\": R, \"sigma\": Rplus},\n        # Reference scipy (or other) logp function\n        scipy_logp=lambda value, mu, sigma: sp.norm.logpdf(value, mu, sigma),\n        # Number of decimal points expected to match between the pymc and reference functions\n        decimal=select_by_precision(float64=6, float32=3),\n        # Maximum number of combinations of domain * paramdomains to test\n        n_samples=100,\n    )\n\n    check_logcdf(\n        pymc_dist=pm.Blah,\n        domain=R,\n        paramdomains={\"mu\": R, \"sigma\": Rplus},\n        scipy_logcdf=lambda value, mu, sigma: sp.norm.logcdf(value, mu, sigma),\n        decimal=select_by_precision(float64=6, float32=1),\n        n_samples=-1,\n    )\n```\n\n----------------------------------------\n\nTITLE: Conditional xfail for PyMC Distribution Tests\nDESCRIPTION: This snippet shows how to use a conditional xfail decorator to mark a test as expected to fail under specific conditions, such as when using float32 precision.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/docs/source/contributing/implementing_distribution.md#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ndef test_blah_logp(self):\n    ...\n\n\n@pytest.mark.xfail(\n   condition=(pytensor.config.floatX == \"float32\"),\n   reason=\"Fails on float32 due to numerical issues\",\n)\ndef test_blah_logcdf(self):\n    ...\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Theano and Installing Theano-PyMC with Conda\nDESCRIPTION: Commands for uninstalling the original Theano package and installing the new Theano-PyMC package using Conda package manager.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/RELEASE-NOTES.md#2025-04-21_snippet_12\n\nLANGUAGE: Bash\nCODE:\n```\nconda remove theano\nconda install -c conda-forge theano-pymc\n```\n\n----------------------------------------\n\nTITLE: Documenting New PyMC Distributions\nDESCRIPTION: This snippet provides a template for documenting new PyMC distributions, including the mathematical formula, plot, support, parameters, and usage examples.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/docs/source/contributing/implementing_distribution.md#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nr\"\"\"Univariate blah distribution.\n\n The pdf of this distribution is\n\n .. math::\n\n    f(x \\mid \\param1, \\param2) = \\exp{x * (param1 + \\log{param2})}\n\n .. plot::\n\n     import matplotlib.pyplot as plt\n     import numpy as np\n     import scipy.stats as st\n     import arviz as az\n     x = np.linspace(-5, 5, 1000)\n     params1 = [0., 0., 0., -2.]\n     params2 = [0.4, 1., 2., 0.4]\n     for param1, param2 in zip(params1, params2):\n         pdf = st.blah.pdf(x, param1, param2)\n         plt.plot(x, pdf, label=r'$\\param1$ = {}, $\\param2$ = {}'.format(param1, param2))\n     plt.xlabel('x', fontsize=12)\n     plt.ylabel('f(x)', fontsize=12)\n     plt.legend(loc=1)\n     plt.show()\n\n ========  ==========================================\n Support   :math:`x \\in [0, \\infty)`\n ========  ==========================================\n\n Blah distribution can be parameterized either in terms of param2 or\n alt_param2. The link between the two parametrizations is\n given by\n\n .. math::\n\n    \\param2 = \\dfrac{1}{\\alt_param2}\n\n\n Parameters\n ----------\n param1: float\n     Interpretation of param1.\n param2: float\n     Interpretation of param2 (param2 > 0).\n alt_param2: float\n     Interpretation of alt_param2 (alt_param2 > 0) (alternative to param2).\n\n Examples\n --------\n .. code-block:: python\n\n     with pm.Model():\n         x = pm.Blah('x', param1=0, param2=10)\n \"\"\"\n```\n\n----------------------------------------\n\nTITLE: Initializing NUTS with ADVI in PyMC3\nDESCRIPTION: Improve NUTS initialization using advi+adapt_diag_grad method.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/RELEASE-NOTES.md#2025-04-21_snippet_28\n\nLANGUAGE: Python\nCODE:\n```\npm.sample(init='advi+adapt_diag_grad')\n```\n\n----------------------------------------\n\nTITLE: Defining Multivariate Distributions in PyMC using reStructuredText\nDESCRIPTION: This RST code snippet defines a list of multivariate probability distributions available in PyMC. It uses autosummary to generate documentation pages for each distribution, using a custom distribution template.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/docs/source/api/distributions/multivariate.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. currentmodule:: pymc\n.. autosummary::\n   :toctree: generated\n   :template: distribution.rst\n\n   CAR\n   Dirichlet\n   DirichletMultinomial\n   ICAR\n   KroneckerNormal\n   LKJCholeskyCov\n   LKJCorr\n   MatrixNormal\n   Multinomial\n   MvNormal\n   MvStudentT\n   OrderedMultinomial\n   StickBreakingWeights\n   Wishart\n   WishartBartlett\n   ZeroSumNormal\n```\n\n----------------------------------------\n\nTITLE: Loading Data Files in PyMC\nDESCRIPTION: Python code demonstrating proper data loading pattern with fallback to PyMC's get_data function.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/docs/source/contributing/jupyter_style.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ntry:\n    df_all = pd.read_csv(os.path.join(\"..\", \"data\", \"file.csv\"), ...)\nexcept FileNotFoundError:\n    df_all = pd.read_csv(pm.get_data(\"file.csv\"), ...)\n```\n\n----------------------------------------\n\nTITLE: Defining PyMC Distributions Documentation Structure in reStructuredText\nDESCRIPTION: This snippet outlines the structure of the PyMC distributions API documentation using reStructuredText directives. It sets up a table of contents with links to various distribution types and related utilities.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/docs/source/api/distributions.rst#2025-04-21_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. _api_distributions:\n\n*************\nDistributions\n*************\n\n.. toctree::\n   :maxdepth: 2\n\n   distributions/continuous\n   distributions/discrete\n   distributions/multivariate\n   distributions/mixture\n   distributions/timeseries\n   distributions/truncated\n   distributions/censored\n   distributions/custom\n   distributions/simulator\n   distributions/transforms\n   distributions/utilities\n```\n\n----------------------------------------\n\nTITLE: Distribution Parameter Changes in PyMC\nDESCRIPTION: Several distributions have had their parameter signatures updated, including StudentT, AsymmetricLaplace, and ZeroInflatedPoisson. Default values have been changed or removed.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/RELEASE-NOTES.md#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n# Updated signatures:\npm.StudentT(name, nu, mu, sigma=None, lam=None)  # nu now required, must provide sigma or lam\npm.AsymmetricLaplace(name, mu, b, kappa)  # mu now required, parameters reordered\npm.ZeroInflatedPoisson(name, mu, psi)  # theta parameter renamed to mu\n```\n\n----------------------------------------\n\nTITLE: Transposing Multinomial Distributions for Shape Adjustment in PyMC\nDESCRIPTION: Show how to transpose Multinomial distributions to achieve a desired shape when direct specification is not possible.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/docs/source/learn/core_notebooks/dimensionality.ipynb#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\ntransposed_multinomials = pm.Multinomial.dist(n=5, p=[0.1, 0.3, 0.6], shape=(5, 3)).T\ndraw(transposed_multinomials)\n```\n\n----------------------------------------\n\nTITLE: RST Documentation Structure for PyMC Truncated Distribution\nDESCRIPTION: Sphinx documentation configuration for the Truncated distribution class, including module reference and method documentation setup. Uses autosummary directive to generate method documentation.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/docs/source/api/distributions/truncated.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. currentmodule:: pymc\n\n.. autoclass:: Truncated\n\n   .. rubric:: Methods\n\n   .. autosummary::\n      :toctree: classmethods\n\n      Truncated.dist\n```\n\n----------------------------------------\n\nTITLE: XArray DataArray Creation\nDESCRIPTION: Examples of creating XArray DataArrays from numpy linspace for better data handling and broadcasting\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/docs/source/contributing/jupyter_style.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nx = xr.DataArray(np.linspace(0, 10, 100), dims=[\"x_plot\"])\n# or\nx = np.linspace(0, 10, 100)\nx_da = xr.DataArray(x)\n```\n\n----------------------------------------\n\nTITLE: Generating PyMC Tuning Module Documentation with reStructuredText\nDESCRIPTION: This code snippet uses reStructuredText directives to generate documentation for PyMC's tuning module. It sets the current module to 'pymc' and creates an autosummary for the find_hessian and find_MAP functions.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/docs/source/api/tuning.rst#2025-04-21_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\nTuning\n------\n\n.. currentmodule:: pymc\n\n.. autosummary::\n   :toctree: generated/\n\n   find_hessian\n   find_MAP\n```\n\n----------------------------------------\n\nTITLE: Installing BlackJAX Sampler\nDESCRIPTION: Installs the BlackJAX package as an alternative JAX-based sampler for PyMC. This is another optional dependency for enhancing sampling capabilities.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/docs/source/installation.md#2025-04-21_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nconda install blackjax\n```\n\n----------------------------------------\n\nTITLE: Defining PyMC Censored Distribution Documentation Structure in RST\nDESCRIPTION: Template structure for documenting the Censored distribution class in PyMC. It includes directives for setting the current module, auto-class generation, and method documentation using autosummary.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/docs/source/api/distributions/censored.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n********\nCensored\n********\n\n..\n   Manually follow the template in _templates/distribution.rst.\n   If at any point, multiple objects are listed here,\n   the pattern should instead be modified to that of the\n   other API files such as api/distributions/continuous.rst\n\n.. currentmodule:: pymc\n\n.. autoclass:: Censored\n\n   .. rubric:: Methods\n\n   .. autosummary::\n      :toctree: classmethods\n\n      Censored.dist\n```\n\n----------------------------------------\n\nTITLE: Loop Variable Naming Pattern\nDESCRIPTION: Example of variable naming conventions in loops when storing subset variables\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/docs/source/contributing/jupyter_style.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nvariable = np.array(...)\nx = np.array(...)\nfor i in range(N):\n    variable_i = variable[i]\n    for j in range(K):\n        x_j = x[j]\n        ...\n```\n\n----------------------------------------\n\nTITLE: Computing Effective Sample Size in PyMC3\nDESCRIPTION: Update effective sample size computation using Geyer's initial positive sequence. pm.diagnostics.effective_n can now report N_eff>N.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/RELEASE-NOTES.md#2025-04-21_snippet_24\n\nLANGUAGE: Python\nCODE:\n```\npm.diagnostics.effective_n(trace)\n```\n\n----------------------------------------\n\nTITLE: PyMC Data Variable Pattern\nDESCRIPTION: Pattern for handling data variables in PyMC models to avoid name clashes when using pm.Data\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/docs/source/contributing/jupyter_style.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nx = np.array(...)\nwith pm.Model():\n    x_ = pm.Data(\"x\", x)\n    ...\n```\n\n----------------------------------------\n\nTITLE: Initializing PyMC Environment with Dependencies\nDESCRIPTION: Sets up the required imports for PyMC, ArviZ, and NumPy, and configures the ArviZ plotting style.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/docs/source/learn/core_notebooks/model_comparison.ipynb#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport arviz as az\nimport numpy as np\nimport pymc as pm\n\nprint(f\"Running on PyMC v{pm.__version__}\")\n\naz.style.use(\"arviz-darkgrid\")\n```\n\n----------------------------------------\n\nTITLE: Importing PyMC Transformations Module\nDESCRIPTION: This code snippet shows how to import the PyMC transformations module. It is used at the beginning of the documentation to set the current module for auto-documentation purposes.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/docs/source/api/distributions/transforms.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n.. currentmodule:: pymc.distributions.transforms\n```\n\n----------------------------------------\n\nTITLE: Demonstrating MyST Cross-References in Markdown\nDESCRIPTION: Examples of using MyST syntax for cross-referencing within the current project, to other projects, and to Python objects. This snippet shows the correct format for various types of references.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/docs/source/contributing/jupyter_style.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{ref}`explicit text <anchor_id>`\n{ref}`Kronecker product <GP-Kron>`\n{ref}`explicit text <key:anchor_id>`\n{ref}`how to use InferenceData <arviz:working_with_InferenceData>`\n{type}`import.path`  # to show full import path\n{type}`~import.path`  # to show only object name\n{class}`~pymc.gp.HSGP`\n```\n\n----------------------------------------\n\nTITLE: Documenting PyMC Model Module in reStructuredText\nDESCRIPTION: This snippet defines the structure of the PyMC model module documentation using reStructuredText. It includes an automodule directive for the main module and a toctree for subcomponents.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/docs/source/api/model.rst#2025-04-21_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\nModel\n------\n\n.. automodule:: pymc.model\n\n.. toctree::\n   :maxdepth: 2\n\n   model/core\n   model/conditioning\n   model/optimization\n   model/fgraph\n```\n\n----------------------------------------\n\nTITLE: Loading Watermark Extension in Python\nDESCRIPTION: Loads and executes the watermark extension to display Python and package versions used in the notebook. Includes optional flags for PyTensor and xarray packages.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/docs/source/contributing/jupyter_style.md#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n%load_ext watermark\n%watermark -n -u -v -iv -w -p pytensor,xarray\n```\n\n----------------------------------------\n\nTITLE: Defining PyMC SMC Module Structure in RST\nDESCRIPTION: ReStructuredText documentation layout for PyMC's Sequential Monte Carlo module, defining the module structure, sampling function, and available SMC kernels.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/docs/source/api/smc.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\nSequential Monte Carlo\n**********************\n\n.. automodule:: pymc.smc\n\n.. autosummary::\n   :toctree: generated/\n\n    sample_smc\n\n.. _smc_kernels:\n\nSMC kernels\n-----------\n\n.. currentmodule:: pymc.smc.kernels\n.. autosummary::\n   :toctree: generated/\n\n    SMC_KERNEL\n    IMH\n    MH\n```\n\n----------------------------------------\n\nTITLE: Adding Standard Notebook Footer\nDESCRIPTION: Includes the standardized page footer content using MyST markdown include directive.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/docs/source/contributing/jupyter_style.md#2025-04-21_snippet_14\n\nLANGUAGE: markdown\nCODE:\n```\n:::{include} ../page_footer.md\n:::\n```\n\n----------------------------------------\n\nTITLE: Using Differential Evolution Metropolis Sampler in PyMC3\nDESCRIPTION: New DEMetropolis sampler for models with correlated dimensions that cannot use gradient-based samplers, providing higher effective sampling rates.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/RELEASE-NOTES.md#2025-04-21_snippet_29\n\nLANGUAGE: Python\nCODE:\n```\npm.DEMetropolis()\n```\n\n----------------------------------------\n\nTITLE: Adding Watermark Section Header\nDESCRIPTION: Creates a section header for the watermark information in the notebook's table of contents.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/docs/source/contributing/jupyter_style.md#2025-04-21_snippet_12\n\nLANGUAGE: markdown\nCODE:\n```\n## Watermark\n```\n\n----------------------------------------\n\nTITLE: Setting up Eight Schools Data\nDESCRIPTION: Initializes the Eight Schools dataset with treatment effects and standard deviations for 8 schools.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/docs/source/learn/core_notebooks/model_comparison.ipynb#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ny = np.array([28, 8, -3, 7, -1, 1, 18, 12])\nsigma = np.array([15, 10, 16, 11, 9, 11, 10, 18])\nJ = len(y)\n```\n\n----------------------------------------\n\nTITLE: Importing ODE Module in PyMC\nDESCRIPTION: This snippet demonstrates how to import the ODE module in PyMC. The module provides functionality for working with ordinary differential equations.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/docs/source/api/ode.rst#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n.. automodule:: pymc.ode\n```\n\n----------------------------------------\n\nTITLE: Repository Syncing and Package Installation\nDESCRIPTION: Commands for syncing the repository code and updating the installed PyMC version.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/docs/source/contributing/using_gitpod.md#2025-04-21_snippet_3\n\nLANGUAGE: console\nCODE:\n```\ncd /workspace/pymc\ngit checkout main\ngit pull upstream main --tags\npip install -e .\n```\n\n----------------------------------------\n\nTITLE: Creating Model Directed Graph with Graphviz in PyMC3\nDESCRIPTION: New model_to_graphviz function to plot a directed graph of a PyMC3 model using plate notation, requiring the optional graphviz dependency.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/RELEASE-NOTES.md#2025-04-21_snippet_30\n\nLANGUAGE: Python\nCODE:\n```\npm.model_to_graphviz(model)\n```\n\n----------------------------------------\n\nTITLE: Adding Bibliography References in Markdown\nDESCRIPTION: Shows how to add bibliography references using MyST markdown syntax, with options for cited references only or including additional uncited references.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/docs/source/contributing/jupyter_style.md#2025-04-21_snippet_11\n\nLANGUAGE: markdown\nCODE:\n```\n## References\n\n:::{bibliography}\n:filter: docname in docnames\n:::\n```\n\nLANGUAGE: markdown\nCODE:\n```\n## References\n\n:::{bibliography}\n:filter: docname in docnames\n\nextra_bibtex_id_1\nextra_bibtex_id_2\n:::\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Error when Initializing Named Distribution Outside Model Context\nDESCRIPTION: This snippet illustrates the error raised when attempting to initialize a named distribution outside of a PyMC model context. It helps users understand the distinction between named and unnamed distributions.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/docs/source/glossary.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport pymc as pm\n\npm.Normal(\"variable\")\n```\n\n----------------------------------------\n\nTITLE: Skipping specific pre-commit hook for PyMC project\nDESCRIPTION: Command to skip a specific pre-commit hook (in this case, 'ruff') when committing changes. This allows for more granular control over which checks are run.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/docs/source/contributing/python_style.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nSKIP=ruff git commit -m \"<descriptive message>\"\n```\n\n----------------------------------------\n\nTITLE: Installing Test Dependencies for PyMC\nDESCRIPTION: Installs the required development dependencies for running PyMC tests using pip package manager.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/docs/source/contributing/running_the_test_suite.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install -r requirements-dev.txt\n```\n\n----------------------------------------\n\nTITLE: Black Formatter Control Example\nDESCRIPTION: Python code showing how to control Black formatter behavior using fmt comments.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/docs/source/contributing/jupyter_style.md#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n# fmt: off\nnp.array(\n    [\n        [1, 0, 0, 0],\n        [0, -1, 0, 0],\n        [0, 0, 1, 0],\n        [0, 0, 0, -1],\n    ]\n)\n# fmt: on\n```\n\n----------------------------------------\n\nTITLE: Creating Normal Distribution Variable in PyMC\nDESCRIPTION: Demonstrates creating a Normal distribution variable within a PyMC model context, showing how distribution classes return PyTensor TensorVariables.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/docs/source/contributing/developer_guide.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nz = Normal(\"z\", 0, 5)\n```\n\n----------------------------------------\n\nTITLE: Mathematical Formula in GLM Definition\nDESCRIPTION: Mathematical notation showing the relationship between response variable y_i and covariates in Generalized Linear Models using LaTeX notation.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/docs/source/glossary.md#2025-04-21_snippet_1\n\nLANGUAGE: latex\nCODE:\n```\ny_i ... x_i^T\\beta ... Y_i ... x_i^T\\beta\n```\n\n----------------------------------------\n\nTITLE: Pushing Feature Branch to Origin\nDESCRIPTION: Command to push the feature branch to the forked repository on GitHub, setting up tracking for future pushes.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/docs/source/contributing/pr_tutorial.md#2025-04-21_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ngit push -u origin my-feature\n```\n\n----------------------------------------\n\nTITLE: Pyro Implementation Example\nDESCRIPTION: Equivalent model implementation using Pyro, demonstrating its approach to probabilistic programming.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/docs/source/contributing/developer_guide.md#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nz_dist = dist.Normal(loc=0., scale=5.)           # ==> <class 'pyro.distributions.torch.Normal'>\nz = pyro.sample(\"z\", z_dist)                     # ==> <class 'torch.Tensor'>\n# reset/specify value of z\nz.data = torch.tensor(2.5)\nx = dist.Normal(loc=z, scale=1.).log_prob(5.)    # ==> <class 'torch.Tensor'>\nmodel_logp = z_dist.log_prob(z) + x\nx                                                # ==> -4.0439386\nmodel_logp                                       # ==> -6.6973152\n```\n\n----------------------------------------\n\nTITLE: Checking Python Version\nDESCRIPTION: Command to verify the Python version installed in the Gitpod environment.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/docs/source/contributing/using_gitpod.md#2025-04-21_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n(base) gitpod@reshamas-pymc-vpfb4pvr90z:/workspace/pymc$ python3 --version\nPython 3.11.0\n```\n\n----------------------------------------\n\nTITLE: Git Feature Branch Workflow\nDESCRIPTION: Essential Git commands for creating and working with feature branches when contributing to PyMC.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/docs/source/contributing/using_gitpod.md#2025-04-21_snippet_4\n\nLANGUAGE: console\nCODE:\n```\ngit checkout -b feature-branch\ngit add file_name\ngit commit -m 'message'\ngit push origin feature-branch\n```\n\n----------------------------------------\n\nTITLE: MyST Section Reference - Initial Pass\nDESCRIPTION: Reference tag for the initial review pass section using MyST markdown syntax.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/docs/source/contributing/review_pr_pymc_examples.md#2025-04-21_snippet_2\n\nLANGUAGE: myst\nCODE:\n```\n(review_pr/initial_pass)=\n```\n\n----------------------------------------\n\nTITLE: Generating PyMC Documentation Template with Jinja2\nDESCRIPTION: A template that generates Sphinx documentation differently for classes and functions. For classes, it includes a method summary section specifically showing the .dist method. For functions, it generates a simple autofunction directive.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/docs/source/_templates/distribution.rst#2025-04-21_snippet_0\n\nLANGUAGE: jinja2\nCODE:\n```\n{{ fullname | escape | underline}}\n\n.. currentmodule:: {{ module }}\n\n{% if objtype == \"class\" %}\n.. autoclass:: {{ objname }}\n\n   .. rubric:: {{ _('Methods') }}\n\n   .. autosummary::\n      :toctree: classmethods\n\n      {{ objname }}.dist\n{% else %}\n.. autofunction:: {{ objname }}\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Skipping pre-commit checks in Git for PyMC project\nDESCRIPTION: Git command to skip pre-commit checks when committing changes. This is useful for work-in-progress commits or when checks are not necessary.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/docs/source/contributing/python_style.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit commit -m \"wip lol\" --no-verify\n```\n\n----------------------------------------\n\nTITLE: Drawing from a Normal Distribution and Checking Dimensionality\nDESCRIPTION: Take a random draw from the Normal distribution and examine its value and dimensionality.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/docs/source/learn/core_notebooks/dimensionality.ipynb#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nnormal_draw = draw(normal_dist)\nnormal_draw, normal_draw.ndim\n```\n\n----------------------------------------\n\nTITLE: Checking PyMC Version\nDESCRIPTION: Command to check the installed version of PyMC in the Gitpod environment.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/docs/source/contributing/using_gitpod.md#2025-04-21_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n(base) gitpod@reshamas-pymc-vpfb4pvr90z:/workspace/pymc$ pip list | grep pymc\npymc                          5.1.0       /workspace/pymc\npymc-sphinx-theme             0.1\n```\n\n----------------------------------------\n\nTITLE: Adding Note Block for PyMC Notebook Execution Information\nDESCRIPTION: This code snippet creates a note block using Sphinx's note directive. It provides information about the execution of notebooks with different library versions and mentions the availability of additional example notebooks.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/docs/source/learn/core_notebooks/index.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n:::{note}\nThe notebooks above are executed with each version of the library\n(available on the navigation bar). In addition, a much larger gallery\nof example notebooks is available at the {doc}`\"Examples\" tab <nb:gallery>`.\nThese are executed more sparsely and independently.\nThey include a watermark to show which versions were used to run them.\n:::\n```\n\n----------------------------------------\n\nTITLE: Creating a Feature Branch\nDESCRIPTION: Command to create and switch to a new feature branch for development changes, following the best practice of not working directly on the main branch.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/docs/source/contributing/pr_tutorial.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout -b my-feature\n```\n\n----------------------------------------\n\nTITLE: Version Tag Format for PyMC Release\nDESCRIPTION: Shows the format for tagging a new release version in Git, using semantic versioning format with a 'v' prefix.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/docs/source/contributing/release_checklist.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n´v1.2.3´\n```\n\n----------------------------------------\n\nTITLE: Checking Git Repository Configuration\nDESCRIPTION: Shows how to verify remote repository settings for the PyMC fork and upstream repositories.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/docs/source/contributing/using_gitpod.md#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n(base) gitpod@reshamas-pymc-0ygu5rf74md:/workspace/pymc$ git remote -v\norigin  https://github.com/reshamas/pymc.git (fetch)\norigin  https://github.com/reshamas/pymc.git (push)\nupstream        https://github.com/pymc-devs/pymc.git (fetch)\nupstream        https://github.com/pymc-devs/pymc.git (push)\n```\n\n----------------------------------------\n\nTITLE: PyMC Data Module RST Documentation Structure\nDESCRIPTION: ReStructuredText documentation defining the module structure and class listing for PyMC's data handling functionality.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/docs/source/api/data.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. currentmodule:: pymc\n\n.. autosummary::\n   :toctree: generated/\n\n   ConstantData\n   MutableData\n   get_data\n   Data\n   Minibatch\n```\n\n----------------------------------------\n\nTITLE: Switching to Feature Branch\nDESCRIPTION: Command to switch to an existing feature branch for development work.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/docs/source/contributing/pr_tutorial.md#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout my-feature   # no -b flag because the branch is already created\n```\n\n----------------------------------------\n\nTITLE: Testing Repeated Sampling from PyMC Model Variable\nDESCRIPTION: Demonstrates that sampling from a random variable in a PyMC model using eval() produces the same value repeatedly.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/docs/source/learn/core_notebooks/pymc_pytensor.ipynb#2025-04-21_snippet_31\n\nLANGUAGE: python\nCODE:\n```\nfor i in range(10):\n    print(f\"Sample {i}: {z.eval()}\")\n```\n\n----------------------------------------\n\nTITLE: Creating Multiple Draws Using Stack in PyMC\nDESCRIPTION: Demonstrate how to create multiple draws from a Normal distribution using stack, which is less efficient than using shape.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/docs/source/learn/core_notebooks/dimensionality.ipynb#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nnormal_dists = pm.math.stack([pm.Normal.dist() for _ in range(3)])\ndraw(normal_dists)\n```\n\n----------------------------------------\n\nTITLE: MyST Notebook Target Directive\nDESCRIPTION: Reference tag for the notebook using MyST markdown syntax, used for internal documentation linking.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/docs/source/contributing/review_pr_pymc_examples.md#2025-04-21_snippet_0\n\nLANGUAGE: myst\nCODE:\n```\n(review_pr_pymc_examples)=\n```\n\n----------------------------------------\n\nTITLE: PyMC GP Module Class Reference\nDESCRIPTION: RestructuredText directive defining the current module and listing available GP implementation classes via autosummary.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/docs/source/api/gp/implementations.rst#2025-04-21_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. currentmodule:: pymc.gp\n.. autosummary::\n   :toctree: generated\n\n   HSGP\n   HSGPPeriodic\n   Latent\n   LatentKron\n   Marginal\n   MarginalKron\n   MarginalApprox\n   TP\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx Documentation TOC in Markdown\nDESCRIPTION: Markdown configuration for PyMC's documentation table of contents (toctree) with hidden navigation structure. Defines main documentation sections including home, examples, learn, API, community, and contributing pages.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/docs/source/index.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\nsd_hide_title: true\n---\n\n# PyMC versioned Documentation\n\n:::{toctree}\n:hidden:\n\nHome <https://www.pymc.io/welcome.html>\nExamples <https://www.pymc.io/projects/examples/en/latest/gallery.html>\nLearn <learn>\napi\nCommunity <https://www.pymc.io/community/index.html>\ncontributing/index\n:::\n```\n\n----------------------------------------\n\nTITLE: Importing Required Libraries for PyMC and PyTensor\nDESCRIPTION: Imports the necessary libraries for working with PyMC and PyTensor, including matplotlib for visualization, numpy for numerical computations, and scipy.stats for statistical functions.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/docs/source/learn/core_notebooks/pymc_pytensor.ipynb#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pytensor\nimport pytensor.tensor as pt\nimport scipy.stats\n\nimport pymc as pm\n```\n\n----------------------------------------\n\nTITLE: MyST Section Reference\nDESCRIPTION: Reference tag for a specific section about PR scope using MyST markdown syntax.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/docs/source/contributing/review_pr_pymc_examples.md#2025-04-21_snippet_1\n\nLANGUAGE: myst\nCODE:\n```\n(review_pr/scope)=\n```\n\n----------------------------------------\n\nTITLE: PyMC FunctionGraph Module Index in RST\nDESCRIPTION: ReStructuredText documentation defining the available functions in the pymc.model.fgraph module, including clone_model, fgraph_from_model, and model_from_fgraph functions.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/docs/source/api/model/fgraph.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. currentmodule:: pymc.model.fgraph\n.. autosummary::\n   :toctree: generated/\n\n   clone_model\n   fgraph_from_model\n   model_from_fgraph\n```\n\n----------------------------------------\n\nTITLE: Enabling pre-commit hooks for PyMC project\nDESCRIPTION: Command to enable pre-commit hooks for the PyMC project. This sets up automatic code-quality checks to run before each commit.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/docs/source/contributing/python_style.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npre-commit install\n```\n\n----------------------------------------\n\nTITLE: Defining PyMC Package Dependencies using pip Requirements Format\nDESCRIPTION: Specifies the required Python packages and their version constraints for the PyMC project. Includes core dependencies like NumPy and SciPy, documentation tools like Sphinx, and development utilities like pytest and pre-commit.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/requirements-dev.txt#2025-04-21_snippet_0\n\nLANGUAGE: pip\nCODE:\n```\narviz>=0.13.0\ncachetools>=4.2.1\ncloudpickle\ngit+https://github.com/pymc-devs/pymc-sphinx-theme\nipython>=7.16\njupyter-sphinx\nmcbackend>=0.4.0\nmypy==1.15.0\nmyst-nb<=1.0.0\nnumdifftools>=0.9.40\nnumpy>=1.25.0\nnumpydoc\npandas>=0.24.0\npolyagamma\npre-commit>=2.8.0\npytensor>=2.30.2,<2.31\npytest-cov>=2.5\npytest>=3.0\nrich>=13.7.1\nscipy>=1.4.1\nsphinx-copybutton\nsphinx-design\nsphinx-notfound-page\nsphinx-remove-toctrees\nsphinx>=1.5\nsphinxext-rediraffe\nthreadpoolctl>=3.1.0\ntypes-cachetools\ntyping-extensions>=3.7.4\nwatermark\nzarr>=2.5.0,<3\n```\n\n----------------------------------------\n\nTITLE: Transposing PyMC Distributions for Shape Adjustment\nDESCRIPTION: Demonstrate how to transpose a PyMC distribution to achieve a desired shape when direct specification is not possible.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/docs/source/learn/core_notebooks/dimensionality.ipynb#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ntransposed_normals = pm.Normal.dist(mu=np.array([0, 1, 2]), sigma=1, shape=(4, 3)).T\ndraw(transposed_normals)\n```\n\n----------------------------------------\n\nTITLE: First Cell Notebook Template\nDESCRIPTION: Template for the first cell of PyMC example notebooks using MyST markdown syntax\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/docs/source/contributing/jupyter_style.md#2025-04-21_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n(notebook_name)=\n# Notebook Title\n\n:::{post} Aug 31, 2021\n:tags: tag1, tag2, tags can have spaces, tag4\n:category: level\n:author: Alice Abat, Bob Barceló\n:::\n```\n\n----------------------------------------\n\nTITLE: Defining PyMC Mixture Model Documentation Structure\nDESCRIPTION: ReStructuredText documentation configuration for PyMC mixture models, defining the module reference and autosummary settings for distribution templates.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/docs/source/api/distributions/mixture.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. currentmodule:: pymc\n.. autosummary::\n   :toctree: generated\n   :template: distribution.rst\n\n   Mixture\n   NormalMixture\n   ZeroInflatedBinomial\n   ZeroInflatedNegativeBinomial\n   ZeroInflatedPoisson\n   HurdlePoisson\n   HurdleNegativeBinomial\n   HurdleGamma\n   HurdleLogNormal\n```\n\n----------------------------------------\n\nTITLE: Running all pre-commit hooks manually for PyMC project\nDESCRIPTION: Command to manually run all pre-commit hooks on all files in the PyMC project. This is useful for checking the entire codebase at once.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/docs/source/contributing/python_style.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npre-commit run --all-files\n```\n\n----------------------------------------\n\nTITLE: Generating PyMC Class Documentation Template in Jinja2\nDESCRIPTION: A Jinja2 template that generates Sphinx documentation for PyMC classes. The template creates sections for class methods and attributes using autosummary directives, with separate blocks for organizing content.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/docs/source/_templates/autosummary/class.rst#2025-04-21_snippet_0\n\nLANGUAGE: jinja2\nCODE:\n```\n{{ fullname | escape | underline}}\n\n.. currentmodule:: {{ module }}\n\n.. autoclass:: {{ objname }}\n\n   {% block methods %}\n   {% if methods %}\n\n   .. rubric:: Methods\n\n   .. autosummary::\n      :toctree: classmethods\n\n   {% for item in methods %}\n      {{ objname }}.{{ item }}\n   {%- endfor %}\n   {% endif %}\n   {% endblock %}\n\n   {% block attributes %}\n   {% if attributes %}\n   .. rubric:: Attributes\n\n   .. autosummary::\n   {% for item in attributes %}\n      ~{{ name }}.{{ item }}\n   {%- endfor %}\n   {% endif %}\n   {% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Defining Simulator Documentation Structure in RST\nDESCRIPTION: A reStructuredText template that sets up the documentation structure for the PyMC Simulator class, including module reference and method documentation using autosummary directives.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/docs/source/api/distributions/simulator.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n*********\nSimulator\n*********\n\n..\n   Manually follow the template in _templates/distribution.rst.\n   If at any point, multiple objects are listed here,\n   the pattern should instead be modified to that of the\n   other API files such as api/distributions/continuous.rst\n\n.. currentmodule:: pymc\n\n.. autoclass:: Simulator\n\n   .. rubric:: Methods\n\n   .. autosummary::\n      :toctree: classmethods\n\n      Simulator.dist\n```\n\n----------------------------------------\n\nTITLE: Running pre-commit hooks on specific files for PyMC project\nDESCRIPTION: Command to manually run pre-commit hooks on a subset of files in the PyMC project. This allows for targeted checking of specific files.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/docs/source/contributing/python_style.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npre-commit run --files <file_1> <file_2> ... <file_n>\n```\n\n----------------------------------------\n\nTITLE: Accessing Random Variables in a PyMC Model\nDESCRIPTION: Shows how to access the list of random variables stored in a PyMC model and examine their computational graph.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/docs/source/learn/core_notebooks/pymc_pytensor.ipynb#2025-04-21_snippet_29\n\nLANGUAGE: python\nCODE:\n```\nmodel.basic_RVs\n```\n\n----------------------------------------\n\nTITLE: Applying Mathematical Functions to Tensors\nDESCRIPTION: Shows how to apply mathematical functions to tensors by taking the logarithm of the previously created tensor z.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/docs/source/learn/core_notebooks/pymc_pytensor.ipynb#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nw = pt.log(z)\nw.name = \"log(x + y)\"\n```\n\n----------------------------------------\n\nTITLE: Defining API Structure in reStructuredText\nDESCRIPTION: This snippet outlines the structure of the PyMC API documentation using reStructuredText syntax. It includes a table of contents for different API components and sections for dimensionality and API extensions.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/docs/source/api.rst#2025-04-21_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. _api:\n\n***\nAPI\n***\n\n.. toctree::\n   :maxdepth: 1\n\n   api/distributions\n   api/gp\n   api/model\n   api/samplers\n   api/vi\n   api/smc\n   api/data\n   api/ode\n   api/logprob\n   api/tuning\n   api/math\n   api/pytensorf\n   api/shape_utils\n   api/backends\n   api/misc\n\n------------------\nDimensionality\n------------------\nPyMC provides numerous methods, and syntactic sugar, to easily specify the dimensionality of\nRandom Variables in modeling. Refer to :ref:`dimensionality` notebook to see examples\ndemonstrating the functionality.\n\n--------------\nAPI extensions\n--------------\n\nPlots, stats and diagnostics\n----------------------------\nPlots, stats and diagnostics are delegated to the\n:doc:`ArviZ <arviz:index>`.\nlibrary, a general purpose library for\n\"exploratory analysis of Bayesian models\".\n\n* Functions from the ``arviz.plots`` module are available through ``pymc.<function>`` or ``pymc.plots.<function>``,\n  but for their API documentation please refer to the :ref:`ArviZ documentation <arviz:plot_api>`.\n\n* Functions from the ``arviz.stats`` module are available through ``pymc.<function>`` or ``pymc.stats.<function>``,\n  but for their API documentation please refer to the :ref:`ArviZ documentation <arviz:stats_api>`.\n\nArviZ is a dependency of PyMC and so, in addition to the locations described above,\nimporting ArviZ and using ``arviz.<function>`` will also work without any extra installation.\n\nGeneralized Linear Models (GLMs)\n--------------------------------\n\nGeneralized Linear Models are delegated to the\n`Bambi <https://bambinos.github.io/bambi>`_.\nlibrary, a high-level Bayesian model-building\ninterface built on top of PyMC.\n\nBambi is not a dependency of PyMC and should be installed in addition to PyMC\nto use it to generate PyMC models via formula syntax.\n```\n\n----------------------------------------\n\nTITLE: Installing and Running Pre-commit Hooks\nDESCRIPTION: Bash commands for installing and using pre-commit hooks for code quality checks on notebooks.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/docs/source/contributing/jupyter_style.md#2025-04-21_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\npip install -U pre-commit\n```\n\nLANGUAGE: bash\nCODE:\n```\npre-commit install\n```\n\nLANGUAGE: bash\nCODE:\n```\npre-commit run --files notebook1.ipynb notebook2.ipynb\n```\n\n----------------------------------------\n\nTITLE: Displaying PyTensor Computational Graph\nDESCRIPTION: Uses the dprint function to print the computational graph of a tensor, showing the sequence of operations that will be performed.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/docs/source/learn/core_notebooks/pymc_pytensor.ipynb#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\npytensor.dprint(w)\n```\n\n----------------------------------------\n\nTITLE: Defining Referenceable Section in Markdown\nDESCRIPTION: This snippet uses a special markdown syntax to define a section that can be referenced elsewhere in the documentation. It creates a section labeled 'glossary'.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/docs/source/glossary.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n(glossary)=\n```\n\n----------------------------------------\n\nTITLE: Main PyMC Project Governance Structure\nDESCRIPTION: Core organizational diagram showing the community structure with Contributors, Recurring Contributors, Core Contributors, Steering Council and BDFL. The image illustrates the onion-like organization of the PyMC community.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/GOVERNANCE.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<img src=\"docs/community_diagram.png\" alt=\"community diagram\" width=\"600\" height=\"400\">\n```\n\n----------------------------------------\n\nTITLE: Compiling and Optimizing a PyTensor Function\nDESCRIPTION: Demonstrates how PyTensor optimizes the computation graph when compiled, showing that the division followed by multiplication simplifies to just the original value.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/docs/source/learn/core_notebooks/pymc_pytensor.ipynb#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\ng = pytensor.function(inputs=[a, b], outputs=d)\n\npytensor.dprint(g)\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Theano and Installing Theano-PyMC with Pip\nDESCRIPTION: Commands for uninstalling the original Theano package and installing the new Theano-PyMC package using Pip package manager (not recommended).\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/RELEASE-NOTES.md#2025-04-21_snippet_13\n\nLANGUAGE: Bash\nCODE:\n```\npip uninstall theano\npip install theano-pymc\n```\n\n----------------------------------------\n\nTITLE: Adding Random Sampling to DensityDist in PyMC3\nDESCRIPTION: Add random keyword to pm.DensityDist to enable passing a custom random method, allowing sampling from a DensityDist.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/RELEASE-NOTES.md#2025-04-21_snippet_23\n\nLANGUAGE: Python\nCODE:\n```\npm.DensityDist(random=custom_random_method)\n```\n\n----------------------------------------\n\nTITLE: Testing a Modified PyTensor Graph\nDESCRIPTION: Evaluates the modified computational graph with specific input values to verify that the combination of exponential and logarithm operations results in an identity function.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/docs/source/learn/core_notebooks/pymc_pytensor.ipynb#2025-04-21_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nnew_w.eval({x: 0, y: [1, np.e]})\n```\n\n----------------------------------------\n\nTITLE: Specifying PyMC Development Requirements\nDESCRIPTION: This snippet defines the requirements for the PyMC development environment. It includes a reference to a parent requirements file and specifies the installation of PyMC from the current directory.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/binder/requirements.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-r ../requirements-dev.txt\n# this installs pymc itself. it is funny that this is an absolute path,\n# but reqirements-dev.txt is relative.\n.\n```\n\n----------------------------------------\n\nTITLE: Setting Intermediate Values with eval() in PyTensor\nDESCRIPTION: Demonstrates how to set values for intermediate tensors in the computational graph when evaluating a tensor.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/docs/source/learn/core_notebooks/pymc_pytensor.ipynb#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nw.eval({z: [1, np.e]})\n```\n\n----------------------------------------\n\nTITLE: Creating a Random Variable in PyTensor\nDESCRIPTION: Shows how to define a random variable for a normal distribution in PyTensor and examines its type.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/docs/source/learn/core_notebooks/pymc_pytensor.ipynb#2025-04-21_snippet_21\n\nLANGUAGE: python\nCODE:\n```\ny = pt.random.normal(loc=0, scale=1, name=\"y\")\ny.type\n```\n\n----------------------------------------\n\nTITLE: Generating Random Samples using NumPy\nDESCRIPTION: Demonstrates how to generate random samples from a normal distribution using NumPy's random module and visualize the results with a histogram.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/docs/source/learn/core_notebooks/pymc_pytensor.ipynb#2025-04-21_snippet_20\n\nLANGUAGE: python\nCODE:\n```\na = np.random.normal(loc=0, scale=1, size=1_000)\n\nfig, ax = plt.subplots(figsize=(8, 6))\nax.hist(a, color=\"C0\", bins=15)\nax.set(title=\"Samples from a normal distribution using numpy\", ylabel=\"count\");\n```\n\n----------------------------------------\n\nTITLE: ADVI Initialization Implementation\nDESCRIPTION: Shows the initialization code for ADVI (Automatic Differentiation Variational Inference) using class inheritance.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/docs/source/contributing/developer_guide.md#2025-04-21_snippet_18\n\nLANGUAGE: python\nCODE:\n```\ndef __init__(self, *args, **kwargs):\n    super(ADVI, self).__init__(MeanField(*args, **kwargs))\n# ==> In the super class KLqp\n    super(KLqp, self).__init__(KL, MeanField(*args, **kwargs), None, beta=beta)\n```\n\n----------------------------------------\n\nTITLE: Comparing Models with Dictionary Input in PyMC3\nDESCRIPTION: Modified compare function to accept a dictionary of model-trace pairs instead of separate lists of models and traces.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/RELEASE-NOTES.md#2025-04-21_snippet_26\n\nLANGUAGE: Python\nCODE:\n```\npm.compare({model1: trace1, model2: trace2})\n```\n\n----------------------------------------\n\nTITLE: Updating PyMC3 Model Variables\nDESCRIPTION: Function to update variables defined as Data in PyMC3 models.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/RELEASE-NOTES.md#2025-04-21_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nset_data\n```\n\n----------------------------------------\n\nTITLE: Gaussian Process with Circular Kernel\nDESCRIPTION: Example of using the new Circular kernel for Gaussian Processes on circular domains like the unit circle.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/RELEASE-NOTES.md#2025-04-21_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nimport pymc as pm\nwith pm.Model():\n    gp = pm.gp.Marginal(cov_func=pm.gp.cov.Circular())\n```\n\n----------------------------------------\n\nTITLE: Importing PyMC in Version 4\nDESCRIPTION: Updated import statement for PyMC version 4, showing the transition from pymc3 to pymc package name.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/RELEASE-NOTES.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport pymc as pm\n```\n\n----------------------------------------\n\nTITLE: Restructured Text Module Documentation for PyMC Discrete Distributions\nDESCRIPTION: Documentation template defining the structure and content for PyMC's discrete distribution module. Lists all available discrete distributions and includes a special note about zero-based indexing requirements for OrderedLogistic and OrderedProbit distributions.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/docs/source/api/distributions/discrete.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. currentmodule:: pymc\n.. autosummary::\n   :toctree: generated\n   :template: distribution.rst\n\n   Bernoulli\n   BetaBinomial\n   Binomial\n   Categorical\n   DiscreteUniform\n   DiscreteWeibull\n   Geometric\n   HyperGeometric\n   NegativeBinomial\n   OrderedLogistic\n   OrderedProbit\n   Poisson\n```\n\n----------------------------------------\n\nTITLE: TensorFlow Probability Implementation\nDESCRIPTION: Equivalent model implementation using TensorFlow Probability, showing differences in API and variable handling.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/docs/source/contributing/developer_guide.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport tensorflow.compat.v1 as tf\nfrom tensorflow_probability import distributions as tfd\n\nwith tf.Session() as sess:\n    z_dist = tfd.Normal(loc=0., scale=5.)            # ==> <class 'tfp.python.distributions.normal.Normal'>\n    z = z_dist.sample()                              # ==> <class 'tensorflow.python.framework.ops.Tensor'>\n    x = tfd.Normal(loc=z, scale=1.).log_prob(5.)     # ==> <class 'tensorflow.python.framework.ops.Tensor'>\n    model_logp = z_dist.log_prob(z) + x\n    print(sess.run(x, feed_dict={z: 2.5}))           # ==> -4.0439386\n    print(sess.run(model_logp, feed_dict={z: 2.5}))  # ==> -6.6973152\n```\n\n----------------------------------------\n\nTITLE: Documenting Covariance Functions with reStructuredText in PyMC\nDESCRIPTION: This snippet uses reStructuredText to document the covariance functions available in the PyMC Gaussian Process module. It creates an auto-generated table of contents for the listed covariance functions.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/docs/source/api/gp/cov.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n********************\nCovariance Functions\n********************\n\n.. automodule:: pymc.gp.cov\n.. autosummary::\n   :toctree: generated\n\n    Constant\n    WhiteNoise\n    ExpQuad\n    RatQuad\n    Exponential\n    Matern52\n    Matern32\n    Linear\n    Polynomial\n    Cosine\n    Periodic\n    WarpedInput\n    Gibbs\n    Coregion\n    ScaledCov\n    Kron\n```\n\n----------------------------------------\n\nTITLE: Defining Timeseries Module Contents in RST\nDESCRIPTION: This RST code snippet defines the structure and contents of the timeseries module documentation. It sets the current module to 'pymc' and uses autosummary to generate a table of contents for various time series models and distributions.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/docs/source/api/distributions/timeseries.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n**********\nTimeseries\n**********\n\n.. currentmodule:: pymc\n.. autosummary::\n   :toctree: generated\n   :template: distribution.rst\n\n    AR\n    EulerMaruyama\n    GARCH11\n    GaussianRandomWalk\n    MvGaussianRandomWalk\n    MvStudentTRandomWalk\n```\n\n----------------------------------------\n\nTITLE: Documenting CustomDist Class with ReStructuredText\nDESCRIPTION: ReStructuredText markup for documenting the CustomDist class in PyMC, including module reference, class documentation, and method summary.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/docs/source/api/distributions/custom.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n**********\nCustomDist\n**********\n\n..\n   Manually follow the template in _templates/distribution.rst.\n   If at any point, multiple objects are listed here,\n   the pattern should instead be modified to that of the\n   other API files such as api/distributions/continuous.rst\n\n.. currentmodule:: pymc\n\n.. autoclass:: CustomDist\n\n   .. rubric:: Methods\n\n   .. autosummary::\n      :toctree: classmethods\n\n      CustomDist.dist\n```\n\n----------------------------------------\n\nTITLE: Documenting PyMC GP Mean Functions with reStructuredText\nDESCRIPTION: This snippet uses reStructuredText directives to generate documentation for the pymc.gp.mean module. It includes an automodule directive and an autosummary directive that lists the Zero, Constant, and Linear mean functions.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/docs/source/api/gp/mean.rst#2025-04-21_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n**************\nMean Functions\n**************\n\n.. automodule:: pymc.gp.mean\n.. autosummary::\n   :toctree: generated\n\n   Zero\n   Constant\n   Linear\n```\n\n----------------------------------------\n\nTITLE: Examining Log-Probability and Drawing Samples Outside Model Context\nDESCRIPTION: Shows how to calculate log-probability values and generate random samples from a distribution created outside a model context.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/docs/source/guides/Probability_Distributions.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n>>> pm.logp(y, 4).eval()\narray(-1.5843639373779297, dtype=float32)\n\n>>> pm.draw(y, size=3)\narray([5, 4, 3])\n```\n\n----------------------------------------\n\nTITLE: PyTensor Function API Reference\nDESCRIPTION: API reference listing of PyTensor utility functions including compile, gradient, hessian, jacobian calculations, tensor operations and data conversion utilities. These functions are core components for mathematical operations and tensor manipulations in PyMC.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/docs/source/api/pytensorf.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ncompile\ngradient\nhessian\nhessian_diag\njacobian\ninputvars\ncont_inputs\nfloatX\nintX\nconstant_fold\nCallableTensor\njoin_nonshared_inputs\nmake_shared_replacements\nconvert_data\n```\n\n----------------------------------------\n\nTITLE: Documenting freeze_dims_and_data Function in PyMC Model Optimization\nDESCRIPTION: This code snippet uses Sphinx autodoc directives to generate documentation for the freeze_dims_and_data function in the pymc.model.transform.optimization module. The function is likely used for optimizing PyMC models by freezing dimensions and data.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/docs/source/api/model/optimization.rst#2025-04-21_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. currentmodule:: pymc.model.transform.optimization\n.. autosummary::\n   :toctree: generated/\n\n   freeze_dims_and_data\n```\n\n----------------------------------------\n\nTITLE: Specifying PyMC Project Dependencies\nDESCRIPTION: This snippet lists the required Python packages and their version constraints for the PyMC project. It includes libraries for data analysis, numerical computing, and visualization, as well as utility packages for caching and threading.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/requirements.txt#2025-04-21_snippet_0\n\nLANGUAGE: Plain Text\nCODE:\n```\narviz>=0.13.0\ncachetools>=4.2.1\ncloudpickle\nnumpy>=1.25.0\npandas>=0.24.0\npytensor>=2.30.2,<2.31\nrich>=13.7.1\nscipy>=1.4.1\nthreadpoolctl>=3.1.0,<4.0.0\ntyping-extensions>=3.7.4\n```\n\n----------------------------------------\n\nTITLE: Cloning and Setting Up PyMC Repository\nDESCRIPTION: Commands to clone a forked PyMC repository, navigate to the project directory, and add the upstream repository as a remote for syncing with the main project.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/docs/source/contributing/pr_tutorial.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone git@github.com:<your GitHub handle>/pymc.git\ncd pymc\ngit remote add upstream git@github.com:pymc-devs/pymc.git\n```\n\n----------------------------------------\n\nTITLE: Setting Up Development Environment on Windows (Git Bash)\nDESCRIPTION: Commands to create a conda environment for PyMC development on Windows using Git Bash with the provided environment file.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/docs/source/contributing/pr_tutorial.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nconda env create -f conda-envs/windows-environment-dev.yml\n```\n\n----------------------------------------\n\nTITLE: Committing Changes\nDESCRIPTION: Commands to stage modified files and commit them to the local repository.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/docs/source/contributing/pr_tutorial.md#2025-04-21_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n$ git add modified_files\n$ git commit\n```\n\n----------------------------------------\n\nTITLE: Matplotlib Axes Handling - Local Variables\nDESCRIPTION: Recommended approach for working with multiple matplotlib axes using local ax variables for better code maintainability\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/docs/source/contributing/jupyter_style.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfig, axs = pyplot.subplots()\n\nax = axs[0, 1]\nax.plot(...)\nax.set(...)\n\nax = axs[1, 2]\nax.scatter(...)\n```\n\n----------------------------------------\n\nTITLE: Configuring Notebook Metadata with Extra Dependencies\nDESCRIPTION: JSON configuration examples for specifying extra dependencies in notebook metadata using myst_substitutions with different dependency specification approaches.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/docs/source/contributing/jupyter_style.md#2025-04-21_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"kernelspec\": {\n    \"name\": \"python3\",\n    \"display_name\": \"Python 3 (ipykernel)\",\n    \"language\": \"python\"\n  },\n  \"language_info\": {\n    \"name\": \"python\",\n    \"version\": \"3.9.7\",\n    \"mimetype\": \"text/x-python\",\n    \"codemirror_mode\": {\n      \"name\": \"ipython\",\n      \"version\": 3\n    },\n    \"pygments_lexer\": \"ipython3\",\n    \"nbconvert_exporter\": \"python\",\n    \"file_extension\": \".py\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running PyMC Docker Container\nDESCRIPTION: Commands to start a PyMC Docker container either with bash or with a Jupyter notebook server on port 8888. These commands should be run after successfully building the Docker image.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/docs/source/contributing/docker_container.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nbash scripts/docker_container.sh bash # running the container with bash\nbash scripts/docker_container.sh jupyter # running the container with jupyter notebook\n```\n\n----------------------------------------\n\nTITLE: Structuring PyMC Media Links in Markdown\nDESCRIPTION: Markdown formatted list of video and podcast resources for PyMC, using card-style formatting for different content categories including developer channels, conference talks, and educational content.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/docs/source/learn/videos_and_podcasts.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n(videos_and_podcasts)=\n# Videos and Podcasts\n\n:::{card} PyMC Developers Youtube channel\n\n[See all videos here](https://www.youtube.com/c/PyMCDevelopers/videos)\n:::\n\n:::{card} PyMC talks\n\nActively curated [YouTube playlist](https://www.youtube.com/playlist?list=PL1Ma_1DBbE82OVW8Fz_6Ts1oOeyOAiovy) of PyMC talks\n:::\n\n:::{card} PyMC Labs Youtube channel\n\n[See all videos here](https://www.youtube.com/c/PyMCLabs/videos)\n:::\n\n:::{card} PyMCon 2020 talks\n\n[See all videos here](https://www.youtube.com/playlist?list=PLD1x-BW9UdeG68AQj6rDRfGiFFrpZ3cgu)\n:::\n\n:::{card} Learning Bayesian Statistics podcast\n\n[See all videos here](https://www.youtube.com/channel/UCAwVseuhVrpJFfik_cMHrhQ/videos)\n:::\n```\n\n----------------------------------------\n\nTITLE: Markdown 404 Page Configuration\nDESCRIPTION: Markdown configuration for a 404 error page, including frontmatter settings and error message with navigation instructions.\nSOURCE: https://github.com/pymc-devs/pymc/blob/main/docs/source/404.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\norphan: true\n---\n\n# Page not found\n\n**Sorry, we could not find this page**\n\nClick on the navigation bar on top of the page to go to the right section\nof the default docs, or alternatively:\n\n* Go to the current [PyMC website homepage](https://www.pymc.io/)\n```"
  }
]