[
  {
    "owner": "viewcomponent",
    "repo": "view_component",
    "content": "TITLE: Defining a ViewComponent in Ruby\nDESCRIPTION: This snippet shows how to create a basic ViewComponent class called MessageComponent. It demonstrates the initialization of the component with a 'name' parameter.\nSOURCE: https://github.com/ViewComponent/view_component/blob/main/docs/index.md#2025-04-11_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\n# app/components/message_component.rb\nclass MessageComponent < ViewComponent::Base\n  def initialize(name:)\n    @name = name\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Installing ViewComponent in Rails Application\nDESCRIPTION: Add the view_component gem to your Rails application's Gemfile to enable the ViewComponent functionality.\nSOURCE: https://github.com/ViewComponent/view_component/blob/main/docs/guide/getting-started.md#2025-04-11_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\ngem \"view_component\"\n```\n\n----------------------------------------\n\nTITLE: Implementing a Basic ViewComponent with Inline ERB Template\nDESCRIPTION: Create a ViewComponent class that inherits from ViewComponent::Base. This example implements a component with an inline ERB template and an initializer that accepts a title parameter.\nSOURCE: https://github.com/ViewComponent/view_component/blob/main/docs/guide/getting-started.md#2025-04-11_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nclass ExampleComponent < ViewComponent::Base\n  erb_template <<-ERB\n    <span title=\"<%= @title %>\"><%= content %></span>\n  ERB\n\n  def initialize(title:)\n    @title = title\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Rendering a ViewComponent with Block Content in ERB View\nDESCRIPTION: Render a ViewComponent in an ERB view by instantiating it with required parameters and providing content via a block. The block content is captured and made available via the content accessor.\nSOURCE: https://github.com/ViewComponent/view_component/blob/main/docs/guide/getting-started.md#2025-04-11_snippet_3\n\nLANGUAGE: erb\nCODE:\n```\n<%= render(ExampleComponent.new(title: \"my title\")) do %>\n  Hello, World!\n<% end %>\n```\n\n----------------------------------------\n\nTITLE: Declaring a Basic ViewComponent Class in Ruby\nDESCRIPTION: A minimal example showing how to define a ViewComponent class by inheriting from ViewComponent::Base. This serves as the foundation for creating custom components.\nSOURCE: https://github.com/ViewComponent/view_component/blob/main/docs/how-it-works.md#2025-04-11_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nclass MyComponent < ViewComponent::Base\nend\n```\n\n----------------------------------------\n\nTITLE: Generating a New ViewComponent Using Rails Generator\nDESCRIPTION: Use the Rails component generator to create a new ViewComponent with specified attributes. This creates the component class, template, and test files.\nSOURCE: https://github.com/ViewComponent/view_component/blob/main/docs/guide/getting-started.md#2025-04-11_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nbin/rails generate component Example title\n\n      invoke  test_unit\n      create  test/components/example_component_test.rb\n      create  app/components/example_component.rb\n      create  app/components/example_component.html.erb\n```\n\n----------------------------------------\n\nTITLE: Rendering a ViewComponent in ERB\nDESCRIPTION: This code demonstrates how to render the MessageComponent within a Rails view. It shows the use of the render method with the component instance.\nSOURCE: https://github.com/ViewComponent/view_component/blob/main/docs/index.md#2025-04-11_snippet_2\n\nLANGUAGE: erb\nCODE:\n```\n<%# app/views/demo/index.html.erb %>\n<%= render(MessageComponent.new(name: \"World\")) %>\n```\n\n----------------------------------------\n\nTITLE: Implementing #render? Method in ViewComponent\nDESCRIPTION: Example of a ViewComponent class that implements the #render? method to conditionally render based on user confirmation status. This approach moves the conditional logic into the component itself.\nSOURCE: https://github.com/ViewComponent/view_component/blob/main/docs/guide/conditional_rendering.md#2025-04-11_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nclass ConfirmEmailComponent < ViewComponent::Base\n  erb_template <<-ERB\n    <div class=\"banner\">\n      Please confirm your email address.\n    </div>\n  ERB\n\n  def initialize(user:)\n    @user = user\n  end\n\n  def render?\n    @user.requires_confirmation?\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Defining Inline ERB Template in Ruby ViewComponent\nDESCRIPTION: Demonstrates how to define an inline ERB template within a ViewComponent class using the erb_template macro. The component initializes with a name parameter and renders a greeting.\nSOURCE: https://github.com/ViewComponent/view_component/blob/main/docs/guide/templates.md#2025-04-11_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nclass InlineErbComponent < ViewComponent::Base\n  erb_template <<~ERB\n    <h1>Hello, <%= @name %>!</h1>\n  ERB\n\n  def initialize(name)\n    @name = name\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Testing a ViewComponent in Ruby\nDESCRIPTION: This code snippet demonstrates how to write a unit test for the MessageComponent using ViewComponent::TestHelpers and Capybara matchers.\nSOURCE: https://github.com/ViewComponent/view_component/blob/main/docs/index.md#2025-04-11_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nclass MessageComponentTest < GitHub::TestCase\n  include ViewComponent::TestHelpers\n\n  test \"renders message\" do\n    render_inline(MessageComponent.new(name: \"World\"))\n\n    assert_selector \"h1\", text: \"Hello, World!\"\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Slots in Ruby ViewComponent\nDESCRIPTION: Demonstrates how to define basic slots using renders_one and renders_many in a BlogComponent class\nSOURCE: https://github.com/ViewComponent/view_component/blob/main/docs/guide/slots.md#2025-04-11_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\n# blog_component.rb\nclass BlogComponent < ViewComponent::Base\n  renders_one :header\n  renders_many :posts\nend\n```\n\n----------------------------------------\n\nTITLE: Basic ViewComponent Unit Testing with Test Helper\nDESCRIPTION: Demonstrates how to use render_inline test helper to test a ViewComponent with assertions on rendered output.\nSOURCE: https://github.com/ViewComponent/view_component/blob/main/docs/guide/testing.md#2025-04-11_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nrequire \"test_helper\"\n\nclass ExampleComponentTest < ViewComponent::TestCase\n  def test_render_component\n    render_inline(ExampleComponent.new(title: \"my title\")) { \"Hello, World!\" }\n\n    assert_component_rendered\n\n    assert_selector(\"span[title='my title']\", text: \"Hello, World!\")\n    # or, to just assert against the text:\n    assert_text(\"Hello, World!\")\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Rendering a Collection with ViewComponents in ERB\nDESCRIPTION: Demonstrates how to render a collection of products using ViewComponents in an ERB template.\nSOURCE: https://github.com/ViewComponent/view_component/blob/main/docs/guide/collections.md#2025-04-11_snippet_0\n\nLANGUAGE: erb\nCODE:\n```\n<%= render(ProductComponent.with_collection(@products)) %>\n```\n\n----------------------------------------\n\nTITLE: Using before_render Hook in ViewComponent Ruby\nDESCRIPTION: Shows how to implement the before_render lifecycle method in a ViewComponent to perform setup operations before rendering. This hook allows access to Rails helpers and is executed before the component renders.\nSOURCE: https://github.com/ViewComponent/view_component/blob/main/docs/guide/lifecycle.md#2025-04-11_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\n# app/components/example_component.rb\nclass ExampleComponent < ViewComponent::Base\n  def before_render\n    @my_icon = helpers.star_icon\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Translations in ViewComponent with YAML\nDESCRIPTION: Demonstrates how to create a sidecar YAML file to define translations for a ViewComponent. This allows component-specific translations to be bundled with the component itself.\nSOURCE: https://github.com/ViewComponent/view_component/blob/main/docs/guide/translations.md#2025-04-11_snippet_0\n\nLANGUAGE: yml\nCODE:\n```\n# app/components/example_component.yml\nen:\n  hello: \"Hello world!\"\n```\n\n----------------------------------------\n\nTITLE: Rendering Collection with ViewComponent\nDESCRIPTION: Demonstrates how to render a component for each element in a collection with additional arguments\nSOURCE: https://github.com/ViewComponent/view_component/blob/main/docs/api.md#2025-04-11_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nrender(ProductsComponent.with_collection(@products, foo: :bar))\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Component Previews in Ruby\nDESCRIPTION: Demonstrates how to create a basic ViewComponent preview class with methods for different component variations. The example shows a default preview and one that accepts a content block.\nSOURCE: https://github.com/ViewComponent/view_component/blob/main/docs/guide/previews.md#2025-04-11_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\n# test/components/previews/example_component_preview.rb\nclass ExampleComponentPreview < ViewComponent::Preview\n  def with_default_title\n    render(ExampleComponent.new(title: \"Example component default\"))\n  end\n\n  def with_content_block\n    render(ExampleComponent.new(title: \"This component accepts a block of content\")) do\n      tag.div do\n        content_tag(:span, \"Hello\")\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing Lambda Slots in ViewComponent\nDESCRIPTION: Shows how to use lambda slots for simple content rendering and component wrapping\nSOURCE: https://github.com/ViewComponent/view_component/blob/main/docs/guide/slots.md#2025-04-11_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nclass BlogComponent < ViewComponent::Base\n  renders_one :header, ->(classes:) do\n    # This isn't complex enough to be its own component yet, so we'll use a\n    # lambda slot. If it gets much bigger, it should be extracted out to a\n    # ViewComponent and rendered here with a component slot.\n    content_tag :h1 do\n      link_to title, root_path, {class: classes}\n    end\n  end\n\n  # It's also possible to return another ViewComponent with preset default values:\n  renders_many :posts, ->(title:, classes:) do\n    PostComponent.new(title: title, classes: \"my-default-class \" + classes)\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Including Helper Modules in ViewComponent\nDESCRIPTION: Demonstrates how to include a helper module directly in a ViewComponent class to make its methods available within the component.\nSOURCE: https://github.com/ViewComponent/view_component/blob/main/docs/guide/helpers.md#2025-04-11_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nmodule IconHelper\n  def icon(name)\n    tag.i data: {feather: name.to_s}\n  end\nend\n\nclass UserComponent < ViewComponent::Base\n  include IconHelper\n\n  def profile_icon\n    icon :user\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Testing ViewComponent Slots\nDESCRIPTION: Example of testing a ViewComponent that uses slots to render nested content.\nSOURCE: https://github.com/ViewComponent/view_component/blob/main/docs/guide/testing.md#2025-04-11_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\ndef test_render_component\n  component = ListComponent.new(title: \"Fruits\").tap do |c|\n    c.with_item { \"Apple\" }\n    c.with_item { \"Orange\" }\n    c.with_extra { \"<div><span>rendered html</span></div>\".html_safe }\n  end\n\n  render_inline(component)\n\n  assert_selector(\"ul\")\n  assert_selector(\"li\", text: \"Apple\")\n  assert_selector(\"li\", text: \"Orange\")\nend\n```\n\n----------------------------------------\n\nTITLE: Enabling ViewComponent Instrumentation in Rails Configuration\nDESCRIPTION: Configuration settings in Rails application.rb to enable ActiveSupport notifications for all ViewComponents and specify the event name format.\nSOURCE: https://github.com/ViewComponent/view_component/blob/main/docs/guide/instrumentation.md#2025-04-11_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\n# config/application.rb\n# Enable ActiveSupport notifications for all ViewComponents\nconfig.view_component.instrumentation_enabled = true\nconfig.view_component.use_deprecated_instrumentation_name = false\n```\n\n----------------------------------------\n\nTITLE: Avoiding Global State in ViewComponents in Ruby\nDESCRIPTION: Illustrates how to avoid coupling ViewComponents to global state by explicitly passing dependencies rather than accessing global state directly.\nSOURCE: https://github.com/ViewComponent/view_component/blob/main/docs/best_practices.md#2025-04-11_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\n# good\nclass MyComponent < ViewComponent::Base\n  def initialize(name:)\n    @name = name\n  end\nend\n\n# bad\nclass MyComponent < ViewComponent::Base\n  def initialize\n    @name = params[:name]\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Generating Basic ViewComponent\nDESCRIPTION: Shows how to generate a basic ViewComponent with title and content attributes using the Rails generator command.\nSOURCE: https://github.com/ViewComponent/view_component/blob/main/docs/guide/generators.md#2025-04-11_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nbin/rails generate component Example title content\n\n      create  app/components/example_component.rb\n      invoke  test_unit\n      create    test/components/example_component_test.rb\n      invoke  erb\n      create    app/components/example_component.html.erb\n```\n\n----------------------------------------\n\nTITLE: Rendering ViewComponents Outside the View Context\nDESCRIPTION: Render ViewComponents outside of the view context (like in background jobs or markdown processors) by instantiating a Rails controller and using its view context.\nSOURCE: https://github.com/ViewComponent/view_component/blob/main/docs/guide/getting-started.md#2025-04-11_snippet_9\n\nLANGUAGE: ruby\nCODE:\n```\nApplicationController.new.view_context.render(MyComponent.new)\n```\n\n----------------------------------------\n\nTITLE: RSpec Configuration for ViewComponent Testing\nDESCRIPTION: Shows how to configure RSpec to use ViewComponent test helpers and enable component testing.\nSOURCE: https://github.com/ViewComponent/view_component/blob/main/docs/guide/testing.md#2025-04-11_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\n# spec/rails_helper.rb\nrequire \"view_component/test_helpers\"\n\nRSpec.configure do |config|\n  # ...\n\n  config.include ViewComponent::TestHelpers, type: :component\nend\n```\n\n----------------------------------------\n\nTITLE: Handling Additional Arguments in Ruby ViewComponent\nDESCRIPTION: Demonstrates how to handle additional arguments passed to a ViewComponent when rendering a collection.\nSOURCE: https://github.com/ViewComponent/view_component/blob/main/docs/guide/collections.md#2025-04-11_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nclass ProductComponent < ViewComponent::Base\n  with_collection_parameter :item\n\n  erb_template <<-ERB\n    <li>\n      <h2><%= @item.name %></h2>\n      <span><%= @notice %></span>\n    </li>\n  ERB\n\n  def initialize(item:, notice:)\n    @item = item\n    @notice = notice\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Defining Inline Slim Template with Interpolation in Ruby ViewComponent\nDESCRIPTION: Shows how to define an inline Slim template within a ViewComponent, demonstrating the need to escape interpolations to evaluate them in the component context.\nSOURCE: https://github.com/ViewComponent/view_component/blob/main/docs/guide/templates.md#2025-04-11_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nclass InlineSlimComponent < ViewComponent::Base\n  slim_template <<~SLIM\n    p Hello, #{name}!\n    p Hello, \\#{name}!\n  SLIM\n\n  def name\n    \"World\"\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Custom Component Call Method Implementation\nDESCRIPTION: Example of implementing a custom call method that wraps parent component rendering in a div\nSOURCE: https://github.com/ViewComponent/view_component/blob/main/docs/api.md#2025-04-11_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\ndef call\n  \"<div>#{render_parent_to_string}</div>\"\nend\n```\n\n----------------------------------------\n\nTITLE: Rendering Basic Slots in ERB Template\nDESCRIPTION: Shows how to render the defined slots in an ERB template within the blog component\nSOURCE: https://github.com/ViewComponent/view_component/blob/main/docs/guide/slots.md#2025-04-11_snippet_1\n\nLANGUAGE: erb\nCODE:\n```\n<%# blog_component.html.erb %>\n<h1><%= header %></h1>\n\n<% posts.each do |post| %>\n  <%= post %>\n<% end %>\n```\n\n----------------------------------------\n\nTITLE: Defining Private Methods in ViewComponents in Ruby\nDESCRIPTION: Shows how to properly define ViewComponent instance methods as private since they will still be accessible in the component template.\nSOURCE: https://github.com/ViewComponent/view_component/blob/main/docs/best_practices.md#2025-04-11_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\n# good\nclass MyComponent < ViewComponent::Base\n  private\n\n  def method_used_in_template\n  end\nend\n\n# bad\nclass MyComponent < ViewComponent::Base\n  def method_used_in_template\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Generating ViewComponent with Sidecar Directory in Rails Console\nDESCRIPTION: Demonstrates the command to generate a ViewComponent with a sidecar directory structure using the Rails generator with the --sidecar flag.\nSOURCE: https://github.com/ViewComponent/view_component/blob/main/docs/guide/templates.md#2025-04-11_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nbin/rails generate component Example title --sidecar\n  invoke  test_unit\n  create  test/components/example_component_test.rb\n  create  app/components/example_component.rb\n  create  app/components/example_component/example_component.html.erb\n```\n\n----------------------------------------\n\nTITLE: Rendering a ViewComponent with String Content Using with_content\nDESCRIPTION: Use the with_content method to pass string content to a ViewComponent instead of using a block. This approach works in controllers where block content isn't supported.\nSOURCE: https://github.com/ViewComponent/view_component/blob/main/docs/guide/getting-started.md#2025-04-11_snippet_5\n\nLANGUAGE: erb\nCODE:\n```\n<%= render(ExampleComponent.new(title: \"my title\").with_content(\"Hello, World!\")) %>\n```\n\n----------------------------------------\n\nTITLE: Implementing #call Method in Ruby ViewComponent\nDESCRIPTION: Shows how to define a ViewComponent that renders without a template file by implementing a #call method. The component conditionally renders different links based on an active state.\nSOURCE: https://github.com/ViewComponent/view_component/blob/main/docs/guide/templates.md#2025-04-11_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\n# app/components/inline_component.rb\nclass InlineComponent < ViewComponent::Base\n  def call\n    if active?\n      link_to \"Cancel integration\", integration_path, method: :delete\n    else\n      link_to \"Integrate now!\", integration_path\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Rendering ViewComponents from Controllers\nDESCRIPTION: Render a ViewComponent directly from a controller action. Note that content can't be passed via a block in controllers, and layouts may not be included in Rails versions earlier than 6.1.\nSOURCE: https://github.com/ViewComponent/view_component/blob/main/docs/guide/getting-started.md#2025-04-11_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\ndef show\n  render(ExampleComponent.new(title: \"My Title\"))\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing Variant-specific #call Methods in Ruby ViewComponent\nDESCRIPTION: Demonstrates how to define variant-specific rendering methods in a ViewComponent, allowing different outputs for different Action Pack variants.\nSOURCE: https://github.com/ViewComponent/view_component/blob/main/docs/guide/templates.md#2025-04-11_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nclass InlineVariantComponent < ViewComponent::Base\n  def call_phone\n    link_to \"Phone\", phone_path\n  end\n\n  def call\n    link_to \"Default\", default_path\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Simplified Component Rendering with #render? Hook\nDESCRIPTION: Simplified ERB template that renders a component without conditional logic in the view. The component's internal #render? method handles the conditional rendering.\nSOURCE: https://github.com/ViewComponent/view_component/blob/main/docs/guide/conditional_rendering.md#2025-04-11_snippet_3\n\nLANGUAGE: erb\nCODE:\n```\n<%= render(ConfirmEmailComponent.new(user: current_user)) %>\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic ViewComponent for Collection Items in Ruby\nDESCRIPTION: Shows the structure of a basic ViewComponent class for rendering individual items from a collection.\nSOURCE: https://github.com/ViewComponent/view_component/blob/main/docs/guide/collections.md#2025-04-11_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nclass ProductComponent < ViewComponent::Base\n  def initialize(product:)\n    @product = product\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Testing ViewComponent Slots with Content\nDESCRIPTION: Demonstrates testing components that use slots with different content blocks.\nSOURCE: https://github.com/ViewComponent/view_component/blob/main/docs/guide/testing.md#2025-04-11_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\ndef test_renders_slots_with_content\n  render_inline(SlotsComponent.new(footer: \"Bye!\")) do |component|\n    component.with_title { \"Hello!\" }\n    component.with_body { \"Have a nice day.\" }\n  end\n\n  assert_selector(\".title\", text: \"Hello!\")\n  assert_selector(\".body\", text: \"Have a nice day.\")\nend\n```\n\n----------------------------------------\n\nTITLE: Customizing Collection Parameter Name in Ruby ViewComponent\nDESCRIPTION: Illustrates how to use with_collection_parameter to change the name of the collection parameter passed to the component.\nSOURCE: https://github.com/ViewComponent/view_component/blob/main/docs/guide/collections.md#2025-04-11_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nclass ProductComponent < ViewComponent::Base\n  with_collection_parameter :item\n\n  def initialize(item:)\n    @item = item\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: System Testing ViewComponents\nDESCRIPTION: Example of system testing ViewComponents with interactive behaviors.\nSOURCE: https://github.com/ViewComponent/view_component/blob/main/docs/guide/testing.md#2025-04-11_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nclass MyComponentSystemTest < ActionDispatch::SystemTestCase\n  def test_default_preview\n    visit(\"/rails/view_components/my_component/default\")\n\n    click_on(\"Open dialog\")\n\n    assert_text(\"Test Dialog\")\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Accessing Helpers Through the Helpers Proxy\nDESCRIPTION: Shows how to access helper methods through the 'helpers' proxy without explicitly including the helper module.\nSOURCE: https://github.com/ViewComponent/view_component/blob/main/docs/guide/helpers.md#2025-04-11_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nclass UserComponent < ViewComponent::Base\n  def profile_icon\n    helpers.icon :user\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Using #render_parent with Inline Templates in Ruby ViewComponent\nDESCRIPTION: Shows how to use the #render_parent method with inline templates in a ViewComponent subclass to include the parent's template content.\nSOURCE: https://github.com/ViewComponent/view_component/blob/main/docs/guide/templates.md#2025-04-11_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\nclass MyComponent < ViewComponent::Base\n  erb_template <<~ERB\n    <div>\n      <%= render_parent %>\n    </div>\n  ERB\nend\n```\n\n----------------------------------------\n\nTITLE: Rendering Parent Template in Ruby ViewComponent Subclass\nDESCRIPTION: Illustrates how to render a parent component's template from a subclass template using the #render_parent method in ERB.\nSOURCE: https://github.com/ViewComponent/view_component/blob/main/docs/guide/templates.md#2025-04-11_snippet_5\n\nLANGUAGE: erb\nCODE:\n```\n<%# my_link_component.html.erb %>\n<div class=\"base-component-template\">\n  <%= render_parent %>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Testing ViewComponents without Capybara\nDESCRIPTION: Shows how to test components using Nokogiri when Capybara is not available.\nSOURCE: https://github.com/ViewComponent/view_component/blob/main/docs/guide/testing.md#2025-04-11_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\ndef test_render_component\n  result = render_inline(ExampleComponent.new(title: \"my title\")) { \"Hello, World!\" }\n\n  assert_includes result.css(\"span[title='my title']\").to_html, \"Hello, World!\"\nend\n```\n\n----------------------------------------\n\nTITLE: Rendering ViewComponent Collection with Additional Arguments in ERB\nDESCRIPTION: Shows how to pass additional arguments when rendering a collection of ViewComponents.\nSOURCE: https://github.com/ViewComponent/view_component/blob/main/docs/guide/collections.md#2025-04-11_snippet_3\n\nLANGUAGE: erb\nCODE:\n```\n<%= render(ProductComponent.with_collection(@products, notice: \"hi\")) %>\n```\n\n----------------------------------------\n\nTITLE: Defining Per-Locale Translation Files in ViewComponent\nDESCRIPTION: Shows how to organize translations into separate files for different locales. This approach enables better organization of multi-language components.\nSOURCE: https://github.com/ViewComponent/view_component/blob/main/docs/guide/translations.md#2025-04-11_snippet_1\n\nLANGUAGE: yml\nCODE:\n```\n# app/components/example_component.en.yml\nen:\n  hello: \"Hello world!\"\n\n# app/components/example_component.fr.yml\nfr:\n  hello: \"Bonjour le monde !\"\n```\n\n----------------------------------------\n\nTITLE: Passing Dynamic Parameters to Component Previews in Ruby\nDESCRIPTION: Shows how to create a component preview that accepts URL parameters for dynamic testing. Parameters can be passed via the URL to customize component rendering.\nSOURCE: https://github.com/ViewComponent/view_component/blob/main/docs/guide/previews.md#2025-04-11_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\n# test/components/previews/example_component_preview.rb\nclass ExampleComponentPreview < ViewComponent::Preview\n  def with_dynamic_title(title: \"Example component default\")\n    render(ExampleComponent.new(title: title))\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Alternative Methods for Accessing Translations in ViewComponents\nDESCRIPTION: Demonstrates different approaches to access translations through helpers or the I18n module directly. These methods provide more explicit translation lookups.\nSOURCE: https://github.com/ViewComponent/view_component/blob/main/docs/guide/translations.md#2025-04-11_snippet_4\n\nLANGUAGE: erb\nCODE:\n```\n<%# app/components/example_component.html.erb %>\n<%= helpers.t(\"hello\") %>\n<%= I18n.t(\"hello\") %>\n```\n\n----------------------------------------\n\nTITLE: Using the use_helpers Method with ERB Template\nDESCRIPTION: Shows how to use the 'use_helpers' method to make external helper methods available directly in the component and use them in an ERB template.\nSOURCE: https://github.com/ViewComponent/view_component/blob/main/docs/guide/helpers.md#2025-04-11_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nclass UseHelpersComponent < ViewComponent::Base\n  use_helpers :icon, :icon?\n\n  erb_template <<-ERB\n    <div class=\"icon\">\n      <%= icon? ? icon(:user) : icon(:guest) %>\n    </div>\n  ERB\nend\n```\n\n----------------------------------------\n\nTITLE: Using Delegate with Helpers Proxy\nDESCRIPTION: Demonstrates how to use the 'delegate' method to delegate specific helper methods to the helpers proxy for cleaner syntax.\nSOURCE: https://github.com/ViewComponent/view_component/blob/main/docs/guide/helpers.md#2025-04-11_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nclass UserComponent < ViewComponent::Base\n  delegate :icon, to: :helpers\n\n  def profile_icon\n    icon :user\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Using #render_parent_to_string in Ruby ViewComponent #call Method\nDESCRIPTION: Demonstrates how to use #render_parent_to_string inside a #call method to get the parent's rendered content as a string and wrap it in a new element.\nSOURCE: https://github.com/ViewComponent/view_component/blob/main/docs/guide/templates.md#2025-04-11_snippet_7\n\nLANGUAGE: ruby\nCODE:\n```\nclass MyComponent < ViewComponent::Base\n  def call\n    content_tag(\"div\") do\n      render_parent_to_string\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Testing ViewComponents with Variants\nDESCRIPTION: Shows how to test components with different variants using with_variant helper.\nSOURCE: https://github.com/ViewComponent/view_component/blob/main/docs/guide/testing.md#2025-04-11_snippet_7\n\nLANGUAGE: ruby\nCODE:\n```\ndef test_render_component_for_tablet\n  with_variant :tablet do\n    render_inline(ExampleComponent.new(title: \"my title\")) { \"Hello, tablets!\" }\n\n    assert_selector(\"span[title='my title']\", text: \"Hello, tablets!\")\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Accessing Collection Counter in Ruby ViewComponent\nDESCRIPTION: Shows how to access the collection counter variable within a ViewComponent.\nSOURCE: https://github.com/ViewComponent/view_component/blob/main/docs/guide/collections.md#2025-04-11_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\nclass ProductComponent < ViewComponent::Base\n  erb_template <<-ERB\n    <li>\n      <%= @counter %> <%= @product.name %>\n    </li>\n  ERB\n\n  def initialize(product:, product_counter:)\n    @product = product\n    @counter = product_counter\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Testing ViewComponents with Different Formats\nDESCRIPTION: Example of testing components with different request formats using with_format helper.\nSOURCE: https://github.com/ViewComponent/view_component/blob/main/docs/guide/testing.md#2025-04-11_snippet_8\n\nLANGUAGE: ruby\nCODE:\n```\ndef test_render_component_as_json\n  with_format :json do\n    render_inline(MultipleFormatsComponent.new)\n\n    assert_equal(rendered_json[\"hello\"], \"world\")\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Using Collection Iteration Context in Ruby ViewComponent\nDESCRIPTION: Demonstrates how to access and use the iteration context within a ViewComponent for a collection item.\nSOURCE: https://github.com/ViewComponent/view_component/blob/main/docs/guide/collections.md#2025-04-11_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\nclass ProductComponent < ViewComponent::Base\n  erb_template <<-ERB\n    <li class=\"<%= \"featured\" if @iteration.first? %>\">\n      <%= @product.name %>\n    </li>\n  ERB\n\n  def initialize(product:, product_iteration:)\n    @product = product\n    @iteration = product_iteration\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Setting Action Pack Request Variant\nDESCRIPTION: Shows how to set Action Pack request variants for specific ViewComponent rendering scenarios.\nSOURCE: https://github.com/ViewComponent/view_component/blob/main/docs/api.md#2025-04-11_snippet_7\n\nLANGUAGE: ruby\nCODE:\n```\nwith_variant(:phone) do\n  render_inline(MyComponent.new)\nend\n```\n\n----------------------------------------\n\nTITLE: Using use_helpers with 'from' Keyword\nDESCRIPTION: Demonstrates how to use the 'use_helpers' method with the 'from' keyword to include specific methods from a helper module.\nSOURCE: https://github.com/ViewComponent/view_component/blob/main/docs/guide/helpers.md#2025-04-11_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nclass UserComponent < ViewComponent::Base\n  use_helpers :icon, :icon?, from: IconHelper\n\n  def profile_icon\n    icon? ? icon(:user) : icon(:guest)\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Passing Parameters to Previews in Tests\nDESCRIPTION: Shows how to pass parameters to component previews in test cases, allowing for customized testing scenarios without modifying the preview definition.\nSOURCE: https://github.com/ViewComponent/view_component/blob/main/docs/guide/previews.md#2025-04-11_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nclass ExampleComponentTest < ViewComponent::TestCase\n  def test_render_preview\n    render_preview(:with_default_title, params: {message: \"Hello, world!\"})\n\n    assert_text(\"Hello, world!\")\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Using use_helpers with Module Name Prefix\nDESCRIPTION: Shows how to use the 'use_helpers' method with the 'prefix: true' option to prefix helper methods with the name of the helper module.\nSOURCE: https://github.com/ViewComponent/view_component/blob/main/docs/guide/helpers.md#2025-04-11_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\nclass UserComponent < ViewComponent::Base\n  use_helpers :icon, :icon?, from: IconHelper, prefix: true\n\n  def profile_icon\n    icon_helper_icon? ? icon_helper_icon(:user) : icon_helper_icon(:guest)\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Passing Parameters to Preview Templates as Locals\nDESCRIPTION: Shows how to pass URL parameters to preview templates as local variables, enabling dynamic customization of preview displays.\nSOURCE: https://github.com/ViewComponent/view_component/blob/main/docs/guide/previews.md#2025-04-11_snippet_12\n\nLANGUAGE: ruby\nCODE:\n```\n# test/components/previews/cell_component_preview.rb\nclass CellComponentPreview < ViewComponent::Preview\n  def default(title: \"Default title\", subtitle: \"A subtitle\")\n    render_with_template(locals: {\n      title: title,\n      subtitle: subtitle\n    })\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Using use_helpers with Custom Prefix\nDESCRIPTION: Demonstrates how to use the 'use_helpers' method with a custom prefix for the helper methods.\nSOURCE: https://github.com/ViewComponent/view_component/blob/main/docs/guide/helpers.md#2025-04-11_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\nclass UserComponent < ViewComponent::Base\n  use_helpers :icon, :icon?, from: IconHelper, prefix: :user\n\n  def profile_icon\n    user_icon? ? user_icon(:user) : user_icon(:guest)\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Generating ViewComponent with Preview\nDESCRIPTION: Shows how to generate a ViewComponent with an associated preview file.\nSOURCE: https://github.com/ViewComponent/view_component/blob/main/docs/guide/generators.md#2025-04-11_snippet_5\n\nLANGUAGE: console\nCODE:\n```\nbin/rails generate component Example title --preview\n\n      create  app/components/example_component.rb\n      invoke  test_unit\n      create    test/components/example_component_test.rb\n      invoke  preview\n      create    test/components/previews/example_component_preview.rb\n      invoke  erb\n      create    app/components/example_component.html.erb\n```\n\n----------------------------------------\n\nTITLE: Rendering Collection with Spacer Component in ERB\nDESCRIPTION: Shows how to use a spacer component between items when rendering a collection of ViewComponents.\nSOURCE: https://github.com/ViewComponent/view_component/blob/main/docs/guide/collections.md#2025-04-11_snippet_7\n\nLANGUAGE: erb\nCODE:\n```\n<%= render(ProductComponent.with_collection(@products, spacer_component: SpacerComponent.new)) %>\n```\n\n----------------------------------------\n\nTITLE: Using Singular use_helper Method\nDESCRIPTION: Shows the usage of the singular 'use_helper' method to include a single helper method from a module.\nSOURCE: https://github.com/ViewComponent/view_component/blob/main/docs/guide/helpers.md#2025-04-11_snippet_7\n\nLANGUAGE: ruby\nCODE:\n```\nclass UserComponent < ViewComponent::Base\n  use_helper :icon, from: IconHelper\n\n  def profile_icon\n    icon :user\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Handling Nested URL Helpers in ViewComponent\nDESCRIPTION: Demonstrates the correct way to use nested URL helpers in ViewComponent by explicitly passing options rather than relying on the current request context.\nSOURCE: https://github.com/ViewComponent/view_component/blob/main/docs/guide/helpers.md#2025-04-11_snippet_8\n\nLANGUAGE: ruby\nCODE:\n```\n# bad\nedit_user_path # implicitly depends on current request to provide `user`\n\n# good\nedit_user_path(user: current_user)\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Preview Controller\nDESCRIPTION: Demonstrates how to create a custom preview controller by including the required ViewComponent::PreviewActions module in a base controller class.\nSOURCE: https://github.com/ViewComponent/view_component/blob/main/docs/guide/previews.md#2025-04-11_snippet_14\n\nLANGUAGE: ruby\nCODE:\n```\nclass MyPreviewController < ActionController::Base\n  include ViewComponent::PreviewActions\nend\n```\n\n----------------------------------------\n\nTITLE: Subscribing to ViewComponent Render Events with ActiveSupport Notifications\nDESCRIPTION: Code example showing how to subscribe to the ViewComponent render event using ActiveSupport::Notifications API, with access to event name and payload details.\nSOURCE: https://github.com/ViewComponent/view_component/blob/main/docs/guide/instrumentation.md#2025-04-11_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nActiveSupport::Notifications.subscribe(\"render.view_component\") do |event| # or !render.view_component\n  event.name    # => \"render.view_component\"\n  event.payload # => { name: \"MyComponent\", identifier: \"/Users/mona/project/app/components/my_component.rb\" }\nend\n```\n\n----------------------------------------\n\nTITLE: Using Inherited Translations in Ruby Child Component\nDESCRIPTION: Shows how to access both inherited and overridden translations in a child component's Ruby class. This demonstrates the inheritance mechanism in action.\nSOURCE: https://github.com/ViewComponent/view_component/blob/main/docs/guide/translations.md#2025-04-11_snippet_7\n\nLANGUAGE: ruby\nCODE:\n```\n# app/components/child_component.rb\nclass ChildComponent < ParentComponent\n  def call\n    t(\".hello\") # => \"Hello world!\" (inherited)\n    t(\".greeting\") # => \"Howdy!\"    (overridden)\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Rack-Mini-Profiler for ViewComponent Profiling\nDESCRIPTION: Development environment configuration to enable profiling of ViewComponent rendering in rack-mini-profiler alongside views and partials.\nSOURCE: https://github.com/ViewComponent/view_component/blob/main/docs/guide/instrumentation.md#2025-04-11_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\n# config/environments/development.rb\n# Profile rendering of ViewComponents\nRack::MiniProfilerRails.subscribe(\"render.view_component\") do |_name, start, finish, _id, payload|\n  Rack::MiniProfilerRails.render_notification_handler(\n    Rack::MiniProfilerRails.shorten_identifier(payload[:identifier]),\n    finish,\n    start\n  )\nend\n```\n\n----------------------------------------\n\nTITLE: Full RSpec Configuration for ViewComponent Testing\nDESCRIPTION: Complete RSpec configuration including test helpers, system test helpers, and Capybara matchers.\nSOURCE: https://github.com/ViewComponent/view_component/blob/main/docs/guide/testing.md#2025-04-11_snippet_9\n\nLANGUAGE: ruby\nCODE:\n```\n# spec/rails_helper.rb\nrequire \"view_component/test_helpers\"\nrequire \"view_component/system_test_helpers\"\nrequire \"capybara/rspec\"\n\nRSpec.configure do |config|\n  config.include ViewComponent::TestHelpers, type: :component\n  config.include ViewComponent::SystemTestHelpers, type: :component\n  config.include Capybara::RSpecMatchers, type: :component\nend\n```\n\n----------------------------------------\n\nTITLE: Testing ViewComponent Preview\nDESCRIPTION: Shows how to test component previews using render_preview helper.\nSOURCE: https://github.com/ViewComponent/view_component/blob/main/docs/guide/testing.md#2025-04-11_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nclass ExampleComponentTest < ViewComponent::TestCase\n  def test_render_preview\n    render_preview(:with_default_title)\n\n    assert_text(\"Example component default\")\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: System Testing ViewComponents with Layouts\nDESCRIPTION: Shows how to system test components with and without layouts using with_rendered_component_path.\nSOURCE: https://github.com/ViewComponent/view_component/blob/main/docs/guide/testing.md#2025-04-11_snippet_10\n\nLANGUAGE: ruby\nCODE:\n```\nclass ViewComponentSystemTest < ViewComponent::SystemTestCase\n  def test_simple_js_interaction_in_browser_with_layout\n    with_rendered_component_path(render_inline(SimpleJavascriptInteractionWithoutJsIncludedComponent.new), layout: \"application\") do |path|\n      # ...\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Trailing Whitespace Stripping in Ruby ViewComponent\nDESCRIPTION: Shows how to use the strip_trailing_whitespace class method to control whether trailing whitespace is stripped from component templates.\nSOURCE: https://github.com/ViewComponent/view_component/blob/main/docs/guide/templates.md#2025-04-11_snippet_8\n\nLANGUAGE: ruby\nCODE:\n```\nclass MyComponent < ViewComponent::Base\n  # do strip whitespace\n  strip_trailing_whitespace\n\n  # don't strip whitespace\n  strip_trailing_whitespace(false)\nend\n```\n\n----------------------------------------\n\nTITLE: Basic ViewComponent ERB Template\nDESCRIPTION: A simple ERB template that outputs the current time. This template gets compiled into a method on the component class during application boot.\nSOURCE: https://github.com/ViewComponent/view_component/blob/main/docs/how-it-works.md#2025-04-11_snippet_1\n\nLANGUAGE: erb\nCODE:\n```\n<%= Time.now %>\n```\n\n----------------------------------------\n\nTITLE: Using Preview Methods in ViewComponent Tests\nDESCRIPTION: Demonstrates how to use render_preview in ViewComponent test cases. This allows reusing preview configurations in unit tests for consistent testing.\nSOURCE: https://github.com/ViewComponent/view_component/blob/main/docs/guide/previews.md#2025-04-11_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nclass ExampleComponentTest < ViewComponent::TestCase\n  def test_render_preview\n    render_preview(:with_default_title)\n\n    assert_text(\"Example component default\")\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Generating Namespaced ViewComponent\nDESCRIPTION: Demonstrates generating a namespaced component under the Sections namespace.\nSOURCE: https://github.com/ViewComponent/view_component/blob/main/docs/guide/generators.md#2025-04-11_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nbin/rails generate component Sections::Example title content\n\n      create  app/components/sections/example_component.rb\n      invoke  test_unit\n      create    test/components/sections/example_component_test.rb\n      invoke  erb\n      create    app/components/sections/example_component.html.erb\n```\n\n----------------------------------------\n\nTITLE: Setting Explicit Preview Class in Tests\nDESCRIPTION: Demonstrates how to explicitly specify a preview class when rendering a preview in tests, useful when the preview class can't be automatically inferred from the test file name.\nSOURCE: https://github.com/ViewComponent/view_component/blob/main/docs/guide/previews.md#2025-04-11_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nclass ExampleTest < ViewComponent::TestCase\n  def test_render_preview\n    render_preview(:with_default_title, from: ExampleComponentPreview)\n\n    assert_text(\"Hello, world!\")\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring ViewComponent Path\nDESCRIPTION: Ruby configuration code for setting custom ViewComponent path and eager load paths in Rails application.\nSOURCE: https://github.com/ViewComponent/view_component/blob/main/docs/guide/generators.md#2025-04-11_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\n# config/application.rb\nconfig.view_component.view_component_path = \"app/views/components\"\nconfig.eager_load_paths << Rails.root.join(\"app/views/components\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Layout for Component Previews\nDESCRIPTION: Shows how to set a custom layout for component previews at the class level. This allows previews to render with specific layouts different from the application default.\nSOURCE: https://github.com/ViewComponent/view_component/blob/main/docs/guide/previews.md#2025-04-11_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\n# test/components/previews/example_component_preview.rb\nclass ExampleComponentPreview < ViewComponent::Preview\n  layout \"admin\"\nend\n```\n\n----------------------------------------\n\nTITLE: Generating ViewComponent with Slim Template\nDESCRIPTION: Shows generation of a ViewComponent using Slim template engine instead of default ERB.\nSOURCE: https://github.com/ViewComponent/view_component/blob/main/docs/guide/generators.md#2025-04-11_snippet_3\n\nLANGUAGE: console\nCODE:\n```\nbin/rails generate component Example title --template-engine slim\n\n      create  app/components/example_component.rb\n      invoke  test_unit\n      create    test/components/example_component_test.rb\n      invoke  slim\n      create    app/components/example_component.html.slim\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Preview Layout in Application\nDESCRIPTION: Demonstrates how to set a default layout for all component previews and index pages in the application configuration.\nSOURCE: https://github.com/ViewComponent/view_component/blob/main/docs/guide/previews.md#2025-04-11_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\n# config/application.rb\n# Set the default layout to app/views/layouts/component_preview.html.erb\nconfig.view_component.default_preview_layout = \"component_preview\"\n```\n\n----------------------------------------\n\nTITLE: Generating ViewComponent with Locale Files\nDESCRIPTION: Shows generation of a ViewComponent with associated locale translation files.\nSOURCE: https://github.com/ViewComponent/view_component/blob/main/docs/guide/generators.md#2025-04-11_snippet_7\n\nLANGUAGE: console\nCODE:\n```\nbin/rails generate component Example title --locale\n\n      create  app/components/example_component.rb\n      invoke  test_unit\n      create    test/components/example_component_test.rb\n      invoke  locale\n      create    app/components/example_component.yml\n      invoke  erb\n      create    app/components/example_component.html.erb\n```\n\n----------------------------------------\n\nTITLE: Configuring Additional Preview Paths\nDESCRIPTION: Shows how to configure additional paths where the application should look for component previews, beyond the default test/components/previews directory.\nSOURCE: https://github.com/ViewComponent/view_component/blob/main/docs/guide/previews.md#2025-04-11_snippet_7\n\nLANGUAGE: ruby\nCODE:\n```\n# config/application.rb\nconfig.view_component.preview_paths << \"#{Rails.root}/lib/component_previews\"\n```\n\n----------------------------------------\n\nTITLE: Generating ViewComponent with Sidecar Directory\nDESCRIPTION: Demonstrates generating a ViewComponent with template in a sidecar directory structure.\nSOURCE: https://github.com/ViewComponent/view_component/blob/main/docs/guide/generators.md#2025-04-11_snippet_8\n\nLANGUAGE: console\nCODE:\n```\nbin/rails generate component Example title --sidecar\n\n      create  app/components/example_component.rb\n      invoke  test_unit\n      create    test/components/example_component_test.rb\n      invoke  erb\n      create    app/components/example_component/example_component.html.erb\n```\n\n----------------------------------------\n\nTITLE: Customizing Preview Route Path\nDESCRIPTION: Demonstrates how to change the default route path for component previews from /rails/view_components to a custom endpoint.\nSOURCE: https://github.com/ViewComponent/view_component/blob/main/docs/guide/previews.md#2025-04-11_snippet_8\n\nLANGUAGE: ruby\nCODE:\n```\n# config/application.rb\nconfig.view_component.preview_route = \"/previews\"\n```\n\n----------------------------------------\n\nTITLE: Rendering OnOffSwitch Component Template in ERB\nDESCRIPTION: The ERB template for the OnOffSwitch component that renders a toggle button with different styles based on its state. It handles enabled/disabled states with appropriate visual feedback and includes space for content to be displayed alongside the toggle.\nSOURCE: https://github.com/ViewComponent/view_component/blob/main/docs/case-studies/jellyswitch.md#2025-04-11_snippet_1\n\nLANGUAGE: erb\nCODE:\n```\n<div class=\"d-flex align-items-center\">\n  <% if !disabled %>\n    <%= link_to path, class: \"text-body\", remote: true do %>\n      <span style=\"font-size: 20pt\">\n        <% if predicate %>\n          <span class=\"text-success\">\n            <i class=\"<%= icon_class %>\"></i>\n          </span>\n        <% else %>\n          <span class=\"text-danger\">\n            <i class=\"<%= icon_class %>\"></i>\n          </span>\n        <% end %>\n      </span>\n    <% end %>\n  <% else %>\n    <span style=\"font-size: 20pt\">\n      <span class=\"text-muted\">\n        <i class=\"<%= icon_class %>\"></i>\n      </span>\n    </span>\n  <% end %>\n  &nbsp;\n  <%= content %>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Preview with Template\nDESCRIPTION: Shows how to create a component preview that uses a separate template file rather than rendering the component directly in the preview method.\nSOURCE: https://github.com/ViewComponent/view_component/blob/main/docs/guide/previews.md#2025-04-11_snippet_9\n\nLANGUAGE: ruby\nCODE:\n```\n# test/components/previews/cell_component_preview.rb\nclass CellComponentPreview < ViewComponent::Preview\n  def default\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Rendering ViewComponent Without Monkey Patch in ERB\nDESCRIPTION: This ERB snippet demonstrates how to render a ViewComponent when the render monkey patch is disabled. It uses the render_component method instead of the standard render method.\nSOURCE: https://github.com/ViewComponent/view_component/blob/main/docs/compatibility.md#2025-04-11_snippet_1\n\nLANGUAGE: erb\nCODE:\n```\n<%= render_component Component.new(message: \"bar\") %>\n```\n\n----------------------------------------\n\nTITLE: Creating ERB Template for Component Preview\nDESCRIPTION: Shows how to create an ERB template file that will be used to render a component preview. The template provides context for how the component should be displayed.\nSOURCE: https://github.com/ViewComponent/view_component/blob/main/docs/guide/previews.md#2025-04-11_snippet_10\n\nLANGUAGE: erb\nCODE:\n```\n<%# test/components/previews/cell_component_preview/default.html.erb %>\n<table class=\"table\">\n  <tbody>\n    <tr>\n      <%= render CellComponent.new %>\n    </tr>\n  </tbody>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Using Polymorphic Slots with ViewComponent in ERB Templates\nDESCRIPTION: Demonstrates how to use a component with polymorphic slots in an ERB template, showing two list items with different leading visuals (avatar and icon).\nSOURCE: https://github.com/ViewComponent/view_component/blob/main/docs/history.md#2025-04-11_snippet_1\n\nLANGUAGE: erb\nCODE:\n```\n<%= render List.new do |component| %>\n  <% component.with_item do |item| %>\n    <% item.leading_visual_avatar(src: \"assets/user/1234.png\") %>\n    Profile\n  <% end %>\n  <% component.with_item do |item| %>\n    <% item.leading_visual_icon(icon: :gear) %>\n    Settings\n  <% end %>\n<% end %>\n```\n\n----------------------------------------\n\nTITLE: Using Custom Template Path for Component Preview\nDESCRIPTION: Demonstrates how to specify a custom template path for a component preview, allowing more flexibility in organizing preview templates.\nSOURCE: https://github.com/ViewComponent/view_component/blob/main/docs/guide/previews.md#2025-04-11_snippet_11\n\nLANGUAGE: ruby\nCODE:\n```\n# test/components/previews/cell_component_preview.rb\nclass CellComponentPreview < ViewComponent::Preview\n  def default\n    render_with_template(template: \"custom_cell_component_preview/my_preview_template\")\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Manual Implementation of Polymorphic Slot Behavior\nDESCRIPTION: A workaround for polymorphic slots using a type parameter and case statement to determine which component to render, while still supporting content wrapping.\nSOURCE: https://github.com/ViewComponent/view_component/blob/main/docs/history.md#2025-04-11_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nrenders_many :items do |type, *args, **kwargs|\n  content_tag :td, class: kwargs[:table_row_classes] do\n    case type\n    when :foo\n      RowFoo.new(*args, **kwargs)\n    when :bar\n      RowBar.new(*args, **kwargs)\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Preview Controller\nDESCRIPTION: Shows how to configure a custom controller for component previews in the application configuration, which allows adding authentication, authorization, or other custom behavior.\nSOURCE: https://github.com/ViewComponent/view_component/blob/main/docs/guide/previews.md#2025-04-11_snippet_13\n\nLANGUAGE: ruby\nCODE:\n```\n# config/application.rb\nconfig.view_component.preview_controller = \"MyPreviewController\"\n```\n\n----------------------------------------\n\nTITLE: New Slots API in ViewComponent v3\nDESCRIPTION: Shows the updated slots API introduced in ViewComponent v3, where the slot name serves as a getter and with_[slot_name] functions as a setter, allowing with_content to work correctly.\nSOURCE: https://github.com/ViewComponent/view_component/blob/main/docs/history.md#2025-04-11_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\nclass MyComponent < ViewComponent::Base\n  renders_one :header\nend\n\nc = MyComponent.new\n\n# New API for setting slots\nc.with_header { \"hello world\" }\n\n# Now `with_content` is valid when defining slots\nc.with_header.with_content(\"Hello world!\")\n```\n\n----------------------------------------\n\nTITLE: Disabling Previews in Test Environment\nDESCRIPTION: Shows how to disable component previews in the test environment through configuration, which may be useful to prevent preview routes from being available during testing.\nSOURCE: https://github.com/ViewComponent/view_component/blob/main/docs/guide/previews.md#2025-04-11_snippet_15\n\nLANGUAGE: ruby\nCODE:\n```\n# config/environments/test.rb\nconfig.view_component.show_previews = false\n```\n\n----------------------------------------\n\nTITLE: Centralized i18n Translation Structure for ViewComponents in YAML\nDESCRIPTION: Example of how centralized translations using namespacing could be implemented for ViewComponents. Currently, only sidecar translation files are supported, but this structure would allow for organizing all component translations in a single file.\nSOURCE: https://github.com/ViewComponent/view_component/blob/main/docs/known_issues.md#2025-04-11_snippet_0\n\nLANGUAGE: yml\nCODE:\n```\nen:\n  view_components:\n    login_form:\n      submit: \"Log in\"\n    nav:\n      user_info:\n        login: \"Log in\"\n        logout: \"Log out\"\n```\n\n----------------------------------------\n\nTITLE: Enabling Source Previews\nDESCRIPTION: Demonstrates how to enable source previews, which show syntax-highlighted code examples below the preview to illustrate component usage.\nSOURCE: https://github.com/ViewComponent/view_component/blob/main/docs/guide/previews.md#2025-04-11_snippet_16\n\nLANGUAGE: ruby\nCODE:\n```\n# config/environments/test.rb\nconfig.view_component.show_previews_source = true\n```\n\n----------------------------------------\n\nTITLE: Rendering Views in Component Templates (Ruby)\nDESCRIPTION: Support added for rendering views from inside component templates in version 1.3.2.\nSOURCE: https://github.com/ViewComponent/view_component/blob/main/docs/CHANGELOG.md#2025-04-11_snippet_6\n\nLANGUAGE: Ruby\nCODE:\n```\n# No code snippet provided\n```\n\n----------------------------------------\n\nTITLE: Configuring Preview Paths for RSpec\nDESCRIPTION: Shows how to configure component preview paths when using RSpec instead of Minitest, adjusting the directory structure to match RSpec conventions.\nSOURCE: https://github.com/ViewComponent/view_component/blob/main/docs/guide/previews.md#2025-04-11_snippet_17\n\nLANGUAGE: ruby\nCODE:\n```\n# config/application.rb\nconfig.view_component.preview_paths << \"#{Rails.root}/spec/components/previews\"\n```\n\n----------------------------------------\n\nTITLE: Displaying User Avatars with HTML\nDESCRIPTION: This HTML snippet renders a series of user avatars using img tags. Each avatar is displayed with a width of 32 pixels and includes an alt attribute for accessibility.\nSOURCE: https://github.com/ViewComponent/view_component/blob/main/docs/index.md#2025-04-11_snippet_6\n\nLANGUAGE: HTML\nCODE:\n```\n<img src=\"https://avatars.githubusercontent.com/thomascchen?s=64\" alt=\"thomascchen\" width=\"32\" />\n<img src=\"https://avatars.githubusercontent.com/milk1000cc?s=64\" alt=\"milk1000cc\" width=\"32\" />\n<img src=\"https://avatars.githubusercontent.com/aduth?s=64\" alt=\"aduth\" width=\"32\" />\n<img src=\"https://avatars.githubusercontent.com/htcarr3?s=64\" alt=\"htcarr3\" width=\"32\" />\n<img src=\"https://avatars.githubusercontent.com/neanias?s=64\" alt=\"neanias\" width=\"32\" />\n<img src=\"https://avatars.githubusercontent.com/allan-pires?s=64\" alt=\"allan-pires\" width=\"32\" />\n<img src=\"https://avatars.githubusercontent.com/jasonkim?s=64\" alt=\"jasonkim\" width=\"32\" />\n<img src=\"https://avatars.githubusercontent.com/tkowalewski\" alt=\"tkowalewski\" width=\"32\" />\n<img src=\"https://avatars.githubusercontent.com/chloe-meister\" alt=\"chloe-meister\" width=\"32\" />\n<img src=\"https://avatars.githubusercontent.com/zaratan\" alt=\"zaratan\" width=\"32\" />\n<img src=\"https://avatars.githubusercontent.com/kawakamimoeki\" alt=\"kawakamimoeki\" width=\"32\" />\n```\n\n----------------------------------------\n\nTITLE: Generating ViewComponent with RSpec\nDESCRIPTION: Demonstrates generating a ViewComponent with RSpec testing framework instead of default test unit.\nSOURCE: https://github.com/ViewComponent/view_component/blob/main/docs/guide/generators.md#2025-04-11_snippet_4\n\nLANGUAGE: console\nCODE:\n```\nbin/rails generate component Example title --test-framework rspec\n\n      create  app/components/example_component.rb\n      invoke  rspec\n      create    spec/components/example_component_spec.rb\n      invoke  erb\n      create    app/components/example_component.html.erb\n```\n\n----------------------------------------\n\nTITLE: Generating ViewComponent with Stimulus Controller\nDESCRIPTION: Demonstrates generating a ViewComponent with an associated Stimulus controller.\nSOURCE: https://github.com/ViewComponent/view_component/blob/main/docs/guide/generators.md#2025-04-11_snippet_6\n\nLANGUAGE: console\nCODE:\n```\nbin/rails generate component Example title --stimulus\n\n      create  app/components/example_component.rb\n      invoke  test_unit\n      create    test/components/example_component_test.rb\n      invoke  stimulus\n      create    app/components/example_component_controller.js\n      invoke  erb\n      create    app/components/example_component.html.erb\n```\n\n----------------------------------------\n\nTITLE: Generating Inline ViewComponent\nDESCRIPTION: Shows how to generate a ViewComponent with inline rendering without a template file.\nSOURCE: https://github.com/ViewComponent/view_component/blob/main/docs/guide/generators.md#2025-04-11_snippet_9\n\nLANGUAGE: console\nCODE:\n```\nbin/rails generate component Example title --inline\n\n      create  app/components/example_component.rb\n      invoke  test_unit\n      create    test/components/example_component_test.rb\n      invoke  erb\n```\n\n----------------------------------------\n\nTITLE: Generating ViewComponent with Custom Parent Class\nDESCRIPTION: Demonstrates generating a ViewComponent with a specified parent class instead of the default.\nSOURCE: https://github.com/ViewComponent/view_component/blob/main/docs/guide/generators.md#2025-04-11_snippet_10\n\nLANGUAGE: console\nCODE:\n```\nbin/rails generate component Example title content --parent MyBaseComponent\n\n      create  app/components/example_component.rb\n      invoke  test_unit\n      create    test/components/example_component_test.rb\n      invoke  erb\n      create    app/components/example_component.html.erb\n```\n\n----------------------------------------\n\nTITLE: Accessing Component-Local Translations in ERB Templates\nDESCRIPTION: Demonstrates how to access component-specific translations within the component's template. The dot prefix indicates a component-local translation lookup.\nSOURCE: https://github.com/ViewComponent/view_component/blob/main/docs/guide/translations.md#2025-04-11_snippet_2\n\nLANGUAGE: erb\nCODE:\n```\n<%# app/components/example_component.html.erb %>\n<%= t(\".hello\") %>\n```\n\n----------------------------------------\n\nTITLE: Accessing Global Rails Translations in ViewComponents\nDESCRIPTION: Shows how to use global Rails translations within a ViewComponent template. This allows components to access application-wide translation keys.\nSOURCE: https://github.com/ViewComponent/view_component/blob/main/docs/guide/translations.md#2025-04-11_snippet_3\n\nLANGUAGE: erb\nCODE:\n```\n<%# app/components/example_component.html.erb %>\n<%= t(\"my.global.translation\") %>\n```\n\n----------------------------------------\n\nTITLE: Setting Up Translation Inheritance in Parent Component\nDESCRIPTION: Shows how to define translations in a parent component that can be inherited by child components. This enables translation reuse across component hierarchies.\nSOURCE: https://github.com/ViewComponent/view_component/blob/main/docs/guide/translations.md#2025-04-11_snippet_5\n\nLANGUAGE: yml\nCODE:\n```\n# app/components/parent_component.yml\nen:\n  hello: \"Hello world!\"\n  greeting: \"Cheers!\"\n```\n\n----------------------------------------\n\nTITLE: Overriding Parent Translations in Child Component\nDESCRIPTION: Demonstrates how a child component can selectively override specific translations from its parent while inheriting others. This allows for customization while maintaining consistency.\nSOURCE: https://github.com/ViewComponent/view_component/blob/main/docs/guide/translations.md#2025-04-11_snippet_6\n\nLANGUAGE: yml\nCODE:\n```\n# app/components/child_component.yml\nen:\n  greeting: \"Howdy!\"\n```\n\n----------------------------------------\n\nTITLE: Using Component Slots with Headers and Posts\nDESCRIPTION: Example of implementing component slots with a nested HeaderComponent and PostComponent integration\nSOURCE: https://github.com/ViewComponent/view_component/blob/main/docs/guide/slots.md#2025-04-11_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\n# blog_component.rb\nclass BlogComponent < ViewComponent::Base\n  # Since `HeaderComponent` is nested inside of this component, we have to\n  # reference it as a string instead of a class name.\n  renders_one :header, \"HeaderComponent\"\n\n  # `PostComponent` is defined in another file, so we can refer to it by class name.\n  renders_many :posts, PostComponent\n\n  class HeaderComponent < ViewComponent::Base\n    attr_reader :classes\n\n    def initialize(classes:)\n      @classes = classes\n    end\n\n    def call\n      content_tag :h1, content, {class: classes}\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing Polymorphic Slots\nDESCRIPTION: Demonstrates how to create polymorphic slots that can render different types of content\nSOURCE: https://github.com/ViewComponent/view_component/blob/main/docs/guide/slots.md#2025-04-11_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nclass ListItemComponent < ViewComponent::Base\n  renders_one :visual, types: {\n    icon: IconComponent,\n    avatar: lambda { |**system_arguments|\n      AvatarComponent.new(size: 16, **system_arguments)\n    }\n  }\nend\n```\n\n----------------------------------------\n\nTITLE: Conditional Rendering in ERB Template\nDESCRIPTION: Traditional approach for conditional rendering within an ERB template using an if statement to check user confirmation status.\nSOURCE: https://github.com/ViewComponent/view_component/blob/main/docs/guide/conditional_rendering.md#2025-04-11_snippet_0\n\nLANGUAGE: erb\nCODE:\n```\n<% if user.requires_confirmation? %>\n  <div class=\"alert\">Please confirm your email address.</div>\n<% end %>\n```\n\n----------------------------------------\n\nTITLE: Conditional Component Rendering in ERB\nDESCRIPTION: Traditional approach for conditional rendering by wrapping the component rendering call in an if statement in the view.\nSOURCE: https://github.com/ViewComponent/view_component/blob/main/docs/guide/conditional_rendering.md#2025-04-11_snippet_1\n\nLANGUAGE: erb\nCODE:\n```\n<% if current_user.requires_confirmation? %>\n  <%= render(ConfirmEmailComponent.new(user: current_user)) %>\n<% end %>\n```\n\n----------------------------------------\n\nTITLE: HTML Output from Rendered ViewComponent\nDESCRIPTION: The HTML output generated when the ExampleComponent is rendered with a title parameter and block content.\nSOURCE: https://github.com/ViewComponent/view_component/blob/main/docs/guide/getting-started.md#2025-04-11_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<span title=\"my title\">Hello, World!</span>\n```\n\n----------------------------------------\n\nTITLE: Rendering ViewComponents with Turbo Frames Support\nDESCRIPTION: When using turbo-rails with ViewComponents, set the content_type to text/html to ensure proper rendering of turbo frames.\nSOURCE: https://github.com/ViewComponent/view_component/blob/main/docs/guide/getting-started.md#2025-04-11_snippet_7\n\nLANGUAGE: ruby\nCODE:\n```\ndef create\n  render(ExampleComponent.new, content_type: \"text/html\")\nend\n```\n\n----------------------------------------\n\nTITLE: Rendering ViewComponents to Strings in Controller Actions\nDESCRIPTION: Use render_in with view_context to render a component to a string for reuse within a controller action, avoiding double render errors.\nSOURCE: https://github.com/ViewComponent/view_component/blob/main/docs/guide/getting-started.md#2025-04-11_snippet_8\n\nLANGUAGE: ruby\nCODE:\n```\nclass PagesController < ApplicationController\n  def index\n    # Doesn't work: triggers a `AbstractController::DoubleRenderError`\n    # @reusable_icon = render IconComponent.new(\"close\")\n\n    # Doesn't work: renders the whole index view as a string\n    # @reusable_icon = render_to_string IconComponent.new(\"close\")\n\n    # Works: renders the component as a string\n    @reusable_icon = IconComponent.new(\"close\").render_in(view_context)\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Trailing Whitespace in Ruby ViewComponent\nDESCRIPTION: Example of configuring a ViewComponent to strip trailing whitespace from templates before compilation\nSOURCE: https://github.com/ViewComponent/view_component/blob/main/docs/api.md#2025-04-11_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nclass MyComponent < ViewComponent::Base\n  strip_trailing_whitespace\nend\n```\n\n----------------------------------------\n\nTITLE: Setting Collection Parameter in ViewComponent\nDESCRIPTION: Shows how to set a custom parameter name for collection rendering\nSOURCE: https://github.com/ViewComponent/view_component/blob/main/docs/api.md#2025-04-11_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nwith_collection_parameter :item\n```\n\n----------------------------------------\n\nTITLE: Setting Request URL for ViewComponent Testing\nDESCRIPTION: Demonstrates how to set up request URLs for testing ViewComponents, with optional host parameter specification.\nSOURCE: https://github.com/ViewComponent/view_component/blob/main/docs/api.md#2025-04-11_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nwith_request_url(\"/users/42\") do\n  render_inline(MyComponent.new)\nend\n```\n\n----------------------------------------\n\nTITLE: Setting Request URL with Custom Host\nDESCRIPTION: Shows how to specify a custom host when setting up request URLs for ViewComponent testing.\nSOURCE: https://github.com/ViewComponent/view_component/blob/main/docs/api.md#2025-04-11_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\nwith_request_url(\"/users/42\", host: \"app.example.com\") do\n  render_inline(MyComponent.new)\nend\n```\n\n----------------------------------------\n\nTITLE: Setting Request URL with HTTP Method\nDESCRIPTION: Demonstrates setting up request URLs with specific HTTP methods for ViewComponent testing.\nSOURCE: https://github.com/ViewComponent/view_component/blob/main/docs/api.md#2025-04-11_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\nwith_request_url(\"/users/42\", method: \"POST\") do\n  render_inline(MyComponent.new)\nend\n```\n\n----------------------------------------\n\nTITLE: Testing ViewComponents with render_inline in Ruby\nDESCRIPTION: Demonstrates the recommended approach for testing ViewComponents by rendering the component and asserting against the output rather than testing instance methods directly.\nSOURCE: https://github.com/ViewComponent/view_component/blob/main/docs/best_practices.md#2025-04-11_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\n# good\nrender_inline(MyComponent.new)\nassert_text(\"Hello, World!\")\n\n# bad\nassert_equal(MyComponent.new.message, \"Hello, World!\")\n```\n\n----------------------------------------\n\nTITLE: Using Instance Methods Instead of Inline Ruby in ViewComponents\nDESCRIPTION: Demonstrates how to use ViewComponent instance methods instead of inline Ruby in templates to keep logic organized and maintainable.\nSOURCE: https://github.com/ViewComponent/view_component/blob/main/docs/best_practices.md#2025-04-11_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\n# good\nclass MyComponent < ViewComponent::Base\n  attr_accessor :name\n\n  def message\n    \"Hello, #{name}!\"\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Inline Ruby in ViewComponent Templates (Anti-Pattern)\nDESCRIPTION: Shows an example of inline Ruby in ViewComponent templates, which should be avoided in favor of instance methods.\nSOURCE: https://github.com/ViewComponent/view_component/blob/main/docs/best_practices.md#2025-04-11_snippet_4\n\nLANGUAGE: erb\nCODE:\n```\n<%# bad %>\n<% message = \"Hello, #{name}\" %>\n```\n\n----------------------------------------\n\nTITLE: Using Slots for Markup in ViewComponents\nDESCRIPTION: Demonstrates the preferred approach of using slots for providing markup to components rather than passing HTML strings as arguments, which avoids security issues.\nSOURCE: https://github.com/ViewComponent/view_component/blob/main/docs/best_practices.md#2025-04-11_snippet_5\n\nLANGUAGE: erb\nCODE:\n```\n# good\n<%= render(MyComponent.new) do |component| %>\n  <% component.with_name do %>\n    <strong>Hello, world!</strong>\n  <% end %>\n<% end %>\n```\n\n----------------------------------------\n\nTITLE: Passing Markup as Arguments in ViewComponents (Anti-Pattern)\nDESCRIPTION: Shows the discouraged approach of passing HTML markup as arguments to ViewComponents, which bypasses Rails' sanitization and creates potential security issues.\nSOURCE: https://github.com/ViewComponent/view_component/blob/main/docs/best_practices.md#2025-04-11_snippet_6\n\nLANGUAGE: erb\nCODE:\n```\n# bad\n<%= render MyComponent.new(name: \"<strong>Hello, world!</strong>\".html_safe) %>\n```\n\n----------------------------------------\n\nTITLE: Updating ViewComponent Slot Usage in Ruby\nDESCRIPTION: Shows how to update deprecated slot setter methods to the new `with_SLOT_NAME` syntax in ViewComponent.\nSOURCE: https://github.com/ViewComponent/view_component/blob/main/docs/CHANGELOG.md#2025-04-11_snippet_0\n\nLANGUAGE: Ruby\nCODE:\n```\n<%= render BlogComponent.new do |component| %>\n-  <% component.header do %>\n+  <% component.with_header do %>\n    <%= link_to \"My blog\", root_path %>\n  <% end %>\n<% end %>\n```\n\n----------------------------------------\n\nTITLE: Configuring Consistent Rendering Lifecycle in Ruby\nDESCRIPTION: Adds a configuration option to ensure side-effects in `content` are consistently evaluated before components are rendered. This changes when `content` is evaluated, which may reveal bugs in existing components.\nSOURCE: https://github.com/ViewComponent/view_component/blob/main/docs/CHANGELOG.md#2025-04-11_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nconfig.view_component.use_consistent_rendering_lifecycle\n```\n\n----------------------------------------\n\nTITLE: Defining Conflicting Slots in Ruby\nDESCRIPTION: Demonstrates an example of defining conflicting Slots, which will now raise an ArgumentError. This prevents accidentally creating Slots with overlapping names.\nSOURCE: https://github.com/ViewComponent/view_component/blob/main/docs/CHANGELOG.md#2025-04-11_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nclass MyComponent < ViewComponent::Base\n  renders_one :item\n  renders_many :items\nend\n```\n\n----------------------------------------\n\nTITLE: Enabling Deprecation Warnings for Slot Setters in Ruby\nDESCRIPTION: Shows how to opt-in to deprecation warnings for the old Slot setter API. This helps prepare for the removal of non-prefixed setters in version 3.0.\nSOURCE: https://github.com/ViewComponent/view_component/blob/main/docs/CHANGELOG.md#2025-04-11_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nclass DeprecatedSlotsSetterComponent < ViewComponent::Base\n  warn_on_deprecated_slot_setter\nend\n```\n\n----------------------------------------\n\nTITLE: Updating Gemfile Requirement for ViewComponent in Ruby\nDESCRIPTION: Shows how to update the Gemfile to remove the explicit require of view_component/engine, which is now deprecated.\nSOURCE: https://github.com/ViewComponent/view_component/blob/main/docs/CHANGELOG.md#2025-04-11_snippet_4\n\nLANGUAGE: Ruby\nCODE:\n```\n- gem \"view_component\", require: \"view_component/engine\"`\n+ gem \"view_component\"\n```\n\n----------------------------------------\n\nTITLE: Fixing Ruby kwargs Warnings in Component Initialization\nDESCRIPTION: A console error message showing warnings about keyword parameters in Ruby 2.7+ when using the last argument as keyword parameters without the ** operator in component initialization.\nSOURCE: https://github.com/ViewComponent/view_component/blob/main/docs/CHANGELOG.md#2025-04-11_snippet_5\n\nLANGUAGE: console\nCODE:\n```\nview_component/lib/view_component/slotable.rb:98: warning: Using the last argument as keyword parameters is deprecated; maybe ** should be added to the call\nview_component/test/app/components/slots_component.rb:18: warning: The called method `initialize' is defined here\n```\n\n----------------------------------------\n\nTITLE: Rendering Nested Content (Ruby)\nDESCRIPTION: Bug fix in version 1.3.1 for rendering nested content that previously caused an error.\nSOURCE: https://github.com/ViewComponent/view_component/blob/main/docs/CHANGELOG.md#2025-04-11_snippet_7\n\nLANGUAGE: Ruby\nCODE:\n```\n# No code snippet provided\n```\n\n----------------------------------------\n\nTITLE: Component Rendering with Controller Context (Ruby)\nDESCRIPTION: In version 1.3.0, components are now rendered with sufficient controller context to support rendering of partials and forms.\nSOURCE: https://github.com/ViewComponent/view_component/blob/main/docs/CHANGELOG.md#2025-04-11_snippet_8\n\nLANGUAGE: Ruby\nCODE:\n```\n# No code snippet provided\n```\n\n----------------------------------------\n\nTITLE: Component Rendering Syntax Update (Ruby)\nDESCRIPTION: New syntax introduced in version 1.2.0 for rendering components. The old syntax is deprecated and will be removed in v2.0.0.\nSOURCE: https://github.com/ViewComponent/view_component/blob/main/docs/CHANGELOG.md#2025-04-11_snippet_9\n\nLANGUAGE: Ruby\nCODE:\n```\nrender MyComponent, foo: :bar\n```\n\n----------------------------------------\n\nTITLE: Component Base Class Update (Ruby)\nDESCRIPTION: In version 1.1.0, components now inherit from ActionView::Component::Base.\nSOURCE: https://github.com/ViewComponent/view_component/blob/main/docs/CHANGELOG.md#2025-04-11_snippet_10\n\nLANGUAGE: Ruby\nCODE:\n```\n# Components now inherit from ActionView::Component::Base\n```\n\n----------------------------------------\n\nTITLE: Configuring ViewComponent Render Monkey Patch in Ruby\nDESCRIPTION: This snippet shows how to disable the render monkey patch in ViewComponent for Rails versions earlier than 6.1. This configuration helps avoid conflicts with other gems that also monkey patch the render method.\nSOURCE: https://github.com/ViewComponent/view_component/blob/main/docs/compatibility.md#2025-04-11_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nconfig.view_component.render_monkey_patch_enabled = false # defaults to true\n```\n\n----------------------------------------\n\nTITLE: Delegating ActionText Helper in Ruby ViewComponent\nDESCRIPTION: This Ruby code snippet shows how to delegate the rich_textarea_tag method to helpers in a ViewComponent. This is a workaround for using ActionText's rich_textarea in ViewComponents.\nSOURCE: https://github.com/ViewComponent/view_component/blob/main/docs/compatibility.md#2025-04-11_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\ndelegate :rich_textarea_tag, to: :helpers\n```\n\n----------------------------------------\n\nTITLE: Running ViewComponent Test Subset Using Ruby m Gem\nDESCRIPTION: Command to run specific test files or line numbers using the m gem test runner.\nSOURCE: https://github.com/ViewComponent/view_component/blob/main/docs/CONTRIBUTING.md#2025-04-11_snippet_0\n\nLANGUAGE: command\nCODE:\n```\nbundle exec m test/view_component/YOUR_COMPONENT_test.rb:line_number\n```\n\n----------------------------------------\n\nTITLE: Running ViewComponent Tests for Specific Rails Version\nDESCRIPTION: Command to run test suite against a specific Rails version using the Appraisal gem.\nSOURCE: https://github.com/ViewComponent/view_component/blob/main/docs/CONTRIBUTING.md#2025-04-11_snippet_1\n\nLANGUAGE: command\nCODE:\n```\nbundle exec appraisal rails-5.2 rake\n```\n\n----------------------------------------\n\nTITLE: Implementing Polymorphic Slots in ViewComponent\nDESCRIPTION: Example of defining a polymorphic slot that allows selecting between different sub-components (IconComponent or AvatarComponent) for a visual element in a ViewComponent.\nSOURCE: https://github.com/ViewComponent/view_component/blob/main/docs/history.md#2025-04-11_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nclass Item < ViewComponent::Base\n  renders_one :leading_visual, types: {\n    icon: IconComponent, avatar: AvatarComponent\n  }\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing Content Wrapping in ViewComponent Slots\nDESCRIPTION: Example of a slot that wraps its content in an HTML element (td) with custom classes before rendering a component. Demonstrates how to achieve content wrapping without polymorphic slots.\nSOURCE: https://github.com/ViewComponent/view_component/blob/main/docs/history.md#2025-04-11_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nrenders_many :items do |*args, **kwargs|\n  content_tag :td, class: kwargs[:table_row_classes] do\n    Row.new(*args, **kwargs)\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Old Slots API in ViewComponent (Pre-v3)\nDESCRIPTION: Demonstrates the combined getter/setter slots API used before ViewComponent v3, where the same method was used for both getting and setting a slot.\nSOURCE: https://github.com/ViewComponent/view_component/blob/main/docs/history.md#2025-04-11_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nclass MyComponent < ViewComponent::Base\n  renders_one :header\nend\n\nc = MyComponent.new\n\nc.header { \"Hello world!\" } # sets the slot\nc.header # gets the slot\n```\n\n----------------------------------------\n\nTITLE: Problem with Old Slots API and with_content\nDESCRIPTION: Illustrates the limitation in the pre-v3 slots API where using with_content would fail because the getter path was executed when no arguments or block were passed.\nSOURCE: https://github.com/ViewComponent/view_component/blob/main/docs/history.md#2025-04-11_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\nclass MyComponent < ViewComponent::Base\n  renders_one :header\nend\n\nc = MyComponent.new\n\n# c.header returns nil because the getter path is being executed due to having\n# no arguments and no block passed: https://github.com/ViewComponent/view_component/blob/18c27adc7ec715ca05d7ad0299efcbff9f03544b/lib/view_component/slotable_v2.rb#L70-L74\n#\nc.header.with_content(\"Hello world!\") # undefined method `with_content' for nil:NilClass (NoMethodError)\n```\n\n----------------------------------------\n\nTITLE: Compiled ViewComponent Method from Template\nDESCRIPTION: Demonstrates how ViewComponent compiles an ERB template into a Ruby method on the component class. This happens at application boot time and creates a _call_* method that generates the component's output.\nSOURCE: https://github.com/ViewComponent/view_component/blob/main/docs/how-it-works.md#2025-04-11_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nclass MyComponent < ViewComponent::Base\n  def _call_my_component\n    @output_buffer.append = (Time.now)\n    @output_buffer\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Creating a ViewComponent Template in ERB\nDESCRIPTION: This snippet illustrates the ERB template for the MessageComponent. It shows how to use the @name instance variable within the template.\nSOURCE: https://github.com/ViewComponent/view_component/blob/main/docs/index.md#2025-04-11_snippet_1\n\nLANGUAGE: erb\nCODE:\n```\n<%# app/components/message_component.html.erb %>\n<h1>Hello, <%= @name %>!<h1>\n```\n\n----------------------------------------\n\nTITLE: Resulting HTML Output\nDESCRIPTION: This snippet shows the HTML output generated by rendering the MessageComponent with the name 'World'.\nSOURCE: https://github.com/ViewComponent/view_component/blob/main/docs/index.md#2025-04-11_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<h1>Hello, World!</h1>\n```\n\n----------------------------------------\n\nTITLE: Compiled ViewComponent in Ruby\nDESCRIPTION: This snippet shows how ViewComponent pre-compiles the MessageComponent template into a Ruby method for performance optimization.\nSOURCE: https://github.com/ViewComponent/view_component/blob/main/docs/index.md#2025-04-11_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\n# app/components/message_component.rb\nclass MessageComponent < ViewComponent::Base\n  def initialize(name:)\n    @name = name\n  end\n\n  def call\n    @output_buffer.safe_append = \"<h1>Hello, \".freeze\n    @output_buffer.append = (@name)\n    @output_buffer.safe_append = \"!</h1>\".freeze\n    @output_buffer.to_s\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Custom FormBuilder Usage with ViewComponent in ERB\nDESCRIPTION: Example of how to use a custom FormBuilder with form helpers in Rails. This is a workaround for the issue where ViewComponents don't use the default FormBuilder, allowing explicit specification of the builder.\nSOURCE: https://github.com/ViewComponent/view_component/blob/main/docs/known_issues.md#2025-04-11_snippet_1\n\nLANGUAGE: html.erb\nCODE:\n```\n<%= form_for(record, builder: CustomFormBuilder) do |f| %>\n  <%= f.text_field :name %>\n<% end %>\n```\n\n----------------------------------------\n\nTITLE: Implementing OnOffSwitch Component Class in Ruby using ViewComponent\nDESCRIPTION: A Ruby class that implements a toggle switch component using ViewComponent. It takes parameters for the toggle state, action path, disabled status, and optional label, with a private method that determines the appropriate icon class based on the toggle state.\nSOURCE: https://github.com/ViewComponent/view_component/blob/main/docs/case-studies/jellyswitch.md#2025-04-11_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nclass OnOffSwitch < ApplicationComponent\n  def initialize(predicate:, path:, disabled: false, label: nil)\n    @predicate = predicate\n    @path = path\n    @disabled = disabled\n    @label = label\n  end\n\n  private\n\n  attr_reader :predicate, :path, :disabled, :label\n\n  def icon_class\n    if predicate\n      \"fas fa-toggle-on\"\n    else\n      \"fas fa-toggle-off\"\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Markdown Link to New Changelog Location\nDESCRIPTION: Markdown link syntax that directs users to the new location of the CHANGELOG.md file in the ViewComponent repository's docs directory.\nSOURCE: https://github.com/ViewComponent/view_component/blob/main/CHANGELOG.md#2025-04-11_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[docs/CHANGELOG.md](https://github.com/ViewComponent/view_component/blob/main/docs/CHANGELOG.md)\n```"
  }
]