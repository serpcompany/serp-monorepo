[
  {
    "owner": "svecosystem",
    "repo": "runed",
    "content": "TITLE: Basic FiniteStateMachine Example with Multiple States\nDESCRIPTION: Demonstrates how to create a finite state machine with three states (disabled, idle, running) and events for transitioning between them. Includes use of _enter lifecycle method and debouncing.\nSOURCE: https://github.com/svecosystem/runed/blob/main/sites/docs/src/content/utilities/finite-state-machine.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype MyStates = \"disabled\" | \"idle\" | \"running\";\ntype MyEvents = \"toggleEnabled\" | \"start\" | \"stop\";\nconst f = new FiniteStateMachine<MyStates, MyEvents>(\"disabled\", {\n\tdisabled: {\n\t\ttoggleEnabled: \"idle\"\n\t},\n\tidle: {\n\t\ttoggleEnabled: \"disabled\",\n\t\tstart: \"running\"\n\t},\n\trunning: {\n\t\t_enter: () => {\n\t\t\tf.debounce(2000, \"stop\");\n\t\t},\n\t\tstop: \"idle\",\n\t\ttoggleEnabled: \"disabled\"\n\t}\n});\n```\n\n----------------------------------------\n\nTITLE: Using resource for Basic Reactive Data Fetching in Svelte\nDESCRIPTION: Example of using the resource utility to create a reactive data fetching component that responds to changes in an ID value, with options for debouncing and access to loading/error states.\nSOURCE: https://github.com/svecosystem/runed/blob/main/sites/docs/src/content/utilities/resource.md#2025-04-17_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { resource } from \"runed\";\n\n\tlet id = $state(1);\n\n\tconst searchResource = resource(\n\t\t() => id,\n\t\tasync (id, prevId, { data, refetching, onCleanup, signal }) => {\n\t\t\t// data: the previous value returned from the fetcher\n\n\t\t\t// refetching: whether the fetcher is currently refetching\n\t\t\t// or it can be the value you passed to refetch()\n\n\t\t\t// onCleanup: A cleanup function that will be called when the source is invalidated\n\t\t\t// and the fetcher is about to re-run\n\n\t\t\t// signal: AbortSignal for cancelling fetch requests\n\t\t\tconst response = await fetch(`api/posts?id=${id}`, { signal });\n\t\t\treturn response.json();\n\t\t},\n\t\t{\n\t\t\tdebounce: 300\n\t\t\t// lazy: Skip initial fetch when true\n\t\t\t// once: Only fetch once when true\n\t\t\t// initialValue: Provides an initial value for the resource\n\t\t\t// debounce: Debounce rapid changes\n\t\t\t// throttle: Throttle rapid changes\n\t\t}\n\t);\n\n\t// The current value of the resource\n\tsearchResource.current;\n\t// Whether the resource is currently loading\n\tsearchResource.loading;\n\t// Error if the fetch failed\n\tsearchResource.error;\n\t// Update the resource value directly, useful for optimistic updates\n\tsearchResource.mutate();\n\t// Re-run the fetcher with current watching values\n\tsearchResource.refetch();\n</script>\n\n<input type=\"number\" bind:value={id} />\n\n{#if searchResults.loading}\n\t<div>Loading...</div>\n{:else if searchResults.error}\n\t<div>Error: {searchResults.error.message}</div>\n{:else}\n\t<ul>\n\t\t{#each searchResults.current ?? [] as result}\n\t\t\t<li>{result.title}</li>\n\t\t{/each}\n\t</ul>\n{/if}\n```\n\n----------------------------------------\n\nTITLE: Implementing Function Debouncing with useDebounce in Svelte\nDESCRIPTION: Example of using the useDebounce utility to create a debounced function that logs button press counts. The example demonstrates setting a configurable debounce duration and includes buttons to run the scheduled function immediately or cancel pending executions.\nSOURCE: https://github.com/svecosystem/runed/blob/main/sites/docs/src/content/utilities/use-debounce.md#2025-04-17_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { useDebounce } from \"runed\";\n\n\tlet count = $state(0);\n\tlet logged = $state(\"\");\n\tlet isFirstTime = $state(true);\n\tlet debounceDuration = $state(1000);\n\n\tconst logCount = useDebounce(\n\t\t() => {\n\t\t\tif (isFirstTime) {\n\t\t\t\tisFirstTime = false;\n\t\t\t\tlogged = `You pressed the button ${count} times!`;\n\t\t\t} else {\n\t\t\t\tlogged = `You pressed the button ${count} times since last time!`;\n\t\t\t}\n\t\t\tcount = 0;\n\t\t},\n\t\t() => debounceDuration\n\t);\n\n\tfunction ding() {\n\t\tcount++;\n\t\tlogCount();\n\t}\n</script>\n\n<input type=\"number\" bind:value={debounceDuration} />\n<button onclick={ding}>DING DING DING</button>\n<button onclick={logCount.runScheduledNow} disabled={!logCount.pending}>Run now</button>\n<button onclick={logCount.cancel} disabled={!logCount.pending}>Cancel message</button>\n<p>{logged || \"Press the button!\"}</p>\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Debounced Search Input in Svelte\nDESCRIPTION: Demonstrates how to use the Debounced wrapper to create a search input with debounced updates. The example shows binding an input value to a state and displaying the debounced value with a 500ms delay.\nSOURCE: https://github.com/svecosystem/runed/blob/main/sites/docs/src/content/utilities/debounced.md#2025-04-17_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { Debounced } from \"runed\";\n\n\tlet search = $state(\"\");\n\tconst debounced = new Debounced(() => search, 500);\n</script>\n\n<div>\n\t<input bind:value={search} />\n\t<p>You searched for: <b>{debounced.current}</b></p>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Basic PersistedState Usage in Svelte\nDESCRIPTION: Demonstrates how to initialize and use PersistedState to create a persistent counter that increments, decrements, and resets. The state persists across page refreshes.\nSOURCE: https://github.com/svecosystem/runed/blob/main/sites/docs/src/content/utilities/persisted-state.md#2025-04-17_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { PersistedState } from \"runed\";\n\n\tconst count = new PersistedState(\"count\", 0);\n</script>\n\n<div>\n\t<button onclick={() => count.current++}>Increment</button>\n\t<button onclick={() => count.current--}>Decrement</button>\n\t<button onclick={() => (count.current = 0)}>Reset</button>\n\t<p>Count: {count.current}</p>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Implementing AnimationFrames with FPS Control in Svelte\nDESCRIPTION: This example demonstrates how to use the AnimationFrames component to create an animation with adjustable FPS limits. It tracks frame count, current FPS, and delta time between frames, providing a UI to control and display these metrics.\nSOURCE: https://github.com/svecosystem/runed/blob/main/sites/docs/src/content/utilities/animation-frames.md#2025-04-17_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { AnimationFrames } from \"runed\";\n\timport { Slider } from \"../ui/slider\"; // Check out shadcn-svelte!\n\n\tlet frames = $state(0);\n\tlet fpsLimit = $state(10);\n\tlet delta = $state(0);\n\tconst animation = new AnimationFrames(\n\t\t(args) => {\n\t\t\tframes++;\n\t\t\tdelta = args.delta;\n\t\t},\n\t\t{ fpsLimit: () => fpsLimit }\n\t);\n\n\tconst stats = $derived(\n\t\t`Frames: ${frames}\\nFPS: ${animation.fps.toFixed(0)}\\nDelta: ${delta.toFixed(0)}ms`\n\t);\n</script>\n\n<pre>{stats}</pre>\n<button onclick={toggle}>\n\t{animation.running ? \"Stop\" : \"Start\"}\n</button>\n<p>\n\tFPS limit: <b>{fpsLimit}</b><i>{fpsLimit === 0 ? \" (not limited)\" : \"\"}</i>\n</p>\n<Slider\n\tvalue={[fpsLimit]}\n\tonValueChange={(value) => (fpsLimit = value[0] ?? 0)}\n\tmin={0}\n\tmax={144} />\n```\n\n----------------------------------------\n\nTITLE: Implementing Conditional Actions in FiniteStateMachine\nDESCRIPTION: Demonstrates how to use action functions that conditionally transition to another state based on parameters or conditions. Shows both time-based conditions and day-based conditions.\nSOURCE: https://github.com/svecosystem/runed/blob/main/sites/docs/src/content/utilities/finite-state-machine.md#2025-04-17_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ntype MyStates = \"on\" | \"off\" | \"cooldown\";\n\nconst f = new FiniteStateMachine<MyStates, MyEvents>(\"off\", {\n\toff: {\n\t\ttoggle: () => {\n\t\t\tif (isTuesday) {\n\t\t\t\t// Switch can only turn on during Tuesdays\n\t\t\t\treturn \"on\";\n\t\t\t}\n\t\t\t// All other days, nothing is returned and state is unchanged.\n\t\t}\n\t},\n\ton: {\n\t\ttoggle: (heldMillis: number) => {\n\t\t\t// You can also dynamically return the next state!\n\t\t\t// Only turn off if switch is depressed for 3 seconds\n\t\t\tif (heldMillis > 3000) {\n\t\t\t\treturn \"off\";\n\t\t\t}\n\t\t}\n\t}\n});\n```\n\n----------------------------------------\n\nTITLE: Using Intersection Observer in Svelte Component\nDESCRIPTION: Demonstrates how to implement intersection observation for a target element within a container. Shows basic setup with TypeScript and state management to track intersection status.\nSOURCE: https://github.com/svecosystem/runed/blob/main/sites/docs/src/content/utilities/use-intersection-observer.md#2025-04-17_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { useIntersectionObserver } from \"runed\";\n\n\tlet target = $state<HTMLElement | null>(null);\n\tlet root = $state<HTMLElement | null>(null);\n\n\tlet isIntersecting = $state(false);\n\n\tuseIntersectionObserver(\n\t\t() => target,\n\t\t(entries) => {\n\t\t\tconst entry = entries[0];\n\t\t\tif (!entry) return;\n\t\t\tisIntersecting = entry.isIntersecting;\n\t\t},\n\t\t{ root: () => root }\n\t);\n</script>\n\n<div bind:this={root}>\n\t<div bind:this={target}>\n\t\t{#if isIntersecting}\n\t\t\t<div>Target is intersecting</div>\n\t\t{:else}\n\t\t\t<div>Target is not intersecting</div>\n\t\t{/if}\n\t</div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Implementing StateHistory with Undo/Redo Controls in Svelte\nDESCRIPTION: Complete Svelte component example showing how to implement StateHistory with UI controls. Includes buttons for state modification and undo/redo functionality with appropriate disabled states.\nSOURCE: https://github.com/svecosystem/runed/blob/main/sites/docs/src/content/utilities/state-history.md#2025-04-17_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { StateHistory } from \"runed\";\n\n\tlet count = $state(0);\n\tconst history = new StateHistory(() => count, (c) => (count = c));\n</script>\n\n<p>{count}</p>\n\n<button onclick={() => count++}>Increment</button>\n<button onclick={() => count--}>Decrement</button>\n\n<button disabled={!history.canUndo} onclick={history.undo}>Undo</button>\n<button disabled={!history.canRedo} onclick={history.redo}>Redo</button>\n```\n\n----------------------------------------\n\nTITLE: Using Geolocation Hook in Svelte Component\nDESCRIPTION: Example showing how to implement the useGeolocation hook in a Svelte component. Demonstrates basic usage including position tracking, error handling, and pause/resume functionality.\nSOURCE: https://github.com/svecosystem/runed/blob/main/sites/docs/src/content/utilities/use-geolocation.md#2025-04-17_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { useGeolocation } from \"runed\";\n\n\tconst location = useGeolocation();\n</script>\n\n<pre>Coords: {JSON.stringify(location.position.coords, null, 2)}</pre>\n<pre>Located at: {location.position.timestamp}</pre>\n<pre>Error: {JSON.stringify(location.error, null, 2)}</pre>\n<pre>Is Supported: {location.isSupported}</pre>\n<button onclick={location.pause} disabled={location.isPaused}>Pause</button>\n<button onclick={location.resume} disabled={!location.isPaused}>Resume</button>\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of onClickOutside in Svelte\nDESCRIPTION: Demonstrates how to use the onClickOutside utility to detect clicks outside a specified element and execute a callback function.\nSOURCE: https://github.com/svecosystem/runed/blob/main/sites/docs/src/content/utilities/on-click-outside.md#2025-04-17_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { onClickOutside } from \"runed\";\n\n\tlet container = $state<HTMLElement>()!;\n\n\tonClickOutside(\n\t\t() => container,\n\t\t() => console.log(\"clicked outside\")\n\t);\n</script>\n\n<div bind:this={container}>\n\t<!-- Container content -->\n</div>\n<button>I'm outside the container</button>\n```\n\n----------------------------------------\n\nTITLE: Advanced Usage of onClickOutside with Controlled Listener in Svelte\nDESCRIPTION: Shows how to use onClickOutside with a dialog element, demonstrating programmatic control of the listener using start and stop methods.\nSOURCE: https://github.com/svecosystem/runed/blob/main/sites/docs/src/content/utilities/on-click-outside.md#2025-04-17_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { onClickOutside } from \"runed\";\n\n\tlet dialog = $state<HTMLDialogElement>()!;\n\n\tconst clickOutside = onClickOutside(\n\t\t() => dialog,\n\t\t() => {\n\t\t\tdialog.close();\n\t\t\tclickOutside.stop();\n\t\t},\n\t\t{ immediate: false }\n\t);\n\n\tfunction openDialog() {\n\t\tdialog.showModal();\n\t\tclickOutside.start();\n\t}\n\n\tfunction closeDialog() {\n\t\tdialog.close();\n\t\tclickOutside.stop();\n\t}\n</script>\n\n<button onclick={openDialog}>Open Dialog</button>\n<dialog bind:this={dialog}>\n\t<div>\n\t\t<button onclick={closeDialog}>Close Dialog</button>\n\t</div>\n</dialog>\n```\n\n----------------------------------------\n\nTITLE: Managing Debounced State Updates in TypeScript\nDESCRIPTION: Shows advanced usage of Debounced class methods including canceling updates, immediate updates, and setting new values. Demonstrates how to control the timing and execution of state updates.\nSOURCE: https://github.com/svecosystem/runed/blob/main/sites/docs/src/content/utilities/debounced.md#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nlet count = $state(0);\nconst debounced = new Debounced(() => count, 500);\ncount = 1;\ndebounced.cancel();\n// after a while...\nconsole.log(debounced.current); // Still 0!\n\ncount = 2;\nconsole.log(debounced.current); // Still 0!\ndebounced.setImmediately(count);\nconsole.log(debounced.current); // 2\n\ncount = 3;\nconsole.log(debounced.current); // 2\nawait debounced.updateImmediately();\nconsole.log(debounced.current); // 3\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Watch Function in TypeScript\nDESCRIPTION: Demonstrates how to use the watch function to run a callback when a reactive state value changes. The function takes a getter that returns the dependency and a callback function.\nSOURCE: https://github.com/svecosystem/runed/blob/main/sites/docs/src/content/utilities/watch.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { watch } from \"runed\";\n\nlet count = $state(0);\nwatch(() => count, () => {\n\t\tconsole.log(count);\n\t}\n);\n```\n\n----------------------------------------\n\nTITLE: Creating a Context Instance in TypeScript\nDESCRIPTION: Demonstrates how to create a typed Context instance for theme management. This defines a context container that can hold either 'light' or 'dark' as values.\nSOURCE: https://github.com/svecosystem/runed/blob/main/sites/docs/src/content/utilities/context.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Context } from \"runed\";\n\nexport const myTheme = new Context<\"light\" | \"dark\">(\"theme\");\n```\n\n----------------------------------------\n\nTITLE: Configuring PersistedState with Custom Options\nDESCRIPTION: Shows how to configure PersistedState with various options including using sessionStorage instead of localStorage, disabling cross-tab synchronization, and setting up custom serializers.\nSOURCE: https://github.com/svecosystem/runed/blob/main/sites/docs/src/content/utilities/persisted-state.md#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst state = new PersistedState(\"user-preferences\", initialValue, {\n\t// Use sessionStorage instead of localStorage (default: 'local')\n\tstorage: \"session\",\n\n\t// Disable cross-tab synchronization (default: true)\n\tsyncTabs: false,\n\n\t// Custom serialization handlers\n\tserializer: {\n\t\tserialize: superjson.stringify,\n\t\tdeserialize: superjson.parse\n\t}\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing useMutationObserver in Svelte to track element attribute changes\nDESCRIPTION: This example demonstrates how to use the useMutationObserver hook to detect changes in element attributes. It creates a component that tracks class and style changes, displaying each detected mutation in a list.\nSOURCE: https://github.com/svecosystem/runed/blob/main/sites/docs/src/content/utilities/use-mutation-observer.md#2025-04-17_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { useMutationObserver } from \"runed\";\n\n\tlet el = $state<HTMLElement | null>(null);\n\tconst messages = $state<string[]>([]);\n\tlet className = $state(\"\");\n\tlet style = $state(\"\");\n\n\tuseMutationObserver(\n\t\t() => el,\n\t\t(mutations) => {\n\t\t\tconst mutation = mutations[0];\n\t\t\tif (!mutation) return;\n\n\t\t\tmessages.push(mutation.attributeName!);\n\t\t},\n\t\t{ attributes: true }\n\t);\n\n\tsetTimeout(() => {\n\t\tclassName = \"text-brand\";\n\t}, 1000);\n\n\tsetTimeout(() => {\n\t\tstyle = \"font-style: italic;\";\n\t}, 1500);\n</script>\n\n<div bind:this={el} class={className} {style}>\n\t{#each messages as text}\n\t\t<div>\n\t\t\tMutation Attribute: {text}\n\t\t</div>\n\t{:else}\n\t\t<div>No mutations yet</div>\n\t{/each}\n</div>\n```\n\n----------------------------------------\n\nTITLE: Using Lifecycle Methods in FiniteStateMachine\nDESCRIPTION: Shows how to implement _enter and _exit lifecycle methods that get called when states are entered or exited. These methods receive metadata about the transition.\nSOURCE: https://github.com/svecosystem/runed/blob/main/sites/docs/src/content/utilities/finite-state-machine.md#2025-04-17_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst f = new FiniteStateMachine<MyStates, MyEvents>('off', {\n\toff: {\n\t\ttoggle: 'on'\n\t\t_enter: (meta) => { console.log('switch is off') }\n\t\t_exit: (meta) => { console.log('switch is no longer off') }\n\t},\n\ton: {\n\t\ttoggle: 'off'\n\t\t_enter: (meta) => { console.log('switch is on') }\n\t\t_exit: (meta) => { console.log('switch is no longer on') }\n\t}\n});\n```\n\n----------------------------------------\n\nTITLE: Using ElementRect in Svelte Components\nDESCRIPTION: Example showing how to use the ElementRect class to reactively track an HTML element's dimensions in a Svelte component. The rect object properties update automatically when the element's size or position changes.\nSOURCE: https://github.com/svecosystem/runed/blob/main/sites/docs/src/content/utilities/element-rect.md#2025-04-17_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { ElementRect } from \"runed\";\n\n\tlet el = $state<HTMLElement>();\n\tconst rect = new ElementRect(() => el);\n</script>\n\n<textarea bind:this={el}></textarea>\n\n<p>Width: {rect.width} Height: {rect.height}</p>\n<!-- alternatively -->\n<pre>{JSON.stringify(rect.current, null, 2)}</pre>\n```\n\n----------------------------------------\n\nTITLE: Implementing ElementSize Tracking in Svelte\nDESCRIPTION: Demonstrates how to use the ElementSize component to reactively track a textarea element's dimensions. The component binds to the element and provides reactive width and height values.\nSOURCE: https://github.com/svecosystem/runed/blob/main/sites/docs/src/content/utilities/element-size.md#2025-04-17_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { ElementSize } from \"runed\";\n\n\tlet el = $state() as HTMLElement;\n\tconst size = new ElementSize(() => el);\n</script>\n\n<textarea bind:this={el}></textarea>\n\n<p>Width: {size.width} Height: {size.height}</p>\n```\n\n----------------------------------------\n\nTITLE: Svelte Component Integration with ClickLogger\nDESCRIPTION: A Svelte component that demonstrates how to integrate the ClickLogger class and display click counts. Shows reactive updates of the click counter with proper singular/plural text handling.\nSOURCE: https://github.com/svecosystem/runed/blob/main/sites/docs/src/content/utilities/use-event-listener.md#2025-04-17_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { ClickLogger } from \"./ClickLogger.ts\";\n\n\tconst logger = new ClickLogger();\n</script>\n\n<p>\n\tYou've clicked the document {logger.clicks}\n\t{logger.clicks === 1 ? \"time\" : \"times\"}\n</p>\n```\n\n----------------------------------------\n\nTITLE: Using IsInViewport Component in Svelte\nDESCRIPTION: Example demonstrating how to use the IsInViewport component in a Svelte file to track if an element is visible in the viewport. It binds a paragraph element and displays whether it's currently in the viewport.\nSOURCE: https://github.com/svecosystem/runed/blob/main/sites/docs/src/content/utilities/is-in-viewport.md#2025-04-17_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { IsInViewport } from \"runed\";\n\n\tlet targetNode = $state<HTMLElement>()!;\n\tconst inViewport = new IsInViewport(() => targetNode);\n</script>\n\n<p bind:this={targetNode}>Target node</p>\n\n<p>Target node in viewport: {inViewport.current}</p>\n```\n\n----------------------------------------\n\nTITLE: Using Debounce Functionality in FiniteStateMachine\nDESCRIPTION: Shows how to use the debounce method to schedule state transitions after a specified time delay. Includes examples of cancellation and restarting of debounced events.\nSOURCE: https://github.com/svecosystem/runed/blob/main/sites/docs/src/content/utilities/finite-state-machine.md#2025-04-17_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nf.send(\"toggle\"); // turn on immediately\nf.debounce(5000, \"toggle\"); // turn off in 5000 milliseconds\n```\n\n----------------------------------------\n\nTITLE: Initializing and Checking Pressed Keys in TypeScript\nDESCRIPTION: This snippet demonstrates how to create an instance of PressedKeys and check if specific keys or key combinations are pressed using the 'has' method. It uses Svelte's $derived for reactive updates.\nSOURCE: https://github.com/svecosystem/runed/blob/main/sites/docs/src/content/utilities/pressed-keys.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst keys = new PressedKeys();\n\nconst isArrowDownPressed = $derived(keys.has(\"ArrowDown\"));\nconst isCtrlAPressed = $derived(keys.has(\"Control\", \"a\"));\n```\n\n----------------------------------------\n\nTITLE: Using Multiple Dependencies with resource in Svelte\nDESCRIPTION: Example showing how to watch multiple reactive dependencies in a resource utility, useful for complex data fetching scenarios that depend on multiple state values.\nSOURCE: https://github.com/svecosystem/runed/blob/main/sites/docs/src/content/utilities/resource.md#2025-04-17_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\tconst results = resource([() => query, () => page], async ([query, page]) => {\n\t\tconst res = await fetch(`/api/search?q=${query}&page=${page}`);\n\t\treturn res.json();\n\t});\n</script>\n```\n\n----------------------------------------\n\nTITLE: Implementing Click Tracking with useEventListener in TypeScript\nDESCRIPTION: A TypeScript class that demonstrates how to use useEventListener to track document body clicks. The class maintains a click counter using $state and automatically handles event listener cleanup.\nSOURCE: https://github.com/svecosystem/runed/blob/main/sites/docs/src/content/utilities/use-event-listener.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// ClickLogger.ts\nimport { useEventListener } from \"runed\";\n\nexport class ClickLogger {\n\t#clicks = $state(0);\n\n\tconstructor() {\n\t\tuseEventListener(\n\t\t\t() => document.body,\n\t\t\t\"click\",\n\t\t\t() => this.#clicks++\n\t\t);\n\t}\n\n\tget clicks() {\n\t\treturn this.#clicks;\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing useResizeObserver in Svelte\nDESCRIPTION: This snippet demonstrates how to use the useResizeObserver utility to monitor size changes of a textarea element. It updates a text variable with the current width and height whenever the element is resized.\nSOURCE: https://github.com/svecosystem/runed/blob/main/sites/docs/src/content/utilities/use-resize-observer.md#2025-04-17_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { useResizeObserver } from \"runed\";\n\n\tlet el = $state<HTMLElement | null>(null);\n\tlet text = $state(\"\");\n\n\tuseResizeObserver(\n\t\t() => el,\n\t\t(entries) => {\n\t\t\tconst entry = entries[0];\n\t\t\tif (!entry) return;\n\n\t\t\tconst { width, height } = entry.contentRect;\n\t\t\ttext = `width: ${width};\\nheight: ${height};`;\n\t\t}\n\t);\n</script>\n\n<textarea bind:this={el} readonly value={text}></textarea>\n```\n\n----------------------------------------\n\nTITLE: Using activeElement in Svelte\nDESCRIPTION: This snippet demonstrates how to use the activeElement component in a Svelte file. It imports the component and displays the name of the currently active element.\nSOURCE: https://github.com/svecosystem/runed/blob/main/sites/docs/src/content/utilities/active-element.md#2025-04-17_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { activeElement } from \"runed\";\n</script>\n\n<p>\n\tCurrently active element:\n\t{activeElement.current?.localName ?? \"No active element found\"}\n</p>\n```\n\n----------------------------------------\n\nTITLE: Using Previous Utility for State Tracking in Svelte\nDESCRIPTION: This snippet demonstrates how to use the Previous utility to track the previous value of a reactive state in a Svelte component. It creates a counter and displays both the current and previous count values.\nSOURCE: https://github.com/svecosystem/runed/blob/main/sites/docs/src/content/utilities/previous.md#2025-04-17_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { Previous } from \"runed\";\n\n\tlet count = $state(0);\n\tconst previous = new Previous(() => count);\n</script>\n\n<div>\n\t<button onclick={() => count++}>Count: {count}</button>\n\t<pre>Previous: {`${previous.current}`}</pre>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Using IsIdle Component in Svelte\nDESCRIPTION: Example showing how to implement the IsIdle component in a Svelte application to track user idle state and display the last active time.\nSOURCE: https://github.com/svecosystem/runed/blob/main/sites/docs/src/content/utilities/is-idle.md#2025-04-17_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { AnimationFrames, IsIdle } from \"runed\";\n\n\tconst idle = new IsIdle({ timeout: 1000 });\n</script>\n\n<p>Idle: {idle.current}</p>\n<p>\n\tLast active: {new Date(idle.lastActive).toLocaleTimeString()}\n</p>\n```\n\n----------------------------------------\n\nTITLE: Using Current and Previous Values with Watch Function\nDESCRIPTION: Shows how to access both current and previous values in the watch callback. The callback receives two parameters: the current value and the previous value of the watched state.\nSOURCE: https://github.com/svecosystem/runed/blob/main/sites/docs/src/content/utilities/watch.md#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nlet count = $state(0);\nwatch(() => count, (curr, prev) => {\n\t\tconsole.log(`count is ${curr}, was ${prev}`);\n\t}\n);\n```\n\n----------------------------------------\n\nTITLE: Initializing StateHistory in TypeScript\nDESCRIPTION: Basic example of creating a StateHistory instance that tracks changes to a state variable. The history logs each value with a timestamp and provides access to the history log.\nSOURCE: https://github.com/svecosystem/runed/blob/main/sites/docs/src/content/utilities/state-history.md#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { StateHistory } from \"runed\";\n\nlet count = $state(0);\nconst history = new StateHistory(() => count, (c) => (count = c));\nhistory.log[0]; // { snapshot: 0, timestamp: ... }\n```\n\n----------------------------------------\n\nTITLE: Setting Context Value in Svelte Component\nDESCRIPTION: Shows how to set a context value in a parent Svelte component during initialization. This example sets the theme context value from component data.\nSOURCE: https://github.com/svecosystem/runed/blob/main/sites/docs/src/content/utilities/context.md#2025-04-17_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { myTheme } from \"./context\";\n\tlet { data, children } = $props();\n\n\tmyTheme.set(data.theme);\n</script>\n\n{@render children?.()}\n```\n\n----------------------------------------\n\nTITLE: Auto-Transitioning with Debounce in Actions\nDESCRIPTION: Shows how to use debounce within an action function to schedule an automatic state transition after a time delay, such as turning a light off automatically after being turned on.\nSOURCE: https://github.com/svecosystem/runed/blob/main/sites/docs/src/content/utilities/finite-state-machine.md#2025-04-17_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst f = new FiniteStateMachine<MyStates, MyEvents>(\"off\", {\n\toff: {\n\t\ttoggle: () => {\n\t\t\tf.debounce(5000, \"toggle\");\n\t\t\treturn \"on\";\n\t\t}\n\t},\n\ton: {\n\t\ttoggle: \"off\"\n\t}\n});\n```\n\n----------------------------------------\n\nTITLE: Using IsFocusWithin in Svelte Component\nDESCRIPTION: This snippet demonstrates how to use the IsFocusWithin utility in a Svelte component. It creates an instance of IsFocusWithin to track focus within a form element and displays the current focus state.\nSOURCE: https://github.com/svecosystem/runed/blob/main/sites/docs/src/content/utilities/is-focus-within.md#2025-04-17_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { IsFocusWithin } from \"runed\";\n\n\tlet formElement = $state<HTMLFormElement>();\n\tconst focusWithinForm = new IsFocusWithin(() => formElement);\n</script>\n\n<p>Focus within form: {focusWithinForm.current}</p>\n<form bind:this={formElement}>\n\t<input type=\"text\" />\n\t<button type=\"submit\">Submit</button>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Simple Toggle Switch Implementation\nDESCRIPTION: Shows a basic example of a toggle switch with two states (on/off) and a toggle event that switches between them. This demonstrates the minimum implementation of a state machine.\nSOURCE: https://github.com/svecosystem/runed/blob/main/sites/docs/src/content/utilities/finite-state-machine.md#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { FiniteStateMachine } from \"runed\";\ntype MyStates = \"on\" | \"off\";\ntype MyEvents = \"toggle\";\n\nconst f = new FiniteStateMachine<MyStates, MyEvents>(\"off\", {\n\toff: {\n\t\ttoggle: \"on\"\n\t},\n\ton: {\n\t\ttoggle: \"off\"\n\t}\n});\n```\n\n----------------------------------------\n\nTITLE: Auto-Transitioning with Debounce in Lifecycle Methods\nDESCRIPTION: Demonstrates using debounce within a lifecycle method (_enter) to schedule an automatic state transition, providing an alternative approach to the previous example.\nSOURCE: https://github.com/svecosystem/runed/blob/main/sites/docs/src/content/utilities/finite-state-machine.md#2025-04-17_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst f = new FiniteStateMachine<MyStates, MyEvents>(\"off\", {\n\toff: {\n\t\ttoggle: \"on\"\n\t},\n\ton: {\n\t\ttoggle: \"off\",\n\t\t_enter: () => {\n\t\t\tf.debounce(5000, \"toggle\");\n\t\t}\n\t}\n});\n```\n\n----------------------------------------\n\nTITLE: Using IsMounted Class in Svelte\nDESCRIPTION: Shows the basic implementation of IsMounted class from the runed library to track component mounting state.\nSOURCE: https://github.com/svecosystem/runed/blob/main/sites/docs/src/content/utilities/is-mounted.md#2025-04-17_snippet_0\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { IsMounted } from \"runed\";\n\n\tconst isMounted = new IsMounted();\n</script>\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Pressed Keys in TypeScript\nDESCRIPTION: This snippet shows how to get all currently pressed keys using the 'all' method of the PressedKeys instance. It logs the result to the console.\nSOURCE: https://github.com/svecosystem/runed/blob/main/sites/docs/src/content/utilities/pressed-keys.md#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst keys = new PressedKeys();\nconsole.log(keys.all());\n```\n\n----------------------------------------\n\nTITLE: Using resource.pre for Pre-render Execution in Svelte\nDESCRIPTION: Example demonstrating how to use the pre-render variation of resource to execute data fetching during component initialization rather than after rendering, which can be useful for critical data.\nSOURCE: https://github.com/svecosystem/runed/blob/main/sites/docs/src/content/utilities/resource.md#2025-04-17_snippet_3\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\tconst data = resource.pre(\n\t\t() => query,\n\t\tasync (query) => {\n\t\t\tconst res = await fetch(`/api/search?q=${query}`);\n\t\t\treturn res.json();\n\t\t}\n\t);\n</script>\n```\n\n----------------------------------------\n\nTITLE: Using Custom Serialization with PersistedState for Complex Data Types\nDESCRIPTION: Demonstrates how to set up PersistedState with superjson for handling complex data types like Date objects that normally don't serialize well with JSON.stringify.\nSOURCE: https://github.com/svecosystem/runed/blob/main/sites/docs/src/content/utilities/persisted-state.md#2025-04-17_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport superjson from \"superjson\";\n\n// Example with Date objects\nconst lastAccessed = new PersistedState(\"last-accessed\", new Date(), {\n\tserializer: {\n\t\tserialize: superjson.stringify,\n\t\tdeserialize: superjson.parse\n\t}\n});\n```\n\n----------------------------------------\n\nTITLE: Using Runed's activeElement utility in a Svelte TypeScript module\nDESCRIPTION: Example of importing and using the activeElement utility from Runed in a Svelte TypeScript module. It shows how to track and log changes to the active element using Svelte's $effect reactive function.\nSOURCE: https://github.com/svecosystem/runed/blob/main/sites/docs/src/content/getting-started.md#2025-04-17_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { activeElement } from \"runed\";\n\nfunction logActiveElement() {\n\t$effect(() => {\n\t\tconsole.log(\"Active element is \", activeElement.current);\n\t});\n}\n\nlogActiveElement();\n```\n\n----------------------------------------\n\nTITLE: Watching Multiple Reactive Values with Array Syntax\nDESCRIPTION: Demonstrates how to watch multiple reactive values by passing an array of getter functions. The callback receives arrays containing current and previous values for all watched dependencies.\nSOURCE: https://github.com/svecosystem/runed/blob/main/sites/docs/src/content/utilities/watch.md#2025-04-17_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nlet age = $state(20);\nlet name = $state(\"bob\");\nwatch([() => age, () => name], ([age, name], [prevAge, prevName]) => {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Reading Context Value in Svelte Component\nDESCRIPTION: Demonstrates how to read a context value in a child Svelte component. It shows two methods: using get() to retrieve the value or getOr() to provide a fallback value.\nSOURCE: https://github.com/svecosystem/runed/blob/main/sites/docs/src/content/utilities/context.md#2025-04-17_snippet_2\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { myTheme } from \"./context\";\n\n\tconst theme = myTheme.get();\n\t// or with a fallback value if the context is not set\n\tconst theme = myTheme.getOr(\"light\");\n</script>\n```\n\n----------------------------------------\n\nTITLE: Using Runed's activeElement utility in a Svelte component\nDESCRIPTION: Example of importing and using the activeElement utility from Runed in a Svelte component file. It demonstrates how to check if an input element is currently active using Svelte's reactive state management.\nSOURCE: https://github.com/svecosystem/runed/blob/main/sites/docs/src/content/getting-started.md#2025-04-17_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { activeElement } from \"runed\";\n\n\tlet inputElement = $state<HTMLInputElement | undefined>();\n</script>\n\n<input bind:this={inputElement} />\n\n{#if activeElement.current === inputElement}\n\tThe input element is active!\n{/if}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Cleanup with resource in Svelte\nDESCRIPTION: Example of implementing a custom cleanup function with the resource utility, particularly useful for managing event sources or other resources that need to be properly closed when dependencies change.\nSOURCE: https://github.com/svecosystem/runed/blob/main/sites/docs/src/content/utilities/resource.md#2025-04-17_snippet_2\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\tconst stream = resource(\n\t\t() => streamId,\n\t\tasync (id, _, { signal, onCleanup }) => {\n\t\t\tconst eventSource = new EventSource(`/api/stream/${id}`);\n\t\t\tonCleanup(() => eventSource.close());\n\n\t\t\tconst res = await fetch(`/api/stream/${id}/init`, { signal });\n\t\t\treturn res.json();\n\t\t}\n\t);\n</script>\n```\n\n----------------------------------------\n\nTITLE: Debounce Handling and Cancellation\nDESCRIPTION: Demonstrates how debounce calls with the same event will cancel any existing timer and restart the countdown, allowing for more advanced timing control.\nSOURCE: https://github.com/svecosystem/runed/blob/main/sites/docs/src/content/utilities/finite-state-machine.md#2025-04-17_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// schedule a toggle in five seconds\nf.debounce(5000, \"toggle\");\n// ... less than 5000ms elapses ...\nf.debounce(5000, \"toggle\");\n// The second call cancels the original timer, and starts a new one\n```\n\n----------------------------------------\n\nTITLE: Alternative Mounting State Implementation using $effect\nDESCRIPTION: Shows another approach to track mounting state using Svelte's $effect and untrack utilities.\nSOURCE: https://github.com/svecosystem/runed/blob/main/sites/docs/src/content/utilities/is-mounted.md#2025-04-17_snippet_2\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { untrack } from \"svelte\";\n\n\tconst isMounted = $state({ current: false });\n\n\t$effect(() => {\n\t\tuntrack(() => (isMounted.current = true));\n\t});\n</script>\n```\n\n----------------------------------------\n\nTITLE: Implementing Wildcard Handlers in FiniteStateMachine\nDESCRIPTION: Demonstrates how to use the special '*' wildcard state to handle events that aren't explicitly defined for the current state, providing fallback behavior.\nSOURCE: https://github.com/svecosystem/runed/blob/main/sites/docs/src/content/utilities/finite-state-machine.md#2025-04-17_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst f = new FiniteStateMachine<MyStates, MyEvents>('off', {\n\toff: {\n\t\ttoggle: 'on'\n\t},\n\ton: {\n\t\ttoggle: 'off'\n\t}\n\t'*': {\n\t\temergency: 'off'\n\t}\n});\n\n// will always result in the switch turning off.\nf.send('emergency');\n```\n\n----------------------------------------\n\nTITLE: Configuring Watch with Options Object\nDESCRIPTION: Shows how to use the options object with watch to configure its behavior. The example demonstrates setting the 'lazy' option to true, which prevents the first run until sources change.\nSOURCE: https://github.com/svecosystem/runed/blob/main/sites/docs/src/content/utilities/watch.md#2025-04-17_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nwatch(sources, callback, {\n\t// First run will only happen after sources change when set to true.\n\t// By default, its false.\n\tlazy: true\n});\n```\n\n----------------------------------------\n\nTITLE: Manual Mounting State Implementation using onMount\nDESCRIPTION: Demonstrates how to manually implement mounting state tracking using Svelte's onMount lifecycle function.\nSOURCE: https://github.com/svecosystem/runed/blob/main/sites/docs/src/content/utilities/is-mounted.md#2025-04-17_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { onMount } from \"svelte\";\n\n\tconst isMounted = $state({ current: false });\n\n\tonMount(() => {\n\t\tisMounted.current = true;\n\t});\n</script>\n```\n\n----------------------------------------\n\nTITLE: Adding Resource for Async Data Fetching in Markdown\nDESCRIPTION: Introduces a new 'resource' feature that watches dependencies and performs asynchronous data fetching, as noted in version 0.24.0.\nSOURCE: https://github.com/svecosystem/runed/blob/main/packages/runed/CHANGELOG.md#2025-04-17_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n- feat: add `resource` that watches dependencies and runs async data fetching\n  ([#218](https://github.com/svecosystem/runed/pull/218))\n```\n\n----------------------------------------\n\nTITLE: Initializing ActiveElement with Custom Document in Svelte\nDESCRIPTION: This code snippet shows how to initialize the ActiveElement component with a custom document or shadow root in Svelte. It allows scoping the focus tracking within a specific DOM context.\nSOURCE: https://github.com/svecosystem/runed/blob/main/sites/docs/src/content/utilities/active-element.md#2025-04-17_snippet_1\n\nLANGUAGE: svelte\nCODE:\n```\n<script lang=\"ts\">\n\timport { ActiveElement } from \"runed\";\n\n\tconst activeElement = new ActiveElement({\n\t\tdocument: shadowRoot\n\t});\n</script>\n```\n\n----------------------------------------\n\nTITLE: ElementRect Type Definition\nDESCRIPTION: TypeScript type definition for the ElementRect class, showing the constructor parameters and available properties. The class provides access to element dimensions and position values like width, height, top, left, etc.\nSOURCE: https://github.com/svecosystem/runed/blob/main/sites/docs/src/content/utilities/element-rect.md#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntype Rect = Omit<DOMRect, \"toJSON\">;\n\ninterface ElementRectOptions {\n\tinitialRect?: DOMRect;\n}\n\nclass ElementRect {\n\tconstructor(node: MaybeGetter<HTMLElement | undefined | null>, options?: ElementRectOptions);\n\treadonly current: Rect;\n\treadonly width: number;\n\treadonly height: number;\n\treadonly top: number;\n\treadonly left: number;\n\treadonly right: number;\n\treadonly bottom: number;\n\treadonly x: number;\n\treadonly y: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Stopping the ResizeObserver in TypeScript\nDESCRIPTION: This snippet shows how to stop a resize observer by calling the stop method returned from the useResizeObserver function. This is useful for cleanup or when you no longer need to track element resizing.\nSOURCE: https://github.com/svecosystem/runed/blob/main/sites/docs/src/content/utilities/use-resize-observer.md#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst { stop } = useResizeObserver(/* ... */);\nstop();\n```\n\n----------------------------------------\n\nTITLE: Stopping a Mutation Observer in Svelte\nDESCRIPTION: This code snippet shows how to stop a mutation observer by calling the stop method on the returned object from the useMutationObserver hook. This is useful for cleaning up resources when observation is no longer needed.\nSOURCE: https://github.com/svecosystem/runed/blob/main/sites/docs/src/content/utilities/use-mutation-observer.md#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst { stop } = useMutationObserver(/* ... */);\nstop();\n```\n\n----------------------------------------\n\nTITLE: ElementSize Interface Definition\nDESCRIPTION: TypeScript interface definition for the ElementSize component, specifying readonly width and height number properties.\nSOURCE: https://github.com/svecosystem/runed/blob/main/sites/docs/src/content/utilities/element-size.md#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ElementSize {\n\treadonly width: number;\n\treadonly height: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Stopping Intersection Observer\nDESCRIPTION: Shows how to completely stop the intersection observer using the stop method.\nSOURCE: https://github.com/svecosystem/runed/blob/main/sites/docs/src/content/utilities/use-intersection-observer.md#2025-04-17_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst observer = useIntersectionObserver(/* ... */);\n\nobserver.stop();\n```\n\n----------------------------------------\n\nTITLE: Type Definitions for resource Utility in TypeScript\nDESCRIPTION: Comprehensive TypeScript type definitions for the resource utility, including options, state types, return values, and fetcher function signatures for proper type safety when using the utility.\nSOURCE: https://github.com/svecosystem/runed/blob/main/sites/docs/src/content/utilities/resource.md#2025-04-17_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ntype ResourceOptions<Data> = {\n\t/** Skip initial fetch when true */\n\tlazy?: boolean;\n\t/** Only fetch once when true */\n\tonce?: boolean;\n\t/** Initial value for the resource */\n\tinitialValue?: Data;\n\t/** Debounce time in milliseconds */\n\tdebounce?: number;\n\t/** Throttle time in milliseconds */\n\tthrottle?: number;\n};\n\ntype ResourceState<Data> = {\n\t/** Current value of the resource */\n\tcurrent: Data | undefined;\n\t/** Whether the resource is currently loading */\n\tloading: boolean;\n\t/** Error if the fetch failed */\n\terror: Error | undefined;\n};\n\ntype ResourceReturn<Data, RefetchInfo = unknown> = ResourceState<Data> & {\n\t/** Update the resource value directly */\n\tmutate: (value: Data) => void;\n\t/** Re-run the fetcher with current values */\n\trefetch: (info?: RefetchInfo) => Promise<Data | undefined>;\n};\n\ntype ResourceFetcherRefetchInfo<Data, RefetchInfo = unknown> = {\n\t/** Previous data return from fetcher */\n\tdata: Data | undefined;\n\t/** Whether the fetcher is currently refetching or it can be the value you passed to refetch. */\n\trefetching: RefetchInfo | boolean;\n\t/** A cleanup function that will be called when the source is invalidated and the fetcher is about to re-run */\n\tonCleanup: (fn: () => void) => void;\n\t/** AbortSignal for cancelling fetch requests */\n\tsignal: AbortSignal;\n};\n\ntype ResourceFetcher<Source, Data, RefetchInfo = unknown> = (\n\t/** Current value of the source */\n\tvalue: Source extends Array<unknown>\n\t\t? {\n\t\t\t\t[K in keyof Source]: Source[K];\n\t\t  }\n\t\t: Source,\n\t/** Previous value of the source */\n\tpreviousValue: Source extends Array<unknown>\n\t\t? {\n\t\t\t\t[K in keyof Source]: Source[K];\n\t\t  }\n\t\t: Source | undefined,\n\tinfo: ResourceFetcherRefetchInfo<Data, RefetchInfo>\n) => Promise<Data>;\n\nfunction resource<\n\tSource,\n\tRefetchInfo = unknown,\n\tFetcher extends ResourceFetcher<\n\t\tSource,\n\t\tAwaited<ReturnType<Fetcher>>,\n\t\tRefetchInfo\n\t> = ResourceFetcher<Source, any, RefetchInfo>\n>(\n\tsource: Getter<Source>,\n\tfetcher: Fetcher,\n\toptions?: ResourceOptions<Awaited<ReturnType<Fetcher>>>\n): ResourceReturn<Awaited<ReturnType<Fetcher>>, RefetchInfo>;\n```\n\n----------------------------------------\n\nTITLE: IsInViewport TypeScript Type Definition\nDESCRIPTION: TypeScript type definition for the IsInViewport class, showing its constructor parameters and the current property. It also defines IsInViewportOptions which extends UseIntersectionObserverOptions.\nSOURCE: https://github.com/svecosystem/runed/blob/main/sites/docs/src/content/utilities/is-in-viewport.md#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { type UseIntersectionObserverOptions } from \"runed\";\nexport type IsInViewportOptions = UseIntersectionObserverOptions;\n\nexport declare class IsInViewport {\n\tconstructor(node: MaybeGetter<HTMLElement | null | undefined>, options?: IsInViewportOptions);\n\tget current(): boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Geolocation Hook TypeScript Definitions\nDESCRIPTION: Type definitions for the useGeolocation hook, including options interface and return type. Defines the structure for position options and the return object containing geolocation data and control methods.\nSOURCE: https://github.com/svecosystem/runed/blob/main/sites/docs/src/content/utilities/use-geolocation.md#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntype UseGeolocationOptions = Partial<PositionOptions> & {\n\t/**\n\t * Whether to start the watcher immediately upon creation.\n\t * If set to `false`, the watcher will only start tracking the position when `resume()` is called.\n\t *\n\t * @defaultValue true\n\t */\n\timmediate?: boolean;\n};\n\ntype UseGeolocationReturn = {\n\treadonly isSupported: boolean;\n\treadonly position: Omit<GeolocationPosition, \"toJSON\">;\n\treadonly error: GeolocationPositionError | null;\n\treadonly isPaused: boolean;\n\tpause: () => void;\n\tresume: () => void;\n};\n```\n\n----------------------------------------\n\nTITLE: Type Definitions for onClickOutside Utility in TypeScript\nDESCRIPTION: Provides the TypeScript type definitions for the onClickOutside utility, including its options and return type.\nSOURCE: https://github.com/svecosystem/runed/blob/main/sites/docs/src/content/utilities/on-click-outside.md#2025-04-17_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport type OnClickOutsideOptions = ConfigurableWindow &\n\tConfigurableDocument & {\n\t\t/**\n\t\t * Whether the click outside handler is enabled by default or not.\n\t\t * If set to false, the handler will not be active until enabled by\n\t\t * calling the returned `start` function\n\t\t *\n\t\t * @default true\n\t\t */\n\t\timmediate?: boolean;\n\t\t/**\n\t\t * Controls whether focus events from iframes trigger the callback.\n\t\t *\n\t\t * Since iframe click events don't bubble to the parent document,\n\t\t * you may want to enable this if you need to detect when users\n\t\t * interact with iframe content.\n\t\t *\n\t\t * @default false\n\t\t */\n\t\tdetectIframe?: boolean;\n\t};\n/**\n * A utility that calls a given callback when a click event occurs outside of\n * a specified container element.\n *\n * @template T - The type of the container element, defaults to HTMLElement.\n * @param {MaybeElementGetter<T>} container - The container element or a getter function that returns the container element.\n * @param {() => void} callback - The callback function to call when a click event occurs outside of the container.\n * @param {OnClickOutsideOptions} [opts={}] - Optional configuration object.\n * @param {ConfigurableDocument} [opts.document=defaultDocument] - The document object to use, defaults to the global document.\n * @param {boolean} [opts.immediate=true] - Whether the click outside handler is enabled by default or not.\n * @param {boolean} [opts.detectIframe=false] - Controls whether focus events from iframes trigger the callback.\n *\n * @see {@link https://runed.dev/docs/utilities/on-click-outside}\n */\nexport declare function onClickOutside<T extends Element = HTMLElement>(\n\tcontainer: MaybeElementGetter<T>,\n\tcallback: (event: PointerEvent | FocusEvent) => void,\n\topts?: OnClickOutsideOptions\n): {\n\t/** Stop listening for click events outside the container. */\n\tstop: () => boolean;\n\t/** Start listening for click events outside the container. */\n\tstart: () => boolean;\n\t/** Whether the click outside handler is currently enabled or not. */\n\treadonly enabled: boolean;\n};\n```\n\n----------------------------------------\n\nTITLE: Checking Intersection Observer Status\nDESCRIPTION: Demonstrates how to check if the intersection observer is currently active using the isActive property.\nSOURCE: https://github.com/svecosystem/runed/blob/main/sites/docs/src/content/utilities/use-intersection-observer.md#2025-04-17_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst observer = useIntersectionObserver(/* ... */);\n\nif (observer.isActive) {\n\t// do something\n}\n```\n\n----------------------------------------\n\nTITLE: IsFocusWithin Type Definition in TypeScript\nDESCRIPTION: This snippet provides the TypeScript type definition for the IsFocusWithin class. It shows the constructor signature and the readonly 'current' property that represents the focus state.\nSOURCE: https://github.com/svecosystem/runed/blob/main/sites/docs/src/content/utilities/is-focus-within.md#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nclass IsFocusWithin {\n\tconstructor(node: MaybeGetter<HTMLElement | undefined | null>);\n\treadonly current: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Type Definition for ActiveElement in TypeScript\nDESCRIPTION: This snippet provides the TypeScript interface definition for the ActiveElement component. It defines the 'current' property as a readonly Element or null.\nSOURCE: https://github.com/svecosystem/runed/blob/main/sites/docs/src/content/utilities/active-element.md#2025-04-17_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ActiveElement {\n\treadonly current: Element | null;\n}\n```\n\n----------------------------------------\n\nTITLE: Resuming Intersection Observer\nDESCRIPTION: Demonstrates how to resume a paused intersection observer using the resume method.\nSOURCE: https://github.com/svecosystem/runed/blob/main/sites/docs/src/content/utilities/use-intersection-observer.md#2025-04-17_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst observer = useIntersectionObserver(/* ... */);\n\nobserver.resume();\n```\n\n----------------------------------------\n\nTITLE: Type Definition for Previous Utility in TypeScript\nDESCRIPTION: This code snippet provides the TypeScript type definition for the Previous class. It shows the constructor signature and the readonly current property that holds the previous value.\nSOURCE: https://github.com/svecosystem/runed/blob/main/sites/docs/src/content/utilities/previous.md#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nclass Previous<T> {\n\tconstructor(getter: () => T);\n\n\treadonly current: T; // Previous value\n}\n```\n\n----------------------------------------\n\nTITLE: Context Class Type Definition in TypeScript\nDESCRIPTION: Provides the complete type definition for the Context class. It includes methods for checking existence, getting and setting context values, and handling fallbacks.\nSOURCE: https://github.com/svecosystem/runed/blob/main/sites/docs/src/content/utilities/context.md#2025-04-17_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nclass Context<TContext> {\n\t/**\n\t * @param name The name of the context.\n\t * This is used for generating the context key and error messages.\n\t */\n\tconstructor(name: string) {}\n\n\t/**\n\t * The key used to get and set the context.\n\t *\n\t * It is not recommended to use this value directly.\n\t * Instead, use the methods provided by this class.\n\t */\n\tget key(): symbol;\n\n\t/**\n\t * Checks whether this has been set in the context of a parent component.\n\t *\n\t * Must be called during component initialization.\n\t */\n\texists(): boolean;\n\n\t/**\n\t * Retrieves the context that belongs to the closest parent component.\n\t *\n\t * Must be called during component initialization.\n\t *\n\t * @throws An error if the context does not exist.\n\t */\n\tget(): TContext;\n\n\t/**\n\t * Retrieves the context that belongs to the closest parent component,\n\t * or the given fallback value if the context does not exist.\n\t *\n\t * Must be called during component initialization.\n\t */\n\tgetOr<TFallback>(fallback: TFallback): TContext | TFallback;\n\n\t/**\n\t * Associates the given value with the current component and returns it.\n\t *\n\t * Must be called during component initialization.\n\t */\n\tset(context: TContext): TContext;\n}\n```\n\n----------------------------------------\n\nTITLE: Pausing Intersection Observer\nDESCRIPTION: Shows how to temporarily pause the intersection observer using the pause method.\nSOURCE: https://github.com/svecosystem/runed/blob/main/sites/docs/src/content/utilities/use-intersection-observer.md#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst observer = useIntersectionObserver(/* ... */);\n\nobserver.pause();\n```\n\n----------------------------------------\n\nTITLE: Fixing PersistedState in Runes Mode in Markdown\nDESCRIPTION: Addresses issues with the 'PersistedState' functionality in runes mode, as mentioned in the changelog for version 0.25.0.\nSOURCE: https://github.com/svecosystem/runed/blob/main/packages/runed/CHANGELOG.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n- fix: Fix issues with `PersistedState` in runes mode.\n  ([#236](https://github.com/svecosystem/runed/pull/236))\n```\n\n----------------------------------------\n\nTITLE: IsIdleOptions Type Definition\nDESCRIPTION: Type definitions for the IsIdle component options, including event tracking configuration, timeout duration, visibility change detection, and initial state settings.\nSOURCE: https://github.com/svecosystem/runed/blob/main/sites/docs/src/content/utilities/is-idle.md#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninterface IsIdleOptions {\n\t/**\n\t * The events that should set the idle state to `true`\n\t *\n\t * @default ['mousemove', 'mousedown', 'resize', 'keydown', 'touchstart', 'wheel']\n\t */\n\tevents?: MaybeGetter<(keyof WindowEventMap)[]>;\n\t/**\n\t * The timeout in milliseconds before the idle state is set to `true`. Defaults to 60 seconds.\n\t *\n\t * @default 60000\n\t */\n\ttimeout?: MaybeGetter<number>;\n\t/**\n\t * Detect document visibility changes\n\t *\n\t * @default false\n\t */\n\tdetectVisibilityChanges?: MaybeGetter<boolean>;\n\t/**\n\t * The initial state of the idle property\n\t *\n\t * @default false\n\t */\n\tinitialState?: boolean;\n}\n\nclass IsIdle {\n\tconstructor(options?: IsIdleOptions);\n\treadonly current: boolean;\n\treadonly lastActive: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Runed Package\nDESCRIPTION: Command to install the Runed package via npm package manager\nSOURCE: https://github.com/svecosystem/runed/blob/main/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install runed\n```\n\n----------------------------------------\n\nTITLE: Updating PersistedState Storage Behavior in Markdown\nDESCRIPTION: Modifies the 'persisted-state' to write state to storage even when only a nested property changes, addressing issue #224 in version 0.24.1.\nSOURCE: https://github.com/svecosystem/runed/blob/main/packages/runed/CHANGELOG.md#2025-04-17_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n- fix(persisted-state): write state to storage even if only a nested property is changed. fixes #224\n  ([#225](https://github.com/svecosystem/runed/pull/225))\n```\n\n----------------------------------------\n\nTITLE: Installing Runed package with npm\nDESCRIPTION: A command to install the Runed package using npm package manager. This is the first step required before using any Runed utilities in your project.\nSOURCE: https://github.com/svecosystem/runed/blob/main/sites/docs/src/content/getting-started.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install runed\n```\n\n----------------------------------------\n\nTITLE: Initializing Previous with Initial Value in Markdown\nDESCRIPTION: Allows passing an initial value to the 'previous' function, as noted in the changelog for version 0.25.0.\nSOURCE: https://github.com/svecosystem/runed/blob/main/packages/runed/CHANGELOG.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- previous: allow passing initial value\n  ([`3bbcb9e`](https://github.com/svecosystem/runed/commit/3bbcb9e0185bb40fdb8d38b31876f0e297bee544))\n```"
  }
]