[
  {
    "owner": "cachix",
    "repo": "devenv",
    "content": "TITLE: Initializing Developer Environment with devenv.nix in Nix\nDESCRIPTION: This snippet shows a sample devenv.nix configuration file. It sets up environment variables, packages, shell commands, tests, language support, scripts, services, git hooks, and processes.\nSOURCE: https://github.com/cachix/devenv/blob/main/README.md#2025-04-21_snippet_0\n\nLANGUAGE: nix\nCODE:\n```\n{ pkgs, ... }:\n\n{\n  # https://devenv.sh/basics/\n  env.GREET = \"devenv\";\n\n  # https://devenv.sh/packages/\n  packages = [ pkgs.git ];\n\n  enterShell = ''\n    hello\n  '';\n\n  # https://devenv.sh/tests/\n  enterTest = ''\n    echo \"Running tests\"\n    git --version | grep --color=auto \"${pkgs.git.version}\"\n  '';\n\n  # https://devenv.sh/languages/\n  languages.nix.enable = true;\n\n  # https://devenv.sh/scripts/\n  scripts.hello.exec = \"echo hello from $GREET\";\n\n  # https://devenv.sh/services/\n  services.postgres.enable = true;\n\n  # https://devenv.sh/git-hooks/\n  git-hooks.hooks.shellcheck.enable = true;\n\n  # https://devenv.sh/processes/\n  processes.ping.exec = \"ping localhost\";\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Programming Languages in Devenv Configuration\nDESCRIPTION: Nix configuration that enables various programming languages and development tools in Devenv. Each language is configured with a boolean flag that can be set to true to enable support for that language. The configuration includes support for mainstream languages like Python, JavaScript, and Java, as well as more specialized languages like Idris, Gleam, and PureScript.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/languages-all.md#2025-04-21_snippet_0\n\nLANGUAGE: nix\nCODE:\n```\nlanguages.ansible.enable = true;\nlanguages.c.enable = true;\nlanguages.clojure.enable = true;\nlanguages.cplusplus.enable = true;\nlanguages.crystal.enable = true;\nlanguages.cue.enable = true;\nlanguages.dart.enable = true;\nlanguages.deno.enable = true;\nlanguages.dotnet.enable = true;\nlanguages.elixir.enable = true;\nlanguages.elm.enable = true;\nlanguages.erlang.enable = true;\nlanguages.fortran.enable = true;\nlanguages.gawk.enable = true;\nlanguages.gleam.enable = true;\nlanguages.go.enable = true;\nlanguages.haskell.enable = true;\nlanguages.idris.enable = true;\nlanguages.java.enable = true;\nlanguages.javascript.enable = true;\nlanguages.jsonnet.enable = true;\nlanguages.julia.enable = true;\nlanguages.kotlin.enable = true;\nlanguages.lean4.enable = true;\nlanguages.lua.enable = true;\nlanguages.nim.enable = true;\nlanguages.nix.enable = true;\nlanguages.ocaml.enable = true;\nlanguages.odin.enable = true;\nlanguages.opentofu.enable = true;\nlanguages.pascal.enable = true;\nlanguages.perl.enable = true;\nlanguages.php.enable = true;\nlanguages.purescript.enable = true;\nlanguages.python.enable = true;\nlanguages.r.enable = true;\nlanguages.racket.enable = true;\nlanguages.raku.enable = true;\nlanguages.robotframework.enable = true;\nlanguages.ruby.enable = true;\nlanguages.rust.enable = true;\nlanguages.scala.enable = true;\nlanguages.shell.enable = true;\nlanguages.solidity.enable = true;\nlanguages.standardml.enable = true;\nlanguages.swift.enable = true;\nlanguages.terraform.enable = true;\nlanguages.texlive.enable = true;\nlanguages.typescript.enable = true;\nlanguages.typst.enable = true;\nlanguages.unison.enable = true;\nlanguages.v.enable = true;\nlanguages.vala.enable = true;\nlanguages.zig.enable = true;\n```\n\n----------------------------------------\n\nTITLE: Defining Minimal flake.nix with devenv Configuration\nDESCRIPTION: Example of a minimal flake.nix file that includes devenv. It defines inputs, outputs, and a basic devenv shell configuration with a single package and an enter shell command.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/guides/using-with-flake-parts.md#2025-04-21_snippet_1\n\nLANGUAGE: nix\nCODE:\n```\n{\n  inputs = {\n    nixpkgs.url = \"github:cachix/devenv-nixpkgs/rolling\";\n    devenv.url = \"github:cachix/devenv\";\n  };\n\n  outputs = inputs@{ flake-parts, nixpkgs, ... }:\n    flake-parts.lib.mkFlake { inherit inputs; } {\n      imports = [\n        inputs.devenv.flakeModule\n      ];\n      systems = nixpkgs.lib.systems.flakeExposed;\n\n      perSystem = { config, self', inputs', pkgs, system, ... }: {\n        # Per-system attributes can be defined here. The self' and inputs'\n        # module parameters provide easy access to attributes of the same\n        # system.\n\n        # Equivalent to  inputs'.nixpkgs.legacyPackages.hello;\n        packages.default = pkgs.hello;\n\n        devenv.shells.default = {\n          # https://devenv.sh/reference/options/\n          packages = [ config.packages.default ];\n\n          enterShell = ''\n            hello\n          '';\n        };\n      };\n    };\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Nix on macOS using the experimental installer\nDESCRIPTION: Command to install Nix package manager on macOS using the experimental installer, which has better support for Apple silicon and can handle OS upgrades.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/getting-started.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncurl -L https://github.com/NixOS/experimental-nix-installer/releases/download/0.27.0/nix-installer.sh | sh -s -- install\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Development Environment with Nix\nDESCRIPTION: This snippet shows the structure of a basic devenv.nix file that sets up a development environment with an environment variable, package dependency, and shell initialization commands. Each line is annotated with explanations of the Nix syntax.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/basics.md#2025-04-21_snippet_0\n\nLANGUAGE: nix\nCODE:\n```\n{ pkgs, ... }: # (1)!\n\n{ # (2)!\n  env.GREET = \"hello\"; # (3)!\n\n  packages = [ pkgs.jq ];\n\n  enterShell = ''\n    echo $GREET\n    jq --version\n  ''; # (4)!\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding Configuration Options via CLI\nDESCRIPTION: This example demonstrates how to temporarily override configuration options using the --option flag with the devenv shell command. The syntax requires specifying both the option path and its type, which allows for testing different configurations without modifying the devenv.nix file.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/basics.md#2025-04-21_snippet_3\n\nLANGUAGE: shell-session\nCODE:\n```\n$ devenv shell --option env.GREET:string Hello --option languages.rust.enable:bool true\n```\n\n----------------------------------------\n\nTITLE: Configuring Python and Rust in devenv\nDESCRIPTION: Configuration example showing how to enable Python and Rust support in devenv with specific version settings. The configuration specifies Python version 3.11.3 and stable Rust channel.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/languages.md#2025-04-21_snippet_0\n\nLANGUAGE: nix\nCODE:\n```\n{ pkgs, ... }:\n\n{\n  languages.python.enable = true;\n  languages.python.version = \"3.11.3\";\n\n  languages.rust.enable = true;\n  # https://devenv.sh/reference/options/#languagesrustchannel\n  languages.rust.channel = \"stable\";\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Packages in devenv.nix\nDESCRIPTION: Shows how to declare packages in devenv.nix configuration file by specifying a list of packages from pkgs input. This example includes common development tools like git, jq, and system libraries.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/packages.md#2025-04-21_snippet_0\n\nLANGUAGE: nix\nCODE:\n```\n{ pkgs, ... }:\n\n{\n  packages = [ \n    pkgs.git \n    pkgs.jq\n    pkgs.libffi\n    pkgs.zlib\n  ];\n}\n```\n\n----------------------------------------\n\nTITLE: Advanced Android Environment Configuration in Nix\nDESCRIPTION: Detailed Android development environment configuration including platform versions, system images, NDK, emulator settings, and additional tools and licenses\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/integrations/android.md#2025-04-21_snippet_1\n\nLANGUAGE: nix\nCODE:\n```\n{ pkgs, ... }:\n\n{\n  android = {\n    enable = true;\n    platforms.version = [ \"32\" \"34\" ];\n    systemImageTypes = [ \"google_apis_playstore\" ];\n    abis = [ \"arm64-v8a\" \"x86_64\" ];\n    cmake.version = [ \"3.22.1\" ];\n    cmdLineTools.version = \"11.0\";\n    tools.version = \"26.1.1\";\n    platformTools.version = \"34.0.5\";\n    buildTools.version = [ \"30.0.3\" ];\n    emulator = {\n      enable = true;\n      version = \"34.1.9\";\n    };\n    sources.enable = false;\n    systemImages.enable = true;\n    ndk.enable = true;\n    googleAPIs.enable = true;\n    googleTVAddOns.enable = true;\n    extras = [ \"extras;google;gcm\" ];\n    extraLicenses = [\n      \"android-sdk-preview-license\"\n      \"android-googletv-license\"\n      \"android-sdk-arm-dbt-license\"\n      \"google-gdk-license\"\n      \"intel-android-extra-license\"\n      \"intel-android-sysimage-license\"\n      \"mips-android-sysimage-license\"\n    ];\n    android-studio = {\n      enable = true;\n      package = pkgs.android-studio;\n    };\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring PostgreSQL Service in Nix for devenv\nDESCRIPTION: This snippet demonstrates how to configure a PostgreSQL service in devenv.nix. It sets up PostgreSQL 15 with PostGIS and TimescaleDB extensions, initializes a database, and runs an initial SQL script.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/services.md#2025-04-21_snippet_0\n\nLANGUAGE: nix\nCODE:\n```\n{ pkgs, ... }:\n\n{\n  services.postgres = {\n    enable = true;\n    package = pkgs.postgresql_15;\n    initialDatabases = [{ name = \"mydb\"; }];\n    extensions = extensions: [\n      extensions.postgis\n      extensions.timescaledb\n    ];\n    settings.shared_preload_libraries = \"timescaledb\";\n    initialScript = \"CREATE EXTENSION IF NOT EXISTS timescaledb;\";\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Composition with devenv.yaml\nDESCRIPTION: This YAML configuration shows how to compose environments by importing configurations from local directories and remote repositories. It defines nixpkgs and devenv inputs, and imports configurations from frontend and backend directories as well as example configurations from the devenv repository.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/composing-using-imports.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ninputs:\n  nixpkgs:\n    url: github:cachix/devenv-nixpkgs/rolling\n  devenv:\n    url: github:cachix/devenv\nimports:\n- ./frontend\n- ./backend\n- devenv/examples/supported-languages\n- devenv/examples/scripts\n```\n\n----------------------------------------\n\nTITLE: Configuring Wordpress Development Environment with Nix\nDESCRIPTION: This Nix configuration sets up a complete Wordpress development environment. It includes PHP 8.2 with specific extensions, MySQL database, Caddy web server, and Redis. The configuration also sets up SSL certificates and configures PHP-FPM pools for optimal performance.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/integrations/wordpress.md#2025-04-21_snippet_0\n\nLANGUAGE: nix\nCODE:\n```\n{ pkgs, config, ... }:\n\n{\n  packages = with pkgs;[\n    git\n    wp-cli\n  ];\n\n  languages.php.enable = true;\n  languages.php.package = pkgs.php82.buildEnv {\n    extensions = { all, enabled }: with all; enabled ++ [ redis pdo_mysql xdebug ];\n    extraConfig = ''\n      memory_limit = -1\n      xdebug.mode = debug\n      xdebug.start_with_request = yes\n      xdebug.idekey = vscode\n      xdebug.log_level = 0\n      max_execution_time = 0\n    '';\n  };\n\n  languages.php.fpm.pools.web = {\n    settings = {\n      \"clear_env\" = \"no\";\n      \"pm\" = \"dynamic\";\n      \"pm.max_children\" = 10;\n      \"pm.start_servers\" = 2;\n      \"pm.min_spare_servers\" = 1;\n      \"pm.max_spare_servers\" = 10;\n    };\n  };\n\n  certificates = [\n    \"wp.localhost\"\n  ];\n\n  # This lets Caddy bind to 443\n  scripts.caddy-setcap.exec = ''\n    sudo setcap 'cap_net_bind_service=+ep' ${pkgs.caddy}/bin/caddy\n  '';\n  services.redis.enable = true;\n\n  # Links to MariaDB internally\n  services.mysql = {\n    enable = true;\n    settings.mysqld = {\n      max_allowed_packet = \"512M\";\n    };\n  };\n\n  services.mysql.initialDatabases = [{name = \"wp\"; }];\n  services.mysql.ensureUsers = [\n    {\n      name = \"wordpress\";\n      password = \"YourSecretSauceHere\";\n      ensurePermissions = { \"wp.*\" = \"ALL PRIVILEGES\"; };\n    }\n  ];\n\n  services.caddy.enable = true;\n  services.caddy.virtualHosts.\"wp.localhost\" = {\n    extraConfig = ''\n      tls ${config.env.DEVENV_STATE}/mkcert/wp.localhost.pem ${config.env.DEVENV_STATE}/mkcert/wp.localhost-key.pem\n      root * .\n      php_fastcgi unix/${config.languages.php.fpm.pools.web.socket}\n      file_server\n    '';\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring a Container with Custom Startup Command in Nix\nDESCRIPTION: Defines a container that runs a simple HTTP server when started. This example shows how to override the default container behavior with a custom startup command.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/containers.md#2025-04-21_snippet_2\n\nLANGUAGE: nix\nCODE:\n```\n{\n  processes.serve.exec = \"python -m http.server\";\n\n  containers.\"serve\".name = \"myapp\";\n  containers.\"serve\".startupCommand = config.processes.serve.exec;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Rust Development Environment with devenv in Nix\nDESCRIPTION: This snippet demonstrates how to set up a Rust development environment using devenv.nix. It includes package installation, Rust language configuration, process definition, and enabling a PostgreSQL service.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/blog/posts/devenv-is-switchting-nix-implementation-to-tvix.md#2025-04-21_snippet_0\n\nLANGUAGE: nix\nCODE:\n```\n{ pkgs, config, ... }: {\n  packages = [\n    pkgs.cargo-watch\n  ];\n\n  languages.rust = {\n    enable = true;\n    channel = \"nightly\";\n    rustflags = \"-Z threads=8\";\n    targets = [ \"wasm32-unknown-unknown\" ];\n  };\n\n  processes = {\n    backend.exec = \"cargo watch -x run\";\n  };\n\n  services = {\n    postgresql.enable = true;\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Overlays in devenv.nix\nDESCRIPTION: This snippet demonstrates how to add overlays to your devenv configuration. It shows how to override existing packages, add custom packages, and use the modified packages.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/overlays.md#2025-04-21_snippet_0\n\nLANGUAGE: nix\nCODE:\n```\n{ pkgs, ... }:\n\n{\n  # List of overlays to apply to pkgs\n  overlays = [\n    # Each overlay is a function that takes two arguments: final and prev\n    (final: prev: {\n      # Override an existing package\n      hello = prev.hello.overrideAttrs (oldAttrs: {\n        patches = (oldAttrs.patches or []) ++ [ ./hello-fix.patch ];\n      });\n\n      # Add a custom package\n      my-custom-package = final.callPackage ./my-package.nix {};\n    })\n  ];\n\n  # Now you can use the modified or added packages\n  packages = [ pkgs.hello pkgs.my-custom-package ];\n}\n```\n\n----------------------------------------\n\nTITLE: Patching Existing Packages with Overlays\nDESCRIPTION: This snippet shows how to use an overlay to apply a patch to an existing package. It demonstrates adding a patch file to fix a bug in a package.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/overlays.md#2025-04-21_snippet_1\n\nLANGUAGE: nix\nCODE:\n```\noverlays = [\n  (final: prev: {\n    # Apply a patch to fix a bug\n    somePackage = prev.somePackage.overrideAttrs (oldAttrs: {\n      patches = (oldAttrs.patches or []) ++ [ ./my-fix.patch ];\n    });\n  })\n];\n```\n\n----------------------------------------\n\nTITLE: Configuring Python Setup Task in devenv.nix\nDESCRIPTION: This Nix code snippet demonstrates how to set up a Python task in devenv.nix. It enables Python and its virtual environment, then defines a 'python:setup' task that executes Python code after the virtualenv is created.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/blog/posts/devenv-v1.2-tasks.md#2025-04-21_snippet_0\n\nLANGUAGE: nix\nCODE:\n```\n{ pkgs, lib, config, ... }: {\n  languages.python.enable = true;\n  languages.python.venv.enable = true;\n\n  tasks = {\n    \"python:setup\" = {\n      exec = \"python ${pkgs.writeText \"setup.py\" ''\n          print(\"hello world\")\n      ''}\";\n      after = [ \"devenv:python:virtualenv\" ];\n    };\n    \"devenv:enterShell\".after = [ \"python:setup\" ];\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Searching for Packages with devenv\nDESCRIPTION: Shows how to search for available packages using the devenv search command, displaying package names, versions, and descriptions.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/packages.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ devenv search ncdu\nname         version  description\n----         -------  -----------\npkgs.ncdu    2.2.1    Disk usage analyzer with an ncurses interface\npkgs.ncdu_1  1.17     Disk usage analyzer with an ncurses interface\npkgs.ncdu_2  2.2.1    Disk usage analyzer with an ncurses interface\n\n\nNo options found for 'ncdu'.\n\nFound 3 packages and 0 options for 'ncdu'.\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Task in Nix for devenv.nix\nDESCRIPTION: Demonstrates how to define a simple task named 'myapp:hello' that prints 'Hello, world!' to the console.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/tasks.md#2025-04-21_snippet_0\n\nLANGUAGE: nix\nCODE:\n```\n{ pkgs, ... }:\n\n{\n  tasks.\"myapp:hello\" = {\n    exec = ''echo \"Hello, world!\"'';\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Using the Devenv Shell Environment\nDESCRIPTION: This example demonstrates running the devenv shell command to enter the configured environment. When activated, the shell executes the commands defined in enterShell and makes environment variables available to the user.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/basics.md#2025-04-21_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ devenv shell\nBuilding shell ...\nEntering shell ...\n\nhello\njq-1.6\n\n(devenv) $ echo $GREET\nhello\n```\n\n----------------------------------------\n\nTITLE: Configuring Rust Components in devenv\nDESCRIPTION: Defines the list of Rustup components to install. By default, it includes rustc, cargo, clippy, rustfmt, and rust-analyzer.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/supported-languages/rust.md#2025-04-21_snippet_2\n\nLANGUAGE: nix\nCODE:\n```\nlanguages.rust.components = [ \"rustc\" \"cargo\" \"clippy\" \"rustfmt\" \"rust-analyzer\" ]\n```\n\n----------------------------------------\n\nTITLE: Python Native Libraries Configuration in Nix\nDESCRIPTION: Configuration example showing how to set up Python environment with native library support, including venv setup and external library dependencies.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/blog/posts/devenv-v1.0-rewrite-in-rust.md#2025-04-21_snippet_1\n\nLANGUAGE: nix\nCODE:\n```\n{ pkgs, lib, ... }: {\n  languages.python = {\n    enable = true;\n    venv.enable = true;\n    venv.requirements = ''\n      pillow\n    '';\n    libraries = [ pkgs.cairo ];\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Finding Files in Packages using nix-index-database\nDESCRIPTION: Demonstrates how to search for specific files across all packages using the nix-index-database tool, showing which packages contain a particular file.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/packages.md#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ nix run github:mic92/nix-index-database libquadmath.so\n(rPackages.RcppEigen.out)                       302,984 x /nix/store/24r9jkqyf2nd5dlg1jyihfl82sa9nwwb-gfortran-12.3.0-lib/lib/libquadmath.so.0.0.0\n(zsnes2.out)                                    693,200 x /nix/store/z23qmfjaj5p50n3iki7zkjjgjzia16v1-gcc-12.3.0-lib/lib/libquadmath.so.0.0.0\n(zulip.out)                                           0 s /nix/store/xnlcrrg3b9fgwry6qh3fxk3hnb0whs5z-zulip-5.10.2-usr-target/lib/libquadmath.so.0.0.0\n(zulip.out)                                           0 s /nix/store/xnlcrrg3b9fgwry6qh3fxk3hnb0whs5z-zulip-5.10.2-usr-target/lib64/libquadmath.so.0.0.0\n(zulip.out)                                           0 s /nix/store/48dnfgadck1mzncy002cs1a9hpddmdmz-zulip-5.10.2-fhs/usr/lib/libquadmath.so.0.0.0\n(zettlr-beta.out)                                     0 s /nix/store/nlq9rpakv852kkm7lwhzgb8iap1izpdm-zettlr-beta-3.0.0-beta.7-fhs/usr/lib/libquadmath.so.0.0.0\n(zettlr-beta.out)                                     0 s /nix/store/8ypzmv66kvi6qrdlga9yg60gl396n7ny-zettlr-beta-3.0.0-beta.7-usr-target/lib/libquadmath.so.0.0.0\n(zettlr-beta.out)                                     0 s /nix/store/8ypzmv66kvi6qrdlga9yg60gl396n7ny-zettlr-beta-3.0.0-beta.7-usr-target/lib64/libquadmath.so.0.0.0\n(zettlr.out)                                          0 s /nix/store/5xq9qch1fnknn3z97wcdvcf5vgjfm2ip-zettlr-2.3.0-fhs/usr/lib/libquadmath.so.0.0.0\n(zecwallet-lite.out)                                  0 s /nix/store/rllm8zagppnjf4kh14drwwg93gsxwaja-zecwallet-lite-1.8.8-fhs/usr/lib/libquadmath.so.0.0.0\n...\n```\n\n----------------------------------------\n\nTITLE: Configuring DevEnv for C Development\nDESCRIPTION: Nix configuration file that sets up a development environment for C programming with essential tools and dependencies like GCC, clangd, cmake, and debugging utilities.\nSOURCE: https://github.com/cachix/devenv/blob/main/examples/modern-c/README.md#2025-04-21_snippet_0\n\nLANGUAGE: nix\nCODE:\n```\n{ pkgs, ... }:\n\n{\n  # https://devenv.sh/basics/\n  env.GREET = \"devenv\";\n\n  # https://devenv.sh/packages/\n  packages = [ \n    pkgs.git\n    pkgs.gcc\n    pkgs.gdb\n    pkgs.cmake\n    pkgs.bear\n    pkgs.clang-tools\n    pkgs.ccls\n  ];\n\n  enterShell = ''\n    hello\n  '';\n\n  # https://devenv.sh/languages/\n  languages.c.enable = true;\n\n  # https://devenv.sh/scripts/\n  scripts.hello.exec = \"echo hello $GREET\";\n\n  # https://devenv.sh/processes/\n  # processes.ping.exec = \"ping example.com\";\n}\n```\n\n----------------------------------------\n\nTITLE: Generating a New Nix Developer Environment Using AI with devenv CLI\nDESCRIPTION: This snippet demonstrates how to use the devenv generate command to create a new Nix developer environment for a Python project using Torch. The command generates both devenv.nix and devenv.yaml files.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/blog/posts/devenv-v1.4-generating-nix-developer-environments-using-ai.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ devenv generate a Python project using Torch\n• Generating devenv.nix and devenv.yaml, this should take about a minute ...\n```\n\n----------------------------------------\n\nTITLE: Importing devenv Module in Nix Flake Configuration\nDESCRIPTION: Example of importing a devenv configuration or module into an individual shell in the flake.nix file. It shows how to use the 'imports' option in the devenv.shells definition.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/guides/using-with-flake-parts.md#2025-04-21_snippet_5\n\nLANGUAGE: nix\nCODE:\n```\n# inside perSystem = { ... }: {\n\ndevenv.shells.default = {\n  imports = [ ./devenv-foo.nix ];\n\n  enterShell = ''\n    hello\n  '';\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Pre-commit Hooks in devenv.nix\nDESCRIPTION: Shows how to enable and configure various pre-commit hooks like shellcheck, mdsh, black, ormolu, and clippy. Demonstrates package overrides and hook settings configuration.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/git-hooks.md#2025-04-21_snippet_0\n\nLANGUAGE: nix\nCODE:\n```\n{ inputs, ... }:\n\n{\n  git-hooks.hooks = {\n    # lint shell scripts\n    shellcheck.enable = true;\n    # execute example shell from Markdown files\n    mdsh.enable = true;\n    # format Python code\n    black.enable = true;\n\n    # override a package with a different version\n    ormolu.enable = true;\n    ormolu.package = pkgs.haskellPackages.ormolu;\n\n    # some hooks have more than one package, like clippy:\n    clippy.enable = true;\n    clippy.packageOverrides.cargo = pkgs.cargo;\n    clippy.packageOverrides.clippy = pkgs.clippy;\n    # some hooks provide settings\n    clippy.settings.allFeatures = true;\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring PHP Package with Extensions in Nix\nDESCRIPTION: Example of overriding the default PHP package to add extensions and custom configuration. This snippet demonstrates how to build a custom PHP environment with additional extensions like xdebug and a custom memory limit.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/supported-languages/php.md#2025-04-21_snippet_0\n\nLANGUAGE: nix\nCODE:\n```\npkgs.php.buildEnv {\n  extensions = { all, enabled }: with all; enabled ++ [ xdebug ];\n  extraConfig = ''\n    memory_limit=1G\n  '';\n};\n```\n\n----------------------------------------\n\nTITLE: Running devenv gc command for garbage collection\nDESCRIPTION: The 'devenv gc' command cleans up the build artifacts by removing everything except the latest successful invocation of any devenv command per folder, helping to free up disk space.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/garbage-collection.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndevenv gc\n```\n\n----------------------------------------\n\nTITLE: Conditionally Enabling Cache Pushing in Shell\nDESCRIPTION: Shell command to create a local override file that enables pushing to a Cachix cache. Useful for enabling cache pushing only in specific environments like CI.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/binary-caching.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ echo '{ cachix.push = \"mycache\"; }' > devenv.local.nix\n```\n\n----------------------------------------\n\nTITLE: Defining Multiple devenv Shells in Nix Flake\nDESCRIPTION: Example of defining multiple development shells in a central flake.nix file. It shows how to create separate configurations for different subprojects and set a default shell.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/guides/using-with-flake-parts.md#2025-04-21_snippet_7\n\nLANGUAGE: nix\nCODE:\n```\n# inside perSystem = { ... }: {\n\ndevenv.shells.projectA = {\n  # https://devenv.sh/reference/options/\n  packages = [ config.packages.default ];\n\n  enterShell = ''\n    echo this is project A\n    hello\n  '';\n};\n\ndevenv.shells.projectB = {\n  # https://devenv.sh/reference/options/\n  packages = [ config.packages.default ];\n\n  enterShell = ''\n    echo this is project B\n    hello\n  '';\n};\n\n# If you'd like to pick a default\ndevShells.default = config.devShells.projectA;\n```\n\n----------------------------------------\n\nTITLE: Applying Overlays to Modify Packages in Nix\nDESCRIPTION: This snippet demonstrates how to use overlays in a devenv.nix file to modify the 'hello' package by applying a patch. It shows the structure for defining overlays and using the modified packages.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/blog/posts/devenv-v1.5-overlays-and-performance.md#2025-04-21_snippet_0\n\nLANGUAGE: nix\nCODE:\n```\n{ pkgs, ... }:\n\n{\n  # Define overlays to modify the package set\n  overlays = [\n    # Override an existing package with a patch\n    (final: prev: {\n      hello = prev.hello.overrideAttrs (oldAttrs: {\n        patches = (oldAttrs.patches or []) ++ [ ./hello-fix.patch ];\n      });\n    })\n  ];\n\n  # Use the modified packages\n  packages = [ pkgs.hello pkgs.my-tool ];\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Phoenix Project with Devenv and Database Configuration\nDESCRIPTION: Series of commands to install Phoenix dependencies, create a new Phoenix project, configure PostgreSQL connection, and initialize the database. Uses devenv for development environment management and modifies the database configuration to use socket-based connection.\nSOURCE: https://github.com/cachix/devenv/blob/main/examples/phoenix/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell-session\nCODE:\n```\n$ devenv shell\n$ mix local.hex --force\n$ mix local.rebar --force\n$ mix archive.install hex phx_new\n$ mix phx.new --install hello\n$ sed -i.bak -e \"s/hostname: \\\"localhost\\\"/socket_dir: System.get_env(\\\"PGHOST\\\")/\" \\\n    ./hello/config/dev.exs && rm ./hello/config/dev.exs.bak\n$ devenv up\n$ cd hello && mix ecto.create\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Devenv Environment in Nix\nDESCRIPTION: Basic devenv configuration that installs the hello package and defines a custom script to print 'bye'\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/integrations/github-actions.md#2025-04-21_snippet_0\n\nLANGUAGE: nix\nCODE:\n```\n{ pkgs, ... }:\n\n{\n  packages = [ pkgs.hello ];\n\n  scripts.say-bye.exec = ''\n    echo bye\n  '';\n}\n```\n\n----------------------------------------\n\nTITLE: Installing devenv using Nix profiles\nDESCRIPTION: Command to install devenv using Nix profiles, which requires experimental flags to be enabled in your Nix configuration.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/getting-started.md#2025-04-21_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nnix profile install nixpkgs#devenv\n```\n\n----------------------------------------\n\nTITLE: Configuring devenv.yaml with Advanced Options\nDESCRIPTION: An extensive example of a devenv.yaml configuration file, demonstrating various options including allowUnfree, allowBroken, clean environment settings, custom inputs, and imports from different sources.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/reference/yaml-options.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nallowUnfree: true\nallowBroken: true\nclean:\n  enabled: true\n  keep:\n    - EDITOR\ninputs:\n  nixpkgs:\n    url: github:cachix/devenv-nixpkgs/rolling\n  myproject:\n    url: github:owner/myproject\n    flake: false\n  myproject2:\n    url: github:owner/myproject\n    overlays:\n      - default\nimports:\n  - ./frontend\n  - ./backend\n  - ./mymodule.nix\n  - myproject\n  - myproject/relative/path\n```\n\n----------------------------------------\n\nTITLE: Running Multiple Commands in Devenv Shell\nDESCRIPTION: GitHub Actions step showing how to execute multiple commands in the devenv shell using custom shell configuration\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/integrations/github-actions.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Run a multi-line command in the devenv shell\n  shell: devenv shell bash -- -e {0}\n  run: |\n    hello\n    say-bye\n```\n\n----------------------------------------\n\nTITLE: Initializing a devenv project\nDESCRIPTION: Example shell session showing the output of running 'devenv init' to create the initial structure for a devenv project, which creates necessary configuration files.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/getting-started.md#2025-04-21_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\n$ devenv init\n• Creating .envrc\n• Creating devenv.nix\n• Creating devenv.yaml\n• Creating .gitignore\n```\n\n----------------------------------------\n\nTITLE: Defining Module-Based Outputs\nDESCRIPTION: Advanced example showing how to define outputs using the module system's options, including type definitions and default values.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/outputs.md#2025-04-21_snippet_3\n\nLANGUAGE: nix\nCODE:\n```\n{ pkgs, lib, config, ... }: {\n  options = {\n    myapp.package = pkgs.lib.mkOption {\n      type = config.lib.types.outputOf lib.types.package;\n      description = \"The package for myapp\";\n      default = import ./myapp { inherit pkgs; };\n      defaultText = \"myapp\";\n    };\n  };\n\n  config = {\n    outputs.git = pkgs.git;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Simple Test in Nix for devenv\nDESCRIPTION: This snippet demonstrates how to write a basic test in devenv.nix that checks the version of ncdu. It includes the package in the environment and defines a test command in enterTest.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/tests.md#2025-04-21_snippet_0\n\nLANGUAGE: nix\nCODE:\n```\n{ pkgs, ... }: {\n  packages = [ pkgs.ncdu ];\n\n  enterTest = ''\n    ncdu --version | grep \"ncdu 2.2\"\n  '';\n}\n```\n\n----------------------------------------\n\nTITLE: Using Package Commands in devenv Shell\nDESCRIPTION: Demonstrates the difference between trying to use a package command outside and inside the devenv shell environment, showing how packages become available after entering the shell.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/packages.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ jq\njq: command not found\n\n$ devenv shell\nBuilding shell ...\nEntering shell ...\n\n(devenv) $ jq --version\njq-1.6\n```\n\n----------------------------------------\n\nTITLE: Configuring direnv for automatic shell activation\nDESCRIPTION: Entry for .envrc file to automatically launch the devenv shell when entering the project directory. Requires nix-direnv to be installed.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/guides/using-with-flakes.md#2025-04-21_snippet_5\n\nLANGUAGE: text\nCODE:\n```\nuse flake . --no-pure-eval\n```\n\n----------------------------------------\n\nTITLE: Conditional Package Inclusion Based on Build Type in Nix\nDESCRIPTION: Demonstrates how to include packages conditionally depending on whether building for a container or native environment. This allows for optimizing the container by only including necessary dependencies.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/containers.md#2025-04-21_snippet_5\n\nLANGUAGE: nix\nCODE:\n```\n{ pkgs, config, lib, ... }:\n\n{\n  packages = [ pkgs.openssl ]\n    ++ lib.optionals (!config.container.isBuilding) [ pkgs.git ];\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Dotenv Integration in Devenv using Nix\nDESCRIPTION: This snippet demonstrates how to enable dotenv integration in a Devenv project using Nix configuration. It shows how to activate the feature and optionally specify custom filenames for environment variable loading.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/integrations/dotenv.md#2025-04-21_snippet_0\n\nLANGUAGE: nix\nCODE:\n```\n{\n  dotenv.enable = true;\n\n  # Optionally, you can choose which filename to load.\n  # \n  # dotenv.filename = \".env.production\";\n  # or\n  # dotenv.filename = [ \".env.production\" \".env.development\" ]\n}\n```\n\n----------------------------------------\n\nTITLE: Using Packages from Different Nixpkgs Versions in Nix\nDESCRIPTION: This Nix code snippet demonstrates how to use packages from a different Nixpkgs version (unstable in this case) by leveraging the additional input defined in the YAML configuration. It specifically uses the unstable version of Node.js.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/blog/posts/devenv-v1.5-overlays-and-performance.md#2025-04-21_snippet_2\n\nLANGUAGE: nix\nCODE:\n```\n{ pkgs, inputs, ... }:\n\n{\n  overlays = [\n    (final: prev: {\n      nodejs = (import inputs.nixpkgs-unstable {\n        system = prev.stdenv.system;\n      }).nodejs;\n    })\n  ];\n\n  # Now you can use the unstable version of Node.js\n  languages.javascript.enable = true;\n}\n```\n\n----------------------------------------\n\nTITLE: Running Processes with devenv up\nDESCRIPTION: This shell session demonstrates the output of running 'devenv up' command, which starts the processes defined in the devenv.nix file. It shows the startup messages and the interleaved output from both processes.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/processes.md#2025-04-21_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ devenv up\nStarting processes ...\n\n20:37:44 system          | ping.1 started (pid=4094686)\n20:37:44 system          | silly-example.1 started (pid=4094688)\n20:37:44 silly-example.1 | hello\n20:37:44 ping.1          | PING localhost (127.0.0.1) 56 bytes of data.\n20:37:44 ping.1          | 64 bytes from 127.0.0.1: icmp_seq=0 ttl=64 time=0.127 ms\n20:37:45 silly-example.1 | hello\n20:37:45 ping.1          | 64 bytes from 127.0.0.1: icmp_seq=1 ttl=64 time=0.257 ms\n20:37:46 silly-example.1 | hello\n20:37:46 ping.1          | 64 bytes from 127.0.0.1: icmp_seq=2 ttl=64 time=0.242 ms\n20:37:47 silly-example.1 | hello\n20:37:47 ping.1          | 64 bytes from 127.0.0.1: icmp_seq=3 ttl=64 time=0.249 ms\n...\n```\n\n----------------------------------------\n\nTITLE: Entering Specific devenv Shell with Nix Flakes\nDESCRIPTION: Commands to enter specific devenv shells defined in a multi-shell flake configuration. It shows how to access different project shells and the default shell.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/guides/using-with-flake-parts.md#2025-04-21_snippet_8\n\nLANGUAGE: console\nCODE:\n```\n$ nix develop --no-pure-eval .#projectA\nthis is project A\n(devenv) $ \n```\n\nLANGUAGE: console\nCODE:\n```\n$ nix develop --no-pure-eval .#projectB\nthis is project B\n(devenv) $ \n```\n\nLANGUAGE: console\nCODE:\n```\n$ nix develop --no-pure-eval .\nthis is project A\n(devenv) $ \n```\n\n----------------------------------------\n\nTITLE: Configuring Container Registry Settings in Nix\nDESCRIPTION: Specifies registry settings for deploying containers, particularly for fly.io. This example shows how to declaratively define registry and authentication settings.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/containers.md#2025-04-21_snippet_4\n\nLANGUAGE: nix\nCODE:\n```\n{\n  containers.\"processes\".registry = \"docker://registry.fly.io/\";\n  containers.\"processes\".defaultCopyArgs = [\n    \"--dest-creds\"\n    \"x:\\\"$(${pkgs.flyctl}/bin/flyctl auth token)\\\"\"\n  ];\n}\n```\n\n----------------------------------------\n\nTITLE: Using Packages from Older nixpkgs with Overlays\nDESCRIPTION: This snippet demonstrates how to use packages from an older version of nixpkgs using overlays. It shows how to import and use a package from nixpkgs-unstable in your devenv.nix file.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/overlays.md#2025-04-21_snippet_5\n\nLANGUAGE: nix\nCODE:\n```\n{ pkgs, inputs, ... }:\n\n{\n  overlays = [\n    (final: prev: {\n      # Use a package from nixpkgs-unstable\n      nodejs = (import inputs.nixpkgs-unstable {\n        system = prev.stdenv.system;\n      }).nodejs;\n    })\n  ];\n\n  # Now you can use these packages from your regular pkgs\n  languages.javascript.enable = true;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Outputs in devenv.nix\nDESCRIPTION: Example showing how to define simple outputs in a devenv.nix file, including both a custom package and a reference to an existing package from pkgs.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/outputs.md#2025-04-21_snippet_0\n\nLANGUAGE: nix\nCODE:\n```\n{ pkgs, ... }: {\n  outputs = {\n    myproject.myapp = import ./myapp { inherit pkgs; };\n    git = pkgs.git;\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Nix on Windows (WSL2)\nDESCRIPTION: Command to install Nix package manager on Windows using Windows Subsystem for Linux 2 (WSL2) with the no-daemon option.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/getting-started.md#2025-04-21_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nsh <(curl -L https://nixos.org/nix/install) --no-daemon\n```\n\n----------------------------------------\n\nTITLE: Defining Processes in devenv.nix\nDESCRIPTION: This snippet shows how to define processes in a devenv.nix configuration file. It sets up two processes: a 'silly-example' that prints 'hello' every second, and a 'ping' process that pings localhost.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/processes.md#2025-04-21_snippet_0\n\nLANGUAGE: nix\nCODE:\n```\n{ pkgs, ... }:\n\n{\n  processes = {\n    silly-example.exec = \"while true; do echo hello && sleep 1; done\";\n    ping.exec = \"ping localhost\";\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Apple SDK for macOS Development in Nix\nDESCRIPTION: This Nix configuration snippet shows how to customize the Apple SDK used for macOS development in devenv. It allows developers to specify a particular SDK package, ensuring consistency across development environments.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/blog/posts/devenv-v1.5-overlays-and-performance.md#2025-04-21_snippet_3\n\nLANGUAGE: nix\nCODE:\n```\n{ pkgs, ... }:\n\n{\n  apple.sdk.package = pkgs.darwin.apple_sdk.sdk;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Processes in a Container with Nix\nDESCRIPTION: Configures multiple processes to run in a container with specific exclusion rules to minimize container size. This example creates two simple processes that print messages.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/containers.md#2025-04-21_snippet_1\n\nLANGUAGE: nix\nCODE:\n```\n{\n  name = \"myapp\";\n\n  packages = [ pkgs.procps ];\n\n  processes.hello-docker.exec = \"while true; do echo 'Hello Docker!' && sleep 1; done\";\n  processes.hello-nix.exec = \"while true; do echo 'Hello Nix!' && sleep 1; done\";\n\n  # Exclude the source repo to make the container smaller.\n  containers.\"processes\".copyToRoot = null;\n}\n```\n\n----------------------------------------\n\nTITLE: Updating devenv CLI using nix-env\nDESCRIPTION: Command to upgrade an existing devenv installation using nix-env, which is recommended for users who originally installed devenv with nix-env.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/getting-started.md#2025-04-21_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\nnix-env --upgrade --attr devenv -f https://github.com/NixOS/nixpkgs/tarball/nixpkgs-unstable\n```\n\n----------------------------------------\n\nTITLE: Displaying Environment Information with Devenv Info\nDESCRIPTION: This snippet shows how to use the 'devenv info' command to get a summary of the current environment, including environment variables, installed packages, scripts, and processes. This is useful for quickly understanding what's configured in the environment.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/basics.md#2025-04-21_snippet_2\n\nLANGUAGE: shell-session\nCODE:\n```\n$ devenv info\n...\n\n# env\n- DEVENV_DOTFILE: .../myproject/.devenv\n- DEVENV_ROOT: .../myproject\n- DEVENV_STATE: .../myproject/.devenv/state\n- GREET: hello\n\n# packages\n- jq-1.6\n\n# scripts\n\n# processes\n\n```\n\n----------------------------------------\n\nTITLE: Installing Nix on macOS using the official installer\nDESCRIPTION: Alternative command to install Nix package manager on macOS using the official release installer.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/getting-started.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nsh <(curl -L https://nixos.org/nix/install)\n```\n\n----------------------------------------\n\nTITLE: Defining Default Inputs in YAML for devenv\nDESCRIPTION: Shows the default inputs configuration in devenv.yaml, which includes nixpkgs and git-hooks.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/inputs.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ninputs:\n  nixpkgs:\n    url: github:cachix/devenv-nixpkgs/rolling\n  git-hooks:\n    url: github:cachix/git-hooks.nix\n```\n\n----------------------------------------\n\nTITLE: Updating devenv CLI using Nix profiles\nDESCRIPTION: Command to upgrade an existing devenv installation using Nix profiles, which requires experimental flags to be enabled.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/getting-started.md#2025-04-21_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\nnix profile upgrade devenv\n```\n\n----------------------------------------\n\nTITLE: Setting up direnv for devenv v1.4+ in .envrc\nDESCRIPTION: Configuration for .envrc file to enable automatic shell activation with direnv for devenv version 1.4 and newer. This method uses the built-in direnvrc function.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/automatic-shell-activation.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\neval \"$(devenv direnvrc)\"\n\nuse devenv\n```\n\n----------------------------------------\n\nTITLE: Installing devenv in NixOS/nix-darwin/home-manager configuration\nDESCRIPTION: Nix configuration snippet to add devenv to system packages in NixOS, nix-darwin, or home-manager setups.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/getting-started.md#2025-04-21_snippet_9\n\nLANGUAGE: nix\nCODE:\n```\nenvironment.systemPackages = [ \n  pkgs.devenv\n];\n```\n\n----------------------------------------\n\nTITLE: Adding nixpkgs-unstable Input in YAML Configuration\nDESCRIPTION: Demonstrates how to add nixpkgs-unstable as an input in the devenv.yaml file to access more recent package versions.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/common-patterns.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ninputs:\n  nixpkgs:\n    url: github:cachix/devenv-nixpkgs/rolling\n  nixpkgs-unstable:\n    url: github:nixos/nixpkgs/nixpkgs-unstable\n```\n\n----------------------------------------\n\nTITLE: Starting Services in devenv\nDESCRIPTION: This shell session snippet shows how to start services in devenv using the 'devenv up' command. It demonstrates the output when starting processes.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/services.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ devenv up\nStarting processes ...\n```\n\n----------------------------------------\n\nTITLE: Initializing a devenv project with Nix flakes\nDESCRIPTION: Command to initialize a new project with devenv using the template from GitHub. This creates a basic flake.nix and .envrc configuration.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/guides/using-with-flakes.md#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nnix flake init --template github:cachix/devenv\n```\n\n----------------------------------------\n\nTITLE: Configuring WireMock Request/Response Mappings in JSON\nDESCRIPTION: Example configuration showing how to define WireMock stub mappings. Demonstrates setting up both plain text and JSON response bodies with headers and status codes.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/supported-services/wiremock.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    request = {\n      method = \"GET\";\n      url = \"/body\";\n    };\n    response = {\n      body = \"Literal text to put in the body\";\n      headers = {\n        Content-Type = \"text/plain\";\n      };\n      status = 200;\n    };\n  }\n  {\n    request = {\n      method = \"GET\";\n      url = \"/json\";\n    };\n    response = {\n      jsonBody = {\n        someField = \"someValue\";\n      };\n      status = 200;\n    };\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Entering Devenv Shell and Managing Python Packages\nDESCRIPTION: This snippet illustrates how to enter a Devenv shell, check the pip installation location, and install a Python package (numpy) within the virtual environment. It demonstrates the isolation and package management capabilities of the Devenv-created Python virtual environment.\nSOURCE: https://github.com/cachix/devenv/blob/main/examples/python-venv/README.md#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ devenv shell\n(devenv)$ command -V pip\n.../.devenv/state/venv/bin/pip\n(devenv)$ pip install numpy\n```\n\n----------------------------------------\n\nTITLE: Defining Python Task in Nix for devenv.nix\nDESCRIPTION: Shows how to define a task that uses Python for execution, demonstrating the use of the 'package' attribute.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/tasks.md#2025-04-21_snippet_4\n\nLANGUAGE: nix\nCODE:\n```\n{ pkgs, lib, config, ... }:\n\n{\n  tasks = {\n    \"python:hello\" = {\n      exec = ''\n        print(\"Hello world from Python!\")\n      '';\n      package = config.languages.python.package;\n    };\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Running Nix in Docker\nDESCRIPTION: Command to run a Docker container with Nix pre-installed, providing a quick way to try Nix without installing it directly on your system.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/getting-started.md#2025-04-21_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ndocker run -it nixos/nix\n```\n\n----------------------------------------\n\nTITLE: Using Package from nixpkgs-unstable in Nix Configuration\nDESCRIPTION: Shows how to import and use a package from nixpkgs-unstable in the devenv.nix file.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/common-patterns.md#2025-04-21_snippet_1\n\nLANGUAGE: nix\nCODE:\n```\n{ pkgs, inputs, ... }:\nlet\n  pkgs-unstable = import inputs.nixpkgs-unstable { system = pkgs.stdenv.system; };\nin\n{\n  packages = [\n    pkgs-unstable.elmPackages.elm-test-rs\n  ];\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Test with Nginx Process in Nix for devenv\nDESCRIPTION: This snippet demonstrates how to write a test in devenv.nix that includes a Nginx service. It sets up an Nginx server and defines a test to check if it's responding correctly.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/tests.md#2025-04-21_snippet_2\n\nLANGUAGE: nix\nCODE:\n```\n{ pkgs, ... }: {\n  services.nginx = {\n    enable = true;\n    httpConfig = ''\n      server {\n        listen 8080;\n        location / {\n          return 200 \"Hello, world!\";\n        }\n      }\n    '';\n  };\n\n  enterTest = ''\n    wait_for_port 8080\n    curl -s localhost:8080 | grep \"Hello, world!\"\n  '';\n}\n```\n\n----------------------------------------\n\nTITLE: Listing devenv CLI Commands and Options in Bash\nDESCRIPTION: This snippet shows the output of running 'devenv' without arguments, listing all available commands and options for the devenv CLI tool. It includes usage instructions, commands, and various options for customizing devenv's behavior.\nSOURCE: https://github.com/cachix/devenv/blob/main/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ devenv\nhttps://devenv.sh 1.4.0: Fast, Declarative, Reproducible, and Composable Developer Environments\n\nUsage: devenv [OPTIONS] [COMMAND]\n\nCommands:\n  init       Scaffold devenv.yaml, devenv.nix, .gitignore and .envrc.\n  generate   Generate devenv.yaml and devenv.nix using AI\n  shell      Activate the developer environment. https://devenv.sh/basics/\n  update     Update devenv.lock from devenv.yaml inputs. http://devenv.sh/inputs/\n  search     Search for packages and options in nixpkgs. https://devenv.sh/packages/#searching-for-a-file\n  info       Print information about this developer environment.\n  up         Start processes in the foreground. https://devenv.sh/processes/\n  processes  Start or stop processes. https://devenv.sh/processes/\n  tasks      Run tasks. https://devenv.sh/tasks/\n  test       Run tests. http://devenv.sh/tests/\n  container  Build, copy, or run a container. https://devenv.sh/containers/\n  inputs     Add an input to devenv.yaml. https://devenv.sh/inputs/\n  repl       Launch an interactive environment for inspecting the devenv configuration.\n  gc         Delete previous shell generations. See https://devenv.sh/garbage-collection\n  build      Build any attribute in devenv.nix.\n  direnvrc   Print a direnvrc that adds devenv support to direnv. See https://devenv.sh/automatic-shell-activation.\n  version    Print the version of devenv.\n  help       Print this message or the help of the given subcommand(s)\n\nOptions:\n  -V, --version\n          Print version information\n  -v, --verbose\n          Enable additional debug logs.\n  -q, --quiet\n          Silence all logs\n      --log-format <LOG_FORMAT>\n          Configure the output format of the logs. [default: cli] [possible values: cli, tracing-full]\n  -j, --max-jobs <MAX_JOBS>\n          Maximum number of Nix builds at any time. [default: 5]\n  -u, --cores <CORES>\n          Maximum number CPU cores being used by a single build. [default: 2]\n  -s, --system <SYSTEM>\n          [default: aarch64-darwin]\n  -i, --impure\n          Relax the hermeticity of the environment.\n      --eval-cache\n          Cache the results of Nix evaluation.\n      --refresh-eval-cache\n          Force a refresh of the Nix evaluation cache.\n      --offline\n          Disable substituters and consider all previously downloaded files up-to-date.\n  -c, --clean [<CLEAN>...]\n          Ignore existing environment variables when entering the shell. Pass a list of comma-separated environment variables to let through.\n      --nix-debugger\n          Enter the Nix debugger on failure.\n  -n, --nix-option <NIX_OPTION> <NIX_OPTION>\n          Pass additional options to nix commands, see `man nix.conf` for full list.\n  -o, --override-input <OVERRIDE_INPUT> <OVERRIDE_INPUT>\n          Override inputs in devenv.yaml.\n  -h, --help\n          Print help (see more with '--help')\n```\n\n----------------------------------------\n\nTITLE: Configuring CouchDB Settings in Nix\nDESCRIPTION: This snippet demonstrates how to configure various CouchDB settings using Nix. It includes settings for the database directory, single node operation, view index directory, URI file, admin credentials, and network binding.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/supported-services/couchdb.md#2025-04-21_snippet_0\n\nLANGUAGE: nix\nCODE:\n```\n{\n  couchdb = {\n    database_dir = baseDir;\n    single_node = true;\n    view_index_dir = baseDir;\n    uri_file = \"${config.services.couchdb.baseDir}/couchdb.uri\";\n  };\n  admins = {\n    \"admin_username\" = \"pass\";\n  };\n  chttpd = {\n    bind_address = \"127.0.0.1\";\n    port = 5984;\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Ruby on Rails Project with PostgreSQL using devenv and Rails CLI\nDESCRIPTION: This code snippet shows the command sequence for setting up a new Ruby on Rails project with PostgreSQL database. It uses devenv for environment management, creates a new Rails project, sets up the environment, and initializes the database.\nSOURCE: https://github.com/cachix/devenv/blob/main/examples/rubyonrails/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ devenv shell\n$ rails new blog -d=postgresql\n$ devenv up\n$ cd blog && rails db:create\n```\n\n----------------------------------------\n\nTITLE: Complete GitHub Actions Workflow with Devenv\nDESCRIPTION: Full example of a GitHub Actions workflow that demonstrates all devenv integration features including matrix testing across different OS platforms\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/integrations/github-actions.md#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nname: \"Test\"\n\non:\n  pull_request:\n  push:\n\njobs:\n  tests:\n    strategy:\n      matrix:\n        os: [ubuntu-latest, macos-latest]\n    runs-on: {{ '${{ matrix.os }}' }}\n\n    steps:\n    - uses: actions/checkout@v4\n    - uses: cachix/install-nix-action@v26\n    - uses: cachix/cachix-action@v14\n      with:\n        name: devenv\n    - name: Install devenv.sh\n      run: nix profile install nixpkgs#devenv\n\n    - name: Build the devenv shell and run any pre-commit hooks\n      run: devenv test\n\n    - name: Run a single command in the devenv shell\n      run: devenv shell hello\n\n    - name: Run a multi-line command in the devenv shell\n      shell: devenv shell bash -- -e {0}\n      run: |\n        hello\n        say-bye\n```\n\n----------------------------------------\n\nTITLE: Configuring Task Server Protocol in devenv.nix\nDESCRIPTION: This Nix code snippet shows how to set up the Task Server Protocol in devenv.nix. It defines a Rust package 'myexecutable' and configures it as the task server protocol executable.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/blog/posts/devenv-v1.2-tasks.md#2025-04-21_snippet_1\n\nLANGUAGE: nix\nCODE:\n```\n{ pkgs, ... }:\nlet\n  myexecutable = pkgs.rustPlatform.buildRustPackage rec {\n    pname = \"foo-bar\";\n    version = \"0.1\";\n    cargoLock.lockFile = ./myexecutable/Cargo.lock;\n    src = pkgs.lib.cleanSource ./myexecutable;\n  }\nin {\n  task.serverProtocol = [ \"${myexecutable}/bin/myexecutable\" ];\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Script Definition in Nix\nDESCRIPTION: Demonstrates how to define a simple script called 'silly-example' that uses curl and jq packages to make HTTP requests and parse JSON responses.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/scripts.md#2025-04-21_snippet_0\n\nLANGUAGE: nix\nCODE:\n```\n{ pkgs, ... }:\n\n{\n  packages = [ pkgs.curl pkgs.jq ]; # (1)!\n\n  scripts.silly-example.exec = ''\n    curl \"https://httpbin.org/get?$1\" | jq '.args'\n  '';\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Nix Environment Configuration for an Existing Project\nDESCRIPTION: This command creates devenv.nix and devenv.yaml configurations by analyzing an existing git repository's source code. The AI examines your project and generates appropriate Nix configuration files.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/blog/posts/devenv-v1.4-generating-nix-developer-environments-using-ai.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ devenv generate\n• Generating devenv.nix and devenv.yaml, this should take about a minute ...\n```\n\n----------------------------------------\n\nTITLE: Installing Nix on Linux\nDESCRIPTION: Command to install Nix package manager on Linux systems using the daemon approach, which is recommended for multi-user installations.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/getting-started.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nsh <(curl -L https://nixos.org/nix/install) --daemon\n```\n\n----------------------------------------\n\nTITLE: Custom .envrc with manual direnvrc URL and hash\nDESCRIPTION: Template for .envrc file that uses a pinned version of the direnvrc script with its hash for verification. This approach gives full control over when the script is updated.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/automatic-shell-activation.md#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nsource_url \"https://raw.githubusercontent.com/cachix/devenv/VERSION/direnvrc\" \"<HASH>\"\n\nuse devenv\n```\n\n----------------------------------------\n\nTITLE: Verifying Python Installation in devenv Shell\nDESCRIPTION: Shell session example demonstrating how to enter the devenv environment and verify the Python installation by checking its version.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/languages.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ devenv shell\nBuilding shell ...\nEntering shell ...\n\n(devenv) $ python --version\nPython 3.11.3\n```\n\n----------------------------------------\n\nTITLE: Starting Services in Background with devenv\nDESCRIPTION: This shell session snippet demonstrates how to start services in the background using devenv. It uses the 'devenv up -d' command to initiate background service startup.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/services.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ devenv up -d\n```\n\n----------------------------------------\n\nTITLE: Cross-Platform Package Configuration in Nix\nDESCRIPTION: Shows how to configure packages based on the current machine's operating system and processor architecture using stdenv helper functions.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/common-patterns.md#2025-04-21_snippet_5\n\nLANGUAGE: nix\nCODE:\n```\n{ pkgs, lib, ... }: {\n  packages = [\n    pkgs.ncdu\n  ] ++ lib.optionals pkgs.stdenv.isLinux [\n    pkgs.inotify-tools\n  ] ++ lib.optionals pkgs.stdenv.isDarwin [\n    pkgs.libiconv\n  ];\n}\n```\n\n----------------------------------------\n\nTITLE: MongoDB Custom Arguments Example\nDESCRIPTION: Example configuration showing how to customize MongoDB startup arguments, including port specification and authentication settings.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/supported-services/mongodb.md#2025-04-21_snippet_1\n\nLANGUAGE: nix\nCODE:\n```\n[\n  \"--port\"\n  \"27017\"\n  \"--noauth\"\n]\n```\n\n----------------------------------------\n\nTITLE: Excluding Packages from Container Build in Nix\nDESCRIPTION: Demonstrates how to conditionally include packages only when not building a container, using lib.optionals.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/common-patterns.md#2025-04-21_snippet_4\n\nLANGUAGE: nix\nCODE:\n```\n{ pkgs, ... }: {\n  packages = [\n    pkgs.git\n  ] ++ lib.optionals (!config.container.isBuilding) [\n    pkgs.haskell-language-server\n  ];\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Output Options in devenv.nix\nDESCRIPTION: This snippet demonstrates how to define custom options as output types in devenv.nix using the module system. It includes a 'myapp.package' option and a 'git' output.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/blog/posts/devenv-v1.1-outputs.md#2025-04-21_snippet_3\n\nLANGUAGE: nix\nCODE:\n```\n{ pkgs, lib, config, ... }: {\n  options = {\n    myapp.package = lib.mkOption {\n        type = config.lib.types.outputOf lib.types.package;\n        description = \"The package for myapp\";\n        default = import ./myapp { inherit pkgs; };\n        defaultText = \"myapp-1.0\";\n    };\n  };\n\n  config = {\n    outputs.git = pkgs.git;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: React Native Android Configuration\nDESCRIPTION: Nix configuration for React Native Android development environment\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/integrations/android.md#2025-04-21_snippet_4\n\nLANGUAGE: nix\nCODE:\n```\n{ pkgs, ... }:\n\n{\n  android = {\n    enable = true;\n    reactNative.enable = true;\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Elixir Package in Devenv (Nix)\nDESCRIPTION: This configuration option allows specifying which Elixir package to use in the Devenv environment. It defaults to the 'pkgs.elixir' package.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/supported-languages/elixir.md#2025-04-21_snippet_1\n\nLANGUAGE: nix\nCODE:\n```\nlanguages.elixir.package = pkgs.elixir\n```\n\n----------------------------------------\n\nTITLE: Updating .envrc for Devenv Caching with Direnv\nDESCRIPTION: This snippet shows how to update the .envrc file to utilize devenv's new caching logic with direnv. It sources a specific version of the direnvrc file and uses the devenv command.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/blog/posts/devenv-v1.3-instant-developer-environments-with-nix-caching.md#2025-04-21_snippet_0\n\nLANGUAGE: nix\nCODE:\n```\nsource_url \"https://raw.githubusercontent.com/cachix/devenv/82c0147677e510b247d8b9165c54f73d32dfd899/direnvrc\" \"sha256-7u4iDd1nZpxL4tCzmPG0dQgC5V+/44Ba+tHkPob1v2k=\"\n\nuse devenv\n```\n\n----------------------------------------\n\nTITLE: Conditional Task Execution in Nix for devenv.nix\nDESCRIPTION: Defines a task with a 'status' check to avoid running expensive operations unnecessarily.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/tasks.md#2025-04-21_snippet_5\n\nLANGUAGE: nix\nCODE:\n```\n{ pkgs, lib, config, ... }:\n\n{\n  tasks = {\n    \"myapp:migrations\" = {\n      exec = \"db-migrate\";\n      status = \"db-needs-migrations\";\n    };\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Devenv for GitHub Codespaces\nDESCRIPTION: Enables GitHub Codespaces integration in devenv.nix by setting devcontainer.enable to true. This configuration will generate a .devcontainer.json file when running devenv shell.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/integrations/codespaces-devcontainer.md#2025-04-21_snippet_0\n\nLANGUAGE: nix\nCODE:\n```\n{ pkgs, ... }:\n\n{\n    devcontainer.enable = true;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Nested Nix Outputs in devenv.nix\nDESCRIPTION: This snippet demonstrates how to define nested Nix outputs in a devenv.nix file. It includes a custom 'myproject.myapp' output and uses the 'git' package from pkgs.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/blog/posts/devenv-v1.1-outputs.md#2025-04-21_snippet_0\n\nLANGUAGE: nix\nCODE:\n```\n{ pkgs, ... }: {\n  outputs = {\n    myproject.myapp = import ./myapp { inherit pkgs; };\n    git = pkgs.git;\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: MySQL User Permission Attribute Set Example\nDESCRIPTION: Example of specifying granular database permissions for MySQL users using attribute sets\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/supported-services/mysql.md#2025-04-21_snippet_1\n\nLANGUAGE: nix\nCODE:\n```\n{\n  \"database.*\" = \"ALL PRIVILEGES\";\n  \"*.*\" = \"SELECT, LOCK TABLES\";\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Task to Run on Shell Entry in Nix for devenv.nix\nDESCRIPTION: Defines a task 'bash:hello' that runs when entering the shell or test environment using the 'before' attribute.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/tasks.md#2025-04-21_snippet_2\n\nLANGUAGE: nix\nCODE:\n```\n{ pkgs, lib, config, ... }:\n\n{\n  tasks = {\n    \"bash:hello\" = {\n      exec = \"echo 'Hello world from bash!'\";\n      before = [ \"devenv:enterShell\" \"devenv:enterTest\" ];\n    };\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Running Devenv Commands with Docker\nDESCRIPTION: Example of executing a devenv shell command using the devenv container image in Docker.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/integrations/devenv-container.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker run ghcr.io/cachix/devenv/devenv:latest devenv shell hello-world\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Packages with Overlays\nDESCRIPTION: This snippet shows how to use an overlay to add a custom package to the package set. It demonstrates adding a package from a local derivation.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/overlays.md#2025-04-21_snippet_3\n\nLANGUAGE: nix\nCODE:\n```\noverlays = [\n  (final: prev: {\n    # Add a package from a local derivation\n    my-tool = final.callPackage ./nix/my-tool.nix {};\n  })\n];\n```\n\n----------------------------------------\n\nTITLE: Multi-Language Script Configuration\nDESCRIPTION: Complex example showing how to configure scripts in different programming languages (Python and Nushell) with descriptions and custom shell welcome message.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/scripts.md#2025-04-21_snippet_4\n\nLANGUAGE: nix\nCODE:\n```\n{ pkgs, config, lib, ... }:\n\n{\n  scripts.python-hello = {\n    exec = ''\n      print(\"Hello, world!\")\n    '';\n    package = config.languages.python.package;\n    description = \"hello world in Python\";\n  };\n\n  scripts.nushell-greet = {\n    exec = ''\n      def greet [name] {\n        [\"hello\" $name]\n      }\n      greet \"world\"\n    '';\n    package = pkgs.nushell;\n    binary = \"nu\";\n    description = \"Greet in Nu Shell\";\n  };\n\n  enterShell = ''\n    echo\n    echo 🦾 Helper scripts you can run to make your development richer:\n    echo 🦾\n    ${pkgs.gnused}/bin/sed -e 's| |••|g' -e 's|=| |' <<EOF | ${pkgs.util-linuxMinimal}/bin/column -t | ${pkgs.gnused}/bin/sed -e 's|^|🦾 |' -e 's|••| |g'\n    ${lib.generators.toKeyValue {} (lib.mapAttrs (name: value: value.description) config.scripts)}\n    EOF\n    echo\n  '';\n}\n```\n\n----------------------------------------\n\nTITLE: Selecting Rust Channel in devenv\nDESCRIPTION: Specifies the Rust channel to use. Options include nixpkgs, stable, beta, or nightly. The default is set to nixpkgs.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/supported-languages/rust.md#2025-04-21_snippet_1\n\nLANGUAGE: nix\nCODE:\n```\nlanguages.rust.channel = \"nixpkgs\"\n```\n\n----------------------------------------\n\nTITLE: Running devenv processes with devenv up\nDESCRIPTION: Example output from running processes and services using the devenv up command within a devenv shell. Shows the hello process starting and ending.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/guides/using-with-flakes.md#2025-04-21_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ devenv up\n17:34:37 system | run.1 started (pid=1046939)\n17:34:37 run.1  | Hello, world!\n17:34:37 system | run.1 stopped (rc=0)\n```\n\n----------------------------------------\n\nTITLE: Accessing Inputs in devenv.nix\nDESCRIPTION: The new preferred way to access inputs in devenv.nix is via the 'inputs' argument, replacing the previous method of passing each input separately.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/blog/posts/devenv-v0.4.md#2025-04-21_snippet_0\n\nLANGUAGE: nix\nCODE:\n```\ninputs.pre-commit-hooks\n```\n\n----------------------------------------\n\nTITLE: Configuring Automated Shell Switching with direnv\nDESCRIPTION: Instructions for setting up automated shell switching using direnv. It includes the command to add to the .envrc file and how to allow direnv to evaluate the updated configuration.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/guides/using-with-flake-parts.md#2025-04-21_snippet_6\n\nLANGUAGE: text\nCODE:\n```\nuse flake . --no-pure-eval\n```\n\n----------------------------------------\n\nTITLE: Specifying PostgreSQL Package in Nix\nDESCRIPTION: Example of how to specify a specific version of PostgreSQL package to use in the configuration.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/supported-services/postgres.md#2025-04-21_snippet_0\n\nLANGUAGE: nix\nCODE:\n```\npkgs.postgresql_15\n```\n\n----------------------------------------\n\nTITLE: Script Alias Definition\nDESCRIPTION: Example of defining a script alias that forwards arguments to an NPX command.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/scripts.md#2025-04-21_snippet_2\n\nLANGUAGE: nix\nCODE:\n```\nscripts.foo.exec = ''\n  npx @foo/cli \"$@\";\n'';\n```\n\n----------------------------------------\n\nTITLE: Initializing Nix Flake for devenv Project\nDESCRIPTION: Command to quickly set up a project with Nix flakes using devenv template. This creates a basic flake.nix file and .envrc for direnv support.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/guides/using-with-flake-parts.md#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nnix flake init --template github:cachix/devenv#flake-parts\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Caddy Server Settings\nDESCRIPTION: Example configuration showing the basic Caddy server setup with global options and a site block for example.com\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/supported-services/caddy.md#2025-04-21_snippet_0\n\nLANGUAGE: caddyfile\nCODE:\n```\n# Global options block\n{\n  debug\n}\n\n# Site block\nexample.com {\n  encode gzip\n  log\n  root /srv/http\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring TeX Live Packages in Nix\nDESCRIPTION: This snippet demonstrates how to specify additional TeX Live packages to be included in the environment. It shows an example of adding 'algorithms' and 'latexmk' packages to the base TeX Live set.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/supported-languages/texlive.md#2025-04-21_snippet_0\n\nLANGUAGE: nix\nCODE:\n```\n[\n  \"algorithms\"\n  \"latexmk\"\n]\n```\n\n----------------------------------------\n\nTITLE: Running a Simple Test in devenv\nDESCRIPTION: This snippet shows the shell output when running the simple test defined in devenv.nix. It demonstrates the test execution process and successful test completion.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/tests.md#2025-04-21_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ devenv test\n✔ Building tests in 2.5s.\n• Running tests ...\nSetting up shell environment...\nRunning test...\nncdu 2.2\n✔ Running tests in 4.7s.\n✔ Tests passed. in 0.0s.\n```\n\n----------------------------------------\n\nTITLE: Custom Pre-commit Hook Configuration in devenv.nix\nDESCRIPTION: Shows how to define a custom pre-commit hook with detailed configuration options including file patterns, types, exclusions, and execution settings.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/git-hooks.md#2025-04-21_snippet_2\n\nLANGUAGE: nix\nCODE:\n```\n{\n  git-hooks.hooks.unit-tests = {\n    enable = true;\n\n    # The name of the hook (appears on the report table):\n    name = \"Unit tests\";\n\n    # The command to execute (mandatory):\n    entry = \"make check\";\n\n    # The pattern of files to run on (default: \"\" (all))\n    # see also https://pre-commit.com/#hooks-files\n    files = \"\\\\.(c|h)$\";\n\n    # List of file types to run on (default: [ \"file\" ] (all files))\n    # see also https://pre-commit.com/#filtering-files-with-types\n    # You probably only need to specify one of `files` or `types`:\n    types = [ \"text\" \"c\" ];\n\n    # Exclude files that were matched by these patterns (default: [ ] (none)):\n    excludes = [ \"irrelevant\\\\.c\" ];\n\n    # The language of the hook - tells pre-commit\n    # how to install the hook (default: \"system\")\n    # see also https://pre-commit.com/#supported-languages\n    language = \"system\";\n\n    # Set this to false to not pass the changed files\n    # to the command (default: true):\n    pass_filenames = false;\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Copying a Container to Fly.io Registry in Shell\nDESCRIPTION: Demonstrates pushing a container to Fly.io's registry with authentication, using the flyctl tool to generate an auth token.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/containers.md#2025-04-21_snippet_12\n\nLANGUAGE: shell-session\nCODE:\n```\n$ devenv container --registry docker://registry.fly.io/ --copy-args=\"--dest-creds x:$(flyctl auth token)\" copy processes\n```\n\n----------------------------------------\n\nTITLE: Configuring Ruby Version with .ruby-version File in Nix\nDESCRIPTION: This snippet demonstrates how to set the Ruby version using a .ruby-version file in the Devenv configuration. It uses the nixpkgs-ruby package to automatically set the appropriate Ruby package based on the version specified in the file.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/supported-languages/ruby.md#2025-04-21_snippet_0\n\nLANGUAGE: nix\nCODE:\n```\nlanguages.ruby.versionFile = ./.ruby-version;\n```\n\n----------------------------------------\n\nTITLE: Copying a Container to a Docker Registry in Shell\nDESCRIPTION: Shows how to copy a built container to a Docker registry using the devenv container copy command, which uses skopeo under the hood.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/containers.md#2025-04-21_snippet_11\n\nLANGUAGE: shell-session\nCODE:\n```\n$ devenv container --registry docker:// copy processes\n```\n\n----------------------------------------\n\nTITLE: Executing Devenv in GitLab CI Pipeline\nDESCRIPTION: Configuration for running devenv commands in a GitLab CI pipeline job using the devenv container image.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/integrations/devenv-container.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ndevenv-job:\n  image: ghcr.io/cachix/devenv/devenv:latest\n  script: devenv shell hello-world\n```\n\n----------------------------------------\n\nTITLE: Enabling Multiple Services in Nix Configuration\nDESCRIPTION: Configuration block that enables multiple services in a Nix environment. Includes databases (MySQL, PostgreSQL, MongoDB), caching solutions (Redis, Memcached), search engines (Elasticsearch, Meilisearch), and various infrastructure services (Nginx, Caddy, Vault).\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/services-all.md#2025-04-21_snippet_0\n\nLANGUAGE: nix\nCODE:\n```\nservices.adminer.enable = true;\nservices.blackfire.enable = true;\nservices.caddy.enable = true;\nservices.cassandra.enable = true;\nservices.clickhouse.enable = true;\nservices.cockroachdb.enable = true;\nservices.couchdb.enable = true;\nservices.dynamodb-local.enable = true;\nservices.elasticmq.enable = true;\nservices.elasticsearch.enable = true;\nservices.httpbin.enable = true;\nservices.influxdb.enable = true;\nservices.kafka.enable = true;\nservices.mailhog.enable = true;\nservices.mailpit.enable = true;\nservices.meilisearch.enable = true;\nservices.memcached.enable = true;\nservices.minio.enable = true;\nservices.mongodb.enable = true;\nservices.mysql.enable = true;\nservices.nginx.enable = true;\nservices.opensearch.enable = true;\nservices.opentelemetry-collector.enable = true;\nservices.postgres.enable = true;\nservices.prometheus.enable = true;\nservices.rabbitmq.enable = true;\nservices.redis.enable = true;\nservices.sqld.enable = true;\nservices.tailscale.enable = true;\nservices.temporal.enable = true;\nservices.tideways.enable = true;\nservices.trafficserver.enable = true;\nservices.typesense.enable = true;\nservices.varnish.enable = true;\nservices.vault.enable = true;\nservices.wiremock.enable = true;\n```\n\n----------------------------------------\n\nTITLE: Configuring Pull Caches in Devenv with Nix\nDESCRIPTION: Example configuration to enable Cachix integration and pull binaries from the pre-commit-hooks cache. This allows Devenv to download pre-built binaries instead of building packages from source.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/binary-caching.md#2025-04-21_snippet_0\n\nLANGUAGE: nix\nCODE:\n```\n{\n  cachix.enable = true;\n  cachix.pull = [ \"pre-commit-hooks\" ];\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring PostgreSQL Settings in Nix\nDESCRIPTION: Example of how to configure various PostgreSQL settings in the configuration.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/supported-services/postgres.md#2025-04-21_snippet_5\n\nLANGUAGE: nix\nCODE:\n```\n{\n  log_connections = true;\n  log_statement = \"all\";\n  logging_collector = true\n  log_disconnections = true\n  log_destination = lib.mkForce \"syslog\";\n}\n```\n\n----------------------------------------\n\nTITLE: SBT Build Tool Configuration Example\nDESCRIPTION: Configuration options for enabling and specifying the SBT (Scala Build Tool) package.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/supported-languages/scala.md#2025-04-21_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\npkgs.sbt\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nsbt-with-scala-native\n```\n\n----------------------------------------\n\nTITLE: Using external flakes for devenv configuration\nDESCRIPTION: Command to use a devenv configuration from an external flake, without adding a flake.nix to the current project. References a flake from a local file path.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/guides/using-with-flakes.md#2025-04-21_snippet_10\n\nLANGUAGE: console\nCODE:\n```\n$ nix develop --no-pure-eval file:/path/to/central/flake#projectA\nthis is project A\n(devenv) $\n```\n\n----------------------------------------\n\nTITLE: Running Multiple Processes in a Container in Shell\nDESCRIPTION: Demonstrates running a container with multiple defined processes using the devenv container run command. The output shows the concurrent execution of the defined processes.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/containers.md#2025-04-21_snippet_8\n\nLANGUAGE: shell-session\nCODE:\n```\n$ devenv container run processes\n...\n06:30:06 system         | hello-docker.1 started (pid=15)\n06:30:06 hello-docker.1 | Hello Docker!\n06:30:06 system         | hello-nix.1 started (pid=16)\n06:30:06 hello-nix.1    | Hello Nix!\n06:30:07 hello-nix.1    | Hello Nix!\n06:30:07 hello-docker.1 | Hello Docker!\n06:30:08 hello-nix.1    | Hello Nix!\n06:30:08 hello-docker.1 | Hello Docker!\n```\n\n----------------------------------------\n\nTITLE: Pinned Package Script Definition\nDESCRIPTION: Shows how to use pinned package paths directly in scripts without exposing them to the shell environment.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/scripts.md#2025-04-21_snippet_3\n\nLANGUAGE: nix\nCODE:\n```\n{ pkgs, ... }:\n\n{\n  scripts.silly-example.exec = ''\n    ${pkgs.curl}/bin/curl \"https://httpbin.org/get?$1\" | ${pkgs.jq}/bin/jq '.args'\n  '';\n}\n```\n\n----------------------------------------\n\nTITLE: Shell output from hash computation\nDESCRIPTION: Example output when computing the hash of a direnvrc script, showing the computed hash value that should be used in the .envrc file.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/automatic-shell-activation.md#2025-04-21_snippet_7\n\nLANGUAGE: shell-session\nCODE:\n```\nFound hash: <HASH>\n```\n\n----------------------------------------\n\nTITLE: Minimal devenv flake.nix configuration\nDESCRIPTION: A minimal flake.nix template that sets up devenv with necessary outputs including devShell, devenv-up and devenv-test packages. Includes basic configuration with hello package and process.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/guides/using-with-flakes.md#2025-04-21_snippet_1\n\nLANGUAGE: nix\nCODE:\n```\n{\n  inputs = {\n    nixpkgs.url = \"github:cachix/devenv-nixpkgs/rolling\";\n    devenv.url = \"github:cachix/devenv\";\n  };\n\n  nixConfig = {\n    extra-trusted-public-keys = \"devenv.cachix.org-1:w1cLUi8dv3hnoSPGAuibQv+f9TZLr6cv/Hm9XgU50cw=\";\n    extra-substituters = \"https://devenv.cachix.org\";\n  };\n\n  outputs = { self, nixpkgs, devenv, ... } @ inputs:\n    let\n      system = \"x86_64-linux\";\n      pkgs = nixpkgs.legacyPackages.${system};\n    in\n    {\n      packages.${system}.devenv-up = self.devShells.${system}.default.config.procfileScript;\n      packages.${system}.devenv-test = self.devShells.${system}.default.config.test;\n\n      devShells.${system}.default = devenv.lib.mkShell {\n        inherit inputs pkgs;\n        modules = [\n          ({ pkgs, config, ... }: {\n            # This is your devenv configuration\n            packages = [ pkgs.hello ];\n\n            enterShell = ''\n              hello\n            '';\n\n            processes.run.exec = \"hello\";\n          })\n        ];\n      };\n    };\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Push Cache in Devenv with Nix\nDESCRIPTION: Configuration to enable pushing built packages to a custom Cachix cache. Requires setting up a Cachix cache and authentication token beforehand.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/binary-caching.md#2025-04-21_snippet_1\n\nLANGUAGE: nix\nCODE:\n```\ncachix.enable = true\ncachix.push = \"mycache\";\n```\n\n----------------------------------------\n\nTITLE: Using a Different Version of a Package with Overlays\nDESCRIPTION: This snippet demonstrates how to use an overlay to specify a different version of a package. In this example, it shows how to use a specific version of Node.js.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/overlays.md#2025-04-21_snippet_2\n\nLANGUAGE: nix\nCODE:\n```\noverlays = [\n  (final: prev: {\n    # Use a specific version of Node.js\n    nodejs = prev.nodejs-18_x;\n  })\n];\n```\n\n----------------------------------------\n\nTITLE: Setting Terraform Version in devenv (Markdown)\nDESCRIPTION: Configuration option to set the Terraform version. It automatically sets the Terraform package using nixpkgs-terraform based on the specified version.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/supported-languages/terraform.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n## languages.terraform.version\n\nThe Terraform version to use.\nThis automatically sets the ` languages.terraform.package ` using [nixpkgs-terraform](https://github.com/stackbuilders/nixpkgs-terraform).\n\n*Type:*\nnull or string\n\n*Default:*\n` null `\n\n*Example:*\n` \"1.5.0 or 1.6.2\" `\n```\n\n----------------------------------------\n\nTITLE: Basic Android Environment Setup in Nix\nDESCRIPTION: Minimal configuration to enable Android development environment using devenv\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/integrations/android.md#2025-04-21_snippet_0\n\nLANGUAGE: nix\nCODE:\n```\n{ pkgs, ... }:\n\n{\n  android.enable = true;\n}\n```\n\n----------------------------------------\n\nTITLE: Building Specific Nix Outputs with devenv\nDESCRIPTION: This shell session shows how to build a specific output (in this case, 'git') using the 'devenv build' command with an explicit attribute path.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/blog/posts/devenv-v1.1-outputs.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ devenv build outputs.git\n/nix/store/mzq5bpi49h26cy2mfj5a2r0q69fh3a9k-git-2.44.0\n```\n\n----------------------------------------\n\nTITLE: Running a Test with Processes in devenv\nDESCRIPTION: This snippet shows the shell output when running a test with processes in devenv. It demonstrates the process of building, starting processes, running tests, and stopping processes.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/tests.md#2025-04-21_snippet_3\n\nLANGUAGE: shell-session\nCODE:\n```\n$ devenv test\n✔ Building tests in 2.5s.\n✔ Building processes in 15.7s.\n• Starting processes ...• PID is 113105\n• See logs:  $ tail -f /run/user/1000/nix-shell.upTad4/.tmpv25BxA/processes.log\n• Stop:      $ devenv processes stop\n✔ Starting processes in 0.0s.\n• Running tests ...\nSetting up shell environment...\nRunning test...\nncdu 2.2\n✔ Running tests in 4.7s.\n• Stopping process with PID 113105\n✔ Tests passed. in 0.0s.\n```\n\n----------------------------------------\n\nTITLE: Enabling Delta in devenv.nix Configuration\nDESCRIPTION: This Nix code snippet enables Delta, a syntax-highlighting pager, in the devenv.nix configuration. It sets the 'delta.enable' option to true, which activates Delta for git, diff, and grep output in the development environment.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/integrations/delta.md#2025-04-21_snippet_0\n\nLANGUAGE: nix\nCODE:\n```\n{ pkgs, ... }:\n\n{\n    delta.enable = true;\n}\n```\n\n----------------------------------------\n\nTITLE: Building and Running Devenv Commands\nDESCRIPTION: Common development commands for building, testing, and maintaining the Devenv project using Cargo and Nix tools.\nSOURCE: https://github.com/cachix/devenv/blob/main/CLAUDE.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncargo build\ncargo run -- [args]\nnix build\ncargo fmt\ncargo clippy\ncargo test\ndevenv-run-tests tests\ndevenv-run-tests --only <test_name> tests\n```\n\n----------------------------------------\n\nTITLE: Default OpenTelemetry Collector YAML Configuration\nDESCRIPTION: Default YAML configuration for OpenTelemetry Collector including health check extension setup and service configuration\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/supported-services/opentelemetry-collector.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n{\n  extensions = {\n    health_check = {\n      endpoint = \"localhost:13133\";\n    };\n  };\n  service = {\n    extensions = [\n      \"health_check\"\n    ];\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Container with Build Artifacts in Nix\nDESCRIPTION: Sets up a container that includes only the built artifacts, keeping the final image small. This example demonstrates a production container configuration that watches for changes and builds to a dist directory.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/containers.md#2025-04-21_snippet_3\n\nLANGUAGE: nix\nCODE:\n```\n{\n  # watch local changes and build the project to ./dist\n  processes.build.exec = \"${pkgs.watchexec}/bin/watchexec my-build-tool\";\n\n  containers.\"prod\".copyToRoot = ./dist;\n  containers.\"prod\".startupCommand = \"/mybinary serve\";\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up direnv for devenv v1.3 and older in .envrc\nDESCRIPTION: Configuration for .envrc file to enable automatic shell activation with direnv for devenv version 1.3 and older. This method sources the direnvrc script from a pinned URL with hash verification.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/automatic-shell-activation.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsource_url \"https://raw.githubusercontent.com/cachix/devenv/82c0147677e510b247d8b9165c54f73d32dfd899/direnvrc\" \"sha256-7u4iDd1nZpxL4tCzmPG0dQgC5V+/44Ba+tHkPob1v2k=\"\n\nuse devenv\n```\n\n----------------------------------------\n\nTITLE: Devenv CLI Usage Help\nDESCRIPTION: Complete CLI reference showing all available commands and options for Devenv 1.0, including new features like input management and container operations.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/blog/posts/devenv-v1.0-rewrite-in-rust.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nhttps://devenv.sh 1.0.0: Fast, Declarative, Reproducible, and Composable Developer Environments\n\nUsage: devenv [OPTIONS] <COMMAND>\n\nCommands:\n  init       Scaffold devenv.yaml, devenv.nix, .gitignore and .envrc.\n  shell      Activate the developer environment. https://devenv.sh/basics/\n  update     Update devenv.lock from devenv.yaml inputs. http://devenv.sh/inputs/\n  search     Search for packages and options in nixpkgs. https://devenv.sh/packages/#searching-for-a-file\n  info       Print information about this developer environment.\n  up         Start processes in the foreground. https://devenv.sh/processes/\n  processes  Start or stop processes.\n  test       Run tests. http://devenv.sh/tests/\n  container  Build, copy, or run a container. https://devenv.sh/containers/\n  inputs     Add an input to devenv.yaml. https://devenv.sh/inputs/\n  gc         Deletes previous shell generations. See http://devenv.sh/garbage-collection\n  build      Build any attribute in devenv.nix.\n  version    Print the version of devenv.\n  help       Print this message or the help of the given subcommand(s)\n\nOptions:\n  -v, --verbose\n          Enable debug log level.\n  -j, --max-jobs <MAX_JOBS>\n          Maximum number of Nix builds at any time. [default: 8]\n  -j, --cores <CORES>\n          Maximum number CPU cores being used by a single build.. [default: 2]\n  -s, --system <SYSTEM>\n          [default: x86_64-linux]\n  -i, --impure\n          Relax the hermeticity of the environment.\n  -c, --clean [<CLEAN>...]\n          Ignore existing environment variables when entering the shell. Pass a list of comma-separated environment variables to let through.\n  -d, --nix-debugger\n          Enter Nix debugger on failure.\n  -n, --nix-option <NIX_OPTION> <NIX_OPTION>\n          Pass additional options to nix commands, see `man nix.conf` for full list.\n  -o, --override-input <OVERRIDE_INPUT> <OVERRIDE_INPUT>\n          Override inputs in devenv.yaml.\n  -h, --help\n          Print help\n```\n\n----------------------------------------\n\nTITLE: C Language Enable Option Configuration\nDESCRIPTION: Configuration option to enable or disable C development tools. When enabled, provides access to C development toolchain.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/supported-languages/c.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nlanguages.c.enable\n\nType: boolean\nDefault: false\nExample: true\n```\n\n----------------------------------------\n\nTITLE: Configuring Hosts and Certificates in devenv\nDESCRIPTION: A Nix configuration that demonstrates how to define custom hosts and certificates in devenv. It sets up a local domain with a self-signed certificate and configures Caddy to serve content on that domain.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/blog/posts/devenv-v0.6-generating-containers-and-instant-shell-activation.md#2025-04-21_snippet_1\n\nLANGUAGE: nix\nCODE:\n```\n{ pkgs, config, ... }:\n\n{\n  certificates = [\n    \"example.com\"\n  ];\n\n  hosts.\"example.com\" = \"127.0.0.1\";\n\n  services.caddy.enable = true;\n  services.caddy.virtualHosts.\"example.com\" = {\n    extraConfig = ''\n      tls ${config.env.DEVENV_STATE}/mkcert/example.com.pem ${config.env.DEVENV_STATE}/mkcert/example.com-key.pem\n      respond \"Hello, world!\"\n    '';\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring PHP-FPM Pool Settings in Nix\nDESCRIPTION: Example of setting PHP-FPM pool directives. This snippet demonstrates how to configure various process manager settings for a PHP-FPM pool, including maximum children, start servers, and spare servers.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/supported-languages/php.md#2025-04-21_snippet_4\n\nLANGUAGE: nix\nCODE:\n```\n{\n  \"pm\" = \"dynamic\";\n  \"pm.max_children\" = 75;\n  \"pm.start_servers\" = 10;\n  \"pm.min_spare_servers\" = 5;\n  \"pm.max_spare_servers\" = 20;\n  \"pm.max_requests\" = 500;\n}\n```\n\n----------------------------------------\n\nTITLE: Upgrading Bash on macOS using nix-env\nDESCRIPTION: Command to install a newer version of Bash on macOS using nix-env, recommended for newcomers to avoid evaluation errors caused by macOS's outdated Bash version.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/getting-started.md#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnix-env --install --attr bashInteractive -f https://github.com/NixOS/nixpkgs/tarball/nixpkgs-unstable\n```\n\n----------------------------------------\n\nTITLE: OpenTelemetry Collector Package Configuration Example\nDESCRIPTION: Example showing how to specify a custom configuration file for OpenTelemetry Collector using pkgs.writeTextFile\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/supported-services/opentelemetry-collector.md#2025-04-21_snippet_0\n\nLANGUAGE: nix\nCODE:\n```\npkgs.writeTextFile { name = \"otel-config.yaml\"; text = \"...\"; }\n```\n\n----------------------------------------\n\nTITLE: Configuring Elasticsearch Java Options Example\nDESCRIPTION: Example showing how to configure additional Java options for Elasticsearch, specifically setting IPv4 stack preference.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/supported-services/elasticsearch.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n[\n  \"-Djava.net.preferIPv4Stack=true\"\n]\n```\n\n----------------------------------------\n\nTITLE: Enabling Rust Development Tools in devenv\nDESCRIPTION: Configuration option to enable Rust development tools. When set to true, it activates the Rust toolchain and related components.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/supported-languages/rust.md#2025-04-21_snippet_0\n\nLANGUAGE: nix\nCODE:\n```\nlanguages.rust.enable = false\n```\n\n----------------------------------------\n\nTITLE: Setting Up GitHub Actions Prerequisites for Devenv\nDESCRIPTION: GitHub Actions workflow steps to set up Nix, Cachix, and install devenv\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/integrations/github-actions.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nsteps:\n- uses: actions/checkout@v4\n- uses: cachix/install-nix-action@v26\n- uses: cachix/cachix-action@v14\n  with:\n    name: devenv\n- name: Install devenv.sh\n  run: nix profile install nixpkgs#devenv\n```\n\n----------------------------------------\n\nTITLE: Configuring Virtual Hosts in Caddy\nDESCRIPTION: Example configuration for setting up virtual hosts in Caddy with server aliases and custom configuration\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/supported-services/caddy.md#2025-04-21_snippet_1\n\nLANGUAGE: nix\nCODE:\n```\n{\n  \"hydra.example.com\" = {\n    serverAliases = [ \"www.hydra.example.com\" ];\n    extraConfig = ''''\n      encode gzip\n      log\n      root /srv/http\n    '''';\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Building All Outputs Command\nDESCRIPTION: Shell command demonstration for building all defined outputs in devenv, showing the resulting Nix store paths.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/outputs.md#2025-04-21_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ devenv build\n/nix/store/mzq5bpi49h26cy2mfj5a2r0q69fh3a9k-git-2.44.0\n/nix/store/mzq5bpi49h26cy2mfj5a2r0q69fh3a9k-myapp-1.0\n```\n\n----------------------------------------\n\nTITLE: Configuring Initial Databases in Nix\nDESCRIPTION: Example of how to specify initial databases to be created on the first startup of PostgreSQL.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/supported-services/postgres.md#2025-04-21_snippet_3\n\nLANGUAGE: nix\nCODE:\n```\n[\n  {\n    name = \"foodatabase\";\n    schema = ./foodatabase.sql;\n  }\n  { name = \"bardatabase\"; }\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring PostgreSQL Extensions in Nix\nDESCRIPTION: Example of how to specify additional PostgreSQL extensions to install in the configuration.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/supported-services/postgres.md#2025-04-21_snippet_1\n\nLANGUAGE: nix\nCODE:\n```\nextensions: [\n  extensions.pg_cron\n  extensions.postgis\n  extensions.timescaledb\n];\n```\n\n----------------------------------------\n\nTITLE: Creating Persistent Volume\nDESCRIPTION: Creates a 1GB volume in Amsterdam region for storing devenv state data\nSOURCE: https://github.com/cachix/devenv/blob/main/examples/fly.io/README.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nfly volumes create devenv_state --region ams --size 1\n```\n\n----------------------------------------\n\nTITLE: Adding Directory to PATH in Nix Configuration\nDESCRIPTION: Demonstrates how to add a directory to the PATH environment variable in a devenv.nix file, specifically for Elixir install scripts.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/common-patterns.md#2025-04-21_snippet_2\n\nLANGUAGE: nix\nCODE:\n```\n{ ... }:\n\n{\n  languages.elixir.enable = true;\n\n  enterShell = ''\n    export PATH=\"$HOME/.mix/escripts:$PATH\"\n  '';\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Java Options for OpenSearch\nDESCRIPTION: Example configuration for specifying additional Java options to OpenSearch, demonstrating how to set IPv4 stack preference.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/supported-services/opensearch.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n[\n  \"-Djava.net.preferIPv4Stack=true\"\n]\n```\n\n----------------------------------------\n\nTITLE: Default Elasticsearch Logging Configuration\nDESCRIPTION: Default logging configuration for Elasticsearch service including console appender and pattern layout settings.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/supported-services/elasticsearch.md#2025-04-21_snippet_2\n\nLANGUAGE: properties\nCODE:\n```\nlogger.action.name = org.elasticsearch.action\nlogger.action.level = info\nappender.console.type = Console\nappender.console.name = console\nappender.console.layout.type = PatternLayout\nappender.console.layout.pattern = [%d{ISO8601}][%-5p][%-25c{1.}] %marker%m%n\nrootLogger.level = info\nrootLogger.appenderRef.console.ref = console\n```\n\n----------------------------------------\n\nTITLE: Defining a Ruby Environment in Nix for Container Generation\nDESCRIPTION: A simple Nix configuration defining a Ruby development environment that can be used to generate a container. It specifies the environment name and the Ruby version to use.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/blog/posts/devenv-v0.6-generating-containers-and-instant-shell-activation.md#2025-04-21_snippet_0\n\nLANGUAGE: nix\nCODE:\n```\n{\n  name = \"simple-ruby-app\";\n\n  languages.ruby.enable = true;\n  languages.ruby.version = \"3.2.1\";\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Simple Python Environment in Nix\nDESCRIPTION: Creates a basic development environment with Python enabled. This serves as the foundation for subsequent container examples.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/containers.md#2025-04-21_snippet_0\n\nLANGUAGE: nix\nCODE:\n```\n{\n  name = \"simple-python-app\";\n\n  languages.python.enable = true;\n}\n```\n\n----------------------------------------\n\nTITLE: Updating devenv project inputs\nDESCRIPTION: Command to update the pinned inputs in a devenv project, which downloads and updates the references to nixpkgs and devenv modules in the devenv.lock file.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/getting-started.md#2025-04-21_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\ndevenv update\n```\n\n----------------------------------------\n\nTITLE: Upgrading Bash on macOS using Nix profiles\nDESCRIPTION: Command to install a newer version of Bash on macOS using Nix profiles, which requires experimental flags to be enabled.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/getting-started.md#2025-04-21_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnix profile install nixpkgs#bashInteractive\n```\n\n----------------------------------------\n\nTITLE: Shell output when entering a directory with approved direnv\nDESCRIPTION: Example shell session showing automatic activation of the devenv environment when entering a project directory with an approved .envrc file.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/automatic-shell-activation.md#2025-04-21_snippet_3\n\nLANGUAGE: shell-session\nCODE:\n```\n$ cd /home/user/myproject/\ndirenv: loading ~/myproject/.envrc\nBuilding shell ...\nEntering shell ...\n\n(devenv) $\n```\n\n----------------------------------------\n\nTITLE: Configuring Maven Support in devenv for Java\nDESCRIPTION: Options for enabling Maven and specifying the Maven package to use. The Maven package inherits the JDK from the Java language configuration by default.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/supported-languages/java.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n## languages\\.java\\.maven\\.enable\n\n\n\nWhether to enable maven\\.\n\n\n\n*Type:*\nboolean\n\n\n\n*Default:*\n` false `\n\n\n\n*Example:*\n` true `\n\n\n\n## languages\\.java\\.maven\\.package\n\n\n\nThe Maven package to use\\.\nThe Maven package by default inherits the JDK from ` languages.java.jdk.package `\\.\n\n\n\n*Type:*\npackage\n\n\n\n*Default:*\n` pkgs.maven.override { jdk_headless = cfg.jdk.package; } `\n```\n\n----------------------------------------\n\nTITLE: Escaping Nix Curly Braces in Shell Scripts\nDESCRIPTION: Shows how to properly escape Nix curly braces when defining shell scripts within a Nix configuration.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/common-patterns.md#2025-04-21_snippet_3\n\nLANGUAGE: nix\nCODE:\n```\n{ pkgs, ... }: {\n  scripts.myscript.exec = ''\n    foobar=1\n    echo ''${foobar}\n  '';\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Varnish VCL\nDESCRIPTION: Default VCL configuration for Varnish that sets up a basic backend server listening on localhost port 80.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/supported-services/varnish.md#2025-04-21_snippet_0\n\nLANGUAGE: vcl\nCODE:\n```\nvcl 4.0;\n\nbackend default {\n  .host = \"127.0.0.1\";\n  .port = \"80\";\n}\n```\n\n----------------------------------------\n\nTITLE: MongoDB Default Arguments Configuration\nDESCRIPTION: Default command-line arguments passed to the MongoDB daemon (mongod), configured to run without authentication.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/supported-services/mongodb.md#2025-04-21_snippet_0\n\nLANGUAGE: nix\nCODE:\n```\n[\n  \"--noauth\"\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring Java Language Support in devenv\nDESCRIPTION: Configuration options for enabling Java language support and specifying the JDK package to use. This setting also sets the JAVA_HOME environment variable.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/supported-languages/java.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## languages\\.java\\.enable\n\nWhether to enable tools for Java development\\.\n\n\n\n*Type:*\nboolean\n\n\n\n*Default:*\n` false `\n\n\n\n*Example:*\n` true `\n\n\n\n## languages\\.java\\.jdk\\.package\n\n\n\nThe JDK package to use\\.\nThis will also become available as ` JAVA_HOME `\\.\n\n\n\n*Type:*\npackage\n\n\n\n*Default:*\n` pkgs.jdk `\n\n\n\n*Example:*\n` pkgs.jdk8 `\n```\n\n----------------------------------------\n\nTITLE: Conditional Process Configuration in Nix for devenv Testing\nDESCRIPTION: This snippet shows how to conditionally configure processes based on whether the environment is in testing mode. It always includes a backend process but only includes a frontend process when not testing.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/tests.md#2025-04-21_snippet_4\n\nLANGUAGE: nix\nCODE:\n```\n{ pkgs, lib, config, ... }: {\n  processes = {\n    backend.exec = \"cargo watch\";\n  } // lib.optionalAttrs (!config.devenv.isTesting) {\n    frontend.exec = \"parcel serve\";\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Nixpkgs Input in devenv.yaml\nDESCRIPTION: Example of how to update the nixpkgs input in devenv.yaml to use a custom branch, typically used when a package is out of date and you've submitted a PR to update it.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/reference/yaml-options.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ninputs:\n  nixpkgs:\n    url: 'github:$GH_USERNAME/nixpkgs/MYBRANCH'\n```\n\n----------------------------------------\n\nTITLE: Configuring RabbitMQ Authentication Backends Example\nDESCRIPTION: Example configuration showing how to set up LDAP and internal authentication backends for RabbitMQ using the configItems attribute set.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/supported-services/rabbitmq.md#2025-04-21_snippet_0\n\nLANGUAGE: nix\nCODE:\n```\n{\n  \"auth_backends.1.authn\" = \"rabbit_auth_backend_ldap\";\n  \"auth_backends.1.authz\" = \"rabbit_auth_backend_internal\";\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Single Command in Devenv Shell\nDESCRIPTION: GitHub Actions step demonstrating how to run a single command in the devenv shell\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/integrations/github-actions.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Run a single command in the devenv shell\n  run: devenv shell hello\n```\n\n----------------------------------------\n\nTITLE: Setting Rust Compiler Flags in devenv\nDESCRIPTION: Allows specifying extra flags to pass to the Rust compiler. By default, it's an empty string.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/supported-languages/rust.md#2025-04-21_snippet_4\n\nLANGUAGE: nix\nCODE:\n```\nlanguages.rust.rustflags = \"\"\n```\n\n----------------------------------------\n\nTITLE: Reading Custom HBA Configuration File in Nix\nDESCRIPTION: Example of how to read a custom pg_hba.conf file for PostgreSQL configuration.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/supported-services/postgres.md#2025-04-21_snippet_2\n\nLANGUAGE: nix\nCODE:\n```\nbuiltins.readFile ./my-custom/directory/to/pg_hba.conf\n```\n\n----------------------------------------\n\nTITLE: Running Task in Shell Session for devenv\nDESCRIPTION: Shows the shell command to run the 'myapp:hello' task and its output.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/tasks.md#2025-04-21_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ devenv tasks run myapp:hello\nRunning tasks     myapp:hello\nSucceeded         myapp:hello         9ms\n1 Succeeded                           10.14ms\n```\n\n----------------------------------------\n\nTITLE: Directory Path Configuration Example\nDESCRIPTION: Example of setting a relative path for JavaScript project directory.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/supported-languages/javascript.md#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n\"./directory\"\n```\n\n----------------------------------------\n\nTITLE: Running Tests with devenv\nDESCRIPTION: Command to execute tests for the Django project using devenv. This runs the test suite configured in the project.\nSOURCE: https://github.com/cachix/devenv/blob/main/examples/python-django/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndevenv test\n```\n\n----------------------------------------\n\nTITLE: Running a Container Shell Environment in Shell\nDESCRIPTION: Shows how to run a previously built container using Docker, which provides an interactive Python shell based on the devenv environment definition.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/containers.md#2025-04-21_snippet_7\n\nLANGUAGE: shell-session\nCODE:\n```\n$ devenv container run shell\n...\n(devenv) bash-5.2# python\nPython 3.10.9 (main, Dec  6 2022, 18:44:57) [GCC 12.2.0] on linux\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>>\n```\n\n----------------------------------------\n\nTITLE: Configuring MySQL User Permissions Example\nDESCRIPTION: Example configuration for creating a MySQL user with full privileges on a specific database using Unix socket authentication\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/supported-services/mysql.md#2025-04-21_snippet_0\n\nLANGUAGE: nix\nCODE:\n```\n[\n  {\n    name = \"devenv\";\n    ensurePermissions = {\n      \"devenv.*\" = \"ALL PRIVILEGES\";\n    };\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Accessing Custom Input in Nix for devenv\nDESCRIPTION: Shows how to use a custom input (nixpkgs-stable) within the devenv.nix configuration file.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/inputs.md#2025-04-21_snippet_2\n\nLANGUAGE: nix\nCODE:\n```\n{ inputs, pkgs, ... }:\n\nlet\n  pkgs-stable = import inputs.nixpkgs-stable { system = pkgs.stdenv.system; };\nin {\n  packages = [ pkgs-stable.git ];\n\n  enterShell = ''\n    git --version\n  ''\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Elasticsearch Extra Configuration Example\nDESCRIPTION: Example configuration showing how to set node name, master, and data properties for Elasticsearch.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/supported-services/elasticsearch.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nnode.name: \"elasticsearch\"\nnode.master: true\nnode.data: false\n```\n\n----------------------------------------\n\nTITLE: MySQL Initial Database Configuration Example\nDESCRIPTION: Example configuration for creating initial databases during MySQL first startup, with optional schema initialization\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/supported-services/mysql.md#2025-04-21_snippet_2\n\nLANGUAGE: nix\nCODE:\n```\n[\n  { name = \"foodatabase\"; schema = ./foodatabase.sql; }\n  { name = \"bardatabase\"; }\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring Dynamic Temporal Server Settings in Nix\nDESCRIPTION: Example of setting dynamic configuration options for the Temporal server, including RPS limits for the frontend and namespace.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/supported-services/temporal.md#2025-04-21_snippet_0\n\nLANGUAGE: nix\nCODE:\n```\n{\n  \"frontend.namespacerps\" = \"2500\";\n  \"frontend.rps\" = \"2500\";\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Temporal Namespaces in Nix Configuration\nDESCRIPTION: Example of specifying custom namespaces to be pre-created for the Temporal service.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/supported-services/temporal.md#2025-04-21_snippet_1\n\nLANGUAGE: nix\nCODE:\n```\n[\n  \"my-namespace\"\n  \"my-other-namespace\"\n]\n```\n\n----------------------------------------\n\nTITLE: Julia Development Tools Configuration\nDESCRIPTION: Configuration options for enabling Julia development environment and specifying the Julia package. The enable flag activates Julia tools, while package option determines which Julia distribution to use.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/supported-languages/julia.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nlanguages.julia.enable\n\nWhether to enable tools for Julia development.\n\nType: boolean\nDefault: false\nExample: true\n\nlanguages.julia.package\n\nThe Julia package to use.\n\nType: package\nDefault: pkgs.julia-bin\n```\n\n----------------------------------------\n\nTITLE: Configuring Haskell Language Server in Nix\nDESCRIPTION: This option specifies the Haskell language server package to be used. It can be set to null or a specific package, with the default being the haskell-language-server from nixpkgs.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/supported-languages/haskell.md#2025-04-21_snippet_2\n\nLANGUAGE: nix\nCODE:\n```\nlanguages.haskell.languageServer = pkgs.haskell-language-server;\n```\n\n----------------------------------------\n\nTITLE: Running x86 Binaries on Apple Silicon with Rosetta in Nix\nDESCRIPTION: Shows how to include x86_64 packages on Apple Silicon Macs using Rosetta 2, useful for packages without aarch64-compatible builds.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/common-patterns.md#2025-04-21_snippet_7\n\nLANGUAGE: nix\nCODE:\n```\n{ pkgs, lib, ... }:\n\nlet\n  rosettaPkgs = pkgs.pkgsx86_64Darwin;\nin {\n  packages = [\n    pkgs.git\n  ] ++ lib.optionals (pkgs.stdenv.isDarwin && pkgs.stdenv.isAarch64) [\n    rosettaPkgs.dmd\n  ];\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring PHP-FPM Pools in Nix\nDESCRIPTION: Example of defining PHP-FPM pools with various settings. This snippet demonstrates how to configure a PHP-FPM pool named 'mypool' with specific user, group, and process manager settings.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/supported-languages/php.md#2025-04-21_snippet_2\n\nLANGUAGE: nix\nCODE:\n```\n{\n  mypool = {\n    user = \"php\";\n    group = \"php\";\n    phpPackage = pkgs.php;\n    settings = {\n      \"pm\" = \"dynamic\";\n      \"pm.max_children\" = 75;\n      \"pm.start_servers\" = 10;\n      \"pm.min_spare_servers\" = 5;\n      \"pm.max_spare_servers\" = 20;\n      \"pm.max_requests\" = 500;\n    };\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Task with Inputs and Outputs in Nix for devenv.nix\nDESCRIPTION: Demonstrates how to work with task inputs and outputs using environment variables and JSON objects.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/tasks.md#2025-04-21_snippet_6\n\nLANGUAGE: nix\nCODE:\n```\n{ pkgs, lib, config, ... }:\n\n{\n  tasks = {\n    \"myapp:mytask\" = {\n      exec = ''\n        echo $DEVENV_TASK_INPUTS> $DEVENV_ROOT/input.json\n        echo '{ \"output\": 1 }' > $DEVENV_TASK_OUTPUT_FILE\n        echo $DEVENV_TASKS_OUTPUTS > $DEVENV_ROOT/outputs.json\n      '';\n      input = {\n        value = 1;\n      };\n    };\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Extra Redis Configuration in Nix\nDESCRIPTION: This option allows adding additional text to be appended to redis.conf. It's a string concatenated with \"\\n\", defaulting to \"locale-collate C\".\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/supported-services/redis.md#2025-04-21_snippet_3\n\nLANGUAGE: nix\nCODE:\n```\nservices.redis.extraConfig = \"locale-collate C\";\n```\n\n----------------------------------------\n\nTITLE: Building a Container Shell Environment in Shell\nDESCRIPTION: Demonstrates how to build a container that enters the development environment using the devenv CLI. This command generates an OCI container specification.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/containers.md#2025-04-21_snippet_6\n\nLANGUAGE: shell-session\nCODE:\n```\n$ devenv container build shell\n/nix/store/...-image-devenv.json\n```\n\n----------------------------------------\n\nTITLE: Process Compose Settings Example in YAML\nDESCRIPTION: Example configuration showing process-compose.yaml options including availability settings, process dependencies, and environment variables.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/supported-process-managers/process-compose.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n{\n  availability = {\n    backoff_seconds = 2;\n    max_restarts = 5;\n    restart = \"on_failure\";\n  };\n  depends_on = {\n    some-other-process = {\n      condition = \"process_completed_successfully\";\n    };\n  };\n  environment = [\n    \"ENVVAR_FOR_THIS_PROCESS_ONLY=foobar\"\n  ];\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Sqlite Pragma Statements for Temporal State in Nix\nDESCRIPTION: Example of setting Sqlite pragma statements for the Temporal state configuration, including journal mode and synchronous settings.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/supported-services/temporal.md#2025-04-21_snippet_2\n\nLANGUAGE: nix\nCODE:\n```\n{\n  journal_mode = \"wal\";\n  synchronous = \"2\";\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Postgres and Test Environment in Nix\nDESCRIPTION: Example configuration showing how to set up Postgres database and define test logic using the new enterTest attribute in devenv.nix. Demonstrates service configuration and test command definition.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/blog/posts/devenv-v1.0-rewrite-in-rust.md#2025-04-21_snippet_0\n\nLANGUAGE: nix\nCODE:\n```\n{ pkgs, ... }: {\n  packages = [ pkgs.ncdu ];\n\n  services.postgres = {\n    enable = true;\n    listen_addresses = \"127.0.0.1\";\n    initialDatabases = [{ name = \"mydb\"; }];\n  };\n\n  enterTest = ''\n    wait_for_port 5432\n    ncdu --version | grep \"ncdu 2.2\"\n  '';\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring C++ Development Tools Enable Flag\nDESCRIPTION: Sets a boolean flag to enable or disable C++ development tools. When set to true, it activates the necessary tools and configurations for C++ development in the project environment.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/supported-languages/cplusplus.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## languages\\.cplusplus\\.enable\n\nWhether to enable tools for C++ development\\.\n\n\n\n*Type:*\nboolean\n\n\n\n*Default:*\n` false `\n\n\n\n*Example:*\n` true `\n```\n\n----------------------------------------\n\nTITLE: Configuring macOS SDK in Nix\nDESCRIPTION: Demonstrates how to override or remove the default macOS SDK for linking against system frameworks.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/common-patterns.md#2025-04-21_snippet_6\n\nLANGUAGE: nix\nCODE:\n```\n{ pkgs, lib, ... }:\n\n{\n  # Use a different SDK version.\n  apple.sdk =\n    if pkgs.stdenv.isDarwin\n    then pkgs.apple-sdk_15\n    else null;\n\n  # Remove the default Apple SDK.\n  # This allows you to use the system SDK at the cost of reducing reproducibility.\n  # apple.sdk = null;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Special Inputs in Nix for devenv\nDESCRIPTION: Demonstrates the usage of special inputs (pkgs, lib, config) in the devenv.nix configuration file.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/inputs.md#2025-04-21_snippet_3\n\nLANGUAGE: nix\nCODE:\n```\n{ pkgs, lib, config, ... }:\n\n{\n  env.GREET = \"hello\";\n\n  enterShell = ''\n    echo ${config.env.GREET}\n  '';\n}\n```\n\n----------------------------------------\n\nTITLE: Code Style and Organization Guidelines\nDESCRIPTION: Coding standards for the project including import organization, naming conventions, and error handling practices.\nSOURCE: https://github.com/cachix/devenv/blob/main/CLAUDE.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n- **Imports**: Group by category (std lib first, then external crates, then internal)\n- **Naming**: Use `snake_case` for functions/variables, `CamelCase` for types/traits\n- **Error Handling**: Use `thiserror` crate with custom error types, `bail!` (instead of `panic~`) and `?` operator\n- **Types**: Prefer strong typing with descriptive names and appropriate generics\n- **Formatting**: Follow standard rustfmt rules, use pre-commit hooks\n- **Documentation**: Document public APIs with rustdoc comments\n- **No unsafe**: Don't use `unsafe` code\n```\n\n----------------------------------------\n\nTITLE: Default Python Libraries Configuration\nDESCRIPTION: Default configuration for Python libraries path in devenv, specifying the location of the profile dotfile.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/supported-languages/python.md#2025-04-21_snippet_0\n\nLANGUAGE: nix\nCODE:\n```\n[ \"${config.devenv.dotfile}/profile\" ]\n```\n\n----------------------------------------\n\nTITLE: Configuring Nginx HTTP Options in Devenv\nDESCRIPTION: Configuration option for the Nginx HTTP section. It's a string that defaults to an empty string.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/supported-services/nginx.md#2025-04-21_snippet_4\n\nLANGUAGE: nix\nCODE:\n```\nservices.nginx.httpConfig = \"\";\n```\n\n----------------------------------------\n\nTITLE: Entering a devenv shell with Nix flakes\nDESCRIPTION: Command to enter a devenv shell using Nix flakes. The --no-pure-eval flag is required to allow devenv to determine the environment context.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/guides/using-with-flakes.md#2025-04-21_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nnix develop --no-pure-eval\n```\n\n----------------------------------------\n\nTITLE: Mill Build Tool Configuration Example\nDESCRIPTION: Configuration options for enabling and specifying the Mill build tool package for Scala development.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/supported-languages/scala.md#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\npkgs.mill\n```\n\n----------------------------------------\n\nTITLE: Setting Redis Bind Address in Nix Configuration\nDESCRIPTION: This option sets the IP interface for Redis to bind to. It can be null (meaning all interfaces) or a string, defaulting to \"127.0.0.1\".\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/supported-services/redis.md#2025-04-21_snippet_2\n\nLANGUAGE: nix\nCODE:\n```\nservices.redis.bind = \"127.0.0.1\";\n```\n\n----------------------------------------\n\nTITLE: Enabling Clojure Development Tools\nDESCRIPTION: This configuration option allows you to enable or disable tools for Clojure development. When set to true, it activates Clojure-specific development features in the project environment.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/supported-languages/clojure.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## languages\\.clojure\\.enable\n\nWhether to enable tools for Clojure development\\.\n\n\n\n*Type:*\nboolean\n\n\n\n*Default:*\n` false `\n\n\n\n*Example:*\n` true `\n```\n\n----------------------------------------\n\nTITLE: Setting Default Bind Address for Httpbin in Nix\nDESCRIPTION: Defines the default bind address for the httpbin service. It specifies that httpbin should listen on 127.0.0.1 port 8080 by default.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/supported-services/httpbin.md#2025-04-21_snippet_0\n\nLANGUAGE: nix\nCODE:\n```\n[\n  \"127.0.0.1:8080\"\n]\n```\n\n----------------------------------------\n\nTITLE: Demonstrating the new devenv search command in shell\nDESCRIPTION: Example showing how to use the new devenv search command to find packages, displaying results with name, version, and description information for ncdu packages.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/blog/posts/devenv-v0.2.md#2025-04-21_snippet_0\n\nLANGUAGE: shell-session\nCODE:\n```\n$ devenv search ncdu\nname         version  description\npkgs.ncdu    2.1.2    Disk usage analyzer with an ncurses interface\npkgs.ncdu_1  1.17     Disk usage analyzer with an ncurses interface\npkgs.ncdu_2  2.1.2    Disk usage analyzer with an ncurses interface\n\nFound 3 results.\n```\n\n----------------------------------------\n\nTITLE: Configuring allowUnfree and Custom Overlays in devenv.yaml\nDESCRIPTION: A YAML configuration that enables the use of unfree packages and adds a custom overlay. It specifies nixpkgs as an input and includes the rust-overlay with its default overlay.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/blog/posts/devenv-v0.6-generating-containers-and-instant-shell-activation.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nallowUnfree: true\ninputs:\n  nixpkgs:\n    url: github:NixOS/nixpkgs/nixpkgs-unstable\n  rust-overlay:\n    url: github:oxalica/rust-overlay\n    overlays:\n      - default\n```\n\n----------------------------------------\n\nTITLE: Go Language Enable Flag Configuration\nDESCRIPTION: Boolean configuration option to enable or disable Go development tools. Controls whether Go-related development tools are included in the environment.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/supported-languages/go.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nfalse\n```\n\n----------------------------------------\n\nTITLE: Configuring Blackfire Socket in Nix Configuration\nDESCRIPTION: Configuration option to set the server socket path for Blackfire. The default is set to use TCP on localhost port 8307.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/supported-services/blackfire.md#2025-04-21_snippet_7\n\nLANGUAGE: nix\nCODE:\n```\nservices.blackfire.socket = \"tcp://127.0.0.1:8307\";\n```\n\n----------------------------------------\n\nTITLE: Specifying Additional Perl Packages in Devenv\nDESCRIPTION: Configuration for including additional Perl packages in the Devenv environment. This example shows how to add the Mojolicious package to the project.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/supported-languages/perl.md#2025-04-21_snippet_1\n\nLANGUAGE: perl\nCODE:\n```\n[\n  \"Mojolicious\"\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring Server Aliases for Virtual Hosts\nDESCRIPTION: Example configuration showing how to set up multiple server aliases for a virtual host\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/supported-services/caddy.md#2025-04-21_snippet_2\n\nLANGUAGE: nix\nCODE:\n```\n[\n  \"www.example.org\"\n  \"example.org\"\n]\n```\n\n----------------------------------------\n\nTITLE: Enabling Haskell Tools in Nix Configuration\nDESCRIPTION: This snippet defines a boolean option to enable Haskell development tools. When set to true, it activates the Haskell toolchain in the development environment.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/supported-languages/haskell.md#2025-04-21_snippet_0\n\nLANGUAGE: nix\nCODE:\n```\nlanguages.haskell.enable = false;\n```\n\n----------------------------------------\n\nTITLE: Flutter Android Configuration\nDESCRIPTION: Nix configuration for Flutter Android development environment\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/integrations/android.md#2025-04-21_snippet_5\n\nLANGUAGE: nix\nCODE:\n```\n{ pkgs, ... }:\n\n{\n  android = {\n    enable = true;\n    flutter.enable = true;\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Deno Package Selection\nDESCRIPTION: Configuration option to specify which Deno package to use. Default value is pkgs.deno.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/supported-languages/deno.md#2025-04-21_snippet_1\n\nLANGUAGE: nix\nCODE:\n```\npkgs.deno\n```\n\n----------------------------------------\n\nTITLE: ClickHouse HTTP Port Configuration\nDESCRIPTION: Defines the HTTP port for ClickHouse server. Default port is 8123.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/supported-services/clickhouse.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nservices.clickhouse.httpPort: 8123\n```\n\n----------------------------------------\n\nTITLE: Configuring direnv for external flakes\nDESCRIPTION: Entry for .envrc file to automatically use an external flake for devenv configuration. This allows using centralized flake configurations across multiple projects.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/guides/using-with-flakes.md#2025-04-21_snippet_11\n\nLANGUAGE: text\nCODE:\n```\nnix flake --no-pure-eval file:/path/to/central/flake#projectA\n```\n\n----------------------------------------\n\nTITLE: Launching Processes and Services in devenv Shell\nDESCRIPTION: Example of using 'devenv up' command to launch processes and services defined in the devenv configuration.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/guides/using-with-flake-parts.md#2025-04-21_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ devenv up\n17:34:37 system | run.1 started (pid=1046939)\n17:34:37 run.1  | Hello, world!\n17:34:37 system | run.1 stopped (rc=0)\n```\n\n----------------------------------------\n\nTITLE: Enabling Elixir Tools in Devenv (Nix)\nDESCRIPTION: This setting determines whether to enable tools for Elixir development in the Devenv environment. It is a boolean option that defaults to false.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/supported-languages/elixir.md#2025-04-21_snippet_0\n\nLANGUAGE: nix\nCODE:\n```\nlanguages.elixir.enable = false\n```\n\n----------------------------------------\n\nTITLE: CockroachDB HTTP Address Configuration\nDESCRIPTION: Sets the hostname or IP address for HTTP request binding. Default value binds to localhost on port 8080.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/supported-services/cockroachdb.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n\"localhost:8080\"\n```\n\n----------------------------------------\n\nTITLE: Scala Package Configuration Example\nDESCRIPTION: Example configuration showing how to enable Scala support and specify package versions for Scala development environment.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/supported-languages/scala.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nfalse\n```\n\n----------------------------------------\n\nTITLE: Foundry Package Configuration\nDESCRIPTION: Configuration for selecting the Foundry package\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/supported-languages/solidity.md#2025-04-21_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\nfoundry.defaultPackage.$${pkgs.stdenv.system}\n```\n\n----------------------------------------\n\nTITLE: Setting Haskell Stack Package in Nix\nDESCRIPTION: This configuration option allows specifying the Haskell stack package to be used in the environment. It can be set to null or a specific package, defaulting to the stack package from nixpkgs.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/supported-languages/haskell.md#2025-04-21_snippet_3\n\nLANGUAGE: nix\nCODE:\n```\nlanguages.haskell.stack = pkgs.stack;\n```\n\n----------------------------------------\n\nTITLE: Enabling Odin Language Support in Devenv\nDESCRIPTION: Configuration option to enable tools for Odin Language in Devenv. When set to true, it activates Odin language support.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/supported-languages/odin.md#2025-04-21_snippet_0\n\nLANGUAGE: nix\nCODE:\n```\nlanguages.odin.enable = false\n```\n\n----------------------------------------\n\nTITLE: Configuring Mailhog Additional Arguments\nDESCRIPTION: Example configuration for additional command line arguments passed to Mailhog service.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/supported-services/mailhog.md#2025-04-21_snippet_0\n\nLANGUAGE: nix\nCODE:\n```\n[\n  \"-invite-jim\"\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript Development Tools in devenv\nDESCRIPTION: This configuration option enables or disables tools for TypeScript development. It is a boolean value that defaults to false. Setting it to true will activate TypeScript-specific development tools in the devenv environment.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/supported-languages/typescript.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## languages\\.typescript\\.enable\n\nWhether to enable tools for TypeScript development\\.\n\n\n\n*Type:*\nboolean\n\n\n\n*Default:*\n` false `\n\n\n\n*Example:*\n` true `\n```\n\n----------------------------------------\n\nTITLE: Configuring Gradle Support in devenv for Java\nDESCRIPTION: Options for enabling Gradle and specifying the Gradle package to use. The Gradle package inherits the JDK from the Java language configuration by default.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/supported-languages/java.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## languages\\.java\\.gradle\\.enable\n\n\n\nWhether to enable gradle\\.\n\n\n\n*Type:*\nboolean\n\n\n\n*Default:*\n` false `\n\n\n\n*Example:*\n` true `\n\n\n\n## languages\\.java\\.gradle\\.package\n\n\n\nThe Gradle package to use\\.\nThe Gradle package by default inherits the JDK from ` languages.java.jdk.package `\\.\n\n\n\n*Type:*\npackage\n\n\n\n*Default:*\n` pkgs.gradle.override { java = cfg.jdk.package; } `\n```\n\n----------------------------------------\n\nTITLE: Specifying Haskell Compiler Package in Nix\nDESCRIPTION: This configuration option allows setting the Haskell compiler package to be used in the development environment. It defaults to the GHC package from nixpkgs.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/supported-languages/haskell.md#2025-04-21_snippet_1\n\nLANGUAGE: nix\nCODE:\n```\nlanguages.haskell.package = pkgs.ghc;\n```\n\n----------------------------------------\n\nTITLE: Setting Meilisearch Listen Address\nDESCRIPTION: Configures the network address Meilisearch listens on. Default is localhost.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/supported-services/meilisearch.md#2025-04-21_snippet_3\n\nLANGUAGE: nix\nCODE:\n```\n\"127.0.0.1\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Meilisearch Port\nDESCRIPTION: Sets the network port Meilisearch listens on. Must be between 0 and 65535.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/supported-services/meilisearch.md#2025-04-21_snippet_4\n\nLANGUAGE: nix\nCODE:\n```\n7700\n```\n\n----------------------------------------\n\nTITLE: Solidity Package Configuration\nDESCRIPTION: Configuration for selecting the Solidity compiler package\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/supported-languages/solidity.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\npkgs.solc\n```\n\n----------------------------------------\n\nTITLE: Setting Blackfire Client Token in Nix Configuration\nDESCRIPTION: Configuration option to set the client token for authenticating with Blackfire. This can be found in the user's Blackfire credentials settings.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/supported-services/blackfire.md#2025-04-21_snippet_4\n\nLANGUAGE: nix\nCODE:\n```\nservices.blackfire.client-token = \"\";\n```\n\n----------------------------------------\n\nTITLE: Specifying Initial SQL Commands in Nix\nDESCRIPTION: Example of how to specify initial SQL commands to run during database initialization.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/supported-services/postgres.md#2025-04-21_snippet_4\n\nLANGUAGE: nix\nCODE:\n```\nCREATE ROLE postgres SUPERUSER;\nCREATE ROLE bar;\n```\n\n----------------------------------------\n\nTITLE: Setting Cassandra Seed Addresses in Nix\nDESCRIPTION: Default configuration for Cassandra seed addresses, which are the addresses of hosts designated as contact points of the cluster. This example shows a list with a single IP address.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/supported-services/cassandra.md#2025-04-21_snippet_1\n\nLANGUAGE: nix\nCODE:\n```\n[\n  \"127.0.0.1\"\n]\n```\n\n----------------------------------------\n\nTITLE: Example Content of .ruby-version File\nDESCRIPTION: This snippet shows an example of the content that might be found in a .ruby-version file. The file typically contains just the version number of Ruby to be used for the project.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/supported-languages/ruby.md#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n./ruby-version\n```\n\n----------------------------------------\n\nTITLE: Customizing Rust Toolchain Components in devenv\nDESCRIPTION: Allows customization of Rust component packages. It includes options for cargo, clippy, rust-analyzer, rustc, and rustfmt, with defaults set to their respective nixpkgs versions.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/supported-languages/rust.md#2025-04-21_snippet_6\n\nLANGUAGE: nix\nCODE:\n```\nlanguages.rust.toolchain = {\n  cargo = pkgs.cargo;\n  clippy = pkgs.clippy;\n  rust-analyzer = pkgs.rust-analyzer;\n  rustc = pkgs.rustc;\n  rustfmt = pkgs.rustfmt;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Rust Compilation Targets in devenv\nDESCRIPTION: Specifies a list of extra targets to install for cross-compilation. By default, it's an empty list, meaning only the native target is used.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/supported-languages/rust.md#2025-04-21_snippet_5\n\nLANGUAGE: nix\nCODE:\n```\nlanguages.rust.targets = [ ]\n```\n\n----------------------------------------\n\nTITLE: Configuring Kotlin Development Support - Boolean Setting\nDESCRIPTION: Configuration option to enable or disable Kotlin development tools. The setting is a boolean flag that defaults to false and can be set to true to activate Kotlin support.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/supported-languages/kotlin.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nfalse\n```\n\n----------------------------------------\n\nTITLE: Specifying Ansible Package in Devenv Configuration\nDESCRIPTION: This configuration option allows you to define the specific Ansible package to use in your Devenv environment. By default, it uses the Ansible package from the pkgs namespace.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/supported-languages/ansible.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nlanguages.ansible.package: pkgs.ansible\n```\n\n----------------------------------------\n\nTITLE: Enabling Difftastic in Nix Configuration\nDESCRIPTION: This snippet shows how to enable Difftastic in a Nix configuration file. It sets the 'difftastic.enable' option to true, which integrates Difftastic into the development environment.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/integrations/difftastic.md#2025-04-21_snippet_0\n\nLANGUAGE: nix\nCODE:\n```\n{ pkgs, ... }:\n\n{\n    difftastic.enable = true;\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Redis Package in Nix Configuration\nDESCRIPTION: This option allows specifying which package of Redis to use. It defaults to pkgs.redis.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/supported-services/redis.md#2025-04-21_snippet_1\n\nLANGUAGE: nix\nCODE:\n```\nservices.redis.package = pkgs.redis;\n```\n\n----------------------------------------\n\nTITLE: Enabling Mold Linker for Rust in devenv\nDESCRIPTION: Option to enable mold as the linker. It's enabled by default on x86_64 Linux machines when no cross-compilation targets are specified.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/supported-languages/rust.md#2025-04-21_snippet_3\n\nLANGUAGE: nix\nCODE:\n```\nlanguages.rust.mold.enable = pkgs.stdenv.isLinux && pkgs.stdenv.isx86_64 && languages.rust.targets == [ ]\n```\n\n----------------------------------------\n\nTITLE: ClickHouse Package Selection\nDESCRIPTION: Specifies which ClickHouse package to use for installation. Default package is pkgs.clickhouse.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/supported-services/clickhouse.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nservices.clickhouse.package: pkgs.clickhouse\n```\n\n----------------------------------------\n\nTITLE: Setting PHP-FPM Pool Environment Variables in Nix\nDESCRIPTION: Example of configuring environment variables for a PHP-FPM pool. This snippet shows how to set common environment variables like HOSTNAME, TMP, TMPDIR, and TEMP for a PHP-FPM pool.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/supported-languages/php.md#2025-04-21_snippet_3\n\nLANGUAGE: nix\nCODE:\n```\n{\n  HOSTNAME = \"$HOSTNAME\";\n  TMP = \"/tmp\";\n  TMPDIR = \"/tmp\";\n  TEMP = \"/tmp\";\n}\n```\n\n----------------------------------------\n\nTITLE: Unfree Package Configuration for Android\nDESCRIPTION: Configuration to allow unfree packages required for Android development\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/integrations/android.md#2025-04-21_snippet_2\n\nLANGUAGE: nix\nCODE:\n```\nallowUnfree: true\n```\n\n----------------------------------------\n\nTITLE: Go Debugger Hardening Workaround Configuration\nDESCRIPTION: Boolean flag to enable a workaround for the Delve debugger hardening issue (reference: https://github.com/go-delve/delve/issues/3085). Helps resolve debugging compatibility issues.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/supported-languages/go.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nfalse\n```\n\n----------------------------------------\n\nTITLE: Enabling Robot Framework Tools in devenv\nDESCRIPTION: Configuration option to enable or disable tools for Robot Framework development. It is a boolean value defaulting to false.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/supported-languages/robotframework.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## languages\\.robotframework\\.enable\n\nWhether to enable tools for Robot Framework development\\.\n\n\n\n*Type:*\nboolean\n\n\n\n*Default:*\n` false `\n\n\n\n*Example:*\n` true `\n```\n\n----------------------------------------\n\nTITLE: OpenTofu Package Selection Configuration\nDESCRIPTION: Package configuration option to specify which OpenTofu package to use. Default value is pkgs.opentofu.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/supported-languages/opentofu.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\npkgs.opentofu\n```\n\n----------------------------------------\n\nTITLE: Configuring Nix LSP Package\nDESCRIPTION: Configuration option for specifying the Language Server Protocol (LSP) package to use for Nix development. Defaults to the 'nil' package.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/supported-languages/nix.md#2025-04-21_snippet_1\n\nLANGUAGE: nix\nCODE:\n```\npkgs.nil\n```\n\n----------------------------------------\n\nTITLE: Connecting to PostgreSQL Cluster\nDESCRIPTION: A new script 'psql-devenv' has been added to facilitate connecting to the PostgreSQL cluster in the devenv environment.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/blog/posts/devenv-v0.4.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npsql-devenv\n```\n\n----------------------------------------\n\nTITLE: Configuring Zig Package Selection\nDESCRIPTION: Package configuration option that specifies which Zig package to use in the environment. The default value is pkgs.zig.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/supported-languages/zig.md#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\npkgs.zig\n```\n\n----------------------------------------\n\nTITLE: MySQL Server Configuration Settings Example\nDESCRIPTION: Example of configuring MySQL server settings including buffer sizes, caches, logging, and plugins\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/supported-services/mysql.md#2025-04-21_snippet_3\n\nLANGUAGE: nix\nCODE:\n```\n{\n  mysqld = {\n    key_buffer_size = \"6G\";\n    table_cache = 1600;\n    log-error = \"/var/log/mysql_err.log\";\n    plugin-load-add = [ \"server_audit\" \"ed25519=auth_ed25519\" ];\n  };\n  mysqldump = {\n    quick = true;\n    max_allowed_packet = \"16M\";\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: ClickHouse Native Port Configuration\nDESCRIPTION: Defines the native TCP port for ClickHouse server. Default port is 9000.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/supported-services/clickhouse.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nservices.clickhouse.port: 9000\n```\n\n----------------------------------------\n\nTITLE: R Package Configuration\nDESCRIPTION: Specifies the R package to be used in the development environment.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/supported-languages/r.md#2025-04-21_snippet_1\n\nLANGUAGE: nix\nCODE:\n```\npkgs.R\n```\n\n----------------------------------------\n\nTITLE: Configuring Gleam Language Support\nDESCRIPTION: Configuration options for enabling Gleam language support and specifying the Gleam package. Includes boolean enable flag and package selection options.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/supported-languages/gleam.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nlanguages.gleam.enable: false\nlanguages.gleam.package: pkgs.gleam\n```\n\n----------------------------------------\n\nTITLE: Android Emulator Creation Command\nDESCRIPTION: CLI command for creating an Android emulator using avdmanager\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/integrations/android.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\navdmanager create avd --force --name my-android-emulator-name --package 'system-images;android-32;google_apis_playstore;x86_64'\n```\n\n----------------------------------------\n\nTITLE: Configuring Zig Language Enable Flag\nDESCRIPTION: Boolean configuration option that enables or disables Zig development tools in the environment. The default value is false.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/supported-languages/zig.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nfalse\n```\n\n----------------------------------------\n\nTITLE: Configuring Raku Development Tools Enable Flag\nDESCRIPTION: This configuration option determines whether to enable tools for Raku development. It is a boolean value, defaulting to false. Setting it to true will enable Raku development tools.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/supported-languages/raku.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## languages\\.raku\\.enable\n\nWhether to enable tools for Raku development\\.\n\n\n\n*Type:*\nboolean\n\n\n\n*Default:*\n` false `\n\n\n\n*Example:*\n` true `\n```\n\n----------------------------------------\n\nTITLE: Specifying Odin Package in Devenv\nDESCRIPTION: Configuration option to specify the Odin package to use in Devenv. This allows customization of the Odin compiler version or distribution.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/supported-languages/odin.md#2025-04-21_snippet_1\n\nLANGUAGE: nix\nCODE:\n```\nlanguages.odin.package = pkgs.odin\n```\n\n----------------------------------------\n\nTITLE: Configuring sqld Port\nDESCRIPTION: Port number configuration for sqld service to listen on. Defaults to 8080.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/supported-services/sqld.md#2025-04-21_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n8080\n```\n\n----------------------------------------\n\nTITLE: Radian Package Configuration\nDESCRIPTION: Specifies the Radian package to be used for the enhanced R console.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/supported-languages/r.md#2025-04-21_snippet_3\n\nLANGUAGE: nix\nCODE:\n```\npkgs.radianWrapper\n```\n\n----------------------------------------\n\nTITLE: CockroachDB Listen Address Configuration\nDESCRIPTION: Configures the main address and port for CockroachDB to listen on. Default value binds to localhost on port 26257.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/supported-services/cockroachdb.md#2025-04-21_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n\"localhost:26257\"\n```\n\n----------------------------------------\n\nTITLE: Specifying Racket Package\nDESCRIPTION: Configuration option to specify the Racket package to use in the development environment. It defaults to the 'racket-minimal' package.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/supported-languages/racket.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## languages\\.racket\\.package\n\n\n\nThe Racket package to use\\.\n\n\n\n*Type:*\npackage\n\n\n\n*Default:*\n` pkgs.racket-minimal `\n```\n\n----------------------------------------\n\nTITLE: Specifying Custom Input in YAML for devenv\nDESCRIPTION: Demonstrates how to define a custom input in devenv.yaml, using nixpkgs-stable as an example.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/inputs.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ninputs:\n  nixpkgs-stable:\n    url: github:NixOS/nixpkgs/nixos-23.11\n```\n\n----------------------------------------\n\nTITLE: Running Devenv Test Command in GitHub Actions\nDESCRIPTION: Step to build the devenv shell and run git hooks using devenv test command\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/integrations/github-actions.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Build the devenv shell and run any git hooks\n  run: devenv test\n```\n\n----------------------------------------\n\nTITLE: Enabling Redis Service in Nix Configuration\nDESCRIPTION: This option enables the Redis process and exposes utilities. It is a boolean value defaulting to false.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/supported-services/redis.md#2025-04-21_snippet_0\n\nLANGUAGE: nix\nCODE:\n```\nservices.redis.enable = false;\n```\n\n----------------------------------------\n\nTITLE: Configuring Unison Enable Flag\nDESCRIPTION: Boolean configuration option to enable or disable Unison development tools. This setting controls whether Unison-related development features are available in the environment.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/supported-languages/unison.md#2025-04-21_snippet_0\n\nLANGUAGE: nix\nCODE:\n```\nfalse\n```\n\n----------------------------------------\n\nTITLE: Setting Font Search Paths for Typst in Nix\nDESCRIPTION: Configuration option to specify directories to be searched for fonts by Typst. It allows adding custom font locations to the Typst environment.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/supported-languages/typst.md#2025-04-21_snippet_2\n\nLANGUAGE: nix\nCODE:\n```\nlanguages.typst.fontPaths = []\n```\n\n----------------------------------------\n\nTITLE: Specifying Swift Package in Devenv\nDESCRIPTION: Configuration option to specify the Swift package to use in Devenv. It allows customization of the Swift package, with a default set to pkgs.swift.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/supported-languages/swift.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## languages\\.swift\\.package\n\n\n\nThe Swift package to use\\.\n\n\n\n*Type:*\npackage\n\n\n\n*Default:*\n` pkgs.swift `\n```\n\n----------------------------------------\n\nTITLE: Specifying Terraform Package in devenv (Markdown)\nDESCRIPTION: Configuration option to specify the Terraform package to use. It allows customization of the Terraform package.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/supported-languages/terraform.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## languages.terraform.package\n\nThe Terraform package to use.\n\n*Type:*\npackage\n\n*Default:*\n` pkgs.terraform `\n```\n\n----------------------------------------\n\nTITLE: Configuring Cassandra Extra Options in Nix\nDESCRIPTION: Example of setting extra configuration options for Cassandra using a Nix attribute set. This snippet demonstrates how to set the commitlog_sync_batch_window_in_ms option.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/supported-services/cassandra.md#2025-04-21_snippet_0\n\nLANGUAGE: nix\nCODE:\n```\n{\n  commitlog_sync_batch_window_in_ms = 3;\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling ElasticMQ Service in Devenv\nDESCRIPTION: Configuration option to enable the ElasticMQ server service. When set to true, it activates the ElasticMQ service in the Devenv environment.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/supported-services/elasticmq.md#2025-04-21_snippet_0\n\nLANGUAGE: nix\nCODE:\n```\nservices.elasticmq.enable = true\n```\n\n----------------------------------------\n\nTITLE: Standard ML Package Configuration\nDESCRIPTION: Package configuration option to specify which Standard ML implementation to use. Defaults to MLton package.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/supported-languages/standardml.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nlanguages.standardml.package\n```\n\n----------------------------------------\n\nTITLE: Computing hash for direnvrc script\nDESCRIPTION: Command to fetch and compute the SHA-256 hash of a direnvrc script for use in the .envrc file, ensuring script integrity.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/automatic-shell-activation.md#2025-04-21_snippet_6\n\nLANGUAGE: shell-session\nCODE:\n```\ndirenv fetchurl \"https://raw.githubusercontent.com/cachix/devenv/VERSION/direnvrc\"\n```\n\n----------------------------------------\n\nTITLE: Building Specific Output Command\nDESCRIPTION: Shell command showing how to build a specific output by name, demonstrating selective building capability.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/outputs.md#2025-04-21_snippet_2\n\nLANGUAGE: shell-session\nCODE:\n```\n$ devenv build outputs.git\n/nix/store/mzq5bpi49h26cy2mfj5a2r0q69fh3a9k-git-2.44.0\n```\n\n----------------------------------------\n\nTITLE: Specifying OCaml Package Set in Devenv (Nix)\nDESCRIPTION: This option allows you to specify the package set of OCaml to use in the Devenv environment. It defaults to OCaml 4.12 packages from the nixpkgs repository.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/supported-languages/ocaml.md#2025-04-21_snippet_1\n\nLANGUAGE: nix\nCODE:\n```\nlanguages.ocaml.packages = pkgs.ocaml-ng.ocamlPackages_4_12\n```\n\n----------------------------------------\n\nTITLE: Enabling Idris Development Tools in Devenv\nDESCRIPTION: Configuration option to enable tools for Idris development. This boolean setting allows users to turn on or off Idris support in their devenv environment.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/supported-languages/idris.md#2025-04-21_snippet_0\n\nLANGUAGE: nix\nCODE:\n```\nlanguages.idris.enable = false\n```\n\n----------------------------------------\n\nTITLE: Enabling Ansible Support in Devenv Configuration\nDESCRIPTION: This setting allows you to enable or disable tools for Ansible development in your Devenv environment. When set to true, it activates Ansible-related features and tools.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/supported-languages/ansible.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nlanguages.ansible.enable: false\n```\n\n----------------------------------------\n\nTITLE: Basic JavaScript Enable Configuration\nDESCRIPTION: Default configuration for enabling JavaScript development tools, using boolean flag.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/supported-languages/javascript.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nfalse\n```\n\n----------------------------------------\n\nTITLE: Enabling Lua Development Tools in Devenv\nDESCRIPTION: Configuration option to enable or disable tools for Lua development. When set to true, it activates Lua-specific development tools in the Devenv environment.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/supported-languages/lua.md#2025-04-21_snippet_0\n\nLANGUAGE: lua\nCODE:\n```\nlanguages.lua.enable = true\n```\n\n----------------------------------------\n\nTITLE: Setting Additional Arguments for Mailpit in Nix\nDESCRIPTION: Configuration option to specify additional arguments passed to mailpit. It is a list of strings concatenated with \"\\n\".\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/supported-services/mailpit.md#2025-04-21_snippet_2\n\nLANGUAGE: nix\nCODE:\n```\nservices.mailpit.additionalArgs = [ ]\n```\n\n----------------------------------------\n\nTITLE: CockroachDB Package Configuration\nDESCRIPTION: Specifies which CockroachDB package to use for installation. Default package is cockroachdb-bin.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/supported-services/cockroachdb.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\npkgs.cockroachdb-bin\n```\n\n----------------------------------------\n\nTITLE: Default Prometheus Global Configuration in Nix\nDESCRIPTION: Default global configuration settings for Prometheus including evaluation interval, scrape interval, and scrape timeout values.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/supported-services/prometheus.md#2025-04-21_snippet_0\n\nLANGUAGE: nix\nCODE:\n```\n{\n  evaluation_interval = \"1m\";\n  scrape_interval = \"1m\";\n  scrape_timeout = \"10s\";\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Redis Port in Nix Configuration\nDESCRIPTION: This option sets the TCP port for Redis to accept connections. It's a 16-bit unsigned integer between 0 and 65535, defaulting to 6379. If set to 0, Redis will use a unix socket instead.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/supported-services/redis.md#2025-04-21_snippet_4\n\nLANGUAGE: nix\nCODE:\n```\nservices.redis.port = 6379;\n```\n\n----------------------------------------\n\nTITLE: R Language Enable Configuration\nDESCRIPTION: Boolean configuration option to enable or disable R development tools.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/supported-languages/r.md#2025-04-21_snippet_0\n\nLANGUAGE: nix\nCODE:\n```\nfalse\n```\n\n----------------------------------------\n\nTITLE: Setting Dart Language Boolean Flag\nDESCRIPTION: Configuration option to enable or disable Dart development tools in the environment.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/supported-languages/dart.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nfalse\n```\n\n----------------------------------------\n\nTITLE: Configuring Crystal Language Support in devenv\nDESCRIPTION: This configuration option enables tools for Crystal language development in the devenv project. It is a boolean flag that defaults to false and can be set to true to activate Crystal support.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/supported-languages/crystal.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## languages\\.crystal\\.enable\n\nWhether to enable Enable tools for Crystal development…\n\n\n\n*Type:*\nboolean\n\n\n\n*Default:*\n` false `\n\n\n\n*Example:*\n` true `\n```\n\n----------------------------------------\n\nTITLE: Enable ClickHouse Server Configuration\nDESCRIPTION: Boolean flag to enable or disable the ClickHouse server service. Default value is false.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/supported-services/clickhouse.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nservices.clickhouse.enable: false\n```\n\n----------------------------------------\n\nTITLE: Setting Meilisearch Log Level\nDESCRIPTION: Controls the verbosity of Meilisearch logs from ERROR to DEBUG. Default is INFO level logging.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/supported-services/meilisearch.md#2025-04-21_snippet_5\n\nLANGUAGE: nix\nCODE:\n```\n\"INFO\"\n```\n\n----------------------------------------\n\nTITLE: Building Custom Output Options with devenv\nDESCRIPTION: This shell session demonstrates building all outputs, including custom output options defined in the module system, using the 'devenv build' command.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/blog/posts/devenv-v1.1-outputs.md#2025-04-21_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ devenv build\n/nix/store/mzq5bpi49h26cy2mfj5a2r0q69fh3a9k-myapp-1.0\n/nix/store/mzq5bpi49h26cy2mfj5a2r0q69fh3a9k-git-2.44.0\n```\n\n----------------------------------------\n\nTITLE: Configuring Meilisearch Boolean Enable Flag\nDESCRIPTION: Configuration option to enable or disable the Meilisearch service. Default value is false.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/supported-services/meilisearch.md#2025-04-21_snippet_0\n\nLANGUAGE: nix\nCODE:\n```\nfalse\n```\n\n----------------------------------------\n\nTITLE: Enabling OCaml Development Tools in Devenv (Nix)\nDESCRIPTION: This option controls whether to enable tools for OCaml development in the Devenv environment. It is a boolean value that defaults to false.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/supported-languages/ocaml.md#2025-04-21_snippet_0\n\nLANGUAGE: nix\nCODE:\n```\nlanguages.ocaml.enable = false\n```\n\n----------------------------------------\n\nTITLE: Enabling Nim Language Support\nDESCRIPTION: Configuration option to enable tools for Nim development. This boolean setting determines whether Nim-specific development tools should be activated in the environment.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/supported-languages/nim.md#2025-04-21_snippet_0\n\nLANGUAGE: nim\nCODE:\n```\nlanguages.nim.enable = false\n```\n\n----------------------------------------\n\nTITLE: Setting Blackfire Server Token in Nix Configuration\nDESCRIPTION: Configuration option to set the server token for authenticating with Blackfire. This can be found in the user's Blackfire credentials settings.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/supported-services/blackfire.md#2025-04-21_snippet_6\n\nLANGUAGE: nix\nCODE:\n```\nservices.blackfire.server-token = \"\";\n```\n\n----------------------------------------\n\nTITLE: Specifying V Package in Devenv\nDESCRIPTION: This setting allows you to specify which V package to use in your Devenv environment. It accepts a package type and defaults to pkgs.vlang.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/supported-languages/v.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## languages\\.v\\.package\n\n\n\nThe V package to use\\.\n\n\n\n*Type:*\npackage\n\n\n\n*Default:*\n` pkgs.vlang `\n```\n\n----------------------------------------\n\nTITLE: Enabling Typst Development Tools in Nix\nDESCRIPTION: Configuration option to enable tools for Typst development. When set to true, it activates Typst-related development features in the environment.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/supported-languages/typst.md#2025-04-21_snippet_0\n\nLANGUAGE: nix\nCODE:\n```\nlanguages.typst.enable = false\n```\n\n----------------------------------------\n\nTITLE: Setting Elm Development Tools Configuration\nDESCRIPTION: Boolean configuration option that enables or disables Elm development tools. When set to true, activates Elm-specific development tooling and support.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/supported-languages/elm.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nfalse\n```\n\nLANGUAGE: plaintext\nCODE:\n```\ntrue\n```\n\n----------------------------------------\n\nTITLE: Standard ML Enable Configuration\nDESCRIPTION: Boolean configuration option to enable or disable Standard ML development tools. Defaults to false.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/supported-languages/standardml.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nlanguages.standardml.enable\n```\n\n----------------------------------------\n\nTITLE: Setting Meilisearch Package Source\nDESCRIPTION: Specifies which Meilisearch package to use for installation. Default value references the standard package.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/supported-services/meilisearch.md#2025-04-21_snippet_1\n\nLANGUAGE: nix\nCODE:\n```\n\"pkgs.meilisearch\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Meilisearch Environment\nDESCRIPTION: Sets the running environment for Meilisearch between development and production modes. Default is development mode.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/supported-services/meilisearch.md#2025-04-21_snippet_2\n\nLANGUAGE: nix\nCODE:\n```\n\"development\"\n```\n\n----------------------------------------\n\nTITLE: Enabling Swift Language Support in Devenv\nDESCRIPTION: Configuration option to enable tools for Swift development in Devenv. When set to true, it activates Swift-related development tools.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/supported-languages/swift.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## languages\\.swift\\.enable\n\nWhether to enable tools for Swift development\\.\n\n\n\n*Type:*\nboolean\n\n\n\n*Default:*\n` false `\n\n\n\n*Example:*\n` true `\n```\n\n----------------------------------------\n\nTITLE: Configuring Typesense API Key in Nix\nDESCRIPTION: Option to set the API Key for Typesense. This is crucial for authentication and secure access to the Typesense service.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/supported-services/typesense.md#2025-04-21_snippet_3\n\nLANGUAGE: nix\nCODE:\n```\nservices.typesense.apiKey = \"example\"\n```\n\n----------------------------------------\n\nTITLE: Setting Typesense Search-Only Key in Nix\nDESCRIPTION: Configuration option for a search-only API key. This can be set to null or a string, providing a key with limited permissions for search operations only.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/supported-services/typesense.md#2025-04-21_snippet_6\n\nLANGUAGE: nix\nCODE:\n```\nservices.typesense.searchOnlyKey = null\n```\n\n----------------------------------------\n\nTITLE: Setting Odin Debugger in Devenv\nDESCRIPTION: Configuration option to specify a debugger package for use with Odin in Devenv. By default, it uses GDB if supported on the current system.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/supported-languages/odin.md#2025-04-21_snippet_2\n\nLANGUAGE: nix\nCODE:\n```\nlanguages.odin.debugger = pkgs.gdb\n```\n\n----------------------------------------\n\nTITLE: Setting Adminer Package\nDESCRIPTION: Package specification for Adminer installation\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/supported-services/adminer.md#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\npkgs.adminer\n```\n\n----------------------------------------\n\nTITLE: Enabling Erlang Development Tools Configuration\nDESCRIPTION: Boolean configuration option to enable or disable Erlang development tools. Default value is false.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/supported-languages/erlang.md#2025-04-21_snippet_0\n\nLANGUAGE: nix\nCODE:\n```\nfalse\n```\n\n----------------------------------------\n\nTITLE: Setting Adminer Enable Flag\nDESCRIPTION: Boolean configuration to enable or disable the Adminer process\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/supported-services/adminer.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nfalse\n```\n\n----------------------------------------\n\nTITLE: Configuring ElasticMQ Settings in Devenv\nDESCRIPTION: Option to provide custom configuration for the ElasticMQ server. It accepts a string of configuration settings concatenated with \"\\n\".\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/supported-services/elasticmq.md#2025-04-21_snippet_2\n\nLANGUAGE: nix\nCODE:\n```\nservices.elasticmq.settings = \"\"\n```\n\n----------------------------------------\n\nTITLE: Setting PHP Timezone in FPM Configuration\nDESCRIPTION: Example of configuring PHP options for FPM pools. This snippet shows how to set the date.timezone option in the PHP configuration file used by FPM.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/supported-languages/php.md#2025-04-21_snippet_1\n\nLANGUAGE: nix\nCODE:\n```\n''\n  date.timezone = \"CET\"\n''\n```\n\n----------------------------------------\n\nTITLE: Configuring Meilisearch Analytics\nDESCRIPTION: Controls whether anonymous analytics are enabled. Default is true to disable analytics collection.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/supported-services/meilisearch.md#2025-04-21_snippet_7\n\nLANGUAGE: nix\nCODE:\n```\ntrue\n```\n\n----------------------------------------\n\nTITLE: Configuring Shell Development Tools in Project Settings\nDESCRIPTION: This configuration option enables or disables tools for shell development in the project. When set to true, it activates shell-specific development features. The default value is false, meaning shell development tools are not enabled by default.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/supported-languages/shell.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## languages\\.shell\\.enable\n\nWhether to enable tools for shell development\\.\n\n\n\n*Type:*\nboolean\n\n\n\n*Default:*\n` false `\n\n\n\n*Example:*\n` true `\n```\n\n----------------------------------------\n\nTITLE: Enabling Cue Language Support in Devenv\nDESCRIPTION: This configuration option enables tools for Cue development in a Devenv project. When set to true, it activates Cue-related tools and features.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/supported-languages/cue.md#2025-04-21_snippet_0\n\nLANGUAGE: cue\nCODE:\n```\nlanguages.cue.enable = false\n```\n\n----------------------------------------\n\nTITLE: Configuring Typesense Port in Nix\nDESCRIPTION: Option to set the HTTP port for Typesense to accept connections. It must be a 16-bit unsigned integer between 0 and 65535.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/supported-services/typesense.md#2025-04-21_snippet_5\n\nLANGUAGE: nix\nCODE:\n```\nservices.typesense.port = 8108\n```\n\n----------------------------------------\n\nTITLE: Specifying Lean4 Package\nDESCRIPTION: Configuration option to specify the Lean4 package to use in the development environment. The default package is pkgs.lean4.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/supported-languages/lean4.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## languages\\.lean4\\.package\n\nThe lean4 package to use\\.\n\n*Type:*\npackage\n\n*Default:*\n` pkgs.lean4 `\n```\n\n----------------------------------------\n\nTITLE: Specifying process implementation in devenv.nix\nDESCRIPTION: Configuration option for specifying the process implementation in devenv.nix, specifically showing how to set up hivemind as the implementation.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/blog/posts/devenv-v0.5.md#2025-04-21_snippet_1\n\nLANGUAGE: nix\nCODE:\n```\nprocess.implementation\n```\n\n----------------------------------------\n\nTITLE: Enabling Terraform in devenv (Markdown)\nDESCRIPTION: Configuration option to enable Terraform development tools. It is a boolean setting defaulting to false.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/supported-languages/terraform.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## languages.terraform.enable\n\nWhether to enable tools for Terraform development.\n\n*Type:*\nboolean\n\n*Default:*\n` false `\n\n*Example:*\n` true `\n```\n\n----------------------------------------\n\nTITLE: Enabling Pascal Development Tools in Devenv\nDESCRIPTION: Configuration option to enable tools for Pascal development. This boolean setting determines whether Pascal-specific development tools should be included in the environment.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/supported-languages/pascal.md#2025-04-21_snippet_0\n\nLANGUAGE: nix\nCODE:\n```\nlanguages.pascal.enable = false\n```\n\n----------------------------------------\n\nTITLE: Configuring Tailscale Funnel Target\nDESCRIPTION: String configuration for specifying the target host or host:port combination for Tailscale funnel service. Defines where the funnel traffic should be directed.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/supported-services/tailscale.md#2025-04-21_snippet_1\n\nLANGUAGE: nix\nCODE:\n```\ntrue\n```\n\n----------------------------------------\n\nTITLE: Specifying Memcached Package in Nix Configuration\nDESCRIPTION: Option to specify which package of Memcached to use. Default is pkgs.memcached.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/supported-services/memcached.md#2025-04-21_snippet_1\n\nLANGUAGE: nix\nCODE:\n```\nservices.memcached.package = pkgs.memcached\n```\n\n----------------------------------------\n\nTITLE: Enabling V Language Support in Devenv\nDESCRIPTION: This setting allows you to enable or disable tools for V language development in your Devenv environment. It is a boolean value that defaults to false.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/supported-languages/v.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## languages\\.v\\.enable\n\nWhether to enable tools for V development\\.\n\n\n\n*Type:*\nboolean\n\n\n\n*Default:*\n` false `\n\n\n\n*Example:*\n` true `\n```\n\n----------------------------------------\n\nTITLE: Configuring Extra Inputs in devenv.yaml\nDESCRIPTION: This snippet shows how to add extra inputs to your devenv.yaml file. It demonstrates adding both the default nixpkgs and an unstable version of nixpkgs.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/overlays.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ninputs:\n  nixpkgs:\n    url: github:cachix/devenv-nixpkgs/rolling\n  nixpkgs-unstable:\n    url: github:nixos/nixpkgs/nixpkgs-unstable\n```\n\n----------------------------------------\n\nTITLE: Specifying Typesense Package in Nix\nDESCRIPTION: Option to define which package of Typesense to use. By default, it uses the Typesense package from the pkgs set.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/supported-services/typesense.md#2025-04-21_snippet_1\n\nLANGUAGE: nix\nCODE:\n```\nservices.typesense.package = pkgs.typesense\n```\n\n----------------------------------------\n\nTITLE: Configuring Fortran Package\nDESCRIPTION: Package configuration option to specify which Fortran compiler package to use. Default value is pkgs.gfortran.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/supported-languages/fortran.md#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\npkgs.gfortran\n```\n\n----------------------------------------\n\nTITLE: Running tests with devenv test\nDESCRIPTION: Example output from running tests in a devenv environment using the devenv test command. Shows task execution results and timing information.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/guides/using-with-flakes.md#2025-04-21_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ devenv test\nRunning tasks     devenv:enterShell\nSucceeded         devenv:git-hooks:install 10ms\nSucceeded         devenv:enterShell         4ms\n2 Succeeded                                 14.75ms\n• Testing ...\nRunning tasks     devenv:enterTest\nSucceeded         devenv:git-hooks:run     474ms\nNot implemented   devenv:enterTest\n1 Skipped, 1 Succeeded                      474.62ms\n```\n\n----------------------------------------\n\nTITLE: Setting Default MIME Types for Nginx in Devenv\nDESCRIPTION: Configuration option to set the default MIME types for Nginx. It uses the MIME types from the mailcap package by default.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/supported-services/nginx.md#2025-04-21_snippet_2\n\nLANGUAGE: nix\nCODE:\n```\nservices.nginx.defaultMimeTypes = \"${pkgs.mailcap}/etc/nginx/mime.types\";\n```\n\n----------------------------------------\n\nTITLE: Running Tests in devenv Shell\nDESCRIPTION: Example of using 'devenv test' command to run tests defined in the devenv configuration.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/guides/using-with-flake-parts.md#2025-04-21_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ devenv test\nRunning tasks     devenv:enterShell\nSucceeded         devenv:git-hooks:install 10ms\nSucceeded         devenv:enterShell         4ms\n2 Succeeded                                 14.75ms\n• Testing ...\nRunning tasks     devenv:enterTest\nSucceeded         devenv:git-hooks:run     474ms\nNot implemented   devenv:enterTest\n1 Skipped, 1 Succeeded                      474.62ms\n```\n\n----------------------------------------\n\nTITLE: Solidity Enable Configuration\nDESCRIPTION: Boolean flag to enable Solidity development tools\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/supported-languages/solidity.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nfalse\n```\n\n----------------------------------------\n\nTITLE: Running a Production Artifact Container in Shell\nDESCRIPTION: Demonstrates running a container that contains only built artifacts, which is useful for production deployments with minimal container size.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/containers.md#2025-04-21_snippet_10\n\nLANGUAGE: shell-session\nCODE:\n```\n$ devenv container run prod\n...\n```\n\n----------------------------------------\n\nTITLE: Adding .direnv to .gitignore\nDESCRIPTION: Command to manually add the .direnv directory to your project's .gitignore file to prevent it from being tracked in version control.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/automatic-shell-activation.md#2025-04-21_snippet_4\n\nLANGUAGE: shell-session\nCODE:\n```\necho \".direnv\" >> .gitignore\n```\n\n----------------------------------------\n\nTITLE: Configuring Jsonnet Development Tools Boolean Flag\nDESCRIPTION: Configuration setting that enables or disables Jsonnet development tools. When set to true, it activates Jsonnet-related development tools and features in the environment.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/supported-languages/jsonnet.md#2025-04-21_snippet_0\n\nLANGUAGE: jsonnet\nCODE:\n```\nfalse\n```\n\n----------------------------------------\n\nTITLE: Setting Typesense Host in Nix\nDESCRIPTION: Configuration to specify the HTTP host for Typesense to accept connections. By default, it's set to the localhost address.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/supported-services/typesense.md#2025-04-21_snippet_4\n\nLANGUAGE: nix\nCODE:\n```\nservices.typesense.host = \"127.0.0.1\"\n```\n\n----------------------------------------\n\nTITLE: Disabling Cachix Integration in Devenv with Nix\nDESCRIPTION: Configuration to completely disable the Cachix integration in Devenv. External cache configurations will still be used by Nix.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/binary-caching.md#2025-04-21_snippet_3\n\nLANGUAGE: nix\nCODE:\n```\ncachix.enable = false;\n```\n\n----------------------------------------\n\nTITLE: Specifying Nginx Package in Devenv\nDESCRIPTION: Configuration option to specify the Nginx package to use. It defaults to pkgs.nginx.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/supported-services/nginx.md#2025-04-21_snippet_1\n\nLANGUAGE: nix\nCODE:\n```\nservices.nginx.package = pkgs.nginx;\n```\n\n----------------------------------------\n\nTITLE: direnv shell output when .envrc file needs approval\nDESCRIPTION: Example shell output when direnv detects an unapproved .envrc file, requiring the user to run 'direnv allow' as a security measure.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/automatic-shell-activation.md#2025-04-21_snippet_2\n\nLANGUAGE: text\nCODE:\n```\ndirenv: error ~/myproject/.envrc is blocked. Run `direnv allow` to approve its content\n```\n\n----------------------------------------\n\nTITLE: Enabling Blackfire Service in Nix Configuration\nDESCRIPTION: Configuration option to enable the Blackfire profiler agent. When enabled, it automatically installs the Blackfire PHP extension.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/supported-services/blackfire.md#2025-04-21_snippet_0\n\nLANGUAGE: nix\nCODE:\n```\nservices.blackfire.enable = true;\n```\n\n----------------------------------------\n\nTITLE: Setting Vault Example Enable Value\nDESCRIPTION: Example value for enabling Vault service\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/supported-services/vault.md#2025-04-21_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\ntrue\n```\n\n----------------------------------------\n\nTITLE: Configuring GNU Awk Development Tools in Project Settings\nDESCRIPTION: This snippet shows the configuration option for enabling GNU Awk development tools. It is a boolean setting that defaults to false and can be set to true to enable the tools.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/supported-languages/gawk.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## languages\\.gawk\\.enable\n\nWhether to enable tools for GNU Awk development\\.\n\n\n\n*Type:*\nboolean\n\n\n\n*Default:*\n` false `\n\n\n\n*Example:*\n` true `\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Nixpkgs Inputs in YAML\nDESCRIPTION: This YAML configuration specifies multiple Nixpkgs inputs for devenv, allowing the use of packages from different Nixpkgs versions. It defines the main nixpkgs input and an additional nixpkgs-unstable input.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/blog/posts/devenv-v1.5-overlays-and-performance.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ninputs:\n  nixpkgs:\n    url: github:cachix/devenv-nixpkgs/rolling\n  nixpkgs-unstable:\n    url: github:nixos/nixpkgs/nixpkgs-unstable\n```\n\n----------------------------------------\n\nTITLE: Enabling Typesense Service in Nix\nDESCRIPTION: Configuration option to enable the Typesense process. When set to true, the Typesense service will be activated.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/supported-services/typesense.md#2025-04-21_snippet_0\n\nLANGUAGE: nix\nCODE:\n```\nservices.typesense.enable = false\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenSearch Logging\nDESCRIPTION: Default logging configuration for OpenSearch specifying logger settings, appender configuration, and layout patterns.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/supported-services/opensearch.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nlogger.action.name = org.opensearch.action\nlogger.action.level = info\nappender.console.type = Console\nappender.console.name = console\nappender.console.layout.type = PatternLayout\nappender.console.layout.pattern = [%d{ISO8601}][%-5p][%-25c{1.}] %marker%m%n\nrootLogger.level = info\nrootLogger.appenderRef.console.ref = console\n```\n\n----------------------------------------\n\nTITLE: Configuring Adminer Listen Address\nDESCRIPTION: Network address and port configuration for Adminer service\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/supported-services/adminer.md#2025-04-21_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n127.0.0.1:8080\n```\n\n----------------------------------------\n\nTITLE: Configuring Nginx Events in Devenv\nDESCRIPTION: Configuration option for the Nginx events section. It's a string that defaults to an empty string.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/supported-services/nginx.md#2025-04-21_snippet_3\n\nLANGUAGE: nix\nCODE:\n```\nservices.nginx.eventsConfig = \"\";\n```\n\n----------------------------------------\n\nTITLE: Allocating IPv4 Address\nDESCRIPTION: Assigns a dedicated IPv4 address to the Fly.io application\nSOURCE: https://github.com/cachix/devenv/blob/main/examples/fly.io/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nflyctl ips allocate-v4\n```\n\n----------------------------------------\n\nTITLE: Enabling Blackfire APM in Nix Configuration\nDESCRIPTION: Configuration option to enable Application Performance Monitoring (APM) for Blackfire. This feature requires a special subscription.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/supported-services/blackfire.md#2025-04-21_snippet_1\n\nLANGUAGE: nix\nCODE:\n```\nservices.blackfire.enableApm = true;\n```\n\n----------------------------------------\n\nTITLE: Running Gitversion Script in Devenv Shell\nDESCRIPTION: Demonstrates the execution of the gitversion script, which is available in the PATH within the devenv shell. The script outputs a greeting and the installed Git version.\nSOURCE: https://github.com/cachix/devenv/blob/main/examples/scripts/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ gitversion\nhello git git version 2.36.2\n```\n\n----------------------------------------\n\nTITLE: Enabling Tideways Service Boolean Configuration\nDESCRIPTION: Default configuration for enabling the Tideways profiler daemon service. When enabled, it automatically installs Tideways PHP extension.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/supported-services/tideways.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nfalse\n```\n\n----------------------------------------\n\nTITLE: Running a Single Process Container in Shell\nDESCRIPTION: Shows how to run a container with a single process, which in this case would be a Python HTTP server based on the configuration.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/containers.md#2025-04-21_snippet_9\n\nLANGUAGE: shell-session\nCODE:\n```\n$ devenv container run serve\n```\n\n----------------------------------------\n\nTITLE: Documentation Placeholder with Autogeneration Tag in Markdown\nDESCRIPTION: A simple template with a Markdown comment instruction for documentation placement and an autogeneration tag that will be replaced during build.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/individual-docs/languages/dart.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[comment]: # (Please add your documentation on top of this line)\n\n@AUTOGEN_OPTIONS@\n```\n\n----------------------------------------\n\nTITLE: Setting Additional Arguments for Typesense in Nix\nDESCRIPTION: Configuration for passing additional arguments to the Typesense service. It accepts a list of strings concatenated with \"\\n\".\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/supported-services/typesense.md#2025-04-21_snippet_2\n\nLANGUAGE: nix\nCODE:\n```\nservices.typesense.additionalArgs = [ ]\n```\n\n----------------------------------------\n\nTITLE: Configuring Mprocs Settings\nDESCRIPTION: Defines the default empty YAML configuration for top-level mprocs.yaml options. References the official mprocs configuration documentation for available settings.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/supported-process-managers/mprocs.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n{ }\n```\n\n----------------------------------------\n\nTITLE: Configuring UI Listen Address for Mailpit in Nix\nDESCRIPTION: Configuration option to set the listen address for the UI. It defaults to \"127.0.0.1:8025\".\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/supported-services/mailpit.md#2025-04-21_snippet_4\n\nLANGUAGE: nix\nCODE:\n```\nservices.mailpit.uiListenAddress = \"127.0.0.1:8025\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Overmind Package in Nix\nDESCRIPTION: Defines the Overmind package to be used in the project. The default package is set to 'pkgs.overmind', but can be customized as needed.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/supported-process-managers/overmind.md#2025-04-21_snippet_0\n\nLANGUAGE: nix\nCODE:\n```\npkgs.overmind\n```\n\n----------------------------------------\n\nTITLE: Deploying Application\nDESCRIPTION: Deploys the configured application to Fly.io platform\nSOURCE: https://github.com/cachix/devenv/blob/main/examples/fly.io/README.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nflyctl deploy\n```\n\n----------------------------------------\n\nTITLE: Specifying Blackfire Package in Nix Configuration\nDESCRIPTION: Configuration option to specify which package of Blackfire to use. The default is set to the 'blackfire' package from the 'pkgs' set.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/supported-services/blackfire.md#2025-04-21_snippet_2\n\nLANGUAGE: nix\nCODE:\n```\nservices.blackfire.package = pkgs.blackfire;\n```\n\n----------------------------------------\n\nTITLE: Shell Session Example of Pre-commit Hook Installation\nDESCRIPTION: Demonstrates the output when entering a devenv shell with pre-commit hooks configured.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/git-hooks.md#2025-04-21_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ devenv shell\nBuilding shell ...\nEntering shell ...\n\npre-commit installed at .git/hooks/pre-commit\n```\n\n----------------------------------------\n\nTITLE: Enabling Nginx Service in Devenv\nDESCRIPTION: Configuration option to enable or disable the Nginx service. It's a boolean value defaulting to false.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/supported-services/nginx.md#2025-04-21_snippet_0\n\nLANGUAGE: nix\nCODE:\n```\nservices.nginx.enable = false;\n```\n\n----------------------------------------\n\nTITLE: Configuring Autogenerated Options for Cachix Devenv\nDESCRIPTION: This snippet represents a placeholder for autogenerated configuration options in the Cachix Devenv project. The actual content would be replaced during the build or deployment process.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/individual-docs/languages/lean4.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n@AUTOGEN_OPTIONS@\n```\n\n----------------------------------------\n\nTITLE: Specifying ElasticMQ Package in Devenv\nDESCRIPTION: Option to specify which package of elasticmq-server-bin to use. By default, it uses the package from pkgs.elasticmq-server-bin.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/supported-services/elasticmq.md#2025-04-21_snippet_1\n\nLANGUAGE: nix\nCODE:\n```\nservices.elasticmq.package = pkgs.elasticmq-server-bin\n```\n\n----------------------------------------\n\nTITLE: Setting Tailscale Funnel Enable Flag\nDESCRIPTION: Boolean configuration option to enable or disable the Tailscale funnel service. Default value is false.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/supported-services/tailscale.md#2025-04-21_snippet_0\n\nLANGUAGE: nix\nCODE:\n```\nfalse\n```\n\n----------------------------------------\n\nTITLE: Specifying Mailpit Package in Nix\nDESCRIPTION: Configuration option to specify which package of Mailpit to use. It defaults to pkgs.mailpit.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/supported-services/mailpit.md#2025-04-21_snippet_1\n\nLANGUAGE: nix\nCODE:\n```\nservices.mailpit.package = pkgs.mailpit\n```\n\n----------------------------------------\n\nTITLE: Default Honcho Package Configuration\nDESCRIPTION: Specifies the default configuration for the Honcho process manager package, using the pkgs.honcho package as the default implementation.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/supported-process-managers/honcho.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\npkgs.honcho\n```\n\n----------------------------------------\n\nTITLE: DevEnv Autogenerated Options Placeholder\nDESCRIPTION: Placeholder marker that will be replaced with automatically generated configuration options during build process.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/individual-docs/services/vault.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n@AUTOGEN_OPTIONS@\n```\n\n----------------------------------------\n\nTITLE: Deploying Devenv Job in Kubernetes\nDESCRIPTION: Kubernetes Job manifest for running devenv tasks using the devenv container image, with retry logic and specific task execution.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/integrations/devenv-container.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: batch/v1\nkind: Job\nmetadata:\n  name: devenv-job\nspec:\n  template:\n    spec:\n      containers:\n        - name: devenv-job\n          image: ghcr.io/cachix/devenv/devenv:latest\n          command: [\"devenv\", \"tasks\", \"run\", \"my-app:hello-world\"]\n      restartPolicy: Never\n  backoffLimit: 4\n```\n\n----------------------------------------\n\nTITLE: Setting Up Home Page Template and Title in Markdown\nDESCRIPTION: YAML front matter configuration for the devenv project home page, specifying the template to use and defining the page title that emphasizes the core features of the product.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/index.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntemplate: home.html\ntitle: Fast, Declarative, Reproducible, and Composable Developer Environments\n---\n```\n\n----------------------------------------\n\nTITLE: Configuring .NET Development Tools\nDESCRIPTION: Boolean configuration option to enable or disable .NET development tools in the environment. Default value is false.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/supported-languages/dotnet.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nfalse\n```\n\n----------------------------------------\n\nTITLE: Configuring MinIO Anonymous Bucket Access\nDESCRIPTION: Bash code executed after MinIO starts to set anonymous download access for a bucket using the MinIO client (mc)\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/supported-services/minio.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n''\n  mc anonymous set download local/mybucket\n''\n```\n\n----------------------------------------\n\nTITLE: Template Variable for Autogeneration Options\nDESCRIPTION: A template variable that will likely be replaced during build or documentation generation with specific autogeneration options.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/individual-docs/languages/typst.md#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n@AUTOGEN_OPTIONS@\n```\n\n----------------------------------------\n\nTITLE: Creating New Fly.io Application\nDESCRIPTION: Creates a new application instance on Fly.io with a specified name\nSOURCE: https://github.com/cachix/devenv/blob/main/examples/fly.io/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nflyctl apps create simple-python-app\n```\n\n----------------------------------------\n\nTITLE: Enabling Racket Language Support\nDESCRIPTION: Configuration option to enable tools for Racket development. It is a boolean value, defaulting to false.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/supported-languages/racket.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## languages\\.racket\\.enable\n\nWhether to enable tools for Racket development\\.\n\n\n\n*Type:*\nboolean\n\n\n\n*Default:*\n` false `\n\n\n\n*Example:*\n` true `\n```\n\n----------------------------------------\n\nTITLE: Enabling Perl Development Tools in Devenv\nDESCRIPTION: Configuration option to enable Perl development tools. When set to true, it activates Perl-specific tools and support in the Devenv environment.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/supported-languages/perl.md#2025-04-21_snippet_0\n\nLANGUAGE: perl\nCODE:\n```\nfalse\n```\n\n----------------------------------------\n\nTITLE: Running devenv Shell with Automatic Task Execution\nDESCRIPTION: Demonstrates the output when entering the devenv shell with the previously defined 'bash:hello' task.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/tasks.md#2025-04-21_snippet_3\n\nLANGUAGE: shell-session\nCODE:\n```\n$ devenv shell\n...\nRunning tasks     devenv:enterShell\nSucceeded         devenv:pre-commit:install 25ms\nSucceeded         bash:hello                 9ms\nSucceeded         devenv:enterShell         13ms\n3 Succeeded                                 28.14ms\n```\n\n----------------------------------------\n\nTITLE: Adding Documentation Comment in Markdown\nDESCRIPTION: This snippet provides a comment in Markdown format, instructing users to add their documentation above the specified line.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/individual-docs/services/redis.md#2025-04-21_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n[comment]: # (Please add your documentation on top of this line)\n```\n\n----------------------------------------\n\nTITLE: Copying Container to Fly.io Registry\nDESCRIPTION: Copies the container processes to Fly.io registry using devenv\nSOURCE: https://github.com/cachix/devenv/blob/main/examples/fly.io/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndevenv container processes --copy\n```\n\n----------------------------------------\n\nTITLE: Template Placeholder in Markdown for Documentation Generation\nDESCRIPTION: A markdown comment instructing contributors to add documentation above this line, followed by a placeholder variable that will be replaced during automatic generation of documentation.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/individual-docs/services/cassandra.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[comment]: # (Please add your documentation on top of this line)\n\n@AUTOGEN_OPTIONS@\n```\n\n----------------------------------------\n\nTITLE: Configuring Hivemind Package in Devenv\nDESCRIPTION: Specifies the default package configuration for the hivemind process manager. This setting determines which version/package of hivemind will be used in the development environment.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/supported-process-managers/hivemind.md#2025-04-21_snippet_0\n\nLANGUAGE: nix\nCODE:\n```\npkgs.hivemind\n```\n\n----------------------------------------\n\nTITLE: Defining Autogenerated Options for Devenv in Nix\nDESCRIPTION: This snippet defines a placeholder for autogenerated options in the Devenv project configuration. It uses a specific syntax recognized by the build system to inject dynamically generated content.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/individual-docs/process-managers/hivemind.md#2025-04-21_snippet_0\n\nLANGUAGE: Nix\nCODE:\n```\n@AUTOGEN_OPTIONS@\n```\n\n----------------------------------------\n\nTITLE: Multi-Language Script Execution\nDESCRIPTION: Shows the shell output when executing the multi-language script configuration with custom welcome message.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/scripts.md#2025-04-21_snippet_5\n\nLANGUAGE: shell-session\nCODE:\n```\n$ devenv shell\nBuilding shell ...\nEntering shell ...\n\n🦾 Helper scripts you can run to make your development richer:\n🦾\n🦾 python-hello     Hello world in Python\n🦾 nushell-greet    Greet in Nu Shell\n\n(devenv) $\n```\n\n----------------------------------------\n\nTITLE: Configuring SMTP Listen Address for Mailpit in Nix\nDESCRIPTION: Configuration option to set the listen address for SMTP. It defaults to \"127.0.0.1:1025\".\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/supported-services/mailpit.md#2025-04-21_snippet_3\n\nLANGUAGE: nix\nCODE:\n```\nservices.mailpit.smtpListenAddress = \"127.0.0.1:1025\"\n```\n\n----------------------------------------\n\nTITLE: Enabling Lazarus IDE for FreePascal in Devenv\nDESCRIPTION: Configuration option to enable the Lazarus graphical IDE for FreePascal development. This boolean setting controls the inclusion of Lazarus in the development environment.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/supported-languages/pascal.md#2025-04-21_snippet_1\n\nLANGUAGE: nix\nCODE:\n```\nlanguages.pascal.lazarus.enable = false\n```\n\n----------------------------------------\n\nTITLE: Shell Session Example\nDESCRIPTION: Shows the execution of the silly-example script in a devenv shell environment with sample output.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/scripts.md#2025-04-21_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ devenv shell\nBuilding shell ...\nEntering shell ...\n\n(devenv) $ silly-example foo=1\n{\n  \"foo\": \"1\"\n}\n```\n\n----------------------------------------\n\nTITLE: Template Variable Placeholder in Markdown\nDESCRIPTION: A template variable placeholder that appears to be used for auto-generating documentation options.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/individual-docs/services/wiremock.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n@AUTOGEN_OPTIONS@\n```\n\n----------------------------------------\n\nTITLE: Configuring sqld Enable Flag\nDESCRIPTION: Boolean configuration option to enable or disable the sqld service. Defaults to false.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/supported-services/sqld.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nfalse\n```\n\n----------------------------------------\n\nTITLE: Autogenerated options placeholder in Markdown\nDESCRIPTION: A placeholder marker (@AUTOGEN_OPTIONS@) used to indicate where autogenerated content will be inserted, along with a markdown comment specifying where documentation should be added.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/individual-docs/services/tideways.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[comment]: # (Please add your documentation on top of this line)\n\n@AUTOGEN_OPTIONS@\n```\n\n----------------------------------------\n\nTITLE: Referencing devenv search command in Nix\nDESCRIPTION: Example of the devenv search command syntax that shows results from available options in devenv.nix configuration files.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/blog/posts/devenv-v0.5.md#2025-04-21_snippet_0\n\nLANGUAGE: nix\nCODE:\n```\ndevenv search\n```\n\n----------------------------------------\n\nTITLE: Launching devenv Development Shell\nDESCRIPTION: Command to start a development shell environment configured by devenv. This shell will have all the necessary tools and dependencies available.\nSOURCE: https://github.com/cachix/devenv/blob/main/examples/python-django/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndevenv shell\n```\n\n----------------------------------------\n\nTITLE: Documentation Placeholder with Autogeneration Marker in Markdown\nDESCRIPTION: Contains a comment directive for documentation placement and a template variable for autogeneration options that would be replaced during build/processing.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/individual-docs/services/couchdb.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[comment]: # (Please add your documentation on top of this line)\n\n@AUTOGEN_OPTIONS@\n```\n\n----------------------------------------\n\nTITLE: Documentation Template Markers\nDESCRIPTION: Basic markdown template structure with a comment placeholder for documentation and an autogen options placeholder.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/individual-docs/services/httpbin.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[comment]: # (Please add your documentation on top of this line)\n\n@AUTOGEN_OPTIONS@\n```\n\n----------------------------------------\n\nTITLE: Foundry Enable Configuration\nDESCRIPTION: Boolean flag to enable Foundry installation\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/supported-languages/solidity.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\nfalse\n```\n\n----------------------------------------\n\nTITLE: Enabling Lean4 Development Tools\nDESCRIPTION: Configuration option to enable or disable tools for Lean4 development. The default value is false, but it can be set to true to enable Lean4 support.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/supported-languages/lean4.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## languages\\.lean4\\.enable\n\nWhether to enable tools for lean4 development\\.\n\n*Type:*\nboolean\n\n*Default:*\n` false `\n\n*Example:*\n` true `\n```\n\n----------------------------------------\n\nTITLE: Boolean Flag Example\nDESCRIPTION: Example value for enabling various JavaScript tools and features.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/supported-languages/javascript.md#2025-04-21_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\ntrue\n```\n\n----------------------------------------\n\nTITLE: Autogeneration Options Marker\nDESCRIPTION: A placeholder that will likely be replaced with configuration options during automatic generation or build processes.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/individual-docs/languages/opentofu.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n@AUTOGEN_OPTIONS@\n```\n\n----------------------------------------\n\nTITLE: Autogeneration Marker in Markdown\nDESCRIPTION: A placeholder marker that will likely be replaced with configuration options by an automated process during documentation generation.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/individual-docs/languages/terraform.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n@AUTOGEN_OPTIONS@\n```\n\n----------------------------------------\n\nTITLE: Configuration Placeholder in Markdown\nDESCRIPTION: A placeholder token that will be replaced with automatically generated options during processing.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/individual-docs/languages/elixir.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n@AUTOGEN_OPTIONS@\n```\n\n----------------------------------------\n\nTITLE: Configuring Autogenerated Options Template\nDESCRIPTION: Placeholder template marker for autogenerated configuration options in the DevEnv project.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/individual-docs/services/dynamodb-local.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n@AUTOGEN_OPTIONS@\n```\n\n----------------------------------------\n\nTITLE: Markdown Documentation Template with Autogeneration Token\nDESCRIPTION: Basic markdown template structure with a placeholder comment for documentation and autogeneration options token.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/individual-docs/services/clickhouse.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[comment]: # (Please add your documentation on top of this line)\n\n@AUTOGEN_OPTIONS@\n```\n\n----------------------------------------\n\nTITLE: Configuring Meilisearch Index Size\nDESCRIPTION: Sets the maximum size limit for the Meilisearch index. Default is 100 GiB expressed in bytes.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/supported-services/meilisearch.md#2025-04-21_snippet_6\n\nLANGUAGE: nix\nCODE:\n```\n\"107374182400\"\n```\n\n----------------------------------------\n\nTITLE: Specifying Python Package for Robot Framework in devenv\nDESCRIPTION: Configuration option to specify the Python package to use for Robot Framework. It defaults to pkgs.python3.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/supported-languages/robotframework.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## languages\\.robotframework\\.python\n\n\n\nThe Python package to use\\.\n\n\n\n*Type:*\npackage\n\n\n\n*Default:*\n` pkgs.python3 `\n```\n\n----------------------------------------\n\nTITLE: Enable Flag Example\nDESCRIPTION: Example value for enabling Standard ML support.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/supported-languages/standardml.md#2025-04-21_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nfalse\n```\n\n----------------------------------------\n\nTITLE: Setting Automated Documentation Marker in Markdown\nDESCRIPTION: A markdown comment that serves as a marker for where documentation should be added. This is likely used by an automated documentation generation system.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/individual-docs/languages/erlang.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[comment]: # (Please add your documentation on top of this line)\n```\n\n----------------------------------------\n\nTITLE: Placeholder for Autogenerated Options in Devenv Configuration\nDESCRIPTION: This snippet represents a placeholder for autogenerated options in the Devenv project configuration. It uses a specific syntax to indicate where these options should be inserted.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/individual-docs/services/postgres.md#2025-04-21_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n@AUTOGEN_OPTIONS@\n```\n\n----------------------------------------\n\nTITLE: Configuration Variable Placeholder\nDESCRIPTION: A placeholder variable that will be replaced with auto-generated options when the documentation is processed.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/individual-docs/services/elasticsearch.md#2025-04-21_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n@AUTOGEN_OPTIONS@\n```\n\n----------------------------------------\n\nTITLE: Running Django Development Server with devenv\nDESCRIPTION: Command to launch a development server using devenv. This utilizes scripts defined in devenv.nix that are automatically added to the shell path.\nSOURCE: https://github.com/cachix/devenv/blob/main/examples/python-django/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndevenv up\n```\n\n----------------------------------------\n\nTITLE: Placeholder for Auto-generated Options\nDESCRIPTION: This snippet contains a placeholder that will likely be replaced with auto-generated options during the build or deployment process.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/individual-docs/services/redis.md#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n@AUTOGEN_OPTIONS@\n```\n\n----------------------------------------\n\nTITLE: Placeholder for Auto-Generated Options in Markdown\nDESCRIPTION: A markdown placeholder tag (@AUTOGEN_OPTIONS@) that likely gets replaced with automatically generated content listing configurable options for the devenv package.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/individual-docs/languages/crystal.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n@AUTOGEN_OPTIONS@\n```\n\n----------------------------------------\n\nTITLE: Specifying Lua Package in Devenv\nDESCRIPTION: Configuration option to set the Lua package to be used in the Devenv environment. By default, it uses the 'pkgs.lua' package, but can be customized as needed.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/supported-languages/lua.md#2025-04-21_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nlanguages.lua.package = pkgs.lua\n```\n\n----------------------------------------\n\nTITLE: Specifying PureScript Package\nDESCRIPTION: Configuration option to specify the PureScript package to use. It defaults to the 'purescript' package from the 'pkgs' set.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/supported-languages/purescript.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## languages\\.purescript\\.package\n\n\n\nThe PureScript package to use\\.\n\n\n\n*Type:*\npackage\n\n\n\n*Default:*\n` pkgs.purescript `\n```\n\n----------------------------------------\n\nTITLE: Go Package Configuration\nDESCRIPTION: Specifies the Go package to use in the development environment. Default package is set to pkgs.go.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/supported-languages/go.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\npkgs.go\n```\n\n----------------------------------------\n\nTITLE: Defining Autogenerated Options for Devenv in Nix\nDESCRIPTION: This snippet represents a placeholder for auto-generated Nix options for the Devenv project. The actual content will be inserted at build time.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/individual-docs/languages/deno.md#2025-04-21_snippet_0\n\nLANGUAGE: nix\nCODE:\n```\n@AUTOGEN_OPTIONS@\n```\n\n----------------------------------------\n\nTITLE: DevEnv Configuration Placeholder\nDESCRIPTION: A placeholder for autogenerated configuration options with a markdown comment indicating where documentation should be added.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/individual-docs/services/memcached.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[comment]: # (Please add your documentation on top of this line)\n\n@AUTOGEN_OPTIONS@\n```\n\n----------------------------------------\n\nTITLE: Autogeneration Options Marker\nDESCRIPTION: Markdown comment and configuration placeholder for automatically generated options.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/individual-docs/languages/solidity.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[comment]: # (Please add your documentation on top of this line)\n\n@AUTOGEN_OPTIONS@\n```\n\n----------------------------------------\n\nTITLE: Specifying Auto-generated Options in Devenv Configuration\nDESCRIPTION: This snippet defines a placeholder for auto-generated options in the Devenv project configuration. It uses a special syntax to indicate where these options should be inserted.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/individual-docs/services/trafficserver.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n@AUTOGEN_OPTIONS@\n```\n\n----------------------------------------\n\nTITLE: Autogeneration Options Placeholder\nDESCRIPTION: A placeholder marker that gets replaced with actual configuration options during build or deployment process.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/individual-docs/services/kafka-connect.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n@AUTOGEN_OPTIONS@\n```\n\n----------------------------------------\n\nTITLE: Specifying Nim Package\nDESCRIPTION: Configuration option to set the Nim package to use. This allows customization of the Nim installation by specifying a particular package, with the default being 'pkgs.nim'.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/supported-languages/nim.md#2025-04-21_snippet_1\n\nLANGUAGE: nim\nCODE:\n```\nlanguages.nim.package = pkgs.nim\n```\n\n----------------------------------------\n\nTITLE: Enabling PureScript Development Tools\nDESCRIPTION: Configuration option to enable or disable tools for PureScript development. It is a boolean flag defaulting to false.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/supported-languages/purescript.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## languages\\.purescript\\.enable\n\nWhether to enable tools for PureScript development\\.\n\n\n\n*Type:*\nboolean\n\n\n\n*Default:*\n` false `\n\n\n\n*Example:*\n` true `\n```\n\n----------------------------------------\n\nTITLE: Setting Additional Memcached Startup Arguments in Nix Configuration\nDESCRIPTION: Option to provide additional arguments passed to memcached during startup. Default is an empty list.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/supported-services/memcached.md#2025-04-21_snippet_4\n\nLANGUAGE: nix\nCODE:\n```\nservices.memcached.startArgs = [\n  \"--memory-limit=100M\"\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring Autogeneration Options in Cachix Devenv\nDESCRIPTION: Placeholder for auto-generated configuration options denoted by @AUTOGEN_OPTIONS@ macro.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/individual-docs/languages/rust.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n@AUTOGEN_OPTIONS@\n```\n\n----------------------------------------\n\nTITLE: Options Placeholder in Markdown\nDESCRIPTION: A configuration placeholder (@AUTOGEN_OPTIONS@) used for automatic option generation or replacement during build process.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/individual-docs/languages/kotlin.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n@AUTOGEN_OPTIONS@\n```\n\n----------------------------------------\n\nTITLE: Configuration Placeholder\nDESCRIPTION: A placeholder variable for auto-generated configuration options that will be populated during build/processing.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/individual-docs/languages/texlive.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n@AUTOGEN_OPTIONS@\n```\n\n----------------------------------------\n\nTITLE: Entering project B shell with Nix flakes\nDESCRIPTION: Command to enter the projectB development shell with its specific configuration and greeting message.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/guides/using-with-flakes.md#2025-04-21_snippet_9\n\nLANGUAGE: console\nCODE:\n```\n$ nix develop --no-pure-eval .#projectB\nthis is project B\n(devenv) $\n```\n\n----------------------------------------\n\nTITLE: Devenv Autogeneration Options\nDESCRIPTION: Template placeholder for autogeneration options configuration marked by @AUTOGEN_OPTIONS@ tag.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/individual-docs/services/typesense.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n@AUTOGEN_OPTIONS@\n```\n\n----------------------------------------\n\nTITLE: Auto-generated Options Placeholder\nDESCRIPTION: A placeholder that will be replaced with automatically generated configuration options during build or processing.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/individual-docs/services/tailscale.md#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n@AUTOGEN_OPTIONS@\n```\n\n----------------------------------------\n\nTITLE: Setting Default Mprocs Package\nDESCRIPTION: Specifies the default mprocs package to be used from pkgs. This setting determines which version of mprocs will be installed.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/supported-process-managers/mprocs.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\npkgs.mprocs\n```\n\n----------------------------------------\n\nTITLE: Specifying Idris Package in Devenv\nDESCRIPTION: Configuration option to specify the Idris package to use in the devenv environment. This setting allows users to choose between different versions or variations of Idris.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/supported-languages/idris.md#2025-04-21_snippet_1\n\nLANGUAGE: nix\nCODE:\n```\nlanguages.idris.package = pkgs.idris2\n```\n\n----------------------------------------\n\nTITLE: Setting Vault Network Address\nDESCRIPTION: Default network address configuration for Vault service binding\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/supported-services/vault.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n\"127.0.0.1:8200\"\n```\n\n----------------------------------------\n\nTITLE: Configuring DevEnv Autogenerated Options\nDESCRIPTION: Template placeholder for auto-generated DevEnv configuration options, marked with template variable @AUTOGEN_OPTIONS@.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/individual-docs/languages/javascript.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[comment]: # (Please add your documentation on top of this line)\n\n@AUTOGEN_OPTIONS@\n```\n\n----------------------------------------\n\nTITLE: Autogeneration Options Placeholder in Markdown\nDESCRIPTION: A placeholder variable (@AUTOGEN_OPTIONS@) likely used during build process to insert automatically generated content or configuration options.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/individual-docs/languages/purescript.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n@AUTOGEN_OPTIONS@\n```\n\n----------------------------------------\n\nTITLE: Using External Flakes for devenv Configuration\nDESCRIPTION: Example of using an external flake for devenv configuration. It shows how to reference an external flake file and use it in a project, including direnv configuration.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/guides/using-with-flake-parts.md#2025-04-21_snippet_9\n\nLANGUAGE: console\nCODE:\n```\n$ nix develop --no-pure-eval file:/path/to/central/flake#projectA\nthis is project A\n(devenv) $\n```\n\n----------------------------------------\n\nTITLE: Specifying Unison Package\nDESCRIPTION: Configuration option to specify which Unison package to use in the development environment. Defaults to the unison-ucm package from nixpkgs.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/supported-languages/unison.md#2025-04-21_snippet_1\n\nLANGUAGE: nix\nCODE:\n```\npkgs.unison-ucm\n```\n\n----------------------------------------\n\nTITLE: Enable Deno Configuration\nDESCRIPTION: Boolean configuration option to enable or disable Deno development tools. Default value is false.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/supported-languages/deno.md#2025-04-21_snippet_0\n\nLANGUAGE: nix\nCODE:\n```\nfalse\n```\n\n----------------------------------------\n\nTITLE: Setting Vault Enable Flag\nDESCRIPTION: Boolean configuration for enabling/disabling Vault service with default value\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/supported-services/vault.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\nfalse\n```\n\n----------------------------------------\n\nTITLE: Tideways Environment Default Configuration\nDESCRIPTION: Default environment string setting for the Tideways Daemon configuration.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/supported-services/tideways.md#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n\"devenv\"\n```\n\n----------------------------------------\n\nTITLE: Documentation Template with Autogeneration Placeholder\nDESCRIPTION: A markdown template with a comment indicating where documentation should be added and a placeholder for auto-generated content (@AUTOGEN_OPTIONS@).\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/individual-docs/services/mongodb.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[comment]: # (Please add your documentation on top of this line)\n\n@AUTOGEN_OPTIONS@\n```\n\n----------------------------------------\n\nTITLE: Entering devenv Shell with Nix Flakes\nDESCRIPTION: Command to enter the devenv shell using Nix flakes. The --no-pure-eval flag is used to allow devenv to determine its environment.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/guides/using-with-flake-parts.md#2025-04-21_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nnix develop --no-pure-eval\n```\n\n----------------------------------------\n\nTITLE: Inserting Auto-generated Options for Devenv Configuration\nDESCRIPTION: This placeholder is used to insert auto-generated configuration options for the Devenv project. It serves as a marker for where dynamic content should be injected during the build or documentation generation process.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/individual-docs/languages/cplusplus.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n@AUTOGEN_OPTIONS@\n```\n\n----------------------------------------\n\nTITLE: Setting Fortran Enable Flag\nDESCRIPTION: Boolean configuration option to enable or disable Fortran development tools. Default value is false.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/supported-languages/fortran.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nfalse\n```\n\n----------------------------------------\n\nTITLE: Radian Console Enable Configuration\nDESCRIPTION: Boolean configuration option to enable or disable the Radian console for R.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/supported-languages/r.md#2025-04-21_snippet_2\n\nLANGUAGE: nix\nCODE:\n```\nfalse\n```\n\n----------------------------------------\n\nTITLE: Configuring sqld Extra Arguments\nDESCRIPTION: List of additional flags and arguments to pass to sqld. Defaults to an empty list.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/supported-services/sqld.md#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n[ ]\n```\n\n----------------------------------------\n\nTITLE: Erlang Package Selection Configuration\nDESCRIPTION: Configuration option to specify which Erlang package to use. Default value is pkgs.erlang.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/supported-languages/erlang.md#2025-04-21_snippet_1\n\nLANGUAGE: nix\nCODE:\n```\npkgs.erlang\n```\n\n----------------------------------------\n\nTITLE: Specifying Typst Package in Nix\nDESCRIPTION: Configuration option to define which package of Typst to use in the development environment. It allows customization of the Typst installation.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/supported-languages/typst.md#2025-04-21_snippet_1\n\nLANGUAGE: nix\nCODE:\n```\nlanguages.typst.package = pkgs.typst\n```\n\n----------------------------------------\n\nTITLE: Tideways API Key Default Configuration\nDESCRIPTION: Default empty string configuration for the Tideways API Key setting.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/supported-services/tideways.md#2025-04-21_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n\"\"\n```\n\n----------------------------------------\n\nTITLE: Tideways Profiling Space Default Configuration\nDESCRIPTION: Default boolean configuration for Tideways profiling space. When enabled, the default monitoring is disabled.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/supported-services/tideways.md#2025-04-21_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\ntrue\n```\n\n----------------------------------------\n\nTITLE: Loading Project with Devenv Shell\nDESCRIPTION: Command to enter the devenv shell environment for the project.\nSOURCE: https://github.com/cachix/devenv/blob/main/examples/scripts/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ devenv shell\n```\n\n----------------------------------------\n\nTITLE: Configuring InfluxDB Package\nDESCRIPTION: Specifies the package to use for InfluxDB installation. Defaults to pkgs.influxdb.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/supported-services/influxdb.md#2025-04-21_snippet_1\n\nLANGUAGE: text\nCODE:\n```\npkgs.influxdb\n```\n\n----------------------------------------\n\nTITLE: Building All Outputs with devenv\nDESCRIPTION: This shell session demonstrates how to build all outputs defined in the devenv.nix file using the 'devenv build' command.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/blog/posts/devenv-v1.1-outputs.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ devenv build\n/nix/store/mzq5bpi49h26cy2mfj5a2r0q69fh3a9k-git-2.44.0\n/nix/store/mzq5bpi49h26cy2mfj5a2r0q71fh3a9k-myapp-1.0\n```\n\n----------------------------------------\n\nTITLE: Documentation Placeholder with Autogeneration Marker\nDESCRIPTION: A markdown comment that instructs users where to add documentation, along with a placeholder (@AUTOGEN_OPTIONS@) that will likely be replaced by build tools or scripts during generation.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/individual-docs/languages/pascal.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[comment]: # (Please add your documentation on top of this line)\n\n@AUTOGEN_OPTIONS@\n```\n\n----------------------------------------\n\nTITLE: Default Package Value\nDESCRIPTION: Default package configuration setting using MLton.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/supported-languages/standardml.md#2025-04-21_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\npkgs.mlton\n```\n\n----------------------------------------\n\nTITLE: Markdown Documentation Template with Autogen Marker\nDESCRIPTION: A markdown file containing a documentation comment placeholder and an autogeneration options marker.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/individual-docs/languages/shell.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[comment]: # (Please add your documentation on top of this line)\n\n@AUTOGEN_OPTIONS@\n```\n\n----------------------------------------\n\nTITLE: Defining Autogen Options for Devenv in Nix\nDESCRIPTION: This snippet defines a placeholder for auto-generated options in the Devenv project configuration. It uses a special comment syntax that is likely processed by a build tool or script.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/individual-docs/languages/scala.md#2025-04-21_snippet_0\n\nLANGUAGE: nix\nCODE:\n```\n@AUTOGEN_OPTIONS@\n```\n\n----------------------------------------\n\nTITLE: Installing devenv for newcomers using nix-env\nDESCRIPTION: Command to install devenv using nix-env, which is recommended for users new to the Nix ecosystem.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/getting-started.md#2025-04-21_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nnix-env --install --attr devenv -f https://github.com/NixOS/nixpkgs/tarball/nixpkgs-unstable\n```\n\n----------------------------------------\n\nTITLE: Configuring multiple devenv shells in flake.nix\nDESCRIPTION: Example flake.nix that defines multiple development shells for different subprojects. Includes separate configurations and packages for projectA and projectB with their own environments.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/guides/using-with-flakes.md#2025-04-21_snippet_7\n\nLANGUAGE: nix\nCODE:\n```\n{\n  inputs = {\n    nixpkgs.url = \"github:cachix/devenv-nixpkgs/rolling\";\n    devenv.url = \"github:cachix/devenv\";\n  };\n\n  outputs = { self, nixpkgs, devenv, ... } @ inputs:\n    let\n      system = \"x86_64-linux\";\n      pkgs = nixpkgs.legacyPackages.${system};\n    in\n    {\n      packages.${system} = {\n        projectA-devenv-up = self.devShells.${system}.projectA.config.procfileScript;\n        projectA-devenv-test = self.devShells.${system}.projectA.config.test;\n\n        projectB-devenv-up = self.devShells.${system}.projectB.config.procfileScript;\n        projectB-devenv-test = self.devShells.${system}.projectB.config.test;\n      };\n\n      devShells.${system} = {\n        projectA = devenv.lib.mkShell {\n          inherit inputs pkgs;\n          modules = [\n            {\n              enterShell = ''\n                echo this is project A\n              '';\n            }\n          ];\n        };\n\n        projectB = devenv.lib.mkShell {\n          inherit inputs pkgs;\n          modules = [\n            {\n              enterShell = ''\n                echo this is project B\n              '';\n            }\n          ];\n        };\n      };\n    };\n}\n```\n\n----------------------------------------\n\nTITLE: Placeholder for Auto-generated Options in Cachix Devenv\nDESCRIPTION: This snippet contains a placeholder for auto-generated options that will be inserted into the configuration file. It uses a specific format that is likely recognized by the Cachix Devenv build or processing system.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/individual-docs/languages/fortran.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n@AUTOGEN_OPTIONS@\n```\n\n----------------------------------------\n\nTITLE: Documentation Build Configuration Token\nDESCRIPTION: A placeholder token that will be replaced with actual build configuration options during the documentation generation process.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/individual-docs/languages/nim.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n@AUTOGEN_OPTIONS@\n```\n\n----------------------------------------\n\nTITLE: Documentation Placeholder Comment in Markdown\nDESCRIPTION: A comment directive indicating where documentation should be added in the file, using Markdown comment syntax.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/individual-docs/languages/opentofu.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[comment]: # (Please add your documentation on top of this line)\n```\n\n----------------------------------------\n\nTITLE: Documentation Placeholder in Markdown\nDESCRIPTION: A comment in Markdown format that serves as a placeholder instructing users to add documentation above this line.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/individual-docs/languages/typst.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[comment]: # (Please add your documentation on top of this line)\n```\n\n----------------------------------------\n\nTITLE: URL pattern for direnvrc script\nDESCRIPTION: URL pattern to access a specific version of the direnvrc script from the devenv repository. Replace VERSION with a valid git tag or branch name.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/automatic-shell-activation.md#2025-04-21_snippet_5\n\nLANGUAGE: text\nCODE:\n```\nhttps://raw.githubusercontent.com/cachix/devenv/VERSION/direnvrc\n```\n\n----------------------------------------\n\nTITLE: Configuring Local devenv Source in YAML\nDESCRIPTION: This snippet shows how to add a devenv input pointing to a local source directory in the devenv.yaml file. This is useful for development and testing of local changes.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/community/contributing.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndevenv:\n  url: path:<PATH-TO-DEVENV-SOURCE-CODE>?dir=src/modules\n```\n\n----------------------------------------\n\nTITLE: Documentation Placeholder with Autogen Options\nDESCRIPTION: A markdown comment directive indicating where to add documentation, followed by an autogeneration placeholder token.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/individual-docs/languages/zig.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[comment]: # (Please add your documentation on top of this line)\n\n@AUTOGEN_OPTIONS@\n```\n\n----------------------------------------\n\nTITLE: Markdown Comment with Documentation Instruction\nDESCRIPTION: A Markdown comment that instructs users to add documentation above this line in the file.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/individual-docs/services/elasticsearch.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[comment]: # (Please add your documentation on top of this line)\n```\n\n----------------------------------------\n\nTITLE: Configuring Autogen Options for cachix/devenv\nDESCRIPTION: This snippet represents a placeholder for autogen options configuration. It uses a special syntax @AUTOGEN_OPTIONS@ which is likely replaced with actual configuration options during a build or generation process.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/individual-docs/languages/raku.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n@AUTOGEN_OPTIONS@\n```\n\n----------------------------------------\n\nTITLE: Documentation Header Comments in Markdown\nDESCRIPTION: Comment metadata indicating this is an auto-generated file that should not be edited directly. Changes should be made in docs/individual-docs directory.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/supported-services/trafficserver.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[comment]: # (Do not edit this file as it is autogenerated. Go to docs/individual-docs if you want to make edits.)\n\n[comment]: # (Please add your documentation on top of this line)\n```\n\n----------------------------------------\n\nTITLE: Configuring Vala Language Support\nDESCRIPTION: Configuration option to enable Vala development tools. When set to true, enables Vala language support in the development environment.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/supported-languages/vala.md#2025-04-21_snippet_0\n\nLANGUAGE: nix\nCODE:\n```\nfalse\n```\n\n----------------------------------------\n\nTITLE: Enabling Nix Language Support\nDESCRIPTION: Configuration option for enabling Nix development tools. When enabled, provides support for Nix language development.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/supported-languages/nix.md#2025-04-21_snippet_0\n\nLANGUAGE: nix\nCODE:\n```\nfalse\n```\n\n----------------------------------------\n\nTITLE: C Debugger Configuration\nDESCRIPTION: Configuration option for specifying the C debugger package. Defaults to GDB if supported on the system.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/supported-languages/c.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nlanguages.c.debugger\n\nType: null or package\nDefault: pkgs.gdb\n```\n\n----------------------------------------\n\nTITLE: Specifying .NET SDK Package\nDESCRIPTION: Configuration option to specify which .NET SDK package to use in the environment. The default package is pkgs.dotnet-sdk.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/supported-languages/dotnet.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\npkgs.dotnet-sdk\n```\n\n----------------------------------------\n\nTITLE: Specifying Cue Package in Devenv\nDESCRIPTION: This configuration option allows specifying the Cue package to use in a Devenv project. It determines which version or distribution of Cue will be available in the development environment.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/supported-languages/cue.md#2025-04-21_snippet_1\n\nLANGUAGE: cue\nCODE:\n```\nlanguages.cue.package = pkgs.cue\n```\n\n----------------------------------------\n\nTITLE: Configuration Placeholder in Markdown\nDESCRIPTION: A placeholder variable that will likely be replaced with autogenerated options during build or compilation.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/individual-docs/languages/java.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n@AUTOGEN_OPTIONS@\n```\n\n----------------------------------------\n\nTITLE: Placeholder for Autogenerated Options in Devenv Cachix Config\nDESCRIPTION: This snippet contains a placeholder for autogenerated options in the Devenv project configuration. It uses a specific syntax that likely gets replaced during a build or generation process.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/individual-docs/services/adminer.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n@AUTOGEN_OPTIONS@\n```\n\n----------------------------------------\n\nTITLE: Specifying Dart Package Configuration\nDESCRIPTION: Configuration option to specify which Dart package to use in the development environment.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/supported-languages/dart.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\npkgs.dart\n```\n\n----------------------------------------\n\nTITLE: Configuration Placeholder for Devenv Auto-generation\nDESCRIPTION: A placeholder tag that will be replaced with auto-generated content during the build process, allowing for dynamic documentation generation.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/individual-docs/services/blackfire.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n@AUTOGEN_OPTIONS@\n```\n\n----------------------------------------\n\nTITLE: Auto-generation Options Placeholder\nDESCRIPTION: A placeholder marker that gets replaced with auto-generated configuration options during the build process.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/individual-docs/languages/lua.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n@AUTOGEN_OPTIONS@\n```\n\n----------------------------------------\n\nTITLE: Enabling Memcached Service in Nix Configuration\nDESCRIPTION: Boolean option to enable or disable the Memcached process. Default is false.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/supported-services/memcached.md#2025-04-21_snippet_0\n\nLANGUAGE: nix\nCODE:\n```\nservices.memcached.enable = false\n```\n\n----------------------------------------\n\nTITLE: Placeholder for Autogeneration Options in Markdown\nDESCRIPTION: A placeholder marker that indicates where automated content generation options will be inserted. This is likely part of a documentation build process.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/individual-docs/languages/r.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n@AUTOGEN_OPTIONS@\n```\n\n----------------------------------------\n\nTITLE: Configuring Devenv Project Options in Nix\nDESCRIPTION: This snippet defines the configuration options for the Devenv project using Nix. It includes a placeholder for automatically generated options and sets up Cachix integration.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/individual-docs/process-managers/honcho.md#2025-04-21_snippet_0\n\nLANGUAGE: nix\nCODE:\n```\n@AUTOGEN_OPTIONS@\n```\n\n----------------------------------------\n\nTITLE: Setting InfluxDB Enable Flag\nDESCRIPTION: Boolean configuration to enable or disable the InfluxDB service. Defaults to false.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/supported-services/influxdb.md#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nfalse\n```\n\n----------------------------------------\n\nTITLE: Auto-generated Options Placeholder\nDESCRIPTION: Template placeholder for auto-generated configuration options that will be populated during build.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/individual-docs/languages/haskell.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n@AUTOGEN_OPTIONS@\n```\n\n----------------------------------------\n\nTITLE: Autogenerated Options Placeholder in Devenv Documentation\nDESCRIPTION: A placeholder tag in markdown format that will be replaced with auto-generated options during the build process of the documentation.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/individual-docs/languages/clojure.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n@AUTOGEN_OPTIONS@\n```\n\n----------------------------------------\n\nTITLE: Enabling Mailpit Service in Nix\nDESCRIPTION: Configuration option to enable the Mailpit service. It is a boolean value defaulting to false.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/supported-services/mailpit.md#2025-04-21_snippet_0\n\nLANGUAGE: nix\nCODE:\n```\nservices.mailpit.enable = false\n```\n\n----------------------------------------\n\nTITLE: Autogen Options Placeholder\nDESCRIPTION: A placeholder marker for automatically generated configuration options, with a comment indicating where documentation should be added.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/individual-docs/services/opensearch.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[comment]: # (Please add your documentation on top of this line)\n\n@AUTOGEN_OPTIONS@\n```\n\n----------------------------------------\n\nTITLE: Documentation Placeholder Comment in Markdown\nDESCRIPTION: A markdown comment that serves as a placeholder indicating where documentation should be added in the file.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/individual-docs/languages/typescript.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[comment]: # (Please add your documentation on top of this line)\n```\n\n----------------------------------------\n\nTITLE: CockroachDB Enable Setting\nDESCRIPTION: Boolean configuration option to enable or disable the CockroachDB process. Default value is false.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/supported-services/cockroachdb.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nfalse\n```\n\n----------------------------------------\n\nTITLE: Entering a specific project shell with Nix flakes\nDESCRIPTION: Commands to enter specific project shells using the named flake outputs. Shows entering projectA and projectB shells with their respective greetings.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/guides/using-with-flakes.md#2025-04-21_snippet_8\n\nLANGUAGE: console\nCODE:\n```\n$ nix develop --no-pure-eval .#projectA\nthis is project A\n(devenv) $\n```\n\n----------------------------------------\n\nTITLE: Defining Autogen Options Placeholder in Markdown\nDESCRIPTION: A placeholder tag that will be replaced with auto-generated options during the build process. This is indicated by the special @AUTOGEN_OPTIONS@ syntax.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/individual-docs/languages/ansible.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n@AUTOGEN_OPTIONS@\n```\n\n----------------------------------------\n\nTITLE: Documentation Placeholder with AUTOGEN_OPTIONS Directive in Markdown\nDESCRIPTION: A minimal markdown file that contains a comment instructing where to add documentation, along with an AUTOGEN_OPTIONS placeholder tag that likely gets replaced during documentation generation.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/individual-docs/languages/jsonnet.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[comment]: # (Please add your documentation on top of this line)\n\n@AUTOGEN_OPTIONS@\n```\n\n----------------------------------------\n\nTITLE: Setting Vault Package Configuration\nDESCRIPTION: Example configurations showing default value for Vault package setting using pkgs.vault-bin\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/supported-services/vault.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\npkgs.vault-bin\n```\n\n----------------------------------------\n\nTITLE: Configuring Autogenerated Options for Cachix DevEnv\nDESCRIPTION: This snippet represents a placeholder for autogenerated options in the Cachix DevEnv project. It's likely meant to be replaced with actual configuration options during a build or deployment process.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/individual-docs/languages/julia.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n@AUTOGEN_OPTIONS@\n```\n\n----------------------------------------\n\nTITLE: Generating Requirements File with UV\nDESCRIPTION: This command uses the 'uv' tool to compile a requirements.in file into a requirements.txt file, listing all necessary Python package dependencies with their versions.\nSOURCE: https://github.com/cachix/devenv/blob/main/requirements.txt#2025-04-21_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nuv pip compile requirements.in -o requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Documentation Template with Autogeneration Marker in Markdown\nDESCRIPTION: A template for adding documentation to the Devenv project with a comment directive for where to place content and an autogeneration marker that will be substituted during build.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/individual-docs/languages/nix.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[comment]: # (Please add your documentation on top of this line)\n\n@AUTOGEN_OPTIONS@\n```\n\n----------------------------------------\n\nTITLE: Allowing direnv to evaluate the .envrc file\nDESCRIPTION: Command to allow direnv to evaluate the updated .envrc file, enabling automatic shell activation when entering the project directory.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/guides/using-with-flakes.md#2025-04-21_snippet_6\n\nLANGUAGE: console\nCODE:\n```\ndirenv allow\n```\n\n----------------------------------------\n\nTITLE: Documentation Placeholder with Autogeneration Options in Markdown\nDESCRIPTION: This code snippet shows a Markdown comment indicating where documentation should be added, followed by a placeholder for autogeneration options that would be replaced during processing.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/individual-docs/languages/swift.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[comment]: # (Please add your documentation on top of this line)\n\n@AUTOGEN_OPTIONS@\n```\n\n----------------------------------------\n\nTITLE: Setting Memcached Bind Address in Nix Configuration\nDESCRIPTION: Option to set the IP interface for Memcached to bind to. Default is \"127.0.0.1\". Null means all interfaces.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/supported-services/memcached.md#2025-04-21_snippet_2\n\nLANGUAGE: nix\nCODE:\n```\nservices.memcached.bind = \"127.0.0.1\"\n```\n\n----------------------------------------\n\nTITLE: Documentation Placeholder with Auto-generation Options in Markdown\nDESCRIPTION: A markdown template with a comment indicating where documentation should be added and a placeholder for auto-generated content.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/individual-docs/process-managers/overmind.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[comment]: # (Please add your documentation on top of this line)\n\n@AUTOGEN_OPTIONS@\n```\n\n----------------------------------------\n\nTITLE: Setting Vala Package Version\nDESCRIPTION: Specifies which Vala package version to use in the development environment. Defaults to pkgs.vala but can be configured to use specific versions.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/supported-languages/vala.md#2025-04-21_snippet_1\n\nLANGUAGE: nix\nCODE:\n```\npkgs.vala_0_54\n```\n\n----------------------------------------\n\nTITLE: Configuring Memcached Port in Nix Configuration\nDESCRIPTION: Option to set the TCP port for Memcached to accept connections. Default is 11211. Port 0 means no TCP socket.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/supported-services/memcached.md#2025-04-21_snippet_3\n\nLANGUAGE: nix\nCODE:\n```\nservices.memcached.port = 11211\n```\n\n----------------------------------------\n\nTITLE: Setting InfluxDB Server Configuration\nDESCRIPTION: Custom configuration string for InfluxDB server settings. Multiple lines are concatenated with \\n. Defaults to empty string.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/supported-services/influxdb.md#2025-04-21_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n\"\"\n```\n\n----------------------------------------\n\nTITLE: Setting Blackfire Client ID in Nix Configuration\nDESCRIPTION: Configuration option to set the client ID for authenticating with Blackfire. This can be found in the user's Blackfire credentials settings.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/supported-services/blackfire.md#2025-04-21_snippet_3\n\nLANGUAGE: nix\nCODE:\n```\nservices.blackfire.client-id = \"\";\n```\n\n----------------------------------------\n\nTITLE: OpenTofu Enable Flag Configuration\nDESCRIPTION: Boolean configuration option to enable or disable OpenTofu development tools. Default value is false.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/supported-languages/opentofu.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nfalse\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Fly.io CLI\nDESCRIPTION: Command to log in to Fly.io using the command line interface\nSOURCE: https://github.com/cachix/devenv/blob/main/examples/fly.io/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nflyctl auth login\n```\n\n----------------------------------------\n\nTITLE: Setting Blackfire Server ID in Nix Configuration\nDESCRIPTION: Configuration option to set the server ID for authenticating with Blackfire. This can be found in the user's Blackfire credentials settings.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/supported-services/blackfire.md#2025-04-21_snippet_5\n\nLANGUAGE: nix\nCODE:\n```\nservices.blackfire.server-id = \"\";\n```\n\n----------------------------------------\n\nTITLE: Tideways Service Name Default Configuration\nDESCRIPTION: Default empty string configuration for the Tideways service name setting.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/supported-services/tideways.md#2025-04-21_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n\"\"\n```\n\n----------------------------------------\n\nTITLE: Markdown Documentation Placeholder\nDESCRIPTION: Contains a documentation placeholder comment and an autogeneration marker variable.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/individual-docs/services/sqld.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[comment]: # (Please add your documentation on top of this line)\n\n@AUTOGEN_OPTIONS@\n```\n\n----------------------------------------\n\nTITLE: Autogenerated Options Placeholder in Markdown\nDESCRIPTION: A template file containing a markdown comment and a placeholder (@AUTOGEN_OPTIONS@) that will be replaced with automatically generated configuration options.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/individual-docs/languages/cue.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[comment]: # (Please add your documentation on top of this line)\n\n@AUTOGEN_OPTIONS@\n```\n\n----------------------------------------\n\nTITLE: Configuring Autogen Options in Markdown\nDESCRIPTION: Placeholder tag for auto-generated configuration options in the Devenv project. Uses a markdown comment to indicate documentation placement.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/individual-docs/languages/c.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[comment]: # (Please add your documentation on top of this line)\n\n@AUTOGEN_OPTIONS@\n```\n\n----------------------------------------\n\nTITLE: Documentation Placeholder with Autogen Marker\nDESCRIPTION: A minimal markdown template with a comment indicating where to add documentation and a placeholder variable that will be populated with autogenerated options.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/individual-docs/services/rabbitmq.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[comment]: # (Please add your documentation on top of this line)\n\n@AUTOGEN_OPTIONS@\n```\n\n----------------------------------------\n\nTITLE: Documentation Instruction Comment in Markdown\nDESCRIPTION: A markdown comment that provides instructions to contributors about where to add documentation in the file.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/individual-docs/languages/elixir.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[comment]: # (Please add your documentation on top of this line)\n```\n\n----------------------------------------\n\nTITLE: Autogeneration Options Placeholder\nDESCRIPTION: A placeholder for autogeneration options that will likely be replaced during a build or document generation process.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/individual-docs/languages/typescript.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n@AUTOGEN_OPTIONS@\n```\n\n----------------------------------------\n\nTITLE: Autogeneration Options Placeholder\nDESCRIPTION: A placeholder tag that will be replaced with automated generation options by the build system or documentation tooling.\nSOURCE: https://github.com/cachix/devenv/blob/main/docs/individual-docs/languages/erlang.md#2025-04-21_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n@AUTOGEN_OPTIONS@\n```"
  }
]