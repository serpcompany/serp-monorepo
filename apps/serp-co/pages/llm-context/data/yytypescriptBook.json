[
  {
    "owner": "yytypescript",
    "repo": "book",
    "content": "TITLE: Creating Classes with Type-Annotated Fields and Methods\nDESCRIPTION: Demonstrates how to define classes with typed fields, constructor parameters, and methods in TypeScript. Type annotations ensure class instances maintain their expected structure.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/README.md#2025-04-22_snippet_30\n\nLANGUAGE: typescript\nCODE:\n```\nclass Person {\n  name: string;\n  age: number;\n\n  constructor(name: string, age: number) {\n    this.name = name;\n    this.age = age;\n  }\n\n  introduce(): void {\n    console.log(`My name is ${this.name} and I am ${this.age} years old.`);\n  }\n}\n\nconst john = new Person(\"John\", 20);\njohn.introduce();\n// @log: 'My name is John and I am 20 years old.'\n```\n\n----------------------------------------\n\nTITLE: 型引数推論を利用したジェネリック関数の呼び出し\nDESCRIPTION: ジェネリック関数printAndReturnを呼び出す際に、型引数の指定を省略して型推論を利用する例です。\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/generics/type-variables.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst value = printAndReturn(123);\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Type Inference in TypeScript\nDESCRIPTION: This snippet shows how TypeScript infers the type of a variable and enforces it throughout the code. It illustrates that once a type is inferred, it cannot be changed without causing a type error.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/values-types-variables/difference-between-type-inference-and-dynamic-typing.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// @errors: 2322 2339\nlet x = 1;\n//  ^?\nx = \"hello\"; // xはnumber型と決定しているのでstring型を代入するとエラー\nconsole.log(x.substring(1, 3));\n```\n\n----------------------------------------\n\nTITLE: Chaining Multiple Asynchronous Requests with async/await in TypeScript\nDESCRIPTION: Shows how to use async/await to chain multiple asynchronous API calls in a more readable and synchronous-looking manner. Each request function returns a Promise that resolves after a delay.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/asynchronous/await.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfunction request1(): Promise<number> {\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      resolve(1);\n    }, 1000);\n  });\n}\n\nfunction request2(result1: number): Promise<number> {\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      resolve(result1 + 1);\n    }, 1000);\n  });\n}\n\nfunction request3(result2: number): Promise<number> {\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      resolve(result2 + 2);\n    }, 1000);\n  });\n}\n\nasync function main() {\n  const result1 = await request1();\n  const result2 = await request2(result1);\n  const result3 = await request3(result2);\n  console.log(result3);\n  // @log: 4\n}\n\nmain();\n```\n\n----------------------------------------\n\nTITLE: Type Narrowing with satisfies Operator in TypeScript\nDESCRIPTION: Demonstrates how the 'satisfies' operator preserves type information and allows for type narrowing, especially with union types, which is not possible with type annotations.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/values-types-variables/satisfies.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst array1: (string | number)[] = [1, 2, 3];\n//    ^?\nconst array2 = [1, 2, 3] satisfies (string | number)[];\n//    ^?\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst array1: (string | number)[] = [1, \"2\", 3];\n//    ^?\nconst array2 = [1, \"2\", 3] satisfies (string | number)[];\n//    ^?\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// prettier-ignore\nconst tuple1: [string | number, string | number, string | number] = [1, \"2\", 3];\n//    ^?\nconst tuple2 = [1, \"2\", 3] satisfies [\n//    ^?\n  string | number,\n  string | number,\n  string | number\n];\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// prettier-ignore\ntype SuccessResponse = {\n  success: true;\n  data: object;\n};\ntype ErrorResponse = {\n  success: false;\n  error: string;\n};\ntype ApiResponse = SuccessResponse | ErrorResponse;\n\nconst res1: ApiResponse = {\n//    ^?\n  success: false,\n  error: \"too many requests\",\n};\nconst res2 = {\n//    ^?\n  success: false,\n  error: \"too many requests\",\n} satisfies ApiResponse;\n```\n\n----------------------------------------\n\nTITLE: Demonstrating undefined for uninitialized variables in JavaScript\nDESCRIPTION: This snippet shows how JavaScript automatically assigns undefined to variables that are declared without an initial value.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/values-types-variables/undefined-vs-null.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nlet value;\nconsole.log(value);\n// @log: undefined\n```\n\n----------------------------------------\n\nTITLE: Implementing Readonly<T> Utility Type in TypeScript\nDESCRIPTION: Shows the implementation of the Readonly<T> utility type using Mapped Types.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/type-reuse/mapped-types.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ntype Readonly<T> = {\n  readonly [P in keyof T]: T[P];\n};\n```\n\n----------------------------------------\n\nTITLE: Solving Method Chaining with 'this' Return Type in TypeScript\nDESCRIPTION: The complete solution using 'this' as the return type for all methods, which allows proper method chaining across the inheritance hierarchy and maintains polymorphic behavior.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/object-oriented/class/return-this-type.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nclass Operator {\n  protected value: number;\n\n  public constructor(value: number) {\n    this.value = value;\n  }\n\n  public sum(value: number): this {\n    this.value += value;\n    return this;\n  }\n\n  public subtract(value: number): this {\n    this.value -= value;\n    return this;\n  }\n\n  public multiply(value: number): this {\n    this.value *= value;\n    return this;\n  }\n\n  public divide(value: number): this {\n    this.value /= value;\n    return this;\n  }\n}\n\nclass NewOperator extends Operator {\n  public constructor(value: number) {\n    super(value);\n  }\n\n  public power(value: number): this {\n    this.value **= value;\n    return this;\n  }\n}\n\nconst op: NewOperator = new NewOperator(2);\nop.power(3).multiply(2).power(3); // 4096\n```\n\n----------------------------------------\n\nTITLE: Using Generic Constraints with Interfaces in TypeScript\nDESCRIPTION: An example demonstrating how to use the extends keyword with interfaces in generic type constraints. Shows how to create a generic ValueObject interface and Entity class with constrained ID types.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/generics/type-parameter-constraint.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ValueObject<T> {\n  value: T;\n\n  toString(): string;\n}\n\nclass UserID implements ValueObject<number> {\n  public value: number;\n\n  public constructor(value: number) {\n    this.value = value;\n  }\n\n  public toString(): string {\n    return `${this.value}`;\n  }\n}\n\nclass Entity<ID extends ValueObject<unknown>> {\n  private id: ID;\n\n  public constructor(id: ID) {\n    this.id = id;\n  }\n\n  //...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ReturnType<T> Utility Type in TypeScript\nDESCRIPTION: This snippet shows the definition of the ReturnType<T> utility type, which uses the infer keyword to extract the return type of a function.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/type-reuse/infer.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype ReturnType<T extends (...args: any) => any> = T extends (\n  ...args: any\n) => infer R\n  ? R\n  : any;\n```\n\n----------------------------------------\n\nTITLE: Converting then-catch to try-catch with async/await in TypeScript\nDESCRIPTION: Illustrates how to rewrite Promise-based then-catch chains using async/await and try-catch blocks. This can make error handling more intuitive and similar to synchronous code.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/asynchronous/await.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nasync function request(): Promise<string> {\n  return \"hello\";\n}\n\nfunction main1() {\n  request()\n    .then((result: string) => {\n      console.log(result);\n      // @log: \"hello\"\n    })\n    .catch((error: unknown) => {\n      console.log(error);\n    });\n}\n\nasync function main2() {\n  try {\n    const result: string = await request();\n    console.log(result);\n    // @log: \"hello\"\n  } catch (error: unknown) {\n    console.log(error);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating undefined in JavaScript\nDESCRIPTION: Shows different scenarios where undefined value appears in JavaScript: uninitialized variables, functions without return values, accessing non-existent object properties, and array indices.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/values-types-variables/undefined.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nlet name;\nconsole.log(name);\n// @log: undefined\n\nfunction func() {}\nconsole.log(func());\n// @log: undefined\n\nconst obj = {};\nconsole.log(obj.name);\n// @log: undefined\n\nconst arr = [];\nconsole.log(arr[1]);\n// @log: undefined\n```\n\n----------------------------------------\n\nTITLE: Creating Mutable<T> Type with Mapping Modifier in TypeScript\nDESCRIPTION: Demonstrates the use of the mapping modifier to create a Mutable<T> type that removes readonly properties.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/type-reuse/mapped-types.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ntype ImmutableButterfly = Readonly<Butterfly>;\ntype MutableButterfly = {\n  -readonly [key in SystemSupportLanguage]: string;\n};\n\nconst immutableButterfly: ImmutableButterfly = {\n  en: \"Butterfly\",\n  fr: \"Papillon\",\n  it: \"Farfalla\",\n  es: \"Mariposa\",\n};\n\nimmutableButterfly.en = \"Schmetterling\";\n\nconst mutableButterfly: MutableButterfly = {\n  en: \"Butterfly\",\n  fr: \"Papillon\",\n  it: \"Farfalla\",\n  es: \"Mariposa\",\n};\n\nmutableButterfly.en = \"Schmetterling\"; // OK\n```\n\n----------------------------------------\n\nTITLE: Implementing Server-Side Rendering with getServerSideProps in Next.js (TypeScript)\nDESCRIPTION: This snippet demonstrates how to use getServerSideProps for server-side rendering in Next.js, fetching the initial cat image on the server and passing it as props to the page component.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/tutorials/nextjs.md#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { GetServerSideProps, NextPage } from \"next\";\nimport { useState } from \"react\";\n\ntype Props = {\n  initialImageUrl: string;\n};\n\nconst IndexPage: NextPage<Props> = ({ initialImageUrl }) => {\n  const [imageUrl, setImageUrl] = useState(initialImageUrl);\n  const [loading, setLoading] = useState(false);\n  const handleClick = async () => {\n    setLoading(true);\n    const newImage = await fetchImage();\n    setImageUrl(newImage.url);\n    setLoading(false);\n  };\n  return (\n    <div>\n      <button onClick={handleClick}>他のにゃんこも見る</button>\n      <div>{loading || <img src={imageUrl} />}</div>\n    </div>\n  );\n};\nexport default IndexPage;\n\nexport const getServerSideProps: GetServerSideProps<Props> = async () => {\n  const image = await fetchImage();\n  return {\n    props: {\n      initialImageUrl: image.url,\n    },\n  };\n};\n\ntype Image = {\n  url: string;\n};\nconst fetchImage = async (): Promise<Image> => {\n  const res = await fetch(\"https://api.thecatapi.com/v1/images/search\");\n  const images = await res.json();\n  console.log(images);\n  return images[0];\n};\n```\n\n----------------------------------------\n\nTITLE: Catching and Typing Exceptions in TypeScript\nDESCRIPTION: This example shows how to catch exceptions and use type checking to handle different types of errors. It demonstrates the use of instanceof for type narrowing in catch blocks.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/builtin-api/error.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ntry {\n  // ...\n} catch (e) {\n  if (e instanceof Error) {\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating 'any' Type Usage in TypeScript\nDESCRIPTION: This snippet shows how 'any' type can accept various data types without causing compilation errors. It demonstrates assigning different types of values to an 'any' typed variable.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/values-types-variables/any.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nlet value: any;\nvalue = 1; // OK\nvalue = \"string\"; // OK\nvalue = { name: \"オブジェクト\" }; // OK\n```\n\n----------------------------------------\n\nTITLE: keyof with Index Types\nDESCRIPTION: Illustrates how keyof behaves with index types, returning the index key type.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/type-reuse/keyof-type-operator.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ntype MapLike = { [K: string]: any };\ntype MapKeys = keyof MapLike;\n```\n\n----------------------------------------\n\nTITLE: Creating Type Guard Functions for Type Narrowing\nDESCRIPTION: Demonstrates how to create custom type guard functions using the 'is' type predicate. Type guards help TypeScript narrow down types in conditional blocks.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/README.md#2025-04-22_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\nfunction isString(value: any): value is string {\n  return typeof value === \"string\";\n}\n\nfunction printLength(value: any) {\n  if (isString(value)) {\n    // この節ではvalueはstring型として扱われる\n    console.log(value.length);\n  }\n}\n\nprintLength(\"hello\");\n// @log: 5\n```\n\n----------------------------------------\n\nTITLE: Problematic Generic Function Without Type Constraints in TypeScript\nDESCRIPTION: A function that attempts to change the background color of an HTML element using unconstrained generics, resulting in compiler errors because TypeScript cannot guarantee the element has a style property.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/generics/type-parameter-constraint.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction changeBackgroundColor<T>(element: T) {\n  // Property 'style' does not exist on type 'T'.(2339)\n  element.style.backgroundColor = \"red\";\n  return element;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Asynchronous Operations in TypeScript\nDESCRIPTION: Demonstrates how to use async/await for handling asynchronous operations in TypeScript, including error handling with try/catch blocks.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/overview/features.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nasync function fetchData(): Promise<void> {\n  try {\n    const response = await fetch(\"https://api.example.com/data\");\n    const data = await response.json();\n    console.log(data);\n  } catch (error) {\n    console.error(\"Error fetching data:\", error);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using const assertion for deep immutability in TypeScript\nDESCRIPTION: This code shows how const assertion (as const) can be used to create deeply immutable objects, affecting all nested properties recursively.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/values-types-variables/const-assertion.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst america = {\n  name: \"North American Continent\",\n  canada: {\n    name: \"Republic of Canada\",\n    capitalCity: \"Ottawa\",\n  },\n  us: {\n    name: \"United States of America\",\n    capitalCity: \"Washington, D.C.\",\n  },\n  mexico: {\n    name: \"United Mexican States\",\n    capitalCity: \"Mexico City\",\n  },\n} as const;\n\namerica.canada.name = \"Republic of Côte d'Ivoire\";\namerica.canada.capitalCity = \"Yamoussoukro\";\n```\n\n----------------------------------------\n\nTITLE: Attempting to Access Properties and Methods on unknown Type in TypeScript\nDESCRIPTION: This snippet demonstrates that TypeScript prevents accessing properties and methods on values of type 'unknown', providing better type safety than 'any'.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/statements/any-vs-unknown.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// @errors: 18046\nconsole.log(unknown4.toFixed());\nconsole.log(unknown5.length);\nconsole.log(unknown6.name);\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Exhaustiveness Checking with never in TypeScript\nDESCRIPTION: This example shows how to use never for basic exhaustiveness checking in a switch statement, ensuring all cases of a union type are handled.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/statements/never.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ntype Extension = \"js\" | \"ts\" | \"json\";\n\nfunction printLang(ext: Extension): void {\n  switch (ext) {\n    case \"js\":\n      console.log(\"JavaScript\");\n      break;\n    case \"ts\":\n      console.log(\"TypeScript\");\n      break;\n    default:\n      const exhaustivenessCheck: never = ext;\n      break;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using typeof for Type Narrowing in TypeScript\nDESCRIPTION: This example demonstrates how TypeScript leverages the typeof operator in conditional statements to narrow down the type of a variable, enabling type-specific operations.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/values-types-variables/typeof-operator.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst n: unknown = \"\";\n\nif (typeof n === \"string\") {\n  n.toU;\n  //   ^|\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Variables with satisfies Operator in TypeScript\nDESCRIPTION: Demonstrates the basic usage of the 'satisfies' operator in TypeScript for variable declarations, comparing it with type annotations. Both methods validate that the variable satisfies the given type.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/values-types-variables/satisfies.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype Pokemon = {\n  name: string;\n  no: number;\n  genre: string;\n  height: number;\n  weight: number;\n};\nconst pikachu: Pokemon = {\n  name: \"pikachu\",\n  no: 25,\n  genre: \"mouse pokémon\",\n  height: 0.4,\n  weight: 6.0,\n};\nconst raichu = {\n  name: \"raichu\",\n  no: 26,\n  genre: \"mouse pokémon\",\n  height: 0.8,\n  weight: 30.0,\n} satisfies Pokemon;\n```\n\n----------------------------------------\n\nTITLE: Rest Pattern in Array Destructuring\nDESCRIPTION: Shows how to use the rest pattern (...) in array destructuring to capture the remaining elements of an array into a new array.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/values-types-variables/array/destructuring-assignment-from-array.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst oneToFive = [1, 2, 3, 4, 5];\nconst [one, ...rest] = oneToFive;\nconsole.log(one);\n// @log: 1\nconsole.log(rest);\n// @log: [ 2, 3, 4, 5 ]\n```\n\n----------------------------------------\n\nTITLE: Updating Cat Image on Button Click in Next.js React Component (TypeScript)\nDESCRIPTION: This snippet extends the previous example by adding a button that, when clicked, fetches and displays a new cat image using React state management.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/tutorials/nextjs.md#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { NextPage } from \"next\";\nimport { useEffect, useState } from \"react\";\n\nconst IndexPage: NextPage = () => {\n  const [imageUrl, setImageUrl] = useState(\"\");\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    fetchImage().then((newImage) => {\n      setImageUrl(newImage.url);\n      setLoading(false);\n    });\n  }, []);\n  const handleClick = async () => {\n    setLoading(true);\n    const newImage = await fetchImage();\n    setImageUrl(newImage.url);\n    setLoading(false);\n  };\n  return (\n    <div>\n      <button onClick={handleClick}>他のにゃんこも見る</button>\n      <div>{loading || <img src={imageUrl} />}</div>\n    </div>\n  );\n};\nexport default IndexPage;\n\ntype Image = {\n  url: string;\n};\nconst fetchImage = async (): Promise<Image> => {\n  const res = await fetch(\"https://api.thecatapi.com/v1/images/search\");\n  const images = await res.json();\n  console.log(images);\n  return images[0];\n};\n```\n\n----------------------------------------\n\nTITLE: Defining a Regular Union Type in TypeScript\nDESCRIPTION: This snippet defines a regular union type 'UploadStatus' representing different states of a file upload process. It shows how regular unions can be complex to narrow down in type checks.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/values-types-variables/discriminated-union.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype UploadStatus = InProgress | Success | Failure;\ntype InProgress = { done: boolean; progress: number };\ntype Success = { done: boolean };\ntype Failure = { done: boolean; error: Error };\n```\n\n----------------------------------------\n\nTITLE: Using Optional Chaining for Safe Property Access\nDESCRIPTION: Shows how to use the optional chaining operator (?.) to safely access potentially undefined properties. It prevents errors when accessing properties of null or undefined values.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/README.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nfunction printLength(obj: { a?: string }) {\n  console.log(obj.a?.length);\n}\nprintLength({ a: \"hello\" });\n// @log: 5\nprintLength({});\n// @log: undefined\n```\n\n----------------------------------------\n\nTITLE: Creating Intersection Types to Combine Type Properties\nDESCRIPTION: Shows how to use intersection types with the ampersand (&) operator to combine multiple types. The resulting type contains all properties from the constituent types.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/README.md#2025-04-22_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\ntype Octopus = { swims: boolean };\ntype Cat = { nightVision: boolean };\ntype Octocat = Octopus & Cat;\n\nconst octocat: Octocat = { swims: true, nightVision: true };\nconsole.log(octocat);\n// @log: { swims: true, nightVision: true }\n```\n\n----------------------------------------\n\nTITLE: Demonstrating const assertion effects on various data types in TypeScript\nDESCRIPTION: This code snippet shows the differences between regular const declarations and const assertions for strings, arrays, and objects in TypeScript. It highlights how as const affects type inference and mutability.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/values-types-variables/const-assertion.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst str1 = \"hello\";\nconst str2 = \"hello\" as const; // これはas constがなくても同じ\nconst array1 = [1, 2, 3];\nconst array2 = [1, 2, 3] as const;\nconst obj1 = {\n  name: \"pikachu\",\n  no: 25,\n  genre: \"mouse pokémon\",\n  height: 0.4,\n  weight: 6.0,\n};\nconst obj2 = {\n  name: \"pikachu\",\n  no: 25,\n  genre: \"mouse pokémon\",\n  height: 0.4,\n  weight: 6.0,\n} as const;\n```\n\n----------------------------------------\n\nTITLE: Properly Handling Types With noUncheckedIndexedAccess\nDESCRIPTION: Demonstrates the correct way to handle types when noUncheckedIndexedAccess is enabled by using union types that include undefined. This approach acknowledges that indexed properties might not exist.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/tsconfig/nouncheckedindexedaccess.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst spanish: string | undefined = butterfly.es;\nconst third: string | undefined = phoneticCodes[2];\n```\n\n----------------------------------------\n\nTITLE: Using Index Signatures for Dynamic Object Properties\nDESCRIPTION: Shows how to define an object type with an index signature, allowing access to properties with arbitrary string keys. Index signatures enable flexible object structures with consistent value types.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/README.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nlet obj: { [key: string]: number };\nobj = { key1: 1, key2: 2 };\nconsole.log(obj[\"key1\"]);\n// @log: 1\nconsole.log(obj[\"key2\"]);\n// @log: 2\n```\n\n----------------------------------------\n\nTITLE: Narrowing Types with Control Flow Analysis\nDESCRIPTION: Demonstrates how TypeScript's control flow analysis automatically narrows types within conditional blocks. Type guards like typeof can refine union types to more specific types.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/README.md#2025-04-22_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nlet value: string | number;\n// 50%の確率でstring型またはnumber型の値を代入する\nvalue = Math.random() < 0.5 ? \"Hello\" : 100;\n\nif (typeof value === \"string\") {\n  // この節ではvalueはstring型として扱われる\n  console.log(value.toUpperCase());\n} else {\n  // この節ではvalueはnumber型として扱われる\n  console.log(value * 3);\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Function Expression with Type Annotation\nDESCRIPTION: Shows how to add type annotations to function expression parameters in TypeScript.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/functions/function-expression.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst increment = function (n: number) {\n  return n + 1;\n};\n```\n\n----------------------------------------\n\nTITLE: Using as const for Constant Object Properties in TypeScript\nDESCRIPTION: This snippet shows how to use 'as const' assertion to make all properties of an object constant. This results in a more specific type when using 'typeof', with literal types for all properties.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/tips/generates-type-from-object.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst account = {\n  accountName: \"yyts\",\n  password: \"ccbyncsa30\",\n  age: 80,\n  plan: \"Standard\",\n} as const;\n\ntype Account = typeof account;\n//   ^?\n```\n\n----------------------------------------\n\nTITLE: Creating Discriminated Unions for Type Narrowing\nDESCRIPTION: Demonstrates how to create discriminated unions with a common 'kind' property to identify different shapes. This pattern enables TypeScript to narrow down the type within conditional blocks.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/README.md#2025-04-22_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\ntype Triangle = { kind: \"triangle\"; base: number; height: number };\ntype Rectangle = { kind: \"rectangle\"; width: number; height: number };\ntype Shape = Triangle | Rectangle;\n\nfunction getArea(shape: Shape): number {\n  // 共通のプロパティkindを利用して型を判定する\n  switch (shape.kind) {\n    case \"triangle\":\n      // この節ではshapeがTriangle型に絞り込まれる\n      return (shape.base * shape.height) / 2;\n    case \"rectangle\":\n      //  この節ではshapeがRectangle型に絞り込まれる\n      return shape.width * shape.height;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Arrow Functions with Type Annotations\nDESCRIPTION: Shows how to define arrow functions with parameter and return type annotations. Type annotations help enforce correct usage of functions and improve code documentation.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/README.md#2025-04-22_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\nconst greet = (name: string): string => {\n  return `Hello ${name}`;\n};\n\nconsole.log(greet(\"John\"));\n// @log: 'Hello John'\n```\n\n----------------------------------------\n\nTITLE: Implementing Click Handler for React Like Button in TypeScript\nDESCRIPTION: This snippet demonstrates how to add a click handler to the like button. It defines a handleClick function that increments the count state using setCount, and attaches this function to the onClick event of the button.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/tutorials/react-like-button-tutorial.md#2025-04-22_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport \"./App.css\";\nimport { useState } from \"react\";\n\nfunction App() {\n  return (\n    <>\n      <LikeButton />\n    </>\n  );\n}\n\nfunction LikeButton() {\n  const [count, setCount] = useState(999);\n  const handleClick = () => {\n    setCount(count + 1);\n  };\n  return (\n    <span className=\"likeButton\" onClick={handleClick}>\n      ♥ {count}\n    </span>\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Basic async/await Usage in TypeScript\nDESCRIPTION: Demonstrates the basic usage of async/await with a simple asynchronous function that returns a Promise. The await keyword is used inside an async function to wait for the Promise to resolve.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/asynchronous/await.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction request(): Promise<string> {\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      resolve(\"hello\");\n    }, 1000);\n  });\n}\n\nasync function main() {\n  const result = await request();\n  console.log(result);\n  // @log: \"hello\"\n}\n\nmain();\n```\n\n----------------------------------------\n\nTITLE: Type Narrowing with Discriminated Union in TypeScript\nDESCRIPTION: This code demonstrates how discriminated unions simplify type narrowing. It uses an if-else structure to check the 'type' discriminator, allowing the compiler to infer the correct type in each branch.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/values-types-variables/discriminated-union.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nfunction printStatus(status: UploadStatus) {\n  if (status.type === \"InProgress\") {\n    console.log(`アップロード中:${status.progress}%`);\n  } else if (status.type === \"Success\") {\n    console.log(\"アップロード成功\", status);\n  } else if (status.type === \"Failure\") {\n    console.log(`アップロード失敗:${status.error.message}`);\n  } else {\n    console.log(\"不正なステータス: \", status);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Generic Type Constraints with extends Keyword in TypeScript\nDESCRIPTION: A properly constrained generic function that ensures the type parameter extends HTMLElement, guaranteeing the element will have a style property and enabling safe access to it.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/generics/type-parameter-constraint.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nfunction changeBackgroundColor<T extends HTMLElement>(element: T) {\n  element.style.backgroundColor = \"red\";\n  return element;\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating const Assignment Restriction in TypeScript\nDESCRIPTION: This snippet shows how const prevents reassignment of variables in TypeScript, resulting in a compilation error when attempting to reassign a const variable.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/values-types-variables/object/readonly-vs-const.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst x = 1;\nx = 2;\n```\n\n----------------------------------------\n\nTITLE: Implementing Static Typing in TypeScript Functions\nDESCRIPTION: Demonstrates how to use static typing in TypeScript by defining a simple sum function with typed parameters and return value.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/overview/features.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction sum(a: number, b: number): number {\n  return a + b;\n}\n```\n\n----------------------------------------\n\nTITLE: Comparing Interface and Type Alias Basic Declarations in TypeScript\nDESCRIPTION: Shows the basic syntax of declaring the same structure using both interface and type alias. Both methods define an Animal type with a name property and bark method.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/object-oriented/interface/interface-vs-type-alias.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// @noErrors\ninterface Animal {\n  name: string;\n  bark(): string;\n}\ntype Animal = {\n  name: string;\n  bark(): string;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining a User-Defined Type Guard Function in TypeScript\nDESCRIPTION: This snippet demonstrates how to create a user-defined type guard function using a type predicate. The function 'isDuck' checks if an Animal object is actually a Duck.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/functions/type-guard-functions.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction isDuck(animal: Animal): animal is Duck {\n  return animal instanceof Duck;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Numeric Literal Types as Discriminators in TypeScript\nDESCRIPTION: This example shows how numeric literal types can be used as discriminators in a union type. It defines a type for HTTP status codes and demonstrates type narrowing based on these codes.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/values-types-variables/discriminated-union.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ntype OkOrBadRequest =\n  | { statusCode: 200; value: string }\n  | { statusCode: 400; message: string };\n\nfunction handleResponse(x: OkOrBadRequest) {\n  if (x.statusCode === 200) {\n    console.log(x.value);\n  } else {\n    console.log(x.message);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Interface Inheritance in TypeScript\nDESCRIPTION: Demonstrates how interfaces can extend other interfaces and type aliases. The Dog interface extends both Animal interface and Creature type alias.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/object-oriented/interface/interface-vs-type-alias.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Animal {\n  name: string;\n}\ntype Creature = {\n  dna: string;\n};\ninterface Dog extends Animal, Creature {\n  dogType: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Type Checking with Mapped Types in TypeScript\nDESCRIPTION: Shows how Mapped Types prevent using unsupported languages in object definition.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/type-reuse/mapped-types.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst butterflies: Butterfly = {\n  en: \"Butterfly\",\n  fr: \"Papillon\",\n  it: \"Farfalla\",\n  es: \"Mariposa\",\n  de: \"Schmetterling\",\n};\n```\n\n----------------------------------------\n\nTITLE: Generic Component Definition in TypeScript React\nDESCRIPTION: Defining a React component with generic types. This enables creating reusable components that can work with different data types.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/jsx/README.md#2025-04-22_snippet_21\n\nLANGUAGE: tsx\nCODE:\n```\ntype ItemType<T> = {\n  prop: T;\n};\n\nconst Item = <T,>({ prop }: ItemType<T>) => <>{prop}</>;\n```\n\n----------------------------------------\n\nTITLE: Defining Flatten<T> Type Using infer in TypeScript\nDESCRIPTION: This snippet defines a Flatten<T> type that uses infer to extract the element type of an array or return never for non-array types.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/type-reuse/infer.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ntype Flatten<T> = T extends (infer U)[] ? U : never;\n```\n\n----------------------------------------\n\nTITLE: Destructuring Non-existent Array Elements in JavaScript\nDESCRIPTION: Shows how JavaScript handles destructuring of non-existent array elements, assigning undefined to the variables without throwing an error.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/values-types-variables/array/destructuring-assignment-from-array.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst oneToFive = [1, 2];\nconst [one, two, three] = oneToFive;\nconsole.log(three);\n// @log: undefined\n```\n\n----------------------------------------\n\nTITLE: Declaring Readonly Array using readonly keyword in TypeScript\nDESCRIPTION: This snippet shows how to declare a readonly array of numbers using the 'readonly' keyword in TypeScript. It creates an immutable array that cannot be modified at compile-time.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/values-types-variables/array/readonly-array.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst nums: readonly number[] = [1, 2, 3];\n```\n\n----------------------------------------\n\nTITLE: Awaiting an Async Function in TypeScript\nDESCRIPTION: Demonstrates how to await an async function, which implicitly returns a Promise. The result of the await expression is the resolved value of the Promise.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/asynchronous/await.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nasync function request(): Promise<string> {\n  return \"hello\";\n}\n\nasync function main() {\n  const result = await request();\n  console.log(result);\n  // @log: \"hello\"\n}\n```\n\n----------------------------------------\n\nTITLE: Error Handling with satisfies Operator in TypeScript\nDESCRIPTION: Illustrates how both type annotations and the 'satisfies' operator handle type errors and prevent adding non-existent properties to objects.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/values-types-variables/satisfies.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// @errors: 2322 2353\nconst pikachu: Pokemon = {\n  name: \"pikachu\",\n  no: 25,\n  genre: \"mouse pokémon\",\n  height: \"0.4m\",\n  weight: \"6.0kg\",\n};\nconst raichu = {\n  name: \"raichu\",\n  no: 26,\n  genre: \"mouse pokémon\",\n  height: \"0.8m\",\n  weight: \"30.0kg\",\n} satisfies Pokemon;\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// @errors: 2353\nconst pikachu: Pokemon = {\n  name: \"pikachu\",\n  no: 25,\n  genre: \"mouse pokémon\",\n  height: 0.4,\n  weight: 6.0,\n  type: \"electric\",\n};\nconst raichu = {\n  name: \"raichu\",\n  no: 26,\n  genre: \"mouse pokémon\",\n  height: 0.8,\n  weight: 30.0,\n  type: \"electric\",\n} satisfies Pokemon;\n```\n\n----------------------------------------\n\nTITLE: Defining Union Types in TypeScript\nDESCRIPTION: Shows how to use the union type operator (|) to create types that can be one of several types.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/symbols-and-keywords.md#2025-04-22_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\ntype ID = string | number;\nconst id1 = \"e29b41\"; // OK\nconst id2 = 100; // OK\nconst id3 = true; // ERROR\n```\n\n----------------------------------------\n\nTITLE: Accessing Protected Members from Subclass in TypeScript\nDESCRIPTION: Shows how a subclass can access and override protected methods from its parent class. The example creates a Gorilla subclass that extends Animal and accesses the protected move method through the super keyword.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/object-oriented/class/access-modifiers.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nclass Animal {\n  public name: string;\n\n  public constructor(theName: string) {\n    this.name = theName;\n  }\n\n  // `public`から`protected`に変更\n  protected move(distanceInMeters: number) {\n    console.log(`${this.name} moved ${distanceInMeters}m.`);\n  }\n}\n\nclass Gorilla extends Animal {\n  move(distanceInMeters: number) {\n    super.move(distanceInMeters * 10);\n  }\n}\n\nconst gorilla = new Gorilla(\"速いゴリラ\");\ngorilla.move(10);\n// @log: \"速いゴリラ moved 100m.\"\n```\n\n----------------------------------------\n\nTITLE: Using a Type Guard Function for Type Narrowing in TypeScript\nDESCRIPTION: This example shows how a type guard function is used to narrow the type of a variable within a conditional block. The 'quacks' method becomes accessible after the type guard.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/functions/type-guard-functions.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst animal = new Animal();\n// ここではquacks()は存在しない\nanimal.quacks();\n\nif (isDuck(animal)) {\n  animal.quacks();\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Assigning Methods to Variables and TypeScript Context Checking\nDESCRIPTION: This code shows how TypeScript handles method assignments differently depending on the 'this' parameter. The Female class's toString method requires a Female context, preventing incorrect usage when assigned to a variable.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/functions/this-parameters.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst maleToStr: () => string = male.toString;\nconst femaleToStr: (this: Female) => string = female.toString;\n\nmaleToStr();\nfemaleToStr();\n```\n\n----------------------------------------\n\nTITLE: Using Optional Parameters in Functions\nDESCRIPTION: Shows how to define optional parameters in functions using the question mark (?) syntax. Optional parameters can be omitted when calling the function.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/README.md#2025-04-22_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\nfunction greet(name?: string) {\n  if (name === undefined) {\n    return \"Hello!\";\n  } else {\n    return `Hello ${name}!`;\n  }\n}\n\nconsole.log(greet(\"John\"));\n// @log: 'Hello John!'\nconsole.log(greet());\n// @log: 'Hello!'\n```\n\n----------------------------------------\n\nTITLE: Basic keyof Usage with Single Property Object\nDESCRIPTION: Demonstrates how keyof extracts property names as type from an object with a single property.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/type-reuse/keyof-type-operator.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype Person = {\n  name: string;\n};\ntype PersonKey = keyof Person;\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Strict Equality (===) in JavaScript\nDESCRIPTION: This snippet shows examples of strict equality comparisons in JavaScript, highlighting cases where types differ but values might be considered similar.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/values-types-variables/equality.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log(null === undefined);\n// @log: false\nconsole.log(0 === 0n);\n// @log: false\nconsole.log(0 === \"0\");\n// @log: false\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Compile-Time Error on Readonly Array Modification in TypeScript\nDESCRIPTION: This snippet illustrates that attempting to use mutable array methods like 'push' on a readonly array results in a compile-time error in TypeScript.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/values-types-variables/array/readonly-array.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// @errors: 2339\nconst nums: readonly number[] = [1, 2, 3];\nnums.push(4);\n```\n\n----------------------------------------\n\nTITLE: Awaiting a Promise Directly in TypeScript\nDESCRIPTION: Illustrates how to await a Promise directly without wrapping it in a function. This can be useful for one-off asynchronous operations.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/asynchronous/await.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nasync function main() {\n  // 1秒後に値を返す\n  await new Promise((resolve) => {\n    setTimeout(() => resolve, 1000);\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Object Type Narrowing\nDESCRIPTION: Demonstrates type narrowing for object types with property checks\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/statements/unknown.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nfunction isEmail(value: unknown): value is Email {\n  if (typeof value !== \"object\" || value === null) {\n    return false;\n  }\n  const email = value as Record<keyof Email, unknown>;\n  if (typeof email.from !== \"string\") {\n    return false;\n  }\n  if (typeof email.to !== \"string\") {\n    return false;\n  }\n  if (typeof email.title !== \"string\") {\n    return false;\n  }\n  return typeof email.subject === \"string\";\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Enums in TypeScript\nDESCRIPTION: Demonstrates how to define an enumeration type in TypeScript using the enum keyword. Enums allow defining a set of named constants.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/README.md#2025-04-22_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nenum Color {\n  Red,\n  Green,\n  Blue,\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Method Chaining in Operator Class in TypeScript\nDESCRIPTION: Refactored Operator class where each method returns the class instance (this) to enable method chaining for a more fluent interface.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/object-oriented/class/return-this-type.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nclass Operator {\n  protected value: number;\n\n  public constructor(value: number) {\n    this.value = value;\n  }\n\n  public sum(value: number): Operator {\n    this.value += value;\n    return this;\n  }\n\n  public subtract(value: number): Operator {\n    this.value -= value;\n    return this;\n  }\n\n  public multiply(value: number): Operator {\n    this.value *= value;\n    return this;\n  }\n\n  public divide(value: number): Operator {\n    this.value /= value;\n    return this;\n  }\n}\n\nconst op: Operator = new Operator(0);\nop.sum(5).subtract(3).multiply(6).divide(3); // 4\n```\n\n----------------------------------------\n\nTITLE: Defining a Discriminated Union Type in TypeScript\nDESCRIPTION: This snippet shows how to rewrite the 'UploadStatus' as a discriminated union type. It introduces a 'type' property as the discriminator, using string literal types.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/values-types-variables/discriminated-union.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ntype UploadStatus = InProgress | Success | Failure;\ntype InProgress = { type: \"InProgress\"; progress: number };\ntype Success = { type: \"Success\" };\ntype Failure = { type: \"Failure\"; error: Error };\n```\n\n----------------------------------------\n\nTITLE: Comparing Type Guard and Non-Type Guard Functions in TypeScript\nDESCRIPTION: This example compares a function with a type predicate annotation (type guard) and a function that simply returns a boolean. It demonstrates how type narrowing works with type guards but not with regular boolean functions.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/functions/type-guard-functions.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nfunction typeGuard(x: unknown): x is number {\n  return typeof x === \"number\";\n}\nfunction notTypeGuard(x: unknown): boolean {\n  return typeof x === \"number\";\n}\n\ndeclare const input: number | string;\n\nif (typeGuard(input)) {\n  input;\n  // ^?\n} else {\n  input;\n  // ^?\n}\n\nif (notTypeGuard(input)) {\n  input;\n  // ^?\n} else {\n  input;\n  // ^?\n}\n```\n\n----------------------------------------\n\nTITLE: Type Predicate Inference in TypeScript 5.5\nDESCRIPTION: This snippet shows a new feature in TypeScript 5.5 where type predicates can be inferred without explicit annotation. The function 'noAnnotation' is inferred to have a type predicate 'x is number'.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/functions/type-guard-functions.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nfunction noAnnotation(x: unknown) {\n  return typeof x === \"number\";\n}\n```\n\n----------------------------------------\n\nTITLE: Iterating Over an Array with for-of Loop in JavaScript\nDESCRIPTION: Shows how to use a for-of loop to iterate over an array of numbers, logging each number to the console.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/statements/for-of.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst numbers = [1, 2, 3];\nfor (const n of numbers) {\n  console.log(n);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining SystemSupportLanguage Union Type in TypeScript\nDESCRIPTION: Creates a union type for supported system languages.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/type-reuse/mapped-types.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype SystemSupportLanguage = \"en\" | \"fr\" | \"it\" | \"es\";\n```\n\n----------------------------------------\n\nTITLE: Unsafe Property Access with any Type in TypeScript\nDESCRIPTION: This example shows how using 'any' type can lead to runtime errors by allowing access to non-existent nested properties without compile-time checks.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/statements/any-vs-unknown.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconsole.log(any6.x.y.z);\n// @error: Cannot read property 'z' of undefined\n```\n\n----------------------------------------\n\nTITLE: Declaring Object Types in TypeScript\nDESCRIPTION: This snippet demonstrates how to declare variables with object, Object, and {} types in TypeScript. It shows the basic syntax for these type annotations.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/values-types-variables/object/difference-among-object-and-object.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nlet a: object;\nlet b: Object;\nlet c: {};\n```\n\n----------------------------------------\n\nTITLE: Initializing State for React Like Button in TypeScript\nDESCRIPTION: This snippet shows how to use the useState hook to manage the count state for a like button. It imports useState from React and initializes the count with a value of 999.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/tutorials/react-like-button-tutorial.md#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport \"./App.css\";\nimport { useState } from \"react\"; // この行を追加\n\nfunction App() {\n  return (\n    <>\n      <LikeButton />\n    </>\n  );\n}\n\nfunction LikeButton() {\n  const [count, setCount] = useState(999); // このように書き換える\n  return <span className=\"likeButton\">♥ {count}</span>;\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Using Union Types for Variable Flexibility\nDESCRIPTION: Shows how to use union types to allow a variable to hold values of different types. The pipe (|) operator combines multiple types into a union type.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/README.md#2025-04-22_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nlet value: boolean | number;\nvalue = true; // 代入できる\nvalue = 100; // 代入できる\n```\n\n----------------------------------------\n\nTITLE: Defining Method Interface in TypeScript\nDESCRIPTION: Demonstrates how to define an interface with method signatures in TypeScript. The interface specifies two methods: one without parameters returning void and another accepting a string parameter returning void.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/object-oriented/interface/README.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface SomeInterface {\n  method1(): void;\n  method2(arg: string): void;\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Types for Individual Properties in TypeScript\nDESCRIPTION: This snippet demonstrates how to specify a type for a specific property when deriving a type from an object. It shows how to create a union type for the 'plan' property while keeping other properties flexible.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/tips/generates-type-from-object.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst account = {\n  accountName: \"yyts\",\n  password: \"ccbyncsa30\",\n  age: 80,\n  plan: \"Standard\" as \"Free\" | \"Standard\" | \"Premium\",\n};\n\ntype Account = typeof account;\n//   ^?\n```\n\n----------------------------------------\n\nTITLE: Using Interfaces with Structural Typing in TypeScript\nDESCRIPTION: Demonstrates how TypeScript's structural typing allows objects to implement interfaces implicitly without class inheritance. This example shows an object literal conforming to a Person interface based on matching structure.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/object-oriented/interface/README.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Person {\n  name: string;\n  age: number;\n}\n\nconst taro: Person = {\n  name: \"太郎\",\n  age: 12,\n};\n```\n\n----------------------------------------\n\nTITLE: Array Type Narrowing\nDESCRIPTION: Shows how to narrow unknown type to array type using Array.isArray()\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/statements/unknown.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nfunction isNumberArray(value: unknown): value is number[] {\n  if (!Array.isArray(value)) {\n    return false;\n  }\n  return value.every((e) => typeof e === \"number\");\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Type Definition File Generation in TypeScript\nDESCRIPTION: Configure tsconfig.json to generate .d.ts files alongside compiled JavaScript files. This setting allows package users to benefit from TypeScript type information.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/advanced-topics/tsconfig-for-npm-package-developers.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"declaration\": true,\n/* Generates corresponding '.d.ts' file. */\n```\n\n----------------------------------------\n\nTITLE: Using Boolean Literal Types as Discriminators in TypeScript\nDESCRIPTION: This snippet demonstrates the use of boolean literal types as discriminators in a union type. It defines a type with 'isOK' as the discriminator and shows how to narrow types based on this boolean value.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/values-types-variables/discriminated-union.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ntype OkOrNotOk = \n  | { isOK: true; value: string } \n  | { isOK: false; error: string };\n\nfunction handleStatus(x: OkOrNotOk) {\n  if (x.isOK) {\n    console.log(x.value);\n  } else {\n    console.log(x.error);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Tuple Type for Function Return in TypeScript\nDESCRIPTION: Shows how to declare a tuple type for a function's return value, providing type safety for multiple return values.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/values-types-variables/tuple.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfunction tuple(): [number, string, boolean] {\n  //...\n  return [1, \"ok\", true];\n}\n```\n\n----------------------------------------\n\nTITLE: Nested Array Destructuring in TypeScript\nDESCRIPTION: Illustrates how to destructure nested arrays in TypeScript, extracting elements from a two-dimensional array structure.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/values-types-variables/array/destructuring-assignment-from-array.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst twoByTwo = [\n  [1, 2],\n  [3, 4],\n];\nconst [[one, two], [three]] = twoByTwo;\nconsole.log(one);\n// @log: 1\nconsole.log(two);\n// @log: 2\nconsole.log(three);\n// @log: 3\n```\n\n----------------------------------------\n\nTITLE: 複数の型変数を持つジェネリック関数\nDESCRIPTION: 2つの型変数T、Uを持つcompare関数の例です。複数の型変数を使用する場合のよくある命名パターンを示しています。\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/generics/type-variables.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nfunction compare<T, U>(a: T, b: U) {}\n```\n\n----------------------------------------\n\nTITLE: Using Generics in TypeScript Functions\nDESCRIPTION: Shows the implementation of a generic identity function in TypeScript, allowing for type-safe reusable code across different data types.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/overview/features.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfunction identity<T>(arg: T): T {\n  return arg;\n}\n```\n\n----------------------------------------\n\nTITLE: Equivalent Constructor-based Initialization in TypeScript\nDESCRIPTION: Shows how field initializers are equivalent to initializing fields in the constructor. Both approaches achieve the same result of setting initial values for class fields.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/object-oriented/class/field-initializers.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nclass Point {\n  x: number;\n  y: number;\n\n  constructor() {\n    this.x = 0;\n    this.y = 0;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Field Interface in TypeScript\nDESCRIPTION: Shows how to define an interface with a public field in TypeScript. Unlike some other languages, TypeScript interfaces can specify both methods and fields.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/object-oriented/interface/README.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninterface SomeInterface {\n  field: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Type Inference for Fields in TypeScript\nDESCRIPTION: Demonstrates how TypeScript infers field types when values are assigned in the constructor even without explicit type annotations.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/object-oriented/class/fields.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nclass Person {\n  private name;\n\n  constructor(name: string) {\n    this.name = name;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Returning Multiple Values Using Tuple in TypeScript\nDESCRIPTION: Demonstrates how to return multiple values of different types from a function using a tuple in TypeScript.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/values-types-variables/tuple.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction tuple() {\n  //...\n  return [1, \"ok\", true];\n}\n```\n\n----------------------------------------\n\nTITLE: Strict Type Checking with strictBindCallApply Enabled\nDESCRIPTION: This example shows how TypeScript performs strict type checking on call method arguments when strictBindCallApply is true. It catches type mismatches at compile-time.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/tsconfig/strictbindcallapply.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// @errors: 2345\nfunction fn(x: string) {}\nfn.call(undefined, 123);\n```\n\n----------------------------------------\n\nTITLE: Comparing readonly and const assertion with nested objects in TypeScript\nDESCRIPTION: This code demonstrates the difference between readonly properties and const assertion when dealing with nested objects, showing how readonly doesn't affect nested properties.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/values-types-variables/const-assertion.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ntype Country = {\n  name: string;\n  capitalCity: string;\n};\n\ntype Continent = {\n  readonly name: string;\n  readonly canada: Country;\n  readonly us: Country;\n  readonly mexico: Country;\n};\n\nconst america: Continent = {\n  name: \"North American Continent\",\n  canada: {\n    name: \"Republic of Canada\",\n    capitalCity: \"Ottawa\",\n  },\n  us: {\n    name: \"United States of America\",\n    capitalCity: \"Washington, D.C.\",\n  },\n  mexico: {\n    name: \"United Mexican States\",\n    capitalCity: \"Mexico City\",\n  },\n};\n\namerica.canada.name = \"Republic of Côte d'Ivoire\";\namerica.canada.capitalCity = \"Yamoussoukro\";\n```\n\n----------------------------------------\n\nTITLE: Creating and Using Map Objects in TypeScript\nDESCRIPTION: Demonstrates how to create and use Map objects in TypeScript. Maps allow storing key-value pairs where keys can be of any type, including objects.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/README.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst map = new Map();\nmap.set(\"name\", \"John\");\nmap.set(\"age\", \"20\");\n\nconsole.log(map.get(\"name\"));\n// @log: 'John'\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Implicit 'any' in TypeScript Functions\nDESCRIPTION: This snippet shows how TypeScript implicitly assigns 'any' type to function parameters without type annotations. It illustrates potential runtime errors when passing unexpected types to such functions.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/values-types-variables/any.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nfunction hello(name) {\n  //           ^?\n  console.log(`Hello, ${name.toUpperCase()}`);\n}\n\n// @error: name.toUpperCase is not a function\nhello(1);\n// @noImplicitAny: false\n```\n\n----------------------------------------\n\nTITLE: JSX Expressions with Variables in TypeScript React\nDESCRIPTION: Embedding JavaScript expressions within JSX using curly braces. This example shows how to include a variable's value in a heading element.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/jsx/README.md#2025-04-22_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nconst name = \"Josh Perez\";\nconst greeting = <h1>Hello, {name}</h1>;\n// 描画結果: <h1>Hello, <!-- -->Josh Perez</h1>\n```\n\n----------------------------------------\n\nTITLE: Extracting Point Type Using typeof in TypeScript\nDESCRIPTION: This snippet demonstrates how to use the typeof type operator to define a Point type based on an existing point object. It shows how TypeScript infers the structure of the object and creates a corresponding type.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/type-reuse/typeof-type-operator.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst point = { x: 135, y: 35 };\ntype Point = typeof point;\n//   ^?\n```\n\n----------------------------------------\n\nTITLE: Using entries() Method with for-of Loop in JavaScript\nDESCRIPTION: Demonstrates how to use the entries() method with a for-of loop to iterate over an array, accessing both the index and value of each element.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/statements/for-of.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst words = [\"I\", \"love\", \"TypeScript\"];\nfor (const [index, word] of words.entries()) {\n  console.log(index, word);\n}\n// @log: 0 I\n\n// @log: 1 love\n\n// @log: 2 TypeScript\n```\n\n----------------------------------------\n\nTITLE: Defining Public Access Modifier in TypeScript Classes\nDESCRIPTION: Demonstrates how to use the public access modifier with fields, constructors, and methods in a TypeScript class. Public members can be accessed from anywhere, and omitting an access modifier defaults to public.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/object-oriented/class/access-modifiers.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Animal {\n  public name: string; // フィールドにpublicアクセス修飾子\n\n  // コンストラクターにpublicアクセス修飾子\n  public constructor(theName: string) {\n    this.name = theName;\n  }\n\n  // メソッドにpublicアクセス修飾子\n  public move(distanceInMeters: number) {\n    console.log(`${this.name} moved ${distanceInMeters}m.`);\n    // publicアクセス修飾子である`this.name`を使用することが可能\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Field Initialization in TypeScript Classes\nDESCRIPTION: Demonstrates basic field initialization using initializers in TypeScript. The initializer syntax assigns default values to class fields which are applied when instances are created.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/object-oriented/class/field-initializers.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Point {\n  x: number = 0;\n  y: number = 0;\n}\nconst point = new Point();\nconsole.log(point.x, point.y);\n// @log: 0 0\n```\n\n----------------------------------------\n\nTITLE: Basic Array Destructuring in TypeScript\nDESCRIPTION: Demonstrates how to use array destructuring to assign values from an array to individual variables. It also shows how TypeScript infers types for the destructured variables.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/values-types-variables/array/destructuring-assignment-from-array.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst oneToFive = [1, 2, 3, 4, 5];\nconst [one, two, three] = oneToFive;\nconsole.log(one);\n// @log: 1\nconsole.log(two);\n// @log: 2\nconsole.log(three);\n// @log: 3\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst oneToFive = [1, 2, 3, 4, 5];\nconst [one, two, three] = oneToFive;\nconst num: number = one; // oneはnumber型になるので代入できる\n```\n\n----------------------------------------\n\nTITLE: Basic Optional Parameter Syntax in TypeScript\nDESCRIPTION: Demonstrates the basic syntax for declaring optional parameters using the question mark (?) syntax.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/functions/optional-parameters.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction 関数名(引数名?: 型) {}\n```\n\n----------------------------------------\n\nTITLE: Using noFallthroughCasesInSwitch to Detect Fallthrough in TypeScript\nDESCRIPTION: This example demonstrates how enabling the noFallthroughCasesInSwitch compiler option in TypeScript can help detect and warn about fallthrough cases in switch statements, which can prevent potential bugs.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/statements/switch-fallthrough.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// @noFallthroughCasesInSwitch: true\n// @errors: 7029\nlet s = \"A\";\nswitch (s) {\n  case \"A\":\n    console.log(1);\n  case \"B\":\n    console.log(2);\n}\n```\n\n----------------------------------------\n\nTITLE: Safe Array Iteration Without Undefined Checks\nDESCRIPTION: Shows alternative methods for iterating through arrays that don't require undefined checks, even with noUncheckedIndexedAccess enabled. These methods (for-of loops and forEach) provide type safety without the need for union types.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/tsconfig/nouncheckedindexedaccess.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst phoneticCodes: string[] = [\"alpha\", \"bravo\", \"charlie\"];\n\nfor (const p of phoneticCodes) {\n  // ...\n}\n\nphoneticCodes.forEach((p: string) => {\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Index Signatures in TypeScript\nDESCRIPTION: Illustrates how to use index signatures to define object types with dynamic keys in TypeScript.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/symbols-and-keywords.md#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\ntype StringKeysAndStringValues = {\n  [key: string]: string;\n};\n```\n\n----------------------------------------\n\nTITLE: Conditional Rendering with Ternary Operator in JSX\nDESCRIPTION: Using the ternary operator for conditional rendering in JSX. This allows different content to be displayed based on a condition.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/jsx/README.md#2025-04-22_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\nconst isUser = true;\nconst greeting = isUser ? <h1>Welcome back!</h1> : <h1>Please sign up.</h1>;\n```\n\n----------------------------------------\n\nTITLE: Using Public Members Outside the Class in TypeScript\nDESCRIPTION: Shows how public members of a class can be accessed and modified from outside the class through an instance. The example demonstrates creating an Animal instance and accessing its public properties and methods.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/object-oriented/class/access-modifiers.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst gorilla = new Animal(\"ゴリラ\");\ngorilla.move(10);\n// @log: \"ゴリラ moved 10m.\"\ngorilla.name = \"ゴリラゴリラ\";\ngorilla.move(20);\n// @log: \"ゴリラゴリラ moved 20m.\"\n```\n\n----------------------------------------\n\nTITLE: Conditional Logic with Optional Parameters\nDESCRIPTION: Shows how to handle optional parameters using conditional logic for different scenarios.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/functions/optional-parameters.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nfunction hello(person?: string) {\n  if (typeof person === \"undefined\") {\n    return \"Hello ANONYMOUS\";\n  }\n  return \"Hello \" + person.toUpperCase();\n}\n```\n\n----------------------------------------\n\nTITLE: Combining const and readonly for Immutable Objects in TypeScript\nDESCRIPTION: This snippet demonstrates how combining const and readonly can create an immutable object in TypeScript, preventing both variable reassignment and property modification.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/values-types-variables/object/readonly-vs-const.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst obj: { readonly x: number } = { x: 1 };\nobj = { x: 2 };\nobj.x = 2;\n```\n\n----------------------------------------\n\nTITLE: Basic JSX Element in TypeScript React\nDESCRIPTION: Creating a simple self-closing JSX element in TypeScript React. This demonstrates the basic syntax for defining a standalone element.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/jsx/README.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst element = <br />;\n// 描画結果: <br/>\n```\n\n----------------------------------------\n\nTITLE: Defining Object Methods in TypeScript\nDESCRIPTION: Demonstrates how to define methods within object literals in TypeScript. The method can access other properties of the object using the 'this' keyword.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/README.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst obj = {\n  a: 1,\n  b: 2,\n  sum(): number {\n    return this.a + this.b;\n  },\n};\nconsole.log(obj.sum());\n// @log: 3\n```\n\n----------------------------------------\n\nTITLE: Handling Rejected Promises with await in TypeScript\nDESCRIPTION: Demonstrates how to handle rejected Promises using await within a try-catch block. The error is caught within the function, allowing for local error handling.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/asynchronous/await.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nasync function request(): Promise<unknown> {\n  throw new Error(\"error\");\n}\n\nasync function main(): Promise<unknown> {\n  try {\n    // return await とすることでcatchで例外を捕捉できる\n    return await request();\n  } catch {\n    console.log(\"error\");\n    // @log: error\n  } finally {\n    console.log(\"finally\");\n    // @log: finally\n  }\n}\n\nmain()\n  .then(() => {\n    console.log(\"then\");\n    // @log: then\n  })\n  .catch(() => {\n    console.log(\"catch\");\n  });\n```\n\n----------------------------------------\n\nTITLE: Demonstration of Method Chaining Issues with Class Inheritance\nDESCRIPTION: Code example showing why explicit return types break method chaining when working with inherited classes. The parent methods return the parent type, which doesn't have the child's methods.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/object-oriented/class/return-this-type.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst op: NewOperator = new NewOperator(2);\nop.power(3).multiply(2).power(3);\n```\n\n----------------------------------------\n\nTITLE: Improved Autocompletion with strictBindCallApply Enabled\nDESCRIPTION: This example shows the benefit of improved autocompletion when strictBindCallApply is true. The return value of the call method has the correct type, enabling proper method suggestions.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/tsconfig/strictbindcallapply.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// @noErrors\nfunction fn(): string {\n  return \"str\";\n}\nconst str = fn.call(undefined);\nstr.toU;\n//     ^|\n```\n\n----------------------------------------\n\nTITLE: Type Intersection as Alternative to Inheritance in TypeScript\nDESCRIPTION: Shows how type aliases use intersection types (&) to achieve functionality similar to inheritance. The Dog type combines Animal, Creature, and additional properties.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/object-oriented/interface/interface-vs-type-alias.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ntype Animal = {\n  name: string;\n};\ntype Creature = {\n  dna: string;\n};\ntype Dog = Animal &\n  Creature & {\n    dogType: string;\n  };\n```\n\n----------------------------------------\n\nTITLE: Illustrating Type Check Bypass with 'any' in TypeScript\nDESCRIPTION: This example demonstrates how using 'any' type can lead to runtime errors by bypassing TypeScript's type checking. It shows assigning a number to an 'any' variable and attempting to call a string method on it.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/values-types-variables/any.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst str: any = 123;\nstr.toLowerCase();\n// @error: TypeError: str.toLowerCase is not a function\n```\n\n----------------------------------------\n\nTITLE: Uninitialized Fields with Strict Null Checks\nDESCRIPTION: Shows how strict null checks and property initialization flags cause errors for uninitialized fields in TypeScript classes.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/object-oriented/class/fields.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nclass Person {\n  name: string;\n}\nconst alice = new Person();\nconsole.log(alice.name);\n// @log: undefined\n// @errors: 2564\n```\n\n----------------------------------------\n\nTITLE: Creating RegExp Objects in TypeScript\nDESCRIPTION: Demonstrates two ways to create RegExp objects: using literal notation and the RegExp constructor. Both methods produce equivalent regular expressions.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/builtin-api/regexp.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst regexp1 = /0(8|9)0-[0-9]{4}-[0-9]{4}/g;\nconst regexp2 = new RegExp(\"0(8|9)0-[0-9]{4}-[0-9]{4}\", \"g\");\n```\n\n----------------------------------------\n\nTITLE: Implementing a Function with Regular Union Type in TypeScript\nDESCRIPTION: This code demonstrates the complexity of type narrowing when using a regular union type. It shows how multiple checks are needed to safely access properties.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/values-types-variables/discriminated-union.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfunction printStatus(status: UploadStatus) {\n  if (status.done === false && \"progress\" in status) {\n    console.log(`アップロード中:${status.progress}%`);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Spread Syntax with Rest Parameters in TypeScript\nDESCRIPTION: 配列を残余引数として渡す際のスプレッド構文の使用方法を示しています。Math.max()関数を例に、配列を直接渡す場合と、スプレッド構文を使用する場合の違いを説明しています。\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/functions/rest-parameters.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// @errors: 2345\nconst scores: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nconst highest = Math.max(scores);\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst scores: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nconst highest = Math.max(...scores);\n```\n\n----------------------------------------\n\nTITLE: JSX Attributes in TypeScript React\nDESCRIPTION: Demonstrating standard HTML-like attributes in JSX elements. Examples show how to add src and alt attributes to an img element and href to an anchor element.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/jsx/README.md#2025-04-22_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nconst element1 = <img src=\"image.jpg\" alt=\"A beautiful scene\" />;\nconst element2 = <a href=\"http://example.com\">Visit our website</a>;\n```\n\n----------------------------------------\n\nTITLE: JSX Boolean Attributes in TypeScript React\nDESCRIPTION: Demonstrating boolean attributes in JSX. Both the shorthand and explicit forms are shown for enabling an attribute like 'disabled'.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/jsx/README.md#2025-04-22_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nconst element = <input disabled />;\n// 描画結果: <input disabled=''/>\n```\n\n----------------------------------------\n\nTITLE: Demonstrating immutability with const assertion in TypeScript\nDESCRIPTION: This code snippet shows how const assertion prevents reassignment of array elements and object properties, making them readonly.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/values-types-variables/const-assertion.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\narray1[0] = 4;\narray2[0] = 4;\nobj1.name = \"raichu\";\nobj2.name = \"raichu\";\n```\n\n----------------------------------------\n\nTITLE: Checking for NaN in TypeScript\nDESCRIPTION: This function demonstrates how to check if a value is NaN by exploiting the unique property that NaN is not equal to itself.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/values-types-variables/equality.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nfunction isNaN(value: unknown): boolean {\n  return value !== value;\n}\n\nconsole.log(isNaN(1));\n// @log: false\nconsole.log(isNaN(NaN));\n// @log: true\n```\n\n----------------------------------------\n\nTITLE: keyof with Mapped Types\nDESCRIPTION: Demonstrates using keyof with mapped types to extract the literal union type of keys.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/type-reuse/keyof-type-operator.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ntype MapLike = { [K in \"x\" | \"y\" | \"z\"]: any };\ntype MapKeys = keyof MapLike;\n```\n\n----------------------------------------\n\nTITLE: Creating an Exhaustiveness Check Error Class in TypeScript\nDESCRIPTION: This snippet defines a custom error class for exhaustiveness checking, which takes a never type as its constructor argument.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/statements/never.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nclass ExhaustiveError extends Error {\n  constructor(value: never, message = `Unsupported type: ${value}`) {\n    super(message);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: BigInt Object JSON Serialization Error\nDESCRIPTION: Demonstrates the TypeError that occurs when attempting to serialize an object containing a bigint value using JSON.stringify().\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/values-types-variables/bigint.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nJSON.stringify({ x: 12n });\n// @error: TypeError: Do not know how to serialize a BigInt\n```\n\n----------------------------------------\n\nTITLE: Accessing Properties and Methods on any Type in TypeScript\nDESCRIPTION: This snippet shows that properties and methods can be accessed on values of type 'any' without type checking, which can lead to runtime errors if not used carefully.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/statements/any-vs-unknown.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconsole.log(any4.toFixed());\n// @log: 1\nconsole.log(any5.length);\n// @log: 18\nconsole.log(any6.name);\n// @log: \"origin\"\n```\n\n----------------------------------------\n\nTITLE: 型引数を明示的に指定したジェネリック関数の呼び出し\nDESCRIPTION: ジェネリック関数printAndReturnを呼び出す際に、型引数numberを明示的に指定する例です。\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/generics/type-variables.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst value = printAndReturn<number>(123);\n```\n\n----------------------------------------\n\nTITLE: Using typeof to Generate Type from Object in TypeScript\nDESCRIPTION: This snippet demonstrates how to use the TypeScript 'typeof' operator to derive a type from an existing object. This is useful when working with legacy JavaScript code where types are not explicitly defined.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/tips/generates-type-from-object.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst account = {\n  accountName: \"yyts\",\n  password: \"ccbyncsa30\",\n  age: 80,\n  plan: \"Standard\",\n};\n\ntype Account = typeof account;\n//   ^?\n```\n\n----------------------------------------\n\nTITLE: Basic for-of Loop Syntax in JavaScript\nDESCRIPTION: Demonstrates the basic syntax of a for-of loop in JavaScript. It iterates over elements of an array without explicitly accessing the index.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/statements/for-of.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfor (変数 of 配列) {\n  文;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Array.map for List Rendering in JSX\nDESCRIPTION: Using Array.prototype.map to render a list of items in JSX. This demonstrates how to create multiple elements from an array.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/jsx/README.md#2025-04-22_snippet_16\n\nLANGUAGE: tsx\nCODE:\n```\nconst numbers = [1, 2, 3];\nconst list = (\n  <ul>\n    {numbers.map((number) => (\n      <li key={number.toString()}>{number}</li>\n    ))}\n  </ul>\n);\n// 描画結果: <ul><li>1</li><li>2</li><li>3</li></ul>\n```\n\n----------------------------------------\n\nTITLE: JSX className Attribute in TypeScript React\nDESCRIPTION: Showing how to use className in JSX instead of the HTML class attribute, as class is a reserved keyword in JavaScript.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/jsx/README.md#2025-04-22_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nconst element = <h1 className=\"greeting\">Hello, world!</h1>;\n// 描画結果: <h1 class='greeting'>Hello, world!</h1>\n```\n\n----------------------------------------\n\nTITLE: Defining Classes and Interfaces in TypeScript\nDESCRIPTION: Illustrates how to define an interface and implement it in a class, demonstrating TypeScript's support for object-oriented programming concepts.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/overview/features.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Person {\n  firstName: string;\n  lastName: string;\n}\n\nclass Employee implements Person {\n  firstName: string;\n  lastName: string;\n  constructor(firstName: string, lastName: string) {\n    this.firstName = firstName;\n    this.lastName = lastName;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Literal Type for Number in TypeScript\nDESCRIPTION: This example shows how to use a literal type to restrict a variable to only accept the specific value of 1. It also demonstrates a type error when trying to assign a different value.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/values-types-variables/literal-types.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nlet x: 1;\nx = 1;\nx = 100;\n```\n\n----------------------------------------\n\nTITLE: Implementing Readonly Properties in TypeScript Objects\nDESCRIPTION: Demonstrates how to use the readonly modifier to prevent reassignment to object properties. Once an object with readonly properties is created, those properties cannot be modified.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/README.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// @errors: 2540\nlet obj: { readonly name: string; age: number };\nobj = { name: \"John\", age: 20 };\nobj.name = \"Tom\";\n```\n\n----------------------------------------\n\nTITLE: Changing Access Modifiers to Less Restrictive in TypeScript Inheritance\nDESCRIPTION: Demonstrates how a subclass can change the access modifier of an inherited method to be less restrictive (protected to public). This is allowed because it only relaxes access restrictions.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/object-oriented/class/access-modifiers.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nclass ProtectedClass {\n  protected doNothing(): void {\n    console.log(\"DO NOTHING\");\n  }\n}\n\nclass PublicClass extends ProtectedClass {\n  public doNothing(): void {\n    console.log(\"DO NOTHING\");\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating null and undefined assignments with strictNullChecks disabled\nDESCRIPTION: This snippet shows how null and undefined can be assigned to non-null types when strictNullChecks is false, which can lead to runtime errors.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/tsconfig/strictnullchecks.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// @strictNullChecks: false\nconst date: Date = null; // OK\nconst error: Error = undefined; // OK\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst date: Date = null; // OK\n// ---cut---\ndate.getDay();\n// @error: Cannot read properties of null (reading 'getDay')\n// @strictNullChecks: false\n```\n\n----------------------------------------\n\nTITLE: Implementing Shallow Copy Using Spread Syntax in TypeScript\nDESCRIPTION: This snippet demonstrates how to implement a shallow copy using the spread syntax in modern JavaScript/TypeScript.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/tips/shallow-copy-object.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst sample: object = {\n  year: 1999,\n  month: 7,\n};\nconst shallowCopied: object = { ...sample };\n```\n\n----------------------------------------\n\nTITLE: Type Annotation for null in TypeScript\nDESCRIPTION: Shows how to explicitly annotate a variable as having a null type in TypeScript. This ensures that the variable can only hold the null value.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/values-types-variables/null.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst x: null = null;\n```\n\n----------------------------------------\n\nTITLE: Using RegExp.prototype.test() in TypeScript\nDESCRIPTION: Demonstrates the use of the test() method to check if a string matches a regular expression. Returns true if a match is found, false otherwise.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/builtin-api/regexp.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst regex = /日/;\n\nconsole.log(regex.test(\"日曜日\"));\n// @log: true\n```\n\n----------------------------------------\n\nTITLE: Using Type Assertion to Assign Readonly Array to Mutable Array in TypeScript\nDESCRIPTION: This example demonstrates how to use type assertion to assign a readonly array to a mutable array in TypeScript, bypassing the type system's restrictions.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/values-types-variables/array/readonly-array.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst readonlyNumbers: readonly number[] = [1, 2, 3];\nconst writableNumbers: number[] = readonlyNumbers as number[];\n//                                                ^^^^^^^^^^^ 型アサーション\n```\n\n----------------------------------------\n\nTITLE: Type Annotation with await in TypeScript\nDESCRIPTION: Shows how to properly annotate types when using await. The type of the awaited value is the type parameter T in Promise<T>.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/asynchronous/await.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nasync function request(): Promise<string> {\n  return \"hello\";\n}\n\nasync function main() {\n  const result: string = await request();\n  // stringになる\n  console.log(result);\n  // @log: \"hello\"\n}\n```\n\n----------------------------------------\n\nTITLE: Optional Parameter Usage Examples\nDESCRIPTION: Shows how to call functions with optional parameters, demonstrating both omitted and provided arguments.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/functions/optional-parameters.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfunction hello(person?: string) {}\nhello(); // 引数を省略して呼び出せる\nhello(\"alice\"); // 省略しない呼び出しももちろんOK\n```\n\n----------------------------------------\n\nTITLE: Combining as const with satisfies Operator in TypeScript\nDESCRIPTION: Shows how to use 'as const satisfies T' to combine the features of 'as const' and 'satisfies'. This approach validates the type, performs type narrowing, and makes the result readonly with literal types.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/values-types-variables/satisfies.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst array = [1, \"2\", 3] as const satisfies (string | number)[];\n//    ^?\nconst tuple = [1, \"2\", 3] as const satisfies [\n//    ^?\n  string | number,\n  string | number,\n  string | number\n];\n\nconst res = {\n//    ^?\n  success: false,\n  error: \"too many requests\",\n} as const satisfies ApiResponse;\n```\n\n----------------------------------------\n\nTITLE: Skipping Elements in Array Destructuring\nDESCRIPTION: Demonstrates how to skip elements during array destructuring by using commas to represent the skipped elements.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/values-types-variables/array/destructuring-assignment-from-array.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst oneToFive = [1, 2, 3, 4, 5];\nconst [, , , four, five] = oneToFive;\nconsole.log(four);\n// @log: 4\nconsole.log(five);\n// @log: 5\n```\n\n----------------------------------------\n\nTITLE: Declaring Readonly Array using ReadonlyArray<T> in TypeScript\nDESCRIPTION: This example demonstrates how to create a readonly array of numbers using the ReadonlyArray<T> type in TypeScript. This method also results in an immutable array at compile-time.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/values-types-variables/array/readonly-array.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst nums: ReadonlyArray<number> = [1, 2, 3];\n```\n\n----------------------------------------\n\nTITLE: Array Type Checking in TypeScript using Array.isArray()\nDESCRIPTION: This example shows how to use Array.isArray() in TypeScript to check if a value is an array, and how TypeScript narrows the type to any[] when the check passes.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/values-types-variables/typeof-operator.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst n: unknown = [];\n\nif (Array.isArray(n)) {\n  // n is any[]\n}\n```\n\n----------------------------------------\n\nTITLE: Assigning Values to Object Type in TypeScript\nDESCRIPTION: This snippet demonstrates the assignment compatibility of the Object type in TypeScript. It shows that Object type accepts objects and primitive types (except null and undefined) due to auto-boxing.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/values-types-variables/object/difference-among-object-and-object.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// @errors: 2322\nlet a: Object;\na = {}; // OK\n\n// ボックス化可能なプリミティブ型OK\na = 1; // OK\na = true; // OK\na = \"string\"; // OK\n\n// nullとundefinedはNG\na = null;\na = undefined;\n```\n\n----------------------------------------\n\nTITLE: Union Type vs Optional Parameter\nDESCRIPTION: Demonstrates the difference between union types and optional parameters in function calls.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/functions/optional-parameters.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nfunction hello(person: string | undefined) {}\nhello();\n```\n\nLANGUAGE: typescript\nCODE:\n```\nfunction hello(person: string | undefined) {}\nhello(undefined);\n```\n\n----------------------------------------\n\nTITLE: Potential Runtime Error with strictBindCallApply Disabled\nDESCRIPTION: This snippet illustrates a potential runtime error that can occur when strictBindCallApply is false. It passes a number to a function expecting a string, which would cause a TypeError at runtime.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/tsconfig/strictbindcallapply.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nfunction fn(x: string) {\n  x.toUpperCase();\n}\nconst x = fn.call(undefined, 123);\n// @error: TypeError: x.toUpperCase is not a function\n// @strictBindCallApply: false\n```\n\n----------------------------------------\n\nTITLE: Component Naming Convention in TypeScript React\nDESCRIPTION: Demonstrating the proper naming convention for React components. Component names should start with a capital letter to distinguish them from DOM elements.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/jsx/README.md#2025-04-22_snippet_23\n\nLANGUAGE: tsx\nCODE:\n```\n// Good\nconst MyComponent = () => {\n  return <div />;\n};\n\n// Bad\nconst myComponent = () => {\n  return <div />;\n};\n```\n\n----------------------------------------\n\nTITLE: Dynamic Field Initialization via Constructor Parameters\nDESCRIPTION: Shows how to use constructor parameters to dynamically initialize class fields in TypeScript.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/object-oriented/class/fields.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nclass Person {\n  name: string;\n\n  constructor(personName: string) {\n    this.name = personName;\n  }\n}\nconst alice = new Person(\"Alice\");\n```\n\n----------------------------------------\n\nTITLE: Using Tuples with Promise.all() in TypeScript\nDESCRIPTION: Shows how to use tuples with Promise.all() for parallel asynchronous operations, demonstrating type safety and order preservation.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/values-types-variables/tuple.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// @module: esnext\n// @target: esnext\nimport fs from \"fs\";\n\ndeclare function takes3Seconds(): Promise<string>;\ndeclare function takes5Seconds(): Promise<number>;\n// ---cut---\nconst tuple: [string, number] = await Promise.all([\n  takes3Seconds(),\n  takes5Seconds(),\n]);\n```\n\n----------------------------------------\n\nTITLE: Type Narrowing with unknown\nDESCRIPTION: Demonstrates type guard usage to narrow unknown type\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/statements/unknown.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: unknown = \"\";\n// 型ガード\nif (typeof value === \"string\") {\n  // ここでは、valueをstring型として扱える\n  console.log(value.toUpperCase());\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Array Filtering in TypeScript\nDESCRIPTION: Demonstrates the correct way to filter an array to remove only null values, avoiding the unintended removal of falsy values like 0.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/values-types-variables/truthy-falsy-values.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst array = [null, 3, 0, null, 1, 2];\n\nconsole.log(array.filter((n) => n !== null));\n// @log: [3, 0, 1, 2]\n```\n\n----------------------------------------\n\nTITLE: ジェネリック関数における型変数の定義と使用\nDESCRIPTION: 型変数Tを使用したジェネリック関数printAndReturnの例です。引数の型と戻り値の型を同じ型変数Tで表現しています。\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/generics/type-variables.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfunction printAndReturn<T>(value: T): T {\n  console.log(value);\n  return value;\n}\n```\n\n----------------------------------------\n\nTITLE: Type Guard Function Example\nDESCRIPTION: Shows how to create and use type guard functions with unknown type\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/statements/unknown.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nfunction isObject(value: unknown): value is object {\n  return typeof value === \"object\" && value !== null;\n}\nconst value: unknown = { a: 1, b: 2 };\nif (isObject(value)) {\n  console.log(Object.keys(value));\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Type Annotations to Map Objects\nDESCRIPTION: Shows how to add type annotations to Map objects using generic type parameters. This defines the types for both the keys and values stored in the Map.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/README.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nlet people: Map<string, number>;\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Loose Type Checking with strictBindCallApply Disabled\nDESCRIPTION: This snippet shows how TypeScript doesn't check argument types for call method when strictBindCallApply is false. It allows passing a number to a function expecting a string without warnings.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/tsconfig/strictbindcallapply.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// @strictBindCallApply: false\n// 引数が文字列型の関数\nfunction fn(x: string) {}\n\n// 渡す引数は数値型だが、警告は出ない\nfn.call(undefined, 122);\n```\n\n----------------------------------------\n\nTITLE: Accessing Undeclared Fields in TypeScript\nDESCRIPTION: Shows TypeScript's compile-time error when trying to access fields that aren't declared in the class definition.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/object-oriented/class/fields.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// @errors: 2339\nclass Person {}\nconst person = new Person();\nconsole.log(person.age);\n```\n\n----------------------------------------\n\nTITLE: Runtime Error from Missing 'this' Context in JavaScript\nDESCRIPTION: This JavaScript example demonstrates the runtime error that occurs when a method using 'this' is called without the proper context, which is what TypeScript's 'this' parameter helps prevent at compile time.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/functions/this-parameters.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nclass Male {\n  // ...\n  // prettier-ignore\n  toString() {\n// @error: TypeError: Cannot read property 'name' of undefined\n    return `Monsieur ${this.name}`;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing LikeButton Component with Count\nDESCRIPTION: Adding a count variable to the LikeButton component and displaying it with a heart icon.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/tutorials/react-like-button-tutorial.md#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nfunction LikeButton() {\n  const count = 999;\n  return <span className=\"likeButton\">♥ {count}</span>;\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Arrow Function Syntax in JavaScript\nDESCRIPTION: Shows the basic structure of an arrow function, highlighting the argument and function body parts.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/symbols-and-keywords.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst increment = (num) => num + 1;\n//                 ^^^ 引数\n//                         ^^^^^^^ 関数ボディ\n```\n\n----------------------------------------\n\nTITLE: Using Flatten<T> with Various Types in TypeScript\nDESCRIPTION: This example shows how the Flatten<T> type behaves with different input types, including non-arrays, arrays, nested arrays, and tuples.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/type-reuse/infer.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ntype A = Flatten<string>;\n//   ^?\ntype B = Flatten<string[]>;\n//   ^?\ntype C = Flatten<string[][]>;\n//   ^?\ntype D = Flatten<[string, number]>;\n//   ^?\n```\n\n----------------------------------------\n\nTITLE: Assigning Values to Object Types in TypeScript\nDESCRIPTION: This snippet shows how empty objects can be assigned to variables of object, Object, and {} types. It demonstrates the basic compatibility of these types with object literals.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/values-types-variables/object/difference-among-object-and-object.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst a: object = {}; // OK\nconst b: Object = {}; // OK\nconst c: {} = {}; // OK\n```\n\n----------------------------------------\n\nTITLE: Declaration Merging with Interfaces in TypeScript\nDESCRIPTION: Demonstrates interface declaration merging and its constraints. Multiple interfaces with the same name are merged, but conflicting types for the same property cause errors.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/object-oriented/interface/interface-vs-type-alias.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// @errors: 2717\ninterface SameNameInterfaceIsAllowed {\n  myField: string;\n  sameNameSameTypeIsAllowed: number;\n  sameNameDifferentTypeIsNotAllowed: string;\n}\n\ninterface SameNameInterfaceIsAllowed {\n  newField: string;\n  sameNameSameTypeIsAllowed: number;\n}\n\ninterface SameNameInterfaceIsAllowed {\n  sameNameDifferentTypeIsNotAllowed: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Using RegExp.prototype.exec() in TypeScript\nDESCRIPTION: Shows how to use the exec() method to search a string with a regular expression. Returns an array with the full match and captured groups, or null if no match is found.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/builtin-api/regexp.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst regex = /(.日).*(.日).*(.日).*(.日).*(.日)/;\nconst results = regex.exec(\"03月01日は日曜日で祝日、晴れの日でした。\");\n\nconsole.log(results);\n// @log: [\"1日は日曜日で祝日、晴れの日\", \"1日\", \"は日\", \"曜日\", \"祝日\", \"の日\"]\n```\n\n----------------------------------------\n\nTITLE: Creating Separate Scopes for Case Statements in TypeScript\nDESCRIPTION: This example demonstrates how to create separate variable scopes for each case statement by wrapping the case content in curly braces, avoiding both runtime and compile-time errors.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/statements/switch-and-variable-scope.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nlet x = 1;\nswitch (x) {\n  case 1: {\n    const sameName = \"A\";\n    break;\n  }\n  case 2: {\n    const sameName = \"B\";\n    break;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Variables with Different Literal Types in TypeScript\nDESCRIPTION: This snippet illustrates declaring variables with boolean, number, and string literal types in TypeScript.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/values-types-variables/literal-types.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst isTrue: true = true;\nconst num: 123 = 123;\nconst str: \"foo\" = \"foo\";\n```\n\n----------------------------------------\n\nTITLE: Using ReturnType<T> with a Sample Function in TypeScript\nDESCRIPTION: This example demonstrates how to use the ReturnType<T> utility type to infer the return type of a given function.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/type-reuse/infer.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst request = (url: string): Promise<string> => {\n  return fetch(url).then((res) => res.text());\n};\n\ntype X = ReturnType<typeof request>;\n//   ^?\n```\n\n----------------------------------------\n\nTITLE: Jest型定義ファイルの例\nDESCRIPTION: Jestの型定義ファイルの一部で、declareキーワードを使用してグローバル関数を宣言しています。\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/declaration-file.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare var beforeAll: jest.Lifecycle;\n\ndeclare namespace jest {\n  type Lifecycle = (fn: ProvidesHookCallback, timeout?: number) => any;\n}\n```\n\n----------------------------------------\n\nTITLE: Shallow Copying Arrays Using Spread Syntax in TypeScript\nDESCRIPTION: This snippet demonstrates how to create a shallow copy of an array using the spread syntax in TypeScript.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/tips/shallow-copy-object.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst array1 = [1, 2, 3];\nconst array2 = [...array1];\n```\n\n----------------------------------------\n\nTITLE: Correct Object Type Checking in JavaScript\nDESCRIPTION: This snippet demonstrates a correct implementation of object type checking that properly handles the case of null, avoiding false positives.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/values-types-variables/typeof-operator.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nfunction isObject(value) {\n  return value !== null && typeof value === \"object\";\n}\n```\n\n----------------------------------------\n\nTITLE: Type Intersection Behavior with Conflicting Types\nDESCRIPTION: Demonstrates how type aliases handle property conflicts in intersection types. Instead of overriding, incompatible types become never and object types get merged.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/object-oriented/interface/interface-vs-type-alias.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// @noErrors\ntype Animal = {\n  name: number;\n  price: {\n    yen: number;\n    dollar: number;\n  };\n};\n\ntype Dog = Animal & {\n  name: string;\n  price: {\n    yen: number;\n    euro: number;\n  };\n};\n\n// 最終的なDogの定義\ntype Dog = {\n  name: never; // 交差型を作れない場合はコンパイルエラーではなくnever型になる\n  price: {\n    yen: number;\n    dollar: number;\n    euro: number;\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Combining Mapped Types with Intersection Types in TypeScript\nDESCRIPTION: Demonstrates how to add additional properties to Mapped Types using intersection types.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/type-reuse/mapped-types.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ntype KeyValues = {\n  [K in string]: string;\n};\ntype Name = {\n  name: string; // 追加のプロパティ\n};\ntype KeyValuesAndName = KeyValues & Name;\n```\n\n----------------------------------------\n\nTITLE: Destructuring Assignment with Tuples in TypeScript\nDESCRIPTION: Demonstrates how to use destructuring assignment to extract values from a tuple returned by a function.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/values-types-variables/tuple.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare function tuple(): [number, string, boolean];\n// ---cut---\nconst [num, str, bool]: [number, string, boolean] = tuple();\n```\n\n----------------------------------------\n\nTITLE: Using BigInt Constructor Function\nDESCRIPTION: Demonstrates creating bigint values using the BigInt() constructor function with both number and string arguments. Requires lib compiler option of es2020 or higher.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/values-types-variables/bigint.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst x = BigInt(100);\nconst y = BigInt(\"9007199254740991\");\n```\n\n----------------------------------------\n\nTITLE: Configuring Package.json for TypeScript Source Publication\nDESCRIPTION: Example package.json configuration to include both compiled JavaScript and original TypeScript source files in the published package.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/advanced-topics/tsconfig-for-npm-package-developers.md#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"YYTS\",\n  \"version\": \"1.0.0\",\n  \"license\": \"CC BY-SA 3.0\",\n  \"sideEffects\": false,\n  \"main\": \"./cjs/index.js\",\n  \"module\": \"./esm/index.js\",\n  \"types\": \"./esm/index.d.ts\",\n  \"files\": [\"dist\", \"src\"],\n  \"scripts\": {\n    \"build\": \"yarn build:cjs && yarn build:esm\",\n    \"build:cjs\": \"tsc -p tsconfig.cjs.json\",\n    \"build:esm\": \"tsc -p tsconfig.esm.json\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Tuple Elements in TypeScript\nDESCRIPTION: Shows how to access individual elements of a tuple and use their respective methods and properties.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/values-types-variables/tuple.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare function tuple(): [number, string, boolean];\n// ---cut---\nconst list: [number, string, boolean] = tuple();\n\nlist[0].toExponential();\nlist[1].length;\nlist[2].valueOf();\n```\n\n----------------------------------------\n\nTITLE: Basic Operator Class Implementation without Method Chaining in TypeScript\nDESCRIPTION: A simple TypeScript class for arithmetic operations where each method returns void, requiring separate statements for each operation.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/object-oriented/class/return-this-type.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Operator {\n  protected value: number;\n\n  public constructor(value: number) {\n    this.value = value;\n  }\n\n  public sum(value: number): void {\n    this.value += value;\n  }\n\n  public subtract(value: number): void {\n    this.value -= value;\n  }\n\n  public multiply(value: number): void {\n    this.value *= value;\n  }\n\n  public divide(value: number): void {\n    this.value /= value;\n  }\n}\n\nconst op: Operator = new Operator(0);\n\nop.sum(5); // 5\nop.subtract(3); // 2\nop.multiply(6); // 12\nop.divide(3); // 4\n```\n\n----------------------------------------\n\nTITLE: Multi-line JSX Formatting Best Practice\nDESCRIPTION: Showing best practices for formatting multi-line JSX expressions. Wrapping JSX in parentheses improves readability and prevents unexpected behavior.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/jsx/README.md#2025-04-22_snippet_24\n\nLANGUAGE: tsx\nCODE:\n```\n// Good\nconst Good = () => {\n  return (\n    <div>\n      <h1>Hello, world!</h1>\n    </div>\n  );\n};\n\n// Bad\nconst Bad = () => {\n  // prettier-ignore\n  return <div>\n    <h1>Hello, world!</h1>\n  </div>;\n};\n```\n\n----------------------------------------\n\nTITLE: Returning Rejected Promises Without await in TypeScript\nDESCRIPTION: Shows the behavior when returning a rejected Promise without awaiting it. The rejection is propagated to the caller, bypassing local error handling.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/asynchronous/await.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nfunction request(): Promise<unknown> {\n  throw new Error(\"error\");\n}\n\n// try -> finally -> return -> catch()\nasync function main(): Promise<unknown> {\n  try {\n    return request();\n  } catch {\n    console.log(\"error\");\n  } finally {\n    console.log(\"finally\");\n    // @log: finally\n  }\n}\n\nmain()\n  .then(() => {\n    console.log(\"then\");\n  })\n  .catch(() => {\n    console.log(\"catch\");\n    // @log: catch\n  });\n```\n\n----------------------------------------\n\nTITLE: keyof with any Type\nDESCRIPTION: Demonstrates that keyof returns string | number | symbol when used with the any type.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/type-reuse/keyof-type-operator.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ntype AnyKeys = keyof any;\n```\n\n----------------------------------------\n\nTITLE: Invalid Property Overriding in Interface Inheritance\nDESCRIPTION: Shows an error case when trying to override a property with an incompatible type in interface inheritance. TypeScript prevents overriding a number field with a string type.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/object-oriented/interface/interface-vs-type-alias.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// @errors: 2430\ninterface A {\n  numberField: number;\n  price: {\n    yen: number;\n    dollar: number;\n  };\n}\n\ninterface B extends A {\n  numberField: string;\n  price: {\n    yen: number;\n    euro: number;\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Butterfly Type Using Mapped Types in TypeScript\nDESCRIPTION: Defines a Butterfly type using Mapped Types with SystemSupportLanguage as keys.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/type-reuse/mapped-types.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntype Butterfly = {\n  [key in SystemSupportLanguage]: string;\n};\n```\n\n----------------------------------------\n\nTITLE: Illustrating const Behavior with Object Properties in TypeScript\nDESCRIPTION: This example demonstrates that while const prevents reassignment of the variable itself, it allows modification of object properties when the variable is an object.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/values-types-variables/object/readonly-vs-const.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst x = { y: 1 };\nx = { y: 2 }; // 変数そのものへの代入は不可\nx.y = 2; // プロパティへの代入は許可\n```\n\n----------------------------------------\n\nTITLE: Function Expression with Return Type Annotation\nDESCRIPTION: Shows how to add return type annotation to a function expression in TypeScript.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/functions/function-expression.md#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nconst getZero = function (): number {\n  return 0;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Traditional Type and Object in TypeScript\nDESCRIPTION: This snippet shows the conventional way of defining a type (Account) and then creating an object that conforms to that type. It demonstrates how types are typically declared before object creation in many programming languages.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/tips/generates-type-from-object.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype Account = {\n  accountName: string;\n  password: string;\n  age: number;\n  plan: \"Free\" | \"Standard\" | \"Premium\";\n};\n\nconst account: Account = {\n  accountName: \"yyts\",\n  password: \"ccbyncsa30\",\n  age: 80,\n  plan: \"Standard\",\n};\n```\n\n----------------------------------------\n\nTITLE: Type Inference with Field Initializers in TypeScript\nDESCRIPTION: Demonstrates how TypeScript automatically infers the type of a field from its initializer value, allowing type annotations to be omitted when the type is obvious from the assigned value.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/object-oriented/class/field-initializers.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nclass Point {\n  x = 0; // number型と型推論される\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Using Set Objects in TypeScript\nDESCRIPTION: Shows how to create and use Set objects which store unique values of any type. Duplicate values are automatically excluded from the collection.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/README.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nconst set = new Set();\nset.add(1);\nset.add(2);\nset.add(2); // 同じ値は追加されない。\n\nconsole.log(set);\n// @log: Set {1, 2}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Assignment Error from Readonly to Mutable Array in TypeScript\nDESCRIPTION: This snippet shows that assigning a readonly array to a mutable array results in a compile-time error in TypeScript, due to the lack of mutable methods on readonly arrays.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/values-types-variables/array/readonly-array.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// @errors: 4104\nconst readonlyNumbers: readonly number[] = [1, 2, 3];\nconst writableNumbers: number[] = readonlyNumbers;\n```\n\n----------------------------------------\n\nTITLE: Showing Any Return Type with strictBindCallApply Disabled\nDESCRIPTION: This example demonstrates that when strictBindCallApply is false, the return type of a function called with call method is inferred as any, ignoring the actual return type of the function.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/tsconfig/strictbindcallapply.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// @strictBindCallApply: false\nfunction fn(): string {\n  return \"str\";\n}\nconst x = fn.call(undefined);\n//    ^?\n```\n\n----------------------------------------\n\nTITLE: Handling Undefined Optional Parameters\nDESCRIPTION: Demonstrates how optional parameters become undefined when omitted.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/functions/optional-parameters.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nfunction hello(person?: string) {\n  console.log(person);\n}\nhello();\n// @log: undefined\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Switch Statement Scopes in TypeScript\nDESCRIPTION: This snippet shows how each switch statement creates its own variable scope, even when nested.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/statements/switch-and-variable-scope.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nswitch (\n  true // 変数スコープその1\n) {\n  default:\n    switch (\n      true // 変数スコープその2\n    ) {\n      default:\n      // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Union of Literal Types in TypeScript\nDESCRIPTION: This example demonstrates the use of a union of literal types to create a variable that can only hold specific number values.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/values-types-variables/literal-types.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nlet num: 1 | 2 | 3 = 1;\n```\n\n----------------------------------------\n\nTITLE: Checking Existence of Array Methods on Readonly Arrays in TypeScript\nDESCRIPTION: This code demonstrates that array methods still exist on readonly arrays at runtime, even though they can't be used at compile-time.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/values-types-variables/array/readonly-array.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst nums: readonly number[] = [1, 2, 3];\nconsole.log(\"push\" in nums);\n// @log: true\n```\n\n----------------------------------------\n\nTITLE: Using Class Instances with 'this' Parameter\nDESCRIPTION: This code demonstrates how both Male and Female class instances behave identically when methods are called directly on the instance, regardless of whether they use the 'this' parameter declaration.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/functions/this-parameters.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst male: Male = new Male(\"Frédéric\");\nconst female: Female = new Female(\"Frédérique\");\n\nmale.toString();\n// @log: Monsieur Frédéric\nfemale.toString();\n// @log: Madame Frédérique\n```\n\n----------------------------------------\n\nTITLE: Logical OR Assignment in JavaScript\nDESCRIPTION: Shows how to use the logical OR assignment operator (||=) to assign values based on logical OR operation.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/symbols-and-keywords.md#2025-04-22_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nlet a = false;\nlet b = 1;\na ||= b;\nconsole.log(a);\n// @log: 1\n```\n\n----------------------------------------\n\nTITLE: Increment Function Declaration\nDESCRIPTION: Shows a simple increment function using function declaration syntax.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/functions/function-expression.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nfunction increment(n) {\n  return n + 1;\n}\n```\n\n----------------------------------------\n\nTITLE: Comparing any Type Assignments\nDESCRIPTION: Shows how any type can be assigned to various typed variables\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/statements/unknown.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: any = 10;\nconst int: number = value;\nconst bool: boolean = value;\nconst str: string = value;\nconst obj: object = value;\n```\n\n----------------------------------------\n\nTITLE: Accessing Properties Without noUncheckedIndexedAccess\nDESCRIPTION: Demonstrates accessing properties via index signatures without the noUncheckedIndexedAccess option enabled. In this case, TypeScript treats all accessed properties as their declared type without considering they might not exist.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/tsconfig/nouncheckedindexedaccess.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst spanish: string = butterfly.es;\nconst third: string = phoneticCodes[2];\n\nconsole.log(spanish);\nconsole.log(third);\n```\n\n----------------------------------------\n\nTITLE: Comparing void and never Types in TypeScript\nDESCRIPTION: This code illustrates the difference between void and never types: void can be assigned undefined, while never cannot be assigned any value.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/statements/never.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst ok: void = undefined;\nconst ng: never = undefined;\n```\n\n----------------------------------------\n\nTITLE: Using Generic Components in TypeScript React\nDESCRIPTION: Demonstrating how to use generic components with different type arguments. This shows type checking for generic props.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/jsx/README.md#2025-04-22_snippet_22\n\nLANGUAGE: tsx\nCODE:\n```\nconst item1 = <Item<string> prop=\"a\" />; // OK\nconst item2 = <Item<number> prop=\"a\" />; // Error\n```\n\n----------------------------------------\n\nTITLE: React Fragment with Short Syntax\nDESCRIPTION: Using the shorthand syntax for React fragments. This provides a more concise way to group elements without adding extra DOM nodes.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/jsx/README.md#2025-04-22_snippet_19\n\nLANGUAGE: tsx\nCODE:\n```\nconst element = (\n  <>\n    <h1>Hello!</h1>\n    <h2>Good to see you here.</h2>\n  </>\n);\n// 描画結果: <h1>Hello!</h1><h2>Good to see you here.</h2>\n```\n\n----------------------------------------\n\nTITLE: Short-Circuit Evaluation with AND Operator in JSX\nDESCRIPTION: Using the logical AND operator (&&) for conditional rendering in JSX. This displays content only when a condition is truthy.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/jsx/README.md#2025-04-22_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\nconst message = isLoggedIn && <h1>Welcome back!</h1>;\n```\n\n----------------------------------------\n\nTITLE: TypeScript undefined Type Annotation\nDESCRIPTION: Demonstrates how to explicitly annotate a variable with the undefined type in TypeScript.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/values-types-variables/undefined.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst x: undefined = undefined;\n```\n\n----------------------------------------\n\nTITLE: Defining Index Signature Types in TypeScript\nDESCRIPTION: Example of declaring types with index signatures for object-literal-like and array-like structures. These types define specific known properties along with an index signature for additional string or number keys.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/tsconfig/nouncheckedindexedaccess.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype ObjectLiteralLike = {\n  en: string;\n  fr: string;\n  it: string;\n  [lang: string]: string;\n};\n\ntype ArrayObjectLike = {\n  0: string;\n  1: string;\n  [num: number]: string;\n};\n\nfunction log(s: string): void {\n  console.log(s);\n}\n\nconst butterfly: ObjectLiteralLike = {\n  en: \"Butterfly\",\n  fr: \"Papillon\",\n  it: \"Farfalla\",\n  es: \"Mariposa\",\n};\n\nconst phoneticCodes: ArrayObjectLike = {\n  0: \"alpha\",\n  1: \"bravo\",\n  2: \"charlie\",\n};\n```\n\n----------------------------------------\n\nTITLE: Mapped Types with Type Aliases in TypeScript\nDESCRIPTION: Shows how mapped types can be used with type aliases to dynamically create properties based on a union type. The example creates a type with string properties for each supported language.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/object-oriented/interface/interface-vs-type-alias.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\ntype SystemSupportLanguage = \"en\" | \"fr\" | \"it\" | \"es\";\ntype Butterfly = {\n  [key in SystemSupportLanguage]: string;\n};\n```\n\n----------------------------------------\n\nTITLE: Using switch Statements in TypeScript\nDESCRIPTION: Shows how to use switch statements with string literal values. The switch statement evaluates an expression and matches it against case clauses.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/README.md#2025-04-22_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nconst color: string = \"blue\";\n\nswitch (color) {\n  case \"red\":\n    console.log(\"Color is red.\");\n    break;\n  case \"blue\":\n    console.log(\"Color is blue.\");\n    break;\n  default:\n    console.log(\"Color is neither red nor blue.\");\n}\n// @log: 'Color is blue.'\n```\n\n----------------------------------------\n\nTITLE: Basic If-Else Statement in JavaScript\nDESCRIPTION: A simple if-else conditional statement that executes different code blocks based on whether the value equals 0.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/statements/if-else.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nif (value === 0) {\n  // ...\n} else {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Nullish Coalescing Operator in JSX\nDESCRIPTION: Using the nullish coalescing operator (??) for conditional rendering in JSX. This displays fallback content only when a value is null or undefined.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/jsx/README.md#2025-04-22_snippet_15\n\nLANGUAGE: tsx\nCODE:\n```\nconst message = input.name ?? <p>No input provided.</p>;\n```\n\n----------------------------------------\n\nTITLE: Extending Process.env Interface in TypeScript\nDESCRIPTION: Shows a real-world example from Node.js type definitions where interfaces are used to enable extension by consumers. This example shows the original ProcessEnv definition and how users can extend it.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/object-oriented/interface/interface-vs-type-alias.md#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare module \"process\" {\n  global {\n    namespace NodeJS {\n      interface ProcessEnv extends Dict<string> {\n        TZ?: string;\n      }\n    }\n  }\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// src/types/global.d.ts\ndeclare module \"process\" {\n  global {\n    namespace NodeJS {\n      interface ProcessEnv {\n        NODE_ENV: \"development\" | \"production\";\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Anonymous Function Expression\nDESCRIPTION: Shows how to create an anonymous function expression without a function name.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/functions/function-expression.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst 変数名 = function () {};\n```\n\n----------------------------------------\n\nTITLE: Initializing Fields in Constructor\nDESCRIPTION: Demonstrates how to initialize fields in a class constructor using this keyword to satisfy initialization requirements.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/object-oriented/class/fields.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nclass Person {\n  name: string;\n\n  constructor() {\n    this.name = \"Alice\";\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Named Capturing Groups in TypeScript\nDESCRIPTION: Demonstrates the use of named capturing groups in regular expressions. Shows how to access named groups using optional chaining due to TypeScript's limitations in guaranteeing their presence.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/builtin-api/regexp.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst regex = /(?<pref>.+[都道府県])(?<ward>.+[市区町村])/gu;\nconst str = \"静岡県磐田市気子島\";\nconst match = regex.exec(str);\n\nconsole.log(match?.groups?.pref);\n// @log: \"静岡県\"\nconsole.log(match?.groups?.ward);\n// @log: \"磐田市\"\n\n// @errors: 2532\n```\n\n----------------------------------------\n\nTITLE: Recursive Function Expression with Named Function\nDESCRIPTION: Demonstrates using a named function expression for recursion to calculate factorial.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/functions/function-expression.md#2025-04-22_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconst factorial = function fact(n) {\n  if (n <= 1) {\n    return 1;\n  }\n  return n * fact(n - 1);\n};\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Fallthrough in TypeScript Switch Statement\nDESCRIPTION: This code snippet shows a function that calculates the number of days in a month using a switch statement. It contains fallthrough cases that would trigger errors when noFallthroughCasesInSwitch is enabled.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/tsconfig/nofallthroughcasesinswitch.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction daysOfMonth(month: number): number {\n  let days: number = 31;\n\n  switch (month) {\n    case 1:\n    case 3:\n    case 5:\n    case 7:\n    case 8:\n    case 10:\n    case 12:\n      break;\n    case 2:\n      days = 28;\n    case 4:\n    case 6:\n    case 9:\n    case 11:\n      days = 30;\n    default:\n      throw new Error(\"INVALID INPUT\");\n  }\n\n  return days;\n}\n```\n\n----------------------------------------\n\nTITLE: Ternary Operator for Conditional Expressions in JavaScript\nDESCRIPTION: Using the ternary (conditional) operator to create an expression-based conditional that can be directly assigned to a variable. This is the correct way to handle conditional expressions.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/statements/if-else.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst result = value === 0 ? \"OK\" : \"NG\";\n```\n\n----------------------------------------\n\nTITLE: Short-Circuit Evaluation with OR Operator in JSX\nDESCRIPTION: Using the logical OR operator (||) for conditional rendering in JSX. This displays fallback content when a condition is falsy.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/jsx/README.md#2025-04-22_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\nconst message = isLoggedIn || <h1>Please sign up.</h1>;\n```\n\n----------------------------------------\n\nTITLE: Demonstrating null and undefined assignments with strictNullChecks enabled\nDESCRIPTION: This snippet shows how null and undefined assignments to non-null types result in compile-time errors when strictNullChecks is true.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/tsconfig/strictnullchecks.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// @strictNullChecks: true\n// @errors: 2322\nconst date: Date = null;\nconst error: Error = undefined;\n```\n\n----------------------------------------\n\nTITLE: Default Value Assignment for Optional Parameters\nDESCRIPTION: Shows different methods of handling optional parameters by assigning default values.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/functions/optional-parameters.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nfunction hello(person?: string) {\n  if (typeof person === \"undefined\") {\n    person = \"anonymous\";\n  }\n  return \"Hello \" + person.toUpperCase();\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nfunction hello(person?: string) {\n  person ??= \"anonymous\";\n  return \"Hello \" + person.toUpperCase();\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nfunction hello(person: string = \"anonymous\") {\n  return \"Hello \" + person.toUpperCase();\n}\n```\n\n----------------------------------------\n\nTITLE: Using Destructuring in Function Parameters\nDESCRIPTION: Shows how to use object destructuring in function parameters with TypeScript type annotations. This allows direct access to object properties within the function body.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/README.md#2025-04-22_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\nconst printCoord = ({ x, y }: { x: number; y: number }) => {\n  console.log(`Coordinate is (${x}, ${y})`);\n};\n\nprintCoord({ x: 10, y: 20 });\n// @log: 'Coordinate is (10, 20)'\n```\n\n----------------------------------------\n\nTITLE: Using Boolean Type Annotation in TypeScript\nDESCRIPTION: This example shows how to use the 'boolean' type annotation in TypeScript when declaring a variable.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/values-types-variables/boolean.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst isOk: boolean = true;\n```\n\n----------------------------------------\n\nTITLE: Function Expression Invocation\nDESCRIPTION: Demonstrates how to call a function expression using the variable name.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/functions/function-expression.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n変数名(); // 呼び出し\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Switch Fallthrough in TypeScript\nDESCRIPTION: This snippet shows how switch cases in JavaScript/TypeScript fall through to the next case when break statements are omitted. It demonstrates that both case 'A' and 'B' are executed when s is 'A'.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/statements/switch-fallthrough.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nlet s = \"A\";\nswitch (s) {\n  case \"A\": // breakが無い分岐\n    console.log(1);\n  case \"B\": // この分岐にも処理が続く\n    console.log(2);\n}\n// @log: 1 2 の順で出力される\n```\n\n----------------------------------------\n\nTITLE: Using String.prototype.match() with RegExp in TypeScript\nDESCRIPTION: Demonstrates the use of the match() method on a string with a regular expression. Returns an array similar to RegExp.prototype.exec().\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/builtin-api/regexp.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst regex = /(.日).*(.日).*(.日).*(.日).*(.日)/;\nconst str = \"03月01日は日曜日で祝日、晴れの日でした。\";\n\nconsole.log(str.match(regex));\n// @log: [\"1日は日曜日で祝日、晴れの日\", \"1日\", \"は日\", \"曜日\", \"祝日\", \"の日\"]\n```\n\n----------------------------------------\n\nTITLE: Using if-else Statements with Type Annotations\nDESCRIPTION: Demonstrates basic if-else statements with TypeScript type annotations. Conditions work the same as in JavaScript but can benefit from type safety.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/README.md#2025-04-22_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nconst age: number = 20;\n\nif (age >= 20) {\n  console.log(\"You are an adult.\");\n} else {\n  console.log(\"You are a minor.\");\n}\n// @log: 'You are an adult.'\n```\n\n----------------------------------------\n\nTITLE: Using Array Destructuring Assignment\nDESCRIPTION: Demonstrates array destructuring to extract values from arrays into separate variables. This provides a concise way to unpack array elements.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/README.md#2025-04-22_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nconst [a, b] = [1, 2];\nconsole.log(a);\n// @log: 1\nconsole.log(b);\n// @log: 2\n```\n\n----------------------------------------\n\nTITLE: Using Labeled Tuples in TypeScript\nDESCRIPTION: Demonstrates how to use labeled tuples to improve readability when working with multiple values of the same type.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/values-types-variables/tuple.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare function tuple(): [x: number, y: number, z: number];\n// ---cut---\nconst coordinate: [x: number, y: number, z: number] = tuple();\n```\n\n----------------------------------------\n\nTITLE: Recursive Function Expression Using Variable Reference\nDESCRIPTION: Shows recursive factorial calculation using the variable name instead of function name.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/functions/function-expression.md#2025-04-22_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nconst factorial = function (n) {\n  if (n <= 1) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n};\n```\n\n----------------------------------------\n\nTITLE: Extended TypeScript Configuration for ESLint in tsconfig.eslint.json\nDESCRIPTION: This configuration extends the base tsconfig.json and adds settings specific for ESLint, including allowing JavaScript files and specifying additional files to include in linting.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/tutorials/eslint.md#2025-04-22_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"extends\": \"./tsconfig.json\",\n  \"compilerOptions\": {\n    \"allowJs\": true\n  },\n  \"include\": [\"src\", \".*.js\", \"*.js\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Return value of functions without explicit return in JavaScript\nDESCRIPTION: This snippet shows that functions without an explicit return statement in JavaScript implicitly return undefined.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/values-types-variables/undefined-vs-null.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfunction func() {}\nconsole.log(func());\n// @log: undefined\n```\n\n----------------------------------------\n\nTITLE: TypeScript Array Index Lookup With NoInfer\nDESCRIPTION: Example demonstrating how NoInfer prevents unwanted type inference, ensuring that only valid array elements are accepted as the item parameter.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/type-reuse/utility-types/no-infer.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfunction getIndexFromArray<T extends string>(\n  elements: T[],\n  item: NoInfer<T>\n): number {\n  return elements.findIndex((element) => element === item);\n}\n\ntype Fruit = \"grape\" | \"apple\" | \"banana\";\nconst fruits: Fruit[] = [\"grape\", \"apple\", \"banana\"];\ngetIndexFromArray(fruits, \"apple\");\n// @errors: 2345\ngetIndexFromArray(fruits, \"peach\");\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Private Access Modifier Restrictions in TypeScript\nDESCRIPTION: Illustrates the compile-time error that occurs when a subclass tries to access a private method from its parent class. Private members are only accessible within the class that defines them.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/object-oriented/class/access-modifiers.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nclass Animal {\n  public name: string;\n\n  public constructor(theName: string) {\n    this.name = theName;\n  }\n\n  // `public`から`private`に変更\n  private move(distanceInMeters: number) {\n    console.log(`${this.name} moved ${distanceInMeters}m.`);\n  }\n}\n\nclass Gorilla extends Animal {\n  move(distanceInMeters: number) {\n    super.move(distanceInMeters * 10);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: React Fragment with Explicit Syntax\nDESCRIPTION: Using React.Fragment to group multiple elements without adding extra nodes to the DOM. This shows the explicit syntax.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/jsx/README.md#2025-04-22_snippet_18\n\nLANGUAGE: tsx\nCODE:\n```\nconst element = (\n  <React.Fragment>\n    <h1>Hello!</h1>\n    <h2>Good to see you here.</h2>\n  </React.Fragment>\n);\n// 描画結果: <h1>Hello!</h1><h2>Good to see you here.</h2>\n```\n\n----------------------------------------\n\nTITLE: TypeScript Switch Statement with noFallthroughCasesInSwitch Enabled\nDESCRIPTION: This snippet demonstrates the same function as before, but with the noFallthroughCasesInSwitch compiler option enabled. It shows the error that would be triggered due to fallthrough cases.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/tsconfig/nofallthroughcasesinswitch.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// @noFallthroughCasesInSwitch: true\n// @errors: 7029\nfunction daysOfMonth(month: number): number {\n  let days: number = 31;\n\n  switch (month) {\n    case 1:\n    case 3:\n    case 5:\n    case 7:\n    case 8:\n    case 10:\n    case 12:\n      break;\n    case 2:\n      days = 28;\n    case 4:\n    case 6:\n    case 9:\n    case 11:\n      days = 30;\n    default:\n      throw new Error(\"INVALID INPUT\");\n  }\n\n  return days;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining MealsPerDay Type and willBeMetabo Function in TypeScript\nDESCRIPTION: This snippet defines a MealsPerDay type representing daily meals and a willBeMetabo function to determine if the meals will lead to metabolic syndrome.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/tips/shallow-copy-object.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype MealsPerDay = {\n  breakfast: string;\n  lunch: string;\n  dinner: string;\n};\n\nfunction willBeMetabo(meals: MealsPerDay): boolean {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Functions with never Return Type in TypeScript\nDESCRIPTION: These examples show functions that return never: one that always throws an error, and another that never terminates due to an infinite loop.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/statements/never.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nfunction throwError(): never {\n  throw new Error();\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nfunction forever(): never {\n  while (true) {} // 無限ループ\n}\n```\n\n----------------------------------------\n\nTITLE: Shallow Copying Map and Set Objects in TypeScript\nDESCRIPTION: These examples show how to create shallow copies of Map and Set objects using their respective constructors.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/tips/shallow-copy-object.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst map1 = new Map([\n  [\".js\", \"JS\"],\n  [\".ts\", \"TS\"],\n]);\nconst map2 = new Map(map1);\n\nconst set1 = new Set([1, 2, 3]);\nconst set2 = new Set(set1);\n```\n\n----------------------------------------\n\nTITLE: 抽象クラスとinstanceofの組み合わせ\nDESCRIPTION: TypeScriptの抽象クラスとinstanceof演算子の関係を示しています。抽象クラスを継承した具象クラスのインスタンスに対して、抽象クラスのinstanceofチェックを行うと、trueが返されます。\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/object-oriented/class/instanceof-operator.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nabstract class AbstractClass {}\nclass ConcreteClass extends AbstractClass {}\nconst obj = new ConcreteClass();\nconsole.log(obj instanceof AbstractClass);\n// @log: true\n```\n\n----------------------------------------\n\nTITLE: Assigning Values to {} Type in TypeScript\nDESCRIPTION: This snippet shows the assignment compatibility of the {} type in TypeScript. It demonstrates that {} type accepts objects and primitive types (except null and undefined), similar to the Object type.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/values-types-variables/object/difference-among-object-and-object.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// @errors: 2322\nlet a: {};\na = {}; // OK\n\n// ボックス化可能なプリミティブ型OK\na = 1; // OK\na = true; // OK\na = \"string\"; // OK\n\n// nullとundefinedはNG\na = null;\na = undefined;\n```\n\n----------------------------------------\n\nTITLE: Invalid BigInt and Number Operation\nDESCRIPTION: Shows an error case when attempting to perform arithmetic operations between bigint and number types without proper conversion.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/values-types-variables/bigint.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n2n + 3;\n```\n\n----------------------------------------\n\nTITLE: Property Access with unknown Type\nDESCRIPTION: Shows how unknown type restricts property access and method calls\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/statements/unknown.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: unknown = 10;\nvalue.toFixed();\n\nconst obj: unknown = { name: \"オブジェクト\" };\nobj.name;\n```\n\n----------------------------------------\n\nTITLE: Problematic Implementation of isMeals Function in TypeScript\nDESCRIPTION: This snippet demonstrates a problematic implementation of isMeals that modifies the input object, leading to unexpected results.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/tips/shallow-copy-object.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nfunction isMeals(meals: MealsPerDay): void {\n  meals.breakfast = \"a beef steak\";\n  // beef steak will be 1200 kcal\n  meals.lunch = \"a bucket of ice cream\";\n  // a bucket of ice cream will be 7200 kcal\n  meals.dinner = \"3 pizzas\";\n  // 3 pizzas will be 11400 kcal\n\n  if (!isMeal(meals.breakfast)) {\n    throw new Error(\"BREAKFAST IS NOT MEAL!\");\n  }\n  if (!isMeal(meals.lunch)) {\n    throw new Error(\"LUNCH IS NOT MEAL!!!\");\n  }\n  if (!isMeal(meals.dinner)) {\n    throw new Error(\"DINNER IS NOT MEAL!!!\");\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Corrected TypeScript Switch Statement without Fallthrough\nDESCRIPTION: This code snippet shows the correct way to structure the switch statement to avoid fallthrough errors when noFallthroughCasesInSwitch is enabled. Each case that modifies the 'days' variable now includes a break statement.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/tsconfig/nofallthroughcasesinswitch.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nfunction daysOfMonth(month: number): number {\n  let days: number = 31;\n\n  switch (month) {\n    case 1:\n    case 3:\n    case 5:\n    case 7:\n    case 8:\n    case 10:\n    case 12:\n      break;\n    case 2:\n      days = 28;\n      break;\n    case 4:\n    case 6:\n    case 9:\n    case 11:\n      days = 30;\n      break;\n    default:\n      throw new Error(\"INVALID INPUT\");\n  }\n\n  return days;\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Shallow Copy Behavior in TypeScript\nDESCRIPTION: This example shows how shallow copying works and how it differs from deep copying for nested objects.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/tips/shallow-copy-object.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ntype NestObject = {\n  nest: object;\n};\n\nconst object1: NestObject = {\n  nest: {},\n};\nconst object2: NestObject = shallowCopy(object1);\n\nconsole.log(object1 === object2);\n// @log: false\nconsole.log(object1.nest === object2.nest);\n// @log: true\n```\n\n----------------------------------------\n\nTITLE: Defining Classes with and without 'this' Parameter in TypeScript\nDESCRIPTION: This code defines two similar classes, Male and Female, with the Female class explicitly declaring 'this: Female' in its toString method to ensure type safety when the method is called in different contexts.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/functions/this-parameters.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Male {\n  private name: string;\n\n  public constructor(name: string) {\n    this.name = name;\n  }\n\n  public toString(): string {\n    return `Monsieur ${this.name}`;\n  }\n}\n\nclass Female {\n  private name: string;\n\n  public constructor(name: string) {\n    this.name = name;\n  }\n\n  public toString(this: Female): string {\n    return `Madame ${this.name}`;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Return Type Inference with strictBindCallApply Enabled\nDESCRIPTION: This snippet demonstrates that when strictBindCallApply is true, the return type of a function called with call method is correctly inferred, matching the function's actual return type.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/tsconfig/strictbindcallapply.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nfunction fn(): string {\n  return \"str\";\n}\nconst x = fn.call(undefined);\n//    ^?\n```\n\n----------------------------------------\n\nTITLE: Creating Function Declarations with Type Annotations\nDESCRIPTION: Demonstrates traditional function declarations with parameter and return type annotations. This syntax is equivalent to arrow functions but follows the classic function definition style.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/README.md#2025-04-22_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\nfunction greet(name: string): string {\n  return `Hello ${name}`;\n}\n\nconsole.log(greet(\"John\"));\n// @log: 'Hello John'\n```\n\n----------------------------------------\n\nTITLE: JSX Whitespace Management with JavaScript Expression\nDESCRIPTION: Using JavaScript expressions to explicitly add whitespace between elements in JSX, ensuring proper word spacing in the rendered output.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/jsx/README.md#2025-04-22_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nconst element = (\n  <p>\n    This is a{\" \"}\n    <strong>pen</strong>\n    .\n  </p>\n);\n// 描画結果: <p>This is a<!-- --> <strong>pen</strong>.</p>\n```\n\n----------------------------------------\n\nTITLE: JSX Boolean Attributes with Explicit Value\nDESCRIPTION: Showing how to explicitly set a boolean attribute to true in JSX, though the shorthand version is generally preferred for readability.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/jsx/README.md#2025-04-22_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nconst element = <input disabled={true} />;\n// 描画結果: <input disabled=''/>\n```\n\n----------------------------------------\n\nTITLE: Type-Safe Property Access Prevention with unknown Type in TypeScript\nDESCRIPTION: This snippet illustrates how 'unknown' type prevents accessing potentially non-existent properties, catching errors at compile-time rather than runtime.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/statements/any-vs-unknown.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// @errors: 18046\nconsole.log(unknown6.x.y.z);\n```\n\n----------------------------------------\n\nTITLE: Declaring null Literal in TypeScript\nDESCRIPTION: Demonstrates how to declare a variable with a null value in TypeScript. This is the basic way to represent the absence of a value.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/values-types-variables/null.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst x = null;\n```\n\n----------------------------------------\n\nTITLE: Adding Type Annotations to Set Objects\nDESCRIPTION: Demonstrates how to add type annotations to Set objects using generic type parameters. This defines the type of elements that can be stored in the Set.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/README.md#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nlet numSet: Set<number>;\n```\n\n----------------------------------------\n\nTITLE: Correct BigInt and Number Operation\nDESCRIPTION: Demonstrates the proper way to perform arithmetic operations between bigint and number types by converting the number to bigint.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/values-types-variables/bigint.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst i = 2n + BigInt(3);\nconsole.log(i);\n// @log: 5n\n```\n\n----------------------------------------\n\nTITLE: Inline Combination of Mapped Types and Additional Properties in TypeScript\nDESCRIPTION: Shows how to combine Mapped Types with additional properties in a single type definition.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/type-reuse/mapped-types.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\ntype KeyValuesAndName = {\n  [K in string]: string;\n} & {\n  name: string; // 追加のプロパティ\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing React Component with useEffect for Image Fetching in Next.js (TypeScript)\nDESCRIPTION: This snippet shows how to set up a Next.js page component that fetches and displays a cat image on mount using React hooks (useState and useEffect).\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/tutorials/nextjs.md#2025-04-22_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { NextPage } from \"next\";\nimport { useEffect, useState } from \"react\";\n\nconst IndexPage: NextPage = () => {\n  const [imageUrl, setImageUrl] = useState(\"\");\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    fetchImage().then((newImage) => {\n      setImageUrl(newImage.url);\n      setLoading(false);\n    });\n  }, []);\n  return <div>{loading || <img src={imageUrl} />}</div>;\n};\nexport default IndexPage;\n\ntype Image = {\n  url: string;\n};\nconst fetchImage = async (): Promise<Image> => {\n  const res = await fetch(\"https://api.thecatapi.com/v1/images/search\");\n  const images = await res.json();\n  console.log(images);\n  return images[0];\n};\n```\n\n----------------------------------------\n\nTITLE: Illegal Access Modifier Change to More Restrictive in TypeScript\nDESCRIPTION: Shows the compile-time error that occurs when trying to change an access modifier to be more restrictive (public to protected) in a subclass. This is not allowed as it would break the Liskov Substitution Principle.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/object-oriented/class/access-modifiers.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nclass PublicClass {\n  public doNothing(): void {\n    console.log(\"DO NOTHING\");\n  }\n}\n\nclass ProtectedClass extends PublicClass {\n  protected doNothing(): void {\n    console.log(\"DO NOTHING\");\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Nullish Coalescing in JavaScript\nDESCRIPTION: Illustrates the use of the nullish coalescing operator (??) to provide default values for null or undefined.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/symbols-and-keywords.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log(undefined ?? 1);\n// @log: 1\nconsole.log(2 ?? 1);\n// @log: 2\n```\n\n----------------------------------------\n\nTITLE: Implementing a Snapshot Test for a React Component in TypeScript\nDESCRIPTION: Demonstrates how to write a snapshot test for a React component using Jest and React Testing Library. It renders the component and compares it to a stored snapshot.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/tutorials/component-test.md#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { render } from \"@testing-library/react\";\nimport { SimpleButton } from \"./SimpleButton\";\n\ntest(\"描画されてすぐはOFFと表示されている\", () => {\n  const view = render(<SimpleButton />);\n  expect(view.container).toMatchSnapshot();\n});\n```\n\n----------------------------------------\n\nTITLE: Incorrect Type Guard Function in TypeScript\nDESCRIPTION: This snippet demonstrates an incorrect implementation of a type guard function. TypeScript does not warn about the logical error in the function body.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/functions/type-guard-functions.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nfunction isUndefined(value: unknown): value is undefined {\n  return typeof value === \"number\";\n}\n```\n\n----------------------------------------\n\nTITLE: keyof with Empty Object\nDESCRIPTION: Shows that keyof returns never type when used with an empty object type.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/type-reuse/keyof-type-operator.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ntype What = keyof {};\n```\n\n----------------------------------------\n\nTITLE: Using Object Destructuring Assignment\nDESCRIPTION: Shows object destructuring to extract properties from objects into separate variables. The variable names must match the property names to be extracted.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/README.md#2025-04-22_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nexport default \"変数nameを使いたいのでモジュール化する必要がありました。\";\n// ---cut---\nconst obj = {\n  name: \"John\",\n  age: 20,\n};\n\nconst { name, age } = obj;\nconsole.log(name);\n// @log: 'John'\nconsole.log(age);\n// @log: 20\n```\n\n----------------------------------------\n\nTITLE: BigInt JSON Serialization Error\nDESCRIPTION: Shows the TypeError that occurs when attempting to directly serialize a bigint value using JSON.stringify().\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/values-types-variables/bigint.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nJSON.stringify(12n);\n// @error: TypeError: Do not know how to serialize a BigInt\n```\n\n----------------------------------------\n\nTITLE: Demonstrating TypeScript Compile-time Error for Duplicate Variable Names\nDESCRIPTION: This snippet shows how TypeScript catches the duplicate variable declaration at compile-time, preventing the runtime error that would occur in JavaScript.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/statements/switch-and-variable-scope.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// @errors: 2451\nlet x = 1;\nswitch (x) {\n  case 1:\n    const sameName = \"A\";\n    break;\n  case 2:\n    const sameName = \"B\";\n    break;\n}\n```\n\n----------------------------------------\n\nTITLE: Invalid Rest Parameter Usage in JavaScript\nDESCRIPTION: 残余引数の使用に関する制限を示しています。残余引数は最後の引数でなければならず、複数の残余引数や残余引数の後に通常の引数を置くことはできません。\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/functions/rest-parameters.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// @errors: 1014\n// 構文エラーになるコード\nfunction func(...params1, ...params2) {}\nfunction func(...params, param1) {}\n```\n\n----------------------------------------\n\nTITLE: Comparing Symbol Values in TypeScript\nDESCRIPTION: This snippet shows how Symbol comparisons work in TypeScript, demonstrating that Symbols with the same description are not equal unless they reference the same variable.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/values-types-variables/equality.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconsole.log(Symbol(\"piano\") == Symbol(\"piano\"));\n// @log: false\nconsole.log(Symbol(\"piano\") === Symbol(\"piano\"));\n// @log: false\nconst sym = Symbol(2);\nconsole.log(sym === sym);\n// @log: true\n```\n\n----------------------------------------\n\nTITLE: Type Annotation for BigInt in TypeScript\nDESCRIPTION: Shows how to explicitly declare a variable as bigint type using TypeScript type annotation syntax.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/values-types-variables/bigint.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst x: bigint = 100n;\n```\n\n----------------------------------------\n\nTITLE: トリプルスラッシュ・ディレクティブの例\nDESCRIPTION: 型定義ファイルで使用されるトリプルスラッシュ・ディレクティブの例です。参照ディレクティブと型ディレクティブを示しています。\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/declaration-file.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n/// <reference path=\"global.d.ts\" />\n```\n\nLANGUAGE: typescript\nCODE:\n```\n/// <reference types=\"express-serve-static-core\" />\n/// <reference types=\"serve-static\" />\n```\n\n----------------------------------------\n\nTITLE: Modifying React Component to Cause Snapshot Test Failure\nDESCRIPTION: Demonstrates a change in the React component that would cause the snapshot test to fail. The initial state is changed from false to true.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/tutorials/component-test.md#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useState } from \"react\";\n\nexport const SimpleButton: () => JSX.Element = () => {\n  const [state, setState] = useState(true);\n  // falseからtrueに変更               ^^^^\n  const handleClick = () => {\n    setState((prevState) => !prevState);\n  };\n  return <button onClick={handleClick}>{state ? \"ON\" : \"OFF\"}</button>;\n};\n```\n\n----------------------------------------\n\nTITLE: JSX Text Element in TypeScript React\nDESCRIPTION: Adding text content to a JSX element. This shows how to include text directly within a heading element.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/jsx/README.md#2025-04-22_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nconst element = <h1>I'm a text element.</h1>;\n// 描画結果: <h1>I&#x27;m a text element.</h1>\n```\n\n----------------------------------------\n\nTITLE: Increment Function Expression\nDESCRIPTION: Shows the same increment function rewritten as a function expression.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/functions/function-expression.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst increment = function (n) {\n  return n + 1;\n};\n```\n\n----------------------------------------\n\nTITLE: Illustrating Shared Scope Across Case Statements in JavaScript\nDESCRIPTION: This example demonstrates how declaring the same variable name in multiple case statements leads to a runtime error in JavaScript due to shared scope.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/statements/switch-and-variable-scope.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nlet x = 1;\nswitch (x) {\n  case 1:\n    const sameName = \"A\";\n    break;\n  case 2:\n    const sameName = \"B\";\n// @error: SyntaxError: Identifier 'sameName' has already been declared\n    break;\n}\n// @noErrors\n```\n\n----------------------------------------\n\nTITLE: Illustrating Dynamic Typing in JavaScript\nDESCRIPTION: This example demonstrates how dynamic typing works in JavaScript. It shows that the type of a variable can change during runtime, allowing operations that would cause errors in statically typed languages.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/values-types-variables/difference-between-type-inference-and-dynamic-typing.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nlet x = 1; // xはnumber型となる\nx = \"hello\"; //x はstring型となる\nconsole.log(x.substring(1, 3));\n// @log: \"el\"\n// @noErrors\n```\n\n----------------------------------------\n\nTITLE: React型定義ファイルの例\nDESCRIPTION: Reactの型定義ファイルの一部で、グローバル名前空間内にJSX名前空間を定義しています。\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/declaration-file.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare global {\n  namespace JSX {\n    interface Element extends React.ReactElement<any, any> {}\n\n    // 省略\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Comparing Object Values in JavaScript\nDESCRIPTION: This snippet demonstrates object equality comparisons in JavaScript, showing that objects with the same properties and values are not considered equal unless they reference the same object.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/values-types-variables/equality.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log({} == {});\n// @log: false\nconsole.log({} === {});\n// @log: false\nconsole.log({ age: 18 } == { age: 18 });\n// @log: false\nconsole.log({ equipment: \"glasses\" } === { equipment: \"glasses\" });\n// @log: false\nconst obj = { hair: \"blond\" };\nconsole.log(obj === obj);\n// @log: true\n// @noErrors\n```\n\n----------------------------------------\n\nTITLE: TypeScriptでのインターフェースと関数定義\nDESCRIPTION: PersonインターフェースとgreeterとGreeter関数の定義を含むTypeScriptコードの例です。\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/declaration-file.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Person {\n  firstName: string;\n  lastName: string;\n}\n\nfunction greeter(person: Person): string {\n  return \"Hello, \" + person.firstName + \" \" + person.lastName;\n}\n```\n\n----------------------------------------\n\nTITLE: ESLint Configuration for TypeScript in .eslintrc.js\nDESCRIPTION: This JavaScript configuration file sets up ESLint for a TypeScript project. It specifies the parser, plugins, environments, parser options, ignored patterns, extended configs, and custom rules.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/tutorials/eslint.md#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  root: true,\n  parser: \"@typescript-eslint/parser\",\n  plugins: [\"@typescript-eslint\"],\n  env: {\n    browser: true,\n    es2021: true,\n  },\n  parserOptions: {\n    ecmaVersion: \"latest\",\n    sourceType: \"module\",\n    project: \"./tsconfig.eslint.json\",\n    tsconfigRootDir: __dirname,\n  },\n  ignorePatterns: [\"dist\"],\n  extends: [\n    \"airbnb-base\",\n    \"airbnb-typescript/base\",\n    \"plugin:@typescript-eslint/recommended-requiring-type-checking\",\n  ],\n  rules: {\n    \"import/prefer-default-export\": \"off\",\n    \"@typescript-eslint/quotes\": [\"error\", \"double\"],\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Property Overriding in Interface Inheritance\nDESCRIPTION: Demonstrates how interfaces handle property overriding during inheritance. The Dog interface overrides the name and price properties from Animal interface.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/object-oriented/interface/interface-vs-type-alias.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// OK\ninterface Animal {\n  name: any;\n  price: {\n    yen: number;\n  };\n  legCount: number;\n}\n\ninterface Dog extends Animal {\n  name: string;\n  price: {\n    yen: number;\n    dollar: number;\n  };\n}\n\n// 最終的なDogの定義\ninterface Dog {\n  name: string;\n  price: {\n    yen: number;\n    dollar: number;\n  };\n  legCount: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Illustrating Assignability of never Type to Other Types in TypeScript\nDESCRIPTION: This code demonstrates that a value of never type can be assigned to variables of any other type without type errors.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/statements/never.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst nev = 1 as never;\nconst a: string = nev; // 代入OK\nconst b: string[] = nev; // 代入OK\n```\n\n----------------------------------------\n\nTITLE: TypeScript Function Type Assignment\nDESCRIPTION: Demonstrates type inference when assigning a function expression to a typed variable.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/functions/function-expression.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\ntype UseString = (value: string) => void;\nlet useString: UseString;\nuseString = function (value) {};\n```\n\n----------------------------------------\n\nTITLE: Demonstrating type guard function behavior with strictNullChecks disabled\nDESCRIPTION: This snippet illustrates how user-defined type guard functions behave when strictNullChecks is false, potentially ignoring undefined return types.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/tsconfig/strictnullchecks.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// @strictNullChecks: false\n// ユーザー定義の型ガード関数\nfunction getStringOrUndefined(): string | undefined {\n  return undefined;\n}\nconst value = getStringOrUndefined();\n//    ^?\n```\n\n----------------------------------------\n\nTITLE: Illustrating function return types with strictNullChecks enabled\nDESCRIPTION: This snippet shows how function return types are inferred when strictNullChecks is true, properly accounting for undefined or null return possibilities.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/tsconfig/strictnullchecks.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// @strictNullChecks: true\nconst result = [1, 2, 3].find((x) => x == 1);\n//    ^?\nconst element = document.getElementById(\"main\");\n//    ^?\n```\n\n----------------------------------------\n\nTITLE: Disabling ESLint Rule for Specific Line in JavaScript\nDESCRIPTION: This snippet demonstrates how to disable a specific ESLint rule for a single line of code using an inline comment. It shows how to bypass the camelcase rule for a variable name.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/tutorials/eslint.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// eslint-disable-next-line camelcase\nexport const hello_world = \"Hello World\";\n```\n\n----------------------------------------\n\nTITLE: Using Type Assertion to Avoid Compiler Errors in TypeScript\nDESCRIPTION: An example showing how to bypass TypeScript's type checking using 'any' type assertion. This approach avoids compiler errors but sacrifices type safety, potentially introducing bugs.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/generics/type-parameter-constraint.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfunction changeBackgroundColor<T>(element: T) {\n  // any に型アサーションすればコンパイルエラーは回避できる\n  // 型チェックされないのでバグの可能性\n  (element as any).style.backgroundColor = \"red\";\n  return element;\n}\n```\n\n----------------------------------------\n\nTITLE: declareキーワードを使用したアンビエント宣言\nDESCRIPTION: declareキーワードを使用して、JavaScriptで定義された関数をTypeScriptに認識させる例です。\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/declaration-file.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare function hello(name: string): string;\n\nhello(\"taro\");\n// @log: \"hello, taro\"\n```\n\n----------------------------------------\n\nTITLE: Using Optional Properties in TypeScript Objects\nDESCRIPTION: Shows how to define optional properties in object types using the question mark (?) syntax. Optional properties can be omitted when creating objects of that type.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/README.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nlet obj: { name: string; age?: number };\nobj = { name: \"John\" }; // `age`プロパティがなくてもエラーにならない\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Assignment Restrictions with never Type in TypeScript\nDESCRIPTION: This snippet shows that values cannot be assigned to a variable of never type, not even any type. Only never type itself can be assigned to never.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/statements/never.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst foo: never = 1;\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst any: any = 1;\nconst foo: never = any;\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst foo: never = 1 as never;\n```\n\n----------------------------------------\n\nTITLE: Throwing a Custom Value as an Exception in TypeScript\nDESCRIPTION: This example shows that in JavaScript (and TypeScript), you can throw any value as an exception, not just Error objects.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/builtin-api/error.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nthrow \"id is not string!\";\n```\n\n----------------------------------------\n\nTITLE: instanceof演算子の基本構文\nDESCRIPTION: instanceof演算子の基本的な構文を示しています。オブジェクトがクラスのインスタンスかどうかをチェックするための書き方です。\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/object-oriented/class/instanceof-operator.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// prettier-ignore\nオブジェクト instanceof クラス\n```\n\n----------------------------------------\n\nTITLE: Implementing Advanced Exhaustiveness Checking with Custom Error in TypeScript\nDESCRIPTION: This example demonstrates advanced exhaustiveness checking using a custom error class, which provides better runtime behavior and clarity in compiled JavaScript.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/statements/never.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\ntype Extension = \"js\" | \"ts\" | \"json\";\nclass ExhaustiveError extends Error {\n  constructor(value: never, message = `Unsupported type: ${value}`) {\n    super(message);\n  }\n}\n\nfunction printLang(ext: Extension): void {\n  switch (ext) {\n    case \"js\":\n      console.log(\"JavaScript\");\n      break;\n    case \"ts\":\n      console.log(\"TypeScript\");\n      break;\n    default:\n      throw new ExhaustiveError(ext);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Linking Pull Request to Issue using GitHub Keyword in Markdown\nDESCRIPTION: This snippet demonstrates how to use GitHub's keyword feature to link a pull request to an issue, which helps track the pull request's context and automatically closes the issue when merged.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/writing/ticket-driven.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```markdown\nClose #123\n```\n```\n\n----------------------------------------\n\nTITLE: Using Default Parameters in Functions\nDESCRIPTION: Demonstrates how to set default values for function parameters using the equals (=) syntax. Default values are used when the parameter is omitted or undefined.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/README.md#2025-04-22_snippet_28\n\nLANGUAGE: typescript\nCODE:\n```\nfunction greet(name: string = \"Mystery\") {\n  return `Hello ${name}!`;\n}\n\nconsole.log(greet(\"John\"));\n// @log: 'Hello John!'\nconsole.log(greet());\n// @log: 'Hello Mystery!'\n```\n\n----------------------------------------\n\nTITLE: Type Annotation for Rest Parameters in TypeScript\nDESCRIPTION: TypeScriptで残余引数に型注釈を付ける方法を示しています。残余引数は配列として扱われるため、配列の型を指定します。\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/functions/rest-parameters.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nfunction func(...params: number[]) {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Using Union Types for Optional Fields\nDESCRIPTION: Shows how to use union types with undefined to allow fields to be uninitialized when strict null checks are enabled.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/object-oriented/class/fields.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nclass Person {\n  name: string | undefined;\n}\nconst alice = new Person();\nconsole.log(alice.name);\n// @log: undefined\n```\n\n----------------------------------------\n\nTITLE: Iterating Through Set Values with for...of Loop\nDESCRIPTION: Shows how to iterate through Set values using a for...of loop. The values are returned in the same order they were added to the Set.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/README.md#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nconst set = new Set<number>();\n// ---cut---\nfor (const value of set) {\n  console.log(value);\n}\n```\n\n----------------------------------------\n\nTITLE: Difference in String.prototype.match() Behavior with Global Flag\nDESCRIPTION: Illustrates how the behavior of match() changes when the global flag is used. With the global flag, it returns all matches without capture groups.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/builtin-api/regexp.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst regex1 = /(.日)/;\nconst regex2 = /(.日)/g;\nconst str = \"03月01日は日曜日で祝日、晴れの日でした。\";\n\nconsole.log(str.match(regex1));\n// @log: [\"1日\", \"1日\"]\nconsole.log(str.match(regex2));\n// @log: [\"1日\", \"は日\", \"曜日\", \"祝日\", \"の日\"]\n```\n\n----------------------------------------\n\nTITLE: instanceof演算子の結果を反転する方法\nDESCRIPTION: instanceof演算子の結果を否定する方法を示しています。結果を反転するには、演算全体を括弧で囲み、前に否定演算子(!）をつける必要があります。\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/object-oriented/class/instanceof-operator.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nif (!(myInstance instanceof MyClass)) {\n  // myInstanceがMyClassではないときの処理\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Properties With noUncheckedIndexedAccess Enabled\nDESCRIPTION: Shows how enabling the noUncheckedIndexedAccess option causes TypeScript to treat properties accessed via index signatures as potentially undefined, resulting in type errors when assigning to non-union types.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/tsconfig/nouncheckedindexedaccess.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst spanish: string = butterfly.es;\nconst third: string = phoneticCodes[2];\n```\n\n----------------------------------------\n\nTITLE: Generated Type Definition for Numerical Value Object\nDESCRIPTION: The resulting type definition (.d.ts) file generated from the NumericalValueObject class, providing type information for package users.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/advanced-topics/tsconfig-for-npm-package-developers.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare class NumericalValueObject {\n  private value;\n  constructor(value: number);\n  equals(other: NumericalValueObject): boolean;\n  toString(): string;\n}\n```\n\n----------------------------------------\n\nTITLE: Using void Type in TypeScript Functions\nDESCRIPTION: Demonstrates how to use the void type in TypeScript to indicate that a function doesn't return a value or returns undefined.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/symbols-and-keywords.md#2025-04-22_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\nfunction returnUndefined(num: number): void {\n  if (num === 0) {\n    return undefined;\n  }\n\n  return;\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Optional Function Parameters in TypeScript\nDESCRIPTION: Illustrates how to make function parameters optional using the ? modifier in TypeScript.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/symbols-and-keywords.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nfunction func(x?: number) {}\nfunc();\n// xがなくてもOK\n```\n\n----------------------------------------\n\nTITLE: Declaring Fields with Type Annotations in TypeScript\nDESCRIPTION: Demonstrates how to declare fields with type annotations in TypeScript classes before assigning values to them.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/object-oriented/class/fields.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nclass Person {\n  name: string;\n}\nconst alice = new Person();\nalice.name = \"Alice\";\n// @noErrors\n```\n\n----------------------------------------\n\nTITLE: Implementing Setters in JavaScript Objects\nDESCRIPTION: Demonstrates how to use the 'set' keyword to define a setter method in an object, which is called when the property is assigned a value.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/symbols-and-keywords.md#2025-04-22_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nconst prize = {\n  latest: \"\",\n  history: [],\n  set winner(winner) {\n    this.latest = winner;\n    this.history.push(winner);\n  },\n};\n\nprize.winner = \"Stanislas Wawrinka\";\nprize.winner = \"Rafael Nadal Parera\";\nprize.winner = \"Novak Đoković\";\n\nconsole.log(prize.latest);\n// @log: \"Novak Đoković\"\nconsole.log(prize.history);\n// @log: [ 'Stanislas Wawrinka', 'Rafael Nadal Parera', 'Novak Đoković' ]\n```\n\n----------------------------------------\n\nTITLE: Assigning Values to object Type in TypeScript\nDESCRIPTION: This snippet illustrates the assignment compatibility of the object type in TypeScript. It shows that object type accepts objects and arrays but not primitive types.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/values-types-variables/object/difference-among-object-and-object.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// @errors: 2322\nlet a: object;\na = { x: 1 }; // OK\na = [1, 2, 3]; // OK。配列はオブジェクト\na = /a-z/; // OK。正規表現はオブジェクト\n\n// プリミティブ型はNG\na = 1;\na = true;\na = \"string\";\n```\n\n----------------------------------------\n\nTITLE: 変数の再利用例（TypeScript）\nDESCRIPTION: オブジェクトからキーを導き出す方法を示しています。Object.keys()を使用してオブジェクトからキーを動的に取得することで、より保守性の高いコードを実現しています。\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/type-reuse/README.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst obj = { a: 1, b: 2, c: 3 };\nconst keys1 = [\"a\", \"b\", \"c\"];\nconst keys2 = Object.keys(obj); // keys1より保守性が高い\n```\n\n----------------------------------------\n\nTITLE: Using Shorthand Property Names in Object Literals\nDESCRIPTION: Demonstrates the shorthand property syntax in object literals when the property name matches an existing variable name. This creates more concise object creation syntax.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/README.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport default \"変数nameを使いたいのでモジュール化する必要がありました。\";\n// ---cut---\nconst name = \"John\";\nconst age = 20;\nconst obj = { name, age };\nconsole.log(obj);\n// @log: { name: 'John', age: 20 }\n```\n\n----------------------------------------\n\nTITLE: Defining a Function with Rest Parameters in JavaScript\nDESCRIPTION: 基本的な残余引数の使用方法を示しています。残余引数は配列として扱われ、複数の引数を受け取ることができます。\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/functions/rest-parameters.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction func(...params) {\n  // ...\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfunction func(...params) {\n  console.log(params);\n}\nfunc(1, 2, 3);\n// @log: [ 1, 2, 3 ]\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfunction func(param1, ...params) {\n  console.log(param1, params);\n}\nfunc(1, 2, 3);\n// @log: 1 [ 2, 3 ]\n```\n\n----------------------------------------\n\nTITLE: Array Destructuring in JavaScript\nDESCRIPTION: Shows how to use array destructuring to extract values from arrays and iterable objects.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/symbols-and-keywords.md#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst numbers = [1, 2, 3];\nconst [first, ...rest] = numbers;\n// 分割代入\nconsole.log(first, rest);\n// @log: 1 [ 2, 3 ]\n\n// 分割代入\nfunction func([first, ...rest]) {\n  console.log(first, rest);\n}\nfunc([1, 2, 3]);\n// @log: 1 [ 2, 3 ]\n```\n\n----------------------------------------\n\nTITLE: Enabling 'noImplicitAny' in TypeScript Configuration\nDESCRIPTION: This example demonstrates how enabling the 'noImplicitAny' option in TypeScript configuration can help catch implicit 'any' types during compilation, improving type safety.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/values-types-variables/any.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// @errors: 7006\nfunction hello(name) {\n  console.log(`Hello, ${name.toUpperCase()}`);\n}\n```\n\n----------------------------------------\n\nTITLE: 型定義ファイルのインストール (Express)\nDESCRIPTION: Expressフレームワークとその型定義ファイルをnpmを使用してインストールするコマンドです。\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/declaration-file.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm install express --save # express本体のインストール\nnpm install @types/express --save-dev # 型定義ファイルのインストール\n```\n\n----------------------------------------\n\nTITLE: Showing readonly Variable Reassignment in TypeScript\nDESCRIPTION: This example shows that while readonly prevents property reassignment, it allows reassignment of the variable itself when the variable is an object with readonly properties.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/values-types-variables/object/readonly-vs-const.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nlet obj: { readonly x: number } = { x: 1 };\nobj = { x: 2 }; // 許可される\n```\n\n----------------------------------------\n\nTITLE: Nested JSX Elements in TypeScript React\nDESCRIPTION: Demonstrating how to nest JSX elements within each other, similar to HTML structure. This example shows a div containing two br elements.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/jsx/README.md#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nconst element = (\n  <div>\n    <br />\n    <br />\n  </div>\n);\n// 描画結果: <div><br/><br/></div>\n```\n\n----------------------------------------\n\nTITLE: Implementing User-Defined Type Guards in TypeScript\nDESCRIPTION: Shows how to use the 'is' keyword to create a user-defined type guard function in TypeScript.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/symbols-and-keywords.md#2025-04-22_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nfunction isDuck(animal: Animal): animal is Duck {\n  return animal.legs === 2;\n}\n```\n\n----------------------------------------\n\nTITLE: 基本的なinstanceofの使用例\nDESCRIPTION: ClassAとClassBの2つのクラスを定義し、ClassAのインスタンスに対してinstanceof演算子を使用して型チェックを行う例です。期待通り、自身のクラスに対してはtrueを、別のクラスに対してはfalseを返します。\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/object-oriented/class/instanceof-operator.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nclass ClassA {}\nclass ClassB {}\nconst a = new ClassA();\nconsole.log(a instanceof ClassA);\n// @log: true\nconsole.log(a instanceof ClassB);\n// @log: false\n```\n\n----------------------------------------\n\nTITLE: Demonstrating typeof Operator Results in JavaScript\nDESCRIPTION: This snippet shows the return values of the typeof operator for various JavaScript data types, including primitives, objects, and functions.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/values-types-variables/typeof-operator.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ntypeof true; //=> \"boolean\"\ntypeof 0; //=> \"number\"\ntypeof \"Hello World\"; //=> \"string\"\ntypeof undefined; //=> \"undefined\"\ntypeof null; //=> \"object\"\ntypeof Symbol(); //=> \"symbol\"\ntypeof 1n; //=> \"bigint\"\ntypeof [1, 2, 3]; //=> \"object\"\ntypeof { a: 1, b: 2 }; //=> \"object\"\ntypeof (() => {}); //=> \"function\"\n```\n\n----------------------------------------\n\nTITLE: tscコマンドによる型定義ファイルの生成\nDESCRIPTION: TypeScriptコンパイラ（tsc）を使用して型定義ファイルを生成するコマンドです。\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/declaration-file.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ntsc -d\n```\n\n----------------------------------------\n\nTITLE: Incorrect Object Type Checking in JavaScript\nDESCRIPTION: This snippet shows a flawed implementation of an object type check that fails to account for the special case of null being considered an object by typeof.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/values-types-variables/typeof-operator.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfunction isObject(value) {\n  return typeof value === \"object\"; // valueがnullになる場合を考慮していない\n}\n\nisObject(null); // 戻り値がtrueになってしまう\n```\n\n----------------------------------------\n\nTITLE: 生成された型定義ファイル (.d.ts)\nDESCRIPTION: TypeScriptコードから生成された型定義ファイルの例です。インターフェースと関数の型情報が含まれています。\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/declaration-file.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Person {\n  firstName: string;\n  lastName: string;\n}\ndeclare function greeter(person: Person): string;\n```\n\n----------------------------------------\n\nTITLE: JSX Expressions with Operations and Methods\nDESCRIPTION: Using JavaScript expressions in JSX for calculations and method calls. This demonstrates both arithmetic operations and string manipulation.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/jsx/README.md#2025-04-22_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nconst a = 10;\nconst b = 20;\nconst sum = <h1>{a + b}</h1>;\n// 描画結果: <h1>30</h1>\n\nconst name = \"Josh Perez\";\nconst greeting = <h1>Hello, {name.toUpperCase()}</h1>;\n// 描画結果: <h1>Hello, <!-- -->JOSH PEREZ</h1>\n```\n\n----------------------------------------\n\nTITLE: Accessing Enum Values with Dot Notation\nDESCRIPTION: Demonstrates how to access enum values using dot notation, and how to declare variables with an enum type. This enforces that variables can only hold values from the enum.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/README.md#2025-04-22_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nenum Color {\n  Red,\n  Green,\n  Blue,\n}\n// ---cut---\nconst myColor: Color = Color.Red;\n```\n\n----------------------------------------\n\nTITLE: Extending Operator Class with Issues in Method Chaining\nDESCRIPTION: A problematic extension of the Operator class that shows inheritance issues when method return types are explicitly set to specific class types rather than 'this'.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/object-oriented/class/return-this-type.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nclass NewOperator extends Operator {\n  public constructor(value: number) {\n    super(value);\n  }\n\n  public power(value: number): NewOperator {\n    this.value **= value;\n    return this;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Assigning Values to any and unknown Types in TypeScript\nDESCRIPTION: This snippet demonstrates that both 'any' and 'unknown' types can accept various types of values, including null, undefined, boolean, number, string, and object.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/statements/any-vs-unknown.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst any1: any = null;\nconst any2: any = undefined;\nconst any3: any = true;\nconst any4: any = 0.8;\nconst any5: any = \"Comment allez-vous\";\nconst any6: any = {\n  x: 0,\n  y: 1,\n  name: \"origin\",\n};\n\nconst unknown1: unknown = null;\nconst unknown2: unknown = undefined;\nconst unknown3: unknown = true;\nconst unknown4: unknown = 0.8;\nconst unknown5: unknown = \"Comment allez-vous\";\nconst unknown6: unknown = {\n  x: 0,\n  y: 1,\n  name: \"origin\",\n};\n```\n\n----------------------------------------\n\nTITLE: 生成されたJavaScriptファイル\nDESCRIPTION: TypeScriptからコンパイルされたJavaScriptコードの例です。型情報は削除されています。\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/declaration-file.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfunction greeter(person) {\n  return \"Hello, \" + person.firstName + \" \" + person.lastName;\n}\n//# sourceMappingURL=sample.js.map\n```\n\n----------------------------------------\n\nTITLE: Numeric Subtraction with Type Coercion in JavaScript\nDESCRIPTION: Demonstrates how JavaScript coerces a string number to a numeric type when performing subtraction. The string \"1\" is converted to number 1 before the subtraction operation.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/values-types-variables/type-coercion.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n\"1\" - 1; //=> 0\n```\n\n----------------------------------------\n\nTITLE: If-Else-If Chain in JavaScript\nDESCRIPTION: A conditional chain that checks multiple conditions using if, else if, and else. This pattern allows handling multiple possible values with different code paths.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/statements/if-else.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nif (value === 0) {\n  // ...\n} else if (value === 1) {\n  // ...\n} else {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: JSON stringification behavior with undefined and null in JavaScript\nDESCRIPTION: This snippet demonstrates how JSON.stringify handles object properties with undefined and null values differently in JavaScript.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/values-types-variables/undefined-vs-null.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log(JSON.stringify({ foo: undefined }));\n// @log: {}\nconsole.log(JSON.stringify({ foo: null }));\n// @log: {\"foo\": null}\n```\n\n----------------------------------------\n\nTITLE: Assigning String Values to Enum Members\nDESCRIPTION: Shows how to assign specific string values to enum members instead of using the default numeric values. This makes the enum values more meaningful when used.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/README.md#2025-04-22_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nenum Color {\n  Red = \"red\",\n  Green = \"green\",\n  Blue = \"blue\",\n}\n```\n\n----------------------------------------\n\nTITLE: If-Else with Variable Assignment in JavaScript\nDESCRIPTION: Using if-else statements to assign different values to a previously declared variable. This pattern uses let to create a mutable variable that can be assigned in different branches.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/statements/if-else.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nlet result;\nif (value === 0) {\n  result = \"OK\";\n} else {\n  result = \"NG\";\n}\n```\n\n----------------------------------------\n\nTITLE: 継承関係におけるinstanceofの挙動\nDESCRIPTION: 親クラスParentと、それを継承する子クラスChildを定義し、Childのインスタンスに対してParentのinstanceofチェックを行う例です。継承関係の場合、子クラスのインスタンスは親クラスのインスタンスとしても認識されます。\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/object-oriented/class/instanceof-operator.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nclass Parent {}\nclass Child extends Parent {}\nconst child = new Child();\nconsole.log(child instanceof Parent);\n// @log: true\n```\n\n----------------------------------------\n\nTITLE: Accessing non-existent object properties and array elements in JavaScript\nDESCRIPTION: This example demonstrates how JavaScript returns undefined when accessing non-existent object properties or array elements.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/values-types-variables/undefined-vs-null.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst obj = {};\nconsole.log(obj.foo);\n// @log: undefined\nconst arr = [];\nconsole.log(arr[0]);\n// @log: undefined\n```\n\n----------------------------------------\n\nTITLE: Invalid Conditional Expression Example in JavaScript\nDESCRIPTION: An example of invalid JavaScript syntax that attempts to use if-else as an expression. This won't work because if-else in JavaScript is a statement, not an expression.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/statements/if-else.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// こんな書き方はできない\nconst result = if (value === 0) \"OK\" else \"NG\";\n```\n\n----------------------------------------\n\nTITLE: Escaping Backslashes in RegExp Constructor\nDESCRIPTION: Shows how to properly escape backslashes when using the RegExp constructor. Literal notation requires single backslashes, while the constructor requires double backslashes.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/builtin-api/regexp.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst regexp1 = /0(8|9)0-\\d{4}-\\d{4}/g;\nconst regexp2 = new RegExp(\"0(8|9)0-\\\\d{4}-\\\\d{4}\", \"g\");\n```\n\n----------------------------------------\n\nTITLE: JSX Style Attribute in TypeScript React\nDESCRIPTION: Comparing HTML style attributes with JSX style attributes. JSX requires styles to be provided as JavaScript objects with camelCase property names.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/jsx/README.md#2025-04-22_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n<div style={{ backgroundColor: \"yellow\", color: \"blue\" }}>Hello!</div>;\n// 描画結果: <div style='background-color:yellow;color:blue'>Hello!</div>\n```\n\n----------------------------------------\n\nTITLE: Enabling Declaration Source Maps in TypeScript\nDESCRIPTION: Configure tsconfig.json to generate source maps for declaration files, allowing IDE users to jump to the original TypeScript source code.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/advanced-topics/tsconfig-for-npm-package-developers.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n\"declarationMap\": true,\n/* Generates a sourcemap for each corresponding '.d.ts' file. */\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Fields in JavaScript\nDESCRIPTION: Shows how to add fields to class instances in JavaScript by assigning values to properties after instantiation.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/object-oriented/class/fields.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nclass Person {}\nconst alice = new Person();\nalice.name = \"Alice\";\n```\n\n----------------------------------------\n\nTITLE: Using Logical OR in JavaScript\nDESCRIPTION: Demonstrates the logical OR operator (||) for boolean operations and providing default values.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/symbols-and-keywords.md#2025-04-22_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log(true || false);\n// @log: true\nconsole.log(false || false);\n// @log: false\n\nconsole.log(false || \"abc\");\n// @log: \"abc\"\n```\n\n----------------------------------------\n\nTITLE: Creating Basic React Component Structure\nDESCRIPTION: Initial setup of the App component and LikeButton component in React with TypeScript.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/tutorials/react-like-button-tutorial.md#2025-04-22_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <>\n      <LikeButton />\n    </>\n  );\n}\n\nfunction LikeButton() {\n  return <span>いいねボタン予定地</span>;\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Invalid Optional Parameter Placement\nDESCRIPTION: Shows that optional parameters must be placed at the end of the parameter list.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/functions/optional-parameters.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nfunction func(foo?: string, bar: string) {}\n```\n\n----------------------------------------\n\nTITLE: Assigning Number to Variable in TypeScript\nDESCRIPTION: This snippet demonstrates assigning a number to a variable with a number type annotation in TypeScript.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/values-types-variables/literal-types.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nlet x: number;\nx = 1;\n```\n\n----------------------------------------\n\nTITLE: Declaring Boolean Literals in TypeScript\nDESCRIPTION: This snippet demonstrates how to declare boolean literals in TypeScript using 'true' and 'false' values.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/values-types-variables/boolean.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst isOk = true;\nconst isPanda = false;\n```\n\n----------------------------------------\n\nTITLE: Error When Using Mapped Types with Interfaces\nDESCRIPTION: Demonstrates that mapped types cannot be used with interfaces. The example shows the error that occurs when trying to use the [key in Type] syntax in an interface declaration.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/object-oriented/interface/interface-vs-type-alias.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n// @errors: 7061\ntype SystemSupportLanguage = \"en\" | \"fr\" | \"it\" | \"es\";\n\ninterface Butterfly {\n  [key in SystemSupportLanguage]: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Nullish Coalescing Assignment in JavaScript\nDESCRIPTION: Shows how to use the nullish coalescing assignment (??=) to assign values only if the left-hand side is null or undefined.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/symbols-and-keywords.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst user1 = { name: undefined };\nuser1.name ??= \"taro\";\nconsole.log(user1.name);\n// @log: taro\n\nconst user2 = { name: \"kaori\" };\nuser2.name ??= \"taro\";\nconsole.log(user2.name);\n// @log: kaori\n```\n\n----------------------------------------\n\nTITLE: Sample TypeScript Code for ESLint Testing\nDESCRIPTION: This TypeScript snippet exports a constant and logs it to the console. It's used to demonstrate ESLint's ability to detect style and best practice violations in TypeScript code.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/tutorials/eslint.md#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nexport const hello_world = \"Hello World\";\nconsole.log(hello_world);\n```\n\n----------------------------------------\n\nTITLE: Using Const Assertions in TypeScript\nDESCRIPTION: Illustrates how to use const assertions to create read-only literal types from variable declarations.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/symbols-and-keywords.md#2025-04-22_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nlet hello = \"hello\";\n//      ^?\nlet bye = \"bye\" as const;\n//  ^?\nconst wolf = { caniformia: \"Wolf\" };\n//    ^?\nconst fox = { caniformia: \"Fox\" } as const;\n//    ^?\n```\n\n----------------------------------------\n\nTITLE: JSX Whitespace Handling in TypeScript React\nDESCRIPTION: Illustrating how JSX handles whitespace between elements. Without explicit space insertion, adjacent elements will render without separation.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/jsx/README.md#2025-04-22_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nconst element = (\n  <p>\n    This is a\n    <strong>pen</strong>\n    .\n  </p>\n);\n// 描画結果: <p>This is a<strong>pen</strong>.</p>\n```\n\n----------------------------------------\n\nTITLE: Defining isZero function for testing\nDESCRIPTION: TypeScript implementation of the isZero function to be tested.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/tutorials/jest.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nexport function isZero(value: number): boolean {\n  return value === 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Illustrating function return types with strictNullChecks disabled\nDESCRIPTION: This snippet demonstrates how function return types are inferred when strictNullChecks is false, potentially hiding undefined or null return possibilities.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/tsconfig/strictnullchecks.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// @strictNullChecks: false\nconst result = [1, 2, 3].find((x) => x == 1);\n//    ^?\nconst element = document.getElementById(\"main\");\n//    ^?\n```\n\n----------------------------------------\n\nTITLE: Using Optional Chaining in JavaScript\nDESCRIPTION: Shows how optional chaining (?.) prevents errors when accessing properties of potentially null or undefined objects.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/symbols-and-keywords.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst user = null;\nconsole.log(user.name);\n// @error: Cannot read property 'name' of null\nconsole.log(user?.name);\n// @log: undefined\n```\n\n----------------------------------------\n\nTITLE: ESLint Configuration with Semi Rule\nDESCRIPTION: ESLint configuration adding semicolon enforcement rule.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/tutorials/eslint.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  root: true,\n  env: {\n    browser: true,\n    es2021: true,\n  },\n  parserOptions: {\n    ecmaVersion: \"latest\",\n    sourceType: \"module\",\n  },\n  rules: {\n    \"no-console\": \"error\",\n    camelcase: [\"error\", { properties: \"never\" }],\n    semi: [\"error\", \"always\"],\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: String Concatenation with Type Coercion in JavaScript\nDESCRIPTION: Shows how JavaScript coerces a number to a string when using the addition operator with a string. The number 1 is converted to string \"1\" before concatenation.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/values-types-variables/type-coercion.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n\"1\" + 1; //=> \"11\"\n```\n\n----------------------------------------\n\nTITLE: Comments in JSX\nDESCRIPTION: Adding comments within JSX code. JSX comments must be enclosed in curly braces and use JavaScript's block comment syntax.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/jsx/README.md#2025-04-22_snippet_20\n\nLANGUAGE: tsx\nCODE:\n```\nconst element = <div>{/* This is a comment */}</div>;\n// 描画結果: <div></div>\n```\n\n----------------------------------------\n\nTITLE: Object Destructuring in JavaScript\nDESCRIPTION: Demonstrates how to use object destructuring to extract values from objects and assign them to variables.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/symbols-and-keywords.md#2025-04-22_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nconst object = { a: 1, b: 2, c: 3, d: 4 };\nconst { a, b, ...rest } = object; // 分割代入\nconsole.log(a, b, rest);\n// @log: 1 2 { c: 3, d: 4 }\n\n// 分割代入\nfunction func({ a, b, ...rest }) {\n  console.log(a, b, rest);\n}\nfunc(object);\n// @log: 1 2 { c: 3, d: 4 }\n```\n\n----------------------------------------\n\nTITLE: Using typeof Operator with null in TypeScript\nDESCRIPTION: Illustrates the behavior of the typeof operator when used with null in TypeScript. It's important to note that typeof null returns \"object\", which is a known quirk in JavaScript.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/values-types-variables/null.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconsole.log(typeof null);\n// @log: \"object\"\n```\n\n----------------------------------------\n\nTITLE: Defining Optional Properties in TypeScript Interfaces\nDESCRIPTION: Shows how to use the optional modifier (?) to define optional properties in TypeScript interfaces.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/symbols-and-keywords.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ninterface User {\n  name: string;\n  // name は必須\n  age?: number;\n  // age は任意\n}\nconst user: User = { name: \"taro\" };\n```\n\n----------------------------------------\n\nTITLE: ESLint Configuration with Camelcase Rule\nDESCRIPTION: Extended ESLint configuration adding camelcase rule with property exemption.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/tutorials/eslint.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  root: true,\n  env: {\n    browser: true,\n    es2021: true,\n  },\n  parserOptions: {\n    ecmaVersion: \"latest\",\n    sourceType: \"module\",\n  },\n  rules: {\n    \"no-console\": \"error\",\n    camelcase: [\"error\", { properties: \"never\" }],\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Defining a Numerical Value Object Class in TypeScript\nDESCRIPTION: Example of a simple TypeScript class representing a numerical value object with equality comparison and string conversion methods.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/advanced-topics/tsconfig-for-npm-package-developers.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nclass NumericalValueObject {\n  private value: number;\n\n  public constructor(value: number) {\n    this.value = value;\n  }\n\n  public equals(other: NumericalValueObject): boolean {\n    return this.value === other.value;\n  }\n\n  public toString(): string {\n    return `${this.value}`;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Function Expression Syntax in JavaScript\nDESCRIPTION: Shows the basic syntax of a function expression with a function name and parameters.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/functions/function-expression.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction 関数名(引数) {\n  // 処理内容\n};\n```\n\n----------------------------------------\n\nTITLE: Event Listener Function Expression\nDESCRIPTION: Demonstrates using a function expression as an event listener callback.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/functions/function-expression.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nbutton.addEventListener(\"click\", function (event) {\n  console.log(\"クリックされました\");\n});\n```\n\n----------------------------------------\n\nTITLE: Object Method Function Expression\nDESCRIPTION: Shows how to assign a function expression as an object method.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/functions/function-expression.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst オブジェクト = {\n  メソッド名: function () {},\n};\n```\n\n----------------------------------------\n\nTITLE: Showing Unsigned Right Shift in JavaScript\nDESCRIPTION: Illustrates the unsigned right shift operator (>>>) which shifts bits right and fills with zeros on the left.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/symbols-and-keywords.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst a = -2;\n// @log: 11111111111111111111111111111110\nconst b = 3;\nconsole.log(a >>> b);\n// @log: 00011111111111111111111111111111\n// 出力: 536870911\n```\n\n----------------------------------------\n\nTITLE: ESLint Configuration with Airbnb Base\nDESCRIPTION: ESLint configuration using airbnb-base shareable config.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/tutorials/eslint.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  root: true,\n  env: {\n    browser: true,\n    es2021: true,\n  },\n  parserOptions: {\n    ecmaVersion: \"latest\",\n    sourceType: \"module\",\n  },\n  extends: [\"airbnb-base\"],\n};\n```\n\n----------------------------------------\n\nTITLE: Filtering Array with Truthy Values in TypeScript\nDESCRIPTION: Shows an example of using truthy/falsy values to filter an array, which can lead to unintended results by removing not only null values but also the number 0.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/values-types-variables/truthy-falsy-values.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst array = [null, 3, 0, null, 1, 2];\n\nconsole.log(array.filter((n) => n));\n// @log: [3, 1, 2]\n```\n\n----------------------------------------\n\nTITLE: さまざまな型変数名の使用例\nDESCRIPTION: TypeScriptで使用可能なさまざまな型変数名の例を示しています。1文字だけでなく、複数文字や特殊文字、Unicodeも型変数名として使用できます。\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/generics/type-variables.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nfunction func1<T>(x: T) {}\nfunction func2<Foo>(x: Foo) {}\nfunction func3<fooBar>(x: fooBar) {}\nfunction func4<$>(x: $) {}\nfunction func5<かた>(x: かた) {}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Protected Access Modifier Restrictions in TypeScript\nDESCRIPTION: Illustrates the compile-time error that occurs when trying to access a protected method from outside its class or subclasses. Protected members are only accessible within the class itself or its subclasses.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/object-oriented/class/access-modifiers.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nclass Animal {\n  public name: string;\n\n  public constructor(theName: string) {\n    this.name = theName;\n  }\n\n  // `public`から`protected`に変更\n  protected move(distanceInMeters: number) {\n    console.log(`${this.name} moved ${distanceInMeters}m.`);\n  }\n}\n\nconst gorilla = new Animal(\"ゴリラ\");\ngorilla.move(10);\n```\n\n----------------------------------------\n\nTITLE: Creating Impossible Types with Intersection in TypeScript\nDESCRIPTION: This snippet demonstrates how intersecting incompatible types results in the never type, as no value can satisfy both number and string types simultaneously.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/statements/never.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ntype NumberString = number & string;\n```\n\n----------------------------------------\n\nTITLE: Illustrating Bitwise Right Shift in JavaScript\nDESCRIPTION: Demonstrates the use of the right shift operator (>>) to shift bits to the right by a specified number of positions.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/symbols-and-keywords.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst a = 8;\n// @log: 00001000\nconst b = 3;\nconsole.log(a >> b);\n// @log: 00000001\n// 出力: 1\n```\n\n----------------------------------------\n\nTITLE: Jest configuration for TypeScript\nDESCRIPTION: Jest configuration file content for TypeScript support.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/tutorials/jest.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n/** @type {import(\"ts-jest/dist/types\").InitialOptionsTsJest} */\nmodule.exports = {\n  preset: \"ts-jest\",\n  testEnvironment: \"node\",\n};\n```\n\n----------------------------------------\n\nTITLE: Using Rest Parameters for Variable Arguments\nDESCRIPTION: Shows how to use rest parameters to accept an arbitrary number of arguments as an array. This allows functions to handle a variable number of parameters of the same type.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/README.md#2025-04-22_snippet_29\n\nLANGUAGE: typescript\nCODE:\n```\nfunction sum(...numbers: number[]) {\n  return numbers.reduce((total, num) => total + num, 0);\n}\n\nconsole.log(sum(1, 2, 3, 4, 5));\n// @log: 15\n```\n\n----------------------------------------\n\nTITLE: ESLint Configuration with Custom Rule Overrides\nDESCRIPTION: Final ESLint configuration with airbnb-base and custom rule overrides.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/tutorials/eslint.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  root: true,\n  env: {\n    browser: true,\n    es2021: true,\n  },\n  parserOptions: {\n    ecmaVersion: \"latest\",\n    sourceType: \"module\",\n  },\n  extends: [\"airbnb-base\"],\n  rules: {\n    \"import/prefer-default-export\": \"off\",\n    quotes: [\"error\", \"double\"],\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Using isMeals and willBeMetabo Functions in TypeScript\nDESCRIPTION: This example shows how to use isMeals for validation before calling willBeMetabo, with error handling.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/tips/shallow-copy-object.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nfunction shouldBeCareful(meals: MealsPerDay): boolean {\n  try {\n    // ...\n    isMeals(meals);\n\n    return willBeMetabo(meals);\n  } catch (err: unknown) {\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring BigInt Literal in TypeScript\nDESCRIPTION: Demonstrates how to create a bigint literal by appending 'n' to an integer value. Requires TypeScript compiler target of es2020 or higher.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/values-types-variables/bigint.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst x = 100n;\n```\n\n----------------------------------------\n\nTITLE: Bitwise XOR Operation in JavaScript\nDESCRIPTION: Demonstrates the use of the bitwise XOR operator (^) to perform exclusive OR operation on bits.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/symbols-and-keywords.md#2025-04-22_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconst a = 1;\n// @log: 00000001\nconst b = 5;\n// @log: 00000101\nconsole.log(a ^ b);\n// @log: 00000100\n// 出力: 4\n```\n\n----------------------------------------\n\nTITLE: Installing TypeScript and Jest dependencies\nDESCRIPTION: Commands to install TypeScript and Jest-related packages using Yarn.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/tutorials/jest.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nyarn add -D typescript\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn add -D 'jest@^28.0.0' 'ts-jest@^28.0.0' '@types/jest@^28.0.0'\n```\n\n----------------------------------------\n\nTITLE: Function Expression with Variable Assignment\nDESCRIPTION: Demonstrates assigning a function expression to a variable.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/functions/function-expression.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst 変数名 = function 関数名(引数) {\n  // 処理内容\n};\n```\n\n----------------------------------------\n\nTITLE: Basic ESLint Configuration with no-console Rule\nDESCRIPTION: Initial ESLint configuration file setup with basic environment settings and no-console rule implementation.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/tutorials/eslint.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  root: true,\n  env: {\n    browser: true,\n    es2021: true,\n  },\n  parserOptions: {\n    ecmaVersion: \"latest\",\n    sourceType: \"module\",\n  },\n  rules: {\n    \"no-console\": \"error\",\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Basic unknown Type Assignment Examples\nDESCRIPTION: Demonstrates how unknown type can accept any value type in TypeScript\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/statements/unknown.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nlet value: unknown;\nvalue = 1; // OK\nvalue = \"string\"; // OK\nvalue = { name: \"オブジェクト\" }; // OK\n```\n\n----------------------------------------\n\nTITLE: 意味のある名前を持つ型変数の使用例\nDESCRIPTION: 型変数に意味のある名前をつける例として、TKeyとTValueという命名規則を使用したmakeKeyValuePair関数を示しています。\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/generics/type-variables.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nfunction makeKeyValuePair<TKey, TValue>(key: TKey, value: TValue) {}\n```\n\n----------------------------------------\n\nTITLE: Using Double Tilde for Floor Function in JavaScript\nDESCRIPTION: Demonstrates the use of double tilde (~~) as a shorthand for Math.floor() for positive numbers and Math.ceil() for negative numbers.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/symbols-and-keywords.md#2025-04-22_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\n~~1.5;\n// @log: 1\nMath.floor(1.5);\n// @log: 1\nMath.ceil(1.5);\n// @log: 2\n\n~~-1.5;\n// @log: -1\nMath.floor(-1.5);\n// @log: -2\nMath.ceil(-1.5);\n// @log: -1\n```\n\n----------------------------------------\n\nTITLE: Writing Jest tests for isZero function\nDESCRIPTION: Jest test cases for the isZero function, checking true and false conditions.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/tutorials/jest.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { isZero } from \"./isZero\";\n\ntest(\"0を渡したらtrueになること\", () => {\n  const result = isZero(0);\n  expect(result).toBe(true);\n});\n\ntest(\"1を渡したらfalseになること\", () => {\n  const result = isZero(1);\n  expect(result).toBe(false);\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Getters in JavaScript Objects\nDESCRIPTION: Shows how to use the 'get' keyword to define a getter method in an object, which is called when the property is accessed.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/symbols-and-keywords.md#2025-04-22_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nconst exam = {\n  scores: [50, 70, 90, 80, 100, 60],\n  get best() {\n    return Math.max(...this.scores);\n  },\n};\n\nconsole.log(exam.best);\n// @log: 100\n```\n\n----------------------------------------\n\nTITLE: Basic TypeScript Configuration in tsconfig.json\nDESCRIPTION: This JSON snippet shows a minimal TypeScript compiler configuration. It specifies the output directory for compiled files and includes the source directory.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/tutorials/eslint.md#2025-04-22_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"outDir\": \"dist\"\n  },\n  \"include\": [\"src\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing isMeals Validation Function in TypeScript\nDESCRIPTION: This snippet shows the implementation of an isMeals function to validate if the given object contains valid meals.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/tips/shallow-copy-object.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nfunction isMeals(meals: MealsPerDay): void {\n  if (!isMeal(meals.breakfast)) {\n    throw new Error(\"BREAKFAST IS NOT A MEAL!\");\n  }\n  if (!isMeal(meals.lunch)) {\n    throw new Error(\"LUNCH IS NOT A MEAL!!!\");\n  }\n  if (!isMeal(meals.dinner)) {\n    throw new Error(\"DINNER IS NOT A MEAL!!!\");\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Self-Closing Tags in JSX\nDESCRIPTION: Using self-closing tags in JSX for elements that don't have content. This follows XML syntax conventions for empty elements.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/jsx/README.md#2025-04-22_snippet_17\n\nLANGUAGE: tsx\nCODE:\n```\nconst element = <img src=\"myImage.jpg\" alt=\"\" />;\n```\n\n----------------------------------------\n\nTITLE: Unknown Type Assignment Restrictions\nDESCRIPTION: Demonstrates type safety of unknown by showing invalid assignments\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/statements/unknown.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst value: unknown = 10;\nconst int: number = value;\nconst bool: boolean = value;\nconst str: string = value;\nconst obj: object = value;\n\nconst any: any = value; // OK\nconst unknown: unknown = value; // OK\n```\n\n----------------------------------------\n\nTITLE: TypeScript Array Index Lookup Without NoInfer\nDESCRIPTION: Example showing how type inference works without NoInfer utility type, where T is inferred to include all passed types including invalid ones.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/type-reuse/utility-types/no-infer.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction getIndexFromArray<T extends string>(elements: T[], item: T): number {\n  return elements.findIndex((element) => element === item);\n}\n\ntype Fruit = \"grape\" | \"apple\" | \"banana\";\nconst fruits: Fruit[] = [\"grape\", \"apple\", \"banana\"];\ngetIndexFromArray(fruits, \"apple\");\ngetIndexFromArray(fruits, \"peach\");\n```\n\n----------------------------------------\n\nTITLE: Iterating Through Map Entries with for...of Loop\nDESCRIPTION: Demonstrates how to iterate through Map entries using a for...of loop with destructuring. Each iteration provides access to both the key and value of an entry.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/README.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst map = new Map<string, number>();\n// ---cut---\nfor (const [key, value] of map) {\n  console.log(key, value);\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Jest test file for checking setup\nDESCRIPTION: A simple Jest test file to verify the setup is working correctly.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/tutorials/jest.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ntest(\"check\", () => {\n  console.log(\"OK\");\n});\n```\n\n----------------------------------------\n\nTITLE: Using MealsPerDay Type and willBeMetabo Function in TypeScript\nDESCRIPTION: This example demonstrates how to use the MealsPerDay type and willBeMetabo function with a sample meals object.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/tips/shallow-copy-object.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// 439.2 kcal\nconst meals: MealsPerDay = {\n  breakfast: \"a vegetable salad\",\n  lunch: \"a cod's meuniere\",\n  dinner: \"a half bottle of wine (white)\",\n};\n\nwillBeMetabo(meals);\n// @log: false\n```\n\n----------------------------------------\n\nTITLE: keyof with Multiple Properties\nDESCRIPTION: Shows how keyof creates a union type of all property names when used with an object containing multiple properties.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/type-reuse/keyof-type-operator.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntype Book = {\n  title: string;\n  price: number;\n  rating: number;\n};\ntype BookKey = keyof Book;\n// 上は次と同じ意味になる\ntype BookKey = \"title\" | \"price\" | \"rating\";\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Limitation of Mapped Types in TypeScript\nDESCRIPTION: Shows that Mapped Types cannot have additional properties directly defined.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/type-reuse/mapped-types.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ntype KeyValuesAndName = {\n  [K in string]: string;\n  name: string; // 追加のプロパティ\n};\n```\n\n----------------------------------------\n\nTITLE: Using the 'in' Operator in JavaScript\nDESCRIPTION: Demonstrates the use of the 'in' operator to check if a property exists in an object.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/symbols-and-keywords.md#2025-04-22_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nconst book = { name: \"サバイバルTypeScript\" };\nconsole.log(\"name\" in book);\n// @log: true\nconsole.log(\"price\" in book);\n// @log: false\n```\n\n----------------------------------------\n\nTITLE: Snapshot File Content for React Component Test\nDESCRIPTION: Shows the content of an automatically generated snapshot file for a React component test. It contains the expected DOM structure of the component.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/tutorials/component-test.md#2025-04-22_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n// Jest Snapshot v1, https://goo.gl/fbAQLP\nexports[`描画されてすぐはOFFと表示されている 1`] = `\n<div>\n  <button>\n    OFF\n  </button>\n</div>\n`;\n```\n\n----------------------------------------\n\nTITLE: Throwing a Basic Error in TypeScript\nDESCRIPTION: This snippet demonstrates how to create and throw a basic Error object in TypeScript.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/builtin-api/error.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nthrow new Error();\n```\n\n----------------------------------------\n\nTITLE: Corrected TypeScript Code After ESLint Fixes\nDESCRIPTION: This TypeScript snippet shows the corrected version of the previous code after addressing ESLint warnings. It uses camelCase for the variable name and removes the console.log statement.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/tutorials/eslint.md#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nexport const helloWorld = \"Hello World\";\n```\n\n----------------------------------------\n\nTITLE: Array and Object Access in JavaScript\nDESCRIPTION: Demonstrates how to access array elements and object properties using bracket notation.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/symbols-and-keywords.md#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst numbers = [1, 2, 3];\nnumbers[0];\n// @log: 1\nconst object = { a: 1, b: 2 };\nobject[\"a\"];\n// @log: 1\n```\n\n----------------------------------------\n\nTITLE: Creating a Test File for Snapshot Testing in TypeScript\nDESCRIPTION: Creates a new test file for snapshot testing of a React component using the touch command in the shell.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/tutorials/component-test.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ntouch SimpleButton.test.tsx\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Loose Equality (==) in TypeScript\nDESCRIPTION: This snippet illustrates loose equality comparisons in TypeScript, showing how values of different types can be considered equal after type conversion.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/values-types-variables/equality.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconsole.log(null == undefined);\n// @log: true\nconsole.log(0 == 0n);\n// @log: true\nconsole.log(0 == \"0\");\n// @log: true\nconsole.log(0 == \"\");\n// @log: true\nconsole.log(0 == false);\n// @log: true\nconsole.log(\"0\" == false);\n// @log: true\nconsole.log(\"\" == false);\n// @log: true\n// @noErrors\n```\n\n----------------------------------------\n\nTITLE: Creating package.json for Jest tutorial project\nDESCRIPTION: Initial package.json configuration for the Jest tutorial project.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/tutorials/jest.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"jest-tutorial\",\n  \"license\": \"UNLICENSED\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using Numeric Separators in JavaScript\nDESCRIPTION: Shows how to use underscores as numeric separators to improve readability of large numbers.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/symbols-and-keywords.md#2025-04-22_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nconst hyakuman = 1_000_000;\n```\n\n----------------------------------------\n\nTITLE: Sample JavaScript Code with ESLint Violations\nDESCRIPTION: Example JavaScript code intentionally violating ESLint rules for demonstration.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/tutorials/eslint.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport const hello_world = \"Hello World\";\nconsole.log(hello_world);\n```\n\n----------------------------------------\n\nTITLE: Conditional Statement with Boolean Method in TypeScript\nDESCRIPTION: Demonstrates a typical use of a boolean method in an if statement, where the method isPartTime() is expected to return a boolean value.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/values-types-variables/truthy-falsy-values.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nif (employee.isPartTime()) {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Yarn globally with npm\nDESCRIPTION: Command to install Yarn package manager globally using npm.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/tutorials/jest.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install -g yarn\n```\n\n----------------------------------------\n\nTITLE: 型変数のスコープに関する例\nDESCRIPTION: 型変数Tのスコープに関する例を示しています。関数内では型変数を参照できますが、関数外では参照できないことを示しています。\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/generics/type-variables.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nfunction printAndReturn<T>(value: T): T {\n  let values: T[] = []; // OK\n  const doSomething = (value: T) => {}; // OK\n  return value;\n}\n\nlet value: T;\n```\n\n----------------------------------------\n\nTITLE: Generating Jest configuration file\nDESCRIPTION: Command to generate Jest configuration file using ts-jest.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/tutorials/jest.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nyarn ts-jest config:init\n```\n\n----------------------------------------\n\nTITLE: Error in Duplicate Type Alias Declarations\nDESCRIPTION: Shows that creating multiple type aliases with the same name results in a compilation error. Type aliases cannot be redeclared.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/object-oriented/interface/interface-vs-type-alias.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// @errors: 2300\ntype SameNameTypeWillError = {\n  message: string;\n};\ntype SameNameTypeWillError = {\n  detail: string;\n};\n```\n\n----------------------------------------\n\nTITLE: Checking Package Contents Before Publishing\nDESCRIPTION: Command to simulate package publishing and verify the contents of the package without actually publishing it.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/advanced-topics/tsconfig-for-npm-package-developers.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpm publish --dry-run\n```\n\n----------------------------------------\n\nTITLE: Styling LikeButton Component with CSS\nDESCRIPTION: CSS styles for the LikeButton component to create a red button with white text.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/tutorials/react-like-button-tutorial.md#2025-04-22_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n.likeButton {\n  background-color: rgb(231, 76, 60);\n  color: white;\n  padding: 0.8rem;\n  border-radius: 0.4rem;\n  cursor: pointer;\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScriptでの基本的な変数宣言\nDESCRIPTION: 変数xに数値1を代入する基本的なTypeScriptコード例です。型変数の説明の前に、通常の変数がどのように使われるかを示しています。\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/generics/type-variables.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst x = 1;\n```\n\n----------------------------------------\n\nTITLE: Initializing React Project with Vite\nDESCRIPTION: Command to create a new React project using Vite with TypeScript and SWC.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/tutorials/react-like-button-tutorial.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm create vite@latest like-button -- --template react-swc-ts\n```\n\n----------------------------------------\n\nTITLE: Using the void Operator in JavaScript\nDESCRIPTION: Shows how the void operator can be used to ensure a function returns undefined.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/symbols-and-keywords.md#2025-04-22_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log(void 123);\n// @log: undefined\n```\n\n----------------------------------------\n\nTITLE: Using Access Modifiers in TypeScript Classes\nDESCRIPTION: Shows how to use access modifiers (public, private, protected) to control the visibility of class members. Private members cannot be accessed outside the class definition.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/README.md#2025-04-22_snippet_31\n\nLANGUAGE: typescript\nCODE:\n```\n// @errors: 2341\nclass Person {\n  public name: string;\n  private age: number;\n\n  constructor(name: string, age: number) {\n    this.name = name;\n    this.age = age;\n  }\n\n  introduce(): void {\n    console.log(`My name is ${this.name} and I am ${this.age} years old.`);\n  }\n}\n\nconst john = new Person(\"John\", 20);\nconsole.log(john.name); // 'John'が出力される\nconsole.log(john.age); // エラー（privateなのでアクセスできない）\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Error Class in TypeScript\nDESCRIPTION: This snippet demonstrates how to create a custom error class by extending the built-in Error class. It includes a constructor and shows how to create and use the custom error.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/builtin-api/error.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nclass CustomeError extends Error {\n  public constructor(message?: string) {\n    super(message);\n  }\n}\n\nconst err: CustomeError = new CustomeError(\"FAILED!\");\n\nconsole.log(err.name);\n// @log: \"Error\"\nconsole.log(err.message);\n// @log: \"FAILED!\"\nconsole.log(err.stack);\n// @log: \"Error: FAILED! ...\"\n```\n\n----------------------------------------\n\nTITLE: Modifying Readonly Array by Ignoring Compile-Time Errors in TypeScript\nDESCRIPTION: This example shows that it's possible to modify a readonly array at runtime by ignoring TypeScript's compile-time errors, emphasizing that readonly is a compile-time construct.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/values-types-variables/array/readonly-array.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst nums: readonly number[] = [1, 2, 3];\n// @ts-ignore\nnums.push(4); // 本来コンパイルエラーになるが無視する\nconsole.log(nums);\n// @log: [1, 2, 3, 4]\n```\n\n----------------------------------------\n\nTITLE: Demonstrating readonly Property Assignment Restriction in TypeScript\nDESCRIPTION: This snippet illustrates how readonly prevents reassignment of object properties in TypeScript, resulting in a compilation error when attempting to modify a readonly property.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/values-types-variables/object/readonly-vs-const.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nlet obj: { readonly x: number } = { x: 1 };\nobj.x = 2;\n```\n\n----------------------------------------\n\nTITLE: Enabling JavaScript Source Maps in TypeScript\nDESCRIPTION: Configure tsconfig.json to generate source maps for compiled JavaScript files, improving debugging and tracing capabilities.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/advanced-topics/tsconfig-for-npm-package-developers.md#2025-04-22_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n\"sourceMap\": true,\n/* Generates corresponding '.map' file. */\n```\n\n----------------------------------------\n\nTITLE: Comparing typeof results for undefined and null in JavaScript\nDESCRIPTION: This example illustrates the difference in typeof operator results between undefined and null in JavaScript.\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/values-types-variables/undefined-vs-null.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ntypeof undefined;\n// @log: \"undefined\"\ntypeof null;\n// @log: \"object\"\n```\n\n----------------------------------------\n\nTITLE: 型の再利用例（TypeScript）\nDESCRIPTION: オブジェクトの型からキーの型を導き出す方法を示しています。keyofキーワードを使用して、オブジェクト型Objからそのキーの型（ユニオン型）を生成しています。\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/type-reuse/README.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntype Obj = { a: string; b: string; c: string };\ntype Keys = keyof Obj;\n//=> \"a\" | \"b\" | \"c\"\n```\n\n----------------------------------------\n\nTITLE: namespaceを使用した型定義\nDESCRIPTION: namespaceキーワードを使用して、ライブラリ固有の型を定義する例です。\nSOURCE: https://github.com/yytypescript/book/blob/master/docs/reference/declaration-file.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nnamespace Hello {\n  interface Element {\n    id: number;\n  }\n}\n\nconst e: Hello.Element = {\n  id: 1,\n};\n```"
  }
]