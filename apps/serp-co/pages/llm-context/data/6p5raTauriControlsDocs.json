[
  {
    "owner": "6p5ra",
    "repo": "tauri-controls-docs",
    "content": "TITLE: Using WindowTitlebar in React App - JSX\nDESCRIPTION: This code shows how to integrate the WindowTitlebar component into a React application. It wraps the title bar content within the WindowTitlebar component and includes other application content below. The WindowTitlebar automatically includes window controls (minimize, maximize, close).\nSOURCE: https://github.com/6p5ra/tauri-controls-docs/blob/main/tauri-controls.md#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { WindowTitlebar } from \"tauri-controls\";\nimport \"tauri-controls/index.css\";\n\nfunction App() {\n  return (\n    <div className=\"app-container\">\n      <WindowTitlebar>\n        {/* Content inside the title bar */}\n        <div className=\"titlebar-content\">\n          My Awesome App\n        </div>\n      </WindowTitlebar>\n\n      <div className=\"main-content\">\n        {/* Rest of your application goes here */}\n        Hello World!\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Import WindowTitlebar Component - Typescript\nDESCRIPTION: This snippet demonstrates how to import the WindowTitlebar component and its associated CSS file into a TypeScript/JavaScript project.  It is a necessary first step to use the component in your application. The CSS import ensures the component is styled correctly.\nSOURCE: https://github.com/6p5ra/tauri-controls-docs/blob/main/tauri-controls.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// Import the WindowTitlebar component\nimport { WindowTitlebar } from \"tauri-controls\";\n// Make sure you also import the necessary CSS\nimport \"tauri-controls/index.css\";\n```\n\n----------------------------------------\n\nTITLE: Window Titlebar Component with Controls Order (TypeScript)\nDESCRIPTION: This code snippet showcases the `WindowTitlebar` component, which utilizes the `controlsOrder` prop to determine the placement of window controls (either on the left or right). It also passes down the `windowControlsProps` to the `WindowControls` component for further customization. The default value for `controlsOrder` is 'system', and it checks the operating system if 'system' is selected.\nSOURCE: https://github.com/6p5ra/tauri-controls-docs/blob/main/tauri-controls.md#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n// Simplified from window-titlebar.tsx\n\nimport { WindowControls } from \"./window-controls\";\nimport type { WindowTitlebarProps } from \"./types\";\n\nexport function WindowTitlebar({\n  children,\n  controlsOrder = \"system\", // Default value\n  windowControlsProps,      // Props to pass down\n  // ... other props\n}: WindowTitlebarProps) {\n\n  // Simplified logic to decide if controls go on the left\n  const controlsGoLeft =\n    controlsOrder === \"left\" ||\n    (controlsOrder === \"system\" /* && isMacOS */); // Check OS if 'system'\n\n  return (\n    <div /* ... */ >\n      {controlsGoLeft ? (\n        <>\n          <WindowControls {...windowControlsProps} /> {/* Controls first */}\n          {children}                              {/* Content after */}\n        </>\n      ) : (\n        <>\n          {children}                              {/* Content first */}\n          <WindowControls {...windowControlsProps} /> {/* Controls after */}\n        </>\n      )}\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Window Controls Platform Rendering Logic (TypeScript)\nDESCRIPTION: This code snippet demonstrates how the `WindowControls` component determines which platform-specific buttons to render based on the `platform` prop. If no `platform` prop is provided, it attempts to detect the operating system. It uses a switch statement to return the appropriate component (`MacOS`, `Gnome`, or `Windows`).\nSOURCE: https://github.com/6p5ra/tauri-controls-docs/blob/main/tauri-controls.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n}: WindowControlsProps) {\n  let actualPlatform = platform; // Use the passed prop if available\n\n  if (!actualPlatform) {\n    // If no platform prop was passed, detect the OS (simplified)\n    // actualPlatform = detectOperatingSystem();\n  }\n\n  // Decide which buttons to render based on the prop (or detection)\n  switch (actualPlatform) {\n    case \"macos\":\n      return <MacOS /* ... */ />; // Render macOS buttons\n    case \"gnome\":\n      return <Gnome /* ... */ />; // Render Gnome buttons\n    default: // Includes \"windows\" or anything else\n      return <Windows /* ... */ />; // Render Windows buttons\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: WindowControls Component Usage (JSX)\nDESCRIPTION: This code demonstrates how to use the WindowControls component without specifying the platform, which triggers the OS detection logic. The component will automatically determine the operating system and render the appropriate controls.\nSOURCE: https://github.com/6p5ra/tauri-controls-docs/blob/main/tauri-controls.md#_snippet_17\n\nLANGUAGE: jsx\nCODE:\n```\n// You write this simple code:\nimport { WindowControls } from \"tauri-controls\";\nimport \"tauri-controls/index.css\";\n\nfunction AppControls() {\n  // No 'platform' prop is given!\n  return <WindowControls />;\n}\n```\n\n----------------------------------------\n\nTITLE: WindowTitlebar Component Implementation - Typescript\nDESCRIPTION: This simplified version of the WindowTitlebar component's implementation demonstrates how it detects the operating system, determines the layout of window controls, and renders the title bar with drag functionality. It uses the `getOsType` function and `useEffect` hook to detect the OS on component mount.\nSOURCE: https://github.com/6p5ra/tauri-controls-docs/blob/main/tauri-controls.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// Simplified version from apps/tauri-controls/src/tauri-controls/window-titlebar.tsx\n\nimport { WindowControls } from \"./window-controls\";\nimport { getOsType } from \"./libs/plugin-os\";\nimport { useEffect, useState } from \"react\";\n\nexport function WindowTitlebar({\n  children,\n  controlsOrder = \"system\", // Default is 'system'\n  // ... other props\n}) {\n  const [osType, setOsType] = useState(undefined);\n\n  // 1. Detect OS on component mount\n  useEffect(() => {\n    getOsType().then(setOsType);\n  }, []);\n\n  // 2. Decide layout based on OS and controlsOrder prop\n  const left =\n    controlsOrder === \"left\" ||\n    // ... (other conditions for 'platform' order) ...\n    (controlsOrder === \"system\" && osType === \"macos\");\n\n  // 3. Render controls and children in the decided order\n  return (\n    <div data-tauri-drag-region /* 4. Make it draggable */ >\n      {left ? (\n        <>\n          <WindowControls /* Props passed down */ />\n          {children} {/* Your content */}\n        </>\n      ) : (\n        <>\n          {children} {/* Your content */}\n          <WindowControls /* Props passed down, aligned right */ />\n        </>\n      )}\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Maximize Tauri Window\nDESCRIPTION: Asynchronously maximizes or unmaximizes the Tauri application window.  It gets the window object from `appWindow()`, toggles the maximized state, and then updates the `isWindowMaximized` state by querying the window's current maximized state.\nSOURCE: https://github.com/6p5ra/tauri-controls-docs/blob/main/tauri-controls.md#_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\nexport const maximizeWindow = async () => {\n  const window = appWindow();\n  await window?.toggleMaximize(); // Calls Tauri API!\n  // Update state after action (simplified)\n  setIsWindowMaximized(await window?.isMaximized() ?? false);\n};\n```\n\n----------------------------------------\n\nTITLE: Close Tauri Window\nDESCRIPTION: Asynchronously closes the Tauri application window using the Tauri API. It retrieves the window object from `appWindow()` and then calls the `close()` method on the window object.\nSOURCE: https://github.com/6p5ra/tauri-controls-docs/blob/main/tauri-controls.md#_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\nexport const closeWindow = async () => {\n  await appWindow()?.close(); // Calls Tauri API!\n};\n```\n\n----------------------------------------\n\nTITLE: OS Type Helper Function (TypeScript)\nDESCRIPTION: This is a simplified version of the helper function that retrieves the OS type using the Tauri OS plugin. It caches the result and handles asynchronous operations to efficiently determine the operating system. It uses `@tauri-apps/plugin-os`.\nSOURCE: https://github.com/6p5ra/tauri-controls-docs/blob/main/tauri-controls.md#_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\n// Simplified from libs/plugin-os.ts\n\n// Import the necessary function from the Tauri OS plugin\nimport { type as getTauriOsType } from \"@tauri-apps/plugin-os\";\n\n// A variable to store the OS type once we find it\nlet osType: string | undefined = undefined;\n// A variable to store the ongoing request (Promise)\nlet osTypePromise: Promise<string> | null = null;\n\n// The function components call to get the OS type\nexport function getOsType(): Promise<string> {\n  // If we already have the answer, return it immediately\n  if (osType !== undefined) {\n    return Promise.resolve(osType);\n  }\n\n  // If we are already asking, return the existing request\n  if (osTypePromise) {\n    return osTypePromise;\n  }\n\n  // If we haven't asked yet, start asking!\n  osTypePromise = getTauriOsType().then((type) => {\n    osType = type; // Remember the answer\n    return type; // Return the answer\n  });\n\n  return osTypePromise; // Return the request promise\n}\n```\n\n----------------------------------------\n\nTITLE: Windows Style Implementation in tauri-controls (React/TSX)\nDESCRIPTION: This simplified code snippet illustrates the implementation of the Windows style for window controls in `tauri-controls` using React and TypeScript. It imports necessary components like `Icons` and `Button`, and renders minimize, maximize/restore, and close buttons using specific icons and CSS classes.  The code also incorporates logic to check if the window is maximized to display the correct icon.\nSOURCE: https://github.com/6p5ra/tauri-controls-docs/blob/main/tauri-controls.md#_snippet_14\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Simplified from controls/windows.tsx (React example)\nimport { Icons } from \"../components/icons\"; // Where the SVG icons live\nimport { Button } from \"../components/button\"; // Basic button component\n\nexport function Windows({ /* ... props */ }) {\n  // ... logic to check if maximized (isWindowMaximized) ...\n  // ... functions to call minimize, maximize, close ...\n\n  return (\n    <div /* Standard Windows layout styling */>\n      <Button onClick={minimizeWindow} className=\"windows-minimize-style\">\n        <Icons.minimizeWin /> {/* The underscore icon */}\n      </Button>\n      <Button onClick={maximizeWindow} className=\"windows-maximize-style\">\n        {/* Show restore icon if maximized, otherwise maximize icon */}\n        {!isWindowMaximized ? <Icons.maximizeWin /> : <Icons.maximizeRestoreWin />}\n      </Button>\n      <Button onClick={closeWindow} className=\"windows-close-style\">\n        <Icons.closeWin /> {/* The 'X' icon */}\n      </Button>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: MacOS Style Implementation in tauri-controls (React/TSX)\nDESCRIPTION: This simplified code snippet shows the implementation of the macOS style for window controls using React and TypeScript. It imports `Icons` and `Button` components, utilizes `useState` and `useEffect` hooks to track hover state and Alt key presses, and renders close, minimize, and fullscreen/maximize buttons with conditional icon rendering based on hover and Alt key states. The macOS style uses circular buttons and shows icons on hover.\nSOURCE: https://github.com/6p5ra/tauri-controls-docs/blob/main/tauri-controls.md#_snippet_15\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Simplified from controls/macos.tsx (React example)\nimport { Icons } from \"../components/icons\";\nimport { Button } from \"../components/button\";\nimport { useState, useEffect } from \"react\"; // To track hover and Alt key\n\nexport function MacOS({ /* ... props */ }) {\n  const [isHovering, setIsHovering] = useState(false);\n  const [isAltKeyPressed, setIsAltKeyPressed] = useState(false);\n  // ... logic to handle hover state ...\n  // ... logic to listen for Alt key presses ...\n  // ... functions for close, minimize, fullscreen/maximize ...\n\n  return (\n    <div className=\"macos-layout-style\" onMouseEnter={...} onMouseLeave={...}>\n      <Button onClick={closeWindow} className=\"macos-close-button\">\n        {isHovering && <Icons.closeMac />} {/* Show 'x' on hover */}\n      </Button>\n      <Button onClick={minimizeWindow} className=\"macos-minimize-button\">\n        {isHovering && <Icons.minMac />} {/* Show '-' on hover */}\n      </Button>\n      <Button onClick={isAltKeyPressed ? maximizeWindow : fullscreenWindow} className=\"macos-zoom-button\">\n        {/* Show '+' or fullscreen icon on hover, depending on Alt key */}\n        {isHovering && (isAltKeyPressed ? <Icons.plusMac /> : <Icons.fullMac />)}\n      </Button>\n    </div>\n  );\n}\n\n```\n\n----------------------------------------\n\nTITLE: Gnome Style Implementation in tauri-controls (React/TSX)\nDESCRIPTION: This simplified code snippet demonstrates the implementation of the Gnome style for window controls using React and TypeScript.  It uses `Icons` and `Button` components, renders minimize, maximize/restore, and close buttons. It also incorporates logic to check if the window is maximized to display the correct icon.  The Gnome style often reuses Windows icons with different styling.\nSOURCE: https://github.com/6p5ra/tauri-controls-docs/blob/main/tauri-controls.md#_snippet_16\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Simplified from controls/linux/gnome.tsx (React example)\nimport { Icons } from \"../../components/icons\";\nimport { Button } from \"../../components/button\";\n\nexport function Gnome({ /* ... props */ }) {\n  // ... logic to check if maximized (isWindowMaximized) ...\n  // ... functions to call minimize, maximize, close ...\n\n  return (\n    <div className=\"gnome-layout-style\">\n      <Button onClick={minimizeWindow} className=\"gnome-button-style\">\n        <Icons.minimizeWin /> {/* Reuses Windows icon */}\n      </Button>\n      <Button onClick={maximizeWindow} className=\"gnome-button-style\">\n        {!isWindowMaximized ? <Icons.maximizeWin /> : <Icons.maximizeRestoreWin />}\n      </Button>\n      <Button onClick={closeWindow} className=\"gnome-button-style\">\n        <Icons.closeWin /> {/* Reuses Windows icon */}\n      </Button>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: React Context Provider - Window Control - TypeScript\nDESCRIPTION: Simplified React code from contexts/plugin-window.tsx demonstrating the use of Context to provide window control functions and state to components. It includes the creation of the context, the provider component, and the definition of functions like `minimizeWindow`, `maximizeWindow`, and `closeWindow` that interact with the Tauri API.\nSOURCE: https://github.com/6p5ra/tauri-controls-docs/blob/main/tauri-controls.md#_snippet_23\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Simplified from contexts/plugin-window.tsx\n\nimport React, { createContext, useEffect, useState } from \"react\";\nimport type { Window } from \"@tauri-apps/api/window\";\n// Import Tauri API dynamically for broader compatibility\nimport { window as tauriWindowApi } from \"@tauri-apps/api\";\n\n// Define the functions and state we'll provide\ninterface TauriAppWindowContextType {\n  appWindow: Window | null; // The actual Tauri window object\n  isWindowMaximized: boolean;\n  minimizeWindow: () => Promise<void>;\n  maximizeWindow: () => Promise<void>;\n  closeWindow: () => Promise<void>;\n  // ... fullscreen omitted for brevity\n}\n\n// Create the context\nconst TauriAppWindowContext = createContext<TauriAppWindowContextType>(/* ... defaults ... */);\n\n// The Provider component that wraps your app\nexport function TauriAppWindowProvider({ children }: any) {\n  const [appWindow, setAppWindow] = useState<Window | null>(null);\n  const [isWindowMaximized, setIsWindowMaximized] = useState(false);\n\n  // Get the current window object when the component mounts\n  useEffect(() => {\n    setAppWindow(tauriWindowApi.getCurrent());\n  }, []);\n\n  // --- Define the wrapper functions ---\n  const minimizeWindow = async () => {\n    await appWindow?.minimize(); // Calls Tauri API!\n  };\n\n  const maximizeWindow = async () => {\n    await appWindow?.toggleMaximize(); // Calls Tauri API!\n    // Update state after action (simplified)\n    setIsWindowMaximized(await appWindow?.isMaximized() ?? false);\n  };\n\n  const closeWindow = async () => {\n    await appWindow?.close(); // Calls Tauri API!\n  };\n\n  // --- Keep isWindowMaximized state updated ---\n  useEffect(() => {\n    let unlisten: (() => void) | undefined;\n    const listen = async () => {\n      // Listen for window resize events\n      unlisten = await appWindow?.onResized(async () => {\n        setIsWindowMaximized(await appWindow?.isMaximized() ?? false);\n      });\n    };\n    if (appWindow) listen();\n    // Cleanup listener on unmount\n    return () => unlisten && unlisten();\n  }, [appWindow]);\n\n  // Provide functions and state to child components\n  return (\n    <TauriAppWindowContext.Provider\n      value={{\n        appWindow,\n        isWindowMaximized,\n        minimizeWindow,\n        maximizeWindow,\n        closeWindow,\n      }}\n    >\n      {children}\n    </TauriAppWindowContext.Provider>\n  );\n}\n\n// Export the context to be used by hooks like useContext(TauriAppWindowContext)\nexport default TauriAppWindowContext;\n\n```\n\n----------------------------------------\n\nTITLE: Solid.js Window Control - TypeScript\nDESCRIPTION: Simplified Solid.js code from libs/plugin-window.ts illustrating the use of signals for reactive state and helper functions for window control. It includes the creation of signals for `appWindow` and `isWindowMaximized`, and the definition of `minimizeWindow` function that calls the Tauri API.\nSOURCE: https://github.com/6p5ra/tauri-controls-docs/blob/main/tauri-controls.md#_snippet_24\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Simplified from libs/plugin-window.ts\n\nimport type { Window } from \"@tauri-apps/api/window\";\nimport { createSignal, createEffect, onCleanup } from \"solid-js\";\n// Import Tauri API dynamically\nimport { window as tauriWindowApi } from \"@tauri-apps/api\";\n\n// --- Signals for state ---\nexport const [appWindow, setAppWindow] = createSignal<Window | null>(null);\nexport const [isWindowMaximized, setIsWindowMaximized] = createSignal(false);\n\n// Get the window object on load\nsetAppWindow(tauriWindowApi.getCurrent());\n\n// --- Define exported wrapper functions ---\nexport const minimizeWindow = async () => {\n  await appWindow()?.minimize(); // Calls Tauri API!\n};\n\n```\n\n----------------------------------------\n\nTITLE: WindowControls Component (React/TypeScript)\nDESCRIPTION: This code shows how the WindowControls component uses the OS type helper function to determine the appropriate control style to render. It uses `useEffect` to call the helper function and `useState` to store the detected OS type. It imports platform-specific components.\nSOURCE: https://github.com/6p5ra/tauri-controls-docs/blob/main/tauri-controls.md#_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\n// Simplified from window-controls.tsx (React)\nimport { useEffect, useState } from \"react\";\nimport { getOsType } from \"./libs/plugin-os\"; // Our helper function\nimport type { WindowControlsProps } from \"./types\";\nimport { MacOS, Windows, Gnome } from \"./controls\"; // Style components\n\nexport function WindowControls({ platform /* ... other props */ }: WindowControlsProps) {\n  const [currentPlatform, setCurrentPlatform] = useState(platform);\n  const [detectedOsType, setDetectedOsType] = useState<string | undefined>();\n\n  // Ask for the OS type when the component mounts, IF no platform is forced\n  useEffect(() => {\n    if (!platform) { // Only detect if platform wasn't specified\n      getOsType().then((type) => {\n        setDetectedOsType(type); // Store the detected type\n      });\n    }\n  }, [platform]); // Re-run if the platform prop changes\n\n  // Decide which style to use based on prop or detected OS\n  useEffect(() => {\n    if (platform) {\n      setCurrentPlatform(platform); // Use the forced platform\n    } else if (detectedOsType) {\n      // Use the detected OS type\n      switch (detectedOsType) {\n        case \"macos\": setCurrentPlatform(\"macos\"); break;\n        case \"linux\": setCurrentPlatform(\"gnome\"); break;\n        default: setCurrentPlatform(\"windows\"); // Default to Windows\n      }\n    }\n  }, [platform, detectedOsType]);\n\n  // Render the chosen component\n  switch (currentPlatform) {\n    case \"macos\": return <MacOS />;\n    case \"windows\": return <Windows />;\n    case \"gnome\": return <Gnome />;\n    default: return <Windows />; // Fallback\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Update Window Maximized State on Resize\nDESCRIPTION: Sets up a reactive effect to listen for window resize events and update the `isWindowMaximized` state. It uses `createEffect` to manage the event listener lifecycle, registering the listener when the component is active and cleaning it up when it's destroyed.  The listener is set up using `window?.onResized()`, and when a resize event occurs, it calls `setIsWindowMaximized` to update the state.\nSOURCE: https://github.com/6p5ra/tauri-controls-docs/blob/main/tauri-controls.md#_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\n// --- Keep isWindowMaximized state updated ---\ncreateEffect(() => {\n  const window = appWindow();\n  let unlisten: (() => void) | undefined;\n  const listen = async () => {\n    // Listen for window resize events\n    unlisten = await window?.onResized(async () => {\n      setIsWindowMaximized(await window?.isMaximized() ?? false);\n    });\n  };\n  if (window) listen();\n  // Cleanup listener\n  onCleanup(() => unlisten && unlisten());\n});\n```\n\n----------------------------------------\n\nTITLE: Passing Props Down to WindowControls (JSX)\nDESCRIPTION: This code shows how to pass props down to the WindowControls component within the WindowTitlebar using the 'windowControlsProps' prop. In this example, it forces the macOS style and adds a custom CSS class.\nSOURCE: https://github.com/6p5ra/tauri-controls-docs/blob/main/tauri-controls.md#_snippet_8\n\nLANGUAGE: JSX\nCODE:\n```\nimport { WindowTitlebar } from \"tauri-controls\";\nimport \"tauri-controls/index.css\";\n\nfunction MyStyledMacTitlebar() {\n  return (\n    <WindowTitlebar\n      // Keep default OS order (left on Mac, right elsewhere)\n      controlsOrder=\"system\"\n      // Pass props down to the WindowControls component inside\n      windowControlsProps={{\n        platform: \"macos\", // Force macOS style buttons\n        className: \"my-custom-controls-styling\" // Add a CSS class\n      }}\n    >\n      My App (Always macOS Buttons)\n    </WindowTitlebar>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Controls Order on WindowTitlebar (JSX)\nDESCRIPTION: This example demonstrates how to override the default controls order (left on macOS, right on Windows/Linux) using the 'controlsOrder' prop of the WindowTitlebar component.  It sets the controls to the right, regardless of the operating system.\nSOURCE: https://github.com/6p5ra/tauri-controls-docs/blob/main/tauri-controls.md#_snippet_7\n\nLANGUAGE: JSX\nCODE:\n```\nimport { WindowTitlebar } from \"tauri-controls\";\nimport \"tauri-controls/index.css\";\n\nfunction MyRightMacControlsTitlebar() {\n  return (\n    // Force controls to the right, even on macOS\n    <WindowTitlebar controlsOrder=\"right\">\n      My App Title (Controls on Right)\n    </WindowTitlebar>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Platform Prop for macOS Style (JSX)\nDESCRIPTION: This snippet demonstrates how to force the WindowControls component to use the macOS style for window controls, regardless of the underlying operating system. It imports the WindowControls component and sets the platform prop to 'macos'.\nSOURCE: https://github.com/6p5ra/tauri-controls-docs/blob/main/tauri-controls.md#_snippet_3\n\nLANGUAGE: JSX\nCODE:\n```\n// Import the component and CSS (React example)\nimport { WindowControls } from \"tauri-controls\";\nimport \"tauri-controls/index.css\";\n\nfunction MyControls() {\n  // Tell the component to use the 'macos' style\n  return <WindowControls platform=\"macos\" />;\n}\n```\n\n----------------------------------------\n\nTITLE: Forcing Windows Style with React in tauri-controls\nDESCRIPTION: This code snippet demonstrates how to force the Windows style for window controls in a React application using the `WindowTitlebar` component from `tauri-controls`. The `platform` prop is set to 'windows' via `windowControlsProps`, overriding the operating system's default style. This ensures that the window controls always render with a Windows look and feel, regardless of the actual OS.\nSOURCE: https://github.com/6p5ra/tauri-controls-docs/blob/main/tauri-controls.md#_snippet_13\n\nLANGUAGE: JSX\nCODE:\n```\n// React Example: Force Windows-style buttons everywhere\nimport { WindowTitlebar } from \"tauri-controls\";\nimport \"tauri-controls/index.css\";\n\nfunction AlwaysWindows() {\n  return (\n    <WindowTitlebar\n      windowControlsProps={{ platform: \"windows\" }}\n    >\n      My App (Windows Look)\n    </WindowTitlebar>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Justifying WindowControls in a Flexbox Layout (JSX)\nDESCRIPTION: This snippet demonstrates how to use the 'justify' prop to align the WindowControls component to the edge of its container within a flexbox layout. Setting justify={true} will push the controls to the right edge (or left on macOS).\nSOURCE: https://github.com/6p5ra/tauri-controls-docs/blob/main/tauri-controls.md#_snippet_5\n\nLANGUAGE: JSX\nCODE:\n```\nimport { WindowControls } from \"tauri-controls\";\nimport \"tauri-controls/index.css\";\n\nfunction MyJustifiedControls() {\n  return (\n    <div style={{ display: 'flex', border: '1px solid blue' }}>\n      <span>Some Content</span>\n      {/* These controls will snap to the right end of the blue box */}\n      <WindowControls platform=\"windows\" justify={true} />\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Hiding WindowControls with the 'hide' Prop (JSX)\nDESCRIPTION: This example shows how to hide the WindowControls component completely by setting the 'hide' prop to true. It also mentions the 'hideMethod' prop, which controls how the component is hidden (either by setting display: none or visibility: hidden).\nSOURCE: https://github.com/6p5ra/tauri-controls-docs/blob/main/tauri-controls.md#_snippet_4\n\nLANGUAGE: JSX\nCODE:\n```\nimport { WindowControls } from \"tauri-controls\";\nimport \"tauri-controls/index.css\";\n\nfunction MyHiddenControls() {\n  // Tell the component to hide itself\n  return <WindowControls hide={true} />;\n  // Note: You could use a variable here too, e.g., hide={shouldHideControls}\n}\n```\n\n----------------------------------------\n\nTITLE: Platform Component Example (Conceptual) - JSX\nDESCRIPTION: A simplified JSX example demonstrating how a platform-specific component (like controls/windows.tsx) utilizes the Window Interaction API Wrapper. It shows how the component retrieves the `minimizeWindow` function from the wrapper and calls it when the minimize button is clicked.\nSOURCE: https://github.com/6p5ra/tauri-controls-docs/blob/main/tauri-controls.md#_snippet_21\n\nLANGUAGE: JSX\nCODE:\n```\n// Simplified Example (Conceptual - Inside a platform component like controls/windows.tsx)\n\n// 1. Get the minimize function from the wrapper (method depends on framework)\nconst { minimizeWindow } = useWindowFunctions(); // Example hook/context\n\n// 2. Render the button\nreturn (\n  <button onClick={minimizeWindow}> {/* 3. Call the function on click */}\n    {/* Minimize Icon */}\n  </button>\n);\n\n```\n\n----------------------------------------\n\nTITLE: Simplified WindowControlsProps Interface (TypeScript)\nDESCRIPTION: This TypeScript interface defines the available props for the WindowControls component, including 'platform', 'hide', 'hideMethod', and 'justify'.  The '?' indicates that the prop is optional.\nSOURCE: https://github.com/6p5ra/tauri-controls-docs/blob/main/tauri-controls.md#_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Simplified from types.ts for illustration\n\nexport interface WindowControlsProps /* extends HTMLProps<HTMLDivElement> */ {\n  /** Force a platform style */\n  platform?: \"windows\" | \"macos\" | \"gnome\";\n\n  /** Hide the controls? */\n  hide?: boolean;\n\n  /** How to hide (if hidden) */\n  hideMethod?: \"display\" | \"visibility\";\n\n  /** Snap controls to edge? */\n  justify?: boolean;\n\n  // ... other standard HTML props like className, style, etc.\n}\n```\n\n----------------------------------------\n\nTITLE: Sequence Diagram of Platform Prop (Mermaid)\nDESCRIPTION: This Mermaid sequence diagram illustrates how the 'platform' prop affects the rendering of the WindowControls component, showing the conditional logic that determines whether to render macOS or Windows style buttons.\nSOURCE: https://github.com/6p5ra/tauri-controls-docs/blob/main/tauri-controls.md#_snippet_9\n\nLANGUAGE: Mermaid\nCODE:\n```\nsequenceDiagram\n    participant UserApp as Your App Code\n    participant WTBar as WindowTitlebar\n    participant WCtrl as WindowControls\n    participant MacOSBtns as MacOS Buttons\n    participant WinBtns as Windows Buttons\n\n    UserApp->>WTBar: Render <WindowTitlebar windowControlsProps={{ platform: 'macos' }} />\n    activate WTBar\n    WTBar->>WCtrl: Render <WindowControls platform='macos' /> (Passing prop down)\n    activate WCtrl\n    WCtrl->>WCtrl: Read 'platform' prop. Value is 'macos'.\n    alt platform is 'macos'\n        WCtrl->>MacOSBtns: Render yourself\n        activate MacOSBtns\n        MacOSBtns-->>WCtrl: Return MacOS HTML/Style\n        deactivate MacOSBtns\n    else platform is 'windows' or default\n        WCtrl->>WinBtns: Render yourself\n        activate WinBtns\n        WinBtns-->>WCtrl: Return Windows HTML/Style\n        deactivate WinBtns\n    end\n    WCtrl-->>WTBar: Return rendered controls\n    deactivate WCtrl\n    WTBar-->>UserApp: Render titlebar with macOS controls\n    deactivate WTBar\n```\n\n----------------------------------------\n\nTITLE: OS Detection Sequence Diagram (Mermaid)\nDESCRIPTION: This diagram illustrates the sequence of interactions involved in detecting the operating system type, starting from the WindowControls component and involving the helper function, Tauri OS Plugin, and the operating system itself.\nSOURCE: https://github.com/6p5ra/tauri-controls-docs/blob/main/tauri-controls.md#_snippet_20\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    participant WC as WindowControls\n    participant Helper as getOsType Helper\n    participant Plugin as Tauri OS Plugin\n    participant OS as Operating System\n\n    WC->>Helper: Need OS Type\n    activate Helper\n    Helper->>Plugin: Ask for OS Type\n    activate Plugin\n    Plugin->>OS: What type are you?\n    activate OS\n    OS-->>Plugin: I am [e.g., macOS]\n    deactivate OS\n    Plugin-->>Helper: OS Type is [e.g., macOS]\n    deactivate Plugin\n    Helper-->>WC: Result: [e.g., macOS]\n    deactivate Helper\n    WC->>WC: Render macOS style buttons\n```\n\n----------------------------------------\n\nTITLE: Sequence Diagram - Window Close\nDESCRIPTION: Sequence diagram illustrates the interaction flow when a user clicks the close button, detailing the steps from the UI event to the operating system closing the window. Participants include the User, UI Button, API Wrapper, Tauri API, and Operating System.\nSOURCE: https://github.com/6p5ra/tauri-controls-docs/blob/main/tauri-controls.md#_snippet_22\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    participant User\n    participant UIButton as UI Button (e.g., Close)\n    participant Wrapper as API Wrapper (e.g., closeWindow fn)\n    participant TauriAPI as @tauri-apps/api/window\n    participant OS as Operating System\n\n    User->>UIButton: Clicks Close Button\n    activate UIButton\n    UIButton->>Wrapper: Call closeWindow() function\n    deactivate UIButton\n    activate Wrapper\n    Wrapper->>TauriAPI: Execute appWindow.close()\n    deactivate Wrapper\n    activate TauriAPI\n    TauriAPI->>OS: Request Window Close\n    deactivate TauriAPI\n    activate OS\n    OS-->>User: Closes the Window\n    deactivate OS\n\n\n```\n\n----------------------------------------\n\nTITLE: Simplified WindowControls Implementation (TypeScript)\nDESCRIPTION: This simplified TypeScript code snippet shows how the WindowControls component might use the platform prop to conditionally render different button styles, importing Windows, MacOS, and Gnome components.\nSOURCE: https://github.com/6p5ra/tauri-controls-docs/blob/main/tauri-controls.md#_snippet_10\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Simplified from window-controls.tsx\n\nimport { Windows, MacOS, Gnome } from \"./controls\";\nimport type { WindowControlsProps } from \"./types\";\n\nexport function WindowControls({\n  platform, // The prop we passed!\n\n```"
  }
]