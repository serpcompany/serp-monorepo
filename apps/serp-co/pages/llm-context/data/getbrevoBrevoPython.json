[
  {
    "owner": "getbrevo",
    "repo": "brevo-python",
    "content": "TITLE: Listing Email Templates with Brevo Python SDK\nDESCRIPTION: This code demonstrates how to retrieve a paginated list of email templates with optional filtering by status. It configures the API client with authorization keys, sets up pagination and sorting parameters, then makes the API call with proper error handling.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/TransactionalEmailsApi.md#2025-04-17_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport brevo_python\nfrom brevo_python.rest import ApiException\nfrom pprint import pprint\n\n# Configure API key authorization: api-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['api-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['api-key'] = 'Bearer'\n# Configure API key authorization: partner-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['partner-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['partner-key'] = 'Bearer'\n\n# create an instance of the API class\napi_instance = brevo_python.TransactionalEmailsApi(brevo_python.ApiClient(configuration))\ntemplate_status = true # bool | Filter on the status of the template. Active = true, inactive = false (optional)\nlimit = 50 # int | Number of documents returned per page (optional) (default to 50)\noffset = 0 # int | Index of the first document in the page (optional) (default to 0)\nsort = 'desc' # str | Sort the results in the ascending/descending order of record creation. Default order is **descending** if `sort` is not passed (optional) (default to desc)\n\ntry:\n    # Get the list of email templates\n    api_response = api_instance.get_smtp_templates(template_status=template_status, limit=limit, offset=offset, sort=sort)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling TransactionalEmailsApi->get_smtp_templates: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Importing Contacts into Brevo\nDESCRIPTION: Imports contacts into Brevo with support for contact attributes. Returns a background process ID and can notify a URL upon completion.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/ContactsApi.md#2025-04-17_snippet_24\n\nLANGUAGE: python\nCODE:\n```\napi_instance = brevo_python.ContactsApi(brevo_python.ApiClient(configuration))\nrequest_contact_import = brevo_python.RequestContactImport()\n\ntry:\n    # Import contacts\n    api_response = api_instance.import_contacts(request_contact_import)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling ContactsApi->import_contacts: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Importing Brevo Python Package\nDESCRIPTION: Code snippet showing how to import the Brevo Python package after installation.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/README.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport brevo_python\n```\n\n----------------------------------------\n\nTITLE: Updating Individual Contact with Brevo Python SDK\nDESCRIPTION: Example of updating a single contact using the Brevo ContactsApi. Requires API key authentication and accepts contact identifier (email or ID) and UpdateContact object with the values to update.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/ContactsApi.md#2025-04-17_snippet_29\n\nLANGUAGE: python\nCODE:\n```\napi_instance = brevo_python.ContactsApi(brevo_python.ApiClient(configuration))\nidentifier = 'identifier_example'\nupdate_contact = brevo_python.UpdateContact()\n\ntry:\n    api_instance.update_contact(identifier, update_contact)\nexcept ApiException as e:\n    print(\"Exception when calling ContactsApi->update_contact: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Sending a Transactional Email in Python using Brevo API\nDESCRIPTION: Example code for sending a transactional email using the Brevo Python SDK. It demonstrates API key configuration, creating a SendSmtpEmail object, and handling the API response.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/TransactionalEmailsApi.md#2025-04-17_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport brevo_python\nfrom brevo_python.rest import ApiException\nfrom pprint import pprint\n\n# Configure API key authorization: api-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['api-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['api-key'] = 'Bearer'\n# Configure API key authorization: partner-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['partner-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['partner-key'] = 'Bearer'\n\n# create an instance of the API class\napi_instance = brevo_python.TransactionalEmailsApi(brevo_python.ApiClient(configuration))\nsend_smtp_email = brevo_python.SendSmtpEmail() # SendSmtpEmail | Values to send a transactional email\n\ntry:\n    # Send a transactional email\n    api_response = api_instance.send_transac_email(send_smtp_email)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling TransactionalEmailsApi->send_transac_email: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Updating Email Template in Python using Brevo API\nDESCRIPTION: Example showing how to update an email template using the Brevo Python SDK. It demonstrates API key configuration and template update process.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/TransactionalEmailsApi.md#2025-04-17_snippet_24\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport brevo_python\nfrom brevo_python.rest import ApiException\nfrom pprint import pprint\n\n# Configure API key authorization: api-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['api-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['api-key'] = 'Bearer'\n```\n\n----------------------------------------\n\nTITLE: Complete Example of Brevo API Authentication and Usage\nDESCRIPTION: Comprehensive example demonstrating how to authenticate with the Brevo API using API keys and how to make a call to get account information using the AccountApi.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/README.md#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport brevo_python\nfrom brevo_python.rest import ApiException\nfrom pprint import pprint\n\n# Configure API key authorization: api-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['api-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['api-key'] = 'Bearer'\n# Configure API key authorization: partner-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['partner-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['partner-key'] = 'Bearer'\n\n# create an instance of the API class\napi_instance = brevo_python.AccountApi(brevo_python.ApiClient(configuration))\n\ntry:\n    # Get your account information, plan and credits details\n    api_response = api_instance.get_account()\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling AccountApi->get_account: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Creating CRM Note with Brevo Python API\nDESCRIPTION: Example code showing how to create a note using the Brevo CRM API. Includes API key configuration and error handling.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/CRMApi.md#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# Configure API key authorization: partner-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['partner-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['partner-key'] = 'Bearer'\n\n# create an instance of the API class\napi_instance = brevo_python.CRMApi(brevo_python.ApiClient(configuration))\nbody = brevo_python.NoteData() # NoteData | Note data to create a note.\n\ntry:\n    # Create a note\n    api_response = api_instance.crm_notes_post(body)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling CRMApi->crm_notes_post: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Product Details using Brevo Python SDK\nDESCRIPTION: Demonstrates how to get detailed information about a specific product by its ID using the EcommerceApi. The example includes API key configuration and proper error handling.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/EcommerceApi.md#2025-04-17_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport brevo_python\nfrom brevo_python.rest import ApiException\nfrom pprint import pprint\n\n# Configure API key authorization: api-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['api-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['api-key'] = 'Bearer'\n# Configure API key authorization: partner-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['partner-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['partner-key'] = 'Bearer'\n\n# create an instance of the API class\napi_instance = brevo_python.EcommerceApi(brevo_python.ApiClient(configuration))\nid = 'id_example' # str | Product ID\n\ntry:\n    # Get a product's details\n    api_response = api_instance.get_product_info(id)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling EcommerceApi->get_product_info: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Creating an Email Campaign with Brevo Python SDK\nDESCRIPTION: Code example demonstrating how to create an email campaign using the Brevo Python SDK. This snippet shows the API client configuration with API key authorization and the call to the create_email_campaign method.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/EmailCampaignsApi.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport brevo_python\nfrom brevo_python.rest import ApiException\nfrom pprint import pprint\n\n# Configure API key authorization: api-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['api-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['api-key'] = 'Bearer'\n# Configure API key authorization: partner-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['partner-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['partner-key'] = 'Bearer'\n\n# create an instance of the API class\napi_instance = brevo_python.EmailCampaignsApi(brevo_python.ApiClient(configuration))\nemail_campaigns = brevo_python.CreateEmailCampaign() # CreateEmailCampaign | Values to create a campaign\n\ntry:\n    # Create an email campaign\n    api_response = api_instance.create_email_campaign(email_campaigns)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling EmailCampaignsApi->create_email_campaign: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Transactional Email Activity Report with Brevo Python SDK\nDESCRIPTION: This code demonstrates how to retrieve aggregated transactional email activity reports. It configures the API client with authorization keys, sets pagination parameters, date filters, and optional tag filtering, then makes the API call with appropriate error handling.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/TransactionalEmailsApi.md#2025-04-17_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport brevo_python\nfrom brevo_python.rest import ApiException\nfrom pprint import pprint\n\n# Configure API key authorization: api-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['api-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['api-key'] = 'Bearer'\n# Configure API key authorization: partner-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['partner-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['partner-key'] = 'Bearer'\n\n# create an instance of the API class\napi_instance = brevo_python.TransactionalEmailsApi(brevo_python.ApiClient(configuration))\nlimit = 10 # int | Number of documents returned per page (optional) (default to 10)\noffset = 0 # int | Index of the first document on the page (optional) (default to 0)\nstart_date = 'start_date_example' # str | Mandatory if endDate is used. Starting date of the report (YYYY-MM-DD) (optional)\nend_date = 'end_date_example' # str | Mandatory if startDate is used. Ending date of the report (YYYY-MM-DD) (optional)\ndays = 789 # int | Number of days in the past including today (positive integer). Not compatible with 'startDate' and 'endDate' (optional)\ntag = 'tag_example' # str | Tag of the emails (optional)\nsort = 'desc' # str | Sort the results in the ascending/descending order of record creation. Default order is **descending** if `sort` is not passed (optional) (default to desc)\n\ntry:\n    # Get your transactional email activity aggregated per day\n    api_response = api_instance.get_smtp_report(limit=limit, offset=offset, start_date=start_date, end_date=end_date, days=days, tag=tag, sort=sort)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling TransactionalEmailsApi->get_smtp_report: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Sending Transactional SMS with Brevo Python SDK\nDESCRIPTION: Example code showing how to use the Brevo Python SDK to send an SMS message to a mobile number. The code configures API key authorization, creates an instance of the TransactionalSMSApi class, and demonstrates how to handle API responses and exceptions.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/TransactionalSMSApi.md#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport brevo_python\nfrom brevo_python.rest import ApiException\nfrom pprint import pprint\n\n# Configure API key authorization: api-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['api-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['api-key'] = 'Bearer'\n# Configure API key authorization: partner-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['partner-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['partner-key'] = 'Bearer'\n\n# create an instance of the API class\napi_instance = brevo_python.TransactionalSMSApi(brevo_python.ApiClient(configuration))\nsend_transac_sms = brevo_python.SendTransacSms() # SendTransacSms | Values to send a transactional SMS\n\ntry:\n    # Send SMS message to a mobile number\n    api_response = api_instance.send_transac_sms(send_transac_sms)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling TransactionalSMSApi->send_transac_sms: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Products with Brevo Python SDK\nDESCRIPTION: This code demonstrates how to retrieve products using the Brevo Python SDK's EcommerceApi. It initializes the API client, sets various optional filter parameters, and handles API response and exceptions.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/EcommerceApi.md#2025-04-17_snippet_17\n\nLANGUAGE: python\nCODE:\n```\n# create an instance of the API class\napi_instance = brevo_python.EcommerceApi(brevo_python.ApiClient(configuration))\nlimit = 50 # int | Number of documents per page (optional) (default to 50)\noffset = 0 # int | Index of the first document in the page (optional) (default to 0)\nsort = 'desc' # str | Sort the results in the ascending/descending order of record creation. Default order is **descending** if `sort` is not passed (optional) (default to desc)\nids = ['ids_example'] # list[str] | Filter by product ids (optional)\nname = 'name_example' # str | Filter by product name, minimum 3 characters should be present for search (optional)\nprice_lte = 8.14 # float | Price filter for products less than and equals to particular amount (optional)\nprice_gte = 8.14 # float | Price filter for products greater than and equals to particular amount (optional)\nprice_lt = 8.14 # float | Price filter for products less than particular amount (optional)\nprice_gt = 8.14 # float | Price filter for products greater than particular amount (optional)\nprice_eq = 8.14 # float | Price filter for products equals to particular amount (optional)\nprice_ne = 8.14 # float | Price filter for products not equals to particular amount (optional)\ncategories = ['categories_example'] # list[str] | Filter by category ids (optional)\nmodified_since = 'modified_since_example' # str | Filter (urlencoded) the orders modified after a given UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ). **Prefer to pass your timezone in date-time format for accurate result.**  (optional)\ncreated_since = 'created_since_example' # str | Filter (urlencoded) the orders created after a given UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ). **Prefer to pass your timezone in date-time format for accurate result.**  (optional)\n\ntry:\n    # Return all your products\n    api_response = api_instance.get_products(limit=limit, offset=offset, sort=sort, ids=ids, name=name, price_lte=price_lte, price_gte=price_gte, price_lt=price_lt, price_gt=price_gt, price_eq=price_eq, price_ne=price_ne, categories=categories, modified_since=modified_since, created_since=created_since)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling EcommerceApi->get_products: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Creating a Contact in Python\nDESCRIPTION: Example of how to create a contact using the Brevo Python client library. It configures the API client, creates an instance of the ContactsApi, and calls the create_contact method.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/ContactsApi.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport brevo_python\nfrom brevo_python.rest import ApiException\nfrom pprint import pprint\n\n# Configure API key authorization: api-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['api-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['api-key'] = 'Bearer'\n# Configure API key authorization: partner-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['partner-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['partner-key'] = 'Bearer'\n\n# create an instance of the API class\napi_instance = brevo_python.ContactsApi(brevo_python.ApiClient(configuration))\ncreate_contact = brevo_python.CreateContact() # CreateContact | Values to create a contact\n\ntry:\n    # Create a contact\n    api_response = api_instance.create_contact(create_contact)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling ContactsApi->create_contact: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Configuring API Key Authorization for Brevo Python Client\nDESCRIPTION: This snippet shows how to configure API key authorization for the Brevo Python client. It sets up both 'api-key' and 'partner-key' authentication methods.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/MasterAccountApi.md#2025-04-17_snippet_16\n\nLANGUAGE: python\nCODE:\n```\n# Configure API key authorization: api-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['api-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['api-key'] = 'Bearer'\n# Configure API key authorization: partner-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['partner-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['partner-key'] = 'Bearer'\n```\n\n----------------------------------------\n\nTITLE: Importing Deals into Brevo CRM (Python)\nDESCRIPTION: This snippet shows how to import deals from a CSV file into Brevo's CRM system. It allows for both creation and updating of deals, with options for linking related entities and handling existing records.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/DealsApi.md#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport brevo_python\nfrom brevo_python.rest import ApiException\nfrom pprint import pprint\n\n# Configure API key authorization: api-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['api-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['api-key'] = 'Bearer'\n# Configure API key authorization: partner-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['partner-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['partner-key'] = 'Bearer'\n\n# create an instance of the API class\napi_instance = brevo_python.DealsApi(brevo_python.ApiClient(configuration))\nfile = '/path/to/file.txt' # file | The CSV file to upload.The file should have the first row as the mapping attribute. Some default attribute names are (a) deal_id [brevo mongoID to update deals] (b) associated_contact (c) associated_company (f) any other attribute with internal name \nmapping = 'mapping_example' # str | The mapping options in JSON format.   json    {       \"link_entities\": true, // Determines whether to link related entities during the import process       \"unlink_entities\": false, //Determines whether to unlink related entities during the import process.       \"update_existing_records\": true, // Determines whether to update based on deal ID or treat every row as create       \"unset_empty_attributes\": false // Determines whether unset a specific attribute during update if values input is blank     } \n\ntry:\n    # Import deals(creation and updation)\n    api_response = api_instance.crm_deals_import_post(file, mapping)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling DealsApi->crm_deals_import_post: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Creating Contact Events with Brevo Python SDK\nDESCRIPTION: This example demonstrates how to use the Brevo Python SDK to create an event that tracks a contact's interaction. It configures API keys for authentication, initializes the EventsApi client, and calls the create_event method with an Event object.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/EventsApi.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport brevo_python\nfrom brevo_python.rest import ApiException\nfrom pprint import pprint\n\n# Configure API key authorization: api-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['api-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['api-key'] = 'Bearer'\n# Configure API key authorization: partner-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['partner-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['partner-key'] = 'Bearer'\n\n# create an instance of the API class\napi_instance = brevo_python.EventsApi(brevo_python.ApiClient(configuration))\nevent = brevo_python.Event() # Event | \n\ntry:\n    # Create an event\n    api_instance.create_event(event)\nexcept ApiException as e:\n    print(\"Exception when calling EventsApi->create_event: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Sending WhatsApp Messages with Python\nDESCRIPTION: Example code showing how to send WhatsApp messages using the Brevo API. Includes API key configuration and error handling. The first message must include a Template ID created on the Brevo platform.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/TransactionalWhatsAppApi.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport brevo_python\nfrom brevo_python.rest import ApiException\nfrom pprint import pprint\n\n# Configure API key authorization: api-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['api-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['api-key'] = 'Bearer'\n# Configure API key authorization: partner-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['partner-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['partner-key'] = 'Bearer'\n\n# create an instance of the API class\napi_instance = brevo_python.TransactionalWhatsAppApi(brevo_python.ApiClient(configuration))\nsend_whatsapp_message = brevo_python.SendWhatsappMessage() # SendWhatsappMessage | Values to send WhatsApp message\n\ntry:\n    # Send a WhatsApp message\n    api_response = api_instance.send_whatsapp_message(send_whatsapp_message)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling TransactionalWhatsAppApi->send_whatsapp_message: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Retrieving WhatsApp Event Reports with Python\nDESCRIPTION: Example code demonstrating how to retrieve WhatsApp activity events using the Brevo API. Shows configuration of API keys and making requests with optional parameters like date ranges and filters.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/TransactionalWhatsAppApi.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport brevo_python\nfrom brevo_python.rest import ApiException\nfrom pprint import pprint\n\n# Configure API key authorization: api-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['api-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['api-key'] = 'Bearer'\n# Configure API key authorization: partner-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['partner-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['partner-key'] = 'Bearer'\n\n# create an instance of the API class\napi_instance = brevo_python.TransactionalWhatsAppApi(brevo_python.ApiClient(configuration))\nlimit = 2500 # int | Number limitation for the result returned (optional) (default to 2500)\noffset = 0 # int | Beginning point in the list to retrieve from (optional) (default to 0)\nstart_date = 'start_date_example' # str | **Mandatory if endDate is used.** Starting date of the report (YYYY-MM-DD). Must be lower than equal to endDate  (optional)\nend_date = 'end_date_example' # str | **Mandatory if startDate is used.** Ending date of the report (YYYY-MM-DD). Must be greater than equal to startDate  (optional)\ndays = 789 # int | Number of days in the past including today (positive integer). _Not compatible with 'startDate' and 'endDate'_  (optional)\ncontact_number = 'contact_number_example' # str | Filter results for specific contact (WhatsApp Number with country code. Example, 85264318721) (optional)\nevent = 'event_example' # str | Filter the report for a specific event type (optional)\nsort = 'desc' # str | Sort the results in the ascending/descending order of record creation. Default order is **descending** if `sort` is not passed (optional) (default to desc)\n\ntry:\n    # Get all your WhatsApp activity (unaggregated events)\n    api_response = api_instance.get_whatsapp_event_report(limit=limit, offset=offset, start_date=start_date, end_date=end_date, days=days, contact_number=contact_number, event=event, sort=sort)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling TransactionalWhatsAppApi->get_whatsapp_event_report: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Retrieving CRM Notes with Brevo Python SDK\nDESCRIPTION: This snippet demonstrates how to retrieve CRM notes using the Brevo Python SDK. It shows how to configure the API client, set up authentication, and make a GET request to fetch notes with optional filtering and pagination parameters.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/CRMApi.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport brevo_python\nfrom brevo_python.rest import ApiException\nfrom pprint import pprint\n\n# Configure API key authorization: api-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['api-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['api-key'] = 'Bearer'\n# Configure API key authorization: partner-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['partner-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['partner-key'] = 'Bearer'\n\n# create an instance of the API class\napi_instance = brevo_python.CRMApi(brevo_python.ApiClient(configuration))\nentity = 'entity_example' # str | Filter by note entity type (optional)\nentity_ids = 'entity_ids_example' # str | Filter by note entity IDs (optional)\ndate_from = 56 # int | dateFrom to date range filter type (timestamp in milliseconds) (optional)\ndate_to = 56 # int | dateTo to date range filter type (timestamp in milliseconds) (optional)\noffset = 789 # int | Index of the first document of the page (optional)\nlimit = 50 # int | Number of documents per page (optional) (default to 50)\nsort = 'sort_example' # str | Sort the results in the ascending/descending order. Default order is **descending** by creation if `sort` is not passed (optional)\n\ntry:\n    # Get all notes\n    api_response = api_instance.crm_notes_get(entity=entity, entity_ids=entity_ids, date_from=date_from, date_to=date_to, offset=offset, limit=limit, sort=sort)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling CRMApi->crm_notes_get: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Email Template Information with Brevo Python SDK\nDESCRIPTION: This snippet shows how to fetch detailed information about a specific email template using its ID. It configures the API client with appropriate authorization and makes the API request with error handling to retrieve template details.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/TransactionalEmailsApi.md#2025-04-17_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport brevo_python\nfrom brevo_python.rest import ApiException\nfrom pprint import pprint\n\n# Configure API key authorization: api-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['api-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['api-key'] = 'Bearer'\n# Configure API key authorization: partner-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['partner-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['partner-key'] = 'Bearer'\n\n# create an instance of the API class\napi_instance = brevo_python.TransactionalEmailsApi(brevo_python.ApiClient(configuration))\ntemplate_id = 789 # int | id of the template\n\ntry:\n    # Returns the template information\n    api_response = api_instance.get_smtp_template(template_id)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling TransactionalEmailsApi->get_smtp_template: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Exporting Contacts from Brevo\nDESCRIPTION: Exports contacts with specified criteria and returns a background process ID. The exported file will be available in CSV format.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/ContactsApi.md#2025-04-17_snippet_26\n\nLANGUAGE: python\nCODE:\n```\napi_instance = brevo_python.ContactsApi(brevo_python.ApiClient(configuration))\nrequest_contact_export = brevo_python.RequestContactExport()\n\ntry:\n    # Export contacts\n    api_response = api_instance.request_contact_export(request_contact_export)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling ContactsApi->request_contact_export: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Email Campaign Report in Python\nDESCRIPTION: This snippet demonstrates how to get a report for a specific email campaign using the Brevo Python SDK. It configures API key authorization, creates an API instance, and calls the get_email_campaign method with campaign ID and optional statistics filter.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/EmailCampaignsApi.md#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport brevo_python\nfrom brevo_python.rest import ApiException\nfrom pprint import pprint\n\n# Configure API key authorization: api-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['api-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['api-key'] = 'Bearer'\n# Configure API key authorization: partner-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['partner-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['partner-key'] = 'Bearer'\n\n# create an instance of the API class\napi_instance = brevo_python.EmailCampaignsApi(brevo_python.ApiClient(configuration))\ncampaign_id = 789 # int | Id of the campaign\nstatistics = 'statistics_example' # str | Filter on the type of statistics required. Example **globalStats** value will only fetch globalStats info of the campaign in returned response. (optional)\n\ntry:\n    # Get an email campaign report\n    api_response = api_instance.get_email_campaign(campaign_id, statistics=statistics)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling EmailCampaignsApi->get_email_campaign: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Creating SMS Campaign - Python SDK Example\nDESCRIPTION: Example code showing how to create a new SMS campaign using the Brevo Python SDK. Requires API key authentication and CreateSmsCampaign object containing campaign details.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/SMSCampaignsApi.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport brevo_python\nfrom brevo_python.rest import ApiException\nfrom pprint import pprint\n\n# Configure API key authorization: api-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['api-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['api-key'] = 'Bearer'\n# Configure API key authorization: partner-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['partner-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['partner-key'] = 'Bearer'\n\n# create an instance of the API class\napi_instance = brevo_python.SMSCampaignsApi(brevo_python.ApiClient(configuration))\ncreate_sms_campaign = brevo_python.CreateSmsCampaign() # CreateSmsCampaign | Values to create an SMS Campaign\n\ntry:\n    # Creates an SMS campaign\n    api_response = api_instance.create_sms_campaign(create_sms_campaign)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling SMSCampaignsApi->create_sms_campaign: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Sending SMS Campaign Report with Brevo Python SDK\nDESCRIPTION: This code demonstrates how to send an SMS campaign's report using the Brevo Python SDK. The method sends a report of Sent and Archived campaigns to specified email addresses, including detailed data and a PDF attachment.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/SMSCampaignsApi.md#2025-04-17_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport brevo_python\nfrom brevo_python.rest import ApiException\nfrom pprint import pprint\n\n# Configure API key authorization: api-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['api-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['api-key'] = 'Bearer'\n# Configure API key authorization: partner-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['partner-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['partner-key'] = 'Bearer'\n\n# create an instance of the API class\napi_instance = brevo_python.SMSCampaignsApi(brevo_python.ApiClient(configuration))\ncampaign_id = 789 # int | id of the campaign\nsend_report = brevo_python.SendReport() # SendReport | Values for send a report\n\ntry:\n    # Send an SMS campaign's report\n    api_instance.send_sms_report(campaign_id, send_report)\nexcept ApiException as e:\n    print(\"Exception when calling SMSCampaignsApi->send_sms_report: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Creating a Webhook with Brevo Python API\nDESCRIPTION: This snippet demonstrates how to create a webhook using the Brevo Python API. It shows the setup of API key authorization and making a POST request to create a new webhook.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/WebhooksApi.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport brevo_python\nfrom brevo_python.rest import ApiException\nfrom pprint import pprint\n\n# Configure API key authorization: api-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['api-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['api-key'] = 'Bearer'\n# Configure API key authorization: partner-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['partner-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['partner-key'] = 'Bearer'\n\n# create an instance of the API class\napi_instance = brevo_python.WebhooksApi(brevo_python.ApiClient(configuration))\ncreate_webhook = brevo_python.CreateWebhook() # CreateWebhook | Values to create a webhook\n\ntry:\n    # Create a webhook\n    api_response = api_instance.create_webhook(create_webhook)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling WebhooksApi->create_webhook: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: API Endpoint Reference - Multiple Services\nDESCRIPTION: Documentation of REST API endpoints available in the Brevo Python SDK. Includes endpoints for managing tasks, SMS, WhatsApp messages, transactional emails, user permissions, webhooks, and WhatsApp campaigns.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/README.md#2025-04-17_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n*TasksApi* | [**crm_tasktypes_get**](docs/TasksApi.md#crm_tasktypes_get) | **GET** /crm/tasktypes | Get all task types\n*TransactionalSMSApi* | [**get_sms_events**](docs/TransactionalSMSApi.md#get_sms_events) | **GET** /transactionalSMS/statistics/events | Get all your SMS activity (unaggregated events)\n*TransactionalSMSApi* | [**get_transac_aggregated_sms_report**](docs/TransactionalSMSApi.md#get_transac_aggregated_sms_report) | **GET** /transactionalSMS/statistics/aggregatedReport | Get your SMS activity aggregated over a period of time\n*TransactionalSMSApi* | [**get_transac_sms_report**](docs/TransactionalSMSApi.md#get_transac_sms_report) | **GET** /transactionalSMS/statistics/reports | Get your SMS activity aggregated per day\n*TransactionalSMSApi* | [**send_transac_sms**](docs/TransactionalSMSApi.md#send_transac_sms) | **POST** /transactionalSMS/sms | Send SMS message to a mobile number\n```\n\n----------------------------------------\n\nTITLE: Getting Contact Attributes using Brevo Python API\nDESCRIPTION: Example of retrieving all contact attributes using the Brevo ContactsApi. Requires API key or partner key authentication.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/ContactsApi.md#2025-04-17_snippet_10\n\nLANGUAGE: python\nCODE:\n```\napi_instance = brevo_python.ContactsApi(brevo_python.ApiClient(configuration))\n\ntry:\n    # List all attributes\n    api_response = api_instance.get_attributes()\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling ContactsApi->get_attributes: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Managing Order Status with Brevo Python SDK\nDESCRIPTION: Example of how to manage the transactional status of an order using the Brevo Python SDK. The code demonstrates API key configuration and proper error handling.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/EcommerceApi.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport brevo_python\nfrom brevo_python.rest import ApiException\nfrom pprint import pprint\n\n# Configure API key authorization: api-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['api-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['api-key'] = 'Bearer'\n# Configure API key authorization: partner-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['partner-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['partner-key'] = 'Bearer'\n\n# create an instance of the API class\napi_instance = brevo_python.EcommerceApi(brevo_python.ApiClient(configuration))\norder = brevo_python.Order() # Order \n\ntry:\n    # Managing the status of the order\n    api_instance.create_order(order)\nexcept ApiException as e:\n    print(\"Exception when calling EcommerceApi->create_order: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Getting Deal Attributes with Brevo Python SDK\nDESCRIPTION: Example of how to retrieve deal attributes using the Brevo Python SDK. This snippet demonstrates API key configuration and making a GET request to the /crm/attributes/deals endpoint.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/DealsApi.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport brevo_python\nfrom brevo_python.rest import ApiException\nfrom pprint import pprint\n\n# Configure API key authorization: api-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['api-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['api-key'] = 'Bearer'\n# Configure API key authorization: partner-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['partner-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['partner-key'] = 'Bearer'\n\n# create an instance of the API class\napi_instance = brevo_python.DealsApi(brevo_python.ApiClient(configuration))\n\ntry:\n    # Get deal attributes\n    api_response = api_instance.crm_attributes_deals_get()\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling DealsApi->crm_attributes_deals_get: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Creating an API key for a sub-account using MasterAccountApi\nDESCRIPTION: This code demonstrates how to generate an API v3 key for a sub-account using the Brevo Python library. It configures API keys, creates an instance of the MasterAccountApi, and handles potential exceptions during the API call.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/MasterAccountApi.md#2025-04-17_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport brevo_python\nfrom brevo_python.rest import ApiException\nfrom pprint import pprint\n\n# Configure API key authorization: api-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['api-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['api-key'] = 'Bearer'\n# Configure API key authorization: partner-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['partner-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['partner-key'] = 'Bearer'\n\n# create an instance of the API class\napi_instance = brevo_python.MasterAccountApi(brevo_python.ApiClient(configuration))\ncreate_api_key_request = brevo_python.CreateApiKeyRequest() # CreateApiKeyRequest | Values to generate API key for sub-account\n\ntry:\n    # Create an API key for a sub-account\n    api_response = api_instance.corporate_sub_account_key_post(create_api_key_request)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling MasterAccountApi->corporate_sub_account_key_post: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Creating DOI Contact with Brevo Python\nDESCRIPTION: Creates a Double Opt-In (DOI) contact using the Brevo API. Shows error handling and API instance creation with proper configuration.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/ContactsApi.md#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\napi_instance = brevo_python.ContactsApi(brevo_python.ApiClient(configuration))\ncreate_doi_contact = brevo_python.CreateDoiContact()\n\ntry:\n    api_instance.create_doi_contact(create_doi_contact)\nexcept ApiException as e:\n    print(\"Exception when calling ContactsApi->create_doi_contact: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Managing Individual CRM Tasks with Brevo Python API\nDESCRIPTION: Examples showing how to get, update, and delete individual tasks using their IDs.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/CRMApi.md#2025-04-17_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n# Configure API key authorization: api-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['api-key'] = 'YOUR_API_KEY'\n# Configure API key authorization: partner-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['partner-key'] = 'YOUR_API_KEY'\n\n# create an instance of the API class\napi_instance = brevo_python.CRMApi(brevo_python.ApiClient(configuration))\nid = 'id_example'\n\ntry:\n    # Get/Delete/Update a task\n    api_response = api_instance.crm_tasks_id_get(id)  # For GET\n    api_instance.crm_tasks_id_delete(id)  # For DELETE\n    api_instance.crm_tasks_id_patch(id, body)  # For UPDATE\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling CRMApi operations: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Deleting a List using Brevo Python API\nDESCRIPTION: Example of deleting a contact list using the Brevo ContactsApi. Requires API key or partner key authentication.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/ContactsApi.md#2025-04-17_snippet_9\n\nLANGUAGE: python\nCODE:\n```\napi_instance = brevo_python.ContactsApi(brevo_python.ApiClient(configuration))\nlist_id = 789 # int | Id of the list\n\ntry:\n    # Delete a list\n    api_instance.delete_list(list_id)\nexcept ApiException as e:\n    print(\"Exception when calling ContactsApi->delete_list: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Creating Contact Attributes in Brevo API with Python\nDESCRIPTION: Example of how to create a contact attribute using the Brevo Python client. This snippet demonstrates API key configuration and making a create_attribute request with the necessary parameters.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/AttributesApi.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport brevo_python\nfrom brevo_python.rest import ApiException\nfrom pprint import pprint\n\n# Configure API key authorization: api-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['api-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['api-key'] = 'Bearer'\n# Configure API key authorization: partner-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['partner-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['partner-key'] = 'Bearer'\n\n# create an instance of the API class\napi_instance = brevo_python.AttributesApi(brevo_python.ApiClient(configuration))\nattribute_category = 'attribute_category_example' # str | Category of the attribute\nattribute_name = 'attribute_name_example' # str | Name of the attribute\ncreate_attribute = brevo_python.CreateAttribute() # CreateAttribute | Values to create an attribute\n\ntry:\n    # Create contact attribute\n    api_instance.create_attribute(attribute_category, attribute_name, create_attribute)\nexcept ApiException as e:\n    print(\"Exception when calling AttributesApi->create_attribute: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Updating Email Template with Brevo Python SDK\nDESCRIPTION: This snippet configures API key authorization, initializes the TransactionalEmailsApi, and updates an SMTP template. It requires the Brevo Python SDK and a valid API key. The function takes a template ID and an UpdateSmtpTemplate object as inputs.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/TransactionalEmailsApi.md#2025-04-17_snippet_25\n\nLANGUAGE: Python\nCODE:\n```\n# Configure API key authorization: partner-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['partner-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['partner-key'] = 'Bearer'\n\n# create an instance of the API class\napi_instance = brevo_python.TransactionalEmailsApi(brevo_python.ApiClient(configuration))\ntemplate_id = 789 # int | id of the template\nsmtp_template = brevo_python.UpdateSmtpTemplate() # UpdateSmtpTemplate | values to update in transactional email template\n\ntry:\n    # Update an email template\n    api_instance.update_smtp_template(template_id, smtp_template)\nexcept ApiException as e:\n    print(\"Exception when calling TransactionalEmailsApi->update_smtp_template: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Fetching Contacts from List with Brevo Python SDK\nDESCRIPTION: Example showing how to retrieve contacts from a list with pagination and filtering options using the Brevo Python SDK. Includes parameters for modified date, limit, offset and sort order.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/ListsApi.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport brevo_python\nfrom brevo_python.rest import ApiException\nfrom pprint import pprint\n\n# Configure API key authorization: api-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['api-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['api-key'] = 'Bearer'\n# Configure API key authorization: partner-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['partner-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['partner-key'] = 'Bearer'\n\n# create an instance of the API class\napi_instance = brevo_python.ListsApi(brevo_python.ApiClient(configuration))\nlist_id = 789 # int | Id of the list\nmodified_since = 'modified_since_example' # str | Filter (urlencoded) the contacts modified after a given UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ). Prefer to pass your timezone in date-time format for accurate result. (optional)\nlimit = 50 # int | Number of documents per page (optional) (default to 50)\noffset = 0 # int | Index of the first document of the page (optional) (default to 0)\nsort = 'desc' # str | Sort the results in the ascending/descending order of record creation. Default order is **descending** if `sort` is not passed (optional) (default to desc)\n\ntry:\n    # Get contacts in a list\n    api_response = api_instance.get_contacts_from_list(list_id, modified_since=modified_since, limit=limit, offset=offset, sort=sort)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling ListsApi->get_contacts_from_list: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Deleting an Inactive Email Template in Brevo\nDESCRIPTION: Shows how to delete an inactive email template using the Brevo API. This operation requires a template ID and proper API authentication.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/TransactionalEmailsApi.md#2025-04-17_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport brevo_python\nfrom brevo_python.rest import ApiException\nfrom pprint import pprint\n\n# Configure API key authorization: api-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['api-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['api-key'] = 'Bearer'\n# Configure API key authorization: partner-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['partner-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['partner-key'] = 'Bearer'\n\n# create an instance of the API class\napi_instance = brevo_python.TransactionalEmailsApi(brevo_python.ApiClient(configuration))\ntemplate_id = 789 # int | id of the template\n\ntry:\n    # Delete an inactive email template\n    api_instance.delete_smtp_template(template_id)\nexcept ApiException as e:\n    print(\"Exception when calling TransactionalEmailsApi->delete_smtp_template: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Fetching an External Feed by UUID in Python using brevo-python\nDESCRIPTION: This snippet shows how to fetch a specific external feed by its UUID using the brevo-python library. It sets up API key authorization, creates an ExternalFeedsApi instance, and calls the get_external_feed_by_uuid method with the feed's UUID.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/ExternalFeedsApi.md#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport brevo_python\nfrom brevo_python.rest import ApiException\nfrom pprint import pprint\n\n# Configure API key authorization: api-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['api-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['api-key'] = 'Bearer'\n# Configure API key authorization: partner-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['partner-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['partner-key'] = 'Bearer'\n\n# create an instance of the API class\napi_instance = brevo_python.ExternalFeedsApi(brevo_python.ApiClient(configuration))\nuuid = 'uuid_example' # str | UUID of the feed to fetch\n\ntry:\n    # Get an external feed by UUID\n    api_response = api_instance.get_external_feed_by_uuid(uuid)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling ExternalFeedsApi->get_external_feed_by_uuid: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Creating Products in Batch with Brevo Python SDK\nDESCRIPTION: Example of how to create multiple products in a single API call using the Brevo Python SDK. The code shows proper API key configuration and response handling.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/EcommerceApi.md#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport brevo_python\nfrom brevo_python.rest import ApiException\nfrom pprint import pprint\n\n# Configure API key authorization: api-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['api-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['api-key'] = 'Bearer'\n# Configure API key authorization: partner-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['partner-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['partner-key'] = 'Bearer'\n\n# create an instance of the API class\napi_instance = brevo_python.EcommerceApi(brevo_python.ApiClient(configuration))\ncreate_update_batch_products = brevo_python.CreateUpdateBatchProducts() # CreateUpdateBatchProducts | Values to create a batch of products\n\ntry:\n    # Create products in batch\n    api_response = api_instance.create_update_batch_products(create_update_batch_products)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling EcommerceApi->create_update_batch_products: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Configuring Brevo Python API Authorization\nDESCRIPTION: Sets up API key authorization configuration for both api-key and partner-key. Demonstrates how to initialize the configuration object and set API keys.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/ContactsApi.md#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['api-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['api-key'] = 'Bearer'\n# Configure API key authorization: partner-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['partner-key'] = 'YOUR_API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Sending an Email Campaign Immediately in Brevo\nDESCRIPTION: Demonstrates how to send an existing email campaign immediately based on its campaign ID. Includes error handling with ApiException and proper API instance setup.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/EmailCampaignsApi.md#2025-04-17_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n# create an instance of the API class\napi_instance = brevo_python.EmailCampaignsApi(brevo_python.ApiClient(configuration))\ncampaign_id = 789 # int | Id of the campaign\n\ntry:\n    # Send an email campaign immediately, based on campaignId\n    api_instance.send_email_campaign_now(campaign_id)\nexcept ApiException as e:\n    print(\"Exception when calling EmailCampaignsApi->send_email_campaign_now: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Updating Contact Attribute with Brevo Python SDK\nDESCRIPTION: Example of updating a contact attribute using the Brevo ContactsApi. Requires API key authentication and accepts attribute category, name and update values as parameters.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/ContactsApi.md#2025-04-17_snippet_27\n\nLANGUAGE: python\nCODE:\n```\napi_instance = brevo_python.ContactsApi(brevo_python.ApiClient(configuration))\nattribute_category = 'attribute_category_example' \nattribute_name = 'attribute_name_example'\nupdate_attribute = brevo_python.UpdateAttribute()\n\ntry:\n    api_instance.update_attribute(attribute_category, attribute_name, update_attribute)\nexcept ApiException as e:\n    print(\"Exception when calling ContactsApi->update_attribute: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Linking/Unlinking Deals with Contacts and Companies in Brevo CRM (Python)\nDESCRIPTION: This snippet demonstrates how to link or unlink a deal with contacts and companies in Brevo's CRM system. It requires the deal ID and the IDs of contacts and companies to link or unlink.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/DealsApi.md#2025-04-17_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport brevo_python\nfrom brevo_python.rest import ApiException\nfrom pprint import pprint\n\n# Configure API key authorization: api-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['api-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['api-key'] = 'Bearer'\n# Configure API key authorization: partner-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['partner-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['partner-key'] = 'Bearer'\n\n# create an instance of the API class\napi_instance = brevo_python.DealsApi(brevo_python.ApiClient(configuration))\nid = 'id_example' # str | \nbody = brevo_python.Body10() # Body10 | Linked / Unlinked contacts and companies ids.\n\ntry:\n    # Link and Unlink a deal with contacts and companies\n    api_instance.crm_deals_link_unlink_id_patch(id, body)\nexcept ApiException as e:\n    print(\"Exception when calling DealsApi->crm_deals_link_unlink_id_patch: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Getting Segments from Brevo API\nDESCRIPTION: Retrieves segments using the Brevo ContactsApi with pagination support. Takes limit, offset and sort parameters to customize the results.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/ContactsApi.md#2025-04-17_snippet_23\n\nLANGUAGE: python\nCODE:\n```\napi_instance = brevo_python.ContactsApi(brevo_python.ApiClient(configuration))\nlimit = 10 # int | Number of documents per page (default to 10)\noffset = 0 # int | Index of the first document of the page (default to 0)\nsort = 'desc' # str | Sort the results in the ascending/descending order\n\ntry:\n    # Get all the Segments\n    api_response = api_instance.get_segments(limit, offset, sort=sort)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling ContactsApi->get_segments: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Uploading Files with Brevo Python API\nDESCRIPTION: This code snippet demonstrates how to upload a file using the Brevo Python API. It creates an instance of the FilesApi, sets up the required parameters, and makes a POST request to upload the file. The file can be optionally linked to a deal, contact, or company.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/FilesApi.md#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# create an instance of the API class\napi_instance = brevo_python.FilesApi(brevo_python.ApiClient(configuration))\nfile = '/path/to/file.txt' # file | File data to create a file.\ndeal_id = 'deal_id_example' # str | Deal id linked to a file (optional)\ncontact_id = 789 # int | Contact id linked to a file (optional)\ncompany_id = 'company_id_example' # str | Company id linked to a file (optional)\n\ntry:\n    # Upload a file\n    api_response = api_instance.crm_files_post(file, deal_id=deal_id, contact_id=contact_id, company_id=company_id)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling FilesApi->crm_files_post: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Updating a CRM Note with Brevo Python SDK\nDESCRIPTION: This snippet illustrates how to update an existing CRM note using the Brevo Python SDK. It demonstrates configuring the API client, setting up authentication, and making a PATCH request to modify the content of a note identified by its ID.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/CRMApi.md#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport brevo_python\nfrom brevo_python.rest import ApiException\nfrom pprint import pprint\n\n# Configure API key authorization: api-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['api-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['api-key'] = 'Bearer'\n# Configure API key authorization: partner-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['partner-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['partner-key'] = 'Bearer'\n\n# create an instance of the API class\napi_instance = brevo_python.CRMApi(brevo_python.ApiClient(configuration))\nid = 'id_example' # str | Note ID to update\nbody = brevo_python.NoteData() # NoteData | Note data to update a note\n\ntry:\n    # Update a note\n    api_instance.crm_notes_id_patch(id, body)\nexcept ApiException as e:\n    print(\"Exception when calling CRMApi->crm_notes_id_patch: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Getting All Contacts Using Brevo Python API Client\nDESCRIPTION: This snippet demonstrates how to retrieve all contacts using the Brevo Python API client. It includes optional parameters for filtering and pagination.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/ContactsApi.md#2025-04-17_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport brevo_python\nfrom brevo_python.rest import ApiException\nfrom pprint import pprint\n\n# Configure API key authorization: api-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['api-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['api-key'] = 'Bearer'\n# Configure API key authorization: partner-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['partner-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['partner-key'] = 'Bearer'\n\n# create an instance of the API class\napi_instance = brevo_python.ContactsApi(brevo_python.ApiClient(configuration))\nlimit = 50 # int | Number of documents per page (optional) (default to 50)\noffset = 0 # int | Index of the first document of the page (optional) (default to 0)\nmodified_since = 'modified_since_example' # str | Filter (urlencoded) the contacts modified after a given UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ). Prefer to pass your timezone in date-time format for accurate result. (optional)\ncreated_since = 'created_since_example' # str | Filter (urlencoded) the contacts created after a given UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ). Prefer to pass your timezone in date-time format for accurate result. (optional)\nsort = 'desc' # str | Sort the results in the ascending/descending order of record creation. Default order is **descending** if `sort` is not passed (optional) (default to desc)\nsegment_id = 789 # int | Id of the segment. **Either listIds or segmentId can be passed.** (optional)\nlist_ids = [56] # list[int] | Ids of the list. **Either listIds or segmentId can be passed.** (optional)\nfilter = 'filter_example' # str | Filter the contacts on the basis of attributes. **Allowed operator: equals. (e.g. filter=equals(FIRSTNAME,\\\"Antoine\\\"), filter=equals(B1, true), filter=equals(DOB, \\\"1989-11-23\\\"))**  (optional)\n\ntry:\n    # Get all the contacts\n    api_response = api_instance.get_contacts(limit=limit, offset=offset, modified_since=modified_since, created_since=created_since, sort=sort, segment_id=segment_id, list_ids=list_ids, filter=filter)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling ContactsApi->get_contacts: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Creating SMTP Template in Brevo\nDESCRIPTION: Example of creating an email template using the Brevo API. Requires API key or partner key authentication and accepts a CreateSmtpTemplate object containing template details.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/TransactionalEmailsApi.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport brevo_python\nfrom brevo_python.rest import ApiException\nfrom pprint import pprint\n\n# Configure API key authorization: api-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['api-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['api-key'] = 'Bearer'\n# Configure API key authorization: partner-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['partner-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['partner-key'] = 'Bearer'\n\n# create an instance of the API class\napi_instance = brevo_python.TransactionalEmailsApi(brevo_python.ApiClient(configuration))\nsmtp_template = brevo_python.CreateSmtpTemplate() # CreateSmtpTemplate | values to update in transactional email template\n\ntry:\n    # Create an email template\n    api_response = api_instance.create_smtp_template(smtp_template)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling TransactionalEmailsApi->create_smtp_template: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Uploading Images to Brevo Gallery using Python SDK\nDESCRIPTION: This snippet demonstrates how to authenticate with the Brevo API, create an instance of the EmailCampaignsApi class, and upload an image to the gallery. It includes error handling with ApiException and displays the response using pprint.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/EmailCampaignsApi.md#2025-04-17_snippet_15\n\nLANGUAGE: python\nCODE:\n```\n# Configure API key authorization: partner-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['partner-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['partner-key'] = 'Bearer'\n\n# create an instance of the API class\napi_instance = brevo_python.EmailCampaignsApi(brevo_python.ApiClient(configuration))\nupload_image = brevo_python.UploadImageToGallery() # UploadImageToGallery | Parameters to upload an image\n\ntry:\n    # Upload an image to your account's image gallery\n    api_response = api_instance.upload_image_to_gallery(upload_image)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling EmailCampaignsApi->upload_image_to_gallery: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Getting Folder Details Using Brevo Python API Client\nDESCRIPTION: This snippet demonstrates how to retrieve details of a specific folder using the Brevo Python API client.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/ContactsApi.md#2025-04-17_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport brevo_python\nfrom brevo_python.rest import ApiException\nfrom pprint import pprint\n\n# Configure API key authorization: api-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['api-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['api-key'] = 'Bearer'\n# Configure API key authorization: partner-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['partner-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['partner-key'] = 'Bearer'\n\n# create an instance of the API class\napi_instance = brevo_python.ContactsApi(brevo_python.ApiClient(configuration))\nfolder_id = 789 # int | id of the folder\n\ntry:\n    # Returns a folder's details\n    api_response = api_instance.get_folder(folder_id)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling ContactsApi->get_folder: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: API Authorization Configuration\nDESCRIPTION: Configuration details for API authentication using api-key and partner-key headers\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/README.md#2025-04-17_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n## api-key\n- Type: API key\n- API key parameter name: api-key\n- Location: HTTP header\n\n## partner-key\n- Type: API key \n- API key parameter name: partner-key\n- Location: HTTP header\n```\n\n----------------------------------------\n\nTITLE: Creating/Updating a Product in Brevo eCommerce API (Python)\nDESCRIPTION: This snippet shows how to create or update a product using the Brevo eCommerce API. It sets up API key authorization, initializes the API client, and sends a request to create/update a product with the given data.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/EcommerceApi.md#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport brevo_python\nfrom brevo_python.rest import ApiException\nfrom pprint import pprint\n\n# Configure API key authorization: api-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['api-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['api-key'] = 'Bearer'\n# Configure API key authorization: partner-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['partner-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['partner-key'] = 'Bearer'\n\n# create an instance of the API class\napi_instance = brevo_python.EcommerceApi(brevo_python.ApiClient(configuration))\ncreate_update_product = brevo_python.CreateUpdateProduct() # CreateUpdateProduct | Values to create/update a product\n\ntry:\n    # Create/Update a product\n    api_response = api_instance.create_update_product(create_update_product)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling EcommerceApi->create_update_product: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Listing All Contact Attributes in Brevo API with Python\nDESCRIPTION: Example of how to retrieve all contact attributes using the Brevo Python client. This snippet demonstrates API key configuration and making a get_attributes request that returns a GetAttributes object containing all attributes.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/AttributesApi.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport brevo_python\nfrom brevo_python.rest import ApiException\nfrom pprint import pprint\n\n# Configure API key authorization: api-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['api-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['api-key'] = 'Bearer'\n# Configure API key authorization: partner-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['partner-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['partner-key'] = 'Bearer'\n\n# create an instance of the API class\napi_instance = brevo_python.AttributesApi(brevo_python.ApiClient(configuration))\n\ntry:\n    # List all attributes\n    api_response = api_instance.get_attributes()\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling AttributesApi->get_attributes: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Getting Contacts in a List Using Brevo Python API Client\nDESCRIPTION: This snippet shows how to retrieve contacts from a specific list using the Brevo Python API client. It includes optional parameters for filtering and pagination.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/ContactsApi.md#2025-04-17_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport brevo_python\nfrom brevo_python.rest import ApiException\nfrom pprint import pprint\n\n# Configure API key authorization: api-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['api-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['api-key'] = 'Bearer'\n# Configure API key authorization: partner-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['partner-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['partner-key'] = 'Bearer'\n\n# create an instance of the API class\napi_instance = brevo_python.ContactsApi(brevo_python.ApiClient(configuration))\nlist_id = 789 # int | Id of the list\nmodified_since = 'modified_since_example' # str | Filter (urlencoded) the contacts modified after a given UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ). Prefer to pass your timezone in date-time format for accurate result. (optional)\nlimit = 50 # int | Number of documents per page (optional) (default to 50)\noffset = 0 # int | Index of the first document of the page (optional) (default to 0)\nsort = 'desc' # str | Sort the results in the ascending/descending order of record creation. Default order is **descending** if `sort` is not passed (optional) (default to desc)\n\ntry:\n    # Get contacts in a list\n    api_response = api_instance.get_contacts_from_list(list_id, modified_since=modified_since, limit=limit, offset=offset, sort=sort)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling ContactsApi->get_contacts_from_list: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Getting Contact Details using Brevo Python API\nDESCRIPTION: Example of retrieving detailed contact information including 90-day statistics using the Brevo ContactsApi. Requires API key or partner key authentication.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/ContactsApi.md#2025-04-17_snippet_11\n\nLANGUAGE: python\nCODE:\n```\napi_instance = brevo_python.ContactsApi(brevo_python.ApiClient(configuration))\nidentifier = 'identifier_example' # str | Email (urlencoded) OR ID of the contact OR its SMS attribute value\nstart_date = 'start_date_example' # str | Starting date (YYYY-MM-DD) \nend_date = 'end_date_example' # str | Ending date (YYYY-MM-DD)\n\ntry:\n    # Get a contact's details\n    api_response = api_instance.get_contact_info(identifier, start_date=start_date, end_date=end_date)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling ContactsApi->get_contact_info: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Deals with Brevo Python SDK\nDESCRIPTION: Example of how to fetch all deals with optional filtering, sorting, and pagination using the Brevo Python SDK. Demonstrates making a GET request to the /crm/deals endpoint with various parameters.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/DealsApi.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport brevo_python\nfrom brevo_python.rest import ApiException\nfrom pprint import pprint\n\n# Configure API key authorization: api-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['api-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['api-key'] = 'Bearer'\n# Configure API key authorization: partner-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['partner-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['partner-key'] = 'Bearer'\n\n# create an instance of the API class\napi_instance = brevo_python.DealsApi(brevo_python.ApiClient(configuration))\nfilters_attributes_deal_name = 'filters_attributes_deal_name_example' # str | Filter by attributes. If you have a filter for the owner on your end, please send it as filters[attributes.deal_owner] and utilize the account email for the filtering. (optional)\nfilters_linked_companies_ids = 'filters_linked_companies_ids_example' # str | Filter by linked companies ids (optional)\nfilters_linked_contacts_ids = 'filters_linked_contacts_ids_example' # str | Filter by linked companies ids (optional)\noffset = 789 # int | Index of the first document of the page (optional)\nlimit = 50 # int | Number of documents per page (optional) (default to 50)\nsort = 'sort_example' # str | Sort the results in the ascending/descending order. Default order is **descending** by creation if `sort` is not passed (optional)\nsort_by = 'sort_by_example' # str | The field used to sort field names. (optional)\n\ntry:\n    # Get all deals\n    api_response = api_instance.crm_deals_get(filters_attributes_deal_name=filters_attributes_deal_name, filters_linked_companies_ids=filters_linked_companies_ids, filters_linked_contacts_ids=filters_linked_contacts_ids, offset=offset, limit=limit, sort=sort, sort_by=sort_by)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling DealsApi->crm_deals_get: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Adding Credits to Child Account in Python\nDESCRIPTION: This snippet demonstrates how to add email and/or SMS credits to a specific child account using the Brevo Python SDK. It initializes the API client, sets up authentication, and makes a POST request to add credits.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/ResellerApi.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport brevo_python\nfrom brevo_python.rest import ApiException\nfrom pprint import pprint\n\n# Configure API key authorization: api-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['api-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['api-key'] = 'Bearer'\n# Configure API key authorization: partner-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['partner-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['partner-key'] = 'Bearer'\n\n# create an instance of the API class\napi_instance = brevo_python.ResellerApi(brevo_python.ApiClient(configuration))\nchild_identifier = 'child_identifier_example' # str | Either auth key or id of reseller's child\nadd_credits = brevo_python.AddCredits() # AddCredits | Values to post to add credit to a specific child account\n\ntry:\n    # Add Email and/or SMS credits to a specific child account\n    api_response = api_instance.add_credits(child_identifier, add_credits)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling ResellerApi->add_credits: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Batch Updating Contacts with Brevo Python SDK\nDESCRIPTION: Example of updating multiple contacts in a single API call using the Brevo ContactsApi. Requires API key authentication and accepts an UpdateBatchContacts object containing the contacts to update.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/ContactsApi.md#2025-04-17_snippet_28\n\nLANGUAGE: python\nCODE:\n```\napi_instance = brevo_python.ContactsApi(brevo_python.ApiClient(configuration))\nupdate_batch_contacts = brevo_python.UpdateBatchContacts()\n\ntry:\n    api_instance.update_batch_contacts(update_batch_contacts)\nexcept ApiException as e:\n    print(\"Exception when calling ContactsApi->update_batch_contacts: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Getting Shared Template URL in Python\nDESCRIPTION: This snippet demonstrates how to get a unique URL for sharing and importing an email template between Brevo accounts using the Python SDK. It configures API key authorization, creates an API instance, and calls the get_shared_template_url method with a campaign ID.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/EmailCampaignsApi.md#2025-04-17_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport brevo_python\nfrom brevo_python.rest import ApiException\nfrom pprint import pprint\n\n# Configure API key authorization: api-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['api-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['api-key'] = 'Bearer'\n# Configure API key authorization: partner-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['partner-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['partner-key'] = 'Bearer'\n\n# create an instance of the API class\napi_instance = brevo_python.EmailCampaignsApi(brevo_python.ApiClient(configuration))\ncampaign_id = 789 # int | Id of the campaign or template\n\ntry:\n    # Get a shared template url\n    api_response = api_instance.get_shared_template_url(campaign_id)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling EmailCampaignsApi->get_shared_template_url: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Creating a CRM Note with Brevo Python SDK\nDESCRIPTION: This snippet shows how to create a new CRM note using the Brevo Python SDK. It demonstrates setting up the API client with authentication and making a POST request to add a new note to the CRM system.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/CRMApi.md#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport brevo_python\nfrom brevo_python.rest import ApiException\nfrom pprint import pprint\n\n# Configure API key authorization: api-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['api-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['api-key'] = 'Bearer'\n\n# create an instance of the API class\napi_instance = brevo_python.CRMApi(brevo_python.ApiClient(configuration))\nbody = brevo_python.NoteData() # NoteData | Note data to create a note\n\ntry:\n    # Create a note\n    api_response = api_instance.crm_notes_post(body)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling CRMApi->crm_notes_post: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Creating a Task with Brevo Python SDK\nDESCRIPTION: Example code for creating a task using the Brevo Python SDK. It demonstrates how to configure API key authorization, create an instance of the TasksApi, and make a request to create a task with appropriate error handling.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/TasksApi.md#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport brevo_python\nfrom brevo_python.rest import ApiException\nfrom pprint import pprint\n\n# Configure API key authorization: api-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['api-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['api-key'] = 'Bearer'\n# Configure API key authorization: partner-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['partner-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['partner-key'] = 'Bearer'\n\n# create an instance of the API class\napi_instance = brevo_python.TasksApi(brevo_python.ApiClient(configuration))\nbody = brevo_python.Body11() # Body11 | Task name.\n\ntry:\n    # Create a task\n    api_response = api_instance.crm_tasks_post(body)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling TasksApi->crm_tasks_post: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Account Information with Brevo Python SDK\nDESCRIPTION: This snippet demonstrates how to use the get_account method to retrieve account information, plan details, and credit information. It shows API key configuration, client initialization, and error handling.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/AccountApi.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport brevo_python\nfrom brevo_python.rest import ApiException\nfrom pprint import pprint\n\n# Configure API key authorization: api-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['api-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['api-key'] = 'Bearer'\n# Configure API key authorization: partner-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['partner-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['partner-key'] = 'Bearer'\n\n# create an instance of the API class\napi_instance = brevo_python.AccountApi(brevo_python.ApiClient(configuration))\n\ntry:\n    # Get your account information, plan and credits details\n    api_response = api_instance.get_account()\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling AccountApi->get_account: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Retrieving All WhatsApp Campaigns with Python\nDESCRIPTION: This snippet demonstrates how to retrieve all created WhatsApp campaigns using the Brevo Python client. It configures API authentication, creates an API instance, and calls the get_whats_app_campaigns method with optional parameters for pagination and sorting.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/WhatsappCampaignsApi.md#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport brevo_python\nfrom brevo_python.rest import ApiException\nfrom pprint import pprint\n\n# Configure API key authorization: api-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['api-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['api-key'] = 'Bearer'\n# Configure API key authorization: partner-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['partner-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['partner-key'] = 'Bearer'\n\n# create an instance of the API class\napi_instance = brevo_python.WhatsAppCampaignsApi(brevo_python.ApiClient(configuration))\nstart_date = '2013-10-20' # date | Mandatory if endDate is used. Starting (urlencoded) UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ) to filter the sent WhatsApp campaigns. Prefer to pass your timezone in date-time format for accurate result ( only available if either 'status' not passed and if passed is set to 'sent' ) (optional)\nend_date = '2013-10-20' # date | Mandatory if startDate is used. Ending (urlencoded) UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ) to filter the sent WhatsApp campaigns. Prefer to pass your timezone in date-time format for accurate result ( only available if either 'status' not passed and if passed is set to 'sent' ) (optional)\nlimit = 50 # int | Number of documents per page (optional) (default to 50)\noffset = 0 # int | Index of the first document of the page (optional) (default to 0)\nsort = 'desc' # str | Sort the results in the ascending/descending order of record creation. Default order is **descending** if `sort` is not passed (optional) (default to desc)\n\ntry:\n    # Return all your created WhatsApp campaigns\n    api_response = api_instance.get_whats_app_campaigns(start_date=start_date, end_date=end_date, limit=limit, offset=offset, sort=sort)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling WhatsAppCampaignsApi->get_whats_app_campaigns: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Sending a Test Template in Python using Brevo API\nDESCRIPTION: Code example demonstrating how to send a template to a test list using the Brevo Python SDK. The example shows API key configuration and error handling.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/TransactionalEmailsApi.md#2025-04-17_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport brevo_python\nfrom brevo_python.rest import ApiException\nfrom pprint import pprint\n\n# Configure API key authorization: api-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['api-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['api-key'] = 'Bearer'\n# Configure API key authorization: partner-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['partner-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['partner-key'] = 'Bearer'\n\n# create an instance of the API class\napi_instance = brevo_python.TransactionalEmailsApi(brevo_python.ApiClient(configuration))\ntemplate_id = 789 # int | Id of the template\nsend_test_email = brevo_python.SendTestEmail() # SendTestEmail | \n\ntry:\n    # Send a template to your test list\n    api_instance.send_test_template(template_id, send_test_email)\nexcept ApiException as e:\n    print(\"Exception when calling TransactionalEmailsApi->send_test_template: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Creating a New Domain in Brevo Python SDK\nDESCRIPTION: This example shows how to create a new domain using the Brevo Python SDK. It configures API keys, creates an instance of the DomainsApi class, and makes an API call to create a new domain with the provided name.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/DomainsApi.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport brevo_python\nfrom brevo_python.rest import ApiException\nfrom pprint import pprint\n\n# Configure API key authorization: api-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['api-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['api-key'] = 'Bearer'\n# Configure API key authorization: partner-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['partner-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['partner-key'] = 'Bearer'\n\n# create an instance of the API class\napi_instance = brevo_python.DomainsApi(brevo_python.ApiClient(configuration))\ndomain_name = brevo_python.CreateDomain() # CreateDomain | domain's name (optional)\n\ntry:\n    # Create a new domain\n    api_response = api_instance.create_domain(domain_name=domain_name)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling DomainsApi->create_domain: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Unblocking a Transactional Contact in Python using Brevo API\nDESCRIPTION: Example showing how to unblock or resubscribe a transactional contact using the Brevo Python SDK. It demonstrates API configuration and error handling.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/TransactionalEmailsApi.md#2025-04-17_snippet_22\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport brevo_python\nfrom brevo_python.rest import ApiException\nfrom pprint import pprint\n\n# Configure API key authorization: api-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['api-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['api-key'] = 'Bearer'\n# Configure API key authorization: partner-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['partner-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['partner-key'] = 'Bearer'\n\n# create an instance of the API class\napi_instance = brevo_python.TransactionalEmailsApi(brevo_python.ApiClient(configuration))\nemail = 'email_example' # str | contact email (urlencoded) to unblock.\n\ntry:\n    # Unblock or resubscribe a transactional contact\n    api_instance.smtp_blocked_contacts_email_delete(email)\nexcept ApiException as e:\n    print(\"Exception when calling TransactionalEmailsApi->smtp_blocked_contacts_email_delete: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Sending a Message as an Agent in Brevo Conversations API (Python)\nDESCRIPTION: This snippet demonstrates how to use the conversations_messages_post method to send a message as an agent in a conversation.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/ConversationsApi.md#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport brevo_python\nfrom brevo_python.rest import ApiException\nfrom pprint import pprint\n\n# Configure API key authorization: api-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['api-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['api-key'] = 'Bearer'\n# Configure API key authorization: partner-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['partner-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['partner-key'] = 'Bearer'\n\n# create an instance of the API class\napi_instance = brevo_python.ConversationsApi(brevo_python.ApiClient(configuration))\nbody = brevo_python.Body15() # Body15 | Message fields.\n\ntry:\n    # Send a message as an agent\n    api_response = api_instance.conversations_messages_post(body)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling ConversationsApi->conversations_messages_post: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Getting All Files with Brevo Python SDK\nDESCRIPTION: This snippet demonstrates how to retrieve all files using the crm_files_get method. It allows filtering by entity type, date range, and includes pagination options.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/FilesApi.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport brevo_python\nfrom brevo_python.rest import ApiException\nfrom pprint import pprint\n\n# Configure API key authorization: api-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['api-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['api-key'] = 'Bearer'\n# Configure API key authorization: partner-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['partner-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['partner-key'] = 'Bearer'\n\n# create an instance of the API class\napi_instance = brevo_python.FilesApi(brevo_python.ApiClient(configuration))\nentity = 'entity_example' # str | Filter by file entity type (optional)\nentity_ids = 'entity_ids_example' # str | Filter by file entity IDs (optional)\ndate_from = 56 # int | dateFrom to date range filter type (timestamp in milliseconds) (optional)\ndate_to = 56 # int | dateTo to date range filter type (timestamp in milliseconds) (optional)\noffset = 789 # int | Index of the first document of the page (optional)\nlimit = 50 # int | Number of documents per page (optional) (default to 50)\nsort = 'sort_example' # str | Sort the results in the ascending/descending order. Default order is **descending** by creation if `sort` is not passed (optional)\n\ntry:\n    # Get all files\n    api_response = api_instance.crm_files_get(entity=entity, entity_ids=entity_ids, date_from=date_from, date_to=date_to, offset=offset, limit=limit, sort=sort)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling FilesApi->crm_files_get: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Updating an Email Campaign in Brevo\nDESCRIPTION: Demonstrates how to update the details of an existing email campaign using the UpdateEmailCampaign object. Includes error handling and proper API client configuration.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/EmailCampaignsApi.md#2025-04-17_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n# create an instance of the API class\napi_instance = brevo_python.EmailCampaignsApi(brevo_python.ApiClient(configuration))\ncampaign_id = 789 # int | Id of the campaign\nemail_campaign = brevo_python.UpdateEmailCampaign() # UpdateEmailCampaign | Values to update a campaign\n\ntry:\n    # Update an email campaign\n    api_instance.update_email_campaign(campaign_id, email_campaign)\nexcept ApiException as e:\n    print(\"Exception when calling EmailCampaignsApi->update_email_campaign: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Creating a Deal in Brevo CRM (Python)\nDESCRIPTION: This snippet shows how to create a new deal in Brevo's CRM system using the Python client library. It requires the deal creation data as input.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/DealsApi.md#2025-04-17_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport brevo_python\nfrom brevo_python.rest import ApiException\nfrom pprint import pprint\n\n# Configure API key authorization: api-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['api-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['api-key'] = 'Bearer'\n# Configure API key authorization: partner-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['partner-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['partner-key'] = 'Bearer'\n\n# create an instance of the API class\napi_instance = brevo_python.DealsApi(brevo_python.ApiClient(configuration))\nbody = brevo_python.Body8() # Body8 | Deal create data.\n\ntry:\n    # Create a deal\n    api_response = api_instance.crm_deals_post(body)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling DealsApi->crm_deals_post: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Resending or Canceling User Invitations in Brevo Python SDK\nDESCRIPTION: This code demonstrates how to resend or cancel a user invitation using the Brevo Python SDK. It configures API key authentication, creates an instance of the UserApi class, and calls the putresendcancelinvitation method with the desired action and the email of the invited user.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/UserApi.md#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport brevo_python\nfrom brevo_python.rest import ApiException\nfrom pprint import pprint\n\n# Configure API key authorization: api-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['api-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['api-key'] = 'Bearer'\n# Configure API key authorization: partner-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['partner-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['partner-key'] = 'Bearer'\n\n# create an instance of the API class\napi_instance = brevo_python.UserApi(brevo_python.ApiClient(configuration))\naction = 'action_example' # str | action\nemail = 'email_example' # str | Email of the invited user.\n\ntry:\n    # Resend / Cancel invitation\n    api_response = api_instance.putresendcancelinvitation(action, email)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling UserApi->putresendcancelinvitation: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Updating an Email Campaign Status in Brevo\nDESCRIPTION: Shows how to update the status of an email campaign using the UpdateCampaignStatus object. Includes API client setup and proper exception handling.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/EmailCampaignsApi.md#2025-04-17_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n# create an instance of the API class\napi_instance = brevo_python.EmailCampaignsApi(brevo_python.ApiClient(configuration))\ncampaign_id = 789 # int | Id of the campaign\nstatus = brevo_python.UpdateCampaignStatus() # UpdateCampaignStatus | Status of the campaign\n\ntry:\n    # Update an email campaign status\n    api_instance.update_campaign_status(campaign_id, status)\nexcept ApiException as e:\n    print(\"Exception when calling EmailCampaignsApi->update_campaign_status: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Fetching All Lists with Brevo Python SDK\nDESCRIPTION: This code example shows how to retrieve all available lists using the Brevo Python SDK. It sets up API authentication, initializes the ContactsApi client, and calls the get_lists method with optional parameters for pagination and sorting. The response contains list information that can be printed for review.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/ContactsApi.md#2025-04-17_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport brevo_python\nfrom brevo_python.rest import ApiException\nfrom pprint import pprint\n\n# Configure API key authorization: api-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['api-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['api-key'] = 'Bearer'\n# Configure API key authorization: partner-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['partner-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['partner-key'] = 'Bearer'\n\n# create an instance of the API class\napi_instance = brevo_python.ContactsApi(brevo_python.ApiClient(configuration))\nlimit = 10 # int | Number of documents per page (optional) (default to 10)\noffset = 0 # int | Index of the first document of the page (optional) (default to 0)\nsort = 'desc' # str | Sort the results in the ascending/descending order of record creation. Default order is **descending** if `sort` is not passed (optional) (default to desc)\n\ntry:\n    # Get all the lists\n    api_response = api_instance.get_lists(limit=limit, offset=offset, sort=sort)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling ContactsApi->get_lists: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Validating Domain Configuration in Brevo Python SDK\nDESCRIPTION: This example shows how to validate a domain configuration using the Brevo Python SDK. It configures API keys, creates an instance of the DomainsApi class, and makes an API call to validate the configuration of a specified domain.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/DomainsApi.md#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport brevo_python\nfrom brevo_python.rest import ApiException\nfrom pprint import pprint\n\n# Configure API key authorization: api-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['api-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['api-key'] = 'Bearer'\n# Configure API key authorization: partner-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['partner-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['partner-key'] = 'Bearer'\n\n# create an instance of the API class\napi_instance = brevo_python.DomainsApi(brevo_python.ApiClient(configuration))\ndomain_name = 'domain_name_example' # str | Domain name\n\ntry:\n    # Validate domain configuration\n    api_response = api_instance.get_domain_configuration(domain_name)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling DomainsApi->get_domain_configuration: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Getting Single CRM Note with Python\nDESCRIPTION: Example code demonstrating how to retrieve a specific note by ID from the Brevo CRM system. Requires api-key or partner-key authentication.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/NotesApi.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport brevo_python\nfrom brevo_python.rest import ApiException\nfrom pprint import pprint\n\n# Configure API key authorization: api-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['api-key'] = 'YOUR_API_KEY'\n\napi_instance = brevo_python.NotesApi(brevo_python.ApiClient(configuration))\nid = 'id_example'\n\ntry:\n    api_response = api_instance.crm_notes_id_get(id)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling NotesApi->crm_notes_id_get: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Deleting Scheduled Emails by ID in Brevo\nDESCRIPTION: Demonstrates how to delete scheduled batch emails by batchId or a single scheduled email by messageId. The example includes full authentication setup and error handling.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/TransactionalEmailsApi.md#2025-04-17_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport brevo_python\nfrom brevo_python.rest import ApiException\nfrom pprint import pprint\n\n# Configure API key authorization: api-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['api-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['api-key'] = 'Bearer'\n# Configure API key authorization: partner-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['partner-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['partner-key'] = 'Bearer'\n\n# create an instance of the API class\napi_instance = brevo_python.TransactionalEmailsApi(brevo_python.ApiClient(configuration))\nidentifier = 'identifier_example' # str | The `batchId` of scheduled emails batch (Should be a valid UUIDv4) or the `messageId` of scheduled email.\n\ntry:\n    # Delete scheduled emails by batchId or messageId\n    api_instance.delete_scheduled_email_by_id(identifier)\nexcept ApiException as e:\n    print(\"Exception when calling TransactionalEmailsApi->delete_scheduled_email_by_id: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Getting Master Account Details in Brevo Python\nDESCRIPTION: Example of retrieving master account details using the Brevo Python SDK. Requires API key authentication.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/MasterAccountApi.md#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport brevo_python\nfrom brevo_python.rest import ApiException\nfrom pprint import pprint\n\n# Configure API key authorization: api-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['api-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['api-key'] = 'Bearer'\n# Configure API key authorization: partner-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['partner-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['partner-key'] = 'Bearer'\n\n# create an instance of the API class\napi_instance = brevo_python.MasterAccountApi(brevo_python.ApiClient(configuration))\n\ntry:\n    # Get the details of requested master account\n    api_response = api_instance.corporate_master_account_get()\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling MasterAccountApi->corporate_master_account_get: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Linking and Unlinking Companies with Contacts and Deals\nDESCRIPTION: This snippet shows how to use the Brevo Python SDK to link and unlink a company with contacts and deals. It includes API key configuration and error handling.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/CompaniesApi.md#2025-04-17_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n# Configure API key authorization: api-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['api-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['api-key'] = 'Bearer'\n# Configure API key authorization: partner-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['partner-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['partner-key'] = 'Bearer'\n\n# create an instance of the API class\napi_instance = brevo_python.CompaniesApi(brevo_python.ApiClient(configuration))\nid = 'id_example' # str | \nbody = brevo_python.Body7() # Body7 | Linked / Unlinked contacts and deals ids.\n\ntry:\n    # Link and Unlink company with contacts and deals\n    api_instance.companies_link_unlink_id_patch(id, body)\nexcept ApiException as e:\n    print(\"Exception when calling CompaniesApi->companies_link_unlink_id_patch: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Creating Orders in Batch with Brevo Python SDK\nDESCRIPTION: Example of how to create multiple orders in a single API call using the Brevo Python SDK. The code shows proper API key configuration and error handling.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/EcommerceApi.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport brevo_python\nfrom brevo_python.rest import ApiException\nfrom pprint import pprint\n\n# Configure API key authorization: api-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['api-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['api-key'] = 'Bearer'\n# Configure API key authorization: partner-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['partner-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['partner-key'] = 'Bearer'\n\n# create an instance of the API class\napi_instance = brevo_python.EcommerceApi(brevo_python.ApiClient(configuration))\norder_batch = brevo_python.OrderBatch() # OrderBatch \n\ntry:\n    # Create orders in batch\n    api_instance.create_batch_order(order_batch)\nexcept ApiException as e:\n    print(\"Exception when calling EcommerceApi->create_batch_order: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Deleting Contact Attributes in Brevo API with Python\nDESCRIPTION: Example of how to delete a contact attribute using the Brevo Python client. This snippet demonstrates API key configuration and making a delete_attribute request with the category and name of the attribute to delete.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/AttributesApi.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport brevo_python\nfrom brevo_python.rest import ApiException\nfrom pprint import pprint\n\n# Configure API key authorization: api-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['api-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['api-key'] = 'Bearer'\n# Configure API key authorization: partner-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['partner-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['partner-key'] = 'Bearer'\n\n# create an instance of the API class\napi_instance = brevo_python.AttributesApi(brevo_python.ApiClient(configuration))\nattribute_category = 'attribute_category_example' # str | Category of the attribute\nattribute_name = 'attribute_name_example' # str | Name of the existing attribute\n\ntry:\n    # Delete an attribute\n    api_instance.delete_attribute(attribute_category, attribute_name)\nexcept ApiException as e:\n    print(\"Exception when calling AttributesApi->delete_attribute: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Fetching Transactional Email List with Filters using Brevo Python SDK\nDESCRIPTION: Example showing how to use the get_transac_emails_list method of the TransactionalEmailsApi to retrieve a list of transactional emails with various filters. The snippet shows how to filter emails by recipient email, template ID, message ID, date range, and includes pagination and sorting options.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/TransactionalEmailsApi.md#2025-04-17_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport brevo_python\nfrom brevo_python.rest import ApiException\nfrom pprint import pprint\n\n# Configure API key authorization: api-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['api-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['api-key'] = 'Bearer'\n# Configure API key authorization: partner-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['partner-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['partner-key'] = 'Bearer'\n\n# create an instance of the API class\napi_instance = brevo_python.TransactionalEmailsApi(brevo_python.ApiClient(configuration))\nemail = 'email_example' # str | Mandatory if templateId and messageId are not passed in query filters. Email address to which transactional email has been sent. (optional)\ntemplate_id = 789 # int | Mandatory if email and messageId are not passed in query filters. Id of the template that was used to compose transactional email. (optional)\nmessage_id = 'message_id_example' # str | Mandatory if templateId and email are not passed in query filters. Message ID of the transactional email sent. (optional)\nstart_date = 'start_date_example' # str | Mandatory if endDate is used. Starting date (YYYY-MM-DD) from which you want to fetch the list. Maximum time period that can be selected is one month. (optional)\nend_date = 'end_date_example' # str | Mandatory if startDate is used. Ending date (YYYY-MM-DD) till which you want to fetch the list. Maximum time period that can be selected is one month. (optional)\nsort = 'desc' # str | Sort the results in the ascending/descending order of record creation. Default order is **descending** if `sort` is not passed (optional) (default to desc)\nlimit = 500 # int | Number of documents returned per page (optional) (default to 500)\noffset = 0 # int | Index of the first document in the page (optional) (default to 0)\n\ntry:\n    # Get the list of transactional emails on the basis of allowed filters\n    api_response = api_instance.get_transac_emails_list(email=email, template_id=template_id, message_id=message_id, start_date=start_date, end_date=end_date, sort=sort, limit=limit, offset=offset)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling TransactionalEmailsApi->get_transac_emails_list: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Updating SMS Campaign Details using Brevo Python SDK\nDESCRIPTION: This code demonstrates how to update an existing SMS campaign using the Brevo Python SDK. It includes API key configuration for authorization, creating an API instance, and handling the API call with error management.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/SMSCampaignsApi.md#2025-04-17_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport brevo_python\nfrom brevo_python.rest import ApiException\nfrom pprint import pprint\n\n# Configure API key authorization: api-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['api-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['api-key'] = 'Bearer'\n# Configure API key authorization: partner-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['partner-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['partner-key'] = 'Bearer'\n\n# create an instance of the API class\napi_instance = brevo_python.SMSCampaignsApi(brevo_python.ApiClient(configuration))\ncampaign_id = 789 # int | id of the SMS campaign\nupdate_sms_campaign = brevo_python.UpdateSmsCampaign() # UpdateSmsCampaign | Values to update an SMS Campaign\n\ntry:\n    # Update an SMS campaign\n    api_instance.update_sms_campaign(campaign_id, update_sms_campaign)\nexcept ApiException as e:\n    print(\"Exception when calling SMSCampaignsApi->update_sms_campaign: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Tasks with Brevo Python SDK\nDESCRIPTION: This snippet demonstrates how to retrieve all tasks from the Brevo CRM using various filter options, pagination, and sorting. It requires API key authentication and handles potential exceptions.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/TasksApi.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport brevo_python\nfrom brevo_python.rest import ApiException\nfrom pprint import pprint\n\n# Configure API key authorization: api-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['api-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['api-key'] = 'Bearer'\n# Configure API key authorization: partner-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['partner-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['partner-key'] = 'Bearer'\n\n# create an instance of the API class\napi_instance = brevo_python.TasksApi(brevo_python.ApiClient(configuration))\nfilter_type = 'filter_type_example' # str | Filter by task type (ID) (optional)\nfilter_status = 'filter_status_example' # str | Filter by task status (optional)\nfilter_date = 'filter_date_example' # str | Filter by date (optional)\nfilter_assign_to = 'filter_assign_to_example' # str | Filter by the \\\"assignTo\\\" ID. You can utilize account emails for the \\\"assignTo\\\" attribute. (optional)\nfilter_contacts = 'filter_contacts_example' # str | Filter by contact ids (optional)\nfilter_deals = 'filter_deals_example' # str | Filter by deals ids (optional)\nfilter_companies = 'filter_companies_example' # str | Filter by companies ids (optional)\ndate_from = 56 # int | dateFrom to date range filter type (timestamp in milliseconds) (optional)\ndate_to = 56 # int | dateTo to date range filter type (timestamp in milliseconds) (optional)\noffset = 789 # int | Index of the first document of the page (optional)\nlimit = 50 # int | Number of documents per page (optional) (default to 50)\nsort = 'sort_example' # str | Sort the results in the ascending/descending order. Default order is **descending** by creation if `sort` is not passed (optional)\nsort_by = 'sort_by_example' # str | The field used to sort field names. (optional)\n\ntry:\n    # Get all tasks\n    api_response = api_instance.crm_tasks_get(filter_type=filter_type, filter_status=filter_status, filter_date=filter_date, filter_assign_to=filter_assign_to, filter_contacts=filter_contacts, filter_deals=filter_deals, filter_companies=filter_companies, date_from=date_from, date_to=date_to, offset=offset, limit=limit, sort=sort, sort_by=sort_by)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling TasksApi->crm_tasks_get: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Getting Contact Campaign Stats using Brevo Python API\nDESCRIPTION: Example of retrieving email campaign statistics for a specific contact using the Brevo ContactsApi. Requires API key or partner key authentication.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/ContactsApi.md#2025-04-17_snippet_12\n\nLANGUAGE: python\nCODE:\n```\napi_instance = brevo_python.ContactsApi(brevo_python.ApiClient(configuration))\nidentifier = 'identifier_example' # str | Email (urlencoded) OR ID of the contact\nstart_date = 'start_date_example' # str | Starting date (YYYY-MM-DD)\nend_date = 'end_date_example' # str | Ending date (YYYY-MM-DD)\n\ntry:\n    # Get email campaigns' statistics for a contact\n    api_response = api_instance.get_contact_stats(identifier, start_date=start_date, end_date=end_date)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling ContactsApi->get_contact_stats: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Creating New List with Brevo Python SDK\nDESCRIPTION: Example showing how to create a new contact list using the Brevo Python SDK. Requires API key configuration and handles errors through ApiException.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/ListsApi.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport brevo_python\nfrom brevo_python.rest import ApiException\nfrom pprint import pprint\n\n# Configure API key authorization: api-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['api-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['api-key'] = 'Bearer'\n# Configure API key authorization: partner-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['partner-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['partner-key'] = 'Bearer'\n\n# create an instance of the API class\napi_instance = brevo_python.ListsApi(brevo_python.ApiClient(configuration))\ncreate_list = brevo_python.CreateList() # CreateList | Values to create a list\n\ntry:\n    # Create a list\n    api_response = api_instance.create_list(create_list)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling ListsApi->create_list: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Products using Brevo Python SDK\nDESCRIPTION: Demonstrates the API call to get a list of all products with various filtering options including limit, offset, sort, and product-specific filters. The function includes proper API key configuration.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/EcommerceApi.md#2025-04-17_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport brevo_python\nfrom brevo_python.rest import ApiException\nfrom pprint import pprint\n\n# Configure API key authorization: api-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['api-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['api-key'] = 'Bearer'\n# Configure API key authorization: partner-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['partner-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['partner-key'] = 'Bearer'\n```\n\n----------------------------------------\n\nTITLE: Sending Email Campaign Immediately in Python\nDESCRIPTION: This snippet shows how to send an email campaign immediately based on a campaign ID using the Brevo Python SDK. It configures API key authorization, creates an API instance, and calls the send_email_campaign_now method with a campaign ID.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/EmailCampaignsApi.md#2025-04-17_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport brevo_python\nfrom brevo_python.rest import ApiException\nfrom pprint import pprint\n```\n\n----------------------------------------\n\nTITLE: Creating an External Feed in Python using brevo-python\nDESCRIPTION: This snippet demonstrates how to create an external feed using the brevo-python library. It configures API key authorization, initializes the ExternalFeedsApi client, and calls the create_external_feed method.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/ExternalFeedsApi.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport brevo_python\nfrom brevo_python.rest import ApiException\nfrom pprint import pprint\n\n# Configure API key authorization: api-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['api-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['api-key'] = 'Bearer'\n# Configure API key authorization: partner-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['partner-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['partner-key'] = 'Bearer'\n\n# create an instance of the API class\napi_instance = brevo_python.ExternalFeedsApi(brevo_python.ApiClient(configuration))\ncreate_external_feed = brevo_python.CreateExternalFeed() # CreateExternalFeed | Values to create a feed\n\ntry:\n    # Create an external feed\n    api_response = api_instance.create_external_feed(create_external_feed)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling ExternalFeedsApi->create_external_feed: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Fetching Scheduled Email by Message ID with Brevo Python SDK\nDESCRIPTION: This snippet demonstrates how to retrieve information about a scheduled email using its message ID. It initializes the Brevo TransactionalEmailsApi client, sets up optional date range parameters, and makes the API call with proper error handling.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/TransactionalEmailsApi.md#2025-04-17_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['partner-key'] = 'Bearer'\n\n# create an instance of the API class\napi_instance = brevo_python.TransactionalEmailsApi(brevo_python.ApiClient(configuration))\nmessage_id = 'message_id_example' # str | The messageId of scheduled email\nstart_date = '2013-10-20' # date | Mandatory if endDate is used. Starting date (YYYY-MM-DD) from which you want to fetch the list. Can be maximum 30 days older tha current date. (optional)\nend_date = '2013-10-20' # date | Mandatory if startDate is used. Ending date (YYYY-MM-DD) till which you want to fetch the list. Maximum time period that can be selected is one month. (optional)\n\ntry:\n    # Fetch scheduled email by messageId\n    api_response = api_instance.get_scheduled_email_by_message_id(message_id, start_date=start_date, end_date=end_date)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling TransactionalEmailsApi->get_scheduled_email_by_message_id: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Creating Coupons for a Collection with Brevo Python SDK\nDESCRIPTION: This snippet shows how to create coupons for an existing coupon collection using the Brevo Python SDK. It sets up API key authorization and sends a POST request to add coupons to a collection.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/CouponsApi.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport brevo_python\nfrom brevo_python.rest import ApiException\nfrom pprint import pprint\n\n# Configure API key authorization: api-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['api-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['api-key'] = 'Bearer'\n# Configure API key authorization: partner-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['partner-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['partner-key'] = 'Bearer'\n\n# create an instance of the API class\napi_instance = brevo_python.CouponsApi(brevo_python.ApiClient(configuration))\ncreate_coupons = brevo_python.CreateCoupons() # CreateCoupons | Values to create coupons\n\ntry:\n    # Create coupons for a coupon collection\n    api_instance.create_coupons(create_coupons)\nexcept ApiException as e:\n    print(\"Exception when calling CouponsApi->create_coupons: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Creating a CRM Task using Brevo Python API\nDESCRIPTION: This snippet shows how to create a new task in the Brevo CRM using the Python API. It requires the task name as input and returns the created task details.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/CRMApi.md#2025-04-17_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n# create an instance of the API class\napi_instance = brevo_python.CRMApi(brevo_python.ApiClient(configuration))\nbody = brevo_python.Body() # Body | Task name.\n\ntry:\n    # Create a task\n    api_response = api_instance.crm_tasks_post(body)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling CRMApi->crm_tasks_post: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Personalized Content of Sent Transactional Emails with Brevo Python SDK\nDESCRIPTION: Example showing how to use the get_transac_email_content method of the TransactionalEmailsApi to retrieve the personalized content of a sent transactional email. The snippet demonstrates API key configuration, creating an API instance, and using the UUID of a sent email to fetch its content.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/TransactionalEmailsApi.md#2025-04-17_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport brevo_python\nfrom brevo_python.rest import ApiException\nfrom pprint import pprint\n\n# Configure API key authorization: api-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['api-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['api-key'] = 'Bearer'\n# Configure API key authorization: partner-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['partner-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['partner-key'] = 'Bearer'\n\n# create an instance of the API class\napi_instance = brevo_python.TransactionalEmailsApi(brevo_python.ApiClient(configuration))\nuuid = 'uuid_example' # str | Unique id of the transactional email that has been sent to a particular contact\n\ntry:\n    # Get the personalized content of a sent transactional email\n    api_response = api_instance.get_transac_email_content(uuid)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling TransactionalEmailsApi->get_transac_email_content: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Retrieving User Activity Logs with Brevo Python SDK\nDESCRIPTION: This snippet shows how to use the get_account_activity method to fetch user activity logs. It demonstrates API key configuration, client initialization, optional parameter usage for date filtering and pagination, and error handling.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/AccountApi.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport brevo_python\nfrom brevo_python.rest import ApiException\nfrom pprint import pprint\n\n# Configure API key authorization: api-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['api-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['api-key'] = 'Bearer'\n# Configure API key authorization: partner-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['partner-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['partner-key'] = 'Bearer'\n\n# create an instance of the API class\napi_instance = brevo_python.AccountApi(brevo_python.ApiClient(configuration))\nstart_date = 'start_date_example' # str | Mandatory if endDate is used. Enter start date in UTC date (YYYY-MM-DD) format to filter the activity in your account. Maximum time period that can be selected is one month. Additionally, you can retrieve activity logs from the past 12 months from the date of your search. (optional)\nend_date = 'end_date_example' # str | Mandatory if startDate is used. Enter end date in UTC date (YYYY-MM-DD) format to filter the activity in your account. Maximum time period that can be selected is one month. (optional)\nlimit = 10 # int | Number of documents per page (optional) (default to 10)\noffset = 0 # int | Index of the first document in the page. (optional) (default to 0)\n\ntry:\n    # Get user activity logs\n    api_response = api_instance.get_account_activity(start_date=start_date, end_date=end_date, limit=limit, offset=offset)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling AccountApi->get_account_activity: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Pipelines in Brevo CRM with Python\nDESCRIPTION: Example code for retrieving all CRM pipelines using the Brevo Python SDK. This snippet demonstrates API key configuration, DealsApi initialization, and making the API call to get all pipelines.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/DealsApi.md#2025-04-17_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n# configuration.api_key_prefix['partner-key'] = 'Bearer'\n\n# create an instance of the API class\napi_instance = brevo_python.DealsApi(brevo_python.ApiClient(configuration))\n\ntry:\n    # Get all pipelines\n    api_response = api_instance.crm_pipeline_details_all_get()\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling DealsApi->crm_pipeline_details_all_get: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Deleting a Task with Brevo Python SDK\nDESCRIPTION: This snippet shows how to delete a specific task from the Brevo CRM using its ID. It requires API key authentication and handles potential exceptions.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/TasksApi.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport brevo_python\nfrom brevo_python.rest import ApiException\nfrom pprint import pprint\n\n# Configure API key authorization: api-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['api-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['api-key'] = 'Bearer'\n# Configure API key authorization: partner-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['partner-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['partner-key'] = 'Bearer'\n\n# create an instance of the API class\napi_instance = brevo_python.TasksApi(brevo_python.ApiClient(configuration))\nid = 'id_example' # str | \n\ntry:\n    # Delete a task\n    api_instance.crm_tasks_id_delete(id)\nexcept ApiException as e:\n    print(\"Exception when calling TasksApi->crm_tasks_id_delete: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Creating a WhatsApp Campaign with Python\nDESCRIPTION: This snippet demonstrates how to create and send a WhatsApp campaign using the Brevo Python client. It configures API authentication, creates an API instance, and calls the create_whats_app_campaign method.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/WhatsappCampaignsApi.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport brevo_python\nfrom brevo_python.rest import ApiException\nfrom pprint import pprint\n\n# Configure API key authorization: api-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['api-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['api-key'] = 'Bearer'\n# Configure API key authorization: partner-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['partner-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['partner-key'] = 'Bearer'\n\n# create an instance of the API class\napi_instance = brevo_python.WhatsAppCampaignsApi(brevo_python.ApiClient(configuration))\nwhats_app_campaigns = brevo_python.CreateWhatsAppCampaign() # CreateWhatsAppCampaign | Values to create a campaign\n\ntry:\n    # Create and Send a WhatsApp campaign\n    api_response = api_instance.create_whats_app_campaign(whats_app_campaigns)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling WhatsAppCampaignsApi->create_whats_app_campaign: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Updating a Sender using Brevo Python API\nDESCRIPTION: This snippet demonstrates how to update a sender using the Brevo Python API. It includes setting up API key authorization, creating an API instance, and calling the update_sender method with error handling.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/SendersApi.md#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport brevo_python\nfrom brevo_python.rest import ApiException\nfrom pprint import pprint\n\n# Configure API key authorization: api-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['api-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['api-key'] = 'Bearer'\n# Configure API key authorization: partner-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['partner-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['partner-key'] = 'Bearer'\n\n# create an instance of the API class\napi_instance = brevo_python.SendersApi(brevo_python.ApiClient(configuration))\nsender_id = 789 # int | Id of the sender\nsender = brevo_python.UpdateSender() # UpdateSender | sender's name (optional)\n\ntry:\n    # Update a sender\n    api_instance.update_sender(sender_id, sender=sender)\nexcept ApiException as e:\n    print(\"Exception when calling SendersApi->update_sender: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Creating Categories in Batch with Brevo Python SDK\nDESCRIPTION: Example of how to create multiple categories in a single API call using the Brevo Python SDK. The code includes API key configuration and response handling.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/EcommerceApi.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport brevo_python\nfrom brevo_python.rest import ApiException\nfrom pprint import pprint\n\n# Configure API key authorization: api-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['api-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['api-key'] = 'Bearer'\n# Configure API key authorization: partner-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['partner-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['partner-key'] = 'Bearer'\n\n# create an instance of the API class\napi_instance = brevo_python.EcommerceApi(brevo_python.ApiClient(configuration))\ncreate_update_batch_category = brevo_python.CreateUpdateBatchCategory() # CreateUpdateBatchCategory | Values to create a batch of categories\n\ntry:\n    # Create categories in batch\n    api_response = api_instance.create_update_batch_category(create_update_batch_category)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling EcommerceApi->create_update_batch_category: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Getting WhatsApp API Account Information with Brevo Python SDK\nDESCRIPTION: This snippet shows how to retrieve your WhatsApp API account information through the Brevo Python SDK. It requires authentication with either an API key or partner key and returns configuration details about your WhatsApp integration.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/WhatsappCampaignsApi.md#2025-04-17_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport brevo_python\nfrom brevo_python.rest import ApiException\nfrom pprint import pprint\n\n# Configure API key authorization: api-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['api-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['api-key'] = 'Bearer'\n# Configure API key authorization: partner-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['partner-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['partner-key'] = 'Bearer'\n\n# create an instance of the API class\napi_instance = brevo_python.WhatsAppCampaignsApi(brevo_python.ApiClient(configuration))\n\ntry:\n    # Get your WhatsApp API account information\n    api_response = api_instance.get_whats_app_config()\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling WhatsAppCampaignsApi->get_whats_app_config: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Creating a New Company using Brevo Python SDK\nDESCRIPTION: This snippet demonstrates how to create a new company using the Brevo Python SDK. It includes API key configuration, creating a Companies API instance, and handling API exceptions.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/CompaniesApi.md#2025-04-17_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n# Configure API key authorization: api-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['api-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['api-key'] = 'Bearer'\n# Configure API key authorization: partner-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['partner-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['partner-key'] = 'Bearer'\n\n# create an instance of the API class\napi_instance = brevo_python.CompaniesApi(brevo_python.ApiClient(configuration))\nbody = brevo_python.Body5() # Body5 | Company create data.\n\ntry:\n    # Create a company\n    api_response = api_instance.companies_post(body)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling CompaniesApi->companies_post: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Fetching Inbound Email Events List with Python\nDESCRIPTION: Example code demonstrating how to retrieve a list of all events for received emails. Supports filtering by sender, date range, and includes pagination options. Requires API key or partner key authentication.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/InboundParsingApi.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport brevo_python\nfrom brevo_python.rest import ApiException\nfrom pprint import pprint\n\n# Configure API key authorization: api-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['api-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['api-key'] = 'Bearer'\n# Configure API key authorization: partner-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['partner-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['partner-key'] = 'Bearer'\n\n# create an instance of the API class\napi_instance = brevo_python.InboundParsingApi(brevo_python.ApiClient(configuration))\nsender = 'sender_example' # str | Email address of the sender. (optional)\nstart_date = 'start_date_example' # str | Mandatory if endDate is used. Starting date (YYYY-MM-DD or YYYY-MM-DDTHH:mm:ss.SSSZ) from which you want to fetch the list. Maximum time period that can be selected is one month. (optional)\nend_date = 'end_date_example' # str | Mandatory if startDate is used. Ending date (YYYY-MM-DD or YYYY-MM-DDTHH:mm:ss.SSSZ) till which you want to fetch the list. Maximum time period that can be selected is one month. (optional)\nlimit = 100 # int | Number of documents returned per page (optional) (default to 100)\noffset = 0 # int | Index of the first document on the page (optional) (default to 0)\nsort = 'desc' # str | Sort the results in the ascending/descending order of record creation (optional) (default to desc)\n\ntry:\n    # Get the list of all the events for the received emails.\n    api_response = api_instance.get_inbound_email_events(sender=sender, start_date=start_date, end_date=end_date, limit=limit, offset=offset, sort=sort)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling InboundParsingApi->get_inbound_email_events: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Inbound Email Attachments with Python\nDESCRIPTION: Example code showing how to retrieve an inbound email attachment using a download token. Requires API key or partner key authentication and uses the brevo_python library.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/InboundParsingApi.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport brevo_python\nfrom brevo_python.rest import ApiException\nfrom pprint import pprint\n\n# Configure API key authorization: api-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['api-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['api-key'] = 'Bearer'\n# Configure API key authorization: partner-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['partner-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['partner-key'] = 'Bearer'\n\n# create an instance of the API class\napi_instance = brevo_python.InboundParsingApi(brevo_python.ApiClient(configuration))\ndownload_token = 'download_token_example' # str | Token to fetch a particular attachment\n\ntry:\n    # Retrieve inbound attachment with download token.\n    api_response = api_instance.get_inbound_email_attachment(download_token)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling InboundParsingApi->get_inbound_email_attachment: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Updating a Folder using Brevo Python SDK\nDESCRIPTION: This snippet shows how to update a folder using the Brevo Python SDK. It initializes the API client, sets the folder ID and update parameters, and makes an API call to update the folder. Any exceptions during the process are caught and printed.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/FoldersApi.md#2025-04-17_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n# create an instance of the API class\napi_instance = brevo_python.FoldersApi(brevo_python.ApiClient(configuration))\nfolder_id = 789 # int | Id of the folder\nupdate_folder = brevo_python.CreateUpdateFolder() # CreateUpdateFolder | Name of the folder\n\ntry:\n    # Update a folder\n    api_instance.update_folder(folder_id, update_folder)\nexcept ApiException as e:\n    print(\"Exception when calling FoldersApi->update_folder: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Updating a Deal in Brevo CRM (Python)\nDESCRIPTION: This snippet demonstrates how to update an existing deal in Brevo's CRM system using the Python client library. It requires the deal ID and updated deal details as input.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/DealsApi.md#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport brevo_python\nfrom brevo_python.rest import ApiException\nfrom pprint import pprint\n\n# Configure API key authorization: api-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['api-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['api-key'] = 'Bearer'\n# Configure API key authorization: partner-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['partner-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['partner-key'] = 'Bearer'\n\n# create an instance of the API class\napi_instance = brevo_python.DealsApi(brevo_python.ApiClient(configuration))\nid = 'id_example' # str | \nbody = brevo_python.Body9() # Body9 | Updated deal details.\n\ntry:\n    # Update a deal\n    api_instance.crm_deals_id_patch(id, body)\nexcept ApiException as e:\n    print(\"Exception when calling DealsApi->crm_deals_id_patch: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Fetching All Email Campaigns in Python\nDESCRIPTION: This snippet shows how to retrieve all created email campaigns using the Brevo Python SDK. It configures API key authorization, creates an API instance, and calls the get_email_campaigns method with various optional filter parameters.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/EmailCampaignsApi.md#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport brevo_python\nfrom brevo_python.rest import ApiException\nfrom pprint import pprint\n\n# Configure API key authorization: api-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['api-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['api-key'] = 'Bearer'\n# Configure API key authorization: partner-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['partner-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['partner-key'] = 'Bearer'\n\n# create an instance of the API class\napi_instance = brevo_python.EmailCampaignsApi(brevo_python.ApiClient(configuration))\ntype = 'type_example' # str | Filter on the type of the campaigns (optional)\nstatus = 'status_example' # str | Filter on the status of the campaign (optional)\nstatistics = 'statistics_example' # str | Filter on the type of statistics required. Example **globalStats** value will only fetch globalStats info of the campaign in returned response.This option only returns data for events occurred in the last 6 months.For older campaigns, it's advisable to use the **Get Campaign Report** endpoint. (optional)\nstart_date = 'start_date_example' # str | Mandatory if endDate is used. Starting (urlencoded) UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ) to filter the sent email campaigns. Prefer to pass your timezone in date-time format for accurate result ( only available if either 'status' not passed and if passed is set to 'sent' ) (optional)\nend_date = 'end_date_example' # str | Mandatory if startDate is used. Ending (urlencoded) UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ) to filter the sent email campaigns. Prefer to pass your timezone in date-time format for accurate result ( only available if either 'status' not passed and if passed is set to 'sent' ) (optional)\nlimit = 50 # int | Number of documents per page (optional) (default to 50)\noffset = 0 # int | Index of the first document in the page (optional) (default to 0)\nsort = 'desc' # str | Sort the results in the ascending/descending order of record creation. Default order is **descending** if `sort` is not passed (optional) (default to desc)\nexclude_html_content = true # bool | Use this flag to exclude htmlContent from the response body. If set to **true**, htmlContent field will be returned as empty string in the response body (optional)\n\ntry:\n    # Return all your created email campaigns\n    api_response = api_instance.get_email_campaigns(type=type, status=status, statistics=statistics, start_date=start_date, end_date=end_date, limit=limit, offset=offset, sort=sort, exclude_html_content=exclude_html_content)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling EmailCampaignsApi->get_email_campaigns: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Exporting Email Campaign Recipients with Brevo Python SDK\nDESCRIPTION: Example demonstrating how to export the recipients of an email campaign using the Brevo Python SDK. This includes API client setup and calling the email_export_recipients method with optional parameters.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/EmailCampaignsApi.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport brevo_python\nfrom brevo_python.rest import ApiException\nfrom pprint import pprint\n\n# Configure API key authorization: api-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['api-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['api-key'] = 'Bearer'\n# Configure API key authorization: partner-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['partner-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['partner-key'] = 'Bearer'\n\n# create an instance of the API class\napi_instance = brevo_python.EmailCampaignsApi(brevo_python.ApiClient(configuration))\ncampaign_id = 789 # int | Id of the campaign\nrecipient_export = brevo_python.EmailExportRecipients() # EmailExportRecipients | Values to send for a recipient export request (optional)\n\ntry:\n    # Export the recipients of an email campaign\n    api_response = api_instance.email_export_recipients(campaign_id, recipient_export=recipient_export)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling EmailCampaignsApi->email_export_recipients: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Setting Agent Status to Online in Brevo Conversations API (Python)\nDESCRIPTION: This snippet demonstrates how to use the conversations_agent_online_ping_post method to set an agent's status to online for 2-3 minutes. It's recommended to call this endpoint every minute while the agent should be considered online.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/ConversationsApi.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport brevo_python\nfrom brevo_python.rest import ApiException\nfrom pprint import pprint\n\n# Configure API key authorization: api-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['api-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['api-key'] = 'Bearer'\n# Configure API key authorization: partner-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['partner-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['partner-key'] = 'Bearer'\n\n# create an instance of the API class\napi_instance = brevo_python.ConversationsApi(brevo_python.ApiClient(configuration))\nbody = brevo_python.Body17() # Body17 | Agent fields.\n\ntry:\n    # Sets agent's status to online for 2-3 minutes\n    api_instance.conversations_agent_online_ping_post(body)\nexcept ApiException as e:\n    print(\"Exception when calling ConversationsApi->conversations_agent_online_ping_post: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Adding Existing Contacts to a List in Python\nDESCRIPTION: Example of how to add existing contacts to a list using the Brevo Python client library. It configures the API client, creates an instance of the ContactsApi, and calls the add_contact_to_list method.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/ContactsApi.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport brevo_python\nfrom brevo_python.rest import ApiException\nfrom pprint import pprint\n\n# Configure API key authorization: api-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['api-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['api-key'] = 'Bearer'\n# Configure API key authorization: partner-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['partner-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['partner-key'] = 'Bearer'\n\n# create an instance of the API class\napi_instance = brevo_python.ContactsApi(brevo_python.ApiClient(configuration))\nlist_id = 789 # int | Id of the list\ncontact_emails = brevo_python.AddContactToList() # AddContactToList | Emails addresses OR IDs of the contacts\n\ntry:\n    # Add existing contacts to a list\n    api_response = api_instance.add_contact_to_list(list_id, contact_emails)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling ContactsApi->add_contact_to_list: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Updating Coupon Collection with Brevo Python SDK\nDESCRIPTION: This snippet shows how to update a coupon collection using the Brevo Python SDK. It creates an instance of the CouponsApi, sets up the required parameters, and calls the update_coupon_collection method. The code also includes error handling for API exceptions.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/CouponsApi.md#2025-04-17_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\n# create an instance of the API class\napi_instance = brevo_python.CouponsApi(brevo_python.ApiClient(configuration))\nid = 'id_example' # str | Id of the collection to update\nupdate_coupon_collection = brevo_python.UpdateCouponCollection() # UpdateCouponCollection | Values to update the coupon collection (optional)\n\ntry:\n    # Update a coupon collection by id\n    api_response = api_instance.update_coupon_collection(id, update_coupon_collection=update_coupon_collection)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling CouponsApi->update_coupon_collection: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Companies with Filtering and Pagination in Brevo Python SDK\nDESCRIPTION: Example code showing how to get a list of all companies with optional filtering, pagination, and sorting parameters. The endpoint allows filtering by attributes, linked contacts, and linked deals.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/CompaniesApi.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport brevo_python\nfrom brevo_python.rest import ApiException\nfrom pprint import pprint\n\n# Configure API key authorization: api-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['api-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['api-key'] = 'Bearer'\n# Configure API key authorization: partner-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['partner-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['partner-key'] = 'Bearer'\n\n# create an instance of the API class\napi_instance = brevo_python.CompaniesApi(brevo_python.ApiClient(configuration))\nfilters = 'filters_example' # str | Filter by attrbutes. If you have filter for owner on your side please send it as {\\\"attributes.owner\\\":\\\"5b1a17d914b73d35a76ca0c7\\\"} (optional)\nlinked_contacts_ids = 789 # int | Filter by linked contacts ids (optional)\nlinked_deals_ids = 'linked_deals_ids_example' # str | Filter by linked deals ids (optional)\npage = 789 # int | Index of the first document of the page (optional)\nlimit = 50 # int | Number of documents per page (optional) (default to 50)\nsort = 'sort_example' # str | Sort the results in the ascending/descending order. Default order is **descending** by creation if `sort` is not passed (optional)\nsort_by = 'sort_by_example' # str | The field used to sort field names. (optional)\n\ntry:\n    # Get all companies\n    api_response = api_instance.companies_get(filters=filters, linked_contacts_ids=linked_contacts_ids, linked_deals_ids=linked_deals_ids, page=page, limit=limit, sort=sort, sort_by=sort_by)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling CompaniesApi->companies_get: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Corporate User Permissions in Python\nDESCRIPTION: This code snippet demonstrates how to retrieve corporate user permissions using the Brevo Python API client. It includes configuration of API keys and error handling.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/MasterAccountApi.md#2025-04-17_snippet_22\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport brevo_python\nfrom brevo_python.rest import ApiException\nfrom pprint import pprint\n\n# Configure API key authorization: api-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['api-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['api-key'] = 'Bearer'\n# Configure API key authorization: partner-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['partner-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['partner-key'] = 'Bearer'\n\n# create an instance of the API class\napi_instance = brevo_python.MasterAccountApi(brevo_python.ApiClient(configuration))\n\ntry:\n    # Get the list of groups\n    api_response = api_instance.get_sub_account_groups()\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling MasterAccountApi->get_sub_account_groups: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Updating User Permissions in Brevo API using Python\nDESCRIPTION: This snippet demonstrates how to update permissions for a user using the Brevo API. It initializes the API client, sets up authentication, and makes a POST request to update user permissions.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/UserApi.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport brevo_python\nfrom brevo_python.rest import ApiException\nfrom pprint import pprint\n\n# Configure API key authorization: api-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['api-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['api-key'] = 'Bearer'\n# Configure API key authorization: partner-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['partner-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['partner-key'] = 'Bearer'\n\n# create an instance of the API class\napi_instance = brevo_python.UserApi(brevo_python.ApiClient(configuration))\nupdate_permissions = brevo_python.Inviteuser() # Inviteuser | Values to update permissions for an invited user\n\ntry:\n    # Update permission for a user\n    api_response = api_instance.edit_user_permission(update_permissions)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling UserApi->edit_user_permission: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Updating a Webhook using Brevo Python SDK\nDESCRIPTION: This example demonstrates how to update an existing webhook using the Brevo Python SDK. It configures API key authorization, creates an instance of the WebhooksApi class, and makes a call to update_webhook with the required webhook ID and update data. It also includes error handling using try/except blocks.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/WebhooksApi.md#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport brevo_python\nfrom brevo_python.rest import ApiException\nfrom pprint import pprint\n\n# Configure API key authorization: api-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['api-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['api-key'] = 'Bearer'\n# Configure API key authorization: partner-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['partner-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['partner-key'] = 'Bearer'\n\n# create an instance of the API class\napi_instance = brevo_python.WebhooksApi(brevo_python.ApiClient(configuration))\nwebhook_id = 789 # int | Id of the webhook\nupdate_webhook = brevo_python.UpdateWebhook() # UpdateWebhook | Values to update a webhook\n\ntry:\n    # Update a webhook\n    api_instance.update_webhook(webhook_id, update_webhook)\nexcept ApiException as e:\n    print(\"Exception when calling WebhooksApi->update_webhook: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Sending SMS Campaign Immediately with Brevo Python SDK\nDESCRIPTION: This code shows how to send an SMS campaign immediately using the Brevo Python SDK. The method requires the campaign ID and sends the campaign right away without scheduling.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/SMSCampaignsApi.md#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport brevo_python\nfrom brevo_python.rest import ApiException\nfrom pprint import pprint\n\n# Configure API key authorization: api-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['api-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['api-key'] = 'Bearer'\n# Configure API key authorization: partner-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['partner-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['partner-key'] = 'Bearer'\n\n# create an instance of the API class\napi_instance = brevo_python.SMSCampaignsApi(brevo_python.ApiClient(configuration))\ncampaign_id = 789 # int | id of the campaign\n\ntry:\n    # Send your SMS campaign immediately\n    api_instance.send_sms_campaign_now(campaign_id)\nexcept ApiException as e:\n    print(\"Exception when calling SMSCampaignsApi->send_sms_campaign_now: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Lists in Brevo Python SDK\nDESCRIPTION: Shows how to fetch all contact lists with optional pagination and sorting parameters. This endpoint returns a collection of list objects with basic details for each list.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/ListsApi.md#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport brevo_python\nfrom brevo_python.rest import ApiException\nfrom pprint import pprint\n\n# Configure API key authorization: api-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['api-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['api-key'] = 'Bearer'\n# Configure API key authorization: partner-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['partner-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['partner-key'] = 'Bearer'\n\n# create an instance of the API class\napi_instance = brevo_python.ListsApi(brevo_python.ApiClient(configuration))\nlimit = 10 # int | Number of documents per page (optional) (default to 10)\noffset = 0 # int | Index of the first document of the page (optional) (default to 0)\nsort = 'desc' # str | Sort the results in the ascending/descending order of record creation. Default order is **descending** if `sort` is not passed (optional) (default to desc)\n\ntry:\n    # Get all the lists\n    api_response = api_instance.get_lists(limit=limit, offset=offset, sort=sort)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling ListsApi->get_lists: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Creating a Note with Brevo Python API\nDESCRIPTION: This snippet demonstrates how to create a note using the Brevo Python API. It initializes the API instance, prepares the note data, and makes a POST request to create the note. The code includes error handling for API exceptions.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/NotesApi.md#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# create an instance of the API class\napi_instance = brevo_python.NotesApi(brevo_python.ApiClient(configuration))\nbody = brevo_python.NoteData() # NoteData | Note data to create a note.\n\ntry:\n    # Create a note\n    api_response = api_instance.crm_notes_post(body)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling NotesApi->crm_notes_post: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Updating List with Brevo Python SDK\nDESCRIPTION: Example of updating a contact list using the Brevo ContactsApi. Requires API key authentication and accepts list ID and UpdateList object containing the values to update.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/ContactsApi.md#2025-04-17_snippet_31\n\nLANGUAGE: python\nCODE:\n```\napi_instance = brevo_python.ContactsApi(brevo_python.ApiClient(configuration))\nlist_id = 789\nupdate_list = brevo_python.UpdateList()\n\ntry:\n    api_instance.update_list(list_id, update_list)\nexcept ApiException as e:\n    print(\"Exception when calling ContactsApi->update_list: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Single Deal with Brevo Python SDK\nDESCRIPTION: Example of how to retrieve a specific deal by ID using the Brevo Python SDK. Demonstrates making a GET request to the /crm/deals/{id} endpoint.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/DealsApi.md#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport brevo_python\nfrom brevo_python.rest import ApiException\nfrom pprint import pprint\n\n# Configure API key authorization: api-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['api-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['api-key'] = 'Bearer'\n# Configure API key authorization: partner-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['partner-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['partner-key'] = 'Bearer'\n\n# create an instance of the API class\napi_instance = brevo_python.DealsApi(brevo_python.ApiClient(configuration))\nid = 'id_example' # str | \n\ntry:\n    # Get a deal\n    api_response = api_instance.crm_deals_id_get(id)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling DealsApi->crm_deals_id_get: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Deleting Blocked Domain in Brevo\nDESCRIPTION: Example of removing a domain from the blocked domains list. Requires API key or partner key authentication and accepts a domain name as input.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/TransactionalEmailsApi.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport brevo_python\nfrom brevo_python.rest import ApiException\nfrom pprint import pprint\n\n# Configure API key authorization: api-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['api-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['api-key'] = 'Bearer'\n# Configure API key authorization: partner-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['partner-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['partner-key'] = 'Bearer'\n\n# create an instance of the API class\napi_instance = brevo_python.TransactionalEmailsApi(brevo_python.ApiClient(configuration))\ndomain = 'domain_example' # str | The name of the domain to be deleted\n\ntry:\n    # Unblock an existing domain from the list of blocked domains\n    api_instance.delete_blocked_domain(domain)\nexcept ApiException as e:\n    print(\"Exception when calling TransactionalEmailsApi->delete_blocked_domain: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Creating a Coupon Collection with Brevo Python SDK\nDESCRIPTION: This snippet demonstrates how to create a new coupon collection using the Brevo Python SDK. It configures API key authorization and makes a POST request to create the collection.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/CouponsApi.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport brevo_python\nfrom brevo_python.rest import ApiException\nfrom pprint import pprint\n\n# Configure API key authorization: api-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['api-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['api-key'] = 'Bearer'\n# Configure API key authorization: partner-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['partner-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['partner-key'] = 'Bearer'\n\n# create an instance of the API class\napi_instance = brevo_python.CouponsApi(brevo_python.ApiClient(configuration))\ncreate_coupon_collection = brevo_python.CreateCouponCollection() # CreateCouponCollection | Values to create a coupon collection\n\ntry:\n    # Create а coupon collection\n    api_response = api_instance.create_coupon_collection(create_coupon_collection)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling CouponsApi->create_coupon_collection: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Removing Contacts from a List in Brevo Python SDK\nDESCRIPTION: Demonstrates how to remove contacts from a specified list by providing either email addresses or contact IDs. Returns information about the result of the operation.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/ListsApi.md#2025-04-17_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport brevo_python\nfrom brevo_python.rest import ApiException\nfrom pprint import pprint\n\n# Configure API key authorization: api-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['api-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['api-key'] = 'Bearer'\n# Configure API key authorization: partner-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['partner-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['partner-key'] = 'Bearer'\n\n# create an instance of the API class\napi_instance = brevo_python.ListsApi(brevo_python.ApiClient(configuration))\nlist_id = 789 # int | Id of the list\ncontact_emails = brevo_python.RemoveContactFromList() # RemoveContactFromList | Emails addresses OR IDs of the contacts\n\ntry:\n    # Delete a contact from a list\n    api_response = api_instance.remove_contact_from_list(list_id, contact_emails)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling ListsApi->remove_contact_from_list: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Sending Automated Messages with Brevo Python API\nDESCRIPTION: Demonstrates sending an automated message to a visitor. Used for order status updates and feature announcements. Requires API key authentication.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/ConversationsApi.md#2025-04-17_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport brevo_python\nfrom brevo_python.rest import ApiException\nfrom pprint import pprint\n\napi_instance = brevo_python.ConversationsApi(brevo_python.ApiClient(configuration))\nbody = brevo_python.Body15() # Body15 | \n\ntry:\n    # Send an automated message to a visitor\n    api_response = api_instance.conversations_pushed_messages_post(body)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling ConversationsApi->conversations_pushed_messages_post: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Updating Contact Attributes in Brevo API with Python\nDESCRIPTION: Example of how to update an existing contact attribute using the Brevo Python client. This snippet demonstrates API key configuration and making an update_attribute request with the attribute category, name, and new values.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/AttributesApi.md#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport brevo_python\nfrom brevo_python.rest import ApiException\nfrom pprint import pprint\n\n# Configure API key authorization: api-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['api-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['api-key'] = 'Bearer'\n# Configure API key authorization: partner-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['partner-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['partner-key'] = 'Bearer'\n\n# create an instance of the API class\napi_instance = brevo_python.AttributesApi(brevo_python.ApiClient(configuration))\nattribute_category = 'attribute_category_example' # str | Category of the attribute\nattribute_name = 'attribute_name_example' # str | Name of the existing attribute\nupdate_attribute = brevo_python.UpdateAttribute() # UpdateAttribute | Values to update an attribute\n\ntry:\n    # Update contact attribute\n    api_instance.update_attribute(attribute_category, attribute_name, update_attribute)\nexcept ApiException as e:\n    print(\"Exception when calling AttributesApi->update_attribute: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Message in Brevo Conversations API (Python)\nDESCRIPTION: This snippet demonstrates how to use the conversations_messages_id_get method to retrieve a specific message by its ID.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/ConversationsApi.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport brevo_python\nfrom brevo_python.rest import ApiException\nfrom pprint import pprint\n\n# Configure API key authorization: api-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['api-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['api-key'] = 'Bearer'\n# Configure API key authorization: partner-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['partner-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['partner-key'] = 'Bearer'\n\n# create an instance of the API class\napi_instance = brevo_python.ConversationsApi(brevo_python.ApiClient(configuration))\nid = 'id_example' # str | ID of the message\n\ntry:\n    # Get a message\n    api_response = api_instance.conversations_messages_id_get(id)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling ConversationsApi->conversations_messages_id_get: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Retrieving WhatsApp Campaigns with Brevo Python SDK\nDESCRIPTION: This code snippet demonstrates how to retrieve all WhatsApp campaigns created in your Brevo account. It includes optional filtering by date range, pagination controls, and sorting options. The API requires authentication via API key or partner key.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/WhatsappCampaignsApi.md#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport brevo_python\nfrom brevo_python.rest import ApiException\nfrom pprint import pprint\n\n# Configure API key authorization: api-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['api-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['api-key'] = 'Bearer'\n# Configure API key authorization: partner-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['partner-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['partner-key'] = 'Bearer'\n\n# create an instance of the API class\napi_instance = brevo_python.WhatsAppCampaignsApi(brevo_python.ApiClient(configuration))\nstart_date = 'start_date_example' # str | **Mandatory if endDate is used**. Starting (urlencoded) UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ) to filter the campaigns created. **Prefer to pass your timezone in date-time format for accurate result**  (optional)\nend_date = 'end_date_example' # str | **Mandatory if startDate is used**. Ending (urlencoded) UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ) to filter the campaigns created. **Prefer to pass your timezone in date-time format for accurate result**  (optional)\nlimit = 50 # int | Number of documents per page (optional) (default to 50)\noffset = 0 # int | Index of the first document in the page (optional) (default to 0)\nsort = 'desc' # str | Sort the results in the ascending/descending order of record modification. Default order is **descending** if `sort` is not passed (optional) (default to desc)\n\ntry:\n    # Return all your created WhatsApp campaigns\n    api_response = api_instance.get_whats_app_campaigns(start_date=start_date, end_date=end_date, limit=limit, offset=offset, sort=sort)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling WhatsAppCampaignsApi->get_whats_app_campaigns: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Authenticating a Domain in Brevo Python SDK\nDESCRIPTION: This example demonstrates how to authenticate a domain using the Brevo Python SDK. It configures API keys, creates an instance of the DomainsApi class, and makes an API call to authenticate a domain with error handling.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/DomainsApi.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport brevo_python\nfrom brevo_python.rest import ApiException\nfrom pprint import pprint\n\n# Configure API key authorization: api-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['api-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['api-key'] = 'Bearer'\n# Configure API key authorization: partner-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['partner-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['partner-key'] = 'Bearer'\n\n# create an instance of the API class\napi_instance = brevo_python.DomainsApi(brevo_python.ApiClient(configuration))\ndomain_name = 'domain_name_example' # str | Domain name\n\ntry:\n    # Authenticate a domain\n    api_response = api_instance.authenticate_domain(domain_name)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling DomainsApi->authenticate_domain: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Sending User Invitations with Feature Permissions in Brevo Python SDK\nDESCRIPTION: This code demonstrates how to send an invitation to a user with specific feature permissions using the Brevo Python SDK. It configures API key authentication, creates an instance of the UserApi class, and sends an invitation with specified permissions for various features like email campaigns, contacts, etc.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/UserApi.md#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport brevo_python\nfrom brevo_python.rest import ApiException\nfrom pprint import pprint\n\n# Configure API key authorization: api-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['api-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['api-key'] = 'Bearer'\n# Configure API key authorization: partner-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['partner-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['partner-key'] = 'Bearer'\n\n# create an instance of the API class\napi_instance = brevo_python.UserApi(brevo_python.ApiClient(configuration))\nsend_invitation = brevo_python.Inviteuser() # Inviteuser | Values to create an invitation\n\ntry:\n    # Send invitation to user\n    api_response = api_instance.inviteuser(send_invitation)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling UserApi->inviteuser: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Sending a Test Email for a Campaign in Brevo\nDESCRIPTION: Demonstrates how to send a test email for a campaign to your test list. Uses the SendTestEmail object to specify test recipients and includes proper error handling.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/EmailCampaignsApi.md#2025-04-17_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n# create an instance of the API class\napi_instance = brevo_python.EmailCampaignsApi(brevo_python.ApiClient(configuration))\ncampaign_id = 789 # int | Id of the campaign\nemail_to = brevo_python.SendTestEmail() # SendTestEmail | \n\ntry:\n    # Send an email campaign to your test list\n    api_instance.send_test_email(campaign_id, email_to)\nexcept ApiException as e:\n    print(\"Exception when calling EmailCampaignsApi->send_test_email: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Blocked or Unsubscribed Transactional Contacts with Brevo Python SDK\nDESCRIPTION: Example demonstrating how to use the get_transac_blocked_contacts method of the TransactionalEmailsApi to retrieve a list of blocked or unsubscribed contacts. This snippet shows how to configure API keys, create an API instance, and call the method with optional parameters like date range, pagination, and sorting.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/TransactionalEmailsApi.md#2025-04-17_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport brevo_python\nfrom brevo_python.rest import ApiException\nfrom pprint import pprint\n\n# Configure API key authorization: api-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['api-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['api-key'] = 'Bearer'\n# Configure API key authorization: partner-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['partner-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['partner-key'] = 'Bearer'\n\n# create an instance of the API class\napi_instance = brevo_python.TransactionalEmailsApi(brevo_python.ApiClient(configuration))\nstart_date = 'start_date_example' # str | Mandatory if endDate is used. Starting date (YYYY-MM-DD) from which you want to fetch the blocked or unsubscribed contacts (optional)\nend_date = 'end_date_example' # str | Mandatory if startDate is used. Ending date (YYYY-MM-DD) till which you want to fetch the blocked or unsubscribed contacts (optional)\nlimit = 50 # int | Number of documents returned per page (optional) (default to 50)\noffset = 0 # int | Index of the first document on the page (optional) (default to 0)\nsenders = ['senders_example'] # list[str] | Comma separated list of emails of the senders from which contacts are blocked or unsubscribed (optional)\nsort = 'desc' # str | Sort the results in the ascending/descending order of record creation. Default order is **descending** if `sort` is not passed (optional) (default to desc)\n\ntry:\n    # Get the list of blocked or unsubscribed transactional contacts\n    api_response = api_instance.get_transac_blocked_contacts(start_date=start_date, end_date=end_date, limit=limit, offset=offset, senders=senders, sort=sort)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling TransactionalEmailsApi->get_transac_blocked_contacts: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Creating a Contact Attribute in Python\nDESCRIPTION: Example of how to create a contact attribute using the Brevo Python client library. It configures the API client, creates an instance of the ContactsApi, and calls the create_attribute method.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/ContactsApi.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport brevo_python\nfrom brevo_python.rest import ApiException\nfrom pprint import pprint\n\n# Configure API key authorization: api-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['api-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['api-key'] = 'Bearer'\n# Configure API key authorization: partner-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['partner-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['partner-key'] = 'Bearer'\n\n# create an instance of the API class\napi_instance = brevo_python.ContactsApi(brevo_python.ApiClient(configuration))\nattribute_category = 'attribute_category_example' # str | Category of the attribute\nattribute_name = 'attribute_name_example' # str | Name of the attribute\ncreate_attribute = brevo_python.CreateAttribute() # CreateAttribute | Values to create an attribute\n\ntry:\n    # Create contact attribute\n    api_instance.create_attribute(attribute_category, attribute_name, create_attribute)\nexcept ApiException as e:\n    print(\"Exception when calling ContactsApi->create_attribute: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Updating a Task with Brevo Python SDK\nDESCRIPTION: This snippet shows how to update a specific task in the Brevo CRM using its ID. It requires API key authentication, accepts updated task details as a body parameter, and handles potential exceptions.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/TasksApi.md#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport brevo_python\nfrom brevo_python.rest import ApiException\nfrom pprint import pprint\n\n# Configure API key authorization: api-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['api-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['api-key'] = 'Bearer'\n# Configure API key authorization: partner-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['partner-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['partner-key'] = 'Bearer'\n\n# create an instance of the API class\napi_instance = brevo_python.TasksApi(brevo_python.ApiClient(configuration))\nid = 'id_example' # str | \nbody = brevo_python.Body12() # Body12 | Updated task details.\n\ntry:\n    # Update a task\n    api_instance.crm_tasks_id_patch(id, body)\nexcept ApiException as e:\n    print(\"Exception when calling TasksApi->crm_tasks_id_patch: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Sending a Campaign Report in Brevo\nDESCRIPTION: Shows how to send a PDF report for a specific campaign. The report will be sent to email addresses specified in the SendReport object. Includes error handling and API client initialization.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/EmailCampaignsApi.md#2025-04-17_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n# create an instance of the API class\napi_instance = brevo_python.EmailCampaignsApi(brevo_python.ApiClient(configuration))\ncampaign_id = 789 # int | Id of the campaign\nsend_report = brevo_python.SendReport() # SendReport | Values for send a report\n\ntry:\n    # Send the report of a campaign\n    api_instance.send_report(campaign_id, send_report)\nexcept ApiException as e:\n    print(\"Exception when calling EmailCampaignsApi->send_report: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Adding Contacts to List with Brevo Python SDK\nDESCRIPTION: Example showing how to add existing contacts to a list using the Brevo Python SDK. Requires API key configuration and handles errors through ApiException.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/ListsApi.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport brevo_python\nfrom brevo_python.rest import ApiException\nfrom pprint import pprint\n\n# Configure API key authorization: api-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['api-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['api-key'] = 'Bearer'\n# Configure API key authorization: partner-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['partner-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['partner-key'] = 'Bearer'\n\n# create an instance of the API class\napi_instance = brevo_python.ListsApi(brevo_python.ApiClient(configuration))\nlist_id = 789 # int | Id of the list\ncontact_emails = brevo_python.AddContactToList() # AddContactToList | Emails addresses OR IDs of the contacts\n\ntry:\n    # Add existing contacts to a list\n    api_response = api_instance.add_contact_to_list(list_id, contact_emails)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling ListsApi->add_contact_to_list: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Updating CRM Notes with Python\nDESCRIPTION: Example code showing how to update an existing note in the Brevo CRM system. Requires note ID and updated note data. Needs api-key or partner-key authentication.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/NotesApi.md#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport brevo_python\nfrom brevo_python.rest import ApiException\nfrom pprint import pprint\n\n# Configure API key authorization: api-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['api-key'] = 'YOUR_API_KEY'\n\napi_instance = brevo_python.NotesApi(brevo_python.ApiClient(configuration))\nid = 'id_example'\nbody = brevo_python.NoteData()\n\ntry:\n    api_instance.crm_notes_id_patch(id, body)\nexcept ApiException as e:\n    print(\"Exception when calling NotesApi->crm_notes_id_patch: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Removing Contact from List\nDESCRIPTION: Deletes a contact from a specified list using either email addresses or contact IDs.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/ContactsApi.md#2025-04-17_snippet_25\n\nLANGUAGE: python\nCODE:\n```\napi_instance = brevo_python.ContactsApi(brevo_python.ApiClient(configuration))\nlist_id = 789 # int | Id of the list\ncontact_emails = brevo_python.RemoveContactFromList()\n\ntry:\n    # Delete a contact from a list\n    api_response = api_instance.remove_contact_from_list(list_id, contact_emails)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling ContactsApi->remove_contact_from_list: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Creating a Folder with Brevo Python SDK\nDESCRIPTION: This snippet demonstrates how to create a new folder using the Brevo Python SDK. It initializes the API client with authentication and calls the create_folder method.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/FoldersApi.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport brevo_python\nfrom brevo_python.rest import ApiException\nfrom pprint import pprint\n\n# Configure API key authorization: api-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['api-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['api-key'] = 'Bearer'\n# Configure API key authorization: partner-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['partner-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['partner-key'] = 'Bearer'\n\n# create an instance of the API class\napi_instance = brevo_python.FoldersApi(brevo_python.ApiClient(configuration))\ncreate_folder = brevo_python.CreateUpdateFolder() # CreateUpdateFolder | Name of the folder\n\ntry:\n    # Create a folder\n    api_response = api_instance.create_folder(create_folder)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling FoldersApi->create_folder: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Updating Folder with Brevo Python SDK\nDESCRIPTION: Example of updating a folder using the Brevo ContactsApi. Requires API key authentication and accepts folder ID and CreateUpdateFolder object containing the new folder name.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/ContactsApi.md#2025-04-17_snippet_30\n\nLANGUAGE: python\nCODE:\n```\napi_instance = brevo_python.ContactsApi(brevo_python.ApiClient(configuration))\nfolder_id = 789\nupdate_folder = brevo_python.CreateUpdateFolder()\n\ntry:\n    api_instance.update_folder(folder_id, update_folder)\nexcept ApiException as e:\n    print(\"Exception when calling ContactsApi->update_folder: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Specific Company in Brevo Python SDK\nDESCRIPTION: Example code showing how to get detailed information about a specific company by its ID. This retrieves a Company object containing all company data.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/CompaniesApi.md#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport brevo_python\nfrom brevo_python.rest import ApiException\nfrom pprint import pprint\n\n# Configure API key authorization: api-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['api-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['api-key'] = 'Bearer'\n# Configure API key authorization: partner-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['partner-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['partner-key'] = 'Bearer'\n\n# create an instance of the API class\napi_instance = brevo_python.CompaniesApi(brevo_python.ApiClient(configuration))\nid = 'id_example' # str | \n\ntry:\n    # Get a company\n    api_response = api_instance.companies_id_get(id)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling CompaniesApi->companies_id_get: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Specific Task with Brevo Python SDK\nDESCRIPTION: This snippet demonstrates how to retrieve a specific task from the Brevo CRM using its ID. It requires API key authentication and handles potential exceptions.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/TasksApi.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport brevo_python\nfrom brevo_python.rest import ApiException\nfrom pprint import pprint\n\n# Configure API key authorization: api-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['api-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['api-key'] = 'Bearer'\n# Configure API key authorization: partner-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['partner-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['partner-key'] = 'Bearer'\n\n# create an instance of the API class\napi_instance = brevo_python.TasksApi(brevo_python.ApiClient(configuration))\nid = 'id_example' # str | \n\ntry:\n    # Get a task\n    api_response = api_instance.crm_tasks_id_get(id)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling TasksApi->crm_tasks_id_get: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Downloading a File with Brevo Python SDK\nDESCRIPTION: This snippet shows how to download a file using the crm_files_id_get method. It requires the file ID as a parameter and returns a downloadable link.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/FilesApi.md#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport brevo_python\nfrom brevo_python.rest import ApiException\nfrom pprint import pprint\n\n# Configure API key authorization: api-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['api-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['api-key'] = 'Bearer'\n# Configure API key authorization: partner-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['partner-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['partner-key'] = 'Bearer'\n\n# create an instance of the API class\napi_instance = brevo_python.FilesApi(brevo_python.ApiClient(configuration))\nid = 'id_example' # str | File id to download.\n\ntry:\n    # Download a file\n    api_response = api_instance.crm_files_id_get(id)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling FilesApi->crm_files_id_get: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: SendSmtpEmail Model Properties Definition - Python\nDESCRIPTION: Defines the properties of the SendSmtpEmail model including sender details, recipients, email content, attachments, headers, template configurations, and scheduling options. Each property is documented with its type, optionality, and usage guidelines.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/SendSmtpEmail.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n**sender** | [**SendSmtpEmailSender**](SendSmtpEmailSender.md) |  | [optional] \n**to** | [**list[SendSmtpEmailTo]**](SendSmtpEmailTo.md) | Mandatory if messageVersions are not passed, ignored if messageVersions are passed. List of email addresses and names (optional) of the recipients. For example, [{\\\"name\\\":\\\"Jimmy\\\", \\\"email\\\":\\\"jimmy98@example.com\\\"}, {\\\"name\\\":\\\"Joe\\\", \\\"email\\\":\\\"joe@example.com\\\"}] | [optional] \n**bcc** | [**list[SendSmtpEmailBcc]**](SendSmtpEmailBcc.md) | List of email addresses and names (optional) of the recipients in bcc | [optional] \n**cc** | [**list[SendSmtpEmailCc]**](SendSmtpEmailCc.md) | List of email addresses and names (optional) of the recipients in cc | [optional] \n**html_content** | **str** | HTML body of the message ( Mandatory if 'templateId' is not passed, ignored if 'templateId' is passed ) | [optional] \n**text_content** | **str** | Plain Text body of the message ( Ignored if 'templateId' is passed ) | [optional] \n**subject** | **str** | Subject of the message. Mandatory if 'templateId' is not passed | [optional] \n**reply_to** | [**SendSmtpEmailReplyTo**](SendSmtpEmailReplyTo.md) |  | [optional] \n**attachment** | [**list[SendSmtpEmailAttachment]**](SendSmtpEmailAttachment.md) | Pass the absolute URL or base64 content of attachments | [optional] \n**headers** | **object** | Custom headers for the email | [optional] \n**template_id** | **int** | Id of the template | [optional] \n**params** | **object** | Template customization attributes | [optional] \n**message_versions** | [**list[SendSmtpEmailMessageVersions]**](SendSmtpEmailMessageVersions.md) | Multiple versions of the email | [optional] \n**tags** | **list[str]** | Tag your emails to find them more easily | [optional] \n**scheduled_at** | **datetime** | UTC date-time for email scheduling | [optional] \n**batch_id** | **str** | Valid UUIDv4 batch id for scheduled emails | [optional]\n```\n\n----------------------------------------\n\nTITLE: Retrieving CRM Tasks with Brevo Python API\nDESCRIPTION: Example code demonstrating how to fetch all tasks with optional filtering and pagination parameters.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/CRMApi.md#2025-04-17_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport brevo_python\nfrom brevo_python.rest import ApiException\nfrom pprint import pprint\n\n# Configure API key authorization: api-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['api-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['api-key'] = 'Bearer'\n# Configure API key authorization: partner-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['partner-key'] = 'YOUR_API_KEY'\n\n# create an instance of the API class\napi_instance = brevo_python.CRMApi(brevo_python.ApiClient(configuration))\n\ntry:\n    # Get all tasks\n    api_response = api_instance.crm_tasks_get(filter_type=filter_type, filter_status=filter_status, filter_date=filter_date, filter_assign_to=filter_assign_to, filter_contacts=filter_contacts, filter_deals=filter_deals, filter_companies=filter_companies, date_from=date_from, date_to=date_to, offset=offset, limit=limit, sort=sort, sort_by=sort_by)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling CRMApi->crm_tasks_get: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Updating WhatsApp Campaign using Brevo Python SDK\nDESCRIPTION: This code snippet demonstrates how to update a WhatsApp campaign using the Brevo Python SDK. It configures API key authorization, creates an instance of the WhatsAppCampaignsApi, and calls the update_whats_app_campaign method with the campaign ID and optional update parameters.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/WhatsappCampaignsApi.md#2025-04-17_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport brevo_python\nfrom brevo_python.rest import ApiException\nfrom pprint import pprint\n\n# Configure API key authorization: api-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['api-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['api-key'] = 'Bearer'\n# Configure API key authorization: partner-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['partner-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['partner-key'] = 'Bearer'\n\n# create an instance of the API class\napi_instance = brevo_python.WhatsAppCampaignsApi(brevo_python.ApiClient(configuration))\ncampaign_id = 789 # int | Id of the campaign\nwhats_app_campaign = brevo_python.UpdateWhatsAppCampaign() # UpdateWhatsAppCampaign | values to update WhatsApp Campaign (optional)\n\ntry:\n    # Update a WhatsApp campaign\n    api_instance.update_whats_app_campaign(campaign_id, whats_app_campaign=whats_app_campaign)\nexcept ApiException as e:\n    print(\"Exception when calling WhatsAppCampaignsApi->update_whats_app_campaign: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Creating a WhatsApp Template with Python\nDESCRIPTION: This snippet shows how to create a WhatsApp template using the Brevo Python client. It sets up API authentication, creates an API instance, and calls the create_whats_app_template method.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/WhatsappCampaignsApi.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport brevo_python\nfrom brevo_python.rest import ApiException\nfrom pprint import pprint\n\n# Configure API key authorization: api-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['api-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['api-key'] = 'Bearer'\n# Configure API key authorization: partner-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['partner-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['partner-key'] = 'Bearer'\n\n# create an instance of the API class\napi_instance = brevo_python.WhatsAppCampaignsApi(brevo_python.ApiClient(configuration))\nwhats_app_templates = brevo_python.CreateWhatsAppTemplate() # CreateWhatsAppTemplate | Values to create a template\n\ntry:\n    # Create a WhatsApp template\n    api_response = api_instance.create_whats_app_template(whats_app_templates)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling WhatsAppCampaignsApi->create_whats_app_template: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Associating an IP to sub-accounts using MasterAccountApi\nDESCRIPTION: This code demonstrates how to associate an IP address to sub-accounts using the Brevo Python library. It creates an instance of the MasterAccountApi, prepares the request body, and handles potential exceptions during the API call.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/MasterAccountApi.md#2025-04-17_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n# create an instance of the API class\napi_instance = brevo_python.MasterAccountApi(brevo_python.ApiClient(configuration))\nbody = brevo_python.Body1() # Body1 | Ip address association details\n\ntry:\n    # Associate an IP to sub-accounts\n    api_response = api_instance.corporate_sub_account_ip_associate_post(body)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling MasterAccountApi->corporate_sub_account_ip_associate_post: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Child Account Details with Brevo Python SDK\nDESCRIPTION: This snippet shows how to get detailed information about a child account using the Brevo Python SDK. It configures API key authorization, creates a ResellerApi instance, and calls the get_child_info method with a child identifier parameter.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/ResellerApi.md#2025-04-17_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport brevo_python\nfrom brevo_python.rest import ApiException\nfrom pprint import pprint\n\n# Configure API key authorization: api-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['api-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['api-key'] = 'Bearer'\n# Configure API key authorization: partner-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['partner-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['partner-key'] = 'Bearer'\n\n# create an instance of the API class\napi_instance = brevo_python.ResellerApi(brevo_python.ApiClient(configuration))\nchild_identifier = 'child_identifier_example' # str | Either auth key or id of reseller's child\n\ntry:\n    # Get a child account's details\n    api_response = api_instance.get_child_info(child_identifier)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling ResellerApi->get_child_info: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Listing All Domains in Brevo Python SDK\nDESCRIPTION: This example demonstrates how to retrieve a list of all domains using the Brevo Python SDK. It configures API keys, creates an instance of the DomainsApi class, and makes an API call to fetch all domains associated with the account.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/DomainsApi.md#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport brevo_python\nfrom brevo_python.rest import ApiException\nfrom pprint import pprint\n\n# Configure API key authorization: api-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['api-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['api-key'] = 'Bearer'\n# Configure API key authorization: partner-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['partner-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['partner-key'] = 'Bearer'\n\n# create an instance of the API class\napi_instance = brevo_python.DomainsApi(brevo_python.ApiClient(configuration))\n\ntry:\n    # Get the list of all your domains\n    api_response = api_instance.get_domains()\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling DomainsApi->get_domains: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Category Information using Brevo Python SDK\nDESCRIPTION: Demonstrates how to fetch category details using the EcommerceApi from Brevo Python SDK. The example shows API key configuration, instance creation, and exception handling.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/EcommerceApi.md#2025-04-17_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport brevo_python\nfrom brevo_python.rest import ApiException\nfrom pprint import pprint\n\n# Configure API key authorization: api-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['api-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['api-key'] = 'Bearer'\n# Configure API key authorization: partner-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['partner-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['partner-key'] = 'Bearer'\n\n# create an instance of the API class\napi_instance = brevo_python.EcommerceApi(brevo_python.ApiClient(configuration))\nid = 'id_example' # str | Category ID\n\ntry:\n    # Get a category details\n    api_response = api_instance.get_category_info(id)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling EcommerceApi->get_category_info: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Deleting a Domain in Brevo Python SDK\nDESCRIPTION: This example demonstrates how to delete a domain using the Brevo Python SDK. It configures API keys, creates an instance of the DomainsApi class, and makes an API call to delete a domain with the specified name.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/DomainsApi.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport brevo_python\nfrom brevo_python.rest import ApiException\nfrom pprint import pprint\n\n# Configure API key authorization: api-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['api-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['api-key'] = 'Bearer'\n# Configure API key authorization: partner-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['partner-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['partner-key'] = 'Bearer'\n\n# create an instance of the API class\napi_instance = brevo_python.DomainsApi(brevo_python.ApiClient(configuration))\ndomain_name = 'domain_name_example' # str | Domain name\n\ntry:\n    # Delete a domain\n    api_instance.delete_domain(domain_name)\nexcept ApiException as e:\n    print(\"Exception when calling DomainsApi->delete_domain: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Getting Account IPs in Brevo Python SDK\nDESCRIPTION: Example code showing how to retrieve all dedicated IPs for an account using the Brevo Python SDK. Requires API key authentication.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/SendersApi.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport brevo_python\nfrom brevo_python.rest import ApiException\nfrom pprint import pprint\n\n# Configure API key authorization: api-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['api-key'] = 'YOUR_API_KEY'\n\n# Configure API key authorization: partner-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['partner-key'] = 'YOUR_API_KEY'\n\n# create an instance of the API class\napi_instance = brevo_python.SendersApi(brevo_python.ApiClient(configuration))\n\ntry:\n    # Get all the dedicated IPs for your account\n    api_response = api_instance.get_ips()\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling SendersApi->get_ips: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Sending Agent Messages with Brevo Python API\nDESCRIPTION: Demonstrates how to send a message as an agent using the Brevo Conversations API. Requires API key authentication and handles response/error cases.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/ConversationsApi.md#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport brevo_python\nfrom brevo_python.rest import ApiException\nfrom pprint import pprint\n\napi_instance = brevo_python.ConversationsApi(brevo_python.ApiClient(configuration))\nbody = brevo_python.Body13() # Body13 | Message fields.\n\ntry:\n    # Send a message as an agent\n    api_response = api_instance.conversations_messages_post(body)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling ConversationsApi->conversations_messages_post: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Daily Aggregated SMS Report with Brevo Python SDK\nDESCRIPTION: This snippet demonstrates how to use the get_transac_sms_report method to retrieve SMS activity aggregated per day. It includes setting up authentication and handling optional parameters for date range, tag filtering, and sorting.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/TransactionalSMSApi.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport brevo_python\nfrom brevo_python.rest import ApiException\nfrom pprint import pprint\n\n# Configure API key authorization: api-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['api-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['api-key'] = 'Bearer'\n# Configure API key authorization: partner-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['partner-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['partner-key'] = 'Bearer'\n\n# create an instance of the API class\napi_instance = brevo_python.TransactionalSMSApi(brevo_python.ApiClient(configuration))\nstart_date = 'start_date_example' # str | Mandatory if endDate is used. Starting date (YYYY-MM-DD) of the report (optional)\nend_date = 'end_date_example' # str | Mandatory if startDate is used. Ending date (YYYY-MM-DD) of the report (optional)\ndays = 789 # int | Number of days in the past including today (positive integer). Not compatible with 'startDate' and 'endDate' (optional)\ntag = 'tag_example' # str | Filter on a tag (optional)\nsort = 'desc' # str | Sort the results in the ascending/descending order of record creation. Default order is **descending** if `sort` is not passed (optional) (default to desc)\n\ntry:\n    # Get your SMS activity aggregated per day\n    api_response = api_instance.get_transac_sms_report(start_date=start_date, end_date=end_date, days=days, tag=tag, sort=sort)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling TransactionalSMSApi->get_transac_sms_report: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Retrieving E-commerce Categories with Filtering in Python\nDESCRIPTION: This code shows how to fetch all categories from the Brevo e-commerce system using the Python SDK. It supports various filtering parameters including pagination, sorting, and filtering by IDs, name, or modification time.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/EcommerceApi.md#2025-04-17_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n# create an instance of the API class\napi_instance = brevo_python.EcommerceApi(brevo_python.ApiClient(configuration))\nlimit = 50 # int | Number of documents per page (optional) (default to 50)\noffset = 0 # int | Index of the first document in the page (optional) (default to 0)\nsort = 'desc' # str | Sort the results in the ascending/descending order of record creation. Default order is **descending** if `sort` is not passed (optional) (default to desc)\nids = ['ids_example'] # list[str] | Filter by category ids (optional)\nname = 'name_example' # str | Filter by category name (optional)\nmodified_since = 'modified_since_example' # str | Filter (urlencoded) the categories modified after a given UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ). **Prefer to pass your timezone in date-time format for accurate result.**  (optional)\ncreated_since = 'created_since_example' # str | Filter (urlencoded) the categories created after a given UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ). **Prefer to pass your timezone in date-time format for accurate result.**  (optional)\n\ntry:\n    # Return all your categories\n    api_response = api_instance.get_categories(limit=limit, offset=offset, sort=sort, ids=ids, name=name, modified_since=modified_since, created_since=created_since)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling EcommerceApi->get_categories: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Aggregated SMS Report with Brevo Python SDK\nDESCRIPTION: This snippet shows how to use the get_transac_aggregated_sms_report method to retrieve SMS activity aggregated over a period of time. It includes setting up authentication and handling optional parameters for date range and tag filtering.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/TransactionalSMSApi.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport brevo_python\nfrom brevo_python.rest import ApiException\nfrom pprint import pprint\n\n# Configure API key authorization: api-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['api-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['api-key'] = 'Bearer'\n# Configure API key authorization: partner-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['partner-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['partner-key'] = 'Bearer'\n\n# create an instance of the API class\napi_instance = brevo_python.TransactionalSMSApi(brevo_python.ApiClient(configuration))\nstart_date = 'start_date_example' # str | Mandatory if endDate is used. Starting date (YYYY-MM-DD) of the report (optional)\nend_date = 'end_date_example' # str | Mandatory if startDate is used. Ending date (YYYY-MM-DD) of the report (optional)\ndays = 789 # int | Number of days in the past including today (positive integer). Not compatible with startDate and endDate (optional)\ntag = 'tag_example' # str | Filter on a tag (optional)\n\ntry:\n    # Get your SMS activity aggregated over a period of time\n    api_response = api_instance.get_transac_aggregated_sms_report(start_date=start_date, end_date=end_date, days=days, tag=tag)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling TransactionalSMSApi->get_transac_aggregated_sms_report: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Defining UpdateSmtpTemplate Properties in Markdown\nDESCRIPTION: This snippet outlines the properties of the UpdateSmtpTemplate model, including their types, descriptions, and optional status. It covers various aspects of an email template such as content, sender details, and customization options.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/UpdateSmtpTemplate.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\ntag | **str** | Tag of the template | [optional] \nsender | [**UpdateSmtpTemplateSender**](UpdateSmtpTemplateSender.md) |  | [optional] \ntemplate_name | **str** | Name of the template | [optional] \nhtml_content | **str** | Required if htmlUrl is empty. If the template is designed using Drag &amp; Drop editor via HTML content, then the design page will not have Drag &amp; Drop editor access for that template. Body of the message (HTML must have more than 10 characters) | [optional] \nhtml_url | **str** | Required if htmlContent is empty. URL to the body of the email (HTML) | [optional] \nsubject | **str** | Subject of the email | [optional] \nreply_to | **str** | Email on which campaign recipients will be able to reply to | [optional] \nto_field | **str** | To personalize the «To» Field. If you want to include the first name and last name of your recipient, add {FNAME} {LNAME}. These contact attributes must already exist in your Brevo account. If input parameter 'params' used please use {{contact.FNAME}} {{contact.LNAME}} for personalization | [optional] \nattachment_url | **str** | Absolute url of the attachment (no local file). Extension allowed: xlsx, xls, ods, docx, docm, doc, csv, pdf, txt, gif, jpg, jpeg, png, tif, tiff, rtf, bmp, cgm, css, shtml, html, htm, zip, xml, ppt, pptx, tar, ez, ics, mobi, msg, pub and eps | [optional] \nis_active | **bool** | Status of the template. isActive = false means template is inactive, isActive = true means template is active | [optional]\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Specific CRM Note with Brevo Python SDK\nDESCRIPTION: This snippet demonstrates how to retrieve a specific CRM note by its ID using the Brevo Python SDK. It shows the setup of the API client with authentication and making a GET request to fetch the details of a single note.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/CRMApi.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport brevo_python\nfrom brevo_python.rest import ApiException\nfrom pprint import pprint\n\n# Configure API key authorization: api-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['api-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['api-key'] = 'Bearer'\n# Configure API key authorization: partner-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['partner-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['partner-key'] = 'Bearer'\n\n# create an instance of the API class\napi_instance = brevo_python.CRMApi(brevo_python.ApiClient(configuration))\nid = 'id_example' # str | Note ID to get\n\ntry:\n    # Get a note\n    api_response = api_instance.crm_notes_id_get(id)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling CRMApi->crm_notes_id_get: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Folders using Brevo Python SDK\nDESCRIPTION: This snippet demonstrates how to use the Brevo Python SDK to retrieve all folders. It initializes the API client, sets up parameters for pagination and sorting, and makes an API call to get the folders. The response is then printed, and any exceptions are handled.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/FoldersApi.md#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# create an instance of the API class\napi_instance = brevo_python.FoldersApi(brevo_python.ApiClient(configuration))\nlimit = 10 # int | Number of documents per page (default to 10)\noffset = 0 # int | Index of the first document of the page (default to 0)\nsort = 'desc' # str | Sort the results in the ascending/descending order of record creation. Default order is **descending** if `sort` is not passed (optional) (default to desc)\n\ntry:\n    # Get all folders\n    api_response = api_instance.get_folders(limit, offset, sort=sort)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling FoldersApi->get_folders: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Pipelines from Brevo CRM (Python)\nDESCRIPTION: This snippet demonstrates how to retrieve details of all pipelines in Brevo's CRM system using the Python client library. It returns a Pipelines object containing the pipeline information.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/DealsApi.md#2025-04-17_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport brevo_python\nfrom brevo_python.rest import ApiException\nfrom pprint import pprint\n\n# Configure API key authorization: api-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['api-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['api-key'] = 'Bearer'\n# Configure API key authorization: partner-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['partner-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n\ntry:\n    # Get all pipelines\n    api_response = api_instance.crm_pipeline_details_all_get()\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling DealsApi->crm_pipeline_details_all_get: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Deleting an External Feed in Python using brevo-python\nDESCRIPTION: This snippet shows how to delete an external feed using the brevo-python library. It sets up API key authorization, creates an ExternalFeedsApi instance, and calls the delete_external_feed method with the feed's UUID.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/ExternalFeedsApi.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport brevo_python\nfrom brevo_python.rest import ApiException\nfrom pprint import pprint\n\n# Configure API key authorization: api-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['api-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['api-key'] = 'Bearer'\n# Configure API key authorization: partner-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['partner-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['partner-key'] = 'Bearer'\n\n# create an instance of the API class\napi_instance = brevo_python.ExternalFeedsApi(brevo_python.ApiClient(configuration))\nuuid = 'uuid_example' # str | UUID of the feed to delete\n\ntry:\n    # Delete an external feed\n    api_instance.delete_external_feed(uuid)\nexcept ApiException as e:\n    print(\"Exception when calling ExternalFeedsApi->delete_external_feed: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Fetching Order Details using Brevo Python SDK\nDESCRIPTION: Shows how to retrieve order information with optional filtering parameters such as limit, offset, sort, and date-based filters. The example includes API key configuration and proper error handling.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/EcommerceApi.md#2025-04-17_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport brevo_python\nfrom brevo_python.rest import ApiException\nfrom pprint import pprint\n\n# Configure API key authorization: api-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['api-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['api-key'] = 'Bearer'\n# Configure API key authorization: partner-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['partner-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['partner-key'] = 'Bearer'\n\n# create an instance of the API class\napi_instance = brevo_python.EcommerceApi(brevo_python.ApiClient(configuration))\nlimit = 50 # int | Number of documents per page (optional) (default to 50)\noffset = 0 # int | Index of the first document in the page (optional) (default to 0)\nsort = 'desc' # str | Sort the results in the ascending/descending order of record creation. Default order is **descending** if `sort` is not passed (optional) (default to desc)\nmodified_since = 'modified_since_example' # str | Filter (urlencoded) the orders modified after a given UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ). **Prefer to pass your timezone in date-time format for accurate result.**  (optional)\ncreated_since = 'created_since_example' # str | Filter (urlencoded) the orders created after a given UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ). **Prefer to pass your timezone in date-time format for accurate result.**  (optional)\n\ntry:\n    # Get order details\n    api_response = api_instance.get_orders(limit=limit, offset=offset, sort=sort, modified_since=modified_since, created_since=created_since)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling EcommerceApi->get_orders: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Listing All Processes with Brevo Python SDK\nDESCRIPTION: Example code showing how to retrieve all processes for an account using the Brevo Python SDK. Includes optional pagination parameters (limit, offset) and sorting options. Returns a GetProcesses object containing the list of processes.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/ProcessApi.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport brevo_python\nfrom brevo_python.rest import ApiException\nfrom pprint import pprint\n\n# Configure API key authorization: api-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['api-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['api-key'] = 'Bearer'\n# Configure API key authorization: partner-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['partner-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['partner-key'] = 'Bearer'\n\n# create an instance of the API class\napi_instance = brevo_python.ProcessApi(brevo_python.ApiClient(configuration))\nlimit = 10 # int | Number limitation for the result returned (optional) (default to 10)\noffset = 0 # int | Beginning point in the list to retrieve from. (optional) (default to 0)\nsort = 'desc' # str | Sort the results in the ascending/descending order of record creation. Default order is **descending** if `sort` is not passed (optional) (default to desc)\n\ntry:\n    # Return all the processes for your account\n    api_response = api_instance.get_processes(limit=limit, offset=offset, sort=sort)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling ProcessApi->get_processes: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Retrieving List Details with Brevo Python SDK\nDESCRIPTION: This code demonstrates how to get detailed information about a specific list using the Brevo Python SDK. It configures API authentication, creates a ContactsApi instance, and calls the get_list method with a list ID parameter, along with optional date range parameters for aggregating campaign data.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/ContactsApi.md#2025-04-17_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport brevo_python\nfrom brevo_python.rest import ApiException\nfrom pprint import pprint\n\n# Configure API key authorization: api-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['api-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['api-key'] = 'Bearer'\n# Configure API key authorization: partner-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['partner-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['partner-key'] = 'Bearer'\n\n# create an instance of the API class\napi_instance = brevo_python.ContactsApi(brevo_python.ApiClient(configuration))\nlist_id = 789 # int | Id of the list\nstart_date = 'start_date_example' # str | Mandatory if endDate is used. Ending (urlencoded) UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ) to aggregate the sent email campaigns for a specific list id.Prefer to pass your timezone in date-time format for accurate result (optional)\nend_date = 'end_date_example' # str | Mandatory if startDate is used. Ending (urlencoded) UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ) to aggregate the sent email campaigns for a specific list id.Prefer to pass your timezone in date-time format for accurate result (optional)\n\ntry:\n    # Get a list's details\n    api_response = api_instance.get_list(list_id, start_date=start_date, end_date=end_date)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling ContactsApi->get_list: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Generating SSO token for sub-account access using MasterAccountApi\nDESCRIPTION: This code demonstrates how to generate an SSO token to authenticate and access a sub-account using the Brevo Python library. The token can be used with the account endpoint for sub-account login.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/MasterAccountApi.md#2025-04-17_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport brevo_python\nfrom brevo_python.rest import ApiException\nfrom pprint import pprint\n\n# Configure API key authorization: api-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['api-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['api-key'] = 'Bearer'\n# Configure API key authorization: partner-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['partner-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['partner-key'] = 'Bearer'\n\n# create an instance of the API class\napi_instance = brevo_python.MasterAccountApi(brevo_python.ApiClient(configuration))\nsso_token_request = brevo_python.SsoTokenRequest() # SsoTokenRequest | Values to generate SSO token for sub-account\n\ntry:\n    # Generate SSO token to access sub-account\n    api_response = api_instance.corporate_sub_account_sso_token_post(sso_token_request)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling MasterAccountApi->corporate_sub_account_sso_token_post: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Specific Pipeline in Brevo CRM with Python\nDESCRIPTION: Example code for retrieving a specific CRM pipeline by ID using the Brevo Python SDK. This snippet shows API key configuration, DealsApi initialization, and making the API call with a pipeline ID parameter.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/DealsApi.md#2025-04-17_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport brevo_python\nfrom brevo_python.rest import ApiException\nfrom pprint import pprint\n\n# Configure API key authorization: api-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['api-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['api-key'] = 'Bearer'\n# Configure API key authorization: partner-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['partner-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['partner-key'] = 'Bearer'\n\n# create an instance of the API class\napi_instance = brevo_python.DealsApi(brevo_python.ApiClient(configuration))\npipeline_id = 'pipeline_id_example' # str | \n\ntry:\n    # Get a pipeline\n    api_response = api_instance.crm_pipeline_details_pipeline_id_get(pipeline_id)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling DealsApi->crm_pipeline_details_pipeline_id_get: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Getting All Task Types with Brevo Python SDK\nDESCRIPTION: Example code for retrieving all task types using the Brevo Python SDK. It demonstrates how to configure API key authorization, create an instance of the TasksApi, and make a request to get all task types with appropriate error handling.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/TasksApi.md#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport brevo_python\nfrom brevo_python.rest import ApiException\nfrom pprint import pprint\n\n# Configure API key authorization: api-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['api-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['api-key'] = 'Bearer'\n# Configure API key authorization: partner-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['partner-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['partner-key'] = 'Bearer'\n\n# create an instance of the API class\napi_instance = brevo_python.TasksApi(brevo_python.ApiClient(configuration))\n\ntry:\n    # Get all task types\n    api_response = api_instance.crm_tasktypes_get()\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling TasksApi->crm_tasktypes_get: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Deleting a WhatsApp Campaign with Python\nDESCRIPTION: This snippet demonstrates how to delete a WhatsApp campaign using the Brevo Python client. It configures API authentication, creates an API instance, and calls the delete_whats_app_campaign method with a campaign ID.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/WhatsappCampaignsApi.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport brevo_python\nfrom brevo_python.rest import ApiException\nfrom pprint import pprint\n\n# Configure API key authorization: api-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['api-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['api-key'] = 'Bearer'\n# Configure API key authorization: partner-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['partner-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['partner-key'] = 'Bearer'\n\n# create an instance of the API class\napi_instance = brevo_python.WhatsAppCampaignsApi(brevo_python.ApiClient(configuration))\ncampaign_id = 789 # int | id of the campaign\n\ntry:\n    # Delete a WhatsApp campaign\n    api_instance.delete_whats_app_campaign(campaign_id)\nexcept ApiException as e:\n    print(\"Exception when calling WhatsAppCampaignsApi->delete_whats_app_campaign: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Listing SMS Campaigns - Python SDK Example\nDESCRIPTION: Example code demonstrating how to retrieve a list of all SMS campaigns with optional filtering by status and date range. Supports pagination and sorting.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/SMSCampaignsApi.md#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport brevo_python\nfrom brevo_python.rest import ApiException\nfrom pprint import pprint\n\n# Configure API key authorization: api-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['api-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['api-key'] = 'Bearer'\n# Configure API key authorization: partner-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['partner-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['partner-key'] = 'Bearer'\n\n# create an instance of the API class\napi_instance = brevo_python.SMSCampaignsApi(brevo_python.ApiClient(configuration))\nstatus = 'status_example' # str | Status of campaign. (optional)\nstart_date = 'start_date_example' # str | Mandatory if endDate is used. Starting (urlencoded) UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ) to filter the sent sms campaigns. Prefer to pass your timezone in date-time format for accurate result ( only available if either 'status' not passed and if passed is set to 'sent' ) (optional)\nend_date = 'end_date_example' # str | Mandatory if startDate is used. Ending (urlencoded) UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ) to filter the sent sms campaigns. Prefer to pass your timezone in date-time format for accurate result ( only available if either 'status' not passed and if passed is set to 'sent' ) (optional)\nlimit = 500 # int | Number limitation for the result returned (optional) (default to 500)\noffset = 0 # int | Beginning point in the list to retrieve from. (optional) (default to 0)\nsort = 'desc' # str | Sort the results in the ascending/descending order of record creation. Default order is **descending** if `sort` is not passed (optional) (default to desc)\n\ntry:\n    # Returns the information for all your created SMS campaigns\n    api_response = api_instance.get_sms_campaigns(status=status, start_date=start_date, end_date=end_date, limit=limit, offset=offset, sort=sort)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling SMSCampaignsApi->get_sms_campaigns: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Fetching Scheduled Email by Message ID with Brevo Python SDK\nDESCRIPTION: Example code demonstrating how to use the get_scheduled_email_by_message_id method to retrieve a specific scheduled email using its message ID. This method allows filtering by date range to retrieve data up to 30 days old.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/TransactionalEmailsApi.md#2025-04-17_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport brevo_python\nfrom brevo_python.rest import ApiException\nfrom pprint import pprint\n\n# Configure API key authorization: api-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['api-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['api-key'] = 'Bearer'\n# Configure API key authorization: partner-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['partner-key'] = 'YOUR_API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Updating a CRM Task using Brevo Python API\nDESCRIPTION: This snippet demonstrates how to update an existing task in the Brevo CRM using the Python API. It requires the task ID and updated task details as input.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/CRMApi.md#2025-04-17_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n# create an instance of the API class\napi_instance = brevo_python.CRMApi(brevo_python.ApiClient(configuration))\nid = 'id_example' # str | \nbody = brevo_python.Body1() # Body1 | Updated task details.\n\ntry:\n    # Update a task\n    api_instance.crm_tasks_id_patch(id, body)\nexcept ApiException as e:\n    print(\"Exception when calling CRMApi->crm_tasks_id_patch: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Creating CRM Notes with Python\nDESCRIPTION: Example code demonstrating how to create a new note in the Brevo CRM system. Requires note data in the request body. Needs api-key or partner-key authentication.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/NotesApi.md#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport brevo_python\nfrom brevo_python.rest import ApiException\nfrom pprint import pprint\n\n# Configure API key authorization: api-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['api-key'] = 'YOUR_API_KEY'\n\napi_instance = brevo_python.NotesApi(brevo_python.ApiClient(configuration))\n```\n\n----------------------------------------\n\nTITLE: Creating/Updating a Category in Brevo eCommerce API (Python)\nDESCRIPTION: This snippet demonstrates how to create or update a category using the Brevo eCommerce API. It configures API key authorization, initializes the API client, and makes a request to create/update a category with the provided data.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/EcommerceApi.md#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport brevo_python\nfrom brevo_python.rest import ApiException\nfrom pprint import pprint\n\n# Configure API key authorization: api-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['api-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['api-key'] = 'Bearer'\n# Configure API key authorization: partner-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['partner-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['partner-key'] = 'Bearer'\n\n# create an instance of the API class\napi_instance = brevo_python.EcommerceApi(brevo_python.ApiClient(configuration))\ncreate_update_category = brevo_python.CreateUpdateCategory() # CreateUpdateCategory | Values to create/update a category\n\ntry:\n    # Create/Update a category\n    api_response = api_instance.create_update_category(create_update_category)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling EcommerceApi->create_update_category: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Configuring Brevo Python API Client for Authentication\nDESCRIPTION: Shows how to configure the Brevo Python API client with API key authentication. This setup is required before making any API calls to the Brevo platform.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/TransactionalEmailsApi.md#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['api-key'] = 'Bearer'\n# Configure API key authorization: partner-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['partner-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['partner-key'] = 'Bearer'\n```\n\n----------------------------------------\n\nTITLE: Checking Admin User Permissions with Brevo Python\nDESCRIPTION: This snippet demonstrates how to check the permissions of an admin user using the MasterAccountApi. It shows how to make the API call and handle potential exceptions.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/MasterAccountApi.md#2025-04-17_snippet_21\n\nLANGUAGE: python\nCODE:\n```\n# create an instance of the API class\napi_instance = brevo_python.MasterAccountApi(brevo_python.ApiClient(configuration))\nemail = 'email_example' # str | Email of the invited user\n\ntry:\n    # Check admin user permissions\n    api_response = api_instance.get_corporate_user_permission(email)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling MasterAccountApi->get_corporate_user_permission: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Segments with Brevo Python SDK\nDESCRIPTION: This code demonstrates how to fetch all segments using the Brevo Python SDK. It sets up API authentication, initializes the ContactsApi client, and calls the get_segments method with required and optional parameters for pagination and sorting.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/ContactsApi.md#2025-04-17_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport brevo_python\nfrom brevo_python.rest import ApiException\nfrom pprint import pprint\n\n\n```\n\n----------------------------------------\n\nTITLE: Creating New Sender in Brevo Python SDK\nDESCRIPTION: Example code showing how to create a new sender using the Brevo Python SDK. Requires API key authorization and handles sender creation with optional parameters.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/SendersApi.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport brevo_python\nfrom brevo_python.rest import ApiException\nfrom pprint import pprint\n\n# Configure API key authorization: api-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['api-key'] = 'YOUR_API_KEY'\n\n# Configure API key authorization: partner-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['partner-key'] = 'YOUR_API_KEY'\n\n# create an instance of the API class\napi_instance = brevo_python.SendersApi(brevo_python.ApiClient(configuration))\nsender = brevo_python.CreateSender() # CreateSender | sender's name (optional)\n\ntry:\n    # Create a new sender\n    api_response = api_instance.create_sender(sender=sender)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling SendersApi->create_sender: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Getting Payment Request Details with Brevo Python SDK\nDESCRIPTION: Example of retrieving payment request details using the Brevo Python SDK. Requires API key configuration and retrieves payment request information through the PaymentsApi class using a payment request ID.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/PaymentsApi.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport brevo_python\nfrom brevo_python.rest import ApiException\nfrom pprint import pprint\n\n# Configure API key authorization: api-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['api-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['api-key'] = 'Bearer'\n# Configure API key authorization: partner-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['partner-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['partner-key'] = 'Bearer'\n\n# create an instance of the API class\napi_instance = brevo_python.PaymentsApi(brevo_python.ApiClient(configuration))\nid = 'id_example' # str | Id of the payment Request\n\ntry:\n    # Get payment request details\n    api_response = api_instance.get_payment_request(id)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling PaymentsApi->get_payment_request: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Updating an Agent's Message in Brevo Conversations API (Python)\nDESCRIPTION: This snippet shows how to use the conversations_messages_id_put method to update a message sent by an agent. Only agents' messages can be edited.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/ConversationsApi.md#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport brevo_python\nfrom brevo_python.rest import ApiException\nfrom pprint import pprint\n\n# Configure API key authorization: api-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['api-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['api-key'] = 'Bearer'\n# Configure API key authorization: partner-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['partner-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['partner-key'] = 'Bearer'\n\n# create an instance of the API class\napi_instance = brevo_python.ConversationsApi(brevo_python.ApiClient(configuration))\nid = 'id_example' # str | ID of the message\nbody = brevo_python.Body14() # Body14 |  (optional)\n\ntry:\n    # Update a message sent by an agent\n    api_response = api_instance.conversations_messages_id_put(id, body=body)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling ConversationsApi->conversations_messages_id_put: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Updating Automated Messages with Brevo Python API\nDESCRIPTION: Shows how to update an existing automated message using its ID. Requires API key authentication and handles response/error cases.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/ConversationsApi.md#2025-04-17_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport brevo_python\nfrom brevo_python.rest import ApiException\nfrom pprint import pprint\n\napi_instance = brevo_python.ConversationsApi(brevo_python.ApiClient(configuration))\nid = 'id_example' # str | ID of the message\nbody = brevo_python.Body16() # Body16 | \n\ntry:\n    # Update an automated message\n    api_response = api_instance.conversations_pushed_messages_id_put(id, body)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling ConversationsApi->conversations_pushed_messages_id_put: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Updating a Coupon Collection by ID with Brevo Python SDK\nDESCRIPTION: This snippet demonstrates how to update an existing coupon collection by its ID using the Brevo Python SDK. It configures API key authorization and sends a PATCH request to modify the collection details.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/CouponsApi.md#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport brevo_python\nfrom brevo_python.rest import ApiException\nfrom pprint import pprint\n\n# Configure API key authorization: api-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['api-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['api-key'] = 'Bearer'\n# Configure API key authorization: partner-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['partner-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['partner-key'] = 'Bearer'\n```\n\n----------------------------------------\n\nTITLE: Fetching Scheduled Emails by Batch ID with Brevo Python SDK\nDESCRIPTION: Example code demonstrating how to use the get_scheduled_email_by_batch_id method to retrieve scheduled emails using a batch ID. This method supports filtering by date range and email status, with options for sorting and pagination.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/TransactionalEmailsApi.md#2025-04-17_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport brevo_python\nfrom brevo_python.rest import ApiException\nfrom pprint import pprint\n\n# Configure API key authorization: api-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['api-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['api-key'] = 'Bearer'\n# Configure API key authorization: partner-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['partner-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['partner-key'] = 'Bearer'\n\n# create an instance of the API class\napi_instance = brevo_python.TransactionalEmailsApi(brevo_python.ApiClient(configuration))\nbatch_id = 'batch_id_example' # str | The batchId of scheduled emails batch (Should be a valid UUIDv4)\nstart_date = '2013-10-20' # date | Mandatory if `endDate` is used. Starting date (YYYY-MM-DD) from which you want to fetch the list. Can be maximum 30 days older tha current date. (optional)\nend_date = '2013-10-20' # date | Mandatory if `startDate` is used. Ending date (YYYY-MM-DD) till which you want to fetch the list. Maximum time period that can be selected is one month. (optional)\nsort = 'desc' # str | Sort the results in the ascending/descending order of record creation. Default order is **descending** if `sort` is not passed (optional) (default to desc)\nstatus = 'status_example' # str | Filter the records by `status` of the scheduled email batch or message. (optional)\nlimit = 100 # int | Number of documents returned per page (optional) (default to 100)\noffset = 0 # int | Index of the first document on the page (optional) (default to 0)\n\ntry:\n    # Fetch scheduled emails by batchId\n    api_response = api_instance.get_scheduled_email_by_batch_id(batch_id, start_date=start_date, end_date=end_date, sort=sort, status=status, limit=limit, offset=offset)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling TransactionalEmailsApi->get_scheduled_email_by_batch_id: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Getting Category Details by ID in Python\nDESCRIPTION: This code snippet shows how to get the details of a specific e-commerce category using its ID with the Brevo Python SDK. It makes a simple API call with the category ID and handles the response.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/EcommerceApi.md#2025-04-17_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nget_category_info(id)\n```\n\n----------------------------------------\n\nTITLE: Updating a List in Brevo Python SDK\nDESCRIPTION: Shows how to update a list's properties by providing its ID and the values to be updated. This endpoint allows modifications to list attributes such as name, folder, or other properties.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/ListsApi.md#2025-04-17_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport brevo_python\nfrom brevo_python.rest import ApiException\nfrom pprint import pprint\n\n# Configure API key authorization: api-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['api-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['api-key'] = 'Bearer'\n# Configure API key authorization: partner-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['partner-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['partner-key'] = 'Bearer'\n\n# create an instance of the API class\napi_instance = brevo_python.ListsApi(brevo_python.ApiClient(configuration))\nlist_id = 789 # int | Id of the list\nupdate_list = brevo_python.UpdateList() # UpdateList | Values to update a list\n\ntry:\n    # Update a list\n    api_instance.update_list(list_id, update_list)\nexcept ApiException as e:\n    print(\"Exception when calling ListsApi->update_list: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Lists in a Folder using Brevo Python SDK\nDESCRIPTION: This code snippet demonstrates how to fetch lists within a specific folder using the Brevo Python SDK. It configures API authentication using either an API key or partner key, creates a ContactsApi instance, and calls the get_folder_lists method with parameters for pagination and sorting.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/ContactsApi.md#2025-04-17_snippet_17\n\nLANGUAGE: python\nCODE:\n```\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['api-key'] = 'Bearer'\n# Configure API key authorization: partner-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['partner-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['partner-key'] = 'Bearer'\n\n# create an instance of the API class\napi_instance = brevo_python.ContactsApi(brevo_python.ApiClient(configuration))\nfolder_id = 789 # int | Id of the folder\nlimit = 10 # int | Number of documents per page (optional) (default to 10)\noffset = 0 # int | Index of the first document of the page (optional) (default to 0)\nsort = 'desc' # str | Sort the results in the ascending/descending order of record creation. Default order is **descending** if `sort` is not passed (optional) (default to desc)\n\ntry:\n    # Get lists in a folder\n    api_response = api_instance.get_folder_lists(folder_id, limit=limit, offset=offset, sort=sort)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling ContactsApi->get_folder_lists: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Deleting an Agent's Message in Brevo Conversations API (Python)\nDESCRIPTION: This snippet shows how to use the conversations_messages_id_delete method to delete a message sent by an agent. Note that only agents' messages can be deleted.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/ConversationsApi.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport brevo_python\nfrom brevo_python.rest import ApiException\nfrom pprint import pprint\n\n# Configure API key authorization: api-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['api-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['api-key'] = 'Bearer'\n# Configure API key authorization: partner-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['partner-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['partner-key'] = 'Bearer'\n\n# create an instance of the API class\napi_instance = brevo_python.ConversationsApi(brevo_python.ApiClient(configuration))\nid = 'id_example' # str | ID of the message\n\ntry:\n    # Delete a message sent by an agent\n    api_instance.conversations_messages_id_delete(id)\nexcept ApiException as e:\n    print(\"Exception when calling ConversationsApi->conversations_messages_id_delete: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Aggregated Email Reports in Brevo\nDESCRIPTION: Example for retrieving aggregated transactional email activity reports over a specified time period. The API allows filtering by date range (up to 90 days) and optionally by email tag.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/TransactionalEmailsApi.md#2025-04-17_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport brevo_python\nfrom brevo_python.rest import ApiException\nfrom pprint import pprint\n\n# Configure API key authorization: api-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['api-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['api-key'] = 'Bearer'\n# Configure API key authorization: partner-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['partner-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['partner-key'] = 'Bearer'\n\n# create an instance of the API class\napi_instance = brevo_python.TransactionalEmailsApi(brevo_python.ApiClient(configuration))\nstart_date = 'start_date_example' # str | Mandatory if endDate is used. Starting date of the report (YYYY-MM-DD). Must be lower than equal to endDate (optional)\nend_date = 'end_date_example' # str | Mandatory if startDate is used. Ending date of the report (YYYY-MM-DD). Must be greater than equal to startDate (optional)\ndays = 789 # int | Number of days in the past including today (positive integer). Not compatible with 'startDate' and 'endDate' (optional)\ntag = 'tag_example' # str | Tag of the emails (optional)\n\ntry:\n    # Get your transactional email activity aggregated over a period of time\n    api_response = api_instance.get_aggregated_smtp_report(start_date=start_date, end_date=end_date, days=days, tag=tag)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling TransactionalEmailsApi->get_aggregated_smtp_report: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Deleting a Folder with Brevo Python SDK\nDESCRIPTION: This snippet shows how to delete a folder and all its lists using the Brevo Python SDK. It requires the folder ID as a parameter.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/FoldersApi.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport brevo_python\nfrom brevo_python.rest import ApiException\nfrom pprint import pprint\n\n# Configure API key authorization: api-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['api-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['api-key'] = 'Bearer'\n# Configure API key authorization: partner-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['partner-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['partner-key'] = 'Bearer'\n\n# create an instance of the API class\napi_instance = brevo_python.FoldersApi(brevo_python.ApiClient(configuration))\nfolder_id = 789 # int | Id of the folder\n\ntry:\n    # Delete a folder (and all its lists)\n    api_instance.delete_folder(folder_id)\nexcept ApiException as e:\n    print(\"Exception when calling FoldersApi->delete_folder: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Uploading a File with Brevo Python SDK\nDESCRIPTION: This snippet demonstrates how to upload a file using the crm_files_post method. It allows associating the file with a deal, contact, or company by providing their respective IDs.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/FilesApi.md#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport brevo_python\nfrom brevo_python.rest import ApiException\nfrom pprint import pprint\n\n# Configure API key authorization: api-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['api-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['api-key'] = 'Bearer'\n# Configure API key authorization: partner-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['partner-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['partner-key'] = 'Bearer'\n\n# create an instance of the API class\napi_instance = brevo_python.FilesApi(brevo_python.ApiClient(configuration))\nfile = '/path/to/file.txt' # file | File to upload\ndeal_id = 789 # int | Deal id to associate (optional)\ncontact_id = 789 # int | Contact id to associate (optional)\ncompany_id = 789 # int | Company id to associate (optional)\n\ntry:\n    # Upload a file\n    api_response = api_instance.crm_files_post(file, deal_id=deal_id, contact_id=contact_id, company_id=company_id)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling FilesApi->crm_files_post: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Deleting SMTP Transactional Logs in Python using Brevo API\nDESCRIPTION: Example demonstrating how to delete SMTP transactional logs using MessageId or Email identifier. The code shows API configuration and error handling.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/TransactionalEmailsApi.md#2025-04-17_snippet_23\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport brevo_python\nfrom brevo_python.rest import ApiException\nfrom pprint import pprint\n\n# Configure API key authorization: api-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['api-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['api-key'] = 'Bearer'\n# Configure API key authorization: partner-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['partner-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['partner-key'] = 'Bearer'\n\n# create an instance of the API class\napi_instance = brevo_python.TransactionalEmailsApi(brevo_python.ApiClient(configuration))\nidentifier = 'identifier_example' # str | MessageId or Email of the transactional log(s) to delete\n\ntry:\n    # Delete an SMTP transactional log\n    api_instance.smtp_log_identifier_delete(identifier)\nexcept ApiException as e:\n    print(\"Exception when calling TransactionalEmailsApi->smtp_log_identifier_delete: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Getting Display Currency Code for Brevo Account in Python\nDESCRIPTION: This code demonstrates how to retrieve the ISO 4217 compliant display currency code for a Brevo account using the Python SDK. It makes a simple API call without any parameters and handles the response.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/EcommerceApi.md#2025-04-17_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n# create an instance of the API class\napi_instance = brevo_python.EcommerceApi(brevo_python.ApiClient(configuration))\n\ntry:\n    # Get the ISO 4217 compliant display currency code for your Brevo account\n    api_response = api_instance.ecommerce_config_display_currency_get()\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling EcommerceApi->ecommerce_config_display_currency_get: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Update sub-account plan using Brevo Python SDK\nDESCRIPTION: Example code for updating a sub-account plan. This requires API key authorization and uses the corporate_sub_account_id_plan_put method from the MasterAccountApi class. Supports setting unlimited credits with value \"-1\".\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/MasterAccountApi.md#2025-04-17_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport brevo_python\nfrom brevo_python.rest import ApiException\nfrom pprint import pprint\n\n# Configure API key authorization: api-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['api-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['api-key'] = 'Bearer'\n# Configure API key authorization: partner-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['partner-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['partner-key'] = 'Bearer'\n\n# create an instance of the API class\napi_instance = brevo_python.MasterAccountApi(brevo_python.ApiClient(configuration))\nid = 789 # int | Id of the sub-account organization\nupdate_plan_details = brevo_python.SubAccountUpdatePlanRequest() # SubAccountUpdatePlanRequest | Values to update a sub-account plan\n\ntry:\n    # Update sub-account plan\n    api_instance.corporate_sub_account_id_plan_put(id, update_plan_details)\nexcept ApiException as e:\n    print(\"Exception when calling MasterAccountApi->corporate_sub_account_id_plan_put: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Webhook Details with Brevo Python API\nDESCRIPTION: This snippet demonstrates how to retrieve details of a specific webhook using the Brevo Python API. It shows the setup of API key authorization and making a GET request to fetch webhook information by its ID.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/WebhooksApi.md#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport brevo_python\nfrom brevo_python.rest import ApiException\nfrom pprint import pprint\n\n# Configure API key authorization: api-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['api-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['api-key'] = 'Bearer'\n# Configure API key authorization: partner-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['partner-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['partner-key'] = 'Bearer'\n\n# create an instance of the API class\napi_instance = brevo_python.WebhooksApi(brevo_python.ApiClient(configuration))\nwebhook_id = 789 # int | Id of the webhook\n\ntry:\n    # Get a webhook details\n    api_response = api_instance.get_webhook(webhook_id)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling WebhooksApi->get_webhook: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Retrieving WhatsApp Templates with Brevo Python SDK\nDESCRIPTION: This code example shows how to fetch all created WhatsApp templates from your Brevo account. It supports filtering by date range, pagination parameters, and sorting options. The API requires authentication with either an API key or partner key.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/WhatsappCampaignsApi.md#2025-04-17_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport brevo_python\nfrom brevo_python.rest import ApiException\nfrom pprint import pprint\n\n# Configure API key authorization: api-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['api-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['api-key'] = 'Bearer'\n# Configure API key authorization: partner-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['partner-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['partner-key'] = 'Bearer'\n\n# create an instance of the API class\napi_instance = brevo_python.WhatsAppCampaignsApi(brevo_python.ApiClient(configuration))\nstart_date = 'start_date_example' # str | **Mandatory if endDate is used**. Starting (urlencoded) UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ) to filter the templates created. **Prefer to pass your timezone in date-time format for accurate result**  (optional)\nend_date = 'end_date_example' # str | **Mandatory if startDate is used**. Ending (urlencoded) UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ) to filter the templates created. **Prefer to pass your timezone in date-time format for accurate result**  (optional)\nlimit = 50 # int | Number of documents per page (optional) (default to 50)\noffset = 0 # int | Index of the first document in the page (optional) (default to 0)\nsort = 'desc' # str | Sort the results in the ascending/descending order of record modification. Default order is **descending** if `sort` is not passed (optional) (default to desc)\nsource = 'source_example' # str | source of the template (optional)\n\ntry:\n    # Return all your created WhatsApp templates\n    api_response = api_instance.get_whats_app_templates(start_date=start_date, end_date=end_date, limit=limit, offset=offset, sort=sort, source=source)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling WhatsAppCampaignsApi->get_whats_app_templates: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Updating a Company in Brevo Python SDK\nDESCRIPTION: Example code demonstrating how to update a company's information by its ID. This PATCH operation allows partial updates to company data.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/CompaniesApi.md#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport brevo_python\nfrom brevo_python.rest import ApiException\nfrom pprint import pprint\n\n# Configure API key authorization: api-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['api-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['api-key'] = 'Bearer'\n```\n\n----------------------------------------\n\nTITLE: Retrieving Single Process Information with Brevo Python SDK\nDESCRIPTION: Example code demonstrating how to retrieve information for a specific process using the Brevo Python SDK. Requires API key authentication and handles the process ID as a parameter. Returns detailed process information in GetProcess format.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/ProcessApi.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport brevo_python\nfrom brevo_python.rest import ApiException\nfrom pprint import pprint\n\n# Configure API key authorization: api-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['api-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['api-key'] = 'Bearer'\n# Configure API key authorization: partner-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['partner-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['partner-key'] = 'Bearer'\n\n# create an instance of the API class\napi_instance = brevo_python.ProcessApi(brevo_python.ApiClient(configuration))\nprocess_id = 789 # int | Id of the process\n\ntry:\n    # Return the informations for a process\n    api_response = api_instance.get_process(process_id)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling ProcessApi->get_process: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Coupon Collections with Brevo Python SDK\nDESCRIPTION: This snippet shows how to retrieve all coupon collections using the Brevo Python SDK. It sets up API key authorization and sends a GET request with optional parameters for pagination and sorting.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/CouponsApi.md#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport brevo_python\nfrom brevo_python.rest import ApiException\nfrom pprint import pprint\n\n# Configure API key authorization: api-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['api-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['api-key'] = 'Bearer'\n# Configure API key authorization: partner-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['partner-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['partner-key'] = 'Bearer'\n\n# create an instance of the API class\napi_instance = brevo_python.CouponsApi(brevo_python.ApiClient(configuration))\nlimit = 50 # int | Number of documents returned per page (optional) (default to 50)\noffset = 0 # int | Index of the first document on the page (optional) (default to 0)\nsort = 'desc' # str | Sort the results by creation time in ascending/descending order (optional) (default to desc)\nsort_by = 'createdAt' # str | The field used to sort coupon collections (optional) (default to createdAt)\n\ntry:\n    # Get all your coupon collections\n    api_response = api_instance.get_coupon_collections(limit=limit, offset=offset, sort=sort, sort_by=sort_by)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling CouponsApi->get_coupon_collections: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Transactional Email Activity Report with Brevo Python SDK\nDESCRIPTION: Example code demonstrating how to use the get_email_event_report method to retrieve transactional email activity reports. This method supports filtering by date range, email, event type, tags, message ID, and template ID.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/TransactionalEmailsApi.md#2025-04-17_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport brevo_python\nfrom brevo_python.rest import ApiException\nfrom pprint import pprint\n\n# Configure API key authorization: api-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['api-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['api-key'] = 'Bearer'\n# Configure API key authorization: partner-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['partner-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['partner-key'] = 'Bearer'\n\n# create an instance of the API class\napi_instance = brevo_python.TransactionalEmailsApi(brevo_python.ApiClient(configuration))\nlimit = 2500 # int | Number limitation for the result returned (optional) (default to 2500)\noffset = 0 # int | Beginning point in the list to retrieve from. (optional) (default to 0)\nstart_date = 'start_date_example' # str | Mandatory if endDate is used. Starting date of the report (YYYY-MM-DD). Must be lower than equal to endDate (optional)\nend_date = 'end_date_example' # str | Mandatory if startDate is used. Ending date of the report (YYYY-MM-DD). Must be greater than equal to startDate (optional)\ndays = 789 # int | Number of days in the past including today (positive integer). Not compatible with 'startDate' and 'endDate' (optional)\nemail = 'email_example' # str | Filter the report for a specific email addresses (optional)\nevent = 'event_example' # str | Filter the report for a specific event type (optional)\ntags = 'tags_example' # str | Filter the report for tags (serialized and urlencoded array) (optional)\nmessage_id = 'message_id_example' # str | Filter on a specific message id (optional)\ntemplate_id = 789 # int | Filter on a specific template id (optional)\nsort = 'desc' # str | Sort the results in the ascending/descending order of record creation. Default order is **descending** if `sort` is not passed (optional) (default to desc)\n\ntry:\n    # Get all your transactional email activity (unaggregated events)\n    api_response = api_instance.get_email_event_report(limit=limit, offset=offset, start_date=start_date, end_date=end_date, days=days, email=email, event=event, tags=tags, message_id=message_id, template_id=template_id, sort=sort)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling TransactionalEmailsApi->get_email_event_report: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Child Account Domains in Python\nDESCRIPTION: This snippet demonstrates how to get all sender domains for a specific child account using the get_child_domains method of the ResellerApi. It requires the child identifier as a parameter.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/ResellerApi.md#2025-04-17_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n# This code is not provided in the original snippet, but inferred from the function description:\n\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['api-key'] = 'YOUR_API_KEY'\nconfiguration.api_key['partner-key'] = 'YOUR_API_KEY'\n\napi_instance = brevo_python.ResellerApi(brevo_python.ApiClient(configuration))\nchild_identifier = 'child_identifier_example'\n\ntry:\n    api_response = api_instance.get_child_domains(child_identifier)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling ResellerApi->get_child_domains: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Creating a Reseller Child Account in Python\nDESCRIPTION: This snippet demonstrates how to create a new reseller child account using the Brevo Python SDK. It configures the API client, creates an instance of the ResellerApi, and calls the create_reseller_child method.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/ResellerApi.md#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['partner-key'] = 'YOUR_API_KEY'\n\napi_instance = brevo_python.ResellerApi(brevo_python.ApiClient(configuration))\nreseller_child = brevo_python.CreateChild()\n\ntry:\n    api_response = api_instance.create_reseller_child(reseller_child=reseller_child)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling ResellerApi->create_reseller_child: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Exporting SMS Campaign Recipients with Brevo Python SDK\nDESCRIPTION: This code demonstrates how to export an SMS campaign's recipients using the Brevo Python SDK. The method returns a background process ID which calls a notify URL upon completion.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/SMSCampaignsApi.md#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport brevo_python\nfrom brevo_python.rest import ApiException\nfrom pprint import pprint\n\n# Configure API key authorization: api-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['api-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['api-key'] = 'Bearer'\n# Configure API key authorization: partner-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['partner-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['partner-key'] = 'Bearer'\n\n# create an instance of the API class\napi_instance = brevo_python.SMSCampaignsApi(brevo_python.ApiClient(configuration))\ncampaign_id = 789 # int | id of the campaign\nrecipient_export = brevo_python.RequestSmsRecipientExport() # RequestSmsRecipientExport | Values to send for a recipient export request (optional)\n\ntry:\n    # Export an SMS campaign's recipients\n    api_response = api_instance.request_sms_recipient_export(campaign_id, recipient_export=recipient_export)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling SMSCampaignsApi->request_sms_recipient_export: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Lists in a Folder with Brevo Python SDK\nDESCRIPTION: This snippet shows how to get lists within a specific folder using the Brevo Python SDK. It requires the folder ID and supports optional parameters for pagination and sorting.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/FoldersApi.md#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport brevo_python\nfrom brevo_python.rest import ApiException\nfrom pprint import pprint\n\n# Configure API key authorization: api-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['api-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['api-key'] = 'Bearer'\n# Configure API key authorization: partner-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['partner-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['partner-key'] = 'Bearer'\n\n# create an instance of the API class\napi_instance = brevo_python.FoldersApi(brevo_python.ApiClient(configuration))\nfolder_id = 789 # int | Id of the folder\nlimit = 10 # int | Number of documents per page (optional) (default to 10)\noffset = 0 # int | Index of the first document of the page (optional) (default to 0)\nsort = 'desc' # str | Sort the results in the ascending/descending order of record creation. Default order is **descending** if `sort` is not passed (optional) (default to desc)\n\ntry:\n    # Get lists in a folder\n    api_response = api_instance.get_folder_lists(folder_id, limit=limit, offset=offset, sort=sort)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling FoldersApi->get_folder_lists: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Creating Payment Request with Brevo Python SDK\nDESCRIPTION: Example of creating a payment request using the Brevo Python SDK. Requires API key configuration and handles the creation of a payment request through the PaymentsApi class.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/PaymentsApi.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport brevo_python\nfrom brevo_python.rest import ApiException\nfrom pprint import pprint\n\n# Configure API key authorization: api-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['api-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['api-key'] = 'Bearer'\n# Configure API key authorization: partner-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['partner-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['partner-key'] = 'Bearer'\n\n# create an instance of the API class\napi_instance = brevo_python.PaymentsApi(brevo_python.ApiClient(configuration))\ncreate_payment_rquest = brevo_python.CreatePaymentRequest() # CreatePaymentRequest | Create a payment request \n\ntry:\n    # Create a payment request\n    api_response = api_instance.create_payment_request(create_payment_rquest)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling PaymentsApi->create_payment_request: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Get sub-account details using Brevo Python SDK\nDESCRIPTION: Example code for retrieving details for a specific sub-account. This requires API key authorization and uses the corporate_sub_account_id_get method from the MasterAccountApi class.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/MasterAccountApi.md#2025-04-17_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport brevo_python\nfrom brevo_python.rest import ApiException\nfrom pprint import pprint\n\n# Configure API key authorization: api-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['api-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['api-key'] = 'Bearer'\n# Configure API key authorization: partner-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['partner-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['partner-key'] = 'Bearer'\n\n# create an instance of the API class\napi_instance = brevo_python.MasterAccountApi(brevo_python.ApiClient(configuration))\nid = 789 # int | Id of the sub-account organization\n\ntry:\n    # Get sub-account details\n    api_response = api_instance.corporate_sub_account_id_get(id)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling MasterAccountApi->corporate_sub_account_id_get: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Enable/disable sub-account application(s) using Brevo Python SDK\nDESCRIPTION: Example code for enabling or disabling applications on a sub-account. This requires API key authorization and uses the corporate_sub_account_id_applications_toggle_put method from the MasterAccountApi class.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/MasterAccountApi.md#2025-04-17_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport brevo_python\nfrom brevo_python.rest import ApiException\nfrom pprint import pprint\n\n# Configure API key authorization: api-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['api-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['api-key'] = 'Bearer'\n# Configure API key authorization: partner-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['partner-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['partner-key'] = 'Bearer'\n\n# create an instance of the API class\napi_instance = brevo_python.MasterAccountApi(brevo_python.ApiClient(configuration))\nid = 789 # int | Id of the sub-account organization (mandatory)\ntoggle_applications = brevo_python.SubAccountAppsToggleRequest() # SubAccountAppsToggleRequest | List of applications to activate or deactivate on a sub-account\n\ntry:\n    # Enable/disable sub-account application(s)\n    api_instance.corporate_sub_account_id_applications_toggle_put(id, toggle_applications)\nexcept ApiException as e:\n    print(\"Exception when calling MasterAccountApi->corporate_sub_account_id_applications_toggle_put: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Creating Child Domain in Python\nDESCRIPTION: This snippet demonstrates how to create a domain for a child account using the Brevo Python SDK. It initializes the API client, sets up authentication, and sends a POST request to create the domain.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/ResellerApi.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport brevo_python\nfrom brevo_python.rest import ApiException\nfrom pprint import pprint\n\n# Configure API key authorization: api-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['api-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['api-key'] = 'Bearer'\n# Configure API key authorization: partner-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['partner-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['partner-key'] = 'Bearer'\n\n# create an instance of the API class\napi_instance = brevo_python.ResellerApi(brevo_python.ApiClient(configuration))\nchild_identifier = 'child_identifier_example' # str | Either auth key or id of reseller's child\nadd_child_domain = brevo_python.AddChildDomain() # AddChildDomain | Sender domain to add for a specific child account. This will not be displayed to the parent account.\n\ntry:\n    # Create a domain for a child account\n    api_instance.create_child_domain(child_identifier, add_child_domain)\nexcept ApiException as e:\n    print(\"Exception when calling ResellerApi->create_child_domain: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Exporting Webhook History with Brevo Python API\nDESCRIPTION: This snippet illustrates how to export webhook history using the Brevo Python API. It shows the process of setting up API key authorization and making a POST request to initiate the export of webhook events.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/WebhooksApi.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport brevo_python\nfrom brevo_python.rest import ApiException\nfrom pprint import pprint\n\n# Configure API key authorization: api-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['api-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['api-key'] = 'Bearer'\n# Configure API key authorization: partner-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['partner-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['partner-key'] = 'Bearer'\n\n# create an instance of the API class\napi_instance = brevo_python.WebhooksApi(brevo_python.ApiClient(configuration))\nexport_webhook_history = brevo_python.ExportWebhooksHistory() # ExportWebhooksHistory | Values to submit for webhooks history\n\ntry:\n    # Export all webhook events\n    api_response = api_instance.export_webhooks_history(export_webhook_history)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling WebhooksApi->export_webhooks_history: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Deleting a Webhook with Brevo Python API\nDESCRIPTION: This snippet shows how to delete a webhook using the Brevo Python API. It demonstrates setting up API key authorization and making a DELETE request to remove a webhook by its ID.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/WebhooksApi.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport brevo_python\nfrom brevo_python.rest import ApiException\nfrom pprint import pprint\n\n# Configure API key authorization: api-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['api-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['api-key'] = 'Bearer'\n# Configure API key authorization: partner-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['partner-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['partner-key'] = 'Bearer'\n\n# create an instance of the API class\napi_instance = brevo_python.WebhooksApi(brevo_python.ApiClient(configuration))\nwebhook_id = 789 # int | Id of the webhook\n\ntry:\n    # Delete a webhook\n    api_instance.delete_webhook(webhook_id)\nexcept ApiException as e:\n    print(\"Exception when calling WebhooksApi->delete_webhook: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Delete a sub-account using Brevo Python SDK\nDESCRIPTION: Example code for deleting a sub-account. This requires API key authorization and uses the corporate_sub_account_id_delete method from the MasterAccountApi class.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/MasterAccountApi.md#2025-04-17_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport brevo_python\nfrom brevo_python.rest import ApiException\nfrom pprint import pprint\n\n# Configure API key authorization: api-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['api-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['api-key'] = 'Bearer'\n# Configure API key authorization: partner-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['partner-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['partner-key'] = 'Bearer'\n\n# create an instance of the API class\napi_instance = brevo_python.MasterAccountApi(brevo_python.ApiClient(configuration))\nid = 789 # int | Id of the sub-account organization to be deleted\n\ntry:\n    # Delete a sub-account\n    api_instance.corporate_sub_account_id_delete(id)\nexcept ApiException as e:\n    print(\"Exception when calling MasterAccountApi->corporate_sub_account_id_delete: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Getting Blocked Domains List in Brevo\nDESCRIPTION: Shows how to retrieve the list of blocked domains from the Brevo API. This is useful for understanding which email domains might be causing delivery issues.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/TransactionalEmailsApi.md#2025-04-17_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport brevo_python\nfrom brevo_python.rest import ApiException\nfrom pprint import pprint\n\n# Configure API key authorization: api-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['api-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['api-key'] = 'Bearer'\n# Configure API key authorization: partner-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['partner-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['partner-key'] = 'Bearer'\n\n# create an instance of the API class\napi_instance = brevo_python.TransactionalEmailsApi(brevo_python.ApiClient(configuration))\n\ntry:\n    # Get the list of blocked domains\n    api_response = api_instance.get_blocked_domains()\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling TransactionalEmailsApi->get_blocked_domains: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Deleting an Email Campaign with Brevo Python SDK\nDESCRIPTION: Example code showing how to delete an email campaign using the Brevo Python SDK. The snippet demonstrates API client setup and deletion by campaign ID.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/EmailCampaignsApi.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport brevo_python\nfrom brevo_python.rest import ApiException\nfrom pprint import pprint\n\n# Configure API key authorization: api-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['api-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['api-key'] = 'Bearer'\n# Configure API key authorization: partner-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['partner-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['partner-key'] = 'Bearer'\n\n# create an instance of the API class\napi_instance = brevo_python.EmailCampaignsApi(brevo_python.ApiClient(configuration))\ncampaign_id = 789 # int | id of the campaign\n\ntry:\n    # Delete an email campaign\n    api_instance.delete_email_campaign(campaign_id)\nexcept ApiException as e:\n    print(\"Exception when calling EmailCampaignsApi->delete_email_campaign: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Retrieving CRM Notes with Python\nDESCRIPTION: Example code demonstrating how to retrieve all notes from the Brevo CRM system using the NotesApi. Supports filtering by entity type, date range and pagination. Requires api-key or partner-key authentication.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/NotesApi.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport brevo_python\nfrom brevo_python.rest import ApiException\nfrom pprint import pprint\n\n# Configure API key authorization: api-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['api-key'] = 'YOUR_API_KEY'\n\napi_instance = brevo_python.NotesApi(brevo_python.ApiClient(configuration))\nentity = 'entity_example'\nentity_ids = 'entity_ids_example'\ndate_from = 56\ndate_to = 56\noffset = 789\nlimit = 50\nsort = 'sort_example'\n\ntry:\n    api_response = api_instance.crm_notes_get(entity=entity, entity_ids=entity_ids, date_from=date_from, date_to=date_to, offset=offset, limit=limit, sort=sort)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling NotesApi->crm_notes_get: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Folders with Brevo Python SDK\nDESCRIPTION: This snippet demonstrates how to retrieve all folders using the Brevo Python SDK. It supports pagination and sorting options.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/FoldersApi.md#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport brevo_python\nfrom brevo_python.rest import ApiException\nfrom pprint import pprint\n\n# Configure API key authorization: api-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['api-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['api-key'] = 'Bearer'\n# Configure API key authorization: partner-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['partner-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['partner-key'] = 'Bearer'\n```\n\n----------------------------------------\n\nTITLE: Inviting Admin User in Python\nDESCRIPTION: This code snippet shows how to send an invitation to an admin user using the Brevo Python API client. It includes API key configuration, payload creation, and error handling.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/MasterAccountApi.md#2025-04-17_snippet_23\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport brevo_python\nfrom brevo_python.rest import ApiException\nfrom pprint import pprint\n\n# Configure API key authorization: api-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['api-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['api-key'] = 'Bearer'\n# Configure API key authorization: partner-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['partner-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['partner-key'] = 'Bearer'\n\n# create an instance of the API class\napi_instance = brevo_python.MasterAccountApi(brevo_python.ApiClient(configuration))\nsend_invitation = brevo_python.InviteAdminUser() # InviteAdminUser | Payload to send an invitation\n\ntry:\n    # Send invitation to an admin user\n    api_response = api_instance.invite_admin_user(send_invitation)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling MasterAccountApi->invite_admin_user: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Delete Corporate Group - Python API Example\nDESCRIPTION: Example code showing how to delete a corporate group using the Brevo Python API client. Requires API key authentication and handles the group ID as a parameter.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/MasterAccountApi.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport brevo_python\nfrom brevo_python.rest import ApiException\nfrom pprint import pprint\n\n# Configure API key authorization: api-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['api-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['api-key'] = 'Bearer'\n# Configure API key authorization: partner-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['partner-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['partner-key'] = 'Bearer'\n\n# create an instance of the API class\napi_instance = brevo_python.MasterAccountApi(brevo_python.ApiClient(configuration))\nid = 'id_example' # str | Id of the group\n\ntry:\n    # Delete a group\n    api_instance.corporate_group_id_delete(id)\nexcept ApiException as e:\n    print(\"Exception when calling MasterAccountApi->corporate_group_id_delete: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Blocking New Domain with Brevo Python API\nDESCRIPTION: Example of how to block a new domain to prevent sending messages. Requires API key or partner key authentication and accepts a BlockDomain object as input.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/TransactionalEmailsApi.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport brevo_python\nfrom brevo_python.rest import ApiException\nfrom pprint import pprint\n\n# Configure API key authorization: api-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['api-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['api-key'] = 'Bearer'\n# Configure API key authorization: partner-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['partner-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['partner-key'] = 'Bearer'\n\n# create an instance of the API class\napi_instance = brevo_python.TransactionalEmailsApi(brevo_python.ApiClient(configuration))\nblock_domain = brevo_python.BlockDomain() # BlockDomain \n\ntry:\n    # Add a new domain to the list of blocked domains\n    api_instance.block_new_domain(block_domain)\nexcept ApiException as e:\n    print(\"Exception when calling TransactionalEmailsApi->block_new_domain: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Uploading an Image to Gallery in Brevo\nDESCRIPTION: Shows how to upload an image to your account's image gallery using the Brevo API. Returns an UploadImageModel object containing information about the uploaded image.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/EmailCampaignsApi.md#2025-04-17_snippet_14\n\nLANGUAGE: python\nCODE:\n```\n# Configure API key authorization: api-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['api-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['api-key'] = 'Bearer'\n```\n\n----------------------------------------\n\nTITLE: Deleting Sender in Brevo Python SDK\nDESCRIPTION: Example code demonstrating sender deletion functionality using the Brevo Python SDK. Takes a sender ID as parameter and requires API key authentication.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/SendersApi.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport brevo_python\nfrom brevo_python.rest import ApiException\nfrom pprint import pprint\n\n# Configure API key authorization: api-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['api-key'] = 'YOUR_API_KEY'\n\n# Configure API key authorization: partner-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['partner-key'] = 'YOUR_API_KEY'\n\n# create an instance of the API class\napi_instance = brevo_python.SendersApi(brevo_python.ApiClient(configuration))\nsender_id = 789 # int | Id of the sender\n\ntry:\n    # Delete a sender\n    api_instance.delete_sender(sender_id)\nexcept ApiException as e:\n    print(\"Exception when calling SendersApi->delete_sender: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Get Corporate Group Details - Python API Example\nDESCRIPTION: Example code demonstrating how to retrieve details of a specific corporate group using the Brevo Python API client. Returns group information including sub-organizations and associated users.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/MasterAccountApi.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport brevo_python\nfrom brevo_python.rest import ApiException\nfrom pprint import pprint\n\n# Configure API key authorization: api-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['api-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['api-key'] = 'Bearer'\n# Configure API key authorization: partner-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['partner-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['partner-key'] = 'Bearer'\n\n# create an instance of the API class\napi_instance = brevo_python.MasterAccountApi(brevo_python.ApiClient(configuration))\nid = 'id_example' # str | Id of the group of sub-organization\n\ntry:\n    # GET a group details\n    api_response = api_instance.corporate_group_id_get(id)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling MasterAccountApi->corporate_group_id_get: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Submitting WhatsApp Template for Approval with Brevo Python SDK\nDESCRIPTION: This code snippet demonstrates how to submit a WhatsApp template for approval using the Brevo Python SDK. It requires the template ID as a parameter and authentication with either an API key or partner key.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/WhatsappCampaignsApi.md#2025-04-17_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport brevo_python\nfrom brevo_python.rest import ApiException\nfrom pprint import pprint\n\n# Configure API key authorization: api-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['api-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['api-key'] = 'Bearer'\n# Configure API key authorization: partner-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['partner-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['partner-key'] = 'Bearer'\n\n# create an instance of the API class\napi_instance = brevo_python.WhatsAppCampaignsApi(brevo_python.ApiClient(configuration))\ntemplate_id = 789 # int | id of the campaign\n\ntry:\n    # Send your WhatsApp template for approval\n    api_instance.send_whats_app_template_approval(template_id)\nexcept ApiException as e:\n    print(\"Exception when calling WhatsAppCampaignsApi->send_whats_app_template_approval: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Email Events by UUID with Python\nDESCRIPTION: Example code showing how to fetch the event history for a specific received email using its UUID. Requires API key or partner key authentication and returns detailed event information for the specified email.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/InboundParsingApi.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport brevo_python\nfrom brevo_python.rest import ApiException\nfrom pprint import pprint\n\n# Configure API key authorization: api-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['api-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['api-key'] = 'Bearer'\n# Configure API key authorization: partner-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['partner-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['partner-key'] = 'Bearer'\n\n# create an instance of the API class\napi_instance = brevo_python.InboundParsingApi(brevo_python.ApiClient(configuration))\nuuid = 'uuid_example' # str | UUID to fetch events specific to recieved email\n\ntry:\n    # Fetch all events history for one particular received email.\n    api_response = api_instance.get_inbound_email_events_by_uuid(uuid)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling InboundParsingApi->get_inbound_email_events_by_uuid: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Folder Details with Brevo Python SDK\nDESCRIPTION: This snippet demonstrates how to retrieve details of a specific folder using the Brevo Python SDK. It requires the folder ID as a parameter.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/FoldersApi.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport brevo_python\nfrom brevo_python.rest import ApiException\nfrom pprint import pprint\n\n# Configure API key authorization: api-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['api-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['api-key'] = 'Bearer'\n# Configure API key authorization: partner-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['partner-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['partner-key'] = 'Bearer'\n\n# create an instance of the API class\napi_instance = brevo_python.FoldersApi(brevo_python.ApiClient(configuration))\nfolder_id = 789 # int | id of the folder\n\ntry:\n    # Returns a folder's details\n    api_response = api_instance.get_folder(folder_id)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling FoldersApi->get_folder: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Detailed Attribution Metrics for Brevo Campaign (Python)\nDESCRIPTION: This snippet shows how to retrieve detailed attribution metrics for a single Brevo campaign using the API. It sets up API key authorization, initializes the API client, and sends a request to get the metrics for a specific campaign type and ID.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/EcommerceApi.md#2025-04-17_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport brevo_python\nfrom brevo_python.rest import ApiException\nfrom pprint import pprint\n\n# Configure API key authorization: api-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['api-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['api-key'] = 'Bearer'\n# Configure API key authorization: partner-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['partner-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['partner-key'] = 'Bearer'\n\n# create an instance of the API class\napi_instance = brevo_python.EcommerceApi(brevo_python.ApiClient(configuration))\nconversion_source = 'conversion_source_example' # str | The Brevo campaign type for which data will be retrieved\nconversion_source_id = 8.14 # float | The Brevo campaign id for which data will be retrieved\n\ntry:\n    # Get detailed attribution metrics for a single Brevo campaign\n    api_response = api_instance.ecommerce_attribution_metrics_conversion_source_conversion_source_id_get(conversion_source, conversion_source_id)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling EcommerceApi->ecommerce_attribution_metrics_conversion_source_conversion_source_id_get: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Getting Lists in a Folder Using Brevo Python API Client\nDESCRIPTION: This snippet shows how to retrieve lists within a specific folder using the Brevo Python API client. It includes optional parameters for pagination and sorting.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/ContactsApi.md#2025-04-17_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport brevo_python\nfrom brevo_python.rest import ApiException\nfrom pprint import pprint\n\n# Configure API key authorization: api-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['api-key'] = 'YOUR_API_KEY'\n```\n\n----------------------------------------\n\nTITLE: Deleting a Deal with Brevo Python SDK\nDESCRIPTION: Example of how to delete a deal by ID using the Brevo Python SDK. Demonstrates making a DELETE request to the /crm/deals/{id} endpoint.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/DealsApi.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport brevo_python\nfrom brevo_python.rest import ApiException\nfrom pprint import pprint\n\n# Configure API key authorization: api-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['api-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['api-key'] = 'Bearer'\n# Configure API key authorization: partner-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['partner-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['partner-key'] = 'Bearer'\n\n# create an instance of the API class\napi_instance = brevo_python.DealsApi(brevo_python.ApiClient(configuration))\nid = 'id_example' # str | \n\ntry:\n    # Delete a deal\n    api_instance.crm_deals_id_delete(id)\nexcept ApiException as e:\n    print(\"Exception when calling DealsApi->crm_deals_id_delete: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Checking User Permissions in Brevo API using Python\nDESCRIPTION: This snippet demonstrates how to check permissions for a specific user using their email address. It initializes the API client with authentication and makes a GET request to retrieve the user's permissions.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/UserApi.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport brevo_python\nfrom brevo_python.rest import ApiException\nfrom pprint import pprint\n\n# Configure API key authorization: api-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['api-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['api-key'] = 'Bearer'\n# Configure API key authorization: partner-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['partner-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['partner-key'] = 'Bearer'\n\n# create an instance of the API class\napi_instance = brevo_python.UserApi(brevo_python.ApiClient(configuration))\nemail = 'email_example' # str | Email of the invited user.\n\ntry:\n    # Check user permission\n    api_response = api_instance.get_user_permission(email)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling UserApi->get_user_permission: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Associate an IP to sub-accounts using Brevo Python SDK\nDESCRIPTION: Example code for associating an IP address to sub-accounts. This requires API key authorization and uses the corporate_sub_account_ip_associate_post method from the MasterAccountApi class.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/MasterAccountApi.md#2025-04-17_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport brevo_python\nfrom brevo_python.rest import ApiException\nfrom pprint import pprint\n\n# Configure API key authorization: api-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['api-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['api-key'] = 'Bearer'\n# Configure API key authorization: partner-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['partner-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['partner-key'] = 'Bearer'\n```\n\n----------------------------------------\n\nTITLE: Deleting Payment Request with Brevo Python SDK\nDESCRIPTION: Example of deleting a payment request using the Brevo Python SDK. Requires API key configuration and handles the deletion of a payment request through the PaymentsApi class using a payment request ID.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/PaymentsApi.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport brevo_python\nfrom brevo_python.rest import ApiException\nfrom pprint import pprint\n\n# Configure API key authorization: api-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['api-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['api-key'] = 'Bearer'\n# Configure API key authorization: partner-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['partner-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['partner-key'] = 'Bearer'\n\n# create an instance of the API class\napi_instance = brevo_python.PaymentsApi(brevo_python.ApiClient(configuration))\nid = 'id_example' # str | ID of the payment request.\n\ntry:\n    # Delete a payment request.\n    api_instance.delete_payment_request(id)\nexcept ApiException as e:\n    print(\"Exception when calling PaymentsApi->delete_payment_request: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Product Properties Table in Markdown\nDESCRIPTION: Markdown table defining the data model properties for products including field names, types, descriptions and validation notes. Covers core product attributes like ID, name, URLs, price, categories and metadata.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/CreateUpdateProducts.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**id** | **str** | Product ID for which you requested the details | \n**name** | **str** | Mandatory in case of creation**. Name of the product for which you requested the details | \n**url** | **str** | URL to the product | [optional] \n**image_url** | **str** | Absolute URL to the cover image of the product | [optional] \n**sku** | **str** | Product identifier from the shop | [optional] \n**price** | **float** | Price of the product | [optional] \n**categories** | **list[str]** | Category ID-s of the product | [optional] \n**parent_id** | **str** | Parent product id of the product | [optional] \n**meta_info** | **dict(str, str)** | Meta data of product such as description, vendor, producer, stock level. The size of cumulative metaInfo shall not exceed **1000 KB**. Maximum length of metaInfo object can be 10. | [optional] \n**deleted_at** | **str** | UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ) of the product deleted from the shop\\u0027s database | [optional] \n**is_deleted** | **bool** | product deleted from the shop\\u0027s database | [optional]\n```\n\n----------------------------------------\n\nTITLE: Retrieving Pipeline Stages in Brevo CRM with Python (Deprecated)\nDESCRIPTION: Example code for retrieving CRM pipeline stages using the Brevo Python SDK. This endpoint is marked as deprecated in favor of the endpoint with pipeline ID. Shows API key configuration, DealsApi initialization, and API call execution.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/DealsApi.md#2025-04-17_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport brevo_python\nfrom brevo_python.rest import ApiException\nfrom pprint import pprint\n\n# Configure API key authorization: api-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['api-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['api-key'] = 'Bearer'\n# Configure API key authorization: partner-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['partner-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['partner-key'] = 'Bearer'\n\n# create an instance of the API class\napi_instance = brevo_python.DealsApi(brevo_python.ApiClient(configuration))\n\ntry:\n    # Get pipeline stages\n    api_response = api_instance.crm_pipeline_details_get()\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling DealsApi->crm_pipeline_details_get: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Deleting a File with Brevo Python SDK\nDESCRIPTION: This snippet demonstrates how to delete a file using the crm_files_id_delete method. It requires the file ID as a parameter.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/FilesApi.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport brevo_python\nfrom brevo_python.rest import ApiException\nfrom pprint import pprint\n\n# Configure API key authorization: api-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['api-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['api-key'] = 'Bearer'\n# Configure API key authorization: partner-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['partner-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['partner-key'] = 'Bearer'\n\n# create an instance of the API class\napi_instance = brevo_python.FilesApi(brevo_python.ApiClient(configuration))\nid = 'id_example' # str | File id to delete.\n\ntry:\n    # Delete a file\n    api_instance.crm_files_id_delete(id)\nexcept ApiException as e:\n    print(\"Exception when calling FilesApi->crm_files_id_delete: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Generating SSO Token for Child Account with Brevo Python SDK\nDESCRIPTION: This snippet shows how to generate a session token for accessing Brevo using SSO for a child account. It configures the API key authorization, creates a ResellerApi instance, and calls get_sso_token with a child identifier to enable white-label access.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/ResellerApi.md#2025-04-17_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport brevo_python\nfrom brevo_python.rest import ApiException\nfrom pprint import pprint\n\n# Configure API key authorization: api-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['api-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['api-key'] = 'Bearer'\n# Configure API key authorization: partner-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['partner-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['partner-key'] = 'Bearer'\n\n# create an instance of the API class\napi_instance = brevo_python.ResellerApi(brevo_python.ApiClient(configuration))\nchild_identifier = 'child_identifier_example' # str | Either auth key or id of reseller's child\n\ntry:\n    # Get session token to access Brevo (SSO)\n    api_response = api_instance.get_sso_token(child_identifier)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling ResellerApi->get_sso_token: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Deleting Hardbounces with Brevo API\nDESCRIPTION: Example code for deleting hardbounces using the Brevo TransactionalEmailsApi. This operation helps clean up email delivery reports by removing records of permanently failed email deliveries.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/TransactionalEmailsApi.md#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# create an instance of the API class\napi_instance = brevo_python.TransactionalEmailsApi(brevo_python.ApiClient(configuration))\ndelete_hardbounces = brevo_python.DeleteHardbounces() # DeleteHardbounces | values to delete hardbounces (optional)\n\ntry:\n    # Delete hardbounces\n    api_instance.delete_hardbounces(delete_hardbounces=delete_hardbounces)\nexcept ApiException as e:\n    print(\"Exception when calling TransactionalEmailsApi->delete_hardbounces: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Deleting Automated Messages with Brevo Python API\nDESCRIPTION: Shows how to delete an automated message using its ID. Requires API key authentication and handles exceptions.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/ConversationsApi.md#2025-04-17_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport brevo_python\nfrom brevo_python.rest import ApiException\nfrom pprint import pprint\n\napi_instance = brevo_python.ConversationsApi(brevo_python.ApiClient(configuration))\nid = 'id_example' # str | ID of the message\n\ntry:\n    # Delete an automated message\n    api_instance.conversations_pushed_messages_id_delete(id)\nexcept ApiException as e:\n    print(\"Exception when calling ConversationsApi->conversations_pushed_messages_id_delete: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: OrderBatch Model Properties Definition in Markdown\nDESCRIPTION: Defines the properties of the OrderBatch model including orders array, notify URL, and historical flag. The orders property contains a list of Order objects, notify_url is an optional string for batch status updates, and historical is a boolean flag to control workflow automation triggers.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/OrderBatch.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**orders** | [**list[Order]**](Order.md) | array of order objects | \n**notify_url** | **str** | Notify Url provided by client to get the status of batch request | [optional] \n**historical** | **bool** | Defines wether you want your orders to be considered as live data or as historical data (import of past data, synchronising data). True: orders will not trigger any automation workflows. False: orders will trigger workflows as usual. | [optional] [default to True]\n```\n\n----------------------------------------\n\nTITLE: Retrieving Invited Users List from Brevo API using Python\nDESCRIPTION: This snippet shows how to retrieve a list of all invited users using the Brevo API. It sets up the API client with authentication and makes a GET request to fetch the list of invited users.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/UserApi.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport brevo_python\nfrom brevo_python.rest import ApiException\nfrom pprint import pprint\n\n# Configure API key authorization: api-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['api-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['api-key'] = 'Bearer'\n# Configure API key authorization: partner-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['partner-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['partner-key'] = 'Bearer'\n\n# create an instance of the API class\napi_instance = brevo_python.UserApi(brevo_python.ApiClient(configuration))\n\ntry:\n    # Get the list of all your users\n    api_response = api_instance.get_invited_users_list()\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling UserApi->get_invited_users_list: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Validating a Sender by OTP using Brevo Python API\nDESCRIPTION: This snippet shows how to validate a sender using OTP with the Brevo Python API. It includes API key authorization setup, creating an API instance, and calling the validate_sender_by_otp method with error handling.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/SendersApi.md#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport brevo_python\nfrom brevo_python.rest import ApiException\nfrom pprint import pprint\n\n# Configure API key authorization: api-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['api-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['api-key'] = 'Bearer'\n# Configure API key authorization: partner-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['partner-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['partner-key'] = 'Bearer'\n\n# create an instance of the API class\napi_instance = brevo_python.SendersApi(brevo_python.ApiClient(configuration))\nsender_id = 789 # int | Id of the sender\notp = brevo_python.Otp() # Otp | otp (optional)\n\ntry:\n    # Update a sender\n    api_instance.validate_sender_by_otp(sender_id, otp=otp)\nexcept ApiException as e:\n    print(\"Exception when calling SendersApi->validate_sender_by_otp: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Dissociating IP from Child Account in Python\nDESCRIPTION: This snippet illustrates how to dissociate a dedicated IP from a child account. It uses the dissociate_ip_from_child method, passing the child identifier and IP object as parameters.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/ResellerApi.md#2025-04-17_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['api-key'] = 'YOUR_API_KEY'\nconfiguration.api_key['partner-key'] = 'YOUR_API_KEY'\n\napi_instance = brevo_python.ResellerApi(brevo_python.ApiClient(configuration))\nchild_identifier = 'child_identifier_example'\nip = brevo_python.ManageIp()\n\ntry:\n    api_instance.dissociate_ip_from_child(child_identifier, ip)\nexcept ApiException as e:\n    print(\"Exception when calling ResellerApi->dissociate_ip_from_child: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Updating SMS Campaign Status using Brevo Python SDK\nDESCRIPTION: This code shows how to update the status of an SMS campaign using the Brevo Python SDK. It configures API authorization, initializes the SMS Campaigns API, and makes the status update request with appropriate error handling.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/SMSCampaignsApi.md#2025-04-17_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport brevo_python\nfrom brevo_python.rest import ApiException\nfrom pprint import pprint\n\n# Configure API key authorization: api-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['api-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['api-key'] = 'Bearer'\n# Configure API key authorization: partner-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['partner-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['partner-key'] = 'Bearer'\n\n# create an instance of the API class\napi_instance = brevo_python.SMSCampaignsApi(brevo_python.ApiClient(configuration))\ncampaign_id = 789 # int | id of the campaign\nstatus = brevo_python.UpdateCampaignStatus() # UpdateCampaignStatus | Status of the campaign.\n\ntry:\n    # Update a campaign's status\n    api_instance.update_sms_campaign_status(campaign_id, status)\nexcept ApiException as e:\n    print(\"Exception when calling SMSCampaignsApi->update_sms_campaign_status: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Removing Credits from Child Account with Brevo Python SDK\nDESCRIPTION: This snippet demonstrates how to remove Email and/or SMS credits from a specific child account using the Brevo Python SDK. It sets up API key authorization, creates a ResellerApi instance, and calls remove_credits with a child identifier and a RemoveCredits object.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/ResellerApi.md#2025-04-17_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport brevo_python\nfrom brevo_python.rest import ApiException\nfrom pprint import pprint\n\n# Configure API key authorization: api-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['api-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['api-key'] = 'Bearer'\n# Configure API key authorization: partner-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['partner-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['partner-key'] = 'Bearer'\n\n# create an instance of the API class\napi_instance = brevo_python.ResellerApi(brevo_python.ApiClient(configuration))\nchild_identifier = 'child_identifier_example' # str | Either auth key or id of reseller's child\nremove_credits = brevo_python.RemoveCredits() # RemoveCredits | Values to post to remove email or SMS credits from a specific child account\n\ntry:\n    # Remove Email and/or SMS credits from a specific child account\n    api_response = api_instance.remove_credits(child_identifier, remove_credits)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling ResellerApi->remove_credits: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: GetEmailCampaign Property Definitions in Python\nDESCRIPTION: Property definitions for the GetEmailCampaign model class, defining all attributes of an email campaign including campaign metadata, A/B testing configuration, UTM parameters, content details, and campaign statistics.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/GetEmailCampaign.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass GetEmailCampaign:\n    id: int                     # ID of the campaign\n    name: str                   # Name of the campaign\n    subject: str                # Subject of the campaign (if abTesting is false)\n    preview_text: str           # Preview text or preheader of the email campaign\n    type: str                   # Type of campaign\n    status: str                 # Status of the campaign\n    scheduled_at: str           # UTC date-time for campaign schedule\n    ab_testing: bool            # Status of A/B Test for the campaign\n    subject_a: str              # Subject A of the ab-test campaign\n    subject_b: str              # Subject B of the ab-test campaign\n    split_rule: int             # Size of ab-test groups\n    winner_criteria: str        # Criteria for the winning version\n    winner_delay: int           # Duration of the test in hours\n    send_at_best_time: bool     # Whether to send campaign at best time\n    utm_campaign_value: str     # UTM parameter for campaign\n    utm_source: str             # Source of UTM parameter\n    utm_medium: str             # Medium parameter\n    utm_id: int                 # UTM ID\n    test_sent: bool             # Status of test email sending\n    header: str                 # Header of the campaign\n    footer: str                 # Footer of the campaign\n    sender: GetExtendedCampaignOverviewSender  # Sender information\n    reply_to: str               # Reply-to email address\n    to_field: str               # Customization of to field\n    html_content: str           # HTML content of the campaign\n    share_link: str             # Social media sharing link\n    tag: str                    # Campaign tag\n    created_at: str             # Creation UTC date-time\n    modified_at: str            # Last modification UTC date-time\n    inline_image_activation: bool  # Status of inline image\n    mirror_active: bool         # Status of mirror links\n    recurring: bool             # Type of trigger campaign\n    sent_date: str              # Sent UTC date-time\n    return_bounce: int          # Number of non-delivered campaigns\n    recipients: object          # Recipients information\n    statistics: object          # Campaign statistics\n```\n\n----------------------------------------\n\nTITLE: Documenting CreateSmtpTemplate Properties in Markdown\nDESCRIPTION: This table documents the properties of the CreateSmtpTemplate class used for creating SMTP email templates in the Brevo Python SDK. It lists required fields like sender, template_name, and subject, as well as optional fields like tag, html_content, html_url, and attachment settings.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/CreateSmtpTemplate.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# CreateSmtpTemplate\n\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**tag** | **str** | Tag of the template | [optional] \n**sender** | [**CreateSmtpTemplateSender**](CreateSmtpTemplateSender.md) |  | \n**template_name** | **str** | Name of the template | \n**html_content** | **str** | Body of the message (HTML version). The field must have more than 10 characters. REQUIRED if htmlUrl is empty | [optional] \n**html_url** | **str** | Url which contents the body of the email message. REQUIRED if htmlContent is empty | [optional] \n**subject** | **str** | Subject of the template | \n**reply_to** | **str** | Email on which campaign recipients will be able to reply to | [optional] \n**to_field** | **str** | To personalize the «To» Field. If you want to include the first name and last name of your recipient, add {FNAME} {LNAME}. These contact attributes must already exist in your Brevo account. If input parameter &#39;params&#39; used please use {{contact.FNAME}} {{contact.LNAME}} for personalization | [optional] \n**attachment_url** | **str** | Absolute url of the attachment (no local file). Extension allowed: xlsx, xls, ods, docx, docm, doc, csv, pdf, txt, gif, jpg, jpeg, png, tif, tiff, rtf, bmp, cgm, css, shtml, html, htm, zip, xml, ppt, pptx, tar, ez, ics, mobi, msg, pub and eps | [optional] \n**is_active** | **bool** | Status of template. isActive &#x3D; true means template is active and isActive &#x3D; false means template is inactive | [optional]\n```\n\n----------------------------------------\n\nTITLE: Retrieving Automated Messages with Brevo Python API\nDESCRIPTION: Demonstrates retrieving an automated message by its ID. Requires API key authentication and handles response/error cases.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/ConversationsApi.md#2025-04-17_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport brevo_python\nfrom brevo_python.rest import ApiException\nfrom pprint import pprint\n\napi_instance = brevo_python.ConversationsApi(brevo_python.ApiClient(configuration))\nid = 'id_example' # str | ID of the message sent previously\n\ntry:\n    # Get an automated message\n    api_response = api_instance.conversations_pushed_messages_id_get(id)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling ConversationsApi->conversations_pushed_messages_id_get: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Retrieving SMS Events with Brevo Python SDK\nDESCRIPTION: This snippet demonstrates how to use the get_sms_events method to retrieve all SMS activity (unaggregated events). It includes setting up authentication and handling various optional parameters for filtering and pagination.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/TransactionalSMSApi.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport brevo_python\nfrom brevo_python.rest import ApiException\nfrom pprint import pprint\n\n# Configure API key authorization: api-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['api-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['api-key'] = 'Bearer'\n# Configure API key authorization: partner-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['partner-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['partner-key'] = 'Bearer'\n\n# create an instance of the API class\napi_instance = brevo_python.TransactionalSMSApi(brevo_python.ApiClient(configuration))\nlimit = 50 # int | Number of documents per page (optional) (default to 50)\nstart_date = 'start_date_example' # str | Mandatory if endDate is used. Starting date (YYYY-MM-DD) of the report (optional)\nend_date = 'end_date_example' # str | Mandatory if startDate is used. Ending date (YYYY-MM-DD) of the report (optional)\noffset = 0 # int | Index of the first document of the page (optional) (default to 0)\ndays = 789 # int | Number of days in the past including today (positive integer). Not compatible with 'startDate' and 'endDate' (optional)\nphone_number = 'phone_number_example' # str | Filter the report for a specific phone number (optional)\nevent = 'event_example' # str | Filter the report for specific events (optional)\ntags = 'tags_example' # str | Filter the report for specific tags passed as a serialized urlencoded array (optional)\nsort = 'desc' # str | Sort the results in the ascending/descending order of record creation. Default order is **descending** if `sort` is not passed (optional) (default to desc)\n\ntry:\n    # Get all your SMS activity (unaggregated events)\n    api_response = api_instance.get_sms_events(limit=limit, start_date=start_date, end_date=end_date, offset=offset, days=days, phone_number=phone_number, event=event, tags=tags, sort=sort)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling TransactionalSMSApi->get_sms_events: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Updating External Feed using Brevo Python SDK\nDESCRIPTION: This code snippet demonstrates how to update an external feed using the Brevo Python SDK. It configures API key authorization, creates an instance of the ExternalFeedsApi, and calls the update_external_feed method with the required parameters.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/ExternalFeedsApi.md#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport brevo_python\nfrom brevo_python.rest import ApiException\nfrom pprint import pprint\n\n# Configure API key authorization: api-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['api-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['api-key'] = 'Bearer'\n# Configure API key authorization: partner-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['partner-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['partner-key'] = 'Bearer'\n\n# create an instance of the API class\napi_instance = brevo_python.ExternalFeedsApi(brevo_python.ApiClient(configuration))\nuuid = 'uuid_example' # str | UUID of the feed to update\nupdate_external_feed = brevo_python.UpdateExternalFeed() # UpdateExternalFeed | Values to update a feed\n\ntry:\n    # Update an external feed\n    api_instance.update_external_feed(uuid, update_external_feed)\nexcept ApiException as e:\n    print(\"Exception when calling ExternalFeedsApi->update_external_feed: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Coupon Collection by ID with Brevo Python SDK\nDESCRIPTION: This snippet demonstrates how to retrieve a specific coupon collection by its ID using the Brevo Python SDK. It configures API key authorization and makes a GET request to fetch the collection details.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/CouponsApi.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport brevo_python\nfrom brevo_python.rest import ApiException\nfrom pprint import pprint\n\n# Configure API key authorization: api-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['api-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['api-key'] = 'Bearer'\n# Configure API key authorization: partner-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['partner-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['partner-key'] = 'Bearer'\n\n# create an instance of the API class\napi_instance = brevo_python.CouponsApi(brevo_python.ApiClient(configuration))\nid = 'id_example' # str | Id of the collection to return\n\ntry:\n    # Get a coupon collection by id\n    api_response = api_instance.get_coupon_collection(id)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling CouponsApi->get_coupon_collection: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Defining UpdateContact Model Properties in Markdown\nDESCRIPTION: This snippet defines the properties of the UpdateContact model, including their types, descriptions, and optional status. It covers attributes for updating contact information, blacklisting, list management, and SMTP sender restrictions.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/UpdateContact.md#2025-04-17_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**attributes** | **dict(str, object)** | Pass the set of attributes to be updated. These attributes must be present in your account. Values that don&#39;t match the attribute type (e.g. text or string in a date attribute) will be ignored.To update existing email address of a contact with the new one please pass EMAIL in attributes. For example, &#x60;{ \\\"EMAIL\\\":\\\"newemail@domain.com\\\", \\\"FNAME\\\":\\\"Ellie\\\", \\\"LNAME\\\":\\\"Roger\\\", \\\"COUNTRIES\\\":[\\\"India\\\",\\\"China\\\"]}&#x60;. The attribute&#39;s parameter should be passed in capital letter while updating a contact. Keep in mind transactional attributes can be updated the same way as normal attributes. Mobile Number in \\\"SMS\\\" field should be passed with proper country code. For example {\\\"SMS\\\":\\\"+91xxxxxxxxxx\\\"} or {\\\"SMS\\\":\\\"0091xxxxxxxxxx\\\"} | [optional] \n**ext_id** | **str** | Pass your own Id to update ext_id of a contact. | [optional] \n**email_blacklisted** | **bool** | Set/unset this field to blacklist/allow the contact for emails (emailBlacklisted &#x3D; true) | [optional] \n**sms_blacklisted** | **bool** | Set/unset this field to blacklist/allow the contact for SMS (smsBlacklisted &#x3D; true) | [optional] \n**list_ids** | **list[int]** | Ids of the lists to add the contact to | [optional] \n**unlink_list_ids** | **list[int]** | Ids of the lists to remove the contact from | [optional] \n**smtp_blacklist_sender** | **list[str]** | transactional email forbidden sender for contact. Use only for email Contact | [optional]\n```\n\n----------------------------------------\n\nTITLE: Python Class Property Definitions for UpdateBatchContactsContacts\nDESCRIPTION: Defines the properties and their types for the UpdateBatchContactsContacts class used in batch contact updates. Properties include contact identifiers (email, id, sms), attributes, blacklist settings, list management, and SMTP sender restrictions.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/UpdateBatchContactsContacts.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nemail = str           # Email address of the user to be updated\nid = int              # ID of the user to be updated\nsms = str            # SMS of the user to be updated\next_id = str         # External ID for contact\nattributes = dict    # Dictionary of contact attributes\nemail_blacklisted = bool    # Email blacklist status\nsms_blacklisted = bool      # SMS blacklist status\nlist_ids = list[int]        # List IDs to add contact to\nunlink_list_ids = list[int] # List IDs to remove contact from\nsmtp_blacklist_sender = list[str] # Forbidden SMTP senders\n```\n\n----------------------------------------\n\nTITLE: Retrieving Lists from a Folder in Brevo Python SDK\nDESCRIPTION: Shows how to configure API key authorization and use the ListsApi to retrieve lists from a specified folder in Brevo. Includes parameters for pagination and sorting, with default values provided.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/ListsApi.md#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# Configure API key authorization: api-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['api-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['api-key'] = 'Bearer'\n# Configure API key authorization: partner-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['partner-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['partner-key'] = 'Bearer'\n\n# create an instance of the API class\napi_instance = brevo_python.ListsApi(brevo_python.ApiClient(configuration))\nfolder_id = 789 # int | Id of the folder\nlimit = 10 # int | Number of documents per page (optional) (default to 10)\noffset = 0 # int | Index of the first document of the page (optional) (default to 0)\nsort = 'desc' # str | Sort the results in the ascending/descending order of record creation. Default order is **descending** if `sort` is not passed (optional) (default to desc)\n\ntry:\n    # Get lists in a folder\n    api_response = api_instance.get_folder_lists(folder_id, limit=limit, offset=offset, sort=sort)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling ListsApi->get_folder_lists: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Update Corporate Group - Python API Example\nDESCRIPTION: Example code showing how to update details of a corporate group using the Brevo Python API client. Accepts group ID and updated group details as parameters.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/MasterAccountApi.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport brevo_python\nfrom brevo_python.rest import ApiException\nfrom pprint import pprint\n\n# Configure API key authorization: api-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['api-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['api-key'] = 'Bearer'\n# Configure API key authorization: partner-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['partner-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['partner-key'] = 'Bearer'\n\n# create an instance of the API class\napi_instance = brevo_python.MasterAccountApi(brevo_python.ApiClient(configuration))\nid = 'id_example' # str | Id of the group\nbody = brevo_python.Body3() # Body3 | Group details to be updated.\n\ntry:\n    # Update a group of sub-accounts\n    api_instance.corporate_group_id_put(id, body)\nexcept ApiException as e:\n    print(\"Exception when calling MasterAccountApi->corporate_group_id_put: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Activating Brevo eCommerce App (Python)\nDESCRIPTION: This snippet demonstrates how to activate the Brevo eCommerce app using the API. It configures API key authorization, initializes the API client, and makes a request to activate the eCommerce app.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/EcommerceApi.md#2025-04-17_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport brevo_python\nfrom brevo_python.rest import ApiException\nfrom pprint import pprint\n\n# Configure API key authorization: api-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['api-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['api-key'] = 'Bearer'\n# Configure API key authorization: partner-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['partner-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['partner-key'] = 'Bearer'\n\n# create an instance of the API class\napi_instance = brevo_python.EcommerceApi(brevo_python.ApiClient(configuration))\n\ntry:\n    # Activate the eCommerce app\n    api_instance.ecommerce_activate_post()\nexcept ApiException as e:\n    print(\"Exception when calling EcommerceApi->ecommerce_activate_post: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Note Model Properties Table in Markdown\nDESCRIPTION: Markdown table defining the properties, data types, descriptions and optional status for the Note model class. Contains fields for managing notes including unique IDs, text content, relationships to contacts and deals, and metadata.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/Note.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**id** | **str** | Unique note Id | [optional] \n**text** | **str** | Text content of a note | \n**contact_ids** | **list[int]** | Contact ids linked to a note | [optional] \n**deal_ids** | **list[str]** | Deal ids linked to a note | [optional] \n**author_id** | **object** | Account details of user which created the note | [optional] \n**created_at** | **datetime** | Note created date/time | [optional] \n**updated_at** | **datetime** | Note updated date/time | [optional]\n```\n\n----------------------------------------\n\nTITLE: Defining UpdateEmailCampaignRecipients Model Properties in Markdown\nDESCRIPTION: This snippet defines the properties of the UpdateEmailCampaignRecipients model, including exclusion_list_ids, list_ids, and segment_ids. Each property is described with its type, description, and optional notes.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/UpdateEmailCampaignRecipients.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\nexclusion_list_ids | **list[int]** | List ids which have to be excluded from a campaign | [optional] \nlist_ids | **list[int]** | Lists Ids to send the campaign to. Campaign should only be updated with listIds if listIds were used to create it. REQUIRED if already not present in campaign and scheduledAt is not empty | [optional] \nsegment_ids | **list[int]** | Mandatory if listIds are not used. Campaign should only be updated with segmentIds if segmentIds were used to create it. Segment ids to send the campaign to. | [optional] \n```\n\n----------------------------------------\n\nTITLE: Retrieving All Webhooks with Brevo Python API\nDESCRIPTION: This snippet shows how to retrieve all webhooks using the Brevo Python API. It demonstrates setting up API key authorization and making a GET request to fetch all webhooks, with optional filtering and sorting parameters.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/WebhooksApi.md#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport brevo_python\nfrom brevo_python.rest import ApiException\nfrom pprint import pprint\n\n# Configure API key authorization: api-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['api-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['api-key'] = 'Bearer'\n# Configure API key authorization: partner-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['partner-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['partner-key'] = 'Bearer'\n\n# create an instance of the API class\napi_instance = brevo_python.WebhooksApi(brevo_python.ApiClient(configuration))\ntype = 'transactional' # str | Filter on webhook type (optional) (default to transactional)\nsort = 'desc' # str | Sort the results in the ascending/descending order of webhook creation (optional) (default to desc)\n\ntry:\n    # Get all webhooks\n    api_response = api_instance.get_webhooks(type=type, sort=sort)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling WebhooksApi->get_webhooks: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Associating IP to Child Account in Python\nDESCRIPTION: This snippet shows how to associate a dedicated IP to a child account using the Brevo Python SDK. It sets up the API client, configures authentication, and sends a POST request to associate the IP.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/ResellerApi.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport brevo_python\nfrom brevo_python.rest import ApiException\nfrom pprint import pprint\n\n# Configure API key authorization: api-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['api-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['api-key'] = 'Bearer'\n# Configure API key authorization: partner-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['partner-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['partner-key'] = 'Bearer'\n\n# create an instance of the API class\napi_instance = brevo_python.ResellerApi(brevo_python.ApiClient(configuration))\nchild_identifier = 'child_identifier_example' # str | Either auth key or id of reseller's child\nip = brevo_python.ManageIp() # ManageIp | IP to associate\n\ntry:\n    # Associate a dedicated IP to the child\n    api_instance.associate_ip_to_child(child_identifier, ip)\nexcept ApiException as e:\n    print(\"Exception when calling ResellerApi->associate_ip_to_child: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Fetching All Folders with Brevo Python SDK\nDESCRIPTION: This code shows how to retrieve all folders using the Brevo Python SDK. It sets up API authentication, initializes the ContactsApi client, and calls the get_folders method with parameters for pagination and sorting. The response contains folder information that can be printed for review.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/ContactsApi.md#2025-04-17_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport brevo_python\nfrom brevo_python.rest import ApiException\nfrom pprint import pprint\n\n# Configure API key authorization: api-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['api-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['api-key'] = 'Bearer'\n# Configure API key authorization: partner-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['partner-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['partner-key'] = 'Bearer'\n\n# create an instance of the API class\napi_instance = brevo_python.ContactsApi(brevo_python.ApiClient(configuration))\nlimit = 10 # int | Number of documents per page (default to 10)\noffset = 0 # int | Index of the first document of the page (default to 0)\nsort = 'desc' # str | Sort the results in the ascending/descending order of record creation. Default order is **descending** if `sort` is not passed (optional) (default to desc)\n\ntry:\n    # Get all folders\n    api_response = api_instance.get_folders(limit, offset, sort=sort)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling ContactsApi->get_folders: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Fetching Child Account Domains with Brevo Python SDK\nDESCRIPTION: This snippet demonstrates how to retrieve all sender domains for a specific child account using the Brevo Python SDK. It initializes the API with proper authentication, creates a ResellerApi instance, and makes the get_child_domains API call with a child identifier.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/ResellerApi.md#2025-04-17_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport brevo_python\nfrom brevo_python.rest import ApiException\nfrom pprint import pprint\n\n# Configure API key authorization: api-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['api-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['api-key'] = 'Bearer'\n# Configure API key authorization: partner-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['partner-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['partner-key'] = 'Bearer'\n\n# create an instance of the API class\napi_instance = brevo_python.ResellerApi(brevo_python.ApiClient(configuration))\nchild_identifier = 'child_identifier_example' # str | Either auth key or id of reseller's child\n\ntry:\n    # Get all sender domains for a specific child account\n    api_response = api_instance.get_child_domains(child_identifier)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling ResellerApi->get_child_domains: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: SendSmtpEmailMessageVersions Properties Table\nDESCRIPTION: Markdown table documenting the properties of the SendSmtpEmailMessageVersions class, including property names, types, descriptions and optional status.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/SendSmtpEmailMessageVersions.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\nto | list[SendSmtpEmailTo1] | List of email addresses and names (_optional_) of the recipients. For example, [{\\\"name\\\":\\\"Jimmy\\\", \\\"email\\\":\\\"jimmy98@example.com\\\"}, {\\\"name\\\":\\\"Joe\\\", \\\"email\\\":\\\"joe@example.com\\\"}] | \nparams | dict(str, object) | Pass the set of attributes to customize the template. For example, {\\\"FNAME\\\":\\\"Joe\\\", \\\"LNAME\\\":\\\"Doe\\\"}. It's considered only if template is in New Template Language format. | [optional] \nbcc | list[SendSmtpEmailBcc] | List of email addresses and names (optional) of the recipients in bcc | [optional] \ncc | list[SendSmtpEmailCc] | List of email addresses and names (optional) of the recipients in cc | [optional] \nreply_to | SendSmtpEmailReplyTo1 |  | [optional] \nsubject | str | Custom subject specific to message version  | [optional] \nhtml_content | str | HTML body of the message. **Mandatory if 'templateId' is not passed, ignored if 'templateId' is passed**  | [optional] \ntext_content | str | Plain Text body of the message. **Ignored if 'templateId' is passed**  | [optional]\n```\n\n----------------------------------------\n\nTITLE: Creating Folder with Brevo Python\nDESCRIPTION: Creates a new folder using the Brevo API. Demonstrates folder creation with proper error handling and API response processing.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/ContactsApi.md#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\napi_instance = brevo_python.ContactsApi(brevo_python.ApiClient(configuration))\ncreate_folder = brevo_python.CreateUpdateFolder()\n\ntry:\n    api_response = api_instance.create_folder(create_folder)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling ContactsApi->create_folder: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Sending Test SMS Campaign with Brevo Python SDK\nDESCRIPTION: This code shows how to send a test SMS campaign using the Brevo Python SDK. The method requires both the campaign ID and a phone number of a contact in the Brevo account to send the test message to.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/SMSCampaignsApi.md#2025-04-17_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport brevo_python\nfrom brevo_python.rest import ApiException\nfrom pprint import pprint\n\n# Configure API key authorization: api-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['api-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['api-key'] = 'Bearer'\n# Configure API key authorization: partner-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['partner-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['partner-key'] = 'Bearer'\n\n# create an instance of the API class\napi_instance = brevo_python.SMSCampaignsApi(brevo_python.ApiClient(configuration))\ncampaign_id = 789 # int | Id of the SMS campaign\nphone_number = brevo_python.SendTestSms() # SendTestSms | Mobile number of the recipient with the country code. This number must belong to one of your contacts in Brevo account and must not be blacklisted\n\ntry:\n    # Send a test SMS campaign\n    api_instance.send_test_sms(campaign_id, phone_number)\nexcept ApiException as e:\n    print(\"Exception when calling SMSCampaignsApi->send_test_sms: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Deleting a Folder using Brevo Python API\nDESCRIPTION: Example of deleting a folder and all its lists using the Brevo ContactsApi. Requires API key or partner key authentication.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/ContactsApi.md#2025-04-17_snippet_8\n\nLANGUAGE: python\nCODE:\n```\napi_instance = brevo_python.ContactsApi(brevo_python.ApiClient(configuration))\nfolder_id = 789 # int | Id of the folder\n\ntry:\n    # Delete a folder (and all its lists)\n    api_instance.delete_folder(folder_id)\nexcept ApiException as e:\n    print(\"Exception when calling ContactsApi->delete_folder: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Creating Reseller Child in Python\nDESCRIPTION: This snippet shows how to create a reseller child account using the Brevo Python SDK. It sets up the API client, configures authentication, and sends a POST request to create the child account.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/ResellerApi.md#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport brevo_python\nfrom brevo_python.rest import ApiException\nfrom pprint import pprint\n\n# Configure API key authorization: api-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['api-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n```\n\n----------------------------------------\n\nTITLE: SendEmail Model Properties Structure\nDESCRIPTION: Defines the properties schema for SendEmail model including recipients lists (to, cc, bcc), attachments, headers, and customization attributes. Properties include type definitions and validation rules for each field.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/SendEmail.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n**email_to** | **list[str]** | List of the email addresses of the recipients. For example, ['abc@example.com', 'asd@example.com'].\n**email_bcc** | **list[str]** | List of the email addresses of the recipients in bcc\n**email_cc** | **list[str]** | List of the email addresses of the recipients in cc\n**reply_to** | **str** | Email address which shall be used by campaign recipients to reply back\n**attachment_url** | **str** | Absolute url of the attachment (no local file). Extension allowed: xlsx, xls, ods, docx, docm, doc, csv, pdf, txt, gif, jpg, jpeg, png, tif, tiff, rtf, bmp, cgm, css, shtml, html, htm, zip, xml, ppt, pptx, tar, ez, ics, mobi, msg, pub and eps\n**attachment** | **list[SendEmailAttachment]** | Pass the list of content (base64 encoded) and name of the attachment. For example, [{\"content\":\"base64 encoded content 1\", \"name\":\"attcahment1\"}, {\"content\":\"base64 encoded content 2\", \"name\":\"attcahment2\"}].\n**headers** | **object** | Pass the set of headers that shall be sent along the mail headers in the original email. 'sender.ip' header can be set (only for dedicated ip users) to mention the IP to be used for sending transactional emails.\n**attributes** | **object** | Pass the set of attributes to customize the template. For example, {\"FNAME\":\"Joe\", \"LNAME\":\"Doe\"}\n**tags** | **list[str]** | Tag your emails to find them more easily\n```\n\n----------------------------------------\n\nTITLE: Defining GetExtendedCampaignStats Model Properties in Markdown\nDESCRIPTION: This snippet defines the properties of the GetExtendedCampaignStats model using a markdown table. It includes property names, types, descriptions, and notes for each field in the model.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/GetExtendedCampaignStats.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# GetExtendedCampaignStats\n\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\nglobal_stats | **object** | Overall statistics of the campaign | \ncampaign_stats | **list[object]** | List-wise statistics of the campaign. | \nmirror_click | **int** | Number of clicks on mirror link | \nremaining | **int** | Number of remaning emails to send | \nlinks_stats | **object** | Statistics about the number of clicks for the links | \nstats_by_domain | [**GetStatsByDomain**](GetStatsByDomain.md) |  | \nstats_by_device | [**GetStatsByDevice**](GetStatsByDevice.md) | Statistics about the campaign on the basis of various devices | \nstats_by_browser | [**GetStatsByBrowser**](GetStatsByBrowser.md) | Statistics about the campaign on the basis of various browsers | \n\n[[Back to Model list]](../README.md#documentation-for-models) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to README]](../README.md)\n```\n\n----------------------------------------\n\nTITLE: Defining UpdateAttribute Class Properties in Python\nDESCRIPTION: This code snippet defines the properties of the UpdateAttribute class. It includes 'value' for calculated or global attributes, 'enumeration' for category attributes, and 'multi_category_options' for normal multiple-choice attributes.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/UpdateAttribute.md#2025-04-17_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nclass UpdateAttribute:\n    \"\"\"\n    Properties:\n        value (str): Value of the attribute to update. Use only if the attribute's category is 'calculated' or 'global' (optional)\n        enumeration (list[UpdateAttributeEnumeration]): List of the values and labels that the attribute can take. Use only if the attribute's category is \"category\". For example, [{\"value\":1, \"label\":\"male\"}, {\"value\":2, \"label\":\"female\"}] (optional)\n        multi_category_options (list[str]): Use this option to add multiple-choice attributes options only if the attribute's category is \"normal\". This option is specifically designed for updating multiple-choice attributes. For example: [\"USA\",\"INDIA\"] (optional)\n    \"\"\"\n```\n\n----------------------------------------\n\nTITLE: Managing Corporate User Invitations with Brevo Python\nDESCRIPTION: This snippet demonstrates how to use the MasterAccountApi to manage corporate user invitations. It includes examples of resending or canceling invitations and handling API exceptions.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/MasterAccountApi.md#2025-04-17_snippet_17\n\nLANGUAGE: python\nCODE:\n```\n# create an instance of the API class\napi_instance = brevo_python.MasterAccountApi(brevo_python.ApiClient(configuration))\naction = 'action_example' # str | Action to be performed (cancel / resend)\nemail = 'email_example' # str | Email address of the recipient\n\ntry:\n    # Resend / cancel admin user invitation\n    api_response = api_instance.corporate_user_invitation_action_email_put(action, email)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling MasterAccountApi->corporate_user_invitation_action_email_put: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Configuring API Authorization for Brevo Python SDK\nDESCRIPTION: Sets up API key authorization for the Brevo Python SDK. Demonstrates configuration for both api-key and partner-key authentication methods with options for prefix setup.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/EmailCampaignsApi.md#2025-04-17_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n# Configure API key authorization: api-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['api-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['api-key'] = 'Bearer'\n# Configure API key authorization: partner-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['partner-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['partner-key'] = 'Bearer'\n```\n\n----------------------------------------\n\nTITLE: Deleting Contact Attribute with Brevo Python\nDESCRIPTION: Deletes a contact attribute using the Brevo API. Demonstrates attribute deletion with category and name parameters.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/ContactsApi.md#2025-04-17_snippet_7\n\nLANGUAGE: python\nCODE:\n```\napi_instance = brevo_python.ContactsApi(brevo_python.ApiClient(configuration))\n\ntry:\n    api_instance.delete_attribute(attribute_category, attribute_name)\nexcept ApiException as e:\n    print(\"Exception when calling ContactsApi->delete_attribute: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Listing Admin Users with Brevo Python\nDESCRIPTION: This snippet shows how to retrieve a list of all admin users for an Admin account using the MasterAccountApi. It demonstrates the API call and error handling.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/MasterAccountApi.md#2025-04-17_snippet_20\n\nLANGUAGE: python\nCODE:\n```\n# create an instance of the API class\napi_instance = brevo_python.MasterAccountApi(brevo_python.ApiClient(configuration))\n\ntry:\n    # Get the list of all admin users\n    api_response = api_instance.get_corporate_invited_users_list()\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling MasterAccountApi->get_corporate_invited_users_list: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Defining SubAccountUpdatePlanRequestCredits Model Properties in Markdown\nDESCRIPTION: This snippet defines the properties of the SubAccountUpdatePlanRequestCredits model, including their types, descriptions, and optional status. It covers email credits, SMS credits (available in ENT-v2), and push notification subscribers (also in ENT-v2).\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/SubAccountUpdatePlanRequestCredits.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\nemail | **int** | Number of email credits | [optional] \nsms | **float** | Number of SMS credits | available in ENT-v2 only | [optional] \nwp_subscribers | **int** | Number of Push credits, possible value is 0 and -1 | available in ENT-v2 only | [optional] \n```\n\n----------------------------------------\n\nTITLE: Defining UpdateCouponCollection Model Properties in Markdown\nDESCRIPTION: This code snippet defines the properties of the UpdateCouponCollection model, including their types, descriptions, and whether they are optional. It covers default coupon, expiration date, and alert settings for remaining days and coupons.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/UpdateCouponCollection.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# UpdateCouponCollection\n\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\ndefault_coupon | **str** | A default coupon to be used in case there are no coupons left | [optional] \nexpiration_date | **datetime** | Specify an expiration date for the coupon collection in RFC3339 format. Use null to remove the expiration date. | [optional] \nremaining_days_alert | **int** | Send a notification alert (email) when the remaining days until the expiration date are equal or fall bellow this number. Use null to disable alerts. | [optional] \nremaining_coupons_alert | **int** | Send a notification alert (email) when the remaining coupons count is equal or fall bellow this number. Use null to disable alerts. | [optional] \n\n[[Back to Model list]](../README.md#documentation-for-models) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to README]](../README.md)\n```\n\n----------------------------------------\n\nTITLE: Getting File Details with Brevo Python SDK\nDESCRIPTION: This snippet shows how to retrieve details of a specific file using the crm_files_id_data_get method. It requires the file ID as a parameter.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/FilesApi.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport brevo_python\nfrom brevo_python.rest import ApiException\nfrom pprint import pprint\n\n# Configure API key authorization: api-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['api-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['api-key'] = 'Bearer'\n# Configure API key authorization: partner-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['partner-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['partner-key'] = 'Bearer'\n\n# create an instance of the API class\napi_instance = brevo_python.FilesApi(brevo_python.ApiClient(configuration))\nid = 'id_example' # str | File id to get file data.\n\ntry:\n    # Get file details\n    api_response = api_instance.crm_files_id_data_get(id)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling FilesApi->crm_files_id_data_get: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Deleting a CRM Note with Brevo Python SDK\nDESCRIPTION: This snippet shows how to delete a specific CRM note using the Brevo Python SDK. It demonstrates setting up the API client with authentication and making a DELETE request to remove a note by its ID.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/CRMApi.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport brevo_python\nfrom brevo_python.rest import ApiException\nfrom pprint import pprint\n\n# Configure API key authorization: api-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['api-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['api-key'] = 'Bearer'\n# Configure API key authorization: partner-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['partner-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['partner-key'] = 'Bearer'\n\n# create an instance of the API class\napi_instance = brevo_python.CRMApi(brevo_python.ApiClient(configuration))\nid = 'id_example' # str | Note ID to delete\n\ntry:\n    # Delete a note\n    api_instance.crm_notes_id_delete(id)\nexcept ApiException as e:\n    print(\"Exception when calling CRMApi->crm_notes_id_delete: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: WhatsApp Campaign Properties Definition - Markdown\nDESCRIPTION: Defines the required properties for creating a WhatsApp campaign including name, template ID, scheduled time, and recipients. The template must be in approved state and scheduling uses UTC datetime format with timezone support.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/CreateWhatsAppCampaign.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# CreateWhatsAppCampaign\n\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**name** | **str** | Name of the WhatsApp campaign creation | \n**template_id** | **int** | Id of the WhatsApp template in **approved** state | \n**scheduled_at** | **str** | Sending UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ). **Prefer to pass your timezone in date-time format for accurate result.For example: **2017-06-01T12:30:00+02:00**  | \n**recipients** | [**CreateWhatsAppCampaignRecipients**](CreateWhatsAppCampaignRecipients.md) |  |\n```\n\n----------------------------------------\n\nTITLE: Defining GetAggregatedReport Model Properties in Markdown\nDESCRIPTION: This code snippet defines the properties of the GetAggregatedReport model, including their names, types, and descriptions. It covers various email campaign metrics such as delivery stats, engagement rates, and error counts.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/GetAggregatedReport.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**range** | **str** | Time frame of the report | [optional] \n**requests** | **int** | Number of requests for the timeframe | [optional] \n**delivered** | **int** | Number of delivered emails for the timeframe | [optional] \n**hard_bounces** | **int** | Number of hardbounces for the timeframe | [optional] \n**soft_bounces** | **int** | Number of softbounces for the timeframe | [optional] \n**clicks** | **int** | Number of clicks for the timeframe | [optional] \n**unique_clicks** | **int** | Number of unique clicks for the timeframe | [optional] \n**opens** | **int** | Number of openings for the timeframe | [optional] \n**unique_opens** | **int** | Number of unique openings for the timeframe | [optional] \n**spam_reports** | **int** | Number of complaint (spam report) for the timeframe | [optional] \n**blocked** | **int** | Number of blocked contact emails for the timeframe | [optional] \n**invalid** | **int** | Number of invalid emails for the timeframe | [optional] \n**unsubscribed** | **int** | Number of unsubscribed emails for the timeframe | [optional] \n```\n\n----------------------------------------\n\nTITLE: Defining UpdateList Model Properties in Markdown\nDESCRIPTION: This snippet defines the properties of the UpdateList model using a markdown table. It specifies two optional properties: 'name' for updating the list name, and 'folder_id' for moving the list to a different folder.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/UpdateList.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**name** | **str** | Name of the list. Either of the two parameters (name, folderId) can be updated at a time. | [optional] \n**folder_id** | **int** | Id of the folder in which the list is to be moved. Either of the two parameters (name, folderId) can be updated at a time. | [optional]\n```\n\n----------------------------------------\n\nTITLE: Creating a new sub-account using MasterAccountApi\nDESCRIPTION: This code demonstrates how to create a new sub-account under a master account using the Brevo Python library. It configures API keys, creates an instance of the MasterAccountApi, and handles potential exceptions during the API call.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/MasterAccountApi.md#2025-04-17_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport brevo_python\nfrom brevo_python.rest import ApiException\nfrom pprint import pprint\n\n# Configure API key authorization: api-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['api-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['api-key'] = 'Bearer'\n# Configure API key authorization: partner-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['partner-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['partner-key'] = 'Bearer'\n\n# create an instance of the API class\napi_instance = brevo_python.MasterAccountApi(brevo_python.ApiClient(configuration))\nsub_account_create = brevo_python.CreateSubAccount() # CreateSubAccount | values to create new sub-account\n\ntry:\n    # Create a new sub-account under a master account.\n    api_response = api_instance.corporate_sub_account_post(sub_account_create)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling MasterAccountApi->corporate_sub_account_post: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Deleting a Reseller Child Domain in Python\nDESCRIPTION: This snippet shows how to delete a sender domain for a reseller child account. It uses the delete_child_domain method of the ResellerApi, passing the child identifier and domain name as parameters.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/ResellerApi.md#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['api-key'] = 'YOUR_API_KEY'\nconfiguration.api_key['partner-key'] = 'YOUR_API_KEY'\n\napi_instance = brevo_python.ResellerApi(brevo_python.ApiClient(configuration))\nchild_identifier = 'child_identifier_example'\ndomain_name = 'domain_name_example'\n\ntry:\n    api_instance.delete_child_domain(child_identifier, domain_name)\nexcept ApiException as e:\n    print(\"Exception when calling ResellerApi->delete_child_domain: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Deleting CRM Notes with Python\nDESCRIPTION: Example code showing how to delete a specific note from the Brevo CRM system using its ID. Requires api-key or partner-key authentication.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/NotesApi.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport brevo_python\nfrom brevo_python.rest import ApiException\nfrom pprint import pprint\n\n# Configure API key authorization: api-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['api-key'] = 'YOUR_API_KEY'\n\napi_instance = brevo_python.NotesApi(brevo_python.ApiClient(configuration))\nid = 'id_example'\n\ntry:\n    api_instance.crm_notes_id_delete(id)\nexcept ApiException as e:\n    print(\"Exception when calling NotesApi->crm_notes_id_delete: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Retrieving a List's Details in Brevo Python SDK\nDESCRIPTION: Demonstrates how to retrieve detailed information about a specific contact list by its ID. This API call returns extended list information such as name, folder association, and statistics.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/ListsApi.md#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport brevo_python\nfrom brevo_python.rest import ApiException\nfrom pprint import pprint\n\n# Configure API key authorization: api-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['api-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['api-key'] = 'Bearer'\n# Configure API key authorization: partner-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['partner-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['partner-key'] = 'Bearer'\n\n# create an instance of the API class\napi_instance = brevo_python.ListsApi(brevo_python.ApiClient(configuration))\nlist_id = 789 # int | Id of the list\n\ntry:\n    # Get a list's details\n    api_response = api_instance.get_list(list_id)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling ListsApi->get_list: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Defining GetCampaignRecipients Properties in Python\nDESCRIPTION: Model class properties definition for campaign recipients management. Contains two list properties: 'lists' for included recipient lists and 'exclusion_lists' for excluded recipient lists. Both properties are arrays of integers representing list IDs.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/GetCampaignRecipients.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nlists | list[int] |  | \nexclusion_lists | list[int] |  |\n```\n\n----------------------------------------\n\nTITLE: Updating Child Account Status with Brevo Python API\nDESCRIPTION: Example of updating a reseller's child account status using the Brevo Python SDK. Requires API key or partner key authentication and takes child identifier and status update values as parameters.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/ResellerApi.md#2025-04-17_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport brevo_python\nfrom brevo_python.rest import ApiException\nfrom pprint import pprint\n\n# Configure API key authorization: api-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['api-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['api-key'] = 'Bearer'\n# Configure API key authorization: partner-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['partner-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['partner-key'] = 'Bearer'\n\n# create an instance of the API class\napi_instance = brevo_python.ResellerApi(brevo_python.ApiClient(configuration))\nchild_identifier = 'child_identifier_example' # str | Either auth key or id of reseller's child\nupdate_child_account_status = brevo_python.UpdateChildAccountStatus() # UpdateChildAccountStatus | values to update in child account status\n\ntry:\n    # Update info of reseller's child account status based on the childIdentifier supplied\n    api_instance.update_child_account_status(child_identifier, update_child_account_status)\nexcept ApiException as e:\n    print(\"Exception when calling ResellerApi->update_child_account_status: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Configuring Brevo Python SDK and Updating a Company\nDESCRIPTION: This snippet demonstrates how to configure the Brevo Python SDK with an API key and make a PATCH request to update a company's details. It includes error handling for API exceptions.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/CompaniesApi.md#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# Configure API key authorization: partner-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['partner-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['partner-key'] = 'Bearer'\n\n# create an instance of the API class\napi_instance = brevo_python.CompaniesApi(brevo_python.ApiClient(configuration))\nid = 'id_example' # str | \nbody = brevo_python.Body6() # Body6 | Updated company details.\n\ntry:\n    # Update a company\n    api_response = api_instance.companies_id_patch(id, body)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling CompaniesApi->companies_id_patch: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Revoking Admin User Access with Brevo Python\nDESCRIPTION: This snippet shows how to revoke an admin user's access using the MasterAccountApi. It demonstrates the process of removing an invited member from an Admin account.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/MasterAccountApi.md#2025-04-17_snippet_18\n\nLANGUAGE: python\nCODE:\n```\n# create an instance of the API class\napi_instance = brevo_python.MasterAccountApi(brevo_python.ApiClient(configuration))\nemail = 'email_example' # str | Email of the invited user\n\ntry:\n    # Revoke an admin user\n    api_instance.corporate_user_revoke_email_delete(email)\nexcept ApiException as e:\n    print(\"Exception when calling MasterAccountApi->corporate_user_revoke_email_delete: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Company Attributes with Brevo Python SDK\nDESCRIPTION: Example code demonstrating how to retrieve company attributes using the CompaniesApi. This snippet configures API key authorization and makes a request to get all available company attributes.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/CompaniesApi.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport brevo_python\nfrom brevo_python.rest import ApiException\nfrom pprint import pprint\n\n# Configure API key authorization: api-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['api-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['api-key'] = 'Bearer'\n# Configure API key authorization: partner-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['partner-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['partner-key'] = 'Bearer'\n\n# create an instance of the API class\napi_instance = brevo_python.CompaniesApi(brevo_python.ApiClient(configuration))\n\ntry:\n    # Get company attributes\n    api_response = api_instance.companies_attributes_get()\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling CompaniesApi->companies_attributes_get: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Defining CreateContact Model Properties in Markdown\nDESCRIPTION: Describes the properties of the CreateContact model, including data types, descriptions, and optional flags. This model is used for creating or updating contact information in the Brevo platform.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/CreateContact.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# CreateContact\n\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**email** | **str** | Email address of the user. Mandatory if \\\"SMS\\\" field is not passed in \\\"attributes\\\" parameter. Mobile Number in \\\"SMS\\\" field should be passed with proper country code. For example {\\\"SMS\\\":\\\"+91xxxxxxxxxx\\\"} or {\\\"SMS\\\":\\\"0091xxxxxxxxxx\\\"} | [optional] \n**ext_id** | **str** | Pass your own Id to create a contact. | [optional] \n**attributes** | **dict(str, object)** | Pass the set of attributes and their values. These attributes must be present in your Brevo account. For eg. {'FNAME':'Elly', 'LNAME':'Roger', 'COUNTRIES':['India','China']} | [optional] \n**email_blacklisted** | **bool** | Set this field to blacklist the contact for emails (emailBlacklisted = true) | [optional] \n**sms_blacklisted** | **bool** | Set this field to blacklist the contact for SMS (smsBlacklisted = true) | [optional] \n**list_ids** | **list[int]** | Ids of the lists to add the contact to | [optional] \n**update_enabled** | **bool** | Facilitate to update the existing contact in the same request (updateEnabled = true) | [optional] [default to False]\n**smtp_blacklist_sender** | **list[str]** | transactional email forbidden sender for contact. Use only for email Contact ( only available if updateEnabled = true ) | [optional] \n\n[[Back to Model list]](../README.md#documentation-for-models) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to README]](../README.md)\n```\n\n----------------------------------------\n\nTITLE: Pipeline Properties Table in Markdown\nDESCRIPTION: Markdown table documenting the properties of the Pipeline model including name, type, description and optional status.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/Pipeline.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\npipeline | **str** | Pipeline id | [optional] \npipeline_name | **str** | Pipeline Name | [optional] \nstages | [**list[PipelineStage]**](PipelineStage.md) | List of stages | [optional]\n```\n\n----------------------------------------\n\nTITLE: Defining OrderProducts Model Properties in Markdown\nDESCRIPTION: This snippet defines the properties of the OrderProducts model using a markdown table. It includes the property names, their types, descriptions, and optional notes.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/OrderProducts.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name | Type | Description | Notes |\n| --- | --- | --- | --- |\n| **product_id** | **str** | ID of the product. | |\n| **quantity** | **float** | How many pieces of the product the visitor has added to the cart. | |\n| **variant_id** | **str** | Product ID of the red color shirts. | [optional] |\n| **price** | **float** | The price of a unit of product | |\n```\n\n----------------------------------------\n\nTITLE: Revoking User Permissions in Brevo Python SDK\nDESCRIPTION: This code demonstrates how to revoke a user's permission using the Brevo Python SDK. It configures API key authentication, creates an instance of the UserApi class, and calls the put_revoke_user_permission method with the email of the user whose permissions should be revoked.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/UserApi.md#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport brevo_python\nfrom brevo_python.rest import ApiException\nfrom pprint import pprint\n\n# Configure API key authorization: api-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['api-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['api-key'] = 'Bearer'\n# Configure API key authorization: partner-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['partner-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['partner-key'] = 'Bearer'\n\n# create an instance of the API class\napi_instance = brevo_python.UserApi(brevo_python.ApiClient(configuration))\nemail = 'email_example' # str | Email of the invited user.\n\ntry:\n    # Revoke user permission\n    api_response = api_instance.put_revoke_user_permission(email)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling UserApi->put_revoke_user_permission: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Unlinking Sub-accounts from Group in Brevo Python\nDESCRIPTION: Example of removing sub-accounts from a corporate group using the Brevo Python SDK. Requires API key authentication and group_id parameter.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/MasterAccountApi.md#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport brevo_python\nfrom brevo_python.rest import ApiException\nfrom pprint import pprint\n\n# Configure API key authorization: api-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['api-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['api-key'] = 'Bearer'\n# Configure API key authorization: partner-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['partner-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['partner-key'] = 'Bearer'\n\n# create an instance of the API class\napi_instance = brevo_python.MasterAccountApi(brevo_python.ApiClient(configuration))\ngroup_id = 'group_id_example' # str | Id of the group\nbody = brevo_python.Body4() # Body4 | List of sub-account ids\n\ntry:\n    # Delete sub-account from group\n    api_instance.corporate_group_unlink_group_id_sub_accounts_put(group_id, body)\nexcept ApiException as e:\n    print(\"Exception when calling MasterAccountApi->corporate_group_unlink_group_id_sub_accounts_put: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Updating Reseller Child Profile with Brevo Python API\nDESCRIPTION: Example of updating a reseller's child profile information using the Brevo Python SDK. Requires API key or partner key authentication and takes child identifier and profile update values as parameters.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/ResellerApi.md#2025-04-17_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport brevo_python\nfrom brevo_python.rest import ApiException\nfrom pprint import pprint\n\n# Configure API key authorization: api-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['api-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['api-key'] = 'Bearer'\n# Configure API key authorization: partner-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['partner-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['partner-key'] = 'Bearer'\n\n# create an instance of the API class\napi_instance = brevo_python.ResellerApi(brevo_python.ApiClient(configuration))\nchild_identifier = 'child_identifier_example' # str | Either auth key or id of reseller's child\nreseller_child = brevo_python.UpdateChild() # UpdateChild | values to update in child profile\n\ntry:\n    # Update info of reseller's child based on the child identifier supplied\n    api_instance.update_reseller_child(child_identifier, reseller_child)\nexcept ApiException as e:\n    print(\"Exception when calling ResellerApi->update_reseller_child: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: SendEmailAttachment Properties Definition in Markdown\nDESCRIPTION: Markdown table defining the properties of the SendEmailAttachment model. Specifies two required fields: content (base64 encoded data) and name (attachment filename).\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/SendEmailAttachment.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\ncontent | str | Base64 encoded chunk data of the attachment generated on the fly | \nname | str | Required for content. Name of the attachment |\n```\n\n----------------------------------------\n\nTITLE: Defining UploadImageToGallery Model Properties in Markdown\nDESCRIPTION: This snippet defines the properties of the UploadImageToGallery model. It specifies two properties: image_url (required) and name (optional). The image_url property has specific constraints for file size and allowed extensions.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/UploadImageToGallery.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**image_url** | **str** | The absolute url of the image (no local file). Maximum allowed size for image is 2MB. Allowed extensions for images are - jpeg, jpg, png, bmp, gif. | \n**name** | **str** | Name of the image. | [optional]\n```\n\n----------------------------------------\n\nTITLE: Updating Child Domain with Brevo Python API\nDESCRIPTION: Example of updating a reseller's child domain using the Brevo Python SDK. Requires API key or partner key authentication and takes child identifier, domain name, and domain update values as parameters.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/ResellerApi.md#2025-04-17_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport brevo_python\nfrom brevo_python.rest import ApiException\nfrom pprint import pprint\n\n# Configure API key authorization: api-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['api-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['api-key'] = 'Bearer'\n# Configure API key authorization: partner-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['partner-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['partner-key'] = 'Bearer'\n\n# create an instance of the API class\napi_instance = brevo_python.ResellerApi(brevo_python.ApiClient(configuration))\nchild_identifier = 'child_identifier_example' # str | Either auth key or id of reseller's child\ndomain_name = 'domain_name_example' # str | Pass the existing domain that needs to be updated\nupdate_child_domain = brevo_python.UpdateChildDomain() # UpdateChildDomain | value to update for sender domain\n\ntry:\n    # Update the sender domain of reseller's child based on the childIdentifier and domainName passed\n    api_instance.update_child_domain(child_identifier, domain_name, update_child_domain)\nexcept ApiException as e:\n    print(\"Exception when calling ResellerApi->update_child_domain: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Model Documentation Reference List\nDESCRIPTION: A markdown formatted list of links to documentation files for all model classes in the Brevo Python SDK. The models cover various functionalities including A/B testing, campaign management, contact management, and API operations.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/README.md#2025-04-17_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n## Documentation For Models\n\n - [AbTestCampaignResult](docs/AbTestCampaignResult.md)\n - [AbTestCampaignResultClickedLinks](docs/AbTestCampaignResultClickedLinks.md)\n - [AbTestCampaignResultStatistics](docs/AbTestCampaignResultStatistics.md)\n - [AbTestVersionClicks](docs/AbTestVersionClicks.md)\n - [AbTestVersionClicksInner](docs/AbTestVersionClicksInner.md)\n - [AbTestVersionStats](docs/AbTestVersionStats.md)\n - [AddChildDomain](docs/AddChildDomain.md)\n...\n```\n\n----------------------------------------\n\nTITLE: Defining CreateWhatsAppTemplate Class Properties in Python\nDESCRIPTION: This code snippet defines the properties of the CreateWhatsAppTemplate class. It includes required fields like name, language, category, and body_text, as well as optional fields like media_url, header_text, and source. Each property is described with its type and additional notes.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/CreateWhatsAppTemplate.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass CreateWhatsAppTemplate:\n    \"\"\"\n    Properties:\n    name (str): Name of the template\n    language (str): Language of the template. For Example : 'en' for English\n    category (str): Category of the template\n    media_url (str, optional): Absolute url of the media file (no local file) for the header. Use this field if you want to add media in Template header and headerText is empty. Allowed extensions for media files are: jpeg | png | mp4 | pdf\n    body_text (str): Body of the template. Maximum allowed characters are 1024\n    header_text (str, optional): Text content of the header in the template. Maximum allowed characters are 45. Use this field to add text content in template header and if mediaUrl is empty\n    source (str, optional): source of the template\n    \"\"\"\n```\n\n----------------------------------------\n\nTITLE: Defining Task Properties in Markdown\nDESCRIPTION: This markdown table defines the properties of a Task object, including their names, types, descriptions, and optional status. It covers fields such as id, task_type_id, name, contacts_ids, deals_ids, and companies_ids.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/Task.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**id** | **str** | Unique task id | [optional] \n**task_type_id** | **str** | Id for type of task e.g Call / Email / Meeting etc. | \n**name** | **str** | Name of task | \n**contacts_ids** | **list[int]** | Contact ids for contacts linked to this task | [optional] \n**deals_ids** | **list[str]** | Deal ids for deals a task is linked to | [optional] \n**companies_ids** | **list[str]** | Companies ids for companies a task is linked to | [optional] \n```\n\n----------------------------------------\n\nTITLE: Defining SetConfigDisplayCurrency Model Properties in Python\nDESCRIPTION: Defines the properties of the SetConfigDisplayCurrency model. It includes a single property 'code' which is a string representing the ISO 4217 compliant display currency code.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/SetConfigDisplayCurrency.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# SetConfigDisplayCurrency\n\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**code** | **str** | ISO 4217 compliant display currency code |\n```\n\n----------------------------------------\n\nTITLE: Dissociating an IP from sub-accounts using MasterAccountApi\nDESCRIPTION: This code demonstrates how to dissociate an IP address from sub-accounts using the Brevo Python library. It configures API keys, creates an instance of the MasterAccountApi, and handles potential exceptions during the API call.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/MasterAccountApi.md#2025-04-17_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport brevo_python\nfrom brevo_python.rest import ApiException\nfrom pprint import pprint\n\n# Configure API key authorization: api-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['api-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['api-key'] = 'Bearer'\n# Configure API key authorization: partner-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['partner-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['partner-key'] = 'Bearer'\n\n# create an instance of the API class\napi_instance = brevo_python.MasterAccountApi(brevo_python.ApiClient(configuration))\nbody = brevo_python.Body2() # Body2 | Ip address dissociation details\n\ntry:\n    # Dissociate an IP from sub-accounts\n    api_instance.corporate_sub_account_ip_dissociate_put(body)\nexcept ApiException as e:\n    print(\"Exception when calling MasterAccountApi->corporate_sub_account_ip_dissociate_put: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Getting Child Account Creation Status in Python\nDESCRIPTION: This code shows how to retrieve the creation status of a reseller's child account. It uses the get_child_account_creation_status method, which returns whether the account exists or not based on the provided identifier.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/ResellerApi.md#2025-04-17_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['api-key'] = 'YOUR_API_KEY'\nconfiguration.api_key['partner-key'] = 'YOUR_API_KEY'\n\napi_instance = brevo_python.ResellerApi(brevo_python.ApiClient(configuration))\nchild_identifier = 'child_identifier_example'\n\ntry:\n    api_response = api_instance.get_child_account_creation_status(child_identifier)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling ResellerApi->get_child_account_creation_status: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Defining Company Relationship Properties in Python\nDESCRIPTION: This code snippet defines properties for managing company relationships, including linking and unlinking contacts and deals. It specifies the data types and provides optional flags for each property.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/Body7.md#2025-04-17_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nclass Body7:\n    \"\"\"\n    Properties:\n        link_contact_ids (list[int]): Contact ids for contacts to be linked with company (optional)\n        unlink_contact_ids (list[int]): Contact ids for contacts to be unlinked from company (optional)\n        link_deals_ids (list[str]): Deals ids for deals to be linked with company (optional)\n        unlink_deals_ids (list[str]): Deals ids for deals to be unlinked from company (optional)\n    \"\"\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving CRM Task Types using Brevo Python API\nDESCRIPTION: This snippet demonstrates how to retrieve all task types from the Brevo CRM using the Python API. It doesn't require any input parameters and returns a list of available task types.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/CRMApi.md#2025-04-17_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n# create an instance of the API class\napi_instance = brevo_python.CRMApi(brevo_python.ApiClient(configuration))\n\ntry:\n    # Get all task types\n    api_response = api_instance.crm_tasktypes_get()\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling CRMApi->crm_tasktypes_get: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Attribution Metrics for Brevo Campaigns in Python\nDESCRIPTION: This code demonstrates how to use the Brevo Python SDK to get attribution metrics for one or more email campaigns. It initializes the EcommerceApi instance with proper configuration and makes an API call with optional parameters for date ranges and campaign IDs.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/EcommerceApi.md#2025-04-17_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n# create an instance of the API class\napi_instance = brevo_python.EcommerceApi(brevo_python.ApiClient(configuration))\nperiod_from = '2013-10-20T19:20:30+01:00' # datetime | When getting metrics for a specific period, define the starting datetime in RFC3339 format (optional)\nperiod_to = '2013-10-20T19:20:30+01:00' # datetime | When getting metrics for a specific period, define the end datetime in RFC3339 format (optional)\nemail_campaign_id = [3.4] # list[float] | The email campaign id(s) to get metrics for (optional)\n\ntry:\n    # Get attribution metrics for one or more Brevo campaigns\n    api_response = api_instance.ecommerce_attribution_metrics_get(period_from=period_from, period_to=period_to, email_campaign_id=email_campaign_id)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling EcommerceApi->ecommerce_attribution_metrics_get: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Defining SendWhatsappMessage Properties in Markdown\nDESCRIPTION: This snippet outlines the properties of the SendWhatsappMessage model, including their names, types, descriptions, and optional status. It provides details for template_id, text, sender_number, params, and contact_numbers fields.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/SendWhatsappMessage.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**template_id** | **int** | ID of the template to send | [optional] \n**text** | **str** | Text to be sent as message body (will be overridden if templateId is passed in the same request) | [optional] \n**sender_number** | **str** | WhatsApp Number with country code. Example, 85264318721 | \n**params** | **object** | Pass the set of attributes to customize the template. For example, {\"FNAME\":\"Joe\", \"LNAME\":\"Doe\"}. | [optional] \n**contact_numbers** | **list[str]** | List of phone numbers of the contacts | \n```\n\n----------------------------------------\n\nTITLE: Retrieving a WhatsApp Campaign with Python\nDESCRIPTION: This snippet shows how to retrieve details of a specific WhatsApp campaign using the Brevo Python client. It sets up API authentication, creates an API instance, and calls the get_whats_app_campaign method with a campaign ID.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/WhatsappCampaignsApi.md#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport brevo_python\nfrom brevo_python.rest import ApiException\nfrom pprint import pprint\n\n# Configure API key authorization: api-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['api-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['api-key'] = 'Bearer'\n# Configure API key authorization: partner-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['partner-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['partner-key'] = 'Bearer'\n\n# create an instance of the API class\napi_instance = brevo_python.WhatsAppCampaignsApi(brevo_python.ApiClient(configuration))\ncampaign_id = 789 # int | Id of the campaign\n\ntry:\n    # Get a WhatsApp campaign\n    api_response = api_instance.get_whats_app_campaign(campaign_id)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling WhatsAppCampaignsApi->get_whats_app_campaign: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Defining UpdateExternalFeed Class Properties in Python\nDESCRIPTION: This code snippet defines the properties of the UpdateExternalFeed class. It includes various attributes such as name, URL, authentication details, custom headers, and configuration options for retries and caching.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/UpdateExternalFeed.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\nname | **str** | Name of the feed | [optional] \nurl | **str** | URL of the feed | [optional] \nauth_type | **str** | Auth type of the feed:   * `basic`   * `token`   * `noAuth`  | [optional] \nusername | **str** | Username for authType `basic` | [optional] \npassword | **str** | Password for authType `basic` | [optional] \ntoken | **str** | Token for authType `token` | [optional] \nheaders | [**list[GetExternalFeedByUUIDHeaders]**](GetExternalFeedByUUIDHeaders.md) | Custom headers for the feed | [optional] \nmax_retries | **int** | Maximum number of retries on the feed url | [optional] \ncache | **bool** | Toggle caching of feed url response | [optional] [default to False]\n```\n\n----------------------------------------\n\nTITLE: GetUserPermission Model Properties\nDESCRIPTION: Property definitions for the GetUserPermission model class. Includes email address, user status, and granular feature privileges.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/GetUserPermission.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\nemail | str | Email address of the user. | \nstatus | str | Status of the invited user. | \nprivileges | list[GetUserPermissionPrivileges] | Granular feature permissions given to the user. |\n```\n\n----------------------------------------\n\nTITLE: GetSendersListSenders Model Properties Definition\nDESCRIPTION: Defines the properties of the GetSendersListSenders model class including sender ID, name, email, active status and optional list of dedicated IPs. Each property is documented with its type and description.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/GetSendersListSenders.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nid | int | Id of the sender\nname | str | From Name associated to the sender\nemail | str | From Email associated to the sender\nactive | bool | Status of sender (true=activated, false=deactivated)\nips | list[GetSendersListIps] | List of dedicated IP(s) available in the account. This data is displayed only for dedicated IPs\n```\n\n----------------------------------------\n\nTITLE: Setting Display Currency with Brevo Python SDK\nDESCRIPTION: This code shows how to set the ISO 4217 compliant display currency code for a Brevo account using the EcommerceApi. It creates an API instance, initializes the request payload, and handles the API response and exceptions.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/EcommerceApi.md#2025-04-17_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport brevo_python\nfrom brevo_python.rest import ApiException\nfrom pprint import pprint\n\n# Configure API key authorization: api-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['api-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['api-key'] = 'Bearer'\n# Configure API key authorization: partner-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['partner-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['partner-key'] = 'Bearer'\n\n# create an instance of the API class\napi_instance = brevo_python.EcommerceApi(brevo_python.ApiClient(configuration))\nset_config_display_currency = brevo_python.SetConfigDisplayCurrency() # SetConfigDisplayCurrency | set ISO 4217 compliant display currency code payload\n\ntry:\n    # Set the ISO 4217 compliant display currency code for your Brevo account\n    api_response = api_instance.set_config_display_currency(set_config_display_currency)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling EcommerceApi->set_config_display_currency: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Configuring Brevo Python SDK API Keys\nDESCRIPTION: Sets up API key authorization for both api-key and partner-key configurations in the Brevo Python SDK. Includes optional Bearer prefix setup.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/ContactsApi.md#2025-04-17_snippet_22\n\nLANGUAGE: python\nCODE:\n```\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['api-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['api-key'] = 'Bearer'\n# Configure API key authorization: partner-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['partner-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['partner-key'] = 'Bearer'\n```\n\n----------------------------------------\n\nTITLE: Defining GetWebhookAuth Model Properties in Python\nDESCRIPTION: This code snippet defines the properties of the GetWebhookAuth model. It includes two optional properties: 'type' for the authentication type and 'token' for the webhook authentication token.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/GetWebhookAuth.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# GetWebhookAuth\n\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**type** | **str** | Type of authentication | [optional] \n**token** | **str** | Webhook authentication token | [optional]\n```\n\n----------------------------------------\n\nTITLE: Python InviteAdminUserPrivileges Model Schema\nDESCRIPTION: Defines a data model with two optional properties: 'feature' for specifying feature names and 'permissions' for listing associated feature permissions. Both fields are optional and use basic Python data types - string for feature and list of strings for permissions.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/InviteAdminUserPrivileges.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfeature: str       # Feature name (optional)\npermissions: list[str] # Permissions for a given feature (optional)\n```\n\n----------------------------------------\n\nTITLE: Installing Brevo Python via Setuptools\nDESCRIPTION: Command to install the Brevo Python client library using setuptools.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/README.md#2025-04-17_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\npython setup.py install --user\n```\n\n----------------------------------------\n\nTITLE: Defining GetWhatsappCampaignOverview Class Properties in Python\nDESCRIPTION: This code snippet defines the properties of the GetWhatsappCampaignOverview class. It includes various attributes related to a WhatsApp campaign, such as ID, name, status, scheduling information, sender details, statistics, template, and timestamps. Some properties are optional and have specific format requirements.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/GetWhatsappCampaignOverview.md#2025-04-17_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nclass GetWhatsappCampaignOverview:\n    \"\"\"\n    Properties:\n        id (int): ID of the WhatsApp Campaign\n        campaign_name (str): Name of the WhatsApp Campaign\n        campaign_status (str): Status of the WhatsApp Campaign\n        scheduled_at (str): UTC date-time on which WhatsApp campaign is scheduled. Should be in YYYY-MM-DDTHH:mm:ss.SSSZ format [optional]\n        sender_number (str): Sender of the WhatsApp Campaign\n        stats (WhatsappCampStats): [optional]\n        template (WhatsappCampTemplate): \n        created_at (str): Creation UTC date-time of the WhatsApp campaign (YYYY-MM-DDTHH:mm:ss.SSSZ)\n        modified_at (str): UTC date-time of last modification of the WhatsApp campaign (YYYY-MM-DDTHH:mm:ss.SSSZ)\n    \"\"\"\n```\n\n----------------------------------------\n\nTITLE: Python GetSmsCampaign Model Properties\nDESCRIPTION: Property definitions for an SMS campaign model including required fields like ID, name, status, content and sender, as well as optional fields like scheduled time. Properties use standard Python types including int, str and object.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/GetSmsCampaign.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass GetSmsCampaign:\n    id: int           # ID of the SMS Campaign\n    name: str         # Name of the SMS Campaign\n    status: str       # Status of the SMS Campaign\n    content: str      # Content of the SMS Campaign\n    scheduled_at: str # UTC date-time for scheduling (YYYY-MM-DDTHH:mm:ss.SSSZ)\n    sender: str       # Sender of the SMS Campaign\n    created_at: str   # Creation UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ)\n    modified_at: str  # Last modification UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ)\n    recipients: object\n    statistics: object\n```\n\n----------------------------------------\n\nTITLE: GetExternalFeedByUUID Model Properties Table\nDESCRIPTION: Markdown table documenting the properties of the GetExternalFeedByUUID model, including data types, descriptions and optional flags. Covers feed identification, authentication, configuration and timestamp fields.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/GetExternalFeedByUUID.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**id** | **str** | ID of the feed | \n**name** | **str** | Name of the feed | \n**url** | **str** | URL of the feed | \n**auth_type** | **str** | Auth type of the feed: * `basic` * `token` * `noAuth`  | \n**username** | **str** | Username for authType `basic` | [optional] \n**password** | **str** | Password for authType `basic` | [optional] \n**token** | **str** | Token for authType `token` | [optional] \n**headers** | **list[GetExternalFeedByUUIDHeaders]** | Custom headers for the feed | \n**max_retries** | **int** | Maximum number of retries on the feed url | \n**cache** | **bool** | Toggle caching of feed url response | \n**created_at** | **datetime** | Datetime on which the feed was created | \n**modified_at** | **datetime** | Datetime on which the feed was modified |\n```\n\n----------------------------------------\n\nTITLE: GetExtendedList Model Properties Table in Markdown\nDESCRIPTION: Markdown table defining the properties, types, descriptions, and optional status of the GetExtendedList model fields. Includes properties for list identification, subscriber counts, folder reference, creation timestamp, and campaign statistics.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/GetExtendedList.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**id** | **int** | ID of the list | \n**name** | **str** | Name of the list | \n**total_blacklisted** | **int** | Number of blacklisted contacts in the list | \n**total_subscribers** | **int** | Number of contacts in the list | \n**unique_subscribers** | **int** | Number of unique contacts in the list | \n**folder_id** | **int** | ID of the folder | \n**created_at** | **str** | Creation UTC date-time of the list (YYYY-MM-DDTHH:mm:ss.SSSZ) | \n**campaign_stats** | [**list[GetExtendedListCampaignStats]**](GetExtendedListCampaignStats.md) |  | [optional] \n**dynamic_list** | **bool** | Status telling if the list is dynamic or not (true=dynamic, false=not dynamic) | [optional]\n```\n\n----------------------------------------\n\nTITLE: Deleting Hardbounces in Brevo\nDESCRIPTION: Example of deleting hardbounces using the Brevo API. This functionality should be used carefully, especially in cases of temporary ISP failures. Requires API key authentication.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/TransactionalEmailsApi.md#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport brevo_python\nfrom brevo_python.rest import ApiException\nfrom pprint import pprint\n\n# Configure API key authorization: api-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['api-key'] = 'YOUR_API_KEY'\n```\n\n----------------------------------------\n\nTITLE: GetWebhook Data Model Properties in Python\nDESCRIPTION: Defines the properties of the GetWebhook model class including required fields like URL, ID, events, type and timestamps, as well as optional fields for batching, authentication and custom headers. Used for configuring and managing webhooks in the Brevo platform.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/GetWebhook.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass GetWebhook:\n    url: str          # URL of the webhook\n    id: int           # ID of the webhook\n    description: str  # Description of the webhook\n    events: list[str] # List of webhook events\n    type: str         # Type of webhook (marketing or transactional)\n    created_at: str   # Creation UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ)\n    modified_at: str  # Last modification UTC date-time\n    batched: bool     # Optional: To send batched webhooks\n    auth: GetWebhookAuth  # Optional: Authentication settings\n    headers: list[GetWebhookHeaders]  # Optional: Custom headers\n```\n\n----------------------------------------\n\nTITLE: Defining GetReportsReports Properties in Markdown\nDESCRIPTION: Lists the properties of the GetReportsReports model, including their names, types, and descriptions. Each property represents a specific metric or statistic related to email campaign performance.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/GetReportsReports.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# GetReportsReports\n\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**_date** | **date** | Date of the statistics | \n**requests** | **int** | Number of requests for the date | \n**delivered** | **int** | Number of delivered emails for the date | \n**hard_bounces** | **int** | Number of hardbounces for the date | \n**soft_bounces** | **int** | Number of softbounces for the date | \n**clicks** | **int** | Number of clicks for the date | \n**unique_clicks** | **int** | Number of unique clicks for the date | \n**opens** | **int** | Number of openings for the date | \n**unique_opens** | **int** | Number of unique openings for the date | \n**spam_reports** | **int** | Number of complaints (spam reports) for the date | \n**blocked** | **int** | Number of blocked emails for the date | \n**invalid** | **int** | Number of invalid emails for the date | \n**unsubscribed** | **int** | Number of unsubscribed emails for the date | \n```\n\n----------------------------------------\n\nTITLE: Defining Inviteuser Model Properties\nDESCRIPTION: Defines the properties of the Inviteuser model including email address, feature access flag, and privileges list. The model is used when inviting new users to a Brevo organization.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/Inviteuser.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name | Type | Description | Notes |\n| ------------ | ------------- | ------------- | ------------- |\n| **email** | **str** | Email address for the organization | |\n| **all_features_access** | **bool** | All access to the features | |\n| **privileges** | **list[InviteuserPrivileges]** | | |\n```\n\n----------------------------------------\n\nTITLE: Installing Brevo Python via pip\nDESCRIPTION: Command to install the Brevo Python client library using pip package manager.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/README.md#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npip install brevo-python\n```\n\n----------------------------------------\n\nTITLE: Listing All Child Accounts with Brevo Python SDK\nDESCRIPTION: This snippet demonstrates how to retrieve a paginated list of all child accounts using the Brevo Python SDK. It sets up API key authorization, creates a ResellerApi instance, and calls get_reseller_childs with optional pagination parameters.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/ResellerApi.md#2025-04-17_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport brevo_python\nfrom brevo_python.rest import ApiException\nfrom pprint import pprint\n\n# Configure API key authorization: api-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['api-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['api-key'] = 'Bearer'\n# Configure API key authorization: partner-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['partner-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['partner-key'] = 'Bearer'\n\n# create an instance of the API class\napi_instance = brevo_python.ResellerApi(brevo_python.ApiClient(configuration))\nlimit = 10 # int | Number of documents for child accounts information per page (optional) (default to 10)\noffset = 0 # int | Index of the first document in the page (optional) (default to 0)\n\ntry:\n    # Get the list of all children accounts\n    api_response = api_instance.get_reseller_childs(limit=limit, offset=offset)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling ResellerApi->get_reseller_childs: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Defining SMTP Template Overview Properties in Markdown\nDESCRIPTION: Documents the properties of the GetSmtpTemplateOverview class including their types, descriptions, and optional status. Properties cover template identification, content, sender information, and timestamps.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/GetSmtpTemplateOverview.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# GetSmtpTemplateOverview\n\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**id** | **int** | ID of the template | \n**name** | **str** | Name of the template | \n**subject** | **str** | Subject of the template | \n**is_active** | **bool** | Status of template (true&#x3D;active, false&#x3D;inactive) | \n**test_sent** | **bool** | Status of test sending for the template (true&#x3D;test email has been sent, false&#x3D;test email has not been sent) | \n**sender** | [**GetSmtpTemplateOverviewSender**](GetSmtpTemplateOverviewSender.md) |  | \n**reply_to** | **str** | Email defined as the \\\"Reply to\\\" for the template | \n**to_field** | **str** | Customisation of the \\\"to\\\" field for the template | \n**tag** | **str** | Tag of the template | \n**html_content** | **str** | HTML content of the template | \n**created_at** | **str** | Creation UTC date-time of the template (YYYY-MM-DDTHH:mm:ss.SSSZ) | \n**modified_at** | **str** | Last modification UTC date-time of the template (YYYY-MM-DDTHH:mm:ss.SSSZ) | \n**doi_template** | **bool** | It is true if template is a valid Double opt-in (DOI) template, otherwise it is false. This field will be available only in case of single template detail call. | [optional]\n```\n\n----------------------------------------\n\nTITLE: Retrieving SMS Campaign - Python SDK Example\nDESCRIPTION: Example code showing how to retrieve details of a specific SMS campaign using its ID. Returns a GetSmsCampaign object with campaign information.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/SMSCampaignsApi.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport brevo_python\nfrom brevo_python.rest import ApiException\nfrom pprint import pprint\n\n# Configure API key authorization: api-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['api-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['api-key'] = 'Bearer'\n# Configure API key authorization: partner-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['partner-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['partner-key'] = 'Bearer'\n\n# create an instance of the API class\napi_instance = brevo_python.SMSCampaignsApi(brevo_python.ApiClient(configuration))\ncampaign_id = 789 # int | id of the SMS campaign\n\ntry:\n    # Get an SMS campaign\n    api_response = api_instance.get_sms_campaign(campaign_id)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling SMSCampaignsApi->get_sms_campaign: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Defining CreateCouponCollection Model Properties in Markdown\nDESCRIPTION: This snippet outlines the properties of the CreateCouponCollection model, including their names, types, descriptions, and optional status. It covers fields for naming the collection, setting default coupons, expiration dates, and configuring alert thresholds.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/CreateCouponCollection.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\nname | **str** | Name of the coupons collection | \ndefault_coupon | **str** | Default coupons collection name | \nexpiration_date | **datetime** | Specify an expiration date for the coupon collection in RFC3339 format. Use null to remove the expiration date. | [optional] \nremaining_days_alert | **int** | Send a notification alert (email) when the remaining days until the expiration date are equal or fall bellow this number. Use null to disable alerts. | [optional] \nremaining_coupons_alert | **int** | Send a notification alert (email) when the remaining coupons count is equal or fall bellow this number. Use null to disable alerts. | [optional] \n```\n\n----------------------------------------\n\nTITLE: Defining DealAttributesInner Model Properties in Markdown\nDESCRIPTION: Documentation table describing the properties of the DealAttributesInner model class, including property names, data types, and notes about optionality.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/DealAttributesInner.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# DealAttributesInner\n\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**internal_name** | **str** |  | [optional] \n**label** | **str** |  | [optional] \n**attribute_type_name** | **str** |  | [optional] \n**attribute_options** | **list[object]** |  | [optional] \n**is_required** | **bool** |  | [optional] \n```\n\n----------------------------------------\n\nTITLE: GetFolder Model Properties Definition - Python\nDESCRIPTION: Defines the data structure for a contact folder with properties for ID, name, and various contact counts. Properties include folder identification, folder name, count of blacklisted contacts, total contacts, and unique contacts in the folder.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/GetFolder.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nid: int              # ID of the folder\nname: str             # Name of the folder\ntotal_blacklisted: int # Number of blacklisted contacts in the folder\ntotal_subscribers: int # Number of contacts in the folder\nunique_subscribers: int # Number of unique contacts in the folder\n```\n\n----------------------------------------\n\nTITLE: Defining GetAccountPlan Properties - Python Model Class\nDESCRIPTION: Property definitions for the GetAccountPlan model class that stores account plan information. Includes type, credits type, remaining credits, start/end dates for subscription plans, and user limits for reseller accounts.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/GetAccountPlan.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ntype: str        # Displays the plan type of the user\ncredits_type: str  # Type of credit (e.g. \"Send Limit\" for email sending quota)\ncredits: float     # Remaining credits of the user\nstart_date: date   # Plan start date (subscription/reseller plans only)\nend_date: date     # Plan end date (subscription/reseller plans only)\nuser_limit: int    # Total number of child accounts allowed (reseller accounts only)\n```\n\n----------------------------------------\n\nTITLE: Defining GetIp Model Properties in Markdown\nDESCRIPTION: This snippet outlines the properties of the GetIp model, including their names, types, and descriptions. It covers the IP's unique identifier, the IP address itself, its active status, and the associated domain.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/GetIp.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# GetIp\n\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**id** | **int** | ID of the dedicated IP | \n**ip** | **str** | Dedicated IP | \n**active** | **bool** | Status of the IP (true&#x3D;active, false&#x3D;inactive) | \n**domain** | **str** | Domain associated to the IP | \n```\n\n----------------------------------------\n\nTITLE: Defining GetSendersList Model Properties in Markdown\nDESCRIPTION: This snippet defines the properties of the GetSendersList model using a markdown table. It specifies the 'senders' property as a list of GetSendersListSenders objects, which represents the list of senders available in the user's account.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/GetSendersList.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**senders** | [**list[GetSendersListSenders]**](GetSendersListSenders.md) | List of the senders available in your account | [optional] \n```\n\n----------------------------------------\n\nTITLE: Defining FileData Model Properties in Markdown\nDESCRIPTION: This snippet defines the properties of the FileData model, including their names, types, descriptions, and optional status. It covers attributes like file name, author ID, associated IDs, file size, and creation timestamp.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/FileData.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**name** | **str** | Name of uploaded file | [optional] \n**author_id** | **str** | Account id of user which created the file | [optional] \n**contact_id** | **int** | Contact id of contact on which file is uploaded | [optional] \n**deal_id** | **str** | Deal id linked to a file | [optional] \n**company_id** | **str** | Company id linked to a file | [optional] \n**size** | **int** | Size of file in bytes | [optional] \n**created_at** | **datetime** | File created date/time | [optional] \n```\n\n----------------------------------------\n\nTITLE: Defining AddCredits Model Properties in Brevo SDK\nDESCRIPTION: Documentation for the AddCredits model class which allows adding SMS or email credits to a child account. The model contains two optional properties: 'sms' for SMS credits and 'email' for email credits. At least one of these properties must be specified.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/AddCredits.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# AddCredits\n\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**sms** | **int** | Required if email credits are empty. SMS credits to be added to the child account | [optional] \n**email** | **int** | Required if sms credits are empty. Email credits to be added to the child account | [optional]\n```\n\n----------------------------------------\n\nTITLE: SubAccountAppsToggleRequest Properties Table\nDESCRIPTION: Markdown table defining the properties of the SubAccountAppsToggleRequest model, including property names, types, descriptions, and optional status. Each property is a boolean flag that controls access to different platform features for sub-accounts.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/SubAccountAppsToggleRequest.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\ninbox | **bool** | Set this field to enable or disable Inbox on the sub-account / Not applicable on ENTv2 | [optional] \nwhatsapp | **bool** | Set this field to enable or disable Whatsapp campaigns on the sub-account | [optional] \nautomation | **bool** | Set this field to enable or disable Automation on the sub-account | [optional] \nemail_campaigns | **bool** | Set this field to enable or disable Email Campaigns on the sub-account | [optional] \nsms_campaigns | **bool** | Set this field to enable or disable SMS Marketing on the sub-account | [optional] \nlanding_pages | **bool** | Set this field to enable or disable Landing pages on the sub-account | [optional] \ntransactional_emails | **bool** | Set this field to enable or disable Transactional Email on the sub-account | [optional] \ntransactional_sms | **bool** | Set this field to enable or disable Transactional SMS on the sub-account | [optional] \nfacebook_ads | **bool** | Set this field to enable or disable Facebook ads on the sub-account | [optional] \nweb_push | **bool** | Set this field to enable or disable Web Push on the sub-account | [optional] \nmeetings | **bool** | Set this field to enable or disable Meetings on the sub-account | [optional] \nconversations | **bool** | Set this field to enable or disable Conversations on the sub-account | [optional] \ncrm | **bool** | Set this field to enable or disable Sales CRM on the sub-account | [optional]\n```\n\n----------------------------------------\n\nTITLE: WhatsApp Template Properties Schema Definition - Python\nDESCRIPTION: Defines the data structure for WhatsApp templates with required and optional fields. Properties include template ID, name, status, language, category, error reason, and timestamps for creation and modification.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/GetWATemplatesTemplates.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**id** | **str** | id of the template | \n**name** | **str** | Name of the WhatsApp template | \n**status** | **str** | Status of the WhatsApp template | \n**language** | **str** | Language in which template exists | \n**category** | **str** | category of the template | \n**error_reason** | **str** | Error reason in the template creation | [optional] \n**created_at** | **str** | Creation UTC date-time of the whatsApp template (YYYY-MM-DDTHH:mm:ss.SSSZ) | \n**modified_at** | **str** | UTC date-time of last modification of the whatsApp template (YYYY-MM-DDTHH:mm:ss.SSSZ) |\n```\n\n----------------------------------------\n\nTITLE: SendTransacSms Class Properties Definition\nDESCRIPTION: Defines the class properties for the SendTransacSms object used to send SMS messages. Properties include sender details, recipient information, message content, SMS type, tracking tags, webhooks, unicode support and organization prefix configuration.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/SendTransacSms.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass SendTransacSms:\n    sender = str  # Name of the sender, limited to 11 alphanumeric or 15 numeric characters\n    recipient = str  # Mobile number with country code\n    content = str  # Message content, may be split if over 160 characters\n    type = str  # Optional, defaults to 'transactional'\n    tag = str  # Optional message tag\n    web_url = str  # Optional webhook URL for event tracking\n    unicode_enabled = bool  # Optional, defaults to False\n    organisation_prefix = str  # Optional brand name prefix for messages\n```\n\n----------------------------------------\n\nTITLE: Defining UpdateEmailCampaign Class Properties in Python\nDESCRIPTION: This code snippet defines the properties of the UpdateEmailCampaign class, including their types, descriptions, and optional status. It covers various aspects of email campaign configuration such as content, scheduling, recipients, and A/B testing.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/UpdateEmailCampaign.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass UpdateEmailCampaign:\n    \"\"\"\n    Properties:\n        tag (str): Tag of the campaign (optional)\n        sender (UpdateEmailCampaignSender): Sender information (optional)\n        name (str): Name of the campaign (optional)\n        html_content (str): Body of the message in HTML (optional)\n        html_url (str): URL containing the email body (optional)\n        scheduled_at (str): UTC date-time for campaign execution (optional)\n        subject (str): Subject of the campaign (optional)\n        preview_text (str): Preview text or preheader of the email campaign (optional)\n        reply_to (str): Reply-to email address (optional)\n        to_field (str): Personalized 'To' field (optional)\n        recipients (UpdateEmailCampaignRecipients): Recipient information (optional)\n        attachment_url (str): URL of the attachment (optional)\n        inline_image_activation (bool): Status of inline image embedding (optional)\n        mirror_active (bool): Status of mirror links in campaign (optional)\n        recurring (bool): Type of trigger campaign (optional)\n        footer (str): Footer of the email campaign (optional)\n        header (str): Header of the email campaign (optional)\n        utm_campaign (str): Custom utm_campaign value (optional)\n        params (object): Attributes to customize 'classic' campaign (optional)\n        send_at_best_time (bool): Send campaign at best time (optional)\n        ab_testing (bool): Status of A/B Testing (optional)\n        subject_a (str): Subject A for A/B testing (optional)\n        subject_b (str): Subject B for A/B testing (optional)\n        split_rule (int): Size of test groups for A/B testing (optional)\n        winner_criteria (str): Metrics for determining winning version (optional)\n        winner_delay (int): Duration of A/B test in hours (optional)\n        ip_warmup_enable (bool): Enable IP warmup (optional)\n        initial_quota (int): Initial quota for IP warmup (optional)\n        increase_rate (int): Percentage increase rate for IP warmup (optional)\n        unsubscription_page_id (str): Unsubscription page ID (optional)\n        update_form_id (str): Update profile form ID (optional)\n    \"\"\"\n    # Property definitions would go here\n```\n\n----------------------------------------\n\nTITLE: Defining GetWhatsAppConfig Properties in Markdown\nDESCRIPTION: This snippet defines the properties of the GetWhatsAppConfig model, including their names, types, and descriptions. It covers details such as WhatsApp business account ID, sending limit, phone number quality, account status, and verification status.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/GetWhatsAppConfig.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**whatsapp_business_account_id** | **str** | Id of the WhatsApp business account | [optional] \n**sending_limit** | **str** | Sending limit Information of the WhatsApp API account | [optional] \n**phone_number_quality** | **str** | Quality status of phone number associated with WhatsApp account. There are three quality ratings. example - **High (GREEN) , Medium (YELLOW) and Low(RED)** | [optional] \n**whatsapp_business_account_status** | **str** | Status information related to WhatsApp Api account | [optional] \n**business_status** | **str** | Verification status information of the Business account | [optional] \n**phone_number_name_status** | **str** | Status of the name associated with WhatsApp Phone number | [optional] \n```\n\n----------------------------------------\n\nTITLE: Deal Model Properties Table in Markdown\nDESCRIPTION: Markdown table defining the properties of the Deal model including their types and descriptions. Properties include unique deal ID, deal attributes, linked contact IDs, and linked company IDs.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/Deal.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**id** | **str** | Unique deal id | [optional] \n**attributes** | **object** | Deal attributes with values | [optional] \n**linked_contacts_ids** | **list[int]** | Contact ids for contacts linked to this deal | [optional] \n**linked_companies_ids** | **list[str]** | Companies ids for companies linked to this deal | [optional]\n```\n\n----------------------------------------\n\nTITLE: Defining GetIps Model Properties in Markdown\nDESCRIPTION: This snippet defines the properties of the GetIps model using a markdown table. It specifies the name, type, description, and additional notes for each property.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/GetIps.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name | Type | Description | Notes |\n| ------------ | ------------- | ------------- | ------------- |\n| **ips** | [**list[GetIp]**](GetIp.md) | Dedicated IP(s) available on your account | \n```\n\n----------------------------------------\n\nTITLE: Properties Table Definition for ConversationsMessageFile Model\nDESCRIPTION: Markdown table defining the properties of the ConversationsMessageFile model including filename, size, is_image, url, and image_info fields with their respective types and descriptions.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/ConversationsMessageFile.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**filename** | **str** | Name of the file | [optional] \n**size** | **int** | Size in bytes | [optional] \n**is_image** | **bool** | Whether the file is an image | [optional] \n**url** | **str** | URL of the file | [optional] \n**image_info** | [**ConversationsMessageFileImageInfo**](ConversationsMessageFileImageInfo.md) |  | [optional]\n```\n\n----------------------------------------\n\nTITLE: Defining GetSmtpTemplates Model Properties in Python\nDESCRIPTION: This code snippet defines the properties of the GetSmtpTemplates model. It includes a count of transactional email templates and a list of SMTP template overviews.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/GetSmtpTemplates.md#2025-04-17_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n# GetSmtpTemplates\n\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**count** | **int** | Count of transactional email templates | [optional] \n**templates** | [**list[GetSmtpTemplateOverview]**](GetSmtpTemplateOverview.md) |  | [optional]\n```\n\n----------------------------------------\n\nTITLE: Defining NoteData Model Properties in Markdown\nDESCRIPTION: This snippet defines the properties of the NoteData model. It includes the property names, their data types, descriptions, and optional status. The properties cover text content and associated IDs for contacts, deals, and companies.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/NoteData.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**text** | **str** | Text content of a note | \n**contact_ids** | **list[int]** | Contact Ids linked to a note | [optional] \n**deal_ids** | **list[str]** | Deal Ids linked to a note | [optional] \n**company_ids** | **list[str]** | Company Ids linked to a note | [optional]\n```\n\n----------------------------------------\n\nTITLE: Creating List with Brevo Python\nDESCRIPTION: Creates a new contact list using the Brevo API. Shows list creation with proper configuration and error handling.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/ContactsApi.md#2025-04-17_snippet_6\n\nLANGUAGE: python\nCODE:\n```\napi_instance = brevo_python.ContactsApi(brevo_python.ApiClient(configuration))\ncreate_list = brevo_python.CreateList()\n\ntry:\n    api_response = api_instance.create_list(create_list)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling ContactsApi->create_list: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Defining UpdateBatchContacts Model in Python for Brevo API\nDESCRIPTION: This code snippet defines the UpdateBatchContacts model with a single property 'contacts'. The property is a list of UpdateBatchContactsContacts objects, used for updating multiple contacts in a batch operation.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/UpdateBatchContacts.md#2025-04-17_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n# UpdateBatchContacts\n\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\ncontacts | [**list[UpdateBatchContactsContacts]**](UpdateBatchContactsContacts.md) | List of contacts to be updated | [optional] \n```\n\n----------------------------------------\n\nTITLE: Retrieving Attributed Product Sales for a Single Brevo Campaign in Python\nDESCRIPTION: This code shows how to retrieve attributed product sales for a specific Brevo campaign using the Python SDK. It requires specifying both the campaign type and campaign ID to fetch the conversion data.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/EcommerceApi.md#2025-04-17_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n# create an instance of the API class\napi_instance = brevo_python.EcommerceApi(brevo_python.ApiClient(configuration))\nconversion_source = 'conversion_source_example' # str | The Brevo campaign type for which data will be retrieved\nconversion_source_id = 8.14 # float | The Brevo campaign id for which data will be retrieved\n\ntry:\n    # Get attributed product sales for a single Brevo campaign\n    api_response = api_instance.ecommerce_attribution_products_conversion_source_conversion_source_id_get(conversion_source, conversion_source_id)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling EcommerceApi->ecommerce_attribution_products_conversion_source_conversion_source_id_get: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Defining GetInboundEmailEventsEvents Model Properties in Python\nDESCRIPTION: This code snippet defines the properties of the GetInboundEmailEventsEvents model. It includes four properties: uuid (string), _date (datetime), sender (string), and recipient (string). Each property is documented with its type and description.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/GetInboundEmailEventsEvents.md#2025-04-17_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n# GetInboundEmailEventsEvents\n\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**uuid** | **str** | UUID that can be used to fetch additional data | \n**_date** | **datetime** | Date when email was received on SMTP relay | \n**sender** | **str** | Sender's email address | \n**recipient** | **str** | Recipient's email address | \n```\n\n----------------------------------------\n\nTITLE: CreateExternalFeed Model Properties Definition\nDESCRIPTION: Defines the properties of the CreateExternalFeed model including feed name, URL, authentication settings, custom headers, retry configuration and caching options. The model supports basic auth, token auth, and no auth configurations.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/CreateExternalFeed.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\nname | str | Name of the feed | \nurl | str | URL of the feed | \nauth_type | str | Auth type of the feed:   * `basic`   * `token`   * `noAuth`  | [optional] [default to 'noAuth']\nusername | str | Username for authType `basic` | [optional] \npassword | str | Password for authType `basic` | [optional] \ntoken | str | Token for authType `token` | [optional] \nheaders | list[GetExternalFeedByUUIDHeaders] | Custom headers for the feed | [optional] \nmax_retries | int | Maximum number of retries on the feed url | [optional] \ncache | bool | Toggle caching of feed url response | [optional] [default to False]\n```\n\n----------------------------------------\n\nTITLE: RemoveContactFromList Properties Table in Markdown\nDESCRIPTION: Markdown table defining the properties for removing contacts from a list, including emails array, IDs array, and boolean flag for removing all contacts. Specifies data types and optional parameters with their constraints.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/RemoveContactFromList.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**emails** | **list[str]** | Required if &#39;all&#39; is false. Emails to remove from a list. You can pass a maximum of 150 emails for removal in one request. | [optional] \n**ids** | **list[int]** | Mandatory if Emails are not passed, ignored otherwise. Emails to add to a list. You can pass a maximum of 150 emails for addition in one request. If you need to add the emails in bulk, please prefer /contacts/import api. | [optional] \n**all** | **bool** | Required if none of &#39;emails&#39; or &#39;ids&#39; are passed. Remove all existing contacts from a list.  A process will be created in this scenario. You can fetch the process details to know about the progress | [optional]\n```\n\n----------------------------------------\n\nTITLE: Defining Order Properties in Markdown\nDESCRIPTION: This snippet defines the properties of an Order object using a markdown table. It includes details such as ID, timestamps, status, amount, products, customer information, and optional fields like store ID and coupons.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/Order.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**id** | **str** | Unique ID of the order. | \n**created_at** | **str** | Event occurrence UTC date-time (YYYY-MM-DDTHH:mm:ssZ), when order is actually created. | \n**updated_at** | **str** | Event updated UTC date-time (YYYY-MM-DDTHH:mm:ssZ), when the status of the order is actually changed/updated. | \n**status** | **str** | State of the order. | \n**amount** | **float** | Total amount of the order, including all shipping expenses, tax and the price of items. | \n**store_id** | **str** | ID of store where the order is placed | [optional] \n**products** | [**list[OrderProducts]**](OrderProducts.md) |  | \n**email** | **str** | Email of the contact, Mandatory if \\\"phone\\\" field is not passed in \\\"billing\\\" parameter. | [optional] \n**billing** | [**OrderBilling**](OrderBilling.md) |  | [optional] \n**coupons** | **list[str]** | Coupons applied to the order. Stored case insensitive. | [optional] \n```\n\n----------------------------------------\n\nTITLE: Defining UpdateWhatsAppCampaign Model Properties in Python\nDESCRIPTION: This code snippet defines the properties of the UpdateWhatsAppCampaign model. It includes fields for campaign name, status, rescheduling date, and recipients. The properties are documented with their types, descriptions, and optional notes.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/UpdateWhatsAppCampaign.md#2025-04-17_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n# UpdateWhatsAppCampaign\n\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\ncampaign_name | **str** | Name of the campaign | [optional] \ncampaign_status | **str** | Status of the campaign | [optional] [default to 'scheduled']\nreschedule_for | **str** | Reschedule the sending UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ) of campaign. **Prefer to pass your timezone in date-time format for accurate result.For example: **2017-06-01T12:30:00+02:00** Use this field to update the scheduledAt of any existing draft or scheduled WhatsApp campaign.  | [optional] \nrecipients | [**CreateWhatsAppCampaignRecipients**](CreateWhatsAppCampaignRecipients.md) |  | [optional] \n```\n\n----------------------------------------\n\nTITLE: TaskReminder Class Properties Definition - Python\nDESCRIPTION: Defines three main properties of a TaskReminder class: value (integer for time amount), unit (string for time unit), and types (list of notification methods). These properties configure when and how task reminders are sent.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/TaskReminder.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\nvalue | int | Value of time unit before reminder is to be sent | \nunit | str | Unit of time before reminder is to be sent | \ntypes | list[str] | Type of task reminder e.g email, push |\n```\n\n----------------------------------------\n\nTITLE: Markdown Table Documentation for GetExtendedContactDetails Properties\nDESCRIPTION: Documents the properties, types and descriptions for the GetExtendedContactDetails model including contact identity fields, blacklist statuses, timestamps, list associations and attributes.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/GetExtendedContactDetails.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\nemail | str | Email address of the contact for which you requested the details | [optional] \nid | int | ID of the contact for which you requested the details | \nemail_blacklisted | bool | Blacklist status for email campaigns (true=blacklisted, false=not blacklisted) | \nsms_blacklisted | bool | Blacklist status for SMS campaigns (true=blacklisted, false=not blacklisted) | \ncreated_at | str | Creation UTC date-time of the contact (YYYY-MM-DDTHH:mm:ss.SSSZ) | \nmodified_at | str | Last modification UTC date-time of the contact (YYYY-MM-DDTHH:mm:ss.SSSZ) | \nlist_ids | list[int] |  | \nlist_unsubscribed | list[int] |  | [optional] \nattributes | object | Set of attributes of the contact | \nstatistics | GetExtendedContactDetailsStatistics |  |\n```\n\n----------------------------------------\n\nTITLE: Defining RemainingCreditModelReseller Class Properties in Python\nDESCRIPTION: This code snippet defines the properties of the RemainingCreditModelReseller class. It includes two float properties: 'sms' for remaining SMS credits and 'email' for remaining email credits in a reseller account.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/RemainingCreditModelReseller.md#2025-04-17_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nclass RemainingCreditModelReseller:\n\n    def __init__(self):\n        self.sms = None  # float: SMS Credits remaining for reseller account\n        self.email = None  # float: Email Credits remaining for reseller account\n```\n\n----------------------------------------\n\nTITLE: GetAttributesAttributes Model Schema Definition - Markdown\nDESCRIPTION: Schema definition for the GetAttributesAttributes model showing properties, types and descriptions. Includes required fields for name, category, type, enumeration values and calculated value formula.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/GetAttributesAttributes.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**name** | **str** | Name of the attribute | \n**category** | **str** | Category of the attribute | \n**type** | **str** | Type of the attribute | [optional] \n**enumeration** | [**list[GetAttributesEnumeration]**](GetAttributesEnumeration.md) | Parameter only available for \\\"category\\\" type attributes. | [optional] \n**calculated_value** | **str** | Calculated value formula | [optional]\n```\n\n----------------------------------------\n\nTITLE: Defining GetSmsEventReportEvents Model Properties in Python\nDESCRIPTION: This code snippet defines the properties of the GetSmsEventReportEvents model. It includes fields for phone number, date, message ID, event type, reason for bounce, reply, and tag. All fields are optional and have specific data types.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/GetSmsEventReportEvents.md#2025-04-17_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nclass GetSmsEventReportEvents:\n    \"\"\"\n    Properties:\n    phone_number: str\n        Phone number which has generated the event (optional)\n    _date: str\n        UTC date-time on which the event has been generated (optional)\n    message_id: str\n        Message ID which generated the event (optional)\n    event: str\n        Event which occurred (optional)\n    reason: str\n        Reason of bounce (only available if the event is hardbounce or softbounce) (optional)\n    reply: str\n        (optional)\n    tag: str\n        Tag of the SMS which generated the event (optional)\n    \"\"\"\n```\n\n----------------------------------------\n\nTITLE: Defining CorporateGroupDetailsResponseGroup Properties in Markdown\nDESCRIPTION: This snippet defines the properties of the CorporateGroupDetailsResponseGroup model, including their types and descriptions. It covers the id, group_name, and created_at fields, all of which are optional.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/CorporateGroupDetailsResponseGroup.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**id** | **str** | Group id | [optional] \n**group_name** | **str** | Name of the group | [optional] \n**created_at** | **str** | Group creation date | [optional] \n```\n\n----------------------------------------\n\nTITLE: Defining UpdateWebhook Class Properties in Python\nDESCRIPTION: This code snippet defines the properties of the UpdateWebhook class, including their types, descriptions, and optional status. It covers various aspects of webhook configuration such as URL, events, authentication, and custom headers.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/UpdateWebhook.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass UpdateWebhook:\n    \"\"\"\n    Attributes:\n        url (str): URL of the webhook [optional]\n        description (str): Description of the webhook [optional]\n        events (list[str]): Events triggering the webhook [optional]\n        domain (str): Inbound domain of webhook, used in case of event type `inbound` [optional]\n        batched (bool): To send batched webhooks [optional]\n        auth (GetWebhookAuth): Authentication details [optional]\n        headers (list[GetWebhookHeaders]): Custom headers to be send with webhooks [optional]\n    \"\"\"\n\n    def __init__(self):\n        self.url = None\n        self.description = None\n        self.events = None\n        self.domain = None\n        self.batched = None\n        self.auth = None\n        self.headers = None\n```\n\n----------------------------------------\n\nTITLE: Defining GetExtendedCampaignOverviewSender Properties in Markdown\nDESCRIPTION: Markdown table documenting the properties of the GetExtendedCampaignOverviewSender model. Includes field names, data types, descriptions and optional status.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/GetExtendedCampaignOverviewSender.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\nname | str | Sender name of the campaign | [optional] \nemail | str | Sender email of the campaign | [optional] \nid | int | Sender id of the campaign | [optional]\n```\n\n----------------------------------------\n\nTITLE: Defining OrderBilling Model Properties in Markdown\nDESCRIPTION: Specifies the properties of the OrderBilling model including address details, contact information, and payment method. Each property is defined with its name, type, description, and optional status.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/OrderBilling.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**address** | **str** | Full billing address. | [optional] \n**city** | **str** | Exact city of the address. | [optional] \n**country_code** | **str** | Billing country 2-letter ISO code. | [optional] \n**country** | **str** | Billing country name. | [optional] \n**phone** | **str** | Phone number to contact for further details about the order, Mandatory if \\\"email\\\" field is not passed. | [optional] \n**post_code** | **str** | Postcode for delivery and billing. | [optional] \n**payment_method** | **str** | How the visitor will pay for the item(s), e.g. paypal, check, etc. | [optional] \n**region** | **str** | Exact region (state/province) for delivery and billing. | [optional] \n```\n\n----------------------------------------\n\nTITLE: CreateDoiContact Properties Definition in Markdown\nDESCRIPTION: Defines the properties of the CreateDoiContact model including required email address, optional contact attributes, list IDs for inclusion/exclusion, template ID for double opt-in, and redirection URL settings.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/CreateDoiContact.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**email** | **str** | Email address where the confirmation email will be sent. This email address will be the identifier for all other contact attributes. | \n**attributes** | **dict(str, object)** | Pass the set of attributes and their values. These attributes must be present in your Brevo account. For eg. {'FNAME':'Elly', 'LNAME':'Roger', 'COUNTRIES':['India','China']} | [optional] \n**include_list_ids** | **list[int]** | Lists under user account where contact should be added | \n**exclude_list_ids** | **list[int]** | Lists under user account where contact should not be added | [optional] \n**template_id** | **int** | Id of the Double opt-in (DOI) template | \n**redirection_url** | **str** | URL of the web page that user will be redirected to after clicking on the double opt in URL. When editing your DOI template you can reference this URL by using the tag {{ params.DOIurl }}. |\n```\n\n----------------------------------------\n\nTITLE: Defining CompanyAttributesInner Model Properties in Python\nDESCRIPTION: This code snippet defines the properties of the CompanyAttributesInner model. It includes the property names, their types, and whether they are optional. The model has fields for internal name, label, attribute type name, attribute options, and a required flag.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/CompanyAttributesInner.md#2025-04-17_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n# CompanyAttributesInner\n\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\ninternal_name | **str** |  | [optional] \nlabel | **str** |  | [optional] \nattribute_type_name | **str** |  | [optional] \nattribute_options | **list[object]** |  | [optional] \nis_required | **bool** |  | [optional]\n```\n\n----------------------------------------\n\nTITLE: Defining Email Event Report Properties Schema in Markdown\nDESCRIPTION: Documents the properties of an email event report object including email address, timestamp, subject, message ID, event type, bounce reason, tags, IP address, links, sender details, and template information. Each property is defined with its data type and optionality status.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/GetEmailEventReportEvents.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\nemail | str | Email address which generates the event | \n_date | str | UTC date-time on which the event has been generated | \nsubject | str | Subject of the event | [optional] \nmessage_id | str | Message ID which generated the event | \nevent | str | Event which occurred | \nreason | str | Reason of bounce (only available if the event is hardbounce or softbounce) | [optional] \ntag | str | Tag of the email which generated the event | [optional] \nip | str | IP from which the user has opened the email or clicked on the link (only available if the event is opened or clicks) | [optional] \nlink | str | The link which is sent to the user (only available if the event is requests or opened or clicks) | [optional] \n_from | str | Sender email from which the emails are sent | [optional] \ntemplate_id | int | ID of the template (only available if the email is template based) | [optional]\n```\n\n----------------------------------------\n\nTITLE: Defining RemainingCreditModelChild Class Properties in Python\nDESCRIPTION: This code snippet defines the properties of the RemainingCreditModelChild class. It includes two float properties: 'sms' for remaining SMS credits and 'email' for remaining email credits of a child account.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/RemainingCreditModelChild.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass RemainingCreditModelChild:\n    \"\"\"\n    Properties:\n    Name | Type | Description | Notes\n    ------------ | ------------- | ------------- | -------------\n    sms | float | SMS Credits remaining for child account | \n    email | float | Email Credits remaining for child account | \n    \"\"\"\n```\n\n----------------------------------------\n\nTITLE: Defining ErrorModel Properties in Markdown for Brevo Python API\nDESCRIPTION: This snippet outlines the properties of the ErrorModel class used in the Brevo Python API. It defines two required string properties: 'code' for the error code and 'message' for a readable error description.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/ErrorModel.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# ErrorModel\n\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**code** | **str** | Error code displayed in case of a failure | \n**message** | **str** | Readable message associated to the failure | \n```\n\n----------------------------------------\n\nTITLE: Task Properties Schema Definition in Markdown\nDESCRIPTION: Markdown table defining the properties of the Body12 task model, including property names, types, descriptions and optional status. The model includes fields for basic task information, timing, assignments, and relationship links to contacts, deals and companies.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/Body12.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**name** | **str** | Name of task | [optional] \n**duration** | **int** | Duration of task in milliseconds [1 minute &#x3D; 60000 ms] | [optional] \n**task_type_id** | **str** | Id for type of task e.g Call / Email / Meeting etc. | [optional] \n**_date** | **datetime** | Task date/time | [optional] \n**notes** | **str** | Notes added to a task | [optional] \n**done** | **bool** | Task marked as done | [optional] \n**assign_to_id** | **str** | To assign a task to a user you can use either the account email or ID. | [optional] \n**contacts_ids** | **list[int]** | Contact ids for contacts linked to this task | [optional] \n**deals_ids** | **list[str]** | Deal ids for deals a task is linked to | [optional] \n**companies_ids** | **list[str]** | Companies ids for companies a task is linked to | [optional]\n```\n\n----------------------------------------\n\nTITLE: Retrieving Account Activity Logs with Brevo Python\nDESCRIPTION: This snippet demonstrates how to retrieve user activity logs using the MasterAccountApi. It shows how to set optional parameters for date range and pagination.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/MasterAccountApi.md#2025-04-17_snippet_19\n\nLANGUAGE: python\nCODE:\n```\n# create an instance of the API class\napi_instance = brevo_python.MasterAccountApi(brevo_python.ApiClient(configuration))\nstart_date = 'start_date_example' # str | Mandatory if endDate is used. Enter start date in UTC date (YYYY-MM-DD) format to filter the activity in your account. Maximum time period that can be selected is one month. Additionally, you can retrieve activity logs from the past 12 months from the date of your search. (optional)\nend_date = 'end_date_example' # str | Mandatory if startDate is used. Enter end date in UTC date (YYYY-MM-DD) format to filter the activity in your account. Maximum time period that can be selected is one month. (optional)\nlimit = 10 # int | Number of documents per page (optional) (default to 10)\noffset = 0 # int | Index of the first document in the page. (optional) (default to 0)\n\ntry:\n    # Get user activity logs\n    api_response = api_instance.get_account_activity(start_date=start_date, end_date=end_date, limit=limit, offset=offset)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling MasterAccountApi->get_account_activity: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: ExportWebhooksHistory Properties Table\nDESCRIPTION: Markdown table defining the properties, types, and descriptions for the ExportWebhooksHistory model. Includes parameters for date filtering, sorting, webhook types, events, and notification settings.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/ExportWebhooksHistory.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\ndays | int | Number of days in the past including today (positive integer). _Not compatible with 'startDate' and 'endDate'_ | [optional] \nstart_date | str | Mandatory if endDate is used. Starting date of the history (YYYY-MM-DD). Must be lower than equal to endDate | [optional] \nend_date | str | Mandatory if startDate is used. Ending date of the report (YYYY-MM-DD). Must be greater than equal to startDate | [optional] \nsort | str | Sorting order of records (asc or desc) | [optional] \ntype | str | Filter the history based on webhook type | \nevent | str | Filter the history for a specific event type | \nnotify_url | str | Webhook URL to receive CSV file link | \nwebhook_id | int | Filter the history for a specific webhook id | [optional] \nemail | str | Filter the history for a specific email | [optional] \nmessage_id | int | Filter the history for a specific message id. Applicable only for transactional webhooks. | [optional] \n```\n\n----------------------------------------\n\nTITLE: Fetching All External Feeds in Python using brevo-python\nDESCRIPTION: This snippet demonstrates how to fetch all external feeds using the brevo-python library. It configures API key authorization, initializes the ExternalFeedsApi client, and calls the get_all_external_feeds method with optional parameters for filtering and pagination.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/ExternalFeedsApi.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport brevo_python\nfrom brevo_python.rest import ApiException\nfrom pprint import pprint\n\n# Configure API key authorization: api-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['api-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['api-key'] = 'Bearer'\n# Configure API key authorization: partner-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['partner-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['partner-key'] = 'Bearer'\n\n# create an instance of the API class\napi_instance = brevo_python.ExternalFeedsApi(brevo_python.ApiClient(configuration))\nsearch = 'search_example' # str | Can be used to filter records by search keyword on feed name (optional)\nstart_date = '2013-10-20' # date | Mandatory if `endDate` is used. Starting date (YYYY-MM-DD) from which you want to fetch the list. Can be maximum 30 days older than current date. (optional)\nend_date = '2013-10-20' # date | Mandatory if `startDate` is used. Ending date (YYYY-MM-DD) till which you want to fetch the list. Maximum time period that can be selected is one month. (optional)\nsort = 'desc' # str | Sort the results in the ascending/descending order of record creation. Default order is **descending** if `sort` is not passed. (optional) (default to desc)\nauth_type = 'auth_type_example' # str | Filter the records by `authType` of the feed. (optional)\nlimit = 50 # int | Number of documents returned per page. (optional) (default to 50)\noffset = 0 # int | Index of the first document on the page. (optional) (default to 0)\n\ntry:\n    # Fetch all external feeds\n    api_response = api_instance.get_all_external_feeds(search=search, start_date=start_date, end_date=end_date, sort=sort, auth_type=auth_type, limit=limit, offset=offset)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling ExternalFeedsApi->get_all_external_feeds: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Defining PipelineStage Model Properties in Markdown\nDESCRIPTION: This snippet defines the properties of the PipelineStage model using a markdown table. It specifies two properties: 'id' and 'name', both of type string and marked as optional.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/PipelineStage.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**id** | **str** | Stage id | [optional] \n**name** | **str** | Stage name | [optional]\n```\n\n----------------------------------------\n\nTITLE: Defining AbTestCampaignResult Class Properties in Python\nDESCRIPTION: This code snippet defines the properties of the AbTestCampaignResult class. It includes attributes related to the winning campaign version, performance metrics, and links to additional statistical information.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/AbTestCampaignResult.md#2025-04-17_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nclass AbTestCampaignResult:\n    \"\"\"\n    Attributes:\n      winning_version (str): Winning Campaign Info. pending = Campaign has been picked for sending and winning version is yet to be decided, tie = A tie happened between both the versions, notAvailable = Campaign has not yet been picked for sending.\n      winning_criteria (str): Criteria choosen for winning version (Open/Click)\n      winning_subject_line (str): Subject Line of current winning version\n      open_rate (str): Open rate for current winning version\n      click_rate (str): Click rate for current winning version\n      winning_version_rate (str): Open/Click rate for the winner version\n      statistics (AbTestCampaignResultStatistics): \n      clicked_links (AbTestCampaignResultClickedLinks): \n    \"\"\"\n```\n\n----------------------------------------\n\nTITLE: Defining GetTransacBlockedContactsContacts Properties in Markdown\nDESCRIPTION: This snippet defines the properties of the GetTransacBlockedContactsContacts class using a markdown table. It includes email, sender_email, reason, and blocked_at fields with their types and descriptions.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/GetTransacBlockedContactsContacts.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**email** | **str** | Email address of the blocked or unsubscribed contact | \n**sender_email** | **str** | Sender email address of the blocked or unsubscribed contact | \n**reason** | [**GetTransacBlockedContactsReason**](GetTransacBlockedContactsReason.md) |  | \n**blocked_at** | **str** | Date when the contact was blocked or unsubscribed on | \n```\n\n----------------------------------------\n\nTITLE: CreateEmailCampaign Properties Documentation in Markdown\nDESCRIPTION: Markdown documentation detailing all available properties for the CreateEmailCampaign model, including data types, descriptions, and optional status for each field. Covers campaign basics, content settings, scheduling, A/B testing parameters, and advanced features like IP warmup.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/CreateEmailCampaign.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# CreateEmailCampaign\n\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**tag** | **str** | Tag of the campaign | [optional] \n**sender** | [**CreateEmailCampaignSender**](CreateEmailCampaignSender.md) |  | \n**name** | **str** | Name of the campaign | \n**html_content** | **str** | Mandatory if htmlUrl and templateId are empty. Body of the message (HTML) | [optional] \n**html_url** | **str** | Mandatory if htmlContent and templateId are empty. Url to the message (HTML) | [optional] \n**template_id** | **int** | Mandatory if htmlContent and htmlUrl are empty. Id of the transactional email template with status 'active'. Used to copy only its content fetched from htmlContent/htmlUrl to an email campaign for RSS feature. | [optional] \n**scheduled_at** | **str** | Sending UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ). Prefer to pass your timezone in date-time format for accurate result. If sendAtBestTime is set to true, your campaign will be sent according to the date passed (ignoring the time part). | [optional] \n**subject** | **str** | Subject of the campaign. Mandatory if abTesting is false. Ignored if abTesting is true. | [optional] \n**preview_text** | **str** | Preview text or preheader of the email campaign | [optional] \n**reply_to** | **str** | Email on which the campaign recipients will be able to reply to | [optional] \n**to_field** | **str** | To personalize the «To» Field. If you want to include the first name and last name of your recipient, add {FNAME} {LNAME}. These contact attributes must already exist in your Brevo account. If input parameter 'params' used please use {{contact.FNAME}} {{contact.LNAME}} for personalization | [optional] \n**recipients** | [**CreateEmailCampaignRecipients**](CreateEmailCampaignRecipients.md) |  | [optional] \n**attachment_url** | **str** | Absolute url of the attachment (no local file). Extension allowed: xlsx, xls, ods, docx, docm, doc, csv, pdf, txt, gif, jpg, jpeg, png, tif, tiff, rtf, bmp, cgm, css, shtml, html, htm, zip, xml, ppt, pptx, tar, ez, ics, mobi, msg, pub and eps | [optional] \n**inline_image_activation** | **bool** | Use true to embedded the images in your email. Final size of the email should be less than 4MB. Campaigns with embedded images can not be sent to more than 5000 contacts | [optional] [default to False]\n**mirror_active** | **bool** | Use true to enable the mirror link | [optional] \n**footer** | **str** | Footer of the email campaign | [optional] \n**header** | **str** | Header of the email campaign | [optional] \n**utm_campaign** | **str** | Customize the utm_campaign value. If this field is empty, the campaign name will be used. Only alphanumeric characters and spaces are allowed | [optional] \n**params** | **object** | Pass the set of attributes to customize the type classic campaign. For example, {\\\"FNAME\\\":\\\"Joe\\\", \\\"LNAME\\\":\\\"Doe\\\"}. Only available if 'type' is 'classic'. It's considered only if campaign is in New Template Language format. The New Template Language is dependent on the values of 'subject', 'htmlContent/htmlUrl', 'sender.name' & 'toField' | [optional] \n**send_at_best_time** | **bool** | Set this to true if you want to send your campaign at best time. | [optional] [default to False]\n**ab_testing** | **bool** | Status of A/B Test. abTesting = false means it is disabled, & abTesting = true means it is enabled. 'subjectA', 'subjectB', 'splitRule', 'winnerCriteria' & 'winnerDelay' will be considered when abTesting is set to true. 'subjectA' & 'subjectB' are mandatory together & 'subject' if passed is ignored. Can be set to true only if 'sendAtBestTime' is 'false'. You will be able to set up two subject lines for your campaign and send them to a random sample of your total recipients. Half of the test group will receive version A, and the other half will receive version B | [optional] [default to False]\n**subject_a** | **str** | Subject A of the campaign. Mandatory if abTesting = true. subjectA & subjectB should have unique value | [optional] \n**subject_b** | **str** | Subject B of the campaign. Mandatory if abTesting = true. subjectA & subjectB should have unique value | [optional] \n**split_rule** | **int** | Add the size of your test groups. Mandatory if abTesting = true & 'recipients' is passed. We'll send version A and B to a random sample of recipients, and then the winning version to everyone else | [optional] \n**winner_criteria** | **str** | Choose the metrics that will determinate the winning version. Mandatory if 'splitRule' >= 1 and < 50. If splitRule = 50, 'winnerCriteria' is ignored if passed | [optional] \n**winner_delay** | **int** | Choose the duration of the test in hours. Maximum is 7 days, pass 24*7 = 168 hours. The winning version will be sent at the end of the test. Mandatory if 'splitRule' >= 1 and < 50. If splitRule = 50, 'winnerDelay' is ignored if passed | [optional] \n**ip_warmup_enable** | **bool** | Available for dedicated ip clients. Set this to true if you wish to warm up your ip. | [optional] [default to False]\n**initial_quota** | **int** | Mandatory if ipWarmupEnable is set to true. Set an initial quota greater than 1 for warming up your ip. We recommend you set a value of 3000. | [optional] \n**increase_rate** | **int** | Mandatory if ipWarmupEnable is set to true. Set a percentage increase rate for warming up your ip. We recommend you set the increase rate to 30% per day. If you want to send the same number of emails every day, set the daily increase value to 0%. | [optional] \n**unsubscription_page_id** | **str** | Enter an unsubscription page id. The page id is a 24 digit alphanumeric id that can be found in the URL when editing the page. If not entered, then the default unsubscription page will be used. | [optional] \n**update_form_id** | **str** | Mandatory if templateId is used containing the {{ update_profile }} tag. Enter an update profile form id. The form id is a 24 digit alphanumeric id that can be found in the URL when editing the form. If not entered, then the default update profile form will be used. | [optional] \n```\n\n----------------------------------------\n\nTITLE: SendSmtpEmailSender Model Properties Definition\nDESCRIPTION: Defines the properties available in the SendSmtpEmailSender model including name (max 70 chars), email address, and sender ID. Email or ID must be provided, while name is optional.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/SendSmtpEmailSender.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**name** | **str** | Name of the sender from which the emails will be sent. Maximum allowed characters are 70. Applicable only when email is passed. | [optional] \n**email** | **str** | Email of the sender from which the emails will be sent. Mandatory if sender id is not passed. | [optional] \n**id** | **int** | Id of the sender from which the emails will be sent. In order to select a sender with specific pool of IP's, dedicated ip users shall pass id (instead of email). Mandatory if email is not passed. | [optional]\n```\n\n----------------------------------------\n\nTITLE: Defining GetWATemplates Model Properties in Markdown\nDESCRIPTION: This snippet defines the properties of the GetWATemplates model, including their types and descriptions. It specifies two properties: 'templates' as a list of GetWATemplatesTemplates objects, and 'count' as an integer representing the number of retrieved WhatsApp templates.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/GetWATemplates.md#2025-04-17_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**templates** | [**list[GetWATemplatesTemplates]**](GetWATemplatesTemplates.md) |  | \n**count** | **int** | Number of whatsApp templates retrived | \n```\n\n----------------------------------------\n\nTITLE: GetProducts Model Schema Definition in Markdown\nDESCRIPTION: Markdown table defining the properties of the GetProducts model class, including property names, types, descriptions and optional notes. The model contains a products list and count field.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/GetProducts.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**products** | **list[object]** |  | \n**count** | **int** | Number of products |\n```\n\n----------------------------------------\n\nTITLE: Defining Notification Properties in Markdown Table\nDESCRIPTION: Documents the properties of the Notification class including channel and text fields. The channel property specifies the notification delivery method, while the text property allows adding context to payment request notifications.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/Notification.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**channel** | **str** | Channel used to send the notifications.  | \n**text** | **str** | Use this field if you want to give more context to your contact about the payment request.  |\n```\n\n----------------------------------------\n\nTITLE: Defining GetCampaignStats Model Properties in Markdown\nDESCRIPTION: This code snippet defines the properties of the GetCampaignStats model using a markdown table. Each row represents a property with its name, type, description, and optional notes.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/GetCampaignStats.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\nlist_id | **int** | List Id of email campaign (only in case of get email campaign(s)(not for global stats)) | [optional] \nunique_clicks | **int** | Number of unique clicks for the campaign | \nclickers | **int** | Number of total clicks for the campaign | \ncomplaints | **int** | Number of complaints (Spam reports) for the campaign | \ndelivered | **int** | Number of delivered emails for the campaign | \nsent | **int** | Number of sent emails for the campaign | \nsoft_bounces | **int** | Number of softbounce for the campaign | \nhard_bounces | **int** | Number of harbounce for the campaign | \nunique_views | **int** | Number of unique openings for the campaign | \ntrackable_views | **int** | Recipients without any privacy protection option enabled in their email client | \ntrackable_views_rate | **float** | Rate of recipients without any privacy protection option enabled in their email client | [optional] \nestimated_views | **int** | Rate of recipients without any privacy protection option enabled in their email client, applied to all delivered emails | [optional] \nunsubscriptions | **int** | Number of unsubscription for the campaign | \nviewed | **int** | Number of openings for the campaign | \ndeferred | **int** | Number of deferred emails for the campaign | [optional] \nreturn_bounce | **int** | Total number of non-delivered campaigns for a particular campaign id. | [optional] \n```\n\n----------------------------------------\n\nTITLE: Defining Company Creation Parameters Schema in Markdown\nDESCRIPTION: Markdown table defining the request body parameters for company creation API endpoint. Includes required name field and optional fields for attributes, country code, and linked entity IDs.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/Body5.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**name** | **str** | Name of company | \n**attributes** | **object** | Attributes for company creation | [optional] \n**country_code** | **int** | Country code if phone_number is passed in attributes. | [optional] \n**linked_contacts_ids** | **list[int]** | Contact ids to be linked with company | [optional] \n**linked_deals_ids** | **list[str]** | Deal ids to be linked with company | [optional]\n```\n\n----------------------------------------\n\nTITLE: GetLists Model Properties Table\nDESCRIPTION: Markdown table defining the properties, types and descriptions for the GetLists model. Contains two properties: lists (array of objects) and count (integer) representing available lists and total count.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/GetLists.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**lists** | **list[object]** | Listing of all the lists available in your account | [optional] \n**count** | **int** | Number of lists in your account | [optional]\n```\n\n----------------------------------------\n\nTITLE: CreateAttributeEnumeration Model Properties Definition\nDESCRIPTION: Documents the properties of the CreateAttributeEnumeration model. Contains two properties: value (integer ID) and label (string description).\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/CreateAttributeEnumeration.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\nvalue | int | Id of the value | \nlabel | str | Label of the value |\n```\n\n----------------------------------------\n\nTITLE: Defining WhatsappCampTemplate Class Properties in Python\nDESCRIPTION: This code snippet defines the properties of the WhatsappCampTemplate class. It includes various attributes such as name, category, language, and components, each with their respective types and optional status.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/WhatsappCampTemplate.md#2025-04-17_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nclass WhatsappCampTemplate:\n    \"\"\"\n    Properties:\n    name (str): name of the template (optional)\n    category (str): description of the template (optional)\n    language (str): language of the template (optional)\n    contains_button (bool): (optional)\n    display_header (bool): (optional)\n    header_type (str): type of header (optional)\n    components (list[ComponentItems]): array of component item objects (optional)\n    header_variables (list[VariablesItems]): array of variables item object (optional)\n    body_variables (list[VariablesItems]): array of variables item variables (optional)\n    button_type (str): (optional)\n    hide_footer (bool): (optional)\n    \"\"\"\n```\n\n----------------------------------------\n\nTITLE: Defining PostContactInfoContacts Properties in Markdown\nDESCRIPTION: Documents the properties of the PostContactInfoContacts model including success and failure lists, total count for bulk operations, and process ID for asynchronous contact list modifications.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/PostContactInfoContacts.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**success** | **list[str]** |  | [optional] \n**failure** | **list[str]** |  | [optional] \n**total** | **int** | Displays the count of total number of contacts removed from list when user opts for \\\"all\\\" option. | [optional] \n**process_id** | **int** | Id of the process created to remove contacts from list when user opts for \\\"all\\\" option. | [optional]\n```\n\n----------------------------------------\n\nTITLE: Defining GetProductDetails Model Properties in Markdown\nDESCRIPTION: This code snippet defines the properties of the GetProductDetails model. It includes details such as property names, data types, descriptions, and whether they are optional. The properties cover various aspects of a product, including identification, timestamps, URLs, pricing, and metadata.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/GetProductDetails.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**id** | **str** | Product ID for which you requested the details | \n**name** | **str** | Name of the product for which you requested the details | \n**created_at** | **str** | Creation UTC date-time of the product (YYYY-MM-DDTHH:mm:ss.SSSZ) | \n**modified_at** | **str** | Last modification UTC date-time of the product (YYYY-MM-DDTHH:mm:ss.SSSZ) | \n**url** | **str** | URL to the product | [optional] \n**image_url** | **str** | Absolute URL to the cover image of the product | [optional] \n**sku** | **str** | Product identifier from the shop | [optional] \n**price** | **float** | Price of the product | [optional] \n**categories** | **list[str]** | Category ID-s of the product | [optional] \n**parent_id** | **str** | Parent product id of the product | [optional] \n**s3_original** | **str** | S3 url of original image | [optional] \n**s3_thumb_analytics** | **str** | S3 thumbnail url of original image in 120x120 dimension for analytics section | \n**meta_info** | **object** | Meta data of product such as description, vendor, producer, stock level, etc. | [optional] \n**s3_thumb_editor** | **str** | S3 thumbnail url of original image in 600x400 dimension for editor section | \n**is_deleted** | **bool** | product deleted from the shop's database | [optional] \n```\n\n----------------------------------------\n\nTITLE: Defining GetWhatsappCampaignsCampaigns Class Properties in Python\nDESCRIPTION: This code snippet defines the properties of the GetWhatsappCampaignsCampaigns class, including data types and descriptions for each attribute of a WhatsApp campaign.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/GetWhatsappCampaignsCampaigns.md#2025-04-17_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n# GetWhatsappCampaignsCampaigns\n\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n\"id\" | **int** | ID of the WhatsApp Campaign | \n\"campaign_name\" | **str** | Name of the WhatsApp Campaign | \n\"template_id\" | **str** | Id of the WhatsApp template | \n\"campaign_status\" | **str** | Status of the WhatsApp Campaign | \n\"scheduled_at\" | **str** | UTC date-time on which WhatsApp campaign is scheduled. Should be in YYYY-MM-DDTHH:mm:ss.SSSZ format | \n\"error_reason\" | **str** | Error reason in the campaign creation | [optional] \n\"invalidated_contacts\" | **int** | Count of invalidated contacts | [optional] \n\"read_percentage\" | **float** | Read percentage of the the WhatsApp campaign created | [optional] \n\"stats\" | [**WhatsappCampStats**](WhatsappCampStats.md) |  | [optional] \n\"created_at\" | **str** | Creation UTC date-time of the WhatsApp campaign (YYYY-MM-DDTHH:mm:ss.SSSZ) | \n\"modified_at\" | **str** | UTC date-time of last modification of the whatsapp template (YYYY-MM-DDTHH:mm:ss.SSSZ) | \n```\n\n----------------------------------------\n\nTITLE: Defining WhatsappCampStats Model Properties in Markdown\nDESCRIPTION: This snippet defines the properties of the WhatsappCampStats model, including their names, types, and descriptions. It uses a markdown table format to present the information clearly.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/WhatsappCampStats.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**sent** | **int** |  | \n**delivered** | **int** |  | \n**read** | **int** |  | \n**unsubscribe** | **int** |  | \n**not_sent** | **int** |  | \n```\n\n----------------------------------------\n\nTITLE: Defining GetInboundEmailEventsByUuid Model Properties in Python\nDESCRIPTION: This code snippet defines the properties of the GetInboundEmailEventsByUuid model. It includes attributes such as received and delivered timestamps, sender and recipient email addresses, message ID, subject, attachments, and logs. Some properties are optional and may only be present after processing is complete.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/GetInboundEmailEventsByUuid.md#2025-04-17_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nclass GetInboundEmailEventsByUuid:\n    def __init__(self):\n        self.received_at = None  # datetime\n        self.delivered_at = None  # datetime\n        self.recipient = None  # str\n        self.sender = None  # str\n        self.message_id = None  # str\n        self.subject = None  # str\n        self.attachments = []  # list[GetInboundEmailEventsByUuidAttachments]\n        self.logs = []  # list[GetInboundEmailEventsByUuidLogs]\n```\n\n----------------------------------------\n\nTITLE: GetChildInfoApiKeys Model Properties Table in Markdown\nDESCRIPTION: Documentation table defining the properties of the GetChildInfoApiKeys model including their types and descriptions. The model has two main properties: v2 (required) and v3 (optional) which contain lists of API key information.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/GetChildInfoApiKeys.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**v2** | [**list[GetChildInfoApiKeysV2]**](GetChildInfoApiKeysV2.md) |  | \n**v3** | [**list[GetChildInfoApiKeysV3]**](GetChildInfoApiKeysV3.md) |  | [optional]\n```\n\n----------------------------------------\n\nTITLE: Defining Properties for GetScheduledEmailByMessageId Model in Markdown\nDESCRIPTION: Documents the properties of the GetScheduledEmailByMessageId model including scheduled_at (datetime for email scheduling), created_at (datetime when email was scheduled), and status (current status of scheduled email).\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/GetScheduledEmailByMessageId.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name | Type | Description | Notes |\n| ------------ | ------------- | ------------- | ------------- |\n| **scheduled_at** | **datetime** | Datetime for which the email was scheduled | \n| **created_at** | **datetime** | Datetime on which the email was scheduled | \n| **status** | **str** | Current status of the scheduled email |\n```\n\n----------------------------------------\n\nTITLE: Data Model Properties Table in Markdown\nDESCRIPTION: Markdown table defining the properties, types, and descriptions for the GetTransacEmailsListTransactionalEmails model. Documents required and optional fields for transactional email data.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/GetTransacEmailsListTransactionalEmails.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\nemail | **str** | Email address to which transactional email has been sent | \nsubject | **str** | Subject of the sent email | \ntemplate_id | **int** | Id of the template | [optional] \nmessage_id | **str** | Message Id of the sent email | \nuuid | **str** | Unique id of the email sent to a particular contact | \n_date | **str** | Date on which transactional email was sent | \n_from | **str** | Email address of the sender from which the email was sent | [optional] \ntags | **list[str]** | Tags used for your email | [optional]\n```\n\n----------------------------------------\n\nTITLE: Retrieving A/B Test Campaign Results with Brevo Python SDK\nDESCRIPTION: Example showing how to obtain the winning version of an A/B test email campaign using the Brevo Python SDK. The code demonstrates API authentication and calling the get_ab_test_campaign_result method.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/EmailCampaignsApi.md#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport brevo_python\nfrom brevo_python.rest import ApiException\nfrom pprint import pprint\n\n# Configure API key authorization: api-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['api-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['api-key'] = 'Bearer'\n# Configure API key authorization: partner-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['partner-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['partner-key'] = 'Bearer'\n\n# create an instance of the API class\napi_instance = brevo_python.EmailCampaignsApi(brevo_python.ApiClient(configuration))\ncampaign_id = 789 # int | Id of the A/B test campaign\n\ntry:\n    # Get an A/B test email campaign results\n    api_response = api_instance.get_ab_test_campaign_result(campaign_id)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling EmailCampaignsApi->get_ab_test_campaign_result: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Defining GetList Model Properties in Markdown\nDESCRIPTION: This snippet defines the properties of the GetList model using a markdown table. It includes the property names, their types, descriptions, and any additional notes.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/GetList.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**id** | **int** | ID of the list | \n**name** | **str** | Name of the list | \n**total_blacklisted** | **int** | Number of blacklisted contacts in the list | \n**total_subscribers** | **int** | Number of contacts in the list | \n**unique_subscribers** | **int** | Number of unique contacts in the list | \n```\n\n----------------------------------------\n\nTITLE: Deleting a Reseller Child Account in Python\nDESCRIPTION: This code demonstrates how to delete a reseller child account using the delete_reseller_child method. It requires the child identifier (either auth key or child id) as a parameter.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/ResellerApi.md#2025-04-17_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['api-key'] = 'YOUR_API_KEY'\nconfiguration.api_key['partner-key'] = 'YOUR_API_KEY'\n\napi_instance = brevo_python.ResellerApi(brevo_python.ApiClient(configuration))\nchild_identifier = 'child_identifier_example'\n\ntry:\n    api_instance.delete_reseller_child(child_identifier)\nexcept ApiException as e:\n    print(\"Exception when calling ResellerApi->delete_reseller_child: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Defining GetAccountRelay Model Properties in Markdown\nDESCRIPTION: This code snippet defines the properties of the GetAccountRelay model, including their types and descriptions. It specifies two properties: 'enabled' (a boolean indicating account status) and 'data' (a reference to the GetAccountRelayData model).\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/GetAccountRelay.md#2025-04-17_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**enabled** | **bool** | Status of your transactional email Account (true&#x3D;Enabled, false&#x3D;Disabled) | \n**data** | [**GetAccountRelayData**](GetAccountRelayData.md) |  | \n```\n\n----------------------------------------\n\nTITLE: Defining GetChildInfo Class Properties in Python\nDESCRIPTION: This code snippet defines the properties of the GetChildInfo class. It includes various attributes such as email, first name, last name, company name, credits, statistics, password, IPs, and API keys. Each property is defined with its type and a brief description.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/GetChildInfo.md#2025-04-17_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nclass GetChildInfo:\n    \"\"\"\n    Properties:\n    email (str): Login Email\n    first_name (str): First Name\n    last_name (str): Last Name\n    company_name (str): Name of the company\n    credits (GetChildInfoCredits): Optional\n    statistics (GetChildInfoStatistics): Optional\n    password (str): The encrypted password of child account\n    ips (list[str]): IP(s) associated to a child account user (Optional)\n    api_keys (GetChildInfoApiKeys): Optional\n    \"\"\"\n```\n\n----------------------------------------\n\nTITLE: Defining GetWhatsappEventReportEvents Class Properties in Python\nDESCRIPTION: This code snippet defines the properties of the GetWhatsappEventReportEvents class. It includes various attributes related to WhatsApp events, such as contact number, date, message ID, event type, and optional fields for specific events like error messages or reply content.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/GetWhatsappEventReportEvents.md#2025-04-17_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nclass GetWhatsappEventReportEvents:\n    \"\"\"\n    Properties:\n        contact_number (str): WhatsApp Number with country code. Example, 85264318721\n        _date (str): UTC date-time on which the event has been generated\n        message_id (str): Message ID which generated the event\n        event (str): Event which occurred\n        reason (str): Reason for the event (will be there in case of `error` and `soft-bounce` events)\n        body (str): Text of the reply (will be there only in case of `reply` event with text)\n        media_url (str): Url of the media reply (will be there only in case of `reply` event with media)\n        sender_number (str): WhatsApp Number with country code. Example, 85264318721\n    \"\"\"\n```\n\n----------------------------------------\n\nTITLE: Defining CreateUpdateProduct Properties in Markdown Table\nDESCRIPTION: A comprehensive table listing all properties of the CreateUpdateProduct model, including their types, descriptions, and optional status. This includes properties like id, name, url, image_url, sku, price, categories, parent_id, meta_info, update_enabled, deleted_at, and is_deleted.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/CreateUpdateProduct.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# CreateUpdateProduct\n\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**id** | **str** | Product ID for which you requested the details | \n**name** | **str** | Mandatory in case of creation**. Name of the product for which you requested the details | \n**url** | **str** | URL to the product | [optional] \n**image_url** | **str** | Absolute URL to the cover image of the product | [optional] \n**sku** | **str** | Product identifier from the shop | [optional] \n**price** | **float** | Price of the product | [optional] \n**categories** | **list[str]** | Category ID-s of the product | [optional] \n**parent_id** | **str** | Parent product id of the product | [optional] \n**meta_info** | **dict(str, str)** | Meta data of product such as description, vendor, producer, stock level. The size of cumulative metaInfo shall not exceed **1000 KB**. Maximum length of metaInfo object can be 10. | [optional] \n**update_enabled** | **bool** | Facilitate to update the existing category in the same request (updateEnabled &#x3D; true) | [optional] [default to False]\n**deleted_at** | **str** | UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ) of the product deleted from the shop&#39;s database | [optional] \n**is_deleted** | **bool** | product deleted from the shop&#39;s database | [optional]\n```\n\n----------------------------------------\n\nTITLE: SendSmtpEmailReplyTo Properties Definition\nDESCRIPTION: Defines the properties of the SendSmtpEmailReplyTo class including the email address and name fields. The email property is required and stores the reply-to email address, while the name property is optional and limited to 70 characters.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/SendSmtpEmailReplyTo.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**email** | **str** | Email address in reply to | \n**name** | **str** | Name in reply to. Maximum allowed characters are 70. | [optional] \n```\n\n----------------------------------------\n\nTITLE: Defining GetSmsCampaignStats Model Properties in Markdown\nDESCRIPTION: This code snippet defines the properties of the GetSmsCampaignStats model using a markdown table. It includes property names, types, descriptions, and notes for various SMS campaign statistics.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/GetSmsCampaignStats.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\ndelivered | **int** | Number of delivered SMS | \nsent | **int** | Number of sent SMS | \nprocessing | **int** | Number of processing SMS | \nsoft_bounces | **int** | Number of softbounced SMS | \nhard_bounces | **int** | Number of hardbounced SMS | \nunsubscriptions | **int** | Number of unsubscription SMS | \nanswered | **int** | Number of replies to the SMS | \n```\n\n----------------------------------------\n\nTITLE: SendSmtpEmailAttachment Properties Table\nDESCRIPTION: Markdown table defining the properties of the SendSmtpEmailAttachment class, including types and descriptions. Properties include URL for remote attachments, base64 encoded content for inline attachments, and the attachment filename.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/SendSmtpEmailAttachment.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**url** | **str** | Absolute url of the attachment (no local file). | [optional] \n**content** | **str** | Base64 encoded chunk data of the attachment generated on the fly | [optional] \n**name** | **str** | Required if content is passed. Name of the attachment | [optional] \n```\n\n----------------------------------------\n\nTITLE: Defining ComponentItems Properties Table in Markdown\nDESCRIPTION: Markdown table defining the properties of the ComponentItems class, including their types, descriptions and optional status.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/ComponentItems.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**type** | **str** |  | [optional] \n**text** | **str** |  | [optional]\n```\n\n----------------------------------------\n\nTITLE: UpdateAttributeEnumeration Properties Table\nDESCRIPTION: Markdown table defining the properties of the UpdateAttributeEnumeration model. Contains two properties: value (integer ID) and label (string).\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/UpdateAttributeEnumeration.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**value** | **int** | Id of the value | \n**label** | **str** | Label of the value |\n```\n\n----------------------------------------\n\nTITLE: SendTestSms Model Properties Table in Markdown\nDESCRIPTION: Markdown table defining the properties of the SendTestSms model, specifically the phone_number field which must be associated with an existing Brevo contact and not be blacklisted.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/SendTestSms.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name | Type | Description | Notes |\n| ------------ | ------------- | ------------- | ------------- |\n| **phone_number** | **str** | Mobile number of the recipient with the country code. This number must belong to one of your contacts in Brevo account and must not be blacklisted | [optional] \n```\n\n----------------------------------------\n\nTITLE: Defining SubAccountsResponse Model Properties in Markdown\nDESCRIPTION: This snippet defines the properties of the SubAccountsResponse model. It includes two properties: 'count' (an integer representing the total number of subaccounts) and 'sub_accounts' (a list of SubAccountsResponseSubAccounts objects).\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/SubAccountsResponse.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**count** | **int** | Total number of subaccounts | [optional] \n**sub_accounts** | [**list[SubAccountsResponseSubAccounts]**](SubAccountsResponseSubAccounts.md) |  | [optional]\n```\n\n----------------------------------------\n\nTITLE: Defining GetCategoryDetails Properties in Markdown\nDESCRIPTION: This snippet defines the properties of the GetCategoryDetails model using a markdown table. It includes field names, data types, descriptions, and optional notes for each property.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/GetCategoryDetails.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**id** | **str** | Category ID for which you requested the details | \n**name** | **str** | Name of the category for which you requested the details | \n**created_at** | **str** | Creation UTC date-time of the category (YYYY-MM-DDTHH:mm:ss.SSSZ) | \n**modified_at** | **str** | Last modification UTC date-time of the category (YYYY-MM-DDTHH:mm:ss.SSSZ) | \n**url** | **str** | URL to the category | [optional] \n**is_deleted** | **bool** | category deleted from the shop&#39;s database | [optional] \n```\n\n----------------------------------------\n\nTITLE: Defining ConversionSourceMetrics Class Properties in Python\nDESCRIPTION: This code snippet defines the properties of the ConversionSourceMetrics class. It includes five properties: id, conversion_source, orders_count, revenue, and average_basket, each with their respective types and descriptions.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/ConversionSourceMetrics.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass ConversionSourceMetrics:\n    \"\"\"\n    Properties:\n    Name | Type | Description | Notes\n    ------------ | ------------- | ------------- | -------------\n    id | float |  | \n    conversion_source | str |  | \n    orders_count | float |  | \n    revenue | float |  | \n    average_basket | float |  | \n    \"\"\"\n```\n\n----------------------------------------\n\nTITLE: GetWebhookHeaders Properties Table in Markdown\nDESCRIPTION: Markdown table defining the properties of the GetWebhookHeaders model, including property names, types, descriptions and optional status. Contains key and value string fields for header configuration.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/GetWebhookHeaders.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**key** | **str** | Header key name | [optional] \n**value** | **str** | Header value | [optional]\n```\n\n----------------------------------------\n\nTITLE: SendSmtpEmailTo Model Properties Definition in Markdown\nDESCRIPTION: Documents the required and optional properties of the SendSmtpEmailTo model. Contains two fields: email (required) for recipient's email address and name (optional) for recipient's name with a 70 character limit.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/SendSmtpEmailTo.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**email** | **str** | Email address of the recipient | \n**name** | **str** | Name of the recipient. Maximum allowed characters are 70. | [optional]\n```\n\n----------------------------------------\n\nTITLE: Documenting CreateEmailCampaignSender Properties in Markdown\nDESCRIPTION: Markdown table documenting the properties of the CreateEmailCampaignSender model class, including property names, types, descriptions, and optional status. This model represents sender information for email campaigns in the Brevo API.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/CreateEmailCampaignSender.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# CreateEmailCampaignSender\n\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**name** | **str** | Sender Name | [optional] \n**email** | **str** | Sender email | \n**id** | **int** | Select the sender for the campaign on the basis of sender id. In order to select a sender with specific pool of IP's, dedicated ip users shall pass id (instead of email). | [optional]\n```\n\n----------------------------------------\n\nTITLE: Defining GetExtendedContactDetailsStatisticsLinks Properties in Markdown\nDESCRIPTION: This snippet defines the properties of the GetExtendedContactDetailsStatisticsLinks model. It includes count (number of clicks), event_time (UTC date-time of the event), ip (IP address of the user who clicked), and url (the clicked link URL).\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/GetExtendedContactDetailsStatisticsLinks.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\ncount | **int** | Number of clicks on this link for the campaign | \nevent_time | **str** | UTC date-time of the event | \nip | **str** | IP from which the user has clicked on the link | \nurl | **str** | URL of the clicked link | \n```\n\n----------------------------------------\n\nTITLE: Defining GetDomainConfigurationModel Class Properties in Python\nDESCRIPTION: This code snippet defines the properties of the GetDomainConfigurationModel class, including the domain name, verification status, authentication status, and DNS records. It uses type hints to specify the expected data types for each property.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/GetDomainConfigurationModel.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass GetDomainConfigurationModel:\n    domain: str  # Domain\n    verified: bool  # Status of domain verification (true=verified, false=non verified)\n    authenticated: bool  # Status of domain authentication (true=authenticated, false=non authenticated)\n    dns_records: CreateDomainModelDnsRecords\n```\n\n----------------------------------------\n\nTITLE: Defining GetInboundEmailEventsByUuidAttachments Properties in Markdown\nDESCRIPTION: This markdown table defines the properties of the GetInboundEmailEventsByUuidAttachments class. It specifies the name, type, description, and optional status of each attribute.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/GetInboundEmailEventsByUuidAttachments.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**name** | **str** | filename specified in the Content-Disposition header of the attachment | [optional] \n**content_type** | **str** | value of the Content-Type header of the attachment | [optional] \n**content_id** | **str** | value of the Content-ID header of the attachment. | [optional] \n**content_length** | **int** | size of the attachment in bytes | [optional]\n```\n\n----------------------------------------\n\nTITLE: SendSms Model Properties Definition in Markdown\nDESCRIPTION: Markdown table defining the properties, types, and descriptions for the SendSms model. Includes reference, message_id, sms_count, used_credits, and remaining_credits fields with their corresponding data types and optional status.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/SendSms.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\nreference | str |  | \nmessage_id | int |  | \nsms_count | int | Count of SMS&#39;s to send multiple text messages | [optional] \nused_credits | float | SMS credits used per text message | [optional] \nremaining_credits | float | Remaining SMS credits of the user | [optional]\n```\n\n----------------------------------------\n\nTITLE: Deleting SMS Campaign - Python SDK Example\nDESCRIPTION: Example code demonstrating how to delete an existing SMS campaign using its ID. Requires API key authentication.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/SMSCampaignsApi.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport brevo_python\nfrom brevo_python.rest import ApiException\nfrom pprint import pprint\n\n# Configure API key authorization: api-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['api-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['api-key'] = 'Bearer'\n# Configure API key authorization: partner-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['partner-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['partner-key'] = 'Bearer'\n\n# create an instance of the API class\napi_instance = brevo_python.SMSCampaignsApi(brevo_python.ApiClient(configuration))\ncampaign_id = 789 # int | id of the SMS campaign\n\ntry:\n    # Delete an SMS campaign\n    api_instance.delete_sms_campaign(campaign_id)\nexcept ApiException as e:\n    print(\"Exception when calling SMSCampaignsApi->delete_sms_campaign: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Defining BlockDomain Model Properties in Markdown\nDESCRIPTION: This snippet defines the properties of the BlockDomain model using a Markdown table. It specifies the 'domain' property as a required string representing the name of the domain to be blocked.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/BlockDomain.md#2025-04-17_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**domain** | **str** | name of the domain to be blocked |\n```\n\n----------------------------------------\n\nTITLE: Creating Corporate Group in Brevo Python\nDESCRIPTION: Example of creating a new group of sub-accounts using the Brevo Python SDK. Requires API key authentication and handles the corporate_group_post endpoint.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/MasterAccountApi.md#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport brevo_python\nfrom brevo_python.rest import ApiException\nfrom pprint import pprint\n\n# Configure API key authorization: api-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['api-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['api-key'] = 'Bearer'\n# Configure API key authorization: partner-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['partner-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['partner-key'] = 'Bearer'\n\n# create an instance of the API class\napi_instance = brevo_python.MasterAccountApi(brevo_python.ApiClient(configuration))\nbody = brevo_python.Body() # Body | Group details to be created.\n\ntry:\n    # Create a new group of sub-accounts\n    api_response = api_instance.corporate_group_post(body)\n    pprint(api_response)\nexcept ApiException as e:\n    print(\"Exception when calling MasterAccountApi->corporate_group_post: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Defining MasterDetailsResponseBillingInfoAddress Model Properties in Markdown\nDESCRIPTION: This snippet defines the properties of the MasterDetailsResponseBillingInfoAddress model. It includes the property names, their types, descriptions, and optional notes. The properties represent different components of a billing address.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/MasterDetailsResponseBillingInfoAddress.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\nstreet_address | **str** | Street address | [optional] \nlocality | **str** | Locality | [optional] \npostal_code | **str** | Postal code | [optional] \nstate_code | **str** | State code | [optional] \ncountry_code | **str** | Country code | [optional] \n```\n\n----------------------------------------\n\nTITLE: Defining CreateUpdateBatchProductsModel Properties in Markdown\nDESCRIPTION: This snippet defines the properties of the CreateUpdateBatchProductsModel class, which includes fields for tracking the number of products created and updated in a batch operation. The model contains optional integer fields for created_count and updated_count.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/CreateUpdateBatchProductsModel.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# CreateUpdateBatchProductsModel\n\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**created_count** | **int** | Number of the new created products | [optional] \n**updated_count** | **int** | Number of the existing products updated | [optional] \n\n[[Back to Model list]](../README.md#documentation-for-models) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to README]](../README.md)\n```\n\n----------------------------------------\n\nTITLE: Defining CorporateGroupDetailsResponse Model Properties in Markdown\nDESCRIPTION: This snippet defines the properties of the CorporateGroupDetailsResponse model, including their names, types, descriptions, and whether they are optional. It uses a markdown table format to present the information clearly.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/CorporateGroupDetailsResponse.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\ngroup | [CorporateGroupDetailsResponseGroup](CorporateGroupDetailsResponseGroup.md) |  | [optional] \nsub_accounts | [list[CorporateGroupDetailsResponseSubaccounts]](CorporateGroupDetailsResponseSubaccounts.md) |  | [optional] \nusers | [list[CorporateGroupDetailsResponseUsers]](CorporateGroupDetailsResponseUsers.md) |  | [optional] \n```\n\n----------------------------------------\n\nTITLE: Defining SendSmtpEmailTo1 Properties in Markdown\nDESCRIPTION: This snippet defines the properties of the SendSmtpEmailTo1 model using a markdown table. It specifies the name, type, description, and notes for each property.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/SendSmtpEmailTo1.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name | Type | Description | Notes |\n| --- | --- | --- | --- |\n| **email** | **str** | Email address of the recipient | |\n| **name** | **str** | Name of the recipient. **Maximum allowed characters are 70**. | [optional] |\n```\n\n----------------------------------------\n\nTITLE: Defining CreateSmsCampaignRecipients Properties in Brevo Python SDK\nDESCRIPTION: Documents the properties of the CreateSmsCampaignRecipients model used for specifying target and exclusion lists for SMS campaigns. The list_ids property is required when scheduling campaigns, while exclusion_list_ids is optional.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/CreateSmsCampaignRecipients.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\nlist_ids | list[int] | Lists Ids to send the campaign to. REQUIRED if scheduledAt is not empty | \nexclusion_list_ids | list[int] | List ids which have to be excluded from a campaign | [optional]\n```\n\n----------------------------------------\n\nTITLE: Defining UpdateEmailCampaignSender Class Properties in Python\nDESCRIPTION: This code snippet defines the properties of the UpdateEmailCampaignSender class, including name, email, and id. Each property is documented with its type, description, and optional status.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/UpdateEmailCampaignSender.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass UpdateEmailCampaignSender:\n    \"\"\"\n    Properties:\n        name (str): Sender Name from which the campaign emails are sent (optional)\n        email (str): Sender email from which the campaign emails are sent (optional)\n        id (int): Select the sender for the campaign on the basis of sender id. In order to select a sender with specific pool of IP's, dedicated ip users shall pass id (instead of email). (optional)\n    \"\"\"\n```\n\n----------------------------------------\n\nTITLE: Defining GetExtendedClient Model Properties in Markdown\nDESCRIPTION: This snippet defines the properties of the GetExtendedClient model, including their types and descriptions. It uses a markdown table format to clearly present the information.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/GetExtendedClient.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\nemail | **str** | Login Email | \nfirst_name | **str** | First Name | \nlast_name | **str** | Last Name | \ncompany_name | **str** | Name of the company | \naddress | [**GetExtendedClientAddress**](GetExtendedClientAddress.md) |  | \n```\n\n----------------------------------------\n\nTITLE: GetTransacBlockedContactsReason Properties Definition\nDESCRIPTION: Markdown table defining the properties of the GetTransacBlockedContactsReason model. Contains two properties: code (string) for programmatic comparison and message (string) for human-readable explanations.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/GetTransacBlockedContactsReason.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**code** | **str** | Reason code for blocking / unsubscribing (This code is safe for comparison) | [optional] \n**message** | **str** | Reason for blocking / unsubscribing (This string is not safe for comparison) | [optional]\n```\n\n----------------------------------------\n\nTITLE: InlineResponse2005 Model Properties Table\nDESCRIPTION: Markdown table defining the properties of the InlineResponse2005 class including results (list of conversion metrics) and totals fields.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/InlineResponse2005.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**results** | [**list[ConversionSourceMetrics]**](ConversionSourceMetrics.md) | List of conversion attribution metrics | \n**totals** | [**InlineResponse2005Totals**](InlineResponse2005Totals.md) |  |\n```\n\n----------------------------------------\n\nTITLE: GetContacts Model Properties Table in Markdown\nDESCRIPTION: Markdown table defining the properties of the GetContacts model, including contacts list and count fields with their types and descriptions.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/GetContacts.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**contacts** | **list[object]** |  | \n**count** | **int** | Number of contacts |\n```\n\n----------------------------------------\n\nTITLE: Defining GetChildInfoCredits Model Properties in Markdown\nDESCRIPTION: This snippet defines the properties of the GetChildInfoCredits model, including email_credits and sms_credits. It specifies the type, description, and optional status for each property.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/GetChildInfoCredits.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**email_credits** | **int** | Email credits available for your child | [optional] \n**sms_credits** | **int** | SMS credits available for your child | [optional]\n```\n\n----------------------------------------\n\nTITLE: Defining UpdateSmtpTemplateSender Properties in Python\nDESCRIPTION: This code snippet defines the properties of the UpdateSmtpTemplateSender model. It includes optional fields for the sender's name, email, and ID. The ID field is specifically used for selecting a sender with a specific pool of IPs for dedicated IP users.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/UpdateSmtpTemplateSender.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass UpdateSmtpTemplateSender:\n    name = None  # str\n    email = None  # str\n    id = None  # int\n```\n\n----------------------------------------\n\nTITLE: Defining GetCategories Model Properties in Markdown\nDESCRIPTION: Specifies the properties of the GetCategories model, including their names, types, and descriptions. The model has two properties: 'categories' as a list of objects, and 'count' as an integer representing the number of categories.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/GetCategories.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**categories** | **list[object]** |  | \n**count** | **int** | Number of categories | \n```\n\n----------------------------------------\n\nTITLE: Defining GetAllExternalFeeds Model Properties in Python\nDESCRIPTION: Specifies the properties of the GetAllExternalFeeds model, including count (integer) for total number of batches and feeds (list of GetAllExternalFeedsFeeds objects). Both properties are optional.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/GetAllExternalFeeds.md#2025-04-17_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n# GetAllExternalFeeds\n\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**count** | **int** | Total number of batches | [optional] \n**feeds** | [**list[GetAllExternalFeedsFeeds]**](GetAllExternalFeedsFeeds.md) |  | [optional]\n```\n\n----------------------------------------\n\nTITLE: SendSmtpEmailCc Model Properties Definition\nDESCRIPTION: Defines two properties for CC recipients in SMTP emails: a required email address field and an optional name field limited to 70 characters.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/SendSmtpEmailCc.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\nemail | str | Email address of the recipient in cc | \nname | str | Name of the recipient in cc. Maximum allowed characters are 70. | [optional]\n```\n\n----------------------------------------\n\nTITLE: Defining CreateChild Properties in Markdown\nDESCRIPTION: Specifies the properties required to create a child account, including email, name, company, password, and optional language setting. Each property is defined with its type and description.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/CreateChild.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# CreateChild\n\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**email** | **str** | Email address to create the child account | \n**first_name** | **str** | First name to use to create the child account | \n**last_name** | **str** | Last name to use to create the child account | \n**company_name** | **str** | Company name to use to create the child account | \n**password** | **str** | Password for the child account to login | \n**language** | **str** | Language of the child account | [optional]\n```\n\n----------------------------------------\n\nTITLE: Displaying API Endpoint Table in Markdown\nDESCRIPTION: This code snippet shows how to create a table in Markdown format to display API endpoint information. It includes columns for Class, Method, HTTP request, and Description.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/README.md#2025-04-17_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\nClass | Method | HTTP request | Description\n------------ | ------------- | ------------- | -------------\n*AccountApi* | [**get_account**](docs/AccountApi.md#get_account) | **GET** /account | Get your account information, plan and credits details\n*AccountApi* | [**get_account_activity**](docs/AccountApi.md#get_account_activity) | **GET** /organization/activities | Get user activity logs\n*CompaniesApi* | [**companies_attributes_get**](docs/CompaniesApi.md#companies_attributes_get) | **GET** /companies/attributes | Get company attributes\n```\n\n----------------------------------------\n\nTITLE: GetPaymentRequest Properties Table in Markdown\nDESCRIPTION: Markdown table defining the properties, types, and descriptions for the GetPaymentRequest model structure. Includes required and optional fields for payment request management.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/GetPaymentRequest.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**reference** | **str** | Reference of the payment request, it will appear on the payment page.  | \n**status** | **str** | Status of the payment request. | \n**configuration** | [**Configuration**](Configuration.md) |  | [optional] \n**contact_id** | **int** | Brevo ID of the contact requested to pay.  | [optional] \n**number_of_reminders_sent** | **int** | number of reminders sent.  | [optional] \n**cart** | [**Cart**](Cart.md) |  | \n**notification** | [**Notification**](Notification.md) |  | \n```\n\n----------------------------------------\n\nTITLE: PutRevokeUserPermission Model Properties Definition\nDESCRIPTION: Defines the properties for the PutRevokeUserPermission model, specifically the email field which is required to identify the user whose permissions will be revoked.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/PutRevokeUserPermission.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**email** | **str** | Email address of the user. |\n```\n\n----------------------------------------\n\nTITLE: Defining InlineResponse2002 Model Properties in Markdown\nDESCRIPTION: This snippet defines the properties of the InlineResponse2002 model using a markdown table. It specifies the property name, type, description, and any additional notes.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/InlineResponse2002.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**id** | **str** | Unique company id | \n```\n\n----------------------------------------\n\nTITLE: GetFolderLists Model Properties Definition\nDESCRIPTION: Defines the properties of the GetFolderLists model including a list of objects and a count integer. The lists property is optional and holds objects, while count is an optional integer indicating the number of lists in the folder.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/GetFolderLists.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\nlists | list[object] |  | [optional] \ncount | int | Number of lists in the folder | [optional]\n```\n\n----------------------------------------\n\nTITLE: Deleting a Company in Brevo Python SDK\nDESCRIPTION: Example code demonstrating how to delete a company by its ID. This operation removes the company from the Brevo platform.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/CompaniesApi.md#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport time\nimport brevo_python\nfrom brevo_python.rest import ApiException\nfrom pprint import pprint\n\n# Configure API key authorization: api-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['api-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['api-key'] = 'Bearer'\n# Configure API key authorization: partner-key\nconfiguration = brevo_python.Configuration()\nconfiguration.api_key['partner-key'] = 'YOUR_API_KEY'\n# Uncomment below to setup prefix (e.g. Bearer) for API key, if needed\n# configuration.api_key_prefix['partner-key'] = 'Bearer'\n\n# create an instance of the API class\napi_instance = brevo_python.CompaniesApi(brevo_python.ApiClient(configuration))\nid = 'id_example' # str | \n\ntry:\n    # Delete a company\n    api_instance.companies_id_delete(id)\nexcept ApiException as e:\n    print(\"Exception when calling CompaniesApi->companies_id_delete: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: GetScheduledEmailByBatchId Model Properties Definition\nDESCRIPTION: Defines the properties of the GetScheduledEmailByBatchId model including count of batches and list of batch details.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/GetScheduledEmailByBatchId.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**count** | **int** | Total number of batches | [optional] \n**batches** | [**list[GetScheduledEmailByBatchIdBatches]**](GetScheduledEmailByBatchIdBatches.md) |  | [optional]\n```\n\n----------------------------------------\n\nTITLE: Defining GetContactDetails Class Properties in Python\nDESCRIPTION: Schema definition for the GetContactDetails class that represents contact information in the Brevo API. Contains fields for contact identification, blacklist statuses, timestamps, list memberships and custom attributes.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/GetContactDetails.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nemail = str  # Email address of the contact (optional)\nid = int  # ID of the contact\nemail_blacklisted = bool  # Email blacklist status\nsms_blacklisted = bool  # SMS blacklist status\ncreated_at = str  # Creation timestamp (YYYY-MM-DDTHH:mm:ss.SSSZ)\nmodified_at = str  # Last modification timestamp (YYYY-MM-DDTHH:mm:ss.SSSZ)\nlist_ids = list[int]  # List of list IDs\nlist_unsubscribed = list[int]  # List of unsubscribed list IDs (optional)\nattributes = object  # Contact attributes\n```\n\n----------------------------------------\n\nTITLE: Defining GetAttributesEnumeration Class Properties in Python\nDESCRIPTION: This code snippet defines the properties of the GetAttributesEnumeration class. It includes 'value' as an integer representing the ID of the 'category' type attribute, and 'label' as a string for the label of the attribute.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/GetAttributesEnumeration.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass GetAttributesEnumeration:\n    \"\"\"\n    Attributes:\n        value (int): ID of Value of the \"category\" type attribute\n        label (str): Label of the \"category\" type attribute\n    \"\"\"\n```\n\n----------------------------------------\n\nTITLE: Defining MasterDetailsResponsePlanInfoFeatures Class Properties in Python\nDESCRIPTION: This code snippet defines the properties of the MasterDetailsResponsePlanInfoFeatures class. It includes attributes for feature name, unit value, quantities, and usage statistics. All properties are optional and have specific data types.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/MasterDetailsResponsePlanInfoFeatures.md#2025-04-17_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nclass MasterDetailsResponsePlanInfoFeatures:\n    \"\"\"\n    Attributes:\n      name (str): Name of the feature\n      unit_value (str): Unit value of the feature\n      quantity (int): Quantity provided in the plan\n      quantity_with_overages (int): Quantity with overages provided in the plan (only applicable on ENTv2)\n      used (int): Quantity consumed by master\n      used_overages (int): Quantity consumed by sub-organizations over the admin plan limit (only applicable on ENTv2)\n      remaining (int): Quantity remaining in the plan\n    \"\"\"\n```\n\n----------------------------------------\n\nTITLE: Defining GetAccountActivity Model Properties in Python\nDESCRIPTION: This code snippet defines the properties of the GetAccountActivity model. It includes a single property 'logs' which is a list of GetAccountActivityLogs objects representing user activity logs.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/GetAccountActivity.md#2025-04-17_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n# GetAccountActivity\n\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**logs** | [**list[GetAccountActivityLogs]**](GetAccountActivityLogs.md) | Get user activity logs | [optional] \n```\n\n----------------------------------------\n\nTITLE: Defining ScheduleSmtpEmail Model Properties in Markdown\nDESCRIPTION: Describes the properties of the ScheduleSmtpEmail model including message_id, message_ids, and batch_id. Each property is defined with its name, type, description, and optional notes.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/ScheduleSmtpEmail.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**message_id** | **str** | Message ID of the transactional email scheduled | [optional] \n**message_ids** | **list[str]** |  | [optional] \n**batch_id** | **str** | Batch ID of the batch transactional email scheduled | [optional] \n```\n\n----------------------------------------\n\nTITLE: Body8 Model Properties Table - Markdown\nDESCRIPTION: Markdown table defining the properties of the Body8 model used for deal creation. Includes property names, types, descriptions and optional status.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/Body8.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name | Type | Description | Notes |\n| ------------ | ------------- | ------------- | ------------- |\n| **name** | **str** | Name of deal | |\n| **attributes** | **object** | Attributes for deal creation  To assign owner of a Deal you can send attributes.deal_owner and utilize the account email or ID.  If you want to create a deal on a specific pipeline and stage you can use the following attributes `pipeline` and `deal_stage`.  Pipeline and deal_stage are ids you can fetch using this endpoint `/crm/pipeline/details/{pipelineID}`  | [optional] |\n| **linked_contacts_ids** | **list[int]** | Contact ids to be linked with deal | [optional] |\n| **linked_companies_ids** | **list[str]** | Company ids to be linked with deal | [optional] |\n```\n\n----------------------------------------\n\nTITLE: Defining SubAccountsResponseSubAccounts Model Properties in Python\nDESCRIPTION: Specifies the data structure for sub-account information including id, company name, active status, creation timestamp, and associated groups. Each property is strongly typed and represents a specific aspect of the sub-account data.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/SubAccountsResponseSubAccounts.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass SubAccountsResponseSubAccounts:\n    id: int          # id of the sub-account\n    company_name: str # Name of the sub-account company\n    active: bool      # Whether the sub-account is active or not\n    created_at: int   # Timestamp when the sub-account was created\n    groups: list[SubAccountsResponseGroups] # Group details\n```\n\n----------------------------------------\n\nTITLE: Defining GetBlockedDomains Model Properties in Markdown\nDESCRIPTION: Defines the properties of the GetBlockedDomains model, including the 'domains' property which is a list of strings representing blocked domains.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/GetBlockedDomains.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**domains** | **list[str]** | List of all blocked domains | \n```\n\n----------------------------------------\n\nTITLE: Defining InlineResponse2006 Model Properties in Markdown\nDESCRIPTION: This snippet defines the properties of the InlineResponse2006 model using a markdown table. It specifies the property names, their types, descriptions, and whether they are optional.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/InlineResponse2006.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name | Type | Description | Notes |\n| ------------ | ------------- | ------------- | ------------- |\n| **conversion_source_metrics** | [**ConversionSourceMetrics**](ConversionSourceMetrics.md) |  | [optional] |\n| **new_customers_count** | **float** |  | \n```\n\n----------------------------------------\n\nTITLE: GetChildDomain Model Properties Definition\nDESCRIPTION: Defines two properties for the GetChildDomain model: domain (string) for storing the sender domain name, and active (boolean) indicating domain verification status. Both properties are optional.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/GetChildDomain.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\ndomain | str | Sender domain | [optional] \nactive | bool | indicates whether a domain is verified or not | [optional]\n```\n\n----------------------------------------\n\nTITLE: Defining GetReports Class Properties in Markdown\nDESCRIPTION: This snippet defines the properties of the GetReports class using a markdown table. It specifies the 'reports' property as a list of GetReportsReports objects, which is optional.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/GetReports.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**reports** | [**list[GetReportsReports]**](GetReportsReports.md) |  | [optional] \n```\n\n----------------------------------------\n\nTITLE: Defining GetAllExternalFeedsFeeds Properties in Markdown\nDESCRIPTION: This code snippet defines the properties of the GetAllExternalFeedsFeeds model using a markdown table. It includes property names, types, descriptions, and notes for each attribute of an external feed.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/GetAllExternalFeedsFeeds.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**id** | **str** | ID of the feed | \n**name** | **str** | Name of the feed | \n**url** | **str** | URL of the feed | \n**auth_type** | **str** | Auth type of the feed: * `basic` * `token` * `noAuth`  | \n**username** | **str** | Username for authType `basic` | [optional] \n**password** | **str** | Password for authType `basic` | [optional] \n**token** | **str** | Token for authType `token` | [optional] \n**headers** | [**list[GetExternalFeedByUUIDHeaders]**](GetExternalFeedByUUIDHeaders.md) | Custom headers for the feed | \n**max_retries** | **int** | Maximum number of retries on the feed url | \n**cache** | **bool** | Toggle caching of feed url response | \n**created_at** | **datetime** | Datetime on which the feed was created | \n**modified_at** | **datetime** | Datetime on which the feed was modified | \n```\n\n----------------------------------------\n\nTITLE: SubAccountDetailsResponsePlanInfoCreditsSms Properties Table\nDESCRIPTION: Markdown table defining the properties, types and descriptions for the SubAccountDetailsResponsePlanInfoCreditsSms model. Includes quantity and remaining SMS credit properties.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/SubAccountDetailsResponsePlanInfoCreditsSms.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\nquantity | **int** | Quantity of SMS messaging limits provided | [optional] \nremaining | **int** | Available SMS messaging limits for use | [optional]\n```\n\n----------------------------------------\n\nTITLE: InlineResponse2012 Model Properties Definition\nDESCRIPTION: Defines the properties of the InlineResponse2012 model, which includes a single property 'id' of type string that represents a unique task identifier.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/InlineResponse2012.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**id** | **str** | Unique task id |\n```\n\n----------------------------------------\n\nTITLE: Defining GetAccount Model Properties in Markdown\nDESCRIPTION: Lists the properties of the GetAccount model, including their names, types, descriptions, and optional notes. This structure defines user account information, company details, and associated plan and service data.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/GetAccount.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# GetAccount\n\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**email** | **str** | Login Email | \n**first_name** | **str** | First Name | \n**last_name** | **str** | Last Name | \n**company_name** | **str** | Name of the company | \n**address** | [**GetExtendedClientAddress**](GetExtendedClientAddress.md) |  | \n**plan** | [**list[GetAccountPlan]**](GetAccountPlan.md) | Information about your plans and credits | \n**relay** | [**GetAccountRelay**](GetAccountRelay.md) |  | \n**marketing_automation** | [**GetAccountMarketingAutomation**](GetAccountMarketingAutomation.md) |  | [optional] \n```\n\n----------------------------------------\n\nTITLE: Defining InviteAdminUser Model Properties in Markdown\nDESCRIPTION: This snippet defines the properties of the InviteAdminUser model, including email, all_features_access, group_ids, and privileges. It specifies the data types, descriptions, and optional status for each property.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/InviteAdminUser.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**email** | **str** | Email address for the organization | \n**all_features_access** | **bool** | All access to the features | \n**group_ids** | **list[str]** | Ids of Group | [optional] \n**privileges** | [**list[InviteAdminUserPrivileges]**](InviteAdminUserPrivileges.md) |  | \n```\n\n----------------------------------------\n\nTITLE: Defining Configuration Model Properties in Markdown\nDESCRIPTION: This snippet defines the properties of the Configuration model, specifically the 'custom_success_url' property. It includes the property name, type, description, and additional notes.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/Configuration.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**custom_success_url** | **str** | Absolute URL of the custom success page.  | \n```\n\n----------------------------------------\n\nTITLE: Defining GetCouponCollection Properties Schema in Markdown\nDESCRIPTION: Documents the properties of the GetCouponCollection class including required fields like id, name, default_coupon, and optional fields like expiration_date and alert settings. Includes type information and descriptions for each property.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/GetCouponCollection.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\nid | str | The id of the collection. | \nname | str | The name of the collection. | \ndefault_coupon | str | The default coupon of the collection. | \ncreated_at | datetime | Datetime on which the collection was created. | \ntotal_coupons | int | Total number of coupons in the collection. | \nremaining_coupons | int | Number of coupons that have not been sent yet. | \nexpiration_date | datetime | Expiration date for the coupon collection in RFC3339 format. | [optional] \nremaining_days_alert | int | If present, an email notification is going to be sent the defined amount of days before the expiration date. | [optional] \nremaining_coupons_alert | int | If present, an email notification is going to be sent when the total number of available coupons falls below the defined threshold. | [optional]\n```\n\n----------------------------------------\n\nTITLE: Defining GetInvitedUsersList Properties in Markdown\nDESCRIPTION: Describes the properties of the GetInvitedUsersList model, including the 'users' property which is a list of GetInvitedUsersListUsers objects.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/GetInvitedUsersList.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**users** | [**list[GetInvitedUsersListUsers]**](GetInvitedUsersListUsers.md) | Get invited users list | [optional] \n```\n\n----------------------------------------\n\nTITLE: Defining GetIpsFromSender Model Properties in Markdown\nDESCRIPTION: Documents the properties of the GetIpsFromSender model class, specifically the 'ips' property which contains a list of GetIpFromSender objects representing dedicated IPs linked to a sender.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/GetIpsFromSender.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# GetIpsFromSender\n\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**ips** | [**list[GetIpFromSender]**](GetIpFromSender.md) | Dedicated IP(s) linked to a sender |\n```\n\n----------------------------------------\n\nTITLE: Defining GetCampaignOverview Model Properties in Markdown\nDESCRIPTION: Documents the properties of the GetCampaignOverview model including data types and descriptions. The model contains fields for managing email campaign details including basic campaign information, A/B testing configuration, scheduling options, and content properties.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/GetCampaignOverview.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**id** | **int** | ID of the campaign | \n**name** | **str** | Name of the campaign | \n**subject** | **str** | Subject of the campaign. Only available if `abTesting` flag of the campaign is `false` | [optional] \n**preview_text** | **str** | Preview text or preheader of the email campaign | [optional] \n**type** | **str** | Type of campaign | \n**status** | **str** | Status of the campaign | \n**scheduled_at** | **str** | UTC date-time on which campaign is scheduled (YYYY-MM-DDTHH:mm:ss.SSSZ) | [optional] \n**ab_testing** | **bool** | Status of A/B Test for the campaign. abTesting = false means it is disabled, & abTesting = true means it is enabled. | [optional] \n**subject_a** | **str** | Subject A of the ab-test campaign. Only available if `abTesting` flag of the campaign is `true` | [optional] \n**subject_b** | **str** | Subject B of the ab-test campaign. Only available if `abTesting` flag of the campaign is `true` | [optional] \n**split_rule** | **int** | The size of your ab-test groups. Only available if `abTesting` flag of the campaign is `true` | [optional] \n**winner_criteria** | **str** | Criteria for the winning version. Only available if `abTesting` flag of the campaign is `true` | [optional] \n**winner_delay** | **int** | The duration of the test in hours at the end of which the winning version will be sent. Only available if `abTesting` flag of the campaign is `true` | [optional] \n**send_at_best_time** | **bool** | It is true if you have chosen to send your campaign at best time, otherwise it is false | [optional]\n```\n\n----------------------------------------\n\nTITLE: EmailExportRecipients Properties Table\nDESCRIPTION: Markdown table defining the properties, types and descriptions for the EmailExportRecipients model. Includes notify_url for webhook notifications and recipients_type for specifying the type of recipients to export.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/EmailExportRecipients.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\nnotify_url | str | Webhook called once the export process is finished. For reference, https://help.brevo.com/hc/en-us/articles/360007666479 | [optional] \nrecipients_type | str | Type of recipients to export for a campaign |\n```\n\n----------------------------------------\n\nTITLE: CreatePaymentRequest Model Schema Definition in Markdown\nDESCRIPTION: Schema documentation for the CreatePaymentRequest model defining required and optional properties including reference, cart, contact_id, description, notification and configuration fields.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/CreatePaymentRequest.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# CreatePaymentRequest\n\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**reference** | **str** | Reference of the payment request, it will appear on the payment page.  | \n**cart** | [**Cart**](Cart.md) |  | \n**contact_id** | **int** | Brevo ID of the contact requested to pay.  | \n**description** | **str** | description of payment request.  | [optional] \n**notification** | [**Notification**](Notification.md) |  | [optional] \n**configuration** | [**Configuration**](Configuration.md) |  | [optional]\n```\n\n----------------------------------------\n\nTITLE: SendTemplateEmail Model Properties Table\nDESCRIPTION: Markdown table defining the properties of the SendTemplateEmail model, including the message_id field which stores the identifier of the sent template email message.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/SendTemplateEmail.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**message_id** | **str** | Message ID of the template Email sent |\n```\n\n----------------------------------------\n\nTITLE: Defining TaskList Model Properties in Markdown\nDESCRIPTION: Specifies the properties of the TaskList model using a markdown table. It defines a single property 'items' which is an optional list of Task objects.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/TaskList.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**items** | [**list[Task]**](Task.md) | List of tasks | [optional]\n```\n\n----------------------------------------\n\nTITLE: GetInvitedUsersListFeatureAccess Properties Definition\nDESCRIPTION: Defines the object properties and their types for the GetInvitedUsersListFeatureAccess model. Includes three main properties - marketing, conversations, and crm - each being an optional object containing feature accessibility settings.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/GetInvitedUsersListFeatureAccess.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\nmarketing | **object** | Marketing features accessiblity. | [optional] \nconversations | **object** | Conversations features accessiblity. | [optional] \ncrm | **object** | CRM features accessiblity. | [optional]\n```\n\n----------------------------------------\n\nTITLE: Defining GetTransacAggregatedSmsReport Class Properties in Python\nDESCRIPTION: This code snippet defines the properties of the GetTransacAggregatedSmsReport class. Each property represents a specific metric in the SMS report, including time range, request count, delivery status, and user actions. The properties are documented with their types and descriptions.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/GetTransacAggregatedSmsReport.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass GetTransacAggregatedSmsReport:\n    \"\"\"\n    Properties:\n        range (str): Time frame of the report\n        requests (int): Number of requests for the timeframe\n        delivered (int): Number of delivered SMS for the timeframe\n        hard_bounces (int): Number of hardbounces for the timeframe\n        soft_bounces (int): Number of softbounces for the timeframe\n        blocked (int): Number of blocked contact for the timeframe\n        unsubscribed (int): Number of unsubscription for the timeframe\n        replied (int): Number of answered SMS for the timeframe\n        accepted (int): Number of accepted SMS for the timeframe\n        rejected (int): Number of rejected SMS for the timeframe\n        skipped (int): Number of skipped SMS for the timeframe\n    \"\"\"\n```\n\n----------------------------------------\n\nTITLE: GetTransacSmsReport Model Properties Definition in Markdown\nDESCRIPTION: Defines the properties of the GetTransacSmsReport model, specifically documenting the reports field which is an optional list of GetTransacSmsReportReports objects.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/GetTransacSmsReport.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\nreports | [list[GetTransacSmsReportReports]](GetTransacSmsReportReports.md) |  | [optional]\n```\n\n----------------------------------------\n\nTITLE: Defining CreateAttribute Model Properties in Markdown\nDESCRIPTION: A structured documentation table detailing the properties of the CreateAttribute model class. It defines attribute properties with their types, descriptions, and optional status.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/CreateAttribute.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# CreateAttribute\n\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**value** | **str** | Value of the attribute. Use only if the attribute&#39;s category is &#39;calculated&#39; or &#39;global&#39; | [optional] \n**is_recurring** | **bool** | Type of the attribute. Use only if the attribute&#39;s category is &#39;calculated&#39; or &#39;global&#39; | [optional] \n**enumeration** | [**list[CreateAttributeEnumeration]**](CreateAttributeEnumeration.md) | List of values and labels that the attribute can take. Use only if the attribute&#39;s category is \\\"category\\\". For example, [{\\\"value\\\":1, \\\"label\\\":\\\"male\\\"}, {\\\"value\\\":2, \\\"label\\\":\\\"female\\\"}] | [optional] \n**multi_category_options** | **list[str]** | List of options you want to add for multiple-choice attribute. **Use only if the attribute&#39;s category is \\\"normal\\\" and attribute&#39;s type is \\\"multiple-choice\\\".** For example: **[\\\"USA\\\",\\\"INDIA\\\"]**  | [optional] \n**type** | **str** | Type of the attribute. Use only if the attribute&#39;s category is &#39;normal&#39;, &#39;category&#39; or &#39;transactional&#39; ( type &#39;boolean&#39; and &#39;multiple-choice&#39; is only available if the category is &#39;normal&#39; attribute, type &#39;id&#39; is only available if the category is &#39;transactional&#39; attribute & type &#39;category&#39; is only available if the category is &#39;category&#39; attribute ) | [optional]\n```\n\n----------------------------------------\n\nTITLE: Defining SendSmtpEmailReplyTo1 Properties in Markdown\nDESCRIPTION: This snippet defines the properties of the SendSmtpEmailReplyTo1 model using a markdown table. It specifies the name, type, description, and notes for each property.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/SendSmtpEmailReplyTo1.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**email** | **str** | Email address in reply to | \n**name** | **str** | Name in reply to. Maximum allowed characters are 70. | [optional] \n```\n\n----------------------------------------\n\nTITLE: GetSsoToken Model Definition in Markdown\nDESCRIPTION: Documents the GetSsoToken model structure with a single token property of type string that represents a session token with 15-day validity.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/GetSsoToken.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# GetSsoToken\n\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**token** | **str** | Session token, it will remain valid for 15 days. |\n```\n\n----------------------------------------\n\nTITLE: Defining SubAccountDetailsResponsePlanInfoCreditsEmails Properties in Markdown\nDESCRIPTION: This snippet defines the properties of the SubAccountDetailsResponsePlanInfoCreditsEmails model, including 'quantity' and 'remaining' fields for email messaging limits.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/SubAccountDetailsResponsePlanInfoCreditsEmails.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\nquantity | **int** | Quantity of email messaging limits provided | [optional] \nremaining | **int** | Available email messaging limits for use | [optional]\n```\n\n----------------------------------------\n\nTITLE: Defining SubAccountDetailsResponsePlanInfoFeaturesUsers Properties\nDESCRIPTION: Documents the properties of the SubAccountDetailsResponsePlanInfoFeaturesUsers model class. Contains two integer properties: quantity for total provided multi-accounts and remaining for available multi-accounts.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/SubAccountDetailsResponsePlanInfoFeaturesUsers.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\nquantity | int | Quantity of multi-account's provided | [optional] \nremaining | int | Available multi-accounts for use | [optional]\n```\n\n----------------------------------------\n\nTITLE: Defining GetCorporateInvitedUsersListFeatureAccess Model Properties in Python\nDESCRIPTION: This code snippet defines the properties of the GetCorporateInvitedUsersListFeatureAccess model. It includes four optional list properties: user_management, api_keys, my_plan, and apps_management. Each property represents different access rights for invited corporate users.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/GetCorporateInvitedUsersListFeatureAccess.md#2025-04-17_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nclass GetCorporateInvitedUsersListFeatureAccess:\n    \"\"\"\n    Properties:\n        user_management (list[str]): User management accessiblity. (optional)\n        api_keys (list[str]): Api keys accessiblity. (optional)\n        my_plan (list[str]): My plan accessiblity. (optional)\n        apps_management (list[str]): Apps management accessiblity. Not available in ENTv2 (optional)\n    \"\"\"\n```\n\n----------------------------------------\n\nTITLE: Defining SubAccountDetailsResponsePlanInfoFeaturesInbox Model Properties in Python\nDESCRIPTION: This code snippet defines the properties of the SubAccountDetailsResponsePlanInfoFeaturesInbox model. It includes two integer properties: 'quantity' for the number of inboxes provided, and 'remaining' for the available inboxes for use. Both properties are optional.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/SubAccountDetailsResponsePlanInfoFeaturesInbox.md#2025-04-17_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nclass SubAccountDetailsResponsePlanInfoFeaturesInbox:\n    \"\"\"\n    Properties:\n        quantity (int): Quantity of inbox provided (optional)\n        remaining (int): Available inboxes for use (optional)\n    \"\"\"\n```\n\n----------------------------------------\n\nTITLE: Defining GetTransacSmsReportReports Properties in Markdown\nDESCRIPTION: Markdown table defining properties for the GetTransacSmsReportReports model, including data types and descriptions for SMS reporting metrics such as delivery status, bounce rates, and response statistics.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/GetTransacSmsReportReports.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n_date | date | Date for which statistics are retrieved | [optional] \nrequests | int | Number of requests for the date | [optional] \ndelivered | int | Number of delivered SMS for the date | [optional] \nhard_bounces | int | Number of hardbounces for the date | [optional] \nsoft_bounces | int | Number of softbounces for the date | [optional] \nblocked | int | Number of blocked contact for the date | [optional] \nunsubscribed | int | Number of unsubscription for the date | [optional] \nreplied | int | Number of answered SMS for the date | [optional] \naccepted | int | Number of accepted SMS for the date | [optional] \nrejected | int | Number of rejected SMS for the date | [optional] \nskipped | int | Number of skipped SMS for the date | [optional]\n```\n\n----------------------------------------\n\nTITLE: WhatsApp Campaigns Model Properties Definition in Markdown\nDESCRIPTION: Defines the properties of the GetWhatsappCampaigns model, including a list of campaign objects and a count of total campaigns retrieved. Used for representing WhatsApp campaign data in API responses.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/GetWhatsappCampaigns.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**campaigns** | [**list[GetWhatsappCampaignsCampaigns]**](GetWhatsappCampaignsCampaigns.md) |  | [optional] \n**count** | **int** | Number of WhatsApp campaigns retrived | [optional] \n```\n\n----------------------------------------\n\nTITLE: Defining GetContactCampaignStatsClicked Properties in Markdown\nDESCRIPTION: This snippet defines the properties of the GetContactCampaignStatsClicked model, including the campaign_id and links. It specifies the data types and provides brief descriptions for each property.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/GetContactCampaignStatsClicked.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**campaign_id** | **int** | ID of the campaign which generated the event | \n**links** | [**list[GetExtendedContactDetailsStatisticsLinks]**](GetExtendedContactDetailsStatisticsLinks.md) |  | \n```\n\n----------------------------------------\n\nTITLE: Model Properties Definition for GetExtendedContactDetailsStatisticsClicked\nDESCRIPTION: Defines two main properties: campaign_id (integer) for identifying the source campaign, and links (array) containing details of clicked links within the campaign.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/GetExtendedContactDetailsStatisticsClicked.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\ncampaign_id | **int** | ID of the campaign which generated the event | \nlinks | [**list[GetExtendedContactDetailsStatisticsLinks]**](GetExtendedContactDetailsStatisticsLinks.md) | Listing of the clicked links for the campaign |\n```\n\n----------------------------------------\n\nTITLE: Defining GetProcesses Model Properties in Markdown\nDESCRIPTION: This snippet defines the properties of the GetProcesses model using a markdown table. It includes two properties: 'processes' (a list of GetProcess objects) and 'count' (an integer representing the number of processes).\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/GetProcesses.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**processes** | [**list[GetProcess]**](GetProcess.md) | List of processes available on your account | [optional] \n**count** | **int** | Number of processes available on your account | [optional]\n```\n\n----------------------------------------\n\nTITLE: Defining RemainingCreditModel Properties in Markdown\nDESCRIPTION: This snippet defines the properties of the RemainingCreditModel class using a markdown table. It specifies two properties: child and reseller, both of which are references to other model classes.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/RemainingCreditModel.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\nchild | [**RemainingCreditModelChild**](RemainingCreditModelChild.md) |  | \nreseller | [**RemainingCreditModelReseller**](RemainingCreditModelReseller.md) |  | \n```\n\n----------------------------------------\n\nTITLE: Defining RequestContactImport Properties in Markdown\nDESCRIPTION: This snippet defines the properties of the RequestContactImport model, including their types, descriptions, and optional status. It covers various import methods such as file URL, file body, and JSON body, as well as options for list management and import behavior.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/RequestContactImport.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**file_url** | **str** | Mandatory if fileBody or jsonBody is not defined. URL of the file to be imported (no local file). Possible file formats: .txt, .csv, .json | [optional] \n**file_body** | **str** | Mandatory if fileUrl and jsonBody is not defined. CSV content to be imported. Use semicolon to separate multiple attributes. Maximum allowed file body size is 10MB . However we recommend a safe limit of around 8 MB to avoid the issues caused due to increase of file body size while parsing. Please use fileUrl instead to import bigger files. | [optional] \n**json_body** | [**list[RequestContactImportJsonBody]**](RequestContactImportJsonBody.md) | **Mandatory if fileUrl and fileBody is not defined.** JSON content to be imported. **Maximum allowed json body size is 10MB** . However we recommend a safe limit of around 8 MB to avoid the issues caused due to increase of json body size while parsing. Please use fileUrl instead to import bigger files.  | [optional] \n**list_ids** | **list[int]** | Mandatory if newList is not defined. Ids of the lists in which the contacts shall be imported. For example, [2, 4, 7]. | [optional] \n**notify_url** | **str** | URL that will be called once the import process is finished. For reference, https://help.brevo.com/hc/en-us/articles/360007666479 | [optional] \n**new_list** | [**RequestContactImportNewList**](RequestContactImportNewList.md) |  | [optional] \n**email_blacklist** | **bool** | To blacklist all the contacts for email | [optional] [default to False]\n**disable_notification** | **bool** | To disable email notification | [optional] [default to False]\n**sms_blacklist** | **bool** | To blacklist all the contacts for sms | [optional] [default to False]\n**update_existing_contacts** | **bool** | To facilitate the choice to update the existing contacts | [optional] [default to True]\n**empty_contacts_attributes** | **bool** | To facilitate the choice to erase any attribute of the existing contacts with empty value. emptyContactsAttributes = true means the empty fields in your import will erase any attribute that currently contain data in Brevo, & emptyContactsAttributes = false means the empty fields will not affect your existing data ( only available if `updateExistingContacts` set to true ) | [optional] [default to False]\n```\n\n----------------------------------------\n\nTITLE: Defining Body3 Model Properties in Markdown\nDESCRIPTION: This snippet defines the properties of the Body3 model using a markdown table. It specifies the name, type, description, and optional notes for each property.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/Body3.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**group_name** | **str** | The name of the group of sub-accounts | \n**sub_account_ids** | **list[int]** | Pass the list of sub-account Ids to be included in the group | [optional] \n```\n\n----------------------------------------\n\nTITLE: Defining MasterDetailsResponse Model Properties in Python\nDESCRIPTION: This code snippet defines the properties of the MasterDetailsResponse model. It includes fields for email, company name, ID, currency code, timezone, billing info, and plan info. Each property is defined with its type and an optional description.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/MasterDetailsResponse.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass MasterDetailsResponse:\n    \"\"\"\n    Properties:\n        email (str): Email id of master account (optional)\n        company_name (str): Company name of master account organization (optional)\n        id (int): Unique identifier of the master account organization (optional)\n        currency_code (str): Currency code of the master account organization (optional)\n        timezone (str): Timezone of the master account organization (optional)\n        billing_info (MasterDetailsResponseBillingInfo): (optional)\n        plan_info (MasterDetailsResponsePlanInfo): (optional)\n    \"\"\"\n```\n\n----------------------------------------\n\nTITLE: SMTP Template Sender Properties Documentation - Markdown\nDESCRIPTION: Property table documenting the attributes of the GetSmtpTemplateOverviewSender model including name, email and sender ID fields. All properties are optional strings that define the sender information for an SMTP template.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/GetSmtpTemplateOverviewSender.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# GetSmtpTemplateOverviewSender\n\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**name** | **str** | From email for the template | [optional] \n**email** | **str** | From email for the template | [optional] \n**id** | **str** | Sender id of the template | [optional]\n```\n\n----------------------------------------\n\nTITLE: Defining Python Package Dependencies for Brevo Project\nDESCRIPTION: This snippet lists the required Python packages and their minimum versions for the Brevo Python project. It includes certifi, six, python_dateutil, setuptools, and urllib3, each with a specified minimum version.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/requirements.txt#2025-04-17_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\ncertifi >= 14.05.14\nsix >= 1.10\npython_dateutil >= 2.5.3\nsetuptools >= 21.0.0\nurllib3 >= 1.15.1\n```\n\n----------------------------------------\n\nTITLE: GetProcess Model Properties Table\nDESCRIPTION: Markdown table defining the properties, types and descriptions for the GetProcess model. Documents four key properties: id (integer process identifier), status (string status value), name (process name string), and export_url (optional string URL for exporting contacts).\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/GetProcess.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**id** | **int** | Id of the process | \n**status** | **str** | Status of the process | \n**name** | **str** | Process name | \n**export_url** | **str** | URL on which send export the of contacts once the process is completed | [optional]\n```\n\n----------------------------------------\n\nTITLE: GetEmailCampaigns Properties Table in Markdown\nDESCRIPTION: Markdown table defining the properties, types and descriptions for the GetEmailCampaigns model. Includes campaigns (list of objects) and count (integer) fields.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/GetEmailCampaigns.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**campaigns** | **list[object]** |  | [optional] \n**count** | **int** | Number of Email campaigns retrieved | [optional] \n```\n\n----------------------------------------\n\nTITLE: Documenting MasterDetailsResponseBillingInfo Properties in Markdown\nDESCRIPTION: Markdown table documenting the properties of the MasterDetailsResponseBillingInfo class, including property names, types, descriptions and optional status.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/MasterDetailsResponseBillingInfo.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\nemail | **str** | Billing email id of master account | [optional] \ncompany_name | **str** | Company name of master account | [optional] \nname | [**MasterDetailsResponseBillingInfoName**](MasterDetailsResponseBillingInfoName.md) |  | [optional] \naddress | [**MasterDetailsResponseBillingInfoAddress**](MasterDetailsResponseBillingInfoAddress.md) |  | [optional]\n```\n\n----------------------------------------\n\nTITLE: GetContactCampaignStats Properties Definition in Markdown\nDESCRIPTION: Markdown table defining the properties of the GetContactCampaignStats model. Each property is documented with its type, description and optional status.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/GetContactCampaignStats.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\nmessages_sent | [list[GetExtendedContactDetailsStatisticsMessagesSent]](GetExtendedContactDetailsStatisticsMessagesSent.md) |  | [optional] \nhard_bounces | [list[GetExtendedContactDetailsStatisticsMessagesSent]](GetExtendedContactDetailsStatisticsMessagesSent.md) |  | [optional] \nsoft_bounces | [list[GetExtendedContactDetailsStatisticsMessagesSent]](GetExtendedContactDetailsStatisticsMessagesSent.md) |  | [optional] \ncomplaints | [list[GetExtendedContactDetailsStatisticsMessagesSent]](GetExtendedContactDetailsStatisticsMessagesSent.md) |  | [optional] \nunsubscriptions | [GetContactCampaignStatsUnsubscriptions](GetContactCampaignStatsUnsubscriptions.md) |  | [optional] \nopened | [list[GetContactCampaignStatsOpened]](GetContactCampaignStatsOpened.md) |  | [optional] \nclicked | [list[GetContactCampaignStatsClicked]](GetContactCampaignStatsClicked.md) |  | [optional] \ntransac_attributes | [list[GetContactCampaignStatsTransacAttributes]](GetContactCampaignStatsTransacAttributes.md) |  | [optional] \ndelivered | [list[GetExtendedContactDetailsStatisticsMessagesSent]](GetExtendedContactDetailsStatisticsMessagesSent.md) |  | [optional]\n```\n\n----------------------------------------\n\nTITLE: SendTestEmail Model Properties Table\nDESCRIPTION: Markdown table defining the email_to property of the SendTestEmail model. The property accepts a list of email addresses for test recipients, with a limit of 50 test emails per day.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/SendTestEmail.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**email_to** | **list[str]** | List of the email addresses of the recipients whom you wish to send the test mail. If left empty, the test mail will be sent to your entire test list. You can not send more than 50 test emails per day. | [optional]\n```\n\n----------------------------------------\n\nTITLE: Markdown Model Definition for SubAccountDetailsResponsePlanInfoCredits\nDESCRIPTION: Documents the properties of the SubAccountDetailsResponsePlanInfoCredits model, including references to email credits, SMS credits, and WordPress subscriber credits objects. All properties are optional.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/SubAccountDetailsResponsePlanInfoCredits.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# SubAccountDetailsResponsePlanInfoCredits\n\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**emails** | [**SubAccountDetailsResponsePlanInfoCreditsEmails**](SubAccountDetailsResponsePlanInfoCreditsEmails.md) |  | [optional] \n**sms** | [**SubAccountDetailsResponsePlanInfoCreditsSms**](SubAccountDetailsResponsePlanInfoCreditsSms.md) |  | [optional] \n**wp_subscribers** | [**SubAccountDetailsResponsePlanInfoCreditsWpSubscribers**](SubAccountDetailsResponsePlanInfoCreditsWpSubscribers.md) |  | [optional]\n```\n\n----------------------------------------\n\nTITLE: Defining Body2 Model Properties in Markdown\nDESCRIPTION: Specifies the properties of the Body2 model, including an IP address (string) and a list of sub-account IDs (list of integers) to be dissociated from the IP address.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/Body2.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Body2\n\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**ip** | **str** | IP Address | \n**ids** | **list[int]** | Pass the list of sub-account Ids to be dissociated from the IP address | \n```\n\n----------------------------------------\n\nTITLE: Defining UpdateChildAccountStatus Model Properties in Markdown\nDESCRIPTION: This snippet defines the properties of the UpdateChildAccountStatus model using a markdown table. It specifies the name, type, description, and optional notes for each property.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/UpdateChildAccountStatus.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\ntransactional_email | **bool** | Status of Transactional Email Platform activation for your account (true&#x3D;enabled, false&#x3D;disabled) | [optional] \ntransactional_sms | **bool** | Status of Transactional SMS Platform activation for your account (true&#x3D;enabled, false&#x3D;disabled) | [optional] \nmarketing_automation | **bool** | Status of Marketing Automation Platform activation for your account (true&#x3D;enabled, false&#x3D;disabled) | [optional] \nsms_campaign | **bool** | Status of SMS Campaign Platform activation for your account (true&#x3D;enabled, false&#x3D;disabled) | [optional] \n```\n\n----------------------------------------\n\nTITLE: Defining GetTransacEmailContentEvents Properties in Python\nDESCRIPTION: Documents the properties of the GetTransacEmailContentEvents class. Contains two required properties: 'name' for storing the email event type, and 'time' for recording when the event occurred.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/GetTransacEmailContentEvents.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\nname | str | Name of the event that occurred on the sent email | \ntime | str | Time at which the event occurred |\n```\n\n----------------------------------------\n\nTITLE: Defining GetWhatsappEventReport Model Properties in Python\nDESCRIPTION: This code snippet defines the properties of the GetWhatsappEventReport model. It has a single property 'events' which is an optional list of GetWhatsappEventReportEvents objects.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/GetWhatsappEventReport.md#2025-04-17_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n# GetWhatsappEventReport\n\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**events** | [**list[GetWhatsappEventReportEvents]**](GetWhatsappEventReportEvents.md) |  | [optional] \n```\n\n----------------------------------------\n\nTITLE: GetAccountActivityLogs Model Properties Definition\nDESCRIPTION: Defines the properties schema for tracking account activity including action type, timestamp, user email, IP address and browser details. All fields are required strings.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/GetAccountActivityLogs.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\naction | str | Type of activity in the account. | \n_date | str | Time of the activity. | \nuser_email | str | Email address of the user who performed activity in the account. | \nuser_ip | str | IP address of the user who performed activity in the account. | \nuser_agent | str | Browser details of the user who performed the activity. |\n```\n\n----------------------------------------\n\nTITLE: GetSmsEventReport Model Properties Definition in Markdown\nDESCRIPTION: Defines the properties of the GetSmsEventReport model, specifically the 'events' property which is an optional list of GetSmsEventReportEvents objects.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/GetSmsEventReport.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\nevents | list[GetSmsEventReportEvents] |  | [optional]\n```\n\n----------------------------------------\n\nTITLE: SendSmtpEmailBcc Model Properties Definition\nDESCRIPTION: Markdown table defining the properties of the SendSmtpEmailBcc model. Specifies two properties: 'email' (required string for BCC recipient's email address) and 'name' (optional string for recipient's name with 70 character limit).\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/SendSmtpEmailBcc.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**email** | **str** | Email address of the recipient in bcc | \n**name** | **str** | Name of the recipient in bcc. Maximum allowed characters are 70. | [optional]\n```\n\n----------------------------------------\n\nTITLE: Documenting InlineResponse2003 Model Properties\nDESCRIPTION: Markdown table defining the properties of the InlineResponse2003 model. Contains a single property process_id of type integer that stores the ID of an import process.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/InlineResponse2003.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**process_id** | **int** | The ID of the import process | [optional]\n```\n\n----------------------------------------\n\nTITLE: GetExtendedContactDetailsStatistics Model Properties Definition\nDESCRIPTION: Markdown table defining the properties, types and descriptions for the GetExtendedContactDetailsStatistics model. Documents the structure for tracking contact-level statistics including sent messages, bounces, complaints, engagement metrics and transactional data.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/GetExtendedContactDetailsStatistics.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\nmessages_sent | [**list[GetExtendedContactDetailsStatisticsMessagesSent]**](GetExtendedContactDetailsStatisticsMessagesSent.md) | Listing of the sent campaign for the contact | [optional] \nhard_bounces | [**list[GetExtendedContactDetailsStatisticsMessagesSent]**](GetExtendedContactDetailsStatisticsMessagesSent.md) | Listing of the hardbounes generated by the contact | [optional] \nsoft_bounces | [**list[GetExtendedContactDetailsStatisticsMessagesSent]**](GetExtendedContactDetailsStatisticsMessagesSent.md) | Listing of the softbounes generated by the contact | [optional] \ncomplaints | [**list[GetExtendedContactDetailsStatisticsMessagesSent]**](GetExtendedContactDetailsStatisticsMessagesSent.md) | Listing of the complaints generated by the contact | [optional] \nunsubscriptions | [**GetExtendedContactDetailsStatisticsUnsubscriptions**](GetExtendedContactDetailsStatisticsUnsubscriptions.md) |  | [optional] \nopened | [**list[GetExtendedContactDetailsStatisticsOpened]**](GetExtendedContactDetailsStatisticsOpened.md) | Listing of the openings generated by the contact | [optional] \nclicked | [**list[GetExtendedContactDetailsStatisticsClicked]**](GetExtendedContactDetailsStatisticsClicked.md) | Listing of the clicks generated by the contact | [optional] \ntransac_attributes | **list[object]** | Listing of the transactional attributes for the contact | [optional] \ndelivered | [**list[GetExtendedContactDetailsStatisticsDelivered]**](GetExtendedContactDetailsStatisticsDelivered.md) | Listing of the delivered campaign for the contact | [optional]\n```\n\n----------------------------------------\n\nTITLE: Defining InlineResponse2007 Model Structure in Markdown\nDESCRIPTION: Documents the structure of the InlineResponse2007 model which contains a single property 'products' that holds a list of ConversionSourceProduct objects representing attributed products.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/InlineResponse2007.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# InlineResponse2007\n\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**products** | [**list[ConversionSourceProduct]**](ConversionSourceProduct.md) | List of attributed products |\n```\n\n----------------------------------------\n\nTITLE: GetTransacEmailsList Model Properties Definition\nDESCRIPTION: Defines the properties of the GetTransacEmailsList model including count and transactional_emails fields. The count field represents the total number of transactional emails, while transactional_emails contains a list of GetTransacEmailsListTransactionalEmails objects.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/GetTransacEmailsList.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# GetTransacEmailsList\n\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**count** | **int** | Total number of transactional emails available on your account according to the passed filter | [optional] \n**transactional_emails** | [**list[GetTransacEmailsListTransactionalEmails]**](GetTransacEmailsListTransactionalEmails.md) |  | [optional] \n```\n\n----------------------------------------\n\nTITLE: Defining Putresendcancelinvitation Model Properties in Python\nDESCRIPTION: This code snippet defines the properties of the Putresendcancelinvitation model. It specifies a single property 'email' of type string, which represents the email address of the user.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/Putresendcancelinvitation.md#2025-04-17_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\nemail | **str** | Email address of the user. |\n```\n\n----------------------------------------\n\nTITLE: Defining CreateDomain Model in Markdown\nDESCRIPTION: This snippet defines the CreateDomain model with a single property 'name' of type string, representing the domain name. It includes links to related documentation.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/CreateDomain.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# CreateDomain\n\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**name** | **str** | Domain name | \n\n[[Back to Model list]](../README.md#documentation-for-models) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to README]](../README.md)\n```\n\n----------------------------------------\n\nTITLE: Defining GetAccountMarketingAutomation Properties in Python\nDESCRIPTION: Property definitions for the GetAccountMarketingAutomation model class. Includes key fields for the marketing automation tracker ID and enabled status.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/GetAccountMarketingAutomation.md#2025-04-17_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\nkey | str | Marketing Automation Tracker ID | [optional]\nenabled | bool | Status of Marketing Automation Plateform activation for your account (true=enabled, false=disabled)\n```\n\n----------------------------------------\n\nTITLE: Defining GetInvitedUsersListUsers Model Properties in Python\nDESCRIPTION: This code snippet defines the properties of the GetInvitedUsersListUsers model. It includes four properties: email (string), is_owner (string), status (string), and feature_access (object reference to GetInvitedUsersListFeatureAccess).\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/GetInvitedUsersListUsers.md#2025-04-17_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**email** | **str** | Email address of the user. | \n**is_owner** | **str** | Flag for indicating is user owner of the organization. | \n**status** | **str** | Status of the invited user. | \n**feature_access** | [**GetInvitedUsersListFeatureAccess**](GetInvitedUsersListFeatureAccess.md) |  | \n```\n\n----------------------------------------\n\nTITLE: Defining Properties for Body1 Model in Markdown\nDESCRIPTION: This snippet defines the properties of the Body1 model using a markdown table. It specifies two properties: 'ip' (a string representing an IP address) and 'ids' (a list of integers representing sub-account IDs).\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/Body1.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**ip** | **str** | IP Address | \n**ids** | **list[int]** | Pass the list of sub-account Ids to be associated with the IP address | \n```\n\n----------------------------------------\n\nTITLE: Defining SendReport Class Properties in Python\nDESCRIPTION: Defines the properties of the SendReport class including 'language' (a string with default value 'fr') and 'email' (an instance of SendReportEmail class).\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/SendReport.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass SendReport:\n    language: str = 'fr'  # Language of email content for campaign report sending.\n    email: SendReportEmail\n```\n\n----------------------------------------\n\nTITLE: OTP Model Properties Table - Markdown\nDESCRIPTION: Markdown table defining the OTP model properties, specifically a 6-digit code sent via email\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/Otp.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name | Type | Description | Notes |\n| ------------ | ------------- | ------------- | ------------- |\n| **name** | **int** | 6 digit OTP received on email | [optional] |\n```\n\n----------------------------------------\n\nTITLE: Defining Model Properties for Admin Unsubscription in Python\nDESCRIPTION: Model class properties definition for tracking admin unsubscription events. Includes event_time as required UTC timestamp and optional IP address from which the unsubscription was performed.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/GetExtendedContactDetailsStatisticsUnsubscriptionsAdminUnsubscription.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\nevent_time | str | UTC date-time of the event | \nip | str | IP from which the user has been unsubscribed | [optional]\n```\n\n----------------------------------------\n\nTITLE: Defining GetDeviceBrowserStats Properties in Markdown\nDESCRIPTION: Defines the properties of the GetDeviceBrowserStats model, including clickers, unique_clicks, viewed, and unique_views. Each property is described with its type and purpose in the context of email campaign analytics.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/GetDeviceBrowserStats.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\nclickers | **int** | Number of total clicks for the campaign using the particular browser | \nunique_clicks | **int** | Number of unique clicks for the campaign using the particular browser | \nviewed | **int** | Number of openings for the campaign using the particular browser | \nunique_views | **int** | Number of unique openings for the campaign using the particular browser | \n```\n\n----------------------------------------\n\nTITLE: Defining GetSmsCampaigns Model Properties in Markdown\nDESCRIPTION: Documents the properties of the GetSmsCampaigns model including campaigns list and count. The campaigns property is an optional list of objects, while count is an optional integer representing the number of retrieved SMS campaigns.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/GetSmsCampaigns.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# GetSmsCampaigns\n\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**campaigns** | **list[object]** |  | [optional] \n**count** | **int** | Number of SMS campaigns retrieved | [optional]\n```\n\n----------------------------------------\n\nTITLE: GetAttributes Model Properties Table\nDESCRIPTION: Table defining the properties of the GetAttributes model class, showing that it has an attributes property containing a list of GetAttributesAttributes objects.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/GetAttributes.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**attributes** | [**list[GetAttributesAttributes]**](GetAttributesAttributes.md) | Listing of available contact attributes in your account |\n```\n\n----------------------------------------\n\nTITLE: Documenting SubAccountDetailsResponse Model Properties in Markdown\nDESCRIPTION: Markdown table documenting the properties, types and descriptions for the SubAccountDetailsResponse model class. Includes fields for name, email, company name, groups list, and plan information with their respective data types and optional status.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/SubAccountDetailsResponse.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\nname | str | Name of the sub-account user | [optional] \nemail | str | Email id of the sub-account organization | [optional] \ncompany_name | str | Sub-account company name | [optional] \ngroups | list[SubAccountDetailsResponseGroups] | List of group(s) associated with the sub-account | [optional] \nplan_info | SubAccountDetailsResponsePlanInfo |  | [optional]\n```\n\n----------------------------------------\n\nTITLE: FileDownloadableLink Model Properties Table\nDESCRIPTION: Markdown table defining the properties of the FileDownloadableLink class, showing the file_url string property that contains a unique download link.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/FileDownloadableLink.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**file_url** | **str** | A unique link to download the requested file. |\n```\n\n----------------------------------------\n\nTITLE: Defining GetChildInfoApiKeysV3 Model Properties in Markdown\nDESCRIPTION: This snippet defines the properties of the GetChildInfoApiKeysV3 model using a markdown table. It specifies the name, type, and description of each property.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/GetChildInfoApiKeysV3.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**name** | **str** | Name of the key for version 3 | \n**key** | **str** | API Key for version 3 | \n```\n\n----------------------------------------\n\nTITLE: Defining CompanyAttributes Model Structure in Markdown\nDESCRIPTION: This snippet defines the structure of the CompanyAttributes model using a Markdown table. The table is empty, suggesting that the model currently has no defined properties.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/CompanyAttributes.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n\n```\n\n----------------------------------------\n\nTITLE: Defining GetExtendedCampaignOverview Properties in Markdown\nDESCRIPTION: This code snippet defines the properties of the GetExtendedCampaignOverview model using a markdown table. It includes property names, types, descriptions, and optional notes for each field in the model.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/GetExtendedCampaignOverview.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**id** | **int** | ID of the campaign | \n**name** | **str** | Name of the campaign | \n**subject** | **str** | Subject of the campaign. Only available if `abTesting` flag of the campaign is `false` | [optional] \n**preview_text** | **str** | Preview text or preheader of the email campaign | [optional] \n**type** | **str** | Type of campaign | \n**status** | **str** | Status of the campaign | \n**scheduled_at** | **str** | UTC date-time on which campaign is scheduled (YYYY-MM-DDTHH:mm:ss.SSSZ) | [optional] \n**ab_testing** | **bool** | Status of A/B Test for the campaign. abTesting = false means it is disabled, & abTesting = true means it is enabled. | [optional] \n**subject_a** | **str** | Subject A of the ab-test campaign. Only available if `abTesting` flag of the campaign is `true` | [optional] \n**subject_b** | **str** | Subject B of the ab-test campaign. Only available if `abTesting` flag of the campaign is `true` | [optional] \n**split_rule** | **int** | The size of your ab-test groups. Only available if `abTesting` flag of the campaign is `true` | [optional] \n**winner_criteria** | **str** | Criteria for the winning version. Only available if `abTesting` flag of the campaign is `true` | [optional] \n**winner_delay** | **int** | The duration of the test in hours at the end of which the winning version will be sent. Only available if `abTesting` flag of the campaign is `true` | [optional] \n**send_at_best_time** | **bool** | It is true if you have chosen to send your campaign at best time, otherwise it is false | [optional] \n**utm_campaign_value** | **str** | utm parameter associated with campaign | [optional] \n**utm_source** | **str** | source of utm parameter | [optional] \n**utm_medium** | **str** | medium parameter | [optional] \n**utm_id** | **int** | utm id | [optional] \n**test_sent** | **bool** | Retrieved the status of test email sending. (true=Test email has been sent  false=Test email has not been sent) | \n**header** | **str** | Header of the campaign | \n**footer** | **str** | Footer of the campaign | \n**sender** | [**GetExtendedCampaignOverviewSender**](GetExtendedCampaignOverviewSender.md) |  | \n**reply_to** | **str** | Email defined as the \"Reply to\" of the campaign | \n**to_field** | **str** | Customisation of the \"to\" field of the campaign | [optional] \n**html_content** | **str** | HTML content of the campaign | \n**share_link** | **str** | Link to share the campaign on social medias | [optional] \n**tag** | **str** | Tag of the campaign | [optional] \n**created_at** | **str** | Creation UTC date-time of the campaign (YYYY-MM-DDTHH:mm:ss.SSSZ) | \n**modified_at** | **str** | UTC date-time of last modification of the campaign (YYYY-MM-DDTHH:mm:ss.SSSZ) | \n**inline_image_activation** | **bool** | Status of inline image. inlineImageActivation = false means image can't be embedded, & inlineImageActivation = true means image can be embedded, in the email. | [optional] \n**mirror_active** | **bool** | Status of mirror links in campaign. mirrorActive = false means mirror links are deactivated, & mirrorActive = true means mirror links are activated, in the campaign | [optional] \n**recurring** | **bool** | FOR TRIGGER ONLY ! Type of trigger campaign.recurring = false means contact can receive the same Trigger campaign only once, & recurring = true means contact can receive the same Trigger campaign several times | [optional] \n**sent_date** | **str** | Sent UTC date-time of the campaign (YYYY-MM-DDTHH:mm:ss.SSSZ). Only available if 'status' of the campaign is 'sent' | [optional] \n**return_bounce** | **int** | Total number of non-delivered campaigns for a particular campaign id. | [optional] \n```\n\n----------------------------------------\n\nTITLE: Defining AbTestCampaignResultStatistics Model Properties in Markdown\nDESCRIPTION: This snippet defines the properties of the AbTestCampaignResultStatistics model. Each property is of type AbTestVersionStats and represents different metrics for A/B test campaign results.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/AbTestCampaignResultStatistics.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\nopeners | [**AbTestVersionStats**](AbTestVersionStats.md) |  | \nclicks | [**AbTestVersionStats**](AbTestVersionStats.md) |  | \nunsubscribed | [**AbTestVersionStats**](AbTestVersionStats.md) |  | \nhard_bounces | [**AbTestVersionStats**](AbTestVersionStats.md) |  | \nsoft_bounces | [**AbTestVersionStats**](AbTestVersionStats.md) |  | \ncomplaints | [**AbTestVersionStats**](AbTestVersionStats.md) |  | \n```\n\n----------------------------------------\n\nTITLE: Defining GetCorporateUserPermissionFeatureAccess Model Properties in Python\nDESCRIPTION: Specifies the properties of the GetCorporateUserPermissionFeatureAccess model, including api_keys, my_plan, user_management, and apps_management. Each property is a list of strings representing specific permissions.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/GetCorporateUserPermissionFeatureAccess.md#2025-04-17_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nclass GetCorporateUserPermissionFeatureAccess:\n    def __init__(self):\n        self.api_keys = []  # Permission on api keys\n        self.my_plan = []  # Permission on my plan\n        self.user_management = []  # Permission on user management\n        self.apps_management = []  # Permission on apps management\n```\n\n----------------------------------------\n\nTITLE: Defining InlineResponse201 Model Properties in Markdown\nDESCRIPTION: This snippet outlines the properties of the InlineResponse201 model using a markdown table. It specifies a single optional property 'id' of type string.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/InlineResponse201.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**id** | **str** |  | [optional] \n```\n\n----------------------------------------\n\nTITLE: GetWebhooks Model Definition in Markdown\nDESCRIPTION: Documents the GetWebhooks model class properties, specifying that it contains a webhooks property which is a list of objects.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/GetWebhooks.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# GetWebhooks\n\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**webhooks** | **list[object]** |  | \n\n[[Back to Model list]](../README.md#documentation-for-models) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to README]](../README.md)\n```\n\n----------------------------------------\n\nTITLE: Defining MasterDetailsResponsePlanInfo Properties in Markdown\nDESCRIPTION: This code snippet defines the properties of the MasterDetailsResponsePlanInfo model using a Markdown table. It specifies the name, type, description, and optional status of each property.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/MasterDetailsResponsePlanInfo.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**currency_code** | **str** | Plan currency | [optional] \n**next_billing_at** | **int** | Timestamp of next billing date | [optional] \n**price** | **float** | Plan amount | [optional] \n**plan_period** | **str** | Plan period type | [optional] \n**sub_accounts** | **int** | Number of sub-accounts | [optional] \n**features** | [**list[MasterDetailsResponsePlanInfoFeatures]**](MasterDetailsResponsePlanInfoFeatures.md) | List of provided features in the plan | [optional] \n```\n\n----------------------------------------\n\nTITLE: Defining GetAccountRelayData Model Properties in Python\nDESCRIPTION: This code snippet defines the properties of the GetAccountRelayData model. It includes user_name (string) for login, relay (string) for SMTP Relay URL, and port (integer) for SMTP Relay port.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/GetAccountRelayData.md#2025-04-17_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n# GetAccountRelayData\n\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\nuser_name | **str** | Email to use as login on transactional platform | \nrelay | **str** | URL of the SMTP Relay | \nport | **int** | Port used for SMTP Relay | \n```\n\n----------------------------------------\n\nTITLE: Defining MasterDetailsResponseBillingInfoName Model in Python\nDESCRIPTION: This code snippet defines the MasterDetailsResponseBillingInfoName model with two optional string properties: given_name for the first name and family_name for the last name used in billing information.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/MasterDetailsResponseBillingInfoName.md#2025-04-17_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nclass MasterDetailsResponseBillingInfoName:\n    def __init__(self):\n        self.given_name = None  # str | First name for billing | [optional]\n        self.family_name = None  # str | Last name for billing | [optional]\n```\n\n----------------------------------------\n\nTITLE: Defining SubAccountDetailsResponsePlanInfo Model Properties in Markdown\nDESCRIPTION: This snippet defines the properties of the SubAccountDetailsResponsePlanInfo model, including their types and descriptions. It uses a markdown table format to clearly present the information.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/SubAccountDetailsResponsePlanInfo.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\ncredits | [**SubAccountDetailsResponsePlanInfoCredits**](SubAccountDetailsResponsePlanInfoCredits.md) |  | [optional] \nfeatures | [**SubAccountDetailsResponsePlanInfoFeatures**](SubAccountDetailsResponsePlanInfoFeatures.md) |  | [optional] \nplan_type | **str** | type of the plan | [optional] \n```\n\n----------------------------------------\n\nTITLE: AuthenticateDomainModel Properties Definition\nDESCRIPTION: Schema definition for domain authentication model containing domain_name and message fields. The domain_name field stores the domain string while message field contains the success message response.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/AuthenticateDomainModel.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\ndomain_name | str | Domain | \nmessage | str | Success message |\n```\n\n----------------------------------------\n\nTITLE: AbTestVersionStats Model Properties Definition\nDESCRIPTION: Defines properties for an A/B test statistics model with version A and version B percentage values. Each version property stores the percentage of an event occurrence for that specific variant.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/AbTestVersionStats.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\nversion_a | str | percentage of an event for version A | \nversion_b | str | percentage of an event for version B |\n```\n\n----------------------------------------\n\nTITLE: Model Properties Table for InlineResponse200\nDESCRIPTION: Table showing the properties, types and description of InlineResponse200 model attributes. Contains a single optional message property of type string.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/InlineResponse200.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown-table\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**message** | **str** |  | [optional]\n```\n\n----------------------------------------\n\nTITLE: Defining TaskTypes Model Properties in Markdown\nDESCRIPTION: Describes the properties of the TaskTypes model, including their names, types, and optional status. The model has two properties: 'id' and 'title', both of type string and marked as optional.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/TaskTypes.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**id** | **str** | Id of task type | [optional] \n**title** | **str** | Title of task type | [optional]\n```\n\n----------------------------------------\n\nTITLE: Defining GetTransacEmailContent Model Properties in Markdown\nDESCRIPTION: This snippet defines the properties of the GetTransacEmailContent model using a markdown table. It includes property names, types, descriptions, and optional notes.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/GetTransacEmailContent.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\nemail | **str** | Email address to which transactional email has been sent | \nsubject | **str** | Subject of the sent email | \ntemplate_id | **int** | Id of the template | [optional] \n_date | **str** | Date on which transactional email was sent | \nevents | [**list[GetTransacEmailContentEvents]**](GetTransacEmailContentEvents.md) | Series of events which occurred on the transactional email | \nbody | **str** | Actual content of the transactional email that has been sent | \nattachment_count | **int** | Count of the attachments that were sent in the email | \n```\n\n----------------------------------------\n\nTITLE: Defining UploadImageModel Properties in Markdown\nDESCRIPTION: This snippet defines the properties of the UploadImageModel class using a markdown table. It specifies the 'url' property as a string type, representing the URL of the uploaded image.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/UploadImageModel.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**url** | **str** | URL of the image uploaded |\n```\n\n----------------------------------------\n\nTITLE: Model Properties Definition for GetExtendedContactDetailsStatisticsOpened in Markdown\nDESCRIPTION: Documents the properties of the GetExtendedContactDetailsStatisticsOpened model including campaign_id, count, event_time, and ip fields. Each property is defined with its type and description.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/GetExtendedContactDetailsStatisticsOpened.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\ncampaign_id | int | ID of the campaign which generated the event | \ncount | int | Number of openings for the campaign | \nevent_time | str | UTC date-time of the event | \nip | str | IP from which the user has opened the email |\n```\n\n----------------------------------------\n\nTITLE: Company Model Properties Table - Markdown\nDESCRIPTION: Markdown table defining the properties of the Company model including their types, descriptions and optional status. Properties include company ID, attributes, linked contacts IDs and linked deals IDs.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/Company.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**id** | **str** | Unique company id | [optional] \n**attributes** | **object** | Company attributes with values | [optional] \n**linked_contacts_ids** | **list[int]** | Contact ids for contacts linked to this company | [optional] \n**linked_deals_ids** | **list[str]** | Deals ids for companies linked to this company | [optional]\n```\n\n----------------------------------------\n\nTITLE: Documenting AbTestVersionClicks Model Structure\nDESCRIPTION: Markdown table structure defining the properties, types, descriptions and notes for the AbTestVersionClicks model class. The table is currently empty indicating no defined properties.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/AbTestVersionClicks.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n```\n\n----------------------------------------\n\nTITLE: Defining UpdateSender Model Properties in Python\nDESCRIPTION: This code snippet defines the properties of the UpdateSender model. It includes optional fields for updating a sender's name, email, and associated IPs for dedicated IP scenarios.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/UpdateSender.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass UpdateSender:\n    def __init__(self):\n        self.name = None  # str | From Name to update the sender\n        self.email = None  # str | From Email to update the sender\n        self.ips = None  # list[CreateSenderIps] | Only in case of dedicated IP, IPs to associate to the sender. If passed, will replace all the existing IPs.\n```\n\n----------------------------------------\n\nTITLE: Defining VariablesItems Model Properties in Python\nDESCRIPTION: This code snippet defines the properties of the VariablesItems model. It includes three optional string properties: name, default, and datatype. The model is likely used for handling variable-related data in the Brevo Python project.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/VariablesItems.md#2025-04-17_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nclass VariablesItems:\n    \"\"\"\n    Properties\n    Name | Type | Description | Notes\n    ------------ | ------------- | ------------- | -------------\n    name | str |  | [optional] \n    default | str |  | [optional] \n    datatype | str |  | [optional] \n    \"\"\"\n```\n\n----------------------------------------\n\nTITLE: Defining GetExtendedClientAddress Properties in Markdown\nDESCRIPTION: Describes the properties of the GetExtendedClientAddress class using a markdown table. Each property is defined with its name, type, and description. All properties are of type string and represent different components of a client's address.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/GetExtendedClientAddress.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\nstreet | **str** | Street information | \ncity | **str** | City information | \nzip_code | **str** | Zip Code information | \ncountry | **str** | Country information | \n```\n\n----------------------------------------\n\nTITLE: Defining UpdateCampaignStatus Model Properties in Markdown\nDESCRIPTION: This snippet defines the properties of the UpdateCampaignStatus model. It specifies a single property 'status' of type string, which is optional and includes a note about its usage for template type campaigns.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/UpdateCampaignStatus.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**status** | **str** | Note:- replicateTemplate status will be available only for template type campaigns. | [optional]\n```\n\n----------------------------------------\n\nTITLE: Defining GetChildInfoApiKeysV2 Model Properties in Python\nDESCRIPTION: Defines the properties of the GetChildInfoApiKeysV2 model, including 'name' for the key name and 'key' for the API key value. Both properties are of type string and are required.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/GetChildInfoApiKeysV2.md#2025-04-17_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nclass GetChildInfoApiKeysV2:\n    \"\"\"\n    Properties:\n        name (str): Name of the key for version 2\n        key (str): API Key for version 2\n    \"\"\"\n```\n\n----------------------------------------\n\nTITLE: User Permission Privileges Model Properties Table\nDESCRIPTION: Markdown table defining the properties of the GetUserPermissionPrivileges model including feature (string) and permissions (list of strings).\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/GetUserPermissionPrivileges.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\nfeature | **str** |  | \npermissions | **list[str]** |  | \n```\n\n----------------------------------------\n\nTITLE: Defining CreateDomainModelDnsRecordsDkimRecord Class Properties in Python\nDESCRIPTION: This code snippet defines the properties of the CreateDomainModelDnsRecordsDkimRecord class. It includes four properties: type, value, host_name, and status, all of which are optional.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/CreateDomainModelDnsRecordsDkimRecord.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass CreateDomainModelDnsRecordsDkimRecord:\n    \"\"\"\n    Properties\n    Name | Type | Description | Notes\n    ------------ | ------------- | ------------- | -------------\n    type | str |  | [optional] \n    value | str |  | [optional] \n    host_name | str |  | [optional] \n    status | bool |  | [optional] \n    \"\"\"\n```\n\n----------------------------------------\n\nTITLE: GetOrders Model Properties Table\nDESCRIPTION: Markdown table defining the properties of the GetOrders model, including orders list and count fields with their types and descriptions.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/GetOrders.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**orders** | **list[object]** |  | [optional] \n**count** | **int** | Number of orders | [optional] \n```\n\n----------------------------------------\n\nTITLE: Defining AddChildDomain Model Properties in Markdown\nDESCRIPTION: Describes the properties of the AddChildDomain model, specifically the 'domain' property which is a string representing the sender domain to add for a child account.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/AddChildDomain.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**domain** | **str** | Sender domain to add for a specific child account | [optional]\n```\n\n----------------------------------------\n\nTITLE: GetContactCampaignStatsOpened Model Properties Table\nDESCRIPTION: Table defining the properties of the GetContactCampaignStatsOpened model including campaign_id, count, event_time, and ip fields with their types and descriptions.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/GetContactCampaignStatsOpened.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\ncampaign_id | **int** | ID of the campaign which generated the event | \ncount | **int** | Number of openings of the campaign | \nevent_time | **str** | UTC date-time of the event | \nip | **str** | IP from which the user has opened the campaign |\n```\n\n----------------------------------------\n\nTITLE: GetCorporateUserPermission Model Properties Definition\nDESCRIPTION: Markdown table defining the properties of the GetCorporateUserPermission model including email, status, groups, and feature access fields with their respective types and descriptions.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/GetCorporateUserPermission.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**email** | **str** | Email address of the user. | \n**status** | **str** | Status of the invited user. | \n**groups** | [**list[GetCorporateUserPermissionGroups]**](GetCorporateUserPermissionGroups.md) |  | \n**feature_access** | [**GetCorporateUserPermissionFeatureAccess**](GetCorporateUserPermissionFeatureAccess.md) |  | \n```\n\n----------------------------------------\n\nTITLE: InlineResponse2001 Model Properties Table\nDESCRIPTION: Markdown table defining the properties of the InlineResponse2001 model class, including id and group_name fields with their types and descriptions\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/InlineResponse2001.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**id** | **str** | Unique id of the group | [optional] \n**group_name** | **str** | The name of the group of sub-accounts | [optional]\n```\n\n----------------------------------------\n\nTITLE: GetChildrenList Model Properties Definition\nDESCRIPTION: Defines the properties of the GetChildrenList model including children array and count. The children property stores child account information as a list of objects, while count tracks the total number of child accounts.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/GetChildrenList.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**children** | **list[object]** | Your children&#39;s account information | [optional] \n**count** | **int** | Number of child accounts | [optional] \n```\n\n----------------------------------------\n\nTITLE: Defining CreateModel Class Properties in Markdown\nDESCRIPTION: Defines the properties of the CreateModel class using a markdown table. It specifies the 'id' property as an integer representing the ID of the created object.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/CreateModel.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**id** | **int** | ID of the object created |\n```\n\n----------------------------------------\n\nTITLE: Defining GetCorporateInvitedUsersList Properties in Markdown\nDESCRIPTION: Documents the properties of the GetCorporateInvitedUsersList model including the users list property which contains GetCorporateInvitedUsersListUsers objects.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/GetCorporateInvitedUsersList.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**users** | [**list[GetCorporateInvitedUsersListUsers]**](GetCorporateInvitedUsersListUsers.md) | Get invited users list | [optional]\n```\n\n----------------------------------------\n\nTITLE: Model Properties Definition in Markdown\nDESCRIPTION: Defines the properties of the InlineResponse2004 model class, specifying the 'code' property as a string type that must comply with ISO 4217 currency codes.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/InlineResponse2004.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**code** | **str** | ISO 4217 compliant display currency code |\n```\n\n----------------------------------------\n\nTITLE: RemoveCredits Model Properties Definition in Markdown\nDESCRIPTION: Defines the properties for the RemoveCredits model including SMS and email credit removal options. Either SMS or email credits must be specified when removing credits from a child account.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/RemoveCredits.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\nsms | **int** | Required if email credits are empty. SMS credits to be removed from the child account | [optional] \nemail | **int** | Required if sms credits are empty. Email credits to be removed from the child account | [optional]\n```\n\n----------------------------------------\n\nTITLE: GetCorporateInvitedUsersListGroups Model Properties Definition\nDESCRIPTION: Defines the properties of the GetCorporateInvitedUsersListGroups model, including id (string) for group identification and name (string) for group name. Both fields are optional.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/GetCorporateInvitedUsersListGroups.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**id** | **str** | group id | [optional] \n**name** | **str** | group name | [optional]\n```\n\n----------------------------------------\n\nTITLE: Defining GetExtendedContactDetailsStatisticsDelivered Properties in Python\nDESCRIPTION: This code snippet defines the properties of the GetExtendedContactDetailsStatisticsDelivered model. It includes two properties: campaign_id (an integer representing the ID of the campaign that generated the event) and event_time (a string representing the UTC date-time of the event).\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/GetExtendedContactDetailsStatisticsDelivered.md#2025-04-17_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n# GetExtendedContactDetailsStatisticsDelivered\n\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\ncampaign_id | **int** | ID of the campaign which generated the event | \nevent_time | **str** | UTC date-time of the event | \n```\n\n----------------------------------------\n\nTITLE: Model Properties Documentation for Contact Unsubscription Statistics\nDESCRIPTION: Documents the properties of the GetExtendedContactDetailsStatisticsUnsubscriptions model, which includes arrays for tracking both user-initiated unsubscriptions via campaign links and administrator-performed unsubscriptions.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/GetExtendedContactDetailsStatisticsUnsubscriptions.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\nuser_unsubscription | [list[GetExtendedContactDetailsStatisticsUnsubscriptionsUserUnsubscription]](GetExtendedContactDetailsStatisticsUnsubscriptionsUserUnsubscription.md) | Contact unsubscribe via unsubscription link in a campaign | \nadmin_unsubscription | [list[GetExtendedContactDetailsStatisticsUnsubscriptionsAdminUnsubscription]](GetExtendedContactDetailsStatisticsUnsubscriptionsAdminUnsubscription.md) | Contact has been unsubscribed from the administrator |\n```\n\n----------------------------------------\n\nTITLE: Defining PostSendSmsTestFailed Model Properties in Python\nDESCRIPTION: Defines the properties of a PostSendSmsTestFailed model class that represents SMS test failure responses. Contains code (int), message (str), and optional lists for unexisting_sms and without_list_sms.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/PostSendSmsTestFailed.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ncode = int  # Response code\nmessage = str  # Response message\nunexisting_sms = list[str]  # Optional list of unexisting SMS\nwithout_list_sms = list[str]  # Optional list of SMS without list\n```\n\n----------------------------------------\n\nTITLE: RequestContactExportCustomContactFilter Properties Definition in Markdown\nDESCRIPTION: Defines the properties of the RequestContactExportCustomContactFilter model including action filters for contacts, email campaigns, and SMS campaigns along with their associated IDs. Each property includes type information and detailed descriptions of valid values and usage requirements.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/RequestContactExportCustomContactFilter.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\naction_for_contacts | str | Mandatory if neither actionForEmailCampaigns nor actionForSmsCampaigns is passed. This will export the contacts on the basis of provided action applied on contacts as per the list id. * allContacts - Fetch the list of all contacts for a particular list. * subscribed & unsubscribed - Fetch the list of subscribed / unsubscribed (blacklisted via any means) contacts for a particular list. * unsubscribedPerList - Fetch the list of contacts that are unsubscribed from a particular list only.  | [optional] \naction_for_email_campaigns | str | Mandatory if neither actionForContacts nor actionForSmsCampaigns is passed. This will export the contacts on the basis of provided action applied on email campaigns. * openers & nonOpeners - emailCampaignId is mandatory. Fetch the list of readers / non-readers for a particular email campaign. * clickers & nonClickers - emailCampaignId is mandatory. Fetch the list of clickers / non-clickers for a particular email campaign. * unsubscribed - emailCampaignId is mandatory. Fetch the list of all unsubscribed (blacklisted via any means) contacts for a particular email campaign. * hardBounces & softBounces - emailCampaignId is optional. Fetch the list of hard bounces / soft bounces for a particular / all email campaign(s).  | [optional] \naction_for_sms_campaigns | str | Mandatory if neither actionForContacts nor actionForEmailCampaigns is passed. This will export the contacts on the basis of provided action applied on sms campaigns. * unsubscribed - Fetch the list of all unsubscribed (blacklisted via any means) contacts for all / particular sms campaigns. * hardBounces & softBounces - Fetch the list of hard bounces / soft bounces for all / particular sms campaigns.  | [optional] \nlist_id | int | Mandatory if actionForContacts is passed, ignored otherwise. Id of the list for which the corresponding action shall be applied in the filter. | [optional] \nemail_campaign_id | int | Considered only if actionForEmailCampaigns is passed, ignored otherwise. Mandatory if action is one of the following - openers, nonOpeners, clickers, nonClickers, unsubscribed. The id of the email campaign for which the corresponding action shall be applied in the filter. | [optional] \nsms_campaign_id | int | Considered only if actionForSmsCampaigns is passed, ignored otherwise. The id of sms campaign for which the corresponding action shall be applied in the filter. | [optional] \n```\n\n----------------------------------------\n\nTITLE: Defining SsoTokenRequest Model Properties in Markdown\nDESCRIPTION: Documents the properties of SsoTokenRequest model including their types, descriptions and optional status. The model has four main properties: id (required integer), email (optional string), target (optional string with predefined values), and url (optional string for full target URL).\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/SsoTokenRequest.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**id** | **int** | Id of the sub-account organization | \n**email** | **str** | User email of sub-account organization | [optional] \n**target** | **str** | Set target after login success * automation - Redirect to Automation after login * email_campaign - Redirect to Email Campaign after login * contacts - Redirect to Contacts after login * landing_pages - Redirect to Landing Pages after login * email_transactional - Redirect to Email Transactional after login * senders - Redirect to Contacts after login * sms_campaign - Redirect to Sms Campaign after login * sms_transactional - Redirect to Sms Transactional after login  | [optional] \n**url** | **str** | Set the full target URL after login success. The user will land directly on this target URL after login | [optional]\n```\n\n----------------------------------------\n\nTITLE: Defining GetSegments Model Properties in Markdown\nDESCRIPTION: Specifies the properties of the GetSegments model, including 'segments' of type GetSegmentsSegments and 'count' of type integer. Both properties are optional.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/GetSegments.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**segments** | [**GetSegmentsSegments**](GetSegmentsSegments.md) |  | [optional] \n**count** | **int** | Number of Segments available in your account | [optional] \n```\n\n----------------------------------------\n\nTITLE: Defining GetCorporateInvitedUsersListUsers Model Properties in Python\nDESCRIPTION: This code snippet defines the properties of the GetCorporateInvitedUsersListUsers class. It includes references to other custom classes and basic data types for representing user information in a corporate invitation context.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/GetCorporateInvitedUsersListUsers.md#2025-04-17_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n# GetCorporateInvitedUsersListUsers\n\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\ngroups | [**GetCorporateInvitedUsersListGroups**](GetCorporateInvitedUsersListGroups.md) |  | \nemail | **str** | Email address of the user. | \nis_owner | **str** | Flag for indicating is user owner of the organization. | \nstatus | **str** | Status of the invited user. | \nfeature_access | [**GetCorporateInvitedUsersListFeatureAccess**](GetCorporateInvitedUsersListFeatureAccess.md) |  | \n```\n\n----------------------------------------\n\nTITLE: DeleteHardbounces Model Properties Table\nDESCRIPTION: Markdown table defining the properties of the DeleteHardbounces model including start_date, end_date, and contact_email fields with their types and descriptions.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/DeleteHardbounces.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\nstart_date | str | Starting date (YYYY-MM-DD) of the time period for deletion. The hardbounces occurred after this date will be deleted. Must be less than or equal to the endDate | [optional] \nend_date | str | Ending date (YYYY-MM-DD) of the time period for deletion. The hardbounces until this date will be deleted. Must be greater than or equal to the startDate | [optional] \ncontact_email | str | Target a specific email address | [optional]\n```\n\n----------------------------------------\n\nTITLE: Defining GetIpFromSender Model Properties in Markdown\nDESCRIPTION: This snippet defines the properties of the GetIpFromSender model using a markdown table. It includes the property name, data type, description, and any additional notes for each attribute of the model.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/GetIpFromSender.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**id** | **int** | ID of the dedicated IP | \n**ip** | **str** | Dedicated IP | \n**domain** | **str** | Domain associated to the IP | \n**weight** | **int** | Weight of the IP | \n```\n\n----------------------------------------\n\nTITLE: GetCorporateUserPermissionGroups Model Properties Definition\nDESCRIPTION: Markdown table defining the properties of the GetCorporateUserPermissionGroups model class. Includes two properties: id (string) for group identifier and name (string) for group name, both marked as optional.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/GetCorporateUserPermissionGroups.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**id** | **str** | group identifier | [optional] \n**name** | **str** | Group name | [optional]\n```\n\n----------------------------------------\n\nTITLE: Defining SubAccountUpdatePlanRequest Model Properties in Markdown\nDESCRIPTION: This snippet outlines the properties of the SubAccountUpdatePlanRequest model. It includes two optional properties: 'credits' and 'features', both referencing other model files for their definitions.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/SubAccountUpdatePlanRequest.md#2025-04-17_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# SubAccountUpdatePlanRequest\n\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\ncredits | [**SubAccountUpdatePlanRequestCredits**](SubAccountUpdatePlanRequestCredits.md) |  | [optional] \nfeatures | [**SubAccountUpdatePlanRequestFeatures**](SubAccountUpdatePlanRequestFeatures.md) |  | [optional] \n\n[[Back to Model list]](../README.md#documentation-for-models) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to README]](../README.md)\n```\n\n----------------------------------------\n\nTITLE: CreateCoupons Model Properties Schema\nDESCRIPTION: Defines the property schema for the CreateCoupons model including collection_id (string) for identifying the coupon collection and coupons (array of strings) for storing coupon values.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/CreateCoupons.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\ncollection_id | str | The id of the coupon collection for which the coupons will be created | \ncoupons | list[str] |  | \n```\n\n----------------------------------------\n\nTITLE: Defining ConversationsMessageFileImageInfo Model Properties in Python\nDESCRIPTION: Defines the properties of the ConversationsMessageFileImageInfo model. It includes width and height of the image, as well as a preview URL. All properties are optional.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/ConversationsMessageFileImageInfo.md#2025-04-17_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nclass ConversationsMessageFileImageInfo:\n    \"\"\"\n    Properties:\n        width (int): Width of the image [optional]\n        height (int): height of the image [optional]\n        preview_url (str): URL of the preview [optional]\n    \"\"\"\n```\n\n----------------------------------------\n\nTITLE: Defining UpdateSmsCampaign Model Properties in Markdown\nDESCRIPTION: This snippet defines the properties of the UpdateSmsCampaign model using a markdown table. It includes details such as property names, types, descriptions, and whether they are optional.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/UpdateSmsCampaign.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**name** | **str** | Name of the campaign | [optional] \n**sender** | **str** | Name of the sender. **The number of characters is limited to 11 for alphanumeric characters and 15 for numeric characters** | [optional] \n**content** | **str** | Content of the message. The maximum characters used per SMS is 160, if used more than that, it will be counted as more than one SMS | [optional] \n**recipients** | [**CreateSmsCampaignRecipients**](CreateSmsCampaignRecipients.md) |  | [optional] \n**scheduled_at** | **str** | UTC date-time on which the campaign has to run (YYYY-MM-DDTHH:mm:ss.SSSZ). Prefer to pass your timezone in date-time format for accurate result. | [optional] \n**unicode_enabled** | **bool** | Format of the message. It indicates whether the content should be treated as unicode or not. | [optional] [default to False]\n**organisation_prefix** | **str** | A recognizable prefix will ensure your audience knows who you are. Recommended by U.S. carriers. This will be added as your Brand Name before the message content. **Prefer verifying maximum length of 160 characters including this prefix in message content to avoid multiple sending of same sms.** | [optional] \n**unsubscribe_instruction** | **str** | Instructions to unsubscribe from future communications. Recommended by U.S. carriers. Must include **STOP** keyword. This will be added as instructions after the end of message content. **Prefer verifying maximum length of 160 characters including this instructions in message content to avoid multiple sending of same sms.** | [optional] \n```\n\n----------------------------------------\n\nTITLE: CreateUpdateBatchProducts Model Properties Table\nDESCRIPTION: Table defining the properties, types and descriptions for the CreateUpdateBatchProducts model. Contains 'products' array and 'update_enabled' boolean flag.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/CreateUpdateBatchProducts.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\nproducts | list[CreateUpdateProducts] | array of products objects | \nupdate_enabled | bool | Facilitate to update the existing categories in the same request (updateEnabled = true) | [optional]\n```\n\n----------------------------------------\n\nTITLE: Defining CorporateGroupDetailsResponseSubaccounts Class Properties in Python\nDESCRIPTION: This code snippet defines the properties of the CorporateGroupDetailsResponseSubaccounts class. It includes three properties: id (integer), company_name (string), and created_at (string), all of which are optional.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/CorporateGroupDetailsResponseSubaccounts.md#2025-04-17_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nclass CorporateGroupDetailsResponseSubaccounts:\n    \"\"\"\n    Attributes:\n      id (int): Id of the sub-account organzation [optional]\n      company_name (str): Name of the sub-account organzation [optional]\n      created_at (str): Creation date of the sub-account organzation [optional]\n    \"\"\"\n```\n\n----------------------------------------\n\nTITLE: Defining UpdateChildDomain Model in Markdown\nDESCRIPTION: This snippet defines the UpdateChildDomain model with its properties, types, and descriptions. It includes a single optional property 'domain' of type string, which is used to replace an existing domain value for a sender.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/UpdateChildDomain.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# UpdateChildDomain\n\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**domain** | **str** | Value for the sender domain that will replace the existing domain | [optional] \n\n[[Back to Model list]](../README.md#documentation-for-models) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to README]](../README.md)\n```\n\n----------------------------------------\n\nTITLE: Defining GetContactCampaignStatsTransacAttributes Model Properties in Python\nDESCRIPTION: This code snippet defines the properties of the GetContactCampaignStatsTransacAttributes model. It includes three properties: order_date (date type), order_price (float type), and order_id (integer type).\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/GetContactCampaignStatsTransacAttributes.md#2025-04-17_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n# GetContactCampaignStatsTransacAttributes\n\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\norder_date | **date** | Date of the order | \norder_price | **float** | Price of the order | \norder_id | **int** | ID of the order | \n```\n\n----------------------------------------\n\nTITLE: Specifying Python Package Dependencies with Version Requirements\nDESCRIPTION: This snippet lists Python package dependencies with their minimum version requirements. It includes packages for code coverage, testing, plugin management, and randomization.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/test-requirements.txt#2025-04-17_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ncoverage>=4.0.3\nnose>=1.3.7\npluggy>=0.3.1\npy>=1.4.31\nrandomize>=0.13\n```\n\n----------------------------------------\n\nTITLE: Defining NoteId Model Properties in Markdown\nDESCRIPTION: Describes the properties of the NoteId model using a markdown table. The model has a single property 'id' of type string, which represents a unique note identifier. The property is marked as optional.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/NoteId.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**id** | **str** | Unique note Id | [optional]\n```\n\n----------------------------------------\n\nTITLE: Defining CorporateGroupDetailsResponseUsers Model Properties in Python\nDESCRIPTION: This code snippet defines the properties of the CorporateGroupDetailsResponseUsers model. It includes three optional string fields: email for the user's email address, last_name for the user's last name, and first_name for the user's first name.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/CorporateGroupDetailsResponseUsers.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass CorporateGroupDetailsResponseUsers:\n    \"\"\"Properties\n    Name | Type | Description | Notes\n    ------------ | ------------- | ------------- | -------------\n    email | str | Email address of the user | [optional] \n    last_name | str | Last name of the user | [optional] \n    first_name | str | First name of the user | [optional] \n    \"\"\"\n```\n\n----------------------------------------\n\nTITLE: Defining GetClient Properties in Python\nDESCRIPTION: Specifies the properties of the GetClient class including email, first_name, last_name, and company_name. All properties are of type string and are required fields for client information.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/GetClient.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass GetClient:\n    email: str  # Login Email\n    first_name: str  # First Name\n    last_name: str  # Last Name\n    company_name: str  # Name of the company\n```\n\n----------------------------------------\n\nTITLE: CreateUpdateCategory Properties Table in Markdown\nDESCRIPTION: Markdown table defining the properties, types, descriptions and optional status for the CreateUpdateCategory model. Documents the fields used for category creation and updates in e-commerce integrations.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/CreateUpdateCategory.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**id** | **str** | Unique Category ID as saved in the shop  | \n**name** | **str** | **Mandatory in case of creation**. Name of the Category, as displayed in the shop  | [optional] \n**url** | **str** | URL to the category | [optional] \n**update_enabled** | **bool** | Facilitate to update the existing category in the same request (updateEnabled &#x3D; true) | [optional] [default to False]\n**deleted_at** | **str** | UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ) of the category deleted from the shop&#39;s database | [optional] \n**is_deleted** | **bool** | category deleted from the shop&#39;s database | [optional]\n```\n\n----------------------------------------\n\nTITLE: Defining GetSharedTemplateUrl Properties in Markdown\nDESCRIPTION: Describes the properties of the GetSharedTemplateUrl model, specifically the shared_url attribute which contains a unique URL for sharing email campaigns or transactional templates with other Brevo users.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/GetSharedTemplateUrl.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**shared_url** | **str** | A unique URL for the email campaign or transactional template. This URL can be shared with other Brevo users. |\n```\n\n----------------------------------------\n\nTITLE: Defining GetTransacBlockedContacts Model Properties in Python\nDESCRIPTION: This code snippet defines the properties of the GetTransacBlockedContacts model. It includes 'count' for the number of blocked or unsubscribed contacts, and 'contacts' for a list of contact details.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/GetTransacBlockedContacts.md#2025-04-17_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nclass GetTransacBlockedContacts:\n    def __init__(self):\n        self.count = None  # int\n        self.contacts = None  # list[GetTransacBlockedContactsContacts]\n```\n\n----------------------------------------\n\nTITLE: CreateUpdateBatchCategoryModel Properties Table in Markdown\nDESCRIPTION: Markdown table defining the properties of CreateUpdateBatchCategoryModel class. Contains two integer properties: created_count for tracking new categories and updated_count for tracking updated categories.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/CreateUpdateBatchCategoryModel.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\ncreated_count | **int** | Number of the new created categories | [optional] \nupdated_count | **int** | Number of the existing categories updated | [optional] \n```\n\n----------------------------------------\n\nTITLE: CreatePaymentResponse Model Properties Table\nDESCRIPTION: Markdown table defining the properties, types, descriptions and optional status of CreatePaymentResponse model fields. Includes ID field for object identification and URL field for payment request location.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/CreatePaymentResponse.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**id** | **str** | ID of the object created | \n**url** | **str** | URL of the payment request created | [optional]\n```\n\n----------------------------------------\n\nTITLE: Defining RequestContactImportNewList Properties in Markdown\nDESCRIPTION: Documents the properties of the RequestContactImportNewList model including list_name for creating a new list and folder_id for specifying the folder location. Both fields are optional but list_name becomes mandatory if listIds is empty, and folder_id is required when list_name is provided.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/RequestContactImportNewList.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\nlist_name | str | List with listName will be created first and users will be imported in it (Mandatory if listIds is empty). | [optional] \nfolder_id | int | Id of the folder where this new list shall be created (Mandatory if listName is not empty). | [optional]\n```\n\n----------------------------------------\n\nTITLE: Defining GetSegmentsSegments Properties in Markdown\nDESCRIPTION: Defines the properties of the GetSegmentsSegments model, including their types and descriptions. The properties cover segment identification, naming, categorization, and last update time.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/GetSegmentsSegments.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**id** | **int** | ID of the list | [optional] \n**segment_name** | **str** | Name of the Segment | [optional] \n**category_name** | **str** | Name of the Segment Category | [optional] \n**updated_at** | **str** | Updation UTC date-time of the segment (YYYY-MM-DDTHH:mm:ss.SSSZ) | [optional]\n```\n\n----------------------------------------\n\nTITLE: Defining SubAccountDetailsResponsePlanInfoFeaturesLandingPage Model Properties in Markdown\nDESCRIPTION: Specifies the properties of the SubAccountDetailsResponsePlanInfoFeaturesLandingPage model, including 'quantity' and 'remaining' fields. Both fields are integers and optional, representing the total and available landing pages respectively.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/SubAccountDetailsResponsePlanInfoFeaturesLandingPage.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\nquantity | **int** | Quantity of landing pages provided | [optional] \nremaining | **int** | Available landing pages for use | [optional]\n```\n\n----------------------------------------\n\nTITLE: Defining GetInboundEmailEvents Model Properties in Markdown\nDESCRIPTION: This snippet defines the properties of the GetInboundEmailEvents model using a markdown table. It specifies the name, type, description, and optional status of the 'events' property.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/GetInboundEmailEvents.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name | Type | Description | Notes |\n| --- | --- | --- | --- |\n| **events** | [**list[GetInboundEmailEventsEvents]**](GetInboundEmailEventsEvents.md) |  | [optional] \n```\n\n----------------------------------------\n\nTITLE: Defining CreatedBatchId Model Properties in Markdown\nDESCRIPTION: Markdown table defining the properties of the CreatedBatchId model, which includes a single batch_id property of type float used to track request batches.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/CreatedBatchId.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**batch_id** | **float** | Batch ID of the request |\n```\n\n----------------------------------------\n\nTITLE: Defining GetExternalFeedByUUIDHeaders Properties Table in Markdown\nDESCRIPTION: Markdown table defining the properties of the GetExternalFeedByUUIDHeaders model, including name and value fields that are both optional string types.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/GetExternalFeedByUUIDHeaders.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**name** | **str** | Name of the header | [optional] \n**value** | **str** | Value of the header | [optional]\n```\n\n----------------------------------------\n\nTITLE: Defining RequestContactImportJsonBody Properties in Markdown\nDESCRIPTION: This snippet defines the properties of the RequestContactImportJsonBody model, including their names, types, descriptions, and optional status. It uses a markdown table format to structure the information.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/RequestContactImportJsonBody.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**email** | **str** |  | [optional] \n**attributes** | **object** | List of attributes to be imported | [optional] \n```\n\n----------------------------------------\n\nTITLE: Defining SubAccountDetailsResponsePlanInfoFeatures Properties in Markdown\nDESCRIPTION: Markdown table defining the properties of the SubAccountDetailsResponsePlanInfoFeatures model including property names, types, descriptions and optional status.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/SubAccountDetailsResponsePlanInfoFeatures.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name | Type | Description | Notes |\n| ------------ | ------------- | ------------- | ------------- |\n| inbox | [SubAccountDetailsResponsePlanInfoFeaturesInbox](SubAccountDetailsResponsePlanInfoFeaturesInbox.md) |  | [optional] |\n| landing_page | [SubAccountDetailsResponsePlanInfoFeaturesLandingPage](SubAccountDetailsResponsePlanInfoFeaturesLandingPage.md) |  | [optional] |\n| users | [SubAccountDetailsResponsePlanInfoFeaturesUsers](SubAccountDetailsResponsePlanInfoFeaturesUsers.md) |  | [optional] |\n```\n\n----------------------------------------\n\nTITLE: Defining InlineResponse2015 Model Properties in Markdown\nDESCRIPTION: Markdown table defining the properties of the InlineResponse2015 model class. Contains a single property 'id' of type string that stores the ID of a created object.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/InlineResponse2015.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**id** | **str** | ID of the object created |\n```\n\n----------------------------------------\n\nTITLE: GetEmailEventReport Model Properties Table\nDESCRIPTION: Markdown table defining the properties, types and descriptions for the GetEmailEventReport model class. The model has a single property 'events' which is an optional list of GetEmailEventReportEvents objects.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/GetEmailEventReport.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**events** | [**list[GetEmailEventReportEvents]**](GetEmailEventReportEvents.md) |  | [optional]\n```\n\n----------------------------------------\n\nTITLE: Defining UpdateChild Properties in Markdown\nDESCRIPTION: This snippet defines the properties of the UpdateChild class using a markdown table. It specifies the property names, types, descriptions, and optional notes for each attribute that can be updated for a child account.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/UpdateChild.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\nemail | **str** | New Email address to update the child account | [optional] \nfirst_name | **str** | New First name to use to update the child account | [optional] \nlast_name | **str** | New Last name to use to update the child account | [optional] \ncompany_name | **str** | New Company name to use to update the child account | [optional] \npassword | **str** | New password for the child account to login | [optional]\n```\n\n----------------------------------------\n\nTITLE: Defining GetChildInfoStatistics Model Properties in Markdown\nDESCRIPTION: Defines the properties of the GetChildInfoStatistics model using a markdown table. It includes three integer properties: previous_month_total_sent, current_month_total_sent, and total_sent, each with a description of its purpose.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/GetChildInfoStatistics.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name | Type | Description | Notes |\n| --- | --- | --- | --- |\n| previous_month_total_sent | **int** | Overall emails sent for the previous month | [optional] |\n| current_month_total_sent | **int** | Overall emails sent for current month | [optional] |\n| total_sent | **int** | Overall emails sent for since the account exists | [optional] |\n```\n\n----------------------------------------\n\nTITLE: Defining GetContactCampaignStatsUnsubscriptions Model Properties in Markdown\nDESCRIPTION: This snippet defines the properties of the GetContactCampaignStatsUnsubscriptions model. It includes two properties: user_unsubscription for contacts who unsubscribed via email link, and admin_unsubscription for contacts unsubscribed by an administrator.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/GetContactCampaignStatsUnsubscriptions.md#2025-04-17_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\nuser_unsubscription | [**list[GetExtendedContactDetailsStatisticsUnsubscriptionsUserUnsubscription]**](GetExtendedContactDetailsStatisticsUnsubscriptionsUserUnsubscription.md) | Contact has unsubscribed via the unsubscription link in the email | \nadmin_unsubscription | [**list[GetExtendedContactDetailsStatisticsUnsubscriptionsAdminUnsubscription]**](GetExtendedContactDetailsStatisticsUnsubscriptionsAdminUnsubscription.md) | Contact has been unsubscribed from the administrator | \n```\n\n----------------------------------------\n\nTITLE: GetSmsCampaignOverview Model Properties in Python\nDESCRIPTION: Property definitions for the GetSmsCampaignOverview class that represents an SMS campaign overview. Includes properties for campaign ID, name, status, content, scheduling, sender information, and timestamps for creation and modification.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/GetSmsCampaignOverview.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nid: int       # ID of the SMS Campaign\nname: str      # Name of the SMS Campaign\nstatus: str    # Status of the SMS Campaign\ncontent: str   # Content of the SMS Campaign\nscheduled_at: str  # UTC date-time for campaign scheduling (YYYY-MM-DDTHH:mm:ss.SSSZ)\nsender: str    # Sender of the SMS Campaign\ncreated_at: str # Creation UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ)\nmodified_at: str # Last modification UTC date-time (YYYY-MM-DDTHH:mm:ss.SSSZ)\n```\n\n----------------------------------------\n\nTITLE: Defining GetExtendedListCampaignStats Model Properties in Markdown\nDESCRIPTION: Documents the properties of the GetExtendedListCampaignStats model including campaign_id (integer) and stats (GetCampaignStats object) fields.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/GetExtendedListCampaignStats.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\ncampaign_id | **int** | ID of the campaign | \nstats | [**GetCampaignStats**](GetCampaignStats.md) |  |\n```\n\n----------------------------------------\n\nTITLE: SubAccountDetailsResponseGroups Model Properties Table\nDESCRIPTION: Markdown table defining the properties, types, and descriptions for the SubAccountDetailsResponseGroups model. Contains id and name fields, both optional string values.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/SubAccountDetailsResponseGroups.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**id** | **str** | Group id | [optional] \n**name** | **str** | Name of the group | [optional] \n```\n\n----------------------------------------\n\nTITLE: Defining GetStatsByDevice Properties in Markdown\nDESCRIPTION: Defines the properties of the GetStatsByDevice model using a markdown table. The properties include desktop, mobile, tablet, and unknown, each representing statistics for different device types.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/GetStatsByDevice.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**desktop** | [**dict(str, GetDeviceBrowserStats)**](GetDeviceBrowserStats.md) | Statistics of the campaign on the basis of desktop devices | [optional] \n**mobile** | [**dict(str, GetDeviceBrowserStats)**](GetDeviceBrowserStats.md) | Statistics of the campaign on the basis of mobile devices | [optional] \n**tablet** | [**dict(str, GetDeviceBrowserStats)**](GetDeviceBrowserStats.md) | Statistics of the campaign on the basis of tablet devices | [optional] \n**unknown** | [**dict(str, GetDeviceBrowserStats)**](GetDeviceBrowserStats.md) | Statistics of the campaign on the basis of unknown devices | [optional] \n```\n\n----------------------------------------\n\nTITLE: Defining RequestContactExport Model Properties in Markdown\nDESCRIPTION: This snippet defines the properties of the RequestContactExport model, including export_attributes, custom_contact_filter, and notify_url. It specifies the data types, descriptions, and optional status for each property.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/RequestContactExport.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**export_attributes** | **list[str]** | List of all the attributes that you want to export. These attributes must be present in your contact database. For example, [&#39;fname&#39;, &#39;lname&#39;, &#39;email&#39;]. | [optional] \n**custom_contact_filter** | [**RequestContactExportCustomContactFilter**](RequestContactExportCustomContactFilter.md) |  | \n**notify_url** | **str** | Webhook that will be called once the export process is finished. For reference, https://help.brevo.com/hc/en-us/articles/360007666479 | [optional] \n```\n\n----------------------------------------\n\nTITLE: Defining SendReportEmail Model Properties in Python\nDESCRIPTION: Defines the properties of the SendReportEmail model, including 'to' (a list of recipient email addresses) and 'body' (a custom text message for the report email).\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/SendReportEmail.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# SendReportEmail\n\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**to** | **list[str]** | Email addresses of the recipients | \n**body** | **str** | Custom text message to be presented in the report email. |\n```\n\n----------------------------------------\n\nTITLE: Defining CreateSenderIps Model Properties in Markdown\nDESCRIPTION: This snippet outlines the properties of the CreateSenderIps model, including 'ip', 'domain', and 'weight'. It specifies the data types, descriptions, and optional status for each property.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/CreateSenderIps.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\nip | **str** | Dedicated IP available in your account | \ndomain | **str** | Domain of the IP | \nweight | **int** | Weight to apply to the IP. Sum of all IP weights must be 100. Should be passed for either ALL or NONE of the IPs. If it&#39;s not passed, the sending will be equally balanced on all IPs. | [optional] \n```\n\n----------------------------------------\n\nTITLE: Defining RequestSmsRecipientExport Model Properties in Markdown\nDESCRIPTION: This snippet defines the properties of the RequestSmsRecipientExport model using a markdown table. It includes the property names, types, descriptions, and optional notes.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/RequestSMSRecipientExport.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**notify_url** | **str** | URL that will be called once the export process is finished. For reference, https://help.brevo.com/hc/en-us/articles/360007666479 | [optional] \n**recipients_type** | **str** | Filter the recipients based on how they interacted with the campaign | \n```\n\n----------------------------------------\n\nTITLE: Documenting SubAccountUpdatePlanRequestFeatures Model Properties\nDESCRIPTION: Documents the properties available in the SubAccountUpdatePlanRequestFeatures model. Includes fields for number of multi-users, landing pages, and inboxes with their respective types and optional status. Note that landing page and inbox fields are not required for ENTv2.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/SubAccountUpdatePlanRequestFeatures.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\nusers | **int** | Number of multi-users | [optional] \nlanding_page | **int** | Number of landing pages / Not required on ENTv2 | [optional] \ninbox | **int** | Number of inboxes / Not required on ENTv2 | [optional] \n```\n\n----------------------------------------\n\nTITLE: Defining SsoTokenRequestCorporate Model Properties in Python\nDESCRIPTION: This snippet defines the properties of the SsoTokenRequestCorporate model. It specifies a single property 'email' of type string, which represents the user email of the sub-account organization.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/SsoTokenRequestCorporate.md#2025-04-17_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n# SsoTokenRequestCorporate\n\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**email** | **str** | User email of sub-account organization |\n```\n\n----------------------------------------\n\nTITLE: Defining InviteuserPrivileges Properties Schema - Python\nDESCRIPTION: Schema definition for InviteuserPrivileges model class that specifies feature names and their associated permissions. Contains two optional properties: feature (string) and permissions (list of strings).\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/InviteuserPrivileges.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass InviteuserPrivileges:\n    # Properties\n    feature = str  # Feature name\n    permissions = list[str]  # Permissions for a given feature\n```\n\n----------------------------------------\n\nTITLE: GetSendersListIps Properties Table Structure in Markdown\nDESCRIPTION: Markdown table defining the properties of the GetSendersListIps model including their types and descriptions. Documents three main properties: ip (string), domain (string), and weight (integer).\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/GetSendersListIps.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\nip | str | Dedicated IP available in your account | \ndomain | str | Domain of the IP | \nweight | int | Weight of the IP for this sender |\n```\n\n----------------------------------------\n\nTITLE: Defining GetFolders Model Properties in Markdown\nDESCRIPTION: This snippet outlines the properties of the GetFolders model, including their names, types, and descriptions. It defines two properties: 'folders' as a list of objects, and 'count' as an integer representing the number of folders available in the account.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/GetFolders.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**folders** | **list[object]** |  | [optional] \n**count** | **int** | Number of folders available in your account | [optional] \n```\n\n----------------------------------------\n\nTITLE: GetDomainsList Model Properties Documentation in Markdown\nDESCRIPTION: Markdown table documenting the properties of the GetDomainsList model. Shows that the model has a 'domains' property which is an array of GetDomainsListDomains objects.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/GetDomainsList.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**domains** | [**list[GetDomainsListDomains]**](GetDomainsListDomains.md) | List of the domains available in your account | [optional] \n```\n\n----------------------------------------\n\nTITLE: GetInboundEmailEventsByUuidLogs Model Properties Definition\nDESCRIPTION: Defines two properties for the GetInboundEmailEventsByUuidLogs model: _date (datetime) for storing the event date and type (str) for storing the event type. Both properties are optional.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/GetInboundEmailEventsByUuidLogs.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n_date = datetime  # Date of the event [optional]\ntype = str      # Type of the event [optional]\n```\n\n----------------------------------------\n\nTITLE: Companies List Properties Table in Markdown\nDESCRIPTION: Markdown table defining the properties of the CompaniesList model, showing that it contains an optional list of Company objects.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/CompaniesList.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**items** | [**list[Company]**](Company.md) | List of compaies | [optional]\n```\n\n----------------------------------------\n\nTITLE: Defining SubAccountsResponseGroups Model Properties in Python\nDESCRIPTION: This code snippet defines the properties of the SubAccountsResponseGroups model. It includes two optional string properties: 'id' for the group identifier and 'name' for the name of the group.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/SubAccountsResponseGroups.md#2025-04-17_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n# SubAccountsResponseGroups\n\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**id** | **str** | Group identifier | [optional] \n**name** | **str** | Name of the group | [optional]\n```\n\n----------------------------------------\n\nTITLE: Defining ManageIp Class with IP Property in Python\nDESCRIPTION: Defines the ManageIp class with a single property 'ip' of type string, representing a dedicated IP address. The property is optional.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/ManageIp.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass ManageIp:\n    ip: str = None  # Dedicated ID (optional)\n```\n\n----------------------------------------\n\nTITLE: DNS Records Properties Schema in Markdown\nDESCRIPTION: Markdown table defining the properties of the CreateDomainModelDnsRecords class, including three optional DNS record types: dkim_record, brevo_code, and dmarc_record. Each property references the CreateDomainModelDnsRecordsDkimRecord model.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/CreateDomainModelDnsRecords.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\ndkim_record | [**CreateDomainModelDnsRecordsDkimRecord**](CreateDomainModelDnsRecordsDkimRecord.md) |  | [optional] \nbrevo_code | [**CreateDomainModelDnsRecordsDkimRecord**](CreateDomainModelDnsRecordsDkimRecord.md) |  | [optional] \ndmarc_record | [**CreateDomainModelDnsRecordsDkimRecord**](CreateDomainModelDnsRecordsDkimRecord.md) |  | [optional]\n```\n\n----------------------------------------\n\nTITLE: Model Properties Definition for User Unsubscription Events\nDESCRIPTION: Defines the required and optional properties for tracking user unsubscription events, including campaign identification, timing, and network details.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/GetExtendedContactDetailsStatisticsUnsubscriptionsUserUnsubscription.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\ncampaign_id | **int** | ID of the campaign which generated the event | \nevent_time | **str** | UTC date-time of the event | \nip | **str** | IP from which the user has unsubscribed | [optional]\n```\n\n----------------------------------------\n\nTITLE: Defining SubAccountDetailsResponsePlanInfoCreditsWpSubscribers Model Properties in Python\nDESCRIPTION: This code snippet defines the properties of the SubAccountDetailsResponsePlanInfoCreditsWpSubscribers model. It includes two integer fields: 'quantity' for the total Push sending limits provided, and 'remaining' for the available Push sending limits for use.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/SubAccountDetailsResponsePlanInfoCreditsWpSubscribers.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass SubAccountDetailsResponsePlanInfoCreditsWpSubscribers:\n    def __init__(self):\n        self.quantity = None  # int | Quantity of Push sending limits provided\n        self.remaining = None  # int | Available Push sending limits for use\n```\n\n----------------------------------------\n\nTITLE: Defining GetDomainsListDomains Model Properties in Markdown\nDESCRIPTION: This snippet defines the properties of the GetDomainsListDomains model using a Markdown table. It specifies the name, type, description, and optional notes for each property of the model.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/GetDomainsListDomains.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**id** | **int** | Id of the domain | \n**domain_name** | **str** | Domain name | \n**authenticated** | **bool** | Status of domain authentication (true&#x3D;authenticated, false&#x3D;non authenticated) | \n**verified** | **bool** | Status of domain verification (true&#x3D;verified, false&#x3D;non verified) | \n**ip** | **str** | Dedicated IP associated with domain | [optional] \n```\n\n----------------------------------------\n\nTITLE: Defining GetChildAccountCreationStatus Model in Python for Brevo API\nDESCRIPTION: Defines the GetChildAccountCreationStatus model with a single boolean property 'child_account_created'. This property indicates whether a child account was successfully created or not.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/GetChildAccountCreationStatus.md#2025-04-17_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nclass GetChildAccountCreationStatus:\n    \"\"\"\n    Attributes:\n      child_account_created (bool): Status of child account creation whether it is successfully created (exists) or not.\n    \"\"\"\n```\n\n----------------------------------------\n\nTITLE: Defining GetScheduledEmailByBatchIdBatches Model Properties in Python\nDESCRIPTION: Specifies the model properties for representing a scheduled email batch, including scheduling timestamp, creation timestamp, and current status of the batch.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/GetScheduledEmailByBatchIdBatches.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nscheduled_at: datetime  # Datetime for which the batch was scheduled\ncreated_at: datetime   # Datetime on which the batch was scheduled\nstatus: str           # Current status of the scheduled batch\n```\n\n----------------------------------------\n\nTITLE: Defining PostSendFailed Model Properties in Markdown\nDESCRIPTION: This snippet defines the properties of the PostSendFailed model using a markdown table. It includes the property names, types, descriptions, and optional notes.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/PostSendFailed.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\ncode | **int** | Response code | \nmessage | **str** | Response message | \nunexisting_emails | **list[str]** |  | [optional] \nwithout_list_emails | **list[str]** |  | [optional] \nblack_listed_emails | **list[str]** |  | [optional] \n```\n\n----------------------------------------\n\nTITLE: Defining GetExtendedContactDetailsStatisticsMessagesSent Class Properties in Python\nDESCRIPTION: This code snippet defines the properties of the GetExtendedContactDetailsStatisticsMessagesSent class. It includes campaign_id as an integer representing the ID of the campaign that generated the event, and event_time as a string representing the UTC date-time of the event.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/GetExtendedContactDetailsStatisticsMessagesSent.md#2025-04-17_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nclass GetExtendedContactDetailsStatisticsMessagesSent:\n    campaign_id: int  # ID of the campaign which generated the event\n    event_time: str  # UTC date-time of the event\n```\n\n----------------------------------------\n\nTITLE: Defining InlineResponse2011 Model Properties in Markdown\nDESCRIPTION: Defines the properties of the InlineResponse2011 model using a markdown table. It specifies a single property 'id' of type string, which represents a unique deal identifier.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/InlineResponse2011.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**id** | **str** | Unique deal id | \n```\n\n----------------------------------------\n\nTITLE: Defining Body16 Model Properties in Markdown\nDESCRIPTION: This snippet defines the properties of the Body16 model class using a markdown table. It specifies a single property 'text' of type string, which represents the edited message text.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/Body16.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name | Type | Description | Notes |\n| ---- | ---- | ----------- | ----- |\n| **text** | **str** | edited message text | \n```\n\n----------------------------------------\n\nTITLE: Defining InlineResponse2008 Model Properties in Markdown\nDESCRIPTION: This snippet defines the properties of the InlineResponse2008 model, including their names, types, descriptions, and optional status. It uses a markdown table format to present the information clearly.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/InlineResponse2008.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**id** | **str** | The id of the collection | \n**name** | **str** | The name of the collection | \n**default_coupon** | **str** | The default coupon of the collection | [optional] \n```\n\n----------------------------------------\n\nTITLE: Defining InlineResponse2014 Model Class in Python for Brevo SDK\nDESCRIPTION: This code snippet defines the InlineResponse2014 class with a single property 'message_id'. It represents a response containing the ID of a sent message in the Brevo Python SDK.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/InlineResponse2014.md#2025-04-17_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n# InlineResponse2014\n\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**message_id** | **str** | messageId of sent message | \n```\n\n----------------------------------------\n\nTITLE: InlineResponse2005Totals Model Properties Table\nDESCRIPTION: Markdown table defining the properties of the InlineResponse2005Totals model including orders_count, revenue, and average_basket fields. All fields are required float values.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/InlineResponse2005Totals.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\norders_count | float |  | \nrevenue | float |  | \naverage_basket | float |  | \n```\n\n----------------------------------------\n\nTITLE: Defining InlineResponse2013 Model Properties in Markdown\nDESCRIPTION: This snippet defines the properties of the InlineResponse2013 model using a markdown table. It specifies a single property 'id' of type string, which represents the id of the created collection.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/InlineResponse2013.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**id** | **str** | The id of the created collection |\n```\n\n----------------------------------------\n\nTITLE: Defining InlineResponse400 Model Properties in Markdown\nDESCRIPTION: This code snippet defines the properties of the InlineResponse400 model using a markdown table. It specifies the property name, data type, description, and optional status.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/InlineResponse400.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name | Type | Description | Notes |\n| ------------ | ------------- | ------------- | ------------- |\n| **message** | **str** |  | [optional] \n```\n\n----------------------------------------\n\nTITLE: PostContactInfo Model Structure Definition\nDESCRIPTION: Markdown table defining the properties of the PostContactInfo model. Contains a single property 'contacts' that references the PostContactInfoContacts model for storing contact information.\nSOURCE: https://github.com/getbrevo/brevo-python/blob/main/docs/PostContactInfo.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**contacts** | [**PostContactInfoContacts**](PostContactInfoContacts.md) |  | \n```"
  }
]