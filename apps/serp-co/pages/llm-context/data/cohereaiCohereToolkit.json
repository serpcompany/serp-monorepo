[
  {
    "owner": "cohere-ai",
    "repo": "cohere-toolkit",
    "content": "TITLE: Structuring Configuration Files for Cohere Toolkit in YAML\nDESCRIPTION: This snippet outlines the structure and key fields for both configuration.yaml and secrets.yaml files used in the Cohere Toolkit. It covers settings for deployments, database, redis, tools, feature flags, auth, logging, and various API secrets.\nSOURCE: https://github.com/cohere-ai/cohere-toolkit/blob/main/docs/config_details/config_description.md#2025-04-19_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# configuration.yaml\ndeployments:\n  enabled_deployments: []\n  default_deployment: \"\"\n  sagemaker:\n    region_name: \"\"\n    endpoint_name: \"\"\n  azure: {}\n  bedrock:\n    region_name: \"\"\n  single_container:\n    model: \"\"\n    url: \"\"\ndatabase:\n  url: \"postgresql+psycopg2://postgres:postgres@db:5432\"\nredis:\n  url: \"redis://:redis@redis:6379\"\ntools:\n  python_interpreter:\n    url: \"\"\n    forbidden_packages: []\n  use_tools_preamble: true\nfeature_flags:\n  use_agents_view: false\n  use_community_features: false\nauth:\n  enabled_auth: []\n  backend_hostname: \"\"\n  frontend_hostname: \"\"\nlogger:\n  strategy: \"structlog\"\n  renderer: \"console\"\n  level: \"info\"\nsync:\n  broker_url: \"\"\n  worker_concurrency: 0\n\n# secrets.yaml\nauth:\n  secret_key: \"\"\n  oidc:\n    client_id: \"\"\n    client_secret: \"\"\n    well_known_endpoint: \"\"\n  google_oauth:\n    client_id: \"\"\n    client_secret: \"\"\n  scim:\n    username: \"\"\n    password: \"\"\ntools:\n  tavily:\n    api_key: \"\"\n  wolfram_alpha:\n    app_id: \"\"\n  google_drive:\n    client_id: \"\"\n    client_secret: \"\"\n    developer_key: \"\"\n  brave_web_search:\n    api_key: \"\"\n  database:\n    migrate_token: \"\"\ndeployments:\n  cohere_platform:\n    api_key: \"\"\n  sagemaker:\n    access_key: \"\"\n    secret_key: \"\"\n    session_token: \"\"\n  azure:\n    api_key: \"\"\n  bedrock:\n    access_key: \"\"\n    secret_key: \"\"\n    session_token: \"\"\n  carbon:\n    api_key: \"\"\n    webhook_signing_secret: \"\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Authentication Strategies in YAML\nDESCRIPTION: Example YAML configuration for enabling multiple authentication strategies in the Toolkit's configuration.yaml file. This snippet shows how to activate basic, Google OAuth, and OIDC authentication methods simultaneously.\nSOURCE: https://github.com/cohere-ai/cohere-toolkit/blob/main/docs/auth_guide.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nauth:\n    enabled_auth:\n        - basic\n        - google_oauth\n        - oidc\n```\n\n----------------------------------------\n\nTITLE: Getting Tool List via API with cURL\nDESCRIPTION: Example cURL command for listing all available tools from the Cohere Toolkit API endpoint, demonstrating how to authenticate with a user ID and check which tools are accessible.\nSOURCE: https://github.com/cohere-ai/cohere-toolkit/blob/main/docs/custom_tool_guides/tool_guide.md#2025-04-19_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncurl --location --request GET 'http://localhost:8000/v1/tools' \\\n--header 'User-Id: me' \\\n--header 'Content-Type: application/json' \\\n--data '{}'\n```\n\n----------------------------------------\n\nTITLE: Implementing Arxiv Retriever Tool in Python\nDESCRIPTION: Complete example of a custom tool implementation that retrieves academic papers from Arxiv using LangChain. Demonstrates how to inherit from BaseTool and implement required methods including availability check, tool definition, and the core call functionality.\nSOURCE: https://github.com/cohere-ai/cohere-toolkit/blob/main/docs/custom_tool_guides/tool_guide.md#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import Any, Dict, List\n\nfrom langchain_community.utilities import ArxivAPIWrapper\n\nfrom backend.schemas.tool import ToolCategory, ToolDefinition\nfrom backend.tools.base import BaseTool\n\n\nclass ArxivRetriever(BaseTool):\n    ID = \"arxiv\"\n\n    def __init__(self):\n        self.client = ArxivAPIWrapper()\n\n    @classmethod\n    def is_available(cls) -> bool:\n        return True\n\n    @classmethod\n    def get_tool_definition(cls) -> ToolDefinition:\n        return ToolDefinition(\n            name=cls.ID,\n            display_name=\"Arxiv\",\n            implementation=cls,\n            parameter_definitions={\n                \"query\": {\n                    \"description\": \"Query for retrieval.\",\n                    \"type\": \"str\",\n                    \"required\": True,\n                }\n            },\n            is_visible=False,\n            is_available=cls.is_available(),\n            error_message=cls.generate_error_message(),\n            category=ToolCategory.DataLoader,\n            description=\"Retrieves documents from Arxiv.\",\n        )\n\n    async def call(self, parameters: dict, **kwargs: Any) -> List[Dict[str, Any]]:\n        query = parameters.get(\"query\", \"\")\n        result = self.client.run(query)\n        return [{\"text\": result}]\n```\n\n----------------------------------------\n\nTITLE: Making Streaming API Call to Cohere Backend\nDESCRIPTION: Example cURL command demonstrating how to make a streaming API call to the Cohere Toolkit backend service, including required headers and JSON payload.\nSOURCE: https://github.com/cohere-ai/cohere-toolkit/blob/main/docs/how_to_guides.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl --location 'http://localhost:8000/v1/chat-stream' \\\n--header 'User-Id: me' \\\n--header 'Content-Type: application/json' \\\n--data '{\n    \"message\": \"Tell me about the aya model\"\n}'\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Tool in Python\nDESCRIPTION: Process for adding a custom tool to the toolkit. The tool must implement a 'call' function and be configured in the tools.py config file.\nSOURCE: https://github.com/cohere-ai/cohere-toolkit/blob/main/docs/walkthrough/walkthrough.md#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# Add file at src/backend/tools/{custom_tool_name}\n# Implement call function\n# Add config to src/backend/config/tools.py\n```\n\n----------------------------------------\n\nTITLE: Implementing try_refresh_token Method for Token Refresh in Python\nDESCRIPTION: This code snippet shows the implementation of the try_refresh_token method. It handles the logic for refreshing an expired access token using a refresh token, if supported by the SSO provider.\nSOURCE: https://github.com/cohere-ai/cohere-toolkit/blob/main/docs/custom_tool_guides/tool_auth_guide.md#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef try_refresh_token(self, session: DBSessionDep, user_id: str, tool_auth: ToolAuth) -> bool:\n    # Example logic to refresh the token\n    refresh_token = tool_auth.refresh_token\n    if refresh_token:\n        response = requests.post(\"https://mytool.com/oauth2/token\", data={\n            'client_id': CLIENT_ID,\n            'client_secret': CLIENT_SECRET,\n            'refresh_token': refresh_token,\n            'grant_type': 'refresh_token',\n        })\n        if response.status_code == 200:\n            new_access_token = response.json().get('access_token')\n            # Update the tool_auth in the database with the new token\n            tool_auth.access_token = new_access_token\n            session.commit()\n            return True\n\n    return False\n```\n\n----------------------------------------\n\nTITLE: Implementing get_auth_url Method for Custom Tool Authentication in Python\nDESCRIPTION: This snippet demonstrates how to implement the get_auth_url method in a custom authentication class. It generates the URL for initiating the authentication process, typically used for SSO redirection.\nSOURCE: https://github.com/cohere-ai/cohere-toolkit/blob/main/docs/custom_tool_guides/tool_auth_guide.md#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass MyToolAuth(BaseToolAuthentication, ToolAuthenticationCacheMixin):\n    def get_auth_url(self, user_id: str) -> str:\n        # Build and return the authentication URL for the frontend\n        return f\"https://mytool.com/oauth2/authorize?client_id={CLIENT_ID}&redirect_uri={REDIRECT_URI}&response_type=code\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Model Provider in Python\nDESCRIPTION: Steps for adding a custom model provider to interface with Cohere models. Requires implementing invoke functions and adding provider configuration.\nSOURCE: https://github.com/cohere-ai/cohere-toolkit/blob/main/docs/walkthrough/walkthrough.md#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# Add file at src/backend/model_deployments/{custom_provider}\n# Implement invoke functions (e.g. invoke_chat_stream)\n# Add config to src/backend/config/deployments.py\n```\n\n----------------------------------------\n\nTITLE: Implementing retrieve_auth_token Method for Access Token Retrieval in Python\nDESCRIPTION: This snippet demonstrates the implementation of the retrieve_auth_token method. It handles the logic for exchanging an authorization code for an access token and saving it to the database.\nSOURCE: https://github.com/cohere-ai/cohere-toolkit/blob/main/docs/custom_tool_guides/tool_auth_guide.md#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef retrieve_auth_token(self, request: Request, session: DBSessionDep, user_id: str) -> str:\n    # Get the authorization code from the query parameters\n    auth_code = request.query_params.get(\"code\")\n    if not auth_code:\n        raise ValueError(\"Authorization code missing\")\n\n    # Exchange the authorization code for an access token\n    response = requests.post(\"https://mytool.com/oauth2/token\", data={\n        'client_id': CLIENT_ID,\n        'client_secret': CLIENT_SECRET,\n        'code': auth_code,\n        'redirect_uri': REDIRECT_URI,\n        'grant_type': 'authorization_code',\n    })\n\n    if response.status_code != 200:\n        raise ValueError(\"Failed to retrieve access token\")\n\n    # Extract the access token from the response\n    access_token = response.json().get(\"access_token\")\n\n    # Save the token to the database for the user\n    tool_auth = ToolAuth(user_id=user_id, access_token=access_token)\n    session.add(tool_auth)\n    session.commit()\n\n    return access_token\n```\n\n----------------------------------------\n\nTITLE: Running the Command Slack Bot in Node.js\nDESCRIPTION: Command reference for developing, building, testing, and running the Node.js Slack bot application. Includes commands for starting the development server, building for production, running migrations, and various code quality tools.\nSOURCE: https://github.com/cohere-ai/cohere-toolkit/blob/main/src/interfaces/slack_bot/README.md#2025-04-19_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n# start in development mode\npnpm dev\n\n# build for production\npnpm build\n\n# run sql migrations and start in production mode\npnpm start\n\n# lint\npnpm lint\n\n# check formatting with prettier\npnpm format\n\n# format with prettier\npnpm format:write\n\n# run all unit tests, with coverage report\npnpm test\n\n# run and watch unit tests\npnpm test:watch\n```\n\n----------------------------------------\n\nTITLE: Configuring VSCode Launch Settings for Remote Debugging\nDESCRIPTION: JSON configuration for VSCode launch.json that enables remote debugging of the Toolkit API. Sets up debugpy connection on localhost:5678 with path mappings between local and container directories.\nSOURCE: https://github.com/cohere-ai/cohere-toolkit/blob/main/docs/debugging.md#2025-04-19_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"configurations\": [\n        {\n            \"name\": \"Python Debugger: Remote Attach to Toolkit\",\n            \"type\": \"debugpy\",\n            \"request\": \"attach\",\n            \"connect\": {\n                \"host\": \"localhost\",\n                \"port\": 5678\n            },\n            \"pathMappings\": [\n                {\n                    \"localRoot\": \"${workspaceFolder}/src/backend\",\n                    \"remoteRoot\": \"/workspace/src/backend/\"\n                }\n            ]\n        },\n     ................ your other configurations here(if not exists just remove the comma)..........\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Using Custom Tools in Chat API with cURL\nDESCRIPTION: Example cURL command for initiating a chat with the Cohere Toolkit that uses the Arxiv tool, showing how to format the message payload and specify which tools to enable.\nSOURCE: https://github.com/cohere-ai/cohere-toolkit/blob/main/docs/custom_tool_guides/tool_guide.md#2025-04-19_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncurl --location 'http://localhost:8000/v1/chat-stream' \\\n--header 'User-Id: me' \\\n--header 'Content-Type: application/json' \\\n--data '{\n    \"message\": \"Tell me about the aya model\",\n    \"tools\": [{\"name\": \"Arxiv\"}]\n}\n'\n```\n\n----------------------------------------\n\nTITLE: Creating PostgreSQL Database and User for Command Slack Bot\nDESCRIPTION: SQL commands to create a new database, create a user with password, grant privileges, and enable the user to create databases. These commands set up the necessary database infrastructure for the Slack bot.\nSOURCE: https://github.com/cohere-ai/cohere-toolkit/blob/main/src/interfaces/slack_bot/README.md#2025-04-19_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nCREATE DATABASE commandslackdb;\nCREATE USER commandslack WITH PASSWORD 'password';\nGRANT ALL PRIVILEGES ON DATABASE commandslackdb TO commandslack;\nALTER USER commandslack WITH CREATEDB;\n```\n\n----------------------------------------\n\nTITLE: Installing and Running Cohere Toolkit with Make\nDESCRIPTION: Instructions for setting up Cohere Toolkit locally using the provided Makefile, which simplifies Docker Compose management, testing, linting, and environment setup.\nSOURCE: https://github.com/cohere-ai/cohere-toolkit/blob/main/README.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/cohere-ai/cohere-toolkit.git\ncd cohere-toolkit\nmake first-run\n```\n\n----------------------------------------\n\nTITLE: Configuring Backend HTTPS in configuration.yaml\nDESCRIPTION: Sets the backend_hostname in the configuration.yaml file to use HTTPS for local development as an alternative to .env configuration.\nSOURCE: https://github.com/cohere-ai/cohere-toolkit/blob/main/docs/custom_tool_guides/slack.md#2025-04-19_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nauth:\n  backend_hostname: https://localhost:8000\n```\n\n----------------------------------------\n\nTITLE: Installing and Running Cohere Toolkit with Docker Compose\nDESCRIPTION: Instructions for setting up Cohere Toolkit using Docker Compose directly, launching the container environment and running database migrations.\nSOURCE: https://github.com/cohere-ai/cohere-toolkit/blob/main/README.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/cohere-ai/cohere-toolkit.git\ncd cohere-toolkit\ndocker compose up\ndocker compose run --build backend alembic -c src/backend/alembic.ini upgrade head\n```\n\n----------------------------------------\n\nTITLE: Updating Dockerfile to Include SSL Certificates\nDESCRIPTION: Modifies the backend Dockerfile to include the generated SSL certificate files during the container build process.\nSOURCE: https://github.com/cohere-ai/cohere-toolkit/blob/main/docs/custom_tool_guides/slack.md#2025-04-19_snippet_5\n\nLANGUAGE: Dockerfile\nCODE:\n```\nCOPY pyproject.toml poetry.lock cert.pem key.pem ./ \n```\n\n----------------------------------------\n\nTITLE: Generating Secure JWT Secret Key in Python\nDESCRIPTION: Python code snippet for generating a cryptographically secure random token to be used as the auth.secret_key in the secrets.yaml file. This key is essential for creating and validating JWT tokens used for authentication.\nSOURCE: https://github.com/cohere-ai/cohere-toolkit/blob/main/docs/auth_guide.md#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport secrets\nprint(secrets.token_hex(32))\n```\n\n----------------------------------------\n\nTITLE: Enabling HTTPS in Next.js Development Script\nDESCRIPTION: Modifies the dev script in package.json to enable experimental HTTPS for Next.js and bypass SSL certificate validation for local development.\nSOURCE: https://github.com/cohere-ai/cohere-toolkit/blob/main/docs/custom_tool_guides/slack.md#2025-04-19_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n\"scripts\": {\n    \"dev\": \"NODE_TLS_REJECT_UNAUTHORIZED=0 next dev --port 4000 --experimental-https\",\n..........\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Tool Return Value Format in Python\nDESCRIPTION: Example of the required return value format for custom tools, showing how to structure results with text, URL, and title fields for optimal model performance and citation handling.\nSOURCE: https://github.com/cohere-ai/cohere-toolkit/blob/main/docs/custom_tool_guides/tool_guide.md#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nreturn [{\"text\": \"The fox is blue\", \"url\": \"wikipedia.org/foxes\", \"title\": \"Color of foxes\"}, {..}, {..}]\n```\n\n----------------------------------------\n\nTITLE: Configuring OAuth Redirect URL for Slack Tool\nDESCRIPTION: Sets the OAuth redirect URL for the Slack tool authentication flow. This URL is where users will be redirected after authorizing the Slack app.\nSOURCE: https://github.com/cohere-ai/cohere-toolkit/blob/main/docs/custom_tool_guides/slack.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n    https://<your_backend_url>/v1/tool/auth\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Tool Parameters in Python\nDESCRIPTION: Example of defining parameter requirements for a custom tool that specifies a query parameter of string type that Command will automatically generate during the chat process.\nSOURCE: https://github.com/cohere-ai/cohere-toolkit/blob/main/docs/custom_tool_guides/tool_guide.md#2025-04-19_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nparameter_definitions={\n    \"query\": {\n        \"description\": \"Query for retrieval.\",\n        \"type\": \"str\",\n        \"required\": True,\n    }\n},\n```\n\n----------------------------------------\n\nTITLE: Setting Local Development OAuth Redirect URL\nDESCRIPTION: Specifies the OAuth redirect URL for local development environment using HTTPS on localhost port 8000.\nSOURCE: https://github.com/cohere-ai/cohere-toolkit/blob/main/docs/custom_tool_guides/slack.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n https://localhost:8000/v1/tool/auth\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables for Google Drive Integration in .env File\nDESCRIPTION: Sets the required environment variables for Google Drive integration in a .env file. These variables include the client ID, client secret, and developer key needed for API authentication and access.\nSOURCE: https://github.com/cohere-ai/cohere-toolkit/blob/main/docs/custom_tool_guides/google_drive.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nGOOGLE_DRIVE_CLIENT_ID=<your_client_id>\nGOOGLE_DRIVE_CLIENT_SECRET=<your_client_secret>\nNEXT_PUBLIC_GOOGLE_DRIVE_CLIENT_ID=${GOOGLE_DRIVE_CLIENT_ID}\nNEXT_PUBLIC_GOOGLE_DRIVE_DEVELOPER_KEY=<your_developer_key>\n```\n\n----------------------------------------\n\nTITLE: Running Initialization Script in Bash for Cohere Toolkit Setup\nDESCRIPTION: This command runs the initialization script located in the .devcontainer directory to set up the environment for Cohere Toolkit in GitHub Codespaces.\nSOURCE: https://github.com/cohere-ai/cohere-toolkit/blob/main/docs/github_codespaces.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsh .devcontainer/init.sh\n```\n\n----------------------------------------\n\nTITLE: Setting Google Cloud API Key in Environment File\nDESCRIPTION: Configures the Google Cloud API key as an environment variable in a .env file for authentication.\nSOURCE: https://github.com/cohere-ai/cohere-toolkit/blob/main/docs/text_to_speech.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nGOOGLE_CLOUD_API_KEY=<your_api_key>\n```\n\n----------------------------------------\n\nTITLE: Configuring Github Tool Settings in YAML\nDESCRIPTION: This YAML configuration specifies default repositories and user scopes for the Github tool. It sets up the basic structure for the tool's configuration.\nSOURCE: https://github.com/cohere-ai/cohere-toolkit/blob/main/docs/custom_tool_guides/github.md#2025-04-19_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ngithub:\n    default_repos: \n      - repo1\n      - repo2\n    user_scopes: \n      - public_repo\n      - read:org\n```\n\n----------------------------------------\n\nTITLE: Configuring Google Cloud API Key in YAML Configuration\nDESCRIPTION: Adds the Google Cloud API key to a secrets.yaml configuration file as an alternative to using environment variables.\nSOURCE: https://github.com/cohere-ai/cohere-toolkit/blob/main/docs/text_to_speech.md#2025-04-19_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ngoogle_cloud:\n  api_key:<your_api_key>\n```\n\n----------------------------------------\n\nTITLE: Setting Github Secrets in YAML\nDESCRIPTION: This YAML configuration sets the client ID and client secret for the Github tool. These values are obtained from the Github app created in step 1 of the setup process.\nSOURCE: https://github.com/cohere-ai/cohere-toolkit/blob/main/docs/custom_tool_guides/github.md#2025-04-19_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ngithub:\n    client_id: <your_client_id from step 1>\n    client_secret: <your_client_secret from step 1>\n```\n\n----------------------------------------\n\nTITLE: Setting Gmail Environment Variables\nDESCRIPTION: Environment variable configuration for Gmail client ID and secret in the .env file.\nSOURCE: https://github.com/cohere-ai/cohere-toolkit/blob/main/docs/custom_tool_guides/gmail.md#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nGMAIL_CLIENT_ID=<your_client_id from the previous step>\nGMAIL_CLIENT_SECRET=<your_client_secret from the previous step>\n```\n\n----------------------------------------\n\nTITLE: Configuring Github Environment Variables\nDESCRIPTION: This dotenv configuration sets environment variables for the Github tool, including client ID, client secret, default repositories, and user scopes. These values are used to authenticate and configure the tool.\nSOURCE: https://github.com/cohere-ai/cohere-toolkit/blob/main/docs/custom_tool_guides/github.md#2025-04-19_snippet_2\n\nLANGUAGE: dotenv\nCODE:\n```\nGITHUB_CLIENT_ID=<your_client_id from step 1>\nGITHUB_CLIENT_SECRET=<your_client_secret from step 1>\nGITHUB_DEFAULT_REPOS=[\"repo1\",\"repo2\"]\nGITHUB_USER_SCOPES=[\"public_repo\",\"read:org\"]\n```\n\n----------------------------------------\n\nTITLE: Configuring Sharepoint Redirect URI\nDESCRIPTION: Example format for the redirect URI path that should be configured in the Microsoft Entra Admin Center during application registration.\nSOURCE: https://github.com/cohere-ai/cohere-toolkit/blob/main/docs/custom_tool_guides/sharepoint.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n    https://<your_backend_url>/v1/tool/auth\n```\n\n----------------------------------------\n\nTITLE: Configuring Slack Credentials in secrets.yaml\nDESCRIPTION: Defines the Slack client credentials in the secrets.yaml file, including client_id and client_secret obtained from the Slack API dashboard.\nSOURCE: https://github.com/cohere-ai/cohere-toolkit/blob/main/docs/custom_tool_guides/slack.md#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nslack:\n    client_id: <your_client_id from step 1>\n    client_secret: <your_client_secret from step 1>\n```\n\n----------------------------------------\n\nTITLE: File Path References for Model Deployments\nDESCRIPTION: Reference paths to different model deployment implementation files in the Cohere Toolkit codebase.\nSOURCE: https://github.com/cohere-ai/cohere-toolkit/blob/main/docs/command_model_providers.md#2025-04-19_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nmodel_deployments/cohere_platform.py\nmodel_deployments/azure.py\nmodel_deployments/sagemaker.py\ncommunity/model_deployments/local_model.py\nsrc/community/model_deployments\nsrc/community/config/deployments.py\n```\n\n----------------------------------------\n\nTITLE: Setting Slack Environment Variables in .env File\nDESCRIPTION: Configures the Slack client credentials as environment variables in the .env file, which is an alternative to using the secrets.yaml approach.\nSOURCE: https://github.com/cohere-ai/cohere-toolkit/blob/main/docs/custom_tool_guides/slack.md#2025-04-19_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nSLACK_CLIENT_ID=<your_client_id from step 1>\nSLACK_CLIENT_SECRET=<your_client_secret from step 1>\n```\n\n----------------------------------------\n\nTITLE: Authenticating with gcloud CLI for Cohere Toolkit Deployment\nDESCRIPTION: This command authenticates the user with Google Cloud Platform using the gcloud CLI. It's a prerequisite step before deploying the Cohere Toolkit to GCP.\nSOURCE: https://github.com/cohere-ai/cohere-toolkit/blob/main/docs/deployment_guides/gcp_deployment.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngcloud auth login\n```\n\n----------------------------------------\n\nTITLE: Configuring Gmail Credentials in YAML File\nDESCRIPTION: YAML configuration for setting up Gmail client ID and secret in the secrets.yaml file.\nSOURCE: https://github.com/cohere-ai/cohere-toolkit/blob/main/docs/custom_tool_guides/gmail.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nGmail:\n    client_id: <your_client_id from the previous step>\n    client_secret: <your_client_secret from the previous step>\n```\n\n----------------------------------------\n\nTITLE: AWS Toolkit Deployment Command\nDESCRIPTION: Bash command to execute the AWS deployment script for the Cohere Toolkit.\nSOURCE: https://github.com/cohere-ai/cohere-toolkit/blob/main/docs/deployment_guides/aws_deployment.md#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n./aws_copilot_deploy/aws_deploy.sh\n```\n\n----------------------------------------\n\nTITLE: Enabling Gmail Tool in Frontend Configuration\nDESCRIPTION: TypeScript code to enable the Gmail tool in the frontend by adding it to the AGENT_SETTINGS_TOOLS array.\nSOURCE: https://github.com/cohere-ai/cohere-toolkit/blob/main/docs/custom_tool_guides/gmail.md#2025-04-19_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport const AGENT_SETTINGS_TOOLS = [\n  TOOL_HYBRID_WEB_SEARCH_ID,\n  TOOL_PYTHON_INTERPRETER_ID,\n  TOOL_WEB_SCRAPE_ID,\n  TOOL_GMAIL_ID,\n];\n```\n\n----------------------------------------\n\nTITLE: AWS Cleanup Command\nDESCRIPTION: Bash command to clean up and remove the deployed AWS resources.\nSOURCE: https://github.com/cohere-ai/cohere-toolkit/blob/main/docs/deployment_guides/aws_deployment.md#2025-04-19_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n./aws_copilot_deploy/aws_cleanup.sh\n```\n\n----------------------------------------\n\nTITLE: Enabling Gmail Tool for Base Agent\nDESCRIPTION: TypeScript code to enable the Gmail tool for the base agent by removing it from the BASE_AGENT_EXCLUDED_TOOLS array.\nSOURCE: https://github.com/cohere-ai/cohere-toolkit/blob/main/docs/custom_tool_guides/gmail.md#2025-04-19_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport const BASE_AGENT_EXCLUDED_TOOLS = [];\n```\n\n----------------------------------------\n\nTITLE: AWS Copilot Service Deletion\nDESCRIPTION: Command to delete a specific service from the AWS Copilot deployment.\nSOURCE: https://github.com/cohere-ai/cohere-toolkit/blob/main/docs/deployment_guides/aws_deployment.md#2025-04-19_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncopilot svc delete\n```\n\n----------------------------------------\n\nTITLE: Configuring Google Drive Credentials in secrets.yaml\nDESCRIPTION: Alternative configuration method using a secrets.yaml file to store Google Drive integration credentials. This YAML configuration contains the client ID, client secret, and developer key needed for authentication.\nSOURCE: https://github.com/cohere-ai/cohere-toolkit/blob/main/docs/custom_tool_guides/google_drive.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngoogle_drive:\n    client_id:\n    client_secret:\n    developer_key:\n```\n\n----------------------------------------\n\nTITLE: Configuring Database URL in YAML\nDESCRIPTION: YAML configuration for database connection URL specification in Azure deployment.\nSOURCE: https://github.com/cohere-ai/cohere-toolkit/blob/main/docs/deployment_guides/azure_deployment.md#2025-04-19_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ndatabase:\n  url: postgresql+psycopg2://{db_user}:{db_user_password}@{db_server_name}.postgres.database.azure.com:5432\n```\n\n----------------------------------------\n\nTITLE: Initial Project Setup with Make\nDESCRIPTION: Command to perform the initial setup of the project, which generates configuration files and applies database migrations.\nSOURCE: https://github.com/cohere-ai/cohere-toolkit/blob/main/docs/setup.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake first-run\n```\n\n----------------------------------------\n\nTITLE: Configuring Cohere API Key\nDESCRIPTION: YAML configuration for setting up the Cohere API key in the local values file.\nSOURCE: https://github.com/cohere-ai/cohere-toolkit/blob/main/charts/cohere-toolkit/README.md#2025-04-19_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nglobal:\n  cohere:\n    api_key: \"<YOUR_API_KEY>\"\n```\n\n----------------------------------------\n\nTITLE: Database Migration with Make\nDESCRIPTION: Command to apply database migrations after setting up the environment.\nSOURCE: https://github.com/cohere-ai/cohere-toolkit/blob/main/docs/setup.md#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmake migrate\n```\n\n----------------------------------------\n\nTITLE: Adding New Theme Configuration\nDESCRIPTION: Configures Tailwind CSS to use a custom theme preset by updating the module exports in the configuration file\nSOURCE: https://github.com/cohere-ai/cohere-toolkit/blob/main/docs/theming.md#2025-04-19_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  presets: [require('./src/themes/yourTheme')],\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Resetting and Migrating the Database\nDESCRIPTION: Commands to reset the database and apply migrations again, useful when you need to start with a clean database state.\nSOURCE: https://github.com/cohere-ai/cohere-toolkit/blob/main/docs/setup.md#2025-04-19_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmake reset-db\nmake migrate\n```\n\n----------------------------------------\n\nTITLE: Starting Development Environment\nDESCRIPTION: Command to start the backend and frontend development servers.\nSOURCE: https://github.com/cohere-ai/cohere-toolkit/blob/main/docs/custom_tool_guides/sharepoint.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake dev\n```\n\n----------------------------------------\n\nTITLE: Creating Database Migrations\nDESCRIPTION: Command to create a new database migration with a descriptive message when database models are changed.\nSOURCE: https://github.com/cohere-ai/cohere-toolkit/blob/main/docs/setup.md#2025-04-19_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nmake migration message=\"Your migration message\"\n```\n\n----------------------------------------\n\nTITLE: Starting Development Environment\nDESCRIPTION: Command to start both the backend and frontend services in development mode using make.\nSOURCE: https://github.com/cohere-ai/cohere-toolkit/blob/main/docs/custom_tool_guides/slack.md#2025-04-19_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nmake dev\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables for Cohere API\nDESCRIPTION: This snippet shows how to configure the necessary environment variables in the .env file, specifically setting up the Cohere API key for authentication.\nSOURCE: https://github.com/cohere-ai/cohere-toolkit/blob/main/docs/github_codespaces.md#2025-04-19_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nCOHERE_API_KEY=your_api_key_here\n```\n\n----------------------------------------\n\nTITLE: Opening Frontend in Browser\nDESCRIPTION: Command to open the frontend application in the default browser.\nSOURCE: https://github.com/cohere-ai/cohere-toolkit/blob/main/charts/cohere-toolkit/README.md#2025-04-19_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nopen http://localhost:4000\n```\n\n----------------------------------------\n\nTITLE: Starting the Cohere Toolkit Application with Make\nDESCRIPTION: This command uses Make to start the Cohere Toolkit application in the GitHub Codespace environment, making it accessible via port 4000.\nSOURCE: https://github.com/cohere-ai/cohere-toolkit/blob/main/docs/github_codespaces.md#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmake up\n```\n\n----------------------------------------\n\nTITLE: Setting DATABASE_URL Environment Variable\nDESCRIPTION: Shell command to set the DATABASE_URL environment variable with the PostgreSQL connection string for the Command Slack Bot database. This connection string includes the username, password, host, port, and database name.\nSOURCE: https://github.com/cohere-ai/cohere-toolkit/blob/main/src/interfaces/slack_bot/README.md#2025-04-19_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nDATABASE_URL=\"postgresql://commandslack:password@localhost:5432/commandslackdb\"`\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Interface\nDESCRIPTION: Instructions for adding a custom frontend interface that connects to the backend API.\nSOURCE: https://github.com/cohere-ai/cohere-toolkit/blob/main/docs/walkthrough/walkthrough.md#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# Add interface at src/interfaces/{custom_frontend}\n# Connect to backend API using NEXT_PUBLIC_API_HOSTNAME\n```\n\n----------------------------------------\n\nTITLE: Port Forwarding Backend Service\nDESCRIPTION: kubectl command to set up port forwarding for the backend service.\nSOURCE: https://github.com/cohere-ai/cohere-toolkit/blob/main/charts/cohere-toolkit/README.md#2025-04-19_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nkubectl port-forward svc/toolkit-backend 8000:80 -n cohere-toolkit\n```\n\n----------------------------------------\n\nTITLE: Project Structure Overview for Command Slack Bot\nDESCRIPTION: Directory structure of the Slack bot project, showing the organization of source files, including constants, Cohere client integration, event handlers, and utility functions.\nSOURCE: https://github.com/cohere-ai/cohere-toolkit/blob/main/src/interfaces/slack_bot/README.md#2025-04-19_snippet_6\n\nLANGUAGE: text\nCODE:\n```\nslack_bot/\n├─ src/\n│  ├─ constants.ts\n│  │   ∟ constants live here\n│  ├─ cohere-client/\n│  │   ∟ functions that interact with the toolkit api live here\n│  ├─ handlers/\n│  │   ∟ functions that handle slack events live here\n│  ├─ utils/\n│  │   ∟ miscellaneous utility functions live here\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Platform for Terrarium\nDESCRIPTION: Docker Compose configuration for setting up Terrarium service with specific platform requirements and port mappings.\nSOURCE: https://github.com/cohere-ai/cohere-toolkit/blob/main/docs/troubleshooting.md#2025-04-19_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nterrarium:\n  platform: linux/amd64\n  image: ghcr.io/cohere-ai/terrarium:latest\n  ports:\n    - '8080:8080'\n  expose:\n    - '8080'\n```\n\n----------------------------------------\n\nTITLE: Setting Up Environment Variables for Slack Integration in Development\nDESCRIPTION: Instructions for creating and configuring the environment variables file for local development. This command copies the example environment file to create a new .env file which can then be customized with the appropriate values from your Slack App.\nSOURCE: https://github.com/cohere-ai/cohere-toolkit/blob/main/src/interfaces/slack_bot/README.md#2025-04-19_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\ncp .env.example .env\n# edit .env with values from your Slack App\n```\n\n----------------------------------------\n\nTITLE: Running Prisma Migrations in Development Mode\nDESCRIPTION: Command to execute Prisma database migrations in development mode. This applies all pending schema changes to the configured PostgreSQL database.\nSOURCE: https://github.com/cohere-ai/cohere-toolkit/blob/main/src/interfaces/slack_bot/README.md#2025-04-19_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nprisma migrate dev\n```\n\n----------------------------------------\n\nTITLE: Configuring Database Connection String for Remote Migrations in YAML\nDESCRIPTION: This snippet demonstrates the format for the MIGRATION_DATABASE_URL secret used when running migrations on a remote database. It includes the connection string structure for a PostgreSQL database.\nSOURCE: https://github.com/cohere-ai/cohere-toolkit/blob/main/docs/github_migrations_action.md#2025-04-19_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\npostgresql+psycopg2://postgres:postgres@db:5432\n```\n\n----------------------------------------\n\nTITLE: Updating Docker Compose for HTTPS\nDESCRIPTION: Adds environment variables to the frontend service in docker-compose.yml to configure API endpoints using HTTPS protocol.\nSOURCE: https://github.com/cohere-ai/cohere-toolkit/blob/main/docs/custom_tool_guides/slack.md#2025-04-19_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\n...........\n  frontend:\n    build:\n      target: ${BUILD_TARGET:-prod}\n      context: ./src/interfaces/assistants_web\n      dockerfile: Dockerfile\n    # Set environment variables directly in the docker-compose file\n    environment:\n      API_HOSTNAME: https://backend:8000\n      NEXT_PUBLIC_API_HOSTNAME: https://localhost:8000\n...........\n```\n\n----------------------------------------\n\nTITLE: Generating Self-Signed SSL Certificate for Local HTTPS\nDESCRIPTION: Creates a self-signed SSL certificate and private key for enabling HTTPS in local development environment, valid for 365 days.\nSOURCE: https://github.com/cohere-ai/cohere-toolkit/blob/main/docs/custom_tool_guides/slack.md#2025-04-19_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n openssl req -x509 -newkey rsa:4096 -nodes -out cert.pem -keyout key.pem -days 365\n```\n\n----------------------------------------\n\nTITLE: Setting Database URL Environment Variable\nDESCRIPTION: Environment variable configuration for database connection string in .env file format.\nSOURCE: https://github.com/cohere-ai/cohere-toolkit/blob/main/docs/deployment_guides/aws_deployment.md#2025-04-19_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nDATABASE_URL='postgresql+psycopg2://postgres:postgres@{service name}.{env name}.{app name}.local:5432'\n```\n\n----------------------------------------\n\nTITLE: Configuring Uvicorn to Use SSL in Dockerfile\nDESCRIPTION: Updates the CMD instruction in the Dockerfile to run the Uvicorn server with SSL enabled using the previously copied certificate files.\nSOURCE: https://github.com/cohere-ai/cohere-toolkit/blob/main/docs/custom_tool_guides/slack.md#2025-04-19_snippet_6\n\nLANGUAGE: Dockerfile\nCODE:\n```\nCMD uvicorn backend.main:app --reload --host 0.0.0.0 --port ${PORT} --timeout-keep-alive 300 --ssl-keyfile /workspace/key.pem --ssl-certfile /workspace/cert.pem\n```\n\n----------------------------------------\n\nTITLE: Starting Ngrok HTTP Tunnel for Local Development\nDESCRIPTION: Command to start an Ngrok HTTP tunnel for local development, allowing external access to the locally running Toolkit.\nSOURCE: https://github.com/cohere-ai/cohere-toolkit/blob/main/docs/custom_tool_guides/gmail.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nngrok http -domain <your_custom_domain>.ngrok.dev 8000\n```\n\n----------------------------------------\n\nTITLE: Setting HTTPS URL in Environment Variables\nDESCRIPTION: Updates the NEXT_PUBLIC_API_HOSTNAME environment variable in the .env file to use HTTPS protocol for the local development server.\nSOURCE: https://github.com/cohere-ai/cohere-toolkit/blob/main/docs/custom_tool_guides/slack.md#2025-04-19_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nNEXT_PUBLIC_API_HOSTNAME=https://localhost:8000\n```\n\n----------------------------------------\n\nTITLE: Starting PostgreSQL CLI for Database Setup\nDESCRIPTION: Command to start the PostgreSQL CLI shell with admin credentials, connecting to a local PostgreSQL instance on the default port.\nSOURCE: https://github.com/cohere-ai/cohere-toolkit/blob/main/src/interfaces/slack_bot/README.md#2025-04-19_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npsql --host=localhost --port=5432 --username=postgres\n```\n\n----------------------------------------\n\nTITLE: Configuring Next.js without HTTPS\nDESCRIPTION: Alternative dev script configuration for Next.js that bypasses SSL certificate validation but doesn't use the experimental HTTPS feature.\nSOURCE: https://github.com/cohere-ai/cohere-toolkit/blob/main/docs/custom_tool_guides/slack.md#2025-04-19_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n\"scripts\": {\n    \"dev\": \"NODE_TLS_REJECT_UNAUTHORIZED=0 next dev --port 4000\",\n..........\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Backend and Frontend Development Servers\nDESCRIPTION: Command to start both the backend and frontend development servers using Make.\nSOURCE: https://github.com/cohere-ai/cohere-toolkit/blob/main/docs/custom_tool_guides/gmail.md#2025-04-19_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nmake dev\n```\n\n----------------------------------------\n\nTITLE: Updating API Hostname in Docker Compose\nDESCRIPTION: Changes the API_HOSTNAME environment variable in docker-compose.yml to use HTTPS with localhost instead of the backend service name.\nSOURCE: https://github.com/cohere-ai/cohere-toolkit/blob/main/docs/custom_tool_guides/slack.md#2025-04-19_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\n    API_HOSTNAME: https://localhost:8000\n```\n\n----------------------------------------\n\nTITLE: Running Assistants Chat Interface Commands with npm\nDESCRIPTION: Commands for starting, building, and maintaining the Assistants Chat Interface application. Includes development mode, production build and start options, and code linting.\nSOURCE: https://github.com/cohere-ai/cohere-toolkit/blob/main/src/interfaces/assistants_web/README.md#2025-04-19_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# start in development mode\nnpm dev\n\n# build for production\nnpm build\n\n# start in production mode\nnpm start\n\n# lint\nnpm lint\n```\n\n----------------------------------------\n\nTITLE: Database Configuration in YAML\nDESCRIPTION: Database connection configuration using YAML format for configuration.yaml file.\nSOURCE: https://github.com/cohere-ai/cohere-toolkit/blob/main/docs/deployment_guides/aws_deployment.md#2025-04-19_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ndatabase:\n  url: postgresql+psycopg2://postgres:postgres@{service name}.{env name}.{app name}.local:5432\n```\n\n----------------------------------------\n\nTITLE: Installing Development Dependencies\nDESCRIPTION: Command to install all development dependencies required for contributing to the project.\nSOURCE: https://github.com/cohere-ai/cohere-toolkit/blob/main/docs/setup.md#2025-04-19_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nmake install\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Deployment Variables in dotenv\nDESCRIPTION: Environment variables configuration for Azure deployment script including resource locations, names, and specifications for various services.\nSOURCE: https://github.com/cohere-ai/cohere-toolkit/blob/main/docs/deployment_guides/azure_deployment.md#2025-04-19_snippet_0\n\nLANGUAGE: dotenv\nCODE:\n```\nLOCATION=canadaeast # Azure region\nRESOURCE_GROUP=toolkitResourceGroup # Resource group name\nAPP_NAME=toolkit-app # App name\nAPP_INSTANCE_SKU=P1V3 # App instance SKU\nAPP_PLAN_NAME=toolkit-app-plan # App plan name\nREGISTRY_NAME=toolkitregistry # Docker Registry name\nREGISTRY_SKU=Basic # Docker Registry SKU\nDB_SERVER_NAME=toolkitpostgre # Database server name\nDB_ADMIN_USER=postgres # Database admin user\nDB_ADMIN_PASSWORD=postgres # Database admin password\nDB_SKU_NAME=Standard_B1ms # Database SKU name\nDB_TIER=Burstable # Database tier\nDB_STORAGE_SIZE=32 # Database storage size\n```\n\n----------------------------------------\n\nTITLE: Setting Up and Running Tests\nDESCRIPTION: Commands to spin up a test database and run the test suite, ensuring code changes don't break existing functionality.\nSOURCE: https://github.com/cohere-ai/cohere-toolkit/blob/main/docs/setup.md#2025-04-19_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nmake test-db\nmake run-tests\n```\n\n----------------------------------------\n\nTITLE: Setting Cohere API Key in YAML\nDESCRIPTION: YAML configuration for Cohere platform API key in secrets file.\nSOURCE: https://github.com/cohere-ai/cohere-toolkit/blob/main/docs/deployment_guides/azure_deployment.md#2025-04-19_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ndeployments:\n  cohere_platform:\n    api_key: \"your_cohere_api_key\"\n```\n\n----------------------------------------\n\nTITLE: Creating New Alembic Migration\nDESCRIPTION: Command to generate a new database migration with a custom message using make command.\nSOURCE: https://github.com/cohere-ai/cohere-toolkit/blob/main/docs/troubleshooting.md#2025-04-19_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmake migration message=\"Your migration changes\"\n```\n\n----------------------------------------\n\nTITLE: Executing Azure Deployment Commands\nDESCRIPTION: Bash commands for deploying and cleaning up the Toolkit application on Azure.\nSOURCE: https://github.com/cohere-ai/cohere-toolkit/blob/main/docs/deployment_guides/azure_deployment.md#2025-04-19_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n./azure_compose_deploy/azure_deploy.sh\n```\n\nLANGUAGE: bash\nCODE:\n```\n./azure_compose_deploy/azure_cleanup.sh\n```\n\n----------------------------------------\n\nTITLE: Setting Up and Running Unit Tests for OSS Toolkit\nDESCRIPTION: These commands install dependencies, set up the test database, and run unit tests for the OSS Toolkit project. They should be executed in the given order to prepare the environment for testing.\nSOURCE: https://github.com/cohere-ai/cohere-toolkit/blob/main/src/backend/tests/unit/README.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake install\nmake test-db\nmake run-unit-tests\n```\n\n----------------------------------------\n\nTITLE: Submitting Cloud Build for Cohere Toolkit Deployment\nDESCRIPTION: This command submits a Cloud Build job to deploy the Cohere Toolkit. It uses the configuration specified in the cloudbuild.yaml file and deploys to the specified GCP region.\nSOURCE: https://github.com/cohere-ai/cohere-toolkit/blob/main/docs/deployment_guides/gcp_deployment.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngcloud builds submit --region=<YOUR_GCP_REGION>\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Custom Tools with Poetry\nDESCRIPTION: Command to add a new module dependency for a custom tool implementation using Poetry package manager with the community group designation.\nSOURCE: https://github.com/cohere-ai/cohere-toolkit/blob/main/docs/custom_tool_guides/tool_guide.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npoetry add <MODULE> --group community\n```\n\n----------------------------------------\n\nTITLE: Enabling Community Features in YAML Configuration\nDESCRIPTION: Configuration setting to enable community features in the Cohere Toolkit by modifying the configuration.yaml file.\nSOURCE: https://github.com/cohere-ai/cohere-toolkit/blob/main/docs/how_to_guides.md#2025-04-19_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nfeature_flags.use_community_features: true\n```\n\n----------------------------------------\n\nTITLE: Cloning the Repository in Bash\nDESCRIPTION: Commands to clone the project repository and navigate to the project directory.\nSOURCE: https://github.com/cohere-ai/cohere-toolkit/blob/main/docs/setup.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone <repository-url>\ncd <repository-folder>\n```\n\n----------------------------------------\n\nTITLE: Modifying Color Theme in Cohere Toolkit\nDESCRIPTION: Updates the color scheme in the Cohere theme configuration by modifying primary color values in the theme file\nSOURCE: https://github.com/cohere-ai/cohere-toolkit/blob/main/docs/theming.md#2025-04-19_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nprimary: {\n  ...\n  600: '#E25D41',\n  500: '#AE4359', // Changed from default color\n  400: '#FF967E',\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Starting ngrok HTTP Tunnel for Local Development\nDESCRIPTION: Command to start an ngrok tunnel that exposes the local development server on port 3000 to the public internet. This allows Slack to send webhook events to your local environment.\nSOURCE: https://github.com/cohere-ai/cohere-toolkit/blob/main/src/interfaces/slack_bot/README.md#2025-04-19_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nngrok http 3000\n```\n\n----------------------------------------\n\nTITLE: Running Cohere Chat Development Commands\nDESCRIPTION: Shell commands for managing the Cohere Chat web interface lifecycle, including development mode, production build, production start, and linting.\nSOURCE: https://github.com/cohere-ai/cohere-toolkit/blob/main/src/interfaces/coral_web/README.md#2025-04-19_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# start in development mode\npnpm dev\n\n# build for production\npnpm build\n\n# start in production mode\npnpm start\n\n# lint\npnpm lint\n```\n\n----------------------------------------\n\nTITLE: Starting Toolkit API in PyCharm Debug Mode\nDESCRIPTION: Command to launch the Toolkit API in debug mode for PyCharm debugging session.\nSOURCE: https://github.com/cohere-ai/cohere-toolkit/blob/main/docs/debugging.md#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmake pycharm-debug\n```\n\n----------------------------------------\n\nTITLE: Installing PostgreSQL on MacOS\nDESCRIPTION: Command to install PostgreSQL using Homebrew package manager on MacOS systems.\nSOURCE: https://github.com/cohere-ai/cohere-toolkit/blob/main/docs/troubleshooting.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbrew install postgresql\n```\n\n----------------------------------------\n\nTITLE: Downgrading Alembic Migration\nDESCRIPTION: Command to downgrade the database schema by one migration using Alembic through Docker Compose.\nSOURCE: https://github.com/cohere-ai/cohere-toolkit/blob/main/docs/troubleshooting.md#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose run --build backend alembic -c src/backend/alembic.ini downgrade -1\n```\n\n----------------------------------------\n\nTITLE: Starting Toolkit API in VSCode Debug Mode\nDESCRIPTION: Command to launch the Toolkit API in debug mode for VSCode debugging session.\nSOURCE: https://github.com/cohere-ai/cohere-toolkit/blob/main/docs/debugging.md#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake vscode-debug\n```\n\n----------------------------------------\n\nTITLE: Creating Minikube Cluster\nDESCRIPTION: Command to initialize a local Minikube cluster for deployment.\nSOURCE: https://github.com/cohere-ai/cohere-toolkit/blob/main/charts/cohere-toolkit/README.md#2025-04-19_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nminikube start\n```\n\n----------------------------------------\n\nTITLE: Installing Helm Chart\nDESCRIPTION: Helm command to install the Cohere Toolkit chart with namespace creation and local values.\nSOURCE: https://github.com/cohere-ai/cohere-toolkit/blob/main/charts/cohere-toolkit/README.md#2025-04-19_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nhelm install cohere-toolkit ./helm/cohere-toolkit \\\n  --create-namespace \\\n  -n cohere-toolkit \\\n  -f ./helm/cohere-toolkit/values/local.yaml \\\n  --wait --timeout 30s\n```\n\n----------------------------------------\n\nTITLE: Port Forwarding Frontend Service\nDESCRIPTION: kubectl command to set up port forwarding for the frontend service.\nSOURCE: https://github.com/cohere-ai/cohere-toolkit/blob/main/charts/cohere-toolkit/README.md#2025-04-19_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nkubectl port-forward svc/toolkit-frontend 4000:80 -n cohere-toolkit\n```\n\n----------------------------------------\n\nTITLE: Running Backend and Frontend\nDESCRIPTION: This bash command starts the development environment for both the backend and frontend of the Github tool. It uses the 'make' utility to execute the 'dev' target.\nSOURCE: https://github.com/cohere-ai/cohere-toolkit/blob/main/docs/custom_tool_guides/github.md#2025-04-19_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmake dev\n```\n\n----------------------------------------\n\nTITLE: Creating and Using Fixtures in Python with Pytest\nDESCRIPTION: This example demonstrates how to create and use fixtures in Python using Pytest. Fixtures are defined using the @pytest.fixture decorator and can be used in test functions by including them as parameters.\nSOURCE: https://github.com/cohere-ai/cohere-toolkit/blob/main/src/backend/tests/unit/README.md#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n@pytest.fixture\ndef myfixture():\n    yield something\n\ndef test_something(myfixture):\n    ..\n```"
  }
]