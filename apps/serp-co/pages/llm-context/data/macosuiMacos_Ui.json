[
  {
    "owner": "macosui",
    "repo": "macos_ui",
    "content": "TITLE: Sidebar Example Usage - Flutter\nDESCRIPTION: This Flutter code snippet demonstrates how to implement a Sidebar widget within a MacosWindow.  It includes setting up a page index, defining the Sidebar's appearance and behavior, and defining SidebarItems for navigation.  The onChanged callback updates the pageIndex, which is then used to control the displayed content.\nSOURCE: https://github.com/macosui/macos_ui/blob/dev/README.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nint pageIndex = 0;\n\n...\n\nMacosWindow(\n  sidebar: Sidebar(\n    minWidth: 200,\n    builder: (context, scrollController) {\n      return SidebarItems(\n        currentIndex: pageIndex,\n        scrollController: scrollController,\n        itemSize: SidebarItemSize.large,\n        onChanged: (i) {\n          setState(() => pageIndex = i);\n        },\n        items: const [\n          SidebarItem(\n            label: Text('Page One'),\n          ),\n          SidebarItem(\n            label: Text('Page Two'),\n          ),\n        ],\n      );\n    },\n  ),\n  endSidebar: Sidebar(\n    startWidth: 200,\n    minWidth: 200,\n    maxWidth: 300,\n    shownByDefault: false,\n    builder: (context, _) {\n      return const Center(\n        child: Text('End Sidebar'),\n      );\n    },\n  ),\n),\n```\n\n----------------------------------------\n\nTITLE: Creating a MacosTextField in Dart\nDESCRIPTION: This code demonstrates how to create a basic `MacosTextField`, which allows the user to enter or edit text. The `placeholder` property displays a hint to the user when the text field is empty.\nSOURCE: https://github.com/macosui/macos_ui/blob/dev/README.md#_snippet_10\n\nLANGUAGE: dart\nCODE:\n```\nMacosTextField(\n  placeholder: 'Type some text here',\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a MacosSwitch in Dart\nDESCRIPTION: This snippet shows how to create a `MacosSwitch`, also known as a toggle, which allows the user to switch between two states: on and off. The `value` property represents the current state of the switch, and the `onChanged` callback updates the state when the switch is toggled.\nSOURCE: https://github.com/macosui/macos_ui/blob/dev/README.md#_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nbool switchValue = false;\n\nMacosSwitch(\n  value: switchValue,\n  onChanged: (value) {\n    setState(() => switchValue = value);\n  },\n),\n```\n\n----------------------------------------\n\nTITLE: Creating a PushButton in Dart\nDESCRIPTION: This code demonstrates how to create a basic `PushButton` with a text label and an `onPressed` callback.  The `controlSize` property determines the size of the button. When the button is pressed, the `onPressed` callback is executed.\nSOURCE: https://github.com/macosui/macos_ui/blob/dev/README.md#_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nPushButton(\n  child: Text('button'),\n  controlSize: ControlSize.regular,\n  onPressed: () {\n    print('button pressed');\n  },\n),\n```\n\n----------------------------------------\n\nTITLE: Displaying a MacosAlertDialog in Dart\nDESCRIPTION: This code shows how to display a `MacosAlertDialog`, a modal dialog box that presents information to the user and requires a response. The `showMacosAlertDialog` function is used to display the dialog. The `builder` parameter is a function that returns the `MacosAlertDialog` widget, which includes the app icon, title, message, and primary button.\nSOURCE: https://github.com/macosui/macos_ui/blob/dev/README.md#_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\nshowMacosAlertDialog(\n  context: context,\n  builder: (_) => MacosAlertDialog(\n    appIcon: FlutterLogo(size: 64),\n    title: Text(\n      'Alert Dialog with Primary Action',\n      style: MacosTheme.of(context).typography.headline,\n    ),\n    message: Text(\n      'This is an alert dialog with a primary action and no secondary action',\n      textAlign: TextAlign.center,\n      style: MacosTypography.of(context).headline,\n    ),\n    primaryButton: PushButton(\n      controlSize: ControlSize.large,\n      child: Text('Primary'),\n      onPressed: () {},\n    ),\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Creating a MacosPulldownButton in Dart\nDESCRIPTION: This code snippet demonstrates how to create a basic `MacosPulldownButton` with a title and a list of menu items. Each item in the menu performs an action when tapped. The `MacosPulldownMenuDivider` is used to visually separate menu items. The `onTap` property defines the action to perform when the menu item is selected.\nSOURCE: https://github.com/macosui/macos_ui/blob/dev/README.md#_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nMacosPulldownButton(\n  title: \"Actions\",\n  // Or provide an icon to use as title:\n  // icon: CupertinoIcons.ellipsis_circle, \n  items: [\n    MacosPulldownMenuItem(\n      title: const Text('Save'),\n      onTap: () => debugPrint(\"Saving...\"),\n    ),\n    MacosPulldownMenuItem(\n      title: const Text('Save as...'),\n      onTap: () => debugPrint(\"Opening Save As dialog...\"),\n    ),\n    const MacosPulldownMenuDivider(),\n    MacosPulldownMenuItem(\n      enabled: false,\n      title: const Text('Export'),\n      onTap: () => debugPrint(\"Exporting\"),\n    ),\n  ],\n),\n```\n\n----------------------------------------\n\nTITLE: Displaying a MacosSheet in Dart\nDESCRIPTION: This code shows how to display a `MacosSheet`, a modal sheet that slides in from the bottom of the screen. The `showMacosSheet` function is used to display the sheet. The `builder` parameter is a function that returns the `MacosuiSheet` widget.\nSOURCE: https://github.com/macosui/macos_ui/blob/dev/README.md#_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\nshowMacosSheet(\n  context: context,\n  builder: (_) => const MacosuiSheet(),\n);\n```\n\n----------------------------------------\n\nTITLE: Creating a MacosSearchField in Dart\nDESCRIPTION: This code shows how to create a `MacosSearchField`, which is a specialized text field for performing text-based searches. The `placeholder` property displays a hint to the user, the `results` property provides a list of selectable results, and the `onResultSelected` callback is executed when the user selects a result.\nSOURCE: https://github.com/macosui/macos_ui/blob/dev/README.md#_snippet_11\n\nLANGUAGE: dart\nCODE:\n```\nMacosSearchField(\n  placeholder: 'Search for a country...',\n  results: countries.map((e) => SearchResultItem(e)).toList(),\n  onResultSelected: (resultItem) {\n    debugPrint(resultItem.searchKey);\n  },\n)\n```\n\n----------------------------------------\n\nTITLE: Refactoring Theme - Flutter\nDESCRIPTION: This entry indicates a major theme refactor that more closely resembles flutter/material and flutter/cupertino. The `Style` class is now `MacosThemeData`, `MacosTheme` is now a `StatelessWidget`, and `MacosApp` now takes a `theme` and `darkTheme`.\nSOURCE: https://github.com/macosui/macos_ui/blob/dev/CHANGELOG.md#_snippet_23\n\n\n\n----------------------------------------\n\nTITLE: Adding MacosPrefix to Widgets - Flutter\nDESCRIPTION: This changelog entry indicates the addition of the `MacosPrefix` to widgets/classes with names that overlap with the material/cupertino libraries, such as `TextField` -> `MacosTextField`, `Scaffold` -> `MacosScaffold`, etc. This change aims to avoid naming conflicts and improve code clarity.\nSOURCE: https://github.com/macosui/macos_ui/blob/dev/CHANGELOG.md#_snippet_5\n\n\n\n----------------------------------------\n\nTITLE: Configuring MacosWindowUtils - Flutter\nDESCRIPTION: This Flutter code snippet demonstrates how to initialize and configure macos_window_utils. It sets the toolbar style of the window to `NSWindowToolbarStyle.unified`. This snippet requires the macos_window_utils package. It should be called within the main() function before runApp().\nSOURCE: https://github.com/macosui/macos_ui/blob/dev/README.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\n/// This method initializes macos_window_utils and styles the window.\nFuture<void> _configureMacosWindowUtils() async {\n  const config = MacosWindowUtilsConfig(\n    toolbarStyle: NSWindowToolbarStyle.unified,\n  );\n  await config.apply();\n}\n\nvoid main() async {\n  await _configureMacosWindowUtils();\n\n  runApp(const YourAppHere());\n}\n```\n\n----------------------------------------\n\nTITLE: Setting macOS Deployment Target in Podfile\nDESCRIPTION: This code snippet shows how to set the minimum macOS deployment version in the Podfile for a Flutter project. This is often required to ensure compatibility with native macOS features used by packages like macos_ui or macos_window_utils.  The target version should be at least 10.14.6.\nSOURCE: https://github.com/macosui/macos_ui/blob/dev/README.md#_snippet_3\n\nLANGUAGE: podspec\nCODE:\n```\nplatform :osx, '10.14.6'\n```\n\n----------------------------------------\n\nTITLE: Configuring MacosWindowUtils with TitleBar - Flutter\nDESCRIPTION: This Flutter code snippet demonstrates how to initialize and configure macos_window_utils when using a TitleBar within a MacosWindow.  It sets the toolbar style of the window to `NSWindowToolbarStyle.expanded` to correctly align the window buttons. This snippet depends on the macos_window_utils package. It needs to be called in the main() function prior to runApp().\nSOURCE: https://github.com/macosui/macos_ui/blob/dev/README.md#_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nFuture<void> _configureMacosWindowUtils() async {\n  const config = MacosWindowUtilsConfig(\n    toolbarStyle: NSWindowToolbarStyle.expanded,\n  );\n  await config.apply();\n}\n```\n\n----------------------------------------\n\nTITLE: Adding BackButton and IconButton Widgets - Flutter\nDESCRIPTION: This entry indicates the addition of the `BackButton` and `IconButton` widgets to the `macos_ui` package, providing common UI elements for navigation and user interaction.\nSOURCE: https://github.com/macosui/macos_ui/blob/dev/CHANGELOG.md#_snippet_9\n\n\n\n----------------------------------------\n\nTITLE: Modifying MainFlutterWindow.swift in Swift\nDESCRIPTION: This code snippet shows the changes needed in `MainFlutterWindow.swift` to integrate `macos_window_utils` for older macOS versions.  It imports `macos_window_utils` and replaces the original FlutterViewController initialization with the `MacOSWindowUtilsViewController` initialization. It includes the necessary calls to start the `MainFlutterWindowManipulator` and register plugins with the correct view controller.\nSOURCE: https://github.com/macosui/macos_ui/blob/dev/README.md#_snippet_22\n\nLANGUAGE: Swift\nCODE:\n```\nimport Cocoa\nimport FlutterMacOS\n+import macos_window_utils\n\nclass MainFlutterWindow: NSWindow {\n  override func awakeFromNib() {\n-   let flutterViewController = FlutterViewController.init()\n-   let windowFrame = self.frame\n-   self.contentViewController = flutterViewController\n-   self.setFrame(windowFrame, display: true)\n\n-   RegisterGeneratedPlugins(registry: flutterViewController)\n    \n+   let windowFrame = self.frame\n+   let macOSWindowUtilsViewController = MacOSWindowUtilsViewController()\n+   self.contentViewController = macOSWindowUtilsViewController\n+   self.setFrame(windowFrame, display: true)\n\n+   /* Initialize the macos_window_utils plugin */\n+   MainFlutterWindowManipulator.start(mainFlutterWindow: self)\n\n+   RegisterGeneratedPlugins(registry: macOSWindowUtilsViewController.flutterViewController)\n\n    super.awakeFromNib()\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Theme API - Flutter\nDESCRIPTION: This entry indicates updates to the theme API, including making properties in `MacosThemeData` and `Typography` non-nullable, renaming `DynamicColorX` to `MacosDynamicColor`, and adding the `lerp` method to theme data classes.\nSOURCE: https://github.com/macosui/macos_ui/blob/dev/CHANGELOG.md#_snippet_14\n\n\n\n----------------------------------------\n\nTITLE: Creating an Interactive CapacityIndicator in Dart\nDESCRIPTION: This snippet shows how to create an interactive `CapacityIndicator`. It includes a `value` property and an `onChanged` callback that updates the value when the indicator is interacted with.\nSOURCE: https://github.com/macosui/macos_ui/blob/dev/README.md#_snippet_15\n\nLANGUAGE: dart\nCODE:\n```\ndouble value = 30;\n\nCapacityIndicator(\n  value: value,\n  discrete: false,\n  onChanged: (v) {\n    setState(() => value = v);\n  },\n),\n```\n\n----------------------------------------\n\nTITLE: Creating an Interactive MacosSlider in Dart\nDESCRIPTION: This snippet shows how to create an interactive `MacosSlider`. It includes a `value` property and an `onChanged` callback that updates the value when the slider is interacted with.\nSOURCE: https://github.com/macosui/macos_ui/blob/dev/README.md#_snippet_16\n\nLANGUAGE: dart\nCODE:\n```\ndouble value = 0.5;\n\nMacosSlider(\n  value: value,\n  onChanged: (v) {\n    setState(() => value = v);\n  },\n),\n```\n\n----------------------------------------\n\nTITLE: Creating a MacosTooltip in Dart\nDESCRIPTION: This snippet shows how to create a basic tooltip using the `MacosTooltip` widget. The tooltip displays the specified message when the user hovers over the child widget.\nSOURCE: https://github.com/macosui/macos_ui/blob/dev/README.md#_snippet_12\n\nLANGUAGE: dart\nCODE:\n```\nMacosTooltip(\n  message: 'This is a tooltip',\n  child: Text('Hover or long press to show a tooltip'),\n),\n```\n\n----------------------------------------\n\nTITLE: IconButton Updates - Flutter\nDESCRIPTION: This entry describes updates to the `IconButton` widget, including renaming the `color` property to `backgroundColor` and changing the `icon` property to accept a `Widget` instead of `IconData`.  The internal `foregroundColor` value was also deprecated and removed.\nSOURCE: https://github.com/macosui/macos_ui/blob/dev/CHANGELOG.md#_snippet_8\n\n\n\n----------------------------------------\n\nTITLE: Implementing Checkbox and RadioButton - Flutter\nDESCRIPTION: This entry signifies the implementation of the `Checkbox` and `RadioButton` widgets in the `macos_ui` package, providing standard UI elements for boolean selection and exclusive option selection.\nSOURCE: https://github.com/macosui/macos_ui/blob/dev/CHANGELOG.md#_snippet_20\n\n\n\n----------------------------------------\n\nTITLE: Creating an Interactive RatingIndicator in Dart\nDESCRIPTION: This snippet shows how to create an interactive `RatingIndicator`. It allows users to set a rating, with a given number of symbols (stars), using the `value` and `amount` parameters, and providing an `onChanged` callback to update the `value` when a new rating is selected.\nSOURCE: https://github.com/macosui/macos_ui/blob/dev/README.md#_snippet_17\n\nLANGUAGE: dart\nCODE:\n```\ndouble value = 3;\n\nRatingIndicator(\n  amount: 5,\n  value: value,\n  onChanged: (v) {\n    setState(() => value = v);\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Adding PushButton Widget - Flutter\nDESCRIPTION: This entry signifies the addition of the `PushButton` widget along with `PushButtonTheme` and `PushButtonThemeData` to the `macos_ui` package. It introduces a button with a distinct push-down visual style.\nSOURCE: https://github.com/macosui/macos_ui/blob/dev/CHANGELOG.md#_snippet_22\n\n\n\n----------------------------------------\n\nTITLE: Implementing Scrollbar and MacosScrollBehavior - Flutter\nDESCRIPTION: This entry signifies the implementation of the `Scrollbar` widget and the `MacosScrollBehavior` class in the `macos_ui` package.  These implementations provide macOS-style scrollbars and scrolling behavior.\nSOURCE: https://github.com/macosui/macos_ui/blob/dev/CHANGELOG.md#_snippet_11\n\n\n\n----------------------------------------\n\nTITLE: Initializing macos_window_utils in Swift\nDESCRIPTION: This code snippet initializes the `macos_window_utils` plugin in `MainFlutterWindow.swift`. It creates a `MacOSWindowUtilsViewController`, sets it as the content view controller, and initializes the plugin using `MainFlutterWindowManipulator.start`. It also registers generated plugins with the new view controller. This ensures proper window management functionality on older macOS versions.\nSOURCE: https://github.com/macosui/macos_ui/blob/dev/README.md#_snippet_21\n\nLANGUAGE: Swift\nCODE:\n```\nlet windowFrame = self.frame\nlet macOSWindowUtilsViewController = MacOSWindowUtilsViewController()\nself.contentViewController = macOSWindowUtilsViewController\nself.setFrame(windowFrame, display: true)\n\n/* Initialize the macos_window_utils plugin */\nMainFlutterWindowManipulator.start(mainFlutterWindow: self)\n\nRegisterGeneratedPlugins(registry: macOSWindowUtilsViewController.flutterViewController)\n```\n\n----------------------------------------\n\nTITLE: Adding canvasColor to MacosThemeData - Flutter\nDESCRIPTION: This entry indicates the addition of the `canvasColor` property to `MacosThemeData`.  `Scaffold` now uses this as its default background color, allowing for more flexible theme customization.\nSOURCE: https://github.com/macosui/macos_ui/blob/dev/CHANGELOG.md#_snippet_6\n\n\n\n----------------------------------------\n\nTITLE: Adding VisualDensity to MacosThemeData - Flutter\nDESCRIPTION: This entry indicates the addition of the `VisualDensity` property to `MacosThemeData`. This allows for control over the compactness of UI elements, similar to Flutter's built-in `VisualDensity`.\nSOURCE: https://github.com/macosui/macos_ui/blob/dev/CHANGELOG.md#_snippet_10\n\n\n\n----------------------------------------\n\nTITLE: Creating a MacosPopupButton in Dart\nDESCRIPTION: This snippet shows how to create a `MacosPopupButton` that allows the user to select from a list of mutually exclusive choices. The `value` property determines the currently selected item, and the `onChanged` callback updates the state when a new item is selected. The `items` property contains a list of `MacosPopupMenuItem` widgets, each representing a choice.\nSOURCE: https://github.com/macosui/macos_ui/blob/dev/README.md#_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nString popupValue = 'One';\n\nMacosPopupButton<String>(\n  value: popupValue,\n  onChanged: (String? newValue) {\n    setState(() {\n      popupValue = newValue!;\n    });\n  },\n  items: <String>['One', 'Two', 'Three', 'Four']\n      .map<MacosPopupMenuItem<String>>((String value) {\n    return MacosPopupMenuItem<String>(\n      value: value,\n      child: Text(value),\n    );\n  }).toList(),\n),\n```\n\n----------------------------------------\n\nTITLE: Adding startWidth to ResizablePane and Sidebar - Flutter\nDESCRIPTION: This entry indicates adding `startWidth` properties to `ResizablePane` and `Sidebar` widgets, which enables to set the initial width of these components.\nSOURCE: https://github.com/macosui/macos_ui/blob/dev/CHANGELOG.md#_snippet_12\n\n\n\n----------------------------------------\n\nTITLE: Adding MacosColor and MacosColors Classes - Flutter\nDESCRIPTION: This changelog entry signifies the addition of new `MacosColor` and `MacosColors` classes to the `macos_ui` package. These classes likely provide a set of predefined colors and utilities for managing color schemes within the macOS UI.\nSOURCE: https://github.com/macosui/macos_ui/blob/dev/CHANGELOG.md#_snippet_7\n\n\n\n----------------------------------------\n\nTITLE: Implementing Checkbox, Progress Widgets, Switch - Flutter\nDESCRIPTION: This entry signifies the implementation of the `Checkbox`, `ProgressCircle` and `ProgressBar`, and `Switch` widgets in the `macos_ui` package, expanding the available set of UI components.\nSOURCE: https://github.com/macosui/macos_ui/blob/dev/CHANGELOG.md#_snippet_24\n\n\n\n----------------------------------------\n\nTITLE: Creating an Indeterminate ProgressCircle in Dart\nDESCRIPTION: This snippet demonstrates how to create an indeterminate `ProgressCircle`. The `value` parameter is set to `null` to indicate that the progress is indeterminate.\nSOURCE: https://github.com/macosui/macos_ui/blob/dev/README.md#_snippet_13\n\nLANGUAGE: dart\nCODE:\n```\nProgressCircle(\n  value: null,\n),\n```\n\n----------------------------------------\n\nTITLE: Creating a Determinate ProgressBar in Dart\nDESCRIPTION: This snippet shows how to create a determinate `ProgressBar`. The `value` parameter is set to a specific value (30 in this case) to indicate the progress level.\nSOURCE: https://github.com/macosui/macos_ui/blob/dev/README.md#_snippet_14\n\nLANGUAGE: dart\nCODE:\n```\nProgressBar(\n  value: 30,\n)\n```\n\n----------------------------------------\n\nTITLE: Using MacosDatePicker in Dart\nDESCRIPTION: This snippet shows how to implement `MacosDatePicker` with the `onDateChanged` callback that prints date whenever the date is changed.\nSOURCE: https://github.com/macosui/macos_ui/blob/dev/README.md#_snippet_18\n\nLANGUAGE: dart\nCODE:\n```\nMacosDatePicker(\n  onDateChanged: (date) => debugPrint('$date'),\n),\n```\n\n----------------------------------------\n\nTITLE: Using MacosTimePicker in Dart\nDESCRIPTION: This snippet shows how to implement `MacosTimePicker` with the `onTimeChanged` callback that prints time whenever the time is changed.\nSOURCE: https://github.com/macosui/macos_ui/blob/dev/README.md#_snippet_19\n\nLANGUAGE: dart\nCODE:\n```\nMacosTimePicker(\n  onTimeChanged: (time) => debugPrint('$time'),\n),\n```\n\n----------------------------------------\n\nTITLE: Using MacosColorWell in Dart\nDESCRIPTION: This snippet shows how to implement `MacosColorWell` with the `onColorSelected` callback that prints the selected color whenever a new color is selected.\nSOURCE: https://github.com/macosui/macos_ui/blob/dev/README.md#_snippet_20\n\nLANGUAGE: dart\nCODE:\n```\nMacosColorWell(\n  onColorSelected: (color) => debugPrint('$color'),\n),\n```\n\n----------------------------------------\n\nTITLE: Implementing TextField - Flutter\nDESCRIPTION: This entry signifies the implementation of the `TextField` widget in the `macos_ui` package, providing a macOS-style text input field.\nSOURCE: https://github.com/macosui/macos_ui/blob/dev/CHANGELOG.md#_snippet_17\n\n\n\n----------------------------------------\n\nTITLE: Implementing HelpButton - Flutter\nDESCRIPTION: This entry signifies the implementation of the `HelpButton` widget in the `macos_ui` package, providing a button that typically opens a help dialog or documentation.\nSOURCE: https://github.com/macosui/macos_ui/blob/dev/CHANGELOG.md#_snippet_19\n\n\n\n----------------------------------------\n\nTITLE: Updating MacosColors - Flutter\nDESCRIPTION: This changelog entry signifies updates to the `MacosColors` class within the `macos_ui` package. These updates likely involve modifications to the available color palettes or color schemes.\nSOURCE: https://github.com/macosui/macos_ui/blob/dev/CHANGELOG.md#_snippet_2\n\n\n\n----------------------------------------\n\nTITLE: Adding Scaffold Widget - Flutter\nDESCRIPTION: This entry indicates the addition of the `Scaffold` widget to the `macos_ui` package, providing a basic layout structure for macOS-style applications.\nSOURCE: https://github.com/macosui/macos_ui/blob/dev/CHANGELOG.md#_snippet_25\n\n\n\n----------------------------------------\n\nTITLE: Implementing Label Widget - Flutter\nDESCRIPTION: This entry signifies the implementation of the `Label` widget in the `macos_ui` package.  The label widget likely provides a simple way to display text.\nSOURCE: https://github.com/macosui/macos_ui/blob/dev/CHANGELOG.md#_snippet_15\n\n\n\n----------------------------------------\n\nTITLE: Fixing Label Alignment - Flutter\nDESCRIPTION: This entry indicates a fix for alignment issues related to the `Label` widget in the `macos_ui` package. This likely involves correcting the visual positioning of labels within the UI.\nSOURCE: https://github.com/macosui/macos_ui/blob/dev/CHANGELOG.md#_snippet_3\n\n\n\n----------------------------------------\n\nTITLE: Implementing Tooltip - Flutter\nDESCRIPTION: This entry signifies the implementation of the `Tooltip` widget in the `macos_ui` package, providing a way to display information when hovering over a UI element.\nSOURCE: https://github.com/macosui/macos_ui/blob/dev/CHANGELOG.md#_snippet_16\n\n\n\n----------------------------------------\n\nTITLE: Fixing TextField Alignment - Flutter\nDESCRIPTION: This entry indicates a fix for alignment issues related to the `MacosTextField` widget in the `macos_ui` package. This likely involves correcting the visual positioning of text within the text field.\nSOURCE: https://github.com/macosui/macos_ui/blob/dev/CHANGELOG.md#_snippet_4\n\n\n\n----------------------------------------\n\nTITLE: Fixing TextField on Flutter v2.2.0 - Flutter\nDESCRIPTION: This entry signifies a fix for issues with the `TextField` widget when used with Flutter version 2.2.0. This likely resolves compatibility problems or rendering issues.\nSOURCE: https://github.com/macosui/macos_ui/blob/dev/CHANGELOG.md#_snippet_13\n\n\n\n----------------------------------------\n\nTITLE: Updating Typography - Flutter\nDESCRIPTION: This entry indicates updates to the `Typography` class, including correcting letter spacing and font weights to align with macOS design guidelines.\nSOURCE: https://github.com/macosui/macos_ui/blob/dev/CHANGELOG.md#_snippet_21\n\n\n\n----------------------------------------\n\nTITLE: Adding Sidebar Item Widget - Flutter\nDESCRIPTION: This entry indicates the addition of the `SidebarItem` widget to the `macos_ui` Flutter package. It introduces a new UI element for creating sidebar navigation.\nSOURCE: https://github.com/macosui/macos_ui/blob/dev/CHANGELOG.md#_snippet_1\n\n\n\n----------------------------------------\n\nTITLE: Initial Project Creation - Flutter\nDESCRIPTION: This entry describes the initial project creation with basic components like the `MacosApp` widget, basic `Typography`, and basic theming via `MacosTheme` and `Style`.\nSOURCE: https://github.com/macosui/macos_ui/blob/dev/CHANGELOG.md#_snippet_26\n\n\n\n----------------------------------------\n\nTITLE: Revamping Scaffold - Flutter\nDESCRIPTION: This entry indicates a revamp of the `Scaffold` widget in the `macos_ui` package, likely involving significant changes to its structure and functionality.\nSOURCE: https://github.com/macosui/macos_ui/blob/dev/CHANGELOG.md#_snippet_18\n\n\n\n----------------------------------------\n\nTITLE: Flutter Version Constraint Example\nDESCRIPTION: This snippet from the changelog shows how to specify Flutter SDK version constraints in the `pubspec.yaml` file. This is used to prevent compatibility issues with older Flutter versions. The example suggests increasing the required Flutter SDK version to ^1.10.0 to support the `flutter.plugin.platforms` key.\nSOURCE: https://github.com/macosui/macos_ui/blob/dev/CHANGELOG.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nPackage validation found the following error:\n* pubspec.yaml allows Flutter SDK version 1.9.x, which does not support the flutter.plugin.platforms key.\n  Please consider increasing the Flutter SDK requirement to ^1.10.0 (environment.sdk.flutter)\n```"
  }
]