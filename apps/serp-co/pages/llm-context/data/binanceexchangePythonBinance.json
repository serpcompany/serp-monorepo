[
  {
    "owner": "binance-exchange",
    "repo": "python-binance",
    "content": "TITLE: Initializing Binance Client in Python\nDESCRIPTION: This code snippet demonstrates how to initialize the Binance Client by importing the necessary module and creating a client instance with API key and secret.\nSOURCE: https://github.com/binance-exchange/python-binance/blob/master/docs/overview.rst#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom binance.client import Client\nclient = Client(api_key, api_secret)\n```\n\n----------------------------------------\n\nTITLE: Basic Binance API Usage Examples\nDESCRIPTION: Demonstrates core functionality including client initialization, market data retrieval, order placement, withdrawals, deposits, websocket usage, and historical data fetching.\nSOURCE: https://github.com/binance-exchange/python-binance/blob/master/PYPIREADME.rst#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom binance.client import Client\nclient = Client(api_key, api_secret)\n\n# get market depth\ndepth = client.get_order_book(symbol='BNBBTC')\n\n# place a test market buy order, to place an actual order use the create_order function\norder = client.create_test_order(\n    symbol='BNBBTC',\n    side=Client.SIDE_BUY,\n    type=Client.ORDER_TYPE_MARKET,\n    quantity=100)\n\n# get all symbol prices\nprices = client.get_all_tickers()\n\n# withdraw 100 ETH\n# check docs for assumptions around withdrawals\nfrom binance.exceptions import BinanceAPIException, BinanceWithdrawException\ntry:\n    result = client.withdraw(\n        asset='ETH',\n        address='<eth_address>',\n        amount=100)\nexcept BinanceAPIException as e:\n    print(e)\nexcept BinanceWithdrawException as e:\n    print(e)\nelse:\n    print(\"Success\")\n\n# fetch list of withdrawals\nwithdraws = client.get_withdraw_history()\n\n# fetch list of ETH withdrawals\neth_withdraws = client.get_withdraw_history(asset='ETH')\n\n# get a deposit address for BTC\naddress = client.get_deposit_address(asset='BTC')\n\n# start aggregated trade websocket for BNBBTC\ndef process_message(msg):\n    print(\"message type: {}\".format(msg['e']))\n    print(msg)\n    # do something\n\nfrom binance.websockets import BinanceSocketManager\nbm = BinanceSocketManager(client)\nbm.start_aggtrade_socket('BNBBTC', process_message)\nbm.start()\n\n# get historical kline data from any date range\n\n# fetch 1 minute klines for the last day up until now\nklines = client.get_historical_klines(\"BNBBTC\", Client.KLINE_INTERVAL_1MINUTE, \"1 day ago UTC\")\n\n# fetch 30 minute klines for the last month of 2017\nklines = client.get_historical_klines(\"ETHBTC\", Client.KLINE_INTERVAL_30MINUTE, \"1 Dec, 2017\", \"1 Jan, 2018\")\n\n# fetch weekly klines since it listed\nklines = client.get_historical_klines(\"NEOBTC\", KLINE_INTERVAL_1WEEK, \"1 Jan, 2017\")\n```\n\n----------------------------------------\n\nTITLE: Getting Account Information using Binance API in Python\nDESCRIPTION: This code snippet demonstrates how to retrieve account information using the Binance API client in Python.\nSOURCE: https://github.com/binance-exchange/python-binance/blob/master/docs/account.rst#2025-04-23_snippet_10\n\nLANGUAGE: python\nCODE:\n```\ninfo = client.get_account()\n```\n\n----------------------------------------\n\nTITLE: Placing Market Buy and Sell Orders using Binance API in Python\nDESCRIPTION: These snippets demonstrate how to place market buy and sell orders using helper functions provided by the Binance API client in Python.\nSOURCE: https://github.com/binance-exchange/python-binance/blob/master/docs/account.rst#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\norder = client.order_market_buy(\n    symbol='BNBBTC',\n    quantity=100)\n\norder = client.order_market_sell(\n    symbol='BNBBTC',\n    quantity=100)\n```\n\n----------------------------------------\n\nTITLE: Initializing BinanceSocketManager in Python\nDESCRIPTION: Shows how to create a BinanceSocketManager instance, start a trade socket, and initialize the socket manager to begin receiving data from Binance WebSocket API.\nSOURCE: https://github.com/binance-exchange/python-binance/blob/master/docs/websockets.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom binance.websockets import BinanceSocketManager\nbm = BinanceSocketManager(client)\n# start any sockets here, i.e a trade socket\nconn_key = bm.start_trade_socket('BNBBTC', process_message)\n# then start the socket manager\nbm.start()\n```\n\n----------------------------------------\n\nTITLE: Placing Limit Buy and Sell Orders using Binance API in Python\nDESCRIPTION: These snippets show how to place limit buy and sell orders using helper functions provided by the Binance API client in Python.\nSOURCE: https://github.com/binance-exchange/python-binance/blob/master/docs/account.rst#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\norder = client.order_limit_buy(\n    symbol='BNBBTC',\n    quantity=100,\n    price='0.00001')\n\norder = client.order_limit_sell(\n    symbol='BNBBTC',\n    quantity=100,\n    price='0.00001')\n```\n\n----------------------------------------\n\nTITLE: Creating User Data Socket in Python for Binance\nDESCRIPTION: Demonstrates how to create a user data socket that provides real-time updates on account changes, order updates, and trade events. Requires authenticated API access.\nSOURCE: https://github.com/binance-exchange/python-binance/blob/master/docs/websockets.rst#2025-04-23_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nbm.start_user_socket(process_message)\n```\n\n----------------------------------------\n\nTITLE: Getting Historical Klines/Candlesticks in Python using Binance API\nDESCRIPTION: Shows how to fetch historical kline data for different date ranges and intervals. Includes examples for daily, monthly, and since-listing scenarios.\nSOURCE: https://github.com/binance-exchange/python-binance/blob/master/docs/market_data.rst#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n# fetch 1 minute klines for the last day up until now\nklines = client.get_historical_klines(\"BNBBTC\", Client.KLINE_INTERVAL_1MINUTE, \"1 day ago UTC\")\n\n# fetch 30 minute klines for the last month of 2017\nklines = client.get_historical_klines(\"ETHBTC\", Client.KLINE_INTERVAL_30MINUTE, \"1 Dec, 2017\", \"1 Jan, 2018\")\n\n# fetch weekly klines since it listed\nklines = client.get_historical_klines(\"NEOBTC\", KLINE_INTERVAL_1WEEK, \"1 Jan, 2017\")\n```\n\n----------------------------------------\n\nTITLE: Getting All Orders using Binance API in Python\nDESCRIPTION: This snippet shows how to retrieve all orders (open and closed) for a specific symbol using the Binance API client in Python.\nSOURCE: https://github.com/binance-exchange/python-binance/blob/master/docs/account.rst#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\norders = client.get_all_orders(symbol='BNBBTC')\n```\n\n----------------------------------------\n\nTITLE: Executing Cryptocurrency Withdrawals with Python Binance API\nDESCRIPTION: Demonstrates how to withdraw cryptocurrency using the Binance API. Includes error handling for API and withdrawal exceptions, and shows variations for different cryptocurrencies including those requiring address tags.\nSOURCE: https://github.com/binance-exchange/python-binance/blob/master/docs/withdraw.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom binance.exceptions import BinanceAPIException, BinanceWithdrawException\ntry:\n    # name parameter will be set to the asset value by the client if not passed\n    result = client.withdraw(\n        asset='ETH',\n        address='<eth_address>',\n        amount=100)\nexcept BinanceAPIException as e:\n    print(e)\nexcept BinanceWithdrawException as e:\n    print(e)\nelse:\n    print(\"Success\")\n\n# passing a name parameter\nresult = client.withdraw(\n    asset='ETH',\n    address='<eth_address>',\n    amount=100,\n    name='Withdraw')\n\n# if the coin requires a extra tag or name such as XRP or XMR then pass an `addressTag` parameter.\nresult = client.withdraw(\n    asset='XRP',\n    address='<xrp_address>',\n    addressTag='<xrp_address_tag>',\n    amount=10000)\n```\n\n----------------------------------------\n\nTITLE: Fetching All Prices in Python using Binance API\nDESCRIPTION: Gets the latest prices for all trading pairs on the exchange.\nSOURCE: https://github.com/binance-exchange/python-binance/blob/master/docs/market_data.rst#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nprices = client.get_all_tickers()\n```\n\n----------------------------------------\n\nTITLE: Placing a Custom Order using Binance API in Python\nDESCRIPTION: This snippet demonstrates how to place a custom order using the Binance API client in Python. It shows full control over order parameters such as symbol, side, type, time in force, quantity, and price.\nSOURCE: https://github.com/binance-exchange/python-binance/blob/master/docs/account.rst#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom binance.enums import *\norder = client.create_order(\n    symbol='BNBBTC',\n    side=SIDE_BUY,\n    type=ORDER_TYPE_LIMIT,\n    timeInForce=TIME_IN_FORCE_GTC,\n    quantity=100,\n    price='0.00001')\n```\n\n----------------------------------------\n\nTITLE: Processing WebSocket Messages in Python\nDESCRIPTION: Demonstrates how to create a callback function to process messages received from Binance WebSockets. The function receives a dictionary containing the message data according to Binance's API documentation.\nSOURCE: https://github.com/binance-exchange/python-binance/blob/master/docs/websockets.rst#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef process_message(msg):\n    print(\"message type: {}\".format(msg['e']))\n    print(msg)\n    # do something\n```\n\n----------------------------------------\n\nTITLE: Checking Order Status using Binance API in Python\nDESCRIPTION: This code snippet demonstrates how to check the status of a specific order using the Binance API client in Python.\nSOURCE: https://github.com/binance-exchange/python-binance/blob/master/docs/account.rst#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\norder = client.get_order(\n    symbol='BNBBTC',\n    orderId='orderId')\n```\n\n----------------------------------------\n\nTITLE: Creating Multiplex WebSocket in Python for Binance\nDESCRIPTION: Demonstrates how to create a multiplex socket that combines multiple data streams into a single WebSocket connection. This example shows connecting to aggregate trade and ticker streams.\nSOURCE: https://github.com/binance-exchange/python-binance/blob/master/docs/websockets.rst#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef process_m_message(msg):\n    print(\"stream: {} data: {}\".format(msg['stream'], msg['data']))\n\n# pass a list of stream names\nconn_key = bm.start_multiplex_socket(['bnbbtc@aggTrade', 'neobtc@ticker'], process_m_message)\n```\n\n----------------------------------------\n\nTITLE: Canceling an Order using Binance API in Python\nDESCRIPTION: This snippet shows how to cancel an existing order using the Binance API client in Python.\nSOURCE: https://github.com/binance-exchange/python-binance/blob/master/docs/account.rst#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nresult = client.cancel_order(\n    symbol='BNBBTC',\n    orderId='orderId')\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Binance Constants in Python\nDESCRIPTION: This snippet demonstrates how to import and use the Binance constants in your Python code. It shows the import statements for both the Client and BinanceSocketManager classes, and provides an example of using a constant (SIDE_BUY) from the Client class.\nSOURCE: https://github.com/binance-exchange/python-binance/blob/master/docs/constants.rst#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom binance.client import Client\nfrom binance.websockets import BinanceSocketManager\n\nside = Client.SIDE_BUY\n```\n\n----------------------------------------\n\nTITLE: Creating All Market Tickers Socket in Python\nDESCRIPTION: Demonstrates how to create a socket connection to receive 24-hour ticker statistics for all trading pairs on Binance.\nSOURCE: https://github.com/binance-exchange/python-binance/blob/master/docs/websockets.rst#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nconn_key = bm.start_ticker_socket(process_message)\n```\n\n----------------------------------------\n\nTITLE: Creating Trade Socket for Binance in Python\nDESCRIPTION: Demonstrates how to create a socket connection to receive individual trade data for a specific trading pair on Binance.\nSOURCE: https://github.com/binance-exchange/python-binance/blob/master/docs/websockets.rst#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nconn_key = bm.start_trade_socket('BNBBTC', process_message)\n```\n\n----------------------------------------\n\nTITLE: Fetching Market Depth in Python using Binance API\nDESCRIPTION: Gets the order book depth for a specific trading symbol.\nSOURCE: https://github.com/binance-exchange/python-binance/blob/master/docs/market_data.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndepth = client.get_order_book(symbol='BNBBTC')\n```\n\n----------------------------------------\n\nTITLE: Using Aggregate Trade Iterator in Python with Binance API\nDESCRIPTION: Demonstrates how to iterate over aggregate trades for a symbol from a given date or order ID. Includes examples of converting iterator to list and using last_id parameter.\nSOURCE: https://github.com/binance-exchange/python-binance/blob/master/docs/market_data.rst#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nagg_trades = client.aggregate_trade_iter(symbol='ETHBTC', start_str='30 minutes ago UTC')\n\n# iterate over the trade iterator\nfor trade in agg_trades:\n    print(trade)\n    # do something with the trade data\n\n# convert the iterator to a list\n# note: generators can only be iterated over once so we need to call it again\nagg_trades = client.aggregate_trade_iter(symbol='ETHBTC', '30 minutes ago UTC')\nagg_trade_list = list(agg_trades)\n\n# example using last_id value\nagg_trades = client.aggregate_trade_iter(symbol='ETHBTC', last_id=23380478)\nagg_trade_list = list(agg_trades)\n```\n\n----------------------------------------\n\nTITLE: Defining Binance Constants in Python\nDESCRIPTION: This snippet defines various constants used in the Binance Python client. It includes constants for symbol types, order statuses, kline intervals, order sides, order types, time in force options, order response types, and aggregate trade data fields. These constants are essential for interacting with the Binance API and maintaining consistency in order parameters and responses.\nSOURCE: https://github.com/binance-exchange/python-binance/blob/master/docs/constants.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nSYMBOL_TYPE_SPOT = 'SPOT'\n\nORDER_STATUS_NEW = 'NEW'\nORDER_STATUS_PARTIALLY_FILLED = 'PARTIALLY_FILLED'\nORDER_STATUS_FILLED = 'FILLED'\nORDER_STATUS_CANCELED = 'CANCELED'\nORDER_STATUS_PENDING_CANCEL = 'PENDING_CANCEL'\nORDER_STATUS_REJECTED = 'REJECTED'\nORDER_STATUS_EXPIRED = 'EXPIRED'\n\nKLINE_INTERVAL_1MINUTE = '1m'\nKLINE_INTERVAL_3MINUTE = '3m'\nKLINE_INTERVAL_5MINUTE = '5m'\nKLINE_INTERVAL_15MINUTE = '15m'\nKLINE_INTERVAL_30MINUTE = '30m'\nKLINE_INTERVAL_1HOUR = '1h'\nKLINE_INTERVAL_2HOUR = '2h'\nKLINE_INTERVAL_4HOUR = '4h'\nKLINE_INTERVAL_6HOUR = '6h'\nKLINE_INTERVAL_8HOUR = '8h'\nKLINE_INTERVAL_12HOUR = '12h'\nKLINE_INTERVAL_1DAY = '1d'\nKLINE_INTERVAL_3DAY = '3d'\nKLINE_INTERVAL_1WEEK = '1w'\nKLINE_INTERVAL_1MONTH = '1M'\n\nSIDE_BUY = 'BUY'\nSIDE_SELL = 'SELL'\n\nORDER_TYPE_LIMIT = 'LIMIT'\nORDER_TYPE_MARKET = 'MARKET'\nORDER_TYPE_STOP_LOSS = 'STOP_LOSS'\nORDER_TYPE_STOP_LOSS_LIMIT = 'STOP_LOSS_LIMIT'\nORDER_TYPE_TAKE_PROFIT = 'TAKE_PROFIT'\nORDER_TYPE_TAKE_PROFIT_LIMIT = 'TAKE_PROFIT_LIMIT'\nORDER_TYPE_LIMIT_MAKER = 'LIMIT_MAKER'\n\nTIME_IN_FORCE_GTC = 'GTC'\nTIME_IN_FORCE_IOC = 'IOC'\nTIME_IN_FORCE_FOK = 'FOK'\n\nORDER_RESP_TYPE_ACK = 'ACK'\nORDER_RESP_TYPE_RESULT = 'RESULT'\nORDER_RESP_TYPE_FULL = 'FULL'\n\n# For accessing the data returned by Client.aggregate_trades().\nAGG_ID             = 'a'\nAGG_PRICE          = 'p'\nAGG_QUANTITY       = 'q'\nAGG_FIRST_TRADE_ID = 'f'\nAGG_LAST_TRADE_ID  = 'l'\nAGG_TIME           = 'T'\nAGG_BUYER_MAKES    = 'm'\nAGG_BEST_MATCH     = 'M'\n```\n\n----------------------------------------\n\nTITLE: Handling WebSocket Error Messages in Python\nDESCRIPTION: Shows how to check for and handle error messages from the WebSocket connection, such as when maximum reconnection attempts have been reached.\nSOURCE: https://github.com/binance-exchange/python-binance/blob/master/docs/websockets.rst#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n{\n    'e': 'error',\n    'm': 'Max reconnect retries reached'\n}\n\n# check for it like so\ndef process_message(msg):\n    if msg['e'] == 'error':\n        # close and restart the socket\n    else:\n        # process message normally\n```\n\n----------------------------------------\n\nTITLE: Handling BinanceAPIException in Python\nDESCRIPTION: Example showing how to catch and handle a BinanceAPIException when making API calls. The exception provides access to status_code, response object, Binance error code, error message, and request object if available.\nSOURCE: https://github.com/binance-exchange/python-binance/blob/master/docs/exceptions.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ntry:\n    client.get_all_orders()\nexcept BinanceAPIException as e:\n    print e.status_code\n    print e.message\n```\n\n----------------------------------------\n\nTITLE: Fetching Deposit History from Binance API\nDESCRIPTION: Shows how to retrieve deposit history from Binance, with options to fetch all deposits or filter by specific asset.\nSOURCE: https://github.com/binance-exchange/python-binance/blob/master/docs/withdraw.rst#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndeposits = client.get_deposit_history()\nbtc_deposits = client.get_deposit_history(asset='BTC')\n```\n\n----------------------------------------\n\nTITLE: Installing Python Binance Package\nDESCRIPTION: Command to install the python-binance package using pip package manager.\nSOURCE: https://github.com/binance-exchange/python-binance/blob/master/PYPIREADME.rst#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install python-binance\n```\n\n----------------------------------------\n\nTITLE: Getting Historical Trades in Python using Binance API\nDESCRIPTION: Retrieves historical trade data for a specific trading symbol.\nSOURCE: https://github.com/binance-exchange/python-binance/blob/master/docs/market_data.rst#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ntrades = client.get_historical_trades(symbol='BNBBTC')\n```\n\n----------------------------------------\n\nTITLE: Getting Asset Balance using Binance API in Python\nDESCRIPTION: This snippet shows how to retrieve the balance of a specific asset using the Binance API client in Python.\nSOURCE: https://github.com/binance-exchange/python-binance/blob/master/docs/account.rst#2025-04-23_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nbalance = client.get_asset_balance(asset='BTC')\n```\n\n----------------------------------------\n\nTITLE: Getting Account Status using Binance API in Python\nDESCRIPTION: This code snippet demonstrates how to retrieve the account status using the Binance API client in Python.\nSOURCE: https://github.com/binance-exchange/python-binance/blob/master/docs/account.rst#2025-04-23_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nstatus = client.get_account_status()\n```\n\n----------------------------------------\n\nTITLE: Getting All Open Orders using Binance API in Python\nDESCRIPTION: This code snippet demonstrates how to retrieve all open orders for a specific symbol using the Binance API client in Python.\nSOURCE: https://github.com/binance-exchange/python-binance/blob/master/docs/account.rst#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\norders = client.get_open_orders(symbol='BNBBTC')\n```\n\n----------------------------------------\n\nTITLE: Closing All WebSockets and the Socket Manager\nDESCRIPTION: Demonstrates how to close all active socket connections and shutdown the socket manager. After closing, the manager would need to be restarted to create new connections.\nSOURCE: https://github.com/binance-exchange/python-binance/blob/master/docs/websockets.rst#2025-04-23_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nbm.close()\n```\n\n----------------------------------------\n\nTITLE: Retrieving Withdrawal History from Binance API\nDESCRIPTION: Demonstrates how to fetch withdrawal history from Binance, with options to get all withdrawals or filter by specific asset.\nSOURCE: https://github.com/binance-exchange/python-binance/blob/master/docs/withdraw.rst#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nwithdraws = client.get_withdraw_history()\nbtc_withdraws = client.get_withdraw_history(asset='BTC')\n```\n\n----------------------------------------\n\nTITLE: Retrieving Current Depth Cache Data\nDESCRIPTION: Shows how to manually retrieve the current depth cache data from the DepthCacheManager instance.\nSOURCE: https://github.com/binance-exchange/python-binance/blob/master/docs/depth_cache.rst#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndepth_cache = dcm.get_depth_cache()\nif depth_cache is not None:\n    print(\"symbol {}\".format(depth_cache.symbol))\n    print(\"top 5 bids\")\n    print(depth_cache.get_bids()[:5])\n    print(\"top 5 asks\")\n    print(depth_cache.get_asks()[:5])\nelse:\n    # depth cache had an error and needs to be restarted\n```\n\n----------------------------------------\n\nTITLE: Getting Trade History using Binance API in Python\nDESCRIPTION: This snippet shows how to retrieve the trade history for a specific symbol using the Binance API client in Python.\nSOURCE: https://github.com/binance-exchange/python-binance/blob/master/docs/account.rst#2025-04-23_snippet_13\n\nLANGUAGE: python\nCODE:\n```\ntrades = client.get_my_trades(symbol='BNBBTC')\n```\n\n----------------------------------------\n\nTITLE: Fetching Withdrawal Fee from Binance API\nDESCRIPTION: Demonstrates how to get the withdrawal fee for a specific cryptocurrency asset.\nSOURCE: https://github.com/binance-exchange/python-binance/blob/master/docs/withdraw.rst#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\naddress = client.get_withdraw_fee(asset='BTC')\n```\n\n----------------------------------------\n\nTITLE: Getting Deposit Address from Binance API\nDESCRIPTION: Shows how to retrieve the deposit address for a specific cryptocurrency asset.\nSOURCE: https://github.com/binance-exchange/python-binance/blob/master/docs/withdraw.rst#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\naddress = client.get_deposit_address(asset='BTC')\n```\n\n----------------------------------------\n\nTITLE: Setting Up Mini Ticker Socket in Python\nDESCRIPTION: Shows how to create a socket connection for mini ticker data with an optional update interval parameter. Mini tickers provide condensed statistics compared to full tickers.\nSOURCE: https://github.com/binance-exchange/python-binance/blob/master/docs/websockets.rst#2025-04-23_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n# by default updates every second\nconn_key = bm.start_miniticker_socket(process_message)\n\n# this socket can take an update interval parameter\n# set as 5000 to receive updates every 5 seconds\nconn_key = bm.start_miniticker_socket(process_message, 5000)\n```\n\n----------------------------------------\n\nTITLE: Fetching Klines/Candlesticks in Python using Binance API\nDESCRIPTION: Retrieves candlestick/kline data for a specific symbol and interval.\nSOURCE: https://github.com/binance-exchange/python-binance/blob/master/docs/market_data.rst#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ncandles = client.get_klines(symbol='BNBBTC', interval=Client.KLINE_INTERVAL_30MINUTE)\n```\n\n----------------------------------------\n\nTITLE: Fetching Aggregate Trades in Python using Binance API\nDESCRIPTION: Gets aggregate trade data for a specific trading symbol.\nSOURCE: https://github.com/binance-exchange/python-binance/blob/master/docs/market_data.rst#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ntrades = client.get_aggregate_trades(symbol='BNBBTC')\n```\n\n----------------------------------------\n\nTITLE: Retrieving Binance Exchange Info in Python\nDESCRIPTION: Gets comprehensive exchange information including trading rules and symbol information\nSOURCE: https://github.com/binance-exchange/python-binance/blob/master/docs/general.rst#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ninfo = client.get_exchange_info()\n```\n\n----------------------------------------\n\nTITLE: Configuring Requests Settings for Binance Client in Python\nDESCRIPTION: This example shows how to set custom requests parameters when creating the Binance Client, such as disabling SSL verification and setting a timeout.\nSOURCE: https://github.com/binance-exchange/python-binance/blob/master/docs/overview.rst#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclient = Client(\"api-key\", \"api-secret\", {\"verify\": False, \"timeout\": 20})\n```\n\n----------------------------------------\n\nTITLE: Setting Up Depth Socket for Binance in Python\nDESCRIPTION: Shows how to create a depth socket connection to receive order book updates. Includes options for receiving either a diff response (default) or a partial book with specified depth.\nSOURCE: https://github.com/binance-exchange/python-binance/blob/master/docs/websockets.rst#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# depth diff response\ndiff_key = bm.start_depth_socket('BNBBTC', process_message)\n\n# partial book response\npartial_key = bm.start_depth_socket('BNBBTC', process_message, depth=BinanceSocketManager.WEBSOCKET_DEPTH_5)\n```\n\n----------------------------------------\n\nTITLE: Python Package Dependencies for Binance Exchange API\nDESCRIPTION: Specifies required Python packages and their exact versions for development and testing. Includes testing frameworks (pytest), code coverage tools (coverage), code quality checkers (flake8), and other essential dependencies.\nSOURCE: https://github.com/binance-exchange/python-binance/blob/master/test-requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\ncoverage==4.4.1\nflake8==3.4.1\npytest==3.2.3\npytest-cov==2.5.1\npytest-pep8==1.0.6\npython-coveralls==2.9.1\nrequests-mock==1.3.0\ntox==2.7.0\nsetuptools==36.6.0\n```\n\n----------------------------------------\n\nTITLE: Pinging Binance Server in Python\nDESCRIPTION: Simple endpoint to test connectivity to the Binance server\nSOURCE: https://github.com/binance-exchange/python-binance/blob/master/docs/general.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclient.ping()\n```\n\n----------------------------------------\n\nTITLE: Configuring Proxy Settings for Binance Client in Python\nDESCRIPTION: This example shows how to set proxy settings for the Binance Client, either during client initialization or for individual API calls.\nSOURCE: https://github.com/binance-exchange/python-binance/blob/master/docs/overview.rst#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nproxies = {\n    'http': 'http://10.10.1.10:3128',\n    'https': 'http://10.10.1.10:1080'\n}\n\n# in the Client instantiation\nclient = Client(\"api-key\", \"api-secret\", {'proxies': proxies})\n\n# or on an individual call\nclient.get_all_orders(symbol='BNBBTC', requests_params={'proxies': proxies})\n```\n\n----------------------------------------\n\nTITLE: Checking Binance System Status in Python\nDESCRIPTION: Fetches the current system status of Binance platform. Returns a dictionary with status code (0 for normal, 1 for maintenance) and status message\nSOURCE: https://github.com/binance-exchange/python-binance/blob/master/docs/general.rst#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nstatus = client.get_system_status()\n```\n\nLANGUAGE: python\nCODE:\n```\n{\n    \"status\": 0,        # 0: normal，1：system maintenance\n    \"msg\": \"normal\"     # normal or System maintenance.\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Proxy Environment Variables for Windows\nDESCRIPTION: These commands set environment variables for HTTP and HTTPS proxies in a Windows environment.\nSOURCE: https://github.com/binance-exchange/python-binance/blob/master/docs/overview.rst#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nC:\\>set HTTP_PROXY=http://10.10.1.10:3128\nC:\\>set HTTPS_PROXY=http://10.10.1.10:1080\n```\n\n----------------------------------------\n\nTITLE: Retrieving Recent Trades in Python using Binance API\nDESCRIPTION: Fetches recent trades for a specific trading symbol.\nSOURCE: https://github.com/binance-exchange/python-binance/blob/master/docs/market_data.rst#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ntrades = client.get_recent_trades(symbol='BNBBTC')\n```\n\n----------------------------------------\n\nTITLE: Setting Up Symbol Ticker Socket in Python\nDESCRIPTION: Shows how to create a socket connection to receive 24-hour ticker statistics for a specific trading pair on Binance.\nSOURCE: https://github.com/binance-exchange/python-binance/blob/master/docs/websockets.rst#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nconn_key = bm.start_symbol_ticker_socket('BNBBTC', process_message)\n```\n\n----------------------------------------\n\nTITLE: Initializing Aggregated Trade Socket in Python\nDESCRIPTION: Shows how to create a socket connection to receive aggregate trade data for a specific trading pair on Binance.\nSOURCE: https://github.com/binance-exchange/python-binance/blob/master/docs/websockets.rst#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nconn_key = bm.start_aggtrade_socket('BNBBTC', process_message)\n```\n\n----------------------------------------\n\nTITLE: Checking Time Difference with Binance Server in Python\nDESCRIPTION: This code snippet demonstrates how to check the difference between local time and Binance server time. It's useful for troubleshooting timestamp validation errors.\nSOURCE: https://github.com/binance-exchange/python-binance/blob/master/docs/faqs.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# Sample code to check time difference\\n# Refer to: https://github.com/sammchardy/python-binance/issues/2#issuecomment-324878152\n```\n\n----------------------------------------\n\nTITLE: Creating Kline Socket with Custom Interval in Python\nDESCRIPTION: Demonstrates how to create a kline (candlestick) socket connection with a custom time interval. The example uses a 30-minute interval defined in the binance.enums module.\nSOURCE: https://github.com/binance-exchange/python-binance/blob/master/docs/websockets.rst#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom binance.enums import *\nconn_key = bm.start_kline_socket('BNBBTC', process_message, interval=KLINE_INTERVAL_30MINUTE)\n```\n\n----------------------------------------\n\nTITLE: Getting 24hr Ticker in Python using Binance API\nDESCRIPTION: Retrieves 24-hour price statistics for all symbols.\nSOURCE: https://github.com/binance-exchange/python-binance/blob/master/docs/market_data.rst#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ntickers = client.get_ticker()\n```\n\n----------------------------------------\n\nTITLE: Fetching All Orders for a Symbol using Binance API in Python\nDESCRIPTION: This code snippet shows how to retrieve all orders for a specific symbol using the Binance API client in Python. It limits the result to 10 orders.\nSOURCE: https://github.com/binance-exchange/python-binance/blob/master/docs/account.rst#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\norders = client.get_all_orders(symbol='BNBBTC', limit=10)\n```\n\n----------------------------------------\n\nTITLE: Getting Orderbook Tickers in Python using Binance API\nDESCRIPTION: Retrieves the best bid/ask prices for all symbols on the exchange.\nSOURCE: https://github.com/binance-exchange/python-binance/blob/master/docs/market_data.rst#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\ntickers = client.get_orderbook_tickers()\n```\n\n----------------------------------------\n\nTITLE: Creating a Test Order using Binance API in Python\nDESCRIPTION: This snippet shows how to create and validate a new order without sending it to the exchange using the Binance API client in Python.\nSOURCE: https://github.com/binance-exchange/python-binance/blob/master/docs/account.rst#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom binance.enums import *\norder = client.create_test_order(\n    symbol='BNBBTC',\n    side=SIDE_BUY,\n    type=ORDER_TYPE_LIMIT,\n    timeInForce=TIME_IN_FORCE_GTC,\n    quantity=100,\n    price='0.00001')\n```\n\n----------------------------------------\n\nTITLE: Getting Specific Symbol Info from Binance in Python\nDESCRIPTION: Retrieves detailed information for a specific trading pair/symbol from the exchange\nSOURCE: https://github.com/binance-exchange/python-binance/blob/master/docs/general.rst#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ninfo = client.get_symbol_info('BNBBTC')\n```\n\n----------------------------------------\n\nTITLE: Installing python-binance using pip\nDESCRIPTION: This command installs the python-binance library using pip, the Python package installer.\nSOURCE: https://github.com/binance-exchange/python-binance/blob/master/docs/overview.rst#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install python-binance\n```\n\n----------------------------------------\n\nTITLE: Getting Binance Server Time in Python\nDESCRIPTION: Retrieves the current server time from Binance API\nSOURCE: https://github.com/binance-exchange/python-binance/blob/master/docs/general.rst#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ntime_res = client.get_server_time()\n```\n\n----------------------------------------\n\nTITLE: Initializing DepthCacheManager in Python\nDESCRIPTION: Shows how to create a DepthCacheManager instance with basic configuration and callback function.\nSOURCE: https://github.com/binance-exchange/python-binance/blob/master/docs/depth_cache.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom binance.depthcache import DepthCacheManager\ndcm = DepthCacheManager(client, 'BNBBTC', callback=process_depth)\n```\n\n----------------------------------------\n\nTITLE: Implementing Depth Cache Callback Function\nDESCRIPTION: Example of a callback function that processes depth cache updates, showing how to access bids and asks data.\nSOURCE: https://github.com/binance-exchange/python-binance/blob/master/docs/depth_cache.rst#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef process_depth(depth_cache):\n    if depth_cache is not None:\n        print(\"symbol {}\".format(depth_cache.symbol))\n        print(\"top 5 bids\")\n        print(depth_cache.get_bids()[:5])\n        print(\"top 5 asks\")\n        print(depth_cache.get_asks()[:5])\n    else:\n        # depth cache had an error and needs to be restarted\n```\n\n----------------------------------------\n\nTITLE: Configuring DepthCacheManager Refresh Intervals\nDESCRIPTION: Demonstrates how to set custom refresh intervals for the depth cache or disable refreshing entirely.\nSOURCE: https://github.com/binance-exchange/python-binance/blob/master/docs/depth_cache.rst#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# 1 hour interval refresh\ndcm = DepthCacheManager(client, 'BNBBTC', callback=process_depth, refresh_interval=60*60)\n\n# disable refreshing\ndcm = DepthCacheManager(client, 'BNBBTC', callback=process_depth, refresh_interval=0)\n```\n\n----------------------------------------\n\nTITLE: Overriding Default Requests Settings for Specific API Calls in Python\nDESCRIPTION: This code demonstrates how to override default request settings or specify new ones for a specific API call using the requests_params parameter.\nSOURCE: https://github.com/binance-exchange/python-binance/blob/master/docs/overview.rst#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# this would result in verify: False and timeout: 5 for the get_all_orders call\nclient = Client(\"api-key\", \"api-secret\", {\"verify\": False, \"timeout\": 20})\nclient.get_all_orders(symbol='BNBBTC', requests_params={'timeout': 5})\n```\n\n----------------------------------------\n\nTITLE: Defining Binance WebSocket Depth Constants in Python\nDESCRIPTION: This snippet defines constants for WebSocket depth levels used in the Binance Python client. These constants are specific to the BinanceSocketManager and are used to specify the depth of order book data when subscribing to WebSocket streams.\nSOURCE: https://github.com/binance-exchange/python-binance/blob/master/docs/constants.rst#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nWEBSOCKET_DEPTH_5 = '5'\nWEBSOCKET_DEPTH_10 = '10'\nWEBSOCKET_DEPTH_20 = '20'\n```\n\n----------------------------------------\n\nTITLE: Closing a Specific WebSocket Connection in Python\nDESCRIPTION: Shows how to close an individual socket connection using the connection key returned when the socket was created.\nSOURCE: https://github.com/binance-exchange/python-binance/blob/master/docs/websockets.rst#2025-04-23_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nbm.stop_socket(conn_key)\n```\n\n----------------------------------------\n\nTITLE: Stopping the Twisted Reactor Loop to Exit Program\nDESCRIPTION: Shows how to properly exit a program that uses WebSockets by stopping the Twisted reactor loop, which continues running even after sockets are closed.\nSOURCE: https://github.com/binance-exchange/python-binance/blob/master/docs/websockets.rst#2025-04-23_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nfrom twisted.internet import reactor\n\n# program code here\n\n# when you need to exit\nreactor.stop()\n```\n\n----------------------------------------\n\nTITLE: Documenting Helper Functions in Python Binance API\nDESCRIPTION: RestructuredText documentation directive that exposes the date_to_milliseconds and interval_to_milliseconds member functions from the binance.helpers class. These functions help convert date strings and time intervals to milliseconds for use with the Binance API.\nSOURCE: https://github.com/binance-exchange/python-binance/blob/master/docs/helpers.rst#2025-04-23_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. autoclass:: binance.helpers\n    :members: date_to_milliseconds, interval_to_milliseconds\n    :noindex:\n```\n\n----------------------------------------\n\nTITLE: Defining Python Package Dependencies for Binance API Client\nDESCRIPTION: This requirements.txt file lists all the Python packages needed to run the python-binance API client. It includes specific version requirements for networking libraries like requests and Twisted, cryptography modules, and utility packages like dateparser.\nSOURCE: https://github.com/binance-exchange/python-binance/blob/master/requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nautobahn==17.9.3\ncertifi==2017.11.5\nchardet==3.0.4\ncryptography==2.1.4\ndateparser==0.6.0\npyOpenSSL==17.5.0\nrequests==2.18.4\nservice-identity==17.0.0\nTwisted==17.9.0\n```\n\n----------------------------------------\n\nTITLE: Closing DepthCacheManager Connection\nDESCRIPTION: Demonstrates how to properly close the DepthCacheManager connection when it's no longer needed.\nSOURCE: https://github.com/binance-exchange/python-binance/blob/master/docs/depth_cache.rst#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndcm.close()\n```\n\n----------------------------------------\n\nTITLE: Formatting Amount with Precision in Python\nDESCRIPTION: This snippet demonstrates how to format a floating-point amount with a specified precision using Python's string formatting.\nSOURCE: https://github.com/binance-exchange/python-binance/blob/master/docs/account.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\namount = 0.000234234\nprecision = 5\namt_str = \"{:0.0{}f}\".format(amount, precision)\n```\n\n----------------------------------------\n\nTITLE: Setting Proxy Environment Variables for Linux\nDESCRIPTION: These commands set environment variables for HTTP and HTTPS proxies in a Linux environment.\nSOURCE: https://github.com/binance-exchange/python-binance/blob/master/docs/overview.rst#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ export HTTP_PROXY=\"http://10.10.1.10:3128\"\n$ export HTTPS_PROXY=\"http://10.10.1.10:1080\"\n```\n\n----------------------------------------\n\nTITLE: Module Documentation Structure in RST\nDESCRIPTION: ReStructuredText directives for auto-documenting Python modules in the Binance API library. Shows the documentation structure for five core modules with their members, undocumented members, and inheritance relationships.\nSOURCE: https://github.com/binance-exchange/python-binance/blob/master/docs/binance.rst#2025-04-23_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. automodule:: binance.client\n    :members:\n    :undoc-members:\n    :show-inheritance:\n\n.. automodule:: binance.depthcache\n    :members:\n    :undoc-members:\n    :show-inheritance:\n\n.. automodule:: binance.exceptions\n    :members:\n    :undoc-members:\n    :show-inheritance:\n\n.. automodule:: binance.helpers\n    :members:\n    :undoc-members:\n    :show-inheritance:\n\n.. automodule:: binance.websockets\n    :members:\n    :undoc-members:\n    :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Displaying Discontinuation Notice in Markdown\nDESCRIPTION: This markdown snippet informs users about the planned discontinuation of the python-binance library and provides a link to an officially supported alternative.\nSOURCE: https://github.com/binance-exchange/python-binance/blob/master/README.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Discontinue this Library\n\nThe support to this library is scheduled to be discontinued, and it will be offline within the next six months.\n\nPlease consider this offically supported Python library available at https://github.com/binance/binance-connector-python\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx Documentation Structure with RST\nDESCRIPTION: Sets up the main documentation structure using reStructuredText (RST) format, defining the table of contents tree and including external README file. The configuration includes document hierarchy and navigation elements.\nSOURCE: https://github.com/binance-exchange/python-binance/blob/master/docs/index.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. python-binance documentation master file, created by\n   sphinx-quickstart on Thu Sep 21 20:24:54 2017.\n\n.. include:: ../README.rst\n\nContents\n========\n\n.. toctree::\n   :maxdepth: 2\n\n   overview\n   constants\n   general\n   market_data\n   account\n   websockets\n   depth_cache\n   withdraw\n   helpers\n   exceptions\n   faqs\n   changelog\n\n   binance\n\nIndex\n==================\n\n* :ref:`genindex`\n```\n\n----------------------------------------\n\nTITLE: Fetching Current Products from Binance in Python (Deprecated)\nDESCRIPTION: Deprecated endpoint for getting current products. Users should use get_exchange_info() instead\nSOURCE: https://github.com/binance-exchange/python-binance/blob/master/docs/general.rst#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nproducts = client.get_products()\n```"
  }
]