[
  {
    "owner": "mckinsey",
    "repo": "vizro",
    "content": "TITLE: Generate Vizro Dashboard with Data and Prompt\nDESCRIPTION: This comprehensive code snippet demonstrates the complete process of generating a Vizro dashboard using Vizro-AI. It includes importing necessary libraries, loading dataframes (election and stock data), defining a detailed user prompt specifying dashboard requirements, initializing VizroAI, generating the dashboard using the prompt and data, and finally building and running the generated dashboard. The user prompt defines the dashboard's structure, including page layouts, chart types, filters, and card content, making it a complete, self-contained example.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-ai/docs/pages/user-guides/create-complex-dashboard.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport vizro_ai\nfrom vizro_ai import VizroAI\nimport plotly.express as px\n\nfrom dotenv import load_dotenv\nload_dotenv()\n\ndf1 = px.data.election()\ndf2 = px.data.stocks(datetimes=True)\n\nuser_question = \"\"\"\nCreate a 2-page dashabord.\n\n<Page 1>\nVisualize the election result.\n\nNOTE:\n1. use consistent and default color scheme.\n   1. make axis label and chart title simple and readable.\n\nI need 3 pie charts, 3 bar charts, 1 table, and 1 radio button as filter.\n\npie chart 1: shows number of votes Coderre received, compared to total votes.\npie chart 2: shows number of votes Bergeron received, compared to total votes.\npie chart 3: shows number of votes Joly received, compared to total votes.\n\nbar chart 1: shows number of districts Coderre won. Put `result` on y-axis, put \\\"count of districts\\\" on x-axis.\nbar chart 2: shows number of districts Bergeron won. Put `result` on y-axis, put \\\"count of districts\\\" on x-axis.\nbar chart 3: shows number of districts Joly won. Put `result` on y-axis, put \\\"count of districts\\\" on x-axis.\n\nuse table to show the election data.\n\nLayout of page 1:\nImagine the whole page is divided by a (3 by 3) grid, with 3 rows and 3 columns.\nRow 1 - pie chart 1 takes column 1; pie chart 2 takes column 2; pie chart 3 takes column 3.\nRow 2 - bar chart 1 takes column 1; bar chart 2 takes column 2; bar chart 3 takes column 3.\nRow 3 - the table span all three columns.\n\nAdd a filter to filter all pie charts by district, using radio button as selector.\n\n\n<Page 2>\nVisualize the tech company stock data.\nI need 1 line chart, 6 cards.\n\nline chart: shows the stock price history of all companies. Put data on x-axis, company names as facet_row. make the y-axis label simple and readable.\n\nFor cards, render the exact text as requested.\nCard 1 has text `> Dow Jones \\n\\n ## **39,737.26**\\n`\nCard 2 has text `> S&P 500 \\n\\n ## **4,509.61**\\n`\nCard 3 has text `> NASDAQ Composite \\n\\n ## **14,141.48**\\n`\nCard 4 has text `> FTSE 100 \\n\\n ## **7,592.66**\\n`\nCard 5 has text `> DAX \\n\\n ## **15,948.85**\\n`\nCard 6 has text `> Nikkei 225 \\n\\n ## **32,210.78**\\n`\n\nPage Layout:\nIn a grid of 7 rows and 6 columns:\ncolumn 1 to column 5 - the line chart spans 5 columns (all 7 rows) from the left.\ncolumn 6 - card 1 takes row 1; card 2 takes row 2; card 3 takes row 3; ... card 6 takes row 6; row 7 is empty.\n\"\"\"\n\nvizro_ai = VizroAI(model=\"gpt-4o\")\ndashboard = vizro_ai.dashboard([df1, df2], user_question)\n\nVizro().build(dashboard).run()\n\n```\n\n----------------------------------------\n\nTITLE: Call Vizro-AI to Generate Dashboard (Python)\nDESCRIPTION: This Python code calls the `dashboard()` method of the `vizro_ai` instance to generate a Vizro dashboard based on the provided data (`df`) and the user prompt (`user_question`). The generated dashboard object is assigned to the `dashboard` variable.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-ai/docs/pages/tutorials/quickstart-dashboard.md#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndashboard = vizro_ai.dashboard([df], user_question)\n```\n\n----------------------------------------\n\nTITLE: Defining LangChain tools for dashboard generation\nDESCRIPTION: This snippet defines a LangChain tool `get_dashboard_code` that wraps Vizro-AI's dashboard generation capability. It accepts a list of Pandas DataFrames and a question string. Vizro-AI then generates dashboard code based on the question and returns it. The DataFrames are injected at runtime.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-ai/docs/pages/user-guides/vizro-ai-langchain-guide.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@tool(parse_docstring=True)\ndef get_dashboard_code(dfs: Annotated[Any, InjectedToolArg], question: str) -> str:\n    \"\"\"Generate the dashboard code.\n\n    Args:\n        dfs: Pandas DataFrames\n        question: The dashboard question\n\n    Returns:\n        Generated dashboard code\n    \"\"\"\n    vizro_ai = VizroAI(model=llm)\n    dashboard_elements = vizro_ai.dashboard(\n        dfs,\n        user_input=question,\n        return_elements=True,\n    )\n    return dashboard_elements.code\n```\n\n----------------------------------------\n\nTITLE: Generating Multi-Page Dashboard Python\nDESCRIPTION: Generates a Vizro dashboard from the provided datasets (`df1`, `df2`, `df3`) and the multi-page natural language prompt (`user_question_3_data`). `Vizro._reset()` is called before generating the dashboard. The `return_elements=True` argument is used to return the Vizro elements.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-ai/examples/example_dashboard.ipynb#_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nVizro._reset()\nresult = vizro_ai.dashboard([df1, df2, df3], user_question_3_data, return_elements=True)\n```\n\n----------------------------------------\n\nTITLE: Integrating Custom Chart into Vizro Dashboard\nDESCRIPTION: This code demonstrates how to integrate a custom chart function into a Vizro dashboard. It defines a `custom_chart` function, creates a Vizro `Page` with the custom chart and a box plot, and then builds and runs the Vizro dashboard. The custom chart, generated by `plotly.express`, is integrated as a `vm.Graph` component within the dashboard.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-ai/docs/pages/user-guides/add-generated-chart-usecase.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom vizro import Vizro\nimport vizro.models as vm\nfrom vizro.models.types import capture\nimport pandas as pd\nimport vizro.plotly.express as px\n\n\n@capture(\"graph\")\ndef custom_chart(data_frame):\n    fig = px.scatter(\n        data_frame,\n        x=\"gdpPercap\",\n        y=\"lifeExp\",\n        size=\"pop\",\n        color=\"continent\",\n        animation_frame=\"year\",\n        hover_name=\"country\",\n        size_max=60,\n    )\n    fig.update_layout(\n        legend=dict(orientation=\"h\", yanchor=\"bottom\", y=1.02, xanchor=\"right\", x=1)\n    )\n    return fig\n\n\ndf = px.data.gapminder()\n\npage = vm.Page(\n    title = 'Demographics',\n    components = [\n        vm.Graph(figure=custom_chart(df)),\n        vm.Graph(\n            figure=px.box(\n                df, x='continent', y='lifeExp', color='continent', title='Life Expectancy per Continent'\n            )\n        )\n    ],\n    controls = [\n        vm.Filter(column='country'),\n        vm.Filter(column='continent')])\n\nVizro().build(vm.Dashboard(pages=[page])).run(port=8090)\n```\n\n----------------------------------------\n\nTITLE: Creating Dashboard with Python Dictionary in Vizro\nDESCRIPTION: This code snippet demonstrates how to create a Vizro dashboard using a Python dictionary. It defines the page configuration as a dictionary, including the components (graphs) and controls (filters). It then creates the dashboard dictionary with the page and builds and runs the dashboard using Vizro().build(dashboard).run(). It also uses the iris dataset from plotly.express for the example.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/dashboard.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport vizro.plotly.express as px\nfrom vizro import Vizro\n\ndf = px.data.iris()\n\npage = {\n    \"title\": \"My first dashboard\",\n    \"components\": [\n        {\n            \"type\": \"graph\",\n            \"figure\": px.scatter(\n                df,\n                x=\"sepal_length\",\n                y=\"petal_width\",\n                color=\"species\",\n            ),\n        },\n        {\n            \"type\": \"graph\",\n            \"figure\": px.histogram(\n                df,\n                x=\"sepal_width\",\n                color=\"species\"\n            ),\n        },\n    ],\n    \"controls\": [\n        {\n            \"type\": \"filter\",\n            \"column\": \"species\",\n        },\n    ],\n}\n\ndashboard = {\"pages\": [page]}\nVizro().build(dashboard).run()\n```\n\n----------------------------------------\n\nTITLE: Create a Multi-Page Vizro Dashboard with Navigation\nDESCRIPTION: This comprehensive example demonstrates how to create a multi-page interactive dashboard using Vizro. It includes data loading, custom chart creation, page definitions with layouts, components, and controls, and configuration of a navigation bar with icons for easy page switching. It leverages `vizro.models`, `vizro.plotly.express`, and other Vizro functionalities to build a fully functional dashboard.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/tutorials/explore-components.md#_snippet_23\n\nLANGUAGE: python\nCODE:\n```\nimport vizro.models as vm\nimport vizro.plotly.express as px\nfrom vizro import Vizro\nfrom vizro.tables import dash_ag_grid\nfrom vizro.models.types import capture\nfrom vizro.figures import kpi_card\n\ntips = px.data.tips()\n\n\n@capture(\"graph\")\ndef bar_mean(data_frame, x, y):\n    df_agg = data_frame.groupby(x).agg({y: \"mean\"}).reset_index()\n    fig = px.bar(df_agg, x=x, y=y, labels={\"tip\": \"Average Tip ($)\"})\n    fig.update_traces(width=0.6)\n    return fig\n\n\nfirst_page = vm.Page(\n    title=\"Data\",\n    components=[\n        vm.AgGrid(\n            figure=dash_ag_grid(tips),\n            footer=\"\"\"**Data Source:** Bryant, P. G. and Smith, M (1995)\n            Practical Data Analysis: Case Studies in Business Statistics.\n            Homewood, IL: Richard D. Irwin Publishing.\"\"\",\n        ),\n    ],\n)\n\nsecond_page = vm.Page(\n    title=\"Summary\",\n    layout=vm.Grid(grid=[[0, 1, -1, -1], [2, 2, 2, 2], [2, 2, 2, 2], [2, 2, 2, 2]]),\n    components=[\n        vm.Figure(\n            figure=kpi_card(\n                data_frame=tips,\n                value_column=\"total_bill\",\n                agg_func=\"mean\",\n                value_format=\"${value:.2f}\",\n                title=\"Average Bill\",\n            )\n        ),\n        vm.Figure(\n            figure=kpi_card(\n                data_frame=tips,\n                value_column=\"tip\",\n                agg_func=\"mean\",\n                value_format=\"${value:.2f}\",\n                title=\"Average Tips\"\n            )\n        ),\n        vm.Tabs(\n            tabs=[\n                vm.Container(\n                    title=\"Total Bill ($)\",\n                    components=[\n                        vm.Graph(figure=px.histogram(tips, x=\"total_bill\")),\n                    ],\n                ),\n                vm.Container(\n                    title=\"Total Tips ($)\",\n                    components=[\n                        vm.Graph(figure=px.histogram(tips, x=\"tip\")),\n                    ],\n                ),\n            ],\n        )\n    ],\n    controls=[vm.Filter(column=\"day\"), vm.Filter(column=\"time\", selector=vm.Checklist()), vm.Filter(column=\"size\")]\n)\n\nthird_page = vm.Page(\n    title=\"Analysis\",\n    layout=vm.Grid(grid=[[0, 1], [2, 2]]),\n    components=[\n        vm.Graph(\n            id=\"bar\",\n            title=\"Where do we get more tips?\",\n            figure=bar_mean(tips, y=\"tip\", x=\"day\"),\n        ),\n        vm.Graph(\n            id=\"violin\",\n            title=\"Is the average driven by a few outliers?\",\n            figure=px.violin(tips, y=\"tip\", x=\"day\", color=\"day\", box=True),\n        ),\n        vm.Graph(\n            id=\"heatmap\",\n            title=\"Which group size is more profitable?\",\n            figure=px.density_heatmap(tips, x=\"day\", y=\"size\", z=\"tip\", histfunc=\"avg\", text_auto=\"$.2f\"),\n        ),\n    ],\n    controls=[\n        vm.Parameter(\n            targets=[\"violin.x\", \"violin.color\", \"heatmap.x\", \"bar.x\"],\n            selector=vm.RadioItems(\n                options=[\"day\", \"time\", \"sex\", \"smoker\", \"size\"], value=\"day\", title=\"Change x-axis inside charts:\"\n            ),\n        ),\n    ],\n)\n\ndashboard = vm.Dashboard(\n    pages=[first_page, second_page, third_page],\n    title=\"Tips Analysis Dashboard\",\n    navigation=vm.Navigation(\n        nav_selector=vm.NavBar(\n            items=[\n                vm.NavLink(label=\"Data\", pages=[\"Data\"], icon=\"database\"),\n                vm.NavLink(label=\"Charts\", pages=[\"Summary\", \"Analysis\"], icon=\"bar_chart\"),\n            ]\n        )\n    ),\n)\nVizro().build(dashboard).run()\n```\n\n----------------------------------------\n\nTITLE: Running Vizro-AI Dashboard with Natural Language Prompt (Vizro, Python)\nDESCRIPTION: This code snippet demonstrates how to use VizroAI to generate a Vizro dashboard from a natural language prompt. It imports necessary libraries from `vizro`, `vizro.plotly.express`, and `vizro_ai`. It defines a Pandas DataFrame (`df`) from `px.data.tips()` and a natural language prompt (`user_question`) describing the desired dashboard layout. A VizroAI instance is created, and the `dashboard` method is called to generate the Vizro dashboard, which is then built and run using `Vizro().build(dashboard).run()`. The code requires the `vizro`, `vizro-ai`, and `plotly` libraries.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-ai/docs/pages/user-guides/run-vizro-ai-dashboard.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport vizro.plotly.express as px\nfrom vizro_ai import VizroAI\nfrom vizro import Vizro\n\ndf = px.data.tips()\nuser_question = \"\"\"\nCreate a one-page dashboard layout with the following components:\n\n1. Card:\n   - Position: Left of the page\n   - Size: Takes up 1/4 of the total page width\n   - Content: Display the text \\\"This is Tips dataset\\\"\n\n2. Table:\n   - Position: Right of the card\n   - Size: Takes up the remaining 3/4 of the page width\n   - Content: Display the Tips dataset\n\"\"\"\nvizro_ai = VizroAI(model=\"gpt-4o-mini\")\ndashboard = vizro_ai.dashboard([df], user_question)\nVizro().build(dashboard).run()\n```\n\n----------------------------------------\n\nTITLE: Run Vizro Dashboard in Python Script\nDESCRIPTION: This snippet demonstrates how to run a Vizro dashboard locally using a Python script. It creates a simple dashboard with a scatter plot and then runs it using the Vizro().build(dashboard).run() method. The script requires the vizro, vizro.plotly.express, and vizro.models packages to be installed.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/run-deploy.md#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom vizro import Vizro\nimport vizro.plotly.express as px\nimport vizro.models as vm\n\niris = px.data.iris()\n\npage = vm.Page(\n    title=\"My first page\",\n    components=[\n        vm.Graph(figure=px.scatter(iris, x=\"sepal_length\", y=\"petal_width\", color=\"species\")),\n    ],\n)\n\ndashboard = vm.Dashboard(pages=[page])\nVizro().build(dashboard).run()\n```\n\n----------------------------------------\n\nTITLE: Generate and Run Vizro Dashboard\nDESCRIPTION: This snippet uses the initialized VizroAI object and the defined user prompt to generate a Vizro dashboard from the cleaned data. It then builds and runs the dashboard using the Vizro framework, making it accessible on port 8006. Finally, it prints the generated code.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-ai/examples/goodreads_tutorial/goodreads.ipynb#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nresult = vizro_ai.dashboard([df_cleaned], user_question, return_elements=True)\nVizro().build(result.dashboard).run(port=8006)\nprint(result.code)\n```\n\n----------------------------------------\n\nTITLE: Building a Vizro Dashboard with Custom Bar Chart Integration\nDESCRIPTION: This code defines a complete Vizro dashboard that integrates the custom `bar_mean` function. It imports necessary modules from `vizro`, `plotly.express`, and `dash_ag_grid`. The dashboard consists of three pages: 'Data' displays a table, 'Summary' shows KPI cards and histograms, and 'Analysis' incorporates the custom bar chart and other Plotly charts. The dashboard allows users to interact with the charts using parameters and filters. The custom chart is rendered within a Graph component on the 'Analysis' page. The code depends on vizro and plotly.express packages.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/tutorials/explore-components.md#_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nimport vizro.models as vm\nimport vizro.plotly.express as px\nfrom vizro import Vizro\nfrom vizro.tables import dash_ag_grid\nfrom vizro.models.types import capture\nfrom vizro.figures import kpi_card\n\ntips = px.data.tips()\n\n\n@capture(\"graph\")\ndef bar_mean(data_frame, x, y):\n    df_agg = data_frame.groupby(x).agg({y: \"mean\"}).reset_index()\n    fig = px.bar(df_agg, x=x, y=y, labels={\"tip\": \"Average Tip ($)\"})\n    fig.update_traces(width=0.6)\n    return fig\n\n\nfirst_page = vm.Page(\n    title=\"Data\",\n    components=[\n        vm.AgGrid(\n            figure=dash_ag_grid(tips),\n            footer=\"\"\"**Data Source:** Bryant, P. G. and Smith, M (1995)\n            Practical Data Analysis: Case Studies in Business Statistics.\n            Homewood, IL: Richard D. Irwin Publishing.\"\"\",\n        ),\n    ],\n)\n\nsecond_page = vm.Page(\n    title=\"Summary\",\n    layout=vm.Grid(grid=[[0, 1, -1, -1], [2, 2, 2, 2], [2, 2, 2, 2], [2, 2, 2, 2]]),\n    components=[\n        vm.Figure(\n            figure=kpi_card(\n                data_frame=tips,\n                value_column=\"total_bill\",\n                agg_func=\"mean\",\n                value_format=\"${value:.2f}\",\n                title=\"Average Bill\",\n            )\n        ),\n        vm.Figure(\n            figure=kpi_card(\n                data_frame=tips,\n                value_column=\"tip\",\n                agg_func=\"mean\",\n                value_format=\"${value:.2f}\",\n                title=\"Average Tips\"\n            )\n        ),\n        vm.Tabs(\n            tabs=[\n                vm.Container(\n                    title=\"Total Bill ($)\",\n                    components=[\n                        vm.Graph(figure=px.histogram(tips, x=\"total_bill\")),\n                    ],\n                ),\n                vm.Container(\n                    title=\"Total Tips ($)\",\n                    components=[\n                        vm.Graph(figure=px.histogram(tips, x=\"tip\")),\n                    ],\n                ),\n            ],\n        )\n    ],\n    controls=[vm.Filter(column=\"day\"), vm.Filter(column=\"time\", selector=vm.Checklist()), vm.Filter(column=\"size\")]\n)\n\nthird_page = vm.Page(\n    title=\"Analysis\",\n    layout=vm.Grid(grid=[[0, 1], [2, 2]]),\n    components=[\n        vm.Graph(\n            id=\"bar\",\n            title=\"Where do we get more tips?\",\n            figure=bar_mean(tips, y=\"tip\", x=\"day\"),\n        ),\n        vm.Graph(\n            id=\"violin\",\n            title=\"Is the average driven by a few outliers?\",\n            figure=px.violin(tips, y=\"tip\", x=\"day\", color=\"day\", box=True),\n        ),\n        vm.Graph(\n            id=\"heatmap\",\n            title=\"Which group size is more profitable?\",\n            figure=px.density_heatmap(tips, x=\"day\", y=\"size\", z=\"tip\", histfunc=\"avg\", text_auto=\"$.2f\"),\n        ),\n    ],\n    controls=[\n        vm.Parameter(\n            targets=[\"violin.x\", \"violin.color\", \"heatmap.x\", \"bar.x\"],\n            selector=vm.RadioItems(\n                options=[\"day\", \"time\", \"sex\", \"smoker\", \"size\"], value=\"day\", title=\"Change x-axis inside charts:\"\n            ),\n        ),\n    ],\n)\n\ndashboard = vm.Dashboard(pages=[first_page, second_page, third_page])\nVizro().build(dashboard).run()\n```\n\n----------------------------------------\n\nTITLE: Building and Running Vizro Dashboard Python\nDESCRIPTION: Builds and runs the Vizro dashboard using the `Vizro` class.  First, a `Vizro` instance is created. Then the `build()` method is called on the `Vizro` instance, passing in the generated `dashboard` object. Finally, the `run()` method starts the Vizro application, making the dashboard accessible in a web browser.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-ai/examples/example_dashboard.ipynb#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nVizro().build(result.dashboard).run()\n```\n\n----------------------------------------\n\nTITLE: Complete Vizro Dashboard Code\nDESCRIPTION: This complete code defines a Vizro dashboard with multiple pages, charts, and controls for analyzing tips data. It utilizes various Vizro components such as AgGrid, Figures, Tabs, Filters, and Parameters, along with Plotly Express for creating visualizations.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/tutorials/explore-components.md#_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nimport vizro.models as vm\nimport vizro.plotly.express as px\nfrom vizro import Vizro\nfrom vizro.tables import dash_ag_grid\nfrom vizro.models.types import capture\nfrom vizro.figures import kpi_card\n\ntips = px.data.tips()\n\n\n@capture(\"graph\")\ndef bar_mean(data_frame, x, y):\n    df_agg = data_frame.groupby(x).agg({y: \"mean\"}).reset_index()\n    fig = px.bar(df_agg, x=x, y=y, labels={\"tip\": \"Average Tip ($)\"})\n    fig.update_traces(width=0.6)\n    return fig\n\n\nfirst_page = vm.Page(\n    title=\"Data\",\n    components=[\n        vm.AgGrid(\n            figure=dash_ag_grid(tips),\n            footer=\"\"\"**Data Source:** Bryant, P. G. and Smith, M (1995)\n            Practical Data Analysis: Case Studies in Business Statistics.\n            Homewood, IL: Richard D. Irwin Publishing.\"\"\",\n        ),\n    ],\n)\n\nsecond_page = vm.Page(\n    title=\"Summary\",\n    layout=vm.Grid(grid=[[0, 1, -1, -1], [2, 2, 2, 2], [2, 2, 2, 2], [2, 2, 2, 2]]),\n    components=[\n        vm.Figure(\n            figure=kpi_card(\n                data_frame=tips,\n                value_column=\"total_bill\",\n                agg_func=\"mean\",\n                value_format=\"${value:.2f}\",\n                title=\"Average Bill\",\n            )\n        ),\n        vm.Figure(\n            figure=kpi_card(\n                data_frame=tips,\n                value_column=\"tip\",\n                agg_func=\"mean\",\n                value_format=\"${value:.2f}\",\n                title=\"Average Tips\"\n            )\n        ),\n        vm.Tabs(\n            tabs=[\n                vm.Container(\n                    title=\"Total Bill ($)\",\n                    components=[\n                        vm.Graph(figure=px.histogram(tips, x=\"total_bill\")),\n                    ],\n                ),\n                vm.Container(\n                    title=\"Total Tips ($)\",\n                    components=[\n                        vm.Graph(figure=px.histogram(tips, x=\"tip\")),\n                    ],\n                ),\n            ],\n        )\n    ],\n    controls=[vm.Filter(column=\"day\"), vm.Filter(column=\"time\", selector=vm.Checklist()), vm.Filter(column=\"size\"]\n)\n\nthird_page = vm.Page(\n    title=\"Analysis\",\n    layout=vm.Grid(grid=[[0, 1], [2, 2]]),\n    components=[\n        vm.Graph(\n            id=\"bar\",\n            title=\"Where do we get more tips?\",\n            figure=bar_mean(tips, y=\"tip\", x=\"day\"),\n        ),\n        vm.Graph(\n            id=\"violin\",\n            title=\"Is the average driven by a few outliers?\",\n            figure=px.violin(tips, y=\"tip\", x=\"day\", color=\"day\", box=True),\n        ),\n        vm.Graph(\n            id=\"heatmap\",\n            title=\"Which group size is more profitable?\",\n            figure=px.density_heatmap(tips, x=\"day\", y=\"size\", z=\"tip\", histfunc=\"avg\", text_auto=\"$.2f\"),\n        ),\n    ],\n    controls=[\n        vm.Parameter(\n            targets=[\"violin.x\", \"violin.color\", \"heatmap.x\", \"bar.x\"],\n            selector=vm.RadioItems(\n                options=[\"day\", \"time\", \"sex\", \"smoker\", \"size\"], value=\"day\", title=\"Change x-axis inside charts:\"\n            ),\n        ),\n    ],\n)\n\ndashboard = vm.Dashboard(pages=[first_page, second_page, third_page], title=\"Tips Analysis Dashboard\")\nVizro().build(dashboard).run()\n\n```\n\n----------------------------------------\n\nTITLE: Basic Parameter Configuration in Vizro (Python)\nDESCRIPTION: This code snippet demonstrates how to add a basic parameter to a Vizro page.  It defines a `Parameter` model within the `controls` argument of the `Page` model. The `targets` argument specifies the component and function argument to be modified (e.g., 'scatter_chart.title'). The `selector` argument is configured with a `Dropdown` model to allow users to select the chart title.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/parameters.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom vizro import Vizro\nimport vizro.plotly.express as px\nimport vizro.models as vm\n\niris = px.data.iris()\n\npage = vm.Page(\n    title=\"My first page\",\n    components=[\n        vm.Graph(\n            id=\"scatter_chart\",\n            figure=px.scatter(iris, title=\"My scatter chart\", x=\"sepal_length\", y=\"petal_width\", color=\"species\"),\n        ),\n    ],\n    controls=[\n        vm.Parameter(\n            targets=[\"scatter_chart.title\"],\n            selector=vm.Dropdown(\n                options=[\"My scatter chart\", \"A better title!\", \"Another title...\"],\n                multi=False,\n            ),\n        ),\n    ],\n)\n\ndashboard = vm.Dashboard(pages=[page])\nVizro().build(dashboard).run()\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Vizro Dashboard with PyCafe\nDESCRIPTION: This code snippet demonstrates how to create a simple Vizro dashboard with two graphs (scatter plot and histogram) and a dropdown filter, using the Vizro library. It leverages `vizro.plotly.express` for creating the charts and `vizro.models` for defining the dashboard structure. The code then uses `Vizro().build(dashboard).run()` to launch the dashboard.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/tutorials/first-dashboard.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport vizro.plotly.express as px\nfrom vizro import Vizro\nimport vizro.models as vm\n\ndf = px.data.iris()\n\npage = vm.Page(\n    title=\"My first dashboard\",\n    components=[\n        vm.Graph(figure=px.scatter(df, x=\"sepal_length\", y=\"petal_width\", color=\"species\")),\n        vm.Graph(figure=px.histogram(df, x=\"sepal_width\", color=\"species\")),\n    ],\n    controls=[\n        vm.Filter(column=\"species\", selector=vm.Dropdown(value=[\"ALL\"])),\n    ],\n)\n\ndashboard = vm.Dashboard(pages=[page])\nVizro().build(dashboard).run()\n```\n\n----------------------------------------\n\nTITLE: Call Vizro-AI to Generate Dashboard\nDESCRIPTION: This code initializes the VizroAI class with the specified model ('gpt-4o') and then uses the `dashboard()` method to generate a Vizro dashboard from the provided dataframes (df1, df2) and the user prompt. The resulting dashboard object can then be built and run using `Vizro().build(dashboard).run()`.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-ai/docs/pages/user-guides/create-complex-dashboard.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom vizro_ai import VizroAI\n\nvizro_ai = VizroAI(model=\"gpt-4o\")\ndashboard = vizro_ai.dashboard([df1, df2], user_question)\n```\n\n----------------------------------------\n\nTITLE: Generating a Line Chart in a Python Script with Vizro-AI\nDESCRIPTION: This snippet shows how to generate a line chart using Vizro-AI within a Python script. It imports necessary libraries, initializes VizroAI, loads data, calls vizro_ai.plot to create the figure, and then displays the figure using fig.show(). The OpenAI API key needs to be set as an environment variable.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-ai/docs/pages/user-guides/run-vizro-ai.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport vizro.plotly.express as px\nfrom vizro_ai import VizroAI\n\nvizro_ai = VizroAI()\n\ndf = px.data.gapminder()\nfig = vizro_ai.plot(df, \"describe life expectancy per continent over time\")\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Generate Vizro Chart with LLM\nDESCRIPTION: This code utilizes the VizroAI class to generate a chart based on the user-provided data, LLM model choice, and natural language prompt. It instantiates the VizroAI class, calls the `plot` method to generate the chart, and then prints the generated code and displays the resulting chart using `get_fig_object`.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-ai/examples/chart_by_vizro_ai.ipynb#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom vizro_ai import VizroAI\n\n# @title ## Create the chart using Vizro-AI\n# @markdown Note: to iterate with different data, model, and prompt, please edit in cells above and click the corresponding `Run cell` buttons.\n\nprint(\"Running VizroAI...\")\nprint(f\"Selected LLM: {LLM}\")\nprint(f\"User input: {user_input}\")\n\nvizro_ai = VizroAI()\nresult = vizro_ai.plot(df, user_input, return_elements=True)\n\nprint(\"✅ VizroAI finished\")\nprint(\"\\n-----\\nCode:\\n-----\\n\")\nprint(result.code)\nprint(\"\\n-------\\nFigure:\\n-------\\n\")\nresult.get_fig_object(df).show()\n```\n\n----------------------------------------\n\nTITLE: Complete Example: Generate and Run Dashboard (Python)\nDESCRIPTION: This comprehensive Python code snippet combines all the steps required to generate and run a Vizro dashboard using Vizro-AI. It includes importing necessary libraries, loading data, instantiating VizroAI, defining the user prompt, generating the dashboard, and then building and running it. It creates a dashboard with a card and a box plot and a filter.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-ai/docs/pages/tutorials/quickstart-dashboard.md#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom vizro import Vizro\nfrom vizro_ai import VizroAI\nimport vizro.plotly.express as px\n\ndf = px.data.gapminder(datetimes=True, pretty_names=True)\nvizro_ai = VizroAI()\n\nuser_question = \"\"\"\nCreate a page showing 1 card and 1 chart.\nThe first card says 'The Gapminder dataset is a detailed collection of global socioeconomic indicators over several decades. It includes data on GDP per capita, life expectancy, and population for numerous countries and regions. This dataset allows users to analyze development trends, health outcomes, economic growth, and demographic changes globally.'\nThe chart is a box plot showing life expectancy distribution. Put Life expectancy on the y axis, continent on the x axis, and color by continent.\nThe card takes 1 grid of the page space on the left and the box plot takes 3 grid space on the right.\n\nAdd a filter to filter the box plot by year.\n\"\"\"\n\ndashboard = vizro_ai.dashboard([df], user_question)\nVizro().build(dashboard).run()\n```\n\n----------------------------------------\n\nTITLE: Creating Animated Map Chart with Vizro-AI in Python\nDESCRIPTION: This code snippet demonstrates how to create an animated map chart using Vizro-AI. It uses the gapminder dataset from plotly.express and instructs Vizro-AI to visualize GDP per capita over the years for each country. The resulting figure is then displayed using fig.show(). Dependencies include vizro_ai and vizro.plotly.express.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-ai/docs/pages/user-guides/create-advanced-charts.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom vizro_ai import VizroAI\nimport vizro.plotly.express as px\n\ndf = px.data.gapminder()\n\nvizro_ai = VizroAI()\nfig = vizro_ai.plot(df, \"Visualize GDP per capita over the years for each country using map chart.\")\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Complete Example: Custom RangeSlider in Vizro (Python)\nDESCRIPTION: This complete example shows how to create a custom RangeSlider component in Vizro, preventing handle crossing and displaying a permanent tooltip. It includes subclassing, overriding the `build` method, defining a unique type, registering the type with parent models, and using the component in a dashboard. Requires `vizro`, `vizro.models`, `vizro.plotly.express`, `typing_extensions`, and a running Vizro instance.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/custom-components.md#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom typing_extensions import Literal\n\nimport vizro.models as vm\nimport vizro.plotly.express as px\nfrom vizro import Vizro\n\niris = px.data.iris()\n\n\n# 1. Create custom component - here based on the existing RangeSlider\nclass TooltipNonCrossRangeSlider(vm.RangeSlider):\n    \"\"\"Custom numeric multi-selector `TooltipNonCrossRangeSlider`.\"\"\"\n\n    type: Literal[\"other_range_slider\"] = \"other_range_slider\"  # (1)!\n\n    def build(self):  # (2)!\n        range_slider_build_obj = super().build()  # (3)!\n        range_slider_build_obj[self.id].allowCross = False  # (4)!\n        range_slider_build_obj[self.id].tooltip = {\"always_visible\": True, \"placement\": \"bottom\"}  # (5)!\n        return range_slider_build_obj\n\n\n# 2. Add new components to expected type - here the selector of the parent components\nvm.Filter.add_type(\"selector\", TooltipNonCrossRangeSlider)  # (6)!\nvm.Parameter.add_type(\"selector\", TooltipNonCrossRangeSlider)  # (7)!\n\npage = vm.Page(\n    title=\"Custom Component\",\n    components=[\n        vm.Graph(\n            id=\"for_custom_chart\",\n            figure=px.scatter(iris, title=\"Iris Dataset\", x=\"sepal_length\", y=\"petal_width\", color=\"sepal_width\"),\n        ),\n    ],\n    controls=[\n        vm.Filter(\n            column=\"sepal_length\",\n            targets=[\"for_custom_chart\"],\n            selector=TooltipNonCrossRangeSlider(),\n        ),\n        vm.Parameter(\n            targets=[\"for_custom_chart.range_x\"],\n            selector=TooltipNonCrossRangeSlider(title=\"Select x-axis range\", min=0, max=10),  # (8)!\n        ),\n    ],\n)\n\ndashboard = vm.Dashboard(pages=[page])\n\nVizro().build(dashboard).run()\n```\n\n----------------------------------------\n\nTITLE: Define Plotly Function for Pages and Book Totals Chart in Vizro\nDESCRIPTION: This function `pages_books_totals` generates a combined line and bar chart showing cumulative pages read and books read per year. It takes a Pandas DataFrame, calculates cumulative pages, and aggregates books read by year. It then creates a Plotly figure with both a line trace for cumulative pages and bar traces for yearly books. The line chart is explicitly plotted on top of the bar chart using `zorder=1`. The function is decorated with `@capture('graph')` for integration with Vizro.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-ai/docs/pages/tutorials/goodreads-tutorial.md#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n@capture(\"graph\")\ndef pages_books_totals(data_frame):\n    # Prepare data\n    data_frame[\"Date Read\"] = pd.to_datetime(data_frame[\"Date Read\"])\n    data_frame.sort_values(\"Date Read\", inplace=True)\n    data_frame[\"Cumulative Pages\"] = data_frame[\"Number of Pages\"].cumsum()\n\n    # Aggregate data by year for total books read\n    yearly_books = data_frame.groupby(data_frame[\"Date Read\"].dt.year).size()\n\n    # Create figure with secondary y-axis\n    fig = go.Figure()\n\n    # Add line for cumulative pages\n    fig.add_trace(\n        go.Scatter(\n            x=data_frame[\"Date Read\"],\n            y=data_frame[\"Cumulative Pages\"],\n            mode=\"lines\",\n            name=\"Cumulative Pages Read\",\n            zorder=1,  # Ensure the line chart is rendered on top of the bar chart\n        )\n    )\n\n    # Add bars for books read per year\n    fig.add_trace(\n        go.Bar(\n            x=yearly_books.index, y=yearly_books, name=\"Books Read per Year\", yaxis=\"y2\"\n        )\n    )\n\n    # Set up the layout\n    fig.update_layout(\n        title=\"Cumulative Pages Read and Books Read per Year\",\n        xaxis_title=\"Date\",\n        yaxis=dict(title=\"Number of Pages\"),\n        yaxis2=dict(title=\"Total Books\", overlaying=\"y\", side=\"right\"),\n    )\n\n    return fig\n```\n\n----------------------------------------\n\nTITLE: Generating Dashboard with VizroAI Python\nDESCRIPTION: Uses VizroAI to generate a Vizro dashboard from the provided datasets (`df1`, `df2`) and the natural language prompt (`user_question_2_data`). The `return_elements=True` argument ensures that the Vizro elements are returned for further manipulation or inspection. The result contains both the code and dashboard elements.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-ai/examples/example_dashboard.ipynb#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nresult = vizro_ai.dashboard([df1, df2], user_question_2_data, return_elements=True)\n```\n\n----------------------------------------\n\nTITLE: Chaining Actions - Python\nDESCRIPTION: This Python code defines a Vizro dashboard with a button that triggers two export actions: exporting data from a scatter plot and a histogram to different file formats. The `actions` list within the `vm.Button` model chains the `export_data` function calls, ensuring sequential execution.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/actions.md#_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nimport vizro.models as vm\nimport vizro.plotly.express as px\nfrom vizro import Vizro\nfrom vizro.actions import export_data\n\niris = px.data.iris()\n\npage = vm.Page(\n    title=\"Using actions\",\n    components=[\n        vm.Graph(\n            id=\"scatter\",\n            figure=px.scatter(iris, x=\"petal_length\", y=\"sepal_length\", color=\"sepal_width\"),\n        ),\n        vm.Graph(\n            id=\"hist\",\n            figure=px.histogram(iris, x=\"petal_length\", color=\"species\"),\n        ),\n        vm.Button(\n            text=\"Export data\",\n            actions=[\n                vm.Action(\n                    function=export_data(\n                        targets=[\"scatter\"],\n                    )\n                ),\n                vm.Action(\n                    function=export_data(\n                        targets=[\"hist\"],\n                        file_format=\"xlsx\",\n                    )\n                ),\n            ],\n        ),\n    ],\n    controls=[\n        vm.Filter(column=\"species\"),\n    ],\n)\n\ndashboard = vm.Dashboard(pages=[page])\nVizro().build(dashboard).run()\n```\n\n----------------------------------------\n\nTITLE: Generate a Dashboard with Vizro-AI\nDESCRIPTION: This snippet demonstrates how to use Vizro-AI to generate a dashboard with three pages, each containing a different chart based on the provided prompts. It uses the `vizro_ai.dashboard` function to generate the dashboard and then builds and runs it using `Vizro().build(result.dashboard).run(port=8006)`. The generated code is also printed for inspection. It depends on the `vizro_ai` and `Vizro` libraries.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-ai/docs/pages/tutorials/goodreads-tutorial.md#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nuser_question = \"\"\"\n        Create a dashboard with 3 pages, one for each chart.\n\n        On the first page, plot a chart with the title \\\"Sequence of reading\\\" .\n        It is a scatter chart. Use the x axis to show the date a book was read. Plot it at y=1.\n\n        On the second page, lot a chart with the title \\\"Pages and Book totals\\\" .\n        It shows the cumulative total number of pages read by summing the Number of Pages of each book read in each year, using the Date Read data.\n        Plot date on the x axis and the number of pages on the y axis using a scale on the left hand side of the chart.\n        Superimpose a bar chart showing the total books read for each year, taking data from the Date Read column.\n        Show the total books read using the right hand side of the chart which can be a different scale to the y axis shown on the left hand side.\n\n        On the third page, for each row, create a dumbbell chart to show the difference between My Rating and Average Rating for each book.\n        Use shapes to add the horizontal lines between markers. Omit the legend. Don't show any row where My Rating is 0.\n        \"\"\"\n\n        result = vizro_ai.dashboard([df_cleaned], user_question, return_elements=True)\n        Vizro().build(result.dashboard).run(port=8006)\n        print(result.code)\n```\n\n----------------------------------------\n\nTITLE: Creating Dashboard with Pydantic Models in Vizro\nDESCRIPTION: This code snippet demonstrates how to create a Vizro dashboard using pydantic models. It imports necessary modules from vizro and vizro.models, creates a page with graphs and filters, defines a dashboard with the page, and builds and runs the dashboard using Vizro().build(dashboard).run(). It uses the iris dataset from plotly.express for the example.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/dashboard.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport vizro.plotly.express as px\nfrom vizro import Vizro\nimport vizro.models as vm\n\ndf = px.data.iris()\n\npage = vm.Page(\n    title=\"My first dashboard\",\n    components=[\n        vm.Graph(figure=px.scatter(df, x=\"sepal_length\", y=\"petal_width\", color=\"species\")),\n        vm.Graph(figure=px.histogram(df, x=\"sepal_width\", color=\"species\")),            ],\n    controls=[\n        vm.Filter(column=\"species\"),\n    ],\n)\n\ndashboard = vm.Dashboard(pages=[page])\nVizro().build(dashboard).run()\n```\n\n----------------------------------------\n\nTITLE: Dynamic Filter Example in Vizro\nDESCRIPTION: This example demonstrates how to create a dynamic filter in a Vizro dashboard that updates automatically when the page refreshes or when the data parameter changes. The filter is implicitly controlling the dynamic data source \"iris\", which supplies the `data_frame` to the targeted `vm.Graph`. The RadioItems selector's options update based on the unique values in the \"species\" column.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/data.md#_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom vizro import Vizro\nimport pandas as pd\nimport vizro.plotly.express as px\nimport vizro.models as vm\n\nfrom vizro.managers import data_manager\n\ndef load_iris_data(number_of_points=10):\n    iris = pd.read_csv(\"iris.csv\")\n    return iris.sample(number_of_points)\n\ndata_manager[\"iris\"] = load_iris_data\n\npage = vm.Page(\n    title=\"Update the chart on page refresh or when the Parameter changes\",\n    components=[\n        vm.Graph(id=\"graph\", figure=px.box(\"iris\", x=\"species\", y=\"petal_width\", color=\"species\"))\n    ],\n    controls=[\n        vm.Filter(column=\"species\", selector=vm.RadioItems()),  # (1)!\n        vm.Parameter(\n            targets=[\"graph.data_frame.number_of_points\"],\n            selector=vm.Slider(min=1, max=10, step=1, value=1),\n        )\n    ],\n)\n\ndashboard = vm.Dashboard(pages=[page])\nVizro().build(dashboard).run()\n```\n\n----------------------------------------\n\nTITLE: Vizro-AI plot with GPT-4-turbo\nDESCRIPTION: Creates a line graph for GDP per capita since 1950 for each continent, using VizroAI with the GPT-4-turbo model. The code initializes VizroAI with a specified model and generates a chart using the gapminder dataset and a natural language instruction.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-ai/docs/pages/tutorials/quickstart.md#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport vizro.plotly.express as px\nfrom vizro_ai import VizroAI\n\ndf = px.data.gapminder()\n\nvizro_ai = VizroAI(model=\"gpt-4-turbo\")\nfig = vizro_ai.plot(\n    df,\n    \"\"\"create a line graph for GDP per capita since 1950 for each continent.\n    Mark the x axis as Year, y axis as GDP Per Cap and don't include a title.\n    Make sure to take average over continent.\"\"\",\n)\n```\n\n----------------------------------------\n\nTITLE: Default Filter Selectors\nDESCRIPTION: This snippet showcases default filter selectors based on data types. It demonstrates how categorical, numerical, and temporal data are automatically associated with `Dropdown`, `RangeSlider`, and `DatePicker` selectors respectively. It utilizes a stocks dataset with 'stocks', 'value', and 'date' columns to illustrate these default selectors.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/filters.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport pandas as pd\nfrom vizro import Vizro\nimport vizro.plotly.express as px\nimport vizro.models as vm\n\ndf_stocks = px.data.stocks(datetimes=True)\n\ndf_stocks_long = pd.melt(\n    df_stocks,\n    id_vars='date',\n    value_vars=['GOOG', 'AAPL', 'AMZN', 'FB', 'NFLX', 'MSFT'],\n    var_name='stocks',\n    value_name='value'\n)\n\ndf_stocks_long['value'] = df_stocks_long['value'].round(3)\n\npage = vm.Page(\n    title=\"My first page\",\n    components=[\n        vm.Graph(figure=px.line(df_stocks_long, x=\"date\", y=\"value\", color=\"stocks\")),\n    ],\n    controls=[\n        vm.Filter(column=\"stocks\"),\n        vm.Filter(column=\"value\"),\n        vm.Filter(column=\"date\"),\n    ],\n)\n\ndashboard = vm.Dashboard(pages=[page])\nVizro().build(dashboard).run()\n```\n\n----------------------------------------\n\nTITLE: Export Data Action with Vizro in Python\nDESCRIPTION: This code demonstrates how to implement the `export_data` action in a Vizro dashboard. A button is configured to trigger the download of the entire dataset used within the dashboard when clicked. The example uses a scatter plot visualization from the iris dataset.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/actions.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport vizro.models as vm\nimport vizro.plotly.express as px\nfrom vizro import Vizro\nfrom vizro.actions import export_data\n\ndf = px.data.iris()\n\npage = vm.Page(\n    title=\"My first page\",\n    layout=vm.Flex(),  # (1)!\n    components=[\n        vm.Graph(\n            figure=px.scatter(\n                df,\n                x=\"sepal_width\",\n                y=\"sepal_length\",\n                color=\"species\",\n                size=\"petal_length\",\n            ),\n        ),\n        vm.Button(\n            text=\"Export data\",\n            actions=[vm.Action(function=export_data())],\n        ),\n    ]\n)\n\ndashboard = vm.Dashboard(pages=[page])\nVizro().build(dashboard).run()\n```\n\n----------------------------------------\n\nTITLE: Custom Chart filter_interaction with custom_data (Python)\nDESCRIPTION: This snippet shows how to create a custom chart function that includes the `custom_data` argument and uses it within the underlying Plotly Express chart. This enables the custom chart to participate in cross-filtering when used with the `filter_interaction` action in Vizro.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/actions.md#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n@capture(\"graph\")\ndef my_custom_chart(data_frame, custom_data, **kwargs):\n    return px.scatter(data_grame, custom_data=custom_data, **kwargs)\n\n...\n\nvm.Graph(figure=my_custom_chart(df, custom_data=['continent'], actions=[...]))\n```\n\n----------------------------------------\n\nTITLE: Custom chart definition\nDESCRIPTION: Defines a custom chart function that creates a choropleth map showing the global distribution of life expectancy.  This function illustrates how Vizro-AI generates Python code for creating visualizations based on natural language instructions.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-ai/docs/pages/tutorials/quickstart.md#_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\n\n\ndef custom_chart(data_frame):\n    fig = px.choropleth(\n        data_frame,\n        locations=\"iso_alpha\",\n        color=\"lifeExp\",\n        hover_name=\"country\",\n        color_continuous_scale=px.colors.sequential.Plasma,\n        labels={\"lifeExp\": \"Life Expectancy\"},\n    )\n    fig.update_layout(\n        title=\"Global Life Expectancy Distribution\",\n        geo=dict(showframe=False, showcoastlines=True),\n    )\n    return fig\n```\n\n----------------------------------------\n\nTITLE: Adding filter_interaction to a Graph component in Vizro (Python)\nDESCRIPTION: This code snippet demonstrates how to add the `filter_interaction` action to a `Graph` component in a Vizro dashboard. It defines the action with a list of target chart IDs, enabling cross-filtering when a data point is selected in the source graph.  The `custom_data` parameter is used to specify the columns used for filtering.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/actions.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nactions=[vm.Action(function=filter_interaction(targets=[\"scatter_relation_2007\"]))]\n```\n\n----------------------------------------\n\nTITLE: Creating Tabs with Containers in Vizro using Python\nDESCRIPTION: This code demonstrates how to create Tabs within a Vizro dashboard using Python.  It defines a Page with a Tabs component, which contains two Containers. Each Container has a title (used as the tab label) and a Graph component displaying different Plotly Express charts. The example uses the gapminder dataset.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/tabs.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport vizro.models as vm\nimport vizro.plotly.express as px\nfrom vizro import Vizro\n\ngapminder_2007 = px.data.gapminder().query(\"year == 2007\")\n\npage = vm.Page(\n    title=\"Tabs\",\n    components=[\n        vm.Tabs(\n            tabs=[\n                vm.Container(\n                    title=\"Tab I\",\n                    components=[\n                        vm.Graph(\n                            figure=px.bar(\n                                gapminder_2007,\n                                title=\"Graph 1\",\n                                x=\"continent\",\n                                y=\"lifeExp\",\n                                color=\"continent\",\n                            ),\n                        ),\n                        vm.Graph(\n                            figure=px.box(\n                                gapminder_2007,\n                                title=\"Graph 2\",\n                                x=\"continent\",\n                                y=\"lifeExp\",\n                                color=\"continent\",\n                            ),\n                        ),\n                    ],\n                ),\n                vm.Container(\n                    title=\"Tab II\",\n                    components=[\n                        vm.Graph(\n                            figure=px.scatter(\n                                gapminder_2007,\n                                title=\"Graph 3\",\n                                x=\"gdpPercap\",\n                                y=\"lifeExp\",\n                                size=\"pop\",\n                                color=\"continent\",\n                            ),\n                        ),\n                    ],\n                ),\n            ],\n        ),\n    ],\n)\n\ndashboard = vm.Dashboard(pages=[page])\nVizro().build(dashboard).run()\n```\n\n----------------------------------------\n\nTITLE: Using Vizro-AI fig Directly in Vizro Dashboard\nDESCRIPTION: This code demonstrates how to directly use a Vizro-AI generated figure in a Vizro dashboard. It uses `vizro_ai.plot()` to generate a figure and then assigns it to the `fig` variable. This `fig` is then used in the `vm.Graph` component within the Vizro dashboard, showcasing a streamlined approach to integrating Vizro-AI charts into dashboards.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-ai/docs/pages/user-guides/add-generated-chart-usecase.md#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom vizro import Vizro\nimport vizro.models as vm\nimport pandas as pd\nimport vizro.plotly.express as px\nimport vizro_ai\nfrom vizro_ai import VizroAI\n\nfrom dotenv import load_dotenv\nload_dotenv()\ndf = px.data.gapminder()\nvizro_ai = VizroAI(model=\"gpt-4o\")\n\nfig = vizro_ai.plot(df,\n    \"\"\"Plot a bubble chart to show the changes in life expectancy\n    and GDP per capita for each country over time.\n    Color the bubbles by continent.\n    Add animation on yearly basis, and do not use facets.\n    Put the legend on top\"\"\n)\n\npage = vm.Page(\n    title = 'Demographics',\n    components = [\n        vm.Graph(figure=fig),\n        vm.Graph(\n            figure=px.box(\n                df, x='continent', y='lifeExp', color='continent', title='Life Expectancy per Continent'\n            )\n        )\n    ],\n    controls = [\n        vm.Filter(column='country'),\n        vm.Filter(column='continent')])\n\nVizro().build(vm.Dashboard(pages=[page])).run(port=8090)\n```\n\n----------------------------------------\n\nTITLE: Build Dashboard with Vizro-AI\nDESCRIPTION: This code snippet uses Vizro-AI to generate a dashboard based on the uploaded data and the user-provided prompt. It initializes Vizro-AI with the selected LLM model, calls the `dashboard` function to generate the dashboard elements, and then builds the dashboard using `Vizro().build()`. The generated dashboard code is also printed.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-ai/examples/dashboard_by_vizro_ai.ipynb#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport ipywidgets as widgets\nfrom IPython.display import display\n\n\ndef _run_code(button):\n    print(\"Running VizroAI...\")\n    import dash._callback_context\n    from vizro import Vizro\n    from vizro_ai import VizroAI\n\n    dash._callback_context.context_value.set({})\n    Vizro._reset()\n\n    vizro_ai = VizroAI(model=LLM)\n    res = vizro_ai.dashboard(dfs, user_input.value, return_elements=True)\n\n    vizro_dashboard = Vizro().build(res.dashboard)\n\n    button1.result = vizro_dashboard\n    print(\"✅ Dashboard generated. Check its code and live view below\")\n    print(res.code)\n\n\nbutton1 = widgets.Button(\n    description=\"Build Dashboard!\",\n    button_style=\"info\",\n    tooltip=\"Click to build the dashboard using Vizro-AI\",\n)\ndisplay(button1)\n\nbutton1.on_click(_run_code)\n```\n\n----------------------------------------\n\nTITLE: Basic Filter Implementation\nDESCRIPTION: This snippet demonstrates the implementation of a basic filter using Vizro.  It creates a page with a scatter plot and a filter for the 'species' column. The filter is added to the `controls` argument of the `Page` model. The column argument specifies the target column to be filtered.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/filters.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom vizro import Vizro\nimport vizro.plotly.express as px\nimport vizro.models as vm\n\niris = px.data.iris()\n\npage = vm.Page(\n    title=\"My first page\",\n    components=[\n        vm.Graph(figure=px.scatter(iris, x=\"sepal_length\", y=\"petal_width\", color=\"species\")),\n    ],\n    controls=[\n        vm.Filter(column=\"species\"),\n    ],\n)\n\ndashboard = vm.Dashboard(pages=[page])\nVizro().build(dashboard).run()\n```\n\n----------------------------------------\n\nTITLE: Vizro-AI plot with return_elements\nDESCRIPTION: Generates a geographic distribution chart of life expectancy using Vizro-AI, and prints the generated code, chart insights, and code explanation.  This demonstrates how to access the different components returned by Vizro-AI when return_elements is set to True.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-ai/docs/pages/tutorials/quickstart.md#_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nres = vizro_ai.plot(df, \"show me the geo distribution of life expectancy\", return_elements=True)\nprint(res.code)\nprint(res.chart_insights)\nprint(res.code_explanation)\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Containers in Vizro (Python)\nDESCRIPTION: This snippet demonstrates how to create two containers within a Vizro Page. The first container displays a scatter plot and a bar chart side-by-side. The second container displays a scatter plot with marginal distributions. The Page layout defaults to vertically stacking the containers.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/container.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport vizro.models as vm\nimport vizro.plotly.express as px\nfrom vizro import Vizro\n\niris = px.data.iris()\n\npage = vm.Page(\n    title=\"Containers\",\n    components=[  # (1)!\n        vm.Container(\n            title=\"Container I\",\n            layout=vm.Grid(grid=[[0, 1]]),  # (2)!\n            components=[\n                vm.Graph(\n                    figure=px.scatter(\n                        iris,\n                        x=\"sepal_length\",\n                        y=\"petal_width\",\n                        color=\"species\",\n                        title=\"Container I - Scatter\"\n                    )\n                ),\n                vm.Graph(\n                    figure=px.bar(\n                        iris,\n                        x=\"sepal_length\",\n                        y=\"sepal_width\",\n                        color=\"species\",\n                        title=\"Container I - Bar\"\n                    )\n                ),\n            ],\n        ),\n        vm.Container(\n            title=\"Container II\",\n            components=[\n                vm.Graph(\n                    figure=px.scatter(\n                        iris,\n                        x=\"sepal_width\",\n                        y=\"sepal_length\",\n                        color=\"species\",\n                        marginal_y=\"violin\",\n                        marginal_x=\"box\",\n                        title=\"Container II - Scatter\",\n                    )\n                ),\n            ],\n        ),\n    ],\n)\n\ndashboard = vm.Dashboard(pages=[page])\nVizro().build(dashboard).run()\n```\n\n----------------------------------------\n\nTITLE: Custom Carousel Component with Action in Vizro (Python)\nDESCRIPTION: This code defines a custom `Carousel` component for Vizro using `dash_bootstrap_components`. It includes logic to trigger an action when the active slide changes by utilizing the `actions` attribute. The action updates a `Card` component's text based on the active carousel slide.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/custom-components.md#_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import Annotated, Literal\n\nimport dash_bootstrap_components as dbc\nimport vizro.models as vm\nfrom pydantic import AfterValidator, Field, PlainSerializer\nfrom vizro import Vizro\nfrom vizro.models.types import ActionType\nfrom vizro.models._action._actions_chain import _action_validator_factory\nfrom vizro.models.types import capture\n\n\n# 1. Create new custom component\nclass Carousel(vm.VizroBaseModel):\n    type: Literal[\"carousel\"] = \"carousel\"\n    items: list\n    actions: Annotated[\n        list[ActionType],\n        # Here we set the action so a change in the active_index property of the custom component triggers the action\n        AfterValidator(_action_validator_factory(\"active_index\")),\n        # Here we tell the serializer to only serialize the actions field\n        PlainSerializer(lambda x: x[0].actions),\n        Field(default=[]),\n    ]\n\n    def build(self):\n        return dbc.Carousel(\n            id=self.id,\n            items=self.items,\n        )\n\n\n# 2. Add new components to expected type - here the selector of the parent components\nvm.Page.add_type(\"components\", Carousel)\n\n\n# 3. Create custom action\n@capture(\"action\")\ndef slide_next_card(active_index):\n    if active_index:\n        return \"Second slide\"\n\n    return \"First slide\"\n\n\npage = vm.Page(\n    title=\"Custom Component\",\n    components=[\n        vm.Card(text=\"First slide\", id=\"carousel-card\"),\n        Carousel(\n            id=\"carousel\",\n            items=[\n                {\"key\": \"1\", \"src\": \"assets/slide_1.jpg\"},\n                {\"key\": \"2\", \"src\": \"assets/slide_2.jpg\"},\n            ],\n            actions=[\n                vm.Action(\n                    function=slide_next_card(),\n                    inputs=[\"carousel.active_index\"],\n                    outputs=[\"carousel-card.children\"],\n                )\n            ],\n        ),\n    ],\n)\n\ndashboard = vm.Dashboard(pages=[page])\n\nVizro().build(dashboard).run()\n```\n\n----------------------------------------\n\nTITLE: Custom Waterfall Chart with Filter in Vizro\nDESCRIPTION: This code creates a custom waterfall chart using `go.Figure()` and adds it to a Vizro dashboard along with a filter. The `waterfall` function generates the chart based on the provided data. A `Filter` component is used to allow users to interact with the chart's data. This exemplifies creating a new chart type and integrating it with dashboard controls.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/custom-charts.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport pandas as pd\nimport plotly.graph_objects as go\n\nimport vizro.models as vm\nfrom vizro import Vizro\nfrom vizro.models.types import capture\n\n\ndef waterfall_data():\n    return pd.DataFrame(\n        {\n            \"measure\": [\"relative\", \"relative\", \"total\", \"relative\", \"relative\", \"total\"],\n            \"x\": [\"Sales\", \"Consulting\", \"Net revenue\", \"Purchases\", \"Other expenses\", \"Profit before tax\"],\n            \"text\": [\"+60\", \"+80\", \"\", \"-40\", \"-20\", \"Total\"],\n            \"y\": [60, 80, 0, -40, -20, 0],\n        }\n    )\n\n\n@capture(\"graph\")\ndef waterfall(data_frame, measure, x, y, text, title=None):\n    fig = go.Figure()\n    fig.add_traces(\n        go.Waterfall(\n            measure=data_frame[measure],\n            x=data_frame[x],\n            y=data_frame[y],\n            text=data_frame[text],\n            decreasing={\"marker\": {\"color\": \"#ff5267\"}},\n            increasing={\"marker\": {\"color\": \"#08bdba\"}},\n            totals={\"marker\": {\"color\": \"#00b4ff\"}},\n        ),\n    )\n\n    fig.update_layout(title=title)\n    return fig\n\n\npage = vm.Page(\n    title=\"Custom chart\",\n    components=[\n        vm.Graph(\n            figure=waterfall(data_frame=waterfall_data(), measure=\"measure\", x=\"x\", y=\"y\", text=\"text\"),\n        ),\n    ],\n    # Apply a filter to the custom chart\n    controls=[\n        vm.Filter(column=\"x\", selector=vm.Dropdown(title=\"Financial categories\")),\n    ],\n)\n\ndashboard = vm.Dashboard(pages=[page])\nVizro().build(dashboard).run()\n```\n\n----------------------------------------\n\nTITLE: Selectors with info-icon - app.py (Python)\nDESCRIPTION: This code snippet demonstrates how to add an info icon to a Vizro selector using the `description` argument. The info icon provides helpful context to the user via a tooltip. It showcases a Checklist selector with a description that includes a hyperlink.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/selectors.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport vizro.models as vm\nimport vizro.plotly.express as px\nfrom vizro import Vizro\n\niris = px.data.iris()\n\npage = vm.Page(\n    title=\"Selectors with icons\",\n    components=[\n        vm.Graph(\n            figure=px.scatter(iris, x=\"sepal_length\", y=\"sepal_width\")\n        ),\n    ],\n    controls=[\n        vm.Filter(\n            column=\"species\",\n            selector=vm.Checklist(\n                title=\"Select Species\",\n                description=\"\"\"\n                    Select which species of iris you like.\n\n                    [Click here](https://en.wikipedia.org/wiki/Iris_flower_data_set)\n                    to learn more about flowers.\"\"\",\n            )\n        ),\n    ]\n)\n\ndashboard = vm.Dashboard(pages=[page])\nVizro().build(dashboard).run()\n```\n\n----------------------------------------\n\nTITLE: Install Vizro-AI and Setup API Key\nDESCRIPTION: This code snippet installs the Vizro-AI library and sets up the LLM API key as an environment variable. It attempts to retrieve the OpenAI API key and base URL from Google Colab's userdata secrets. If the API key is not found, it prompts the user to set it up.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-ai/examples/dashboard_by_vizro_ai.ipynb#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport os\n\nfrom google.colab import userdata\n\n# @title ## Setup\n# @markdown #### 1. Install Vizro-AI\nprint(\"Installing dependencies\")\n%pip install uv -q -q -q\n# %pip uninstall ipykernel -y -q -q -q\n# %pip install -U ipykernel -q -q -q\n!uv pip install --system vizro-ai --quiet\nprint(\"✅ Installation finished\")\n\n# @markdown #### 2. Setup LLM API access\n\n\ndef _safe_get_userdata(key):\n    try:\n        return userdata.get(key)\n    except Exception as e:\n        print(f\"Warning: Unable to access {key}. Reason: {e!s}\")\n        return None\n\n\n# Always try to set the OPENAI_API_KEY\napi_key = _safe_get_userdata(\"OPENAI_API_KEY\")\nif api_key:\n    os.environ[\"OPENAI_API_KEY\"] = api_key\nelse:\n    print(\"❌ OPENAI_API_KEY not set. Click `Secrets` icon on the left to setup.\")\n\n# Conditionally set OPENAI_BASE_URL if provided and accessible\nopenai_base_url = _safe_get_userdata(\"OPENAI_BASE_URL\")\nif openai_base_url:\n    os.environ[\"OPENAI_BASE_URL\"] = openai_base_url\nelse:\n    print(\"User defined OPENAI_BASE_URL not set. Using default URL.\")\n\nprint(\"\\nCurrent environment variables:\")\nprint(f\"OPENAI_API_KEY: {'✅ Set' if 'OPENAI_API_KEY' in os.environ else 'Not set'}\")\nprint(f\"OPENAI_BASE_URL: {'✅ Set' if 'OPENAI_BASE_URL' in os.environ else 'Not set by user, use default'}\")\n```\n\n----------------------------------------\n\nTITLE: Basic Dash DataTable Integration in Vizro (Python)\nDESCRIPTION: This Python code snippet illustrates how to integrate a basic Dash DataTable into a Vizro dashboard. It imports the necessary Vizro models, uses Plotly Express to load data, and creates a Vizro page with a Table component, passing a pandas DataFrame as the data source.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/table.md#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nimport vizro.models as vm\nimport vizro.plotly.express as px\nfrom vizro import Vizro\nfrom vizro.tables import dash_data_table\n\ndf = px.data.gapminder().query(\"year == 2007\")\n\npage = vm.Page(\n    title=\"Example of a Dash DataTable\",\n    components=[\n        vm.Table(title=\"Dash DataTable\", figure=dash_data_table(data_frame=df)),\n    ],\n)\n\ndashboard = vm.Dashboard(pages=[page])\nVizro().build(dashboard).run()\n```\n\n----------------------------------------\n\nTITLE: Add Filters to Vizro Dashboard\nDESCRIPTION: This snippet demonstrates how to add filters to a Vizro dashboard using the `vm.Filter` model. Filters enable users to interact with the dashboard by selecting specific data points to display.  The `column` parameter specifies the column to be filtered, and the `selector` parameter defines the type of selector to use (e.g., Checklist).\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/tutorials/explore-components.md#_snippet_10\n\nLANGUAGE: python\nCODE:\n```\ncontrols = [vm.Filter(column=\"day\"), vm.Filter(column=\"time\", selector=vm.Checklist()), vm.Filter(column=\"size\")]\n```\n\n----------------------------------------\n\nTITLE: Example: app.py - Custom Component and Action\nDESCRIPTION: Complete example demonstrating the creation of a custom component (OffCanvas), a custom action (open_offcanvas), and their integration within a Vizro dashboard.  It showcases how the custom component is used as an output of the custom action, triggered by a button click.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/custom-components.md#_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import Literal\n\nimport dash_bootstrap_components as dbc\nimport vizro.models as vm\nimport vizro.plotly.express as px\nfrom dash import html\nfrom vizro import Vizro\n\nfrom vizro.models.types import capture\n\n\n# 1. Create new custom component\nclass OffCanvas(vm.VizroBaseModel):\n    type: Literal[\"offcanvas\"] = \"offcanvas\"\n    title: str\n    content: str\n\n    def build(self):\n        return html.Div(\n            [\n                dbc.Offcanvas(\n                    children=html.P(self.content),\n                    id=self.id,\n                    title=self.title,\n                    is_open=False,\n                ),\n            ]\n        )\n\n\n# 2. Add new components to expected type - here the selector of the parent components\nvm.Page.add_type(\"components\", OffCanvas)\n\n# 3. Create custom action\n@capture(\"action\")\ndef open_offcanvas(n_clicks, is_open):\n    if n_clicks:\n        return not is_open\n    return is_open\n\npage = vm.Page(\n    title=\"Custom Component\",\n    components=[\n        vm.Button(\n            text=\"Open Offcanvas\",\n            id=\"open_button\",\n            actions=[\n                vm.Action(\n                    function=open_offcanvas(),\n                    inputs=[\"open_button.n_clicks\", \"offcanvas.is_open\"],\n                    outputs=[\"offcanvas.is_open\"],\n                )\n            ],\n        ),\n        OffCanvas(\n            id=\"offcanvas\",\n            content=\"OffCanvas content\",\n            title=\"Offcanvas Title\",\n        ),\n    ],\n)\n\ndashboard = vm.Dashboard(pages=[page])\n\nVizro().build(dashboard).run()\n```\n\n----------------------------------------\n\nTITLE: Create Vizro Dashboard Model with Pages, Layouts, and Controls\nDESCRIPTION: This code defines the Vizro dashboard model, including three pages, each containing a graph component and specific layouts.  It also adds a range slider control to filter the data for the first chart, 'Sequence of Reading'. The dashboard model is then used to build and run the Vizro application.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-ai/docs/pages/tutorials/goodreads-tutorial.md#_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n########### Model code ############\nmodel = vm.Dashboard(\n    pages=[\n        vm.Page(\n            components=[\n                vm.Graph(\n                    id=\"sequence_reading\",\n                    figure=sequence_reading(df),\n                )\n            ],\n            title=\"Sequence of Reading\",\n            layout=vm.Layout(grid=[[0]]),\n            controls=[\n                vm.Filter(\n                    column=\"Year Read\",\n                    targets=[\"sequence_reading\"],\n                    selector=vm.RangeSlider(type=\"range_slider\"),\n                )\n            ],\n        ),\n        vm.Page(\n            components=[\n                vm.Graph(\n                    id=\"pages_books_totals\",\n                    figure=pages_books_totals(df),\n                )\n            ],\n            title=\"Pages and Book Totals\",\n            layout=vm.Layout(grid=[[0]]),\n            controls=[],\n        ),\n        vm.Page(\n            components=[\n                vm.Graph(\n                    id=\"rating_comparison\",\n                    figure=rating_comparison(df),\n                )\n            ],\n            title=\"Rating Comparison\",\n            layout=vm.Layout(grid=[[0]]),\n            controls=[],\n        ),\n    ],\n    title=\"Book Reading Analysis Dashboard\",\n)\n\nVizro().build(model).run()\n```\n\n----------------------------------------\n\nTITLE: Grouping Pages in Vizro Navigation (Python - Full Example)\nDESCRIPTION: This snippet provides a complete example of how to create pages and group them together in the navigation using the `vm.Navigation` object with a dictionary assigned to the `pages` parameter.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/navigation.md#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom vizro import Vizro\nimport vizro.plotly.express as px\nimport vizro.models as vm\n\niris = px.data.iris()\n\npage_1 = vm.Page(\n    title=\"My first page\",\n    components=[\n        vm.Card(text=\"My text here\"),\n    ],\n)\npage_2 = vm.Page(\n    title=\"My second page\",\n    components=[\n        vm.Card(text=\"My text here\"),\n    ],\n)\npage_3 = vm.Page(\n    title=\"My third page\",\n    components=[\n        vm.Card(text=\"My text here\"),\n    ],\n)\n\ndashboard = vm.Dashboard(\n    pages=[page_1, page_2, page_3],\n    navigation=vm.Navigation(pages={\"Group A\": [\"My first page\", \"My second page\"], \"Group B\": [\"My third page\"]}),\n)\nVizro().build(dashboard).run()\n```\n\n----------------------------------------\n\nTITLE: Static Data Supplied Directly in Python\nDESCRIPTION: This Python snippet demonstrates how to directly supply a pandas DataFrame to a Vizro graph component. It reads data from a CSV file and creates a box plot using `vizro.plotly.express`.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/data.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom vizro import Vizro\nimport pandas as pd\nimport vizro.plotly.express as px\nimport vizro.models as vm\n\niris = pd.read_csv(\"iris.csv\") # (1)!\n\npage = vm.Page(\n    title=\"Static data example\",\n    components=[\n        vm.Graph(figure=px.box(iris, x=\"species\", y=\"petal_width\", color=\"species\")),\n    ]\n)\n\ndashboard = vm.Dashboard(pages=[page])\nVizro().build(dashboard).run()\n```\n\n----------------------------------------\n\nTITLE: Including a Subset of Pages in Vizro (YAML)\nDESCRIPTION: This snippet shows how to configure the navigation to include only a subset of pages using YAML.  It assumes that the pages are already defined in a separate file, and it only configures the `navigation` section.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/navigation.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n# Still requires a .py to add data to the data manager and parse YAML configuration\n# See yaml_version example\n# pages defined as in default example\nnavigation:\n  pages:\n    - My first page\n    - My second page\n```\n\n----------------------------------------\n\nTITLE: Defining horizontal grid layout\nDESCRIPTION: Defines a Vizro grid layout with one row and two components set horizontally, using the `vm.Grid` function.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/layouts.md#_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nlayout=vm.Grid(grid=[[0,1]])\n```\n\n----------------------------------------\n\nTITLE: Defining LangChain tools for plot generation\nDESCRIPTION: This snippet defines a LangChain tool `get_plot_code` that wraps Vizro-AI's plotting capability.  It takes a Pandas DataFrame and a question string as input, uses Vizro-AI to generate plot code based on the question, and returns the generated code.  The DataFrame is injected at runtime.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-ai/docs/pages/user-guides/vizro-ai-langchain-guide.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n@tool(parse_docstring=True)\ndef get_plot_code(df: Annotated[Any, InjectedToolArg], question: str) -> str:\n    \"\"\"Generate only the plot code.\n\n    Args:\n        df: A pandas DataFrame\n        question: The plotting question\n\n    Returns:\n        Generated plot code\n    \"\"\"\n    vizro_ai = VizroAI(model=llm)\n    plot_elements = vizro_ai.plot(\n        df,\n        user_input=question,\n        return_elements=True,\n    )\n    return plot_elements.code_vizro\n```\n\n----------------------------------------\n\nTITLE: Configuring app.py for Deployment\nDESCRIPTION: This code snippet shows the required modification to the `app.py` file when deploying a Vizro dashboard from development to production. It exposes the Vizro app object and ensures the app runs correctly in both development and production environments.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/run-deploy.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\napp = Vizro().build(dashboard)  # (1)!\n\nif __name__ == \"__main__\":  # (2)!\n    app.run()\n```\n\n----------------------------------------\n\nTITLE: Creating a Vizro Dashboard with a Parameter\nDESCRIPTION: This code defines a complete Vizro dashboard with three pages. The third page demonstrates how to use a `Parameter` to dynamically control the x-axis of multiple charts. The parameter targets the 'x' and 'color' arguments of the violin, heatmap and bar charts, allowing the user to switch between different data columns.  It requires the vizro package, as well as vizro.models and vizro.plotly.express.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/tutorials/explore-components.md#_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nimport vizro.models as vm\nimport vizro.plotly.express as px\nfrom vizro import Vizro\nfrom vizro.tables import dash_ag_grid\nfrom vizro.models.types import capture\nfrom vizro.figures import kpi_card\n\ntips = px.data.tips()\n\nfirst_page = vm.Page(\n    title=\"Data\",\n    components=[\n        vm.AgGrid(\n            figure=dash_ag_grid(tips),\n            footer=\"\"\"**Data Source:** Bryant, P. G. and Smith, M (1995)\n            Practical Data Analysis: Case Studies in Business Statistics.\n            Homewood, IL: Richard D. Irwin Publishing.\"\"\",\n        ),\n    ],\n)\n\nsecond_page = vm.Page(\n    title=\"Summary\",\n    layout=vm.Grid(grid=[[0, 1, -1, -1], [2, 2, 2, 2], [2, 2, 2, 2], [2, 2, 2, 2]]),\n    components=[\n        vm.Figure(\n            figure=kpi_card(\n                data_frame=tips,\n                value_column=\"total_bill\",\n                agg_func=\"mean\",\n                value_format=\"${value:.2f}\",\n                title=\"Average Bill\",\n            )\n        ),\n        vm.Figure(\n            figure=kpi_card(\n                data_frame=tips,\n                value_column=\"tip\",\n                agg_func=\"mean\",\n                value_format=\"${value:.2f}\",\n                title=\"Average Tips\"\n            )\n        ),\n        vm.Tabs(\n            tabs=[\n                vm.Container(\n                    title=\"Total Bill ($)\",\n                    components=[\n                        vm.Graph(figure=px.histogram(tips, x=\"total_bill\")),\n                    ],\n                ),\n                vm.Container(\n                    title=\"Total Tips ($)\",\n                    components=[\n                        vm.Graph(figure=px.histogram(tips, x=\"tip\")),\n                    ],\n                ),\n            ],\n        )\n    ],\n    controls=[vm.Filter(column=\"day\"), vm.Filter(column=\"time\", selector=vm.Checklist()), vm.Filter(column=\"size\")]\n)\n\nthird_page = vm.Page(\n    title=\"Analysis\",\n    layout=vm.Grid(grid=[[0, 1], [2, 2]]),\n    components=[\n        vm.Graph(\n            id=\"bar\",\n            title=\"Where do we get more tips?\",\n            figure=px.bar(tips, y=\"tip\", x=\"day\"),\n        ),\n        vm.Graph(\n            id=\"violin\",\n            title=\"Is the average driven by a few outliers?\",\n            figure=px.violin(tips, y=\"tip\", x=\"day\", color=\"day\", box=True),\n        ),\n        vm.Graph(\n            id=\"heatmap\",\n            title=\"Which group size is more profitable?\",\n            figure=px.density_heatmap(tips, x=\"day\", y=\"size\", z=\"tip\", histfunc=\"avg\", text_auto=\"$.2f\"),\n        ),\n    ],\n    controls=[\n        vm.Parameter(\n            targets=[\"violin.x\", \"violin.color\", \"heatmap.x\", \"bar.x\"],\n            selector=vm.RadioItems(\n                options=[\"day\", \"time\", \"sex\", \"smoker\", \"size\"], value=\"day\", title=\"Change x-axis inside charts:\"\n            ),\n        ),\n    ],\n)\n\ndashboard = vm.Dashboard(pages=[first_page, second_page, third_page])\nVizro().build(dashboard).run()\n```\n\n----------------------------------------\n\nTITLE: Basic Dash AG Grid with Vizro - Python\nDESCRIPTION: This snippet demonstrates the basic implementation of a Dash AG Grid within a Vizro application. It imports necessary libraries, creates a DataFrame, defines a page with an AgGrid component, and runs the Vizro application.  The AG Grid is populated with data from the gapminder dataset. It requires the vizro, vizro.models, vizro.plotly.express, and vizro.tables libraries.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/table.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport vizro.models as vm\nimport vizro.plotly.express as px\nfrom vizro import Vizro\nfrom vizro.tables import dash_ag_grid\n\ndf = px.data.gapminder()\n\npage = vm.Page(\n    title=\"Default Dash AG Grid\",\n    components=[vm.AgGrid(figure=dash_ag_grid(data_frame=df))]\n)\n\ndashboard = vm.Dashboard(pages=[page])\nVizro().build(dashboard).run()\n```\n\n----------------------------------------\n\nTITLE: Define Plotly Function for Sequence Reading Chart in Vizro\nDESCRIPTION: This function `sequence_reading` creates a scatter plot showing the sequence of books read over time. It takes a Pandas DataFrame as input, iterates through rows, and adds scatter traces for each book. The hovertemplate displays the title, author, rating, and date. The x-axis represents the Date Read, and the y-axis shows the sequence. The function is decorated with `@capture('graph')` to be used as a Vizro graph component.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-ai/docs/pages/tutorials/goodreads-tutorial.md#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n@capture(\"graph\")\ndef sequence_reading(data_frame):\n    fig = go.Figure()\n\n    # Iterate through the filtered DataFrame to add traces\n    for index, row in data_frame.iterrows():\n        fig.add_trace(\n            go.Scatter(\n                x=[row[\"Date Read\"], row[\"Date Read\"]],\n                y=[1],\n                customdata=[[row[\"Title\"], row[\"Author\"], row[\"My Rating\"]]],\n                showlegend=False,\n                marker=dict(color=\"#00b4ff\", size=20, opacity=0.4),\n                hovertemplate=\"<b>Title:</b> %{customdata[0]}<br>\"\n                + \"<b>Author:</b> %{customdata[1]}<br>\"\n                + \"<b>My Rating:</b> %{customdata[2]}<br>\"\n                + \"<b>Date:</b> %{x}\"\n                + \"<extra></extra>\",\n            )\n        )\n    fig.update_layout(\n        title=\"Sequence of reading\",\n        xaxis_title=\"Date Read\",\n        yaxis_title=\"Sequence\",\n        yaxis=dict(showticklabels=False, showgrid=False),\n        xaxis=dict(tickangle=-45),\n    )\n    return fig\n```\n\n----------------------------------------\n\nTITLE: Configuring AgGrid filter_interaction in Vizro (Python)\nDESCRIPTION: This example demonstrates how to configure cross-filtering using an `AgGrid` component as the source in a Vizro dashboard. The code sets up an `AgGrid` that triggers filtering on a `Graph` component when a row is selected.  It imports necessary Vizro models and functions.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/actions.md#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport vizro.models as vm\nimport vizro.plotly.express as px\nfrom vizro import Vizro\nfrom vizro.actions import filter_interaction\nfrom vizro.tables import dash_ag_grid\n\ndf_gapminder = px.data.gapminder().query(\"year == 2007\")\n\npage = vm.Page(\n    title=\"Filter interaction\",\n    components=[\n        vm.AgGrid(\n            figure=dash_ag_grid(data_frame=df_gapminder),\n            actions=[\n                vm.Action(function=filter_interaction(targets=[\"scatter_relation_2007\"]))\n            ],\n        ),\n        vm.Graph(\n            id=\"scatter_relation_2007\",\n            figure=px.scatter(\n                df_gapminder,\n                x=\"gdpPercap\",\n                y=\"lifeExp\",\n                size=\"pop\",\n                color=\"continent\",\n            ),\n        ),\n    ]\n)\n\ndashboard = vm.Dashboard(pages=[page])\nVizro().build(dashboard).run()\n```\n\n----------------------------------------\n\nTITLE: Generate Plotly Code from VizroAI.plot Output\nDESCRIPTION: This snippet shows how to extract the Plotly code string from the output of `VizroAI.plot` when `return_elements=True`.  It uses the generated code to produce a `plotly.graph_objects.Figure` object.  It requires `vizro_ai` and `plotly.express` and prints the generated Plotly code.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-ai/docs/pages/user-guides/advanced-options.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom vizro_ai import VizroAI\nimport plotly.express as px\n\ndf = px.data.gapminder()\nvizro_ai = VizroAI()\n\nres = vizro_ai.plot(df, \"the trend of gdp over years in the US\", return_elements=True)\nprint(res.code)\n```\n\n----------------------------------------\n\nTITLE: Loading Datasets from Kedro Catalog\nDESCRIPTION: Registers datasets from a Kedro Data Catalog with Vizro's data manager, allowing Vizro to access and visualize the data. It iterates through the catalog, retrieves dataset loaders using `kedro_integration.datasets_from_catalog`, and assigns them to the `data_manager` with the dataset name as the key.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/kedro-data-catalog.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom vizro.integrations import kedro as kedro_integration\nfrom vizro.managers import data_manager\n\n\nfor dataset_name, dataset_loader in kedro_integration.datasets_from_catalog(catalog).items():\n    data_manager[dataset_name] = dataset_loader\n```\n\n----------------------------------------\n\nTITLE: Creating KPI Cards in Python\nDESCRIPTION: This Python script creates a Vizro dashboard with various KPI cards using the `kpi_card` and `kpi_card_reference` functions. It demonstrates customization options such as aggregation functions, value formatting, and icons. It imports necessary modules from `pandas` and `vizro`.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/figure.md#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport pandas as pd\nimport vizro.models as vm\nfrom vizro import Vizro\nfrom vizro.figures import kpi_card, kpi_card_reference  # (1)!\n\ndf_kpi = pd.DataFrame({\"Actual\": [100, 200, 700], \"Reference\": [100, 300, 500], \"Category\": [\"A\", \"B\", \"C\"]})\n\nexample_cards = [\n    kpi_card(data_frame=df_kpi, value_column=\"Actual\", title=\"KPI with value\"),\n    kpi_card(data_frame=df_kpi, value_column=\"Actual\", title=\"KPI with aggregation\", agg_func=\"median\"),\n    kpi_card(\n        data_frame=df_kpi,\n        value_column=\"Actual\",\n        title=\"KPI with formatting\",\n        value_format=\"${value:.2f}\",\n    ),\n    kpi_card(\n        data_frame=df_kpi,\n        value_column=\"Actual\",\n        title=\"KPI with icon\",\n        icon=\"shopping_cart\",\n    ),\n]\n\nexample_reference_cards = [\n    kpi_card_reference(\n        data_frame=df_kpi,\n        value_column=\"Actual\",\n        reference_column=\"Reference\",\n        title=\"KPI reference (pos)\",\n    ),\n    kpi_card_reference(\n        data_frame=df_kpi,\n        value_column=\"Actual\",\n        reference_column=\"Reference\",\n        agg_func=\"median\",\n        title=\"KPI reference (neg)\",\n    ),\n    kpi_card_reference(\n        data_frame=df_kpi,\n        value_column=\"Actual\",\n        reference_column=\"Reference\",\n        title=\"KPI reference with formatting\",\n        value_format=\"{value:.2f}€\",\n        reference_format=\"{delta:+.2f}€ vs. last year ({reference:.2f}€)\",\n    ),\n    kpi_card_reference(\n        data_frame=df_kpi,\n        value_column=\"Actual\",\n        reference_column=\"Reference\",\n        title=\"KPI reference with icon\",\n        icon=\"shopping_cart\",\n    ),\n    kpi_card_reference(\n        data_frame=df_kpi,\n        value_column=\"Actual\",\n        reference_column=\"Reference\",\n        title=\"KPI reference (reverse color)\",\n        reverse_color=True,\n    ),\n]\n\npage = vm.Page(\n    title=\"KPI cards\",\n    layout=vm.Flex(direction=\"row\", wrap=True),  # (2)!\n    components=[vm.Figure(figure=figure) for figure in example_cards + example_reference_cards],\n)\n\ndashboard = vm.Dashboard(pages=[page])\nVizro().build(dashboard).run()\n```\n\n----------------------------------------\n\nTITLE: Generating Chart with Vizro-AI\nDESCRIPTION: This code snippet demonstrates how to create a chart using Vizro-AI and retrieve the underlying code and insights. It utilizes the `vizro_ai.plot()` method with `return_elements=True` to access the generated code, chart insights, and a code explanation, which can be used for further integration into a Vizro dashboard. It also displays the resulting chart object.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-ai/docs/pages/user-guides/add-generated-chart-usecase.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport vizro_ai\nfrom vizro_ai import VizroAI\nimport vizro.plotly.express as px\nfrom dotenv import load_dotenv\n\nload_dotenv()\n\ndf = px.data.gapminder()\nvizro_ai = VizroAI(model=\"gpt-4o\")\n\nresult = vizro_ai.plot(\n    df,\n    \"\"\"Plot a bubble chart to show the changes in life expectancy\n        and GDP per capita for each country over time.\n        Color the bubbles by continent.\n        Add animation on yearly basis, and do not use facets.\n        Put the legend on top\"\"\",\n    return_elements=True,\n)\n\nprint(f\"Insight:\\n{result.chart_insights}\\n\")\nprint(f\"Code explanation:\\n{result.code_explanation}\\n\\nCode:\\n{result.code_vizro}\\n\")\nresult.get_fig_object(df).show()\n```\n\n----------------------------------------\n\nTITLE: Using Different Data with Generated Chart Code\nDESCRIPTION: This code shows how to use different data with the code generated by `VizroAI.plot` while maintaining a consistent data schema. It filters the original data frame to include only data from the United States and then uses this filtered data to generate the `fig` object. Requires `vizro_ai` and `plotly.express`.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-ai/docs/pages/user-guides/advanced-options.md#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom vizro_ai import VizroAI\nimport plotly.express as px\n\ndf = px.data.gapminder()\nvizro_ai = VizroAI()\n\nres = vizro_ai.plot(df, \"the average of gdp for all continents as bar chart\", return_elements=True)\n\n# The produced chart could handle many continents, but we choose to filter for the US\ndf_us = df[df['country'] == 'United States']\nfig = res.get_fig_object(chart_name=\"different_name\", data_frame=df_us, vizro=True)\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Customizing Card Text with Markdown - Python\nDESCRIPTION: This example demonstrates how to customize card text using various Markdown features within the Vizro Card component using Python.  It showcases headers, paragraphs, block quotes, lists, and emphasis. The default Grid layout is used, distributing space evenly among the card components.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/card.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport vizro.models as vm\nfrom vizro import Vizro\n\npage = vm.Page(\n    title=\"Customizing Text\",  # (1)!\n    components=[\n        vm.Card(\n            text=\"\"\"\n                # Header level 1 <h1>\n\n                ## Header level 2 <h2>\n\n                ### Header level 3 <h3>\n\n                #### Header level 4 <h4>\n            \"\",\n        ),\n        vm.Card(\n            text=\"\"\"\n                 ### Paragraphs\n                 Commodi repudiandae consequuntur voluptatum laborum numquam blanditiis harum quisquam eius sed odit.\n\n                 Fugiat iusto fuga praesentium option, eaque rerum! Provident similique accusantium nemo autem.\n\n                 Obcaecati tenetur iure eius earum ut molestias architecto voluptate aliquam nihil, eveniet aliquid.\n\n                 Culpa officia aut! Impedit sit sunt quaerat, odit, tenetur error, harum nesciunt ipsum debitis quas.\n            \"\",\n        ),\n        vm.Card(\n            text=\"\"\"\n                ### Block Quotes\n\n                >\n                > A block quote is a long quotation, indented to create a separate block of text.\n                >\n            \"\",\n        ),\n        vm.Card(\n            text=\"\"\"\n                ### Lists\n\n                * Item A\n                    * Sub Item 1\n                    * Sub Item 2\n                * Item B\n            \"\",\n        ),\n        vm.Card(\n            text=\"\"\"\n                ### Emphasis\n\n                This word will be *italic*\n\n                This word will be **bold**\n\n                This word will be _**bold and italic**_\n            \"\",\n        ),\n    ],\n)\n\ndashboard = vm.Dashboard(pages=[page])\nVizro().build(dashboard).run()\n```\n\n----------------------------------------\n\nTITLE: Enhanced Plotly Express Chart with Parameter in Vizro\nDESCRIPTION: This code shows how to enhance a `plotly.express` chart with a reference line and allow users to control its position using a `Parameter`. It defines a function `scatter_with_line` that creates a scatter plot and adds a horizontal line.  A `Parameter` is linked to the `hline` argument of the custom chart. This demonstrates how to make custom chart arguments interactive.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/custom-charts.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport vizro.models as vm\nimport vizro.plotly.express as px\nfrom vizro import Vizro\nfrom vizro.models.types import capture\n\n\n@capture(\"graph\")\ndef scatter_with_line(data_frame, x, y, color=None, size=None, hline=None): # (1)!\n    fig = px.scatter(data_frame=data_frame, x=x, y=y, color=color, size=size)\n    fig.add_hline(y=hline, line_color=\"gray\")\n    return fig\n\n\npage = vm.Page(\n    title=\"Custom chart\",\n    components=[\n        vm.Graph(\n            id=\"enhanced_scatter\",\n            figure=scatter_with_line(\n                x=\"sepal_length\",\n                y=\"sepal_width\",\n                color=\"species\",\n                size=\"petal_width\",\n                hline=3,\n                data_frame=px.data.iris(),\n            ),\n        ),\n    ],\n    controls=[\n        vm.Parameter( # (2)!\n            targets=[\"enhanced_scatter.hline\"],\n            selector=vm.Slider(min=2, max=5, step=1, value=3, title=\"Horizontal line\"),\n        ),\n    ],\n)\n\ndashboard = vm.Dashboard(pages=[page])\nVizro().build(dashboard).run()\n```\n\n----------------------------------------\n\nTITLE: Retrieving Dashboard Code from Vizro-AI (Vizro, Python)\nDESCRIPTION: This snippet illustrates how to retrieve the Python code generated by VizroAI for a dashboard.  It's similar to the previous example, but sets `return_elements=True` when calling `vizro_ai.dashboard`.  This causes the function to return a class containing both the Vizro dashboard object and the code used to generate it.  The code then prints the `result.code` to the console. This requires `vizro`, `vizro-ai`, and `plotly` libraries.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-ai/docs/pages/user-guides/run-vizro-ai-dashboard.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport vizro.plotly.express as px\nfrom vizro_ai import VizroAI\nfrom vizro import Vizro\n\ndf = px.data.tips()\nuser_question = \"\"\"\nCreate a one-page dashboard layout with the following components:\n\n1. Card:\n   - Position: Left of the page\n   - Size: Takes up 1/4 of the total page width\n   - Content: Display the text \\\"This is Tips dataset\\\"\n\n2. Table:\n   - Position: Right of the card\n   - Size: Takes up the remaining 3/4 of the page width\n   - Content: Display the Tips dataset\n\"\"\"\nvizro_ai = VizroAI(model=\"gpt-4o-mini\")\nresult = vizro_ai.dashboard([df], user_question, return_elements=True)\n\nprint(result.code)\n```\n\n----------------------------------------\n\nTITLE: Initializing Vizro Page with Default Layout (Grid)\nDESCRIPTION: This snippet initializes a Vizro page with two Card components. Since no explicit layout is provided, the page defaults to a Grid layout with components stacked vertically in a single column. Dependencies include `vizro` and `vizro.models`.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/layouts.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom vizro import Vizro\nimport vizro.models as vm\n\npage = vm.Page(\n    title=\"two_left\",\n    components=[vm.Card(text=\"\"\"# Component 0\"\"\"),\n                vm.Card(text=\"\"\"# Component 1\"\"\")]\n\n)\n\ndashboard = vm.Dashboard(pages=[page])\nVizro().build(dashboard).run()\n```\n\n----------------------------------------\n\nTITLE: Loading Stocks Dataset Python\nDESCRIPTION: Loads the stocks dataset using `plotly.express` and assigns it to the variable `df2`. This dataset contains stock price data and is used as input to Vizro-AI for generating dashboards.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-ai/examples/example_dashboard.ipynb#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndf2 = px.data.stocks()\n```\n\n----------------------------------------\n\nTITLE: Export Data Action with Vizro in YAML\nDESCRIPTION: This YAML configuration file defines a Vizro dashboard page with a graph and a button that triggers the `export_data` action. The graph displays a scatter plot using the iris dataset, and the button allows users to download the data used in the dashboard.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/actions.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# Still requires a .py to add data to the data manager and parse YAML configuration\n# See yaml_version example\npages:\n  - components:\n      - figure:\n          _target_: scatter\n          x: sepal_width\n          y: sepal_length\n          color: species\n          size: petal_length\n          data_frame: iris\n        type: graph\n      - type: button\n        text: Export data\n        id: export_data\n        actions:\n          - function:\n              _target_: export_data\n    layout:\n      type: flex\n    title: My first page\n```\n\n----------------------------------------\n\nTITLE: AG Grid with Formatted Columns - Python\nDESCRIPTION: This example demonstrates how to format columns in an AG Grid using `cellDataType`.  The `columnDefs` parameter is used to specify formatting for numeric, dollar, and euro datatypes. It uses `dash_ag_grid` to display the formatted table. It requires the vizro, vizro.models, vizro.plotly.express, and vizro.tables libraries.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/table.md#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport vizro.models as vm\nimport vizro.plotly.express as px\nfrom vizro import Vizro\nfrom vizro.tables import dash_ag_grid\n\ndf = px.data.gapminder()\n\ncolumnDefs = [{\"field\": \"country\"}, {\"field\": \"year\"}, {\"field\": \"lifeExp\", \"cellDataType\": \"numeric\"},\n                  {\"field\": \"gdpPercap\", \"cellDataType\": \"dollar\"}, {\"field\": \"pop\", \"cellDataType\": \"numeric\"}]\n\npage = vm.Page(\n    title=\"Example of AG Grid with formatted columns\",\n    components=[\n        vm.AgGrid(\n            title=\"AG Grid with formatted columns\",\n            figure=dash_ag_grid(\n                data_frame=df,\n                columnDefs=columnDefs,\n            ),\n        )\n    ],\n)\n\ndashboard = vm.Dashboard(pages=[page])\nVizro().build(dashboard).run()\n```\n\n----------------------------------------\n\nTITLE: Nested Parameter Configuration in Vizro (Python)\nDESCRIPTION: This code snippet shows how to configure nested parameters in Vizro to modify properties within a nested object. It targets the `color_discrete_map` property within the `scatter_chart` and `bar_chart` components, allowing users to change the color of the 'virginica' species. The `Dropdown` selector provides options for different color values.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/parameters.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom vizro import Vizro\nimport vizro.plotly.express as px\nimport vizro.models as vm\n\niris = px.data.iris()\n\npage = vm.Page(\n    title=\"My first page\",\n    components=[\n        vm.Graph(\n            id=\"scatter_chart\",\n            figure=px.scatter(\n                iris,\n                x=\"sepal_width\",\n                y=\"sepal_length\",\n                color=\"species\",\n                size=\"petal_length\",\n                color_discrete_map={\"setosa\": \"#00b4ff\", \"versicolor\": \"#ff9222\"},\n            ),\n        ),\n        vm.Graph(\n            id=\"bar_chart\",\n            figure=px.bar(\n                iris,\n                x=\"sepal_width\",\n                y=\"sepal_length\",\n                color=\"species\",\n                color_discrete_map={\"setosa\": \"#00b4ff\", \"versicolor\": \"#ff9222\"},\n            ),\n        ),\n    ],\n    controls=[\n        vm.Parameter(\n            targets=[\"scatter_chart.color_discrete_map.virginica\", \"bar_chart.color_discrete_map.virginica\"],\n            selector=vm.Dropdown(\n                options=[\"#ff5267\", \"#3949ab\"],\n                multi=False,\n                value=\"#3949ab\",\n            ),\n        ),\n    ],\n)\n\ndashboard = vm.Dashboard(pages=[page])\nVizro().build(dashboard).run()\n```\n\n----------------------------------------\n\nTITLE: Plot GDP Trend with Chinese Prompt using VizroAI\nDESCRIPTION: This code snippet demonstrates how to generate a visualization of the world's average GDP trend using a Chinese prompt with Vizro-AI. It initializes VizroAI, uses a Chinese prompt to generate a plot from the gapminder dataset, and displays the resulting figure. The code relies on `vizro_ai` and `plotly.express`.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-ai/docs/pages/user-guides/use-different-languages.md#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom vizro_ai import VizroAI\nimport vizro.plotly.express as px\n\ndf = px.data.gapminder()\n\nvizro_ai = VizroAI()\nfig = vizro_ai.plot(df, \"请画一个世界年均GDP的趋势图\")\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Dash AG Grid with Pagination - Python\nDESCRIPTION: This code shows how to enable pagination in a Dash AG Grid within Vizro. It sets the `dashGridOptions` parameter to `{\"pagination\": True}` in the `dash_ag_grid` function call. This allows to navigate through rows in the table using pagination buttons instead of a vertical scroll bar. It requires the vizro, vizro.models, vizro.plotly.express, and vizro.tables libraries.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/table.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport vizro.models as vm\nimport vizro.plotly.express as px\nfrom vizro import Vizro\nfrom vizro.tables import dash_ag_grid\n\ndf = px.data.gapminder()\n\npage = vm.Page(\n    title=\"Dash AG Grid with pagination\",\n    components=[vm.AgGrid(figure=dash_ag_grid(data_frame=df, dashGridOptions={\"pagination\": True}))]\n)\n\ndashboard = vm.Dashboard(pages=[page])\nVizro().build(dashboard).run()\n```\n\n----------------------------------------\n\nTITLE: Generate Vizro Code from VizroAI.plot Output\nDESCRIPTION: This code snippet demonstrates how to obtain the Vizro code string from the output of `VizroAI.plot` when `return_elements=True`.  It uses the generated code to produce a Vizro dashboard-ready figure. It requires `vizro_ai` and `plotly.express` and prints the generated Vizro code to the console.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-ai/docs/pages/user-guides/advanced-options.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom vizro_ai import VizroAI\nimport plotly.express as px\n\ndf = px.data.gapminder()\nvizro_ai = VizroAI()\n\nres = vizro_ai.plot(df, \"the trend of gdp over years in the US\", return_elements=True)\nprint(res.code_vizro)\n```\n\n----------------------------------------\n\nTITLE: Loading JSON Configuration for Vizro Dashboard\nDESCRIPTION: This Python code snippet demonstrates how to load a Vizro dashboard configuration from a JSON file. It reads the JSON file, parses it using `json.loads`, and creates a `Dashboard` object. It registers the 'iris' dataset into the `data_manager`. The `Dashboard` object is then used to build and run the Vizro application.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/dashboard.md#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport json\nfrom pathlib import Path\n\nimport vizro.plotly.express as px\nfrom vizro import Vizro\nfrom vizro.managers import data_manager\nfrom vizro.models import Dashboard\n\ndata_manager[\"iris\"] = px.data.iris()\ndashboard = json.loads(Path(\"dashboard.json\").read_text(encoding=\"utf-8\"))\ndashboard = Dashboard(**dashboard)\n\nVizro().build(dashboard).run()\n```\n\n----------------------------------------\n\nTITLE: Generated Vizro Code Example\nDESCRIPTION: This example demonstrates the Vizro code generated by `VizroAI.plot` when `return_elements=True`. The code defines a function `custom_chart` that creates a line chart of GDP per capita over years for the United States using `vizro.plotly.express`.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-ai/docs/pages/user-guides/advanced-options.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport vizro.plotly.express as px\nfrom vizro.models.types import capture\n\n\n@capture(\"graph\")\ndef custom_chart(data_frame):\n    us_data = data_frame[data_frame[\"country\"] == \"United States\"]\n    fig = px.line(\n        us_data, x=\"year\", y=\"gdpPercap\", title=\"GDP per Capita Over Years in the US\"\n    )\n    return fig\n```\n\n----------------------------------------\n\nTITLE: Creating a Default Navigation in Vizro (Python)\nDESCRIPTION: This snippet demonstrates how to create a basic Vizro dashboard with three pages and the default navigation. It uses the `vizro`, `vizro.plotly.express`, and `vizro.models` libraries. The default navigation automatically lists all pages in a collapsible accordion menu.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/navigation.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom vizro import Vizro\nimport vizro.plotly.express as px\nimport vizro.models as vm\n\niris = px.data.iris()\n\npage_1 = vm.Page(\n    title=\"My first page\",\n    components=[\n        vm.Card(text=\"My text here\"),\n    ],\n)\npage_2 = vm.Page(\n    title=\"My second page\",\n    components=[\n        vm.Card(text=\"My text here\"),\n    ],\n)\npage_3 = vm.Page(\n    title=\"My third page\",\n    components=[\n        vm.Card(text=\"My text here\"),\n    ],\n)\n\ndashboard = vm.Dashboard(pages=[page_1, page_2, page_3])\nVizro().build(dashboard).run()\n```\n\n----------------------------------------\n\nTITLE: Data Upload and Loading with Pandas\nDESCRIPTION: This code snippet handles data uploading to the Colab environment and loading it into a Pandas DataFrame. If no file is uploaded, it uses the `gapminder` dataset from Plotly as a default example.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-ai/examples/chart_by_vizro_ai.ipynb#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport pandas as pd\nfrom google.colab import files\nfrom plotly.express.data import gapminder\n\nuploaded = files.upload()\n\nif not uploaded:\n    print(\"No files uploaded. Use the plotly gapminder dataset as an example.\")\n    df = gapminder()\nelse:\n    for fn in uploaded.keys():\n        print(f'User uploaded file \"{fn}\"')\n\n        df = pd.read_csv(fn)\nprint(f\"Dataframe used for plotting: \\n{df.head()}\")\n```\n\n----------------------------------------\n\nTITLE: Enhancing Animated Map Chart with Prompt Engineering in Python\nDESCRIPTION: This code snippet refines the animated map chart created earlier by incorporating specific directives in the prompt. It instructs Vizro-AI to show countries on the map and increase the width and height of the figure, improving the overall layout and visibility. It builds upon the previous example, requiring the same dependencies: vizro_ai and vizro.plotly.express.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-ai/docs/pages/user-guides/create-advanced-charts.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom vizro_ai import VizroAI\nimport vizro.plotly.express as px\n\ndf = px.data.gapminder()\n\nvizro_ai = VizroAI()\nfig = vizro_ai.plot(df,\n      \"\"\"Visualize GDP per capita over the years for each country using animated map chart.\n      Show countries on the map. Increase the width and height of the figure.\"\"\")\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Generate plot with VizroAI\nDESCRIPTION: Generates a line graph of GDP per capita over time for each continent using VizroAI. It takes the DataFrame and a natural language description of the desired chart as input.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-ai/docs/pages/tutorials/quickstart.md#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nvizro_ai.plot(\n    df,\n    \"\"\"create a line graph for GDP per capita since 1950 for\n    each continent. Mark the x axis as Year, y axis as GDP Per Cap\n    and don't include a title. Make sure to take average over continent.\"\"\",\n)\n```\n\n----------------------------------------\n\nTITLE: Customizing Page URLs - Python\nDESCRIPTION: This Python example shows how to create two pages and customize the URL for the second page. The first page uses the default URL (root), while the second page is assigned a custom URL path 'my-custom-url' via the `path` argument.  It includes a Card component in the first page and a Graph, Filter, and Parameter in the second page, demonstrating custom URL usage.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/pages.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport vizro.models as vm\nimport vizro.plotly.express as px\nfrom vizro import Vizro\n\ngapminder = px.data.gapminder().query(\"year == 2007\")\n\npage1 = vm.Page(\n    title=\"Page 1\",\n    components=[\n        vm.Card(\n            text=\"\"\"Commodi repudiandae consequuntur voluptatum.\"\"\",\n        ),\n    ],\n)\n\npage2 = vm.Page(\n    title=\"Page 2\",\n    path=\"my-custom-url\",\n    components=[\n        vm.Graph(\n            id=\"sunburst\", figure=px.sunburst(gapminder, path=[\"continent\", \"country\"], values=\"pop\", color=\"lifeExp\")\n        )\n    ],\n    controls=[\n        vm.Filter(column=\"continent\"),\n        vm.Parameter(targets=[\"sunburst.color\"], selector=vm.RadioItems(options=[\"lifeExp\", \"pop\"], title=\"Color\")),\n    ],\n)\n\ndashboard = vm.Dashboard(pages=[page1, page2])\nVizro().build(dashboard).run()\n```\n\n----------------------------------------\n\nTITLE: Parametrized Dynamic Data Loading with Vizro\nDESCRIPTION: This Python code demonstrates how to implement parametrized dynamic data loading in a Vizro dashboard. It defines a `load_iris_data` function that loads data from a CSV and samples a specified number of points.  A slider is used to control the `number_of_points` argument of this function, allowing users to dynamically adjust the data displayed in the graph. Requires vizro, pandas, vizro.plotly.express, vizro.models, and vizro.managers dependencies.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/data.md#_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom vizro import Vizro\nimport pandas as pd\nimport vizro.plotly.express as px\nimport vizro.models as vm\n\nfrom vizro.managers import data_manager\n\ndef load_iris_data(number_of_points=10): # (1)!\n    iris = pd.read_csv(\"iris.csv\") # (2)!\n    return iris.sample(number_of_points) # (3)!\n\ndata_manager[\"iris\"] = load_iris_data # (4)!\n\npage = vm.Page(\n    title=\"Update the chart on page refresh\",\n    components=[\n        vm.Graph(id=\"graph\", figure=px.box(\"iris\", x=\"species\", y=\"petal_width\", color=\"species\")) # (5)!\n    ],\n    controls=[\n        vm.Parameter(\n            targets=[\"graph.data_frame.number_of_points\"], # (6)!\n            selector=vm.Slider(min=10, max=100, step=10, value=10),\n        )\n    ],\n)\n\ndashboard = vm.Dashboard(pages=[page])\nVizro().build(dashboard).run()\n```\n\n----------------------------------------\n\nTITLE: Start Jupyter Notebook (bash)\nDESCRIPTION: This command starts a Jupyter Notebook server, which opens a new tab in your web browser. It allows you to create, edit, and run notebooks.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-ai/docs/pages/tutorials/quickstart-dashboard.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\njupyter notebook\n```\n\n----------------------------------------\n\nTITLE: Define Plotly Function for Rating Comparison Chart in Vizro\nDESCRIPTION: This function `rating_comparison` creates a dumbbell plot to compare 'My Rating' with 'Average Rating' for each book.  It takes a Pandas DataFrame, filters out rows where 'My Rating' is 0, and sorts the data by 'Average Rating' in descending order. It then generates a Plotly figure with scatter traces representing the dumbbell plot. The function uses different colors for 'My Rating' and 'Average Rating' to distinguish them clearly. The function is decorated with `@capture('graph')` for use in Vizro dashboards.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-ai/docs/pages/tutorials/goodreads-tutorial.md#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n@capture(\"graph\")\ndef rating_comparison(data_frame):\n    # Filter out rows where 'My Rating' is 0\n    df = data_frame[data_frame[\"My Rating\"] != 0]\n    # Sort by decreasing average rating\n    df = df.sort_values(by=\"Average Rating\", ascending=False)\n\n    # Create a figure\n    fig = go.Figure()\n\n    # Add dumbbell traces\n    for index, row in df.iterrows():\n        fig.add_trace(\n            go.Scatter(\n                x=[row[\"My Rating\"], row[\"Average Rating\"]],\n                y=[row[\"Title\"], row[\"Title\"]],\n                mode=\"markers+lines\",\n                line=dict(color=\"gray\", width=2),\n                marker=dict(color=[\"#00b4ff\", \"#ff9222\"], size=10),\n                showlegend=False,\n            )\n        )\n\n    # Update layout\n    fig.update_layout(\n        title=\"Comparison of My Rating (blue) vs Average Rating (orange)\",\n        xaxis_title=\"Rating\",\n        yaxis_title=\"Book Title\",\n        showlegend=False,\n    )\n\n    return fig\n```\n\n----------------------------------------\n\nTITLE: Create a Navigation Card with Vizro (YAML)\nDESCRIPTION: This snippet demonstrates how to create the navigation cards using a YAML configuration file. It specifies the components for each page, including the card's text and href, to define navigation within the Vizro dashboard and to external URLs.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/card.md#_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\n# Still requires a .py to add data to the data manager and parse YAML configuration\n# See yaml_version example\npages:\n  - components:\n      - text: |-\n          ### Filters and parameters\n\n          Leads to the first page on click\n        href: /filters-and-parameters\n        type: card\n      - text: |-\n          ### Google - External Link\n\n          Leads to an external link on click.\n        href: https://google.com\n        type: card\n    title: Homepage\n  - components:\n      - figure:\n          _target_: scatter\n          color: sepal_width\n          data_frame: iris\n          x: sepal_length\n          y: petal_width\n        type: graph\n    title: Filters and parameters\n```\n\n----------------------------------------\n\nTITLE: Add Title, Header, Footer to Graph - YAML\nDESCRIPTION: This snippet configures the title, header, and footer of a Vizro Graph using YAML. It specifies the chart type (scatter), data frame (iris), x and y values, and color.  It also includes multiline strings for the header and footer using the `|` character. Requires a .py file to load data.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/graph.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n# Still requires a .py to add data to the data manager and parse YAML configuration\n# See yaml_version example\npages:\n  - components:\n      - figure:\n          _target_: scatter\n          x: sepal_width\n          y: sepal_length\n          color: species\n          data_frame: iris\n        title: Relationships between Sepal Width and Sepal Length\n        header: |\n          Each point in the scatter plot represents one of the 150 iris flowers, with colors indicating their\n          types. The Setosa type is easily identifiable by its short and wide sepals.\n\n          However, there is still overlap between the Versicolor and Virginica types when considering only sepal\n          width and length.\n        footer: |\n          SOURCE: **Plotly iris data set, 2024**\n        type: graph\n    title: Formatted Graph\n```\n\n----------------------------------------\n\nTITLE: Insert Plotly Scatter Matrix Chart - Python\nDESCRIPTION: This snippet demonstrates how to insert a Plotly scatter matrix chart into a Vizro dashboard using the Graph model. It imports the necessary libraries, loads the iris dataset, creates a scatter matrix using plotly.express, and then adds the graph to a page in the dashboard.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/graph.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport vizro.models as vm\nimport vizro.plotly.express as px\nfrom vizro import Vizro\n\ndf = px.data.iris()\n\npage = vm.Page(\n    title=\"My first page\",\n    components=[\n        vm.Graph(\n            figure=px.scatter_matrix(\n                df, dimensions=[\"sepal_length\", \"sepal_width\", \"petal_length\", \"petal_width\"], color=\"species\"\n            ),\n        ),\n    ],\n)\n\ndashboard = vm.Dashboard(pages=[page])\nVizro().build(dashboard).run()\n```\n\n----------------------------------------\n\nTITLE: Default Filter Selectors in YAML\nDESCRIPTION: This YAML configuration corresponds to the default filter selectors example. It defines a page with a line chart and three filters for 'stocks', 'value', and 'date' columns, demonstrating how default selectors are configured in YAML.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/filters.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n# Still requires a .py to add data to the data manager and parse YAML configuration\n# See yaml_version example\npages:\n  - components:\n      - figure:\n          _target_: line\n          data_frame: df_stocks_long\n          x: date\n          y: value\n          color: stocks\n        type: graph\n    controls:\n      - column: stocks\n        type: filter\n      - column: value\n        type: filter\n      - column: date\n        type: filter\n    title: My first page\n```\n\n----------------------------------------\n\nTITLE: Basic Dash AG Grid with Vizro - YAML\nDESCRIPTION: This YAML configuration defines a Vizro page with an AgGrid component.  It specifies the target function as `dash_ag_grid` and provides the `gapminder` dataset as the data source.  A python file is required to load the data into the data manager and to parse this configuration. The 'type' attribute specifies 'ag_grid'.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/table.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# Still requires a .py to add data to the data manager and parse YAML configuration\n# See yaml_version example\npages:\n  - components:\n      - figure:\n          _target_: dash_ag_grid\n          data_frame: gapminder\n        type: ag_grid\n    title: Default Dash AG Grid\n```\n\n----------------------------------------\n\nTITLE: Loading Gapminder Dataset Python\nDESCRIPTION: Loads the Gapminder dataset using `plotly.express` and assigns it to the variable `df1`. This dataset contains historical data on countries' development indicators and is used as input to Vizro-AI for generating dashboards.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-ai/examples/example_dashboard.ipynb#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndf1 = px.data.gapminder()\n```\n\n----------------------------------------\n\nTITLE: Defining complex grid layout (1t_3b)\nDESCRIPTION: Defines a complex Vizro grid layout with two rows: the top row with a single component, and the bottom row with three separate components, using the `vm.Grid` function.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/layouts.md#_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nlayout=vm.Grid(grid=[[0,0,0],[1,2,3]])\n```\n\n----------------------------------------\n\nTITLE: Initializing Flex Layout with default settings in Vizro\nDESCRIPTION: This Python code initializes a Vizro Page with a Flex layout and adds multiple Graph components. The Flex layout is set with default parameters, arranging the graphs vertically. The `px.violin` function creates violin plots from the `tips` dataset.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/layouts.md#_snippet_25\n\nLANGUAGE: python\nCODE:\n```\nimport vizro.models as vm\nfrom vizro import Vizro\nimport vizro.plotly.express as px\n\ntips = px.data.tips()\n\npage = vm.Page(\n    title=\"Flex - basic example\",\n    layout=vm.Flex(),\n    components=[vm.Graph(figure=px.violin(tips, y=\"tip\", x=\"day\", color=\"day\")) for i in range(5)],\n)\n\ndashboard = vm.Dashboard(pages=[page])\nVizro().build(dashboard).run()\n```\n\n----------------------------------------\n\nTITLE: Configuring Graph filter_interaction in Vizro (YAML)\nDESCRIPTION: This YAML configuration demonstrates how to set up cross-filtering for Graph components in a Vizro dashboard. It defines two Graph components, where the first Graph filters the second based on selections made. It uses `_target_` to reference existing functions or data.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/actions.md#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n# Still requires a .py to add data to the data manager and parse YAML configuration\n# See yaml_version example\npages:\n  - components:\n      - type: graph\n        figure:\n          _target_: box\n          data_frame: gapminder\n          color: continent\n          x: continent\n          y: lifeExp\n          custom_data:\n            - continent\n        actions:\n          - function:\n              _target_: filter_interaction\n              targets:\n                - scatter_relation_2007\n      - type: graph\n        id: scatter_relation_2007\n        figure:\n          _target_: scatter\n          data_frame: gapminder\n          color: continent\n          x: gdpPercap\n          y: lifeExp\n          size: pop\n    title: Filter interaction\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Bar Chart with Data Aggregation in Vizro\nDESCRIPTION: This code defines a custom bar chart function `bar_mean` that aggregates data using `groupby` and calculates the mean of a specified column ('y') based on another column ('x'). It then creates a Plotly bar chart from the aggregated data using `px.bar`, customizing the labels and bar width.  The function is decorated with `@capture(\"graph\")` to enable Vizro integration. The function takes a pandas DataFrame `data_frame` along with column names `x` and `y` as input.  It returns a Plotly figure representing the aggregated bar chart.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/tutorials/explore-components.md#_snippet_18\n\nLANGUAGE: python\nCODE:\n```\n@capture(\"graph\")\ndef bar_mean(data_frame, x, y):\n    df_agg = data_frame.groupby(x).agg({y: \"mean\"}).reset_index()\n    fig = px.bar(df_agg, x=x, y=y, labels={\"tip\": \"Average Tip ($)\"})\n    fig.update_traces(width=0.6)\n    return fig\n```\n\n----------------------------------------\n\nTITLE: Formatted AgGrid Configuration (Python)\nDESCRIPTION: This Python code demonstrates how to configure a formatted AgGrid within a Vizro dashboard. It includes the use of `title`, `header`, and `footer` arguments to provide context and description to the displayed data. The `dashGridOptions` are set to enable pagination.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/table.md#_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nimport vizro.models as vm\nimport vizro.plotly.express as px\nfrom vizro import Vizro\nfrom vizro.tables import dash_ag_grid\n\ngapminder_2007 = px.data.gapminder().query(\"year == 2007\")\n\npage = vm.Page(\n    title=\"Formatted AgGrid\",\n    components=[\n        vm.AgGrid(\n            figure=dash_ag_grid(data_frame=gapminder_2007, dashGridOptions={\"pagination\": True}),\n            title=\"Gapminder Data Insights\",\n            header=\"\"\"#### An Interactive Exploration of Global Health, Wealth, and Population\"\"\",\n            footer=\"\"\"SOURCE: **Plotly gapminder data set, 2024**\"\"\",\n        )\n    ],\n)\n\ndashboard = vm.Dashboard(pages=[page])\nVizro().build(dashboard).run()\n```\n\n----------------------------------------\n\nTITLE: Using a NavBar in Vizro (Python - Full Example)\nDESCRIPTION: This snippet provides a full example of how to create pages and display the navigation using `NavBar` to group the pages and display the groups with icons.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/navigation.md#_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom vizro import Vizro\nimport vizro.plotly.express as px\nimport vizro.models as vm\n\niris = px.data.iris()\n\npage_1 = vm.Page(\n    title=\"My first page\",\n    components=[\n        vm.Card(text=\"My text here\"),\n    ],\n)\npage_2 = vm.Page(\n    title=\"My second page\",\n    components=[\n        vm.Card(text=\"My text here\"),\n    ],\n)\npage_3 = vm.Page(\n    title=\"My third page\",\n    components=[\n        vm.Card(text=\"My text here\"),\n    ],\n)\n\ndashboard = vm.Dashboard(\n    pages=[page_1, page_2, page_3],\n    navigation=vm.Navigation(\n        pages={\"Group A\": [\"My first page\", \"My second page\"], \"Group B\": [\"My third page\"]}, nav_selector=vm.NavBar()\n    ),\n)\n\nVizro().build(dashboard).run()\n```\n\n----------------------------------------\n\nTITLE: Initializing Vizro Page with Custom Grid Layout (Python)\nDESCRIPTION: This snippet demonstrates initializing a Vizro page with a custom Grid layout. It defines a 2x2 grid and assigns three Card components to specific locations within the grid. The page utilizes `vizro` and `vizro.models`. The `layout` parameter uses `vm.Grid` to customize component arrangement.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/layouts.md#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport vizro.models as vm\nfrom vizro import Vizro\n\npage = vm.Page(\n    title=\"one_left_two_right\",\n    layout=vm.Grid(grid=[[0, 1],\n                               [0, 2]]),\n    components=[vm.Card(text=\"\"\"# Component 0\"\"\"),\n                vm.Card(text=\"\"\"# Component 1\"\"\"),\n                vm.Card(text=\"\"\"# Component 2\"\"\"),\n                ],\n)\n\ndashboard = vm.Dashboard(pages=[page])\nVizro().build(dashboard).run()\n```\n\n----------------------------------------\n\nTITLE: Integrating Data Catalog from Project Path\nDESCRIPTION: Shows how to create a Kedro Data Catalog from a Kedro project path and register its datasets with Vizro's data manager. It utilizes the `catalog_from_project` helper function from `vizro.integrations.kedro` to generate the catalog.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/kedro-data-catalog.md#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom vizro.integrations import kedro as kedro_integration\nfrom vizro.managers import data_manager\n\nproject_path = \"/path/to/kedro/project\"\ncatalog = kedro_integration.catalog_from_project(project_path)\n\n\nfor dataset_name, dataset_loader in kedro_integration.datasets_from_catalog(catalog).items():\n    data_manager[dataset_name] = dataset_loader\n```\n\n----------------------------------------\n\nTITLE: Obtain Vizro Ready fig Object\nDESCRIPTION: This code demonstrates how to obtain a Vizro-themed `fig` object from the output of `VizroAI.plot` when `return_elements=True`. The `get_fig_object` method is used with `vizro=True` to apply the Vizro dark theme. Requires `vizro_ai` and `plotly.express`.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-ai/docs/pages/user-guides/advanced-options.md#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom vizro_ai import VizroAI\nimport plotly.express as px\n\ndf = px.data.gapminder()\nvizro_ai = VizroAI()\n\nres = vizro_ai.plot(df, \"the trend of gdp over years in the US\", return_elements=True)\nfig = res.get_fig_object(data_frame=df, vizro=True)\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Defining complex grid layout (1l_3r)\nDESCRIPTION: Defines a complex Vizro grid layout with two columns: the left with a single component and the right with a set of three horizontally stacked components, using the `vm.Grid` function.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/layouts.md#_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nlayout=vm.Grid(grid=[[0,1],[0,2],[0,3]])\n```\n\n----------------------------------------\n\nTITLE: Collapsible Container in Grid Layout (Python)\nDESCRIPTION: This Python code demonstrates collapsible Vizro containers within a `Grid` layout using the `collapsed` argument.  It creates two containers, one initially collapsed and the other initially expanded, displaying scatter and box plots of the Iris dataset. It relies on `vizro`, `vizro.models`, and `vizro.plotly.express` modules.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/container.md#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport vizro.models as vm\nimport vizro.plotly.express as px\nfrom vizro import Vizro\n\niris = px.data.iris()\n\npage = vm.Page(\n    title=\"Collapsible containers\",\n    layout=vm.Grid(grid=[[0, 1]]),\n    components=[\n        vm.Container(\n            title=\"Initially collapsed container\",\n            components=[vm.Graph(figure=px.scatter(iris, x=\"sepal_width\", y=\"sepal_length\", color=\"species\"))],\n            collapsed=True,\n        ),\n        vm.Container(\n            title=\"Initially expanded container\",\n            components=[vm.Graph(figure=px.box(iris, x=\"species\", y=\"sepal_length\", color=\"species\"))],\n            collapsed=False,\n        )\n    ],\n)\n\ndashboard = vm.Dashboard(pages=[page])\nVizro().build(dashboard).run()\n```\n\n----------------------------------------\n\nTITLE: Insert Plotly Scatter Matrix Chart - YAML\nDESCRIPTION: This snippet demonstrates how to define a Plotly scatter matrix chart in a Vizro dashboard configuration using YAML.  It specifies the target function (scatter_matrix), data frame (iris), dimensions, and color. Requires a .py file to load data.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/graph.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# Still requires a .py to add data to the data manager and parse YAML configuration\n# See yaml_version example\npages:\n  - components:\n      - figure:\n          _target_: scatter_matrix\n          color: species\n          data_frame: iris\n          dimensions: [sepal_length, sepal_width, petal_length, petal_width]\n        type: graph\n    title: My first page\n```\n\n----------------------------------------\n\nTITLE: Customize Card Style with `extra` (YAML)\nDESCRIPTION: This snippet demonstrates how to customize the Vizro Card component's style within a YAML configuration file, utilizing the `extra` argument to set a fixed height and width. This provides a way to directly modify the underlying Dash component properties through YAML.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/card.md#_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\npages:\n  - title: Card with fixed dimensions\n    components:\n      - type: card\n        text: This card has fixed dimensions 200x100.\n        extra:\n          style:\n            height: 100px\n            width: 200px\n```\n\n----------------------------------------\n\nTITLE: Custom chart with Vizro\nDESCRIPTION: Defines a custom chart function that groups data by year and continent, calculates the mean GDP per capita, and creates a line chart using plotly express.  This function demonstrates how to create a reusable chart component within a Vizro application.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-ai/docs/pages/tutorials/quickstart.md#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom vizro.models.types import capture\nimport vizro.plotly.express as px\nimport pandas as pd\n\n\n@capture(\"graph\")\ndef custom_chart(data_frame):\n    df = data_frame.groupby([\"year\", \"continent\"])[\"gdpPercap\"].mean().unstack().reset_index()\n    fig = px.line(df, x=\"year\", y=[\"Africa\", \"Americas\", \"Asia\", \"Europe\", \"Oceania\"])\n    return fig\n\n\nfig = custom_chart(data_frame=df)\n```\n\n----------------------------------------\n\nTITLE: Styled Dash DataTable Configuration (Python)\nDESCRIPTION: This code snippet demonstrates how to create a styled Dash DataTable within a Vizro dashboard. It includes conditional formatting for different columns and data values. It uses the `vizro.models` for defining the page and table, and `vizro.plotly.express` for sample data.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/table.md#_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nimport vizro.models as vm\nimport vizro.plotly.express as px\nfrom vizro import Vizro\nfrom vizro.tables import dash_data_table\n\ndf = px.data.gapminder().query(\"year == 2007\")\n\ncolumn_definitions = [\n    {\"name\": \"country\", \"id\": \"country\", \"type\": \"text\", \"editable\": False},\n    {\"name\": \"continent\", \"id\": \"continent\", \"type\": \"text\"},\n    {\"name\": \"year\", \"id\": \"year\", \"type\": \"datetime\"},\n    {\"name\": \"lifeExp\", \"id\": \"lifeExp\", \"type\": \"numeric\"},\n    {\"name\": \"pop\", \"id\": \"pop\", \"type\": \"numeric\"},\n    {\"name\": \"gdpPercap\", \"id\": \"gdpPercap\", \"type\": \"numeric\"},\n]\n\nstyle_data_conditional = [\n    {\n        \"if\": {\n            \"column_id\": \"year\",\n        },\n        \"backgroundColor\": \"dodgerblue\",\n        \"color\": \"white\",\n    },\n    {\"if\": {\"filter_query\": \"{lifeExp} < 55\", \"column_id\": \"lifeExp\"}, \"backgroundColor\": \"#85144b\", \"color\": \"white\"},\n    {\n        \"if\": {\"filter_query\": \"{gdpPercap} > 10000\", \"column_id\": \"gdpPercap\"},\n        \"backgroundColor\": \"green\",\n        \"color\": \"white\",\n    },\n    {\"if\": {\"column_type\": \"text\"}, \"textAlign\": \"left\"},\n    {\n        \"if\": {\"state\": \"active\"},\n        \"backgroundColor\": \"rgba(0, 116, 217, 0.3)\",\n        \"border\": \"1px solid rgb(0, 116, 217)\",\n    },\n]\n\nstyle_header_conditional = [{\"if\": {\"column_type\": \"text\"}, \"textAlign\": \"left\"}]\n\npage = vm.Page(\n    title=\"Example of a styled Dash DataTable\",\n    components=[\n        vm.Table(\n            title=\"Styled table\",\n            figure=dash_data_table(\n                data_frame=df,\n                columns=column_definitions,\n                sort_action=\"native\",\n                editable=True,\n                style_data_conditional=style_data_conditional,\n                style_header_conditional=style_header_conditional,\n            ),\n        ),\n    ],\n)\n\ndashboard = vm.Dashboard(pages=[page])\nVizro().build(dashboard).run()\n```\n\n----------------------------------------\n\nTITLE: Basic Filter Configuration in YAML\nDESCRIPTION: This YAML configuration corresponds to the basic filter example in Python. It defines a page with a scatter plot and a filter for the 'species' column.  It demonstrates how to configure the same dashboard elements using YAML.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/filters.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# Still requires a .py to add data to the data manager and parse YAML configuration\n# See yaml_version example\npages:\n  - components:\n      - figure:\n          _target_: scatter\n          data_frame: iris\n          x: sepal_length\n          y: petal_width\n          color: species\n        type: graph\n    controls:\n      - column: species\n        type: filter\n    title: My first page\n```\n\n----------------------------------------\n\nTITLE: Custom Action with Graph ClickData Input in Vizro\nDESCRIPTION: This snippet demonstrates creating a custom action that utilizes the `clickData` from a `vm.Graph` component to display information about the clicked point in a `vm.Card` component. The custom action function `my_custom_action` retrieves the x, y coordinates, and species information from the `clickData` and constructs a text string to update the `vm.Card`. The `inputs` parameter is used to provide the clickData to the function at runtime.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/custom-actions.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport vizro.models as vm\nimport vizro.plotly.express as px\nfrom vizro import Vizro\nfrom vizro.models.types import capture\n\ndf = px.data.iris()\n\n@capture(\"action\")\ndef my_custom_action(show_species: bool, points_data: dict): # (1)!\n    \"\"\"Custom action.\"\"\"\n    clicked_point = points_data[\"points\"][0]\n    x, y = clicked_point[\"x\"], clicked_point[\"y\"]\n    text = f\"Clicked point has sepal length {x}, petal width {y}\"\n\n    if show_species:\n        species = clicked_point[\"customdata\"][0]\n        text += f\" and species {species}\"\n    return text\n\npage = vm.Page(\n    title=\"Action with clickData as input\",\n    components=[\n        vm.Graph(\n            id=\"scatter_chart\",\n            figure=px.scatter(df, x=\"sepal_length\", y=\"petal_width\", color=\"species\", custom_data=[\"species\"]),\n            actions=[\n                vm.Action(\n                    function=my_custom_action(show_species=True), # (2)!\n                    inputs=[\"scatter_chart.clickData\"], # (3)!\n                    outputs=[\"my_card.children\"],\n                ),\n            ],\n        ),\n        vm.Card(id=\"my_card\", text=\"Click on a point on the above graph.\"),\n    ],\n)\n\ndashboard = vm.Dashboard(pages=[page])\nVizro().build(dashboard).run()\n```\n\n----------------------------------------\n\nTITLE: Environment setup with Vizro-AI and LangChain\nDESCRIPTION: This snippet imports necessary libraries for using Vizro-AI and LangChain together. It initializes a ChatOpenAI model, which will be used by Vizro-AI to generate code.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-ai/docs/pages/user-guides/vizro-ai-langchain-guide.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom copy import deepcopy\nfrom typing import Annotated, Any\n\nimport pandas as pd\nimport vizro.plotly.express as px\nfrom langchain_core.runnables import chain\nfrom langchain_core.tools import InjectedToolArg, tool\nfrom langchain_openai import ChatOpenAI\nfrom vizro_ai import VizroAI\n\nllm = ChatOpenAI(model=\"gpt-4\")\n```\n\n----------------------------------------\n\nTITLE: Initializing VizroAI with Custom LLM\nDESCRIPTION: This code shows how to initialize VizroAI with a custom-configured LLM instance. This allows for greater control over model parameters and the use of models not directly supported by the string-based initialization.  It requires importing the LLM class and setting up environment variables for API keys and endpoints.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-ai/docs/pages/user-guides/customize-vizro-ai.md#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom langchain_openai import AzureChatOpenAI\n\nllm = AzureChatOpenAI(\n    azure_deployment=\"gpt-4-1106-preview\",\n    api_version=\"2024-04-01-preview\",\n    temperature=0.4,\n    azure_endpoint=os.environ[\"AZURE_OPENAI_ENDPOINT\"],\n    api_key=os.environ[\"AZURE_OPENAI_API_KEY\"]\n)\n\nvizro_ai = VizroAI(model=llm)\n```\n\n----------------------------------------\n\nTITLE: Add KPI Card Figure to Vizro Page - Python\nDESCRIPTION: This Python code demonstrates how to add a KPI card figure to a Vizro page using the `vizro.figures.kpi_card` function. It imports necessary Vizro models, uses `plotly.express` for data, and defines a page with a KPI card component that displays the average tip amount. The page includes a filter for the 'day' column and utilizes a Flex layout for appropriate spacing. Dependencies include `vizro`, `vizro.models`, `vizro.plotly.express`, and `vizro.figures`.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/figure.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport vizro.models as vm\nimport vizro.plotly.express as px\nfrom vizro import Vizro\nfrom vizro.figures import kpi_card  # (1)!\n\ntips = px.data.tips\n\npage = vm.Page(\n    title=\"KPI card\",\n    layout=vm.Flex(direction=\"row\"),  # (2)!\n    components=[\n        vm.Figure(\n            figure=kpi_card(\n                data_frame=tips,\n                value_column=\"tip\",\n                value_format=\"${value:.2f}\",\n                icon=\"shopping_cart\",\n                title=\"Average Price\",\n            )\n        )\n    ],\n    controls=[vm.Filter(column=\"day\", selector=vm.RadioItems())],\n)\n\ndashboard = vm.Dashboard(pages=[page])\nVizro().build(dashboard).run()\n```\n\n----------------------------------------\n\nTITLE: Creating a Cumulative Reading Chart with Pages and Books using Plotly\nDESCRIPTION: This code generates a chart showing the cumulative total of pages read and the total books read per year using Plotly. It converts the 'Date Read' column to datetime objects, groups data by year, calculates cumulative pages and books read, and then uses `make_subplots` to create a chart with two y-axes.  The function is decorated with `@capture(\"graph\")` to indicate that it generates a graph component for Vizro.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-ai/docs/pages/tutorials/goodreads-tutorial.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport pandas as pd\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\nfrom vizro.models.types import capture\n\n\n@capture(\"graph\")\ndef custom_chart(data_frame):\n    # Convert Date Read to datetime\n    data_frame[\"Date Read\"] = pd.to_datetime(data_frame[\"Date Read\"], dayfirst=True)\n\n    # Group by year and sum pages\n    pages_per_year = data_frame.groupby(data_frame[\"Date Read\"].dt.year)[\"Number of Pages\"].sum().cumsum()\n\n    # Count books per year\n    books_per_year = data_frame.groupby(data_frame[\"Date Read\"].dt.year).size()\n\n    # Create subplot\n    fig = make_subplots(specs=[[{\"secondary_y\": True}]])\n\n    # Add line for cumulative pages\n    fig.add_trace(\n        go.Scatter(\n            x=pages_per_year.index,\n            y=pages_per_year,\n            mode=\"lines\",\n            name=\"Cumulative Pages\",\n        ),\n        secondary_y=False,\n    )\n\n    # Add bar for books count\n    fig.add_trace(\n        go.Bar(x=books_per_year.index, y=books_per_year, name=\"Total Books\"),\n        secondary_y=True,\n    )\n\n    # Set y-axes titles\n    fig.update_yaxes(title_text=\"Cumulative Pages\", secondary_y=False)\n    fig.update_yaxes(title_text=\"Total Books\", secondary_y=True)\n\n    # Set layout\n    fig.update_layout(title=\"Pages and Book totals\", xaxis_title=\"Year\", showlegend=True)\n\n    return fig\n```\n\n----------------------------------------\n\nTITLE: Creating Advanced Grid Layout in Vizro using Python\nDESCRIPTION: This code snippet demonstrates how to create an advanced grid layout in Vizro using Python. It imports necessary Vizro modules, loads the gapminder dataset, defines a page with a custom grid layout, and adds multiple graphs to the page. The grid is defined using a 2D list, specifying the row and column indices for each component.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/layouts.md#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport vizro.models as vm\nimport vizro.plotly.express as px\nfrom vizro import Vizro\n\ngapminder = px.data.gapminder()\n\npage = vm.Page(\n    title=\"Custom Grid - Advanced Example\",\n    layout=vm.Grid(grid=[[0, 1, 3, 4],\n                                [2, 2, 3, 4]]),\n    components=[\n        vm.Graph(\n            figure=px.line(\n                gapminder,\n                title=\"Graph 1\",\n                x=\"year\",\n                y=\"lifeExp\",\n                color=\"continent\",\n            ),\n        ),\n        vm.Graph(\n            figure=px.scatter(\n                gapminder,\n                title=\"Graph 2\",\n                x=\"gdpPercap\",\n                y=\"lifeExp\",\n                size=\"pop\",\n                color=\"continent\",\n            ),\n        ),\n        vm.Graph(\n            figure=px.box(\n                gapminder,\n                title=\"Graph 3\",\n                x=\"continent\",\n                y=\"lifeExp\",\n                color=\"continent\",\n            ),\n        ),\n        vm.Graph(\n            figure=px.line(\n                gapminder,\n                title=\"Graph 4\",\n                x=\"year\",\n                y=\"lifeExp\",\n                color=\"continent\",\n            ),\n        ),\n        vm.Graph(\n            figure=px.scatter(\n                gapminder,\n                title=\"Graph 5\",\n                x=\"gdpPercap\",\n                y=\"lifeExp\",\n                size=\"pop\",\n                color=\"continent\",\n            ),\n        ),\n    ],\n)\n\ndashboard = vm.Dashboard(pages=[page])\nVizro().build(dashboard).run()\n```\n\n----------------------------------------\n\nTITLE: Printing Generated Code Python\nDESCRIPTION: Prints the generated code for the Vizro dashboard using `print(result.code)`. This allows you to inspect the code generated by Vizro-AI and understand how it implements the requested dashboard functionality. The `noqa: T201` comment disables a Flake8 warning about using `print`.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-ai/examples/example_dashboard.ipynb#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nprint(result.code)  # noqa: T201\n```\n\n----------------------------------------\n\nTITLE: Data Upload to Colab\nDESCRIPTION: This code snippet handles data upload to the Google Colab environment. It allows the user to upload CSV files or use a default example dataset (plotly gapminder) if no files are uploaded. The uploaded dataframes are stored in a list called `dfs`.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-ai/examples/dashboard_by_vizro_ai.ipynb#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport pandas as pd\nfrom google.colab import files\nfrom plotly.express.data import gapminder\n\nuploaded = files.upload()\n\ndfs = []\n\nif not uploaded:\n    print(\"No files uploaded. Use the plotly gapminder dataset as an example.\")\n    df = gapminder()\n    dfs.append(df)\nelse:\n    for fn in uploaded.keys():\n        print(f'User uploaded file \"{fn}\"')\n\n        df_uploaded = pd.read_csv(fn)\n        dfs.append(df_uploaded)\n```\n\n----------------------------------------\n\nTITLE: Customize Card Style with `extra` (Python)\nDESCRIPTION: This snippet shows how to use the `extra` argument of the Vizro Card component to customize its style, specifically setting a fixed height and width. This allows for direct modification of the underlying Dash component properties.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/card.md#_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nimport vizro.models as vm\nfrom vizro import Vizro\n\npage = vm.Page(\n     title=\"Card with fixed dimensions\",\n     components=[\n         vm.Card(\n             text=\"This card has fixed dimensions 200x100.\",\n             extra={\"style\": {\"height\": \"100px\", \"width\": \"200px\"}},\n         ),\n     ],\n)\n\ndashboard = vm.Dashboard(pages=[page])\nVizro().build(dashboard).run()\n```\n\n----------------------------------------\n\nTITLE: YAML Configuration for Vizro Page with Default Layout\nDESCRIPTION: This YAML snippet defines a Vizro page with two Card components, similar to the Python example. It demonstrates the YAML configuration required to achieve the same layout (default Grid, vertical stacking). This configuration requires a .py file to load data and parse the YAML.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/layouts.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# Still requires a .py to add data to the data manager and parse YAML configuration\n# See yaml_version example\npages:\n  - components:\n      - text: |\n          # Component 0\n        type: card\n      - text: |\n          # Component 1\n        type: card\n    title: two_left\n```\n\n----------------------------------------\n\nTITLE: Collapsible Container in Flex Layout (Python)\nDESCRIPTION: This Python code demonstrates collapsible Vizro containers within a `Flex` layout using the `collapsed` argument. It creates two containers, one initially collapsed and the other initially expanded, displaying scatter and box plots of the Iris dataset.  It relies on `vizro`, `vizro.models`, and `vizro.plotly.express` modules.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/container.md#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport vizro.models as vm\nimport vizro.plotly.express as px\nfrom vizro import Vizro\n\niris = px.data.iris()\n\npage = vm.Page(\n    title=\"Collapsible containers\",\n    layout=vm.Flex(),  # (1)!\n    components=[\n        vm.Container(\n            title=\"Initially collapsed container\",\n            components=[vm.Graph(figure=px.scatter(iris, x=\"sepal_width\", y=\"sepal_length\", color=\"species\"))],\n            collapsed=True,\n        ),\n        vm.Container(\n            title=\"Initially expanded container\",\n            components=[vm.Graph(figure=px.box(iris, x=\"species\", y=\"sepal_length\", color=\"species\"))],\n            collapsed=False,\n        )\n    ],\n)\n\ndashboard = vm.Dashboard(pages=[page])\nVizro().build(dashboard).run()\n```\n\n----------------------------------------\n\nTITLE: Combine Flex and Grid Layout - Python\nDESCRIPTION: This Python code shows how to combine `Grid` and `Flex` layouts in a Vizro dashboard. It creates a page with a `Grid` layout containing two graphs and a `Container` with a `Flex` layout. The `Flex` layout within the container arranges multiple `Card` components. Requires `vizro`, `vizro.models`, and `vizro.plotly.express` libraries.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/layouts.md#_snippet_33\n\nLANGUAGE: python\nCODE:\n```\nimport vizro.models as vm\nimport vizro.plotly.express as px\nfrom vizro import Vizro\n\ntips = px.data.tips()\n\npage = vm.Page(\n    title=\"Combine Flex and Grid\",\n    layout=vm.Grid(grid=[[0, 1], [2, 2]]),\n    components=[\n        vm.Graph(figure=px.violin(tips, y=\"tip\", x=\"day\", color=\"day\", box=True)),\n        vm.Graph(figure=px.histogram(tips, x=\"total_bill\")),\n        vm.Container(\n            title=\"Flexbox with Cards\",\n            layout=vm.Flex(direction=\"row\", wrap=True),\n            components=[\n                vm.Card(\n                    text=\"\"\"\n                                # Lorem Ipsum\n\n                                Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aliquam sed elementum ligula, in pharetra velit.\n                                In ultricies est ac mauris vehicula fermentum. Curabitur faucibus elementum lectus, vitae luctus libero fermentum.\n                                Name ut ipsum tortor. Praesent ut nulla risus. Praesent in dignissim nulla. In quis blandit ipsum.\n                            \"\"\",\n                    extra={\"style\": {\"width\": \"240px\"}},\n                )\n                for i in range(6)\n            ],\n        ),\n    ],\n)\n\ndashboard = vm.Dashboard(pages=[page])\nVizro().build(dashboard).run()\n```\n\n----------------------------------------\n\nTITLE: Change Dashboard Theme in app.py\nDESCRIPTION: This code snippet demonstrates how to change the theme of a Vizro dashboard using the `theme` argument in the `Dashboard` model. It creates a simple dashboard with a scatter matrix plot and sets the theme to 'vizro_light'. Requires the `vizro`, `vizro.models`, and `vizro.plotly.express` libraries.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/themes.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport vizro.models as vm\nimport vizro.plotly.express as px\nfrom vizro import Vizro\n\ndf = px.data.iris()\n\npage = vm.Page(\n    title=\"Changing themes\",\n    components=[\n        vm.Graph(\n            figure=px.scatter_matrix(\n                df, dimensions=[\"sepal_length\", \"sepal_width\", \"petal_length\", \"petal_width\"], color=\"species\"\n            ),\n        ),\n    ],\n)\n\ndashboard = vm.Dashboard(pages=[page], theme=\"vizro_light\")\nVizro().build(dashboard).run()\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Containers in Vizro (YAML)\nDESCRIPTION: This snippet demonstrates how to create two containers within a Vizro Page using YAML. The first container includes a scatter plot and a bar chart arranged in a grid layout. The second container contains a scatter plot with marginal distributions.  Requires a .py file for data and config parsing.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/container.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# Still requires a .py to add data to the data manager and parse YAML configuration\n# See yaml_version example\npages:\n  - components:\n      - components:\n          - figure:\n              _target_: scatter\n              data_frame: iris\n              x: sepal_length\n              y: petal_width\n              color: species\n              title: Container I - Scatter\n            type: graph\n          - figure:\n              _target_: bar\n              data_frame: iris\n              x: sepal_length\n              y: sepal_width\n              color: species\n              title: Container I - Bar\n            type: graph\n        layout:\n          grid: [[0, 1]]\n          type: grid\n        type: container\n        title: Container I\n      - components:\n          - figure:\n              _target_: scatter\n              data_frame: iris\n              x: sepal_width\n              y: sepal_length\n              color: species\n              marginal_y: violin\n              marginal_x: box\n              title: Container II - Scatter\n            type: graph\n        type: container\n        title: Container II\n```\n\n----------------------------------------\n\nTITLE: Basic Parameter Configuration in Vizro (YAML)\nDESCRIPTION: This YAML configuration demonstrates how to define a basic parameter for a Vizro dashboard. It specifies the `scatter_chart.title` as the target and uses a dropdown selector with predefined options to control the title.  It relies on a corresponding Python script to load data and initialize the Vizro application.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/parameters.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# Still requires a .py to add data to the data manager and parse YAML configuration\n# See yaml_version example\npages:\n  - components:\n      - figure:\n          _target_: scatter\n          data_frame: iris\n          x: sepal_length\n          y: petal_width\n          color: species\n        id: scatter_chart\n        type: graph\n    controls:\n      - selector:\n          options: [My scatter chart, A better title!, Another title...]\n          multi: false\n          type: dropdown\n        targets:\n          - scatter_chart.title\n        type: parameter\n    title: My first page\n```\n\n----------------------------------------\n\nTITLE: Build and Run Vizro Dashboard (Python)\nDESCRIPTION: This Python code builds the Vizro dashboard using the `Vizro().build(dashboard).run()` method. It takes the `dashboard` object generated by Vizro-AI, prepares it for display, and then runs the dashboard, making it accessible in a web browser.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-ai/docs/pages/tutorials/quickstart-dashboard.md#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom vizro import Vizro\nVizro().build(dashboard).run()\n```\n\n----------------------------------------\n\nTITLE: Setting custom_data for Graph filtering in Vizro (Python)\nDESCRIPTION: This code snippet shows how to set the `custom_data` argument in a Plotly Express scatter plot used within a Vizro `Graph` component.  The `custom_data` parameter specifies the columns used for filtering when the `filter_interaction` action is triggered.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/actions.md#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nGraph(figure=px.scatter(..., custom_data=[\"continent\"]))\n```\n\n----------------------------------------\n\nTITLE: Set Theme for Selected Charts\nDESCRIPTION: This code snippet demonstrates how to set the theme for a specific plotly chart using the `template` parameter. It imports `vizro.plotly.express`, creates a scatter matrix plot, and sets the `template` parameter to 'vizro_light'.  This only affects the specific chart created.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/themes.md#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport vizro.plotly.express as px\n\ndf = px.data.iris()\npx.scatter_matrix(\n    df,\n    dimensions=[\"sepal_length\", \"sepal_width\", \"petal_length\", \"petal_width\"],\n    color=\"species\",\n    template=\"vizro_light\",\n)\n```\n\n----------------------------------------\n\nTITLE: Prepare Gapminder Data (Python)\nDESCRIPTION: This Python code loads the Gapminder dataset using `vizro.plotly.express` and assigns it to the `df` variable. This dataset is used as input for the Vizro-AI dashboard generation.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-ai/docs/pages/tutorials/quickstart-dashboard.md#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport vizro.plotly.express as px\n\ndf = px.data.gapminder(datetimes=True, pretty_names=True)\n```\n\n----------------------------------------\n\nTITLE: Inline Radio Items - app.py (Python)\nDESCRIPTION: This code snippet demonstrates how to make a RadioItems selector display inline instead of stacked vertically by using the `extra` argument to pass the `inline: True` property to the underlying Dash component.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/selectors.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport vizro.models as vm\nimport vizro.plotly.express as px\nfrom vizro import Vizro\n\niris = px.data.iris()\n\npage = vm.Page(\n    title=\"Inline Radio Items\",\n    components=[\n        vm.Graph(\n            figure=px.scatter(iris, x=\"sepal_length\", y=\"sepal_width\")\n        ),\n    ],\n    controls=[\n        vm.Filter(\n            column=\"species\",\n            selector=vm.RadioItems(\n                title=\"Select Species\",\n                extra={\"inline\": True}\n            )\n        )\n    ]\n)\n\ndashboard = vm.Dashboard(pages=[page])\nVizro().build(dashboard).run()\n```\n\n----------------------------------------\n\nTITLE: Defining complex grid layout (2t_2b)\nDESCRIPTION: Defines a complex Vizro grid layout with two rows where each row contains two components, using the `vm.Grid` function.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/layouts.md#_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nlayout=vm.Grid(grid=[[0,1],[2,3]])\n```\n\n----------------------------------------\n\nTITLE: Generated Vizro Dashboard Code (Vizro, Python)\nDESCRIPTION: This code snippet represents the Python code generated by Vizro-AI to create a Vizro dashboard. It imports necessary modules from the `vizro` library and defines the dashboard layout, including a Card and an AgGrid component, with corresponding properties like position and content. Note that the data source 'restaurant_bills' should be replaced with actual data. To make this code work, you will need to uncomment the data import section and populate the `data_manager` with the appropriate data.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-ai/docs/pages/user-guides/run-vizro-ai-dashboard.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n######## Module Imports ##########\nfrom vizro import Vizro\nfrom vizro.managers import data_manager\nfrom vizro.models.types import capture\nimport vizro.models as vm\nfrom vizro.tables import dash_ag_grid\n\n########## Data Imports ##########\n#####!!! UNCOMMENT BELOW !!!######\n# data_manager[\"restaurant_bills\"] = ===> Fill in here <===\n\n###### Callable definitions ######\n\n\n########## Object code ###########\ndashboard = vm.Dashboard(\n   pages=[\n       vm.Page(\n           id=\"Tips Data Visualization\",\n           components=[\n               vm.Card(\n                   id=\"tips_card_tips_data_visualization\",\n                   type=\"card\",\n                   text=\"This is Tips dataset\",\n                   href=\"\",\n               ),\n               vm.AgGrid(\n                   id=\"tips_table_tips_data_visualization\",\n                   figure=dash_ag_grid(data_frame=\"restaurant_bills\"),\n               ),\n           ],\n           title=\"Tips Data Visualization\",\n           layout=vm.Layout(grid=[[0, 1, 1, 1]]),\n           controls=[],\n       )\n   ],\n   title=\"Tips Dataset Overview\",\n)\n```\n\n----------------------------------------\n\nTITLE: Install Vizro-AI and Setup API Keys\nDESCRIPTION: This code installs the Vizro-AI library and configures access to an LLM API using environment variables. It retrieves API keys from Google Colab's secrets manager and sets them as environment variables for Vizro-AI to use.  It also handles the optional OPENAI_BASE_URL.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-ai/examples/chart_by_vizro_ai.ipynb#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport os\n\nfrom google.colab import userdata\n\n# @title ## Setup\n# @markdown #### 1. Install Vizro-AI\nprint(\"Installing dependencies\")\n%pip install uv -q -q -q\n!uv pip install --system vizro-ai --quiet\nprint(\"✅ Installation finished\")\n\n# @markdown #### 2. Setup LLM API access\n\n\ndef _safe_get_userdata(key):\n    try:\n        return userdata.get(key)\n    except Exception as e:\n        print(f\"Warning: Unable to access {key}. Reason: {e!s}\")\n        return None\n\n\n# Always try to set the OPENAI_API_KEY\napi_key = _safe_get_userdata(\"OPENAI_API_KEY\")\nif api_key:\n    os.environ[\"OPENAI_API_KEY\"] = api_key\nelse:\n    print(\"❌ OPENAI_API_KEY not set. Click `Secrets` icon on the left to setup.\")\n\n# Conditionally set OPENAI_BASE_URL if provided and accessible\nopenai_base_url = _safe_get_userdata(\"OPENAI_BASE_URL\")\nif openai_base_url:\n    os.environ[\"OPENAI_BASE_URL\"] = openai_base_url\nelse:\n    print(\"User defined OPENAI_BASE_URL not set. Using default URL.\")\n\nprint(\"\\nCurrent environment variables:\")\nprint(f\"OPENAI_API_KEY: {'✅ Set' if 'OPENAI_API_KEY' in os.environ else 'Not set'}\")\nprint(f\"OPENAI_BASE_URL: {'✅ Set' if 'OPENAI_BASE_URL' in os.environ else 'Not set by user, use default'}\")\n```\n\n----------------------------------------\n\nTITLE: Create and Activate Virtual Environment (venv)\nDESCRIPTION: This snippet creates and activates a Python virtual environment using `venv`. This isolates the project's dependencies.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-ai/docs/pages/user-guides/install.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npython3 -m venv .venv\nsource .venv/bin/activate\n```\n\n----------------------------------------\n\nTITLE: Creating an OffCanvas Custom Component in Vizro\nDESCRIPTION: Defines a custom component 'OffCanvas' using Dash Bootstrap Components (dbc). It inherits from VizroBaseModel and implements a 'build' method to create an Offcanvas component.  It renders an Offcanvas with specified content, title, and initial open state.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/custom-components.md#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nclass OffCanvas(vm.VizroBaseModel):\n    type: Literal[\"offcanvas\"] = \"offcanvas\"\n    title: str\n    content: str\n\n    def build(self):\n        return html.Div(\n            [\n                dbc.Offcanvas(\n                    children=html.P(self.content),\n                    id=self.id,\n                    title=self.title,\n                    is_open=False,\n                ),\n            ]\n        )\n```\n\n----------------------------------------\n\nTITLE: Define User Prompt for Dashboard Generation\nDESCRIPTION: This snippet defines the user prompt that will be used by Vizro-AI to generate a dashboard. The prompt specifies the number of pages, chart types, data to be displayed, and filters to be added to the dashboard. It describes the desired visualizations and their configurations.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-ai/examples/goodreads_tutorial/goodreads.ipynb#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nuser_question = \"\"\"\nCreate a dashboard with 3 pages, one for each chart.\n\nOn the first page, plot a chart with the title \\\"Sequence of reading\\\" .\nIt is a scatter chart. Use the x axis to show the date a book was read. Plot it at y=1.\n\nAdd a date picker filter so the user can adjust the range of dates for the Date Read on the x axis.\n\nOn the second page, plot a chart with the title \\\"Pages and Book totals\\\" .\nIt shows the cumulative total number of pages read by summing the Number of Pages of each book read in each year, using the Date Read data.\nPlot date on the x axis and the number of pages on the y axis using a scale on the left hand side of the chart.\nSuperimpose a bar chart showing the total books read for each year, taking data from the Date Read column.\n\nShow the total books read using the right hand side of the chart which can be a different scale to the y axis shown on the left hand side.\n\nOn the third page, for each row, create a dumbbell chart to show the difference between My Rating and Average Rating for each book.\nUse shapes to add the horizontal lines between markers. Omit the legend. Don't show any row where My Rating is 0.\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Production-Ready Caches in Vizro\nDESCRIPTION: These code snippets show examples of using production-ready cache backends in Vizro, such as `FileSystemCache` and `RedisCache`. The configuration includes specifying the cache type and relevant parameters like the cache directory or Redis host and port.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/data.md#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n# Store cached data in CACHE_DIR\ndata_manager.cache = Cache(config={\"CACHE_TYPE\": \"FileSystemCache\", \"CACHE_DIR\": \"cache\"})\n\n# Use Redis key-value store\ndata_manager.cache = Cache(config={\"CACHE_TYPE\": \"RedisCache\", \"CACHE_REDIS_HOST\": \"localhost\", \"CACHE_REDIS_PORT\": 6379})\n```\n\n----------------------------------------\n\nTITLE: Instantiate VizroAI\nDESCRIPTION: Instantiates the VizroAI class. This initializes the Vizro-AI object that will be used to generate visualizations from natural language instructions.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-ai/docs/pages/tutorials/quickstart.md#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nvizro_ai = VizroAI()\n```\n\n----------------------------------------\n\nTITLE: Custom Button Style with `extra` - Python\nDESCRIPTION: This Python code demonstrates how to customize a Vizro button beyond the available default styling options using the `extra` argument. It passes a dictionary to `extra` containing arguments that are passed directly to the underlying `dbc.Button` component, in this case changing the button color to \"success\" and applying the \"outline\" style.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/button.md#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nimport vizro.models as vm\nfrom vizro import Vizro\n\npage = vm.Page(\n    title=\"Button with custom style\",\n    components=[\n        vm.Button(\n            text=\"Success button\",\n            extra={\"color\": \"success\", \"outline\": True},\n        ),\n    ],\n)\n\ndashboard = vm.Dashboard(pages=[page])\nVizro().build(dashboard).run()\n```\n\n----------------------------------------\n\nTITLE: Adding a Parameter to Page Controls in Vizro\nDESCRIPTION: This snippet shows how to add a `Parameter` to the `controls` list of a `Page` in a Vizro dashboard.  It configures the `Parameter` to target the `x` and `color` arguments of multiple `Graph` components. It uses a `RadioItems` selector to allow the user to choose the column used for the x-axis and color.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/tutorials/explore-components.md#_snippet_16\n\nLANGUAGE: python\nCODE:\n```\ncontrols=[\n    vm.Parameter(\n        targets=[\"violin.x\", \"violin.color\", \"heatmap.x\", \"bar.x\"],\n        selector=vm.RadioItems(\n            options=[\"day\", \"time\", \"sex\", \"smoker\", \"size\"], value=\"day\", title=\"Change x-axis inside charts:\"\n        ),\n    ),\n]\n```\n\n----------------------------------------\n\nTITLE: Creating a Card with Styled Image in Vizro using Python\nDESCRIPTION: This Python snippet demonstrates how to create a Vizro dashboard with a card containing an image. It imports the necessary Vizro models, defines a page with a card component, and includes an image with a URL hash that can be targeted with CSS for styling. The Flex layout ensures the card only occupies the space it needs.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/card.md#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport vizro.models as vm\nfrom vizro import Vizro\n\npage = vm.Page(\n    title=\"Styling Images\",\n    layout=vm.Flex(),  # (1)!\n    components=[\n       vm.Card(\n             text=\"\"\"\n             ### My card with image!\n\n             ![](assets/images/continents/europe.svg#my-image)\n\n              Commodi repudiandae consequuntur voluptatum laborum numquam blanditiis harum quisquam eius sed odit.\n\n              Fugiat iusto fuga praesentium option, eaque rerum! Provident similique accusantium nemo autem.\n\n              Obcaecati tenetur iure eius earum ut molestias architecto voluptate aliquam nihil, eveniet aliquid.\n         \"\"\n       ),\n    ]\n)\n\ndashboard = vm.Dashboard(pages=[page])\nVizro().build(dashboard).run()\n```\n\n----------------------------------------\n\nTITLE: Styled Buttons - Python\nDESCRIPTION: This code snippet showcases how to create buttons with different styles using the `variant` argument of the Vizro Button component. The example includes buttons with 'filled', 'outlined', and 'plain' styles, and it uses `Flex` layout with `direction=\"row\"` to arrange them side by side.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/button.md#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport vizro.models as vm\nfrom vizro import Vizro\n\npage = vm.Page(\n    title=\"Buttons with different styles\",\n    layout=vm.Flex(direction=\"row\"),  # (1)!\n    components=[\n        vm.Button(text=\"filled\"),\n        vm.Button(text=\"outlined\", variant=\"outlined\"),\n        vm.Button(text=\"plain\", variant=\"plain\"),\n    ],\n)\n\ndashboard = vm.Dashboard(pages=[page])\nVizro().build(dashboard).run()\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Page with Graph, Filter and Parameter - YAML\nDESCRIPTION: This YAML snippet defines the same page as the previous Python example. It includes the sunburst graph, a filter on continent, and a parameter control for the graph color. It demonstrates how to configure the page layout, components, and controls in a declarative way using YAML for Vizro.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/pages.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# Still requires a .py to add data to the data manager and parse YAML configuration\n# See yaml_version example\npages:\n  - components:\n      - figure:\n          _target_: sunburst\n          path: [continent, country]\n          values: pop\n          color: lifeExp\n          data_frame: gapminder\n        id: sunburst\n        type: graph\n    controls:\n      - column: continent\n        type: filter\n      - selector:\n          options: [lifeExp, pop]\n          title: Color\n          type: radio_items\n        targets: [sunburst.color]\n        type: parameter\n    title: Page Title\n    description: Longer description of the page content\n```\n\n----------------------------------------\n\nTITLE: Collapsible Container in Flex Layout (YAML)\nDESCRIPTION: This YAML configuration defines collapsible Vizro containers within a `Flex` layout using the `collapsed` argument. It configures one container to start collapsed and another to start expanded, displaying scatter and box plots of the Iris dataset. A corresponding `.py` file to populate data to data manager is expected to be present.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/container.md#_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n# Still requires a .py to add data to the data manager and parse YAML configuration\n# See yaml_version example\npages:\n  - title: Collapsible containers\n    layout:\n      type: flex\n    components:\n      - type: container\n        title: Initially collapsed container\n        components:\n          - type: graph\n            figure:\n              _target_: scatter\n              data_frame: iris\n              x: sepal_width\n              y: sepal_length\n              color: species\n        collapsed: true\n      - type: container\n        title: Initially expanded container\n        components:\n          - type: graph\n            figure:\n              _target_: box\n              data_frame: iris\n              x: species\n              y: sepal_length\n              color: species\n        collapsed: false\n```\n\n----------------------------------------\n\nTITLE: Import and Check Vizro-AI Version (Python)\nDESCRIPTION: This Python code imports the `vizro_ai` package and prints its version. It verifies that Vizro-AI is correctly installed and accessible within the notebook environment. The expected output is a version string in the format `x.y.z`.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-ai/docs/pages/tutorials/quickstart-dashboard.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport vizro_ai\n\nprint(vizro_ai.__version__)\n```\n\n----------------------------------------\n\nTITLE: Defining complex grid layout (3l_1r)\nDESCRIPTION: Defines a complex Vizro grid layout with two columns: the left with a set of three horizontally stacked components, and the right with a single component, using the `vm.Grid` function.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/layouts.md#_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nlayout=vm.Grid(grid=[[0,3],[1,3],[2,3]])\n```\n\n----------------------------------------\n\nTITLE: Configuring Graph filter_interaction in Vizro (Python)\nDESCRIPTION: This example shows how to configure cross-filtering between two `Graph` components in a Vizro dashboard using `filter_interaction`.  The first graph triggers the filtering on the second graph based on the 'continent' column.  It defines a page with two graphs and sets up the appropriate actions.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/actions.md#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport vizro.models as vm\nimport vizro.plotly.express as px\nfrom vizro import Vizro\nfrom vizro.actions import filter_interaction\n\ndf_gapminder = px.data.gapminder().query(\"year == 2007\")\npage = vm.Page(\n    title=\"Filter interaction\",\n    components=[\n        vm.Graph(\n            figure=px.box(\n                df_gapminder,\n                x=\"continent\",\n                y=\"lifeExp\",\n                color=\"continent\",\n                custom_data=[\"continent\"],\n            ),\n            actions=[vm.Action(function=filter_interaction(targets=[\"scatter_relation_2007\"]))],\n        ),\n        vm.Graph(\n            id=\"scatter_relation_2007\",\n            figure=px.scatter(\n                df_gapminder,\n                x=\"gdpPercap\",\n                y=\"lifeExp\",\n                size=\"pop\",\n                color=\"continent\",\n            ),\n        ),\n    ]\n)\n\ndashboard = vm.Dashboard(pages=[page])\nVizro().build(dashboard).run()\n```\n\n----------------------------------------\n\nTITLE: Create Cards in Flex Layout with CSS - Python\nDESCRIPTION: This Python code creates a Vizro dashboard page with a `Flex` layout containing multiple `Card` components.  It sets the `id` of the page to allow for specific CSS styling of the flex items within that page.  Requires `vizro.models` and `vizro` libraries.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/layouts.md#_snippet_32\n\nLANGUAGE: python\nCODE:\n```\nimport vizro.models as vm\nfrom vizro import Vizro\n\npage = vm.Page(\n    id=\"page-with-uniform-flex-items\",\n    title=\"Change the width via CSS\",\n    layout=vm.Flex(direction=\"row\", wrap=True),\n    components=[\n        vm.Card(\n            text=\"\"\"\n               # Lorem Ipsum\n\n               Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aliquam sed elementum ligula.\n               In ultricies est ac mauris vehicula fermentum. Curabitur faucibus elementum lectus.\n               Name ut ipsum tortor. Praesent ut nulla risus. Praesent in dignissim nulla.\n           \"\n        )\n        for i in range(12)\n    ],\n)\n\ndashboard = vm.Dashboard(pages=[page])\n```\n\n----------------------------------------\n\nTITLE: Formatted AgGrid Configuration (YAML)\nDESCRIPTION: This YAML configuration defines a formatted AgGrid within a Vizro dashboard, specifying the figure, title, header, and footer. It uses the `dashGridOptions` for setting pagination. It relies on a corresponding Python file to load the `gapminder_2007` dataset.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/table.md#_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\n# Still requires a .py to add data to the data manager and parse YAML configuration\n# See yaml_version example\npages:\n  - components:\n      - figure:\n          _target_: dash_ag_grid\n          data_frame: gapminder_2007\n          dashGridOptions:\n            pagination: true\n        title: Gapminder Data Insights\n        header: |\n          #### An Interactive Exploration of Global Health, Wealth, and Population\n        footer: |\n          SOURCE: **Plotly gapminder data set, 2024**\n        type: ag_grid\n    title: Formatted AgGrid\n```\n\n----------------------------------------\n\nTITLE: Initializing VizroAI with LLM\nDESCRIPTION: This snippet initializes the VizroAI class with an optional language model (LLM).  If no LLM is provided, a default model is used. The snippet includes commented-out examples of initializing with different LLMs like GPT-4o, Claude, Mistral, and Grok, showcasing compatibility with Langchain integrations. Setting environment variables are necessary for different API keys.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-ai/examples/example.ipynb#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom vizro_ai import VizroAI\n\nllm = None\n# uncomment below to try out different models\n# llm = \"gpt-4o\"\n# llm = \"claude-3-5-sonnet-latest\"\n# llm = \"mistral-large-latest\"\n\n# llm = \"grok-beta\" #xAI API is compatible with OpenAI. To use grok-beta,\n# point `OPENAI_BASE_URL` to the xAI baseurl, use xAI API key for `OPENAI_API_KEY`\n# when setting up the environment variables\n# e.g.\n# OPENAI_BASE_URL=\"https://api.x.ai/v1\"\n# OPENAI_API_KEY=<xAI API key>\n# reference: https://docs.x.ai/api/integrations#openai-sdk\n\n# from langchain_openai import ChatOpenAI\n# llm = ChatOpenAI(\n#     model=\"gpt-4o\")\n\n\n# import os\n# from langchain_anthropic import ChatAnthropic\n# llm = ChatAnthropic(\n#         model=\"claude-3-5-sonnet-latest\",\n#         # api_key = os.environ.get(\"ANTHROPIC_API_KEY\"),\n#         # base_url= os.environ.get(\"ANTHROPIC_API_BASE\")\n#     )\n\n# import os\n# from langchain_openai import AzureChatOpenAI\n# llm = AzureChatOpenAI(\n#     azure_deployment=\"gpt-4-1106-preview\",\n#     api_version=\"2024-04-01-preview\",\n#     temperature=0.4,\n#     azure_endpoint=os.environ[\"AZURE_OPENAI_ENDPOINT\"],\n#     api_key=os.environ[\"AZURE_OPENAI_API_KEY\"]\n# )\n\n# import os\n# from langchain_mistralai import ChatMistralAI\n# llm = ChatMistralAI(\n#     # name=\"mistral-large-latest\",\n#     name = \"open-mistral-nemo\",\n#     temperature=0,\n#     max_retries=2,\n#     endpoint= os.environ.get(\"MISTRAL_BASE_URL\"),\n#     mistral_api_key = os.environ.get(\"MISTRAL_API_KEY\")\n# )\n\n# import os\n# from langchain_google_genai import ChatGoogleGenerativeAI\n# llm = ChatGoogleGenerativeAI(\n#         model=\"gemini-1.5-flash-latest\",\n#         # model=\"gemini-1.5-pro-latest\",\n#         google_api_key=os.environ.get(\"GOOGLE_API_KEY\"),\n#         temperature=0,\n# )\n```\n\n----------------------------------------\n\nTITLE: Render Vizro Dashboard\nDESCRIPTION: This code snippet renders the Vizro dashboard generated in the previous step. It creates a button that, when clicked, calls the `run()` method on the generated `vizro_dashboard` object, launching the dashboard.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-ai/examples/dashboard_by_vizro_ai.ipynb#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport ipywidgets as widgets\nfrom IPython.display import display\n\n\ndef _run_dashboard(button):\n    button1.result.run()\n\n\nbutton2 = widgets.Button(\n    description=\"Run Dashboard!\",\n    button_style=\"info\",\n    tooltip=\"Click to render the Vizro dashboard\",\n)\ndisplay(button2)\n\nbutton2.on_click(_run_dashboard)\n```\n\n----------------------------------------\n\nTITLE: Attach Action to Button - YAML\nDESCRIPTION: This YAML configuration defines a Vizro Page with a Graph and a Button. The Button is configured to trigger the `export_data` action when clicked. The `_target_` keyword indicates that `export_data` should be used from the available action functions.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/button.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\npages:\n  - components:\n      - figure:\n          _target_: scatter\n          x: sepal_width\n          y: sepal_length\n          color: species\n          size: petal_length\n          data_frame: iris\n        type: graph\n      - type: button\n        text: Export data\n        id: export_data\n        actions:\n          - function:\n              _target_: export_data\n    layout:\n      type: flex\n    title: My first page\n```\n\n----------------------------------------\n\nTITLE: Defining complex grid layout (2t_1b)\nDESCRIPTION: Defines a complex Vizro grid layout with two rows: the top row divided into two columns each holding one component, and the bottom row with a single component, using the `vm.Grid` function.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/layouts.md#_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nlayout=vm.Grid(grid=[[0,1],[2,2]])\n```\n\n----------------------------------------\n\nTITLE: Add Button to Controls - Python\nDESCRIPTION: This code shows how to add a Button component to the control panel (left-side) in Vizro.  It uses the `add_type` function to register the `vm.Button` as a valid type for the `controls` argument within the `vm.Page` model.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/button.md#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom vizro import Vizro\nimport vizro.models as vm\n\nvm.Page.add_type(\"controls\", vm.Button)\n\n# Add dashboard configurations below\n...\n```\n\n----------------------------------------\n\nTITLE: Grouping Pages in Vizro Navigation (YAML)\nDESCRIPTION: This snippet configures the navigation in YAML to group pages into categories. The `pages` property is a dictionary where keys represent group names and values are lists of page titles belonging to that group.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/navigation.md#_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n# Still requires a .py to add data to the data manager and parse YAML configuration\n# See yaml_version example\n# pages defined as in default example\nnavigation:\n  pages:\n    Group A:\n      - My first page\n      - My second page\n    Group B:\n      - My third page\n```\n\n----------------------------------------\n\nTITLE: HTML Styling for Colab Cells\nDESCRIPTION: This HTML snippet defines styles for Google Colab cells, including a background color and a disclaimer section. It also includes dark mode styles using the prefers-color-scheme media query.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-ai/examples/dashboard_by_vizro_ai.ipynb#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<style>\n  .cell-bg {\n    background-color: #E6F3FF;\n    padding: 10px;\n    width: 100%;\n  }\n  .disclaimer {\n    background-color: #ffffff;\n    border: 1px solid #ddd;\n    border-radius: 5px;\n    padding: 15px;\n    margin: 10px 0;\n    font-family: Arial, sans-serif;\n    color: #000000;\n  }\n  .disclaimer h3 {\n    margin-top: 0;\n    color: #000000;\n  }\n  .disclaimer ol {\n    padding-left: 20px;\n  }\n  .disclaimer li {\n    margin-bottom: 10px;\n  }\n  .disclaimer p {\n    font-weight: bold;\n    margin-bottom: 0;\n  }\n\n  /* Dark mode styles */\n  @media (prefers-color-scheme: dark) {\n    .cell-bg {\n      background-color: #1a1a1a;\n    }\n    .disclaimer {\n      background-color: #2a2a2a;\n      border-color: #444;\n      color: #ffffff;\n    }\n    .disclaimer h3 {\n      color: #ffffff;\n    }\n  }\n</style>\n\n<div class=\"cell-bg\">\n  <div class=\"disclaimer\">\n    <h3>Disclaimer: Using Google Colab</h3>\n    <p>Please read carefully before proceeding:</p>\n    <ol>\n      <li><strong>Google's Servers:</strong> This notebook runs on Google's servers. Your code and data will be processed and temporarily stored on Google's infrastructure.</li>\n      <li><strong>Data Privacy:</strong> Be mindful of the data you upload or process here. Avoid using sensitive, confidential, or personal information that shouldn't be shared with third parties.</li>\n      <li><strong>Security Considerations:</strong> Colab is a shared environment. While Google implements security measures, treat it as a public environment and act accordingly.</li>\n      <li><strong>Terms of Service:</strong> Ensure your usage complies with Google Colab's Terms of Service and Google Cloud's Terms of Service.</li>\n      <li><strong>Data Persistence:</strong> Data in Colab notebooks is not permanently stored. Save important data and results to your local machine or a secure cloud storage.</li>\n      <li><strong>Resource Limitations:</strong> Colab provides free resources, but these are subject to availability and usage limits.</li>\n    </ol>\n    <p>By using this Colab notebook, you acknowledge that you understand and accept these conditions. Please use Colab at your own discretion and responsibility.</p>\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Vizro-AI Setup and Data Loading\nDESCRIPTION: This snippet initializes Vizro-AI with the specified model (gpt-4-turbo), loads data from a CSV file using pandas, and converts the 'Date Read' column to datetime objects. It then cleans the data by removing rows with missing values in specified columns.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-ai/examples/goodreads_tutorial/goodreads.ipynb#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport vizro_ai\nfrom dotenv import load_dotenv\nfrom vizro import Vizro\nfrom vizro_ai import VizroAI\n\n# Ensure the API key is in .env\nload_dotenv()\n\n# Choose your model\n\nvizro_ai = VizroAI(model=\"gpt-4-turbo\")\n\nimport pandas as pd\n\ndf = pd.read_csv(\"filtered_books.csv\")\ndf[\"Date Read\"] = pd.to_datetime(df[\"Date Read\"], dayfirst=True)\n\n# Data cleanup\n# Specify columns to check for missing values\ncolumns_to_check = [\n    \"Title\",\n    \"Author\",\n    \"ISBN\",\n    \"My Rating\",\n    \"Average Rating\",\n    \"Number of Pages\",\n    \"Original Publication Year\",\n    \"Date Read\",\n]\ndf_cleaned = df.dropna(subset=columns_to_check)\n```\n\n----------------------------------------\n\nTITLE: Vizro Dashboard Configuration in YAML\nDESCRIPTION: This YAML snippet shows the configuration for a Vizro dashboard. It defines a page containing two graph components (scatter and histogram) and a filter control. The `_target_` key specifies the type of plot (scatter or histogram), and it references the `iris` dataset. This configuration requires an additional Python file to load the data and parse the YAML configuration.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/dashboard.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n# Still requires a .py to add data to the data manager and parse YAML configuration\n# See yaml_version example\npages:\n  - components:\n      - figure:\n          _target_: scatter\n          data_frame: iris\n          x: sepal_length\n          y: petal_width\n          color: species\n        type: graph\n      - figure:\n          _target_: histogram\n          data_frame: iris\n          x: sepal_width\n          color: species\n        type: graph\n    controls:\n      - column: species\n        type: filter\n    title: My first dashboard\n```\n\n----------------------------------------\n\nTITLE: Dynamic Data Loading with Vizro\nDESCRIPTION: This example demonstrates how to load data dynamically using a Python function, add it to the Vizro data manager, and reference it in a chart. The `load_iris_data` function reads data from a CSV file and selects 50 random samples to simulate changing data.  This data is then used in a box plot.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/data.md#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom vizro import Vizro\nimport pandas as pd\nimport vizro.plotly.express as px\nimport vizro.models as vm\n\nfrom vizro.managers import data_manager\n\ndef load_iris_data():\n    iris = pd.read_csv(\"iris.csv\") # (1)!\n    return iris.sample(50) # (2)!\n\ndata_manager[\"iris\"] = load_iris_data # (3)!\n\npage = vm.Page(\n    title=\"Update the chart on page refresh\",\n    components=[\n        vm.Graph(figure=px.box(\"iris\", x=\"species\", y=\"petal_width\", color=\"species\")) # (4)!\n    ],\n)\n\ndashboard = vm.Dashboard(pages=[page])\nVizro().build(dashboard).run()\n```\n\n----------------------------------------\n\nTITLE: Repositioning Logo with CSS\nDESCRIPTION: Adjusts the padding of the `#page-header` element to reposition the logo within a Vizro dashboard.  It provides an example for moving the logo further to the left by setting the `padding-left` property. Demonstrates basic CSS customization for layout adjustments.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/custom-css.md#_snippet_16\n\nLANGUAGE: css\nCODE:\n```\n#page-header {\n    padding-left: 8px;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a Basic Card Component - Python\nDESCRIPTION: This snippet demonstrates how to add a basic Card component to a Vizro dashboard using Python.  It imports necessary Vizro models, creates a page with a Flex layout, and adds a Card component containing Markdown text. The Flex layout ensures that the card occupies only the necessary vertical space.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/card.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport vizro.models as vm\nfrom vizro import Vizro\n\npage = vm.Page(\n    title=\"Card\",\n    layout=vm.Flex(),  # (1)!\n    components=[\n        vm.Card(\n            text=\"\"\"\n                ### Card Title\n                Commodi repudiandae consequuntur voluptatum.\n            \"\",\n        ),\n    ],\n)\n\ndashboard = vm.Dashboard(pages=[page])\nVizro().build(dashboard).run()\n```\n\n----------------------------------------\n\nTITLE: Changing the Chart Name\nDESCRIPTION: This example demonstrates how to change the chart name when generating the `fig` object using `get_fig_object`. This is useful for avoiding namespace collisions. It utilizes `vizro_ai` and `plotly.express`.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-ai/docs/pages/user-guides/advanced-options.md#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom vizro_ai import VizroAI\nimport plotly.express as px\n\ndf = px.data.gapminder()\nvizro_ai = VizroAI()\n\nres = vizro_ai.plot(df, \"the trend of gdp over years in the US\", return_elements=True)\nfig = res.get_fig_object(chart_name=\"different_name\",data_frame=df, vizro=True)\nprint(fig._captured_callable._function)\n```\n\n----------------------------------------\n\nTITLE: Using a NavBar in Vizro (YAML)\nDESCRIPTION: This snippet configures the navigation bar in YAML to use the `NavBar`. It defines page groups within the `pages` property and specifies `nav_selector` with `type: nav_bar` to enable the navigation bar.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/navigation.md#_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\n# Still requires a .py to add data to the data manager and parse YAML configuration\n# See yaml_version example\n# pages defined as in default example\nnavigation:\n  pages:\n    Group A:\n      - My first page\n      - My second page\n    Group B:\n      - My third page\n  nav_selector:\n    type: nav_bar\n```\n\n----------------------------------------\n\nTITLE: Creating a Dumbbell Chart for Rating Comparison using Plotly\nDESCRIPTION: This code generates a dumbbell chart to compare 'My Rating' and 'Average Rating' for each book using Plotly. It filters out rows where 'My Rating' is 0, then iterates through the filtered DataFrame to create a scatter plot with lines connecting the two rating points for each book. The y-axis ticks are customized to display the book titles. The function is decorated with `@capture(\"graph\")` to indicate that it generates a graph component for Vizro.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-ai/docs/pages/tutorials/goodreads-tutorial.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\nfrom vizro.models.types import capture\n\n\n@capture(\"graph\")\ndef custom_chart(data_frame):\n    # Filter out rows where 'My Rating' is 0\n    df_filtered = data_frame[data_frame[\"My Rating\"] != 0]\n\n    # Create a blank figure\n    fig = go.Figure()\n\n    # Add dumbbell lines and markers for each book\n    for index, row in df_filtered.iterrows():\n        fig.add_trace(\n            go.Scatter(\n                x=[row[\"My Rating\"], row[\"Average Rating\"]],\n                y=[index, index],\n                mode=\"markers+lines\",\n                marker=dict(size=10),\n                line=dict(width=2),\n                name=row[\"Title\"],\n                showlegend=False,\n            )\n        )\n\n    # Update layout\n    fig.update_layout(\n        title=\"Comparison of My Rating vs Average Rating\",\n        xaxis_title=\"Rating\",\n        yaxis_title=\"Books\",\n        yaxis=dict(\n            tickmode=\"array\",\n            tickvals=list(df_filtered.index),\n            ticktext=df_filtered[\"Title\"],\n        ),\n    )\n    return fig\n```\n\n----------------------------------------\n\nTITLE: Complete Vizro Dashboard with Configured Layout\nDESCRIPTION: This snippet provides the complete code for a Vizro dashboard with a customized layout for the third page (Analysis page).  The layout uses the Grid model to arrange three charts, giving more space to the density heatmap.  Other pages from previous steps are included for completeness.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/tutorials/explore-components.md#_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nimport vizro.models as vm\nimport vizro.plotly.express as px\nfrom vizro import Vizro\nfrom vizro.tables import dash_ag_grid\nfrom vizro.models.types import capture\nfrom vizro.figures import kpi_card\n\ntips = px.data.tips()\n\nfirst_page = vm.Page(\n    title=\"Data\",\n    components=[\n        vm.AgGrid(\n            figure=dash_ag_grid(tips),\n            footer=\"\"\"**Data Source:** Bryant, P. G. and Smith, M (1995)\n            Practical Data Analysis: Case Studies in Business Statistics.\n            Homewood, IL: Richard D. Irwin Publishing.\"\"\",\n        ),\n    ],\n)\n\nsecond_page = vm.Page(\n    title=\"Summary\",\n    layout=vm.Grid(grid=[[0, 1, -1, -1], [2, 2, 2, 2], [2, 2, 2, 2], [2, 2, 2, 2]]),\n    components=[\n        vm.Figure(\n            figure=kpi_card(\n                data_frame=tips,\n                value_column=\"total_bill\",\n                agg_func=\"mean\",\n                value_format=\"${value:.2f}\",\n                title=\"Average Bill\",\n            )\n        ),\n        vm.Figure(\n            figure=kpi_card(\n                data_frame=tips,\n                value_column=\"tip\",\n                agg_func=\"mean\",\n                value_format=\"${value:.2f}\",\n                title=\"Average Tips\"\n            )\n        ),\n        vm.Tabs(\n            tabs=[\n                vm.Container(\n                    title=\"Total Bill ($)\",\n                    components=[\n                        vm.Graph(figure=px.histogram(tips, x=\"total_bill\")),\n                    ],\n                ),\n                vm.Container(\n                    title=\"Total Tips ($)\",\n                    components=[\n                        vm.Graph(figure=px.histogram(tips, x=\"tip\")),\n                    ],\n                ),\n            ],\n        )\n    ],\n    controls=[vm.Filter(column=\"day\"), vm.Filter(column=\"time\", selector=vm.Checklist()), vm.Filter(column=\"size\")]\n)\n\nthird_page = vm.Page(\n    title=\"Analysis\",\n    layout=vm.Grid(grid=[[0, 1], [2, 2]]),\n    components=[\n        vm.Graph(\n            title=\"Where do we get more tips?\",\n            figure=px.bar(tips, y=\"tip\", x=\"day\"),\n        ),\n        vm.Graph(\n            title=\"Is the average driven by a few outliers?\",\n            figure=px.violin(tips, y=\"tip\", x=\"day\", color=\"day\", box=True),\n        ),\n        vm.Graph(\n            title=\"Which group size is more profitable?\",\n            figure=px.density_heatmap(tips, x=\"day\", y=\"size\", z=\"tip\", histfunc=\"avg\", text_auto=\"$.2f\"),\n        ),\n    ],\n)\n\ndashboard = vm.Dashboard(pages=[first_page, second_page, third_page])\nVizro().build(dashboard).run()\n```\n\n----------------------------------------\n\nTITLE: Advanced Filter Customization\nDESCRIPTION: This snippet demonstrates advanced filter customization by targeting a specific component and customizing the selector. It targets the 'scatter_chart' component with a filter on 'petal_length' using a `RangeSlider` with a step of 1, showing how to customize both the target and the selector properties.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/filters.md#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom vizro import Vizro\nimport vizro.plotly.express as px\nimport vizro.models as vm\n\niris = px.data.iris()\n\npage = vm.Page(\n    title=\"My first page\",\n    components=[\n        vm.Graph(id=\"scatter_chart\", figure=px.scatter(iris, x=\"sepal_length\", y=\"petal_width\", color=\"species\")),\n        vm.Graph(figure=px.scatter(iris, x=\"petal_length\", y=\"sepal_width\", color=\"species\")),\n    ],\n    controls=[\n        vm.Filter(column=\"petal_length\",targets=[\"scatter_chart\"], selector=vm.RangeSlider(step=1)),\n    ],\n)\n\ndashboard = vm.Dashboard(pages=[page])\nVizro().build(dashboard).run()\n```\n\n----------------------------------------\n\nTITLE: Install Vizro-AI with Optional Dependencies\nDESCRIPTION: This snippet installs Vizro-AI with optional dependencies like 'anthropic' and 'mistral' to enable integration with specific LLM vendors.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-ai/docs/pages/user-guides/install.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npip install vizro_ai[anthropic,mistral]\n```\n\n----------------------------------------\n\nTITLE: Setting up the LangChain tool chain\nDESCRIPTION: This snippet demonstrates how to create a LangChain tool chain for executing tools and injecting data. It binds the defined tools to the LLM, creates a data injection chain (`inject_df`) to insert DataFrames into the tool arguments at runtime, sets up a tool router (`tool_router`) to map tool calls to their respective functions, and combines these chains into a final chain.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-ai/docs/pages/user-guides/vizro-ai-langchain-guide.md#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# Bind tools to the LLM\ntools = [get_plot_code, get_dashboard_code]\nllm_with_tools = llm.bind_tools(tools)\n\n\n# Create data injection chain\n@chain\ndef inject_df(ai_msg):\n    tool_calls = []\n    for tool_call in ai_msg.tool_calls:\n        tool_call_copy = deepcopy(tool_call)\n\n        if tool_call_copy[\"name\"] == \"get_dashboard_code\":\n            tool_call_copy[\"args\"][\"dfs\"] = dfs\n        else:\n            tool_call_copy[\"args\"][\"df\"] = df\n\n        tool_calls.append(tool_call_copy)\n    return tool_calls\n\n\n# Create tool router\ntool_map = {tool.name: tool for tool in tools}\n\n\n@chain\ndef tool_router(tool_call):\n    return tool_map[tool_call[\"name\"]]\n\n\n# Combine chains\nchain = llm_with_tools | inject_df | tool_router.map()\n```\n\n----------------------------------------\n\nTITLE: Generating chart code with LangChain and Vizro-AI\nDESCRIPTION: This snippet shows how to use the created chain to generate chart code based on a natural language query.  It loads sample data using `plotly.express`, invokes the chain with a plotting question, and prints the generated code.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-ai/docs/pages/user-guides/vizro-ai-langchain-guide.md#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# Load sample data\ndf = px.data.gapminder()\n\nplot_response = chain.invoke(\"Plot GDP per capita for each continent\")\nprint(plot_response[0].content)\n```\n\n----------------------------------------\n\nTITLE: Vizro-AI generated dashboard code example\nDESCRIPTION: This snippet shows an example dashboard code generated by Vizro-AI. It defines a `gdp_life_exp_graph` function that creates a scatter plot visualizing the correlation between GDP per capita and life expectancy. The code also creates a `Dashboard` model with a page containing a `Graph` component using the generated chart.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-ai/docs/pages/user-guides/vizro-ai-langchain-guide.md#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n############ Imports ##############\nimport vizro.models as vm\nfrom vizro.models.types import capture\nimport plotly.graph_objects as go\n\n\n####### Function definitions ######\n@capture(\"graph\")\ndef gdp_life_exp_graph(data_frame):\n    fig = go.Figure()\n    fig.add_trace(go.Scatter(x=data_frame[\"gdpPercap\"], y=data_frame[\"lifeExp\"], mode=\"markers\"))\n    fig.update_layout(\n        title=\"GDP per Capita vs Life Expectancy\",\n        xaxis_title=\"GDP per Capita\",\n        yaxis_title=\"Life Expectancy\",\n    )\n    return fig\n\n\n####### Data Manager Settings #####\n#######!!! UNCOMMENT BELOW !!!#####\n# from vizro.managers import data_manager\n# data_manager[\"gdp_life_exp\"] = ===> Fill in here <===\n\n\n########### Model code ############\nmodel = vm.Dashboard(\n    pages=[\n        vm.Page(\n            components=[\n                vm.Graph(\n                    id=\"gdp_life_exp_graph\",\n                    figure=gdp_life_exp_graph(data_frame=\"gdp_life_exp\"),\n                )\n            ],\n            title=\"GDP vs Life Expectancy Correlation\",\n            layout=vm.Layout(grid=[[0]]),\n            controls=[],\n        )\n    ],\n    title=\"GDP per Capita vs Life Expectancy\",\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Dash App with url_base_pathname\nDESCRIPTION: This example demonstrates how to configure the underlying Dash app within Vizro using arguments like `url_base_pathname`. This allows serving the Vizro app at a specific path rather than the domain root. An environment variable can also be used to achieve the same effect.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/run-deploy.md#_snippet_5\n\n\n\n----------------------------------------\n\nTITLE: Set OpenAI API Key in .env File\nDESCRIPTION: This snippet shows the format of the `.env` file used to store the OpenAI API key. It stores the key in the `OPENAI_API_KEY` variable.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-ai/docs/pages/user-guides/install.md#_snippet_6\n\nLANGUAGE: text\nCODE:\n```\nOPENAI_API_KEY=abc123\n```\n\n----------------------------------------\n\nTITLE: Create Link Button - Python\nDESCRIPTION: This code snippet shows how to create a Vizro button that acts as a hyperlink. It creates a Button component and assigns a URL to the `href` property, allowing navigation to the specified URL when the button is clicked.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/button.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport vizro.models as vm\n\nvm.Button(text=\"Leave us a star! ⭐\", href=\"https://github.com/mckinsey/vizro\")\n```\n\n----------------------------------------\n\nTITLE: Styled AG Grid Configuration in Vizro (YAML)\nDESCRIPTION: This YAML configuration demonstrates how to configure a styled AG Grid in Vizro. It defines the page layout, specifies the data source, sets column definitions with value formatters and conditional cell styles, and configures default column properties for resizability, filtering, and editability.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/table.md#_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n# Still requires a .py to add data to the data manager and parse YAML configuration\n# See yaml_version example\npages:\n  - components:\n      - figure:\n          _target_: dash_ag_grid\n          data_frame: gapminder\n          columnDefs:\n            - field: country\n            - field: continent\n            - field: year\n            - field: lifeExp\n              valueFormatter:\n                function: d3.format('.1f')(params.value)\n            - field: gdpPercap\n              valueFormatter:\n                function: d3.format('$,.1f')(params.value)\n              cellStyle:\n                styleConditions:\n                  - condition: params.value < 1045\n                    style:\n                      backgroundColor: '#ff9222'\n                  - condition: params.value >= 1045 && params.value <= 4095\n                    style:\n                      backgroundColor: '#de9e75'\n                  - condition: params.value > 4095 && params.value <= 12695\n                    style:\n                      backgroundColor: '#aaa9ba'\n                  - condition: params.value > 12695\n                    style:\n                      backgroundColor: '#00b4ff'\n            - field: pop\n              type: rightAligned\n              valueFormatter:\n                function: d3.format(',.0f')(params.value)\n          defaultColDef:\n            resizable: false\n            filter: false\n            editable: true\n        title: Dash AG Grid\n        type: ag_grid\n    title: Example of a Dash AG Grid\n```\n\n----------------------------------------\n\nTITLE: Grouping Pages in Vizro Navigation (Python)\nDESCRIPTION: This snippet demonstrates how to group pages in the Vizro navigation panel using a dictionary in the `pages` argument of the `Navigation` model.  This allows creating collapsible groups within the navigation panel.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/navigation.md#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# page_1, page_2, page_3 defined as in default example\ndashboard = vm.Dashboard(\n    pages=[page_1, page_2, page_3],\n    navigation=vm.Navigation(pages={\"Group A\": [\"My first page\", \"My second page\"], \"Group B\": [\"My third page\"]}),\n)\nVizro().build(dashboard).run()\n```\n\n----------------------------------------\n\nTITLE: Vizro Dashboard in PyCafe\nDESCRIPTION: This snippet showcases the complete Vizro dashboard implementation within a PyCafe environment. It includes importing necessary libraries, defining chart functions using Plotly, loading data from a remote CSV file, creating the Vizro dashboard model with pages, charts, and controls, and running the dashboard using `Vizro().build(model).run()`.  The chart functions are decorated with `@capture(\"graph\")` for integration with Vizro.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-ai/docs/pages/tutorials/goodreads-tutorial.md#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom vizro import Vizro\nimport vizro.models as vm\nfrom vizro.models.types import capture\nimport pandas as pd\nimport plotly.graph_objects as go\nfrom vizro.models.types import capture\n\n####### Function definitions ######\n@capture(\"graph\")\ndef sequence_reading(data_frame):\n    fig = go.Figure()\n    fig.add_trace(\n        go.Scatter(\n            x=data_frame[\"Date Read\"],\n            y=[1] * len(data_frame),\n            mode=\"markers\",\n            marker=dict(size=10, color=\"blue\"),\n        )\n    )\n    fig.update_layout(\n        title=\"Sequence of reading\",\n        xaxis_title=\"Date Read\",\n        yaxis_title=\"Sequence\",\n        yaxis=dict(showticklabels=False, showgrid=False),\n        xaxis=dict(tickangle=-45),\n    )\n    return fig\n\n\n@capture(\"graph\")\ndef pages_books_totals(data_frame):\n    # Prepare data\n    data_frame[\"Date Read\"] = pd.to_datetime(data_frame[\"Date Read\"])\n    data_frame.sort_values(\"Date Read\", inplace=True)\n    data_frame[\"Cumulative Pages\"] = data_frame[\"Number of Pages\"].cumsum()\n\n    # Aggregate data by year for total books read\n    yearly_books = data_frame.groupby(data_frame[\"Date Read\"].dt.year).size()\n\n    # Create figure with secondary y-axis\n    fig = go.Figure()\n\n    # Add line for cumulative pages\n    fig.add_trace(\n        go.Scatter(\n            x=data_frame[\"Date Read\"],\n            y=data_frame[\"Cumulative Pages\"],\n            mode=\"lines\",\n            name=\"Cumulative Pages Read\",\n        )\n    )\n\n    # Add bars for books read per year\n    fig.add_trace(\n        go.Bar(\n            x=yearly_books.index, y=yearly_books, name=\"Books Read per Year\", yaxis=\"y2\"\n        )\n    )\n\n    # Set up the layout\n    fig.update_layout(\n        title=\"Cumulative Pages Read and Books Read per Year\",\n        xaxis_title=\"Date\",\n        yaxis=dict(title=\"Number of Pages\"),\n        yaxis2=dict(title=\"Total Books\", overlaying=\"y\", side=\"right\"),\n    )\n\n    return fig\n\n\n@capture(\"graph\")\ndef rating_comparison(data_frame):\n    # Filter out rows where 'My Rating' is 0\n    df = data_frame[data_frame[\"My Rating\"] != 0]\n\n    # Create a figure\n    fig = go.Figure()\n\n    # Add dumbbell traces\n    for index, row in df.iterrows():\n        fig.add_trace(\n            go.Scatter(\n                x=[row[\"My Rating\"], row[\"Average Rating\"]],\n                y=[row[\"Title\"], row[\"Title\"]],\n                mode=\"markers+lines\",\n                name=row[\"Title\"],\n                marker=dict(size=10),\n                line=dict(width=2),\n            )\n        )\n\n    # Update layout\n    fig.update_layout(\n        title=\"Comparison of My Rating vs Average Rating\",\n        xaxis_title=\"Rating\",\n        yaxis_title=\"Book Title\",\n        showlegend=False,\n    )\n\n    return fig\n\n########### Read data ############\n# Define the URL of the raw CSV file\nimport requests\nurl = \"https://raw.githubusercontent.com/mckinsey/vizro/834c8d9c198420e8b315c0dc045b7aa12534719d/vizro-ai/examples/goodreads_tutorial/filtered_books.csv\"\n\n# Fetch the CSV file\nresponse = requests.get(url)\nresponse.raise_for_status()  # Ensure we notice bad responses\n\n# Load the CSV data into a pandas DataFrame\nfrom io import StringIO\ncsv_data = StringIO(response.text)\ndf = pd.read_csv(csv_data)\ndf[\"Date Read\"] = pd.to_datetime(df['Date Read'],dayfirst=True)\n\n\n        ########### Model code ############\nmodel = vm.Dashboard(\n    pages=[\n        vm.Page(\n            components=[\n                vm.Graph(\n                    id=\"sequence_reading\",\n                    figure=sequence_reading(df),\n                )\n            ],\n            title=\"Sequence of Reading\",\n            layout=vm.Layout(grid=[[0]]),\n            controls=[\n                vm.Filter(\n                    type=\"filter\",\n                    column=\"Date Read\",\n                    targets=[\"sequence_reading\"],\n                    selector=vm.DatePicker(type=\"date_picker\", range=True),\n                )\n            ],\n        ),\n        vm.Page(\n            components=[\n                vm.Graph(\n                    id=\"pages_books_totals\",\n                    figure=pages_books_totals(df),\n                )\n            ],\n            title=\"Pages and Book Totals\",\n            layout=vm.Layout(grid=[[0]]),\n            controls=[],\n        ),\n        vm.Page(\n            components=[\n                vm.Graph(\n                    id=\"rating_comparison\",\n                    figure=rating_comparison(df),\n                )\n            ],\n            title=\"Rating Comparison\",\n            layout=vm.Layout(grid=[[0]]),\n            controls=[],\n        ),\n    ],\n    title=\"Book Reading Analysis Dashboard\",\n)\n\nVizro().build(model).run()\n```\n\n----------------------------------------\n\nTITLE: Install Jupyter package\nDESCRIPTION: Installs the Jupyter package using pip. This allows users to run Jupyter notebooks, which are used in this tutorial to explore Vizro-AI.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-ai/docs/pages/tutorials/quickstart.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install jupyter\n```\n\n----------------------------------------\n\nTITLE: Custom KPI Card using Vizro\nDESCRIPTION: This code demonstrates how to create a custom KPI card in Vizro. It defines a function `custom_kpi_card` that takes a pandas DataFrame and other parameters to create a styled KPI card with an icon on the right side of the title. The function is decorated with `@capture(\"figure\")` to be used as a custom figure. The example also showcases how to integrate the custom KPI card into a Vizro dashboard alongside a default KPI card.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/custom-figures.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import Optional\n\nimport dash_bootstrap_components as dbc\nimport pandas as pd\nimport vizro.models as vm\nimport vizro.plotly.express as px\nfrom dash import html\nfrom vizro import Vizro\nfrom vizro.figures import kpi_card\nfrom vizro.models.types import capture\n\ntips = px.data.tips\n\n\n@capture(\"figure\")  # (1)!\ndef custom_kpi_card(\n    data_frame: pd.DataFrame,\n    value_column: str,\n    *,\n    value_format: str = \"{value}\",\n    agg_func: str = \"sum\",\n    title: Optional[str] = None,\n    icon: Optional[str] = None,\n) -> dbc.Card:  # (2)!\n    \"\"\"Creates a custom KPI card.\"\"\"\n    title = title or f\"{agg_func} {value_column}\".title()\n    value = data_frame[value_column].agg(agg_func)\n\n    header = dbc.CardHeader(\n            [\n\n                html.H4(title, className=\"card-kpi-title\"),\n                html.P(icon, className=\"material-symbols-outlined\") if icon else None,  # (3)!\n            ]\n        )\n    body = dbc.CardBody([value_format.format(value=value)])\n    return dbc.Card([header, body], class_name=\"card-kpi\")\n\n\npage = vm.Page(\n    title=\"Create your own KPI card\",\n    layout=vm.Flex(direction=\"row\"),  # (4)!\n    components=[\n        vm.Figure(\n            figure=kpi_card(  # (5)!\n                data_frame=tips,\n                value_column=\"tip\",\n                value_format=\"${value:.2f}\",\n                icon=\"shopping_cart\",\n                title=\"Default KPI card\",\n            )\n        ),\n        vm.Figure(\n            figure=custom_kpi_card(  # (6)!\n                data_frame=tips,\n                value_column=\"tip\",\n                value_format=\"${value:.2f}\",\n                icon=\"payment\",\n                title=\"Custom KPI card\",\n            )\n        ),\n    ],\n)\n\ndashboard = vm.Dashboard(pages=[page])\nVizro().build(dashboard).run()\n```\n\n----------------------------------------\n\nTITLE: Create dynamic cards with Pandas DataFrame and Vizro\nDESCRIPTION: This Python code defines a function `multiple_cards` that creates a variable number of cards based on a pandas DataFrame. The number of cards is controlled by the `n_rows` parameter, which is dynamically adjusted using a Vizro Slider. The resulting cards are displayed within a Vizro dashboard.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/custom-figures.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import Optional\n\nimport dash_bootstrap_components as dbc\nimport pandas as pd\nimport vizro.models as vm\nfrom dash import dcc, html\nfrom vizro import Vizro\nfrom vizro.models.types import capture\n\ntext = [\n    \"Lorem ipsum dolor sit amet, consetetur sadipscing no sea elitr sed diam nonumy.\",\n    \"Sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat.\",\n    \"Sed diam voluptua. At vero eos et accusam et justo no duo dolores et ea rebum.\",\n    \"Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet.\",\n    \"Lorem ipsum dolor sit amet, consetetur sadipscing no sea est elitr dolor sit amet.\",\n    \"Sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat.\",\n]\n\ndf = pd.DataFrame({\"text\": text * 2})\n\n\n@capture(\"figure\")  # (1)!\ndef multiple_cards(data_frame: pd.DataFrame, n_rows: Optional[int] = 1) -> html.Div:  # (2)!\n    \"\"\"Creates a list with a variable number of `vm.Card` components from the provided data_frame.\n\n    Args:\n        data_frame: Data frame containing the data.\n        n_rows: Number of rows to use from the data_frame. Defaults to 1.\n\n    Returns:\n        html.Div with a list of dbc.Card objects generated from the data.\n\n    \"\"\"\n    texts = data_frame.head(n_rows)[\"text\"]\n    return html.Div(\n        [dbc.Card(dcc.Markdown(f\"### Card #{i}\\n{text}\")) for i, text in enumerate(texts, 1)],\n        className=\"multiple-cards-container\",\n    )\n\n\npage = vm.Page(\n    title=\"Page with variable number of cards\",\n    components=[vm.Figure(id=\"my-figure\", figure=multiple_cards(data_frame=df))],  # (3)!\n    controls=[\n        vm.Parameter(\n            targets=[\"my-figure.n_rows\"],  # (4)!\n            selector=vm.Slider(min=2, max=12, step=2, value=10, title=\"Number of cards to display\"),\n        ),\n    ],\n)\n\ndashboard = vm.Dashboard(pages=[page])\nVizro().build(dashboard).run()\n```\n\n----------------------------------------\n\nTITLE: Minimal Custom Chart Example in Vizro\nDESCRIPTION: This code snippet demonstrates the minimal setup required to create a custom chart in Vizro. It defines a function `minimal_example` that returns an empty `go.Figure()` and decorates it with `@capture(\"graph\")`. The function accepts a `pandas.DataFrame` as input. It provides a starting point for more complex custom charts.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/custom-charts.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom vizro.models.types import capture\nimport pandas as pd\nimport plotly.graph_objects as go\n\n@capture(\"graph\")\ndef minimal_example(data_frame:pd.DataFrame=None):\n    return go.Figure()\n```\n\n----------------------------------------\n\nTITLE: Custom Dash DataTable creation\nDESCRIPTION: Defines a custom Dash DataTable function `my_custom_table` that accepts a list of column names and a Pandas DataFrame. It returns a `dash_table.DataTable` object with specified columns and default styles.  The function is decorated with `@capture(\"table\")` to integrate with Vizro. Requires `dash`, `vizro`, `vizro.models`, and `pandas` (through `vizro.plotly.express`).\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/custom-tables.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom dash import dash_table\n\nimport vizro.models as vm\nimport vizro.plotly.express as px\nfrom vizro import Vizro\nfrom vizro.models.types import capture\n\ndf = px.data.gapminder().query(\"year == 2007\")\n\n\n@capture(\"table\")\ndef my_custom_table(chosen_columns: list[str], data_frame=None):\n    \"\"\"Custom table.\"\"\"\n    columns = [{\"name\": i, \"id\": i} for i in chosen_columns]\n    defaults = {\n        \"style_as_list_view\": True,\n        \"style_data\": {\"border_bottom\": \"1px solid var(--border-subtleAlpha01)\", \"height\": \"40px\"},\n        \"style_header\": {\n            \"border_bottom\": \"1px solid var(--stateOverlays-selectedHover)\",\n            \"border_top\": \"None\",\n            \"height\": \"32px\",\n        },\n    }\n    return dash_table.DataTable(data=data_frame.to_dict(\"records\"), columns=columns, **defaults)\n\n\npage = vm.Page(\n    title=\"Example of a custom Dash DataTable\",\n    components=[\n        vm.Table(\n            id=\"custom_table\",\n            title=\"Custom Dash DataTable\",\n            figure=my_custom_table(\n                data_frame=df, chosen_columns=[\"country\", \"continent\", \"lifeExp\", \"pop\", \"gdpPercap\"]\n            ),\n        ),\n    ],\n    controls=[\n        vm.Parameter(\n            targets=[\"custom_table.chosen_columns\"],\n            selector=vm.Dropdown(title=\"Choose columns\", options=df.columns.to_list()),\n        )\n    ],\n)\n\ndashboard = vm.Dashboard(pages=[page])\nVizro().build(dashboard).run()\n```\n\n----------------------------------------\n\nTITLE: LLM Model Selection and User Prompt Input\nDESCRIPTION: This code snippet provides a UI in Colab for selecting an LLM model and inputting a user prompt describing the desired dashboard. It uses `ipywidgets` to create a dropdown for selecting the LLM (options: gpt-4o, gpt-4-turbo, gpt-4o-mini) and a textarea for the user to input their dashboard requirements. The user input is stored in the `user_input.value` variable.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-ai/examples/dashboard_by_vizro_ai.ipynb#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom IPython.display import HTML, display\nfrom ipywidgets import Layout, Textarea\n\n# @title ## Input the LLM model choice and user prompt { run: \"auto\" }\n\n# @markdown #### 1. Choose the LLM model\n\nLLM = \"gpt-4o\"  # @param [\"gpt-4o\", \"gpt-4-turbo\", \"gpt-4o-mini\"]\n\n\n# @markdown ---\n# @markdown #### 2. Input your dashboard question\n# @markdown e.g. \"Create a gdp dashboard with 1 page. use a bar chart to show gdp per continent and filter data by country\"\n\ndefault_user_input = \"\"\"\nCreate a 2 page dashboard.\n\n<page 1> 1 bar chart, 1 filter\nuse a bar chart to show the average GDP per continent. Add a filter to filter the bar chart by country.\n\n<page 2> 1 card, 1 table\ncreate a card with text \\\"This is the Gapminder dataset\\\"\nuse a table to show the data details, showing features like GDP and life expectancy.\n\npage 2 layout: Image the page consists 6 grid units horizontally.\nThe card takes 1 unit of the page space on the left and the table takes 5 units on the right.\n\"\"\"\nuser_input = Textarea(\n    value=default_user_input,\n    placeholder=\"Input your requirements for the dashboard\",\n    description=\"user_input:\",\n    disabled=False,\n    rows=10,  # This sets the number of visible lines\n    layout=Layout(width=\"auto\", height=\"auto\"),  # This makes the width automatic\n)\ndisplay(user_input)\ndisplay(HTML(\"<br>\"))\n\n# @markdown ---\n\n\nprint(f\"Selected LLM: {LLM}\")\n# print(f\"User input: {user_input.value\")\n```\n\n----------------------------------------\n\nTITLE: Verify Vizro-AI Installation and Version\nDESCRIPTION: This snippet imports the vizro_ai module and prints its version to confirm the installation was successful. It relies on the vizro_ai package being installed.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-ai/docs/pages/user-guides/install.md#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport vizro_ai\n\nprint(vizro_ai.__version__)\n```\n\n----------------------------------------\n\nTITLE: LLM Model and User Prompt Input\nDESCRIPTION: This code defines a cell in a Google Colab notebook that allows the user to select an LLM model from a dropdown menu and input a natural language prompt. The selected model and user input are then printed to the console.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-ai/examples/chart_by_vizro_ai.ipynb#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# @title ## Input the LLM model choice and user prompt { run: \"auto\" }\n\n# @markdown #### 1. Choose the LLM model\n\nLLM = \"gpt-4o\"  # @param [\"gpt-4o\", \"gpt-4-turbo\", \"gpt-4o-mini\"]\n\nprint(f\"Selected LLM: {LLM}\")\n\n# @markdown ---\n# @markdown #### 2. Input your chart question\n\n# @markdown #### Instructions:\nuser_input = \"Describe the composition of gdp in continent.\"  # @param {type:\"string\", placeholder:\"Enter the requirements for the chart\"}\n\nprint(f\"User input: {user_input}\")\n```\n\n----------------------------------------\n\nTITLE: Generating Dashboard with Validation Warnings Python\nDESCRIPTION: Generates a Vizro dashboard from the provided datasets (`df3`, `df2`, `df1`) and the complex natural language prompt (`user_question_2_data`). Because the request contains potentially unsupported features, validation warnings may appear in the logs.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-ai/examples/example_dashboard.ipynb#_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nVizro._reset()\ndashboard = vizro_ai.dashboard([df3, df2, df1], user_question_2_data)\n```\n\n----------------------------------------\n\nTITLE: Creating a Books Timeline Scatter Chart using Plotly and Vizro\nDESCRIPTION: This code snippet generates a scatter chart using Plotly to visualize the sequence of books read over time. It takes a Pandas DataFrame as input, plots the 'Date Read' column on the x-axis, and uses a constant y-value. The function is decorated with `@capture(\"graph\")` to indicate that it generates a graph component for Vizro.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-ai/docs/pages/tutorials/goodreads-tutorial.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\nfrom vizro.models.types import capture\n\n@capture(\"graph\")\ndef custom_chart(data_frame):\n    fig = go.Figure()\n    fig.add_trace(go.Scatter(x=data_frame[\"Date Read\"], y=[1] * len(data_frame), mode=\"markers\"))\n    fig.update_layout(title=\"Sequence of reading\", xaxis_title=\"Date Read\", yaxis_title=\"Y=1\")\n    return fig\n```\n\n----------------------------------------\n\nTITLE: Configuring a Card with Floating Image in Vizro using YAML\nDESCRIPTION: This YAML code configures a Vizro dashboard page with a card containing a floating image. The image's styling is expected to be handled by CSS, using the URL hash (`#my-image`) as a selector. The layout is configured as `flex`.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/card.md#_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\n# Still requires a .py to add data to the data manager and parse YAML configuration\n# See yaml_version example\npages:\n  - components:\n      - text: |\n          ![](assets/images/continents/europe.svg#my-image)\n\n          Commodi repudiandae consequuntur voluptatum laborum numquam blanditiis harum quisquam eius sed odit.\n\n          Fugiat iusto fuga praesentium option, eaque rerum! Provident similique accusantium nemo autem.\n\n          Obcaecati tenetur iure eius earum ut molestias architecto voluptate aliquam nihil, eveniet aliquid.\n\n          Culpa officia aut! Impedit sit sunt quaerat, odit, tenetur error, harum nesciunt ipsum debitis quas.\n\n          Obcaecati tenetur iure eius earum ut molestias architecto voluptate aliquam nihil, eveniet aliquid.\n\n          Culpa officia aut! Impedit sit sunt quaerat, odit, tenetur error, harum nesciunt ipsum debitis quas.\n        title: My card with floating image!\n        type: card\n    layout:\n      type: flex\n    title: Floating Images\n```\n\n----------------------------------------\n\nTITLE: Initializing VizroAI Python\nDESCRIPTION: Initializes the VizroAI object, optionally specifying the model to use. This object is the primary interface for interacting with the VizroAI service, allowing you to generate Vizro dashboards from natural language prompts. If no model is specified, it defaults to the default model.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-ai/examples/example_dashboard.ipynb#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport vizro.plotly.express as px\nfrom vizro import Vizro\nfrom vizro_ai import VizroAI\n\n# vizro_ai = VizroAI(model=\"gpt-4-turbo\")\n# vizro_ai = VizroAI(model=\"gpt-4o-mini\")\n# vizro_ai = VizroAI(model=\"gpt-4o\")\nvizro_ai = VizroAI()\n```\n\n----------------------------------------\n\nTITLE: Change Dashboard Theme in app.yaml\nDESCRIPTION: This YAML configuration demonstrates how to change the theme of a Vizro dashboard using the `theme` key. It configures a dashboard with a scatter matrix plot and sets the theme to 'vizro_light'.  It relies on a corresponding `.py` file to provide data.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/themes.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# Still requires a .py to add data to the data manager and parse YAML configuration\n# See yaml_version example\npages:\n  - components:\n      - figure:\n          _target_: scatter_matrix\n          color: species\n          data_frame: iris\n          dimensions: [sepal_length, sepal_width, petal_length, petal_width]\n        type: graph\n    title: Changing themes\ntheme: vizro_light\n```\n\n----------------------------------------\n\nTITLE: Generating Geo Distribution Plot with VizroAI\nDESCRIPTION: Generates a geographic distribution plot of life expectancy with an animation of the data over the 'year' column, using VizroAI. The arguments are the DataFrame `df` and a descriptive string that is used by the language model to create the plot.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-ai/examples/example.ipynb#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nvizro_ai.plot(df, \"show me the geo distribution of life expectancy and set year as animation \")\n```\n\n----------------------------------------\n\nTITLE: Complete Vizro Dashboard with Multiple Pages\nDESCRIPTION: This snippet shows the complete code for a Vizro dashboard with three pages: Data, Summary, and Analysis. The Analysis page contains three different chart types (bar, violin, and density heatmap). The code imports necessary Vizro modules, defines the data, creates the pages, and builds the dashboard.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/tutorials/explore-components.md#_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nimport vizro.models as vm\nimport vizro.plotly.express as px\nfrom vizro import Vizro\nfrom vizro.tables import dash_ag_grid\nfrom vizro.models.types import capture\nfrom vizro.figures import kpi_card\n\ntips = px.data.tips()\n\nfirst_page = vm.Page(\n    title=\"Data\",\n    components=[\n        vm.AgGrid(\n            figure=dash_ag_grid(tips),\n            footer=\"\"\"**Data Source:** Bryant, P. G. and Smith, M. (1995)\n            Practical Data Analysis: Case Studies in Business Statistics.\n            Homewood, IL: Richard D. Irwin Publishing.\"\"\",\n        ),\n    ],\n)\n\nsecond_page = vm.Page(\n    title=\"Summary\",\n    layout=vm.Grid(grid=[[0, 1, -1, -1], [2, 2, 2, 2], [2, 2, 2, 2], [2, 2, 2, 2]]),\n    components=[\n        vm.Figure(\n            figure=kpi_card(\n                data_frame=tips,\n                value_column=\"total_bill\",\n                agg_func=\"mean\",\n                value_format=\"${value:.2f}\",\n                title=\"Average Bill\",\n            )\n        ),\n        vm.Figure(\n            figure=kpi_card(\n                data_frame=tips,\n                value_column=\"tip\",\n                agg_func=\"mean\",\n                value_format=\"${value:.2f}\",\n                title=\"Average Tips\",\n            )\n        ),\n        vm.Tabs(\n            tabs=[\n                vm.Container(\n                    title=\"Total Bill ($)\",\n                    components=[\n                        vm.Graph(figure=px.histogram(tips, x=\"total_bill\")),\n                    ],\n                ),\n                vm.Container(\n                    title=\"Total Tips ($)\",\n                    components=[\n                        vm.Graph(figure=px.histogram(tips, x=\"tip\")),\n                    ],\n                ),\n            ],\n        ),\n    ],\n    controls=[\n        vm.Filter(column=\"day\"),\n        vm.Filter(column=\"time\", selector=vm.Checklist()),\n        vm.Filter(column=\"size\"),\n    ],\n)\n\nthird_page = vm.Page(\n    title=\"Analysis\",\n    components=[\n        vm.Graph(\n            title=\"Where do we get more tips?\",\n            figure=px.bar(tips, y=\"tip\", x=\"day\"),\n        ),\n        vm.Graph(\n            title=\"Is the average driven by a few outliers?\",\n            figure=px.violin(tips, y=\"tip\", x=\"day\", color=\"day\", box=True),\n        ),\n        vm.Graph(\n            title=\"Which group size is more profitable?\",\n            figure=px.density_heatmap(tips, x=\"day\", y=\"size\", z=\"tip\", histfunc=\"avg\", text_auto=\"$.2f\"),\n        ),\n    ],\n)\n\ndashboard = vm.Dashboard(pages=[first_page, second_page, third_page])\nVizro().build(dashboard).run()\n```\n\n----------------------------------------\n\nTITLE: Adding Images to Card - Python\nDESCRIPTION: This code demonstrates how to add an image to a Vizro Card component using Python and Markdown syntax. It places an image from the 'assets/images/continents/africa.svg' directory into a card, along with text. A relative path to the image is used.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/card.md#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport vizro.models as vm\nfrom vizro import Vizro\n\npage = vm.Page(\n     title=\"Placing Images\",\n     components=[\n         vm.Card(\n             text=\"\"\"\n             ### My card with image!\n\n             ![continent](assets/images/continents/africa.svg)\n\n              Commodi repudiandae consequuntur voluptatum laborum numquam blanditiis harum quisquam eius sed odit.\n\n              Fugiat iusto fuga praesentium option, eaque rerum! Provident similique accusantium nemo autem.\n\n              Obcaecati tenetur iure eius earum ut molestias architecto voluptate aliquam nihil, eveniet aliquid.\n         \"\",\n         ),\n     ],\n )\n\ndashboard = vm.Dashboard(pages=[page])\nVizro().build(dashboard).run()\n```\n\n----------------------------------------\n\nTITLE: Installing Vizro-AI with MistralAI Support\nDESCRIPTION: This command demonstrates how to install Vizro-AI with optional dependencies for MistralAI model support. It utilizes pip to install the main package along with the langchain_mistralai integration.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-ai/docs/pages/user-guides/customize-vizro-ai.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npip install -U vizro_ai[mistral]\n```\n\n----------------------------------------\n\nTITLE: Adding Images to Card - YAML\nDESCRIPTION: This snippet shows how to add an image to a Vizro Card component using YAML configuration. It configures a card to display an image using a relative path within the 'assets' folder, along with additional Markdown text.  A Python file remains necessary for parsing the YAML and managing data.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/card.md#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\npages:\n  - components:\n      - text: |\n          ![continent](assets/images/continents/africa.svg)\n\n          Commodi repudiandae consequuntur voluptatum laborum numquam blanditiis harum quisquam eius sed odit.\n\n          Fugiat iusto fuga praesentium option, eaque rerum! Provident similique accusantium nemo autem.\n\n          Obcaecati tenetur iure eius earum ut molestias architecto voluptate aliquam nihil, eveniet aliquid.\n        title: My card with image!\n        type: card\n    title: Placing Images\n```\n\n----------------------------------------\n\nTITLE: Create a Navigation Card with Vizro (Python)\nDESCRIPTION: This snippet demonstrates how to create a navigation card using the Vizro Card component. It defines two pages, one with navigation cards that link to another page within the dashboard and to an external URL. The cards are configured with text and href attributes to specify the navigation target.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/card.md#_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nimport vizro.models as vm\nimport vizro.plotly.express as px\nfrom vizro import Vizro\n\niris = px.data.iris()\n\npage_1 = vm.Page(\n    title=\"Homepage\",\n    components=[\n        vm.Card(\n            text=\"\"\"\n            ### Filters and parameters\n\n            Leads to the first page on click.\n            \"\"\",\n            href=\"/filters-and-parameters\",\n        ),\n        vm.Card(\n            text=\"\"\"\n            ### Google - External Link\n\n            Leads to an external link on click.\n            \"\"\",\n            href=\"https://google.com\",\n        ),\n    ],\n)\n\npage_2 = vm.Page(\n    title=\"Filters and parameters\",\n    components=[\n        vm.Graph(figure=px.scatter(iris, x=\"sepal_length\", y=\"petal_width\", color=\"sepal_width\")),\n    ],\n)\n\ndashboard = vm.Dashboard(pages=[page_1, page_2])\nVizro().build(dashboard).run()\n```\n\n----------------------------------------\n\nTITLE: Attach Action to Button - Python\nDESCRIPTION: This example demonstrates how to attach an action to a Vizro button. It defines a button that, when clicked, triggers the `export_data` action. A graph is also included to provide data for the export action.  The Flex layout is used to control component spacing.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/button.md#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport vizro.models as vm\nimport vizro.plotly.express as px\nfrom vizro import Vizro\nfrom vizro.actions import export_data\n\ndf = px.data.iris()\n\npage = vm.Page(\n    title=\"My first page\",\n    layout=vm.Flex(),  # (1)!\n    components=[\n        vm.Graph(\n            figure=px.scatter(\n                df,\n                x=\"sepal_width\",\n                y=\"sepal_length\",\n                color=\"species\",\n                size=\"petal_length\",\n            ),\n        ),\n        vm.Button(\n            text=\"Export data\",\n            actions=[vm.Action(function=export_data())],\n        ),\n    ]\n)\n\ndashboard = vm.Dashboard(pages=[page])\nVizro().build(dashboard).run()\n```\n\n----------------------------------------\n\nTITLE: Resolve Dataset Factories with Kedro Jupyter session\nDESCRIPTION: This code snippet illustrates how to import a Kedro Data Catalog with dataset factories into the Vizro data manager within a Kedro Jupyter session. It assumes that the `catalog` and `pipelines` variables are already available in the Jupyter environment and iterates through the datasets to load them into the data manager. It depends on `vizro.integrations.kedro` and `vizro.managers.data_manager`.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/kedro-data-catalog.md#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom vizro.managers import data_manager\n\n\nfor dataset_name, dataset_loader in kedro_integration.datasets_from_catalog(\n    catalog, pipeline=pipelines[\"__default__\"]\n).items():\n    data_manager[dataset_name] = dataset_loader\n```\n\n----------------------------------------\n\nTITLE: Styled Dash DataTable Configuration (YAML)\nDESCRIPTION: This YAML configuration defines a styled Dash DataTable within a Vizro dashboard. It mirrors the functionality of the Python example, defining column definitions and conditional styling directly within the YAML structure.  It requires a corresponding Python file to load the data into the data manager.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/table.md#_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\n# Still requires a .py to add data to the data manager and parse YAML configuration\n# See yaml_version example\npages:\n  - components:\n      - figure:\n          _target_: dash_data_table\n          data_frame: gapminder_2007\n          sort_action: native\n          editable: true\n          columns:\n            - name: country\n              id: country\n              type: text\n              editable: false\n            - name: continent\n              id: continent\n              type: text\n            - name: year\n              id: year\n              type: datetime\n            - name: lifeExp\n              id: lifeExp\n              type: numeric\n            - name: pop\n              id: pop\n              type: numeric\n            - name: gdpPercap\n              id: gdpPercap\n              type: numeric\n          style_data_conditional:\n            - if:\n                column_id: year\n              backgroundColor: dodgerblue\n              color: white\n            - if:\n                filter_query: '{lifeExp} < 55'\n                column_id: lifeExp\n              backgroundColor: '#85144b'\n              color: white\n            - if:\n                filter_query: '{gdpPercap} > 10000'\n                column_id: gdpPercap\n              backgroundColor: green\n              color: white\n            - if:\n                column_type: text\n              textAlign: left\n            - if:\n                state: active\n              backgroundColor: rgba(0, 116, 217, 0.3)\n              border: 1px solid rgb(0, 116, 217)\n        type: table\n    title: Dash DataTable\n```\n\n----------------------------------------\n\nTITLE: YAML - Overwrite CSS Globally\nDESCRIPTION: This YAML configuration defines a Vizro page with a card containing h1, h2, and h6 tags. When used with the Python script to add data to the data manager and the CSS from the 'Overwrite CSS Globally' snippet, the h1 and h2 tags will be styled according to the CSS rules. The id is automatically generated based on the title.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/custom-css.md#_snippet_6\n\nLANGUAGE: YAML\nCODE:\n```\n# Still requires a .py to add data to the data manager and parse YAML configuration\n# See yaml_version example\npages:\n  - components:\n      - text: |\n          # This is an <h1> tag\n\n          ## This is an <h2> tag\n\n          ###### This is an <h6> tag\n        type: card\n    title: Changing the header color\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Page with Graph, Filter and Parameter - Python\nDESCRIPTION: This Python code snippet demonstrates how to create a basic page in a Vizro dashboard. It includes a sunburst graph, a filter for the 'continent' column, and a parameter to control the color of the graph. The page is then added to a dashboard, and the dashboard is built and run using Vizro.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/pages.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport vizro.models as vm\nimport vizro.plotly.express as px\nfrom vizro import Vizro\n\ngapminder = px.data.gapminder().query(\"year == 2007\")\n\npage = vm.Page(\n    title=\"Page Title\",\n    description=\"Longer description of the page content\",\n    components=[\n        vm.Graph(\n            id=\"sunburst\", figure=px.sunburst(gapminder, path=[\"continent\", \"country\"], values=\"pop\", color=\"lifeExp\")\n        )\n    ],\n    controls=[\n        vm.Filter(column=\"continent\"),\n        vm.Parameter(targets=[\"sunburst.color\"], selector=vm.RadioItems(options=[\"lifeExp\", \"pop\"], title=\"Color\")),\n    ],\n)\n\ndashboard = vm.Dashboard(pages=[page])\nVizro().build(dashboard).run()\n```\n\n----------------------------------------\n\nTITLE: Configuring basic Flex Layout with YAML in Vizro\nDESCRIPTION: This YAML configuration defines a Vizro page with multiple graph components arranged using the Flex layout.  It uses the `violin` target to specify the plot type and parameters for the graph. The `data_frame` parameter references the `tips` dataset.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/layouts.md#_snippet_26\n\nLANGUAGE: yaml\nCODE:\n```\n# Still requires a .py to add data to the data manager and parse YAML configuration\n# See yaml_version example\npages:\n  - components:\n      - figure:\n          _target_: violin\n          x: day\n          y: tip\n          color: day\n          data_frame: tips\n        type: graph\n      - figure:\n          _target_: violin\n          x: day\n          y: tip\n          color: day\n          data_frame: tips\n        type: graph\n      - figure:\n          _target_: violin\n          x: day\n          y: tip\n          color: day\n          data_frame: tips\n        type: graph\n      - figure:\n          _target_: violin\n          x: day\n          y: tip\n          color: day\n          data_frame: tips\n        type: graph\n      - figure:\n          _target_: violin\n          x: day\n          y: tip\n          color: day\n          data_frame: tips\n        type: graph\n    layout:\n      type: flex\n    title: Flex - basic example\n```\n\n----------------------------------------\n\nTITLE: Running Unit Tests with Hatch\nDESCRIPTION: Executes unit tests using pytest via the Hatch environment. Arguments can be passed to the underlying pytest command, such as `--last-failed` to re-run only the failed tests from the previous invocation.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/explanation/contributing.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nhatch run test-unit --last-failed\n```\n\n----------------------------------------\n\nTITLE: Adding MathJax to Text Component in Vizro with YAML\nDESCRIPTION: This snippet demonstrates how to add MathJax support to the Text component in Vizro by using YAML. It defines a page and text component with LaTeX equations using both inline and block delimiters. The `extra` argument is not directly supported in YAML, so you can only configure the `text` argument. The dashboard will render the LaTeX equations using MathJax if the `mathjax=True` is set in the corresponding python file when initiating the `Text` component.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/text.md#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n# Still requires a .py to add data to the data manager and parse YAML configuration\n# See yaml_version example\npages:\n  - components:\n      - text: |\n          This example uses the block delimiter:\n          $$\n          \\\\int_0^\\\\infty e^{-x^2} dx = \\\\frac{\\\\sqrt{\\\\pi}}{2}\n          $$\n\n          This example uses the inline delimiter:\n          $x = \\\\frac{-b \\\\pm \\\\sqrt{b^2 - 4ac}}{2a}$\n        type: text\n    title: Text with extra argument\n```\n\n----------------------------------------\n\nTITLE: Customizing Text Component with Markdown in YAML\nDESCRIPTION: This snippet demonstrates how to customize the Text component in Vizro using Markdown syntax within a YAML configuration file. It showcases headers, block quotes, lists, and emphasis formatting. A Python file is also needed to handle data loading and YAML parsing. The rendered output in the Vizro dashboard reflects the Markdown formatting applied.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/text.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n# Still requires a .py to add data to the data manager and parse YAML configuration\n# See yaml_version example\npages:\n  - components:\n      - title: Customizing Text\n        text: |\n          # Header level 1 <h1>\n\n          ## Header level 2 <h2>\n\n          ### Header level 3 <h3>\n\n          #### Header level 4 <h4>\n\n          Commodi repudiandae consequuntur voluptatum laborum numquam blanditiis harum quisquam eius sed odit.\n\n          Fugiat iusto fuga praesentium option, eaque rerum! Provident similique accusantium nemo autem.\n\n          Obcaecati tenetur iure eius earum ut molestias architecto voluptate aliquam nihil, eveniet aliquid.\n\n          Culpa officia aut! Impedit sit sunt quaerat, odit, tenetur error, harum nesciunt ipsum debitis quas.\n\n          ### Block Quotes\n\n          >\n          > A block quote is a long quotation, indented to create a separate block of text.\n          >\n\n          ### Lists\n\n          * Item A\n              * Sub Item 1\n              * Sub Item 2\n          * Item B\n\n          ### Emphasis\n\n          This word will be *italic*\n\n          This word will be **bold**\n\n          This word will be _**bold and italic**_\n```\n\n----------------------------------------\n\nTITLE: Initializing VizroAI with String Model\nDESCRIPTION: This snippet demonstrates how to initialize VizroAI with a pre-configured LLM using a string identifier. This method uses sensible defaults, such as setting temperature to 0, for common vendors. API keys must be set as environment variables for this method to work.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-ai/docs/pages/user-guides/customize-vizro-ai.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nvizro_ai = VizroAI(model=\"<chosen model>\")\n```\n\n----------------------------------------\n\nTITLE: NavLink with Accordions in Vizro (snippet.py)\nDESCRIPTION: This Python snippet demonstrates how to create a Vizro dashboard with a navigation bar containing a NavLink that utilizes accordions to group pages. It defines a dashboard with three pages and a navigation structure using NavBar and NavLink components. The NavLink is configured to group the pages into 'Group A' and 'Group B'.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/navigation.md#_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n# page_1, page_2, page_3 defined as in default example\ndashboard = vm.Dashboard(\n    pages=[page_1, page_2, page_3],\n    navigation=vm.Navigation(\n        nav_selector=vm.NavBar(\n            items=[\n                vm.NavLink(\n                    label=\"Section 1\",\n                    pages={\"Group A\": [\"My first page\", \"My second page\"], \"Group B\": [\"My third page\"]},\n                )\n            ]\n        )\n    ),\n)\nVizro().build(dashboard).run()\n```\n\n----------------------------------------\n\nTITLE: Set Graph width using Plotly argument - Python\nDESCRIPTION: This code snippet demonstrates how to change the width of a Plotly graph within a Vizro dashboard by setting the `width` argument in the `px.violin` function.  This will affect how many graphs can fit on a row.  It requires the `vizro`, `vizro.models`, and `vizro.plotly.express` libraries.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/layouts.md#_snippet_29\n\nLANGUAGE: python\nCODE:\n```\nimport vizro.models as vm\nfrom vizro import Vizro\nimport vizro.plotly.express as px\n\ntips = px.data.tips()\n\npage = vm.Page(\n    title=\"Change the width for Graph\",\n    layout=vm.Flex(direction=\"row\", gap=\"40px\", wrap=True),\n    components=[vm.Graph(figure=px.violin(tips, y=\"tip\", x=\"day\", color=\"day\", width=400)) for i in range(5)],\n)\n\ndashboard = vm.Dashboard(pages=[page])\nVizro().build(dashboard).run()\n```\n\n----------------------------------------\n\nTITLE: Advanced Filter Customization in YAML\nDESCRIPTION: This YAML configuration corresponds to the advanced filter customization example. It defines a page with two scatter plots and a filter for the 'petal_length' column. The filter targets the 'scatter_chart' component and uses a `RangeSlider` with a step of 1.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/filters.md#_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n# Still requires a .py to add data to the data manager and parse YAML configuration\n# See yaml_version example\npages:\n  - components:\n      - figure:\n          _target_: scatter\n          data_frame: iris\n          x: sepal_length\n          y: petal_width\n          color: species\n        id: scatter_chart\n        type: graph\n      - figure:\n          _target_: scatter\n          data_frame: iris\n          x: petal_length\n          y: sepal_width\n          color: species\n        type: graph\n    controls:\n      - column: petal_length\n        targets:\n          - scatter_chart\n        selector:\n          step: 1\n          type: range_slider\n        type: filter\n    title: My first page\n```\n\n----------------------------------------\n\nTITLE: Chaining Actions - YAML\nDESCRIPTION: This YAML configuration defines a Vizro dashboard with a button that triggers two export actions, similar to the Python example. It specifies the `_target_` as `export_data` for both actions and defines their respective targets and file formats. This demonstrates how actions can be chained using the YAML configuration file.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/actions.md#_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\npages:\n  - components:\n      - type: graph\n        id: scatter\n        figure:\n          _target_: scatter\n          data_frame: iris\n          color: sepal_width\n          x: petal_length\n          y: sepal_length\n      - type: graph\n        id: hist\n        figure:\n          _target_: histogram\n          data_frame: iris\n          color: species\n          x: petal_length\n      - type: button\n        text: Export data\n        id: export_data_button\n        actions:\n          - function:\n              _target_: export_data\n              targets:\n                - scatter\n          - function:\n              _target_: export_data\n              targets:\n                - hist\n              file_format: xlsx\n    controls:\n      - type: filter\n        column: species\n    title: Exporting\n```\n\n----------------------------------------\n\nTITLE: Vizro Dashboard Configuration in JSON\nDESCRIPTION: This JSON snippet shows the configuration for a Vizro dashboard. It defines a page containing two graph components (scatter and histogram) and a filter control. The `_target_` key specifies the type of plot (scatter or histogram), and it references the `iris` dataset. This configuration requires an additional Python file to load the data and parse the JSON configuration.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/dashboard.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"pages\": [\n    {\n      \"components\": [\n        {\n          \"figure\": {\n            \"_target_\": \"scatter\",\n            \"color\": \"species\",\n            \"data_frame\": \"iris\",\n            \"x\": \"sepal_length\",\n            \"y\": \"petal_width\"\n          },\n          \"type\": \"graph\"\n        },\n        {\n          \"figure\": {\n            \"_target_\": \"histogram\",\n            \"color\": \"species\",\n            \"data_frame\": \"iris\",\n            \"x\": \"sepal_width\"\n          },\n          \"type\": \"graph\"\n        }\n      ],\n      \"controls\": [\n        {\n          \"column\": \"species\",\n          \"type\": \"filter\"\n        }\n      ],\n      \"title\": \"My first dashboard\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Tips Dataset Python\nDESCRIPTION: Loads the tips dataset using `plotly.express` and assigns it to the variable `df3`. This dataset contains data on customer tipping behavior and is used as input to Vizro-AI for generating dashboards.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-ai/examples/example_dashboard.ipynb#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndf3 = px.data.tips()\n```\n\n----------------------------------------\n\nTITLE: Override .env File Location\nDESCRIPTION: This code snippet demonstrates how to override the default location of the `.env` file using `python-dotenv`.  It allows specifying a custom path or filename for the `.env` file.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-ai/docs/pages/user-guides/install.md#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom dotenv import load_dotenv, find_dotenv\nfrom pathlib import Path\n\n# Specify the exact path to your .env file\nenv_file = Path.cwd() / \".env\"  # Adjust the path as needed\n\n# Alternatively, specify a different .env file name\nenv_file = find_dotenv(\".env.dev\")  # Replace \".env.dev\" with your file name\n\n# Load the specified .env file\nload_dotenv(env_file)\n```\n\n----------------------------------------\n\nTITLE: Styling multiple cards using CSS\nDESCRIPTION: This CSS code provides styling for the dynamically created cards. It uses flexbox to create a responsive layout with wrapping and consistent spacing between the cards. It also adjusts the height and width of the card and figure container elements.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/custom-figures.md#_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n.multiple-cards-container {\n    display: flex;\n    flex-wrap: wrap;\n    gap: 12px;\n}\n\n.figure-container {\n    height: unset;\n    width: unset;\n}\n\n.figure-container .card {\n    height: 210px;\n    width: 240px;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining complex grid layout (3t_1b)\nDESCRIPTION: Defines a complex Vizro grid layout with two rows: the top row with three separate components, and the bottom row with a single component, using the `vm.Grid` function.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/layouts.md#_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nlayout=vm.Grid(grid=[[0,1,2],[3,3,3]])\n```\n\n----------------------------------------\n\nTITLE: Customizing Flex Layout with row, gap and wrap in Vizro\nDESCRIPTION: This Python code configures a Vizro Page with a Flex layout and custom settings. It sets the `direction` to 'row', `gap` to '40px', and `wrap` to `True`. This arranges the graph components horizontally with a spacing of 40 pixels, and allows them to wrap to the next line if there isn't enough space.  The `px.violin` function creates violin plots from the `tips` dataset.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/layouts.md#_snippet_27\n\nLANGUAGE: python\nCODE:\n```\nimport vizro.models as vm\nfrom vizro import Vizro\nimport vizro.plotly.express as px\n\ntips = px.data.tips()\n\npage = vm.Page(\n    title=\"Flex - advanced example\",\n    layout=vm.Flex(direction=\"row\", gap=\"40px\", wrap=True),\n    components=[vm.Graph(figure=px.violin(tips, y=\"tip\", x=\"day\", color=\"day\")) for i in range(3)],\n)\n\ndashboard = vm.Dashboard(pages=[page])\nVizro().build(dashboard).run()\n```\n\n----------------------------------------\n\nTITLE: Using a NavBar in Vizro (Python)\nDESCRIPTION: This snippet demonstrates how to use a `NavBar` in Vizro navigation to group pages. It sets the `nav_selector` argument of the `Navigation` model to an instance of `NavBar`.  The `NavBar` utilizes icons for the first level of navigation.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/navigation.md#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n# page_1, page_2, page_3 defined as in default example\ndashboard = vm.Dashboard(\n    pages=[page_1, page_2, page_3],\n    navigation=vm.Navigation(\n        pages={\"Group A\": [\"My first page\", \"My second page\"], \"Group B\": [\"My third page\"]}, nav_selector=vm.NavBar()\n    ),\n)\nVizro().build(dashboard).run()\n```\n\n----------------------------------------\n\nTITLE: Generated Plotly Code Example\nDESCRIPTION: This example demonstrates the Plotly code generated by `VizroAI.plot` when `return_elements=True`.  The code defines a function `custom_chart` that creates a line chart of GDP per capita over years for the United States using `plotly.express`.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-ai/docs/pages/user-guides/advanced-options.md#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.express as px\n\n\ndef custom_chart(data_frame):\n    us_data = data_frame[data_frame[\"country\"] == \"United States\"]\n    fig = px.line(\n        us_data, x=\"year\", y=\"gdpPercap\", title=\"GDP per Capita Over Years in the US\"\n    )\n    return fig\n```\n\n----------------------------------------\n\nTITLE: Dockerfile Example for Vizro Deployment\nDESCRIPTION: This Dockerfile example provides instructions for building a container image to deploy a Vizro application. It includes setting the base image, working directory, installing dependencies using uv pip, copying application files, and defining the entrypoint to start the Gunicorn server.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/run-deploy.md#_snippet_4\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM ghcr.io/astral-sh/uv:python3.12-bookworm-slim  # (1)!\n\nWORKDIR /app\n\nCOPY requirements.txt .\nRUN uv pip install --system -r requirements.txt\nCOPY . .\n# (2)!\n\nENTRYPOINT [\"gunicorn\", \"app:app\", \"--workers\", \"4\", \"--bind\", \"0.0.0.0:7860\"]\n```\n\n----------------------------------------\n\nTITLE: Vizro-AI generated chart code example\nDESCRIPTION: This is an example of the chart code that Vizro-AI can generate. It defines a function `custom_chart` that creates a bar chart of GDP per capita by continent.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-ai/docs/pages/user-guides/vizro-ai-langchain-guide.md#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.graph_objects as go\nfrom vizro.models.types import capture\n\n\n@capture(\"graph\")\ndef custom_chart(data_frame):\n    continent_gdp = data_frame.groupby(\"continent\")[\"gdpPercap\"].mean().reset_index()\n    fig = go.Figure(data=[go.Bar(x=continent_gdp[\"continent\"], y=continent_gdp[\"gdpPercap\"])])\n    fig.update_layout(\n        title=\"GDP per Capita by Continent\",\n        xaxis_title=\"Continent\",\n        yaxis_title=\"GDP per Capita\",\n    )\n    return fig\n```\n\n----------------------------------------\n\nTITLE: Building Vizro Dashboard with KPI Cards\nDESCRIPTION: This complete code example demonstrates how to construct a Vizro dashboard with two pages. The first page displays data using `vm.AgGrid`. The second page shows two KPI cards displaying average bill and tip amounts, respectively, and two histograms. It imports `vizro.models`, `vizro.plotly.express`, and other required Vizro modules. The `tips` dataframe is used as the data source.  Requires Vizro to be installed and configured.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/tutorials/explore-components.md#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport vizro.models as vm\nimport vizro.plotly.express as px\nfrom vizro import Vizro\nfrom vizro.tables import dash_ag_grid\nfrom vizro.models.types import capture\nfrom vizro.figures import kpi_card\n\ntips = px.data.tips()\n\nfirst_page = vm.Page(\n    title=\"Data\",\n    components=[\n        vm.AgGrid(\n            figure=dash_ag_grid(tips),\n            footer=\"\"\"**Data Source:** Bryant, P. G. and Smith, M. (1995).\n            Practical Data Analysis: Case Studies in Business Statistics.\n            Homewood, IL: Richard D. Irwin Publishing.\"\"\",\n        ),\n    ],\n)\n\nsecond_page = vm.Page(\n    title=\"Summary\",\n    components=[\n        vm.Figure(\n            figure=kpi_card(\n                data_frame=tips,\n                value_column=\"total_bill\",\n                agg_func=\"mean\",\n                value_format=\"${value:.2f}\",\n                title=\"Average Bill\",\n            )\n        ),\n        vm.Figure(\n            figure=kpi_card(\n                data_frame=tips,\n                value_column=\"tip\",\n                agg_func=\"mean\",\n                value_format=\"${value:.2f}\",\n                title=\"Average Tips\"\n            )\n        ),\n        vm.Graph(figure=px.histogram(tips, x=\"total_bill\")),\n        vm.Graph(figure=px.histogram(tips, x=\"tip\")),\n    ],\n)\n\ndashboard = vm.Dashboard(pages=[first_page, second_page])\nVizro().build(dashboard).run()\n```\n\n----------------------------------------\n\nTITLE: Creating a Second Page with Charts using Vizro\nDESCRIPTION: This code snippet shows how to add a second page to the Vizro dashboard, featuring histograms. It creates a new Page titled 'Summary', adds two Graph components, each displaying a histogram of the 'total_bill' and 'tip' columns from the tips dataset, respectively. Finally, it updates the Dashboard to include both the first and second pages.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/tutorials/explore-components.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nsecond_page = vm.Page(\n    title=\"Summary\",\n    components=[\n        vm.Graph(figure=px.histogram(tips, x=\"total_bill\")),\n        vm.Graph(figure=px.histogram(tips, x=\"tip\")),\n    ],\n)\ndashboard = vm.Dashboard(pages=[first_page, second_page])\n```\n\n----------------------------------------\n\nTITLE: Integrating Data Catalog with Configuration File\nDESCRIPTION: Demonstrates how to load a Kedro Data Catalog from a configuration file (catalog.yaml) and register its datasets with Vizro's data manager. It uses Kedro's `OmegaConfigLoader` to parse the configuration and `DataCatalog.from_config` to instantiate the catalog.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/kedro-data-catalog.md#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom kedro.config import OmegaConfigLoader\nfrom kedro.io import DataCatalog  # (1)!\n\nfrom vizro.integrations import kedro as kedro_integration\nfrom vizro.managers import data_manager\n\nconf_loader = OmegaConfigLoader(conf_source=\".\")  # (2)!\ncatalog = DataCatalog.from_config(conf_loader[\"catalog\"])  # (3)!\n\nfor dataset_name, dataset_loader in kedro_integration.datasets_from_catalog(catalog).items():\n    data_manager[dataset_name] = dataset_loader\n```\n\n----------------------------------------\n\nTITLE: Add Title, Header, Footer to Graph - Python\nDESCRIPTION: This snippet shows how to add a title, header, and footer to a Vizro Graph component. It creates a scatter plot using plotly.express and sets the title, header, and footer arguments of the Graph model. It showcases customization options for providing context and information about the data being displayed.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/graph.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport vizro.models as vm\nimport vizro.plotly.express as px\nfrom vizro import Vizro\n\niris = px.data.iris()\n\npage = vm.Page(\n    title=\"Formatted Graph\",\n    components=[\n        vm.Graph(\n            figure=px.scatter(iris, x=\"sepal_width\", y=\"sepal_length\", color=\"species\"),\n            title=\"Relationships between Sepal Width and Sepal Length\",\n            header=\"\"\"\n                Each point in the scatter plot represents one of the 150 iris flowers, with colors indicating their\n                types. The Setosa type is easily identifiable by its short and wide sepals.\n\n                However, there is still overlap between the Versicolor and Virginica types when considering only sepal\n                width and length.\n                \"\"\",\n            footer=\"\"\"SOURCE: **Plotly iris data set, 2024**\"\"\",\n        ),\n    ],\n)\ndashboard = vm.Dashboard(pages=[page])\nVizro().build(dashboard).run()\n```\n\n----------------------------------------\n\nTITLE: Running a Vizro Dashboard (Vizro, Python)\nDESCRIPTION: This code snippet illustrates how to build and run a Vizro dashboard. It uses the `Vizro().build(dashboard).run()` method to initiate the dashboard building process and subsequently launch it. This assumes that the `dashboard` variable has already been defined and contains a valid Vizro dashboard object.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-ai/docs/pages/user-guides/run-vizro-ai-dashboard.md#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nVizro().build(dashboard).run()\n```\n\n----------------------------------------\n\nTITLE: Activate Scrolling - Python\nDESCRIPTION: Demonstrates how to activate scrolling in a Vizro grid by setting the `row_min_height` property.  This prevents components from being distorted when they exceed the available screen space.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/layouts.md#_snippet_23\n\nLANGUAGE: python\nCODE:\n```\nimport vizro.models as vm\nfrom vizro import Vizro\n\npage = vm.Page(\n    title=\"Activate scrolling\",\n    layout=vm.Grid(grid=[[i] for i in range(8)],\n                             row_min_height=\"240px\"),\n    components=[vm.Card(text=\"\"\"# Component 0\"\"\"),\n                vm.Card(text=\"\"\"# Component 1\"\"\"),\n                vm.Card(text=\"\"\"# Component 2\"\"\"),\n                vm.Card(text=\"\"\"# Component 3\"\"\"),\n                vm.Card(text=\"\"\"# Component 4\"\"\"),\n                vm.Card(text=\"\"\"# Component 5\"\"\"),\n                vm.Card(text=\"\"\"# Component 6\"\"\"),\n                vm.Card(text=\"\"\"# Component 7\"\"\"),\n                ],\n)\n\ndashboard = vm.Dashboard(pages=[page])\nVizro().build(dashboard).run()\n```\n\n----------------------------------------\n\nTITLE: Install Jupyter Notebook (bash)\nDESCRIPTION: This command installs the Jupyter Notebook package using pip. It's a prerequisite for running the Vizro-AI exploration in a Jupyter Notebook environment.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-ai/docs/pages/tutorials/quickstart-dashboard.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install jupyter\n```\n\n----------------------------------------\n\nTITLE: CSS Class Selector Example\nDESCRIPTION: This example demonstrates how to use a class selector to style all elements with the class 'card'. It sets the background color of all elements with the class 'card' to lightblue.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/custom-css.md#_snippet_1\n\nLANGUAGE: CSS\nCODE:\n```\n.card {\n    background: lightblue;\n}\n```\n\n----------------------------------------\n\nTITLE: Dash Callback Example in Vizro\nDESCRIPTION: This example demonstrates how to incorporate a Dash callback within a Vizro dashboard. It allows interaction between data points in a scatter plot and the content of a text card. The callback updates the text in the card based on which data point is clicked in the scatter plot.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/extensions.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom dash import callback, Input, Output\nimport vizro.models as vm\nimport vizro.plotly.express as px\nfrom vizro import Vizro\n\n@callback(\n    Output(\"card_id\", \"children\"),\n    Input(\"source_chart\", \"clickData\")\n)\ndef update_card(click_data):\n    if click_data is None:\n        return \"Click on the graph to select a data point.\"\n    return f\"Clicked species: '{click_data['points'][0]['customdata'][0]}'\"\n\npage = vm.Page(\n    title=\"Example: Dash callback within Vizro\",\n    components=[\n        vm.Graph(id=\"source_chart\",\n                 figure=px.scatter(px.data.iris(), x=\"sepal_width\", y=\"sepal_length\", color=\"species\", custom_data=[\"species\"])),\n        vm.Card(id=\"card_id\",\n                text=\"Click on the graph to apply filter interaction.\"),\n    ]\n)\n\ndashboard = vm.Dashboard(pages=[page])\nVizro().build(dashboard).run()\n```\n\n----------------------------------------\n\nTITLE: Custom Action with Multiple Return Values - Vizro\nDESCRIPTION: This Python code defines a custom action function `my_custom_action` that extracts data from clicked points in a scatter plot and returns two strings to update the text content of two card components in a Vizro dashboard. The action is triggered by the `clickData` event of the scatter plot.  The return values are assigned in order to the specified outputs.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/custom-actions.md#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport vizro.models as vm\nimport vizro.plotly.express as px\nfrom vizro import Vizro\nfrom vizro.models.types import capture\n\n\n@capture(\"action\")\ndef my_custom_action(points_data: dict):\n    \"\"\"Custom action.\"\"\"\n    clicked_point = points_data[\"points\"][0]\n    x, y = clicked_point[\"x\"], clicked_point[\"y\"]\n    species = clicked_point[\"customdata\"][0]\n    card_1_text = f\"Clicked point has sepal length {x}, petal width {y}\"\n    card_2_text = f\"Clicked point has species {species}\"\n    return card_1_text, card_2_text # (1)!\n\n\ndf = px.data.iris()\n\npage = vm.Page(\n    title=\"Example of a custom action with UI inputs and outputs\",\n    layout=vm.Flex(),  # (2)!\n    components=[\n        vm.Graph(\n            id=\"scatter_chart\",\n            figure=px.scatter(df, x=\"sepal_length\", y=\"petal_width\", color=\"species\", custom_data=[\"species\"]),\n            actions=[\n                vm.Action(\n                    function=my_custom_action(),\n                    inputs=[\"scatter_chart.clickData\"],\n                    outputs=[\"my_card_1.children\", \"my_card_2.children\"], # (3)!\n                ),\n            ],\n        ),\n        vm.Card(id=\"my_card_1\", text=\"Click on a point on the above graph.\"),\n        vm.Card(id=\"my_card_2\", text=\"Click on a point on the above graph.\"),\n    ]\n)\n\ndashboard = vm.Dashboard(pages=[page])\nVizro().build(dashboard).run()\n```\n\n----------------------------------------\n\nTITLE: Simplified Vizro JSON Schema\nDESCRIPTION: This simplified Vizro JSON schema shows the structure of a Vizro dashboard, including pages, components, and controls.  It demonstrates how dashboards need pages, which need components and optionally controls.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/explanation/schema.md#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$defs\": {\n    \"Page\": {\n      \"properties\": {\n        \"title\": {\n          \"title\": \"Title\",\n          \"type\": \"string\"\n        },\n        \"components\": {\n          \"items\": {\n            \"enum\": [\n              \"Card\",\n              \"Button\",\n              \"Container\",\n              \"Graph\",\n              \"Table\",\n              \"AgGrid\"\n            ],\n            \"type\": \"string\"\n          },\n          \"title\": \"Components\",\n          \"type\": \"array\"\n        },\n        \"controls\": {\n          \"anyOf\": [\n            {\n              \"items\": {\n                \"enum\": [\n                  \"Filter\",\n                  \"Parameter\"\n                ],\n                \"type\": \"string\"\n              },\n              \"type\": \"array\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Controls\"\n        }\n      },\n      \"required\": [\n        \"title\",\n        \"components\"\n      ],\n      \"title\": \"Page\",\n      \"type\": \"object\"\n    }\n  },\n  \"properties\": {\n    \"title\": {\n      \"title\": \"Title\",\n      \"type\": \"string\"\n    },\n    \"pages\": {\n      \"items\": {\n        \"$ref\": \"#/$defs/Page\"\n      },\n      \"title\": \"Pages\",\n      \"type\": \"array\"\n    },\n    \"theme\": {\n      \"enum\": [\n        \"vizro_dark\",\n        \"vizro_light\"\n      ],\n      \"title\": \"Theme\",\n      \"type\": \"string\"\n    }\n  },\n  \"required\": [\n    \"title\",\n    \"pages\",\n    \"theme\"\n  ],\n  \"title\": \"Dashboard\",\n  \"type\": \"object\"\n}\n```\n\n----------------------------------------\n\nTITLE: NavLink with Custom Icons in Vizro (app.py)\nDESCRIPTION: This Python code provides a complete Vizro application demonstrating the use of custom icons for NavLinks. It defines three pages and configures a dashboard with a navigation bar containing two NavLink components, each with a different icon specified using the 'icon' parameter, referencing icons from Google Material Icons.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/navigation.md#_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nfrom vizro import Vizro\nimport vizro.plotly.express as px\nimport vizro.models as vm\n\niris = px.data.iris()\n\npage_1 = vm.Page(\n    title=\"My first page\",\n    components=[\n        vm.Card(text=\"My text here\"),\n    ],\n)\npage_2 = vm.Page(\n    title=\"My second page\",\n    components=[\n        vm.Card(text=\"My text here\"),\n    ],\n)\npage_3 = vm.Page(\n    title=\"My third page\",\n    components=[\n        vm.Card(text=\"My text here\"),\n    ],\n)\n\ndashboard = vm.Dashboard(\n    pages=[page_1, page_2, page_3],\n    navigation=vm.Navigation(\n        nav_selector=vm.NavBar(\n            items=[\n                vm.NavLink(\n                    label=\"Section 1\",\n                    icon=\"Bar Chart\",\n                    pages=[\"My first page\", \"My second page\"],\n                ),\n                vm.NavLink(label=\"Section 2\", icon=\"Pie Chart\", pages=[\"My third page\"]),\n            ]\n        )\n    ),\n)\n\nVizro().build(dashboard).run()\n```\n\n----------------------------------------\n\nTITLE: Installing Vizro using pip\nDESCRIPTION: This code snippet demonstrates how to install the Vizro package using pip, the Python package installer. This is the first step in using Vizro to build data visualization apps. This command installs the core Vizro framework and its dependencies.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/README.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\npip install vizro\n```\n\n----------------------------------------\n\nTITLE: Create and Activate Virtual Environment (conda)\nDESCRIPTION: This snippet creates and activates a conda virtual environment. Conda is an alternative environment manager.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-ai/docs/pages/user-guides/install.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nconda create --name vizroai-environment\nconda activate vizroai-environment\n```\n\n----------------------------------------\n\nTITLE: Loading Data with Plotly Express\nDESCRIPTION: Loads the `gapminder` dataset from `vizro.plotly.express` using `px.data.gapminder()`. The loaded DataFrame, assigned to `df`, will be used in subsequent plot generation examples. This step is a prerequisite for visualizing the data using VizroAI.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-ai/examples/example.ipynb#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport vizro.plotly.express as px\n\ndf = px.data.gapminder()\ndf\n```\n\n----------------------------------------\n\nTITLE: Customizing Chart Appearance with Specific Prompts in Python\nDESCRIPTION: This code snippet further customizes the animated map chart by providing more specific instructions in the prompt. It sets the chart title to 'GDP per Capita over the years' and specifies 'Blues' as the color sequence. This allows for precise control over the chart's appearance. Required dependencies are vizro_ai and vizro.plotly.express.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-ai/docs/pages/user-guides/create-advanced-charts.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom vizro_ai import VizroAI\nimport vizro.plotly.express as px\n\ndf = px.data.gapminder()\n\nvizro_ai = VizroAI()\nfig = vizro_ai.plot(df,\n      \"\"\"Visualize GDP per capita over the years for each country using animated map chart.\n      Show countries on the map. Increase the width and height of the figure.\n      Set title to be: `GDP per Capita over the years`. Use `Blues` as color sequence. \"\"\")\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Generating GDP Composition Plot with VizroAI\nDESCRIPTION: Generates a plot describing the composition of GDP in different continents, including a horizontal line for average GDP, using VizroAI.  The plot method takes the DataFrame and a descriptive string as arguments.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-ai/examples/example.ipynb#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nvizro_ai.plot(df, \"describe the composition of gdp in continent, and add horizontal line for avg gdp\")\n```\n\n----------------------------------------\n\nTITLE: Function Name Output\nDESCRIPTION: This example demonstrates the function name after reassigning the `chart_name` parameter in `get_fig_object` to `different_name`\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-ai/docs/pages/user-guides/advanced-options.md#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n<function different_name at 0x17a18df80>\n```\n\n----------------------------------------\n\nTITLE: Create Project Directory\nDESCRIPTION: Creates a new directory for the Vizro project and navigates into it using standard bash commands. This helps organize project files and keeps the working directory clean.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/install.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmkdir vizro-project\ncd vizro-project\n```\n\n----------------------------------------\n\nTITLE: Custom Filter Selector in YAML\nDESCRIPTION: This YAML configuration corresponds to the custom filter selector example. It defines a page with a scatter plot and a filter for the 'species' column, specifying `RadioItems` as the selector type.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/filters.md#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n# Still requires a .py to add data to the data manager and parse YAML configuration\n# See yaml_version example\npages:\n  - components:\n      - figure:\n          _target_: scatter\n          data_frame: iris\n          x: sepal_length\n          y: petal_width\n        type: graph\n    controls:\n      - column: species\n        selector:\n          type: radio_items\n        type: filter\n    title: My first page\n```\n\n----------------------------------------\n\nTITLE: Static Filter with Overridden Selector Options\nDESCRIPTION: This code snippet shows how to create a static filter in Vizro by manually specifying the `options` or `min` and `max` fields for the selector. This prevents the filter from updating automatically when the dynamic data changes.  It uses Dropdown, RangeSlider, and DatePickerRange components with predefined values.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/data.md#_snippet_11\n\nLANGUAGE: python\nCODE:\n```\ncontrols = [\n    vm.Filter(column=\"species\", selector=vm.Dropdown(options=[\"setosa\", \"versicolor\", \"virginica\"])),\n    vm.Filter(column=\"sepal_length\", selector=vm.RangeSlider(min=4.3, max=7.9)),\n    vm.Filter(column=\"date_column\", selector=vm.DatePickerRange(min=\"2025-01-01\", max=\"2025-05-29\"])),\n]\n```\n\n----------------------------------------\n\nTITLE: Callout box example: Collapsible note\nDESCRIPTION: Shows the syntax for a collapsible note callout box in Vizro documentation. These should be limited to secondary information.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/explanation/documentation-style-guide.md#_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n???+ note \"Limit the use of collapsible callouts to secondary information only\"\n\n    Don't use expanded-on-load collapsibles like this one. If the callout contains important information and needs to be shown as expanded on page load, it should simply be non-collapsible.\n```\n\n----------------------------------------\n\nTITLE: Invalid JSON Data Example (Custom Validation)\nDESCRIPTION: This JSON data is designed to fail the custom validation rule defined in the Pydantic model.  The element 'c' in the array B doesn't start with 'a' or 'b'.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/explanation/schema.md#_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"A\": 1,\n  \"B\": [\n    \"a\",\n    \"b\",\n    \"c\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Loading YAML Configuration for Vizro Dashboard\nDESCRIPTION: This Python code snippet demonstrates how to load a Vizro dashboard configuration from a YAML file. It reads the YAML file, parses it using `yaml.safe_load`, and creates a `Dashboard` object. It registers the 'iris' dataset into the `data_manager`. The `Dashboard` object is then used to build and run the Vizro application.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/dashboard.md#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom pathlib import Path\n\nimport yaml\n\nimport vizro.plotly.express as px\nfrom vizro import Vizro\nfrom vizro.managers import data_manager\nfrom vizro.models import Dashboard\n\ndata_manager[\"iris\"] = px.data.iris()\ndashboard = yaml.safe_load(Path(\"dashboard.yaml\").read_text(encoding=\"utf-8\"))\ndashboard = Dashboard(**dashboard)\n\nVizro().build(dashboard).run()\n```\n\n----------------------------------------\n\nTITLE: Creating a Page with Multiple Charts in Vizro\nDESCRIPTION: This snippet demonstrates how to create a Vizro Page with three Graph components, each displaying a different Plotly chart type (bar, violin, and density heatmap). It uses Plotly Express to generate the figures and assigns them to the figure argument of each Graph component.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/tutorials/explore-components.md#_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nthird_page = vm.Page(\n    title=\"Analysis\",\n    components=[\n        vm.Graph(\n            title=\"Where do we get more tips?\",\n            figure=px.bar(tips, y=\"tip\", x=\"day\"),\n        ),\n        vm.Graph(\n            title=\"Is the average driven by a few outliers?\",\n            figure=px.violin(tips, y=\"tip\", x=\"day\", color=\"day\", box=True),\n        ),\n        vm.Graph(\n            title=\"Which group size is more profitable?\",\n            figure=px.density_heatmap(tips, x=\"day\", y=\"size\", z=\"tip\", histfunc=\"avg\", text_auto=\"$.2f\"),\n        ),\n    ],\n)\n\ndashboard = vm.Dashboard(pages=[first_page, second_page, third_page])\n```\n\n----------------------------------------\n\nTITLE: Adding MathJax to Text Component in Vizro with Python\nDESCRIPTION: This snippet demonstrates how to enable MathJax support in the Text component by using the `extra` argument to pass configurations to the underlying `dcc.Markdown` component. It includes both inline and block delimiters for LaTeX equations. Requires the vizro and vizro.models packages. The dashboard will render the LaTeX equations using MathJax.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/text.md#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport vizro.models as vm\nfrom vizro import Vizro\n\npage = vm.Page(\n    title=\"Text with extra argument\",\n    components=[\n        vm.Text(\n            text=\"\"\"\n              This example uses the block delimiter:\n              $$\n              \\\\int_0^\\\\infty e^{-x^2} dx = \\\\frac{\\\\sqrt{\\\\pi}}{2}\n              $$\n\n              This example uses the inline delimiter:\n              $x = \\\\frac{-b \\\\pm \\\\sqrt{b^2 - 4ac}}{2a}$\n            \"\"\",\n            extra={\"mathjax\": True}\n        ),\n    ],\n)\n\ndashboard = vm.Dashboard(pages=[page])\nVizro().build(dashboard).run()\n```\n\n----------------------------------------\n\nTITLE: Defining Multi-Page Dashboard Request Python\nDESCRIPTION: Defines a natural language prompt (`user_question_3_data`) for a more complex, 4-page dashboard. The prompt specifies the layout and content for each page, including tables, charts, cards, and filters. It demonstrates creating more detailed and structured dashboards using Vizro-AI.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-ai/examples/example_dashboard.ipynb#_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nuser_question_3_data = \"\"\"\n<Page 1>\nI need a page with 1 table and 1 line chart.\nThe chart shows the stock price trends of GOOG and AAPL.\nThe table shows the stock prices data details.\n\n<Page 2>\nI need a second page showing 1 card and 1 chart.\nThe card says 'The Gapminder dataset provides historical data on countries' development indicators.'\nThe chart is a scatter plot showing GDP per capita vs. life expectancy.\nGDP per capita on the x axis, life expectancy on the y axis, and colored by continent.\nLayout the card on the left and the chart on the right. The card takes 1/3 of the whole space on the left.\nThe chart takes 2/3 of the whole space and is on the right.\nAdd a filter to filter the scatter plot by continent.\nAdd a second filter to filter the chart by year.\n\n<Page 3>\nThis page displays the tips dataset. use two different charts to show data\ndistributions. one chart should be a bar chart and the other should be a scatter plot.\nfirst chart is on the left and the second chart is on the right.\nAdd a filter to filter data in the scatter plot by smoker.\n\n<Page 4>\nCreate 3 cards on this page:\n1. The first card on top says \"This page combines data from various sources\n including tips, stock prices, and global indicators.\"\n2. The second card says \"Insights from Gapminder dataset.\"\n3. The third card says \"Stock price trends over time.\"\n\nLayout these 3 cards in this way:\ncreate a grid with 3 columns and 2 rows.\nRow 1: The first row has three columns:\n- The first column is empty.\n- The second and third columns span the area for card 1.\n\nRow 2: The second row also has three columns:\n- The first column is empty.\n- The second column is occupied by the area for card 2.\n- The third column is occupied by the area for card 3.\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Plot Life Expectancy with German Prompt and Insights\nDESCRIPTION: This code snippet generates a plot comparing life expectancy trends in the USA to the global life expectancy trend using a German prompt. It utilizes `return_elements=True` to retrieve chart insights, code explanation, and Vizro code. It then prints the insights and code before displaying the generated figure using `get_fig_object`.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-ai/docs/pages/user-guides/use-different-languages.md#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nfrom vizro_ai import VizroAI\nimport vizro.plotly.express as px\n\ndf = px.data.gapminder()\n\nvizro_ai = VizroAI()\nresult = vizro_ai.plot(df, \"Visualiere den Trend von der Lebenserwartung in USA über die Jahre im Vergleich zur Veränderung der weltweiten Lebenserwartung über die Jahre und kreiere eine deutsche Visualisierung\", return_elements=True)\nprint(f\"Insight:\\n{result.chart_insights}\\n\" )\nprint(f\"Code:\\n{result.code_explanation}\\n{result.code_vizro}\\n\" )\nresult.get_fig_object(df).show()\n```\n\n----------------------------------------\n\nTITLE: Building Vizro Dashboard with Tabs\nDESCRIPTION: This code demonstrates how to create a Vizro dashboard that includes two KPI cards and a Tabs component on the second page. The Tabs component allows users to switch between histograms of 'total_bill' and 'tip'.  It requires `vizro.models`, `vizro.plotly.express` and the `tips` dataframe.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/tutorials/explore-components.md#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport vizro.models as vm\nimport vizro.plotly.express as px\nfrom vizro import Vizro\nfrom vizro.tables import dash_ag_grid\nfrom vizro.models.types import capture\nfrom vizro.figures import kpi_card\n\ntips = px.data.tips()\n\nfirst_page = vm.Page(\n    title=\"Data\",\n    components=[\n        vm.AgGrid(\n            figure=dash_ag_grid(tips),\n            footer=\"\"\"**Data Source:** Bryant, P. G. and Smith, M. (1995).\n            Practical Data Analysis: Case Studies in Business Statistics.\n            Homewood, IL: Richard D. Irwin Publishing.\"\"\",\n        ),\n    ],\n)\n\nsecond_page = vm.Page(\n    title=\"Summary\",\n    components=[\n        vm.Figure(\n            figure=kpi_card(\n                data_frame=tips,\n                value_column=\"total_bill\",\n                agg_func=\"mean\",\n                value_format=\"${value:.2f}\",\n                title=\"Average Bill\",\n            )\n        ),\n        vm.Figure(\n            figure=kpi_card(\n                data_frame=tips,\n                value_column=\"tip\",\n                agg_func=\"mean\",\n                value_format=\"${value:.2f}\",\n                title=\"Average Tips\"\n            )\n        ),\n        vm.Tabs(\n            tabs=[\n                vm.Container(\n                    title=\"Total Bill ($)\",\n                    components=[\n                        vm.Graph(figure=px.histogram(tips, x=\"total_bill\")),\n                    ],\n                ),\n                vm.Container(\n                    title=\"Total Tips ($)\",\n                    components=[\n                        vm.Graph(figure=px.histogram(tips, x=\"tip\")),\n                    ],\n                ),\n            ],\n        )\n    ],\n)\n\ndashboard = vm.Dashboard(pages=[first_page, second_page])\nVizro().build(dashboard).run()\n```\n\n----------------------------------------\n\nTITLE: Styling Containers with Variants in Vizro (Python)\nDESCRIPTION: This Python code demonstrates how to style Vizro containers using the `variant` argument.  It uses the `filled` and `outlined` variants to change the appearance of containers, displaying a scatter plot and a box plot of the Iris dataset within them.  It requires the `vizro`, `vizro.models`, and `vizro.plotly.express` modules.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/container.md#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport vizro.models as vm\nimport vizro.plotly.express as px\nfrom vizro import Vizro\n\niris = px.data.iris()\n\npage = vm.Page(\n    title=\"Containers with different styles\",\n    layout=vm.Grid(grid=[[0, 1]]),\n    components=[\n        vm.Container(\n            title=\"Container with background color\",\n            components=[vm.Graph(figure=px.scatter(iris, x=\"sepal_width\", y=\"sepal_length\", color=\"species\"))],\n            variant=\"filled\"\n        ),\n        vm.Container(\n            title=\"Container with borders\",\n            components=[vm.Graph(figure=px.box(iris, x=\"species\", y=\"sepal_length\", color=\"species\"))],\n            variant=\"outlined\"\n        )\n    ],\n)\n\ndashboard = vm.Dashboard(pages=[page])\nVizro().build(dashboard).run()\n```\n\n----------------------------------------\n\nTITLE: Configure Vizro Page Layout with Grid\nDESCRIPTION: This snippet demonstrates how to configure the layout of a Vizro Page using the Grid model. The grid parameter defines the arrangement of components within the page. In this example, the layout is divided into two rows and two columns, with the component at index 2 spanning the entire second row.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/tutorials/explore-components.md#_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nlayout=vm.Grid(grid=[[0, 1], [2, 2]]),\n```\n\n----------------------------------------\n\nTITLE: YAML Configuration for Vizro Page with Custom Grid Layout\nDESCRIPTION: This YAML snippet defines a Vizro page with a custom Grid layout, mirroring the Python example. It specifies the grid structure using the `grid` parameter within the `layout` section. It defines the `components` and their types.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/layouts.md#_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n# Still requires a .py to add data to the data manager and parse YAML configuration\n# See yaml_version example\npages:\n  - components:\n      - text: |\n          # Component 0\n        type: card\n      - text: |\n          # Component 1\n        type: card\n      - text: |\n          # Component 2\n        type: card\n    layout:\n      grid: [[0, 1], [0, 2]]\n      type: grid\n    title: one_left_two_right\n```\n\n----------------------------------------\n\nTITLE: Customize Button Text - Python\nDESCRIPTION: This code snippet demonstrates how to customize the text displayed on a Vizro Button component. It imports the necessary Vizro modules, creates a Page containing a Button with the specified text, and builds the Dashboard.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/button.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport vizro.models as vm\nfrom vizro import Vizro\n\npage = vm.Page(\n    title=\"Button with text\",\n    components=[vm.Button(text=\"I'm a button!\")],\n)\n\ndashboard = vm.Dashboard(pages=[page])\nVizro().build(dashboard).run()\n```\n\n----------------------------------------\n\nTITLE: Load Election and Stocks Data using Plotly Express\nDESCRIPTION: This code snippet loads the election and stocks datasets from the Plotly Express library. The election dataset is loaded directly, while the stocks dataset is loaded with the `datetimes=True` parameter to ensure that the dates are properly formatted.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-ai/docs/pages/user-guides/create-complex-dashboard.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport vizro.plotly.express as px\n\ndf1 = px.data.election()\ndf2 = px.data.stocks(datetimes=True)\n```\n\n----------------------------------------\n\nTITLE: Valid Vizro Configuration JSON\nDESCRIPTION: This example shows a valid Vizro configuration in JSON format, defining a page with graphs and a filter. This demonstrates how the configuration maps to a dashboard.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/explanation/schema.md#_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"pages\": [\n    {\n      \"components\": [\n        {\n          \"figure\": {\n            \"_target_\": \"scatter\",\n            \"color\": \"species\",\n            \"data_frame\": \"iris\",\n            \"x\": \"sepal_length\",\n            \"y\": \"petal_width\"\n          },\n          \"type\": \"graph\"\n        },\n        {\n          \"figure\": {\n            \"_target_\": \"histogram\",\n            \"color\": \"species\",\n            \"data_frame\": \"iris\",\n            \"x\": \"sepal_width\"\n          },\n          \"type\": \"graph\"\n        }\n      ],\n      \"controls\": [\n        {\n          \"column\": \"species\",\n          \"type\": \"filter\"\n        }\n      ],\n      \"title\": \"My first dashboard\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Data into Vizro Data Manager (Vizro, Python)\nDESCRIPTION: This snippet shows how to import data using pandas and register it with the Vizro data manager.  First, pandas is used to read the data from a CSV file. Second, the imported data is assigned to the `data_manager` using a specified key (e.g., 'restaurant_bills').  This allows the dashboard components to access and display the data. This requires the `pandas` library.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-ai/docs/pages/user-guides/run-vizro-ai-dashboard.md#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndata = pd.read_csv('data.csv')  # Replace 'data.csv' with your filename or path to your data\n```\n\nLANGUAGE: python\nCODE:\n```\ndata_manager[\"restaurant_bills\"] = data\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Component Type in Vizro (Python)\nDESCRIPTION: This code snippet demonstrates how to register the new `TooltipNonCrossRangeSlider` type with its parent models (`Filter` and `Parameter`) using `add_type`. This registration is necessary when the custom component is part of a discriminated union, allowing the parent model to correctly handle the new type. Requires the custom component to be defined first.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/custom-components.md#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nvm.Filter.add_type(\"selector\", TooltipNonCrossRangeSlider)\nvm.Parameter.add_type(\"selector\", TooltipNonCrossRangeSlider)\n```\n\n----------------------------------------\n\nTITLE: Styling Containers with Variants in Vizro (YAML)\nDESCRIPTION: This YAML configuration defines styled Vizro containers using the `variant` argument. It configures containers with `filled` and `outlined` styles, displaying scatter and box plots of the Iris dataset.  It assumes that the `iris` DataFrame is available in the data manager via a corresponding `.py` file.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/container.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n# Still requires a .py to add data to the data manager and parse YAML configuration\n# See yaml_version example\npages:\n  - title: Containers with different styles\n    layout:\n      grid: [[0, 1]]\n      type: grid\n    components:\n      - type: container\n        title: Container with background color\n        components:\n          - type: graph\n            figure:\n              _target_: scatter\n              data_frame: iris\n              x: sepal_width\n              y: sepal_length\n              color: species\n        variant: filled\n      - type: container\n        title: Container with borders\n        components:\n          - type: graph\n            figure:\n              _target_: box\n              data_frame: iris\n              x: species\n              y: sepal_length\n              color: species\n        variant: outlined\n```\n\n----------------------------------------\n\nTITLE: Basic Dash DataTable Configuration in Vizro (YAML)\nDESCRIPTION: This YAML configuration demonstrates how to configure a basic Dash DataTable within a Vizro application. It defines the page layout and specifies the data source for the table, referencing a DataFrame named 'gapminder_2007'.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/table.md#_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\n# Still requires a .py to add data to the data manager and parse YAML configuration\n# See yaml_version example\npages:\n  - components:\n      - figure:\n          _target_: dash_data_table\n          data_frame: gapminder_2007\n        title: Dash DataTable\n        type: table\n    title: Example of a Dash DataTable\n```\n\n----------------------------------------\n\nTITLE: Selectors with info-icon - app.yaml (YAML)\nDESCRIPTION: This YAML configuration demonstrates how to configure an info icon for a Vizro selector using the `description` argument. It defines a page with a graph and a filter control, where the Checklist selector has a description that will be displayed as a tooltip when the info icon is hovered over.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/selectors.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\npages:\n  - title: Selectors with icons\n    components:\n      - type: graph\n        figure:\n          _target_: scatter\n          data_frame: iris\n          x: sepal_length\n          y: sepal_width\n    controls:\n      - column: species\n        type: filter\n        selector:\n          type: checklist\n          title: Select Species\n          description: |\n                Select which species of iris you like.\n\n                [Click here](https://en.wikipedia.org/wiki/Iris_flower_data_set) to learn more about flowers.\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Component in Vizro (Jumbotron)\nDESCRIPTION: Defines a custom component 'Jumbotron' that inherits from VizroBaseModel.  It includes a 'build' method to create the component's HTML structure using Dash components. The component is then registered with the 'Page' model to be used within Vizro dashboards.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/custom-components.md#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nclass Jumbotron(vm.VizroBaseModel):\n    \"\"\"New custom component `Jumbotron`.\"\"\"\n\n    type: Literal[\"jumbotron\"] = \"jumbotron\"\n    title: str\n    subtitle: str\n    text: str\n\n    def build(self):\n        return html.Div(\n            [\n                html.H2(self.title),\n                html.H3(self.subtitle),\n                html.P(self.text),\n            ]\n        )\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Action (open_offcanvas)\nDESCRIPTION: Defines a custom action 'open_offcanvas' that toggles the 'is_open' state of an Offcanvas component.  It uses the `@capture(\"action\")` decorator, indicating that it is a custom action within Vizro. The action takes the number of clicks ('n_clicks') and the current 'is_open' state as input.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/custom-components.md#_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n@capture(\"action\")\n    def open_offcanvas(n_clicks, is_open):\n        if n_clicks:\n            return not is_open\n        return is_open\n```\n\n----------------------------------------\n\nTITLE: Styling Image Dimensions with CSS in Vizro\nDESCRIPTION: This CSS snippet demonstrates how to change the width and height of an image in a Vizro application by using an attribute selector that targets the image's `src` attribute with a specific URL hash. This assumes that the image URL includes a unique hash (e.g., `#my-image`).\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/card.md#_snippet_6\n\nLANGUAGE: css\nCODE:\n```\nimg[src*=\"#my-image\"] {\n    width: 120px;\n    height: 120px;\n}\n```\n\n----------------------------------------\n\nTITLE: Subclassing RangeSlider in Vizro (Python)\nDESCRIPTION: This code snippet demonstrates how to create a custom component by subclassing the existing `RangeSlider` model in Vizro. It overrides the `build` method to prevent slider handles from crossing and adds a permanent tooltip. It requires `vizro` and `typing_extensions`.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/custom-components.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass TooltipNonCrossRangeSlider(vm.RangeSlider):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Custom Action with Radio Item Value Input in Vizro\nDESCRIPTION: This snippet shows how to create a custom action that receives the `value` of a `vm.RadioItems` component as input and displays it within a `vm.Card` component. The custom action function `update_card_text` is decorated with `@capture('action')` and takes the selected species as an argument.  The action is triggered by selecting an item, and the selected text is displayed on the card.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/custom-actions.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport vizro.models as vm\nimport vizro.plotly.express as px\nfrom vizro import Vizro\nfrom vizro.models.types import capture\n\ndf = px.data.iris()\nvm.Page.add_type(\"components\", vm.RadioItems)\n\n@capture(\"action\")\ndef update_card_text(species):\n    \"\"\"Returns the input value.\"\"\"\n    return f\"You selected species **{species}**\"\n\npage = vm.Page(\n    title=\"Action with value as input\",\n    layout=vm.Grid(grid=[[0, 1]]),\n    components=[\n        vm.RadioItems(\n            id=\"my_selector\",\n            title=\"Select a species:\",\n            options=df[\"species\"].unique().tolist(),\n            actions=[\n                vm.Action(function=update_card_text(), inputs=[\"my_selector.value\"], outputs=[\"my_card.children\"])\n            ],\n        ),\n        vm.Card(text=\"Placeholder text\", id=\"my_card\"),\n    ],\n)\n\ndashboard = vm.Dashboard(pages=[page])\nVizro().build(dashboard).run()\n```\n\n----------------------------------------\n\nTITLE: Creating Tabs with Containers in Vizro using YAML\nDESCRIPTION: This code demonstrates how to configure Tabs within a Vizro dashboard using YAML. It defines a Page with a Tabs component, which contains two Containers. Each Container has a title (used as the tab label) and a Graph component displaying different Plotly Express charts.  A corresponding Python file is required to load data into the data manager.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/tabs.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# Still requires a .py to add data to the data manager and parse YAML configuration\n# See yaml_version example\npages:\n  components:\n    - type: tabs\n      tabs:\n        - title: Tab I\n          type: container\n          components:\n            - type: graph\n              figure:\n                _target_: bar\n                data_frame: gapminder_2007\n                title: Graph 1\n                x: continent\n                y: lifeExp\n                color: continent\n            - type: graph\n              figure:\n                _target_: box\n                data_frame: gapminder_2007\n                title: Graph 2\n                x: continent\n                y: lifeExp\n                color: continent\n        - title: Tab II\n          type: container\n          components:\n            - type: graph\n              figure:\n                _target_: scatter\n                data_frame: gapminder_2007\n                title: Graph 3\n                x: gdpPercap\n                y: lifeExp\n                size: pop\n                color: continent\n  title: Tabs\n```\n\n----------------------------------------\n\nTITLE: Generating dashboard code with LangChain and Vizro-AI\nDESCRIPTION: This snippet demonstrates generating dashboard code using the established chain with a natural language request. It initializes a list of sample DataFrames and uses the chain to generate the dashboard code based on the given question.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-ai/docs/pages/user-guides/vizro-ai-langchain-guide.md#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndfs = [px.data.gapminder()]\n\ndashboard_response = chain.invoke(\n    \"Create a dashboard. This dashboard has a chart showing the correlation between gdpPercap and lifeExp.\"\n)\nprint(dashboard_response[0].content)\n```\n\n----------------------------------------\n\nTITLE: NavLink with Accordions in Vizro (app.yaml)\nDESCRIPTION: This YAML configuration defines the navigation structure for a Vizro dashboard, including a NavLink with accordion-style page grouping.  It specifies a navigation bar with a single NavLink item. The NavLink groups pages under 'Group A' and 'Group B'. Requires a corresponding Python script to load data and parse the YAML configuration.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/navigation.md#_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\n# Still requires a .py to add data to the data manager and parse YAML configuration\n# See yaml_version example\n# pages defined as in default example\nnavigation:\n  nav_selector:\n    type: nav_bar\n    items:\n      - label: Section 1\n        pages:\n          Group A:\n            - My first page\n            - My second page\n          Group B:\n            - My third page\n```\n\n----------------------------------------\n\nTITLE: Enable Simple Cache in Vizro\nDESCRIPTION: This code snippet shows how to enable a simple memory cache in Vizro using Flask-Caching. This is useful for development environments to reduce data loading times. The `Cache` object is instantiated with a configuration specifying the `SimpleCache` type, and assigned to `data_manager.cache`.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/data.md#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom flask_caching import Cache\nfrom vizro import Vizro\nimport pandas as pd\nimport vizro.plotly.express as px\nimport vizro.models as vm\n\nfrom vizro.managers import data_manager\n\ndef load_iris_data():\n    iris = pd.read_csv(\"iris.csv\")\n    return iris.sample(50)\n\ndata_manager.cache = Cache(config={\"CACHE_TYPE\": \"SimpleCache\"})\ndata_manager[\"iris\"] = load_iris_data\n\npage = vm.Page(\n    title=\"Update the chart on page refresh\",\n    components=[\n        vm.Graph(figure=px.box(\"iris\", x=\"species\", y=\"petal_width\", color=\"species\"))\n    ],\n)\n\ndashboard = vm.Dashboard(pages=[page])\nVizro().build(dashboard).run()\n```\n\n----------------------------------------\n\nTITLE: Instantiate VizroAI (Python)\nDESCRIPTION: This Python code instantiates the `VizroAI` class, creating an instance of the Vizro-AI dashboard generator. This instance will be used to create dashboards from user prompts.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-ai/docs/pages/tutorials/quickstart-dashboard.md#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom vizro_ai import VizroAI\n\nvizro_ai = VizroAI()\n```\n\n----------------------------------------\n\nTITLE: Creating KPI Card Figure (I) in Vizro\nDESCRIPTION: This snippet creates a `vm.Figure` containing a KPI card using the `kpi_card` function. The KPI card displays the average total bill from the `tips` dataframe, formatted as currency with two decimal places, and titled \"Average Bill\". Dependencies include `vizro.models` as `vm` and `vizro.figures.kpi_card`. The data frame `tips` is also a prerequisite.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/tutorials/explore-components.md#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nvm.Figure(\n    figure=kpi_card(\n        data_frame=tips,\n        value_column=\"total_bill\",\n        agg_func=\"mean\",\n        value_format=\"${value:.2f}\",\n        title=\"Average Bill\",\n    )\n)\n```\n\n----------------------------------------\n\nTITLE: Generating a Bar Chart in Jupyter Notebook with Vizro-AI\nDESCRIPTION: This snippet demonstrates how to generate a bar chart using Vizro-AI within a Jupyter Notebook. It imports necessary libraries (vizro.plotly.express and VizroAI), initializes VizroAI, loads data from vizro.plotly.express, and uses vizro_ai.plot to create the visualization. Ensure the OpenAI API key is set in a .env file.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-ai/docs/pages/user-guides/run-vizro-ai.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport vizro.plotly.express as px\nfrom vizro_ai import VizroAI\n\nvizro_ai = VizroAI()\n\ndf = px.data.gapminder()\nvizro_ai.plot(df, \"visualize the life expectancy per continent and color each continent\")\n```\n\n----------------------------------------\n\nTITLE: Creating KPI Card Figure (II) in Vizro\nDESCRIPTION: This snippet creates a `vm.Figure` containing a KPI card. The KPI card displays the average tip amount from the `tips` dataframe, formatted as currency with two decimal places, and titled \"Average Tips\". Dependencies include `vizro.models` as `vm` and `vizro.figures.kpi_card`. The data frame `tips` is also a prerequisite.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/tutorials/explore-components.md#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nvm.Figure(\n    figure=kpi_card(\n        data_frame=tips,\n        value_column=\"tip\",\n        agg_func=\"mean\",\n        value_format=\"${value:.2f}\",\n        title=\"Average Tips\"\n    )\n)\n```\n\n----------------------------------------\n\nTITLE: Creating VizroAI Instance\nDESCRIPTION: Creates an instance of the VizroAI class, passing the `llm` variable as the model to be used.  If `llm` is None, VizroAI will use a default model. No specific inputs or outputs beyond the instantiation.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-ai/examples/example.ipynb#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nvizro_ai = VizroAI(model=llm)\n```\n\n----------------------------------------\n\nTITLE: NavLink with Accordions in Vizro (app.py)\nDESCRIPTION: This Python code shows a complete Vizro application with a navigation bar and a NavLink that uses accordions for grouping pages. It defines three pages with different content and configures a dashboard with a navigation bar containing a NavLink that groups the pages into 'Group A' and 'Group B'.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/navigation.md#_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nfrom vizro import Vizro\nimport vizro.plotly.express as px\nimport vizro.models as vm\n\niris = px.data.iris()\n\npage_1 = vm.Page(\n    title=\"My first page\",\n    components=[\n        vm.Graph(figure=px.scatter(iris, x=\"sepal_length\", y=\"petal_width\", color=\"species\")),\n    ],\n)\npage_2 = vm.Page(\n    title=\"My second page\",\n    components=[\n        vm.Card(text=\"My text here\"),\n    ],\n)\npage_3 = vm.Page(\n    title=\"My third page\",\n    components=[\n        vm.Graph(figure=px.scatter(iris, x=\"sepal_length\", y=\"sepal_width\", color=\"species\")),\n    ],\n)\n\ndashboard = vm.Dashboard(\n    pages=[page_1, page_2, page_3],\n    navigation=vm.Navigation(\n        nav_selector=vm.NavBar(\n            items=[\n                vm.NavLink(\n                    label=\"Section 1\",\n                    pages={\"Group A\": [\"My first page\", \"My second page\"], \"Group B\": [\"My third page\"]},\n                )\n            ]\n        )\n    ),\n)\n\nVizro().build(dashboard).run()\n```\n\n----------------------------------------\n\nTITLE: Dynamic Filter with Specific Selector (Still Dynamic)\nDESCRIPTION: This code shows that if you use a specific selector (e.g., Checklist, Slider, DatePicker) for a dynamic filter without manually specifying `options` or `min` and `max`, the selector remains dynamic.  It demonstrates the default behavior of filters that are connected to dynamic data and should update their options.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/data.md#_snippet_12\n\nLANGUAGE: python\nCODE:\n```\ncontrols = [\n    vm.Filter(column=\"species\", selector=vm.Checklist()),\n    vm.Filter(column=\"sepal_length\", selector=vm.Slider()),\n    vm.Filter(column=\"date_column\", selector=vm.DatePicker(range=False)),\n]\n```\n\n----------------------------------------\n\nTITLE: YAML Configuration for Custom Card\nDESCRIPTION: Defines a Vizro dashboard configuration in YAML format, including two Card components with specified text and a custom ID for one of them.  It specifies the page title and component types. This configuration shows how the dashboard structure can be defined in YAML.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/custom-css.md#_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\n# Still requires a .py to add data to the data manager and parse YAML configuration\n# See yaml_version example\npages:\n  - components:\n      - text: |\n          Lorem ipsum dolor sit amet consectetur adipisicing elit.\n        type: card\n        id: custom-card\n      - text: |\n          Lorem ipsum dolor sit amet consectetur adipisicing elit.\n        type: card\n    title: Changing the card color\n```\n\n----------------------------------------\n\nTITLE: Add KPI Card Figure to Vizro Page - YAML\nDESCRIPTION: This YAML configuration defines a Vizro page with a KPI card component. It specifies the `kpi_card` function as the target and provides parameters such as `data_frame`, `value_column`, `value_format`, `icon`, and `title`.  The page also includes a filter for the 'day' column with RadioItems as the selector and uses a Flex layout with row direction.  Requires a Python file to provide data and parse the YAML.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/figure.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\npages:\n  - components:\n      - figure:\n          _target_: kpi_card\n          data_frame: tips\n          value_column: tip\n          value_format: ${value:.2f}\n          icon: shopping_cart\n          title: Average Price\n        type: figure\n    controls:\n      - column: day\n        type: filter\n        selector:\n          type: radio_items\n    layout:\n      direction: row\n      type: flex\n    title: KPI card\n```\n\n----------------------------------------\n\nTITLE: Defining complex grid layout (1l_2r)\nDESCRIPTION: Defines a complex Vizro grid layout with one row divided into two columns: the left column with one component and the right with two stacked components, using the `vm.Grid` function.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/layouts.md#_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nlayout=vm.Grid(grid=[[0,1],[0,2]])\n```\n\n----------------------------------------\n\nTITLE: Configure Navigation Bar in Vizro Dashboard\nDESCRIPTION: This code snippet demonstrates how to configure a navigation bar within a Vizro dashboard using `vm.Navigation`, `vm.NavBar`, and `vm.NavLink`.  It sets up two navigation links: one for the \"Data\" page and another for the \"Summary\" and \"Analysis\" pages, each with a specified label, target pages, and Material Design icon.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/tutorials/explore-components.md#_snippet_22\n\nLANGUAGE: python\nCODE:\n```\nnavigation=vm.Navigation(\n            nav_selector=vm.NavBar(\n                items=[\n                    vm.NavLink(label=\"Data\", pages=[\"Data\"], icon=\"database\"),\n                    vm.NavLink(label=\"Charts\", pages=[\"Summary\", \"Analysis\"], icon=\"bar_chart\"),\n                ]\n            )\n        )\n```\n\n----------------------------------------\n\nTITLE: Restricting Module Access with sys Module in Python\nDESCRIPTION: This code snippet illustrates a conceptual approach to restricting access to unsafe modules by using Python's `sys` module. The description refers to defining a whitelist of safe modules and packages and restricting certain built-in functions. Note that this snippet is conceptual and not a complete implementation.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-ai/docs/pages/explanation/safeguard.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport sys\n\nsafe_modules = ['pandas', 'numpy', 'vizro', 'plotly', 'datetime', 'matplotlib', 'dash', 'scipy', 'sklearn']\n\ndef safe_import(module_name):\n    if module_name in safe_modules:\n        return __import__(module_name)\n    else:\n        raise ImportError(f\"Module '{module_name}' is not allowed.\")\n\n# Example usage (not executable in this context, illustrative only):\n# pandas = safe_import('pandas')\n\n```\n\n----------------------------------------\n\nTITLE: Add Empty Sections to Grid - Python\nDESCRIPTION: Demonstrates how to add empty sections to a Vizro grid layout by specifying `-1` within the grid definition.  This allows for creating visual separation or spacing within the dashboard.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/layouts.md#_snippet_21\n\nLANGUAGE: python\nCODE:\n```\ngrid = [[0, 1, -1], [0, 2, -1]]\n```\n\nLANGUAGE: python\nCODE:\n```\nimport vizro.models as vm\nfrom vizro import Vizro\n\npage = vm.Page(\n    title=\"Adding empty spaces\",\n    layout=vm.Grid(grid=[[0, 1, -1],\n                               [0, 2, -1]]),\n    components=[vm.Card(text=\"\"\"# Component 0\"\"\"),\n                vm.Card(text=\"\"\"# Component 1\"\"\"),\n                vm.Card(text=\"\"\"# Component 2\"\"\"),\n                ],\n)\n\ndashboard = vm.Dashboard(pages=[page])\nVizro().build(dashboard).run()\n```\n\n----------------------------------------\n\nTITLE: Configuring advanced Flex Layout in YAML - Vizro\nDESCRIPTION: This YAML config defines a Vizro page utilizing the Flex layout with customized parameters. It configures the layout to arrange items in a row (`direction: row`), sets a gap of 40 pixels between them (`gap: 40px`), and enables wrapping to new lines if necessary (`wrap: true`). It uses the `violin` target to specify the plot type and parameters for the graph.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/layouts.md#_snippet_28\n\nLANGUAGE: yaml\nCODE:\n```\n# Still requires a .py to add data to the data manager and parse YAML configuration\n# See yaml_version example\npages:\n  - components:\n      - figure:\n          _target_: violin\n          x: day\n          y: tip\n          color: day\n          data_frame: tips\n        type: graph\n      - figure:\n          _target_: violin\n          x: day\n          y: tip\n          color: day\n          data_frame: tips\n        type: graph\n      - figure:\n          _target_: violin\n          x: day\n          y: tip\n          color: day\n          data_frame: tips\n        type: graph\n    layout:\n      type: flex\n      direction: row\n      gap: 40px\n      wrap: true\n    title: Flex - advanced example\n```\n\n----------------------------------------\n\nTITLE: Generating GDP Trend Plot with VizroAI\nDESCRIPTION: Generates a plot of GDP trend over years in the US using VizroAI. It calls the `plot` method of the `vizro_ai` instance, passing the DataFrame `df` and a natural language description of the desired plot as input. No specific output except visualization rendering.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-ai/examples/example.ipynb#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nvizro_ai.plot(df, \"the trend of gdp over years in the US\")\n```\n\n----------------------------------------\n\nTITLE: Obtain Pure Plotly fig Object\nDESCRIPTION: This example demonstrates how to get a basic Plotly `fig` object from the output of `VizroAI.plot` when `return_elements=True`. The `get_fig_object` method is used with `vizro=False` to obtain a standard Plotly figure without the Vizro theme. Requires `vizro_ai` and `plotly.express`.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-ai/docs/pages/user-guides/advanced-options.md#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom vizro_ai import VizroAI\nimport plotly.express as px\n\ndf = px.data.gapminder()\nvizro_ai = VizroAI()\n\nres = vizro_ai.plot(df, \"the trend of gdp over years in the US\", return_elements=True)\nfig = res.get_fig_object(data_frame=df, vizro=False)\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Configuring Advanced Grid Layout in Vizro using YAML\nDESCRIPTION: This code snippet demonstrates how to configure an advanced grid layout in Vizro using YAML. It defines a page with components and a layout.  Each component is a graph configured with data, x, y, size, and color properties. The `grid` property defines the layout of the graphs on the page using a 2D array.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/layouts.md#_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\n# Still requires a .py to add data to the data manager and parse YAML configuration\n# See yaml_version example\npages:\n  - components:\n      - figure:\n          _target_: line\n          data_frame: gapminder\n          x: year\n          y: lifeExp\n          color: continent\n          title: Graph 1\n        type: graph\n      - figure:\n          _target_: scatter\n          data_frame: gapminder\n          x: gdpPercap\n          y: lifeExp\n          size: pop\n          color: continent\n          title: Graph 2\n        type: graph\n      - figure:\n          _target_: box\n          data_frame: gapminder\n          x: continent\n          y: lifeExp\n          color: continent\n          title: Graph 3\n        type: graph\n      - figure:\n          _target_: line\n          data_frame: gapminder\n          x: year\n          y: lifeExp\n          color: continent\n          title: Graph 4\n        type: graph\n      - figure:\n          _target_: scatter\n          data_frame: gapminder\n          x: gdpPercap\n          y: lifeExp\n          size: pop\n          color: continent\n          title: Graph 5\n        type: graph\n    layout:\n      grid: [[0, 1, 3, 4], [2, 2, 3, 4]]\n      type: grid\n    title: Custom Grid - Advanced Example\n```\n\n----------------------------------------\n\nTITLE: Collapsible Container in Grid Layout (YAML)\nDESCRIPTION: This YAML configuration defines collapsible Vizro containers within a `Grid` layout using the `collapsed` argument.  It configures one container to start collapsed and another to start expanded, displaying scatter and box plots of the Iris dataset. It expects that a corresponding `.py` file is present to supply data to the data manager.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/container.md#_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\n# Still requires a .py to add data to the data manager and parse YAML configuration\n# See yaml_version example\npages:\n  - title: Collapsible containers\n    layout:\n      grid: [[0, 1]]\n      type: grid\n    components:\n      - type: container\n        title: Initially collapsed container\n        components:\n          - type: graph\n            figure:\n              _target_: scatter\n              data_frame: iris\n              x: sepal_width\n              y: sepal_length\n              color: species\n        collapsed: true\n      - type: container\n        title: Initially expanded container\n        components:\n          - type: graph\n            figure:\n              _target_: box\n              data_frame: iris\n              x: species\n              y: sepal_length\n              color: species\n        collapsed: false\n```\n\n----------------------------------------\n\nTITLE: Dash AG Grid with Pagination - YAML\nDESCRIPTION: This YAML configuration enables pagination for an AgGrid component in Vizro. It sets the `pagination` property within `dashGridOptions` to `true`. A python file is required to load the data into the data manager and to parse this configuration.  The 'type' attribute specifies 'ag_grid'.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/table.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n# Still requires a .py to add data to the data manager and parse YAML configuration\n# See yaml_version example\npages:\n  - components:\n      - figure:\n          _target_: dash_ag_grid\n          data_frame: gapminder\n          dashGridOptions:\n            pagination: true\n        type: ag_grid\n    title: Dash AG Grid with pagination\n```\n\n----------------------------------------\n\nTITLE: Responsive Icon Styling with CSS in Vizro\nDESCRIPTION: This CSS snippet shows how to make an icon responsive to theme switching in Vizro. It uses the `--fill-icon-image-card` CSS variable from the `vizro-bootstrap` CSS file to invert the icon's color during a theme switch. This assumes the icon initially has a white fill color, or the SVG code has been modified to add `fill=\"white\"`.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/card.md#_snippet_12\n\nLANGUAGE: css\nCODE:\n```\nimg[src*=\"#my-image\"] {\n    filter: var(--fill-icon-image-card);\n}\n```\n\n----------------------------------------\n\nTITLE: Formatted DataTable Configuration (YAML)\nDESCRIPTION: This YAML configuration defines a formatted Dash DataTable with title, header, and footer within a Vizro dashboard. It configures the table component, linking it to a data frame named `gapminder_2007`, which needs to be loaded by a corresponding Python file.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/table.md#_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\n# Still requires a .py to add data to the data manager and parse YAML configuration\n# See yaml_version example\npages:\n  - components:\n      - figure:\n          _target_: dash_data_table\n          data_frame: gapminder_2007\n        title: Gapminder Data Insights\n        header: |\n          #### An Interactive Exploration of Global Health, Wealth, and Population\n        footer: |\n          SOURCE: **Plotly gapminder data set, 2024**\n        type: table\n    title: Formatted DataTable\n```\n\n----------------------------------------\n\nTITLE: Using Data Catalog in Jupyter Session\nDESCRIPTION: Illustrates how to utilize an existing Kedro Data Catalog (assumed to be already defined as `catalog` in a Jupyter session) and register its datasets with Vizro's data manager. This assumes that the `catalog` variable is available in the Jupyter notebook environment.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/kedro-data-catalog.md#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom vizro.managers import data_manager\n\n\nfor dataset_name, dataset_loader in kedro_integration.datasets_from_catalog(catalog).items():\n    data_manager[dataset_name] = dataset_loader\n```\n\n----------------------------------------\n\nTITLE: Including a Subset of Pages in Vizro (Python - Full Example)\nDESCRIPTION: This snippet is a complete example that shows how to create pages and then only include some of them in the navigation using the `pages` parameter of the `vm.Navigation` object.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/navigation.md#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom vizro import Vizro\nimport vizro.plotly.express as px\nimport vizro.models as vm\n\niris = px.data.iris()\n\npage_1 = vm.Page(\n    title=\"My first page\",\n    components=[\n        vm.Card(text=\"My text here\"),\n    ],\n)\npage_2 = vm.Page(\n    title=\"My second page\",\n    components=[\n        vm.Card(text=\"My text here\"),\n    ],\n)\npage_3 = vm.Page(\n    title=\"My third page\",\n    components=[\n        vm.Card(text=\"My text here\"),\n    ],\n)\n\ndashboard = vm.Dashboard(\n    pages=[page_1, page_2, page_3], navigation=vm.Navigation(pages=[\"My first page\", \"My second page\"])\n)\nVizro().build(dashboard).run()\n```\n\n----------------------------------------\n\nTITLE: Static Data Referenced by Name in Python\nDESCRIPTION: This Python snippet demonstrates how to add a pandas DataFrame to the Vizro data manager and then reference it by name in a YAML configuration file. It reads data from a CSV file and assigns it to the \"iris\" key in the data manager.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/data.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport yaml\n\nfrom vizro import Vizro\nimport vizro.plotly.express as px\nimport vizro.models as vm\nimport pandas as pd\nfrom vizro.managers import data_manager\n\ndata_manager[\"iris\"] = pd.read_csv(\"iris.csv\") # (1)!\n\ndashboard = yaml.safe_load(Path(\"dashboard.yaml\").read_text(encoding=\"utf-8\"))\ndashboard = Dashboard(**dashboard)\n\nVizro().build(dashboard).run()\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Vizro Component Class\nDESCRIPTION: Illustrates the basic structure of creating a new Vizro component by subclassing `vm.VizroBaseModel`. This establishes the foundation for defining custom components within the Vizro framework.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/custom-components.md#_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nclass Jumbotron(vm.VizroBaseModel):\n```\n\n----------------------------------------\n\nTITLE: Custom Card Styling in CSS\nDESCRIPTION: Applies custom styling to a Vizro Card component by targeting the parent div with the class 'card' that contains a child with the id 'custom-card', and also targets the paragraph element within the card.  It changes the background color of the card's parent and the text color of the child paragraph element.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/custom-css.md#_snippet_11\n\nLANGUAGE: css\nCODE:\n```\n/* Apply styling to parent */\n.card:has(#custom-card) {\n    background-color: white;\n}\n\n/* Apply styling to child */\n#custom-card p {\n    color: black;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Dashboard Request Python\nDESCRIPTION: Defines a natural language prompt (`user_question_2_data`) that describes the desired dashboard layout, content, and interactions. This prompt is used as input to Vizro-AI to generate the dashboard configuration. The prompt includes requests for tables, charts, cards, and filters.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-ai/examples/example_dashboard.ipynb#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nuser_question_2_data = \"\"\"\nI need a page with 1 table.\nThe table shows the tech companies stock data.\n\nI need a second page showing 2 cards and one chart.\nThe first card says 'The Gapminder dataset provides historical data on countries' development indicators.'\nThe chart is a scatter plot showing life expectancy vs. GDP per capita by country.\nLife expectancy on the y axis, GDP per capita on the x axis, and colored by continent.\nThe second card says 'Data spans from 1952 to 2007 across various countries'\nThe layout uses a grid of 3 columns and 2 rows.\n\nRow 1: The first row has three columns:\nThe first column is occupied by the first card.\nThe second and third columns are spanned by the chart.\n\nRow 2: The second row mirrors the layout of the first row with respect to chart,\nbut the first column is occupied by the second card.\n\nAdd a filter to filter the scatter plot by continent.\nAdd a second filter to filter the chart by year.\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Basic Grid Layout Configuration in Python\nDESCRIPTION: This Python snippet shows an example of a valid `grid` configuration for the `Grid` model. The `grid` parameter specifies how components should be arranged in a grid structure. Each number corresponds to the index of the component in the `components` list.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/layouts.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ngrid = [[0, 1], [0, 2]]\n```\n\n----------------------------------------\n\nTITLE: Formatted DataTable Configuration (Python)\nDESCRIPTION: This Python code configures a formatted Dash DataTable within a Vizro dashboard. It demonstrates the usage of `title`, `header`, and `footer` arguments for the `vm.Table` component to provide context and descriptive information.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/table.md#_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nimport vizro.models as vm\nimport vizro.plotly.express as px\nfrom vizro import Vizro\nfrom vizro.tables import dash_data_table\n\ngapminder_2007 = px.data.gapminder().query(\"year == 2007\")\n\npage = vm.Page(\n    title=\"Formatted DataTable\",\n    components=[\n        vm.Table(\n            figure=dash_data_table(data_frame=gapminder_2007),\n            title=\"Gapminder Data Insights\",\n            header=\"\"\"#### An Interactive Exploration of Global Health, Wealth, and Population\"\"\",\n            footer=\"\"\"SOURCE: **Plotly gapminder data set, 2024**\"\"\",\n        )\n    ],\n)\n\ndashboard = vm.Dashboard(pages=[page])\nVizro().build(dashboard).run()\n```\n\n----------------------------------------\n\nTITLE: Load Environment Variables Python\nDESCRIPTION: Loads environment variables from a .env file into the current environment using the `dotenv` library. This allows sensitive information like API keys to be stored securely and accessed without hardcoding them in the code. This is a common practice for managing configuration in Python projects.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-ai/examples/example_dashboard.ipynb#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom dotenv import load_dotenv\n\nload_dotenv()\n```\n\n----------------------------------------\n\nTITLE: Customizing Text Component with Markdown in Python\nDESCRIPTION: This snippet demonstrates how to customize the Text component in Vizro using Markdown syntax within a Python script. It includes headers, block quotes, lists, and emphasis formatting. The code requires the vizro and vizro.models packages. The output will render the formatted text content within the Vizro dashboard.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/text.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport vizro.models as vm\nfrom vizro import Vizro\n\npage = vm.Page(\n    title=\"Customizing Text\",\n    components=[\n        vm.Text(\n            text=\"\"\"\n                # Header level 1 <h1>\n\n                ## Header level 2 <h2>\n\n                ### Header level 3 <h3>\n\n                #### Header level 4 <h4>\n\n                Commodi repudiandae consequuntur voluptatum laborum numquam blanditiis harum quisquam eius sed odit.\n\n                Fugiat iusto fuga praesentium option, eaque rerum! Provident similique accusantium nemo autem.\n\n                Obcaecati tenetur iure eius earum ut molestias architecto voluptate aliquam nihil, eveniet aliquid.\n\n                Culpa officia aut! Impedit sit sunt quaerat, odit, tenetur error, harum nesciunt ipsum debitis quas.\n\n                ### Block Quotes\n\n                >\n                > A block quote is a long quotation, indented to create a separate block of text.\n                >\n\n                ### Lists\n\n                * Item A\n                    * Sub Item 1\n                    * Sub Item 2\n                * Item B\n\n                ### Emphasis\n\n                This word will be *italic*\n\n                This word will be **bold**\n\n                This word will be _**bold and italic**_\n            \"\"\",\n        ),\n    ],\n)\n\ndashboard = vm.Dashboard(pages=[page])\nVizro().build(dashboard).run()\n```\n\n----------------------------------------\n\nTITLE: Custom Filter Selector\nDESCRIPTION: This snippet demonstrates how to change the default selector for a filter. It configures a `RadioItems` selector for the 'species' column instead of the default `Dropdown`. This allows for explicitly specifying a different selector type for the filter.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/filters.md#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom vizro import Vizro\nimport vizro.plotly.express as px\nimport vizro.models as vm\n\niris = px.data.iris()\n\npage = vm.Page(\n    title=\"My first page\",\n    components=[\n        vm.Graph(figure=px.scatter(iris, x=\"sepal_length\", y=\"petal_width\")),\n    ],\n    controls=[\n        vm.Filter(column=\"species\", selector=vm.RadioItems()),\n    ],\n)\n\ndashboard = vm.Dashboard(pages=[page])\nVizro().build(dashboard).run()\n```\n\n----------------------------------------\n\nTITLE: Example folder structure\nDESCRIPTION: Illustrates a sample folder structure for incorporating assets into a Vizro dashboard, demonstrating where to place CSS files, images (including icons, app, and logo images), and the favicon.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/assets.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n├── app.py\n├── assets\n│   ├── css\n│       ├── **/*.css\n│   ├── images\n│       ├── icons\n│           ├── collections.svg\n│       ├── app.svg\n│       ├── logo.svg\n│   ├── favicon.ico\n```\n\n----------------------------------------\n\nTITLE: Nested Parameter Configuration in Vizro (YAML)\nDESCRIPTION: This YAML configuration demonstrates how to configure nested parameters to target specific properties within nested objects, specifically modifying the `color_discrete_map` for multiple chart components. It allows changing the color of the 'virginica' species. It relies on a corresponding Python script to load data and initialize the Vizro application.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/parameters.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n# Still requires a .py to add data to the data manager and parse YAML configuration\n# See yaml_version example\npages:\n  - components:\n      - figure:\n          _target_: scatter\n          data_frame: iris\n          x: sepal_width\n          y: sepal_length\n          size: petal_length\n          color: species\n          color_discrete_map: {setosa: '#00b4ff', versicolor: '#ff9222'}\n        id: scatter_chart\n        type: graph\n      - figure:\n          _target_: bar\n          data_frame: iris\n          x: sepal_width\n          y: sepal_length\n          color: species\n          color_discrete_map: {setosa: '#00b4ff', versicolor: '#ff9222'}\n        id: bar_chart\n        type: graph\n    controls:\n      - selector:\n          options: ['#ff5267', '#3949ab']\n          value: '#3949ab'\n          multi: false\n          type: dropdown\n        targets: [scatter_chart.color_discrete_map.virginica, bar_chart.color_discrete_map.virginica]\n        type: parameter\n    title: My first page\n```\n\n----------------------------------------\n\nTITLE: Adding a Basic Card Component - YAML\nDESCRIPTION: This snippet shows the YAML configuration for adding a basic Card component to a Vizro dashboard. It defines a page with a card component containing Markdown text and a Flex layout.  This configuration requires a Python file to load data and parse the YAML.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/card.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\npages:\n  - components:\n      - text: |\n          Commodi repudiandae consequuntur voluptatum.\n        title: Card Title\n        type: card\n    layout:\n      type: flex\n    title: Card\n```\n\n----------------------------------------\n\nTITLE: Resolve Dataset Factories with Kedro project path\nDESCRIPTION: This code snippet demonstrates how to import a Kedro Data Catalog with dataset factories into the Vizro data manager when using a Kedro project path. It retrieves the catalog and pipelines from the project and iterates through the datasets to load them into the data manager.  It depends on `vizro.integrations.kedro` and `vizro.managers.data_manager`.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/kedro-data-catalog.md#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom vizro.integrations import kedro as kedro_integration\nfrom vizro.managers import data_manager\n\n\nproject_path = \"/path/to/kedro/project\"\ncatalog = kedro_integration.catalog_from_project(project_path)\npipelines = kedro_integration.pipelines_from_project(project_path)\n\nfor dataset_name, dataset_loader in kedro_integration.datasets_from_catalog(\n    catalog, pipeline=pipelines[\"__default__\"]\n).items():\n    data_manager[dataset_name] = dataset_loader\n```\n\n----------------------------------------\n\nTITLE: Configuring KPI Cards with YAML\nDESCRIPTION: This YAML configuration defines a page containing multiple KPI cards, configured using the `kpi_card` and `kpi_card_reference` targets. It specifies parameters such as `data_frame`, `value_column`, `reference_column`, `agg_func`, `value_format`, and `icon` to customize the appearance and behavior of each card.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/figure.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n# Still requires a .py to add data to the data manager and parse YAML configuration\n# See yaml_version example\npages:\n  - components:\n      - figure:\n          _target_: kpi_card\n          data_frame: df_kpi\n          value_column: Actual\n          title: KPI with value\n        type: figure\n      - figure:\n          _target_: kpi_card\n          data_frame: df_kpi\n          value_column: Actual\n          title: KPI with aggregation\n          agg_func: median\n        type: figure\n      - figure:\n          _target_: kpi_card\n          data_frame: df_kpi\n          value_column: Actual\n          title: KPI with formatting\n          value_format: ${value:.2f}\n        type: figure\n      - figure:\n          _target_: kpi_card\n          data_frame: df_kpi\n          value_column: Actual\n          title: KPI with icon\n          icon: shopping_cart\n        type: figure\n      - figure:\n          _target_: kpi_card_reference\n          data_frame: df_kpi\n          value_column: Actual\n          reference_column: Reference\n          title: KPI reference (pos)\n        type: figure\n      - figure:\n          _target_: kpi_card_reference\n          data_frame: df_kpi\n          value_column: Actual\n          reference_column: Reference\n          agg_func: median\n          title: KPI reference (neg)\n        type: figure\n      - figure:\n          _target_: kpi_card_reference\n          data_frame: df_kpi\n          value_column: Actual\n          reference_column: Reference\n          title: KPI reference with formatting\n          value_format: '{value:.2f}€'\n          reference_format: '{delta:+.2f}€ vs. last year ({reference:.2f}€)'\n        type: figure\n      - figure:\n          _target_: kpi_card_reference\n          data_frame: df_kpi\n          value_column: Actual\n          reference_column: Reference\n          title: KPI reference with icon\n          icon: shopping_cart\n        type: figure\n      - figure:\n          _target_: kpi_card_reference\n          data_frame: df_kpi\n          value_column: Actual\n          reference_column: Reference\n          title: KPI reference (reverse color)\n          reverse_color: true\n        type: figure\n    layout:\n      direction: row\n      wrap: true\n      type: flex\n    title: KPI cards\n```\n\n----------------------------------------\n\nTITLE: Set Default Theme for All Charts\nDESCRIPTION: This code snippet demonstrates how to set the default theme for all plotly charts using `plotly.io.templates`. It imports `plotly.io` and `vizro.plotly.express`, sets the default template to 'vizro_light', and creates a scatter matrix plot.  This will affect all subsequent plots created in the same session.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/themes.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.io as pio\nimport vizro.plotly.express as px\n\npio.templates.default = \"vizro_light\"\n\ndf = px.data.iris()\npx.scatter_matrix(\n    df,\n    dimensions=[\"sepal_length\", \"sepal_width\", \"petal_length\", \"petal_width\"],\n    color=\"species\",\n)\n```\n\n----------------------------------------\n\nTITLE: Including a Subset of Pages in Vizro (Python)\nDESCRIPTION: This snippet demonstrates how to include only a subset of pages in the navigation panel of a Vizro dashboard. It uses the `Navigation` model and specifies the `pages` argument to include only the desired pages by their titles. Note that it refers to the pages defined in the previous examples.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/navigation.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# page_1, page_2, page_3 defined as in default example\ndashboard = vm.Dashboard(\n    pages=[page_1, page_2, page_3], navigation=vm.Navigation(pages=[\"My first page\", \"My second page\"])\n)\nVizro().build(dashboard).run()\n```\n\n----------------------------------------\n\nTITLE: Custom Button Style with `extra` - YAML\nDESCRIPTION: This YAML configuration defines a Vizro Button component with custom styling applied via the `extra` argument. The `extra` argument contains a dictionary specifying arguments to be passed to the underlying `dbc.Button` component, in this case setting the button color to \"success\" and outlining it.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/button.md#_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\npages:\n  - title: Button with custom style\n    components:\n      - type: button\n        text: Success button\n        extra:\n          color: success\n          outline: true\n```\n\n----------------------------------------\n\nTITLE: Kedro Data Catalog YAML Configuration\nDESCRIPTION: This YAML snippet demonstrates how to configure a Kedro Data Catalog to load a CSV file into a pandas DataFrame. It specifies the file path, separator, and missing value indicators, as well as credentials for accessing the S3 bucket.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/data.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nmotorbikes:\n  type: pandas.CSVDataset\n  filepath: s3://your_bucket/data/motorbikes.csv\n  load_args:\n    sep: ','\n    na_values: [NA]\n  credentials: s3_credentials\n```\n\n----------------------------------------\n\nTITLE: Modifying RangeSlider Behavior in Vizro (Python)\nDESCRIPTION: This code snippet shows how to modify the behavior of the `dcc.RangeSlider` within the custom `TooltipNonCrossRangeSlider` component by setting `allowCross` to `False` and configuring the `tooltip`. It's part of overriding the `build` method.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/custom-components.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nallowCross=False,\ntooltip={\"placement\": \"bottom\", \"always_visible\": True}\n```\n\n----------------------------------------\n\nTITLE: Custom Font Configuration in CSS\nDESCRIPTION: Configures a custom font (PlayfairDisplay) for a Vizro app by defining the `@font-face` rule and applying it globally.  It specifies the font family and source URL, and applies it to all elements. Requires the font file to be placed in the `assets` directory.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/custom-css.md#_snippet_14\n\nLANGUAGE: css\nCODE:\n```\n@font-face {\n    font-family: PlayfairDisplay;\n    src: url(\"PlayfairDisplay-VariableFont_wght.ttf\") format(\"truetype\");\n}\n\n* {\n    font-family: PlayfairDisplay, Inter, sans-serif, Arial, serif;\n}\n```\n\n----------------------------------------\n\nTITLE: Styling KPI Cards with CSS\nDESCRIPTION: This CSS snippet defines the styling for KPI cards, ensuring uniform width and height to maintain a consistent look across all cards. It targets the `.card-kpi` class within the `.flex-item` container.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/figure.md#_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n/* We define a fixed height and width to ensure uniform styling for all KPI cards. */\n.flex-item .card-kpi {\n    width: 300px;\n    height: 150px;\n}\n```\n\n----------------------------------------\n\nTITLE: Set Graph width using Plotly argument - YAML\nDESCRIPTION: This YAML configuration shows how to define a Vizro dashboard page with multiple graphs, setting the `width` of each using the `width` argument within the Plotly violin chart definition. This configuration complements the Python code that adds data to the data manager.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/layouts.md#_snippet_30\n\nLANGUAGE: yaml\nCODE:\n```\n# Still requires a .py to add data to the data manager and parse YAML configuration\n# See yaml_version example\npages:\n  - components:\n      - figure:\n          _target_: violin\n          x: day\n          y: tip\n          color: day\n          data_frame: tips\n          width: 400\n        type: graph\n      - figure:\n          _target_: violin\n          x: day\n          y: tip\n          color: day\n          data_frame: tips\n          width: 400\n        type: graph\n      - figure:\n          _target_: violin\n          x: day\n          y: tip\n          color: day\n          data_frame: tips\n          width: 400\n        type: graph\n      - figure:\n          _target_: violin\n          x: day\n          y: tip\n          color: day\n          data_frame: tips\n          width: 400\n        type: graph\n      - figure:\n          _target_: violin\n          x: day\n          y: tip\n          color: day\n          data_frame: tips\n          width: 400\n        type: graph\n    layout:\n      type: flex\n      direction: row\n      gap: 40px\n      wrap: true\n    title: Change the width for Graph\n```\n\n----------------------------------------\n\nTITLE: WSGI application interface with Vizro app\nDESCRIPTION: This example explains the Vizro app implements the WSGI application interface and can be supplied to the WSGI server in the command `gunicorn app:app`. It showcases how a Vizro app can be directly passed to a WSGI server like Gunicorn.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/run-deploy.md#_snippet_8\n\n\n\n----------------------------------------\n\nTITLE: Python - Overwrite CSS Globally\nDESCRIPTION: This Python code creates a simple Vizro dashboard with a card containing h1, h2, and h6 tags. When combined with the CSS from the 'Overwrite CSS Globally' snippet, it will change the color of the h1 and h2 tags to hotpink. Place this in app.py and the css file in the assets folder.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/custom-css.md#_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nimport os\nimport vizro.models as vm\nfrom vizro import Vizro\n\npage = vm.Page(\n        title=\"Changing the header color\",\n        components=[\n            vm.Card(\n                text=\"\"\"\n\n                    # This is an <h1> tag\n\n                    ## This is an <h2> tag\n\n                    ###### This is an <h6> tag\n                \"\")\n            ],\n        )\n\ndashboard = vm.Dashboard(pages=[page])\nVizro().build(dashboard).run()\n```\n\n----------------------------------------\n\nTITLE: Setting OpenAI API Key as Environment Variable\nDESCRIPTION: This bash command demonstrates how to set the OpenAI API key as an environment variable. This is required for running Vizro-AI in a Python script where the key is not stored in a `.env` file. Replace \"your api key\" with the actual API key.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-ai/docs/pages/user-guides/run-vizro-ai.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nexport OPENAI_API_KEY=\"your api key\"\n```\n\n----------------------------------------\n\nTITLE: Changing assets folder path in Vizro (Python)\nDESCRIPTION: Demonstrates how to change the default 'assets' folder path in a Vizro application using the `assets_folder` argument within the `Vizro` class. This allows you to specify a custom directory for your static assets.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/assets.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nVizro(assets_folder=\"path/to/assets/folder\").build(dashboard).run()\n```\n\n----------------------------------------\n\nTITLE: Upgrade Vizro with pip\nDESCRIPTION: Upgrades Vizro to the latest version using pip. Requires pip to be installed and accessible in the current environment.  The `-U` flag ensures that any dependencies are also upgraded if needed.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/install.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npip install -U vizro\n```\n\n----------------------------------------\n\nTITLE: NavLink with Custom Icons in Vizro (snippet.py)\nDESCRIPTION: This Python snippet showcases how to use custom icons for NavLinks in a Vizro dashboard. It defines a dashboard with three pages and a navigation bar with two NavLink components. Each NavLink is configured with a different icon from the Google Material icons library.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/navigation.md#_snippet_14\n\nLANGUAGE: python\nCODE:\n```\n# page_1, page_2, page_3 defined as in default example\ndashboard = vm.Dashboard(\n    pages=[page_1, page_2, page_3],\n    navigation=vm.Navigation(\n        nav_selector=vm.NavBar(\n            items=[\n                vm.NavLink(\n                    label=\"Section 1\",\n                    icon=\"Bar Chart\",\n                    pages=[\"My first page\", \"My second page\"],\n                ),\n                vm.NavLink(label=\"Section 2\", icon=\"Pie Chart\", pages=[\"My third page\"]),\n            ]\n        )\n    ),\n)\n```\n\n----------------------------------------\n\nTITLE: Complete Dashboard Code with Two Pages (Vizro)\nDESCRIPTION: This complete code snippet merges the creation of the first and second pages into a single, runnable Vizro dashboard. It imports necessary libraries, defines two pages (one with an AgGrid table, the other with histograms), combines them into a dashboard, and then runs the dashboard using Vizro().build(dashboard).run().\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/tutorials/explore-components.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport vizro.models as vm\nimport vizro.plotly.express as px\nfrom vizro import Vizro\nfrom vizro.tables import dash_ag_grid\nfrom vizro.models.types import capture\nfrom vizro.figures import kpi_card\n\ntips = px.data.tips()\n\nfirst_page = vm.Page(\n    title=\"Data\",\n    components=[\n        vm.AgGrid(\n            figure=dash_ag_grid(tips),\n            footer=\"\"\"**Data Source:** Bryant, P. G. and Smith, M. (1995).\n            Practical Data Analysis: Case Studies in Business Statistics.\n            Homewood, IL: Richard D. Irwin Publishing.\"\"\",\n        ),\n    ],\n)\n\nsecond_page = vm.Page(\n    title=\"Summary\",\n    components=[\n        vm.Graph(figure=px.histogram(tips, x=\"total_bill\")),\n        vm.Graph(figure=px.histogram(tips, x=\"tip\")),\n    ],\n)\n\ndashboard = vm.Dashboard(pages=[first_page, second_page])\nVizro().build(dashboard).run()\n```\n\n----------------------------------------\n\nTITLE: Apply Vizro Bootstrap in Dash App\nDESCRIPTION: This code snippet shows how to apply Vizro's Bootstrap stylesheet in a pure Dash application. It imports `vizro` and `dash`, and then initializes a Dash app with `vizro.bootstrap` as an external stylesheet. This applies the Vizro-specific Bootstrap theme to the Dash app.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/themes.md#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport vizro\nfrom dash import Dash\n\napp = Dash(external_stylesheets=[vizro.bootstrap])\n```\n\n----------------------------------------\n\nTITLE: Import VizroAI and create DataFrame\nDESCRIPTION: Imports VizroAI from vizro_ai and plotly express as px.  Then creates a Pandas DataFrame 'df' using the gapminder dataset from plotly express.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-ai/docs/pages/tutorials/quickstart.md#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom vizro_ai import VizroAI\nimport vizro.plotly.express as px\n\ndf = px.data.gapminder()\n```\n\n----------------------------------------\n\nTITLE: Defining vertical grid layout\nDESCRIPTION: Defines a Vizro grid layout with two horizontally stacked rows, each containing one component, using the `vm.Grid` function.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/layouts.md#_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nlayout=vm.Grid(grid=[[0],[1]])\n```\n\n----------------------------------------\n\nTITLE: Adding Type to Custom Component in Vizro (Python)\nDESCRIPTION: This snippet defines a unique `type` literal for the custom `TooltipNonCrossRangeSlider` component, which is essential when the component is part of a discriminated union.  It allows Vizro to distinguish between different component types within the union.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/custom-components.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ntype: Literal[\"other_range_slider\"] = \"other_range_slider\"\n```\n\n----------------------------------------\n\nTITLE: Static Data Referenced by Name in YAML\nDESCRIPTION: This YAML snippet shows how to reference a data source stored in the data manager within a dashboard configuration. The `data_frame` argument in the `figure` specification refers to the \"iris\" data source.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/data.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\npages:\n  - components:\n      figure:\n        _target_: box\n        data_frame: iris # (1)!\n        x: species\n        y: petal_width\n        color: species\n      type: graph\n      title: Static data example\n```\n\n----------------------------------------\n\nTITLE: Nesting Containers in Vizro (Python)\nDESCRIPTION: This snippet demonstrates how to nest containers within a Vizro dashboard.  A parent container contains a child container, which in turn contains a button. This creates a hierarchical structure for organizing dashboard components.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/container.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nvm.Container(\n    title=\"Parent Container\",\n    components=[\n        vm.Container(\n            title=\"Child Container\",\n            components=[vm.Button()],\n        )\n    ],\n)\n```\n\n----------------------------------------\n\nTITLE: Building a Custom Component's UI\nDESCRIPTION: Demonstrates the core logic of building a custom component's user interface, using `dash` components to structure and render the component's visual elements.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/custom-components.md#_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nreturn html.Div(\n        ...\n    )\n    ...\n```\n\n----------------------------------------\n\nTITLE: Creating a First Page with a Table using Vizro\nDESCRIPTION: This code snippet demonstrates how to create a Vizro dashboard with a single page containing an AgGrid table. It imports necessary Vizro modules, loads the tips dataset, creates a Page with an AgGrid component displaying the data, and adds a footer providing the data source. The dashboard is then built and run.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/tutorials/explore-components.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport vizro.models as vm\nimport vizro.plotly.express as px\nfrom vizro import Vizro\nfrom vizro.tables import dash_ag_grid\nfrom vizro.models.types import capture\nfrom vizro.figures import kpi_card\n\ntips = px.data.tips()\n\nfirst_page = vm.Page(\n    title=\"Data\",\n    components=[\n        vm.AgGrid(\n            figure=dash_ag_grid(tips),\n            footer=\"\"\"**Data Source:** Bryant, P. G. and Smith, M. (1995).\n            Practical Data Analysis: Case Studies in Business Statistics.\n            Homewood, IL: Richard D. Irwin Publishing.\"\"\",\n        ),\n    ],\n)\n\ndashboard = vm.Dashboard(pages=[first_page])\nVizro().build(dashboard).run()\n```\n\n----------------------------------------\n\nTITLE: Vizro App with Custom Card\nDESCRIPTION: Creates a Vizro dashboard with two Card components, one with a custom ID and one without. It imports the necessary Vizro modules, defines a page with the cards, and builds/runs the dashboard. This example demonstrates how to apply CSS customization to one specific card.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/custom-css.md#_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nimport vizro.models as vm\nfrom vizro import Vizro\n\npage = vm.Page(\n    title=\"Changing the card color\",\n    components=[\n        vm.Card(id=\"custom-card\", text=\"\"\"Lorem ipsum dolor sit amet consectetur adipisicing elit.\"\"\"),\n        vm.Card(text=\"\"\"Lorem ipsum dolor sit amet consectetur adipisicing elit.\"\"\")\n             ],\n)\n\ndashboard = vm.Dashboard(pages=[page])\nVizro().build(dashboard).run()\n```\n\n----------------------------------------\n\nTITLE: Initializing Text Component in Vizro with Python\nDESCRIPTION: This snippet demonstrates how to create a basic Text component in Vizro using Python. It defines a Page containing a Text component with simple text content. It requires the vizro and vizro.models packages. The resulting dashboard will display the specified text.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/text.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport vizro.models as vm\nfrom vizro import Vizro\n\npage = vm.Page(\n    title=\"Text example\",\n    components=[\n        vm.Text(\n            text=\"Commodi repudiandae consequuntur voluptatum.\"\n        ),\n    ],\n)\n\ndashboard = vm.Dashboard(pages=[page])\nVizro().build(dashboard).run()\n```\n\n----------------------------------------\n\nTITLE: Defining Complex Dashboard Request Python\nDESCRIPTION: Defines a natural language prompt (`user_question_2_data`) describing a complex dashboard with multiple pages, cards, charts, filters, and a button. It also requests grouping content into NavLinks, which might involve unsupported features in Vizro-AI.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-ai/examples/example_dashboard.ipynb#_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nuser_question_2_data = \"\"\"\n<Page 1>\nI need a page showing 2 cards, one chart, and 1 button.\nThe first card says 'The Tips dataset provides insights into customer tipping behavior.'\nThe chart is a bar chart showing the total bill amount by day.\nDay on the x axis, total bill amount on the y axis, and colored by time of day.\nThe second card says 'Data collected from various days and times.'\nLayout the two cards on the left and the chart on the right. Two cards take 1/3 of the whole space on the left in total.\nThe first card is on top of the second card vertically.\nThe chart takes 2/3 of the whole space and is on the right.\nThe button would trigger a download action to download the Tips dataset.\nAdd a filter to filter the bar chart by `size`.\nMake another tab on this page,\nIn this tab, create a card saying \"Tipping patterns and trends.\"\nGroup all the above content into the first NavLink.\n\n<Second NavLink>\nCreate two pages:\n1. The first page has a card saying \"Analyzing global development trends.\"\n2. The second page has a scatter plot showing GDP per capita vs. life expectancy.\nGDP per capita on the x axis, life expectancy on the y axis, and colored by continent.\nAdd a parameter to control the title of the scatter plot,\nwith title options \"Economic Growth vs. Health\" and \"Development Indicators.\"\nAlso create a button and a spinning circle on the right-hand side of the page.\n\n<Third NavLink>\nCreate one page:\n1. The first page has a card saying \"Stock price trends over time.\"\nCreate a button and a spinning circle on the right-hand side of the page.\n\nFor hosting the dashboard on AWS, which service should I use?\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: CSS Styling a Card Component\nDESCRIPTION: This example demonstrates how to style a card component by targeting its CSS class 'card' and changing its background color to blue.  This assumes the existence of HTML elements that have the class 'card'.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/custom-css.md#_snippet_3\n\nLANGUAGE: CSS\nCODE:\n```\n.card {\n    background-color: blue;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining complex grid layout (1t_2b)\nDESCRIPTION: Defines a complex Vizro grid layout with two rows: the top row with a single component and the bottom row divided into two components, using the `vm.Grid` function.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/layouts.md#_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nlayout=vm.Grid(grid=[[0,0],[1,2]])\n```\n\n----------------------------------------\n\nTITLE: Start Jupyter Notebook\nDESCRIPTION: Activates a virtual environment (assumed to be already set up) and starts a Jupyter Notebook in the browser. The Jupyter Notebook allows for interactive exploration and execution of Vizro-AI code.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-ai/docs/pages/tutorials/quickstart.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\njupyter notebook\n```\n\n----------------------------------------\n\nTITLE: Setting Dashboard Title\nDESCRIPTION: This snippet shows how to set the title attribute of a Vizro Dashboard. It initializes a Dashboard object with multiple pages and assigns the title 'Tips Analysis Dashboard'.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/tutorials/explore-components.md#_snippet_20\n\nLANGUAGE: python\nCODE:\n```\ndashboard = vm.Dashboard(pages=[first_page, second_page, third_page], title=\"Tips Analysis Dashboard\")\n```\n\n----------------------------------------\n\nTITLE: Run Vizro Dashboard in Jupyter Notebook\nDESCRIPTION: This snippet demonstrates how to run a Vizro dashboard within a Jupyter Notebook environment. It replicates the Python script example, creating a dashboard with a scatter plot and running it inline. The `jupyter_mode` argument can be used to control where the dashboard is displayed.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/run-deploy.md#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nfrom vizro import Vizro\nimport vizro.plotly.express as px\nimport vizro.models as vm\n\niris = px.data.iris()\n\npage = vm.Page(\n    title=\"My first page\",\n    components=[\n        vm.Graph(figure=px.scatter(iris, x=\"sepal_length\", y=\"petal_width\", color=\"species\")),\n    ],\n)\n\ndashboard = vm.Dashboard(pages=[page])\nVizro().build(dashboard).run()\n```\n\n----------------------------------------\n\nTITLE: HTML Structure of a Card\nDESCRIPTION: Demonstrates the HTML structure of a Vizro Card component, highlighting the relationship between the parent div, the div with the custom ID, and the child paragraph element. This helps in identifying the correct CSS selectors for styling specific parts of the card.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/custom-css.md#_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"card\">\n <div id=\"custom-card\">\n  <p>\n   Lorem ipsum dolor sit amet consectetur adipisicing elit.\n  </p>\n </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Vertical Stacking Grid Layout Configuration\nDESCRIPTION: This snippet shows how to configure the Grid layout for vertical stacking of components.  Each component is placed in its own row. The numbers represent the indices of the components in the `components` list of the `Page` model.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/layouts.md#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ngrid = [[0], [1], [2]]\n```\n\n----------------------------------------\n\nTITLE: Custom Components configuration (YAML)\nDESCRIPTION: This YAML code indicates that custom components are only configurable via Python in Vizro. This approach allows for more flexibility and complex logic compared to direct YAML configuration.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/custom-components.md#_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\n# Custom components are currently only possible via Python configuration\n```\n\n----------------------------------------\n\nTITLE: Installing Vizro-AI with Anthropic Support\nDESCRIPTION: This command shows how to install Vizro-AI with optional dependencies for Anthropic model support.  It uses pip to install the base package and the langchain-anthropic integration.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-ai/docs/pages/user-guides/customize-vizro-ai.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install -U vizro_ai[anthropic]\n```\n\n----------------------------------------\n\nTITLE: CSS Element Selector Example\nDESCRIPTION: This example demonstrates how to use the element selector to style all h1 and p elements within the Vizro app. It sets the font size of all h1 elements to 20px and the color of all p elements to green.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/custom-css.md#_snippet_0\n\nLANGUAGE: CSS\nCODE:\n```\nh1 {\n    font-size: 20px;\n}\n\np {\n    color: green;\n}\n```\n\n----------------------------------------\n\nTITLE: Verify Vizro Installation (Python)\nDESCRIPTION: Verifies that Vizro is installed correctly by importing the `vizro` module and printing its version. Requires Vizro to be installed in the current environment.  The output is the Vizro version string.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/install.md#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport vizro\n\nprint(vizro.__version__)\n```\n\n----------------------------------------\n\nTITLE: Creating a Default Navigation in Vizro (YAML)\nDESCRIPTION: This snippet shows how to define pages in a Vizro dashboard using YAML. This approach requires a corresponding Python file for data loading and YAML configuration parsing. The pages are defined with a title and a card component.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/navigation.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# Still requires a .py to add data to the data manager and parse YAML configuration\n# See yaml_version example\npages:\n  - components:\n      - text: My text here\n        type: card\n    title: My first page\n  - components:\n      - text: My text here\n        type: card\n    title: My second page\n  - components:\n      - text: My text here\n        type: card\n    title: My third page\n```\n\n----------------------------------------\n\nTITLE: Custom Dash AgGrid creation\nDESCRIPTION: Defines a custom Dash AgGrid function `my_custom_aggrid` that accepts a list of column names and a Pandas DataFrame. It returns an `AgGrid` object with specified columns and default styles. The function is decorated with `@capture(\"ag_grid\")` to integrate with Vizro. Requires `dash_ag_grid`, `vizro`, `vizro.models`, and `pandas` (through `vizro.plotly.express`).\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/custom-tables.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport vizro.models as vm\nimport vizro.plotly.express as px\nfrom dash_ag_grid import AgGrid\nfrom vizro import Vizro\nfrom vizro.models.types import capture\n\ndf = px.data.gapminder().query(\"year == 2007\")\n\n\n@capture(\"ag_grid\")\ndef my_custom_aggrid(chosen_columns: list[str], data_frame=None):\n    \"\"\"Custom ag_grid.\"\"\"\n    defaults = {\n        \"className\": \"ag-theme-quartz-dark ag-theme-vizro\",\n        \"defaultColDef\": {\n            \"resizable\": True,\n            \"sortable\": True,\n            \"filter\": True,\n            \"filterParams\": {\n                \"buttons\": [\"apply\", \"reset\"],\n                \"closeOnApply\": True,\n            },\n            \"flex\": 1,\n            \"minWidth\": 70,\n        },\n        \"style\": {\"height\": \"100%\"},\n    }\n    return AgGrid(\n        columnDefs=[{\"field\": col} for col in chosen_columns], rowData=data_frame.to_dict(\"records\"), **defaults\n    )\n\n\npage = vm.Page(\n    title=\"Example of a custom Dash AgGrid\",\n    components=[\n        vm.AgGrid(\n            id=\"custom_ag_grid\",\n            title=\"Custom Dash AgGrid\",\n            figure=my_custom_aggrid(\n                data_frame=df, chosen_columns=[\"country\", \"continent\", \"lifeExp\", \"pop\", \"gdpPercap\"]\n            ),\n        ),\n    ],\n    controls=[\n        vm.Parameter(\n            targets=[\"custom_ag_grid.chosen_columns\"],\n            selector=vm.Dropdown(title=\"Choose columns\", options=df.columns.to_list()),\n        )\n    ],\n)\n\ndashboard = vm.Dashboard(pages=[page])\nVizro().build(dashboard).run()\n```\n\n----------------------------------------\n\nTITLE: NavLink with Custom Icons in Vizro (app.yaml)\nDESCRIPTION: This YAML configuration demonstrates how to define NavLinks with custom icons in a Vizro dashboard's navigation structure. The YAML defines a navigation bar with two NavLink items. Each NavLink specifies an 'icon' attribute, referring to a corresponding icon in the Google Material Icons library.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/navigation.md#_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\nnavigation:\n  nav_selector:\n    type: nav_bar\n    items:\n      - label: Section 1\n        icon: Bar Chart\n        pages:\n          - My first page\n          - My second page\n      - label: Section 1\n        icon: Pie Chart\n        pages:\n          - My third page\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Chart Function\nDESCRIPTION: This code defines a custom chart function named `custom_chart` that uses `plotly.express` to create a scatter plot of the gapminder dataset. This function serves as an example for creating custom charts within Vizro, where it takes a DataFrame as input and returns a `go.Figure` object, which can then be integrated into a Vizro dashboard.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-ai/docs/pages/user-guides/add-generated-chart-usecase.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n@capture(\"graph\")\ndef custom_chart(data_frame):\n    fig = px.scatter(\n        data_frame,\n        x=\"gdpPercap\",\n        y=\"lifeExp\",\n        size=\"pop\",\n        color=\"continent\",\n        animation_frame=\"year\",\n        hover_name=\"country\",\n        size_max=60,\n    )\n    fig.update_layout(\n        legend=dict(orientation=\"h\", yanchor=\"bottom\", y=1.02, xanchor=\"right\", x=1)\n    )\n    return fig\n```\n\n----------------------------------------\n\nTITLE: CSS - Hide Page Title on Selected Pages\nDESCRIPTION: This CSS code hides the page title (identified by `#right-header`) on a specific page, identified by its ID (`#page-with-hidden-title`). The page ID is used to target only the title on the specified page.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/custom-css.md#_snippet_7\n\nLANGUAGE: CSS\nCODE:\n```\n#page-with-hidden-title #right-header {\n    display: none;\n}\n```\n\n----------------------------------------\n\nTITLE: Horizontal Stacking Grid Layout Configuration\nDESCRIPTION: This snippet shows how to configure the Grid layout for horizontal stacking of components. All components are placed in a single row.  The numbers represent the indices of the components in the `components` list of the `Page` model.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/layouts.md#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ngrid = [[0, 1, 2]]\n```\n\n----------------------------------------\n\nTITLE: Create and Activate venv Environment\nDESCRIPTION: Creates a virtual environment using `venv` and activates it.  The `venv` module is included in the Python standard library. The virtual environment isolates project dependencies.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/install.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npython3 -m venv .venv\nsource .venv/bin/activate\n```\n\n----------------------------------------\n\nTITLE: Export OpenAI API Key\nDESCRIPTION: Sets the OpenAI API key as an environment variable. This is necessary for Vizro-AI to access the language model used for generating visualizations.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-ai/docs/pages/tutorials/quickstart.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nexport OPENAI_API_KEY=\"sk-YOURKEY\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Dash App with assets_external_path\nDESCRIPTION: This example demonstrates how to configure the underlying Dash app within Vizro using the `assets_external_path` argument when `serve_locally=False`. This allows serving custom assets from a CDN, further optimizing performance. An environment variable can also be used.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/run-deploy.md#_snippet_7\n\n\n\n----------------------------------------\n\nTITLE: CSS Overwrite Globally\nDESCRIPTION: This example shows how to overwrite global CSS properties by targeting the element selector (h1, h2) and setting the color to hotpink. This CSS file should be placed in the assets folder.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/custom-css.md#_snippet_4\n\nLANGUAGE: CSS\nCODE:\n```\nh1,\nh2 {\n    color: hotpink;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Dash App with serve_locally\nDESCRIPTION: This example demonstrates how to configure the underlying Dash app within Vizro using the `serve_locally` argument. Setting this to `False` enables serving Dash component libraries from a Content Delivery Network (CDN), reducing server load and potentially improving performance. Vizro uses jsDeliver as a CDN.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/run-deploy.md#_snippet_6\n\n\n\n----------------------------------------\n\nTITLE: Running Gunicorn with workers\nDESCRIPTION: This command starts the Gunicorn server with four worker processes to serve a Vizro application. It assumes the Vizro app is defined in `app.py` and accessible via the `app` variable.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/run-deploy.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngunicorn app:app --workers 4\n```\n\n----------------------------------------\n\nTITLE: Create Vizro Dashboard with Layout and Components\nDESCRIPTION: This snippet creates a Vizro dashboard with two pages. The second page includes a custom layout defined using `vm.Grid`, along with KPI cards and tabs containing graphs. It demonstrates how to structure components and apply a grid layout to enhance the dashboard's presentation.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/tutorials/explore-components.md#_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nimport vizro.models as vm\nimport vizro.plotly.express as px\nfrom vizro import Vizro\nfrom vizro.tables import dash_ag_grid\nfrom vizro.models.types import capture\nfrom vizro.figures import kpi_card\n\ntips = px.data.tips()\n\nfirst_page = vm.Page(\n    title=\"Data\",\n    components=[\n        vm.AgGrid(\n            figure=dash_ag_grid(tips),\n            footer=\"\"\"**Data Source:** Bryant, P. G. and Smith, M (1995)\n            Practical Data Analysis: Case Studies in Business Statistics.\n            Homewood, IL: Richard D. Irwin Publishing.\"\"\",\n        ),\n    ],\n)\n\nsecond_page = vm.Page(\n    title=\"Summary\",\n    layout=vm.Grid(grid=[[0, 1, -1, -1], [2, 2, 2, 2], [2, 2, 2, 2], [2, 2, 2, 2]]),\n    components=[\n        vm.Figure(\n            figure=kpi_card(\n                data_frame=tips,\n                value_column=\"total_bill\",\n                agg_func=\"mean\",\n                value_format=\"${value:.2f}\",\n                title=\"Average Bill\",\n            )\n        ),\n        vm.Figure(\n            figure=kpi_card(\n                data_frame=tips,\n                value_column=\"tip\",\n                agg_func=\"mean\",\n                value_format=\"${value:.2f}\",\n                title=\"Average Tips\"\n            )\n        ),\n        vm.Tabs(\n            tabs=[\n                vm.Container(\n                    title=\"Total Bill ($)\",\n                    components=[\n                        vm.Graph(figure=px.histogram(tips, x=\"total_bill\")),\n                    ],\n                ),\n                vm.Container(\n                    title=\"Total Tips ($)\",\n                    components=[\n                        vm.Graph(figure=px.histogram(tips, x=\"tip\")),\n                    ],\n                ),\n            ],\n        )\n    ],\n)\n\ndashboard = vm.Dashboard(pages=[first_page, second_page])\nVizro().build(dashboard).run()\n```\n\n----------------------------------------\n\nTITLE: Vizro Graph Configuration JSON\nDESCRIPTION: This JSON configures a graph within Vizro. It shows how a CapturedCallable can be specified in JSON using the _target_ key.  In this case, it defines a histogram.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/explanation/schema.md#_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"figure\": {\n    \"_target_\": \"histogram\",\n    \"color\": \"species\",\n    \"data_frame\": \"iris\",\n    \"x\": \"sepal_width\"\n  },\n  \"type\": \"graph\"\n}\n```\n\n----------------------------------------\n\nTITLE: Upgrade Vizro-AI Package\nDESCRIPTION: This snippet upgrades the Vizro-AI package to the latest version using pip. The `-U` flag ensures that pip upgrades the package.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-ai/docs/pages/user-guides/install.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\npip install -U vizro_ai\n```\n\n----------------------------------------\n\nTITLE: Install Vizro-AI with pip\nDESCRIPTION: This snippet installs the Vizro-AI package using pip. It is the primary method for installing the core Vizro-AI library.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-ai/docs/pages/user-guides/install.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npip install vizro_ai\n```\n\n----------------------------------------\n\nTITLE: Create and Activate Conda Environment\nDESCRIPTION: Creates a virtual environment using `conda` and activates it.  `conda` must be installed separately. The virtual environment isolates project dependencies.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/install.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nconda create --name vizro-environment\nconda activate vizro-environment\n```\n\n----------------------------------------\n\nTITLE: Check Vizro-AI version\nDESCRIPTION: Imports the vizro_ai package and prints its version to the console.  This verifies that Vizro-AI is installed correctly and accessible within the Jupyter Notebook environment.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-ai/docs/pages/tutorials/quickstart.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport vizro_ai\n\nprint(vizro_ai.__version__)\n```\n\n----------------------------------------\n\nTITLE: Configure Cache Timeout in Vizro\nDESCRIPTION: This example demonstrates how to set a custom cache timeout for dynamic data in Vizro. The `CACHE_DEFAULT_TIMEOUT` parameter is set to 600 seconds (10 minutes) within the `Cache` configuration.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/data.md#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ndata_manager.cache = Cache(config={\"CACHE_TYPE\": \"SimpleCache\", \"CACHE_DEFAULT_TIMEOUT\": 600})\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Component with Page Model\nDESCRIPTION: Registers the custom component 'Jumbotron' with the Vizro 'Page' model, allowing it to be used as a component within a Vizro dashboard page. This registration is necessary for Vizro to recognize and utilize the custom component.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/custom-components.md#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nvm.Page.add_type(\"components\", Jumbotron)\n```\n\n----------------------------------------\n\nTITLE: Python - Hide Page Title on Selected Pages\nDESCRIPTION: This Python code creates a Vizro dashboard with two pages. The first page has the ID 'page-with-hidden-title' and will have its title hidden by the accompanying CSS. The second page will display its title normally. Use with the CSS above and place the CSS file in the assets folder.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/custom-css.md#_snippet_8\n\nLANGUAGE: Python\nCODE:\n```\nimport vizro.models as vm\nfrom vizro import Vizro\n\npage_one = vm.Page(\n    id=\"page-with-hidden-title\",\n    title=\"Page with hidden title\",\n    components=[vm.Card(text=\"\"\"# Placeholder\"\"\")]\n)\n\npage_two = vm.Page(\n    title=\"Page with shown title\",\n    components=[vm.Card(text=\"\"\"# Placeholder\"\"\")]\n)\n\ndashboard = vm.Dashboard(pages=[page_one, page_two])\nVizro().build(dashboard).run()\n```\n\n----------------------------------------\n\nTITLE: Inline Radio Items - app.yaml (YAML)\nDESCRIPTION: This YAML configuration demonstrates how to make a RadioItems selector display inline instead of stacked vertically using the `extra` argument.  The `inline: true` property is passed through `extra` to the underlying Dash component.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/selectors.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\npages:\n  - title: Inline Radio Items\n    components:\n      - type: graph\n        figure:\n          _target_: scatter\n          data_frame: iris\n          x: sepal_length\n          y: sepal_width\n    controls:\n      - column: species\n        type: filter\n        selector:\n          type: radio_items\n          title: Select Species\n          extra:\n            inline: true\n```\n\n----------------------------------------\n\nTITLE: Add Empty Sections to Grid - YAML\nDESCRIPTION: Demonstrates how to add empty sections to a Vizro grid layout by specifying `-1` within the grid definition in the YAML configuration. Requires a corresponding Python file for data management and YAML parsing.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/layouts.md#_snippet_22\n\nLANGUAGE: yaml\nCODE:\n```\n# Still requires a .py to add data to the data manager and parse YAML configuration\n# See yaml_version example\npages:\n  - components:\n      - text: | \n          # Component 0\n        type: card\n      - text: | \n          # Component 1\n        type: card\n      - text: | \n          # Component 2\n        type: card\n    layout:\n      grid: [[0, 1, -1], [0, 2, -1]]\n      type: grid\n    title: Adding empty spaces\n```\n\n----------------------------------------\n\nTITLE: Defining three-row grid layout\nDESCRIPTION: Defines a Vizro grid layout with three horizontally stacked rows, each containing one component, using the `vm.Grid` function.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/layouts.md#_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nlayout=vm.Grid(grid=[[0],[1],[2]])\n```\n\n----------------------------------------\n\nTITLE: Styled AG Grid with Conditional Formatting in Vizro (Python)\nDESCRIPTION: This Python code snippet demonstrates how to create a styled AG Grid in Vizro with conditional formatting and customized column properties. It imports necessary Vizro models, uses Plotly Express for data, defines cell styles based on conditions, and sets column definitions with value formatters. The AG Grid is then integrated into a Vizro dashboard.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/table.md#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport vizro.models as vm\nimport vizro.plotly.express as px\nfrom vizro import Vizro\nfrom vizro.tables import dash_ag_grid\n\ndf = px.data.gapminder()\n\ncellStyle = {\n    \"styleConditions\": [\n        {\n            \"condition\": \"params.value < 1045\",\n            \"style\": {\"backgroundColor\": \"#ff9222\"},\n        },\n        {\n            \"condition\": \"params.value >= 1045 && params.value <= 4095\",\n            \"style\": {\"backgroundColor\": \"#de9e75\"},\n        },\n        {\n            \"condition\": \"params.value > 4095 && params.value <= 12695\",\n            \"style\": {\"backgroundColor\": \"#aaa9ba\"},\n        },\n        {\n            \"condition\": \"params.value > 12695\",\n            \"style\": {\"backgroundColor\": \"#00b4ff\"},\n        },\n    ]\n}\n\ncolumnDefs = [\n    {\"field\": \"country\"},\n    {\"field\": \"continent\"},\n    {\"field\": \"year\"},\n    {\n        \"field\": \"lifeExp\",\n        \"valueFormatter\": {\"function\": \"d3.format('.1f')(params.value)\"},\n    },\n    {\n        \"field\": \"gdpPercap\",\n        \"valueFormatter\": {\"function\": \"d3.format('$,.1f')(params.value)\"},\n        \"cellStyle\": cellStyle,\n    },\n    {\n        \"field\": \"pop\",\n        \"valueFormatter\": {\"function\": \"d3.format(',.0f')(params.value)\"},\n    },\n]\n\npage = vm.Page(\n    title=\"Example of Modified Dash AG Grid\",\n    components=[\n        vm.AgGrid(\n            title=\"Modified Dash AG Grid\",\n            figure=dash_ag_grid(\n                data_frame=df,\n                columnDefs=columnDefs,\n                defaultColDef={\"resizable\": False, \"filter\": False, \"editable\": True},\n            ),\n        )\n    ],\n)\n\ndashboard = vm.Dashboard(pages=[page])\nVizro().build(dashboard).run()\n```\n\n----------------------------------------\n\nTITLE: Adding a Type to a Custom Component\nDESCRIPTION: Showcases how to add a type to a custom component using the `Literal` type hint.  This is essential for identifying and differentiating the custom component within Vizro's data structures.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/custom-components.md#_snippet_14\n\nLANGUAGE: python\nCODE:\n```\ntype: Literal[\"jumbotron\"] = \"jumbotron\"\n```\n\n----------------------------------------\n\nTITLE: CSS ID Selector Example\nDESCRIPTION: This example shows how to use an ID selector to style the element with the ID 'my-card'. It sets the background color of the element with the ID 'my-card' to lightblue.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/custom-css.md#_snippet_2\n\nLANGUAGE: CSS\nCODE:\n```\n#my-card {\n    background: lightblue;\n}\n```\n\n----------------------------------------\n\nTITLE: Customize Button Text - YAML\nDESCRIPTION: This YAML configuration defines a Vizro Page with a Button component. The `text` property of the button is set to customize the displayed text. Note that a corresponding Python file is required to add data and parse the YAML configuration.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/button.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\npages:\n  - components:\n      - type: button\n        text: I'm a button!\n    title: Button with text\n```\n\n----------------------------------------\n\nTITLE: Activate Scrolling - YAML\nDESCRIPTION: Demonstrates how to activate scrolling in a Vizro grid by setting the `row_min_height` property in the YAML configuration. Requires a Python file for data loading and YAML processing.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/layouts.md#_snippet_24\n\nLANGUAGE: yaml\nCODE:\n```\n# Still requires a .py to add data to the data manager and parse YAML configuration\n# See yaml_version example\npages:\n  - components:\n      - text: |\n          # Component 0\n        type: card\n      - text: |\n          # Component 1\n        type: card\n      - text: |\n          # Component 2\n        type: card\n      - text: |\n          # Component 2\n        type: card\n      - text: |\n          # Component 4\n        type: card\n      - text: |\n          # Component 5\n        type: card\n      - text: |\n          # Component 6\n        type: card\n      - text: |\n          # Component 7\n        type: card\n    layout:\n      grid: [[0], [1], [2], [3], [4], [5], [6], [7]]\n      row_min_height: 240px\n      type: grid\n    title: Activate scrolling\n```\n\n----------------------------------------\n\nTITLE: Define Grid Layout for Vizro Dashboard\nDESCRIPTION: This snippet defines a grid layout for a Vizro dashboard using the `vm.Grid` model. The `grid` parameter specifies the arrangement of components within the dashboard, with numbers corresponding to the index of components in the `components` list. Negative values represent empty cells.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/tutorials/explore-components.md#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nlayout = vm.Grid(\n            grid=[[0, 1, -1, -1],\n                  [2, 2, 2, 2],\n                  [2, 2, 2, 2],\n                  [2, 2, 2, 2]]\n        )\n```\n\n----------------------------------------\n\nTITLE: Define a Simple Custom Action in Vizro\nDESCRIPTION: This snippet demonstrates how to create a simple custom action that pauses the execution of the next action in the chain for a specified number of seconds. It uses the `@capture('action')` decorator to register the function as a custom action callable within Vizro.  The action is added to a button click event.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/custom-actions.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport vizro.models as vm\nimport vizro.plotly.express as px\nfrom vizro import Vizro\nfrom vizro.actions import export_data\nfrom vizro.models.types import capture\nfrom time import sleep\n\n\n@capture(\"action\")\ndef my_custom_action(t: int):\n    \"\"\"Custom action.\"\"\"\n    sleep(t)\n\n\ndf = px.data.iris()\n\npage = vm.Page(\n    title=\"Simple custom action\",\n    components=[\n        vm.Graph(\n            figure=px.scatter(df, x=\"sepal_length\", y=\"petal_width\", color=\"species\")\n        ),\n        vm.Button(\n            text=\"Export data\",\n            actions=[\n                vm.Action(function=export_data()),\n                vm.Action(\n                    function=my_custom_action(t=2)\n                ),\n                vm.Action(function=export_data(file_format=\"xlsx\")),\n            ]\n        )\n    ]\n)\n\ndashboard = vm.Dashboard(pages=[page])\nVizro().build(dashboard).run()\n```\n\n----------------------------------------\n\nTITLE: YAML - Hide Page Title on Selected Pages\nDESCRIPTION: This YAML configuration defines two Vizro pages. The first page has the ID 'page-with-hidden-title', matching the CSS selector used to hide the title.  The second page has no id defined. This configuration must be used with Python code to add data to the data manager. The ID is specified explicitly.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/custom-css.md#_snippet_9\n\nLANGUAGE: YAML\nCODE:\n```\n# Still requires a .py to add data to the data manager and parse YAML configuration\n# See yaml_version example\npages:\n  - components:\n      - text: |\n          # Placeholder\n        type: card\n    title: Page with hidden title\n    id: page-with-hidden-title\n  - components:\n      - text: |\n          # Placeholder\n        type: card\n    title: Page with shown title\n```\n\n----------------------------------------\n\nTITLE: Generating JSON Schema with Pydantic\nDESCRIPTION: This Python code demonstrates how to automatically generate a JSON schema from a Pydantic model using `model_json_schema()`. It defines a simple model with an integer field `A` and a list of strings field `B`.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/explanation/schema.md#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nimport json\nimport pydantic\n\n\nclass Example(pydantic.BaseModel):\n    A: int\n    B: list[str]\n\n\nprint(json.dumps(Example.model_json_schema(), indent=2))\n```\n\n----------------------------------------\n\nTITLE: Styled Buttons - YAML\nDESCRIPTION: This YAML configuration defines a Vizro Page containing three buttons with different styles: 'filled' (default), 'outlined', and 'plain'. The `variant` property is used to specify the desired style for each button. The `Flex` layout with `direction=\"row\"` ensures side-by-side arrangement.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/button.md#_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\npages:\n  - title: Buttons with different styles\n    layout:\n      direction: row\n      type: flex\n    components:\n      - type: button\n        text: filled\n      - type: button\n        text: outlined\n        variant: outlined\n      - type: button\n        text: plain\n        variant: plain\n```\n\n----------------------------------------\n\nTITLE: Card with Floating Image in Vizro using Python\nDESCRIPTION: This Python snippet shows how to create a Vizro dashboard with a card containing a floating image.  It's similar to the previous example but demonstrates floating an image. It imports the necessary Vizro models and defines a page with a card component.  A `Flex` layout ensures the card occupies only the necessary space.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/card.md#_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nimport vizro.models as vm\nfrom vizro import Vizro\n\npage = vm.Page(\n     title=\"Floating Images\",\n     layout=vm.Flex(),  # (1)!\n     components=[\n         vm.Card(\n             text=\"\"\"\n             ### My card with floating image!\n\n             ![](assets/images/continents/europe.svg#my-image)\n\n             Commodi repudiandae consequuntur voluptatum laborum numquam blanditiis harum quisquam eius sed odit.\n\n             Fugiat iusto fuga praesentium option, eaque rerum! Provident similique accusantium nemo autem.\n\n             Obcaecati tenetur iure eius earum ut molestias architecto voluptate aliquam nihil, eveniet aliquid.\n\n             Culpa officia aut! Impedit sit sunt quaerat, odit, tenetur error, harum nesciunt ipsum debitis quas.\n\n             Obcaecati tenetur iure eius earum ut molestias architecto voluptate aliquam nihil, eveniet aliquid.\n\n             Culpa officia aut! Impedit sit sunt quaerat, odit, tenetur error, harum nesciunt ipsum debitis quas.\n         \"\",\n         ),\n     ],\n)\n\ndashboard = vm.Dashboard(pages=[page])\nVizro().build(dashboard).run()\n```\n\n----------------------------------------\n\nTITLE: Defining basic grid layout\nDESCRIPTION: Defines a basic Vizro grid layout with a single row containing one component, using the `vm.Grid` function.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/layouts.md#_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nlayout=vm.Grid(grid=[[0]])\n```\n\n----------------------------------------\n\nTITLE: Dynamic HTML Header using Vizro\nDESCRIPTION: This code showcases how to create a dynamic HTML header in Vizro that updates based on a filter selection. It defines a function `dynamic_html_header` that returns an `html.H2` component displaying a greeting with the selected name from the DataFrame. The function uses `@capture(\"figure\")` decorator to integrate it as a custom figure, linked to a `Filter` component in the Vizro dashboard. The example demonstrates the reactivity of custom figures to dashboard controls.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/custom-figures.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport pandas as pd\nimport vizro.models as vm\nfrom dash import html\nfrom vizro import Vizro\nfrom vizro.models.types import capture\n\ndf = pd.DataFrame({\"names\": [\"Emma\", \"Jack\", \"Sophia\", \"Ethan\", \"Mia\"]})\n\n\n@capture(\"figure\")  # (1)!\ndef dynamic_html_header(data_frame: pd.DataFrame, column: str) -> html.H2:  # (2)!\n    \"\"\"Creates a HTML header that dynamically updates based on controls.\"\"\"\n    return html.H2(f\"Good morning, {data_frame[column].iloc[0]}! ☕ ⛅\")  # (3)!\n\n\npage = vm.Page(\n    title=\"Dynamic HTML header\",\n    components=[vm.Figure(figure=dynamic_html_header(data_frame=df, column=\"names\"))],  # (4)!\n    controls=[vm.Filter(column=\"names\", selector=vm.RadioItems(title=\"Select a name\"))],\n)\n\ndashboard = vm.Dashboard(pages=[page])\nVizro().build(dashboard).run()\n```\n\n----------------------------------------\n\nTITLE: Apply CSS to Flex Items\nDESCRIPTION: This CSS code snippet demonstrates how to apply styling to all flex items within a specific page by targeting the `.flex-item` class.  This allows you to control the width of each item within a `Flex` layout, ensuring consistent sizing.  The `#page-with-uniform-flex-items` selector targets the specific page.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/layouts.md#_snippet_31\n\nLANGUAGE: css\nCODE:\n```\n/* Apply styling to all flex items */\n#page-with-uniform-flex-items .flex-item {\n    width: 260px;\n}\n```\n\n----------------------------------------\n\nTITLE: Running Unit Tests with Coverage\nDESCRIPTION: Executes unit tests with code coverage using Python 3.10 within the Hatch environment. This command provides insights into the extent of code coverage by the unit tests, aiding in identifying areas that require additional testing.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/explanation/contributing.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nhatch run all.py3.10:test-unit-coverage\n```\n\n----------------------------------------\n\nTITLE: Load Book Data from CSV URL into Pandas DataFrame\nDESCRIPTION: This code snippet fetches a CSV file containing book data from a specified URL using the `requests` library. It reads the CSV data into a Pandas DataFrame using `pd.read_csv`. The `Date Read` column is converted to datetime objects. A new column 'Year Read' is extracted.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-ai/docs/pages/tutorials/goodreads-tutorial.md#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n########### Read data ############\n# Define the URL of the raw CSV file\nimport requests\nurl = \"https://raw.githubusercontent.com/mckinsey/vizro/834c8d9c198420e8b315c0dc045b7aa12534719d/vizro-ai/examples/goodreads_tutorial/filtered_books.csv\"\n\n# Fetch the CSV file\nresponse = requests.get(url)\nresponse.raise_for_status()  # Ensure we notice bad responses\n\n# Load the CSV data into a pandas DataFrame\nfrom io import StringIO\ncsv_data = StringIO(response.text)\ndf = pd.read_csv(csv_data)\ndf[\"Date Read\"] = pd.to_datetime(df['Date Read'],dayfirst=True)\n# Extract the year from each Date Read and create a new column 'Year Read'\ndf['Year Read'] = df['Date Read'].dt.year\n```\n\n----------------------------------------\n\nTITLE: Set Individual Data Source Cache Timeout\nDESCRIPTION: This code shows how to set individual cache timeouts for different dynamic data sources within the Vizro data manager.  Different timeouts are assigned to data sources to control when the cache expires.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/data.md#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom vizro.managers import data_manager\nfrom flask_caching import Cache\n\ndata_manager.cache = Cache(config={\"CACHE_TYPE\": \"SimpleCache\", \"CACHE_DEFAULT_TIMEOUT\": 600})\n\n# Cache of default_expire_data expires every 10 minutes, the default set by CACHE_DEFAULT_TIMEOUT\ndata_manager[\"default_expire_data\"] = load_iris_data\n\n# Set cache of fast_expire_data to expire every 10 seconds\ndata_manager[\"fast_expire_data\"] = load_iris_data\ndata_manager[\"fast_expire_data\"].timeout = 10\n\n# Set cache of slow_expire_data to expires every hour\ndata_manager[\"slow_expire_data\"] = load_iris_data\ndata_manager[\"slow_expire_data\"].timeout = 60 * 60\n\n# Set cache of no_expire_data to never expire\ndata_manager[\"no_expire_data\"] = load_iris_data\ndata_manager[\"no_expire_data\"].timeout = 0\n```\n\n----------------------------------------\n\nTITLE: Creating Tabs Component in Vizro\nDESCRIPTION: This snippet demonstrates how to create a `vm.Tabs` component in Vizro.  It creates two tabs, \"Total Bill ($)\" and \"Total Tips ($)\", each containing a histogram of the respective data. It relies on `vizro.models` as `vm` and `vizro.plotly.express` as `px`.  The data frame `tips` is a prerequisite.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/tutorials/explore-components.md#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nvm.Tabs(\n    tabs=[\n        vm.Container(\n            title=\"Total Bill ($)\",\n            components=[\n                vm.Graph(figure=px.histogram(tips, x=\"total_bill\")),\n            ],\n        ),\n        vm.Container(\n            title=\"Total Tips ($)\",\n            components=[\n                vm.Graph(figure=px.histogram(tips, x=\"tip\")),\n            ],\n        ),\n    ],\n)\n```\n\n----------------------------------------\n\nTITLE: Install Vizro with pip\nDESCRIPTION: Installs the Vizro package using pip. Requires pip to be installed and accessible in the current environment. Installs the latest available version of Vizro from PyPI.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/install.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npip install vizro\n```\n\n----------------------------------------\n\nTITLE: Floating Image with CSS in Vizro\nDESCRIPTION: This CSS code snippet demonstrates how to float an image to the right within a Vizro card. It utilizes an attribute selector targeting the image's `src` attribute with a specific URL hash and applies `float: right;` to achieve the floating effect.  It also sets the width and height of the image.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/card.md#_snippet_9\n\nLANGUAGE: css\nCODE:\n```\nimg[src*=\"#my-image\"] {\n    width: 120px;\n    height: 120px;\n    float: right;\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Vizro figure functions in Dash\nDESCRIPTION: Demonstrates how to import specific figure functions (kpi_card and kpi_card_reference) from the `vizro.figures.library` namespace when working within a pure Dash application outside the Vizro framework. This allows leveraging Vizro's figure functionality in standard Dash projects.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/API-reference/figure-callables.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom vizro.figures.library import kpi_card, kpi_card_reference\n```\n\n----------------------------------------\n\nTITLE: Implement Filters in Vizro Dashboard Page\nDESCRIPTION: This snippet demonstrates the integration of filters into a Vizro dashboard page using the `controls` parameter of the `vm.Page` model. Filters are defined for columns such as 'day', 'time' (using a Checklist selector), and 'size', enabling users to interactively filter data within the dashboard.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/tutorials/explore-components.md#_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nimport vizro.models as vm\nimport vizro.plotly.express as px\nfrom vizro import Vizro\nfrom vizro.tables import dash_ag_grid\nfrom vizro.models.types import capture\nfrom vizro.figures import kpi_card\n\ntips = px.data.tips()\n\nfirst_page = vm.Page(\n    title=\"Data\",\n    components=[\n        vm.AgGrid(\n            figure=dash_ag_grid(tips),\n            footer=\"\"\"**Data Source:** Bryant, P. G. and Smith, M (1995)\n            Practical Data Analysis: Case Studies in Business Statistics.\n            Homewood, IL: Richard D. Irwin Publishing.\"\"\",\n        ),\n    ],\n)\n\nsecond_page = vm.Page(\n    title=\"Summary\",\n    layout=vm.Grid(grid=[[0, 1, -1, -1], [2, 2, 2, 2], [2, 2, 2, 2], [2, 2, 2, 2]]),\n    components=[\n        vm.Figure(\n            figure=kpi_card(\n                data_frame=tips,\n                value_column=\"total_bill\",\n                agg_func=\"mean\",\n                value_format=\"${value:.2f}\",\n                title=\"Average Bill\",\n            )\n        ),\n        vm.Figure(\n            figure=kpi_card(\n                data_frame=tips,\n                value_column=\"tip\",\n                agg_func=\"mean\",\n                value_format=\"${value:.2f}\",\n                title=\"Average Tips\"\n            )\n        ),\n        vm.Tabs(\n            tabs=[\n                vm.Container(\n                    title=\"Total Bill ($)\",\n                    components=[\n                        vm.Graph(figure=px.histogram(tips, x=\"total_bill\")),\n                    ],\n                ),\n                vm.Container(\n                    title=\"Total Tips ($)\",\n                    components=[\n                        vm.Graph(figure=px.histogram(tips, x=\"tip\")),\n                    ],\n                ),\n            ],\n        )\n    ],\n    controls = [vm.Filter(column=\"day\"), vm.Filter(column=\"time\", selector=vm.Checklist()), vm.Filter(column=\"size\")]\n)\n\ndashboard = vm.Dashboard(pages=[first_page, second_page])\nVizro().build(dashboard).run()\n```\n\n----------------------------------------\n\nTITLE: Initializing Text Component in Vizro with YAML\nDESCRIPTION: This snippet shows how to define a Text component within a Vizro dashboard using YAML. It includes the `text` attribute to define the text content. Note that a Python file is still required to load data and parse the YAML configuration. The resulting dashboard will display the defined text.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/text.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# Still requires a .py to add data to the data manager and parse YAML configuration\n# See yaml_version example\npages:\n  - components:\n      - text: Commodi repudiandae consequuntur voluptatum.\n        type: text\n    title: Text example\n```\n\n----------------------------------------\n\nTITLE: AG Grid with Formatted Columns - YAML\nDESCRIPTION: This YAML configuration shows how to define formatted columns within an AgGrid component using `cellDataType`. It requires a python file to load the data into the data manager and to parse this configuration. The `field` and `cellDataType` are configured for specific columns.  The 'type' attribute specifies 'ag_grid'.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/table.md#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n# Still requires a .py to add data to the data manager and parse YAML configuration\n# See yaml_version example\npages:\n  - components:\n      - figure:\n          _target_: dash_ag_grid\n          data_frame: gapminder\n          columnDefs:\n            - field: country\n            - field: year\n            - field: lifeExp\n              cellDataType: numeric\n            - field: gdpPercap\n              cellDataType: dollar\n            - field: pop\n              cellDataType: numeric\n        title: AG Grid with formatted columns\n        type: ag_grid\n    title: Example of AG Grid with formatted columns\n```\n\n----------------------------------------\n\nTITLE: Setting action through _action_validator_factory in Vizro (Python)\nDESCRIPTION: This snippet demonstrates how to set up an action that is triggered by a change in the `active_index` property of a custom component using `_action_validator_factory`. It uses Pydantic's `AfterValidator`, `PlainSerializer`, and `Field` to define the `actions` field in the custom component's class.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/custom-components.md#_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nactions: Annotated[\n        list[ActionType],\n        AfterValidator(_action_validator_factory(\"active_index\")),\n        PlainSerializer(lambda x: x[0].actions),\n        Field(default=[]),\n        ]\n```\n\n----------------------------------------\n\nTITLE: Configuring AgGrid filter_interaction in Vizro (YAML)\nDESCRIPTION: This YAML configuration shows how to configure cross-filtering when the source is an AgGrid.  The target is a graph.  It sets the data frame, the type of objects, and calls out the function `filter_interaction`.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/actions.md#_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\n# Still requires a .py to add data to the data manager and parse YAML configuration\n# See yaml_version example\npages:\n  - components:\n      - type: ag_grid\n        figure:\n          _target_: dash_ag_grid\n          data_frame: gapminder_2007\n        actions:\n          - function:\n              _target_: filter_interaction\n              targets:\n                - scatter_relation_2007\n      - type: graph\n        id: scatter_relation_2007\n        figure:\n          _target_: scatter\n          data_frame: gapminder_2007\n          color: continent\n          x: gdpPercap\n          y: lifeExp\n          size: pop\n    title: Filter interaction\n```\n\n----------------------------------------\n\nTITLE: Installing Vizro using pip\nDESCRIPTION: This command installs the Vizro package using pip, the Python package installer. It's a prerequisite for using the Vizro framework. Ensure Python and pip are installed before running this command.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/README.md#_snippet_0\n\nLANGUAGE: Console\nCODE:\n```\npip install vizro\n```\n\n----------------------------------------\n\nTITLE: Custom Validation with Pydantic\nDESCRIPTION: This Python code demonstrates how to use Pydantic's `field_validator` to define custom validation logic for a model.  In this example, it validates that all strings in list `B` start with either 'a' or 'b'.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/explanation/schema.md#_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nimport json\nimport pydantic\n\n\nclass Example(pydantic.BaseModel):\n    A: int\n    B: list[str]\n\n    @pydantic.field_validator(\"B\")\n    @classmethod\n    def validate_b_strings(cls, v: list[str]) -> list[str]:\n        for string in v:\n            if not string.startswith((\"a\", \"b\")):\n                raise ValueError(\"All strings in B must start with either 'a' or 'b'\")\n        return v\n```\n\n----------------------------------------\n\nTITLE: Create Project Directory\nDESCRIPTION: This snippet creates a new directory for a Vizro-AI project and navigates into it. This is the first step in setting up a dedicated environment for the project.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-ai/docs/pages/user-guides/install.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmkdir vizroai-project\ncd vizroai-project\n```\n\n----------------------------------------\n\nTITLE: Custom Font for Plotly Charts in Python\nDESCRIPTION: Modifies the default font for Plotly charts within a Vizro application by setting the `font_family` property in the `vizro_dark` and `vizro_light` templates. Requires the `plotly.io` module. Ensures the chart fonts align with the custom dashboard font.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/custom-css.md#_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nimport plotly.io as pio\n\npio.templates[\"vizro_dark\"][\"layout\"][\"font_family\"] = \"PlayfairDisplay, Inter, sans-serif, Arial, serif\"\npio.templates[\"vizro_light\"][\"layout\"][\"font_family\"] = \"PlayfairDisplay, Inter, sans-serif, Arial, serif\"\n```\n\n----------------------------------------\n\nTITLE: Customizing Page URLs - YAML\nDESCRIPTION: This YAML configuration creates two pages for a Vizro dashboard and specifies a custom URL path for the second page. The first page displays a card with text, while the second page includes a sunburst graph and corresponding filter and parameter controls. It demonstrates how the `path` argument can be used to define custom URLs.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/pages.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n# Still requires a .py to add data to the data manager and parse YAML configuration\n# See yaml_version example\npages:\n  - components:\n      - text: |-\n          Commodi repudiandae consequuntur voluptatum.\n        type: card\n    title: Page 1\n  - components:\n      - figure:\n          _target_: sunburst\n          path: [continent, country]\n          values: pop\n          color: lifeExp\n          data_frame: gapminder\n        id: sunburst\n        type: graph\n    controls:\n      - column: continent\n        type: filter\n      - selector:\n          options: [lifeExp, pop]\n          title: Color\n          type: radio_items\n        targets: [sunburst.color]\n        type: parameter\n    title: Page 2\n    path: my-custom-url\n```\n\n----------------------------------------\n\nTITLE: Creating Kedro Data Catalog YAML\nDESCRIPTION: Defines a sample `catalog.yaml` file for Kedro, showcasing different dataset types (CSV, Parquet, Excel) and data loading configurations. It demonstrates specifying filepaths, load arguments, and credentials for accessing data sources.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/kedro-data-catalog.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ncars:  # (1)!\n  type: pandas.CSVDataset  # (2)!\n  filepath: cars.csv\n\nmotorbikes:\n  type: pandas.CSVDataset\n  filepath: s3://your_bucket/data/motorbikes.csv   # (3)!\n  load_args:   # (4)!\n    sep: ','\n    na_values: [NA]\n  credentials: s3_credentials  # (5)!\n\ntrains:\n  type: pandas.ExcelDataset\n  filepath: trains.xlsx\n  load_args:\n    sheet_name: [Sheet1, Sheet2, Sheet3]\n\ntrucks:\n  type: pandas.ParquetDataset\n  filepath: trucks.parquet\n  load_args:\n    columns: [name, gear, disp, wt]\n    categories: list\n    index: name\n```\n\n----------------------------------------\n\nTITLE: Callout box example: Note\nDESCRIPTION: Demonstrates the syntax for a note callout box in Vizro documentation.  Notes are used for notable information.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/explanation/documentation-style-guide.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n!!! note \"note\"\n\n    For notable information.\n```\n\n----------------------------------------\n\nTITLE: Example JSON Schema\nDESCRIPTION: This is a basic example of a JSON schema that defines the structure and constraints for JSON data, specifying required fields A (integer) and B (array of strings).\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/explanation/schema.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"properties\": {\n    \"A\": {\n      \"title\": \"A\",\n      \"type\": \"integer\"\n    },\n    \"B\": {\n      \"items\": {\n        \"type\": \"string\"\n      },\n      \"title\": \"B\",\n      \"type\": \"array\"\n    }\n  },\n  \"required\": [\n    \"A\",\n    \"B\"\n  ],\n  \"title\": \"Example\",\n  \"type\": \"object\"\n}\n```\n\n----------------------------------------\n\nTITLE: Invalid JSON Data Example (Incorrect Type)\nDESCRIPTION: This example shows invalid JSON data because the B field contains a number instead of a string, violating the schema's constraint.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/explanation/schema.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"A\": 1,\n  \"B\": [\n    \"a\",\n    3\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring a Card with Styled Image in Vizro using YAML\nDESCRIPTION: This YAML snippet shows how to configure a Vizro dashboard page with a card containing an image. The image URL includes a hash (`#my-image`), which is expected to be styled via CSS. It also defines the layout type as `flex`.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/card.md#_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\n# Still requires a .py to add data to the data manager and parse YAML configuration\n# See yaml_version example\npages:\n  - components:\n      - text: |\n          ![](assets/images/continents/europe.svg#my-image)\n\n          Commodi repudiandae consequuntur voluptatum laborum numquam blanditiis harum quisquam eius sed odit.\n\n          Fugiat iusto fuga praesentium option, eaque rerum! Provident similique accusantium nemo autem.\n\n          Obcaecati tenetur iure eius earum ut molestias architecto voluptate aliquam nihil, eveniet aliquid.\n        title: My card with image!\n        type: card\n    layout:\n      type: flex\n    title: Styling Images\n```\n\n----------------------------------------\n\nTITLE: Valid JSON Data Example\nDESCRIPTION: This example shows valid JSON data according to the previously defined schema, containing an integer field A and an array of strings field B.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/explanation/schema.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"A\": 1,\n  \"B\": [\n    \"a\",\n    \"b\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Invalid JSON Data Example (Missing Field)\nDESCRIPTION: This example shows invalid JSON data because the required B field is missing, violating the schema's constraint.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/explanation/schema.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"A\": 1\n}\n```\n\n----------------------------------------\n\nTITLE: Callout box example: Example\nDESCRIPTION: Demonstrates the syntax for an example callout box in Vizro documentation. Examples are used for example code.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/explanation/documentation-style-guide.md#_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n!!! example \"example\"\n\n    For example code.\n```\n\n----------------------------------------\n\nTITLE: Callout box example: Warning\nDESCRIPTION: Shows the syntax for a warning callout box in Vizro documentation. Warnings are used to indicate potential gotchas.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/explanation/documentation-style-guide.md#_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n!!! warning \"warning\"\n\n    To indicate a potential gotcha.\n```\n\n----------------------------------------\n\nTITLE: Installing Vizro with Kedro Dependency\nDESCRIPTION: Installs Vizro with the `kedro` extra, ensuring all necessary dependencies for Kedro integration are included. This command adds the vizro package along with its kedro integration dependencies to the current Python environment.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/kedro-data-catalog.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install vizro[kedro]\n```\n\n----------------------------------------\n\nTITLE: HTML Styling for Disclaimer Box\nDESCRIPTION: This HTML code snippet defines CSS styles to create a styled disclaimer box within the Colab notebook. It includes both light and dark mode styles to adapt to the user's preferred theme.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-ai/examples/chart_by_vizro_ai.ipynb#_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<style>\n  .cell-bg {\n    background-color: #E6F3FF;\n    padding: 10px;\n    width: 100%;\n  }\n  .disclaimer {\n    background-color: #ffffff;\n    border: 1px solid #ddd;\n    border-radius: 5px;\n    padding: 15px;\n    margin: 10px 0;\n    font-family: Arial, sans-serif;\n    color: #000000;\n  }\n  .disclaimer h3 {\n    margin-top: 0;\n    color: #000000; /* Explicitly set title color for light mode */\n  }\n  .disclaimer ol {\n    padding-left: 20px;\n  }\n  .disclaimer li {\n    margin-bottom: 10px;\n  }\n  .disclaimer p {\n    font-weight: bold;\n    margin-bottom: 0;\n  }\n\n  /* Dark mode styles */\n  @media (prefers-color-scheme: dark) {\n    .cell-bg {\n      background-color: #1a1a1a;\n    }\n    .disclaimer {\n      background-color: #2a2a2a;\n      border-color: #444;\n      color: #ffffff;\n    }\n    .disclaimer h3 {\n      color: #ffffff; /* Explicitly set title color for dark mode */\n    }\n  }\n</style>\n\n<div class=\"cell-bg\">\n  <div class=\"disclaimer\">\n    <h3>Disclaimer: Using Google Colab</h3>\n    <p>Please read carefully before proceeding:</p>\n    <ol>\n      <li><strong>Google's Servers:</strong> This notebook runs on Google's servers. Your code and data will be processed and temporarily stored on Google's infrastructure.</li>\n      <li><strong>Data Privacy:</strong> Be mindful of the data you upload or process here. Avoid using sensitive, confidential, or personal information that shouldn't be shared with third parties.</li>\n      <li><strong>Security Considerations:</strong> Colab is a shared environment. While Google implements security measures, treat it as a public environment and act accordingly.</li>\n      <li><strong>Terms of Service:</strong> Ensure your usage complies with Google Colab's Terms of Service and Google Cloud's Terms of Service.</li>\n      <li><strong>Data Persistence:</strong> Data in Colab notebooks is not permanently stored. Save important data and results to your local machine or a secure cloud storage.</li>\n      <li><strong>Resource Limitations:</strong> Colab provides free resources, but these are subject to availability and usage limits.</li>\n    </ol>\n    <p>By using this Colab notebook, you acknowledge that you understand and accept these conditions. Please use Colab at your own discretion and responsibility.</p>\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: YAML Configuration for Custom Components\nDESCRIPTION: Indicates that custom components are currently only configurable via Python code, not through YAML configuration files.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/custom-components.md#_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\n# Custom components are currently only possible via Python configuration\n```\n\n----------------------------------------\n\nTITLE: Callout box example: Details\nDESCRIPTION: Illustrates the syntax for a details callout box in Vizro documentation. Details are used for side notes and used sparingly, and can be collapsed.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/explanation/documentation-style-guide.md#_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n??? details \"See more details\"\n\n    A side note (used sparingly)\n```\n\n----------------------------------------\n\nTITLE: Invalid Vizro Configuration JSON (Missing Title)\nDESCRIPTION: This JSON configuration example demonstrates an invalid Vizro dashboard configuration because the top-level 'title' field is missing. This would cause a validation error because the 'title' is a required field in the dashboard schema.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/explanation/schema.md#_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"pages\": [\n    {\n      \"components\": [\n        {\n          \"figure\": {\n            \"_target_\": \"scatter\",\n            \"color\": \"species\",\n            \"data_frame\": \"iris\",\n            \"x\": \"sepal_length\",\n            \"y\": \"petal_width\"\n          },\n          \"type\": \"graph\"\n        },\n        {\n          \"figure\": {\n            \"_target_\": \"histogram\",\n            \"color\": \"species\",\n            \"data_frame\": \"iris\",\n            \"x\": \"sepal_width\"\n          },\n          \"type\": \"graph\"\n        }\n      ],\n      \"controls\": [\n        {\n          \"column\": \"species\",\n          \"type\": \"filter\"\n        }\n      ],\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: YAML Configuration Note\nDESCRIPTION: This YAML snippet is a comment indicating that custom components are currently only configurable via Python code, not directly through YAML configuration files.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/custom-components.md#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n# Custom components are currently only possible via Python configuration\n```\n\n----------------------------------------\n\nTITLE: Pydantic Validation Error Output\nDESCRIPTION: This is an example of a Pydantic validation error output showing that the custom validation for the field `B` failed because the value 'c' does not start with 'a' or 'b'.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/explanation/schema.md#_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\npydantic_core._pydantic_core.ValidationError: 1 validation error for Example\nB\n  Value error, All strings in B must start with either 'a' or 'b' [type=value_error, input_value=['a', 'b', 'c'], input_type=list]\n    For further information visit https://errors.pydantic.dev/2.10/v/value_error\n```\n\n----------------------------------------\n\nTITLE: Customizing Card Text with Markdown - YAML\nDESCRIPTION: This snippet illustrates how to customize card text using various Markdown features within the Vizro Card component via YAML configuration.  It configures cards with headers, paragraphs, block quotes, lists, and emphasis.  A corresponding Python file is still required for data loading and YAML parsing.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/user-guides/card.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\npages:\n  - components:\n      - text: |\n          # Header level 1 <h1>\n\n          ## Header level 2 <h2>\n\n          ### Header level 3 <h3>\n\n          #### Header level 4 <h4>\n        type: card\n      - text: |\n          Commodi repudiandae consequuntur voluptatum laborum numquam blanditiis harum quisquam eius sed odit.\n\n          Fugiat iusto fuga praesentium option, eaque rerum! Provident similique accusantium nemo autem.\n\n          Obcaecati tenetur iure eius earum ut molestias architecto voluptate aliquam nihil, eveniet aliquid.\n\n          Culpa officia aut! Impedit sit sunt quaerat, odit, tenetur error, harum nesciunt ipsum debitis quas.\n        title: Paragraphs\n        type: card\n      - text: |\n          >\n          > A block quote is a long quotation, indented to create a separate block of text.\n          >\n        title: Block Quotes\n        type: card\n      - text: |\n          * Item A\n            * Sub Item 1\n            * Sub Item 2\n          * Item B\n        title: Lists\n        type: card\n      - text: |\n          This word will be *italic*\n\n          This word will be **bold**\n\n          This word will be _**bold and italic**_\n        title: Emphasis\n        type: card\n    title: Customizing Text\n```\n\n----------------------------------------\n\nTITLE: Creating Alias for Hatch Run in Shell\nDESCRIPTION: This code snippet demonstrates how to create an alias in the shell for the `hatch run` command. This allows users to execute Hatch commands with a shorter, more convenient alias (`hr`) to improve developer efficiency and reduce typing. The alias is pre-configured in GitHub Codespaces environments.\nSOURCE: https://github.com/mckinsey/vizro/blob/main/vizro-core/docs/pages/explanation/contributing.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nalias hr=\"hatch run\"\n```"
  }
]