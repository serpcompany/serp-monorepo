[
  {
    "owner": "cesiumgs",
    "repo": "cesium-unity",
    "content": "TITLE: Creating Reinterop Configuration Class in C#\nDESCRIPTION: This C# code snippet demonstrates how to create a configuration class for Reinterop. The class is marked with the [Reinterop] attribute and contains an ExposeToCPP method, which is used to specify which .NET types and members should be accessible from C++.\nSOURCE: https://github.com/cesiumgs/cesium-unity/blob/main/Reinterop~/README.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nusing Reinterop;\nusing System;\n\nnamespace YourNamespace\n{\n    [Reinterop]\n    internal class ConfigureReinterop\n    {\n        public void ExposeToCPP()\n        {\n            Console.WriteLine(\"hi\");\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Reinterop Output Settings\nDESCRIPTION: This configuration snippet shows how to set up a .globalconfig file for Reinterop. It specifies the output path for generated C++ files, the base namespace for C# to C++ mapping, and the name of the native library containing the C++ code.\nSOURCE: https://github.com/cesiumgs/cesium-unity/blob/main/Reinterop~/README.md#2025-04-22_snippet_2\n\nLANGUAGE: conf\nCODE:\n```\nis_global = true\n\n# The output path for generated C++ files.\n# If this is relative, it is relative to the project directory.\ncpp_output_path = ../CesiumForUnityNative/generated\n\n# The namespace with which to prefix all C# namespaces. For example, if this\n# property is set to \"DotNet\", then anything in the \"System\" namespaces in C#\n# will be found in the \"DotNet::System\" namespace in C++.\nbase_namespace = DotNet\n\n# The name of the DLL or SO containing the C++ code.\nnative_library_name = CesiumForUnityNative\n```\n\n----------------------------------------\n\nTITLE: Implementing a Backward Compatibility Class Declaration in C#\nDESCRIPTION: Shows how to define a backward compatibility class with the necessary attributes to handle upgrades from Cesium for Unity v0.2.0. The class inherits from the target component and implements an interface for backward compatibility.\nSOURCE: https://github.com/cesiumgs/cesium-unity/blob/main/Documentation~/creating-monobehaviours.md#2025-04-22_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n[ExecuteInEditMode]\n[AddComponentMenu(\"\")]\n[DefaultExecutionOrder(-1000000)]\ninternal class CesiumGlobeAnchorBackwardCompatibility0dot2dot0 : CesiumGlobeAnchor, IBackwardCompatibilityComponent<CesiumGlobeAnchor>\n{\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing the Upgrade Method for Backward Compatibility in C#\nDESCRIPTION: Implements the Upgrade method to transfer data from the backward compatible component to the new component version, handling different position authority types and maintaining property values.\nSOURCE: https://github.com/cesiumgs/cesium-unity/blob/main/Documentation~/creating-monobehaviours.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\npublic string VersionToBeUpgraded => \"v0.2.0\";\n\npublic void Upgrade(GameObject gameObject, CesiumGlobeAnchor upgraded)\n{\n    // Temporarily disable orientation adjustment so that we can set the position without\n    // risking rotating the object.\n    upgraded.adjustOrientationForGlobeWhenMoving = false;\n    upgraded.detectTransformChanges = false;\n    \n    switch (this._positionAuthority0dot2dot0)\n    {\n        case CesiumGlobeAnchorPositionAuthorityBackwardCompatibility0dot2dot0.None:\n            // This shouldn't happen, but if it does, just leave the position at the default.\n            break;\n        case CesiumGlobeAnchorPositionAuthorityBackwardCompatibility0dot2dot0.LongitudeLatitudeHeight:\n            upgraded.longitudeLatitudeHeight = new double3(this._longitude0dot2dot0, this._latitude0dot2dot0, this._height0dot2dot0);\n            break;\n        case CesiumGlobeAnchorPositionAuthorityBackwardCompatibility0dot2dot0.EarthCenteredEarthFixed:\n            upgraded.positionGlobeFixed = new double3(this._ecefX0dot2dot0, this._ecefY0dot2dot0, this._ecefZ0dot2dot0);\n            break;\n        case CesiumGlobeAnchorPositionAuthorityBackwardCompatibility0dot2dot0.UnityCoordinates:\n            // Any backward compatibility for CesiumGeoreference must have a more negative\n            // DefaultExecutionOrder so that the real CesiumGeoreference is created first.\n            // If this component is not nested inside a CesiumGeoreference, converting Unity coordinates\n            // to ECEF is impossible, so just keep the default position.\n            CesiumGeoreference georeference = this.GetComponentInParent<CesiumGeoreference>();\n            if (georeference != null)\n            {\n                georeference.Initialize();\n                double3 ecef = georeference.TransformUnityPositionToEarthCenteredEarthFixed(new double3(this._unityX0dot2dot0, this._unityY0dot2dot0, this._unityZ0dot2dot0));\n                upgraded.positionGlobeFixed = ecef;\n            }\n            break;\n    }\n\n    upgraded.adjustOrientationForGlobeWhenMoving = this._adjustOrientationForGlobeWhenMoving0dot2dot0;\n    upgraded.detectTransformChanges = this._detectTransformChanges0dot2dot0;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Reinterop in C# Project File\nDESCRIPTION: This XML snippet shows how to add Reinterop as a Roslyn Analyzer to a C# project file. It configures Reinterop to run as part of the C# compiler, allowing it to inspect and inject code during compilation.\nSOURCE: https://github.com/cesiumgs/cesium-unity/blob/main/Reinterop~/README.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n  <ItemGroup>\n      <ProjectReference Include=\"..\\Reinterop\\Reinterop.csproj\" OutputItemType=\"Analyzer\" ReferenceOutputAssembly=\"false\" />\n  </ItemGroup>\n```\n\n----------------------------------------\n\nTITLE: Defining Backward Compatible Fields with FormerlySerializedAs in C#\nDESCRIPTION: Demonstrates how to define properties for the backward compatibility class with appropriate naming and FormerlySerializedAs attributes to correctly deserialize old data.\nSOURCE: https://github.com/cesiumgs/cesium-unity/blob/main/Documentation~/creating-monobehaviours.md#2025-04-22_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[FormerlySerializedAs(\"_adjustOrientationForGlobeWhenMoving\")]\npublic bool _adjustOrientationForGlobeWhenMoving0dot2dot0 = false;\n\n[FormerlySerializedAs(\"_positionAuthority\")]\npublic CesiumGlobeAnchorPositionAuthorityBackwardCompatibility0dot2dot0 _positionAuthority0dot2dot0 = CesiumGlobeAnchorPositionAuthorityBackwardCompatibility0dot2dot0.None;\n\n[FormerlySerializedAs(\"_latitude\")]\npublic double _latitude0dot2dot0 = 0.0;\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake for CesiumForUnityNative-Editor Shared Library\nDESCRIPTION: This CMake configuration sets up the CesiumForUnityNative-Editor shared library. It defines source files, include directories, linked libraries, compiler settings, and installation instructions. The configuration handles platform-specific settings for MSVC and includes special handling for Unity Editor builds.\nSOURCE: https://github.com/cesiumgs/cesium-unity/blob/main/native~/Editor/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.15)\nset(CMAKE_EXPORT_COMPILE_COMMANDS ON)\n\nproject(CesiumForUnityNative-Editor\n    VERSION 0.1.0\n    LANGUAGES CXX C\n)\n\nfile(GLOB_RECURSE CESIUMFORUNITYNATIVEEDITOR_SOURCES CONFIGURE_DEPENDS src/*.cpp ../Shared/src/*.cpp ${REINTEROP_GENERATED_DIRECTORY}/src/*.cpp)\nfile(GLOB_RECURSE CESIUMFORUNITYNATIVEEDITOR_HEADERS CONFIGURE_DEPENDS src/*.h ${REINTEROP_GENERATED_DIRECTORY}/src/*.h)\n\nadd_library(CesiumForUnityNative-Editor SHARED)\n\ntarget_sources(\n    CesiumForUnityNative-Editor\n    PRIVATE\n        ${CESIUMFORUNITYNATIVEEDITOR_SOURCES}\n        ${CESIUMFORUNITYNATIVEEDITOR_HEADERS}\n)\n\ntarget_include_directories(\n    CesiumForUnityNative-Editor\n    PRIVATE\n        src\n        include\n        ../Shared/src\n        ${REINTEROP_GENERATED_DIRECTORY}/src\n        ${REINTEROP_GENERATED_DIRECTORY}/include\n        # enum-flags doesn't use target_include_directories, so add it manually\n        ../extern/enum-flags/include\n)\n\ntarget_link_libraries(\n    CesiumForUnityNative-Editor\n    PUBLIC\n        CesiumIonClient\n    PRIVATE\n        enum-flags\n)\n\nset_target_properties(\n    CesiumForUnityNative-Editor\n    PROPERTIES\n        CXX_STANDARD 20\n        CXX_STANDARD_REQUIRED YES\n        CXX_EXTENSIONS NO\n)\n\nif (MSVC)\n  target_compile_options(\n    CesiumForUnityNative-Editor\n    PRIVATE\n      /bigobj\n  )\nendif()\n\n# If we're building for the Unity Editor, set a #define accordingly.\nif (EDITOR)\n  target_compile_definitions(CesiumForUnityNative-Editor PRIVATE UNITY_EDITOR)\nendif()\n\ninstall(FILES $<TARGET_FILE:CesiumForUnityNative-Editor> DESTINATION \".\")\n```\n\n----------------------------------------\n\nTITLE: Implementing Editor Support for Backward Compatibility in C#\nDESCRIPTION: Defines the Editor class and OnEnable method to provide automatic and manual upgrading capabilities for backward compatible components in the Unity Editor.\nSOURCE: https://github.com/cesiumgs/cesium-unity/blob/main/Documentation~/creating-monobehaviours.md#2025-04-22_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n#if UNITY_EDITOR\n    [CustomEditor(typeof(CesiumGlobeAnchorBackwardCompatibility0dot2dot0))]\n    internal class CesiumGlobeAnchorBackwardCompatibility0dot2dot0Editor : Editor\n    {\n        public override void OnInspectorGUI()\n        {\n            if (GUILayout.Button(\"Upgrade\"))\n            {\n                CesiumGlobeAnchorBackwardCompatibility0dot2dot0 o = (CesiumGlobeAnchorBackwardCompatibility0dot2dot0)this.target;\n                CesiumBackwardCompatibility<CesiumGlobeAnchor>.Upgrade(o);\n            }\n        }\n    }\n\n    void OnEnable()\n    {\n        CesiumBackwardCompatibility<CesiumGlobeAnchor>.Upgrade(this);\n    }\n#endif\n```\n\n----------------------------------------\n\nTITLE: Using Generated C++ Code to Call .NET Methods\nDESCRIPTION: This C++ code snippet demonstrates how to use the generated C++ code to call .NET methods. It includes the necessary headers and shows how to use the DotNet namespace to access the System.Console.WriteLine method.\nSOURCE: https://github.com/cesiumgs/cesium-unity/blob/main/Reinterop~/README.md#2025-04-22_snippet_3\n\nLANGUAGE: cpp\nCODE:\n```\n#include <DotNet/System/Console.h>\n#include <DotNet/System/String.h>\n\nvoid start() {\n  DotNet::System::Console::WriteLine(DotNet::System::String(\"Hello World!\"));\n}\n```\n\n----------------------------------------\n\nTITLE: Library Target Configuration\nDESCRIPTION: Configures the library target with conditional logic for iOS static library vs shared library for other platforms.\nSOURCE: https://github.com/cesiumgs/cesium-unity/blob/main/native~/Runtime/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nif (${CMAKE_SYSTEM_NAME} STREQUAL \"iOS\")\n    add_library(CesiumForUnityNative-Runtime STATIC)\nelse()\n    add_library(CesiumForUnityNative-Runtime SHARED)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Cesium for Unity Package in Unity Manifest\nDESCRIPTION: JSON configuration for including the Cesium for Unity package as a scoped registry in the Unity project's manifest.json file. This snippet shows how to set up the package source and specify the package scope.\nSOURCE: https://github.com/cesiumgs/cesium-unity/blob/main/Documentation~/release-guide.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"scopedRegistries\": [\n    {\n      \"name\": \"Cesium\",\n      \"url\": \"https://unity.pkg.cesium.com\",\n      \"scopes\": [\n        \"com.cesium.unity\"\n      ]\n    }\n  ]\n```\n\n----------------------------------------\n\nTITLE: Creating Backward Compatible Enum Definitions in C#\nDESCRIPTION: Shows how to create backward compatible enum definitions within the compatibility class when the original enum has been removed or modified in the new version.\nSOURCE: https://github.com/cesiumgs/cesium-unity/blob/main/Documentation~/creating-monobehaviours.md#2025-04-22_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\npublic enum CesiumGlobeAnchorPositionAuthorityBackwardCompatibility0dot2dot0\n{\n    None,\n    LongitudeLatitudeHeight,\n    EarthCenteredEarthFixed,\n    UnityCoordinates\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing CMake Project Configuration\nDESCRIPTION: Sets up basic CMake project configuration including version requirements, language support, and compilation flags.\nSOURCE: https://github.com/cesiumgs/cesium-unity/blob/main/native~/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.18)\nset(CMAKE_EXPORT_COMPILE_COMMANDS ON)\n\nproject(CesiumForUnityNative\n    VERSION 0.1.0\n    LANGUAGES CXX C\n)\n```\n\n----------------------------------------\n\nTITLE: Target Properties and Compiler Options\nDESCRIPTION: Sets C++ standard requirements and MSVC-specific compiler options.\nSOURCE: https://github.com/cesiumgs/cesium-unity/blob/main/native~/Runtime/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset_target_properties(\n  CesiumForUnityNative-Runtime\n    PROPERTIES\n        CXX_STANDARD 20\n        CXX_STANDARD_REQUIRED YES\n        CXX_EXTENSIONS NO\n)\n\nif (MSVC)\n  target_compile_options(\n    CesiumForUnityNative-Runtime\n    PRIVATE\n      /bigobj\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Platform-Specific Configuration\nDESCRIPTION: Configures build settings specific to different platforms including Android, iOS, and Windows Store applications.\nSOURCE: https://github.com/cesiumgs/cesium-unity/blob/main/native~/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nif (${CMAKE_SYSTEM_NAME} STREQUAL \"Android\")\n  set(HTTPLIB_USE_OPENSSL_IF_AVAILABLE OFF)\n  set(ANDROID_ABI ${CMAKE_ANDROID_ARCH_ABI})\n  set(ANDROID_NDK ${CMAKE_ANDROID_NDK})\nendif()\n\nif (${CMAKE_SYSTEM_NAME} STREQUAL \"iOS\")\n    install(TARGETS tidy-static)\n    set_target_properties(tidy-static PROPERTIES EXCLUDE_FROM_ALL 0 EXCLUDE_FROM_DEFAULT_BUILD 0)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Debugging Reinterop in Unity\nDESCRIPTION: This C# code snippet shows how to add debugging capabilities to Reinterop when used in Unity. It launches the debugger when Roslyn runs Reinterop, allowing developers to step through and set breakpoints in the code generator.\nSOURCE: https://github.com/cesiumgs/cesium-unity/blob/main/Reinterop~/README.md#2025-04-22_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nif (!System.Diagnostics.Debugger.IsAttached)\n{\n    System.Diagnostics.Debugger.Launch();\n}\n```\n\n----------------------------------------\n\nTITLE: Basic CMake Configuration Setup\nDESCRIPTION: Sets up the initial CMake configuration including minimum version and project details.\nSOURCE: https://github.com/cesiumgs/cesium-unity/blob/main/native~/Runtime/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.15)\nset(CMAKE_EXPORT_COMPILE_COMMANDS ON)\n\nproject(CesiumForUnityNative\n    VERSION 0.1.0\n    LANGUAGES CXX C\n)\n```\n\n----------------------------------------\n\nTITLE: Compiler Definitions and Installation\nDESCRIPTION: Sets required compiler definitions and configures installation parameters.\nSOURCE: https://github.com/cesiumgs/cesium-unity/blob/main/native~/Runtime/CMakeLists.txt#2025-04-22_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_compile_definitions(\n  CesiumForUnityNative-Runtime\n  PUBLIC\n    TIDY_STATIC\n    SWL_VARIANT_NO_CONSTEXPR_EMPLACE\n)\n\nif (EDITOR)\n  target_compile_definitions(CesiumForUnityNative-Runtime PRIVATE UNITY_EDITOR)\nendif()\n\ninstall(FILES $<TARGET_FILE:CesiumForUnityNative-Runtime> DESTINATION \".\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Compiler Generated Files Output in C# Project\nDESCRIPTION: This XML snippet demonstrates how to configure the output path for compiler-generated files in a C# project. It's useful for locating and modifying generated code when temporarily disabling the code generator.\nSOURCE: https://github.com/cesiumgs/cesium-unity/blob/main/Reinterop~/README.md#2025-04-22_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<EmitCompilerGeneratedFiles>true</EmitCompilerGeneratedFiles>\n<CompilerGeneratedFilesOutputPath>C:\\Dev\\cesium-unity-samples\\Assets\\CesiumForUnity\\generatedcsharp~</CompilerGeneratedFilesOutputPath>\n```\n\n----------------------------------------\n\nTITLE: Cloning Cesium Unity Plugin Repository\nDESCRIPTION: Commands to clone the cesium-unity plugin repository into the Packages directory\nSOURCE: https://github.com/cesiumgs/cesium-unity/blob/main/Documentation~/developer-setup.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncd cesium-unity-samples/Packages\ngit clone --recurse-submodules git@github.com:CesiumGS/cesium-unity.git com.cesium.unity\n```\n\n----------------------------------------\n\nTITLE: Building C++ Code for Debug\nDESCRIPTION: Commands to compile C++ code for debug configuration using CMake\nSOURCE: https://github.com/cesiumgs/cesium-unity/blob/main/Documentation~/developer-setup.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ncd cesium-unity-samples/Packages/com.cesium.unity/native~\ncmake -B build -S . -DCMAKE_BUILD_TYPE=Debug\ncmake --build build -j14 --target install --config Debug\n```\n\n----------------------------------------\n\nTITLE: Building C++ Code for Release\nDESCRIPTION: Commands to compile C++ code for release configuration using CMake\nSOURCE: https://github.com/cesiumgs/cesium-unity/blob/main/Documentation~/developer-setup.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ncd cesium-unity-samples/Packages/com.cesium.unity/native~\ncmake -B build -S . -DCMAKE_BUILD_TYPE=RelWithDebInfo\ncmake --build build -j14 --target install --config RelWithDebInfo\n```\n\n----------------------------------------\n\nTITLE: Source File Collection\nDESCRIPTION: Gathers all source and header files recursively from specified directories.\nSOURCE: https://github.com/cesiumgs/cesium-unity/blob/main/native~/Runtime/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nfile(GLOB_RECURSE CESIUMFORUNITYNATIVE_SOURCES CONFIGURE_DEPENDS src/*.cpp ../Shared/src/*.cpp ${REINTEROP_GENERATED_DIRECTORY}/src/*.cpp)\nfile(GLOB_RECURSE CESIUMFORUNITYNATIVE_HEADERS CONFIGURE_DEPENDS src/*.h ${REINTEROP_GENERATED_DIRECTORY}/src/*.h)\n```\n\n----------------------------------------\n\nTITLE: Configuring Compiler Generated Files Output in Unity\nDESCRIPTION: This configuration snippet shows how to set the output path for compiler-generated files in Unity. It's added to the csc.rsp file to specify where the generated files should be written.\nSOURCE: https://github.com/cesiumgs/cesium-unity/blob/main/Reinterop~/README.md#2025-04-22_snippet_6\n\nLANGUAGE: conf\nCODE:\n```\n-generatedfilesout:\"C:\\place\\to\\write\\files\"\n```\n\n----------------------------------------\n\nTITLE: Cloning Cesium Unity Samples Repository\nDESCRIPTION: Command to clone the cesium-unity-samples repository with its submodules\nSOURCE: https://github.com/cesiumgs/cesium-unity/blob/main/Documentation~/developer-setup.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit clone --recurse-submodules git@github.com:CesiumGS/cesium-unity-samples.git\n```\n\n----------------------------------------\n\nTITLE: Publishing Reinterop\nDESCRIPTION: Command to build and publish Reinterop to Cesium Unity's directory\nSOURCE: https://github.com/cesiumgs/cesium-unity/blob/main/Documentation~/developer-setup.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndotnet publish Reinterop~ -o .\n```\n\n----------------------------------------\n\nTITLE: Adding Test Configuration\nDESCRIPTION: JSON configuration to enable testing for packaged Cesium Unity plugin\nSOURCE: https://github.com/cesiumgs/cesium-unity/blob/main/Documentation~/developer-setup.md#2025-04-22_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n\"testables\": [\"com.cesium.unity\"]\n```\n\n----------------------------------------\n\nTITLE: UWP Tidy-HTML5 Source Patch\nDESCRIPTION: Patches the tidy-html5 library's sprtf.c source file to work on UWP by replacing lstrlen with a fixed length value of -1.\nSOURCE: https://github.com/cesiumgs/cesium-unity/blob/main/native~/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nif (${CMAKE_SYSTEM_NAME} MATCHES \"WindowsStore\")\n  get_target_property(tidySources tidy-static \"SOURCES\")\n  list(REMOVE_ITEM tidySources \"src/sprtf.c\")\n  file(READ \"extern/tidy-html5/src/sprtf.c\" sprtSource)\n  string(REPLACE \"int len = (int)lstrlen(ps);\" \"int len = -1;\" sprtSource \"${sprtSource}\")\n  file(CONFIGURE OUTPUT \"${CMAKE_CURRENT_BINARY_DIR}/extern/tidy-html5/sprtf.c\" CONTENT \"${sprtSource}\")\n  list(APPEND tidySources \"${CMAKE_CURRENT_BINARY_DIR}/extern/tidy-html5/sprtf.c\")\n  set_target_properties(tidy-static PROPERTIES \"SOURCES\" \"${tidySources}\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Developer Resources Navigation in Markdown\nDESCRIPTION: Markdown structure defining the navigation links for developer documentation sections using Doxygen-style page references.\nSOURCE: https://github.com/cesiumgs/cesium-unity/blob/main/Documentation~/developer-resources.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Developer Resources {#developer-resources}\n\n- \\subpage developer-setup\n- \\subpage reinterop\n- \\subpage creating-monobehaviours\n- \\subpage release-guide\n```\n\n----------------------------------------\n\nTITLE: Monitoring Build Progress\nDESCRIPTION: PowerShell command to view build progress on Windows\nSOURCE: https://github.com/cesiumgs/cesium-unity/blob/main/Documentation~/developer-setup.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ncd cesium-unity-samples/Packages/com.cesium.unity\nGet-Content -Path native~/build-Standalone/build.log -Wait\n```"
  }
]