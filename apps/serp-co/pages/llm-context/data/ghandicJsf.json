[
  {
    "owner": "ghandic",
    "repo": "jsf",
    "content": "TITLE: Basic Usage of JSF for Generating Fake Data in Python\nDESCRIPTION: Demonstrates the basic usage of JSF to generate fake data from a JSON schema with faker providers for name and email properties.\nSOURCE: https://github.com/ghandic/jsf/blob/main/README.md#2025-04-18_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom jsf import JSF\n\nfaker = JSF(\n    {\n        \"type\": \"object\",\n        \"properties\": {\n            \"name\": {\"type\": \"string\", \"$provider\": \"faker.name\"},\n            \"email\": {\"type\": \"string\", \"$provider\": \"faker.email\"},\n        },\n        \"required\": [\"name\", \"email\"],\n    }\n)\n\nfake_json = faker.generate()\n```\n\n----------------------------------------\n\nTITLE: Basic JSF Usage Example\nDESCRIPTION: Demonstrates basic usage of JSF to generate fake name and email data using a JSON schema with faker providers.\nSOURCE: https://github.com/ghandic/jsf/blob/main/jsf/README.md#2025-04-18_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom jsf import JSF\n\nfaker = JSF(\n    {\n        \"type\": \"object\",\n        \"properties\": {\n            \"name\": {\"type\": \"string\", \"$provider\": \"faker.name\"},\n            \"email\": {\"type\": \"string\", \"$provider\": \"faker.email\"},\n        },\n        \"required\": [\"name\", \"email\"],\n    }\n)\n\nfake_json = faker.generate()\n```\n\nLANGUAGE: python\nCODE:\n```\n{\n    'name': 'Jesse Phillips', \n    'email': 'xroberson@hotmail.com'\n}\n```\n\n----------------------------------------\n\nTITLE: Loading JSON Schema from File with JSF\nDESCRIPTION: Shows how to load a JSON schema from a file using JSF's from_json method to generate fake data.\nSOURCE: https://github.com/ghandic/jsf/blob/main/README.md#2025-04-18_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom jsf import JSF\n\nfaker = JSF.from_json(\"demo-schema.json\")\nfake_json = faker.generate()\n```\n\n----------------------------------------\n\nTITLE: Using JSF in a Python program\nDESCRIPTION: Demonstrates how to use JSF within a Python program to generate fake JSON data from a schema file.\nSOURCE: https://github.com/ghandic/jsf/blob/main/docs/index.md#2025-04-18_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom jsf import JSF\n\nfaker = JSF.from_json(\"demo-schema.json\")\nfake_json = faker.generate()\n```\n\n----------------------------------------\n\nTITLE: FastAPI Integration with JSF\nDESCRIPTION: Demonstrates how to integrate JSF with FastAPI to create an endpoint that generates fake data according to a JSON schema, with automatic API documentation.\nSOURCE: https://github.com/ghandic/jsf/blob/main/README.md#2025-04-18_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom jsf import JSF\nfrom fastapi import FastAPI\n\napp = FastAPI(docs_url=\"/\")\ngenerator = JSF.from_json(\"custom.json\")\n\n\n@app.get(\"/generate\", response_model=generator.pydantic())\ndef read_root():\n    return generator.generate()\n```\n\n----------------------------------------\n\nTITLE: FastAPI Integration with JSF\nDESCRIPTION: Example of integrating JSF with FastAPI to create an endpoint that generates fake data based on a JSON schema.\nSOURCE: https://github.com/ghandic/jsf/blob/main/jsf/README.md#2025-04-18_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom jsf import JSF\nfrom fastapi import FastAPI\n\napp = FastAPI(docs_url=\"/\")\ngenerator = JSF.from_json(\"custom.json\")\n\n\n@app.get(\"/generate\", response_model=generator.pydantic())\ndef read_root():\n    return generator.generate()\n```\n\n----------------------------------------\n\nTITLE: CLI Installation and Usage of JSF\nDESCRIPTION: Demonstrates how to install JSF with CLI support and generate fake data from a JSON schema file using the command line interface.\nSOURCE: https://github.com/ghandic/jsf/blob/main/README.md#2025-04-18_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npip install jsf[cli]\njsf --schema jsf/tests/data/custom.json --instance wow.json\n```\n\n----------------------------------------\n\nTITLE: Using JSF CLI to generate fake JSON\nDESCRIPTION: Demonstrates how to use the JSF command-line interface to generate fake JSON data from a schema file and save it to a specified output file.\nSOURCE: https://github.com/ghandic/jsf/blob/main/docs/index.md#2025-04-18_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\njsf --schema jsf/tests/data/custom.json --instance wow.json\n```\n\n----------------------------------------\n\nTITLE: Docker Command for Running JSF\nDESCRIPTION: Shows how to run JSF inside a Docker container to generate fake data from a JSON schema file.\nSOURCE: https://github.com/ghandic/jsf/blob/main/README.md#2025-04-18_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -v $PWD:/data challisa/jsf jsf --schema /data/custom.json --instance /data/example.json\n```\n\n----------------------------------------\n\nTITLE: JSF CLI Usage Examples\nDESCRIPTION: Command line interface usage examples for both native installation and Docker.\nSOURCE: https://github.com/ghandic/jsf/blob/main/jsf/README.md#2025-04-18_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npip install jsf[cli]\njsf --schema jsf/tests/data/custom.json --instance wow.json\n```\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -v $PWD:/data challisa/jsf jsf --schema /data/custom.json --instance /data/example.json\n```\n\n----------------------------------------\n\nTITLE: Building and running JSF Docker image\nDESCRIPTION: Shows how to build a Docker image for JSF and run it to generate fake JSON data, mounting the current directory for file access.\nSOURCE: https://github.com/ghandic/jsf/blob/main/docs/index.md#2025-04-18_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndocker build . -t challisa/jsf\ndocker run -v $PWD:/data challisa/jsf jsf --schema /data/jsf/tests/data/custom.json --instance /data/wow.json\n```\n\n----------------------------------------\n\nTITLE: Loading JSF Schema from JSON File\nDESCRIPTION: Shows how to load a JSON schema from a file to generate fake data.\nSOURCE: https://github.com/ghandic/jsf/blob/main/jsf/README.md#2025-04-18_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom jsf import JSF\n\nfaker = JSF.from_json(\"demo-schema.json\")\nfake_json = faker.generate()\n```\n\n----------------------------------------\n\nTITLE: Example Output of JSF Generated Fake Data\nDESCRIPTION: Shows an example result of the generated fake data from the JSF library, containing a random name and email address.\nSOURCE: https://github.com/ghandic/jsf/blob/main/README.md#2025-04-18_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n{\n    'name': 'Jesse Phillips', \n    'email': 'xroberson@hotmail.com'\n}\n```\n\n----------------------------------------\n\nTITLE: Running FastAPI with Generated Models from JSON Schema\nDESCRIPTION: Commands to generate Python models from a JSON schema file and start the FastAPI server using uvicorn. The server is configured to run in development mode with auto-reload enabled and listens on all interfaces on port 8080.\nSOURCE: https://github.com/ghandic/jsf/blob/main/examples/fastapi/README.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndatamodel-codegen --input jsf/tests/data/custom.json --output model.py\nuvicorn api:app --reload --host 0.0.0.0 --port 8080\n```\n\n----------------------------------------\n\nTITLE: Running FastAPI Server with Uvicorn\nDESCRIPTION: Shows the command to run a FastAPI server with Uvicorn, enabling hot reloading for development purposes.\nSOURCE: https://github.com/ghandic/jsf/blob/main/README.md#2025-04-18_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n$ uvicorn main:app --reload\n\nINFO:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)\nINFO:     Started reloader process [28720]\nINFO:     Started server process [28722]\nINFO:     Waiting for application startup.\nINFO:     Application startup complete.\n```\n\n----------------------------------------\n\nTITLE: Running FastAPI Server with JSF\nDESCRIPTION: Command to start the FastAPI server with hot reload enabled.\nSOURCE: https://github.com/ghandic/jsf/blob/main/jsf/README.md#2025-04-18_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ uvicorn main:app --reload\n\nINFO:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)\nINFO:     Started reloader process [28720]\nINFO:     Started server process [28722]\nINFO:     Waiting for application startup.\nINFO:     Application startup complete.\n```\n\n----------------------------------------\n\nTITLE: Running the Flat File Generator CLI Tool with Bash\nDESCRIPTION: This command demonstrates how to execute the main.py script to generate a flat file. It specifies a schema file, the number of records to generate, the desired output format (parquet), and the output file name.\nSOURCE: https://github.com/ghandic/jsf/blob/main/examples/flatfile/README.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython main.py --schema schema.json --records 5 --output-format parquet --output output.parquet\n```\n\n----------------------------------------\n\nTITLE: Installing JSF Package via pip\nDESCRIPTION: Simple pip installation command for the JSF package.\nSOURCE: https://github.com/ghandic/jsf/blob/main/jsf/README.md#2025-04-18_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ pip install jsf\n\n---> 100%\n```\n\n----------------------------------------\n\nTITLE: Installing JSF via pip\nDESCRIPTION: Installs the JSF package using pip, the Python package installer.\nSOURCE: https://github.com/ghandic/jsf/blob/main/docs/index.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ pip install jsf\n---> 100%\nInstalled\n```\n\n----------------------------------------\n\nTITLE: Installing JSF via pip\nDESCRIPTION: Shows how to install the JSF package using pip package manager.\nSOURCE: https://github.com/ghandic/jsf/blob/main/README.md#2025-04-18_snippet_7\n\nLANGUAGE: console\nCODE:\n```\n$ pip install jsf\n\n---> 100%\n```\n\n----------------------------------------\n\nTITLE: Installing JSF CLI via pip\nDESCRIPTION: Installs the JSF package with CLI dependencies using pip for command-line usage.\nSOURCE: https://github.com/ghandic/jsf/blob/main/docs/index.md#2025-04-18_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ pip install jsf[cli]\n---> 100%\nInstalled\n```\n\n----------------------------------------\n\nTITLE: Defining Python Package Dependencies for JSF Project\nDESCRIPTION: This snippet lists the required Python packages and their minimum versions for the JSF project. It includes Faker for generating fake data, jsonschema for JSON schema validation, Pydantic for data modeling, rstr for random string generation, smart-open for file handling, and typing-extensions for enhanced type hinting.\nSOURCE: https://github.com/ghandic/jsf/blob/main/jsf/3rdparty/python/requirements.txt#2025-04-18_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nfaker>=15.3.4\njsonschema>=4.17.3\npydantic >= 2.0.0\nrstr>=3.2.0\nsmart-open[http]>=6.3.0\ntyping-extensions>=4.9.0\n```\n\n----------------------------------------\n\nTITLE: FastAPI Project Dependencies\nDESCRIPTION: Lists the core Python packages required for running a FastAPI application with JSF integration. Includes FastAPI framework, Uvicorn ASGI server, and JSF package.\nSOURCE: https://github.com/ghandic/jsf/blob/main/examples/fastapi/requirements.txt#2025-04-18_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nfastapi\nuvicorn\njsf\n```\n\n----------------------------------------\n\nTITLE: Package Dependencies\nDESCRIPTION: List of Python package dependencies including jsf, pandas, openpyxl, PyArrow, and jsonlines libraries.\nSOURCE: https://github.com/ghandic/jsf/blob/main/examples/flatfile/requirements.txt#2025-04-18_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\njsf\npandas\nopenpyxl\nPyArrow\njsonlines\n```\n\n----------------------------------------\n\nTITLE: Specifying Python Package Dependencies for JSF Project\nDESCRIPTION: This snippet lists the required Python packages for the JSF project. It specifies a minimum version for typer and includes pyjwt and pytest-cov without version constraints. These dependencies are typically used in a requirements.txt file or similar dependency management system.\nSOURCE: https://github.com/ghandic/jsf/blob/main/jsf/3rdparty/python/pytest-requirements.txt#2025-04-18_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\ntyper>=0.7.0 \npyjwt \npytest-cov\n```\n\n----------------------------------------\n\nTITLE: Installing Python Type Checking Dependencies\nDESCRIPTION: Lists required Python packages for type checking with mypy, including mypy itself, typing assertions, and type stubs for requests and jsonschema libraries.\nSOURCE: https://github.com/ghandic/jsf/blob/main/jsf/3rdparty/python/mypy-requirements.txt#2025-04-18_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nmypy==1.1.1\nmypy-typing-asserts\ntypes-requests\ntypes-jsonschema\n```\n\n----------------------------------------\n\nTITLE: Documentation Dependencies Requirements\nDESCRIPTION: Specifies the exact versions of Python packages required for a documentation project using MkDocs with Material theme. Includes packages for Chinese search functionality (jieba), image processing (pillow, cairosvg), and terminal output simulation (termynal).\nSOURCE: https://github.com/ghandic/jsf/blob/main/docs/requirements.txt#2025-04-18_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nmkdocstrings[python]==0.23.0\nmkdocs-material==9.4.7\n# For Material for MkDocs, Chinese search\njieba==0.42.1\n# For image processing by Material for MkDocs\npillow==10.2.0\n# For image processing by Material for MkDocs\ncairosvg==2.7.0\ntermynal==0.11.1\n```\n\n----------------------------------------\n\nTITLE: Installing Pants Build System for JSF Project\nDESCRIPTION: Commands to install the pants build system on macOS and export a virtual environment for IDE integration. This setup enables development work on the JSF project.\nSOURCE: https://github.com/ghandic/jsf/blob/main/docs/help/contributing.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Install `pants` on macos\nbrew install pantsbuild/tap/pants\n\n# Export the virtual environment for IDE\npants export --py-resolve-format=symlinked_immutable_virtualenv --resolve=python-default\n```\n\n----------------------------------------\n\nTITLE: Angular-Style Commit Message Format for JSF Project\nDESCRIPTION: The required format for commit messages in the JSF project, following Angular style conventions. The format includes type, optional scope, and subject line, with an optional body.\nSOURCE: https://github.com/ghandic/jsf/blob/main/docs/help/contributing.md#2025-04-18_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\n<type>[(scope)]: Subject\n\n[Body]\n```\n\n----------------------------------------\n\nTITLE: Commit Message Body with Issue References\nDESCRIPTION: Example of how to properly format a commit message body with issue references in the JSF project. Shows the correct syntax for referencing and fixing issues.\nSOURCE: https://github.com/ghandic/jsf/blob/main/docs/help/contributing.md#2025-04-18_snippet_2\n\nLANGUAGE: txt\nCODE:\n```\nBody.\n\nReferences: #10, #11.\nFixes #15.\n```"
  }
]