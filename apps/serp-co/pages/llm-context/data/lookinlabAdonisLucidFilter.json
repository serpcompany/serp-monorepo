[
  {
    "owner": "lookinlab",
    "repo": "adonis-lucid-filter",
    "content": "TITLE: Filtering Models Using Lucid Filter\nDESCRIPTION: Simplified approach to filtering a User model using the adonis-lucid-filter package, where the filter logic is defined separately in a model filter class.\nSOURCE: https://github.com/lookinlab/adonis-lucid-filter/blob/master/README.md#2025-04-19_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { HttpContext } from '@adonisjs/core/http'\nimport User from '#models/user'\n\nexport default class UsersController {\n  async index({ request }: HttpContext): Promise<User[]> {\n    return User.filter(request.qs()).exec()\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a UserFilter Class with Filter Methods\nDESCRIPTION: Example implementation of a UserFilter class that defines methods for filtering by company ID, name, and mobile phone, with blacklisting capability.\nSOURCE: https://github.com/lookinlab/adonis-lucid-filter/blob/master/README.md#2025-04-19_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BaseModelFilter } from 'adonis-lucid-filter'\nimport type { ModelQueryBuilderContract } from '@adonisjs/lucid/types/model'\nimport User from '#models/user'\n\nexport default class UserFilter extends BaseModelFilter {\n  declare $query: ModelQueryBuilderContract<typeof User>\n  \n  static blacklist: string[] = ['secretMethod']\n\n  // This will filter 'companyId', 'company_id' OR 'company'\n  company(id: number) {\n    this.$query.where('company_id', id)\n  }\n\n  name(name: string) {\n    this.$query.where((builder) => {\n      builder\n        .where('first_name', 'LIKE', `%${name}%`)\n        .orWhere('last_name', 'LIKE', `%${name}%`)\n    })\n  }\n\n  mobilePhone(phone: string) {\n    this.$query.where('mobile_phone', 'LIKE', `${phone}%`)\n  }\n\n  secretMethod(secretParameter: any) {\n    this.$query.where('some_column', true)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Filters in Controllers with Pagination\nDESCRIPTION: Examples of applying filters in a controller action, including a variant with pagination.\nSOURCE: https://github.com/lookinlab/adonis-lucid-filter/blob/master/README.md#2025-04-19_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { HttpContext } from '@adonisjs/core/http'\nimport User from '#models/user'\n\nexport default class UsersController {\n  async index({ request }: HttpContext): Promise<User[]> {\n    return User.filter(request.qs()).exec()\n  }\n\n  // or with paginate method\n\n  async index({ request }: HttpContext): Promise<ModelPaginatorContract<User>> {\n    const { page = 1, ...input } = request.qs()\n    return User.filter(input).paginate(page, 15)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Model Relations\nDESCRIPTION: Examples of filtering model relations using query scopes or direct filtering on relation queries.\nSOURCE: https://github.com/lookinlab/adonis-lucid-filter/blob/master/README.md#2025-04-19_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { HttpContext } from '@adonisjs/core/http'\nimport User from '#models/user'\n\nexport default class UserPostsController {\n  /**\n   * Get a list posts of user\n   * GET /users/:user_id/posts\n   */\n  async index({ params, request }: HttpContext): Promise<Post[]> {\n    const user: User = await User.findOrFail(params.user_id)\n    \n    return user.related('posts').query()\n      .apply(scopes => scopes.filtration(request.qs()))\n      .exec()\n\n    // or\n\n    return user.related('posts').query().filter(request.qs()).exec()\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Applying a Filter to a Model\nDESCRIPTION: Integrating the Filterable composition into a User model to enable the filter functionality.\nSOURCE: https://github.com/lookinlab/adonis-lucid-filter/blob/master/README.md#2025-04-19_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport UserFilter from '#models/filters/user_filter'\nimport { compose } from '@adonisjs/core/helpers'\nimport { Filterable } from 'adonis-lucid-filter'\n\nexport default class User extends compose(BaseModel, Filterable) {\n  static $filter = () => UserFilter\n\n  // ...columns and props\n}\n```\n\n----------------------------------------\n\nTITLE: Using the Setup Method with Whitelisting\nDESCRIPTION: Example of using the setup method in a filter class to dynamically whitelist methods and add default query conditions.\nSOURCE: https://github.com/lookinlab/adonis-lucid-filter/blob/master/README.md#2025-04-19_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nsetup($query) {\n  this.whitelistMethod('secretMethod')\n  this.$query.where('is_admin', true)\n}\n```\n\n----------------------------------------\n\nTITLE: Using Dynamic Filters Based on Conditions\nDESCRIPTION: Example of dynamically selecting which filter class to use based on runtime conditions like user permissions.\nSOURCE: https://github.com/lookinlab/adonis-lucid-filter/blob/master/README.md#2025-04-19_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { HttpContext } from '@adonisjs/core/http'\nimport AdminFilter from '#models/filters/admin_filter'\nimport UserFilter from '#models/filters/user_filter'\n\nexport default class UsersController {\n  async index({ request, auth }: HttpContext): Promise<User[]> {\n    const filter = auth.user.isAdmin() ? AdminFilter : UserFilter\n    return User.filter(request.qs(), filter).exec()\n  } \n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Request Query String Format for Filtering\nDESCRIPTION: Shows the JSON structure returned by request.all() or request.qs() that will be used for filtering models based on multiple parameters.\nSOURCE: https://github.com/lookinlab/adonis-lucid-filter/blob/master/README.md#2025-04-19_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"Tony\",\n  \"lastName\": \"\",\n  \"companyId\": 2,\n  \"industry\": 5\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Models Without Lucid Filter\nDESCRIPTION: Example of how to filter a User model with multiple conditions using the standard Lucid query builder approach without the filter package.\nSOURCE: https://github.com/lookinlab/adonis-lucid-filter/blob/master/README.md#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { HttpContext } from '@adonisjs/core/http'\nimport User from '#models/user'\n\nexport default class UsersController {\n  async index({ request }: HttpContext): Promise<User[]> {\n    const { companyId, lastName, name, industry } = request.qs()\n  \n    const query = User.query().where('company_id', +companyId)\n\n    if (lastName) {\n      query.where('last_name', 'LIKE', `%${lastName}%`)\n    }\n    if (name) {\n      query.where(function () {\n        this.where('first_name', 'LIKE', `%${name}%`)\n          .orWhere('last_name', 'LIKE', `%${name}%`)\n      })\n    }\n    return query.exec()\n  }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Static Properties in a Filter Class\nDESCRIPTION: Setting static properties for a filter class to control blacklisting, ID handling, and case conversion behavior.\nSOURCE: https://github.com/lookinlab/adonis-lucid-filter/blob/master/README.md#2025-04-19_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nexport default class UserFilter extends BaseModelFilter {\n  // Blacklisted methods\n  static blacklist: string[] = []\n  \n  // Dropped `_id` from the end of the input\n  // Doing this would allow you to have a `company()` filter method as well as a `companyId()` filter method.\n  static dropId: boolean = true\n  \n  // Doing this would allow you to have a mobile_phone() filter method instead of mobilePhone().\n  // By default, mobilePhone() filter method can be called thanks to one of the following input key:\n  // mobile_phone, mobilePhone, mobile_phone_id, mobilePhoneId\n  static camelCase: boolean = true\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Provider and Commands in adonisrc.ts\nDESCRIPTION: Configuration to register the package provider and commands in the adonisrc.ts file.\nSOURCE: https://github.com/lookinlab/adonis-lucid-filter/blob/master/README.md#2025-04-19_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nproviders: [\n  // ...\n  () => import('adonis-lucid-filter/provider'),\n],\ncommands: [\n  // ...\n  () => import('adonis-lucid-filter/commands')\n]\n```\n\n----------------------------------------\n\nTITLE: Generating a Model Filter with Ace Command\nDESCRIPTION: Command to generate a new model filter class using the ace command line tool.\nSOURCE: https://github.com/lookinlab/adonis-lucid-filter/blob/master/README.md#2025-04-19_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnode ace make:filter user\n```\n\n----------------------------------------\n\nTITLE: Installing adonis-lucid-filter Package\nDESCRIPTION: Commands for installing the adonis-lucid-filter package using npm, yarn, or pnpm package managers.\nSOURCE: https://github.com/lookinlab/adonis-lucid-filter/blob/master/README.md#2025-04-19_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# npm\nnpm i adonis-lucid-filter\n\n# yarn\nyarn add adonis-lucid-filter\n\n# pnpm\npnpm add adonis-lucid-filter\n```\n\n----------------------------------------\n\nTITLE: Configuring adonis-lucid-filter After Installation\nDESCRIPTION: Command to run the configuration script after installing the package.\nSOURCE: https://github.com/lookinlab/adonis-lucid-filter/blob/master/README.md#2025-04-19_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnode ace configure adonis-lucid-filter\n```"
  }
]