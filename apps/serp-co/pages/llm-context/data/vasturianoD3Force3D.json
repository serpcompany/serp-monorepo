[
  {
    "owner": "vasturiano",
    "repo": "d3-force-3d",
    "content": "TITLE: Initializing D3 Force Simulation\nDESCRIPTION: Creates a new force simulation with optional nodes and dimensions specification. The simulation automatically starts and manages node positions and velocities in 1D, 2D, or 3D space.\nSOURCE: https://github.com/vasturiano/d3-force-3d/blob/master/README.md#2025-04-17_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nd3.forceSimulation([nodes], [numDimensions])\n```\n\n----------------------------------------\n\nTITLE: Creating a D3 Force Simulation with Multiple Forces in JavaScript\nDESCRIPTION: This snippet demonstrates how to create a new D3 force simulation with multiple forces applied, including charge, link, and center forces. It shows the basic setup for a graph layout simulation.\nSOURCE: https://github.com/vasturiano/d3-force-3d/blob/master/README.md#2025-04-17_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst simulation = d3.forceSimulation(nodes)\n    .force(\"charge\", d3.forceManyBody())\n    .force(\"link\", d3.forceLink(links))\n    .force(\"center\", d3.forceCenter());\n```\n\n----------------------------------------\n\nTITLE: Simulation Control Methods\nDESCRIPTION: Core methods for controlling the simulation including restart(), stop(), and tick(). These methods allow manual control over the simulation's execution and state.\nSOURCE: https://github.com/vasturiano/d3-force-3d/blob/master/README.md#2025-04-17_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nsimulation.restart()\nsimulation.stop()\nsimulation.tick([iterations])\n```\n\n----------------------------------------\n\nTITLE: Simulation Configuration Methods\nDESCRIPTION: Methods for configuring simulation parameters including dimensions, nodes, alpha values, and decay rates. These methods allow fine-tuning of the simulation behavior.\nSOURCE: https://github.com/vasturiano/d3-force-3d/blob/master/README.md#2025-04-17_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nsimulation.numDimensions([numDimensions])\nsimulation.nodes([nodes])\nsimulation.alpha([alpha])\nsimulation.alphaMin([min])\nsimulation.alphaDecay([decay])\nsimulation.alphaTarget([target])\nsimulation.velocityDecay([decay])\n```\n\n----------------------------------------\n\nTITLE: Importing d3-force-3d from Skypack CDN in HTML\nDESCRIPTION: This snippet demonstrates how to import the forceSimulation function from d3-force-3d using Skypack CDN in a modern browser environment. It shows the basic setup for creating a force simulation with nodes.\nSOURCE: https://github.com/vasturiano/d3-force-3d/blob/master/README.md#2025-04-17_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"module\">\n\nimport {forceSimulation} from \"https://cdn.skypack.dev/d3-force-3d\";\n\nconst simulation = forceSimulation(nodes);\n\n</script>\n```\n\n----------------------------------------\n\nTITLE: Implementing a Simple Positioning Force in D3 Force Simulation\nDESCRIPTION: This example defines a custom force function that moves nodes towards the origin (0,0) in a 2D simulation. It demonstrates how to create a basic force that modifies node velocities based on their current positions.\nSOURCE: https://github.com/vasturiano/d3-force-3d/blob/master/README.md#2025-04-17_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nfunction force(alpha) {\n  for (let i = 0, n = nodes.length, node, k = alpha * 0.1; i < n; ++i) {\n    node = nodes[i];\n    node.vx -= node.x * k;\n    node.vy -= node.y * k;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Named Node Links Example\nDESCRIPTION: Example showing how to define nodes and links using named string identifiers instead of numeric indices.\nSOURCE: https://github.com/vasturiano/d3-force-3d/blob/master/README.md#2025-04-17_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nconst nodes = [\n  {\"id\": \"Alice\"},\n  {\"id\": \"Bob\"},\n  {\"id\": \"Carol\"}\n];\n\nconst links = [\n  {\"source\": \"Alice\", \"target\": \"Bob\"},\n  {\"source\": \"Bob\", \"target\": \"Carol\"}\n];\n```\n\n----------------------------------------\n\nTITLE: Node and Link Definition Example\nDESCRIPTION: Example showing how to define nodes and links using numeric indices for source and target references.\nSOURCE: https://github.com/vasturiano/d3-force-3d/blob/master/README.md#2025-04-17_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst nodes = [\n  {\"id\": \"Alice\"},\n  {\"id\": \"Bob\"},\n  {\"id\": \"Carol\"}\n];\n\nconst links = [\n  {\"source\": 0, \"target\": 1}, // Alice → Bob\n  {\"source\": 1, \"target\": 2} // Bob → Carol\n];\n```\n\n----------------------------------------\n\nTITLE: Removing a Force from a D3 Simulation in JavaScript\nDESCRIPTION: This code snippet shows how to remove a specific force (in this case, the 'charge' force) from an existing D3 force simulation by passing null as the force value.\nSOURCE: https://github.com/vasturiano/d3-force-3d/blob/master/README.md#2025-04-17_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nsimulation.force(\"charge\", null);\n```\n\n----------------------------------------\n\nTITLE: Loading d3-force-3d UMD bundle using jsDelivr CDN\nDESCRIPTION: This code snippet shows how to load the UMD bundle of d3-force-3d and its dependencies using jsDelivr CDN for legacy environments. It demonstrates the setup required to use the library globally as 'd3' and create a force simulation.\nSOURCE: https://github.com/vasturiano/d3-force-3d/blob/master/README.md#2025-04-17_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://cdn.jsdelivr.net/npm/d3-dispatch@3\"></script>\n<script src=\"https://cdn.jsdelivr.net/npm/d3-quadtree@3\"></script>\n<script src=\"https://cdn.jsdelivr.net/npm/d3-timer@3\"></script>\n<script src=\"https://cdn.jsdelivr.net/npm/d3-binarytree\"></script>\n<script src=\"https://cdn.jsdelivr.net/npm/d3-octree\"></script>\n<script src=\"https://cdn.jsdelivr.net/npm/d3-force-3d\"></script>\n<script>\n\nconst simulation = d3.forceSimulation(nodes);\n\n</script>\n```\n\n----------------------------------------\n\nTITLE: Default Strength Function for Many-Body Force in D3-Force-3D\nDESCRIPTION: The default strength accessor function for the many-body force. It returns a negative value (-30) to create a repulsive force between nodes, similar to electrostatic charge. This function is invoked for each node in the simulation.\nSOURCE: https://github.com/vasturiano/d3-force-3d/blob/master/README.md#2025-04-17_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nfunction strength() {\n  return -30;\n}\n```\n\n----------------------------------------\n\nTITLE: Default Link Distance Function\nDESCRIPTION: Default implementation of the link distance accessor that returns a constant distance of 30 units between linked nodes.\nSOURCE: https://github.com/vasturiano/d3-force-3d/blob/master/README.md#2025-04-17_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nfunction distance() {\n  return 30;\n}\n```\n\n----------------------------------------\n\nTITLE: Default Link Strength Function\nDESCRIPTION: Default implementation of the link strength accessor that automatically reduces strength for heavily-connected nodes.\nSOURCE: https://github.com/vasturiano/d3-force-3d/blob/master/README.md#2025-04-17_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nfunction strength(link) {\n  return 1 / Math.min(count(link.source), count(link.target));\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Node ID Accessor\nDESCRIPTION: Example of a custom ID accessor function that uses string IDs instead of numeric indices.\nSOURCE: https://github.com/vasturiano/d3-force-3d/blob/master/README.md#2025-04-17_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nfunction id(d) {\n  return d.id;\n}\n```\n\n----------------------------------------\n\nTITLE: Default Radius Function for Collision Force\nDESCRIPTION: Default implementation of the radius accessor function used in collision force calculations. Returns a constant radius of 1 for all nodes.\nSOURCE: https://github.com/vasturiano/d3-force-3d/blob/master/README.md#2025-04-17_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nfunction radius() {\n  return 1;\n}\n```\n\n----------------------------------------\n\nTITLE: Default Node ID Accessor\nDESCRIPTION: Default implementation of the node ID accessor function that returns the numeric index of each node. Used for linking nodes in the force simulation.\nSOURCE: https://github.com/vasturiano/d3-force-3d/blob/master/README.md#2025-04-17_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nfunction id(d) {\n  return d.index;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Radial Force Radius - D3-Force-3D JavaScript\nDESCRIPTION: Method for getting or setting the radius of the radial force. The radius can be specified as a number or function that is evaluated for each node in the simulation.\nSOURCE: https://github.com/vasturiano/d3-force-3d/blob/master/README.md#2025-04-17_snippet_23\n\nLANGUAGE: JavaScript\nCODE:\n```\nradial.radius([radius])\n```\n\n----------------------------------------\n\nTITLE: Default Strength Function Implementation for Radial Force in D3\nDESCRIPTION: This function defines the default strength accessor for the radial positioning force. It returns a fixed value of 0.1, which determines how quickly nodes move toward the target circle or sphere.\nSOURCE: https://github.com/vasturiano/d3-force-3d/blob/master/README.md#2025-04-17_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nfunction strength() { \n  return 0.1; \n}\n```\n\n----------------------------------------\n\nTITLE: Default Strength Function Implementation for X-Axis Force in D3\nDESCRIPTION: This function defines the default strength accessor for the X-axis positioning force. It returns a fixed value of 0.1, which determines how quickly nodes move toward their target X-position.\nSOURCE: https://github.com/vasturiano/d3-force-3d/blob/master/README.md#2025-04-17_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nfunction strength() {\n  return 0.1;\n}\n```\n\n----------------------------------------\n\nTITLE: Default Strength Function Implementation for Y-Axis Force in D3\nDESCRIPTION: This function defines the default strength accessor for the Y-axis positioning force. It returns a fixed value of 0.1, which determines how quickly nodes move toward their target Y-position.\nSOURCE: https://github.com/vasturiano/d3-force-3d/blob/master/README.md#2025-04-17_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nfunction strength() {\n  return 0.1;\n}\n```\n\n----------------------------------------\n\nTITLE: Default Strength Function Implementation for Z-Axis Force in D3\nDESCRIPTION: This function defines the default strength accessor for the Z-axis positioning force. It returns a fixed value of 0.1, which determines how quickly nodes move toward their target Z-position.\nSOURCE: https://github.com/vasturiano/d3-force-3d/blob/master/README.md#2025-04-17_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nfunction strength() {\n  return 0.1;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting X-Coordinate of Sphere Center - D3-Force-3D JavaScript\nDESCRIPTION: Method for getting or setting the x-coordinate of the sphere center. Defaults to zero if not specified.\nSOURCE: https://github.com/vasturiano/d3-force-3d/blob/master/README.md#2025-04-17_snippet_24\n\nLANGUAGE: JavaScript\nCODE:\n```\nradial.x([x])\n```\n\n----------------------------------------\n\nTITLE: Setting Y-Coordinate of Sphere Center - D3-Force-3D JavaScript\nDESCRIPTION: Method for getting or setting the y-coordinate of the sphere center. Defaults to zero if not specified.\nSOURCE: https://github.com/vasturiano/d3-force-3d/blob/master/README.md#2025-04-17_snippet_25\n\nLANGUAGE: JavaScript\nCODE:\n```\nradial.y([y])\n```\n\n----------------------------------------\n\nTITLE: Setting Z-Coordinate of Sphere Center - D3-Force-3D JavaScript\nDESCRIPTION: Method for getting or setting the z-coordinate of the sphere center. Defaults to zero if not specified.\nSOURCE: https://github.com/vasturiano/d3-force-3d/blob/master/README.md#2025-04-17_snippet_26\n\nLANGUAGE: JavaScript\nCODE:\n```\nradial.z([z])\n```\n\n----------------------------------------\n\nTITLE: Default X-Coordinate Accessor Implementation in D3 Force\nDESCRIPTION: This function defines the default X-coordinate accessor for the X-axis positioning force. It returns a value of 0, meaning nodes will be pulled toward the X=0 position by default.\nSOURCE: https://github.com/vasturiano/d3-force-3d/blob/master/README.md#2025-04-17_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nfunction x() {\n  return 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Default Y-Coordinate Accessor Implementation in D3 Force\nDESCRIPTION: This function defines the default Y-coordinate accessor for the Y-axis positioning force. It returns a value of 0, meaning nodes will be pulled toward the Y=0 position by default.\nSOURCE: https://github.com/vasturiano/d3-force-3d/blob/master/README.md#2025-04-17_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nfunction y() {\n  return 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Default Z-Coordinate Accessor Implementation in D3 Force\nDESCRIPTION: This function defines the default Z-coordinate accessor for the Z-axis positioning force. It returns a value of 0, meaning nodes will be pulled toward the Z=0 position by default.\nSOURCE: https://github.com/vasturiano/d3-force-3d/blob/master/README.md#2025-04-17_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nfunction z() {\n  return 0;\n}\n```"
  }
]