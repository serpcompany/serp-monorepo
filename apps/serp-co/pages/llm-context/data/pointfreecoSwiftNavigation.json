[
  {
    "owner": "pointfreeco",
    "repo": "swift-navigation",
    "content": "TITLE: Refactoring Navigation with Enum-Based Destinations in Swift\nDESCRIPTION: Shows how to refactor navigation state using an enum with associated values to represent different navigation destinations, providing a more concise and type-safe approach.\nSOURCE: https://github.com/pointfreeco/swift-navigation/blob/main/Sources/SwiftUINavigation/Documentation.docc/SwiftUINavigation.md#2025-04-20_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\n@Observable\nclass FeatureModel {\n  var destination: Destination?\n\n  enum Destination {\n    case addItem(AddItemModel)\n    case deleteItemAlert\n    case editItem(EditItemModel)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using navigationDestination with Optional Item in iOS 16+\nDESCRIPTION: Shows how to use the navigationDestination view modifier in iOS 16+ with an optional item binding. This approach separates the navigation trigger (Button) from the destination definition.\nSOURCE: https://github.com/pointfreeco/swift-navigation/blob/main/Sources/SwiftUINavigation/Documentation.docc/Articles/Navigation.md#2025-04-20_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nButton {\n  destination = 42\n} label: {\n  Text(\"Go to counter\")\n}\n.navigationDestination(item: $model.destination) { $item in\n  CounterView(number: $number)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining an Enum for Multiple Navigation Destinations\nDESCRIPTION: Creates a CasePathable enum to model multiple, mutually exclusive navigation destinations. This approach is more appropriate than optionals when a feature can navigate to multiple screens.\nSOURCE: https://github.com/pointfreeco/swift-navigation/blob/main/Sources/SwiftUINavigation/Documentation.docc/Articles/Navigation.md#2025-04-20_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\n@CasePathable\nenum Destination {\n  case counter(Int)\n  case text(String)\n}\n```\n\n----------------------------------------\n\nTITLE: Modeling Navigation State with Multiple Optionals in Swift\nDESCRIPTION: Shows how to model navigation state using multiple optional properties in a FeatureModel class. This approach allows different navigation destinations but introduces potential invalid states.\nSOURCE: https://github.com/pointfreeco/swift-navigation/blob/main/Sources/SwiftUINavigation/Documentation.docc/SwiftUINavigation.md#2025-04-20_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\n@Observable\nclass FeatureModel {\n  var addItem: AddItemModel?\n  var deleteItemAlertIsPresented: Bool\n  var editItem: EditItemModel?\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Using SwiftUI Navigation Modifiers with Enum-Based Navigation\nDESCRIPTION: Demonstrates how to use SwiftUINavigation's binding extensions with SwiftUI's navigation modifiers to drive navigation from an enum-based destination model.\nSOURCE: https://github.com/pointfreeco/swift-navigation/blob/main/Sources/SwiftUINavigation/Documentation.docc/SwiftUINavigation.md#2025-04-20_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\n.sheet(item: $model.destination.addItem) { addItemModel in\n  AddItemView(model: addItemModel)\n}\n.alert(\"Delete?\", isPresented: Binding($model.destination.deleteItemAlert)) {\n  Button(\"Yes\", role: .destructive) { /* ... */ }\n  Button(\"No\", role: .cancel) {}\n}\n.navigationDestination(item: $model.destination.editItem) { editItemModel in\n  EditItemView(model: editItemModel)\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a NavigationLink with Optional Item Binding\nDESCRIPTION: Demonstrates how to create a NavigationLink that activates when state becomes non-nil and deactivates when state is nil. The link provides a binding to the unwrapped state for the destination view.\nSOURCE: https://github.com/pointfreeco/swift-navigation/blob/main/Sources/SwiftUINavigation/Documentation.docc/Articles/Navigation.md#2025-04-20_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nNavigationLink(item: $destination) { isActive in\n  destination = isActive ? 42 : nil\n} destination: { $number in\n  CounterView(number: $number)\n} label: {\n  Text(\"Go to counter\")\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Sheet Presentation with Optional Binding\nDESCRIPTION: Implementation of sheet presentation using item binding with a trailing closure that provides binding to unwrapped state.\nSOURCE: https://github.com/pointfreeco/swift-navigation/blob/main/Sources/SwiftUINavigation/Documentation.docc/Articles/SheetsPopoversCovers.md#2025-04-20_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nvar body: some View {\n  List {\n    // ...\n  }\n  .sheet(item: $destination) { $number in\n    CounterView(number: $number)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a NavigationLink with Enum Case Binding\nDESCRIPTION: Demonstrates using NavigationLink with a binding to a specific case of an optional enum. This allows navigation to be driven by a particular enum case, with the binding unwrapping the associated value.\nSOURCE: https://github.com/pointfreeco/swift-navigation/blob/main/Sources/SwiftUINavigation/Documentation.docc/Articles/Navigation.md#2025-04-20_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\nNavigationLink(item: $destination.counter) { isActive in\n  destination = isActive ? .counter(42) : nil\n} destination: { $number in\n  CounterView(number: $number)\n} label: {\n  Text(\"Go to counter\")\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Optional Enum Navigation State\nDESCRIPTION: Defines an optional Destination enum in state to represent whether navigation to any destination is active. This combines the optional pattern with the enum pattern for more complex navigation flows.\nSOURCE: https://github.com/pointfreeco/swift-navigation/blob/main/Sources/SwiftUINavigation/Documentation.docc/Articles/Navigation.md#2025-04-20_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\n@State var destination: Destination?\n```\n\n----------------------------------------\n\nTITLE: Displaying Alert in SwiftUI View with Navigation\nDESCRIPTION: Demonstrates how to bind the alert state to a SwiftUI view using the alert modifier that accepts a binding to an optional AlertState and an action handler.\nSOURCE: https://github.com/pointfreeco/swift-navigation/blob/main/Sources/SwiftUINavigation/Documentation.docc/Articles/AlertsDialogs.md#2025-04-20_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\nstruct ContentView: View {\n  @ObservedObject var model: FeatureModel\n\n  var body: some View {\n    List {\n      // ...\n    }\n    .alert($model.alert) { action in\n      model.alertButtonTapped(action)\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using SwiftUI Navigation Modifiers with Multiple Optionals\nDESCRIPTION: Demonstrates how to use SwiftUI's sheet, alert, and navigationDestination modifiers with separate optional properties to handle different navigation destinations.\nSOURCE: https://github.com/pointfreeco/swift-navigation/blob/main/Sources/SwiftUINavigation/Documentation.docc/SwiftUINavigation.md#2025-04-20_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\n.sheet(item: $model.addItem) { addItemModel in\n  AddItemView(model: addItemModel)\n}\n.alert(\"Delete?\", isPresented: $model.deleteItemAlertIsPresented) {\n  Button(\"Yes\", role: .destructive) { /* ... */ }\n  Button(\"No\", role: .cancel) {}\n}\n.navigationDestination(item: $model.editItem) { editItemModel in\n  EditItemModel(model: editItemModel)\n}\n```\n\n----------------------------------------\n\nTITLE: Binding Alert to Enum Case in SwiftUI\nDESCRIPTION: Shows how to use the alert modifier with a case path to bind to a specific case of an enum for alert presentation when using the enum-based navigation approach.\nSOURCE: https://github.com/pointfreeco/swift-navigation/blob/main/Sources/SwiftUINavigation/Documentation.docc/Articles/AlertsDialogs.md#2025-04-20_snippet_7\n\nLANGUAGE: swift\nCODE:\n```\n.alert($model.destination.alert) { action in\n  model.alertButtonTapped(action)\n}\n```\n\n----------------------------------------\n\nTITLE: Enhancing Enum with CasePathable for Navigation\nDESCRIPTION: Shows how to enhance the Destination enum with the @CasePathable macro, which enables deriving key paths and properties for each enum case to facilitate state-driven navigation.\nSOURCE: https://github.com/pointfreeco/swift-navigation/blob/main/Sources/UIKitNavigation/Documentation.docc/UIKitNavigation.md#2025-04-20_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\n@CasePathable\nenum Destination {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Alert State with Title, Actions and Message in Swift\nDESCRIPTION: Shows how to populate the alert state with a title, message, and action buttons when a delete button is tapped. Includes both a destructive delete button and a cancel button.\nSOURCE: https://github.com/pointfreeco/swift-navigation/blob/main/Sources/SwiftUINavigation/Documentation.docc/Articles/AlertsDialogs.md#2025-04-20_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nfunc deleteButtonTapped() {\n  self.alert = AlertState {\n    TextState(\"Are you sure?\")\n  } actions: {\n    ButtonState(role: .destructive, action: .confirmDelete) {\n      TextState(\"Delete\")\n    }\n    ButtonState(role: .cancel) {\n      TextState(\"Nevermind\")\n    }\n  } message: {\n    TextState(\"Deleting this item cannot be undone.\")\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Annotating Destination Enum with CasePathable Macro\nDESCRIPTION: Shows how to annotate a navigation destination enum with the @CasePathable macro to enable dot-syntax access to enum cases, a key feature of the SwiftUINavigation library.\nSOURCE: https://github.com/pointfreeco/swift-navigation/blob/main/Sources/SwiftUINavigation/Documentation.docc/SwiftUINavigation.md#2025-04-20_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\n@CasePathable\nenum Destination {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Fire-and-Forget Navigation Example in UIKit\nDESCRIPTION: Shows the traditional UIKit approach to navigation where a button action presents a view controller without tracking the navigation state in the feature's model.\nSOURCE: https://github.com/pointfreeco/swift-navigation/blob/main/Sources/UIKitNavigation/Documentation.docc/UIKitNavigation.md#2025-04-20_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nlet button = UIButton(type: .system, primaryAction: UIAction { [weak self] _ in\n  present(SettingsViewController(), animated: true)\n})\n```\n\n----------------------------------------\n\nTITLE: Using navigationDestination with Enum Case Binding\nDESCRIPTION: Shows how to use the navigationDestination view modifier with a binding to a specific case of an optional enum. This separates the navigation trigger from the destination definition while supporting enum-based navigation.\nSOURCE: https://github.com/pointfreeco/swift-navigation/blob/main/Sources/SwiftUINavigation/Documentation.docc/Articles/Navigation.md#2025-04-20_snippet_6\n\nLANGUAGE: swift\nCODE:\n```\nButton {\n  destination = .counter(42)\n} label: {\n  Text(\"Go to counter\")\n}\n.navigationDestination(item: $model.destination.counter) { $number in\n  CounterView(number: $number)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Confirmation Dialog in SwiftUI View\nDESCRIPTION: Shows how to bind a confirmation dialog state to a SwiftUI view using the confirmationDialog modifier that accepts a binding to an optional ConfirmationDialogState.\nSOURCE: https://github.com/pointfreeco/swift-navigation/blob/main/Sources/SwiftUINavigation/Documentation.docc/Articles/AlertsDialogs.md#2025-04-20_snippet_9\n\nLANGUAGE: swift\nCODE:\n```\nstruct ContentView: View {\n  @ObservedObject var model: FeatureModel\n\n  var body: some View {\n    List {\n      // ...\n    }\n    .confirmationDialog($model.dialog) { action in\n      dialogButtonTapped(action)\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Alert State in Model with Observable Class in Swift\nDESCRIPTION: Demonstrates how to set up a feature model with an optional AlertState property to manage alert presentation. The model includes an enum to define possible alert actions.\nSOURCE: https://github.com/pointfreeco/swift-navigation/blob/main/Sources/SwiftUINavigation/Documentation.docc/Articles/AlertsDialogs.md#2025-04-20_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\n@Observable\nclass FeatureModel {\n  var alert: AlertState<AlertAction>?\n  enum AlertAction {\n    case confirmDelete\n  }\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: UIKit Observation Implementation\nDESCRIPTION: Example of using the observe method to track and update UI based on model changes.\nSOURCE: https://github.com/pointfreeco/swift-navigation/blob/main/README.md#2025-04-20_snippet_6\n\nLANGUAGE: swift\nCODE:\n```\nobserve { [weak self] in\n  guard let self else { return }\n  \n  countLabel.text = \"Count: \\(model.count)\"\n  factLabel.isHidden = model.fact == nil \n  if let fact = model.fact {\n    factLabel.text = fact\n  }\n  activityIndicator.isHidden = !model.isLoadingFact\n}\n```\n\n----------------------------------------\n\nTITLE: Using Enum-Based Destination for Alert Navigation in Swift\nDESCRIPTION: Demonstrates how to use a case-pathable enum to represent multiple possible navigation destinations, including alerts, which is useful for mutually exclusive screens.\nSOURCE: https://github.com/pointfreeco/swift-navigation/blob/main/Sources/SwiftUINavigation/Documentation.docc/Articles/AlertsDialogs.md#2025-04-20_snippet_6\n\nLANGUAGE: swift\nCODE:\n```\n@Observable\nclass FeatureModel {\n  var destination: Destination?\n\n  @CasePathable\n  enum Destination {\n    case alert(AlertState<AlertAction>)\n    // NB: Other destinations\n  }\n\n  enum AlertAction {\n    case confirmDelete\n  }\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: State-Driven Navigation Implementation in UIViewController\nDESCRIPTION: Demonstrates how to implement state-driven navigation in a UIViewController by binding model state to navigation actions using the UIKitNavigation library's methods.\nSOURCE: https://github.com/pointfreeco/swift-navigation/blob/main/Sources/UIKitNavigation/Documentation.docc/UIKitNavigation.md#2025-04-20_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\nclass FeatureViewController: UIViewController {\n  @UIBindable var model: FeatureModel\n\n  func viewDidLoad() {\n    super.viewDidLoad()\n\n    // Set up view hierarchy\n\n    present(item: $model.destination.addItem) { addItemModel in\n      AddItemViewController(model: addItemModel)\n    }\n    present(isPresented: Binding($model.destination.deleteItemAlert)) {\n      let alert = UIAlertController(title: \"Delete?\", message: message, preferredStyle: .alert)\n      alert.addAction(UIAlertAction(title: \"Yes\", style: .destructive))\n      alert.addAction(UIAlertAction(title: \"No\", style: .cancel))\n      return alert\n    }\n    navigationDestination(item: $model.destination.editItem) { editItemModel in\n      EditItemViewController(model: editItemModel)\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Binding UITextField to Observable Text in Swift\nDESCRIPTION: Binds a UITextField to an observable text value, enabling two-way synchronization between the text field's content and the observable.\nSOURCE: https://github.com/pointfreeco/swift-navigation/blob/main/Sources/UIKitNavigation/Documentation.docc/Extensions/UITextField.md#2025-04-20_snippet_1\n\nLANGUAGE: Swift\nCODE:\n```\nUIKit/UITextField/bind(text:)\n```\n\n----------------------------------------\n\nTITLE: State-Driven Navigation Model with Destination Enum\nDESCRIPTION: Demonstrates how to model navigation destinations using an enum with associated values, allowing for precise tracking of which destination is currently active.\nSOURCE: https://github.com/pointfreeco/swift-navigation/blob/main/Sources/UIKitNavigation/Documentation.docc/UIKitNavigation.md#2025-04-20_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\n@Observable\nclass FeatureModel {\n  var destination: Destination?\n\n  enum Destination {\n    case addItem(AddItemModel)\n    case deleteItemAlert\n    case editItem(EditItemModel)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing UITextField with Observable Attributed Text in Swift\nDESCRIPTION: Creates a UITextField with an initial frame and binds it to an observable attributed text value. This allows for reactive updates of the text field's formatted content.\nSOURCE: https://github.com/pointfreeco/swift-navigation/blob/main/Sources/UIKitNavigation/Documentation.docc/Extensions/UITextField.md#2025-04-20_snippet_2\n\nLANGUAGE: Swift\nCODE:\n```\nUIKit/UITextField/init(frame:attributedText:)\n```\n\n----------------------------------------\n\nTITLE: Creating SignIn View with Bound Focus State\nDESCRIPTION: Shows how to implement a SwiftUI view that synchronizes its @FocusState with the model's focus property using the bind modifier. Includes form fields for email and password with focus binding.\nSOURCE: https://github.com/pointfreeco/swift-navigation/blob/main/Sources/SwiftUINavigation/Documentation.docc/Articles/Bindings.md#2025-04-20_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nstruct SignInView: View {\n  @FocusState var focus: SignInModel.Field?\n  @ObservedObject var model: SignInModel\n\n  var body: some View {\n    Form {\n      TextField(\"Email\", text: self.$model.email)\n        .focused(self.$focus, equals: .email)\n      TextField(\"Password\", text: self.$model.password)\n        .focused(self.$focus, equals: .password)\n      Button(\"Sign in\") {\n        Task {\n          await self.model.signInButtonTapped()\n        }\n      }\n    }\n    // ⬇️ Replays changes of `model.focus` to `focus` and vice-versa.\n    .bind(self.$model.focus, to: self.$focus)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Binding UISlider to Observable Value in Swift\nDESCRIPTION: Binds a UISlider to an observable value. This method allows the slider to update its state based on changes in the bound value, enabling reactive programming patterns in UIKit.\nSOURCE: https://github.com/pointfreeco/swift-navigation/blob/main/Sources/UIKitNavigation/Documentation.docc/Extensions/UISlider.md#2025-04-20_snippet_1\n\nLANGUAGE: Swift\nCODE:\n```\nUIKit/UISlider/bind(value:)\n```\n\n----------------------------------------\n\nTITLE: Sheet Presentation with Identifiable Item\nDESCRIPTION: Sheet presentation implementation using item binding with explicit ID specification for non-Identifiable types.\nSOURCE: https://github.com/pointfreeco/swift-navigation/blob/main/Sources/SwiftUINavigation/Documentation.docc/Articles/SheetsPopoversCovers.md#2025-04-20_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nvar body: some View {\n  List {\n    // ...\n  }\n  .sheet(item: $destination, id: \\.self) { $number in\n    CounterView(number: $number)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Conditional Alert Actions Using Result Builder in Swift\nDESCRIPTION: Demonstrates how to use result builders to conditionally include different action buttons in an alert based on item state, showing different button text for locked items.\nSOURCE: https://github.com/pointfreeco/swift-navigation/blob/main/Sources/SwiftUINavigation/Documentation.docc/Articles/AlertsDialogs.md#2025-04-20_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\n} actions: {\n  if item.isLocked {\n    ButtonState(role: .destructive, action: .confirmDelete) {\n      TextState(\"Unlock and delete\")\n    }\n  } else {\n    ButtonState(role: .destructive, action: .confirmDelete) {\n      TextState(\"Delete\")\n    }\n  }\n  ButtonState(role: .cancel) {\n    TextState(\"Nevermind\")\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Enum-based Sheet Destination Definition\nDESCRIPTION: Definition of case-pathable enum for modeling multiple mutually exclusive sheet presentation destinations.\nSOURCE: https://github.com/pointfreeco/swift-navigation/blob/main/Sources/SwiftUINavigation/Documentation.docc/Articles/SheetsPopoversCovers.md#2025-04-20_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\n@State var destination: Destination?\n\n@CasePathable\nenum Destination {\n  case counter(Int)\n  // More destinations\n}\n```\n\n----------------------------------------\n\nTITLE: Sheet Presentation with Enum Case\nDESCRIPTION: Implementation of sheet presentation using case-pathable enum state with specific case binding.\nSOURCE: https://github.com/pointfreeco/swift-navigation/blob/main/Sources/SwiftUINavigation/Documentation.docc/Articles/SheetsPopoversCovers.md#2025-04-20_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\nvar body: some View {\n  List {\n    // ...\n  }\n  .sheet(item: $destination.counter, id: \\.self) { $number in\n    CounterView(number: $number)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Alert Functionality in Swift\nDESCRIPTION: Shows how to test alert presentation and interaction in unit tests, including verifying the alert title and testing the alert button action handling.\nSOURCE: https://github.com/pointfreeco/swift-navigation/blob/main/Sources/SwiftUINavigation/Documentation.docc/Articles/AlertsDialogs.md#2025-04-20_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\nfunc testDelete() {\n  let model = FeatureModel(/* ... */)\n\n  model.deleteButtonTapped()\n  XCTAssertEqual(model.alert?.title, TextState(\"Are you sure?\"))\n\n  model.alertButtonTapped(.confirmDelete)\n  // NB: Assert that deletion actually occurred.\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Alert Button Actions in Swift\nDESCRIPTION: Shows how to implement a handler for alert button actions that processes the selected action from the alert. Handles both the confirm delete case and nil case (cancel button).\nSOURCE: https://github.com/pointfreeco/swift-navigation/blob/main/Sources/SwiftUINavigation/Documentation.docc/Articles/AlertsDialogs.md#2025-04-20_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\nfunc alertButtonTapped(_ action: AlertAction?) {\n  switch action {\n  case .confirmDelete:\n    // NB: Perform deletion logic here\n  case nil:\n    // NB: Perform cancel button logic here\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Confirmation Dialog Model in Swift\nDESCRIPTION: Demonstrates how to implement a confirmation dialog using ConfirmationDialogState, similar to alerts but with dialog-specific parameters like title visibility.\nSOURCE: https://github.com/pointfreeco/swift-navigation/blob/main/Sources/SwiftUINavigation/Documentation.docc/Articles/AlertsDialogs.md#2025-04-20_snippet_8\n\nLANGUAGE: swift\nCODE:\n```\n@Observable\nclass FeatureModel {\n  var dialog: ConfirmationDialogState<DialogAction>?\n  enum DialogAction {\n    case confirmDelete\n  }\n\n  func deleteButtonTapped() {\n    dialog = ConfirmationDialogState(titleVisibility: .visible) {\n      TextState(\"Are you sure?\")\n    } actions: {\n      ButtonState(role: .destructive, action: .confirmDelete) {\n        TextState(\"Delete\")\n      }\n      ButtonState(role: .cancel) {\n        TextState(\"Nevermind\")\n      }\n    } message: {\n      TextState(\"Deleting this item cannot be undone.\")\n    }\n  }\n\n  func dialogButtonTapped(_ action: DialogAction?) {\n    switch action {\n    case .confirmDelete:\n      // NB: Perform deletion logic here\n    case nil:\n      // NB: Perform cancel button logic here\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: SwiftUI Navigation with Case-Pathable Enum\nDESCRIPTION: Implementation of navigation using SwiftUINavigation library with case-pathable enum bindings.\nSOURCE: https://github.com/pointfreeco/swift-navigation/blob/main/README.md#2025-04-20_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\nimport SwiftUINavigation \n// ...\n.sheet(item: $model.destination.addItem) { addItemModel in\n  AddItemView(model: addItemModel)\n}\n.alert(\"Delete?\", isPresented: Binding($model.destination.deleteItemAlert)) {\n  Button(\"Yes\", role: .destructive) { /* ... */ }\n  Button(\"No\", role: .cancel) {}\n}\n.navigationDestination(item: $model.destination.editItem) { editItemModel in\n  EditItemView(model: editItemModel)\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Swift Navigation with SwiftPM\nDESCRIPTION: Swift Package Manager dependency configuration for adding Swift Navigation to a project. Specifies the package URL and version requirement.\nSOURCE: https://github.com/pointfreeco/swift-navigation/blob/main/README.md#2025-04-20_snippet_9\n\nLANGUAGE: swift\nCODE:\n```\ndependencies: [\n  .package(url: \"https://github.com/pointfreeco/swift-navigation\", from: \"2.0.0\")\n]\n```\n\n----------------------------------------\n\nTITLE: Custom Tree-based Navigation Methods in UIViewController\nDESCRIPTION: Documents the custom tree-based navigation methods that allow for more flexible navigation control with custom present and dismiss behaviors.\nSOURCE: https://github.com/pointfreeco/swift-navigation/blob/main/Sources/UIKitNavigation/Documentation.docc/Extensions/UIViewController.md#2025-04-20_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nUIViewController/destination(isPresented:content:present:dismiss:)\nUIViewController/destination(item:content:present:dismiss:)\nUIViewController/destination(item:id:content:present:dismiss:)\n```\n\n----------------------------------------\n\nTITLE: SwiftUI Navigation Implementation with Traditional Optionals\nDESCRIPTION: Example showing traditional SwiftUI navigation modifiers using optional bindings.\nSOURCE: https://github.com/pointfreeco/swift-navigation/blob/main/README.md#2025-04-20_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\n.sheet(item: $model.addItem) { addItemModel in\n  AddItemView(model: addItemModel)\n}\n.alert(\"Delete?\", isPresented: $model.deleteItemAlertIsPresented) {\n  Button(\"Yes\", role: .destructive) { /* ... */ }\n  Button(\"No\", role: .cancel) {}\n}\n.navigationDestination(item: $model.editItem) { editItemModel in\n  EditItemModel(model: editItemModel)\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Optional Navigation State in SwiftUI\nDESCRIPTION: Defines a ContentView with optional state to represent whether a drill-down navigation should occur. The optional Int will be used to control navigation to a child view.\nSOURCE: https://github.com/pointfreeco/swift-navigation/blob/main/Sources/SwiftUINavigation/Documentation.docc/Articles/Navigation.md#2025-04-20_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nstruct ContentView: View {\n  @State var destination: Int?\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Reading ConfirmationDialogState Properties in Swift\nDESCRIPTION: Properties for accessing various components of the ConfirmationDialogState, including the dialog's ID, title, title visibility, message, and buttons.\nSOURCE: https://github.com/pointfreeco/swift-navigation/blob/main/Sources/SwiftNavigation/Documentation.docc/Extensions/ConfirmationDialogState.md#2025-04-20_snippet_1\n\nLANGUAGE: Swift\nCODE:\n```\nid\n```\n\nLANGUAGE: Swift\nCODE:\n```\ntitle\n```\n\nLANGUAGE: Swift\nCODE:\n```\ntitleVisibility\n```\n\nLANGUAGE: Swift\nCODE:\n```\nmessage\n```\n\nLANGUAGE: Swift\nCODE:\n```\nbuttons\n```\n\n----------------------------------------\n\nTITLE: Creating ConfirmationDialogState in Swift\nDESCRIPTION: Initializers for creating ConfirmationDialogState objects. These methods allow setting the title, actions, message, and title visibility for the dialog.\nSOURCE: https://github.com/pointfreeco/swift-navigation/blob/main/Sources/SwiftNavigation/Documentation.docc/Extensions/ConfirmationDialogState.md#2025-04-20_snippet_0\n\nLANGUAGE: Swift\nCODE:\n```\ninit(title:actions:message:)\n```\n\nLANGUAGE: Swift\nCODE:\n```\ninit(titleVisibility:title:actions:message:)\n```\n\n----------------------------------------\n\nTITLE: UIBindable Property Wrapper Interface\nDESCRIPTION: Interface definition showing the initialization methods and property accessors for the UIBindable property wrapper. This includes multiple initializer overloads and methods for accessing the wrapped and projected values.\nSOURCE: https://github.com/pointfreeco/swift-navigation/blob/main/Sources/SwiftNavigation/Documentation.docc/Extensions/UIBindable.md#2025-04-20_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\ninit(_:fileID:filePath:line:column:)-6gjp6\ninit(_:fileID:filePath:line:column:)-49wmd\ninit(wrappedValue:fileID:filePath:line:column:)-3t841\ninit(wrappedValue:fileID:filePath:line:column:)-20n7u\ninit(projectedValue:)\n\nwrappedValue\nprojectedValue\nsubscript(dynamicMember:)\n```\n\n----------------------------------------\n\nTITLE: Transforming ConfirmationDialogState in Swift\nDESCRIPTION: Methods for modifying or transforming ConfirmationDialogState objects. This includes mapping the dialog's content and working with SwiftUI Visibility.\nSOURCE: https://github.com/pointfreeco/swift-navigation/blob/main/Sources/SwiftNavigation/Documentation.docc/Extensions/ConfirmationDialogState.md#2025-04-20_snippet_2\n\nLANGUAGE: Swift\nCODE:\n```\nmap(_:)\n```\n\nLANGUAGE: Swift\nCODE:\n```\nSwiftUI/Visibility\n```\n\n----------------------------------------\n\nTITLE: Basic Fullscreen Cover Implementation\nDESCRIPTION: Implementation of fullscreen cover presentation using optional state with item binding.\nSOURCE: https://github.com/pointfreeco/swift-navigation/blob/main/Sources/SwiftUINavigation/Documentation.docc/Articles/SheetsPopoversCovers.md#2025-04-20_snippet_7\n\nLANGUAGE: swift\nCODE:\n```\nstruct ContentView: View {\n  @State var destination: Int?\n\n  var body: some View {\n    List {\n      // ...\n    }\n    .fullscreenCover(item: $destination, id: \\.self) { $number in\n      CounterView(number: $number)\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Enum-based Popover Implementation\nDESCRIPTION: Implementation of popover presentation using case-pathable enum state for multiple destinations.\nSOURCE: https://github.com/pointfreeco/swift-navigation/blob/main/Sources/SwiftUINavigation/Documentation.docc/Articles/SheetsPopoversCovers.md#2025-04-20_snippet_6\n\nLANGUAGE: swift\nCODE:\n```\nstruct ContentView: View {\n  @State var destination: Destination?\n\n  @CasePathable\n  enum Destination {\n    case counter(Int)\n    // More destinations\n  }\n\n  var body: some View {\n    List {\n      // ...\n    }\n    .popover(item: $destination.counter, id: \\.self) { $number in\n      CounterView(number: $number)\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Popover Implementation\nDESCRIPTION: Implementation of popover presentation using optional state with item binding.\nSOURCE: https://github.com/pointfreeco/swift-navigation/blob/main/Sources/SwiftUINavigation/Documentation.docc/Articles/SheetsPopoversCovers.md#2025-04-20_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\nstruct ContentView: View {\n  @State var destination: Int?\n\n  var body: some View {\n    List {\n      // ...\n    }\n    .popover(item: $destination, id: \\.self) { $number in\n      CounterView(number: $number)\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Enum-based Fullscreen Cover Implementation\nDESCRIPTION: Implementation of fullscreen cover presentation using case-pathable enum state for multiple destinations.\nSOURCE: https://github.com/pointfreeco/swift-navigation/blob/main/Sources/SwiftUINavigation/Documentation.docc/Articles/SheetsPopoversCovers.md#2025-04-20_snippet_8\n\nLANGUAGE: swift\nCODE:\n```\nstruct ContentView: View {\n  @State var destination: Destination?\n\n  @CasePathable\n  enum Destination {\n    case counter(Int)\n    // More destinations\n  }\n\n  var body: some View {\n    List {\n      // ...\n    }\n    .fullscreenCover(item: $destination.counter, id: \\.self) { $number in\n      CounterView(number: $number)\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Alert Navigation in Swift\nDESCRIPTION: Demonstrates how to handle alert presentation using state-driven navigation. Shows a simple error alert implementation using bind syntax.\nSOURCE: https://github.com/pointfreeco/swift-navigation/blob/main/README.md#2025-04-20_snippet_8\n\nLANGUAGE: swift\nCODE:\n```\nalert(isPresented: $model.isShowingErrorAlert) {\n  \"Something went wrong\"\n}\n```\n\n----------------------------------------\n\nTITLE: Observing with Isolation in SwiftNavigation (Swift)\nDESCRIPTION: This function observes a closure with isolation. It is part of the SwiftNavigation framework and is likely used for managing concurrent or isolated observations.\nSOURCE: https://github.com/pointfreeco/swift-navigation/blob/main/Sources/SwiftNavigation/Documentation.docc/Extensions/Observe.md#2025-04-20_snippet_0\n\nLANGUAGE: Swift\nCODE:\n```\nobserve(isolation:_:)-9xf99\n```\n\n----------------------------------------\n\nTITLE: UIKit Navigation with State-Driven Approach\nDESCRIPTION: Implementation of state-driven navigation in UIKit using UIKitNavigation library.\nSOURCE: https://github.com/pointfreeco/swift-navigation/blob/main/README.md#2025-04-20_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\nimport UIKitNavigation \n\nclass FeatureViewController: UIViewController {\n  @UIBindable var model: FeatureModel\n\n  func viewDidLoad() {\n    super.viewDidLoad()\n\n    // Set up view hierarchy\n\n    present(item: $model.destination.addItem) { addItemModel in\n      AddItemViewController(model: addItemModel)\n    }\n    present(isPresented: UIBinding($model.destination.deleteItemAlert)) {\n      let alert = UIAlertController(title: \"Delete?\", message: message, preferredStyle: .alert)\n      alert.addAction(UIAlertAction(title: \"Yes\", style: .destructive))\n      alert.addAction(UIAlertAction(title: \"No\", style: .cancel))\n      return alert\n    }\n    navigationDestination(item: $model.destination.editItem) { editItemModel in\n      EditItemViewController(model: editItemModel)\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Observing Model Changes in WebAssembly with DOM Updates\nDESCRIPTION: This example demonstrates how to use the observe function to track changes to a model and update the DOM accordingly in a WebAssembly environment. It creates a span element, appends it to the document body, and updates its text content whenever the model changes.\nSOURCE: https://github.com/pointfreeco/swift-navigation/blob/main/Sources/SwiftNavigation/Documentation.docc/Articles/CrossPlatform.md#2025-04-20_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nimport JavaScriptKit\n\nvar countLabel = document.createElement(\"span\")\n_ = document.body.appendChild(countLabel)\n\nlet token = observe {\n  countLabel.innerText = .string(\"Count: \\(model.count)\")\n}\n```\n\n----------------------------------------\n\nTITLE: Binding UITextField to Observable Attributed Text in Swift\nDESCRIPTION: Binds a UITextField to an observable attributed text value, enabling two-way synchronization between the text field's formatted content and the observable.\nSOURCE: https://github.com/pointfreeco/swift-navigation/blob/main/Sources/UIKitNavigation/Documentation.docc/Extensions/UITextField.md#2025-04-20_snippet_3\n\nLANGUAGE: Swift\nCODE:\n```\nUIKit/UITextField/bind(attributedText:)\n```\n\n----------------------------------------\n\nTITLE: Using Observation for Automatic UI Updates in UIKit\nDESCRIPTION: Shows how to use the observe method from UIKitNavigation to automatically track state changes and update the UI when observed properties change, similar to SwiftUI's reactive UI updates.\nSOURCE: https://github.com/pointfreeco/swift-navigation/blob/main/Sources/UIKitNavigation/Documentation.docc/UIKitNavigation.md#2025-04-20_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\nobserve { [weak self] in\n  guard let self else { return }\n  \n  countLabel.text = \"Count: \\(model.count)\"\n  factLabel.isHidden = model.fact == nil \n  if let fact = model.fact {\n    factLabel.text = fact\n  }\n  activityIndicator.isHidden = !model.isLoadingFact\n}\n```\n\n----------------------------------------\n\nTITLE: Binding UITextField to Specific Observable Focus State in Swift\nDESCRIPTION: Binds a UITextField's focus state to a specific value of an observable, enabling focus control based on the observable matching a certain condition.\nSOURCE: https://github.com/pointfreeco/swift-navigation/blob/main/Sources/UIKitNavigation/Documentation.docc/Extensions/UITextField.md#2025-04-20_snippet_5\n\nLANGUAGE: Swift\nCODE:\n```\nUIKit/UITextField/bind(focus:equals:)\n```\n\n----------------------------------------\n\nTITLE: Binding UITextField to Observable Focus State in Swift\nDESCRIPTION: Binds a UITextField's focus state to an observable value, allowing reactive updates of the text field's focus based on the observable's value.\nSOURCE: https://github.com/pointfreeco/swift-navigation/blob/main/Sources/UIKitNavigation/Documentation.docc/Extensions/UITextField.md#2025-04-20_snippet_4\n\nLANGUAGE: Swift\nCODE:\n```\nUIKit/UITextField/bind(focus:)\n```\n\n----------------------------------------\n\nTITLE: Observing DOM Updates with Swift Navigation in WebAssembly\nDESCRIPTION: Example showing how to use the observe() function to update DOM elements based on model changes in a WebAssembly context. Creates and updates a count label in the document body.\nSOURCE: https://github.com/pointfreeco/swift-navigation/blob/main/README.md#2025-04-20_snippet_7\n\nLANGUAGE: swift\nCODE:\n```\nimport JavaScriptKit\n\nvar countLabel = document.createElement(\"span\")\n_ = document.body.appendChild(countLabel)\n\nlet token = observe {\n  countLabel.innerText = .string(\"Count: \\(model.count)\")\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Feature Model with Traditional Optional Navigation\nDESCRIPTION: Example of modeling navigation state using multiple optional properties, which can lead to invalid states.\nSOURCE: https://github.com/pointfreeco/swift-navigation/blob/main/README.md#2025-04-20_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\n@Observable\nclass FeatureModel {\n  var addItem: AddItemModel?\n  var deleteItemAlertIsPresented: Bool\n  var editItem: EditItemModel?\n}\n```\n\n----------------------------------------\n\nTITLE: UIKit Traditional Navigation Example\nDESCRIPTION: Example of traditional UIKit navigation using fire-and-forget presentation.\nSOURCE: https://github.com/pointfreeco/swift-navigation/blob/main/README.md#2025-04-20_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\nlet button = UIButton(type: .system, primaryAction: UIAction { [weak self] _ in\n  present(SettingsViewController(), animated: true)\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing UITextField with Observable Text in Swift\nDESCRIPTION: Creates a UITextField with an initial frame and binds it to an observable text value. This allows for reactive updates of the text field's content.\nSOURCE: https://github.com/pointfreeco/swift-navigation/blob/main/Sources/UIKitNavigation/Documentation.docc/Extensions/UITextField.md#2025-04-20_snippet_0\n\nLANGUAGE: Swift\nCODE:\n```\nUIKit/UITextField/init(frame:text:)\n```\n\n----------------------------------------\n\nTITLE: Implementing Alert Navigation with State Binding\nDESCRIPTION: This snippet shows how to create an alert system driven by application state. It uses a binding to the model's isShowingErrorAlert property to display an error message when needed, demonstrating a simple navigation pattern that can work across platforms.\nSOURCE: https://github.com/pointfreeco/swift-navigation/blob/main/Sources/SwiftNavigation/Documentation.docc/Articles/CrossPlatform.md#2025-04-20_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nalert(isPresented: $model.isShowingErrorAlert) {\n  \"Something went wrong\"\n}\n```\n\n----------------------------------------\n\nTITLE: Improved Feature Model with Enum-based Navigation\nDESCRIPTION: Enhanced implementation using an enum to model navigation state, ensuring only one destination can be active.\nSOURCE: https://github.com/pointfreeco/swift-navigation/blob/main/README.md#2025-04-20_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\n@Observable\nclass FeatureModel {\n  var destination: Destination?\n\n  enum Destination {\n    case addItem(AddItemModel)\n    case deleteItemAlert\n    case editItem(EditItemModel)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Optional Sheet State in SwiftUI\nDESCRIPTION: Basic setup showing how to define optional state for sheet presentation in a SwiftUI view.\nSOURCE: https://github.com/pointfreeco/swift-navigation/blob/main/Sources/SwiftUINavigation/Documentation.docc/Articles/SheetsPopoversCovers.md#2025-04-20_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nstruct ContentView: View {\n  @State var destination: Int?\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Importing AppKitNavigation Module in Swift\nDESCRIPTION: This code snippet demonstrates how to import the AppKitNavigation module in a Swift file. It's typically used at the top of Swift files that need to use the AppKitNavigation functionality.\nSOURCE: https://github.com/pointfreeco/swift-navigation/blob/main/Sources/AppKitNavigation/Documentation.docc/AppKitNavigation.md#2025-04-20_snippet_0\n\nLANGUAGE: Swift\nCODE:\n```\nimport AppKitNavigation\n```\n\n----------------------------------------\n\nTITLE: Binding UITextField to Observable Text Selection in Swift\nDESCRIPTION: Binds a UITextField's text selection to an observable value, allowing reactive updates of the selected text range based on the observable's value.\nSOURCE: https://github.com/pointfreeco/swift-navigation/blob/main/Sources/UIKitNavigation/Documentation.docc/Extensions/UITextField.md#2025-04-20_snippet_6\n\nLANGUAGE: Swift\nCODE:\n```\nUIKit/UITextField/bind(selection:)\n```\n\n----------------------------------------\n\nTITLE: Stack-based Navigation Methods in UIViewController\nDESCRIPTION: Details the stack-based navigation methods including NavigationStackController implementation and methods for pushing values onto the navigation stack.\nSOURCE: https://github.com/pointfreeco/swift-navigation/blob/main/Sources/UIKitNavigation/Documentation.docc/Extensions/UIViewController.md#2025-04-20_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nNavigationStackController\nUIViewController/navigationDestination(for:destination:)\nUIViewController/push(value:)\n```\n\n----------------------------------------\n\nTITLE: Tree-based Navigation Methods in UIViewController\nDESCRIPTION: Lists the available methods for tree-based navigation in UIViewController, including present and navigationDestination methods with various parameter options.\nSOURCE: https://github.com/pointfreeco/swift-navigation/blob/main/Sources/UIKitNavigation/Documentation.docc/Extensions/UIViewController.md#2025-04-20_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nUIViewController/present(isPresented:onDismiss:content:)\nUIViewController/present(item:onDismiss:content:)-4m7m3\nUIViewController/present(item:onDismiss:content:)-4x5io\nUIViewController/present(item:id:onDismiss:content:)-4xafn\nUIViewController/present(item:id:onDismiss:content:)-9fu88\nUIViewController/navigationDestination(isPresented:content:)\nUIViewController/navigationDestination(item:content:)-1gks3\nUIViewController/navigationDestination(item:content:)-5auro\n```\n\n----------------------------------------\n\nTITLE: Observing with Data Attachment in SwiftNavigation (Swift)\nDESCRIPTION: This function observes a closure and attaches data to the observation. It is part of the SwiftNavigation framework and is used for associating additional information with observations.\nSOURCE: https://github.com/pointfreeco/swift-navigation/blob/main/Sources/SwiftNavigation/Documentation.docc/Extensions/Observe.md#2025-04-20_snippet_1\n\nLANGUAGE: Swift\nCODE:\n```\nobserve(isolation:_:)-34d7t\n```\n\n----------------------------------------\n\nTITLE: Implementing Observable SignIn Model with Focus State\nDESCRIPTION: Demonstrates how to implement a sign-in model class that manages focus state using a regular variable instead of @FocusState. The model handles sign-in logic and updates focus state when API calls fail.\nSOURCE: https://github.com/pointfreeco/swift-navigation/blob/main/Sources/SwiftUINavigation/Documentation.docc/Articles/Bindings.md#2025-04-20_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\n@Observable\nclass SignInModel {\n  var email: String\n  var password: String\n  var focus: Field?\n  enum Field { case email, password }\n\n  func signInButtonTapped() async throws {\n    do {\n      try await self.apiClient.signIn(self.email, self.password)\n    } catch {\n      self.focus = .email\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing UISlider with Frame and Value in Swift\nDESCRIPTION: Initializes a UISlider with a specified frame and initial value. This method is part of the UISlider class in UIKit and is used for creating a slider with observable state binding.\nSOURCE: https://github.com/pointfreeco/swift-navigation/blob/main/Sources/UIKitNavigation/Documentation.docc/Extensions/UISlider.md#2025-04-20_snippet_0\n\nLANGUAGE: Swift\nCODE:\n```\nUIKit/UISlider/init(frame:value:)\n```"
  }
]