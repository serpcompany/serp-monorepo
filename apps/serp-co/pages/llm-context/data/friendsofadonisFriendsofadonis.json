[
  {
    "owner": "friendsofadonis",
    "repo": "friendsofadonis",
    "content": "TITLE: Installing Shopkeeper Package in AdonisJS\nDESCRIPTION: Command to install the Shopkeeper package using the AdonisJS ace CLI tool. This adds the package to your project and initiates the setup process.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/shopkeeper/getting-started.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnode ace add @foadonis/shopkeeper\n```\n\n----------------------------------------\n\nTITLE: Creating Subscription with Multiple Products in Adonis.js\nDESCRIPTION: Demonstrates how to create a new subscription with multiple products using the newSubscription method in an Adonis.js route handler. It shows passing an array of price IDs and handling the payment method.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/shopkeeper/subscriptions/page.mdx#2025-04-19_snippet_30\n\nLANGUAGE: typescript\nCODE:\n```\nimport router from '@adonisjs/core/services/router'\n\nrouter.get('/user/subscribe', async ({ auth, request }) => {\n  const user = auth.getUserOrFail()\n  const paymentMethodId = request.get('paymentMethodId')\n\n  await user.newSubscription('default', ['price_monthly', 'price_chat']).create(paymentMethodId)\n})\n```\n\n----------------------------------------\n\nTITLE: Changing Subscription Price in TypeScript\nDESCRIPTION: Demonstrates how to swap a customer's subscription to a new price using the 'swap' method.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/shopkeeper/subscriptions/page.mdx#2025-04-19_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nconst user = await User.find(1)\nconst subscription = await user.subscription('default')\n\nawait subscription.swap('price_yearly')\n```\n\n----------------------------------------\n\nTITLE: Incrementing and Decrementing Subscription Quantity in TypeScript\nDESCRIPTION: Shows how to increase or decrease the quantity of a subscription using various methods.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/shopkeeper/subscriptions/page.mdx#2025-04-19_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\nconst user = await User.find(1)\nconst subscription = await user.subscription('default')\n\nawait subscription.incrementQuantity()\nawait subscription.incrementQuantity(5)\n\nawait subscription.decrementQuantity()\nawait subscription.decrementQuantity(5)\n```\n\n----------------------------------------\n\nTITLE: Defining OpenAPI Operations and Responses for Adonis Controller in TypeScript\nDESCRIPTION: This snippet shows how to use @ApiOperation and @ApiResponse decorators from @foadonis/openapi to define OpenAPI operations and responses for an Adonis controller. It includes examples for list and create operations with their corresponding response types.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/openapi/index.mdx#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// @noErrors\nimport { ApiOperation, ApiResponse } from '@foadonis/openapi/decorators'\nimport Post from '#models/post'\n\nexport default class PostsController {\n  @ApiOperation({ summary: 'List all posts' })\n  @ApiResponse({ type: [Post] })\n  index() {\n    return Post.query()\n  }\n\n  @ApiOperation({ summary: 'Create a new Post' })\n  @ApiResponse({ type: Post })\n  create() {\n    return Post.create()\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Subscription Cancellation Methods\nDESCRIPTION: Various methods for canceling subscriptions including immediate cancellation and scheduled cancellation.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/shopkeeper/subscriptions/page.mdx#2025-04-19_snippet_57\n\nLANGUAGE: typescript\nCODE:\n```\nconst subscription = await user.subscription('default')\nawait user.cancel()\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst subscription = await user.subscription('default')\nawait subscription.cancelNow()\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst subscription = await user.subscription('default')\nawait subscription.cancelNowAndInvoice()\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst subscription = await user.subscription('default')\nawait subscription.cancelAt(DateTime.now().plus({ days: 5 }))\n```\n\n----------------------------------------\n\nTITLE: Creating Setup Intent for Subscription Payment Methods in TypeScript\nDESCRIPTION: Creates a Setup Intent to securely gather customer payment method details for future subscriptions. This code demonstrates how to generate the intent from a route handler and pass it to the view.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/shopkeeper/payment-methods.mdx#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nrouter.get('/update-payment-method', ({ auth, view }) => {\n  const user = auth.getUserOrFail()\n\n  return view.render('pages/update-payment-method', {\n    intent: await user.createSetupIntent(),\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Swapping Price for Specific Subscription Type in Adonis.js\nDESCRIPTION: Shows how to swap the price for a specific subscription type using the swap method on the subscription object in Adonis.js.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/shopkeeper/subscriptions/page.mdx#2025-04-19_snippet_44\n\nLANGUAGE: typescript\nCODE:\n```\nawait user.subscription('swimming').swap('price_swimming_monthly')\n```\n\n----------------------------------------\n\nTITLE: Configuring Searchable Model in TypeScript\nDESCRIPTION: Example of implementing the Searchable mixin in a Lucid model to enable automatic synchronization with search engines. The code shows how to create a Post model with searchable capabilities.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/magnify/getting_started.mdx#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { compose } from \"@adonisjs/core/helpers\";\nimport { BaseModel, column } from \"@adonisjs/lucid/orm\";\nimport { Searchable } from \"@foadonis/magnify\";\n\nexport default class Post extends compose(BaseModel, Searchable) {\n  @column({ isPrimary: true })\n  declare id: string;\n\n  @column()\n  declare title: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Resuming Cancelled Subscriptions\nDESCRIPTION: Method for resuming a cancelled subscription during the grace period.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/shopkeeper/subscriptions/page.mdx#2025-04-19_snippet_58\n\nLANGUAGE: typescript\nCODE:\n```\nconst subscription = await user.subscription('default')\n\nawait subscription.resume()\n```\n\n----------------------------------------\n\nTITLE: Securing GraphQL Queries with @Authorized Decorator in TypeScript\nDESCRIPTION: Demonstrates how to use the @Authorized decorator to protect GraphQL queries and mutations so only authenticated users can access them. This basic implementation secures GraphQL operations without specifying particular abilities.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/graphql/authorization.mdx#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport Recipe from '#models/recipe'\nimport { Resolver, Query, Mutation, Authorized } from '@foadonis/graphql'\n\n@Resolver(Recipe)\nclass RecipeResolver {\n  @Query(() => [Recipe])\n  @Authorized() // [!code highlight]\n  recipes() {\n    // ...your logic\n  }\n\n  @Mutation(() => [Recipe])\n  @Authorized() // [!code highlight]\n  createRecipe() {\n    // ...your logic\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Subscription Middleware in Adonis.js\nDESCRIPTION: Shows how to create a middleware that checks subscription status and redirects non-subscribed users.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/shopkeeper/subscriptions/page.mdx#2025-04-19_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { HttpContext } from '@adonisjs/core/http'\nimport { NextFn } from '@adonisjs/core/types/http'\n\nexport default class SubscribedMiddleware {\n  async handle({ auth, response }: HttpContext, next: NextFn) {\n    const user = auth.getUser()\n    const subscribed = await user?.subscribed()\n\n    if (!subscribed) {\n      response.redirect().toRoute('home')\n    } else {\n      await next()\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Searchable Post Model in TypeScript for AdonisJS\nDESCRIPTION: This snippet shows how to create a Post model that implements the Searchable interface from Magnify. It defines a basic structure with id and title columns, enabling full-text search capabilities for the model.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/magnify/index.mdx#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { compose } from \"@adonisjs/core/helpers\";\nimport { BaseModel, column } from \"@adonisjs/lucid/orm\";\nimport { Searchable } from \"@foadonis/magnify\";\n\nexport default class Post extends compose(BaseModel, Searchable) {\n  @column({ isPrimary: true })\n  declare id: string;\n\n  @column()\n  declare title: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Payment Intent for Client-Side Processing\nDESCRIPTION: Example of creating a Stripe payment intent that returns a client secret for frontend processing. This creates a payment intent and returns the client secret to complete the payment in the browser.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/shopkeeper/single-charges.mdx#2025-04-19_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nrouter.post('/pay', async ({ request, auth }) => {\n  const user = auth.getUserOrFail()\n  const amount = request.get('amount')\n\n  const payment = await user.pay(amount)\n\n  return payment.clientSecret()\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Schema with Class and ApiProperty Decorators in TypeScript\nDESCRIPTION: Creates a Post class schema with id and title properties using @ApiProperty decorator. The decorator automatically infers the property types from TypeScript types and adds them to the generated OpenAPI schema.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/openapi/types-and-parameters.mdx#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ApiProperty } from '@foadonis/openapi/decorators'\n\nexport class Post {\n  @ApiProperty()\n  declare id: number\n\n  @ApiProperty()\n  declare title: string\n}\n```\n\n----------------------------------------\n\nTITLE: Enhancing Recipe Model with GraphQL ObjectType Decorators\nDESCRIPTION: Extending the Recipe model with GraphQL ObjectType and Field decorators to make it compatible with the GraphQL schema.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/graphql/getting-started.mdx#2025-04-19_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BaseModel, column } from '@adonisjs/lucid/orm'\nimport { ObjectType, Field } from '@foadonis/graphql/decorators' // [!code ++]\nimport { DateTime } from 'luxon'\n\n@ObjectType() // [!code ++]\nexport default class Recipe extends BaseModel {\n  @column({ isPrimary: true })\n  @Field((type) => ID) // [!code ++]\n  declare id: string\n\n  @column()\n  @Field() // [!code ++]\n  declare title: string\n\n  @column()\n  @Field({ nullable: true }) // [!code ++]\n  declare description: string | null\n\n  @column()\n  @Field(() => [String]) // [!code ++]\n  declare ingredients: string[]\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Authenticated User via Context in GraphQL Resolvers\nDESCRIPTION: Shows how to access the authenticated user through the HTTP context in a GraphQL resolver. This approach provides more flexibility as it allows for handling both authenticated and guest users.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/graphql/authorization.mdx#2025-04-19_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport Recipe from '#models/recipe'\nimport { HttpContext } from '@adonisjs/core/http'\nimport { Resolver, Query, Ctx } from '@foadonis/graphql'\n\n@Resolver(Recipe)\nclass RecipeResolver {\n  @Query(() => [Recipe])\n  recipes(@Ctx() ctx: HttpContext) {\n    const user = ctx.auth.getUserOrFail()\n    // ...your logic\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Subscription Checkout Implementation\nDESCRIPTION: Demonstrates how to implement subscription-based checkout with custom success and cancel URLs.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/shopkeeper/checkout.mdx#2025-04-19_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nrouter.get('/subscription-checkout', ({ response, auth }) => {\n  const user = auth.getUserOrFail()\n\n  const checkout = await user.newSubscription('default', 'price_monthly').checkout({\n    success_url: route('checkout.success'),\n    cancel_url: route('checkout.cancel'),\n  })\n\n  response.redirect().status(303).toPath(checkout.session.url)\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Metered Subscription with Stripe Checkout in Adonis.js\nDESCRIPTION: Demonstrates how to create a metered subscription using Stripe Checkout in an Adonis.js route handler. This sets up a checkout session for a metered subscription.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/shopkeeper/subscriptions/page.mdx#2025-04-19_snippet_47\n\nLANGUAGE: typescript\nCODE:\n```\nimport router from '@adonisjs/core/services/router'\n\nrouter.get('/user/subscribe', async ({ auth, request, view }) => {\n  const user = auth.getUserOrFail()\n  const paymentMethodId = request.get('paymentMethodId')\n\n  const checkout = await user\n    .newSubscription()\n    .meteredPrice('price_metered')\n    .checkout(paymentMethodId)\n\n  return view.render('pages/checkout', {\n    checkout,\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Stripe Checkout Session with Adonis Shopkeeper in TypeScript\nDESCRIPTION: This code snippet demonstrates how to create a Stripe checkout session using Adonis Shopkeeper. It shows the process of initiating a new subscription with a specific price and quantity for an authenticated user.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/shopkeeper/index.mdx#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport class BillingController {\n\n  async checkout({ auth, request, view }: HttpContext) {\n    const user = auth.getUserOrFail()\n    \n    const checkout = await user\n      .newSubscription()\n      .price('price_tshirt')\n      .quantity(5)\n      .checkout()\n\n    return view.render('pages/checkout', {\n      checkout\n    })\n  }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Trial Period Subscription Checkout\nDESCRIPTION: Implements subscription checkout with trial period configuration.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/shopkeeper/checkout.mdx#2025-04-19_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst checkout = await user\n  .newSubscription('default', 'price_monthly')\n  .trialDays(3)\n  .checkout()\n```\n\n----------------------------------------\n\nTITLE: Defining OpenAPI Properties for Adonis Model in TypeScript\nDESCRIPTION: This snippet demonstrates how to use @ApiProperty decorators from @foadonis/openapi to define OpenAPI properties for an Adonis model class. It shows how to declare required and optional properties with their types.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/openapi/index.mdx#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ApiProperty } from '@foadonis/openapi/decorators'\n\nexport default class Post {\n  @ApiProperty()\n  declare id: number\n\n  @ApiProperty()\n  declare title: string\n\n  @ApiProperty({ required: false, type: String })\n  declare content?: string\n}\n```\n\n----------------------------------------\n\nTITLE: Reporting Usage for Metered Subscription in Adonis.js\nDESCRIPTION: Shows how to report usage for a metered subscription using the reportUsage method in Adonis.js. This increments the usage count for billing purposes.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/shopkeeper/subscriptions/page.mdx#2025-04-19_snippet_48\n\nLANGUAGE: typescript\nCODE:\n```\nawait user.subscription().reportUsage()\n```\n\n----------------------------------------\n\nTITLE: Creating HTTP Middleware with Decorator Metadata in AdonisJS\nDESCRIPTION: This snippet demonstrates how to create an HTTP middleware that reads decorator metadata. The middleware checks if the route handler has the 'authorize' decorator and validates if the user has the required abilities.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/graphql/(advanced)/custom-decorators.mdx#2025-04-19_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { HttpContext } from '@adonisjs/core/http'\nimport { NextFn } from '@adonisjs/core/types/http'\nimport { DecoratorMetadata } from '@adonisjs/core/types'\n\nexport default class AuthorizationMiddleware {\n  async handle(\n    ctx: HttpContext,\n    next: NextFn,\n  ) {\n    /**\n     * Get the handler method for the current request\n     */\n    const handler = ctx.route?.meta.resolvedHandler?.reference\n    if (!handler) {\n      return next()\n    }\n\n    /**\n     * Get the abilities defined using the @authorize decorator\n     */\n    const requiredAbilities = DecoratorMetadata.get(\n      'authorize',\n      { target: handler.controller, method: handler.method }\n    )\n\n    /**\n     * Allow request to continue when no abilities are defined\n     */\n    if (!requiredAbilities) {\n      return next()\n    }\n\n    /**\n     * Otherwise check if the user is logged in and has\n     * the required abilities\n     */\n    const hasAbilities = true /* replace with appropriate check */\n    if (!hasAbilities) {\n      return ctx.response.forbidden('Unauthorized access')\n    }\n\n    return next()\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Authenticated User with @CurrentUser Decorator\nDESCRIPTION: Demonstrates how to access the currently authenticated user in a GraphQL resolver using the @CurrentUser decorator. This approach automatically ensures the operation is only available to authenticated users.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/graphql/authorization.mdx#2025-04-19_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport Recipe from '#models/recipe'\nimport { Resolver, Query, CurrentUser } from '@foadonis/graphql'\n\n@Resolver(Recipe)\nclass RecipeResolver {\n  @Query(() => [Recipe])\n  recipes(@CurrentUser() user: User) {\n    // ...your logic\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing GraphQL Recipe Resolver with CRUD Operations\nDESCRIPTION: Creating a GraphQL resolver class for Recipe with query and mutation methods that handle fetching, creating, and removing recipes.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/graphql/getting-started.mdx#2025-04-19_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport Recipe from '#models/recipe'\nimport { Arg, Args, Int, Mutation, Query, Resolver } from 'type-graphql'\n\n@Resolver(Recipe)\nexport default class RecipeResolver {\n  @Query(() => Recipe)\n  recipe(@Arg('id') id: number) {\n    return Recipe.findOrFail(id)\n  }\n\n  @Query(() => [Recipe])\n  recipes(@Args() { page, perPage }: RecipeArgs) {\n    return Recipe.query().paginate(page, perPage)\n  }\n\n  @Mutation(() => Recipe)\n  addRecipe(@Arg('newRecipeData') newRecipeData: NewRecipeInput) {\n    return Recipe.create(newRecipeData)\n  }\n\n  @Mutation(() => Boolean)\n  async removeRecipe(@Arg('id') id: number) {\n    const recipe = await Recipe.find(id)\n\n    if (!recipe) {\n      return false\n    }\n\n    await recipe.delete()\n    return true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Payment Intent with Specific Payment Methods\nDESCRIPTION: Example of creating a payment intent that only allows specific payment methods. This restricts the payment options to only those specified in the array.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/shopkeeper/single-charges.mdx#2025-04-19_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nrouter.post('/pay', async ({ request, auth }) => {\n  const user = auth.getUserOrFail()\n  const amount = request.get('amount')\n\n  const payment = await user.pay(amount, ['card', 'bancontact'])\n\n  return payment.clientSecret()\n})\n```\n\n----------------------------------------\n\nTITLE: Attaching Middlewares to Resolver Method in TypeScript for AdonisJS GraphQL\nDESCRIPTION: This code snippet demonstrates how to attach middlewares to a specific resolver method using the @UseMiddleware decorator in AdonisJS GraphQL.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/graphql/middlewares.mdx#2025-04-19_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Resolver, UseMiddleware, Query } from '@foadonis/graphql'\nimport PerformanceLoggerMiddleware from '#graphql/middlewares/performance_logger_middleware'\nimport AccessLoggerMiddleware from '#graphql/middlewares/access_logger_middleware'\n\n@Resolver()\nexport default class RecipeResolver {\n  @UseMiddleware(PerformanceLoggerMiddleware, AccessLoggerMiddleware)\n  @Query()\n  recipe() {}\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Stripe Checkout Redirect in AdonisJS\nDESCRIPTION: Route handler for redirecting users to the Stripe Checkout page. This basic implementation authenticates the user and redirects them to a Stripe Checkout session for a specific price.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/shopkeeper/getting-started.mdx#2025-04-19_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nrouter.get('/checkout', ({ auth }) => {\n  const user = await auth.getUserOrFail()\n  const checkout = await user.checkout('price_xxxxxxx')\n\n  response.redirect(303).toPath(checkout.session.url)\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Subscription After Generic Trial in AdonisJS\nDESCRIPTION: Shows how to create an actual subscription for a user after they've been on a generic trial. This uses the standard 'newSubscription' method to transition from trial to paid subscription.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/shopkeeper/subscriptions/subscription-trials.mdx#2025-04-19_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nawait user.newSubscription('default', 'price_monthly').create(paymentMethod)\n```\n\n----------------------------------------\n\nTITLE: Field-Level Authorization in GraphQL Object Types\nDESCRIPTION: Shows how to apply the @Authorized decorator to individual fields in a GraphQL object type. This example protects the fullName field for authenticated users and email field for admin users only.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/graphql/authorization.mdx#2025-04-19_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ObjectType, Authorized } from '@foadonis/graphql'\nimport abilities from '#abilities/main'\n\n@ObjectType()\nexport default class User {\n  @Field()\n  declare id: string\n\n  @Field()\n  @Authorized()\n  declare fullName: string\n\n  @Field()\n  @Authorized(abilities.isAdmin)\n  declare email: string\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying Subscription to Specific Product in TypeScript\nDESCRIPTION: Shows how to check if a user is subscribed to a particular product using the 'subscribedToProduct' method.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/shopkeeper/subscriptions/page.mdx#2025-04-19_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nif (await user.subscribedToProduct('prod_premium', 'default'))\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Installing OpenAPI package for AdonisJS\nDESCRIPTION: Command to install and configure the OpenAPI package using the AdonisJS CLI.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/openapi/getting-started.mdx#2025-04-19_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnode ace add @foadonis/openapi\n```\n\n----------------------------------------\n\nTITLE: Syncing Customer Data with Stripe in TypeScript\nDESCRIPTION: Illustrates how to set up automatic syncing of customer data with Stripe using an event listener.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/shopkeeper/customers.mdx#2025-04-19_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BaseModel, afterUpdate } from '@adonisjs/lucid/orm'\n\nexport default class User extends compose(BaseModel, Billable) {\n  @afterUpdate()\n  static synchWithStripe(user: User) {\n    user.syncStripeCustomerDetails()\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding New Price to Existing Subscription in Adonis.js\nDESCRIPTION: Demonstrates how to add a new price to an existing subscription using the addPrice method. This will bill the customer for the new price on their next billing cycle.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/shopkeeper/subscriptions/page.mdx#2025-04-19_snippet_32\n\nLANGUAGE: typescript\nCODE:\n```\nawait user.newSubscription('default').addPrice('price_chat').create(paymentMethodId)\n```\n\n----------------------------------------\n\nTITLE: Registering and Using the Search Engine in AdonisJS\nDESCRIPTION: This example demonstrates how to register a custom search engine service in an AdonisJS application and use it in a controller. It shows dependency injection and practical usage of the search engine.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/magnify/(advanced)/custom-search-engine.mdx#2025-04-19_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// In a service provider\nimport { ApplicationService } from '@adonisjs/core/types'\nimport { SearchEngine } from './search-engine'\nimport { DatabaseSearchProvider } from './database-search-provider'\nimport Post from '#models/post'\n\nexport default class AppProvider {\n  constructor(protected app: ApplicationService) {}\n\n  register() {\n    // Register the search engine with a default provider\n    this.app.container.singleton('search-engine:post', () => {\n      return new SearchEngine(new DatabaseSearchProvider(Post))\n    })\n  }\n}\n\n// In a controller\nimport { inject } from '@adonisjs/core'\nimport { SearchEngine } from '../search-engine'\nimport type Post from '#models/post'\n\n@inject(['search-engine:post'])\nexport default class PostsController {\n  constructor(protected searchEngine: SearchEngine<Post>) {}\n\n  async search({ request, view }) {\n    const query = request.input('query', '')\n    const page = request.input('page', 1)\n    \n    const results = await this.searchEngine.search({\n      query,\n      fields: ['title', 'body'],\n      page,\n      perPage: 10\n    })\n    \n    return view.render('posts/search', { \n      results: results.data,\n      meta: results.meta,\n      query \n    })\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Triggering a Subscription Topic from Inside a Resolver\nDESCRIPTION: Shows how to publish an event to a subscription topic from within a mutation resolver, which will trigger notifications to all subscribers of that topic.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/graphql/subscriptions.mdx#2025-04-19_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Resolver, Subscription } from '@foadonis/graphql'\nimport Recipe from '#models/recipe'\nimport RecipeEvent from '#graphql/schemas/recipe_event'\nimport pubsub from '#graphql/pubsub'\n\n@Resolver()\nexport default class RecipeResolver {\n  @Mutation(() => Recipe)\n  createRecipe(): RecipeEvent {\n    const recipe = Recipe.create()\n\n    pubsub.publish('recipe:created', new RecipeEvent(recipe, 'created'))\n\n    return recipe\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Metered Subscription in Adonis.js\nDESCRIPTION: Shows how to create a new metered subscription using the meteredPrice method in an Adonis.js route handler. This sets up a subscription with usage-based billing.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/shopkeeper/subscriptions/page.mdx#2025-04-19_snippet_46\n\nLANGUAGE: typescript\nCODE:\n```\nimport router from '@adonisjs/core/services/router'\n\nrouter.get('/user/subscribe', async ({ auth, request }) => {\n  const user = auth.getUserOrFail()\n  const paymentMethodId = request.get('paymentMethodId')\n\n  await user.newSubscription().meteredPrice('price_metered').create(paymentMethodId)\n\n  // ...\n})\n```\n\n----------------------------------------\n\nTITLE: Creating or Retrieving Stripe Customer in TypeScript\nDESCRIPTION: Shows how to get or create a Stripe customer object for a billable model using createOrGetStripeCustomer method.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/shopkeeper/customers.mdx#2025-04-19_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst stripeCustomer = await user.createOrGetStripeCustomer()\n```\n\n----------------------------------------\n\nTITLE: Installing Magnify Package in AdonisJS\nDESCRIPTION: Command to install and configure the Magnify package using AdonisJS ace CLI.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/magnify/getting_started.mdx#2025-04-19_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnode ace add @foadonis/magnify\n```\n\n----------------------------------------\n\nTITLE: Adding New Payment Method in TypeScript\nDESCRIPTION: Example of adding a new payment method to a customer using the Shopkeeper library. The addPaymentMethod method attaches a new payment method to the customer's account.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/shopkeeper/payment-methods.mdx#2025-04-19_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nawait user.addPaymentMethod(paymentMethod)\n```\n\n----------------------------------------\n\nTITLE: Applying Promotion Code to Subscription\nDESCRIPTION: Creates a subscription using a Stripe promotion code for discount.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/shopkeeper/subscriptions/page.mdx#2025-04-19_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nawait user\n  .newSubscription('default', 'price_monthly')\n  .withPromotionCode('promo_code_id')\n  .create(paymentMethod)\n```\n\n----------------------------------------\n\nTITLE: Implementing a Distributed PubSub with Redis\nDESCRIPTION: Sets up a distributed PubSub system using Redis as the event target, enabling events to be shared across multiple application instances in a clustered environment.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/graphql/subscriptions.mdx#2025-04-19_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createPubSub } from 'graphql-yoga'\nimport { Redis } from 'ioredis'\nimport { createRedisEventTarget } from '@graphql-yoga/redis-event-target'\n\nconst publishClient = new Redis()\nconst subscribeClient = new Redis()\n\nconst eventTarget = createRedisEventTarget({\n  publishClient,\n  subscribeClient,\n})\n\nconst pubSub = createPubSub({ eventTarget })\n```\n\n----------------------------------------\n\nTITLE: Encrypting Environment Variables in AdonisJS\nDESCRIPTION: Shows how to encrypt an environment variable using the public key and store it in the dotenv file. The command takes a key-value pair and can target different environment configurations.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/crypt/commands.mdx#2025-04-19_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnode ace crypt:set DB_PASSWORD mypassword # Encrypt in .env\nnode ace crypt:set DB_PASSWORD mypassword --env production # Encrypt in .env.production\nNODE_ENV=staging node ace crypt:set DB_PASSWORD mypassword # Encrypt in .env.staging\n```\n\n----------------------------------------\n\nTITLE: Ending a Trial Immediately in AdonisJS\nDESCRIPTION: Shows how to immediately end a subscription trial using the 'endTrial' method on the subscription instance. This is useful when you need to move a user from trial to a paid subscription before the scheduled end date.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/shopkeeper/subscriptions/subscription-trials.mdx#2025-04-19_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nawait subscription.endTrial()\n```\n\n----------------------------------------\n\nTITLE: Managing Maintenance Mode with Adonis CLI in Shell\nDESCRIPTION: Commands for controlling application maintenance mode in Adonis. Includes options for enabling maintenance mode with an optional bypass secret or custom template, and disabling maintenance mode to bring the application back online.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/maintenance/index.mdx#2025-04-19_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n# Put your application in maintenance\nnode ace down\n\n# With a secret for bypass\nnode ace down --secret secretforbypass\n\n# With a custom maintenance page\nnode ace down --template maintenance\n\n# Come back live\nnode ace up\n```\n\n----------------------------------------\n\nTITLE: Checking Subscription Status in TypeScript\nDESCRIPTION: Demonstrates how to check if a user is subscribed to a specific plan using the 'subscribed' method.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/shopkeeper/subscriptions/page.mdx#2025-04-19_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nif (await user.subscribed('default'))\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Paginated Search Results in Edge Template\nDESCRIPTION: Demonstrates how to render paginated search results and pagination links in an Edge template for AdonisJS.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/magnify/advanced.mdx#2025-04-19_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<div>\n  @each(post in posts)\n  <h1>{{ post.title }}</h1>\n  <p>{{ excerpt(post.body, 200) }}</p>\n  @endeach\n</div>\n\n<hr />\n\n<div>\n  @each(anchor in posts.getUrlsForRange(1, posts.lastPage))\n  <a href=\"{{ anchor.url }}\"> {{ anchor.page }} </a>\n  @endeach\n</div>\n```\n\n----------------------------------------\n\nTITLE: Configuring Media Type for File Upload in AdonisJS Controllers using OpenAPI Decorators\nDESCRIPTION: Demonstrates how to use @ApiProperty and @ApiBody decorators to configure the media type for file uploads. This example sets up a multipart/form-data request for file uploading.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/openapi/operations.mdx#2025-04-19_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ApiProperty, ApiBody } from '@foadonis/openapi/decorators'\n\nclass FilesUploadDto {\n  @ApiProperty({\n    schema: { type: 'array', items: { type: 'string', format: 'binary' } },\n  })\n  file: any\n}\n\nexport default class UsersController {\n  @ApiBody({\n    type: FilesUploadDto,\n    mediaType: 'multipart/form-data',\n  })\n  uploadFile() {}\n}\n```\n\n----------------------------------------\n\nTITLE: Invoicing a Customer for a Product with Stripe\nDESCRIPTION: Example of creating a one-time charge with a PDF invoice using the invoicePrice method. This example charges a customer for five t-shirts based on a predefined Stripe price ID.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/shopkeeper/single-charges.mdx#2025-04-19_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nawait user.invoicePrice('price_tshirt', 5)\n```\n\n----------------------------------------\n\nTITLE: Registering OpenAPI Documentation Routes in AdonisJS\nDESCRIPTION: Code to register the routes for accessing the OpenAPI documentation. This makes the documentation available at a specific endpoint in the application.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/openapi/getting-started.mdx#2025-04-19_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nimport openapi from '@foadonis/openapi/services/main'\n\nopenapi.registerRoutes()\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Charge in Adonis.js with Stripe\nDESCRIPTION: Example of handling a POST request to charge a customer using the charge method on a billable model instance. This requires the customer's payment method ID and returns a Stripe charge object.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/shopkeeper/single-charges.mdx#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nrouter.post('/purchase', async ({ request, auth }) => {\n  const user = auth.getUserOrFail()\n  const paymentMethodId = request.get('paymentMethodId')\n\n  const stripeCharge = await user.charge(100, paymentMethodId)\n\n  // ...\n})\n```\n\n----------------------------------------\n\nTITLE: Previewing Invoice with Multiple Price Changes in Typescript\nDESCRIPTION: Previews an invoice before making multiple price changes by passing an array of price identifiers to the previewInvoice method.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/shopkeeper/invoices.mdx#2025-04-19_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst subscription = await user.subscription('default')\nconst invoice = await subscription.previewInvoice(['price_yearly', 'price_metered'])\n```\n\n----------------------------------------\n\nTITLE: Creating a One-Off Invoice with Custom Description\nDESCRIPTION: Example of using the invoiceFor method to create a one-time charge with a custom description. This charges the customer's default payment method but doesn't use predefined Stripe prices.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/shopkeeper/single-charges.mdx#2025-04-19_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nawait user.invoiceFor('One Time Fee', 500)\n```\n\n----------------------------------------\n\nTITLE: Implementing a Database Search Provider with Lucid ORM\nDESCRIPTION: This code shows how to implement a database search provider that uses AdonisJS's Lucid ORM. It extends the generic SearchProvider interface to search database models using the query builder.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/magnify/(advanced)/custom-search-engine.mdx#2025-04-19_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { LucidModel } from '@adonisjs/lucid/types/model'\nimport { SearchOptions, SearchProvider, SearchResult } from './search-engine'\n\nexport class DatabaseSearchProvider<T> implements SearchProvider<T> {\n  private model: LucidModel\n\n  constructor(model: LucidModel) {\n    this.model = model\n  }\n\n  async search(options: SearchOptions): Promise<SearchResult<T>> {\n    const { query, fields = [], page = 1, perPage = 15 } = options\n\n    // Start building the query\n    const queryBuilder = this.model.query()\n\n    // Add search conditions if fields are provided\n    if (fields.length > 0 && query) {\n      queryBuilder.where((builder) => {\n        fields.forEach((field, index) => {\n          const method = index === 0 ? 'where' : 'orWhere'\n          builder[method](field, 'LIKE', `%${query}%`)\n        })\n      })\n    }\n\n    // Execute the paginated query\n    const results = await queryBuilder.paginate(page, perPage)\n    \n    // Transform to the expected format\n    return {\n      data: results.all() as unknown as T[],\n      meta: {\n        total: results.total,\n        perPage: results.perPage,\n        currentPage: results.currentPage,\n        lastPage: results.lastPage,\n      },\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Trial Period Status in TypeScript\nDESCRIPTION: Illustrates how to determine if a user is in their trial period using the 'onTrial' method.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/shopkeeper/subscriptions/page.mdx#2025-04-19_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nconst subscription = await user.subscription('default')\nif (subscription.onTrial())\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Bouncer Abilities for GraphQL Authorization\nDESCRIPTION: Demonstrates how to define Bouncer abilities that can be used with the @Authorized decorator. This example creates an isAdmin ability that checks if a user has admin privileges.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/graphql/authorization.mdx#2025-04-19_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Bouncer } from '@adonisjs/bouncer'\n\nconst abilities = {\n  isAdmin = Bouncer.ability((user) => user.isAdmin),\n}\n\nexport default abilities\n```\n\n----------------------------------------\n\nTITLE: Decorating AdonisJS Model for OpenAPI Schema Generation\nDESCRIPTION: Example of adding OpenAPI property decorators to a model class. This configures which model properties will be exposed in the generated API documentation.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/openapi/getting-started.mdx#2025-04-19_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nimport { ApiProperty } from '@foadonis/openapi/decorators'\n\nexport default class Post {\n  @ApiProperty() // [!code highlight]\n  declare id: number\n\n  @ApiProperty() // [!code highlight]\n  declare title: string\n\n  @ApiProperty() // [!code highlight]\n  declare content: string\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Decorators in AdonisJS with TypeScript\nDESCRIPTION: This snippet demonstrates how to create custom decorators in AdonisJS by defining a decorator factory function that returns a decorator function. It shows how to register metadata for the decorator that can be accessed later.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/graphql/(advanced)/custom-decorators.mdx#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DecoratorFn, DecoratorMetadata } from '@adonisjs/core/types'\n\nfunction authorize(abilities: string[]): DecoratorFn {\n  return function decorateAsAuthorized(\n    target: any,\n    method?: string,\n    propertyDescriptor?: PropertyDescriptor\n  ) {\n    DecoratorMetadata.set('authorize', abilities, { target, method, propertyDescriptor })\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Payment Methods by Type in TypeScript\nDESCRIPTION: Example of deleting payment methods of a specific type using the Shopkeeper library. This version of deletePaymentMethods removes only payment methods of the specified type.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/shopkeeper/payment-methods.mdx#2025-04-19_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nawait user.deletePaymentMethods('sepa_debit')\n```\n\n----------------------------------------\n\nTITLE: Performing Searches with Magnify in AdonisJS\nDESCRIPTION: Demonstrates how to perform searches, add where clauses, and paginate results using Magnify in AdonisJS models.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/magnify/advanced.mdx#2025-04-19_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst posts = await Post.search(\"Magnify\").get();\n\nconst posts = await Post.search(\"Magnify\").where(\"isPublished\", true).get();\n\nconst posts = await Post.search(\"Magnify\")\n  .whereIn(\"status\", [\"published\", \"draft\"])\n  .get();\n\nconst posts = await Post.search(\"Magnify\")\n  .whereIn(\"status\", [\"published\", \"draft\"])\n  .paginate(15, 1);\n```\n\n----------------------------------------\n\nTITLE: Setting Quantity for Specific Price in Multi-Product Subscription\nDESCRIPTION: Shows how to set a specific quantity for a particular price when creating a subscription with multiple products in Adonis.js. This example sets a quantity of 5 for the 'price_chat' product.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/shopkeeper/subscriptions/page.mdx#2025-04-19_snippet_31\n\nLANGUAGE: typescript\nCODE:\n```\nawait user\n  .newSubscription('default', ['price_monthly', 'price_chat'])\n  .quantity(5, 'price_chat')\n  .create(paymentMethodId)\n```\n\n----------------------------------------\n\nTITLE: Basic Product Checkout Implementation in TypeScript\nDESCRIPTION: Demonstrates how to perform a basic product checkout using a Stripe Price ID with redirect handling.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/shopkeeper/checkout.mdx#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nrouter.get('/product-checkout', async ({ auth, response }) => {\n  const user = auth.getUserOrFail()\n  const checkout = await user.checkout('price_tshirt')\n\n  response.redirect().status(303).toPath(checkout.session.url)\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Subscription with Additional Details\nDESCRIPTION: Creates a subscription with additional customer and subscription options supported by Stripe.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/shopkeeper/subscriptions/page.mdx#2025-04-19_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nawait user\n  .newSubscription('default', 'price_monthly')\n  .quantity(5)\n  .create(paymentMethod, { email }, { metadata })\n```\n\n----------------------------------------\n\nTITLE: Implementing Performance Logging Middleware in TypeScript for AdonisJS GraphQL\nDESCRIPTION: This code snippet shows how to create a middleware that logs the execution time of GraphQL operations. It demonstrates the use of the 'next' function to perform actions after the operation execution.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/graphql/middlewares.mdx#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { inject } from '@adonisjs/core'\nimport { Logger } from '@adonisjs/core/logger'\nimport { NextFn, ResolverData } from '@foadonis/graphql'\n\n@inject()\nexport default class PerformanceLoggerMiddleware {\n  constructor(private readonly logger: Logger) {}\n\n  async use({ info }: ResolverData, next: NextFn) {\n    const start = Date.now()\n    await next()\n    const diff = Date.now() - start\n    this.logger.info(`${info.parentType.name}.${info.fieldName} [${diff}ms]`)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Tags to AdonisJS Controller and Methods using OpenAPI Decorators\nDESCRIPTION: Demonstrates how to use the @ApiTags decorator to categorize endpoints at both the controller and method level. Tags are automatically applied to controllers using their name.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/openapi/operations.mdx#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ApiTags } from '@foadonis/openapi/decorators'\n\n@ApiTags('Demo')\nexport default class UsersController {\n  @ApiTags('Other', 'Public')\n  index() {}\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting a Specific Payment Method in TypeScript\nDESCRIPTION: Example of deleting a specific payment method using the Shopkeeper library. The delete method on a PaymentMethod instance removes the payment method from the customer's account.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/shopkeeper/payment-methods.mdx#2025-04-19_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nawait paymentMethod.delete()\n```\n\n----------------------------------------\n\nTITLE: Creating Typed Subscription in Adonis.js\nDESCRIPTION: Demonstrates how to create a new subscription with a specific type using the newSubscription method in an Adonis.js route handler. This example creates a 'swimming' subscription type.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/shopkeeper/subscriptions/page.mdx#2025-04-19_snippet_43\n\nLANGUAGE: typescript\nCODE:\n```\nimport router from '@adonisjs/core/services/router'\n\nrouter.get('/swimming/subscribe', async ({ auth, request }) => {\n  const user = auth.getUserOrFail()\n  const paymentMethodId = request.get('paymentMethodId')\n\n  await user.newSubscription('swimming').price('price_swimming_monthly').create(paymentMethodId)\n\n  // ...\n})\n```\n\n----------------------------------------\n\nTITLE: Product Checkout with Quantity Specification\nDESCRIPTION: Shows how to implement product checkout with a specified quantity for the purchase.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/shopkeeper/checkout.mdx#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nrouter.get('/product-checkout', async ({ auth, response }) => {\n  const user = auth.getUserOrFail()\n  const checkout = await user.checkout({ price_tshirt: 15 })\n\n  response.redirect().status(303).toPath(checkout.session.url)\n})\n```\n\n----------------------------------------\n\nTITLE: Checking Generic Trial Status in AdonisJS\nDESCRIPTION: Demonstrates how to check if a user is within their generic trial period using the 'onTrial' method. This returns true if the current date is before the value of 'trialEndsAt'.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/shopkeeper/subscriptions/subscription-trials.mdx#2025-04-19_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nif (user.onTrial()) {\n  // User is within their trial period...\n}\n```\n\n----------------------------------------\n\nTITLE: Extending Trial Periods in AdonisJS\nDESCRIPTION: Demonstrates how to extend the trial period of a subscription after it has been created using the 'extendTrial' method. This works even if the trial has already expired, with the extended time being deducted from the customer's next invoice.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/shopkeeper/subscriptions/subscription-trials.mdx#2025-04-19_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nconst subscription = await user.subscription('default')\n\n// End the trial 7 days from now...\nawait subscription.extendTrial(DateTime.now().plus({ days: 7 }))\n\n// Add an additional 5 days to the trial...\nawait subscription.extendTrial(user.trialEndsAt.plus({ days: 5 }))\n```\n\n----------------------------------------\n\nTITLE: Creating Stripe Customer without Subscription in TypeScript\nDESCRIPTION: Shows how to create a Stripe customer without starting a subscription using the createAsStripeCustomer method.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/shopkeeper/customers.mdx#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst stripeCustomer = await user.createAsStripeCustomer()\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenAPI in Adonis.js with TypeScript\nDESCRIPTION: This snippet shows how to define the OpenAPI configuration using the defineConfig function from @foadonis/openapi. It sets up the UI, document information, custom loaders, and controllers for API documentation.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/openapi/(references)/configuration.mdx#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@foadonis/openapi'\n\nexport default defineConfig({\n  ui: 'scalar',\n\n  document: {\n    info: {\n      title: 'My API',\n      version: '1.0.0',\n    },\n  },\n\n  loaders: [MyCustomLoader],\n\n  controllers: [CustomController],\n})\n```\n\n----------------------------------------\n\nTITLE: Generating Stripe Billing Portal URL in TypeScript\nDESCRIPTION: Shows how to generate a URL for the Stripe billing portal with a custom return URL in an AdonisJS route.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/shopkeeper/customers.mdx#2025-04-19_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nimport router from '@adonisjs/core/services/router'\n\nrouter\n  .get('/billing', ({ auth, response }) => {\n    const user = auth.getUserOrFail()\n    const billingPortalUrl = await user.billingPortalUrl(\n      // TODO: change the prefixUrl value to your own domain or environment variable\n      router.builder().prefixUrl('http://localhost:3333').make('dashboard')\n    )\n\n    response.redirect().toPath(billingPortalUrl)\n  })\n  .middleware(middleware.auth())\n  .as('billing')\n```\n\n----------------------------------------\n\nTITLE: Using PaginatedResponse Mixin in AdonisJS Controller\nDESCRIPTION: This snippet demonstrates how to use the PaginatedResponse mixin in an AdonisJS controller. It applies the mixin to create a UsersPaginatedResponse and uses it with ApiResponse decorator.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/openapi/(advanced)/generic-types.mdx#2025-04-19_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { HttpContext } from '@adonisjs/core/http'\nimport { ApiQuery, ApiResponse } from '@foadonis/openapi/decorators'\nimport User from '#models/user'\nimport PaginatedResponse from '#openapi/schemas/paginated_response'\n\nclass UsersPaginatedResponse extends PaginatedResponse(User) {}\n\nexport class UsersController {\n  @ApiQuery({ name: 'page' })\n  @ApiQuery({ name: 'limit' })\n  @ApiResponse({ type: UsersPaginatedResponse })\n  index({ request }: HttpContext) {\n    const page = request.input('page', 1)\n    const limit = request.input('limit', 25)\n    return User.query().paginate(page, limit)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Swapping Prices with Quantities in Multi-Product Subscription\nDESCRIPTION: Demonstrates how to swap prices in a multi-product subscription while specifying quantities for specific prices using an object with price options in Adonis.js.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/shopkeeper/subscriptions/page.mdx#2025-04-19_snippet_37\n\nLANGUAGE: typescript\nCODE:\n```\nconst user = await User.find(1)\nconst subscription = await user.subscription('default')\n\nawait subscription.swap({\n  price_pro: { quantity: 5 },\n  price_chat: {},\n})\n```\n\n----------------------------------------\n\nTITLE: Swapping Prices in Multi-Product Subscription with Adonis.js\nDESCRIPTION: Shows how to change prices in a subscription with multiple products using the swap method. This example upgrades from 'price_basic' to 'price_pro' while keeping 'price_chat'.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/shopkeeper/subscriptions/page.mdx#2025-04-19_snippet_36\n\nLANGUAGE: typescript\nCODE:\n```\nconst user = await User.find(1)\nconst subscription = await user.subscription('default')\n\nawait subscription.swap(['price_pro', 'price_chat'])\n```\n\n----------------------------------------\n\nTITLE: Triggering a Subscription Topic Outside a Resolver\nDESCRIPTION: Demonstrates how to publish an event to a subscription topic from a route handler or any other place outside of a GraphQL resolver.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/graphql/subscriptions.mdx#2025-04-19_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport Recipe from '#models/recipe'\nimport RecipeEvent from '#graphql/schemas/recipe_event'\nimport pubsub from '#graphql/pubsub'\n\nrouter.post('/api/recipes', () => {\n  const recipe = Recipe.create()\n\n  pubsub.publish('recipe:created', new RecipeEvent(recipe, 'created'))\n\n  return recipe\n})\n```\n\n----------------------------------------\n\nTITLE: Swapping Single Price in Subscription Item with Adonis.js\nDESCRIPTION: Shows how to swap a single price on a subscription by accessing the specific subscription item. This method preserves existing metadata on other prices in the subscription.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/shopkeeper/subscriptions/page.mdx#2025-04-19_snippet_38\n\nLANGUAGE: typescript\nCODE:\n```\nconst user = await User.find(1)\nconst subscription = await user.subscription('default')\n\nconst item = await subscription.findItemOrFail('price_basic')\n\nawait item.swap('price_pro')\n```\n\n----------------------------------------\n\nTITLE: Using Bouncer Abilities with @Authorized Decorator in TypeScript\nDESCRIPTION: Shows how to combine @Authorized decorator with Bouncer abilities to implement role-based authorization in GraphQL resolvers. The example restricts access to the recipes query to admin users only.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/graphql/authorization.mdx#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport Recipe from '#models/recipe'\nimport { Resolver, Query, Authorized } from '@foadonis/graphql'\nimport abilities from '#abilities/main'\n\n@Resolver(Recipe)\nclass RecipeResolver {\n  @Query(() => [Recipe])\n  @Authorized(abilities.isAdmin) // [!code highlight]\n  recipes() {\n    // ...your logic\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Payment Methods in TypeScript\nDESCRIPTION: Example of retrieving a customer's payment methods using the Shopkeeper library. The paymentMethods method returns instances of the PaymentMethod class that represent the customer's saved payment methods.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/shopkeeper/payment-methods.mdx#2025-04-19_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst paymentMethods = await user.paymentMethods()\n```\n\n----------------------------------------\n\nTITLE: Setting Invoice Payment Duration\nDESCRIPTION: Creates a subscription with custom invoice payment duration before cancellation.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/shopkeeper/subscriptions/page.mdx#2025-04-19_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nawait user.newSubscription('default', 'price_monthly').createAndSendInvoice([], {\n  days_until_due: 30,\n})\n```\n\n----------------------------------------\n\nTITLE: Creating an Invoice with Additional Options and Tax Rates\nDESCRIPTION: Example of using the invoicePrice method with additional billing options and tax rates. The third parameter contains options for the invoice item, and the fourth parameter contains options for the invoice itself.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/shopkeeper/single-charges.mdx#2025-04-19_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nawait user.invoicePrice(\n  'price_tshirt',\n  5,\n  {\n    discounts: [{ coupon: 'SUMMER21SALE' }],\n  },\n  { default_tax_rates: ['txr_id'] }\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Dynamic Topic Subscription Resolver\nDESCRIPTION: Implements a GraphQL subscription resolver that dynamically subscribes to topics based on arguments passed to the subscription.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/graphql/subscriptions.mdx#2025-04-19_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Resolver, Subscription } from '@foadonis/graphql'\nimport Recipe from '#models/recipe'\nimport RecipeEvent from '#graphql/schemas/recipe_event'\n\n@Resolver()\nexport default class RecipeResolver {\n  @Subscription({\n    topics: ({ args }) => args.topic,\n  })\n  recipe(@Root() payload: RecipeEvent): RecipeEvent {\n    return payload\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Reporting Specific Usage Amount for Metered Subscription\nDESCRIPTION: Demonstrates how to report a specific amount of usage for a metered subscription using the reportUsage method with a quantity parameter in Adonis.js.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/shopkeeper/subscriptions/page.mdx#2025-04-19_snippet_49\n\nLANGUAGE: typescript\nCODE:\n```\nawait user.subscription().reportUsage(15)\n```\n\n----------------------------------------\n\nTITLE: Subscription Checkout with Promotion Codes\nDESCRIPTION: Shows how to enable promotion codes for subscription-based checkouts.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/shopkeeper/checkout.mdx#2025-04-19_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nrouter.get('/subscription-checkout', ({ response, auth }) => {\n  const user = auth.getUserOrFail()\n\n  const checkout = await user\n    .newSubscription('default', 'price_monthly')\n    .allowPromotionCodes()\n    .checkout({\n      success_url: route('checkout.success'),\n      cancel_url: route('checkout.cancel'),\n    })\n\n  response.redirect().status(303).toPath(checkout.session.url)\n})\n```\n\n----------------------------------------\n\nTITLE: Using Magnify Commands in AdonisJS\nDESCRIPTION: Shows how to use Magnify commands for importing, flushing, and syncing index settings in the command line.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/magnify/advanced.mdx#2025-04-19_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnode ace magnify:import '#models/user'\n\nnode ace magnify:import user\n\nnode ace magnify:import ./app/models/user.js\n\nnode ace magnify:flush '#models/user'\n\nnode ace magnify:flush user\n\nnode ace magnify:flush ./app/models/user.js\n\nnode ace magnify:sync-index-settings\n```\n\n----------------------------------------\n\nTITLE: Handling Successful and Failed Charges with Try/Catch\nDESCRIPTION: Example of error handling for the charge method using try/catch blocks. If successful, the method returns a Payment instance; if it fails, it throws an exception that needs to be caught.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/shopkeeper/single-charges.mdx#2025-04-19_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ntry {\n  const payment = await user.charge(100, paymentMethod)\n} catch (e) {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Lucid Model in TypeScript\nDESCRIPTION: Example of a User model definition using Lucid ORM, showcasing various column types and a computed property.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/lucid-parser/index.mdx#2025-04-19_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BaseModel, column, computed } from '@adonisjs/lucid/orm'\n\nexport default class User extends BaseModel {\n  @column({ isPrimary: true })\n  declare id: number\n\n  @column()\n  declare title: string | null\n\n  @column()\n  declare roles: string[]\n\n  @computed()\n  get isAdmin(): boolean {\n    return roles.includes('admin')\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Syncing Default Payment Method from Stripe in TypeScript\nDESCRIPTION: Example of syncing the default payment method information from Stripe using the Shopkeeper library. The updateDefaultPaymentMethodFromStripe method updates the local payment method information to match what's stored in Stripe.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/shopkeeper/payment-methods.mdx#2025-04-19_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nawait user.updateDefaultPaymentMethodFromStripe()\n```\n\n----------------------------------------\n\nTITLE: Creating a Generic Trial Without Payment Method in AdonisJS\nDESCRIPTION: Shows how to offer trial periods without collecting payment method information upfront by setting the 'trialEndsAt' column on the user record. This is typically done during user registration to provide a trial period before requiring payment details.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/shopkeeper/subscriptions/subscription-trials.mdx#2025-04-19_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nawait User.create({\n  trialEndsAt: DateTime.now().plus({ days: 10 }),\n})\n```\n\n----------------------------------------\n\nTITLE: Reporting Usage for Specific Price in Multi-Product Subscription\nDESCRIPTION: Shows how to report usage for a specific metered price in a multi-product subscription using the reportUsageFor method in Adonis.js.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/shopkeeper/subscriptions/page.mdx#2025-04-19_snippet_50\n\nLANGUAGE: typescript\nCODE:\n```\nawait user.subscription().reportUsageFor('price_metered', 15)\n```\n\n----------------------------------------\n\nTITLE: Adding Price with Specific Quantity to Subscription in Adonis.js\nDESCRIPTION: Illustrates how to add a new price with a specific quantity to an existing subscription using the addPrice method with a quantity parameter in Adonis.js.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/shopkeeper/subscriptions/page.mdx#2025-04-19_snippet_34\n\nLANGUAGE: typescript\nCODE:\n```\nconst user = await User.find(1)\nconst subscription = await user.subscription('default')\n\nawait subscription.addPrice('price_chat', 5)\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL Input Types and Args for Recipe Operations\nDESCRIPTION: Creating argument and input types with validation for GraphQL operations, including pagination parameters and recipe creation data structure.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/graphql/getting-started.mdx#2025-04-19_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ArrayMaxSize, Length, Max, MaxLength, Min } from 'class-validator'\nimport { ArgsType, Field, InputType, Int } from 'type-graphql'\n\n@ArgsType()\nclass RecipeArgs {\n  @Field(() => Int)\n  @Min(0)\n  page: number = 0\n\n  @Field(() => Int)\n  @Min(1)\n  @Max(25)\n  perPage: number = 0\n}\n\n@InputType()\nclass NewRecipeInput {\n  @Field()\n  @MaxLength(30)\n  declare title: string\n\n  @Field({ nullable: true })\n  @Length(30, 255)\n  declare description?: string\n\n  @Field(() => [String])\n  @ArrayMaxSize(30)\n  declare ingredients: string[]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Stripe Customer with Additional Parameters in TypeScript\nDESCRIPTION: Illustrates creating a Stripe customer with additional parameters supported by the Stripe API.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/shopkeeper/customers.mdx#2025-04-19_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst stripeCustomer = await user.createAsStripeCustomer(params)\n```\n\n----------------------------------------\n\nTITLE: Checking Customer Balance in Stripe with TypeScript\nDESCRIPTION: Demonstrates how to check a customer's total balance in their currency using the balance method.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/shopkeeper/customers.mdx#2025-04-19_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst balance = await user.balance()\n```\n\n----------------------------------------\n\nTITLE: Creating Tax ID for Customer in Stripe with TypeScript\nDESCRIPTION: Demonstrates how to create a new Tax ID for a customer with a valid type and value.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/shopkeeper/customers.mdx#2025-04-19_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nconst taxId = await user.createTaxId('eu_vat', 'BE0123456789')\n```\n\n----------------------------------------\n\nTITLE: Crediting Customer Balance in Stripe with TypeScript\nDESCRIPTION: Shows how to credit a customer's balance with an optional description using the creditBalance method.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/shopkeeper/customers.mdx#2025-04-19_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nawait user.creditBalance(500, 'Premium customer top-up')\n```\n\n----------------------------------------\n\nTITLE: Updating Previously Reported Usage with Timestamp in Adonis.js\nDESCRIPTION: Demonstrates how to update previously reported usage for a metered subscription by specifying a timestamp as the second parameter to the reportUsage method in Adonis.js.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/shopkeeper/subscriptions/page.mdx#2025-04-19_snippet_51\n\nLANGUAGE: typescript\nCODE:\n```\nawait user.subscription().reportUsage(15, timestamp)\n```\n\n----------------------------------------\n\nTITLE: Updating Subscription Quantity in TypeScript\nDESCRIPTION: Illustrates how to set a specific quantity for a subscription.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/shopkeeper/subscriptions/page.mdx#2025-04-19_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\nawait subscription.updateQuantity(5)\n```\n\n----------------------------------------\n\nTITLE: Performing a Search Query with Magnify in Adonis\nDESCRIPTION: This example demonstrates how to use the search method added by the Searchable mixin to perform a search on a Post model. It searches for the term 'Adonis' and limits the results to 10 entries.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/packages/magnify/README.md#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport Post from '#models/post'\n\nconst posts = await Post.search('Adonis').take(10).get()\n```\n\n----------------------------------------\n\nTITLE: Creating Payment Method for Single Charges with Stripe.js\nDESCRIPTION: JavaScript code that creates a payment method for single charges using Stripe's createPaymentMethod API. This method verifies the card details and returns a payment method identifier for immediate use.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/shopkeeper/payment-methods.mdx#2025-04-19_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst cardHolderName = document.getElementById('card-holder-name')\nconst cardButton = document.getElementById('card-button')\n\ncardButton.addEventListener('click', async (e) => {\n  const { paymentMethod, error } = await stripe.createPaymentMethod('card', cardElement, {\n    billing_details: { name: cardHolderName.value },\n  })\n\n  if (error) {\n    // Display \"error.message\" to the user...\n  } else {\n    // The card has been verified successfully...\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Executing Magnify Flush Command in AdonisJS\nDESCRIPTION: The magnify:flush command removes all entries for a specific model from your Search Engine index. This is useful when you need to clear the search data for a particular model.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/magnify/(references)/commands.mdx#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnode ace magnify:flush <modelPath>\n```\n\n----------------------------------------\n\nTITLE: Accessing Subscription Items in Multi-Product Subscription\nDESCRIPTION: Demonstrates how to access individual subscription items and their attributes in a multi-product subscription using the items relationship in Adonis.js.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/shopkeeper/subscriptions/page.mdx#2025-04-19_snippet_41\n\nLANGUAGE: typescript\nCODE:\n```\nconst subscription = await user.subscription('default')\nawait subscription.load('items') // Load relationship\n\nconst subscriptionItem = subs.items[0]\n\nconst stripePrice = subscriptionItem.stripePrice\nconst quantity = subscriptionItem.quantity\n```\n\n----------------------------------------\n\nTITLE: Configuring Bearer Authentication in AdonisJS OpenAPI Config\nDESCRIPTION: This code sets up a bearer authentication scheme with JWT format in the OpenAPI configuration file for AdonisJS.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/openapi/security.mdx#2025-04-19_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@foadonis/openapi'\n\nexport default defineConfig({\n  document: {\n    components: {\n      securitySchemes: {\n        bearer: {\n          type: 'http',\n          scheme: 'bearer',\n          bearerFormat: 'JWT',\n        },\n      },\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Headers for AdonisJS Controllers using OpenAPI Decorators\nDESCRIPTION: Shows how to use the @ApiHeader decorator to specify custom headers expected in requests. Headers can be defined at both the controller and method level.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/openapi/operations.mdx#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ApiHeader } from '@foadonis/openapi/decorators'\n\n@ApiHeader({\n  name: 'X-Language',\n  description: 'The currently defined language',\n})\nexport default class UsersController {\n  @ApiHeader({ name: 'X-Store' })\n  index() {}\n}\n```\n\n----------------------------------------\n\nTITLE: Checking for Expired Trials in AdonisJS\nDESCRIPTION: Demonstrates how to determine if an existing trial has expired using the 'hasExpiredTrial' method. This can be called either on the user instance or directly on the subscription instance.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/shopkeeper/subscriptions/subscription-trials.mdx#2025-04-19_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nif (await user.hasExpiredTrial()) {\n  // ...\n}\n\nif (subscription.hasExpiredTrial()) {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Stripe Webhook Event Handlers in TypeScript\nDESCRIPTION: Demonstrates how to listen for and handle additional Stripe webhook events using the Event Emitter. It shows handling both the initial event and the 'handled' event after Shopkeeper processes it.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/shopkeeper/webhooks.mdx#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport emitter from '@adonisjs/core/services/emitter'\nimport Stripe from 'stripe'\n\nemitter.on(\n  'stripe:customer.subscription.created',\n  (event: Stripe.CustomerSubscriptionCreatedEvent) => {\n    // ...\n  }\n)\n\n// Emitted after the webhook has been handled by Shopkeeper\nemitter.on(\n  'stripe:customer.subscription.created:handled',\n  (event: Stripe.CustomerSubscriptionCreatedEvent) => {\n    // ...\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Tax ID Collection in Checkout\nDESCRIPTION: Shows how to enable tax ID collection during checkout process.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/shopkeeper/checkout.mdx#2025-04-19_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nconst checkout = await user.collectTaxIds().checkout('price_tshirt')\n```\n\n----------------------------------------\n\nTITLE: Checking Recurring Subscription Status in TypeScript\nDESCRIPTION: Shows how to determine if a user's subscription is active and beyond the trial period.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/shopkeeper/subscriptions/page.mdx#2025-04-19_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nconst subscription = await user.subscription('default')\nif (subscription.recurring())\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Subscription to Existing Customer\nDESCRIPTION: Adds a new subscription to a customer who already has a default payment method.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/shopkeeper/subscriptions/page.mdx#2025-04-19_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst user = await User.find(1)\n\nawait user.newSubscription('default', 'price_monthly').add()\n```\n\n----------------------------------------\n\nTITLE: Guest Checkout with Promotion Code\nDESCRIPTION: Shows guest checkout implementation with promotion code support.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/shopkeeper/checkout.mdx#2025-04-19_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Checkout } from '@foadonis/shopkeeper'\n\nrouter.get('/product-checkout', ({ response }) => {\n  const checkout = await Checkout.guest()\n    .withPromotionCode('promo-code')\n    .create('default', 'price_monthly', {\n      success_url: route('checkout.success'),\n      cancel_url: route('checkout.cancel'),\n    })\n\n  response.redirect().status(303).toPath(checkout.session.url)\n})\n```\n\n----------------------------------------\n\nTITLE: Retrieving Upcoming Invoice for a Specific Subscription in Typescript\nDESCRIPTION: Retrieves the upcoming invoice for a specific subscription by first getting the subscription and then using its upcomingInvoice method.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/shopkeeper/invoices.mdx#2025-04-19_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst subscription = await user.subscription('default')\nconst invoice = await subscription.upcomingInvoice()\n```\n\n----------------------------------------\n\nTITLE: Defining Primitive Types in OpenAPI Decorators\nDESCRIPTION: Shows different ways to define primitive types in OpenAPI decorators. Types can be specified either as string names or by using their constructors in various decorators like @ApiResponse, @ApiProperty, and @ApiBody.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/openapi/types-and-parameters.mdx#2025-04-19_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// @noErrors\nimport { ApiResponse, ApiProperty, ApiBody } from '@foadonis/openapi/decorators'\n\n@ApiResponse({ type: 'string' })\n@ApiProperty({ type: Number })\n@ApiBody({ type: Boolean })\n```\n\n----------------------------------------\n\nTITLE: Implementing Lucid Paginated Response in AdonisJS Controller\nDESCRIPTION: This snippet shows how to implement a paginated response using Lucid ORM in an AdonisJS controller. It uses ApiQuery decorators to define query parameters for pagination.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/openapi/(advanced)/generic-types.mdx#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { HttpContext } from '@adonisjs/core/http'\nimport { ApiQuery } from '@foadonis/openapi/decorators'\nimport User from '#models/user'\n\nexport class UsersController {\n  @ApiQuery({ name: 'page' })\n  @ApiQuery({ name: 'limit' })\n  index({ request }: HttpContext) {\n    const page = request.input('page', 1)\n    const limit = request.input('limit', 25)\n    return User.query().paginate(page, limit)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: HTML Form for Capturing Payment Method Details\nDESCRIPTION: HTML markup for a form that captures payment method details using Stripe Elements. It includes a field for the cardholder name, a container for the card element, and a button to submit the form.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/shopkeeper/payment-methods.mdx#2025-04-19_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<input id=\"card-holder-name\" type=\"text\" />\n\n<!-- Stripe Elements Placeholder -->\n<div id=\"card-element\"></div>\n\n<button id=\"card-button\" data-secret=\"{{ $intent->client_secret }}\">Update Payment Method</button>\n```\n\n----------------------------------------\n\nTITLE: Implementing Bearer Authentication for Controller in AdonisJS\nDESCRIPTION: This snippet shows how to use the @ApiBearerAuth decorator to implement bearer authentication for a controller class in AdonisJS.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/openapi/security.mdx#2025-04-19_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ApiBearerAuth } from '@foadonis/openapi/decorators'\n\n@ApiBearerAuth()\nexport default class UsersController {}\n```\n\n----------------------------------------\n\nTITLE: Refunding a Stripe Charge\nDESCRIPTION: Example of refunding a Stripe charge using the refund method. This requires the payment intent ID from a previous charge and processes the refund back to the customer.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/shopkeeper/single-charges.mdx#2025-04-19_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nconst payment = await user.charge(100, paymentMethodId)\n\nawait user.refund(payment.id)\n```\n\n----------------------------------------\n\nTITLE: Defining Enum Types with String Array Values\nDESCRIPTION: Shows how to define an enum type by providing an array of string values as options. This approach is used with the @ApiQuery decorator to specify allowed values for a query parameter.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/openapi/types-and-parameters.mdx#2025-04-19_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n// @noErrors\nimport { ApiQuery } from '@foadonis/openapi/decorators'\n\n@ApiQuery({ name: \"api\", enum: [\"openapi\", \"graphql\"] })\n```\n\n----------------------------------------\n\nTITLE: Configuring OAuth2 Authentication in AdonisJS OpenAPI Config\nDESCRIPTION: This code configures an OAuth2 authentication scheme with implicit flow and defined scopes in the OpenAPI configuration file for AdonisJS.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/openapi/security.mdx#2025-04-19_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@foadonis/openapi'\n\nexport default defineConfig({\n  document: {\n    components: {\n      securitySchemes: {\n        bearer: {\n          type: 'oauth2',\n          flows: {\n            implicit: {\n              authorizationUrl: 'https://example.com/api/oauth/dialog',\n              scopes: {\n                'users:read': 'read users',\n                'global:read': 'global read',\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Advanced Stripe Checkout with Custom Redirect URLs\nDESCRIPTION: Enhanced implementation of Stripe Checkout with custom success and cancel URLs. This example includes dedicated routes for handling successful payments and cancellations with view rendering.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/shopkeeper/getting-started.mdx#2025-04-19_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nrouter.get('/', async ({ auth, response }) => {\n  const user = auth.getUserOrFail()\n  const checkout = await user.checkout('price_xxxxxxx', {\n    success_url: route('checkout.success'),\n    cancel_url: route('checkout.cancel'),\n  })\n\n  response.redirect().status(303).toPath(checkout.session.url)\n})\n\nrouter\n  .get('/success', async ({ view }) => {\n    return view.render('checkout/success')\n  })\n  .as('checkout.success')\n\nrouter\n  .get('/cancel', async ({ view }) => {\n    return view.render('checkout/cancel')\n  })\n  .as('checkout.cancel')\n```\n\n----------------------------------------\n\nTITLE: Adding Billable Mixin to User Model in TypeScript\nDESCRIPTION: Code for integrating the Billable mixin into your User model to enable billing functionality. This mixin provides methods for subscriptions, payments, and other billing operations.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/shopkeeper/getting-started.mdx#2025-04-19_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { compose } from '@adonisjs/core/helpers'\nimport { BaseModel } from '@adonisjs/lucid/orm'\nimport { Billable } from '@foadonis/shopkeeper/mixins'\n\nexport default class User extends compose(BaseModel, Billable) {}\n```\n\n----------------------------------------\n\nTITLE: Implementing Guard Middleware in TypeScript for AdonisJS GraphQL\nDESCRIPTION: This code snippet shows how to create a guard middleware that can block access or modify results based on specific conditions. It throws an error for 'ts.ed' and returns a fixed value for 'adonis'.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/graphql/middlewares.mdx#2025-04-19_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ResolverData, NextFn } from '@foadonis/graphql'\nimport { inject } from '@adonisjs/core'\n\nexport default class CompetitorMiddleware {\n  use({ args }, next) {\n    if (args.frameworkName === 'ts.ed') {\n      throw new Error('Adonis is better')\n    }\n\n    if (args.frameworkName === 'adonis') {\n      return 'AdonisJS'\n    }\n\n    return next()\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Stripe Customer Object in TypeScript\nDESCRIPTION: Demonstrates how to get the Stripe customer object for a billable model using the asStripeCustomer method.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/shopkeeper/customers.mdx#2025-04-19_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst stripeCustomer = await user.asStripeCustomer()\n```\n\n----------------------------------------\n\nTITLE: Modifying Subscription Billing Cycle\nDESCRIPTION: Example of modifying a subscription's billing cycle anchor date during creation.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/shopkeeper/subscriptions/page.mdx#2025-04-19_snippet_56\n\nLANGUAGE: typescript\nCODE:\n```\nrouter.get('/user/subscribe', async ({ auth, request, view }) => {\n  const user = auth.getUserOrFail()\n  const paymentMethodId = request.get('paymentMethodId')\n\n  await user\n    .newSubscription('default', 'price_monthly')\n    .anchorBillingCycleOn(DateTime.now().plus({ days: 5 }))\n    .checkout(paymentMethodId)\n\n  // ...\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Charge Without a User Instance\nDESCRIPTION: Example of making a charge without an underlying customer by invoking the charge method on a new instance of the billable model. This approach doesn't require an existing user.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/shopkeeper/single-charges.mdx#2025-04-19_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nawait new User().charge(100, paymentMethod)\n```\n\n----------------------------------------\n\nTITLE: Creating a Stripe Price via CLI\nDESCRIPTION: Command for creating a new price in Stripe using the Stripe CLI. This example creates a monthly subscription price of $10 USD for a \"Gold Plan\" product.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/shopkeeper/getting-started.mdx#2025-04-19_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nstripe prices create  \\\n  --currency=usd \\\n  --unit-amount=1000 \\\n  -d \"recurring[interval]\"=month \\\n  -d \"product_data[name]\"=\"Gold Plan\"\n```\n\n----------------------------------------\n\nTITLE: Using a Custom Decorator in an AdonisJS Controller\nDESCRIPTION: This snippet shows how to use the custom 'middleware' decorator in an AdonisJS controller. It applies the decorator to a controller method, specifying the 'auth' middleware to be executed before the method.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/openapi/(advanced)/custom-decorators.mdx#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { HttpContext } from '@adonisjs/core/http'\nimport { middleware } from 'App/Decorators/middleware'\n\nexport default class UsersController {\n  @middleware('auth')\n  public async index(ctx: HttpContext) {\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving User Invoices in Typescript\nDESCRIPTION: Retrieves an array of a billable model's invoices using the invoices method, which returns a collection of Shopkeeper's Invoice instances.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/shopkeeper/invoices.mdx#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst invoices = await user.invoices()\n```\n\n----------------------------------------\n\nTITLE: Updating Subscription Price Without Proration in TypeScript\nDESCRIPTION: Demonstrates how to change a subscription's price without prorating the charges.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/shopkeeper/subscriptions/page.mdx#2025-04-19_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\nconst subscription = await user.subscription('default')\n\nawait subscription.noProrate().swap('price_yearly')\n```\n\n----------------------------------------\n\nTITLE: Retrieving Stripe Customer by ID in TypeScript\nDESCRIPTION: Demonstrates how to find a billable customer using their Stripe ID with the shopkeeper.findBillable method.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/shopkeeper/customers.mdx#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport shopkeeper from '@foadonis/shopkeeper/services/shopkeeper'\n\nconst user = await shopkeeper.findBillable(stripeId)\n```\n\n----------------------------------------\n\nTITLE: Configuring Schema Emission in GraphQL\nDESCRIPTION: Shows how to enable automatic GraphQL schema file generation using the emitSchemaFile option. This configuration will generate a schema.gql file at the project root.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/graphql/(references)/configuration.mdx#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@foadonis/graphql'\n\nexport default defineConfig({\n  emitSchemaFile: true,\n  // ...rest of your config\n})\n```\n\n----------------------------------------\n\nTITLE: Debiting Customer Balance in Stripe with TypeScript\nDESCRIPTION: Illustrates how to debit a customer's balance with an optional description using the debitBalance method.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/shopkeeper/customers.mdx#2025-04-19_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nawait user.debitBalance(500, 'Premium customer top-up')\n```\n\n----------------------------------------\n\nTITLE: Previewing Invoice with Single Price Change in Typescript\nDESCRIPTION: Previews an invoice before making a price change using the previewInvoice method with a single price identifier.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/shopkeeper/invoices.mdx#2025-04-19_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst subscription = await user.subscription('default')\nconst invoice = await subscription.previewInvoice('price_yearly')\n```\n\n----------------------------------------\n\nTITLE: Specifying HTTP Responses for AdonisJS Controllers using OpenAPI Decorators\nDESCRIPTION: Illustrates the use of @ApiResponse decorator to define HTTP responses for different status codes. Responses can be specified at both the controller and method level.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/openapi/operations.mdx#2025-04-19_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ApiResponse } from '@foadonis/openapi/decorators'\n\n@ApiResponse({ status: 403, description: 'Forbidden' })\nexport default class UsersController {\n  @ApiResponse({\n    status: 201,\n    description: 'The record has been successfully created.',\n    type: User,\n  })\n  create() {}\n}\n```\n\n----------------------------------------\n\nTITLE: Checking for Any Payment Method in TypeScript\nDESCRIPTION: Example of checking if a customer has any payment method using the Shopkeeper library. The hasPaymentMethod method returns a boolean indicating whether the customer has at least one payment method saved.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/shopkeeper/payment-methods.mdx#2025-04-19_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nif (await user.hasPaymentMethod()) {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Swapping Price and Invoicing Immediately in TypeScript\nDESCRIPTION: Illustrates how to change a subscription's price and immediately invoice the customer.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/shopkeeper/subscriptions/page.mdx#2025-04-19_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\nconst subscription = await user.subscription('default')\n\nawait subscriptions.swapAndInvoice('price_yearly')\n```\n\n----------------------------------------\n\nTITLE: Checkout with Session ID Handling\nDESCRIPTION: Shows how to implement checkout with session ID tracking and retrieval in success callback.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/shopkeeper/checkout.mdx#2025-04-19_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nrouter.get('/product-checkout', async ({ auth, response }) => {\n  const user = auth.getUserOrFail()\n  const checkout = await user.checkout(\n    { price_tshirt: 15 },\n    {\n      success_url: route('checkout.success', { session_id: '{CHECKOUT_SESSION_ID}' }),\n      cancel_url: route('checkout.cancel'),\n    }\n  )\n\n  response.redirect().status(303).toPath(checkout.session.url)\n})\n\nrouter.get('/checkout-success', ({ request }) => {\n  const qs = request.qs()\n  const checkoutSession = await user.stripe.checkout.sessions.retrieve(qs.session_id)\n\n  return view.render('checkout/success', { checkoutSession })\n})\n```\n\n----------------------------------------\n\nTITLE: Retrieving Invoices Including Pending Ones in Typescript\nDESCRIPTION: Retrieves all invoices including pending ones for a user using the invoicesIncludingPending method.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/shopkeeper/invoices.mdx#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst invoice = await user.invoicesIncludingPending()\n```\n\n----------------------------------------\n\nTITLE: Checking for Payment Method by Type in TypeScript\nDESCRIPTION: Example of checking if a customer has a payment method of a specific type using the Shopkeeper library. This version of hasPaymentMethod filters by the specified payment method type.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/shopkeeper/payment-methods.mdx#2025-04-19_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nif (await user.hasPaymentMethod('sepa_debut')) {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Optional Properties in OpenAPI Schema\nDESCRIPTION: Demonstrates how to specify optional properties in a schema using either the @ApiPropertyOptional decorator or the required: false option. This is necessary because TypeScript metadata doesn't automatically provide optional field information.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/openapi/types-and-parameters.mdx#2025-04-19_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ApiProperty, ApiPropertyOptional } from '@foadonis/openapi/decorators'\n\nexport class Post {\n  @ApiProperty()\n  declare id: number\n\n  @ApiProperty()\n  declare title: string\n\n  @ApiPropertyOptional({ type: String }) // [!code highlight]\n  declare content?: string\n\n  @ApiProperty({ type: String, required: false }) // [!code highlight]\n  declare description?: string\n}\n```\n\n----------------------------------------\n\nTITLE: Registering GraphQL Resolvers in AdonisJS\nDESCRIPTION: Configuration code to register GraphQL resolvers with the AdonisJS application for the GraphQL server to use them.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/graphql/getting-started.mdx#2025-04-19_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport graphql from '@foadonis/graphql/services/main'\n\ngraphql.resolvers([() => import('#graphql/resolvers/recipe_resolver')])\n```\n\n----------------------------------------\n\nTITLE: Retrieving Customer Tax IDs in Stripe with TypeScript\nDESCRIPTION: Shows how to retrieve all tax IDs assigned to a customer using the taxIds method.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/shopkeeper/customers.mdx#2025-04-19_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nconst taxIds = await user.taxIds()\n```\n\n----------------------------------------\n\nTITLE: Attaching Middleware to ObjectType Field in TypeScript for AdonisJS GraphQL\nDESCRIPTION: This code snippet demonstrates how to attach a middleware to a specific field of an ObjectType using the @UseMiddleware decorator in AdonisJS GraphQL.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/graphql/middlewares.mdx#2025-04-19_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ObjectType, Field, Query } from '@foadonis/graphql'\nimport AccessLoggerMiddleware from '#graphql/middlewares/access_logger_middleware'\n\n@ObjectType()\nexport default class Recipe {\n  @Field()\n  title: string\n\n  @Field()\n  @UseMiddleware(AccessLoggerMiddleware)\n  content: string\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Stripe Customer in TypeScript\nDESCRIPTION: Illustrates how to update a Stripe customer directly with additional information using the updateStripeCustomer method.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/shopkeeper/customers.mdx#2025-04-19_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst stripeCustomer = await user.updateStripeCustomer(params)\n```\n\n----------------------------------------\n\nTITLE: Implementing Tax Rates for Subscriptions\nDESCRIPTION: Implementation of tax rate methods in a User model to specify tax rates for subscriptions.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/shopkeeper/subscriptions/page.mdx#2025-04-19_snippet_54\n\nLANGUAGE: typescript\nCODE:\n```\nimport { compose } from '@adonisjs/core/helpers'\nimport { BaseModel } from '@adonisjs/lucid/orm'\nimport { Billable } from '@foadonis/shopkeeper/mixins'\n\nexport default class User extends compose(BaseModel, Billable) {\n  taxRates(): string[] {\n    return ['txr_id']\n  }\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { compose } from '@adonisjs/core/helpers'\nimport { BaseModel } from '@adonisjs/lucid/orm'\nimport { Billable } from '@foadonis/shopkeeper/mixins'\n\nexport default class User extends compose(BaseModel, Billable) {\n  priceTaxRates(): Record<string, string[]> {\n    return {\n      price_monthly: ['txr_id'],\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Passing Custom Options to Stripe Charge Creation\nDESCRIPTION: Example of using the charge method with additional options passed to the underlying Stripe API. The third parameter accepts an object with custom options for the charge creation.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/shopkeeper/single-charges.mdx#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nawait user.charge(100, paymentMethod, {\n  custom_option: value,\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Stripe API Keys in Environment File\nDESCRIPTION: Configuration for Stripe API keys in the .env file. These keys are required for connecting to Stripe's API and securing webhook endpoints, especially in production environments.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/shopkeeper/getting-started.mdx#2025-04-19_snippet_4\n\nLANGUAGE: ini\nCODE:\n```\nSTRIPE_KEY=your-stripe-key\nSTRIPE_SECRET=your-stripe-secret\nSTRIPE_WEBHOOK_SECRET=your-stripe-webhook-secret\n```\n\n----------------------------------------\n\nTITLE: Creating a PubSub Instance\nDESCRIPTION: Creates a basic PubSub instance using GraphQL Yoga subscription package that will be used for subscription handling in the application.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/graphql/subscriptions.mdx#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createPubSub } from '@graphql-yoga/subscription'\n\nexport default createPubSub()\n```\n\n----------------------------------------\n\nTITLE: Confirming Card Setup with Stripe.js for Subscriptions\nDESCRIPTION: JavaScript code that handles the verification of card details and retrieval of payment method identifier using Stripe's confirmCardSetup method. This is used for saving payment methods for future subscription charges.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/shopkeeper/payment-methods.mdx#2025-04-19_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst cardHolderName = document.getElementById('card-holder-name')\nconst cardButton = document.getElementById('card-button')\nconst clientSecret = cardButton.dataset.secret\n\ncardButton.addEventListener('click', async (e) => {\n  const { setupIntent, error } = await stripe.confirmCardSetup(clientSecret, {\n    payment_method: {\n      card: cardElement,\n      billing_details: { name: cardHolderName.value },\n    },\n  })\n\n  if (error) {\n    // Display \"error.message\" to the user...\n  } else {\n    // The card has been verified successfully...\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Scalars to Schema\nDESCRIPTION: Shows how to extend schema capabilities by adding custom scalar types through the scalarsMap configuration option.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/graphql/(references)/configuration.mdx#2025-04-19_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@foadonis/graphql'\nimport MyCustomScalar from '#graphql/scalars/my_custom_scalar.ts'\n\nexport default defineConfig({\n  scalarsMap: [MyCustomScalar],\n})\n```\n\n----------------------------------------\n\nTITLE: Checking for Default Payment Method in TypeScript\nDESCRIPTION: Example of checking if a customer has a default payment method using the Shopkeeper library. The hasDefaultPaymentMethod method returns a boolean indicating whether the customer has a default payment method set.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/shopkeeper/payment-methods.mdx#2025-04-19_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nif (user.hasDefaultPaymentMethod()) {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Trial End Date in AdonisJS\nDESCRIPTION: Demonstrates how to get a user's trial ending date using the 'trialEndsAt' method. This returns a DateTime instance if the user is on a trial, or null if they're not. Optionally accepts a subscription type parameter.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/shopkeeper/subscriptions/subscription-trials.mdx#2025-04-19_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nif (user.onTrial()) {\n  const trialEndsAt = await user.trialEndsAt('main')\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Usage Records in Edge Template\nDESCRIPTION: Edge template code for iterating and displaying subscription usage records including period details and total usage.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/shopkeeper/subscriptions/page.mdx#2025-04-19_snippet_53\n\nLANGUAGE: edge\nCODE:\n```\n@each(usageRecord in usageRecords)\n  - Period Starting: {{ usageRecord.period.start }} \n  - Period Ending: {{ usageRecord.period.end }} \n  - Total Usage: {{ usageRecord.total_usage }}\n@end\n```\n\n----------------------------------------\n\nTITLE: Creating a Multi-Item Invoice Using Tab Method\nDESCRIPTION: Example of creating an invoice for multiple items by adding them to the customer's tab and then invoicing them. This demonstrates charging for different products in a single invoice.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/shopkeeper/single-charges.mdx#2025-04-19_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nawait user.tabPrice('price_tshirt', 5)\nawait user.tabPrice('price_mug', 2)\nawait user.invoice()\n```\n\n----------------------------------------\n\nTITLE: Finding Promotion Codes\nDESCRIPTION: Demonstrates how to find promotion codes by their customer-facing code.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/shopkeeper/subscriptions/page.mdx#2025-04-19_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst promotionCode = await user.findPromotionCode('SUMMERSALE')\n\n// Find an active promotion code ID by its customer facing code...\nconst promotionCode = await user.findActivePromotionCode('SUMMERSALE')\n```\n\n----------------------------------------\n\nTITLE: Updating Quantity for Multi-Product Subscriptions in TypeScript\nDESCRIPTION: Shows how to increment the quantity for a specific product in a multi-product subscription.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/shopkeeper/subscriptions/page.mdx#2025-04-19_snippet_29\n\nLANGUAGE: typescript\nCODE:\n```\nawait subscription.incrementQuantity(1, 'price_chat')\n```\n\n----------------------------------------\n\nTITLE: Finding Specific Payment Method in TypeScript\nDESCRIPTION: Example of finding a specific payment method by its ID using the Shopkeeper library. The findPaymentMethod method retrieves a single payment method that matches the given ID.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/shopkeeper/payment-methods.mdx#2025-04-19_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nconst paymentMethod = user.findPaymentMethod(paymentMethodId)\n```\n\n----------------------------------------\n\nTITLE: Customizing Searchable Data in AdonisJS Model with Magnify\nDESCRIPTION: Shows how to override the default searchable data by implementing the toSearchableObject method in a model.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/magnify/advanced.mdx#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { compose } from \"@adonisjs/core/helpers\";\nimport { BaseModel, column } from \"@adonisjs/lucid/orm\";\nimport { Searchable } from \"@foadonis/magnify\";\n\nexport default class Post extends compose(BaseModel, Searchable) {\n  @column({ isPrimary: true })\n  declare id: string;\n\n  @column()\n  declare title: string;\n\n  toSearchableObject() {\n    return {\n      id: this.id,\n      title: this.title,\n      tags: [\"Magnify\", \"Adonis\"],\n    };\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Customer Balance Transactions in Stripe with TypeScript\nDESCRIPTION: Demonstrates how to retrieve and process customer balance transactions using the balanceTransactions method.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/shopkeeper/customers.mdx#2025-04-19_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n// Retrieve all transactions...\nconst transactions = await user.balanceTransactions()\n\nfor (const transaction of transactions) {\n  const amount = transaction.amount() // $2.31\n\n  // Retrieve the related invoice when available...\n  const invoice = await transaction.invoice()\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Enum Types with TypeScript Enum\nDESCRIPTION: Demonstrates how to use a TypeScript enum to define allowed values for a parameter. This approach provides better type safety and code organization when defining enum values for OpenAPI schema.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/openapi/types-and-parameters.mdx#2025-04-19_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n// @noErrors\nimport { ApiQuery } from '@foadonis/openapi/decorators'\n\nenum ApiEnum {\n  GRAPHQL = \"graphql\",\n  OPENAPI = \"openapi\"\n}\n\n@ApiQuery({ name: \"api\", enum: ApiEnum })\n```\n\n----------------------------------------\n\nTITLE: HTML Form for Single Charge Payment Capture\nDESCRIPTION: HTML markup for a form that captures payment details for a one-time charge using Stripe Elements. Similar to the subscription form but designed for single payment processing.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/shopkeeper/payment-methods.mdx#2025-04-19_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<input id=\"card-holder-name\" type=\"text\" />\n\n<!-- Stripe Elements Placeholder -->\n<div id=\"card-element\"></div>\n\n<button id=\"card-button\">Process Payment</button>\n```\n\n----------------------------------------\n\nTITLE: Verifying Subscription to Specific Price in TypeScript\nDESCRIPTION: Illustrates how to check if a user's subscription corresponds to a particular price ID.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/shopkeeper/subscriptions/page.mdx#2025-04-19_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nif (await user.subscribedToPrice('price_basic_monthly', 'default'))\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Finding Specific Tax ID for Customer in Stripe with TypeScript\nDESCRIPTION: Illustrates how to retrieve a specific tax ID for a customer by its identifier.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/shopkeeper/customers.mdx#2025-04-19_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nconst taxId = await user.findTaxId('txi_belgium')\n```\n\n----------------------------------------\n\nTITLE: Applying Coupon to Subscription\nDESCRIPTION: Creates a subscription with a coupon code applied for discount.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/shopkeeper/subscriptions/page.mdx#2025-04-19_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nawait user.newSubscription('default', 'price_monthly').withCoupon('code').create(paymentMethod)\n```\n\n----------------------------------------\n\nTITLE: Specifying Explicit Types for Complex Properties\nDESCRIPTION: Shows how to explicitly define types for properties when automatic type inference isn't sufficient. This is necessary for complex types that might be serialized in specific ways or when TypeScript can't determine the type automatically.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/openapi/types-and-parameters.mdx#2025-04-19_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// @noErrors\nimport { ApiProperty } from '@foadonis/openapi/decorators'\n\nexport class Post {\n  @ApiProperty({ type: CustomSchema }) // [!code highlight]\n  customData: any\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Subscription with Stripe Payment Method\nDESCRIPTION: Creates a new subscription with a payment method ID, setting up recurring billing for a user.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/shopkeeper/subscriptions/page.mdx#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nrouter.get('/update-payment-method', ({ request }) => {\n  const paymentMethodId = request.get('paymentMethodId')\n\n  const subscription = await user\n    .newSubscription('default', 'price_monthly')\n    .create(paymentMethodId)\n\n  // ...\n})\n```\n\n----------------------------------------\n\nTITLE: Decorating AdonisJS Controller with OpenAPI Metadata\nDESCRIPTION: Example of adding OpenAPI decorators to an AdonisJS controller. This adds metadata like operation summaries, response types, and request body definitions for API documentation.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/openapi/getting-started.mdx#2025-04-19_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\n// @noErrors\nimport Post from '#models/post'\nimport { createPostValidator } from '#validators/post'\nimport { ApiOperation, ApiBody, ApiResponse } from '@foadonis/openapi/decorators'\n\nexport default class PostsController {\n  @ApiOperation({ summary: 'List all Posts' }) // [!code highlight]\n  @ApiResponse({ type: [Post] }) // [!code highlight]\n  index() {\n    // ...your logic\n  }\n\n  @ApiOperation({ summary: 'Create a new Post' }) // [!code highlight]\n  @ApiBody({ type: () => createPostValidator }) // [!code highlight]\n  @ApiResponse({ type: Post }) // [!code highlight]\n  create() {}\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Stripe Elements in HTML/JavaScript\nDESCRIPTION: JavaScript code embedded in HTML that initializes Stripe.js and creates a card element. This code sets up the foundation for capturing credit card details securely using Stripe Elements.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/shopkeeper/payment-methods.mdx#2025-04-19_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://js.stripe.com/v3/\"></script>\n\n<script>\n  const stripe = Stripe('stripe-public-key')\n\n  const elements = stripe.elements()\n  const cardElement = elements.create('card')\n\n  cardElement.mount('#card-element')\n</script>\n```\n\n----------------------------------------\n\nTITLE: Tax Exemption Status Checking\nDESCRIPTION: Methods for checking tax exemption status of a customer via Stripe API.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/shopkeeper/subscriptions/page.mdx#2025-04-19_snippet_55\n\nLANGUAGE: typescript\nCODE:\n```\nawait user.isTaxExempt()\nawait user.isNotTaxExempt()\nawait user.reverseChargeApplies()\n```\n\n----------------------------------------\n\nTITLE: Deleting Payment Method by ID in TypeScript\nDESCRIPTION: Example of deleting a payment method by its ID using the Shopkeeper library. The deletePaymentMethod method removes the specified payment method from the customer's account.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/shopkeeper/payment-methods.mdx#2025-04-19_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nawait user.deletePaymentMethod('pm_visa')\n```\n\n----------------------------------------\n\nTITLE: Configuring Customer Model in Shopkeeper\nDESCRIPTION: Configuration for defining the User model as the Customer model in the Shopkeeper configuration file. This tells Shopkeeper which model represents billable customers in your application.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/shopkeeper/getting-started.mdx#2025-04-19_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// title: config/shopkeeper.ts\nimport { defineConfig } from '@foadonis/shopkeeper'\n\nexport default defineConfig({\n  customerModel: () => import('#models/user')\n  ...\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Authentication for Controller in AdonisJS\nDESCRIPTION: This snippet demonstrates how to use the @ApiBasicAuth decorator to implement basic authentication for a controller class in AdonisJS.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/openapi/security.mdx#2025-04-19_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ApiBasicAuth } from '@foadonis/openapi/decorators'\n\n@ApiBasicAuth()\nexport default class UsersController {}\n```\n\n----------------------------------------\n\nTITLE: Configuring Advanced Schema Properties with OpenAPI Options\nDESCRIPTION: Extends the Post class schema by adding additional OpenAPI Schema options to the @ApiProperty decorators. This shows how to set examples, minimum and maximum length constraints for schema properties.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/openapi/types-and-parameters.mdx#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ApiProperty } from '@foadonis/openapi/decorators'\n\nexport class Post {\n  @ApiProperty({\n    example: 17,\n  })\n  declare id: number\n\n  @ApiProperty({\n    minLength: 6,\n    maxLength: 255,\n    example: 'How to create REST APIs with Adonis',\n  })\n  declare title: string\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Index Name in AdonisJS Model with Magnify\nDESCRIPTION: Demonstrates how to override the default index name for a model by implementing the $indexName getter function.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/magnify/advanced.mdx#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { compose } from \"@adonisjs/core/helpers\";\nimport { BaseModel, column } from \"@adonisjs/lucid/orm\";\nimport { Searchable } from \"@foadonis/magnify\";\n\nexport default class Post extends compose(BaseModel, Searchable) {\n  @column({ isPrimary: true })\n  declare id: string;\n\n  @column()\n  declare title: string;\n\n  static get $indexName(): string {\n    return \"different_index\";\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Swapping Price and Skipping Trial in TypeScript\nDESCRIPTION: Shows how to change a subscription's price while canceling any ongoing trial period.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/shopkeeper/subscriptions/page.mdx#2025-04-19_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\nconst subscription = await user.subscription('default')\n\nawait subscriptions.skipTrial().swap('price_yearly')\n```\n\n----------------------------------------\n\nTITLE: Deleting All Payment Methods in TypeScript\nDESCRIPTION: Example of deleting all payment methods for a customer using the Shopkeeper library. The deletePaymentMethods method removes all payment methods from the customer's account.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/shopkeeper/payment-methods.mdx#2025-04-19_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nawait user.deletePaymentMethods()\n```\n\n----------------------------------------\n\nTITLE: Configuring Cache Driver for Maintenance Mode in AdonisJS\nDESCRIPTION: Configuration for the cache-based maintenance mode driver which is recommended for distributed architectures. This driver relies on the @adonisjs/cache package to manage maintenance state.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/maintenance/drivers.mdx#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig, drivers } from '@foadonis/maintenance'\n\nexport default defineConfig({\n  default: 'cache',\n  drivers: {\n    cache: drivers.cache(),\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Array Types in OpenAPI Decorators\nDESCRIPTION: Demonstrates how to specify array types in OpenAPI decorators by wrapping the base type in an array. This can be used with both @ApiProperty and @ApiBody decorators to define collections of objects.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/openapi/types-and-parameters.mdx#2025-04-19_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// @noErrors\nimport { ApiProperty, ApiBody } from '@foadonis/openapi/decorators'\n\n@ApiProperty({ type: [Post] })\n@ApiBody({ type: [User] })\n```\n\n----------------------------------------\n\nTITLE: Creating Generic PaginatedResponse Mixin in TypeScript\nDESCRIPTION: This snippet demonstrates how to create a generic PaginatedResponse mixin using TypeScript. It uses decorators from @foadonis/openapi to define API properties for pagination metadata and items.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/openapi/(advanced)/generic-types.mdx#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ApiProperty, ApiBody } from '@foadonis/openapi/decorators'\n\nfunction PaginatedResponse<TItem extends object>(Item: new (...args: any[]) => TItem) {\n  abstract class Pagination {\n    @ApiProperty()\n    declare total: number\n\n    @ApiProperty({ type: [Item] })\n    declare items: TItem[]\n  }\n}\n\nclass RecipesPaginatedResponse extends PaginatedResponse(Recipe) {}\n\nclass UsersController {\n  @ApiBody({ type: RecipesPaginatedResponse })\n  index() {\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Decrypting Environment Files in AdonisJS\nDESCRIPTION: Shows how to decrypt and log the contents of an encrypted dotenv file using the private key stored in `.env.keys`. This command can be used with different environment configurations.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/crypt/commands.mdx#2025-04-19_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nnode ace crypt:get # Decrypt .env\nnode ace crypt:get --env production # Decrypt .env.production\nNODE_ENV=staging node ace crypt:get # Decrypt .env.staging\n```\n\n----------------------------------------\n\nTITLE: Checking Incomplete Payment Status in TypeScript\nDESCRIPTION: Demonstrates how to verify if a subscription has an incomplete payment.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/shopkeeper/subscriptions/page.mdx#2025-04-19_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nif (await user.hasIncompletePayment('default')) {\n  // ...\n}\n\nconst subscription = await user.subscription('default')\nif (subscription.hasIncompletePayment()) {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Apollo Server Plugins\nDESCRIPTION: Example of extending Apollo Server capabilities by adding plugins through configuration, specifically demonstrating usage reporting plugin setup.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/graphql/(references)/configuration.mdx#2025-04-19_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@foadonis/graphql'\nimport { ApolloServerPluginUsageReporting } from '@apollo/server/plugin/usageReporting'\nimport MyCustomScalar from '#graphql/scalars/my_custom_scalar.ts'\n\nexport default defineConfig({\n  apollo: {\n    plugins: [\n      ApolloServerPluginUsageReporting({\n        sendVariableValues: { all: true },\n      }),\n    ],\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Typing the PubSub Instance for Autocomplete and Type Safety\nDESCRIPTION: Enhances the PubSub instance with TypeScript typings to provide autocompletion and type safety when publishing and subscribing to topics.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/graphql/subscriptions.mdx#2025-04-19_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createPubSub } from '@graphql-yoga/subscription'\n\nexport default createPubSub<{\n  'recipe:created': [Recipe]\n  'recipe:deleted': [Recipe]\n}>()\n```\n\n----------------------------------------\n\nTITLE: Executing Magnify Sync Index Settings Command in AdonisJS\nDESCRIPTION: The magnify:sync-index-settings command synchronizes your Search Engine index settings with the current state of your models. This ensures that your Meilisearch configuration matches your model definitions.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/magnify/(references)/commands.mdx#2025-04-19_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnode ace magnify:sync-index-settings\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Security Mechanism for Controller in AdonisJS\nDESCRIPTION: This snippet shows how to use the @ApiSecurity decorator to specify a basic security mechanism for a controller class in AdonisJS.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/openapi/security.mdx#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ApiSecurity } from '@foadonis/openapi/decorators'\n\n@ApiSecurity('basic')\nexport default class UsersController {}\n```\n\n----------------------------------------\n\nTITLE: Building a Custom Search Engine with Strategy Pattern in TypeScript\nDESCRIPTION: This code defines a SearchEngine class that supports multiple search strategies. It implements an interface-based design that allows different search providers to be used interchangeably.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/magnify/(advanced)/custom-search-engine.mdx#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface SearchOptions {\n  // Define the common options for all search providers\n  query: string\n  fields?: string[]\n  page?: number\n  perPage?: number\n  // ... any other options\n}\n\nexport interface SearchResult<T> {\n  data: T[]\n  meta: {\n    total: number\n    perPage: number\n    currentPage: number\n    lastPage: number\n    // ... any other meta information\n  }\n}\n\nexport interface SearchProvider<T> {\n  search(options: SearchOptions): Promise<SearchResult<T>>\n}\n\nexport class SearchEngine<T> {\n  private provider: SearchProvider<T>\n\n  constructor(provider: SearchProvider<T>) {\n    this.provider = provider\n  }\n\n  setProvider(provider: SearchProvider<T>) {\n    this.provider = provider\n    return this\n  }\n\n  async search(options: SearchOptions): Promise<SearchResult<T>> {\n    return this.provider.search(options)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying Ended Subscription in TypeScript\nDESCRIPTION: Illustrates how to check if a subscription has ended and is no longer in its grace period.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/shopkeeper/subscriptions/page.mdx#2025-04-19_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nconst subscription = await user.subscription('default')\nif (subscription.ended()) {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Example of .env File with Encrypted Variable\nDESCRIPTION: Example of the .env file containing both the public encryption key and an encrypted database password.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/crypt/getting_started.mdx#2025-04-19_snippet_6\n\nLANGUAGE: dotenv\nCODE:\n```\n#/---------------------[CRYPT PUBLIC KEY]-----------------------/\n#/             public-key encryption for .env files             /\n#/   [how it works](https://friendsofadonis.com/docs/crypt)     /\n#/--------------------------------------------------------------/\nCRYPT_PUBLIC_KEY=\"02caef368300cb9244d00b64deab85cd33c68b7e5e097b9ac73b0ba8125579f099\"\n\nDB_USER=adonis\nDB_DATABASE=adonis\nDB_PASSWORD=\"encrypted:BLkwNagdhoSpSAyRR1og...\"\n```\n\n----------------------------------------\n\nTITLE: Defining PaginatedResponseMeta Schema in TypeScript\nDESCRIPTION: This snippet defines the schema for the meta property of a PaginatedResponse. It uses ApiProperty decorators to specify the properties of the pagination metadata.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/openapi/(advanced)/generic-types.mdx#2025-04-19_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ApiProperty } from '@foadonis/openapi/decorators'\n\nexport class PaginatedResponseMeta {\n  @ApiProperty()\n  declare total: number\n\n  @ApiProperty()\n  declare perPage: number\n\n  @ApiProperty()\n  declare currentPage: number\n\n  @ApiProperty()\n  declare lastPage: number\n\n  @ApiProperty()\n  declare firstPage: number\n\n  @ApiProperty()\n  declare firstPageUrl: string\n\n  @ApiProperty()\n  declare lastPageUrl: string\n\n  @ApiProperty({ required: false })\n  declare nextPageUrl?: string\n\n  @ApiProperty({ required: false })\n  declare previousPageUrl?: string\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Encrypted Credentials with Crypt in AdonisJS\nDESCRIPTION: Command to encrypt a database password using the Crypt tool. This stores the encrypted value in your environment file, allowing secure credential management.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/crypt/index.mdx#2025-04-19_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnode ace crypt:set DB_PASSWORD mysupersecret\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Security Scheme in AdonisJS OpenAPI Config\nDESCRIPTION: This code defines a basic HTTP authentication scheme in the OpenAPI configuration file for AdonisJS.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/openapi/security.mdx#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@foadonis/openapi'\n\nexport default defineConfig({\n  document: {\n    components: {\n      securitySchemes: {\n        basic: {\n          type: 'http',\n          scheme: 'basic',\n        },\n      },\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Cancelling Specific Subscription Type in Adonis.js\nDESCRIPTION: Demonstrates how to cancel a specific subscription type using the cancel method on the subscription object in Adonis.js.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/shopkeeper/subscriptions/page.mdx#2025-04-19_snippet_45\n\nLANGUAGE: typescript\nCODE:\n```\nawait user.subscription('swimming').cancel()\n```\n\n----------------------------------------\n\nTITLE: Checking Grace Period Status in TypeScript\nDESCRIPTION: Shows how to determine if a canceled subscription is still in its grace period.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/shopkeeper/subscriptions/page.mdx#2025-04-19_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nconst subscription = await user.subscription('default')\nif (subscription.onGracePeriod()) {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Public Key Configuration in .env File\nDESCRIPTION: Example of the .env file containing the public encryption key that can be safely committed to source control.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/crypt/getting_started.mdx#2025-04-19_snippet_4\n\nLANGUAGE: dotenv\nCODE:\n```\n#/---------------------[CRYPT PUBLIC KEY]-----------------------/\n#/             public-key encryption for .env files             /\n#/   [how it works](https://friendsofadonis.com/docs/crypt)     /\n#/--------------------------------------------------------------/\nCRYPT_PUBLIC_KEY=\"02caef368300cb9244d00b64deab85cd33c68b7e5e097b9ac73b0ba8125579f099\"\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Recipe Model in AdonisJS\nDESCRIPTION: Initial implementation of a Recipe model using Lucid ORM with basic properties.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/graphql/getting-started.mdx#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BaseModel, column } from '@adonisjs/lucid/orm'\nimport { DateTime } from 'luxon'\n\nexport default class Recipe extends BaseModel {\n  @column({ isPrimary: true })\n  declare id: string\n\n  @column()\n  declare title: string\n\n  @column()\n  declare description: string | null\n\n  @column()\n  declare ingredients: string[]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing OAuth2 Authentication for Controller in AdonisJS\nDESCRIPTION: This snippet demonstrates how to use the @ApiOAuth2 decorator to implement OAuth2 authentication with specific scopes for a controller class in AdonisJS.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/openapi/security.mdx#2025-04-19_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ApiOAuth2 } from '@foadonis/openapi/decorators'\n\n@ApiOAuth2('users:read', 'global:read')\nexport default class UsersController {}\n```\n\n----------------------------------------\n\nTITLE: Creating a Multi-Topic Subscription Resolver\nDESCRIPTION: Implements a GraphQL subscription resolver that listens to multiple topics ('recipe:created' and 'recipe:deleted') and returns the payload when either event occurs.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/graphql/subscriptions.mdx#2025-04-19_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Resolver, Subscription } from '@foadonis/graphql'\nimport Recipe from '#models/recipe'\nimport RecipeEvent from '#graphql/schemas/recipe_event'\n\n@Resolver()\nexport default class RecipeResolver {\n  @Subscription({\n    topics: ['recipe:created', 'recipe:deleted'],\n  })\n  recipe(@Root() payload: RecipeEvent): RecipeEvent {\n    return payload\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Canceled Subscription Status in TypeScript\nDESCRIPTION: Demonstrates how to verify if a user has canceled their subscription.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/shopkeeper/subscriptions/page.mdx#2025-04-19_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nconst subscription = await user.subscription('default')\nif (subscription.canceled()) {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Tax ID for Customer in Stripe with TypeScript\nDESCRIPTION: Shows how to delete a tax ID for a customer using the deleteTaxId method.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/shopkeeper/customers.mdx#2025-04-19_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nawait user.deleteTaxId('eu_vat')\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Documentation\nDESCRIPTION: A structured changelog documenting the version history and changes made to the @foadonis/shopkeeper package, including pull request references, commit hashes, and descriptions of changes.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/packages/shopkeeper/CHANGELOG.md#2025-04-19_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# @foadonis/shopkeeper\n\n## 0.1.5\n\n### Patch Changes\n\n- [#25](https://github.com/FriendsOfAdonis/FriendsOfAdonis/pull/25) [`32de549`](https://github.com/FriendsOfAdonis/FriendsOfAdonis/commit/32de54973ce8cc95e9e961b07879051f7d0f52ab) Thanks [@kerwanp](https://github.com/kerwanp)! - Add pretty configure success log\n\n## 0.1.4\n\n### Patch Changes\n\n- [`22d5326`](https://github.com/FriendsOfAdonis/FriendsOfAdonis/commit/22d532670e889dc39fd86b7a968ee940a416f7d6) Thanks [@kerwanp](https://github.com/kerwanp)! - Fix build pipeline to properly include commands manifest and stubs\n\n## 0.1.3\n\n### Patch Changes\n\n- [#20](https://github.com/FriendsOfAdonis/FriendsOfAdonis/pull/20) [`e3de566`](https://github.com/FriendsOfAdonis/FriendsOfAdonis/commit/e3de566a8a6c7ef10d9f7326be90a910a1c8565c) Thanks [@kerwanp](https://github.com/kerwanp)! - Fix type reference to @poppinss/hooks\n\n- [#20](https://github.com/FriendsOfAdonis/FriendsOfAdonis/pull/20) [`e3de566`](https://github.com/FriendsOfAdonis/FriendsOfAdonis/commit/e3de566a8a6c7ef10d9f7326be90a910a1c8565c) Thanks [@kerwanp](https://github.com/kerwanp)! - Migrate repository to Yarn 4\n\n## 0.1.2\n\n### Patch Changes\n\n- [#16](https://github.com/FriendsOfAdonis/FriendsOfAdonis/pull/16) [`dd889cc`](https://github.com/FriendsOfAdonis/FriendsOfAdonis/commit/dd889cca8b7dddfbb7a1d476076d2895b7274dd5) Thanks [@kerwanp](https://github.com/kerwanp)! - upgrade dependencies\n\n## 0.1.1\n\n### Patch Changes\n\n- [#8](https://github.com/FriendsOfAdonis/FriendsOfAdonis/pull/8) [`3d63454`](https://github.com/FriendsOfAdonis/FriendsOfAdonis/commit/3d63454a855df620353808648b02a57ba15041f2) Thanks [@kerwanp](https://github.com/kerwanp)! - fix builds\n\n## 0.1.0\n\n### Minor Changes\n\n- [#2](https://github.com/FriendsOfAdonis/FriendsOfAdonis/pull/2) [`03cfc38`](https://github.com/FriendsOfAdonis/FriendsOfAdonis/commit/03cfc3878a2fe215be751160d7996441698e5298) Thanks [@kerwanp](https://github.com/kerwanp)! - Migrate to monorepository\n```\n\n----------------------------------------\n\nTITLE: Using Lucid Parser to Parse a Model in TypeScript\nDESCRIPTION: Demonstrates how to import and use the parseModel function from the Lucid Parser package to analyze a model file.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/lucid-parser/index.mdx#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { parseModel } from '@foadonis/lucid-parser'\n\nconst { columns, computed } = parseModel(import.meta.resolve('#models/user'))\n```\n\n----------------------------------------\n\nTITLE: Performing Search Query on Post Model in TypeScript\nDESCRIPTION: This snippet demonstrates how to use the search method provided by Magnify to perform a full-text search on the Post model. It searches for posts containing 'Adonis' and limits the results to 10 entries.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/magnify/index.mdx#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport Post from \"#models/post\";\n\nconst posts = await Post.search(\"Adonis\").take(10).get();\n```\n\n----------------------------------------\n\nTITLE: Promotion Codes Integration\nDESCRIPTION: Demonstrates how to enable user-redeemable promotion codes in checkout process.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/shopkeeper/checkout.mdx#2025-04-19_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nrouter.get('/product-checkout', ({ response, auth }) => {\n  const user = auth.getUserOrFail()\n  const checkout = await user.allowPromotionCodes().checkout('price_tshirt')\n\n  response.redirect().status(303).toPath(checkout.session.url)\n})\n```\n\n----------------------------------------\n\nTITLE: Generating Payment Confirmation Link in Edge Template\nDESCRIPTION: Shows how to create a link for confirming an incomplete payment in an Edge template.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/shopkeeper/subscriptions/page.mdx#2025-04-19_snippet_20\n\nLANGUAGE: edge\nCODE:\n```\n<a href=\"{{ route('shopkeeper.payment', await subscription.latestPayment().then(lp => id)) }}\">\n  Please confirm your payment.\n</a>\n```\n\n----------------------------------------\n\nTITLE: Installing Foadonis Crypt Package with Ace CLI\nDESCRIPTION: Command to install and configure the @foadonis/crypt package using the AdonisJS Ace CLI.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/crypt/getting_started.mdx#2025-04-19_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnode ace add @foadonis/crypt\n```\n\n----------------------------------------\n\nTITLE: Checkout with Custom Success and Cancel URLs\nDESCRIPTION: Implements checkout flow with custom redirect URLs for successful and cancelled transactions.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/shopkeeper/checkout.mdx#2025-04-19_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nrouter.get('/product-checkout', async ({ auth, response }) => {\n  const user = auth.getUserOrFail()\n  const checkout = await user.checkout(\n    { price_tshirt: 15 },\n    {\n      success_url: route('checkout.success'),\n      cancel_url: route('checkout.cancel'),\n    }\n  )\n\n  response.redirect().status(303).toPath(checkout.session.url)\n})\n```\n\n----------------------------------------\n\nTITLE: Installing Meilisearch Package for AdonisJS\nDESCRIPTION: Commands to install the Meilisearch package and its types in an AdonisJS project using npm.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/magnify/engines/meilisearch.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @meilisearch/instant-meilisearch\\nnpm i -D @types/meilisearch\n```\n\n----------------------------------------\n\nTITLE: Adding Price Without Proration in Adonis.js\nDESCRIPTION: Demonstrates how to add a new price to a subscription without prorating charges using the noProrate method chained to the addPrice method in Adonis.js.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/shopkeeper/subscriptions/page.mdx#2025-04-19_snippet_39\n\nLANGUAGE: typescript\nCODE:\n```\nawait subscription.noProrate().addPrice('price_chat')\n```\n\n----------------------------------------\n\nTITLE: Configuring Subscription Status Handling in TypeScript\nDESCRIPTION: Illustrates how to configure Shopkeeper to keep past due and incomplete subscriptions active.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/shopkeeper/subscriptions/page.mdx#2025-04-19_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@foadonis/shopkeeper'\n\nexport default defineConfig({\n  keepPastDueSubscriptionsActive: true,\n  keepIncompleteSubscriptionsActive: true,\n  ...\n})\n```\n\n----------------------------------------\n\nTITLE: Updating .gitignore for Secure Key Management\nDESCRIPTION: Updates to the .gitignore file to ensure private keys aren't committed while allowing encrypted environment files to be shared.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/crypt/getting_started.mdx#2025-04-19_snippet_8\n\nLANGUAGE: txt\nCODE:\n```\n// [!code --]\n.env\n// [!code ++]\n.env.*.local\n// [!code ++]\n.env.keys\n```\n\n----------------------------------------\n\nTITLE: Using Raw OpenAPI Schema Definitions\nDESCRIPTION: Shows how to define a raw OpenAPI schema using the schema option. This example demonstrates creating a complex object with references to other schemas using the getSchemaPath helper function.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/openapi/types-and-parameters.mdx#2025-04-19_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// @noErrors\nimport { ApiProperty } from '@foadonis/openapi/decorators'\nimport { getSchemaPath } from '@foadonis/openapi'\n\n@ApiProperty({\n  schema: {\n    type: 'object',\n    properties: {\n      user: {\n        $ref: getSchemaPath(User)\n      }\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Markdown Title Definition\nDESCRIPTION: Basic markdown frontmatter defining the page title as 'Typesense'\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/magnify/engines/typesense.mdx#2025-04-19_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Typesense\n---\n```\n\n----------------------------------------\n\nTITLE: Updating Quantity Without Proration in TypeScript\nDESCRIPTION: Demonstrates how to change a subscription's quantity without prorating the charges.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/shopkeeper/subscriptions/page.mdx#2025-04-19_snippet_28\n\nLANGUAGE: typescript\nCODE:\n```\nawait subscription.noProrate().updateQuantity(5)\n```\n\n----------------------------------------\n\nTITLE: Creating a Single Topic Subscription Resolver\nDESCRIPTION: Implements a GraphQL subscription resolver that listens to a single topic ('recipe:created') and returns the payload when a new recipe is created.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/graphql/subscriptions.mdx#2025-04-19_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Resolver, Subscription } from '@foadonis/graphql'\nimport Recipe from '#graphql/recipe'\n\n@Resolver()\nexport default class RecipeResolver {\n  @Subscription({\n    topics: 'recipe:created',\n  })\n  recipeCreated(@Root() payload: Recipe): Recipe {\n    return payload\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Lucid Parser via npm\nDESCRIPTION: Command to install the Lucid Parser package using npm.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/lucid-parser/index.mdx#2025-04-19_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @foadonis/lucid-parser\n```\n\n----------------------------------------\n\nTITLE: Displaying Changelog Entry for @foadonis/magnify in Markdown\nDESCRIPTION: This snippet shows the format of a changelog entry, including version number, change type, pull request reference, commit hash, and description of changes.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/packages/magnify/CHANGELOG.md#2025-04-19_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n## 0.2.5\n\n### Patch Changes\n\n- [#25](https://github.com/FriendsOfAdonis/FriendsOfAdonis/pull/25) [`32de549`](https://github.com/FriendsOfAdonis/FriendsOfAdonis/commit/32de54973ce8cc95e9e961b07879051f7d0f52ab) Thanks [@kerwanp](https://github.com/kerwanp)! - Add pretty configure success log\n```\n\n----------------------------------------\n\nTITLE: Updating Default Payment Method in TypeScript\nDESCRIPTION: Example of updating a customer's default payment method using the Shopkeeper library. The updateDefaultPaymentMethod method sets the specified payment method as the customer's default.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/shopkeeper/payment-methods.mdx#2025-04-19_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nawait user.updateDefaultPaymentMethod(paymentMethod)\n```\n\n----------------------------------------\n\nTITLE: Installing GraphQL Package for AdonisJS\nDESCRIPTION: Command to install the GraphQL package for AdonisJS using the Ace CLI.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/graphql/getting-started.mdx#2025-04-19_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnode ace add @foadonis/graphql\n```\n\n----------------------------------------\n\nTITLE: Removing Price from Subscription in Adonis.js\nDESCRIPTION: Demonstrates how to remove a price from an existing subscription using the removePrice method in Adonis.js. Note that you cannot remove the last price on a subscription.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/shopkeeper/subscriptions/page.mdx#2025-04-19_snippet_35\n\nLANGUAGE: typescript\nCODE:\n```\nawait subscription.removePrice('price_chat')\n```\n\n----------------------------------------\n\nTITLE: Registering PubSub in GraphQL Configuration\nDESCRIPTION: Configuration code to register the PubSub instance in the GraphQL configuration file of the Adonis application.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/graphql/subscriptions.mdx#2025-04-19_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport pubsub from '#graphql/pubsub'\nimport { defineConfig } from '@foadonis/graphql'\n\nexport default defineConfig({\n  pubSub: pubsub, // [!code highlight]\n})\n```\n\n----------------------------------------\n\nTITLE: Directory Path Reference in Markdown\nDESCRIPTION: Shows the standard path reference for the providers directory where service providers should be placed.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/packages/shopkeeper/providers/README.md#2025-04-19_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# The providers directory\n```\n\n----------------------------------------\n\nTITLE: Setting Trial End Date Using DateTime in AdonisJS\nDESCRIPTION: Creates a subscription with a trial period that ends at a specific date using the 'trialUntil' method with a DateTime instance. This provides more control over when the trial should end compared to using a fixed number of days.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/shopkeeper/subscriptions/subscription-trials.mdx#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nawait user\n  .newSubscription('default', 'price_monthly')\n  .trialUntil(DateTime.now().plus({ days: 10 }))\n  .create(paymentMethod)\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Schema Path\nDESCRIPTION: Demonstrates how to specify a custom file path for the generated GraphQL schema file using path resolution.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/graphql/(references)/configuration.mdx#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport path from 'node:path'\nimport { defineConfig } from '@foadonis/graphql'\n\nexport default defineConfig({\n  emitSchemaFile: path.resolve(import.meta.dirname, '__snapshots__/schema/schema.graphql'),\n  // ...rest of your config\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Maintenance Mode Driver in AdonisJS\nDESCRIPTION: Implementation of a custom maintenance mode driver by extending the MaintenanceDriver class. The custom driver must implement methods to activate, deactivate, check activity status, and retrieve maintenance data.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/maintenance/drivers.mdx#2025-04-19_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// @noErrors\nimport { MaintenanceDriver } from '@foadonis/maintenance'\n\nexport default class CustomMaintenanceDriver extends MaintenanceDriver {\n  public async activate(data: DownPayload): Promise<void> {\n    // Store the data somewhere and enable maintenance\n  }\n\n  public async deactivate(): Promise<void> {\n    // Disable the maintenance mode\n  }\n\n  public async active(): Promise<boolean> {\n    // Returns true if maintenance mode is active\n  }\n\n  public async data(): Promise<DownPayload> {\n    // Returns the maintenance mode data\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Attaching Middlewares to Entire Resolver Class in TypeScript for AdonisJS GraphQL\nDESCRIPTION: This code snippet shows how to apply middlewares to all methods of a resolver class by placing the @UseMiddleware decorator on the class declaration in AdonisJS GraphQL.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/graphql/middlewares.mdx#2025-04-19_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Resolver, UseMiddleware, Query } from '@foadonis/graphql'\nimport PerformanceLoggerMiddleware from '#graphql/middlewares/performance_logger_middleware'\nimport AccessLoggerMiddleware from '#graphql/middlewares/access_logger_middleware'\n\n@UseMiddleware(PerformanceLoggerMiddleware, AccessLoggerMiddleware)\n@Resolver()\nexport default class RecipeResolver {\n  @Query()\n  recipe() {}\n}\n```\n\n----------------------------------------\n\nTITLE: Installing @foadonis/maintenance Package for AdonisJS\nDESCRIPTION: Command to install and configure the @foadonis/maintenance package using the AdonisJS CLI.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/maintenance/getting-started.mdx#2025-04-19_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnode ace add @foadonis/maintenance\n```\n\n----------------------------------------\n\nTITLE: Enabling GraphQL Introspection and Playground\nDESCRIPTION: Configuration for enabling GraphQL introspection and playground features. Note that enabling introspection in production is not recommended for security reasons.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/graphql/(references)/configuration.mdx#2025-04-19_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@foadonis/graphql'\n\nexport default defineConfig({\n  apollo: {\n    playground: true,\n    introspection: true,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Searchable in an Adonis Lucid Model with TypeScript\nDESCRIPTION: This snippet shows how to implement full-text search in an Adonis model by using the Searchable mixin from the @foadonis/magnify package. It defines a Post model with id and title columns that can be searched.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/packages/magnify/README.md#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { compose } from '@adonisjs/core/helpers'\nimport { BaseModel, column } from '@adonisjs/lucid/orm'\nimport { Searchable } from '@foadonis/magnify'\n\nexport default class Post extends compose(BaseModel, Searchable) {\n  @column({ isPrimary: true })\n  declare id: string\n\n  @column()\n  declare title: string\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Simple Search Functionality in AdonisJS\nDESCRIPTION: A basic example of implementing search functionality directly in an application using Lucid ORM's query builder. This demonstrates how to search for posts by title or body content.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/magnify/(advanced)/custom-search-engine.mdx#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { HttpContext } from '@adonisjs/core/http'\n\nexport default class PostsController {\n  /**\n   * Search Posts\n   */\n  async search({ request, view }: HttpContext) {\n    const query = request.input('query', '')\n    \n    const posts = await Post.query()\n      .where('title', 'LIKE', `%${query}%`)\n      .orWhere('body', 'LIKE', `%${query}%`)\n    \n    return view.render('posts/search', { posts, query })\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Development Server for Next.js Application\nDESCRIPTION: Commands to start the development server for a Next.js application using different package managers. The server can be accessed at http://localhost:3000.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/README.md#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n# or\npnpm dev\n# or\nyarn dev\n```\n\n----------------------------------------\n\nTITLE: Running Migrations for Shopkeeper Setup\nDESCRIPTION: Command to run migrations that create necessary database tables for Shopkeeper, including modifications to the users table, and creation of subscriptions and subscription_items tables.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/shopkeeper/getting-started.mdx#2025-04-19_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnode ace migration:run\n```\n\n----------------------------------------\n\nTITLE: Implementing Logging Middleware in TypeScript for AdonisJS GraphQL\nDESCRIPTION: This code snippet demonstrates how to create a logging middleware for GraphQL operations. It logs user access to specific GraphQL fields using the AdonisJS logger.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/graphql/middlewares.mdx#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { inject } from '@adonisjs/core'\nimport { Logger } from '@adonisjs/core/logger'\nimport { NextFn, ResolverData } from '@foadonis/graphql'\n\n@inject()\nexport default class AccessLoggerMiddleware {\n  constructor(private readonly logger: Logger) {}\n\n  use({ context, info }: ResolverData, next: NextFn) {\n    const user = context.auth.user\n    if (user) {\n      this.logger.info(`Access: ${user.fullName} -> ${info.parentType.name}.${info.fieldName}`)\n    }\n\n    return next()\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Subscription with Invoice Email Collection\nDESCRIPTION: Sets up a subscription that sends invoices via email rather than automatic payment collection.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/shopkeeper/subscriptions/page.mdx#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nawait user.newSubscription('default', 'price_monthly').createAndSendInvoice()\n```\n\n----------------------------------------\n\nTITLE: Specifying Search Engine per Model in AdonisJS with Magnify\nDESCRIPTION: Demonstrates how to define a specific search engine for a model when multiple engines are configured.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/magnify/advanced.mdx#2025-04-19_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { compose } from \"@adonisjs/core/helpers\";\nimport { BaseModel, column } from \"@adonisjs/lucid/orm\";\nimport { Searchable } from \"@foadonis/magnify\";\nimport magnify from \"@foadonis/magnify/services/magnify\";\n\nexport default class Post extends compose(BaseModel, Searchable) {\n  @column({ isPrimary: true })\n  declare id: string;\n\n  @column()\n  declare title: string;\n\n  get $searchEngine() {\n    return magnify.engine(\"typesense\");\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Payment Methods by Type in TypeScript\nDESCRIPTION: Example of retrieving payment methods of a specific type (e.g., SEPA debit) using the Shopkeeper library. This filters the returned payment methods to only include those of the specified type.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/shopkeeper/payment-methods.mdx#2025-04-19_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst paymentMethods = await user.paymentMethods('sepa_debit')\n```\n\n----------------------------------------\n\nTITLE: Implementing Result Intercepting Middleware in TypeScript for AdonisJS GraphQL\nDESCRIPTION: This code snippet demonstrates a middleware that can intercept and modify the result of a GraphQL resolver. It replaces the result 'ts.ed' with 'adonis'.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/graphql/middlewares.mdx#2025-04-19_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ResolverData, NextFn } from '@foadonis/graphql'\nimport { inject } from '@adonisjs/core'\n\nexport default class CompetitorMiddleware {\n  async use({ info }: ResolverData, next: NextFn) {\n    const result = await next()\n\n    if (result === 'ts.ed') {\n      return 'adonis'\n    }\n\n    return result\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Paginated Search in AdonisJS Controller\nDESCRIPTION: Shows how to implement paginated search results in an AdonisJS controller and pass the results to a view.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/magnify/advanced.mdx#2025-04-19_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { HttpContext } from \"@adonisjs/core/http\";\nimport db from \"@adonisjs/lucid/services/db\";\n\nclass PostsController {\n  async index({ request, view }: HttpContextContract) {\n    const page = request.input(\"page\", 1);\n    const limit = 10;\n\n    const posts = await Post.search(\"Magnify\")\n      .whereIn(\"status\", [\"published\", \"draft\"])\n      .paginate(limit, page);\n\n    posts.baseUrl(\"/posts\");\n\n    return view.render(\"posts/index\", { posts });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Circular Dependencies in Schema Definitions\nDESCRIPTION: Demonstrates how to handle circular dependencies in schemas by using a thunk function to defer type resolution. This example shows a Post class that references itself as a parent property.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/openapi/types-and-parameters.mdx#2025-04-19_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ApiProperty } from '@foadonis/openapi/decorators'\n\nexport class Post {\n  @ApiProperty({ type: () => Post })\n  declare parent: Post\n}\n```\n\n----------------------------------------\n\nTITLE: Deactivating Maintenance Mode in AdonisJS\nDESCRIPTION: Commands to bring the AdonisJS application back online by deactivating maintenance mode.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/maintenance/getting-started.mdx#2025-04-19_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nnode ace maintenance:up\n# or\nnode ace up\n```\n\n----------------------------------------\n\nTITLE: Using Custom Decorators in AdonisJS Controller\nDESCRIPTION: This snippet shows how to apply a custom decorator to a controller method in AdonisJS. The @authorize decorator is used to specify required abilities for the user to access the controller action.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/graphql/(advanced)/custom-decorators.mdx#2025-04-19_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { HttpContext } from '@adonisjs/core/http'\nimport { authorize } from '../decorators/authorize.js'\n\nexport default class PostsController {\n  @authorize(['posts.create'])\n  async store({ request }: HttpContext) {\n    // Create a new post from request body\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Quantities for Individual Subscription Prices in Adonis.js\nDESCRIPTION: Shows how to update quantities for specific prices in a multi-product subscription using incrementQuantity, decrementQuantity, and updateQuantity methods in Adonis.js.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/shopkeeper/subscriptions/page.mdx#2025-04-19_snippet_40\n\nLANGUAGE: typescript\nCODE:\n```\nconst subscription = await user.subscription('default')\n\nawait subscription.incrementQuantity(5, 'price_chat')\nawait subscription.decrementQuantity(5, 'price_chat')\nawait subscription.updateQuantity(5, 'price_chat')\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Decorator in TypeScript for AdonisJS\nDESCRIPTION: This snippet demonstrates how to create a custom decorator in TypeScript for use in an AdonisJS application. It defines a 'middleware' decorator that can be applied to controller methods to specify middleware to be executed before the method.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/openapi/(advanced)/custom-decorators.mdx#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { HttpContext } from '@adonisjs/core/http'\n\nexport function middleware(middleware: string | string[]) {\n  return function (target: any, propertyKey: string, descriptor: PropertyDescriptor) {\n    const originalMethod = descriptor.value\n\n    descriptor.value = async function (ctx: HttpContext) {\n      // Execute middleware\n      await ctx.middleware.run(middleware)\n\n      // Call the original method\n      return originalMethod.apply(this, arguments)\n    }\n\n    return descriptor\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Price and Invoicing Immediately in Adonis.js\nDESCRIPTION: Shows how to add a new price to a subscription and immediately invoice the customer using the addPriceAndInvoice method in Adonis.js.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/shopkeeper/subscriptions/page.mdx#2025-04-19_snippet_33\n\nLANGUAGE: typescript\nCODE:\n```\nawait user.newSubscription('default').addPriceAndInvoice('price_chat')\n```\n\n----------------------------------------\n\nTITLE: Activating Maintenance Mode in AdonisJS\nDESCRIPTION: Commands to put the AdonisJS application into maintenance mode using the maintenance package.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/maintenance/getting-started.mdx#2025-04-19_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnode ace maintenance:down\n# or\nnode ace down\n```\n\n----------------------------------------\n\nTITLE: Retrieving Default Payment Method in TypeScript\nDESCRIPTION: Example of retrieving a customer's default payment method using the Shopkeeper library. The defaultPaymentMethod method returns the payment method that is set as the default for the customer.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/shopkeeper/payment-methods.mdx#2025-04-19_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst paymentMethods = await user.defaultPaymentMethod()\n```\n\n----------------------------------------\n\nTITLE: Displaying Invoice Information in Edge Template\nDESCRIPTION: Edge template code for listing invoices in a table, displaying date, total amount, and a download link for each invoice.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/shopkeeper/invoices.mdx#2025-04-19_snippet_3\n\nLANGUAGE: edge\nCODE:\n```\n<table>\n  @each(invoice in invoices)\n    <tr>\n      <td>\n        {{ invoice->date()->format() }}\n      </td>\n      <td>\n        {{ invoice->total() }}\n      </td>\n      <td>\n        <a href=\"/user/invoice/{{ invoice->id }}\">Download</a>\n      </td>\n    </tr>\n  @end\n</table>\n```\n\n----------------------------------------\n\nTITLE: Guest Checkout Implementation\nDESCRIPTION: Demonstrates implementation of checkout process for guest users without accounts.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/shopkeeper/checkout.mdx#2025-04-19_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Checkout } from '@foadonis/shopkeeper'\n\nrouter.get('/product-checkout', ({ response }) => {\n  const checkout = await Checkout.guest().create('default', 'price_monthly', {\n    success_url: route('checkout.success'),\n    cancel_url: route('checkout.cancel'),\n  })\n\n  response.redirect().status(303).toPath(checkout.session.url)\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring File Driver for Maintenance Mode in AdonisJS\nDESCRIPTION: Configuration for the default file-based maintenance mode driver. This driver creates a lockfile in the application's temporary folder to enable maintenance mode and deletes it to disable it.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/maintenance/drivers.mdx#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig, drivers } from '@foadonis/maintenance'\n\nexport default defineConfig({\n  default: 'file',\n  drivers: {\n    file: drivers.file(),\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Customizing Customer Name Sync with Stripe in TypeScript\nDESCRIPTION: Demonstrates how to customize the attribute used as the customer's name when syncing with Stripe.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/shopkeeper/customers.mdx#2025-04-19_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BaseModel } from '@adonisjs/lucid/orm'\n\nexport default class User extends compose(BaseModel, Billable) {\n  stripeName(): string {\n    return `${this.firstName} ${this.lastName}`\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Features List in Markdown\nDESCRIPTION: A markdown list showcasing the features of the GraphQL API setup, including code-first development, type safety, authentication, and more. Some features are marked as work in progress (WIP).\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/graphql/index.mdx#2025-04-19_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Features\n\n✔ Code first development  \n✔ Schema first development [WIP]  \n✔ Fully typesafe  \n✔ Apollo GraphQL playground\n✔ Out of the box authentication with [@adonisjs/auth](https://docs.adonisjs.com/guides/authentication/introduction)  \n✔ Out of the box authorization with [Bouncer](https://docs.adonisjs.com/guides/security/authorization)  \n✔ Real-time subscriptions [WIP]  \n✔ Apollo GraphQL Federation [WIP]  \n✔ Custom scalar types for Luxon\n```\n\n----------------------------------------\n\nTITLE: Retrieving Upcoming Invoice for a Customer in Typescript\nDESCRIPTION: Retrieves the upcoming invoice for a customer using the upcomingInvoice method.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/shopkeeper/invoices.mdx#2025-04-19_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst invoice = await user.upcomingInvoice()\n```\n\n----------------------------------------\n\nTITLE: Configuring a Custom Maintenance Mode Driver in AdonisJS\nDESCRIPTION: Configuration setup for using a custom maintenance mode driver in an AdonisJS application. The configuration specifies the custom driver as the default and instantiates it.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/maintenance/drivers.mdx#2025-04-19_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// @noErrors\nimport { defineConfig } from '@foadonis/maintenance'\nimport CustomMaintenanceDriver from '#maintenance/drivers/custom_maintenance_driver'\n\nexport default defineConfig({\n  default: 'custom',\n  drivers: {\n    custom: new CustomMaintenanceDriver(),\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Creating PaginatedResponse Mixin with Meta and Items in TypeScript\nDESCRIPTION: This snippet creates a PaginatedResponse mixin that includes both meta and items properties. It uses a generic type parameter to allow for different item types in the paginated response.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/openapi/(advanced)/generic-types.mdx#2025-04-19_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ApiProperty } from '@foadonis/openapi/decorators'\n\nexport default function PaginatedResponse<TItem extends object>(\n  Item: new (...args: any[]) => TItem\n) {\n  abstract class Pagination {\n    @ApiProperty()\n    declare meta: PaginatedResponseMeta\n\n    @ApiProperty({ type: [Item] })\n    declare items: TItem[]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing GraphQL Yoga Subscription Package\nDESCRIPTION: Command to install the GraphQL Yoga subscription package required for implementing real-time subscriptions in an Adonis.js application.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/graphql/subscriptions.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @graphql-yoga/subscription\n```\n\n----------------------------------------\n\nTITLE: Finding a Specific Invoice by ID in Typescript\nDESCRIPTION: Retrieves a specific invoice by its ID using the findInvoice method.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/shopkeeper/invoices.mdx#2025-04-19_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst invoice = await user.findInvoice(invoiceId)\n```\n\n----------------------------------------\n\nTITLE: Bypassing Maintenance Mode with Secret in AdonisJS\nDESCRIPTION: This command allows bypassing maintenance mode by providing a secret. Users can access the site using the secret in the URL.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/maintenance/commands.mdx#2025-04-19_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnode ace maintenance:down --secret <secret>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Subscription Usage Records in TypeScript\nDESCRIPTION: Examples of retrieving usage records for a subscription, either for all prices or for a specific metered price.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/shopkeeper/subscriptions/page.mdx#2025-04-19_snippet_52\n\nLANGUAGE: typescript\nCODE:\n```\nconst subscription = await user.subscription('default')\nconst usageRecords = await subscription.usageRecords()\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst subscription = await user.subscription('default')\nconst usageRecords = await subscription.usageRecordsFor('price_metered')\n```\n\n----------------------------------------\n\nTITLE: Initializing Cryptographic Keypairs in AdonisJS\nDESCRIPTION: Demonstrates how to generate a new keypair and store the public key in the environment variable file while placing the private key in `.env.keys`. The command supports targeting different environment configurations.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/crypt/commands.mdx#2025-04-19_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnode ace crypt:init # Initialize .env\nnode ace crypt:init --env production # Initialize .env.production\nNODE_ENV=staging node ace crypt:init # Initialize .env.staging\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Distributed PubSub\nDESCRIPTION: Command to install packages required for implementing a distributed PubSub system using Redis, useful for applications running multiple instances.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/graphql/subscriptions.mdx#2025-04-19_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @graphql-yoga/redis-event-target ioredis\n```\n\n----------------------------------------\n\nTITLE: Redirecting Users During Maintenance in AdonisJS\nDESCRIPTION: This command allows redirecting users to a different URL when maintenance mode is active.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/maintenance/commands.mdx#2025-04-19_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nnode ace maintenance:down --redirect /maintenance\n```\n\n----------------------------------------\n\nTITLE: Single Charge Checkout Implementation\nDESCRIPTION: Shows implementation of one-time charge checkout for ad-hoc products not created in Stripe dashboard.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/shopkeeper/checkout.mdx#2025-04-19_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nrouter.get('/product-checkout', ({ auth }) => {\n  const user = auth.getUserOrFail()\n  const checkout = await user.allowPromotionCodes().checkoutCharge(1200, 'T-Shirt', 5)\n\n  response.redirect().status(303).toPath(checkout.session.url)\n})\n```\n\n----------------------------------------\n\nTITLE: Retrieving Specific Encrypted Variables in AdonisJS\nDESCRIPTION: Demonstrates how to decrypt and log a specific encrypted environment variable using the private key stored in `.env.keys`. The command can target variables from different environment configurations.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/crypt/commands.mdx#2025-04-19_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nnode ace crypt:get DB_PASSWORD # Decrypt DB_PASSWORD from .env\nnode ace crypt:get DB_PASSWORD --env production # Decrypt DB_PASSWORD from .env.production\nNODE_ENV=staging node ace crypt:get DB_PASSWORD # Decrypt DB_PASSWORD from .env.staging\n```\n\n----------------------------------------\n\nTITLE: Setting Subscription Quantity\nDESCRIPTION: Creates a subscription with a specific quantity for the price.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/shopkeeper/subscriptions/page.mdx#2025-04-19_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nawait user.newSubscription('default', 'price_monthly').quantity(5).create(paymentMethod)\n```\n\n----------------------------------------\n\nTITLE: Configuring Refresh and Retry Headers in AdonisJS Maintenance Mode\nDESCRIPTION: This command sets the Refresh and Retry headers for maintenance mode. The retry value is also passed to the template as 'retryAfter'.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/maintenance/commands.mdx#2025-04-19_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nnode ace maintenance:down --retry 30 --refresh 30\n```\n\n----------------------------------------\n\nTITLE: Creating Stripe Webhook with Shopkeeper CLI\nDESCRIPTION: Uses the shopkeeper:webhook Ace command to create a Stripe webhook that listens to all required events for Shopkeeper. The command allows customization of URL, API version, and initial state.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/shopkeeper/webhooks.mdx#2025-04-19_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnode ace shopkeeper:webhook\n```\n\nLANGUAGE: shell\nCODE:\n```\nnode ace shopkeeper:webhook --url \"https://example.com/stripe/webhook\"\n```\n\nLANGUAGE: shell\nCODE:\n```\nnode ace shopkeeper:webhook --api-version=\"2019-12-03\"\n```\n\nLANGUAGE: shell\nCODE:\n```\nnode ace shopkeeper:webhook --disabled\n```\n\n----------------------------------------\n\nTITLE: Rendering Custom Maintenance Page in AdonisJS\nDESCRIPTION: This command enables rendering a custom maintenance page using Edge.js. The template is prerendered when activating maintenance to limit runtime execution.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/maintenance/commands.mdx#2025-04-19_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnode ace maintenance:down --template <template>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Specific Subscription Item by Price ID in Adonis.js\nDESCRIPTION: Shows how to retrieve a specific subscription item using the findItemOrFail method with a price ID in a multi-product subscription in Adonis.js.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/shopkeeper/subscriptions/page.mdx#2025-04-19_snippet_42\n\nLANGUAGE: typescript\nCODE:\n```\nconst subscription = await user.subscription('default')\nconst subscriptionItem = await subscription.findItemOrFail('price_chat')\n```\n\n----------------------------------------\n\nTITLE: Importing Crypt Module in Environment Configuration\nDESCRIPTION: Code snippet showing how to import the @foadonis/crypt module in start/env.ts file to modify default Env behavior.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/crypt/getting_started.mdx#2025-04-19_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\n// @noErrors\nimport '@foadonis/crypt' // [!code ++]\nimport { Env } from '@adonisjs/core/env'\n\nexport default await Env.create(new URL('../', import.meta.url), {\n  [...]\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Middlewares in TypeScript for AdonisJS GraphQL\nDESCRIPTION: This code snippet shows how to apply middlewares globally using the globalMiddlewares option in the GraphQL configuration file of an AdonisJS application.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/graphql/middlewares.mdx#2025-04-19_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@foadonis/graphql'\nimport AccessLoggerMiddleware from '#graphql/middlewares/access_logger_middleware'\n\nexport default defineConfig({\n  globalMiddlewares: [AccessLoggerMiddleware],\n})\n```\n\n----------------------------------------\n\nTITLE: Private Key Configuration in .env.keys File\nDESCRIPTION: Example of the .env.keys file containing the private decryption key that should not be committed to source control.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/crypt/getting_started.mdx#2025-04-19_snippet_3\n\nLANGUAGE: dotenv\nCODE:\n```\n#/---------------------!CRYPT PRIVATE KEYS!-----------------------/\n#/    private decryption keys. DO NOT commit to source control    /\n#/     [how it works](https://friendsofadonis.com/docs/crypt)     /\n#/----------------------------------------------------------------/\n\n# .env\nCRYPT_PRIVATE_KEY=\"14bfcf42753fffe8048af0db35cd4f6acabc15e378c246cd5fbf7cea519cf707\"\n```\n\n----------------------------------------\n\nTITLE: Sample Environment File with Encrypted Credentials in AdonisJS\nDESCRIPTION: Example .env file showing how Crypt stores the public key and encrypted credentials. The DB_PASSWORD is stored in an encrypted format that can only be decrypted with the corresponding private key.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/crypt/index.mdx#2025-04-19_snippet_1\n\nLANGUAGE: dotenv\nCODE:\n```\n#/---------------------[CRYPT PUBLIC KEY]-----------------------/\n#/             public-key encryption for .env files             /\n#/   [how it works](https://friendsofadonis.com/docs/crypt)     /\n#/--------------------------------------------------------------/\nCRYPT_PUBLIC_KEY=\"02caef368300cb9244d00b64deab85cd33c68b7e5e097b9ac73b0ba8125579f099\"\n\nDB_USER=adonis\nDB_DATABASE=adonis\nDB_PASSWORD=\"encrypted:BLkwNagdhoSpSAyRR1og...\"\n```\n\n----------------------------------------\n\nTITLE: Generating Cryptographic Keys with Ace Command\nDESCRIPTION: Command to initialize cryptographic keypair for encrypting and decrypting environment variables.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/crypt/getting_started.mdx#2025-04-19_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nnode ace crypt:init\n```\n\n----------------------------------------\n\nTITLE: Executing Magnify Import Command in AdonisJS\nDESCRIPTION: The magnify:import command imports a specified model into your Search Engine. This is useful for adding existing data to the search index after configuring Magnify.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/magnify/(references)/commands.mdx#2025-04-19_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnode ace magnify:import <modelPath>\n```\n\n----------------------------------------\n\nTITLE: Encrypting Environment Variables with Crypt\nDESCRIPTION: Command to encrypt a sensitive environment variable (DB_PASSWORD) and store it in the .env file.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/crypt/getting_started.mdx#2025-04-19_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nnode ace crypt:set DB_PASSWORD mysuperpassword\n```\n\n----------------------------------------\n\nTITLE: Checking Subscription to Multiple Products in TypeScript\nDESCRIPTION: Demonstrates how to verify if a user is subscribed to any of multiple products.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/shopkeeper/subscriptions/page.mdx#2025-04-19_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nif (await user.subscribedToProduct(['prod_basic', 'prod_premium'], 'default'))\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Encrypting Environment Variables for Production\nDESCRIPTION: Commands to encrypt environment variables specifically for production or other environments.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/crypt/getting_started.mdx#2025-04-19_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\n# Encrypt the secret in `.env.production`\nnode ace encrypt:set DB_PASSWORD myproductionpassword --env production\n\n# or using NODE_ENV\nNODE_ENV=production node ace encrypt:set DB_PASSWORD mystagingpassword\n```\n\n----------------------------------------\n\nTITLE: Creating Subscription Trial with Payment Method Upfront in AdonisJS\nDESCRIPTION: Sets up a subscription with a 10-day trial period while collecting payment method information upfront. The method 'trialDays' specifies the trial duration, and Shopkeeper will override any default trial period configured in Stripe.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/shopkeeper/subscriptions/subscription-trials.mdx#2025-04-19_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// file: start/routes.ts\nimport router from '@adonisjs/core/services/router'\n\nrouter.get('/user/subscribe', async ({ auth, request }) => {\n  const user = auth.getUserOrFail()\n  const paymentMethodId = request.get('paymentMethodId')\n\n  await user.newSubscription('default', 'price_monthly').trialDays(10).create(paymentMethodId)\n\n  // ...\n})\n```\n\n----------------------------------------\n\nTITLE: Checking Specific Generic Trial Status in AdonisJS\nDESCRIPTION: Shows how to use the 'onGenericTrial' method to specifically check if a user is within their generic trial period and has not yet created an actual subscription, as opposed to being on a trial for an existing subscription.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/shopkeeper/subscriptions/subscription-trials.mdx#2025-04-19_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nif (user.onGenericTrial()) {\n  // User is within their \"generic\" trial period...\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Trial Status in AdonisJS\nDESCRIPTION: Demonstrates two equivalent methods to check if a user is currently within their trial period. The first uses the 'onTrial' method on the user instance, while the second uses the same method on the subscription instance.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/shopkeeper/subscriptions/subscription-trials.mdx#2025-04-19_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nif (await user.onTrial()) {\n  // ...\n}\n\nif (subscription.onTrial()) {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Output of Parsed Lucid Model\nDESCRIPTION: The resulting JSON structure after parsing the User model, showing detailed type information for columns and computed properties.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/content/docs/lucid-parser/index.mdx#2025-04-19_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"columns\": [\n    {\n      \"key\": \"id\",\n      \"type\": \"number\",\n      \"isOptional\": false,\n      \"isNullable\": false,\n      \"isArray\": false\n    },\n    {\n      \"key\": \"title\",\n      \"type\": \"string\",\n      \"isOptional\": false,\n      \"isNullable\": true,\n      \"isArray\": false\n    },\n    {\n      \"key\": \"roles\",\n      \"type\": \"string\",\n      \"isOptional\": false,\n      \"isNullable\": false,\n      \"isArray\": true\n    }\n  ],\n  \"computed\": [\n    {\n      \"key\": \"isAdmin\",\n      \"type\": \"boolean\",\n      \"isOptional\": false,\n      \"isNullable\": false,\n      \"isArray\": false\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry for Version 0.3.4\nDESCRIPTION: Documents patch release adding pretty configure success logging\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/packages/openapi/CHANGELOG.md#2025-04-19_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### Patch Changes\n\n- [#25](https://github.com/FriendsOfAdonis/FriendsOfAdonis/pull/25) [`32de549`](https://github.com/FriendsOfAdonis/FriendsOfAdonis/commit/32de54973ce8cc95e9e961b07879051f7d0f52ab) Thanks [@kerwanp](https://github.com/kerwanp)! - Add pretty configure success log\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry for Version 0.3.3\nDESCRIPTION: Documents fix for build pipeline to include commands manifest and stubs\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/packages/openapi/CHANGELOG.md#2025-04-19_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n### Patch Changes\n\n- [`22d5326`](https://github.com/FriendsOfAdonis/FriendsOfAdonis/commit/22d532670e889dc39fd86b7a968ee940a416f7d6) Thanks [@kerwanp](https://github.com/kerwanp)! - Fix build pipeline to properly include commands manifest and stubs\n```\n\n----------------------------------------\n\nTITLE: Configuring Web Crawler Access with robots.txt\nDESCRIPTION: This configuration allows all web crawlers to access the entire website while specifying the canonical host domain and sitemap location. It uses standard robots.txt syntax to define access permissions for search engines and other bots.\nSOURCE: https://github.com/friendsofadonis/friendsofadonis/blob/main/docs/public/robots.txt#2025-04-19_snippet_0\n\nLANGUAGE: robots.txt\nCODE:\n```\nUser-agent: *\nAllow: /\n\nHost: https://friendsofadonis.com\n\nSitemap: https://friendsofadonis.com/sitemap.xml\n```"
  }
]