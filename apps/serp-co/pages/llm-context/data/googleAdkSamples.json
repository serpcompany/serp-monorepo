[
  {
    "owner": "google",
    "repo": "adk-samples",
    "content": "TITLE: Clone and Navigate to Repository\nDESCRIPTION: This snippet clones the adk-samples repository from GitHub and navigates the user to the brand-search-optimization directory within the repository. This action sets up the user's environment to execute the project.\nSOURCE: https://github.com/google/adk-samples/blob/main/agents/brand-search-optimization/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Clone this repository.\ngit clone https://github.com/google/adk-samples.git\ncd adk-samples/agents/brand-search-optimization\n```\n\n----------------------------------------\n\nTITLE: Authentication with Google Cloud\nDESCRIPTION: This command authenticates the user with their Google Cloud account using application-default credentials.  It allows the user to access Google Cloud resources like BigQuery required by the agent.\nSOURCE: https://github.com/google/adk-samples/blob/main/agents/brand-search-optimization/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngcloud auth application-default login\n```\n\n----------------------------------------\n\nTITLE: Installing dependencies with Poetry\nDESCRIPTION: Commands to install and use Poetry for dependency management. Poetry creates a virtual environment and installs all required packages for the customer service agent.\nSOURCE: https://github.com/google/adk-samples/blob/main/agents/customer-service/README.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npip install poetry\npoetry install\npoetry env activate\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Agent Configuration in Bash\nDESCRIPTION: Shell commands and details for setting critical environment variables required for the multi-agent system's operation. This includes toggling between ML development and Vertex AI backends, specifying API keys, project and location identifiers, and configuring BigQuery project and dataset IDs. Essential for enabling proper integration with Google Cloud resources and the Code Interpreter extension within Vertex AI.\nSOURCE: https://github.com/google/adk-samples/blob/main/agents/data-science/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Choose Model Backend: 0 -> ML Dev, 1 -> Vertex\nGOOGLE_GENAI_USE_VERTEXAI=1\n\n# ML Dev backend config. Fill if using Ml Dev backend.\nGOOGLE_API_KEY='YOUR_VALUE_HERE'\n\n# Vertex backend config\nGOOGLE_CLOUD_PROJECT='YOUR_VALUE_HERE'\nGOOGLE_CLOUD_LOCATION='YOUR_VALUE_HERE'\n```\n\nLANGUAGE: bash\nCODE:\n```\nexport BQ_PROJECT_ID='YOUR-BQ-PROJECT-ID'\nexport BQ_DATASET_ID='YOUR-DATASET-ID' # leave as 'forecasting_sticker_sales' if using sample data\n```\n\nLANGUAGE: bash\nCODE:\n```\nexport CODE_INTERPRETER_EXTENSION_NAME='projects/<YOUR_PROJECT_ID>/locations/us-central1/extensions/<YOUR_EXTENSION_ID>'\n```\n\n----------------------------------------\n\nTITLE: Cloning and Setup Using Git and Poetry in Bash\nDESCRIPTION: Commands for cloning the repository using Git, navigating to the working directory, installing dependencies with Poetry, and activating the Poetry virtual environment. It ensures the project environment is properly prepared for running the multi-agent system.\nSOURCE: https://github.com/google/adk-samples/blob/main/agents/data-science/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/google/adk-samples.git\ncd adk-samples/agents/data-science\n```\n\nLANGUAGE: bash\nCODE:\n```\npoetry install\n```\n\nLANGUAGE: bash\nCODE:\n```\npoetry env activate\n\n# Alternative activation method if above does not work\nsource .venv/bin/activate\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables (.env) - Bash\nDESCRIPTION: This snippet illustrates the required environment variables, typically set in a `.env` file by copying `.env.example`. These variables configure the model backend (Vertex AI or ML Dev), specify Google Cloud project details, provide API keys for Google Places and potentially other services, and define the default scenario/itinerary to load.\nSOURCE: https://github.com/google/adk-samples/blob/main/agents/travel-concierge/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# Choose Model Backend: 0 -> ML Dev, 1 -> Vertex\nGOOGLE_GENAI_USE_VERTEXAI=1\n# ML Dev backend config, when GOOGLE_GENAI_USE_VERTEXAI=0, ignore if using Vertex.\n# GOOGLE_API_KEY=YOUR_VALUE_HERE\n\n# Vertex backend config\nGOOGLE_CLOUD_PROJECT=__YOUR_CLOUD_PROJECT_ID__\nGOOGLE_CLOUD_LOCATION=us-central1\n\n# Places API\nGOOGLE_PLACES_API_KEY=__YOUR_API_KEY_HERE__\n\n# GCS Storage Bucket name - for Agent Engine deployment test\nGOOGLE_CLOUD_STORAGE_BUCKET=YOUR_BUCKET_NAME_HERE\n\n# Sample Scenario Path - Default is an empty itinerary\n# This will be loaded upon first user interaction.\n#\n# Uncomment one of the two, or create your own.\n#\n# TRAVEL_CONCIERGE_SCENARIO=eval/itinerary_seattle_example.json\nTRAVEL_CONCIERGE_SCENARIO=eval/itinerary_empty_default.json\n```\n\n----------------------------------------\n\nTITLE: Receiving Flight Seat Map Data JSON\nDESCRIPTION: Contains the response from the seat selection agent, providing a 2D array representing the seat map for the chosen flight. Each seat object includes availability status, price, and seat identifier.\nSOURCE: https://github.com/google/adk-samples/blob/main/agents/travel-concierge/tests/pre_booking_sample.md#_snippet_22\n\nLANGUAGE: JSON\nCODE:\n```\nResponse from: \"flight_seat_selection_agent\"\nresponse: {\n  \"seats\": [\n    [\n      {\n        \"isAvailable\": true,\n        \"priceInUSD\": 60,\n        \"seatNumber\": \"1A\"\n      },\n      {\n        \"isAvailable\": true,\n        \"priceInUSD\": 60,\n        \"seatNumber\": \"1B\"\n      },\n      {\n        \"isAvailable\": false,\n        \"priceInUSD\": 60,\n        \"seatNumber\": \"1C\"\n      },\n      {\n        \"isAvailable\": true,\n        \"priceInUSD\": 70,\n        \"seatNumber\": \"1D\"\n      },\n      {\n        \"isAvailable\": true,\n        \"priceInUSD\": 70,\n        \"seatNumber\": \"1E\"\n      },\n      {\n        \"isAvailable\": true,\n        \"priceInUSD\": 50,\n        \"seatNumber\": \"1F\"\n      }\n    ],\n    [\n      {\n        \"isAvailable\": true,\n        \"priceInUSD\": 60,\n        \"seatNumber\": \"2A\"\n      },\n      {\n        \"isAvailable\": false,\n        \"priceInUSD\": 60,\n        \"seatNumber\": \"2B\"\n      },\n      {\n        \"isAvailable\": true,\n        \"priceInUSD\": 60,\n        \"seatNumber\": \"2C\"\n      },\n      {\n        \"isAvailable\": true,\n        \"priceInUSD\": 70,\n        \"seatNumber\": \"2D\"\n      },\n      {\n        \"isAvailable\": true,\n        \"priceInUSD\": 70,\n        \"seatNumber\": \"2E\"\n      },\n      {\n        \"isAvailable\": true,\n        \"priceInUSD\": 50,\n        \"seatNumber\": \"2F\"\n      }\n    ],\n    [\n      {\n        \"isAvailable\": true,\n        \"priceInUSD\": 60,\n        \"seatNumber\": \"3A\"\n      },\n      {\n        \"isAvailable\": true,\n        \"priceInUSD\": 60,\n        \"seatNumber\": \"3B\"\n      },\n      {\n        \"isAvailable\": true,\n        \"priceInUSD\": 60,\n        \"seatNumber\": \"3C\"\n      },\n      {\n        \"isAvailable\": true,\n        \"priceInUSD\": 70,\n        \"seatNumber\": \"3D\"\n      },\n      {\n        \"isAvailable\": false,\n        \"priceInUSD\": 70,\n        \"seatNumber\": \"3E\"\n      },\n      {\n        \"isAvailable\": true,\n        \"priceInUSD\": 50,\n        \"seatNumber\": \"3F\"\n      }\n    ],\n    [\n      {\n        \"isAvailable\": true,\n        \"priceInUSD\": 60,\n        \"seatNumber\": \"4A\"\n      },\n      {\n        \"isAvailable\": true,\n        \"priceInUSD\": 60,\n        \"seatNumber\": \"4B\"\n      },\n      {\n        \"isAvailable\": true,\n        \"priceInUSD\": 60,\n        \"seatNumber\": \"4C\"\n      },\n      {\n        \"isAvailable\": true,\n        \"priceInUSD\": 70,\n        \"seatNumber\": \"4D\"\n      },\n      {\n        \"isAvailable\": true,\n        \"priceInUSD\": 70,\n        \"seatNumber\": \"4E\"\n      },\n      {\n        \"isAvailable\": true,\n        \"priceInUSD\": 50,\n        \"seatNumber\": \"4F\"\n      }\n    ],\n    [\n      {\n        \"isAvailable\": true,\n        \"priceInUSD\": 60,\n        \"seatNumber\": \"5A\"\n      },\n      {\n        \"isAvailable\": false,\n        \"priceInUSD\": 60,\n        \"seatNumber\": \"5B\"\n      },\n      {\n        \"isAvailable\": true,\n        \"priceInUSD\": 60,\n        \"seatNumber\": \"5C\"\n      },\n      {\n        \"isAvailable\": false,\n        \"priceInUSD\": 70,\n        \"seatNumber\": \"5D\"\n      },\n      {\n        \"isAvailable\": true,\n        \"priceInUSD\": 70,\n        \"seatNumber\": \"5E\"\n      },\n      {\n        \"isAvailable\": true,\n        \"priceInUSD\": 50,\n        \"seatNumber\": \"5F\"\n      }\n    ]\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Deploy Agent to Vertex AI\nDESCRIPTION: This command deploys the agent to Vertex AI Agent Engine. It will create the agent on Vertex AI using the configuration and settings defined within the project. The `DISABLE_WEB_DRIVER` variable should be set to `1` to allow deployment.\nSOURCE: https://github.com/google/adk-samples/blob/main/agents/brand-search-optimization/README.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\npython deployment/deploy.py --create\n```\n\n----------------------------------------\n\nTITLE: Interacting with Agent Engine via Streaming Query (Python)\nDESCRIPTION: This Python code snippet shows the core logic of the `test_deployment.py` script. It demonstrates how to use the `vertexai.agent_engines` library to retrieve a deployed agent by its resource ID, create a new session for a user, and then enter a loop to send user input via `stream_query`. It processes the streamed response events, extracting and printing the text parts.\nSOURCE: https://github.com/google/adk-samples/blob/main/agents/fomc-research/README.md#_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nfrom vertexai import agent_engines\nremote_agent = vertexai.agent_engines.get(RESOURCE_ID)\nsession = remote_agent.create_session(user_id=USER_ID)\nwhile True:\n    user_input = input(\"Input: \")\n    if user_input == \"quit\":\n      break\n\n    for event in remote_agent.stream_query(\n        user_id=USER_ID,\n        session_id=session[\"id\"],\n        message=user_input,\n    ):\n        parts = event[\"content\"][\"parts\"]\n        for part in parts:\n            if \"text\" in part:\n                text_part = part[\"text\"]\n                print(f\"Response: {text_part}\")\n```\n\n----------------------------------------\n\nTITLE: Creating Itinerary Using Itinerary Agent Function\nDESCRIPTION: JSON function call to the itinerary_agent that creates a complete travel plan based on the user's selections and preferences, including all trip details in a structured request format.\nSOURCE: https://github.com/google/adk-samples/blob/main/agents/travel-concierge/tests/pre_booking_sample.md#_snippet_35\n\nLANGUAGE: json\nCODE:\n```\nfunction call: \"itinerary_agent\"\nargs: {\n  \"request\": \"Origin: San Diego, CA, USA; Destination: Peru; Start Date: 2025-05-04; End Date: 2025-05-11; Outbound Flight: American Airlines (AA123) from SAN to LIM on 2025-05-04, Seat 1A; Return Flight: LATAM Airlines (LATAM2345) from LIM to SAN on 2025-05-11, Seat 2A; Hotel: Belmond Hotel Monasterio in Cusco, Peru; Room: Queen Room with Balcony; Day 1: Depart from home and fly to Lima; Day 2: Arrive in Lima, connecting flight to Cusco, check into hotel; Day 3: Explore Cusco; Day 4: Machu Picchu; Day 5: Vegan Food in Cusco; Day 6: Lake Titicaca; Day 7: Travel back to Lima; Day 8: Depart from Lima; Day 9: Arrive in San Diego.\"\n}\n```\n\n----------------------------------------\n\nTITLE: Receiving Hotel Search Results Data JSON\nDESCRIPTION: Contains the response from the hotel search agent, providing a list of available hotels matching the search criteria. Each hotel object includes basic information such as name, address, check-in/out times, a thumbnail image path, and the price per night.\nSOURCE: https://github.com/google/adk-samples/blob/main/agents/travel-concierge/tests/pre_booking_sample.md#_snippet_28\n\nLANGUAGE: JSON\nCODE:\n```\nResponse from: \"hotel_search_agent\"\nresponse: {\n  \"hotels\": [\n    {\n      \"name\": \"Palacio del Inka, a Luxury Collection Hotel, Cusco\",\n      \"address\": \"Calle Santa Catalina 103, Cusco 08000, Peru\",\n      \"check_in_time\": \"15:00\",\n      \"check_out_time\": \"12:00\",\n      \"thumbnail\": \"/src/images/hotel.png\",\n      \"price\": 350\n    },\n    {\n      \"name\": \"Belmond Hotel Monasterio\",\n      \"address\": \"Calle Plazoleta Nazarenas, Cusco 08001, Peru\",\n      \"check_in_time\": \"14:00\",\n      \"check_out_time\": \"11:00\",\n      \"thumbnail\": \"/src/images/hotel.png\",\n      \"price\": 450\n    },\n    {\n      \"name\": \"Sol y Luna, a Belmond Hotel, Sacred Valley\",\n      \"address\": \"Urubamba, Sacred Valley, Peru\",\n      \"check_in_time\": \"15:00\",\n      \"check_out_time\": \"12:00\",\n      \"thumbnail\": \"/src/images/hotel.png\",\n      \"price\": 500\n    },\n    {\n      \"name\": \"Inkaterra La Casona\",\n      \"address\": \"Calle Santa Clara, Cusco 08002, Peru\",\n      \"check_in_time\": \"14:00\",\n      \"check_out_time\": \"11:00\",\n      \"thumbnail\": \"/src/images/hotel.png\",\n      \"price\": 300\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Run Unit Tests\nDESCRIPTION: This command executes the unit tests using pytest. It runs the tests defined in `tests/unit/test_tools.py`, testing the functionality of the BigQuery tool and other agent components. Note that the web driver is disabled for testing.\nSOURCE: https://github.com/google/adk-samples/blob/main/agents/brand-search-optimization/README.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nsh deployment/test.sh\n```\n\n----------------------------------------\n\nTITLE: Adding IAM Policy with bq Tool\nDESCRIPTION: This snippet demonstrates how to add an IAM policy to a BigQuery table using the `bq` command-line tool.  It requires the Google Cloud CLI (`gcloud`) to be installed and configured.  The command uses parameters for the project ID, dataset ID, table ID, user's email, and the desired role to grant access.\nSOURCE: https://github.com/google/adk-samples/blob/main/agents/brand-search-optimization/customization.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbq add-iam-policy --member=user:user@example.com --role=roles/bigquery.dataViewer your-project-id:your_dataset_id.products\n```\n\n----------------------------------------\n\nTITLE: Calling flight_search_agent for Return Flights (JSON)\nDESCRIPTION: Illustrates the JSON structure used to call the `flight_search_agent` again, this time requesting return flights. The `request` argument specifies the origin (Peru), destination (San Diego), and date (May 11th, 2025).\nSOURCE: https://github.com/google/adk-samples/blob/main/agents/travel-concierge/tests/pre_booking_sample.md#_snippet_18\n\nLANGUAGE: json\nCODE:\n```\nfunction call: \"flight_search_agent\"\nargs: {\n  \"request\": \"Flights from Peru to San Diego, CA, USA on 2025-05-11\"\n}\n```\n\n----------------------------------------\n\nTITLE: Navigating to Agent Directory (Bash)\nDESCRIPTION: This bash command navigates the user to the specified agent's directory within the agents directory. This is a preliminary step before setting up, configuring, and running the agent. Replace <agent-name> with the name of the agent's directory.\nSOURCE: https://github.com/google/adk-samples/blob/main/agents/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd agents/<agent-name> \n# Example: cd agents/fomc-research\n```\n\n----------------------------------------\n\nTITLE: Calling Hotel Search Agent JSON\nDESCRIPTION: Initiates a simulated API call to search for hotels based on specified criteria. The `request` argument provides the desired location (Cusco, Peru) and the date range for the hotel stay.\nSOURCE: https://github.com/google/adk-samples/blob/main/agents/travel-concierge/tests/pre_booking_sample.md#_snippet_27\n\nLANGUAGE: JSON\nCODE:\n```\nfunction call: \"hotel_search_agent\"\nargs: {\n  \"request\": \"hotel in Cusco, Peru from 2025-05-05 to 2025-05-11\"\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Available Return Flight Options JSON\nDESCRIPTION: Presents a JSON array of flight objects, each detailing a potential return flight option including itinerary, price, airlines, and stop information. This data is used by the agent to present choices to the user.\nSOURCE: https://github.com/google/adk-samples/blob/main/agents/travel-concierge/tests/pre_booking_sample.md#_snippet_20\n\nLANGUAGE: JSON\nCODE:\n```\n[\n  {\n    \"airline_logo\": \"/images/american.png\",\n    \"priceInUSD\": 800,\n    \"numberOfStops\": 2\n  },\n  {\n    \"flight_number\": \"Delta9101\",\n    \"departure\": {\n      \"cityName\": \"Lima\",\n      \"airportCode\": \"LIM\",\n      \"timestamp\": \"2025-05-11T16:00:00Z\"\n    },\n    \"arrival\": {\n      \"cityName\": \"San Diego\",\n      \"airportCode\": \"SAN\",\n      \"timestamp\": \"2025-05-12T05:00:00Z\"\n    },\n    \"airlines\": [\n      \"Delta Air Lines\"\n    ],\n    \"airline_logo\": \"/images/delta1.jpg\",\n    \"priceInUSD\": 750,\n    \"numberOfStops\": 1\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Interaction: Streaming query to the deployed agent in Python\nDESCRIPTION: Establishes a session with the deployed agent and sends a user message, streaming real-time responses. Requires loading environment variables and the Vertex AI SDK, and outputs the response parts by printing their text content. Parameters include agent ID and user message.\nSOURCE: https://github.com/google/adk-samples/blob/main/agents/llm-auditor/README.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport dotenv\ndotenv.load_dotenv()  # May skip if you have exported environment variables.\nfrom vertexai import agent_engines\n\nagent_engine_id = \"AGENT_ENGINE_ID\"\nuser_input = \"Double check this: Earth is further away from the Sun than Mars.\"\n\nagent_engine = agent_engines.get(agent_engine_id)\nsession = agent_engine.create_session(user_id=\"new_user\")\nfor event in agent_engine.stream_query(\n    user_id=session[\"user_id\"], session_id=session[\"id\"], message=user_input\n):\n    for part in event[\"content\"][\"parts\"]:\n        print(part[\"text\"])\n```\n\n----------------------------------------\n\nTITLE: Python Code for Vertex AI Agent Engine Interaction\nDESCRIPTION: This Python code snippet demonstrates how to programmatically interact with a deployed Vertex AI Agent Engine resource using the `vertexai` library. It retrieves the agent by its resource ID, creates a user session, and then enters a loop to stream responses from the agent for user input until 'quit' is entered.\nSOURCE: https://github.com/google/adk-samples/blob/main/agents/data-science/README.md#_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nfrom vertexai import agent_engines\nremote_agent = vertexai.agent_engines.get(RESOURCE_ID)\nsession = remote_agent.create_session(user_id=USER_ID)\nwhile True:\n    user_input = input(\"Input: \")\n    if user_input == \"quit\":\n      break\n\n    for event in remote_agent.stream_query(\n        user_id=USER_ID,\n        session_id=session[\"id\"],\n        message=user_input,\n    ):\n        parts = event[\"content\"][\"parts\"]\n        for part in parts:\n            if \"text\" in part:\n                text_part = part[\"text\"]\n                print(f\"Response: {text_part}\")\n```\n\n----------------------------------------\n\nTITLE: Deployment: Installing dependencies and deploying the LLM Auditor using Bash\nDESCRIPTION: Automates the installation of dependencies with Poetry and initiates deployment of the LLM Auditor to Vertex AI Agent Engine through Python scripts. Dependencies must be installed prior to deployment, and the script creates the remote agent, printing its identification details.\nSOURCE: https://github.com/google/adk-samples/blob/main/agents/llm-auditor/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npoetry install --with deployment\npython3 deployment/deploy.py --create\n```\n\n----------------------------------------\n\nTITLE: Calling Flight Seat Selection Agent JSON\nDESCRIPTION: Initiates a simulated API call to retrieve available seats for a specified flight. The `request` argument contains a summary of the selected flight details to identify the correct flight for the seat map lookup.\nSOURCE: https://github.com/google/adk-samples/blob/main/agents/travel-concierge/tests/pre_booking_sample.md#_snippet_21\n\nLANGUAGE: JSON\nCODE:\n```\nfunction call: \"flight_seat_selection_agent\"\nargs: {\n  \"request\": \"LATAM Airlines (LATAM2345) departing from Lima (LIM) on May 11th at 2:00 PM, arriving in San Diego (SAN) on May 12th at 2:00 AM\"\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Required Google Cloud APIs (Bash)\nDESCRIPTION: Enables the necessary Google Cloud APIs for the agent's functionality: AI Platform ('aiplatform.googleapis.com') for agent execution and BigQuery ('bigquery.googleapis.com') for data storage and retrieval. Prerequisite: gcloud SDK must be authenticated.\nSOURCE: https://github.com/google/adk-samples/blob/main/agents/fomc-research/README.md#_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\ngcloud services enable aiplatform.googleapis.com\ngcloud services enable bigquery.googleapis.com\n```\n\n----------------------------------------\n\nTITLE: Running Agent via ADK Web Interface - Bash\nDESCRIPTION: This ADK command starts a local web server providing a graphical user interface (GUI) to interact with the Travel Concierge agent. The web interface offers a chat-like experience for testing the agent.\nSOURCE: https://github.com/google/adk-samples/blob/main/agents/travel-concierge/README.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nadk web\n```\n\n----------------------------------------\n\nTITLE: Calling Agent Transfer Function (JSON)\nDESCRIPTION: This snippet shows a function call initiated by an agent to transfer the conversation context and user intent to another specialized agent. It requires the `agent_name` as an argument, specifying the target agent. The purpose is to delegate the user's request to the most appropriate agent based on the detected intent.\nSOURCE: https://github.com/google/adk-samples/blob/main/agents/travel-concierge/tests/pre_booking_sample.md#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\nfunction call: \"transfer_to_agent\"\nargs: {\n  \"agent_name\": \"string\" /* The name of the agent to transfer to (e.g., \"inspiration_agent\", \"planning_agent\") */\n}\n```\n\n----------------------------------------\n\nTITLE: Memorizing Hotel Selection Using JSON Function Call\nDESCRIPTION: A JSON function call to store hotel details including address, check-in/out times, name, price, and thumbnail image. The function stores this information under the key 'hotel_selection'.\nSOURCE: https://github.com/google/adk-samples/blob/main/agents/travel-concierge/tests/pre_booking_sample.md#_snippet_31\n\nLANGUAGE: json\nCODE:\n```\nfunction call: \"memorize\"\nargs: {\n  \"value\": \"{\\\"address\\\": \\\"Calle Plazoleta Nazarenas, Cusco 08001, Peru\\\", \\\"check_in_time\\\": \\\"14:00\\\", \\\"check_out_time\\\": \\\"11:00\\\", \\\"name\\\": \\\"Belmond Hotel Monasterio\\\", \\\"price\\\": 450, \\\"thumbnail\\\": \\\"/src/images/hotel.png\\\"}\",\n  \"key\": \"hotel_selection\"\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying Agent on Vertex AI Agent Engine\nDESCRIPTION: This command deploys the agent to Vertex AI Agent Engine. It utilizes the `deploy.py` script, likely containing the necessary logic to create the agent on the platform. After deployment, it provides the agent's resource name which is important for testing and configuration. The command requires the necessary dependencies and credentials for interacting with the Vertex AI platform.\nSOURCE: https://github.com/google/adk-samples/blob/main/agents/RAG/README.md#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\npython deployment/deploy.py\n```\n\n----------------------------------------\n\nTITLE: Transfer to In-Trip Agent Function Call\nDESCRIPTION: Transfers control from the root agent to the in-trip planning agent 'in_trip_agent' for managing in-trip activities, assistance, and real-time support during the trip.\nSOURCE: https://github.com/google/adk-samples/blob/main/agents/travel-concierge/tests/post_booking_sample.md#_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"function call\": \"transfer_to_agent\",\n  \"args\": {\n    \"agent_name\": \"in_trip_agent\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Vertex AI Agent Engine Resource (Bash)\nDESCRIPTION: This snippet changes the current directory to `deployment` and then runs the `deploy.py` Python script with the `--create` flag. The script interacts with the Vertex AI API to provision a new Agent Engine resource based on the built wheel file. Upon success, the resource name and ID are typically printed to the console.\nSOURCE: https://github.com/google/adk-samples/blob/main/agents/fomc-research/README.md#_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\ncd deployment\npython3 deploy.py --create\n```\n\n----------------------------------------\n\nTITLE: Deploying Agent to Vertex AI Agent Engine - Bash\nDESCRIPTION: This command executes a Python script (`deployment/deploy.py`) to deploy the previously built agent wheel file to Vertex AI Agent Engine. The `--create` flag instructs the script to perform the deployment, which typically involves creating a staging bucket and uploading the wheel file. Upon success, it prints the resource name of the deployed agent.\nSOURCE: https://github.com/google/adk-samples/blob/main/agents/data-science/README.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\npython3 deployment/deploy.py --create\n```\n\n----------------------------------------\n\nTITLE: Transferring Conversation to Post-Trip Agent (JSON)\nDESCRIPTION: This JSON snippet instructs the AI agent system to transfer the current conversation session and user context to a different main agent, specifically the \"post_trip_agent\". The `args` object includes the `agent_name` parameter specifying the target agent. This is a mechanism for handing off the user to a more appropriate agent based on the current phase of interaction (e.g., moving from in-trip support to post-trip feedback).\nSOURCE: https://github.com/google/adk-samples/blob/main/agents/travel-concierge/tests/post_booking_sample.md#_snippet_12\n\nLANGUAGE: json\nCODE:\n```\nfunction call: \"transfer_to_agent\"\nargs: {\n  \"agent_name\": \"post_trip_agent\"\n}\n```\n\n----------------------------------------\n\nTITLE: Instructing Agent to Memorize Data (JSON)\nDESCRIPTION: This JSON snippet represents an instruction sent to an AI agent system. It specifies a function call named \"memorize\" with arguments designed to store a specific key-value pair. The `value` parameter holds the data to be memorized, and the `key` parameter is the identifier under which it should be stored, enabling the agent to retain information across turns.\nSOURCE: https://github.com/google/adk-samples/blob/main/agents/travel-concierge/tests/post_booking_sample.md#_snippet_8\n\nLANGUAGE: json\nCODE:\n```\nfunction call: \"memorize\"\nargs: {\n  \"value\": \"2025-06-16 15:00:00\",\n  \"key\": \"itinerary_datetime\"\n}\n```\n\n----------------------------------------\n\nTITLE: Calling Hotel Room Selection Agent JSON\nDESCRIPTION: Initiates a simulated API call to retrieve available room options for the user's selected hotel and stay dates. The `request` argument specifies the chosen hotel name and the date range for the stay.\nSOURCE: https://github.com/google/adk-samples/blob/main/agents/travel-concierge/tests/pre_booking_sample.md#_snippet_29\n\nLANGUAGE: JSON\nCODE:\n```\nfunction call: \"hotel_room_selection_agent\"\nargs: {\n  \"request\": \"Belmond Hotel Monasterio in Cusco, Peru from 2025-05-05 to 2025-05-11\"\n}\n```\n\n----------------------------------------\n\nTITLE: Building Deployment Wheel File Using Poetry in Bash\nDESCRIPTION: Builds a wheel (.whl) distribution file of the customer service agent using Poetry for dependency and packaging management. The wheel is output to the 'deployment' directory and is required for deployment to Google Agent Engine. Poetry must be installed and the project properly configured with pyproject.toml.\nSOURCE: https://github.com/google/adk-samples/blob/main/agents/customer-service/README.md#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\npoetry build --format=wheel --output=deployment\n```\n\n----------------------------------------\n\nTITLE: Run Web Application\nDESCRIPTION: The command `adk web` starts a web server to host a user interface for interacting with the agent. It prints the URL to access the application and allows users to interface with the Brand Search Optimization agent through a chatbot-like interface. The UI is initially blank.\nSOURCE: https://github.com/google/adk-samples/blob/main/agents/brand-search-optimization/README.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nadk web\n```\n\n----------------------------------------\n\nTITLE: Calling Memorize Function (JSON)\nDESCRIPTION: This snippet shows a function call to a `memorize` function, used by an agent to store specific pieces of information provided by the user or derived during the conversation. It requires a `key` to label the data and the `value` to be stored. This allows the agent to retain context like origin, destination, or dates for planning tasks.\nSOURCE: https://github.com/google/adk-samples/blob/main/agents/travel-concierge/tests/pre_booking_sample.md#_snippet_8\n\nLANGUAGE: JSON\nCODE:\n```\nfunction call: \"memorize\"\nargs: {\n  \"key\": \"string\", /* The identifier for the data (e.g., \"origin\", \"destination\", \"start_date\") */\n  \"value\": \"string\" /* The value to store */\n}\n```\n\n----------------------------------------\n\nTITLE: Searching Dresses Using Personalized Shopping Agent with JSON\nDESCRIPTION: Represents a JSON function call to perform a search operation within a personalized shopping agent system. It takes a keyword string to query for relevant items, specifically using the keywords 'flowy floral summer dress'. The server responds with a JSON response containing search results formatted as a string with item identifiers, descriptions, and price ranges, separated by defined delimiters for parsing. This interaction models the initial product search phase requiring a matching server backend to return product listings based on the keywords provided.\nSOURCE: https://github.com/google/adk-samples/blob/main/agents/personalized-shopping/tests/example_interactions/text_search_floral_dress.session.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\nfunction call: \"search\"\nargs: {\n  \"keywords\": \"flowy floral summer dress\"\n}\n```\n\nLANGUAGE: json\nCODE:\n```\nResponse from: \"search\"\nresponse: {\n  \"result\": \"Back to Search [SEP] Page 1 (Total results: 50) [SEP] Next > [SEP] B092QL1FLW [SEP] Women Summer Cold Shoulder Dress,Beach Vintage Bohemian Print Sundress Party Prom Swing Loose A-Line Dress with Pocket [SEP] $16.29 to $17.59 [SEP] B094Z77449 [SEP] Casual Summer Dress for Women,V-Neck Sleeveless High Waist Maternity Dress Loose Floral Print Maxi Pregnant Dress [SEP] $1.69 to $12.19 [SEP] B09MW6NN3H [SEP] Mind of My Own Maxi Dress for Womens Sexy Deep V Bodycon Long Dress Fashion Bag Hip Tie dye Printed Dresses [SEP] $7.99 to $14.99 [SEP] B09P8R92RL [SEP] SERCFGYUJ Women's Party Dresses Fashion V Neck Long Sleeve Slit Mini Dress Casual Printed Wrap Buttocks Ruched Prom Dress [SEP] $8.99 to $18.99 [SEP] B09P8RQFHL [SEP] New Years Dress for Women Plus Size Crew Neck Butterfly Print A-Line Long Dresses Casual Lace Splicing Prom Dress [SEP] $8.99 to $19.99 [SEP] B09P8S93S8 [SEP] Sparkly Dresses for Women Long Sleeve Stylish V Neck Mini Dress Casual Flower Butterfly Print Sequin Black Dress [SEP] $5.99 to $15.99 [SEP] B09MW5XWSZ [SEP] NaRHbrg Summer Casual Dress for Women's Boho V Neck Sleeveless Long Maxi Dresses Ladies Loose Pockets Dress Floor-Length [SEP] $4.99 to $13.99 [SEP] B08GRRPFHP [SEP] Alex Evenings Women's Long 3/4 Sleeve Velvet Dress [SEP] $109.65 to $192.06 [SEP] B09RDX8KQJ [SEP] FABIURT Sundresses for Women Casual Beach, Women's Summer Butterfly Printed Dress V-Neck Sleeveless Long Dresses with Pockets [SEP] $4.99 to $7.99 [SEP] B09JWJ5L8S [SEP] BB&KK Women's Summer Maxi Long Cold Shoulder Loose Kaftan Flowy Batwing Beach Cover Up Dress [SEP] $29.99\"\n}\n```\n\n----------------------------------------\n\nTITLE: Running Data Science Multi-Agent Using ADK CLI and Web UI Commands\nDESCRIPTION: Commands to launch the Data Science Multi-Agent system either via the command line interface or through the ADK Web UI. These commands execute the agent, enabling interactive conversations, SQL queries, visualizations, and machine learning model training workflows.\nSOURCE: https://github.com/google/adk-samples/blob/main/agents/data-science/README.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npoetry run adk run data_science\n```\n\nLANGUAGE: bash\nCODE:\n```\npoetry run adk web\n```\n\n----------------------------------------\n\nTITLE: Reporting Day-of Agent Transport Advice (JSON)\nDESCRIPTION: This JSON snippet shows the structured response received from the \"day_of_agent\" sub-agent after it was called. It contains a `response` object with a `result` property, which holds a string containing the textual travel advice generated by the sub-agent. This allows the main agent to receive and relay specialized information back to the user.\nSOURCE: https://github.com/google/adk-samples/blob/main/agents/travel-concierge/tests/post_booking_sample.md#_snippet_11\n\nLANGUAGE: json\nCODE:\n```\nResponse from: \"day_of_agent\"\nresponse: {\n  \"result\": \"Okay, I can help you get from the Space Needle to dinner in Capitol Hill by 7 PM.\\n\\nTo make sure you arrive on time, I recommend leaving the Space Needle by 4:30 PM. This will give you plenty of time to account for traffic and find parking in Capitol Hill.\\n\\nHere are a few transportation options:\\n\\n*   **Ride-sharing (Uber/Lyft):** This is likely the most convenient option. I can help you order an Uber and find a good pickup spot near the Space Needle. I can check the ETA.\\n\\nLet me know if you'd like me to help you with ordering an Uber.\\n\"\n}\n```\n\n----------------------------------------\n\nTITLE: Response from Place Agent (JSON)\nDESCRIPTION: This snippet shows the response received from the `place_agent` function call. It contains a JSON object with a 'places' array, listing potential destinations. Each entry includes key details like the place name, country, image URL, highlights, and a rating, providing context for the user.\nSOURCE: https://github.com/google/adk-samples/blob/main/agents/travel-concierge/tests/pre_booking_sample.md#_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\nResponse from: \"place_agent\"\nresponse: {\n  \"places\": [\n    {\n      \"name\": \"string\", /* The name of the place */\n      \"country\": \"string\", /* The country the place is located in */\n      \"image\": \"string\", /* URL for an image of the place */\n      \"highlights\": \"string\", /* Key features or description */\n      \"rating\": \"string\" /* Rating for the place */\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Calling flight_seat_selection_agent for Seat Map (JSON)\nDESCRIPTION: Demonstrates the JSON format for calling the `flight_seat_selection_agent`. The `request` argument specifies the selected flight (American Airlines AA123 with departure/arrival details) for which the seat map is required.\nSOURCE: https://github.com/google/adk-samples/blob/main/agents/travel-concierge/tests/pre_booking_sample.md#_snippet_12\n\nLANGUAGE: json\nCODE:\n```\nfunction call: \"flight_seat_selection_agent\"\nargs: {\n  \"request\": \"American Airlines (AA123) departing from San Diego (SAN) on May 4th at 2:00 PM, arriving in Lima (LIM) on May 5th at 2:00 AM\"\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Deployed Agent\nDESCRIPTION: Command for quickly testing if a deployed agent is functioning correctly by sending a test message.\nSOURCE: https://github.com/google/adk-samples/blob/main/agents/travel-concierge/README.md#_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\npython deployment/deploy.py --quicktest --resource_id=<RESOURCE_ID>\n```\n\n----------------------------------------\n\nTITLE: Running FOMC Research Agent via ADK CLI (Bash)\nDESCRIPTION: Initiates the execution of the 'fomc_research' agent using the Google ADK command-line interface. This is the primary way to run the agent workflow from the terminal. Prerequisite: Project setup and dependencies installed, command run from the project directory.\nSOURCE: https://github.com/google/adk-samples/blob/main/agents/fomc-research/README.md#_snippet_7\n\nLANGUAGE: Bash\nCODE:\n```\nadk run fomc_research\n```\n\n----------------------------------------\n\nTITLE: Receiving Hotel Room Options Data JSON\nDESCRIPTION: Contains the response from the hotel room selection agent, providing a list of available room types for the selected hotel. Each room object indicates availability status, price per night, and the specific room type name.\nSOURCE: https://github.com/google/adk-samples/blob/main/agents/travel-concierge/tests/pre_booking_sample.md#_snippet_30\n\nLANGUAGE: JSON\nCODE:\n```\nResponse from: \"hotel_room_selection_agent\"\nresponse: {\n  \"rooms\": [\n    {\n      \"isAvailable\": true,\n      \"priceInUSD\": 450,\n      \"roomType\": \"Queen Room with Balcony\"\n    },\n    {\n      \"isAvailable\": true,\n      \"priceInUSD\": 500,\n      \"roomType\": \"King Room with Balcony\"\n    },\n    {\n      \"isAvailable\": false,\n      \"priceInUSD\": 400,\n      \"roomType\": \"Twin Room\"\n    },\n    {\n      \"isAvailable\": true,\n      \"priceInUSD\": 450,\n      \"roomType\": \"Double Room\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Selecting a Dress Product Using Click Operation with JSON\nDESCRIPTION: Models a JSON function call made when the user selects a dress from the search results by clicking on a product button identified by a product code (e.g., 'B092QL1FLW'). The response delivers detailed information categories available on that product page such as available colors, sizes, price range, and navigation controls. This snippet requires backend support that handles product selection and dynamically returns all relevant product attributes and actionable options.\nSOURCE: https://github.com/google/adk-samples/blob/main/agents/personalized-shopping/tests/example_interactions/text_search_floral_dress.session.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\nfunction call: \"click\"\nargs: {\n  \"button_name\": \"B092QL1FLW\"\n}\n```\n\nLANGUAGE: json\nCODE:\n```\nResponse from: \"click\"\nresponse: {\n  \"result\": \"Back to Search [SEP] < Prev [SEP] color [SEP] black [SEP] blacka [SEP] blackb [SEP] blue [SEP] bluea [SEP] blueb [SEP] coffee [SEP] gray [SEP] green [SEP] hot pink [SEP] navy [SEP] pink [SEP] pinka [SEP] purple [SEP] purplea [SEP] sky blue [SEP] sky bluea [SEP] white [SEP] whitea [SEP] yellow [SEP] yellowa [SEP] size [SEP] small [SEP] medium [SEP] large [SEP] x-large [SEP] xx-large [SEP] Women Summer Cold Shoulder Dress,Beach Vintage Bohemian Print Sundress Party Prom Swing Loose A-Line Dress with Pocket [SEP] Price: $16.29 to $17.59 [SEP] Rating: N.A. [SEP] Description [SEP] Features [SEP] Reviews [SEP] Buy Now\"\n}\n```\n\n----------------------------------------\n\nTITLE: Activating Poetry Virtual Environment - Bash\nDESCRIPTION: This command activates the virtual environment managed by Poetry for the project. Executing this ensures that subsequent Python commands use the project's isolated dependencies and configuration.\nSOURCE: https://github.com/google/adk-samples/blob/main/agents/travel-concierge/README.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\neval $(poetry env activate)\n(travel-concierge-py3.12) $ # Virtualenv entered\n```\n\n----------------------------------------\n\nTITLE: Running the agent in CLI mode\nDESCRIPTION: Command to run the customer service agent in command-line interface mode. This launches the agent for text-based interaction from the terminal.\nSOURCE: https://github.com/google/adk-samples/blob/main/agents/customer-service/README.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nadk run customer_service\n```\n\n----------------------------------------\n\nTITLE: Running Integration and Unit Tests with Poetry - Bash\nDESCRIPTION: This command executes all test files located within the `tests/` directory. These tests cover integration, sub-agent functionality, and environment queries. The `poetry run` prefix ensures `pytest` runs within the project's isolated virtual environment.\nSOURCE: https://github.com/google/adk-samples/blob/main/agents/data-science/README.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\npoetry run pytest tests\n```\n\n----------------------------------------\n\nTITLE: Calling Place Agent (JSON)\nDESCRIPTION: This snippet shows a function call to the `place_agent`, typically used to find general places or destinations based on a broad request. It requires a `request` string describing the desired location or topic. The purpose is to generate initial travel inspiration or a list of potential places.\nSOURCE: https://github.com/google/adk-samples/blob/main/agents/travel-concierge/tests/pre_booking_sample.md#_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\nfunction call: \"place_agent\"\nargs: {\n  \"request\": \"string\" /* The user's request for places (e.g., \"the americas\", \"Europe\") */\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Deployed Agent Engine Resource - Bash\nDESCRIPTION: This command executes the deployment script (`deployment/deploy.py`) with the `--delete` flag and the `RESOURCE_ID` of the agent to be removed. This action will undeploy and delete the specified Vertex AI Agent Engine resource from your Google Cloud project.\nSOURCE: https://github.com/google/adk-samples/blob/main/agents/data-science/README.md#_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\npython3 deployment/deploy.py --delete --resource_id=RESOURCE_ID\n```\n\n----------------------------------------\n\nTITLE: Deleting Vertex AI Agent Engine Resource (Bash)\nDESCRIPTION: This command runs the `deploy.py` script located in the `deployment` directory with the `--delete` flag and the `--resource_id` argument, using the resource ID obtained during creation. This instructs the script to initiate the deletion of the specified Vertex AI Agent Engine resource, cleaning up the deployed resource.\nSOURCE: https://github.com/google/adk-samples/blob/main/agents/fomc-research/README.md#_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\npython3 deployment/deploy.py --delete --resource_id=$RESOURCE_ID\n```\n\n----------------------------------------\n\nTITLE: Running Unit Tests Using Pytest in Bash\nDESCRIPTION: Runs all unit test files located in the 'tests/unit' directory using the pytest command. Unit tests validate individual components or units of the codebase in isolation. It depends on pytest being installed and properly configured test files present in the specified path.\nSOURCE: https://github.com/google/adk-samples/blob/main/agents/customer-service/README.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\npytest tests/unit\n```\n\n----------------------------------------\n\nTITLE: Calling Day-of Agent for Transport Help (JSON)\nDESCRIPTION: This JSON snippet represents an instruction to the AI agent system to initiate a function call to a specific sub-agent named \"day_of_agent\". The `args` object contains parameters intended for this sub-agent, indicating that the user's request is related to needing \"help\" with day-of travel plans. This pattern is used to delegate specific tasks or queries to specialized agent modules.\nSOURCE: https://github.com/google/adk-samples/blob/main/agents/travel-concierge/tests/post_booking_sample.md#_snippet_10\n\nLANGUAGE: json\nCODE:\n```\nfunction call: \"day_of_agent\"\nargs: {\n  \"request\": \"help\"\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting Environment Variables from .env (Bash)\nDESCRIPTION: Configures the Bash shell to automatically export variables read from the '.env' file into the environment. This allows the application to pick up configuration values like project IDs, datasets, and locations. Prerequisite: A '.env' file must exist and be populated with correct values.\nSOURCE: https://github.com/google/adk-samples/blob/main/agents/fomc-research/README.md#_snippet_5\n\nLANGUAGE: Bash\nCODE:\n```\nset -o allexport\n. .env\nset +o allexport\n```\n\n----------------------------------------\n\nTITLE: Running Unit Tests for Agents and Tools\nDESCRIPTION: Command for executing unit tests to verify all agents and tools respond correctly.\nSOURCE: https://github.com/google/adk-samples/blob/main/agents/travel-concierge/README.md#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\npytest tests\n```\n\n----------------------------------------\n\nTITLE: Running Example Code in Python\nDESCRIPTION: This command runs the example Python script `tests/programmatic_example.py`, which demonstrates how to interact with agents. It's used to observe the flow of events and JSON payloads that are crucial for rendering in a GUI. It's necessary to have Python installed and the relevant dependencies for the ADK framework.\nSOURCE: https://github.com/google/adk-samples/blob/main/agents/travel-concierge/README.md#_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\npython tests/programmatic_example.py\n```\n\n----------------------------------------\n\nTITLE: Preparing Data and Uploading PDF to RAG Corpus\nDESCRIPTION: Runs a script to create or retrieve a RAG corpus and upload specified PDFs, either by default downloading Alphabet's 10-K PDF or via customizing script variables for different files.\nSOURCE: https://github.com/google/adk-samples/blob/main/agents/RAG/README.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npython rag/shared_libraries/prepare_corpus_and_data.py\n```\n\n----------------------------------------\n\nTITLE: Running Agent via ADK CLI - Bash\nDESCRIPTION: This ADK command starts the Travel Concierge agent and allows interaction via the command-line interface. It provides a quick way to test the agent's conversational flow and functionality.\nSOURCE: https://github.com/google/adk-samples/blob/main/agents/travel-concierge/README.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nadk run travel_concierge\n```\n\n----------------------------------------\n\nTITLE: Setting Up BigQuery ML Reference Guide RAG Corpus Using Python\nDESCRIPTION: Command to run a Python script that initializes the retrieval-augmented generation (RAG) corpus for BigQuery ML reference guide documents. This setup step creates and ingests the guide corpus into the RAG engine, enabling the BQML agent to query comprehensive machine learning documentation.\nSOURCE: https://github.com/google/adk-samples/blob/main/agents/data-science/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npython3 data_science/utils/reference_guide_RAG.py\n```\n\n----------------------------------------\n\nTITLE: Deploying Travel Concierge Agent to Vertex AI\nDESCRIPTION: Commands for installing deployment dependencies and deploying the agent to Vertex AI Agent Engine.\nSOURCE: https://github.com/google/adk-samples/blob/main/agents/travel-concierge/README.md#_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\npoetry install --with deployment\npython deployment/deploy.py --create\n```\n\n----------------------------------------\n\nTITLE: Building Python Wheel Package with Poetry (Bash)\nDESCRIPTION: This command uses the `poetry` tool to build the Python project located in the current directory (expected to be `fomc-research`) into a distributable wheel package (`.whl`). The `--format=wheel` flag specifies the output format, and `--output=deployment` directs the output file to the `deployment` subdirectory. This wheel file is required for deploying the agent.\nSOURCE: https://github.com/google/adk-samples/blob/main/agents/fomc-research/README.md#_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\npoetry build --format=wheel --output=deployment\n```\n\n----------------------------------------\n\nTITLE: Receiving Product Details - Click Response - JSON\nDESCRIPTION: System response after a 'click' action, providing comprehensive product information, available colors, sizes, and interactive options (buttons) separated by the '[SEP]' delimiter. This response typically follows an initial product selection or navigation action.\nSOURCE: https://github.com/google/adk-samples/blob/main/agents/personalized-shopping/tests/example_interactions/text_search_floral_dress.session.md#_snippet_4\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"Response from\": \"click\",\n  \"response\": {\n    \"result\": \"Back to Search [SEP] < Prev [SEP] color [SEP] black [SEP] blacka [SEP] blackb [SEP] blue [SEP] bluea [SEP] blueb [SEP] coffee [SEP] gray [SEP] green [SEP] hot pink [SEP] navy [SEP] pink [SEP] pinka [SEP] purple [SEP] purplea [SEP] sky blue [SEP] sky bluea [SEP] white [SEP] whitea [SEP] yellow [SEP] yellowa [SEP] size [SEP] small [SEP] medium [SEP] large [SEP] x-large [SEP] xx-large [SEP] Women Summer Cold Shoulder Dress,Beach Vintage Bohemian Print Sundress Party Prom Swing Loose A-Line Dress with Pocket [SEP] Price: $16.29 to $17.59 [SEP] Rating: N.A. [SEP] Description [SEP] Features [SEP] Reviews [SEP] Buy Now\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Detailed Itinerary Response with Daily Breakdown\nDESCRIPTION: JSON response containing a comprehensive travel itinerary with structured data for a 9-day trip to Peru, including flights, hotel stays, and activities with all relevant booking details.\nSOURCE: https://github.com/google/adk-samples/blob/main/agents/travel-concierge/tests/pre_booking_sample.md#_snippet_36\n\nLANGUAGE: json\nCODE:\n```\nResponse from: \"itinerary_agent\"\nresponse: {\n  \"trip_name\": \"San Diego to Peru Trip\",\n  \"start_date\": \"2025-05-04\",\n  \"end_date\": \"2025-05-11\",\n  \"origin\": \"San Diego\",\n  \"destination\": \"Peru\",\n  \"days\": [\n    {\n      \"day_number\": 1,\n      \"date\": \"2025-05-04\",\n      \"events\": [\n        {\n          \"event_type\": \"flight\",\n          \"description\": \"Depart from home and fly to Lima\",\n          \"booking_required\": true,\n          \"departure_airport\": \"SAN\",\n          \"arrival_airport\": \"LIM\",\n          \"flight_number\": \"AA123\",\n          \"boarding_time\": \"13:30\",\n          \"seat_number\": \"1A\",\n          \"departure_time\": \"14:00\",\n          \"arrival_time\": \"02:00\",\n          \"price\": \"600\",\n          \"booking_id\": \"\"\n        }\n      ]\n    },\n    {\n      \"day_number\": 2,\n      \"date\": \"2025-05-05\",\n      \"events\": [\n        {\n          \"event_type\": \"flight\",\n          \"description\": \"Connecting flight to Cusco\",\n          \"booking_required\": true,\n          \"departure_airport\": \"LIM\",\n          \"arrival_airport\": \"CUZ\",\n          \"flight_number\": \"\",\n          \"boarding_time\": \"\",\n          \"seat_number\": \"\",\n          \"departure_time\": \"\",\n          \"arrival_time\": \"\",\n          \"price\": \"\",\n          \"booking_id\": \"\"\n        },\n        {\n          \"event_type\": \"hotel\",\n          \"description\": \"Check into Belmond Hotel Monasterio\",\n          \"address\": \"Calle Plazoleta Nazarenas, Cusco 08001, Peru\",\n          \"check_in_time\": \"14:00\",\n          \"check_out_time\": \"11:00\",\n          \"room_selection\": \"Queen Room with Balcony\",\n          \"booking_required\": true,\n          \"price\": \"450\",\n          \"booking_id\": \"\"\n        }\n      ]\n    },\n    {\n      \"day_number\": 3,\n      \"date\": \"2025-05-06\",\n      \"events\": [\n        {\n          \"event_type\": \"visit\",\n          \"description\": \"Explore Cusco\",\n          \"address\": \"Cusco, Peru\",\n          \"start_time\": \"09:00\",\n          \"end_time\": \"18:00\",\n          \"booking_required\": false\n        }\n      ]\n    },\n    {\n      \"day_number\": 4,\n      \"date\": \"2025-05-07\",\n      \"events\": [\n        {\n          \"event_type\": \"visit\",\n          \"description\": \"Machu Picchu\",\n          \"address\": \"Machu Picchu, Peru\",\n          \"start_time\": \"09:00\",\n          \"end_time\": \"18:00\",\n          \"booking_required\": true\n        }\n      ]\n    },\n    {\n      \"day_number\": 5,\n      \"date\": \"2025-05-08\",\n      \"events\": [\n        {\n          \"event_type\": \"visit\",\n          \"description\": \"Vegan Food in Cusco\",\n          \"address\": \"Cusco, Peru\",\n          \"start_time\": \"09:00\",\n          \"end_time\": \"18:00\",\n          \"booking_required\": false\n        }\n      ]\n    },\n    {\n      \"day_number\": 6,\n      \"date\": \"2025-05-09\",\n      \"events\": [\n        {\n          \"event_type\": \"visit\",\n          \"description\": \"Lake Titicaca\",\n          \"address\": \"Lake Titicaca, Peru\",\n          \"start_time\": \"09:00\",\n          \"end_time\": \"18:00\",\n          \"booking_required\": true\n        }\n      ]\n    },\n    {\n      \"day_number\": 7,\n      \"date\": \"2025-05-10\",\n      \"events\": [\n        {\n          \"event_type\": \"flight\",\n          \"description\": \"Travel back to Lima\",\n          \"booking_required\": true,\n          \"departure_airport\": \"CUZ\",\n          \"arrival_airport\": \"LIM\",\n          \"flight_number\": \"\",\n          \"boarding_time\": \"\",\n          \"seat_number\": \"\",\n          \"departure_time\": \"\",\n          \"arrival_time\": \"\",\n          \"price\": \"\",\n          \"booking_id\": \"\"\n        }\n      ]\n    },\n    {\n      \"day_number\": 8,\n      \"date\": \"2025-05-11\",\n      \"events\": [\n        {\n          \"event_type\": \"flight\",\n          \"description\": \"Depart from Lima\",\n          \"booking_required\": true,\n          \"departure_airport\": \"LIM\",\n          \"arrival_airport\": \"SAN\",\n          \"flight_number\": \"LATAM2345\",\n          \"boarding_time\": \"13:30\",\n          \"seat_number\": \"2A\",\n          \"departure_time\": \"14:00\",\n          \"arrival_time\": \"02:00\",\n          \"price\": \"650\",\n          \"booking_id\": \"\"\n        }\n      ]\n    },\n    {\n      \"day_number\": 9,\n      \"date\": \"2025-05-12\",\n      \"events\": [\n        {\n          \"event_type\": \"visit\",\n          \"description\": \"Arrive in San Diego\",\n          \"address\": \"San Diego, CA, USA\",\n          \"start_time\": \"02:00\",\n          \"end_time\": \"02:00\",\n          \"booking_required\": false\n        }\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Memorizing Room Selection Using JSON Function Call\nDESCRIPTION: A JSON function call to store the user's room selection ('Queen Room with Balcony') under the key 'room_selection' for later use in the booking process.\nSOURCE: https://github.com/google/adk-samples/blob/main/agents/travel-concierge/tests/pre_booking_sample.md#_snippet_33\n\nLANGUAGE: json\nCODE:\n```\nfunction call: \"memorize\"\nargs: {\n  \"key\": \"room_selection\",\n  \"value\": \"Queen Room with Balcony\"\n}\n```\n\n----------------------------------------\n\nTITLE: Calling flight_search_agent for Outbound Flights (JSON)\nDESCRIPTION: Shows the JSON structure used by the `planning_agent` to invoke the `flight_search_agent`. It requests flights from San Diego to Peru for specific dates (May 4th to May 11th, 2025) via a natural language query string within the `request` argument.\nSOURCE: https://github.com/google/adk-samples/blob/main/agents/travel-concierge/tests/pre_booking_sample.md#_snippet_10\n\nLANGUAGE: json\nCODE:\n```\nfunction call: \"flight_search_agent\"\nargs: {\n  \"request\": \"Flights from San Diego, CA, USA to Peru from 2025-05-04 to 2025-05-11\"\n}\n```\n\n----------------------------------------\n\nTITLE: Granting BigQuery Permissions using gcloud CLI (Bash)\nDESCRIPTION: This snippet grants necessary BigQuery permissions (User and Data Viewer) to the Vertex AI Reasoning Engine Service Agent using the `gcloud` command-line tool. It first sets an environment variable `RE_SA` with the service account email derived from the project number and then uses `gcloud projects add-iam-policy-binding` to apply the roles. This is a prerequisite for the agent to access BigQuery data.\nSOURCE: https://github.com/google/adk-samples/blob/main/agents/fomc-research/README.md#_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nexport RE_SA=\"service-${GOOGLE_CLOUD_PROJECT_NUMBER}@gcp-sa-aiplatform-re.iam.gserviceaccount.com\"\ngcloud projects add-iam-policy-binding ${GOOGLE_CLOUD_PROJECT} \\\n    --member=\"serviceAccount:${RE_SA}\" \\\n    --condition=None \\\n    --role=\"roles/bigquery.user\"\ngcloud projects add-iam-policy-binding ${GOOGLE_CLOUD_PROJECT} \\\n    --member=\"serviceAccount:${RE_SA}\" \\\n    --condition=None \\\n    --role=\"roles/bigquery.dataViewer\"\n```\n\n----------------------------------------\n\nTITLE: Response from Agent Transfer\nDESCRIPTION: JSON response confirming the successful transfer of the user to the booking agent with an empty response object indicating completion of the transfer.\nSOURCE: https://github.com/google/adk-samples/blob/main/agents/travel-concierge/tests/pre_booking_sample.md#_snippet_38\n\nLANGUAGE: json\nCODE:\n```\nResponse from: \"transfer_to_agent\"\nresponse: {}\n```\n\n----------------------------------------\n\nTITLE: Testing Deployed Agent Using Vertex AI Python SDK\nDESCRIPTION: This Python snippet demonstrates how to initialize the Vertex AI client, configure access with project and location IDs, retrieve a deployed agent engine by resource name, and stream user query events to the agent. It prints the response events from the deployed agent, facilitating interaction testing. Dependencies include 'vertexai' Python package, a valid Google Cloud project setup, and correct resource identifiers.\nSOURCE: https://github.com/google/adk-samples/blob/main/agents/customer-service/README.md#_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nimport vertexai\nfrom customer_service.config import Config\nfrom vertexai.preview.reasoning_engines import AdkApp\n\nconfigs = Config()\n\nvertexai.init(\n    project=\"<GOOGLE_CLOUD_LOCATION_PROJECT_ID>\",\n    location=\"<GOOGLE_CLOUD_LOCATION>\"\n)\n\n# get the agent based on resource id\nagent_engine = vertexai.agent_engines.get('DEPLOYMENT_RESOURCE_NAME') # looks like this projects/PROJECT_ID/locations/LOCATION/reasoningEngines/REASONING_ENGINE_ID\n\nfor event in remote_agent.stream_query(\n    user_id=USER_ID,\n    session_id=session[\"id\"],\n    message=\"Hello!\",\n):\n    print(event)\n\n```\n\n----------------------------------------\n\nTITLE: Flight Status Check Request\nDESCRIPTION: Requests the status of a specific flight (e.g., AA1234 on 2025-06-15) by providing flight details to the monitoring agent to confirm delays or cancellations.\nSOURCE: https://github.com/google/adk-samples/blob/main/agents/travel-concierge/tests/post_booking_sample.md#_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"function call\": \"flight_status_check\",\n  \"args\": {\n    \"flight_date\": \"2025-06-15\",\n    \"checkin_time\": \"07:30\",\n    \"departure_time\": \"08:00\",\n    \"flight_number\": \"AA1234\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Response from memorize Agent Confirming Flight Storage (JSON)\nDESCRIPTION: Represents the JSON confirmation response from the `memorize` agent. It indicates that the outbound flight selection details (provided as a JSON string in the call) have been successfully stored under the specified key `outbound_flight_selection`.\nSOURCE: https://github.com/google/adk-samples/blob/main/agents/travel-concierge/tests/pre_booking_sample.md#_snippet_15\n\nLANGUAGE: json\nCODE:\n```\nResponse from: \"memorize\"\nresponse: {\n  \"status\": \"Stored \\\"outbound_flight_selection\\\": \\\"{\\\"airline_logo\\\": \\\"/images/american.png\\\", \\\"airlines\\\": [\\\"American Airlines\\\"], \\\"arrival\\\": {\\\"airportCode\\\": \\\"LIM\\\", \\\"cityName\\\": \\\"Lima\\\", \\\"timestamp\\\": \\\"2025-05-05T02:00:00Z\\\"}, \\\"departure\\\": {\\\"airportCode\\\": \\\"SAN\\\", \\\"cityName\\\": \\\"San Diego\\\", \\\"timestamp\\\": \\\"2025-05-04T14:00:00Z\\\"}, \\\"flight_number\\\": \\\"AA123\\\", \\\"numberOfStops\\\": 1, \\\"priceInUSD\\\": 600}\\\"\n}\n```\n\n----------------------------------------\n\nTITLE: Response from Room Selection Memorization\nDESCRIPTION: JSON response confirming the successful storage of the room selection data, showing the status of the operation with the stored value.\nSOURCE: https://github.com/google/adk-samples/blob/main/agents/travel-concierge/tests/pre_booking_sample.md#_snippet_34\n\nLANGUAGE: json\nCODE:\n```\nResponse from: \"memorize\"\nresponse: {\n  \"status\": \"Stored \\\"room_selection\\\": \\\"Queen Room with Balcony\\\"\"\n}\n```\n\n----------------------------------------\n\nTITLE: Response from Agent Transfer (JSON)\nDESCRIPTION: This snippet shows the expected successful response from the `transfer_to_agent` function call. An empty JSON object indicates that the transfer was successfully initiated or completed by the root agent or orchestrator.\nSOURCE: https://github.com/google/adk-samples/blob/main/agents/travel-concierge/tests/pre_booking_sample.md#_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\nResponse from: \"transfer_to_agent\"\nresponse: {}\n```\n\n----------------------------------------\n\nTITLE: Response from memorize Agent Confirming Seat Storage (JSON)\nDESCRIPTION: Displays the JSON confirmation response from the `memorize` agent after successfully storing the selected outbound seat number ('1A') under the key `outbound_seat_number`. This confirms the user's seat choice is saved.\nSOURCE: https://github.com/google/adk-samples/blob/main/agents/travel-concierge/tests/pre_booking_sample.md#_snippet_17\n\nLANGUAGE: json\nCODE:\n```\nResponse from: \"memorize\"\nresponse: {\n  \"status\": \"Stored \\\"outbound_seat_number\\\": \\\"1A\\\"\"\n}\n```\n\n----------------------------------------\n\nTITLE: Running Programmatic Client Example - Bash\nDESCRIPTION: This command executes a Python script that demonstrates how to programmatically interact with the Travel Concierge agent when it is running as an API server. The example likely shows making API calls and handling responses.\nSOURCE: https://github.com/google/adk-samples/blob/main/agents/travel-concierge/README.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\npython tests/programmatic_example.py\n```\n\n----------------------------------------\n\nTITLE: Response from Hotel Selection Memorization\nDESCRIPTION: JSON response confirming the successful storage of hotel selection data in the system, showing the status of the operation with the stored data.\nSOURCE: https://github.com/google/adk-samples/blob/main/agents/travel-concierge/tests/pre_booking_sample.md#_snippet_32\n\nLANGUAGE: json\nCODE:\n```\nResponse from: \"memorize\"\nresponse: {\n  \"status\": \"Stored \\\"hotel_selection\\\": \\\"{\\\"address\\\": \\\"Calle Plazoleta Nazarenas, Cusco 08001, Peru\\\", \\\"check_in_time\\\": \\\"14:00\\\", \\\"check_out_time\\\": \\\"11:00\\\", \\\"name\\\": \\\"Belmond Hotel Monasterio\\\", \\\"price\\\": 450, \\\"thumbnail\\\": \\\"/src/images/hotel.png\\\"}\\\"\"\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up BigQuery Data Table (Bash)\nDESCRIPTION: Executes a Python script ('bigquery_setup.py') to create a BigQuery table and load sample timeseries data required by the agent's financial analysis component. Uses environment variables for configuration. Prerequisite: BigQuery API enabled, '.env' variables exported, command run from the 'deployment' subdirectory.\nSOURCE: https://github.com/google/adk-samples/blob/main/agents/fomc-research/README.md#_snippet_6\n\nLANGUAGE: Bash\nCODE:\n```\npython bigquery_setup.py --project_id=$GOOGLE_CLOUD_PROJECT \\\n    --dataset_id=$GOOGLE_CLOUD_BQ_DATASET \\\n    --location=$GOOGLE_CLOUD_LOCATION \\\n    --data_file=sample_timeseries_data.csv\n```\n\n----------------------------------------\n\nTITLE: Reporting Memorize Function Result (JSON)\nDESCRIPTION: This JSON snippet shows the structured response received from the AI agent system after executing the \"memorize\" function call instruction. It indicates that the operation was successful by reporting the `status` and confirming the key-value pair that was stored. This format allows the system orchestrating the agent to parse and confirm the outcome programmatically.\nSOURCE: https://github.com/google/adk-samples/blob/main/agents/travel-concierge/tests/post_booking_sample.md#_snippet_9\n\nLANGUAGE: json\nCODE:\n```\nResponse from: \"memorize\"\nresponse: {\n  \"status\": \"Stored \\\"itinerary_datetime\\\": \\\"2025-06-16 15:00:00\\\"\"\n}\n```\n\n----------------------------------------\n\nTITLE: Simulating Final Purchase 'Buy Now' Click Event Using JSON\nDESCRIPTION: This snippet depicts the simulated click event where the user confirms the purchase by clicking the \"Buy Now\" button. The JSON call format includes the button_name parameter to trigger the transaction process. This action requires the backend to handle purchase processing and return confirmation details.\nSOURCE: https://github.com/google/adk-samples/blob/main/agents/personalized-shopping/tests/example_interactions/image_search_denim_skirt.session.md#_snippet_12\n\nLANGUAGE: json\nCODE:\n```\nfunction call: \"click\"\nargs: {\n  \"button_name\": \"Buy Now\"\n}\n```\n\n----------------------------------------\n\nTITLE: Receiving Product Details - Click Response - JSON\nDESCRIPTION: System response after navigating back to the product page via the '< Prev' action. It returns the full product details, available options (colors, sizes), and interactive buttons, allowing the user to continue exploring the product.\nSOURCE: https://github.com/google/adk-samples/blob/main/agents/personalized-shopping/tests/example_interactions/text_search_floral_dress.session.md#_snippet_8\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"Response from\": \"click\",\n  \"response\": {\n    \"result\": \"Back to Search [SEP] < Prev [SEP] color [SEP] black [SEP] blacka [SEP] blackb [SEP] blue [SEP] bluea [SEP] blueb [SEP] coffee [SEP] gray [SEP] green [SEP] hot pink [SEP] navy [SEP] pink [SEP] pinka [SEP] purple [SEP] purplea [SEP] sky blue [SEP] sky bluea [SEP] white [SEP] whitea [SEP] yellow [SEP] yellowa [SEP] size [SEP] small [SEP] medium [SEP] large [SEP] x-large [SEP] xx-large [SEP] Women Summer Cold Shoulder Dress,Beach Vintage Bohemian Print Sundress Party Prom Swing Loose A-Line Dress with Pocket [SEP] Price: $16.29 to $17.59 [SEP] Rating: N.A. [SEP] Description [SEP] Features [SEP] Reviews [SEP] Buy Now\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Simulating Color Selection Click Event Using JSON\nDESCRIPTION: This snippet defines a function call for the personalized shopping agent where the user clicks the \"natural khaki\" button to select the product color. The JSON format includes an action key 'click' and an argument that specifies the button name, supporting interaction-driven product filtering.\nSOURCE: https://github.com/google/adk-samples/blob/main/agents/personalized-shopping/tests/example_interactions/image_search_denim_skirt.session.md#_snippet_10\n\nLANGUAGE: json\nCODE:\n```\nfunction call: \"click\"\nargs: {\n  \"button_name\": \"natural khaki\"\n}\n```\n\n----------------------------------------\n\nTITLE: Receiving Purchase Confirmation - Click Response - JSON\nDESCRIPTION: System response after the 'Buy Now' click action. It provides confirmation details for the purchase, including the ASIN, selected options (color and size), and potentially reward/task completion information.\nSOURCE: https://github.com/google/adk-samples/blob/main/agents/personalized-shopping/tests/example_interactions/text_search_floral_dress.session.md#_snippet_16\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"Response from\": \"click\",\n  \"response\": {\n    \"result\": \"Thank you for shopping with us! [SEP] Your code: [SEP] None [SEP] (Paste it in your MTurk interface.) [SEP] Purchased [SEP] asin [SEP] B092QL1FLW [SEP] options [SEP] {\"color\": \"black\", \"size\": \"small\"} [SEP] attrs [SEP] None [SEP] category [SEP] None [SEP] query [SEP] None [SEP] product category [SEP] None [SEP] Target [SEP] asin [SEP] options [SEP] attrs [SEP] price upper [SEP] instuction text [SEP] category [SEP] product category [SEP] query [SEP] Goal [SEP] None [SEP] Reward [SEP] Your score (min 0.0, max 1.0) [SEP] 0.0 [SEP] Reward Details [SEP] None\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting .env Variables\nDESCRIPTION: This is an example configuration for the .env file that is required for testing the agent. It is important to set the project ID and RAG corpus values to ensure that the testing and deployment scripts can access the necessary resources.  This is crucial for configuring the testing and interaction with the deployed agent. The user must replace placeholder values with their specific project details.\nSOURCE: https://github.com/google/adk-samples/blob/main/agents/RAG/README.md#_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nGOOGLE_CLOUD_PROJECT=your-project-id\nRAG_CORPUS=projects/<project-number>/locations/us-central1/ragCorpora/<corpus-id>\n```\n\n----------------------------------------\n\nTITLE: Receiving Product Details - Click Response - JSON\nDESCRIPTION: System response after selecting the 'black' color. It returns the standard product details layout, confirming the system registered the color change.\nSOURCE: https://github.com/google/adk-samples/blob/main/agents/personalized-shopping/tests/example_interactions/text_search_floral_dress.session.md#_snippet_12\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"Response from\": \"click\",\n  \"response\": {\n    \"result\": \"Back to Search [SEP] < Prev [SEP] color [SEP] black [SEP] blacka [SEP] blackb [SEP] blue [SEP] bluea [SEP] blueb [SEP] coffee [SEP] gray [SEP] green [SEP] hot pink [SEP] navy [SEP] pink [SEP] pinka [SEP] purple [SEP] purplea [SEP] sky blue [SEP] sky bluea [SEP] white [SEP] whitea [SEP] yellow [SEP] yellowa [SEP] size [SEP] small [SEP] medium [SEP] large [SEP] x-large [SEP] xx-large [SEP] Women Summer Cold Shoulder Dress,Beach Vintage Bohemian Print Sundress Party Prom Swing Loose A-Line Dress with Pocket [SEP] Price: $16.29 to $17.59 [SEP] Rating: N.A. [SEP] Description [SEP] Features [SEP] Reviews [SEP] Buy Now\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Receiving Purchase Confirmation Response JSON After 'Buy Now' Click\nDESCRIPTION: This JSON response snippet provides the confirmation message after the user clicks \"Buy Now.\" The 'result' includes thank you text, purchase details such as ASIN, selected options (color and size), and instructions for MTurk interface code input. This final response confirms the completed action and contains relevant metadata related to the purchase transaction.\nSOURCE: https://github.com/google/adk-samples/blob/main/agents/personalized-shopping/tests/example_interactions/image_search_denim_skirt.session.md#_snippet_13\n\nLANGUAGE: json\nCODE:\n```\nResponse from: \"click\"\nresponse: {\n  \"result\": \"Thank you for shopping with us! [SEP] Your code: [SEP] None [SEP] (Paste it in your MTurk interface.) [SEP] Purchased [SEP] asin [SEP] B085T3HMGR [SEP] options [SEP] {\\\"color\\\": \\\"natural khaki\\\", \\\"size\\\": \\\"12 plus\\\"} [SEP] attrs [SEP] None [SEP] category [SEP] None [SEP] query [SEP] None [SEP] product category [SEP] None [SEP] Target [SEP] asin [SEP] options [SEP] attrs [SEP] price upper [SEP] instuction text [SEP] category [SEP] product category [SEP] query [SEP] Goal [SEP] None [SEP] Reward [SEP] Your score (min 0.0, max 1.0) [SEP] 0.0 [SEP] Reward Details [SEP] None\"\n}\n```\n\n----------------------------------------\n\nTITLE: Confirming Agent Transfer (JSON)\nDESCRIPTION: This JSON snippet shows the response received from the AI agent system after processing the request to transfer the conversation to another agent. The `response` object is empty, which likely signifies that the transfer instruction was successfully received and is being processed or completed. The subsequent conversation turn shows the new agent taking over, indicating the transfer was successful.\nSOURCE: https://github.com/google/adk-samples/blob/main/agents/travel-concierge/tests/post_booking_sample.md#_snippet_13\n\nLANGUAGE: json\nCODE:\n```\nResponse from: \"transfer_to_agent\"\nresponse: {}\n```\n\n----------------------------------------\n\nTITLE: Cloning the Repository for the RAG Agent\nDESCRIPTION: Clones the adk-samples repository and navigates to the RAG agent directory, setting up the environment for further development and setup.\nSOURCE: https://github.com/google/adk-samples/blob/main/agents/RAG/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/google/adk-samples.git\ncd adk-samples/agents/RAG\n```\n\n----------------------------------------\n\nTITLE: Transfer to Trip Monitor Agent Function Call\nDESCRIPTION: Delegates monitoring responsibilities to the 'trip_monitor_agent', responsible for tracking flight statuses, event bookings, weather impacts, and providing updates during the trip.\nSOURCE: https://github.com/google/adk-samples/blob/main/agents/travel-concierge/tests/post_booking_sample.md#_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"function call\": \"transfer_to_agent\",\n  \"args\": {\n    \"agent_name\": \"trip_monitor_agent\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Receiving Product Details - Click Response - JSON\nDESCRIPTION: System response after selecting the 'sky blue' color. It returns the standard product details layout, implying the color selection was registered by the system and the view was refreshed.\nSOURCE: https://github.com/google/adk-samples/blob/main/agents/personalized-shopping/tests/example_interactions/text_search_floral_dress.session.md#_snippet_10\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"Response from\": \"click\",\n  \"response\": {\n    \"result\": \"Back to Search [SEP] < Prev [SEP] color [SEP] black [SEP] blacka [SEP] blackb [SEP] blue [SEP] bluea [SEP] blueb [SEP] coffee [SEP] gray [SEP] green [SEP] hot pink [SEP] navy [SEP] pink [SEP] pinka [SEP] purple [SEP] purplea [SEP] sky blue [SEP] sky bluea [SEP] white [SEP] whitea [SEP] yellow [SEP] yellowa [SEP] size [SEP] small [SEP] medium [SEP] large [SEP] x-large [SEP] xx-large [SEP] Women Summer Cold Shoulder Dress,Beach Vintage Bohemian Print Sundress Party Prom Swing Loose A-Line Dress with Pocket [SEP] Price: $16.29 to $17.59 [SEP] Rating: N.A. [SEP] Description [SEP] Features [SEP] Reviews [SEP] Buy Now\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Confirming Return Seat Number Memorization JSON\nDESCRIPTION: Represents the success response from the `memorize` function call, confirming that the selected seat number (\"2A\") for the return flight has been successfully stored in the agent's memory.\nSOURCE: https://github.com/google/adk-samples/blob/main/agents/travel-concierge/tests/pre_booking_sample.md#_snippet_26\n\nLANGUAGE: JSON\nCODE:\n```\nResponse from: \"memorize\"\nresponse: {\n  \"status\": \"Stored \\\"return_seat_number\\\": \\\"2A\\\"\"\n}\n```\n\n----------------------------------------\n\nTITLE: Confirming Return Flight Details Memorization JSON\nDESCRIPTION: Represents the success response from the `memorize` function call, indicating that the selected return flight details have been stored in the agent's memory. The status message confirms the key and the stored value string.\nSOURCE: https://github.com/google/adk-samples/blob/main/agents/travel-concierge/tests/pre_booking_sample.md#_snippet_24\n\nLANGUAGE: JSON\nCODE:\n```\nResponse from: \"memorize\"\nresponse: {\n  \"status\": \"Stored \\\"return_flight_selection\\\": \\\"{\\\"airline_logo\\\": \\\"/images/LATAM.png\\\", \\\"airlines\\\": [\\\"LATAM Airlines\\\"], \\\"arrival\\\": {\\\"airportCode\\\": \\\"SAN\\\", \\\"cityName\\\": \\\"San Diego\\\", \\\"timestamp\\\": \\\"2025-05-12T02:00:00Z\\\"}, \\\"departure\\\": {\\\"airportCode\\\": \\\"LIM\\\", \\\"cityName\\\": \\\"Lima\\\", \\\"timestamp\\\": \\\"2025-05-11T14:00:00Z\\\"}, \\\"flight_number\\\": \\\"LATAM2345\\\", \\\"numberOfStops\\\": 1, \\\"priceInUSD\\\": 650}\\\"\n```\n\n----------------------------------------\n\nTITLE: Directory Structure Overview for Agents in Bash\nDESCRIPTION: This snippet illustrates the standard directory structure for agents in the ADK Samples project. It shows the hierarchical organization of files and folders, including the core agent code, sub-agents, tools, deployment scripts, and testing resources. This structure serves as a template for creating new agents within the project.\nSOURCE: https://github.com/google/adk-samples/blob/main/agents/README.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n├── agent-name\n│   ├── agent_name/\n│   │   ├── shared_libraries/               # Folder contains helper functions for tools\n│   │   ├── sub_agents/                     # Folder for each sub agent\n│   │   │   │   ├── tools/                  # tools folder for the subagent\n│   │   │   │   ├── agent.py                # core logic of the sub agent\n│   │   │   │   └── prompt.py               # prompt of the subagent\n│   │   │   └── ...                         # More sub-agents    \n│   │   ├── __init__.py                     # Initializes the agent\n│   │   ├── tools/                          # Contains the code for tools used by the router agent\n│   │   ├── agent.py                        # Contains the core logic of the agent\n│   │   ├── prompt.py                       # Contains the prompts for the agent\n│   ├── deployment/                         # Deployment to Agent Engine\n│   ├── eval/                               # Folder containing the evaluation method\n│   ├── tests/                              # Folder containing unit tests for tools\n│   ├── agent_pattern.png                   # Diagram of the agent pattern\n│   ├── .env.example                        # Store agent specific env variables\n│   ├── pyproject.toml                      # Project configuration\n│   └── README.md                           # Provides an overview of the agent\n```\n\n----------------------------------------\n\nTITLE: Setting RAG Corpus Access Permissions\nDESCRIPTION: This bash script grants the required permissions to the AI Platform Reasoning Engine Service Agent for accessing the RAG Corpus. It relies on the variables defined in the .env file. The script creates a custom role with RAG Corpus query permissions and applies those permissions. Prerequisites include a correctly configured `.env` file with project, project number, location, and corpus-id.\nSOURCE: https://github.com/google/adk-samples/blob/main/agents/RAG/README.md#_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nchmod +x deployment/grant_permissions.sh\n./deployment/grant_permissions.sh\n```\n\n----------------------------------------\n\nTITLE: Calling Click Function - Select Color - JSON\nDESCRIPTION: Agent calls the 'click' function with a specific color name ('sky blue') as the button target. This action selects the desired color variation for the product, potentially updating the displayed images or specific details.\nSOURCE: https://github.com/google/adk-samples/blob/main/agents/personalized-shopping/tests/example_interactions/text_search_floral_dress.session.md#_snippet_9\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"function call\": \"click\",\n  \"args\": {\n    \"button_name\": \"sky blue\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Product Features Using Click Operation with JSON\nDESCRIPTION: Provides a JSON 'click' call to navigate and retrieve the 'Features' tab content of the selected product. The response includes detailed material information, usage occasions, key product characteristics, size and care instructions, as well as a marketing statement. The features text is densely packed with tags and keywords describing design, fabric, wear occasions, and maintenance tips, aimed at helping users understand the product benefits. Backend must correctly route the 'Features' button event to serve these details.\nSOURCE: https://github.com/google/adk-samples/blob/main/agents/personalized-shopping/tests/example_interactions/text_search_floral_dress.session.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\nfunction call: \"click\"\nargs: {\n  \"button_name\": \"Features\"\n}\n```\n\nLANGUAGE: json\nCODE:\n```\nResponse from: \"click\"\nresponse: {\n  \"result\": \"Back to Search [SEP] < Prev [SEP] Tie closure Hand Wash Only ❤[MATERIAL]: Made of high quality material, soft to the touch, lightweight and flowy，wearing comfortable and not irritating. ❤[OCCASION]: Travel, Daily Wearing, Party, Office, Shopping, Dating, Weekend Gathering, Beach/Sands, Cocktail party, Outdoors, Halloween, Christmas, New Year, Casual,Commute etc.Easy to match all kinds of hair accessories, and you can wear it with fashion and temperament. ❤[FEATURE]: This is a casual dress with special design that can show your perfect figure, make you more attractive, and can easily control parties, cocktail,beaches and other occasions. ❤[SIZE AND CARE]: Before order, please carefully read the Size Chart we provided in the product description ,Select the size according it. Hand washing or machine with cold water is recommended.Using mild gentle soap,no bleach.If there are wrinkles,you can iron it at low temperature and hang it dry. ❤[STATEMENT]:Please contact us in case of any order-related problems for a satisfactory resolution! \\n Sleeveless Short Long Sleeve Mini Midi Maxi Dress Bodycon Ruched Pleated Dress Side Drawstring Chiffon Solid Crew Neck Casual Summer Tank Shirt Mini Dresses 2021 Summer Women’s Dress Sexy V Neck Flowy Dress Swiss Dot Faux Short Loose Fit Pregnant Dress Women's Dresses-Summer Floral Bohemian Adjustable Spaghetti Strap Button Down Swing Dress with Pockets Women Dress Summer U Neck Mini Floral Print Swing Dress Spaghetti Strap Sling Skater Dresses with BeltAdjustable Straps Sexy Sling Dress Backless Spaghetti Casual Cocktail Club Party Night Out Dress Cami Crop Bodycon Dress Plus Size Vintage Lace Summer Swing Pencil Slim Short Mini Maxi Long Halter Embroidery Classic Dress Guest Floral Printing Pocket Midi A-Line Dress Cold Shoulder Tie Waist High Waist Beach Wedding Daily Work Dress Strapless Boho Sleeveless Flowy Side Front Split Button V-Neck O-Neck Evening Gown Patchwork Ruffle Soft Tank Vest Bridesmaid Dress Plain DressSummer Sleeveless Beachwear Dress Daily Work Wedding Party Club Night-Out Dress Long Maxi Short Mini Midi Dress Casual Fashion Sexy Bohemian Floral Printing Spaghetti Cocktail Tie-Dye High Waist Bodycon Ruched Dress Crewneck V-Neck O-Neck Colorful Dress Tank Tshirt Tunic Top Sling Sundress Strap Belt Elegant Dance Dress Pocket 3/4 Sleeve Office Shopping Polka Dress Puff Women's Pencil A-Line Plain Cute Swing Flowy Dress Adjustable Strap Wrap Cotton Girl Gift Birthday Festival DressSkater Swing Flowy Loose Dress Ruched Stretchy Elegant Dress With Pockets Summer Beach Tropical Sexy Dress Tie Neck Sling Vest Top Dress Strapless Backless Solid Color Vintage Women Dress Maxi Long Boho Casual Floral Dress Spaghetti Cami Plus Size Nightgown Dress Short Long Sleeve Sleeveless V-Neck O-Neck Ruffle Girl Dress Streetwear Wedding Guest Party Wrok Neckline Dress Spring Flower Printed T-Shirt Empire Waist High Waist Dress Patchwork Side Split Lace Cotton DressWomen Casual Dress Perfect Gife To Love Halter Retro Cocktail Dress Boho Skater Polka Dot Long Maxi Dress With Pocket And Strap Sleeveless Backless Off Shoulder Sexy Mini Short Women Dress Party Wedding Midi A-Line Solid Color Lace Spaghetti Bohemian Split Dress Sleeve Shift Sweet Cute Sundress High Waist V-Neck 3/4 Ballon Sleeve Dress Swing Flowy Tunic Beachwear Crewneck Stretchy Tie Dye Chiffon Hollow Out Dress Maternity Dress For Photoshoot Plus Size White Prom Bridemaid DressesShowmore\"\n}\n```\n\n----------------------------------------\n\nTITLE: Deployment: Listing existing remote agents with Python\nDESCRIPTION: Retrieves and displays a list of existing deployed agents on Vertex AI, helping to identify or verify agent existence. Requires Python environment with appropriate modules, and outputs agent details including IDs, creation, and update times.\nSOURCE: https://github.com/google/adk-samples/blob/main/agents/llm-auditor/README.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\npython3 deployment/deploy.py --list\n```\n\n----------------------------------------\n\nTITLE: Retrieving Search Results from API Response - JSON\nDESCRIPTION: This code shows the JSON response format for a product search query. The response provides a \"result\" string that includes metadata (total results, pagination) and a delimited list of products with identifiers, names, and price ranges. No explicit dependencies, but expects a compatible API consumer/parser. Input: none (response format). Output: search information parsed from a flat delimited string, requiring string parsing logic to extract structured fields. A limitation is the use of the [SEP] delimiter and lack of a structured array for returned items.\nSOURCE: https://github.com/google/adk-samples/blob/main/agents/personalized-shopping/tests/example_interactions/image_search_denim_skirt.session.md#_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"Response from\": \"search\",\n  \"response\": {\n    \"result\": \"Back to Search [SEP] Page 1 (Total results: 50) [SEP] Next > [SEP] B01CO4H6TC [SEP] Hard Tail Forever Pull On Pencil Skirt, Cotton, Knee Length Style: W-321 [SEP] $60.0 to $88.0 [SEP] ...\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Memorizing Selected Return Seat Number JSON\nDESCRIPTION: Calls a simulated `memorize` function to store the user's chosen seat number for the return flight. The selected seat number (\"2A\") is stored as a simple string value under the key \"return_seat_number\".\nSOURCE: https://github.com/google/adk-samples/blob/main/agents/travel-concierge/tests/pre_booking_sample.md#_snippet_25\n\nLANGUAGE: JSON\nCODE:\n```\nfunction call: \"memorize\"\nargs: {\n  \"value\": \"2A\",\n  \"key\": \"return_seat_number\"\n}\n```\n\n----------------------------------------\n\nTITLE: Calling Click Function - Select Reviews - JSON\nDESCRIPTION: Agent calls the 'click' function, specifying 'Reviews' as the target button name. This action simulates interacting with a 'Reviews' button on the product page, intended to retrieve customer reviews.\nSOURCE: https://github.com/google/adk-samples/blob/main/agents/personalized-shopping/tests/example_interactions/text_search_floral_dress.session.md#_snippet_5\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"function call\": \"click\",\n  \"args\": {\n    \"button_name\": \"Reviews\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Navigating Product Option Menus via Function Call - JSON\nDESCRIPTION: This snippet depicts a function call to move to a previous menu or to show other navigation options, using \"click\" with the \"button_name\" set to \"< Prev\". It is used for stepping back in the interface or re-displaying available choices after a selection. No dependencies outside of the handler's navigation support. Input: button name string. Output: navigation response, often listing options. Limitation: only one navigation action per call.\nSOURCE: https://github.com/google/adk-samples/blob/main/agents/personalized-shopping/tests/example_interactions/image_search_denim_skirt.session.md#_snippet_7\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"function call\": \"click\",\n  \"args\": {\n    \"button_name\": \"< Prev\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Agent Engine Test Script (Bash)\nDESCRIPTION: This snippet sets up environment variables `RESOURCE_ID` (using the output from the creation step) and `USER_ID` required by the test script. It then executes the `test_deployment.py` script, passing these variables as command-line arguments. The script connects to the deployed agent and starts an interactive session for testing.\nSOURCE: https://github.com/google/adk-samples/blob/main/agents/fomc-research/README.md#_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nexport RESOURCE_ID=...\nexport USER_ID=<any string>\npython test_deployment.py --resource_id=$RESOURCE_ID --user_id=$USER_ID\n```\n\n----------------------------------------\n\nTITLE: Running Agent Trajectory Tests\nDESCRIPTION: Command for executing tests that verify the agent's trajectory through a conversation flow.\nSOURCE: https://github.com/google/adk-samples/blob/main/agents/travel-concierge/README.md#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\npytest eval\n```\n\n----------------------------------------\n\nTITLE: Interacting with Deployed Agent Engine via Script - Bash\nDESCRIPTION: These commands set environment variables `RESOURCE_ID` (the ID of the deployed agent) and `USER_ID` (any unique string for the user session). The final command runs a Python script (`test_deployment.py`) using these environment variables to establish an interactive command-line session with the deployed Vertex AI Agent Engine resource.\nSOURCE: https://github.com/google/adk-samples/blob/main/agents/data-science/README.md#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nexport RESOURCE_ID=...\nexport USER_ID=<any string>\npython test_deployment.py --resource_id=$RESOURCE_ID --user_id=$USER_ID\n```\n\n----------------------------------------\n\nTITLE: Calling Click Function - Go Back - JSON\nDESCRIPTION: Agent calls the 'click' function, specifying '< Prev' as the target button name. This action is used to navigate back to the previous view, likely the main product details page.\nSOURCE: https://github.com/google/adk-samples/blob/main/agents/personalized-shopping/tests/example_interactions/text_search_floral_dress.session.md#_snippet_7\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"function call\": \"click\",\n  \"args\": {\n    \"button_name\": \"< Prev\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Executing the Testing Script for Deployed Agent\nDESCRIPTION: This command executes the test script (`run.py`) to send queries to the deployed agent and display its responses. It requires that the agent has been deployed, and that the `.env` file contains the correct configuration (including the `AGENT_ENGINE_ID` and access permissions). The script's output displays the agent's responses formatted for readability, allowing the user to evaluate performance and debug the agent.\nSOURCE: https://github.com/google/adk-samples/blob/main/agents/RAG/README.md#_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\npython deployment/run.py\n```\n\n----------------------------------------\n\nTITLE: Response from Map Tool (JSON)\nDESCRIPTION: This snippet shows the response received from the `map_tool`. It contains a JSON object with a 'result' array, listing the processed places with updated map information. Each entry includes details like `place_name`, `address`, more precise coordinates (`lat`, `long`), `review_ratings`, `highlights`, `image_url`, and crucially, populated `map_url` and `place_id` fields.\nSOURCE: https://github.com/google/adk-samples/blob/main/agents/travel-concierge/tests/pre_booking_sample.md#_snippet_7\n\nLANGUAGE: JSON\nCODE:\n```\nResponse from: \"map_tool\"\nresponse: {\n  \"result\": [\n    {\n      \"place_name\": \"string\", /* Name of the point of interest */\n      \"address\": \"string\", /* Address of the POI */\n      \"lat\": \"string\", /* Updated Latitude coordinate */\n      \"long\": \"string\", /* Updated Longitude coordinate */\n      \"review_ratings\": \"string\", /* Aggregated review rating */\n      \"highlights\": \"string\", /* Key highlights or description */\n      \"image_url\": \"string\", /* URL for an image of the POI */\n      \"map_url\": \"string\", /* Google Maps URL for the place */\n      \"place_id\": \"string\" /* Google Place ID */\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Running the agent with web UI\nDESCRIPTION: Command to run the agent with ADK's web-based user interface. This provides a graphical interface for interacting with the customer service agent.\nSOURCE: https://github.com/google/adk-samples/blob/main/agents/customer-service/README.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nadk web\n```\n\n----------------------------------------\n\nTITLE: Handling Subsection Navigation Responses with Fallback - JSON\nDESCRIPTION: This snippet captures the JSON response from attempting to access a product's subsection, providing a 'result' that indicates success, empty data, or only navigation cues. The agent must interpret when actual content is unavailable (e.g., empty description or reviews). No explicit dependencies. Input: previous subsection function call. Output: typically a navigation response or empty fields when no data found. Limitation: Does not distinguish between empty versus unavailable data, so additional logic is required in the consumer.\nSOURCE: https://github.com/google/adk-samples/blob/main/agents/personalized-shopping/tests/example_interactions/image_search_denim_skirt.session.md#_snippet_5\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"Response from\": \"click\",\n  \"response\": {\n    \"result\": \"Back to Search [SEP] < Prev\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Product Description Using Click Operation with JSON\nDESCRIPTION: This snippet sends a JSON 'click' function call to retrieve the detailed product description section for a previously selected dress. The response returns an encoded string including metadata like season, gender, style, material, pattern type, decoration, care instructions, sizing notes, and special remarks about product design and fitting. Parsing this response provides the user with comprehensive descriptive information supporting purchase decisions. Backend services must support the 'Description' button navigation with relevant product details.\nSOURCE: https://github.com/google/adk-samples/blob/main/agents/personalized-shopping/tests/example_interactions/text_search_floral_dress.session.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\nfunction call: \"click\"\nargs: {\n  \"button_name\": \"Description\"\n}\n```\n\nLANGUAGE: json\nCODE:\n```\nResponse from: \"click\"\nresponse: {\n  \"result\": \"Back to Search [SEP] < Prev [SEP] Women's Casual Long Dress with Striped Floral Print Short Sleeve Maxi Dress★Description:●Season:Spring,Summer●Gender:Women●Style:Casual●Material:Cottonblend●Pattern Type:Print●Decoration: None❤What you get:1 X dress※Design can make you more sexy, more energetic and more attractive★★PLEASE NOTE:❤Our clothes all are designed for Asian figure, which means would be smaller than normal US sizes. Please refer to our own size chart and you can find it in our pictures or from the description.❤Garment Care: Hand Wash Recommand or Dry Clean Your Shirt Dress. The Pattern on the Original Product May Vary Please Know .❤Colors may be slightly different depending on computer and monitor settings❤Please check the Size Chart before order. If you are not sure the size, please send message to us.\"\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Agent Engine ID Example\nDESCRIPTION: This code snippet illustrates the format for the `AGENT_ENGINE_ID` environment variable after agent deployment, indicating the location and ID within Vertex AI. It is crucial for configuring the testing and interaction with the deployed agent. The user must replace placeholder values with their specific project details.\nSOURCE: https://github.com/google/adk-samples/blob/main/agents/RAG/README.md#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nAGENT_ENGINE_ID=projects/<PROJECT_NUMBER>/locations/us-central1/reasoningEngines/<AGENT_ENGINE_ID>\n```\n\n----------------------------------------\n\nTITLE: Running Evaluation Tests Using Pytest in Bash\nDESCRIPTION: Executes all evaluation test files within the 'eval' directory using the pytest testing framework. This is used to assess the overall agent's performance and capabilities in an integrated manner. Requires pytest to be installed and configured to discover tests in the specified directory.\nSOURCE: https://github.com/google/adk-samples/blob/main/agents/customer-service/README.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\npytest eval\n```\n\n----------------------------------------\n\nTITLE: Parsing Product Detail Page Response - JSON\nDESCRIPTION: This code snippet presents a JSON response structure after selecting a product. The returned object contains a \"result\" field with product options (sizes, colors), price, and navigation cues all as a single delimited string. No explicit dependencies are needed. Input: selection action. Output: product meta-information in an unstructured format. A main constraint is that details must be parsed from a flat string using [SEP] as a delimiter.\nSOURCE: https://github.com/google/adk-samples/blob/main/agents/personalized-shopping/tests/example_interactions/image_search_denim_skirt.session.md#_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"Response from\": \"click\",\n  \"response\": {\n    \"result\": \"Back to Search [SEP] < Prev [SEP] size [SEP] 12 plus [SEP] ... [SEP] Description [SEP] Features [SEP] Reviews [SEP] Buy Now\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with Poetry - Bash\nDESCRIPTION: This command installs the project dependencies using Poetry, as specified in the `pyproject.toml` file. Poetry manages the project's virtual environment and package dependencies, ensuring all necessary libraries are installed.\nSOURCE: https://github.com/google/adk-samples/blob/main/agents/travel-concierge/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npoetry install\n```\n\n----------------------------------------\n\nTITLE: Accessing Product Subsections via Function Call - JSON\nDESCRIPTION: This snippet shows how to trigger navigation to product information sections such as \"Description\", \"Features\", or \"Reviews\" using a JSON function call. The function requires the operation \"click\" and the target \"button_name\" (string) corresponding to the section. No prerequisites except a valid section label. Input: section string (e.g., \"Features\"). Output: triggers display of the chosen subsection. Expected output is a new response with requested data or an empty result if not available.\nSOURCE: https://github.com/google/adk-samples/blob/main/agents/personalized-shopping/tests/example_interactions/image_search_denim_skirt.session.md#_snippet_4\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"function call\": \"click\",\n  \"args\": {\n    \"button_name\": \"Description\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Cloning and navigating to the repository\nDESCRIPTION: Commands to clone the ADK samples repository and navigate to the customer service agent directory. This is the first step in setting up the agent locally.\nSOURCE: https://github.com/google/adk-samples/blob/main/agents/customer-service/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/google/adk-samples.git\ncd adk-samples/agents/customer-service\n```\n\n----------------------------------------\n\nTITLE: Tool output response format\nDESCRIPTION: This snippet shows the expected response format from the send_call_companion_link tool. The output contains a status field indicating success and a message confirming the link was sent to the specified phone number.\nSOURCE: https://github.com/google/adk-samples/blob/main/agents/customer-service/README.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{'status': 'success', 'message': 'Link sent to +12065550123'}\n```\n\n----------------------------------------\n\nTITLE: Evaluate Agent\nDESCRIPTION: This command initiates the evaluation of the brand search optimization agent. It employs the ADK's evaluation component, using a test configuration defined in `eval/data/test_config.json`. Evaluation scripts assess the agent's performance and effectiveness.\nSOURCE: https://github.com/google/adk-samples/blob/main/agents/brand-search-optimization/README.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nsh deployment/eval.sh\n```\n\n----------------------------------------\n\nTITLE: Selecting a Product from Search Results - JSON\nDESCRIPTION: This snippet illustrates a function call in JSON format to select a specific product from the search results by referencing its unique product identifier. The function call uses \"click\" as the operation and takes \"button_name\" as a required string parameter. No external dependencies are declared outside the agent's backend function handler. The input must be a valid product identifier string. Output is a navigation action to the product detail page. The limitation is that only one item can be selected at a time.\nSOURCE: https://github.com/google/adk-samples/blob/main/agents/personalized-shopping/tests/example_interactions/image_search_denim_skirt.session.md#_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"function call\": \"click\",\n  \"args\": {\n    \"button_name\": \"B085T3HMGR\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Response from Memorize Function (JSON)\nDESCRIPTION: This snippet shows the successful response received from the `memorize` function call. It confirms that the key-value pair has been successfully stored in the agent's memory or internal state. The response includes a `status` field containing a string message confirming the storage action and the key/value involved.\nSOURCE: https://github.com/google/adk-samples/blob/main/agents/travel-concierge/tests/pre_booking_sample.md#_snippet_9\n\nLANGUAGE: JSON\nCODE:\n```\nResponse from: \"memorize\"\nresponse: {\n  \"status\": \"Stored \\\"string\\\": \\\"string\\\"\" /* Confirmation message showing the key and value stored */\n}\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Google Cloud SDK (Bash)\nDESCRIPTION: Authenticates the Google Cloud SDK with a Google Cloud account. This step is required to allow subsequent commands to interact with Google Cloud Platform services on behalf of the authenticated user or service account. Prerequisite: Google Cloud SDK must be installed.\nSOURCE: https://github.com/google/adk-samples/blob/main/agents/fomc-research/README.md#_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\ngcloud auth login\n```\n\n----------------------------------------\n\nTITLE: Receiving Simple Navigation - Click Response - JSON\nDESCRIPTION: System response after attempting to access reviews. The 'result' indicates limited navigation options, suggesting either no reviews were found or navigation within the reviews section only offers going back.\nSOURCE: https://github.com/google/adk-samples/blob/main/agents/personalized-shopping/tests/example_interactions/text_search_floral_dress.session.md#_snippet_6\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"Response from\": \"click\",\n  \"response\": {\n    \"result\": \"Back to Search [SEP] < Prev\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Product Features from Product Subsection - JSON\nDESCRIPTION: This snippet demonstrates retrieving structured information about product features through a JSON response after a function call to the 'Features' subsection. The response contains detailed product attributes separated by [SEP], including sizing notes, materials, design features, and brand background. No explicit dependencies, but expects the system to return long text fields. Input: navigation to \"Features\". Output: a delimited string with features info. Limitation: consumers must parse the long flat string for each attribute.\nSOURCE: https://github.com/google/adk-samples/blob/main/agents/personalized-shopping/tests/example_interactions/image_search_denim_skirt.session.md#_snippet_6\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"Response from\": \"click\",\n  \"response\": {\n    \"result\": \"Back to Search [SEP] < Prev [SEP] PLUS SIZING: Please reference our size charts [SEP] Redefine your silhouette in this great,\\u00a0plus size drawstring denim skirt. ...\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initiating Product Search via Function Call - JSON\nDESCRIPTION: This snippet demonstrates a JSON-formatted function call to initiate a product search using specified keywords. The function expects the string \"search\" as the operation and a JSON object with a \"keywords\" parameter. No external dependencies are specified, but it is assumed that an API or system is prepared to handle such commands. Input: keyword string. Output: search results in a standardized response format. There is a limitation that only string keywords are supported for initiating the search.\nSOURCE: https://github.com/google/adk-samples/blob/main/agents/personalized-shopping/tests/example_interactions/image_search_denim_skirt.session.md#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"function call\": \"search\",\n  \"args\": {\n    \"keywords\": \"denim skirt\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Calling Map Tool (JSON)\nDESCRIPTION: This snippet shows a function call to a `map_tool`, which likely processes a list of places (identified by a `key`) to retrieve or enhance their map-related information, such as accurate coordinates, map URLs, and place IDs. The purpose is to get actionable map data for previously identified points of interest.\nSOURCE: https://github.com/google/adk-samples/blob/main/agents/travel-concierge/tests/pre_booking_sample.md#_snippet_6\n\nLANGUAGE: JSON\nCODE:\n```\nfunction call: \"map_tool\"\nargs: {\n  \"key\": \"string\" /* Key identifying the list of places to process (e.g., \"poi\") */\n}\n```\n\n----------------------------------------\n\nTITLE: Starting ADK Development UI with Log Redirect (Bash)\nDESCRIPTION: Launches the ADK development UI, redirects its standard output and error streams to a specified log file ('fomc_research_log.txt'), and runs the process in the background ('&'). This captures the UI's output for later review or real-time monitoring. Prerequisite: Project setup complete, command run from the project directory.\nSOURCE: https://github.com/google/adk-samples/blob/main/agents/fomc-research/README.md#_snippet_10\n\nLANGUAGE: Bash\nCODE:\n```\nadk web . > fomc_research_log.txt 2>&1 &\n```\n\n----------------------------------------\n\nTITLE: Uploading Local PDF File\nDESCRIPTION: Customizes the script to upload a local PDF file by editing the main() function to call upload_pdf_to_corpus with local file path, display name, and description.\nSOURCE: https://github.com/google/adk-samples/blob/main/agents/RAG/README.md#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ndef main():\n    initialize_vertex_ai()\n    corpus = create_or_get_corpus()\n    local_file_path = \"/path/to/your/local/file.pdf\"\n    display_name = \"Your_File_Name.pdf\"\n    description = \"Description of your file\"\n    if os.path.exists(local_file_path):\n        upload_pdf_to_corpus(corpus_name=corpus.name, pdf_path=local_file_path, display_name=display_name, description=description)\n    else:\n        print(f\"Error: Local file not found at {local_file_path}\")\n    list_corpus_files(corpus_name=corpus.name)\n```\n\n----------------------------------------\n\nTITLE: Tailing Latest Agent Log File (Bash)\nDESCRIPTION: Displays the content of the most recently created agent log file in real-time. The '-F' option ensures the command follows the log file as new lines are written, even if the file is rotated. Useful for monitoring agent execution. Prerequisite: Agent must have been run using `adk run`.\nSOURCE: https://github.com/google/adk-samples/blob/main/agents/fomc-research/README.md#_snippet_8\n\nLANGUAGE: Bash\nCODE:\n```\ntail -F /tmp/agents_log/agent.latest.log\n```\n\n----------------------------------------\n\nTITLE: Response from Point of Interest (POI) Agent (JSON)\nDESCRIPTION: This snippet shows the response received from the `poi_agent`. It contains a JSON object with a 'places' array, listing points of interest. Each entry provides detailed information including `place_name`, `address`, geographical coordinates (`lat`, `long`), `review_ratings`, `highlights`, `image_url`, and placeholder fields for `map_url` and `place_id` (which might be populated by a subsequent tool).\nSOURCE: https://github.com/google/adk-samples/blob/main/agents/travel-concierge/tests/pre_booking_sample.md#_snippet_5\n\nLANGUAGE: JSON\nCODE:\n```\nResponse from: \"poi_agent\"\nresponse: {\n  \"places\": [\n    {\n      \"place_name\": \"string\", /* Name of the point of interest */\n      \"address\": \"string\", /* Address of the POI */\n      \"lat\": \"string\", /* Latitude coordinate */\n      \"long\": \"string\", /* Longitude coordinate */\n      \"review_ratings\": \"string\", /* Aggregated review rating */\n      \"highlights\": \"string\", /* Key highlights or description */\n      \"image_url\": \"string\", /* URL for an image of the POI */\n      \"map_url\": \"string\", /* Placeholder for map URL */\n      \"place_id\": \"string\" /* Placeholder for place ID */\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Tailing Redirected ADK Log File (Bash)\nDESCRIPTION: Displays the content of the specified log file ('fomc_research_log.txt') in real-time, following new lines as they are appended. Used in conjunction with redirecting the ADK web UI output to monitor its activity. Prerequisite: ADK web UI must be running with output redirected to the specified file.\nSOURCE: https://github.com/google/adk-samples/blob/main/agents/fomc-research/README.md#_snippet_11\n\nLANGUAGE: Bash\nCODE:\n```\ntail -f fomc_research_log.txt\n```\n\n----------------------------------------\n\nTITLE: Simulating Size Selection Click Event Using JSON\nDESCRIPTION: This snippet represents a function call to simulate a user clicking the \"12 plus\" size button in a shopping agent interface. It requires the calling environment to send JSON formatted arguments indicating the button pressed. Key parameter 'button_name' identifies the user input. The expected input is a JSON object with the click action and button name; no output is produced by this call itself, but it triggers a response from the system.\nSOURCE: https://github.com/google/adk-samples/blob/main/agents/personalized-shopping/tests/example_interactions/image_search_denim_skirt.session.md#_snippet_8\n\nLANGUAGE: json\nCODE:\n```\nfunction call: \"click\"\nargs: {\n  \"button_name\": \"12 plus\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with Poetry (Bash)\nDESCRIPTION: This command uses Poetry, a Python dependency management tool, to install the dependencies required for the agent. It should be executed within the agent's main directory, where the `pyproject.toml` file is located. The agent's specific dependencies are defined in the `pyproject.toml` file.\nSOURCE: https://github.com/google/adk-samples/blob/main/agents/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npoetry install\n```\n\n----------------------------------------\n\nTITLE: Receiving Filtered Product Options Response JSON After Size Selection\nDESCRIPTION: This JSON snippet contains a response to the previous click event selecting size \"12 plus.\" The response provides a detailed string listing product sizes, colors, and available items separated by '[SEP]' tokens. It functions as a filter update showing size and color options, product details, pricing, and review sections. No parameters are needed here as it is a callback response containing product catalog and filter states formatted in a flat string.\nSOURCE: https://github.com/google/adk-samples/blob/main/agents/personalized-shopping/tests/example_interactions/image_search_denim_skirt.session.md#_snippet_9\n\nLANGUAGE: json\nCODE:\n```\nResponse from: \"click\"\nresponse: {\n  \"result\": \"Back to Search [SEP] < Prev [SEP] size [SEP] 12 plus [SEP] 12 plus petite [SEP] 14 plus [SEP] 14 plus petite [SEP] 16 plus [SEP] 16 plus petite [SEP] 18 plus [SEP] 18 plus petite [SEP] 20 plus [SEP] 20 plus petite [SEP] 22 plus [SEP] 22 plus petite [SEP] 24 plus [SEP] 24 plus petite [SEP] 26 plus [SEP] 26 plus petite [SEP] 28 plus [SEP] 28 plus petite [SEP] 30 plus [SEP] 30 plus petite [SEP] 32 plus [SEP] 32 plus petite [SEP] 34 plus [SEP] 34 plus petite [SEP] 36 plus [SEP] 36 plus petite [SEP] 38 plus [SEP] 38 plus petite [SEP] color [SEP] indigo [SEP] natural khaki [SEP] black [SEP] light wash [SEP] stonewash [SEP] white [SEP] Woman Within Women\\'s Plus Size Petite Flared Denim Skirt [SEP] Price: $24.41 to $29.95 [SEP] Rating: N.A. [SEP] Description [SEP] Features [SEP] Reviews [SEP] Buy Now\"\n}\n```\n\n----------------------------------------\n\nTITLE: Response from flight_seat_selection_agent with Seat Availability (JSON)\nDESCRIPTION: Illustrates the JSON response from `flight_seat_selection_agent`. It provides a 2D array (`seats`) representing the aircraft's seat layout. Each nested object describes a seat, including its availability (`isAvailable`), price (`priceInUSD`), and identifier (`seatNumber`).\nSOURCE: https://github.com/google/adk-samples/blob/main/agents/travel-concierge/tests/pre_booking_sample.md#_snippet_13\n\nLANGUAGE: json\nCODE:\n```\nResponse from: \"flight_seat_selection_agent\"\nresponse: {\n  \"seats\": [\n    [\n      {\n        \"isAvailable\": true,\n        \"priceInUSD\": 60,\n        \"seatNumber\": \"1A\"\n      },\n      {\n        \"isAvailable\": true,\n        \"priceInUSD\": 60,\n        \"seatNumber\": \"1B\"\n      },\n      {\n        \"isAvailable\": false,\n        \"priceInUSD\": 60,\n        \"seatNumber\": \"1C\"\n      },\n      {\n        \"isAvailable\": true,\n        \"priceInUSD\": 70,\n        \"seatNumber\": \"1D\"\n      },\n      {\n        \"isAvailable\": true,\n        \"priceInUSD\": 70,\n        \"seatNumber\": \"1E\"\n      },\n      {\n        \"isAvailable\": true,\n        \"priceInUSD\": 50,\n        \"seatNumber\": \"1F\"\n      }\n    ],\n    [\n      {\n        \"isAvailable\": true,\n        \"priceInUSD\": 60,\n        \"seatNumber\": \"2A\"\n      },\n      {\n        \"isAvailable\": false,\n        \"priceInUSD\": 60,\n        \"seatNumber\": \"2B\"\n      },\n      {\n        \"isAvailable\": true,\n        \"priceInUSD\": 60,\n        \"seatNumber\": \"2C\"\n      },\n      {\n        \"isAvailable\": true,\n        \"priceInUSD\": 70,\n        \"seatNumber\": \"2D\"\n      },\n      {\n        \"isAvailable\": true,\n        \"priceInUSD\": 70,\n        \"seatNumber\": \"2E\"\n      },\n      {\n        \"isAvailable\": true,\n        \"priceInUSD\": 50,\n        \"seatNumber\": \"2F\"\n      }\n    ],\n    [\n      {\n        \"isAvailable\": true,\n        \"priceInUSD\": 60,\n        \"seatNumber\": \"3A\"\n      },\n      {\n        \"isAvailable\": true,\n        \"priceInUSD\": 60,\n        \"seatNumber\": \"3B\"\n      },\n      {\n        \"isAvailable\": true,\n        \"priceInUSD\": 60,\n        \"seatNumber\": \"3C\"\n      },\n      {\n        \"isAvailable\": true,\n        \"priceInUSD\": 70,\n        \"seatNumber\": \"3D\"\n      },\n      {\n        \"isAvailable\": true,\n        \"priceInUSD\": 70,\n        \"seatNumber\": \"3E\"\n      },\n      {\n        \"isAvailable\": true,\n        \"priceInUSD\": 50,\n        \"seatNumber\": \"3F\"\n      }\n    ],\n    [\n      {\n        \"isAvailable\": true,\n        \"priceInUSD\": 60,\n        \"seatNumber\": \"4A\"\n      },\n      {\n        \"isAvailable\": true,\n        \"priceInUSD\": 60,\n        \"seatNumber\": \"4B\"\n      },\n      {\n        \"isAvailable\": true,\n        \"priceInUSD\": 60,\n        \"seatNumber\": \"4C\"\n      },\n      {\n        \"isAvailable\": true,\n        \"priceInUSD\": 70,\n        \"seatNumber\": \"4D\"\n      },\n      {\n        \"isAvailable\": true,\n        \"priceInUSD\": 70,\n        \"seatNumber\": \"4E\"\n      },\n      {\n        \"isAvailable\": true,\n        \"priceInUSD\": 50,\n        \"seatNumber\": \"4F\"\n      }\n    ],\n    [\n      {\n        \"isAvailable\": true,\n        \"priceInUSD\": 60,\n        \"seatNumber\": \"5A\"\n      },\n      {\n        \"isAvailable\": true,\n        \"priceInUSD\": 60,\n        \"seatNumber\": \"5B\"\n      },\n      {\n        \"isAvailable\": true,\n        \"priceInUSD\": 60,\n        \"seatNumber\": \"5C\"\n      },\n      {\n        \"isAvailable\": true,\n        \"priceInUSD\": 70,\n        \"seatNumber\": \"5D\"\n      },\n      {\n        \"isAvailable\": true,\n        \"priceInUSD\": 70,\n        \"seatNumber\": \"5E\"\n      },\n      {\n        \"isAvailable\": true,\n        \"priceInUSD\": 50,\n        \"seatNumber\": \"5F\"\n      }\n    ]\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Running Agent with ADK CLI (Bash)\nDESCRIPTION: This command runs the agent using the Agent Development Kit (ADK) command-line interface (CLI).  It assumes the user is in the agent's core code directory.  The ADK CLI uses the files in the current directory as input for the agent.\nSOURCE: https://github.com/google/adk-samples/blob/main/agents/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# Example (check agent's README for exact path)\ncd agents/fomc-research/fomc_research/ \nadk run .\n```\n\n----------------------------------------\n\nTITLE: Cloning ADK Samples Repository and Navigating (Bash)\nDESCRIPTION: Clones the 'adk-samples' GitHub repository containing the FOMC Research agent code and then changes the current working directory into the specific 'agents/fomc-research' project folder. Prerequisite: Git must be installed.\nSOURCE: https://github.com/google/adk-samples/blob/main/agents/fomc-research/README.md#_snippet_2\n\nLANGUAGE: Bash\nCODE:\n```\ngit clone https://github.com/google/adk-samples.git\ncd adk-samples/agents/fomc-research\n```\n\n----------------------------------------\n\nTITLE: Receiving Updated Product Options Response JSON After Color Selection\nDESCRIPTION: This response snippet mirrors the earlier product options listing after the color \"natural khaki\" has been selected. The 'result' value returns a flattened search and filter status string including size and color options, product descriptions, and price ranges. It serves to confirm the updated state of product filtering based on user inputs.\nSOURCE: https://github.com/google/adk-samples/blob/main/agents/personalized-shopping/tests/example_interactions/image_search_denim_skirt.session.md#_snippet_11\n\nLANGUAGE: json\nCODE:\n```\nResponse from: \"click\"\nresponse: {\n  \"result\": \"Back to Search [SEP] < Prev [SEP] size [SEP] 12 plus [SEP] 12 plus petite [SEP] 14 plus [SEP] 14 plus petite [SEP] 16 plus [SEP] 16 plus petite [SEP] 18 plus [SEP] 18 plus petite [SEP] 20 plus [SEP] 20 plus petite [SEP] 22 plus [SEP] 22 plus petite [SEP] 24 plus [SEP] 24 plus petite [SEP] 26 plus [SEP] 26 plus petite [SEP] 28 plus [SEP] 28 plus petite [SEP] 30 plus [SEP] 30 plus petite [SEP] 32 plus [SEP] 32 plus petite [SEP] 34 plus [SEP] 34 plus petite [SEP] 36 plus [SEP] 36 plus petite [SEP] 38 plus [SEP] 38 plus petite [SEP] color [SEP] indigo [SEP] natural khaki [SEP] black [SEP] light wash [SEP] stonewash [SEP] white [SEP] Woman Within Women\\'s Plus Size Petite Flared Denim Skirt [SEP] Price: $24.41 to $29.95 [SEP] Rating: N.A. [SEP] Description [SEP] Features [SEP] Reviews [SEP] Buy Now\"\n}\n```\n\n----------------------------------------\n\nTITLE: Granting IAM Permissions for Agent Engine Service Account - Bash\nDESCRIPTION: These commands set an environment variable for the Reasoning Engine Service Agent's email and then grant it the `roles/bigquery.user` and `roles/bigquery.dataViewer` IAM roles on the specified Google Cloud project. These permissions are required for the agent deployed on Agent Engine to interact with BigQuery datasets and tables.\nSOURCE: https://github.com/google/adk-samples/blob/main/agents/data-science/README.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nexport RE_SA=\"service-${GOOGLE_CLOUD_PROJECT_NUMBER}@gcp-sa-aiplatform-re.iam.gserviceaccount.com\"\ngcloud projects add-iam-policy-binding ${GOOGLE_CLOUD_PROJECT} \\\n    --member=\"serviceAccount:${RE_SA}\" \\\n    --condition=None \\\n    --role=\"roles/bigquery.user\"\ngcloud projects add-iam-policy-binding ${GOOGLE_CLOUD_PROJECT} \\\n    --member=\"serviceAccount:${RE_SA}\" \\\n    --condition=None \\\n    --role=\"roles/bigquery.dataViewer\"\n```\n\n----------------------------------------\n\nTITLE: Granting Permissions with BigQuery API (Python)\nDESCRIPTION: This Python snippet uses the `google-cloud-bigquery` library to grant a user permissions to a BigQuery table.  It requires the `google-cloud-bigquery` library.  It initializes a BigQuery client, retrieves the table metadata, adds the user to the IAM policy with the specified role, and updates the table to apply the changes.\nSOURCE: https://github.com/google/adk-samples/blob/main/agents/brand-search-optimization/customization.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom google.cloud import bigquery\n\n# Replace with your actual details\nPROJECT_ID = \"your-project-id\"\nDATASET_ID = \"your_dataset_id\"\nTABLE_ID = \"products\"\nUSER_EMAIL = \"user@example.com\"\nROLE = \"roles/bigquery.dataViewer\"\n\nclient = bigquery.Client(project=PROJECT_ID)\ntable_ref = client.dataset(DATASET_ID).table(TABLE_ID)\ntable = client.get_table(table_ref)  # Get the current table metadata\n\npolicy = table.iam_policy\npolicy.bindings.append({\"role\": ROLE, \"members\": [f\"user:{USER_EMAIL}\"]})\ntable.iam_policy = policy\n\ntable = client.update_table(table)  # Updates the table's IAM policy\n\nprint(f\"Granted role '{ROLE}' to user '{USER_EMAIL}' on table '{table.full_table_id}'.\")\n```\n\n----------------------------------------\n\nTITLE: Transfer to Pre-Trip Agent Function Call\nDESCRIPTION: Calls a function to transfer control from the root agent to the pre-trip planning agent named 'pre_trip_agent', enabling specialized handling of pre-trip activities and information gathering.\nSOURCE: https://github.com/google/adk-samples/blob/main/agents/travel-concierge/tests/post_booking_sample.md#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"function call\": \"transfer_to_agent\",\n  \"args\": {\n    \"agent_name\": \"pre_trip_agent\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieve Assistance for Transport via Day of Agent\nDESCRIPTION: Requests help from the 'day_of_agent' to assist with transportation-related queries, such as planning daily travel or getting directions, by issuing a generic 'help' request.\nSOURCE: https://github.com/google/adk-samples/blob/main/agents/travel-concierge/tests/post_booking_sample.md#_snippet_7\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"function call\": \"day_of_agent\",\n  \"args\": {\n    \"request\": \"help\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Deletion: Removing deployed agent with Bash\nDESCRIPTION: Deletes the specified agent from Vertex AI using a command-line script, requiring the resource ID of the agent. Facilitates cleanup or re-deployment workflows.\nSOURCE: https://github.com/google/adk-samples/blob/main/agents/llm-auditor/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npython3 deployment/deploy.py --delete --resource_id=${AGENT_ENGINE_ID}\n```\n\n----------------------------------------\n\nTITLE: Receiving Product Details - Click Response - JSON\nDESCRIPTION: System response after selecting the 'small' size. It returns the standard product details layout, indicating the size selection was registered by the system.\nSOURCE: https://github.com/google/adk-samples/blob/main/agents/personalized-shopping/tests/example_interactions/text_search_floral_dress.session.md#_snippet_14\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"Response from\": \"click\",\n  \"response\": {\n    \"result\": \"Back to Search [SEP] < Prev [SEP] color [SEP] black [SEP] blacka [SEP] blackb [SEP] blue [SEP] bluea [SEP] blueb [SEP] coffee [SEP] gray [SEP] green [SEP] hot pink [SEP] navy [SEP] pink [SEP] pinka [SEP] purple [SEP] purplea [SEP] sky blue [SEP] sky bluea [SEP] white [SEP] whitea [SEP] yellow [SEP] yellowa [SEP] size [SEP] small [SEP] medium [SEP] large [SEP] x-large [SEP] xx-large [SEP] Women Summer Cold Shoulder Dress,Beach Vintage Bohemian Print Sundress Party Prom Swing Loose A-Line Dress with Pocket [SEP] Price: $16.29 to $17.59 [SEP] Rating: N.A. [SEP] Description [SEP] Features [SEP] Reviews [SEP] Buy Now\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Calling Point of Interest (POI) Agent (JSON)\nDESCRIPTION: This snippet shows a function call to the `poi_agent`, specifically designed to find detailed points of interest within a given area. It requires a `request` string, typically the name of a region, country, or city. The purpose is to retrieve a list of specific attractions or activities in that location.\nSOURCE: https://github.com/google/adk-samples/blob/main/agents/travel-concierge/tests/pre_booking_sample.md#_snippet_4\n\nLANGUAGE: JSON\nCODE:\n```\nfunction call: \"poi_agent\"\nargs: {\n  \"request\": \"string\" /* The location to search for points of interest within (e.g., \"Peru\", \"Cusco\") */\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up Google Cloud environment variables\nDESCRIPTION: Commands to set required environment variables for Google Cloud integration. These variables configure the agent to use Vertex AI and specify the project and location.\nSOURCE: https://github.com/google/adk-samples/blob/main/agents/customer-service/README.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nexport GOOGLE_CLOUD_PROJECT=YOUR_PROJECT_NAME_HERE\nexport GOOGLE_GENAI_USE_VERTEXAI=1\nexport GOOGLE_CLOUD_LOCATION=us-central1\n```\n\n----------------------------------------\n\nTITLE: Calling Click Function - Select Color - JSON\nDESCRIPTION: Agent calls the 'click' function to select the 'black' color option. This action changes the previously selected color for the product.\nSOURCE: https://github.com/google/adk-samples/blob/main/agents/personalized-shopping/tests/example_interactions/text_search_floral_dress.session.md#_snippet_11\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"function call\": \"click\",\n  \"args\": {\n    \"button_name\": \"black\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Execute Deployment Script\nDESCRIPTION: The deployment script creates and activates a new virtual environment, installs Python packages, and populates BigQuery data based on the variables set in the `.env` file.  This script performs the necessary setup steps for the agent to function correctly, making it an essential installation step.\nSOURCE: https://github.com/google/adk-samples/blob/main/agents/brand-search-optimization/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# Run This script\n# 1. Creates and activates a new virtual env\n# 2. Installs python packages\n# 3. Populates BigQuery data using variables set in `.env` file\nsh deployment/run.sh\n```\n\n----------------------------------------\n\nTITLE: Deploying Customer Service Agent Using Python Script in Bash\nDESCRIPTION: Changes the working directory to 'deployment' and runs the 'deploy.py' Python script to deploy the built agent wheel file to the Google Agent Engine. Running the script in the correct directory is essential so that relative paths resolve properly. Dependencies include having the built wheel in place and a valid deployment environment configured.\nSOURCE: https://github.com/google/adk-samples/blob/main/agents/customer-service/README.md#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ncd deployment\npython deploy.py\n```\n\n----------------------------------------\n\nTITLE: Building Agent Wheel File for Deployment - Bash\nDESCRIPTION: This command, executed from the `data-science` directory, uses Poetry to build the project into a Python wheel file (`.whl`). The `--format=wheel` specifies the output format, and `--output=deployment` directs the output file (`data_science-0.1-py3-none-any.whl`) into the `deployment` directory.\nSOURCE: https://github.com/google/adk-samples/blob/main/agents/data-science/README.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\npoetry build --format=wheel --output=deployment\n```\n\n----------------------------------------\n\nTITLE: Running Evaluation Tests with Poetry - Bash\nDESCRIPTION: This command executes all test files located within the `eval/` directory. The `poetry run` prefix ensures that the `pytest` command is executed within the isolated virtual environment managed by Poetry, utilizing the project's specified dependencies.\nSOURCE: https://github.com/google/adk-samples/blob/main/agents/data-science/README.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npoetry run pytest eval\n```\n\n----------------------------------------\n\nTITLE: Store a Variable Value in Agent Memory\nDESCRIPTION: Memorizes a specific datetime value ('2025-06-15 04:00:00') by storing it in a variable 'itinerary_datetime' within the agent's memory for later reference.\nSOURCE: https://github.com/google/adk-samples/blob/main/agents/travel-concierge/tests/post_booking_sample.md#_snippet_6\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"function call\": \"memorize\",\n  \"args\": {\n    \"key\": \"itinerary_datetime\",\n    \"value\": \"2025-06-15 04:00:00\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Sample Data into BigQuery Using Python Script\nDESCRIPTION: Python command to execute a utility script that loads sample forecasting sticker sales datasets into BigQuery tables. The script creates BigQuery tables and imports data found in the data-science repository, enabling subsequent data analysis and machine learning tasks.\nSOURCE: https://github.com/google/adk-samples/blob/main/agents/data-science/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npython3 data_science/utils/create_bq_table.py\n```\n\n----------------------------------------\n\nTITLE: Running Agent with ADK Web UI (Bash)\nDESCRIPTION: This command starts the Agent Development Kit (ADK) web user interface (UI), allowing the user to interact with the agent through a browser.  This command should be run from the agent's main directory. After running this command, access the agent through the displayed URL in a web browser.\nSOURCE: https://github.com/google/adk-samples/blob/main/agents/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# Example (check agent's README for exact path)\ncd agents/fomc-research/\nadk web\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependencies with Poetry (Bash)\nDESCRIPTION: Installs all project dependencies specified in the 'pyproject.toml' file using Poetry. This includes the 'google-adk' library and other necessary packages. Prerequisite: Poetry must be installed and the command run from the project directory.\nSOURCE: https://github.com/google/adk-samples/blob/main/agents/fomc-research/README.md#_snippet_4\n\nLANGUAGE: Bash\nCODE:\n```\npoetry install\n```\n\n----------------------------------------\n\nTITLE: Starting ADK Development UI (Bash)\nDESCRIPTION: Launches the Google ADK local development web user interface for the current project directory. This provides a graphical interface to interact with and observe the agent's execution. Prerequisite: Project setup complete, command run from the project directory.\nSOURCE: https://github.com/google/adk-samples/blob/main/agents/fomc-research/README.md#_snippet_9\n\nLANGUAGE: Bash\nCODE:\n```\nadk web .\n```\n\n----------------------------------------\n\nTITLE: Installing Poetry Python Package Manager (Bash)\nDESCRIPTION: Installs the Poetry dependency management and packaging tool for Python using the 'pip' installer. Poetry is used by the project to manage its dependencies. Prerequisite: Python and pip must be installed.\nSOURCE: https://github.com/google/adk-samples/blob/main/agents/fomc-research/README.md#_snippet_3\n\nLANGUAGE: Bash\nCODE:\n```\npip install poetry\n```\n\n----------------------------------------\n\nTITLE: Uploading Custom PDF from URL\nDESCRIPTION: Modifies script variables such as CORPUS_DISPLAY_NAME, CORPUS_DESCRIPTION, and PDF_URL to upload a specific PDF from a remote URL into the RAG corpus.\nSOURCE: https://github.com/google/adk-samples/blob/main/agents/RAG/README.md#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n# Edit variables at the top of prepare_corpus_and_data.py\nCORPUS_DISPLAY_NAME = \"Your_Corpus_Name\"\nCORPUS_DESCRIPTION = \"Description of your corpus\"\nPDF_URL = \"https://path/to/your/document.pdf\"\nPDF_FILENAME = \"your_document.pdf\"\n```\n\n----------------------------------------\n\nTITLE: Calling Click Function - Initiate Purchase - JSON\nDESCRIPTION: Agent calls the 'click' function targeting the 'Buy Now' button. This action triggers the final purchase process for the currently selected product and options.\nSOURCE: https://github.com/google/adk-samples/blob/main/agents/personalized-shopping/tests/example_interactions/text_search_floral_dress.session.md#_snippet_15\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"function call\": \"click\",\n  \"args\": {\n    \"button_name\": \"Buy Now\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using video connection tool in Python\nDESCRIPTION: This code demonstrates how to use the send_call_companion_link tool to send a secure video connection link to a customer's phone number. The tool returns a success status and confirmation message.\nSOURCE: https://github.com/google/adk-samples/blob/main/agents/customer-service/README.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nprint(send_call_companion_link(phone_number='+12065550123'))\n```\n\n----------------------------------------\n\nTITLE: Cloning Travel Concierge Repository - Bash\nDESCRIPTION: This command sequence clones the Google ADK samples repository and changes the current directory to the `travel-concierge` example directory. This is the first step required to set up the project locally.\nSOURCE: https://github.com/google/adk-samples/blob/main/agents/travel-concierge/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/google/adk-samples.git\ncd adk-samples/agents/travel-concierge\n```\n\n----------------------------------------\n\nTITLE: Installing prerequisites with bash\nDESCRIPTION: Commands to authenticate with Google Cloud, enable required APIs, and set up the environment for the customer service agent. These steps are necessary before running the agent.\nSOURCE: https://github.com/google/adk-samples/blob/main/agents/customer-service/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngcloud auth login\ngcloud services enable aiplatform.googleapis.com\n```\n\n----------------------------------------\n\nTITLE: Run Agent\nDESCRIPTION: The `adk run brand_search_optimization` command executes the brand search optimization agent. This triggers the agent's core functionality, which involves data retrieval, web crawling, and analysis to enhance product data.\nSOURCE: https://github.com/google/adk-samples/blob/main/agents/brand-search-optimization/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nadk run brand_search_optimization\n```\n\n----------------------------------------\n\nTITLE: Event Booking Verification\nDESCRIPTION: Checks the booking status of a specific event (e.g., Space Needle on 2025-06-16) in the monitoring system to ensure reservations are confirmed or identify issues.\nSOURCE: https://github.com/google/adk-samples/blob/main/agents/travel-concierge/tests/post_booking_sample.md#_snippet_4\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"function call\": \"event_booking_check\",\n  \"args\": {\n    \"event_name\": \"Space Needle\",\n    \"event_location\": \"400 Broad St, Seattle, WA 98109\",\n    \"event_date\": \"2025-06-16\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Starting ADK API Server - Bash\nDESCRIPTION: This ADK command starts a development API server for the Travel Concierge package. This allows programmatic interaction with the agent via an HTTP API, typically running on `http://127.0.0.1:8000` by default.\nSOURCE: https://github.com/google/adk-samples/blob/main/agents/travel-concierge/README.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nadk api_server travel_concierge\n```\n\n----------------------------------------\n\nTITLE: Authenticating Google Cloud Account - Bash\nDESCRIPTION: This command authenticates the user's Google Cloud account credentials for application default login. This is necessary for the application to access Google Cloud services like Vertex AI if configured as the backend.\nSOURCE: https://github.com/google/adk-samples/blob/main/agents/travel-concierge/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngcloud auth application-default login\n```\n\n----------------------------------------\n\nTITLE: Calling Click Function - Select Size - JSON\nDESCRIPTION: Agent calls the 'click' function to select the 'small' size option for the product, adding the chosen size to the pending purchase configuration.\nSOURCE: https://github.com/google/adk-samples/blob/main/agents/personalized-shopping/tests/example_interactions/text_search_floral_dress.session.md#_snippet_13\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"function call\": \"click\",\n  \"args\": {\n    \"button_name\": \"small\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running the RAG Agent via CLI\nDESCRIPTION: Starts the RAG agent in command-line interface mode using the ADK run command, enabling interaction and question-answering against the uploaded documents.\nSOURCE: https://github.com/google/adk-samples/blob/main/agents/RAG/README.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nadk run rag\n```\n\n----------------------------------------\n\nTITLE: Setting Up Environment Variables\nDESCRIPTION: Instructs to rename the example environment file and configure necessary environment variables for project operation, particularly for referencing the RAG corpus.\nSOURCE: https://github.com/google/adk-samples/blob/main/agents/RAG/README.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nmv .env.example .env\n# Edit .env to include necessary variables like RAG_CORPUS\n```\n\n----------------------------------------\n\nTITLE: Weather Impact Analysis for Activities\nDESCRIPTION: Checks potential weather impacts on specific outdoor activities (e.g., Pike Place Market on 2025-06-16), allowing proactive adjustments based on weather conditions.\nSOURCE: https://github.com/google/adk-samples/blob/main/agents/travel-concierge/tests/post_booking_sample.md#_snippet_5\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"function call\": \"weather_impact_check\",\n  \"args\": {\n    \"activity_location\": \"85 Pike St, Seattle, WA 98101\",\n    \"activity_date\": \"2025-06-16\",\n    \"activity_name\": \"Pike Place Market\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Activating Virtual Environment via Source\nDESCRIPTION: Alternative method to activate the virtual environment directly from the .venv directory if poetry env activate does not work.\nSOURCE: https://github.com/google/adk-samples/blob/main/agents/RAG/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsource .venv/bin/activate\n```\n\n----------------------------------------\n\nTITLE: Running MCP Airbnb Integration Test\nDESCRIPTION: Command for testing the integration with Airbnb's MCP (Model Control Protocol) server that enables searching for Airbnb listings.\nSOURCE: https://github.com/google/adk-samples/blob/main/agents/travel-concierge/README.md#_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\npython -m tests.mcp_abnb\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with Poetry\nDESCRIPTION: Installs project dependencies listed in pyproject.toml using Poetry, ensuring an isolated virtual environment is created for the project.\nSOURCE: https://github.com/google/adk-samples/blob/main/agents/RAG/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npoetry install\n```\n\n----------------------------------------\n\nTITLE: Launching RAG Agent with Web UI\nDESCRIPTION: Starts the agent with a web interface for easier interaction, allowing users to select RAG mode from a dropdown menu.\nSOURCE: https://github.com/google/adk-samples/blob/main/agents/RAG/README.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nadk web\n```\n\n----------------------------------------\n\nTITLE: Activating the Poetry Virtual Environment\nDESCRIPTION: Activates the Poetry-managed virtual environment to ensure commands are run within the project's isolated environment.\nSOURCE: https://github.com/google/adk-samples/blob/main/agents/RAG/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npoetry env activate\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies and Running Tests with Poetry\nDESCRIPTION: Commands for installing development dependencies and running various test suites for the travel concierge agent.\nSOURCE: https://github.com/google/adk-samples/blob/main/agents/travel-concierge/README.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\npoetry install --with dev\npytest\n```\n\n----------------------------------------\n\nTITLE: Deleting Deployed Agent\nDESCRIPTION: Command for removing a previously deployed agent from Vertex AI Agent Engine.\nSOURCE: https://github.com/google/adk-samples/blob/main/agents/travel-concierge/README.md#_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\npython3 deployment/deploy.py --delete --resource_id=<RESOURCE_ID>\n```\n\n----------------------------------------\n\nTITLE: Calling memorize Agent to Store Outbound Flight Selection (JSON)\nDESCRIPTION: Shows the JSON call to the `memorize` agent. It stores the selected outbound flight details (AA123) as a JSON string under the key `outbound_flight_selection`. This allows the agent system to recall the user's choice later.\nSOURCE: https://github.com/google/adk-samples/blob/main/agents/travel-concierge/tests/pre_booking_sample.md#_snippet_14\n\nLANGUAGE: json\nCODE:\n```\nfunction call: \"memorize\"\nargs: {\n  \"value\": \"{\\\"airline_logo\\\": \\\"/images/american.png\\\", \\\"airlines\\\": [\\\"American Airlines\\\"], \\\"arrival\\\": {\\\"airportCode\\\": \\\"LIM\\\", \\\"cityName\\\": \\\"Lima\\\", \\\"timestamp\\\": \\\"2025-05-05T02:00:00Z\\\"}, \\\"departure\\\": {\\\"airportCode\\\": \\\"SAN\\\", \\\"cityName\\\": \\\"San Diego\\\", \\\"timestamp\\\": \\\"2025-05-04T14:00:00Z\\\"}, \\\"flight_number\\\": \\\"AA123\\\", \\\"numberOfStops\\\": 1, \\\"priceInUSD\\\": 600}\",\n  \"key\": \"outbound_flight_selection\"\n}\n```\n\n----------------------------------------\n\nTITLE: Response from flight_search_agent with Return Flight Options (JSON)\nDESCRIPTION: Shows the JSON response structure containing potential return flights from various cities in Peru (Lima, Cusco) to San Diego for the specified date. Similar to the outbound response, it includes flight numbers, departure/arrival details, airlines, price, and stops.\nSOURCE: https://github.com/google/adk-samples/blob/main/agents/travel-concierge/tests/pre_booking_sample.md#_snippet_19\n\nLANGUAGE: json\nCODE:\n```\nResponse from: \"flight_search_agent\"\nresponse: {\n  \"flights\": [\n    {\n      \"flight_number\": \"LATAM2345\",\n      \"departure\": {\n        \"cityName\": \"Lima\",\n        \"airportCode\": \"LIM\",\n        \"timestamp\": \"2025-05-11T14:00:00Z\"\n      },\n      \"arrival\": {\n        \"cityName\": \"San Diego\",\n        \"airportCode\": \"SAN\",\n        \"timestamp\": \"2025-05-12T02:00:00Z\"\n      },\n      \"airlines\": [\n        \"LATAM Airlines\"\n      ],\n      \"airline_logo\": \"/images/LATAM.png\",\n      \"priceInUSD\": 650,\n      \"numberOfStops\": 1\n    },\n    {\n      \"flight_number\": \"AVIANCA1234\",\n      \"departure\": {\n        \"cityName\": \"Lima\",\n        \"airportCode\": \"LIM\",\n        \"timestamp\": \"2025-05-11T18:00:00Z\"\n      },\n      \"arrival\": {\n        \"cityName\": \"San Diego\",\n        \"airportCode\": \"SAN\",\n        \"timestamp\": \"2025-05-12T08:00:00Z\"\n      },\n      \"airlines\": [\n        \"Avianca\"\n      ],\n      \"airline_logo\": \"/images/avianca.png\",\n      \"priceInUSD\": 700,\n      \"numberOfStops\": 1\n    },\n    {\n      \"flight_number\": \"AmericanAirlines5678\",\n      \"departure\": {\n        \"cityName\": \"Cusco\",\n        \"airportCode\": \"CUZ\",\n        \"timestamp\": \"2025-05-11T10:00:00Z\"\n      },\n      \"arrival\": {\n        \"cityName\": \"San Diego\",\n        \"airportCode\": \"SAN\",\n        \"timestamp\": \"2025-05-12T16:00:00Z\"\n      },\n      \"airlines\": [\n        \"American Airlines\"\n      ],\n      \"airline_logo\": null,\n      \"priceInUSD\": null,\n      \"numberOfStops\": null\n    } \n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Calling memorize Agent to Store Outbound Seat Number (JSON)\nDESCRIPTION: This JSON snippet shows the call to the `memorize` agent to store the specific seat number ('1A') chosen for the outbound flight. The value '1A' is associated with the key `outbound_seat_number`.\nSOURCE: https://github.com/google/adk-samples/blob/main/agents/travel-concierge/tests/pre_booking_sample.md#_snippet_16\n\nLANGUAGE: json\nCODE:\n```\nfunction call: \"memorize\"\nargs: {\n  \"value\": \"1A\",\n  \"key\": \"outbound_seat_number\"\n}\n```\n\n----------------------------------------\n\nTITLE: Transferring User to Booking Agent\nDESCRIPTION: JSON function call to transfer the user from the planning agent to the booking agent for finalizing reservations and handling payment processing.\nSOURCE: https://github.com/google/adk-samples/blob/main/agents/travel-concierge/tests/pre_booking_sample.md#_snippet_37\n\nLANGUAGE: json\nCODE:\n```\nfunction call: \"transfer_to_agent\"\nargs: {\n  \"agent_name\": \"booking_agent\"\n}\n```\n\n----------------------------------------\n\nTITLE: Response from flight_search_agent with Outbound Flight Options (JSON)\nDESCRIPTION: Details the JSON response structure returned by `flight_search_agent`. It provides a list (`flights`) of available outbound flight options, each containing details like flight number, departure/arrival cities, airports, timestamps, airlines, logo path, price, and number of stops.\nSOURCE: https://github.com/google/adk-samples/blob/main/agents/travel-concierge/tests/pre_booking_sample.md#_snippet_11\n\nLANGUAGE: json\nCODE:\n```\nResponse from: \"flight_search_agent\"\nresponse: {\n  \"flights\": [\n    {\n      \"flight_number\": \"AA123\",\n      \"departure\": {\n        \"cityName\": \"San Diego\",\n        \"airportCode\": \"SAN\",\n        \"timestamp\": \"2025-05-04T14:00:00Z\"\n      },\n      \"arrival\": {\n        \"cityName\": \"Lima\",\n        \"airportCode\": \"LIM\",\n        \"timestamp\": \"2025-05-05T02:00:00Z\"\n      },\n      \"airlines\": [\n        \"American Airlines\"\n      ],\n      \"airline_logo\": \"/images/american.png\",\n      \"priceInUSD\": 600,\n      \"numberOfStops\": 1\n    },\n    {\n      \"flight_number\": \"UA456\",\n      \"departure\": {\n        \"cityName\": \"San Diego\",\n        \"airportCode\": \"SAN\",\n        \"timestamp\": \"2025-05-06T10:00:00Z\"\n      },\n      \"arrival\": {\n        \"cityName\": \"Cusco\",\n        \"airportCode\": \"CUZ\",\n        \"timestamp\": \"2025-05-07T01:00:00Z\"\n      },\n      \"airlines\": [\n        \"United Airlines\"\n      ],\n      \"airline_logo\": \"/images/united.png\",\n      \"priceInUSD\": 700,\n      \"numberOfStops\": 2\n    },\n    {\n      \"flight_number\": \"DL789\",\n      \"departure\": {\n        \"cityName\": \"San Diego\",\n        \"airportCode\": \"SAN\",\n        \"timestamp\": \"2025-05-08T16:00:00Z\"\n      },\n      \"arrival\": {\n        \"cityName\": \"Lima\",\n        \"airportCode\": \"LIM\",\n        \"timestamp\": \"2025-05-09T03:00:00Z\"\n      },\n      \"airlines\": [\n        \"Delta Air Lines\"\n      ],\n      \"airline_logo\": \"/images/delta1.jpg\",\n      \"priceInUSD\": 650,\n      \"numberOfStops\": 0\n    },\n    {\n      \"flight_number\": \"LA101\",\n      \"departure\": {\n        \"cityName\": \"San Diego\",\n        \"airportCode\": \"SAN\",\n        \"timestamp\": \"2025-05-10T08:00:00Z\"\n      },\n      \"arrival\": {\n        \"cityName\": \"Arequipa\",\n        \"airportCode\": \"AQP\",\n        \"timestamp\": \"2025-05-11T12:00:00Z\"\n      },\n      \"airlines\": [\n        \"LATAM Airlines\"\n      ],\n      \"airline_logo\": \"/images/airplane.png\",\n      \"priceInUSD\": 800,\n      \"numberOfStops\": 1\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Memorizing Selected Return Flight Details JSON\nDESCRIPTION: Calls a simulated `memorize` function to store the detailed information of the user's selected return flight. The flight details are serialized into a JSON string before being stored under the key \"return_flight_selection\".\nSOURCE: https://github.com/google/adk-samples/blob/main/agents/travel-concierge/tests/pre_booking_sample.md#_snippet_23\n\nLANGUAGE: JSON\nCODE:\n```\nfunction call: \"memorize\"\nargs: {\n  \"key\": \"return_flight_selection\",\n  \"value\": \"{\\\"airline_logo\\\": \\\"/images/LATAM.png\\\", \\\"airlines\\\": [\\\"LATAM Airlines\\\"], \\\"arrival\\\": {\\\"airportCode\\\": \\\"SAN\\\", \\\"cityName\\\": \\\"San Diego\\\", \\\"timestamp\\\": \\\"2025-05-12T02:00:00Z\\\"}, \\\"departure\\\": {\\\"airportCode\\\": \\\"LIM\\\", \\\"cityName\\\": \\\"Lima\\\", \\\"timestamp\\\": \\\"2025-05-11T14:00:00Z\\\"}, \\\"flight_number\\\": \\\"LATAM2345\\\", \\\"numberOfStops\\\": 1, \\\"priceInUSD\\\": 650}\"\n}\n```"
  }
]