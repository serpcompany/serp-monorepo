[
  {
    "owner": "powersync-ja",
    "repo": "powersync.dart",
    "content": "TITLE: Adding PowerSync dependency to Flutter project\nDESCRIPTION: This command adds the PowerSync package as a dependency to your Flutter project using the `flutter pub add` command. This allows you to use PowerSync's features in your Flutter application. Run this command in the root directory of your Flutter project.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/packages/powersync/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nflutter pub add powersync\n```\n\n----------------------------------------\n\nTITLE: Adding specific PowerSync version to Flutter project\nDESCRIPTION: This command adds a specific version of the PowerSync package as a dependency to your Flutter project, ensuring compatibility and predictability. Replace '^1.9.0' with the desired PowerSync version. Run this command in the root directory of your Flutter project.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/packages/powersync/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nflutter pub add powersync:'^1.9.0'\n```\n\n----------------------------------------\n\nTITLE: PowerSync Sync Rules Configuration (Prioritized)\nDESCRIPTION: This YAML snippet configures PowerSync sync rules for a todo list application, prioritizing the synchronization of lists over todos to improve UI responsiveness during large sync cycles.  It defines two buckets: `user_lists` and `user_todos`, linked by `list_id`. `user_lists` bucket has `priority: 1` which makes it sync first. The `parameters` field specifies a query to select the `list_id` based on the current user's ID. The `data` field defines the SQL queries to retrieve data for each bucket.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-todolist/README.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nbucket_definitions:\n  user_lists:\n    priority: 1\n    parameters: select id as list_id from lists where owner_id = request.user_id()\n    data:\n      - select * from lists where id = bucket.list_id\n\n  user_todos:\n    parameters: select id as list_id from lists where owner_id = request.user_id()\n    data:\n      - select * from todos where list_id = bucket.list_id\n```\n\n----------------------------------------\n\nTITLE: Installing Flutter Library\nDESCRIPTION: This snippet installs the Flutter library (`${FLUTTER_LIBRARY}`) into the `lib` directory within the installation prefix. This provides the core Flutter runtime for the application.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/firebase-nodejs-todolist/linux/CMakeLists.txt#_snippet_20\n\nLANGUAGE: CMake\nCODE:\n```\ninstall(FILES \"${FLUTTER_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: PowerSync Sync Rules Configuration\nDESCRIPTION: This YAML snippet defines the sync rules for PowerSync, specifying how data is synchronized between the client and the database. It defines a bucket definition for user lists, using a parameter to select lists based on the user's ID and then selects lists and todos that belong to that list. This ensures that users only access their own data.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/firebase-nodejs-todolist/README.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nbucket_definitions:\n  user_lists:\n    # Separate bucket per todo list\n    parameters: select id as list_id from lists where owner_id = request.user_id()\n    data:\n      - select * from lists where id = bucket.list_id\n      - select * from todos where list_id = bucket.list_id\n```\n\n----------------------------------------\n\nTITLE: PowerSync Sync Rules Configuration\nDESCRIPTION: Defines the sync rules for PowerSync using a YAML configuration. This configuration specifies how data from the `lists` and `todos` tables in the Django backend should be synchronized with the local PowerSync database, based on the user's ID and list ID.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/django-todolist/README.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nbucket_definitions:\n  user_lists:\n    # Separate bucket per todo list\n    parameters: select id as list_id from lists where owner_id = request.user_id()\n    data:\n      - select * from lists where id = bucket.list_id\n      - select * from todos where list_id = bucket.list_id\n```\n\n----------------------------------------\n\nTITLE: Plugin Integration\nDESCRIPTION: Includes the `flutter/generated_plugins.cmake` file, which contains the build rules for Flutter plugins. This integration is crucial for building applications that utilize Flutter plugins, as it manages the build process and ensures that the plugins are properly linked.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-todolist/linux/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\n# Generated plugin build rules, which manage building the plugins and adding\n# them to the application.\ninclude(flutter/generated_plugins.cmake)\n```\n\n----------------------------------------\n\nTITLE: PowerSync Sync Rules Configuration (Unified)\nDESCRIPTION: This YAML snippet configures PowerSync sync rules for a todo list application, unifying lists and todos into a single bucket.  It defines a `user_lists` bucket and does not prioritize the sync between `lists` and `todos`. The `parameters` field specifies a query to select the `list_id` based on the current user's ID. The `data` field defines the SQL queries to retrieve both lists and todos related to each `list_id`.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-todolist/README.md#_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\nbucket_definitions:\n  user_lists:\n    # Separate bucket per todo list\n    parameters: select id as list_id from lists where owner_id = request.user_id()\n    data:\n      - select * from lists where id = bucket.list_id\n      - select * from todos where list_id = bucket.list_id\n```\n\n----------------------------------------\n\nTITLE: PowerSync Sync Rules Configuration\nDESCRIPTION: This YAML configuration defines sync rules for PowerSync, specifying bucket definitions for user lists. It uses parameters to select list IDs based on the user ID and retrieves data from the `lists` and `todos` tables based on the bucket's list ID. It ensures that users only access their own data.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-todolist-drift/README.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nbucket_definitions:\n  user_lists:\n    # Separate bucket per todo list\n    parameters: select id as list_id from lists where owner_id = request.user_id()\n    data:\n      - select * from lists where id = bucket.list_id\n      - select * from todos where list_id = bucket.list_id\n```\n\n----------------------------------------\n\nTITLE: Applying Standard Compilation Settings\nDESCRIPTION: This snippet defines a function `APPLY_STANDARD_SETTINGS` that applies standard compilation settings to a given target. It sets the C++ standard to C++14, adds compiler warnings, and optimizes for non-Debug builds.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/django-todolist/linux/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_14)\n  target_compile_options(${TARGET} PRIVATE -Wall -Werror)\n  target_compile_options(${TARGET} PRIVATE \"<$<NOT:$<CONFIG:Debug>>:-O3>\")\n  target_compile_definitions(${TARGET} PRIVATE \"<$<NOT:$<CONFIG:Debug>>:NDEBUG>\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Installing AOT Library CMake\nDESCRIPTION: This snippet installs the AOT library for non-Debug builds only. The AOT library is essential for improved performance in Profile and Release build configurations.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-edge-function-auth/windows/CMakeLists.txt#_snippet_12\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(FILES \"${AOT_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  CONFIGURATIONS Profile;Release\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Supabase Database Schema Setup\nDESCRIPTION: This SQL script creates `lists` and `todos` tables in Supabase, sets up a publication called `powersync` for these tables, enables row level security to restrict access to user's own data, and creates a trigger to populate sample data when a user registers.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-todolist-drift/README.md#_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\n1. Create `lists` and `todos` tables.\n2. Create a publication called `powersync` for `lists` and `todos`.\n3. Enable row level security, allowing users to only view and edit their own data.\n4. Create a trigger to populate some sample data when an user registers.\n```\n\n----------------------------------------\n\nTITLE: Installing Application Target in CMake\nDESCRIPTION: This snippet configures the installation process, defining the directories for data and libraries within the installation bundle. It then installs the application executable, ICU data file, Flutter library, and plugin libraries to their respective destinations.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-trello/linux/CMakeLists.txt#_snippet_11\n\nLANGUAGE: CMake\nCODE:\n```\nset(INSTALL_BUNDLE_DATA_DIR \"${CMAKE_INSTALL_PREFIX}/data\")\nset(INSTALL_BUNDLE_LIB_DIR \"${CMAKE_INSTALL_PREFIX}/lib\")\n\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_ICU_DATA_FILE}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n  COMPONENT Runtime)\n\nforeach(bundled_library ${PLUGIN_BUNDLED_LIBRARIES})\n  install(FILES \"${bundled_library}\"\n    DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendforeach(bundled_library)\n```\n\n----------------------------------------\n\nTITLE: Enabling Modern CMake Behaviors\nDESCRIPTION: This snippet explicitly opts in to modern CMake behaviors to avoid warnings with recent versions of CMake.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/django-todolist/windows/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_policy(SET CMP0063 NEW)\n```\n\n----------------------------------------\n\nTITLE: Creating Flutter Interface Library\nDESCRIPTION: Defines an interface library named `flutter`. Interface libraries are used to group compiler flags, include directories, and link dependencies without producing any object code. This allows for a cleaner separation of concerns and simplifies dependency management.  Includes the ephemeral directory and links against GTK, GLIB, and GIO. Also, adds a dependency on `flutter_assemble` target.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-anonymous-auth/linux/flutter/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(flutter INTERFACE)\ntarget_include_directories(flutter INTERFACE\n  \"${EPHEMERAL_DIR}\"\n)\ntarget_link_libraries(flutter INTERFACE \"${FLUTTER_LIBRARY}\")\ntarget_link_libraries(flutter INTERFACE\n  PkgConfig::GTK\n  PkgConfig::GLIB\n  PkgConfig::GIO\n)\nadd_dependencies(flutter flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Setting Installation Directory in CMake\nDESCRIPTION: This snippet sets up the installation process. It defines the build bundle directory, sets the CMAKE_INSTALL_PREFIX to this directory if it's the default, and removes the bundle directory at the start of the installation process.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-trello/linux/CMakeLists.txt#_snippet_10\n\nLANGUAGE: CMake\nCODE:\n```\nset(BUILD_BUNDLE_DIR \"${PROJECT_BINARY_DIR}/bundle\")\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \"${BUILD_BUNDLE_DIR}\" CACHE PATH \"...\" FORCE)\nendif()\n\n# Start with a clean build bundle directory every time.\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${BUILD_BUNDLE_DIR}/\\\"\n  \" COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Adding PowerSync SQLCipher Package to Flutter\nDESCRIPTION: This command adds the `powersync_sqlcipher` package as a dependency to your Flutter project. This package provides the PowerSync client SDK with SQLCipher encryption enabled. Running this command updates the `pubspec.yaml` file and fetches the package.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/packages/powersync_sqlcipher/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nflutter pub add powersync_sqlcipher\n```\n\n----------------------------------------\n\nTITLE: Running the Flutter App\nDESCRIPTION: These commands are used to set up and run the Flutter application. It starts by copying a configuration template, then fetches dependencies, and finally runs the application.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-anonymous-auth/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncp lib/app_config_template.dart lib/app_config.dart\nflutter pub get\nflutter run\n```\n\n----------------------------------------\n\nTITLE: Copy and Configure app_config.dart\nDESCRIPTION: This shell command copies the template configuration file to the active configuration file, allowing the user to then modify the active file. Subsequently, Flutter dependencies are installed and the application is run.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-edge-function-auth/README.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ncp lib/app_config_template.dart lib/app_config.dart\nflutter pub get\nflutter run\n```\n\n----------------------------------------\n\nTITLE: Defining Application Target\nDESCRIPTION: This snippet defines the application executable target, specifying the source files to be compiled. It creates the executable with the name specified by `BINARY_NAME`.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/django-todolist/linux/CMakeLists.txt#_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\n# Define the application target. To change its name, change BINARY_NAME above,\n# not the value here, or `flutter run` will no longer work.\n#\n# Any new source files that you add to the application should be added here.\nadd_executable(${BINARY_NAME}\n  \"main.cc\"\n  \"my_application.cc\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing PowerSync with SQLCipher in Dart\nDESCRIPTION: This snippet demonstrates how to initialize the PowerSync database with SQLCipher encryption in a Flutter application. It imports the `powersync_sqlcipher` package, creates a `PowerSyncSQLCipherOpenFactory` with a path and encryption key, and then instantiates a `PowerSyncDatabase` with this factory and a provided schema.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/packages/powersync_sqlcipher/README.md#_snippet_2\n\nLANGUAGE: Dart\nCODE:\n```\nimport 'package/powersync_sqlcipher/powersync.dart';\n\n/// Global reference to the database\nlate final PowerSyncDatabase db;\n\nfinal cipherFactory = PowerSyncSQLCipherOpenFactory(\n      path: path, key: \"sqlcipher-encryption-key\"); // https://www.zetetic.net/sqlcipher/sqlcipher-api/#key\n\ndb = PowerSyncDatabase.withFactory(cipherFactory, schema: schema);\n```\n\n----------------------------------------\n\nTITLE: Initializing CMake Project\nDESCRIPTION: Initializes the CMake project, specifying the minimum required CMake version and the project's name and language (C++). This is the starting point for configuring the build process.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-trello/windows/runner/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\nproject(runner LANGUAGES CXX)\n```\n\n----------------------------------------\n\nTITLE: Initialize Project Configuration\nDESCRIPTION: This snippet sets the minimum required CMake version, defines the project name, and explicitly opts into modern CMake behaviors to avoid warnings. It initializes the project for C++ development.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-todolist-drift/windows/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\nproject(supabase_todolist_drift LANGUAGES CXX)\n```\n\n----------------------------------------\n\nTITLE: Installing Assets Directory\nDESCRIPTION: This snippet installs the Flutter assets directory, ensuring that the assets are copied to the correct location in the installation bundle. It first removes any existing assets to prevent stale files.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/django-todolist/linux/CMakeLists.txt#_snippet_14\n\nLANGUAGE: CMake\nCODE:\n```\n# Fully re-copy the assets directory on each build to avoid having stale files\n# from a previous install.\nset(FLUTTER_ASSET_DIR_NAME \"flutter_assets\")\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\\\")\n  \" COMPONENT Runtime)\ninstall(DIRECTORY \"${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}\"\n  DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\" COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Setting Runtime Search Path\nDESCRIPTION: This snippet sets the runtime search path (RPATH) for the executable, ensuring that bundled libraries are loaded from the `lib/` directory relative to the binary. This is necessary so that the application can find its dependencies at runtime, without relying on system-wide installations.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/firebase-nodejs-todolist/linux/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\n# Load bundled libraries from the lib/ directory relative to the binary.\nset(CMAKE_INSTALL_RPATH \"$ORIGIN/lib\")\n```\n\n----------------------------------------\n\nTITLE: Including Generated Plugin Rules in CMake\nDESCRIPTION: This snippet includes the generated plugins CMake file, which manages the building and linking of Flutter plugins.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-trello/linux/CMakeLists.txt#_snippet_9\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(flutter/generated_plugins.cmake)\n```\n\n----------------------------------------\n\nTITLE: Installing Assets and AOT Library\nDESCRIPTION: This snippet installs the Flutter assets directory and the AOT library. It removes the assets directory recursively on each build to ensure no stale files exist. The AOT library is only installed in Profile and Release configurations.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-todolist/windows/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\n# Fully re-copy the assets directory on each build to avoid having stale files\n# from a previous install.\nset(FLUTTER_ASSET_DIR_NAME \"flutter_assets\")\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\\\")\n  \" COMPONENT Runtime)\ninstall(DIRECTORY \"${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}\"\n  DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\" COMPONENT Runtime)\n\n# Install the AOT library on non-Debug builds only.\ninstall(FILES \"${AOT_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  CONFIGURATIONS Profile;Release\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Installing Executable and Dependencies CMake\nDESCRIPTION: This section defines the installation rules for the application executable, ICU data file, Flutter library, and bundled plugin libraries. It specifies the destination directories for these files during the install process.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-edge-function-auth/windows/CMakeLists.txt#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_ICU_DATA_FILE}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n  COMPONENT Runtime)\n\nif(PLUGIN_BUNDLED_LIBRARIES)\n  install(FILES \"${PLUGIN_BUNDLED_LIBRARIES}\"\n    DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Initialize Attachment Queue\nDESCRIPTION: Initializes the `PhotoAttachmentQueue` and starts the attachment processing. This function should be called during application startup to ensure the attachment queue is ready to handle file synchronization.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/packages/powersync_attachments_helper/README.md#_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\n// Use this in your main.dart to setup and start the queue\ninitializeAttachmentQueue(PowerSyncDatabase db) async {\n  attachmentQueue = PhotoAttachmentQueue(db, remoteStorage);\n  await attachmentQueue.init();\n}\n```\n\n----------------------------------------\n\nTITLE: Apply Standard Compilation Settings\nDESCRIPTION: This function applies a set of standard compilation settings to a specified target. It enables C++17 support, sets warning levels, disables exceptions, and defines debug settings. It's crucial for managing consistent compilation across targets, while being cautious about modifying it as plugins depend on its defaults.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-todolist-drift/windows/CMakeLists.txt#_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_17)\n  target_compile_options(${TARGET} PRIVATE /W4 /WX /wd\"4100\")\n  target_compile_options(${TARGET} PRIVATE /EHsc)\n  target_compile_definitions(${TARGET} PRIVATE \"_HAS_EXCEPTIONS=0\")\n  target_compile_definitions(${TARGET} PRIVATE \"$<$<CONFIG:Debug>:_DEBUG>\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Adding executable target\nDESCRIPTION: This snippet adds the executable target, specifying the source files to be compiled. It links against the Flutter and GTK libraries and adds flutter_assemble as a dependency.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-simple-chat/linux/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nadd_executable(${BINARY_NAME}\n  \"main.cc\"\n  \"my_application.cc\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n)\n\n# Apply the standard set of build settings. This can be removed for applications\n# that need different build settings.\napply_standard_settings(${BINARY_NAME})\n\n# Add dependency libraries. Add any application-specific dependencies here.\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter)\ntarget_link_libraries(${BINARY_NAME} PRIVATE PkgConfig::GTK)\n\n# Run the Flutter tool portions of the build. This must not be removed.\nadd_dependencies(${BINARY_NAME} flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Installing targets and files\nDESCRIPTION: Installs the binary, Flutter ICU data file, and Flutter library to their respective destination directories.  Also includes handling for bundled plugin libraries.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-anonymous-auth/windows/CMakeLists.txt#_snippet_12\n\nLANGUAGE: CMake\nCODE:\n```\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_ICU_DATA_FILE}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n  COMPONENT Runtime)\n\nif(PLUGIN_BUNDLED_LIBRARIES)\n  install(FILES \"${PLUGIN_BUNDLED_LIBRARIES}\"\n    DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Creating Flutter Wrapper Plugin Library\nDESCRIPTION: Creates a static library for the Flutter wrapper plugin. It includes core and plugin sources, applies standard settings, sets properties for position independent code and hidden C++ visibility, and links against the Flutter interface.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/benchmarks/windows/flutter/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND CPP_WRAPPER_SOURCES_CORE\n  \"core_implementations.cc\"\n  \"standard_codec.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_CORE PREPEND \"${WRAPPER_ROOT}/\")\nlist(APPEND CPP_WRAPPER_SOURCES_PLUGIN\n  \"plugin_registrar.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_PLUGIN PREPEND \"${WRAPPER_ROOT}/\")\n\n# Wrapper sources needed for a plugin.\nadd_library(flutter_wrapper_plugin STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n)\napply_standard_settings(flutter_wrapper_plugin)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  POSITION_INDEPENDENT_CODE ON)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  CXX_VISIBILITY_PRESET hidden)\ntarget_link_libraries(flutter_wrapper_plugin PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_plugin PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_plugin flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Adding Flutter Subdirectory in CMake\nDESCRIPTION: This snippet adds the Flutter managed directory as a subdirectory to the current project. This allows CMake to build the Flutter-related targets.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-trello/linux/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nset(FLUTTER_MANAGED_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/flutter\")\nadd_subdirectory(${FLUTTER_MANAGED_DIR})\n```\n\n----------------------------------------\n\nTITLE: Creating Flutter Wrapper Library (App)\nDESCRIPTION: Creates a static library named `flutter_wrapper_app` that contains the C++ wrapper code required for the Flutter application. It links against the `flutter` interface library and sets include directories.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-todolist-optional-sync/windows/flutter/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND CPP_WRAPPER_SOURCES_APP\n  \"flutter_engine.cc\"\n  \"flutter_view_controller.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_APP PREPEND \"${WRAPPER_ROOT}/\")\n\n# Wrapper sources needed for the runner.\nadd_library(flutter_wrapper_app STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\napply_standard_settings(flutter_wrapper_app)\ntarget_link_libraries(flutter_wrapper_app PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_app PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_app flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Creating Flutter Interface Library\nDESCRIPTION: Creates an interface library named 'flutter'. Interface libraries are used to propagate usage requirements like include directories and linked libraries to dependent targets. It sets include directories to the ephemeral directory and links against the Flutter library, GTK, GLIB, and GIO. It also adds a dependency on the 'flutter_assemble' target.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-edge-function-auth/linux/flutter/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(flutter INTERFACE)\ntarget_include_directories(flutter INTERFACE\n  \"${EPHEMERAL_DIR}\"\n)\ntarget_link_libraries(flutter INTERFACE \"${FLUTTER_LIBRARY}\")\ntarget_link_libraries(flutter INTERFACE\n  PkgConfig::GTK\n  PkgConfig::GLIB\n  PkgConfig::GIO\n)\nadd_dependencies(flutter flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Include Generated Configuration\nDESCRIPTION: Includes the generated_config.cmake file from the ephemeral directory. This file contains configuration settings provided by the Flutter tool, such as paths to the Flutter engine and other dependencies.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-edge-function-auth/windows/flutter/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(${EPHEMERAL_DIR}/generated_config.cmake)\n```\n\n----------------------------------------\n\nTITLE: Install Flutter ICU Data File\nDESCRIPTION: This snippet installs the Flutter ICU data file to the specified destination directory. This data file is necessary for internationalization support in Flutter applications.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-todolist-drift/windows/CMakeLists.txt#_snippet_11\n\nLANGUAGE: CMake\nCODE:\n```\ninstall(FILES \"${FLUTTER_ICU_DATA_FILE}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Creating Flutter Wrapper App Library\nDESCRIPTION: Creates a static library named 'flutter_wrapper_app'. This library contains the C++ wrapper sources needed for the Flutter application. It links against the 'flutter' interface library.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-trello/windows/flutter/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(flutter_wrapper_app STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\napply_standard_settings(flutter_wrapper_app)\ntarget_link_libraries(flutter_wrapper_app PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_app PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_app flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Defining List Prepend Function\nDESCRIPTION: Defines a custom CMake function `list_prepend` to prepend a prefix to each element in a list. This function mimics `list(TRANSFORM ... PREPEND ...)` which isn't available in CMake 3.10. The function iterates through the input list and creates a new list with the prefix added to each element.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/firebase-nodejs-todolist/linux/flutter/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nfunction(list_prepend LIST_NAME PREFIX)\n    set(NEW_LIST \"\")\n    foreach(element ${${LIST_NAME}})\n        list(APPEND NEW_LIST \"${PREFIX}${element}\")\n    endforeach(element)\n    set(${LIST_NAME} \"${NEW_LIST}\" PARENT_SCOPE)\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Run Flutter App\nDESCRIPTION: These shell commands are used to run the Flutter app in different environments. The first command runs the app on desktop or mobile, while the second command runs it on Chrome with OPFS, requiring specific web headers for cross-origin isolation. The `--release` flag builds the app in release mode for optimized performance.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/benchmarks/README.md#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n# Desktop / Mobile\nflutter run --release\n# Chrome, OPFS\nflutter run -d chrome --release --web-header \"Cross-Origin-Opener-Policy=same-origin\" --web-header \"Cross-Origin-Embedder-Policy=require-corp\"\n```\n\n----------------------------------------\n\nTITLE: Installation Configuration\nDESCRIPTION: Configures the installation process to create a relocatable bundle in the build directory. It removes any existing bundle directory, sets up the data and library directories within the bundle, and installs the executable, ICU data file, Flutter library, plugin bundled libraries, and Flutter assets. An AOT library is also installed for non-Debug builds.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-todolist/linux/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\n# === Installation ===\n# By default, \"installing\" just makes a relocatable bundle in the build\n# directory.\nset(BUILD_BUNDLE_DIR \"${PROJECT_BINARY_DIR}/bundle\")\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \"${BUILD_BUNDLE_DIR}\" CACHE PATH \"...\" FORCE)\nendif()\n\n# Start with a clean build bundle directory every time.\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${BUILD_BUNDLE_DIR}/\\\"\n  \" COMPONENT Runtime)\n\nset(INSTALL_BUNDLE_DATA_DIR \"${CMAKE_INSTALL_PREFIX}/data\")\nset(INSTALL_BUNDLE_LIB_DIR \"${CMAKE_INSTALL_PREFIX}/lib\")\n\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_ICU_DATA_FILE}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n  COMPONENT Runtime)\n\nforeach(bundled_library ${PLUGIN_BUNDLED_LIBRARIES})\n  install(FILES \"${bundled_library}\"\n    DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendforeach(bundled_library)\n\n# Fully re-copy the assets directory on each build to avoid having stale files\n# from a previous install.\nset(FLUTTER_ASSET_DIR_NAME \"flutter_assets\")\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\\\"\n  \" COMPONENT Runtime)\ninstall(DIRECTORY \"${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}\"\n  DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\" COMPONENT Runtime)\n\n# Install the AOT library on non-Debug builds only.\nif(NOT CMAKE_BUILD_TYPE MATCHES \"Debug\")\n  install(FILES \"${AOT_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Flutter Subdirectory\nDESCRIPTION: This snippet adds the Flutter managed directory as a subdirectory to the CMake project.  This allows the CMake build process to incorporate the Flutter build system and associated build targets.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/firebase-nodejs-todolist/linux/CMakeLists.txt#_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\n# Flutter library and tool build rules.\nset(FLUTTER_MANAGED_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/flutter\")\nadd_subdirectory(${FLUTTER_MANAGED_DIR})\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Target\nDESCRIPTION: Adds a custom target named `flutter_assemble`. This target depends on the Flutter library and headers, ensuring they are built before anything else that depends on this target.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-todolist-drift/linux/flutter/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_target(flutter_assemble DEPENDS\n  \"${FLUTTER_LIBRARY}\"\n  ${FLUTTER_LIBRARY_HEADERS}\n)\n```\n\n----------------------------------------\n\nTITLE: Bump Package Versions using Melos\nDESCRIPTION: This command uses the `melos version` command to automatically bump the version of packages to be released. It relies on `melos` to detect changes and increment the version numbers accordingly.  It's the primary method for version management before release.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/RELEASING.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmelos version\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Command for Flutter Assembly\nDESCRIPTION: Creates a custom command that runs the Flutter tool backend to generate the Flutter library, headers, and wrapper sources. The command uses a phony output to ensure it runs every time. A custom target 'flutter_assemble' is also created as a dependency.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/django-todolist/windows/flutter/CMakeLists.txt#_snippet_9\n\nLANGUAGE: CMake\nCODE:\n```\nset(PHONY_OUTPUT \"${CMAKE_CURRENT_BINARY_DIR}/_phony_\")\nset_source_files_properties(\"${PHONY_OUTPUT}\" PROPERTIES SYMBOLIC TRUE)\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CPP_WRAPPER_SOURCES_CORE} ${CPP_WRAPPER_SOURCES_PLUGIN}\n    ${CPP_WRAPPER_SOURCES_APP}\n    ${PHONY_OUTPUT}\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.bat\"\n      windows-x64 $<CONFIG>\n  VERBATIM\n)\nadd_custom_target(flutter_assemble DEPENDS\n  \"${FLUTTER_LIBRARY}\"\n  ${FLUTTER_LIBRARY_HEADERS}\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\n```\n\n----------------------------------------\n\nTITLE: Define Database Schema for PowerSync\nDESCRIPTION: Defines the database schema for PowerSync using the `Schema` and `Table` classes.  The schema includes a 'users' table with 'name' and 'photo_id' columns. The `photo_id` field is used to monitor changes for attachments.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/packages/powersync_attachments_helper/README.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\n// Set up schema with an id field that can be used in watchIds().\n// In this case it is photo_id\nconst schema = Schema([\n  Table('users', [Column.text('name'), Column.text('photo_id')])\n]);\n```\n\n----------------------------------------\n\nTITLE: Applying Standard Settings to a Target in CMake\nDESCRIPTION: This CMake function applies standard compilation settings to a given target.  It sets C++ standard to 14, adds compiler warnings and errors, and optimizes for non-Debug configurations.  The function is designed for general use, but modifications should be approached with caution due to its impact on plugins.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-trello/linux/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_14)\n  target_compile_options(${TARGET} PRIVATE -Wall -Werror)\n  target_compile_options(${TARGET} PRIVATE \"$<$<NOT:$<CONFIG:Debug>>:-O3>\")\n  target_compile_definitions(${TARGET} PRIVATE \"$<$<NOT:$<CONFIG:Debug>>:NDEBUG>\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Minimum Required Version\nDESCRIPTION: Specifies the minimum required CMake version for the project. This ensures compatibility with the features and syntax used in the CMakeLists.txt file. It's a common practice to ensure that users have a compatible CMake version installed.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/packages/powersync_flutter_libs/linux/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\n```\n\n----------------------------------------\n\nTITLE: Setting Flutter Library and other variables\nDESCRIPTION: Sets the `FLUTTER_LIBRARY` variable to the path of the Flutter library. Also sets other variables such as `FLUTTER_ICU_DATA_FILE`, `PROJECT_BUILD_DIR`, and `AOT_LIBRARY`. These are set in the parent scope for use in other CMake files.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-todolist-drift/linux/flutter/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_LIBRARY \"${EPHEMERAL_DIR}/libflutter_linux_gtk.so\")\n\n# Published to parent scope for install step.\nset(FLUTTER_LIBRARY ${FLUTTER_LIBRARY} PARENT_SCOPE)\nset(FLUTTER_ICU_DATA_FILE \"${EPHEMERAL_DIR}/icudtl.dat\" PARENT_SCOPE)\nset(PROJECT_BUILD_DIR \"${PROJECT_DIR}/build/\" PARENT_SCOPE)\nset(AOT_LIBRARY \"${PROJECT_DIR}/build/lib/libapp.so\" PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Include Generated Plugin Build Rules\nDESCRIPTION: This snippet includes the generated plugin build rules, which manage building the plugins and adding them to the application. It uses the `flutter/generated_plugins.cmake` file.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-todolist-drift/windows/CMakeLists.txt#_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(flutter/generated_plugins.cmake)\n```\n\n----------------------------------------\n\nTITLE: Including Flutter Build Rules\nDESCRIPTION: This snippet includes Flutter's managed directory and adds subdirectories for the runner and generated plugins, effectively incorporating the Flutter build process into the CMake project.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/firebase-nodejs-todolist/windows/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\n# Flutter library and tool build rules.\nset(FLUTTER_MANAGED_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/flutter\")\nadd_subdirectory(${FLUTTER_MANAGED_DIR})\n\n# Application build; see runner/CMakeLists.txt.\nadd_subdirectory(\"runner\")\n\n# Generated plugin build rules, which manage building the plugins and adding\n# them to the application.\ninclude(flutter/generated_plugins.cmake)\n```\n\n----------------------------------------\n\nTITLE: Prepending Ephemeral Directory to Headers\nDESCRIPTION: Prepends the path to the ephemeral directory to each of the header files in the `FLUTTER_LIBRARY_HEADERS` list. This ensures that the compiler can locate the headers during the build process. Uses the custom `list_prepend` function to add the directory.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-anonymous-auth/linux/flutter/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nlist_prepend(FLUTTER_LIBRARY_HEADERS \"${EPHEMERAL_DIR}/flutter_linux/\")\n```\n\n----------------------------------------\n\nTITLE: Adding Flutter Assembly Dependency\nDESCRIPTION: Adds a dependency on the `flutter_assemble` target. This ensures that the Flutter-specific build tasks (e.g., assembling the Flutter assets) are executed before building the Windows executable.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-trello/windows/runner/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nadd_dependencies(${BINARY_NAME} flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Setting Flutter Library Variables\nDESCRIPTION: Defines variables for the Flutter library path (`FLUTTER_LIBRARY`), ICU data file path (`FLUTTER_ICU_DATA_FILE`), project build directory (`PROJECT_BUILD_DIR`), and AOT library path (`AOT_LIBRARY`). The `PARENT_SCOPE` option makes these variables available in the parent scope for use in other CMake files or commands.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-trello/linux/flutter/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_LIBRARY \"${EPHEMERAL_DIR}/libflutter_linux_gtk.so\")\n\n# Published to parent scope for install step.\nset(FLUTTER_LIBRARY ${FLUTTER_LIBRARY} PARENT_SCOPE)\nset(FLUTTER_ICU_DATA_FILE \"${EPHEMERAL_DIR}/icudtl.dat\" PARENT_SCOPE)\nset(PROJECT_BUILD_DIR \"${PROJECT_DIR}/build/\" PARENT_SCOPE)\nset(AOT_LIBRARY \"${PROJECT_DIR}/build/lib/libapp.so\" PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Command for Flutter Assembly\nDESCRIPTION: Adds a custom command to run the Flutter tool backend to generate the Flutter library, headers, and wrapper sources. It utilizes a phony output to force the command to run every time.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-trello/windows/flutter/CMakeLists.txt#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\nset(PHONY_OUTPUT \"${CMAKE_CURRENT_BINARY_DIR}/_phony_\")\nset_source_files_properties(\"${PHONY_OUTPUT}\" PROPERTIES SYMBOLIC TRUE)\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CPP_WRAPPER_SOURCES_CORE} ${CPP_WRAPPER_SOURCES_PLUGIN}\n    ${CPP_WRAPPER_SOURCES_APP}\n    ${PHONY_OUTPUT}\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.bat\"\n      windows-x64 $<CONFIG>\n  VERBATIM\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Installation Directories\nDESCRIPTION: Configures installation directories for the build output, ensuring that support files are placed next to the executable for ease of execution. This snippet also handles making the install step the default build action.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/django-todolist/windows/CMakeLists.txt#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\nset(BUILD_BUNDLE_DIR \"$<TARGET_FILE_DIR:${BINARY_NAME}>\")\n# Make the \"install\" step default, as it's required to run.\nset(CMAKE_VS_INCLUDE_INSTALL_TO_DEFAULT_BUILD 1)\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \"${BUILD_BUNDLE_DIR}\" CACHE PATH \"...\" FORCE)\nendif()\n\nset(INSTALL_BUNDLE_DATA_DIR \"${CMAKE_INSTALL_PREFIX}/data\")\nset(INSTALL_BUNDLE_LIB_DIR \"${CMAKE_INSTALL_PREFIX}\")\n```\n\n----------------------------------------\n\nTITLE: Installing Runtime Components\nDESCRIPTION: This snippet defines installation rules for runtime components, including the executable, ICU data file, Flutter library, and plugin bundled libraries. These are crucial for deploying the application.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-simple-chat/windows/CMakeLists.txt#_snippet_9\n\nLANGUAGE: CMake\nCODE:\n```\nset(INSTALL_BUNDLE_DATA_DIR \"${CMAKE_INSTALL_PREFIX}/data\")\nset(INSTALL_BUNDLE_LIB_DIR \"${CMAKE_INSTALL_PREFIX}\")\n\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_ICU_DATA_FILE}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n  COMPONENT Runtime)\n\nif(PLUGIN_BUNDLED_LIBRARIES)\n  install(FILES \"${PLUGIN_BUNDLED_LIBRARIES}\"\n    DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Prepending Wrapper Root to Core Sources\nDESCRIPTION: This snippet transforms the `CPP_WRAPPER_SOURCES_CORE` list by prepending the wrapper root directory to each source file path.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-todolist/windows/flutter/CMakeLists.txt#_snippet_12\n\nLANGUAGE: cmake\nCODE:\n```\nlist(TRANSFORM CPP_WRAPPER_SOURCES_CORE PREPEND \"${WRAPPER_ROOT}/\")\n```\n\n----------------------------------------\n\nTITLE: Setting up rpath for bundled libraries\nDESCRIPTION: This sets the rpath to load bundled libraries from the lib/ directory relative to the binary. This ensures that the application can find its dependencies at runtime.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-simple-chat/linux/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(CMAKE_INSTALL_RPATH \"$ORIGIN/lib\")\n```\n\n----------------------------------------\n\nTITLE: Including Generated Plugins CMake\nDESCRIPTION: This snippet includes the generated plugins CMake file, which manages the building of plugins and adding them to the application.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-edge-function-auth/windows/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(flutter/generated_plugins.cmake)\n```\n\n----------------------------------------\n\nTITLE: Setting Target Properties in CMake\nDESCRIPTION: This snippet sets the RUNTIME_OUTPUT_DIRECTORY property for the application target. This moves the executable to a subdirectory to prevent users from running the unbundled version.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-trello/linux/CMakeLists.txt#_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\nset_target_properties(${BINARY_NAME}\n  PROPERTIES\n  RUNTIME_OUTPUT_DIRECTORY \"${CMAKE_BINARY_DIR}/intermediates_do_not_run\"\n)\n```\n\n----------------------------------------\n\nTITLE: Set Wrapper Root Directory\nDESCRIPTION: Defines the `WRAPPER_ROOT` variable, pointing to the directory containing the C++ client wrapper source files. This wrapper facilitates communication between Flutter and native Windows code.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-simple-chat/windows/flutter/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(WRAPPER_ROOT \"${EPHEMERAL_DIR}/cpp_client_wrapper\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Installation\nDESCRIPTION: This section configures the installation process, which creates a relocatable bundle in the build directory. It sets the installation prefix, cleans the build bundle directory, and installs the executable, data files, and libraries.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-simple-chat/linux/CMakeLists.txt#_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\n# === Installation ===\n# By default, \"installing\" just makes a relocatable bundle in the build\n# directory.\nset(BUILD_BUNDLE_DIR \"${PROJECT_BINARY_DIR}/bundle\")\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \"${BUILD_BUNDLE_DIR}\" CACHE PATH \"...\" FORCE)\nendif()\n\n# Start with a clean build bundle directory every time.\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${BUILD_BUNDLE_DIR}/\\\"\")\n  \" COMPONENT Runtime)\n\nset(INSTALL_BUNDLE_DATA_DIR \"${CMAKE_INSTALL_PREFIX}/data\")\nset(INSTALL_BUNDLE_LIB_DIR \"${CMAKE_INSTALL_PREFIX}/lib\")\n\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_ICU_DATA_FILE}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n  COMPONENT Runtime)\n\nforeach(bundled_library ${PLUGIN_BUNDLED_LIBRARIES})\n  install(FILES \"${bundled_library}\"\n    DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendforeach(bundled_library)\n\n# Fully re-copy the assets directory on each build to avoid having stale files\n# from a previous install.\nset(FLUTTER_ASSET_DIR_NAME \"flutter_assets\")\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\\\")\n  \" COMPONENT Runtime)\ninstall(DIRECTORY \"${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}\"\n  DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\" COMPONENT Runtime)\n\n# Install the AOT library on non-Debug builds only.\nif(NOT CMAKE_BUILD_TYPE MATCHES \"Debug\")\n  install(FILES \"${AOT_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Finding System Dependencies Using PkgConfig\nDESCRIPTION: Uses `pkg_check_modules` to find and import system-level dependencies such as GTK, GLIB, and GIO.  The `REQUIRED IMPORTED_TARGET` arguments ensure that the build fails if the dependencies are not found and that imported targets are created for each dependency, making them available for linking.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-edge-function-auth/linux/flutter/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(PkgConfig REQUIRED)\npkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk+-3.0)\npkg_check_modules(GLIB REQUIRED IMPORTED_TARGET glib-2.0)\npkg_check_modules(GIO REQUIRED IMPORTED_TARGET gio-2.0)\n```\n\n----------------------------------------\n\nTITLE: Installing Executable and Dependencies\nDESCRIPTION: This snippet installs the main executable, Flutter's ICU data file, and the Flutter library into the specified installation directories. It also handles the installation of bundled plugin libraries, if any.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/firebase-nodejs-todolist/windows/CMakeLists.txt#_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_ICU_DATA_FILE}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n  COMPONENT Runtime)\n\nif(PLUGIN_BUNDLED_LIBRARIES)\n  install(FILES \"${PLUGIN_BUNDLED_LIBRARIES}\"\n    DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Linking Dependencies in CMake\nDESCRIPTION: This snippet links the application target with the Flutter library and the GTK library obtained from pkg-config. It also adds a dependency on the flutter_assemble target.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-trello/linux/CMakeLists.txt#_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\napply_standard_settings(${BINARY_NAME})\n\n# Add dependency libraries. Add any application-specific dependencies here.\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter)\ntarget_link_libraries(${BINARY_NAME} PRIVATE PkgConfig::GTK)\n\n# Run the Flutter tool portions of the build. This must not be removed.\nadd_dependencies(${BINARY_NAME} flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Installing AOT Library\nDESCRIPTION: This snippet installs the Ahead-of-Time (AOT) compiled library (`${AOT_LIBRARY}`) into the `lib` directory within the installation prefix, but only if the build type is not \"Debug\". This speeds up execution time in non-debug builds.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/firebase-nodejs-todolist/linux/CMakeLists.txt#_snippet_23\n\nLANGUAGE: CMake\nCODE:\n```\n# Install the AOT library on non-Debug builds only.\nif(NOT CMAKE_BUILD_TYPE MATCHES \"Debug\")\n  install(FILES \"${AOT_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Executable Target\nDESCRIPTION: This snippet defines the executable target for the application. It specifies the source files to be compiled and linked into the executable. The BINARY_NAME variable (defined in the top-level CMakeLists.txt) is used to name the executable.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-simple-chat/windows/runner/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(${BINARY_NAME} WIN32\n  \"flutter_window.cpp\"\n  \"main.cpp\"\n  \"utils.cpp\"\n  \"win32_window.cpp\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n  \"Runner.rc\"\n  \"runner.exe.manifest\"\n)\n```\n\n----------------------------------------\n\nTITLE: Apply Standard Compilation Settings\nDESCRIPTION: Defines a function to apply standard compilation settings to a target. These settings include C++ standard version, warning levels, exception handling, and debug configurations. The applied settings include enabling C++17, setting warning levels, disabling exceptions, and adding debug definitions.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/benchmarks/windows/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_17)\n  target_compile_options(${TARGET} PRIVATE /W4 /WX /wd\"4100\")\n  target_compile_options(${TARGET} PRIVATE /EHsc)\n  target_compile_definitions(${TARGET} PRIVATE \"_HAS_EXCEPTIONS=0\")\n  target_compile_definitions(${TARGET} PRIVATE \"$<$<CONFIG:Debug>:_DEBUG>\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Configuring Installation Directory\nDESCRIPTION: This snippet configures the installation directory and sets the `install` step as the default. It defines variables for the bundle data and library directories within the installation prefix.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/firebase-nodejs-todolist/windows/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\n# === Installation ===\n# Support files are copied into place next to the executable, so that it can\n# run in place. This is done instead of making a separate bundle (as on Linux)\n# so that building and running from within Visual Studio will work.\nset(BUILD_BUNDLE_DIR \"$<TARGET_FILE_DIR:${BINARY_NAME}>\")\n# Make the \"install\" step default, as it's required to run.\nset(CMAKE_VS_INCLUDE_INSTALL_TO_DEFAULT_BUILD 1)\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \"${BUILD_BUNDLE_DIR}\" CACHE PATH \"...\" FORCE)\nendif()\n\nset(INSTALL_BUNDLE_DATA_DIR \"${CMAKE_INSTALL_PREFIX}/data\")\nset(INSTALL_BUNDLE_LIB_DIR \"${CMAKE_INSTALL_PREFIX}\")\n```\n\n----------------------------------------\n\nTITLE: Finding Package Dependencies\nDESCRIPTION: Uses `pkg_check_modules` to find system-level dependencies like GTK, GLIB, and GIO. This is required for building the Flutter library and tool backend. The `IMPORTED_TARGET` option creates imported targets that can be used later to link against these libraries.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-trello/linux/flutter/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(PkgConfig REQUIRED)\npkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk+-3.0)\npkg_check_modules(GLIB REQUIRED IMPORTED_TARGET glib-2.0)\npkg_check_modules(GIO REQUIRED IMPORTED_TARGET gio-2.0)\n```\n\n----------------------------------------\n\nTITLE: Setting Installation Prefix\nDESCRIPTION: This snippet sets the installation prefix to a `bundle` directory within the project's binary directory, creating a relocatable bundle in the build directory. It is reset if it has its default value to ensure each install starts clean.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/firebase-nodejs-todolist/linux/CMakeLists.txt#_snippet_15\n\nLANGUAGE: CMake\nCODE:\n```\n# === Installation ===\n# By default, \"installing\" just makes a relocatable bundle in the build\n# directory.\nset(BUILD_BUNDLE_DIR \"${PROJECT_BINARY_DIR}/bundle\")\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \"${BUILD_BUNDLE_DIR}\" CACHE PATH \"...\" FORCE)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Appending to Flutter Library Headers List\nDESCRIPTION: This snippet appends a list of Flutter library header files to the `FLUTTER_LIBRARY_HEADERS` list. These headers are required for compiling against the Flutter library.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-todolist-optional-sync/linux/flutter/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND FLUTTER_LIBRARY_HEADERS\n  \"fl_basic_message_channel.h\"\n  \"fl_binary_codec.h\"\n  \"fl_binary_messenger.h\"\n  \"fl_dart_project.h\"\n  \"fl_engine.h\"\n  \"fl_json_message_codec.h\"\n  \"fl_json_method_codec.h\"\n  \"fl_message_codec.h\"\n  \"fl_method_call.h\"\n  \"fl_method_channel.h\"\n  \"fl_method_codec.h\"\n  \"fl_method_response.h\"\n  \"fl_plugin_registrar.h\"\n  \"fl_plugin_registry.h\"\n  \"fl_standard_message_codec.h\"\n  \"fl_standard_method_codec.h\"\n  \"fl_string_codec.h\"\n  \"fl_value.h\"\n  \"fl_view.h\"\n  \"flutter_linux.h\"\n)\n```\n\n----------------------------------------\n\nTITLE: Setting target properties\nDESCRIPTION: This snippet sets the runtime output directory for the executable to avoid confusion with unbundled copies.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-simple-chat/linux/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nset_target_properties(${BINARY_NAME}\n  PROPERTIES\n  RUNTIME_OUTPUT_DIRECTORY \"${CMAKE_BINARY_DIR}/intermediates_do_not_run\"\n)\n```\n\n----------------------------------------\n\nTITLE: Linking Libraries and Including Directories\nDESCRIPTION: This snippet links necessary libraries, including Flutter's runtime and wrapper libraries, as well as dwmapi.lib for Windows-specific functionality. It also adds the source directory to the include directories, allowing the application to find header files.  The libraries `flutter` and `flutter_wrapper_app` are assumed to be defined elsewhere, likely through CMake modules or variables.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-todolist/windows/runner/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter flutter_wrapper_app)\ntarget_link_libraries(${BINARY_NAME} PRIVATE \"dwmapi.lib\")\ntarget_include_directories(${BINARY_NAME} PRIVATE \"${CMAKE_SOURCE_DIR}\")\n```\n\n----------------------------------------\n\nTITLE: Setting Unicode Definitions CMake\nDESCRIPTION: This snippet adds preprocessor definitions to enable Unicode support for the project, ensuring correct handling of international characters.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-edge-function-auth/windows/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nadd_definitions(-DUNICODE -D_UNICODE)\n```\n\n----------------------------------------\n\nTITLE: Standard Compilation Settings\nDESCRIPTION: Defines a function `APPLY_STANDARD_SETTINGS` to apply common compilation features (C++14), options (warnings, errors, optimization levels based on build type), and definitions (NDEBUG for non-Debug builds) to a given target. This function centralizes and simplifies the application of standard build settings.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-todolist/linux/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_14)\n  target_compile_options(${TARGET} PRIVATE -Wall -Werror)\n  target_compile_options(${TARGET} PRIVATE \"<$<NOT:$<CONFIG:Debug>>:-O3>\")\n  target_compile_definitions(${TARGET} PRIVATE \"<$<NOT:$<CONFIG:Debug>>:NDEBUG>\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Including Generated Configuration\nDESCRIPTION: Includes the 'generated_config.cmake' file from the ephemeral directory. This file likely contains configuration settings provided by the Flutter tool, such as build flags or platform-specific settings. Including this file ensures that the build process is configured according to the Flutter tool's output.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-edge-function-auth/linux/flutter/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(${EPHEMERAL_DIR}/generated_config.cmake)\n```\n\n----------------------------------------\n\nTITLE: Set Install Step as Default\nDESCRIPTION: Makes the 'install' step the default build action. This is required to run the application. Enables the install step by default which copies necessary files for running the app.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/benchmarks/windows/CMakeLists.txt#_snippet_12\n\nLANGUAGE: cmake\nCODE:\n```\nset(CMAKE_VS_INCLUDE_INSTALL_TO_DEFAULT_BUILD 1)\n```\n\n----------------------------------------\n\nTITLE: Set CMake Minimum Required Version\nDESCRIPTION: Specifies the minimum required version of CMake for the project. This ensures that the CMake version used to build the project is compatible with the CMake commands and features used in the file.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-simple-chat/windows/flutter/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\n```\n\n----------------------------------------\n\nTITLE: Using Unicode\nDESCRIPTION: Adds definitions to use Unicode for all projects. This ensures proper handling of international characters.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-anonymous-auth/windows/CMakeLists.txt#_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nadd_definitions(-DUNICODE -D_UNICODE)\n```\n\n----------------------------------------\n\nTITLE: Install Flutter Assets Directory\nDESCRIPTION: Installs the Flutter assets directory into the data directory. This includes the application's assets like images and fonts. It first removes any existing assets to avoid stale files. Installs Flutter assets into the data directory, first removing any existing directory to ensure no stale files remain.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/benchmarks/windows/CMakeLists.txt#_snippet_20\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_ASSET_DIR_NAME \"flutter_assets\")\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\\\")\n  \" COMPONENT Runtime)\ninstall(DIRECTORY \"${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}\"\n  DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\" COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Installing Runtime Components\nDESCRIPTION: These commands install the application's runtime components, including the executable, ICU data file, and Flutter library, to the specified destination directories.  It also installs bundled plugin libraries, if any.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/django-todolist/windows/CMakeLists.txt#_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_ICU_DATA_FILE}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n  COMPONENT Runtime)\n\nif(PLUGIN_BUNDLED_LIBRARIES)\n  install(FILES \"${PLUGIN_BUNDLED_LIBRARIES}\"\n    DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Build Type Configuration\nDESCRIPTION: Sets the build type (Debug, Profile, Release) if not already defined.  It uses a cache variable for persistence and allows the user to select from predefined build types.  The `FORCE` option ensures the `CMAKE_BUILD_TYPE` variable is always set.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-todolist/linux/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nif(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n  set(CMAKE_BUILD_TYPE \"Debug\" CACHE\n    STRING \"Flutter build mode\" FORCE)\n  set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS\n    \"Debug\" \"Profile\" \"Release\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Cleaning and Installing Assets Directory\nDESCRIPTION: This snippet removes the existing assets directory and then installs the Flutter assets directory into the `data` directory within the installation prefix.  It guarantees the assets are up to date.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/firebase-nodejs-todolist/linux/CMakeLists.txt#_snippet_22\n\nLANGUAGE: CMake\nCODE:\n```\n# Fully re-copy the assets directory on each build to avoid having stale files\n# from a previous install.\nset(FLUTTER_ASSET_DIR_NAME \"flutter_assets\")\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\\\")\n  \" COMPONENT Runtime)\ninstall(DIRECTORY \"${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}\"\n  DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\" COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Appending Plugin Wrapper Sources\nDESCRIPTION: This snippet appends plugin-related C++ wrapper source files to the `CPP_WRAPPER_SOURCES_PLUGIN` list. These files are used for registering Flutter plugins in the C++ environment.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-todolist/windows/flutter/CMakeLists.txt#_snippet_13\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND CPP_WRAPPER_SOURCES_PLUGIN\n  \"plugin_registrar.cc\"\n)\n```\n\n----------------------------------------\n\nTITLE: Include Generated Configuration\nDESCRIPTION: Includes the generated configuration file from the ephemeral directory. This file contains settings provided by the Flutter tool, such as build configurations and dependency paths.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-simple-chat/windows/flutter/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(${EPHEMERAL_DIR}/generated_config.cmake)\n```\n\n----------------------------------------\n\nTITLE: Installing Executable Target\nDESCRIPTION: This snippet installs the executable target `${BINARY_NAME}` into the root of the installation prefix. This puts the executable in the top-level directory of the application bundle.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/firebase-nodejs-todolist/linux/CMakeLists.txt#_snippet_18\n\nLANGUAGE: CMake\nCODE:\n```\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Including Generated Configuration\nDESCRIPTION: Includes the generated configuration file from the ephemeral directory. This file likely contains platform-specific settings and configurations provided by the Flutter tool.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-trello/linux/flutter/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(${EPHEMERAL_DIR}/generated_config.cmake)\n```\n\n----------------------------------------\n\nTITLE: Finding Package Dependencies\nDESCRIPTION: Finds and imports system-level dependencies using `pkg_check_modules`. It checks for GTK, GLIB, and GIO, which are required for the Flutter application on Linux.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/benchmarks/linux/flutter/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(PkgConfig REQUIRED)\npkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk+-3.0)\npkg_check_modules(GLIB REQUIRED IMPORTED_TARGET glib-2.0)\npkg_check_modules(GIO REQUIRED IMPORTED_TARGET gio-2.0)\n```\n\n----------------------------------------\n\nTITLE: Applying Standard Compilation Settings\nDESCRIPTION: This function, `APPLY_STANDARD_SETTINGS`, applies standard compilation settings to a target, including C++ standard, warning levels, exception handling, and debug definitions.  It's designed to be reusable across multiple targets in the project.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/django-todolist/windows/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_17)\n  target_compile_options(${TARGET} PRIVATE /W4 /WX /wd\"4100\")\n  target_compile_options(${TARGET} PRIVATE /EHsc)\n  target_compile_definitions(${TARGET} PRIVATE \"_HAS_EXCEPTIONS=0\")\n  target_compile_definitions(${TARGET} PRIVATE \"$<$<CONFIG:Debug>:_DEBUG>\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Finding Package Dependencies\nDESCRIPTION: Finds system-level dependencies using the `PkgConfig` module. It checks for the presence of GTK, GLIB, and GIO libraries. These libraries are essential for GUI and system-level operations in the Flutter Linux application. `pkg_check_modules` is used to import the targets with the `IMPORTED_TARGET` option.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/firebase-nodejs-todolist/linux/flutter/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nfind_package(PkgConfig REQUIRED)\npkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk+-3.0)\npkg_check_modules(GLIB REQUIRED IMPORTED_TARGET glib-2.0)\npkg_check_modules(GIO REQUIRED IMPORTED_TARGET gio-2.0)\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Command for Flutter Assembly\nDESCRIPTION: Adds a custom command to assemble the Flutter library and headers. This command executes the `tool_backend.sh` script from the Flutter tools, passing in the target platform and build type. The output of the command is the Flutter library and headers, as well as a phony file to force re-execution. It also defines a custom target 'flutter_assemble' that depends on the output of the command.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-edge-function-auth/linux/flutter/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CMAKE_CURRENT_BINARY_DIR}/_phony_\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.sh\"\n      ${FLUTTER_TARGET_PLATFORM} ${CMAKE_BUILD_TYPE}\n  VERBATIM\n)\nadd_custom_target(flutter_assemble DEPENDS\n  \"${FLUTTER_LIBRARY}\"\n  ${FLUTTER_LIBRARY_HEADERS}\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Bundled Libraries\nDESCRIPTION: This snippet iterates through the list of bundled libraries (`PLUGIN_BUNDLED_LIBRARIES`) and installs each library into the `lib` directory within the installation prefix. This ensures that all plugin dependencies are included in the application bundle.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/firebase-nodejs-todolist/linux/CMakeLists.txt#_snippet_21\n\nLANGUAGE: CMake\nCODE:\n```\nforeach(bundled_library ${PLUGIN_BUNDLED_LIBRARIES})\n  install(FILES \"${bundled_library}\"\n    DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendforeach(bundled_library)\n```\n\n----------------------------------------\n\nTITLE: Add Unicode Definitions\nDESCRIPTION: Adds definitions to enable Unicode support for the project. This ensures that the application can handle Unicode characters correctly. Adds the UNICODE and _UNICODE definitions to the compiler.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/benchmarks/windows/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nadd_definitions(-DUNICODE -D_UNICODE)\n```\n\n----------------------------------------\n\nTITLE: Finding System-Level Dependencies\nDESCRIPTION: This snippet uses `pkg-config` to find system-level dependencies, specifically GTK. It requires the GTK package and imports it as a target.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/django-todolist/linux/CMakeLists.txt#_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\n# System-level dependencies.\nfind_package(PkgConfig REQUIRED)\npkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk+-3.0)\n```\n\n----------------------------------------\n\nTITLE: Initializing Project Configuration\nDESCRIPTION: This snippet sets up the basic CMake configuration, including the minimum required CMake version, the project name, and the binary name for the application. It also explicitly opts into modern CMake behaviors to avoid warnings.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-todolist/windows/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\nproject(powersync_flutter_demo LANGUAGES CXX)\n\n# The name of the executable created for the application. Change this to change\n# the on-disk name of your application.\nset(BINARY_NAME \"powersync_flutter_demo\")\n\n# Explicitly opt in to modern CMake behaviors to avoid warnings with recent\n# versions of CMake.\ncmake_policy(SET CMP0063 NEW)\n```\n\n----------------------------------------\n\nTITLE: Set Flutter Library Headers\nDESCRIPTION: Defines `FLUTTER_LIBRARY_HEADERS` as a list of header files required for using the Flutter library. The `list(TRANSFORM)` command prepends the `EPHEMERAL_DIR` to each header file path.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-simple-chat/windows/flutter/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND FLUTTER_LIBRARY_HEADERS\n  \"flutter_export.h\"\n  \"flutter_windows.h\"\n  \"flutter_messenger.h\"\n  \"flutter_plugin_registrar.h\"\n  \"flutter_texture_registrar.h\"\n)\nlist(TRANSFORM FLUTTER_LIBRARY_HEADERS PREPEND \"${EPHEMERAL_DIR}/\")\n```\n\n----------------------------------------\n\nTITLE: Finding Package Dependencies\nDESCRIPTION: Finds and imports required system-level dependencies using `pkg-config`. These dependencies are GTK, GLIB, and GIO, which are required for Flutter's Linux support. `IMPORTED_TARGET` ensures that CMake creates target objects for them to be linked against.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-todolist-drift/linux/flutter/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(PkgConfig REQUIRED)\npkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk+-3.0)\npkg_check_modules(GLIB REQUIRED IMPORTED_TARGET glib-2.0)\npkg_check_modules(GIO REQUIRED IMPORTED_TARGET gio-2.0)\n```\n\n----------------------------------------\n\nTITLE: Including Generated Configuration\nDESCRIPTION: Includes a generated CMake configuration file from the ephemeral directory. This file likely contains settings or variables provided by the Flutter tool.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/benchmarks/linux/flutter/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(${EPHEMERAL_DIR}/generated_config.cmake)\n```\n\n----------------------------------------\n\nTITLE: Setting Flutter Library Path\nDESCRIPTION: This snippet defines the `FLUTTER_LIBRARY` variable, which specifies the path to the Flutter Windows DLL. It also publishes this variable to the parent scope for use in subsequent build steps.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-todolist/windows/flutter/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_LIBRARY \"${EPHEMERAL_DIR}/flutter_windows.dll\")\n\n# Published to parent scope for install step.\nset(FLUTTER_LIBRARY ${FLUTTER_LIBRARY} PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Defining Standard Compilation Settings\nDESCRIPTION: This function applies standard compilation settings to a specified target, including C++ standard, compiler options, and preprocessor definitions. It's crucial for consistent builds across different targets. Target name is passed as TARGET argument.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-simple-chat/windows/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_17)\n  target_compile_options(${TARGET} PRIVATE /W4 /WX /wd\"4100\")\n  target_compile_options(${TARGET} PRIVATE /EHsc)\n  target_compile_definitions(${TARGET} PRIVATE \"_HAS_EXCEPTIONS=0\")\n  target_compile_definitions(${TARGET} PRIVATE \"$<$<CONFIG:Debug>:_DEBUG>\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Configuring Installation\nDESCRIPTION: This snippet configures the installation process, setting the build bundle directory, making the install step default, and defining installation directories for data and libraries. It then installs the executable, ICU data file, Flutter library, and plugin bundled libraries.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-todolist/windows/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\n# === Installation ===\n# Support files are copied into place next to the executable, so that it can\n# run in place. This is done instead of making a separate bundle (as on Linux)\n# so that building and running from within Visual Studio will work.\nset(BUILD_BUNDLE_DIR \"$<TARGET_FILE_DIR:${BINARY_NAME}>\")\n# Make the \"install\" step default, as it's required to run.\nset(CMAKE_VS_INCLUDE_INSTALL_TO_DEFAULT_BUILD 1)\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \"${BUILD_BUNDLE_DIR}\" CACHE PATH \"...\" FORCE)\nendif()\n\nset(INSTALL_BUNDLE_DATA_DIR \"${CMAKE_INSTALL_PREFIX}/data\")\nset(INSTALL_BUNDLE_LIB_DIR \"${CMAKE_INSTALL_PREFIX}\")\n\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_ICU_DATA_FILE}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n  COMPONENT Runtime)\n\nif(PLUGIN_BUNDLED_LIBRARIES)\n  install(FILES \"${PLUGIN_BUNDLED_LIBRARIES}\"\n    DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Executable Output Directory\nDESCRIPTION: Sets the runtime output directory for the executable to an intermediate location (`intermediates_do_not_run`) to prevent users from running the unbundled executable directly. This ensures that only the install-generated bundle is executed, as it contains the correct relative paths to resources.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-todolist/linux/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\n# Only the install-generated bundle's copy of the executable will launch\n# correctly, since the resources must in the right relative locations. To avoid\n# people trying to run the unbundled copy, put it in a subdirectory instead of\n# the default top-level location.\nset_target_properties(${BINARY_NAME}\n  PROPERTIES\n  RUNTIME_OUTPUT_DIRECTORY \"${CMAKE_BINARY_DIR}/intermediates_do_not_run\"\n)\n```\n\n----------------------------------------\n\nTITLE: Linking Flutter to App Wrapper\nDESCRIPTION: This snippet links the 'flutter' interface library to the 'flutter_wrapper_app' target. This establishes the dependency between the application wrapper and the Flutter engine.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-todolist/windows/flutter/CMakeLists.txt#_snippet_25\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_link_libraries(flutter_wrapper_app PUBLIC flutter)\n```\n\n----------------------------------------\n\nTITLE: Adding Flutter Assemble Dependency\nDESCRIPTION: This snippet adds a dependency on the 'flutter_assemble' target for the executable target.  This ensures that the Flutter application is assembled before the executable is built, handling Flutter-specific build processes.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/benchmarks/windows/runner/CMakeLists.txt#_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\nadd_dependencies(${BINARY_NAME} flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Applying Standard Build Settings\nDESCRIPTION: This snippet applies a standard set of build settings to the target. It can be removed for applications requiring custom settings. The `apply_standard_settings` function is assumed to be defined elsewhere in the project or imported via a CMake module.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-todolist/windows/runner/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\napply_standard_settings(${BINARY_NAME})\n```\n\n----------------------------------------\n\nTITLE: Installing AOT Library\nDESCRIPTION: This snippet installs the Ahead-of-Time (AOT) compiled library for Profile and Release builds, which is necessary for optimized performance in production environments.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-simple-chat/windows/CMakeLists.txt#_snippet_11\n\nLANGUAGE: CMake\nCODE:\n```\ninstall(FILES \"${AOT_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  CONFIGURATIONS Profile;Release\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Initializing CMake Project\nDESCRIPTION: This snippet initializes the CMake project, sets the minimum required CMake version, and specifies the languages used (CXX). It also defines the binary name and application ID.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/django-todolist/linux/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.10)\nproject(runner LANGUAGES CXX)\n\n# The name of the executable created for the application. Change this to change\n# the on-disk name of your application.\nset(BINARY_NAME \"powersync_supabase_demo\")\n# The unique GTK application identifier for this application. See:\n# https://wiki.gnome.org/HowDoI/ChooseApplicationID\nset(APPLICATION_ID \"co.powersync.demotodolist\")\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Command for Flutter Assemble\nDESCRIPTION: This snippet adds a custom command that executes the Flutter tool backend script (`tool_backend.bat`) to assemble the Flutter engine and generate necessary files. The command depends on several output files and uses the Flutter tool environment.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-todolist/windows/flutter/CMakeLists.txt#_snippet_29\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CPP_WRAPPER_SOURCES_CORE} ${CPP_WRAPPER_SOURCES_PLUGIN}\n    ${CPP_WRAPPER_SOURCES_APP}\n    ${PHONY_OUTPUT}\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.bat\"\n      windows-x64 $<CONFIG>\n  VERBATIM\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Assets Directory in CMake\nDESCRIPTION: This snippet ensures the assets directory is fully re-copied on each build to prevent stale files. It removes the existing directory before copying the new one.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-trello/linux/CMakeLists.txt#_snippet_12\n\nLANGUAGE: CMake\nCODE:\n```\n# Fully re-copy the assets directory on each build to avoid having stale files\n# from a previous install.\nset(FLUTTER_ASSET_DIR_NAME \"flutter_assets\")\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\\\")\n  \" COMPONENT Runtime)\ninstall(DIRECTORY \"${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}\"\n  DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\" COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Defining Project and Languages\nDESCRIPTION: This snippet defines the project name as 'runner' and specifies that the project uses C++ as the programming language. The project name is used for internal CMake operations.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/benchmarks/windows/runner/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nproject(runner LANGUAGES CXX)\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Target for Flutter Assemble\nDESCRIPTION: This snippet adds a custom target named 'flutter_assemble'. This target depends on the output files generated by the custom command and ensures that these files are built before other targets that depend on the Flutter engine.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-todolist/windows/flutter/CMakeLists.txt#_snippet_30\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_target(flutter_assemble DEPENDS\n  \"${FLUTTER_LIBRARY}\"\n  ${FLUTTER_LIBRARY_HEADERS}\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Minimum Version\nDESCRIPTION: Specifies the minimum required CMake version for the build process. This ensures that the CMake version used is compatible with the commands and features used in the script. The minimum version is set to 3.10.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-edge-function-auth/linux/flutter/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.10)\n```\n\n----------------------------------------\n\nTITLE: Configuring Build Types\nDESCRIPTION: This snippet configures the build types (Debug, Profile, Release) for the project. It handles both single-configuration and multi-configuration generators. If no build type is specified, it defaults to Debug.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-simple-chat/windows/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nget_property(IS_MULTICONFIG GLOBAL PROPERTY GENERATOR_IS_MULTI_CONFIG)\nif(IS_MULTICONFIG)\n  set(CMAKE_CONFIGURATION_TYPES \"Debug;Profile;Release\"\n    CACHE STRING \"\" FORCE)\nelse()\n  if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n    set(CMAKE_BUILD_TYPE \"Debug\" CACHE\n      STRING \"Flutter build mode\" FORCE)\n    set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS\n      \"Debug\" \"Profile\" \"Release\")\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Executable Target\nDESCRIPTION: This snippet adds an executable target named `${BINARY_NAME}` using the specified source files.  It creates the executable file for the application from source code.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/firebase-nodejs-todolist/linux/CMakeLists.txt#_snippet_9\n\nLANGUAGE: CMake\nCODE:\n```\n# Define the application target. To change its name, change BINARY_NAME above,\n# not the value here, or `flutter run` will no longer work.\n#\n# Any new source files that you add to the application should be added here.\nadd_executable(${BINARY_NAME}\n  \"main.cc\"\n  \"my_application.cc\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Cross-Building Settings\nDESCRIPTION: This snippet configures settings for cross-building, setting the CMake system root (`CMAKE_SYSROOT`) and find root path (`CMAKE_FIND_ROOT_PATH`) based on the `FLUTTER_TARGET_PLATFORM_SYSROOT` variable.  It also configures the search path modes to ensure libraries and includes are found within the sysroot.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/firebase-nodejs-todolist/linux/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\n# Root filesystem for cross-building.\nif(FLUTTER_TARGET_PLATFORM_SYSROOT)\n  set(CMAKE_SYSROOT ${FLUTTER_TARGET_PLATFORM_SYSROOT})\n  set(CMAKE_FIND_ROOT_PATH ${CMAKE_SYSROOT})\n  set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)\n  set(CMAKE_FIND_ROOT_PATH_MODE_PACKAGE ONLY)\n  set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)\n  set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding executable target\nDESCRIPTION: This snippet adds the executable target for the application. It specifies the source files to be compiled into the executable.  BINARY_NAME is defined in the top-level CMakeLists.txt.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-anonymous-auth/windows/runner/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nadd_executable(${BINARY_NAME} WIN32\n  \"flutter_window.cpp\"\n  \"main.cpp\"\n  \"utils.cpp\"\n  \"win32_window.cpp\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n  \"Runner.rc\"\n  \"runner.exe.manifest\"\n)\n```\n\n----------------------------------------\n\nTITLE: Install AOT Library\nDESCRIPTION: Installs the AOT (Ahead-Of-Time) compiled library into the data directory for Profile and Release configurations. This improves application startup performance. Installs the AOT library (compiled Dart code) in Profile and Release builds.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/benchmarks/windows/CMakeLists.txt#_snippet_21\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(FILES \"${AOT_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  CONFIGURATIONS Profile;Release\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Set Minimum CMake Version\nDESCRIPTION: Specifies the minimum required version of CMake to be used for the project. This ensures compatibility with the features and commands used in the CMakeLists.txt file. It sets the base CMake version to 3.14.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/benchmarks/windows/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\n```\n\n----------------------------------------\n\nTITLE: Appending Flutter Library Headers\nDESCRIPTION: Appends a list of Flutter library header files to the `FLUTTER_LIBRARY_HEADERS` variable. These headers are essential for compiling Flutter-related code.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/benchmarks/linux/flutter/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND FLUTTER_LIBRARY_HEADERS\n  \"fl_basic_message_channel.h\"\n  \"fl_binary_codec.h\"\n  \"fl_binary_messenger.h\"\n  \"fl_dart_project.h\"\n  \"fl_engine.h\"\n  \"fl_json_message_codec.h\"\n  \"fl_json_method_codec.h\"\n  \"fl_message_codec.h\"\n  \"fl_method_call.h\"\n  \"fl_method_channel.h\"\n  \"fl_method_codec.h\"\n  \"fl_method_response.h\"\n  \"fl_plugin_registrar.h\"\n  \"fl_plugin_registry.h\"\n  \"fl_standard_message_codec.h\"\n  \"fl_standard_method_codec.h\"\n  \"fl_string_codec.h\"\n  \"fl_value.h\"\n  \"fl_view.h\"\n  \"flutter_linux.h\"\n)\n```\n\n----------------------------------------\n\nTITLE: Defining standard compile settings\nDESCRIPTION: This function applies standard compile features, options, and definitions to a given target.  It sets the C++ standard to C++14, enables warnings and errors, and optimizes for non-Debug builds.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-simple-chat/linux/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_14)\n  target_compile_options(${TARGET} PRIVATE -Wall -Werror)\n  target_compile_options(${TARGET} PRIVATE \"<$<NOT:$<CONFIG:Debug>>:-O3>\")\n  target_compile_definitions(${TARGET} PRIVATE \"<$<NOT:$<CONFIG:Debug>>:NDEBUG>\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Add Executable\nDESCRIPTION: Adds an executable target named `${BINARY_NAME}` and specifies the source files to be compiled into the executable. The `WIN32` keyword indicates that this is a Windows executable.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-edge-function-auth/windows/runner/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(${BINARY_NAME} WIN32\n  \"flutter_window.cpp\"\n  \"main.cpp\"\n  \"utils.cpp\"\n  \"win32_window.cpp\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n  \"Runner.rc\"\n  \"runner.exe.manifest\"\n)\n```\n\n----------------------------------------\n\nTITLE: Include Generated Configuration\nDESCRIPTION: Includes a CMake configuration file generated by the Flutter tool. This file contains settings specific to the Flutter project and platform.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-todolist/linux/flutter/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(${EPHEMERAL_DIR}/generated_config.cmake)\n```\n\n----------------------------------------\n\nTITLE: Installing Assets Directory\nDESCRIPTION: This section ensures the complete re-copying of the assets directory during each build to prevent stale files from previous installations. It removes the directory recursively before reinstalling.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/django-todolist/windows/CMakeLists.txt#_snippet_12\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_ASSET_DIR_NAME \"flutter_assets\")\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\\\")\n  \" COMPONENT Runtime)\ninstall(DIRECTORY \"${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}\"\n  DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\" COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Applying Standard Settings to Target\nDESCRIPTION: This snippet applies the standard build settings defined by the `apply_standard_settings` function to the executable target `${BINARY_NAME}`. It configures compilation flags, features, and definitions.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/firebase-nodejs-todolist/linux/CMakeLists.txt#_snippet_10\n\nLANGUAGE: CMake\nCODE:\n```\n# Apply the standard set of build settings. This can be removed for applications\n# that need different build settings.\napply_standard_settings(${BINARY_NAME})\n```\n\n----------------------------------------\n\nTITLE: Setting CMake minimum required version\nDESCRIPTION: Specifies the minimum required CMake version for the project. This ensures that the CMake version used to build the project meets the necessary requirements.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-trello/windows/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\n```\n\n----------------------------------------\n\nTITLE: Defining Application Target in CMake\nDESCRIPTION: This snippet defines the application executable target, specifying the source files to be compiled and linked. It uses the BINARY_NAME variable defined earlier and includes the generated plugin registrant.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-trello/linux/CMakeLists.txt#_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nadd_definitions(-DAPPLICATION_ID=\"${APPLICATION_ID}\")\n\n# Define the application target. To change its name, change BINARY_NAME above,\n# not the value here, or `flutter run` will no longer work.\n#\n# Any new source files that you add to the application should be added here.\nadd_executable(${BINARY_NAME}\n  \"main.cc\"\n  \"my_application.cc\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n)\n```\n\n----------------------------------------\n\nTITLE: Include generated configuration file\nDESCRIPTION: Includes the generated configuration file from the ephemeral directory. This file likely contains settings provided by the Flutter tool.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-todolist-drift/linux/flutter/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(${EPHEMERAL_DIR}/generated_config.cmake)\n```\n\n----------------------------------------\n\nTITLE: Flutter Integration\nDESCRIPTION: Includes the Flutter managed directory and adds it as a subdirectory in the CMake project.  This allows CMake to incorporate the Flutter build system into the overall build process. This integration is crucial for building Flutter applications with native components.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-todolist/linux/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\n# Flutter library and tool build rules.\nset(FLUTTER_MANAGED_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/flutter\")\nadd_subdirectory(${FLUTTER_MANAGED_DIR})\n```\n\n----------------------------------------\n\nTITLE: Define C++ Wrapper Sources (Core)\nDESCRIPTION: Defines a list of source files for the core C++ wrapper. These files provide basic functionality for interacting with the Flutter engine.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-edge-function-auth/windows/flutter/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND CPP_WRAPPER_SOURCES_CORE\n  \"core_implementations.cc\"\n  \"standard_codec.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_CORE PREPEND \"${WRAPPER_ROOT}/\")\n```\n\n----------------------------------------\n\nTITLE: Setting binary name\nDESCRIPTION: Sets the name of the executable that will be created. Changing this will affect the on-disk name of the application.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-anonymous-auth/windows/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(BINARY_NAME \"powersync_flutter_demo\")\n```\n\n----------------------------------------\n\nTITLE: Including Generated Configuration\nDESCRIPTION: This snippet includes a CMake configuration file named `generated_config.cmake` located in the ephemeral directory. This file likely contains project-specific settings and configurations generated by the Flutter tool.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-todolist/windows/flutter/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(${EPHEMERAL_DIR}/generated_config.cmake)\n```\n\n----------------------------------------\n\nTITLE: Bundling Powersync Library\nDESCRIPTION: Bundles the prebuilt PowerSync library with the Flutter plugin. The path to the core library is added to a list of libraries to be bundled. `PARENT_SCOPE` makes the variable available in the parent scope.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/packages/powersync_flutter_libs/linux/CMakeLists.txt#_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nset(powersync_flutter_libs_bundled_libraries\n  \"${POWERSYNC_FILE_PATH}\"\n  PARENT_SCOPE\n)\n```\n\n----------------------------------------\n\nTITLE: Install AOT Library\nDESCRIPTION: This snippet installs the Ahead-of-Time (AOT) compiled library on non-Debug builds (Profile and Release). This library is optimized for performance and is essential for production builds.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-todolist-drift/windows/CMakeLists.txt#_snippet_16\n\nLANGUAGE: CMake\nCODE:\n```\ninstall(FILES \"${AOT_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  CONFIGURATIONS Profile;Release\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Linking Target Libraries\nDESCRIPTION: This snippet links the executable target `${BINARY_NAME}` with the `flutter` library and `PkgConfig::GTK` library.  This ensures that the application has access to the Flutter runtime and GTK library functions.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/firebase-nodejs-todolist/linux/CMakeLists.txt#_snippet_11\n\nLANGUAGE: CMake\nCODE:\n```\n# Add dependency libraries. Add any application-specific dependencies here.\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter)\ntarget_link_libraries(${BINARY_NAME} PRIVATE PkgConfig::GTK)\n```\n\n----------------------------------------\n\nTITLE: Linking Dependencies\nDESCRIPTION: This snippet links the application target with the necessary dependency libraries, including Flutter and GTK.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/django-todolist/linux/CMakeLists.txt#_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\n# Add dependency libraries. Add any application-specific dependencies here.\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter)\ntarget_link_libraries(${BINARY_NAME} PRIVATE PkgConfig::GTK)\n```\n\n----------------------------------------\n\nTITLE: Define Build Configuration Option\nDESCRIPTION: Determines and sets build configuration types (Debug, Profile, Release). If the generator supports multi-configuration builds, it explicitly sets the configuration types. Otherwise, it sets the build type to 'Debug' if not already specified. This allows different build configurations to be used.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/benchmarks/windows/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nget_property(IS_MULTICONFIG GLOBAL PROPERTY GENERATOR_IS_MULTI_CONFIG)\nif(IS_MULTICONFIG)\n  set(CMAKE_CONFIGURATION_TYPES \"Debug;Profile;Release\"\n    CACHE STRING \"\" FORCE)\nelse()\n  if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n    set(CMAKE_BUILD_TYPE \"Debug\" CACHE\n      STRING \"Flutter build mode\" FORCE)\n    set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS\n      \"Debug\" \"Profile\" \"Release\")\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Command for Flutter Assembly\nDESCRIPTION: Defines a custom command that executes the Flutter tool backend script. This script assembles the Flutter library and wrapper code.  The command is configured with environment variables and platform-specific arguments. It uses a phony output to force execution every time.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-todolist-drift/windows/flutter/CMakeLists.txt#_snippet_14\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CPP_WRAPPER_SOURCES_CORE} ${CPP_WRAPPER_SOURCES_PLUGIN}\n    ${CPP_WRAPPER_SOURCES_APP}\n    ${PHONY_OUTPUT}\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.bat\"\n      ${FLUTTER_TARGET_PLATFORM} $<CONFIG>\n  VERBATIM\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Flutter Library and Data File Variables\nDESCRIPTION: Sets variables for the Flutter library, ICU data file, project build directory, and AOT library. The `PARENT_SCOPE` argument makes these variables available in the parent scope, likely for use in install steps or other build targets.  These variables define the locations of key build artifacts.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-edge-function-auth/linux/flutter/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_LIBRARY \"${EPHEMERAL_DIR}/libflutter_linux_gtk.so\")\n\n# Published to parent scope for install step.\nset(FLUTTER_LIBRARY ${FLUTTER_LIBRARY} PARENT_SCOPE)\nset(FLUTTER_ICU_DATA_FILE \"${EPHEMERAL_DIR}/icudtl.dat\" PARENT_SCOPE)\nset(PROJECT_BUILD_DIR \"${PROJECT_DIR}/build/\" PARENT_SCOPE)\nset(AOT_LIBRARY \"${PROJECT_DIR}/build/lib/libapp.so\" PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Including Flutter Build Rules\nDESCRIPTION: This snippet includes the Flutter library and tool build rules by adding the `flutter` subdirectory and including the generated plugins CMake file.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-todolist/windows/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\n# Flutter library and tool build rules.\nset(FLUTTER_MANAGED_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/flutter\")\nadd_subdirectory(${FLUTTER_MANAGED_DIR})\n\n# Application build; see runner/CMakeLists.txt.\nadd_subdirectory(\"runner\")\n\n# Generated plugin build rules, which manage building the plugins and adding\n# them to the application.\ninclude(flutter/generated_plugins.cmake)\n```\n\n----------------------------------------\n\nTITLE: Defining Standard Compilation Settings\nDESCRIPTION: This CMake function `APPLY_STANDARD_SETTINGS` applies standard compilation settings to a target, including setting the C++ standard to C++14, enabling compiler warnings as errors, and setting optimization levels based on the build configuration. It enhances code quality and performance.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/firebase-nodejs-todolist/linux/CMakeLists.txt#_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\n# Compilation settings that should be applied to most targets.\n#\n# Be cautious about adding new options here, as plugins use this function by\n# default. In most cases, you should add new options to specific targets instead\n# of modifying this function.\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_14)\n  target_compile_options(${TARGET} PRIVATE -Wall -Werror)\n  target_compile_options(${TARGET} PRIVATE \"<$<NOT:$<CONFIG:Debug>>:-O3>\")\n  target_compile_definitions(${TARGET} PRIVATE \"<$<NOT:$<CONFIG:Debug>>:NDEBUG>\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Adding Dependencies\nDESCRIPTION: This snippet adds a dependency on the `flutter_assemble` target, ensuring that the Flutter assets are built before the main executable. It coordinates the overall build process.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/django-todolist/windows/runner/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nadd_dependencies(${BINARY_NAME} flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Applying Standard Build Settings in CMake\nDESCRIPTION: This applies a set of standard build settings to the executable target. This step configures the build process with common settings, but can be removed for applications requiring custom configurations.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/firebase-nodejs-todolist/windows/runner/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\napply_standard_settings(${BINARY_NAME})\n```\n\n----------------------------------------\n\nTITLE: Generating Drift Code\nDESCRIPTION: These dart commands are used for generating the necessary code for the drift ORM, based on the schema defined in `database.dart`. The `build` command generates the code once, `--delete-conflicting-outputs` clears previous builds, and `watch` command enables incremental builds.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-todolist-drift/README.md#_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\n- `dart run build_runner build` generates all the required code once.\n- `dart run build_runner build --delete-conflicting-outputs` deletes previously generated files and generates the required code once.\n- `dart run build_runner watch` watches for changes in your sources and generates code with incremental rebuilds. This is better for development.\n```\n\n----------------------------------------\n\nTITLE: Enabling Unicode Support\nDESCRIPTION: This snippet adds definitions to enable Unicode support for all projects. It uses `-DUNICODE -D_UNICODE` preprocessor directives.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/django-todolist/windows/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nadd_definitions(-DUNICODE -D_UNICODE)\n```\n\n----------------------------------------\n\nTITLE: Setting Flutter Library Variable\nDESCRIPTION: Sets the `FLUTTER_LIBRARY` variable to the path of the Flutter Linux GTK shared library. Also sets `FLUTTER_ICU_DATA_FILE`, `PROJECT_BUILD_DIR`, and `AOT_LIBRARY` variables. These variables are published to the parent scope for use in other parts of the build process, specifically the install step.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/firebase-nodejs-todolist/linux/flutter/CMakeLists.txt#_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nset(FLUTTER_LIBRARY \"${EPHEMERAL_DIR}/libflutter_linux_gtk.so\")\n\n# Published to parent scope for install step.\nset(FLUTTER_LIBRARY ${FLUTTER_LIBRARY} PARENT_SCOPE)\nset(FLUTTER_ICU_DATA_FILE \"${EPHEMERAL_DIR}/icudtl.dat\" PARENT_SCOPE)\nset(PROJECT_BUILD_DIR \"${PROJECT_DIR}/build/\" PARENT_SCOPE)\nset(AOT_LIBRARY \"${PROJECT_DIR}/build/lib/libapp.so\" PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories for Plugin Wrapper\nDESCRIPTION: This snippet adds the wrapper include directory to the include directories for the 'flutter_wrapper_plugin' target. This allows the plugin wrapper code to find the necessary header files.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-todolist/windows/flutter/CMakeLists.txt#_snippet_21\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_include_directories(flutter_wrapper_plugin PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\n```\n\n----------------------------------------\n\nTITLE: Create Flutter Wrapper Plugin Library\nDESCRIPTION: Creates a static library named `flutter_wrapper_plugin` from the core and plugin-specific C++ wrapper sources. It applies standard settings, sets position-independent code, hides C++ visibility, links against the `flutter` interface library, includes necessary directories, and depends on the `flutter_assemble` target.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-simple-chat/windows/flutter/CMakeLists.txt#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(flutter_wrapper_plugin STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n)\napply_standard_settings(flutter_wrapper_plugin)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  POSITION_INDEPENDENT_CODE ON)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  CXX_VISIBILITY_PRESET hidden)\ntarget_link_libraries(flutter_wrapper_plugin PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_plugin PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_plugin flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Find System Dependencies\nDESCRIPTION: Uses `pkg-config` to locate and import required system-level dependencies such as GTK, GLib, and GIO.  These are required for the Flutter application to run on Linux.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-todolist/linux/flutter/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(PkgConfig REQUIRED)\npkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk+-3.0)\npkg_check_modules(GLIB REQUIRED IMPORTED_TARGET glib-2.0)\npkg_check_modules(GIO REQUIRED IMPORTED_TARGET gio-2.0)\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Command for Flutter Assembly\nDESCRIPTION: This snippet defines a custom command that executes a shell script (`tool_backend.sh`) from the Flutter tools to assemble the Flutter application. The command uses the `FLUTTER_TOOL_ENVIRONMENT` and provides arguments such as the `FLUTTER_TARGET_PLATFORM` and `CMAKE_BUILD_TYPE`. A phony file is used as an output, which forces the command to run every time since a full input/output list cannot be reliably retrieved from the Flutter tool.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/django-todolist/linux/flutter/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CMAKE_CURRENT_BINARY_DIR}/_phony_\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.sh\"\n      ${FLUTTER_TARGET_PLATFORM} ${CMAKE_BUILD_TYPE}\n  VERBATIM\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Flutter Library Headers\nDESCRIPTION: Creates a list of Flutter library header files (`FLUTTER_LIBRARY_HEADERS`) and prepends the `EPHEMERAL_DIR` path to each header.  This list is then used to specify include directories for the Flutter library.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-todolist-drift/windows/flutter/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND FLUTTER_LIBRARY_HEADERS\n  \"flutter_export.h\"\n  \"flutter_windows.h\"\n  \"flutter_messenger.h\"\n  \"flutter_plugin_registrar.h\"\n  \"flutter_texture_registrar.h\"\n)\nlist(TRANSFORM FLUTTER_LIBRARY_HEADERS PREPEND \"${EPHEMERAL_DIR}/\")\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake for cross-building\nDESCRIPTION: This snippet configures CMake for cross-building by setting the sysroot and find paths.  This is important when building for a different target platform than the host system.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-simple-chat/linux/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nif(FLUTTER_TARGET_PLATFORM_SYSROOT)\n  set(CMAKE_SYSROOT ${FLUTTER_TARGET_PLATFORM_SYSROOT})\n  set(CMAKE_FIND_ROOT_PATH ${CMAKE_SYSROOT})\n  set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)\n  set(CMAKE_FIND_ROOT_PATH_MODE_PACKAGE ONLY)\n  set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)\n  set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Create Postgres Tables\nDESCRIPTION: This SQL snippet creates two tables in Postgres: `bulk_data` for initial sync testing and `benchmark_items` for incremental sync latency testing. `bulk_data` stores bulk data with varying sizes, while `benchmark_items` stores benchmark items with timestamps to measure latency.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/benchmarks/README.md#_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE bulk_data (id uuid primary key default gen_random_uuid(), created_at timestamptz not null default now(), name text, size_bucket text);\nCREATE TABLE benchmark_items(id uuid primary key, description text, client_created_at timestamptz not null, client_received_at timestamptz, server_created_at timestamptz not null default now());\n\nINSERT INTO bulk_data (name, size_bucket) SELECT repeat('a', 20), '10k' FROM generate_series(1, 10000);\nINSERT INTO bulk_data (name, size_bucket) SELECT repeat('a', 20), '100k' FROM generate_series(1, 100000);\nINSERT INTO bulk_data (name, size_bucket) SELECT repeat('a', 20), '1m' FROM generate_series(1, 1000000);\nINSERT INTO bulk_data (name, size_bucket) SELECT repeat('a', 20), '10m' FROM generate_series(1, 10000000);\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Minimum Version\nDESCRIPTION: Specifies the minimum required CMake version for the build process. This ensures compatibility with the CMake features used in the configuration.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/benchmarks/windows/flutter/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\n```\n\n----------------------------------------\n\nTITLE: Defining Build Configuration Options\nDESCRIPTION: This snippet defines build configuration options based on whether the generator is multi-config or single-config.  If multi-config, it sets the configuration types to Debug, Profile, and Release. Otherwise, it sets the build type to Debug if not already defined, and defines allowed build types. It also configures settings for the Profile build mode to mirror the Release mode.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-todolist/windows/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\n# Define build configuration option.\nget_property(IS_MULTICONFIG GLOBAL PROPERTY GENERATOR_IS_MULTI_CONFIG)\nif(IS_MULTICONFIG)\n  set(CMAKE_CONFIGURATION_TYPES \"Debug;Profile;Release\"\n    CACHE STRING \"\" FORCE)\nelse()\n  if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n    set(CMAKE_BUILD_TYPE \"Debug\" CACHE\n      STRING \"Flutter build mode\" FORCE)\n    set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS\n      \"Debug\" \"Profile\" \"Release\")\n  endif()\nendif()\n# Define settings for the Profile build mode.\nset(CMAKE_EXE_LINKER_FLAGS_PROFILE \"${CMAKE_EXE_LINKER_FLAGS_RELEASE}\")\nset(CMAKE_SHARED_LINKER_FLAGS_PROFILE \"${CMAKE_SHARED_LINKER_FLAGS_RELEASE}\")\nset(CMAKE_C_FLAGS_PROFILE \"${CMAKE_C_FLAGS_RELEASE}\")\nset(CMAKE_CXX_FLAGS_PROFILE \"${CMAKE_CXX_FLAGS_RELEASE}\")\n```\n\n----------------------------------------\n\nTITLE: Target Compile Definitions (NOMINMAX)\nDESCRIPTION: Disables the `NOMINMAX` macro to prevent conflicts between Windows macros and C++ standard library functions such as `min` and `max`.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-edge-function-auth/windows/runner/CMakeLists.txt#_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"NOMINMAX\")\n```\n\n----------------------------------------\n\nTITLE: Setting build type\nDESCRIPTION: This snippet sets the build type (Debug, Profile, or Release) if not already set. It also defines the available build types for the user to choose from.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-simple-chat/linux/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nif(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n  set(CMAKE_BUILD_TYPE \"Debug\" CACHE\n    STRING \"Flutter build mode\" FORCE)\n  set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS\n    \"Debug\" \"Profile\" \"Release\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining build configuration options\nDESCRIPTION: Sets up build configuration options (Debug, Profile, Release). It detects if the generator is multi-config and sets the CMAKE_CONFIGURATION_TYPES accordingly. If not multi-config, it sets CMAKE_BUILD_TYPE to Debug by default.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-trello/windows/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nget_property(IS_MULTICONFIG GLOBAL PROPERTY GENERATOR_IS_MULTI_CONFIG)\nif(IS_MULTICONFIG)\n  set(CMAKE_CONFIGURATION_TYPES \"Debug;Profile;Release\"\n    CACHE STRING \"\" FORCE)\nelse()\n  if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n    set(CMAKE_BUILD_TYPE \"Debug\" CACHE\n      STRING \"Flutter build mode\" FORCE)\n    set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS\n      \"Debug\" \"Profile\" \"Release\")\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Define Settings for Profile Build Mode\nDESCRIPTION: Configures the linker and compiler flags specifically for the 'Profile' build mode, mirroring the flags used in the 'Release' build mode. This ensures consistent optimization and linking settings. Sets linker and compiler flags for the profile mode to match release.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/benchmarks/windows/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nset(CMAKE_EXE_LINKER_FLAGS_PROFILE \"${CMAKE_EXE_LINKER_FLAGS_RELEASE}\")\nset(CMAKE_SHARED_LINKER_FLAGS_PROFILE \"${CMAKE_SHARED_LINKER_FLAGS_RELEASE}\")\nset(CMAKE_C_FLAGS_PROFILE \"${CMAKE_C_FLAGS_RELEASE}\")\nset(CMAKE_CXX_FLAGS_PROFILE \"${CMAKE_CXX_FLAGS_RELEASE}\")\n```\n\n----------------------------------------\n\nTITLE: Installing AOT library\nDESCRIPTION: Installs the AOT library on non-Debug builds (Profile and Release).\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-anonymous-auth/windows/CMakeLists.txt#_snippet_14\n\nLANGUAGE: CMake\nCODE:\n```\ninstall(FILES \"${AOT_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  CONFIGURATIONS Profile;Release\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Prepending Header Path to Header List\nDESCRIPTION: Prepends the path to the Flutter Linux headers to the `FLUTTER_LIBRARY_HEADERS` list using the custom `list_prepend` function.  This ensures that the compiler can find the header files.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-trello/linux/flutter/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nlist_prepend(FLUTTER_LIBRARY_HEADERS \"${EPHEMERAL_DIR}/flutter_linux/\")\n```\n\n----------------------------------------\n\nTITLE: Include Runner Build Rules\nDESCRIPTION: This snippet includes the application build rules from the 'runner' subdirectory, specifying where the main application code is built.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-todolist-drift/windows/CMakeLists.txt#_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(\"runner\")\n```\n\n----------------------------------------\n\nTITLE: Including generated plugins CMake\nDESCRIPTION: Includes the generated_plugins.cmake file, which manages building plugins and adding them to the application.  This ensures that the plugins are properly integrated into the build process.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-trello/windows/CMakeLists.txt#_snippet_10\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(flutter/generated_plugins.cmake)\n```\n\n----------------------------------------\n\nTITLE: Project Initialization & Settings\nDESCRIPTION: Initializes the CMake project, sets the minimum required CMake version, defines the binary name and application ID, and enables modern CMake behaviors. It also configures the runtime path for bundled libraries and sets up the root filesystem for cross-building, if necessary.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-todolist/linux/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.10)\nproject(runner LANGUAGES CXX)\n\n# The name of the executable created for the application. Change this to change\n# the on-disk name of your application.\nset(BINARY_NAME \"powersync_supabase_demo\")\n# The unique GTK application identifier for this application. See:\n# https://wiki.gnome.org/HowDoI/ChooseApplicationID\nset(APPLICATION_ID \"co.powersync.demotodolist\")\n\n# Explicitly opt in to modern CMake behaviors to avoid warnings with recent\n# versions of CMake.\ncmake_policy(SET CMP0063 NEW)\n\n# Load bundled libraries from the lib/ directory relative to the binary.\nset(CMAKE_INSTALL_RPATH \"$ORIGIN/lib\")\n\n# Root filesystem for cross-building.\nif(FLUTTER_TARGET_PLATFORM_SYSROOT)\n  set(CMAKE_SYSROOT ${FLUTTER_TARGET_PLATFORM_SYSROOT})\n  set(CMAKE_FIND_ROOT_PATH ${CMAKE_SYSROOT})\n  set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)\n  set(CMAKE_FIND_ROOT_PATH_MODE_PACKAGE ONLY)\n  set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)\n  set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Target Include Directories\nDESCRIPTION: Adds directories to the include search path for the executable target. This allows the compiler to find header files required by the source code.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-edge-function-auth/windows/runner/CMakeLists.txt#_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_include_directories(${BINARY_NAME} PRIVATE \"${CMAKE_SOURCE_DIR}\")\n```\n\n----------------------------------------\n\nTITLE: Including Generated Configuration\nDESCRIPTION: Includes the 'generated_config.cmake' file from the ephemeral directory. This file likely contains configurations provided by the Flutter tool during the build process.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/django-todolist/windows/flutter/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(${EPHEMERAL_DIR}/generated_config.cmake)\n```\n\n----------------------------------------\n\nTITLE: Setting Target Properties and Definitions in CMake\nDESCRIPTION: This snippet applies standard settings, sets C++ visibility to hidden, defines a compiler definition, includes interface directories, and links against flutter and flutter_wrapper_plugin. This configures the plugin's compilation and linking behavior.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/packages/powersync_flutter_libs/windows/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\napply_standard_settings(${PLUGIN_NAME})\nset_target_properties(${PLUGIN_NAME} PROPERTIES\n  CXX_VISIBILITY_PRESET hidden)\ntarget_compile_definitions(${PLUGIN_NAME} PRIVATE FLUTTER_PLUGIN_IMPL)\ntarget_include_directories(${PLUGIN_NAME} INTERFACE \"${CMAKE_CURRENT_SOURCE_DIR}/include\")\ntarget_link_libraries(${PLUGIN_NAME} PRIVATE flutter flutter_wrapper_plugin)\n```\n\n----------------------------------------\n\nTITLE: Creating Flutter Wrapper App Library\nDESCRIPTION: Defines a static library named `flutter_wrapper_app`. This library includes core and app-related C++ wrapper sources, applies standard settings, and links to the `flutter` interface library. It also depends on the `flutter_assemble` target.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-todolist-drift/windows/flutter/CMakeLists.txt#_snippet_12\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(flutter_wrapper_app STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\napply_standard_settings(flutter_wrapper_app)\ntarget_link_libraries(flutter_wrapper_app PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_app PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_app flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Disabling Windows Macros\nDESCRIPTION: This snippet disables Windows macros that can collide with C++ standard library functions. This prevents naming conflicts and ensures that the C++ code compiles correctly on Windows platforms.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-simple-chat/windows/runner/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"NOMINMAX\")\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Command (Flutter Assemble)\nDESCRIPTION: Defines a custom command that executes the Flutter tool backend to generate the Flutter library and related files.  It also defines a custom target named `flutter_assemble` that depends on the generated files. This ensures that the Flutter assets are built before any targets that depend on them.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-todolist-optional-sync/windows/flutter/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\n# === Flutter tool backend ===\n# _phony_ is a non-existent file to force this command to run every time,\n# since currently there's no way to get a full input/output list from the\n# flutter tool.\nset(PHONY_OUTPUT \"${CMAKE_CURRENT_BINARY_DIR}/_phony_\")\nset_source_files_properties(\"${PHONY_OUTPUT}\" PROPERTIES SYMBOLIC TRUE)\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CPP_WRAPPER_SOURCES_CORE} ${CPP_WRAPPER_SOURCES_PLUGIN}\n    ${CPP_WRAPPER_SOURCES_APP}\n    ${PHONY_OUTPUT}\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.bat\"\n      windows-x64 $<CONFIG>\n  VERBATIM\n)\nadd_custom_target(flutter_assemble DEPENDS\n  \"${FLUTTER_LIBRARY}\"\n  ${FLUTTER_LIBRARY_HEADERS}\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\n```\n\n----------------------------------------\n\nTITLE: Setting up Root Filesystem for Cross-Building in CMake\nDESCRIPTION: This snippet sets up the root filesystem for cross-building by defining CMAKE_SYSROOT and CMAKE_FIND_ROOT_PATH variables. It also configures the search paths for programs, packages, libraries, and includes.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-trello/linux/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nif(FLUTTER_TARGET_PLATFORM_SYSROOT)\n  set(CMAKE_SYSROOT ${FLUTTER_TARGET_PLATFORM_SYSROOT})\n  set(CMAKE_FIND_ROOT_PATH ${CMAKE_SYSROOT})\n  set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)\n  set(CMAKE_FIND_ROOT_PATH_MODE_PACKAGE ONLY)\n  set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)\n  set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Flutter Library Variables\nDESCRIPTION: Sets the `FLUTTER_LIBRARY` variable to the path of the Flutter library.  It also sets `FLUTTER_ICU_DATA_FILE`, `PROJECT_BUILD_DIR`, and `AOT_LIBRARY`, publishing them to the parent scope for use in the install step.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/benchmarks/linux/flutter/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_LIBRARY \"${EPHEMERAL_DIR}/libflutter_linux_gtk.so\")\n\n# Published to parent scope for install step.\nset(FLUTTER_LIBRARY ${FLUTTER_LIBRARY} PARENT_SCOPE)\nset(FLUTTER_ICU_DATA_FILE \"${EPHEMERAL_DIR}/icudtl.dat\" PARENT_SCOPE)\nset(PROJECT_BUILD_DIR \"${PROJECT_DIR}/build/\" PARENT_SCOPE)\nset(AOT_LIBRARY \"${PROJECT_DIR}/build/lib/libapp.so\" PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Appending C++ Wrapper Sources\nDESCRIPTION: Appends lists of C++ source files to CPP_WRAPPER_SOURCES_CORE, CPP_WRAPPER_SOURCES_PLUGIN, and CPP_WRAPPER_SOURCES_APP. It then prepends the WRAPPER_ROOT directory to each source file path.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-trello/windows/flutter/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND CPP_WRAPPER_SOURCES_CORE\n  \"core_implementations.cc\"\n  \"standard_codec.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_CORE PREPEND \"${WRAPPER_ROOT}/\")\nlist(APPEND CPP_WRAPPER_SOURCES_PLUGIN\n  \"plugin_registrar.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_PLUGIN PREPEND \"${WRAPPER_ROOT}/\")\nlist(APPEND CPP_WRAPPER_SOURCES_APP\n  \"flutter_engine.cc\"\n  \"flutter_view_controller.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_APP PREPEND \"${WRAPPER_ROOT}/\")\n```\n\n----------------------------------------\n\nTITLE: Finding System Package Dependencies\nDESCRIPTION: This snippet uses `find_package` and `pkg_check_modules` to locate and configure dependencies on system libraries such as GTK, GLIB, and GIO using PkgConfig.  The `REQUIRED` keyword ensures that the build will fail if these dependencies are not found. The `IMPORTED_TARGET` keyword creates imported targets for linking.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-todolist-optional-sync/linux/flutter/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(PkgConfig REQUIRED)\npkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk+-3.0)\npkg_check_modules(GLIB REQUIRED IMPORTED_TARGET glib-2.0)\npkg_check_modules(GIO REQUIRED IMPORTED_TARGET gio-2.0)\n```\n\n----------------------------------------\n\nTITLE: Setting Wrapper Root Directory\nDESCRIPTION: Sets the root directory for the C++ client wrapper. This directory contains the source code for the wrapper, which is used to interact with the Flutter engine.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/benchmarks/windows/flutter/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(WRAPPER_ROOT \"${EPHEMERAL_DIR}/cpp_client_wrapper\")\n```\n\n----------------------------------------\n\nTITLE: Install Flutter Library\nDESCRIPTION: This snippet installs the Flutter library to the specified destination directory. This is a core Flutter dependency needed for the application to run.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-todolist-drift/windows/CMakeLists.txt#_snippet_12\n\nLANGUAGE: CMake\nCODE:\n```\ninstall(FILES \"${FLUTTER_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Adding executable target\nDESCRIPTION: Adds an executable target named `${BINARY_NAME}`.  It specifies source files to be compiled into the executable. The `WIN32` keyword indicates it's a Windows executable. The BINARY_NAME is defined at the top level CMakeLists.txt.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-todolist-optional-sync/windows/runner/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(${BINARY_NAME} WIN32\n  \"flutter_window.cpp\"\n  \"main.cpp\"\n  \"utils.cpp\"\n  \"win32_window.cpp\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n  \"Runner.rc\"\n  \"runner.exe.manifest\"\n)\n```\n\n----------------------------------------\n\nTITLE: Linking libraries\nDESCRIPTION: Links necessary libraries to the executable target `${BINARY_NAME}`. These include `flutter`, `flutter_wrapper_app` and `dwmapi.lib`.  `dwmapi.lib` is the Desktop Window Manager API library. `PRIVATE` means they are only linked for this target.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-todolist-optional-sync/windows/runner/CMakeLists.txt#_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter flutter_wrapper_app)\ntarget_link_libraries(${BINARY_NAME} PRIVATE \"dwmapi.lib\")\n```\n\n----------------------------------------\n\nTITLE: Defining Profile Build Settings CMake\nDESCRIPTION: This snippet defines specific linker and compiler flags for the Profile build mode. It inherits these flags from the Release build mode.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-edge-function-auth/windows/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(CMAKE_EXE_LINKER_FLAGS_PROFILE \"${CMAKE_EXE_LINKER_FLAGS_RELEASE}\")\nset(CMAKE_SHARED_LINKER_FLAGS_PROFILE \"${CMAKE_SHARED_LINKER_FLAGS_RELEASE}\")\nset(CMAKE_C_FLAGS_PROFILE \"${CMAKE_C_FLAGS_RELEASE}\")\nset(CMAKE_CXX_FLAGS_PROFILE \"${CMAKE_CXX_FLAGS_RELEASE}\")\n```\n\n----------------------------------------\n\nTITLE: Opt-in to Modern CMake Policies\nDESCRIPTION: Configures CMake to use modern behaviors, avoiding warnings with newer CMake versions. It sets the CMake policy version to a range from 3.14 to 3.25. This improves compatibility and maintainability of the CMake configuration.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/benchmarks/windows/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_policy(VERSION 3.14...3.25)\n```\n\n----------------------------------------\n\nTITLE: Configuring Installation in CMake\nDESCRIPTION: This section configures the installation process, setting the build bundle directory, installation prefix, and data/library directories. It then installs the application binary, ICU data file, Flutter library, bundled plugin libraries, assets directory (fully re-copied each build), and AOT library (for Profile and Release builds only).\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-todolist-optional-sync/windows/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\n# === Installation ===\n# Support files are copied into place next to the executable, so that it can\n# run in place. This is done instead of making a separate bundle (as on Linux)\n# so that building and running from within Visual Studio will work.\nset(BUILD_BUNDLE_DIR \"$<TARGET_FILE_DIR:${BINARY_NAME}>\")\n# Make the \"install\" step default, as it's required to run.\nset(CMAKE_VS_INCLUDE_INSTALL_TO_DEFAULT_BUILD 1)\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \"${BUILD_BUNDLE_DIR}\" CACHE PATH \"...\" FORCE)\nendif()\n\nset(INSTALL_BUNDLE_DATA_DIR \"${CMAKE_INSTALL_PREFIX}/data\")\nset(INSTALL_BUNDLE_LIB_DIR \"${CMAKE_INSTALL_PREFIX}\")\n\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_ICU_DATA_FILE}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n  COMPONENT Runtime)\n\nif(PLUGIN_BUNDLED_LIBRARIES)\n  install(FILES \"${PLUGIN_BUNDLED_LIBRARIES}\"\n    DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n\n# Fully re-copy the assets directory on each build to avoid having stale files\n# from a previous install.\nset(FLUTTER_ASSET_DIR_NAME \"flutter_assets\")\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\\\")\n  \" COMPONENT Runtime)\ninstall(DIRECTORY \"${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}\"\n  DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\" COMPONENT Runtime)\n\n# Install the AOT library on non-Debug builds only.\ninstall(FILES \"${AOT_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  CONFIGURATIONS Profile;Release\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Adding Flutter Interface Library\nDESCRIPTION: Adds an interface library named `flutter`. Interface libraries are used to group compile options, include directories, and link dependencies without producing any object code. This allows for easy reuse of these settings in other targets.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-trello/linux/flutter/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(flutter INTERFACE)\ntarget_include_directories(flutter INTERFACE\n  \"${EPHEMERAL_DIR}\"\n)\ntarget_link_libraries(flutter INTERFACE \"${FLUTTER_LIBRARY}\")\ntarget_link_libraries(flutter INTERFACE\n  PkgConfig::GTK\n  PkgConfig::GLIB\n  PkgConfig::GIO\n)\nadd_dependencies(flutter flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Creating Flutter Interface Library\nDESCRIPTION: Defines an interface library named `flutter`. This library includes the necessary header files and links to the Flutter library. It also depends on the `flutter_assemble` target.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-todolist-drift/windows/flutter/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(flutter INTERFACE)\ntarget_include_directories(flutter INTERFACE\n  \"${EPHEMERAL_DIR}\"\n)\ntarget_link_libraries(flutter INTERFACE \"${FLUTTER_LIBRARY}.lib\")\nadd_dependencies(flutter flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Adding Flutter subdirectory\nDESCRIPTION: Adds the Flutter managed directory as a subdirectory. This integrates the Flutter build system into the CMake project.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-anonymous-auth/windows/CMakeLists.txt#_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\nset(FLUTTER_MANAGED_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/flutter\")\nadd_subdirectory(${FLUTTER_MANAGED_DIR})\n```\n\n----------------------------------------\n\nTITLE: Initializing CMake Project\nDESCRIPTION: This snippet initializes the CMake project, sets the minimum required CMake version, names the project, and specifies the languages used.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/django-todolist/windows/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\nproject(powersync_flutter_demo LANGUAGES CXX)\n```\n\n----------------------------------------\n\nTITLE: Configuring Installation Directories CMake\nDESCRIPTION: This snippet configures the installation directories for the application bundle. It sets the build bundle directory, makes the install step default, and defines the install prefix.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-edge-function-auth/windows/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nset(BUILD_BUNDLE_DIR \"$<TARGET_FILE_DIR:${BINARY_NAME}>\")\n# Make the \"install\" step default, as it's required to run.\nset(CMAKE_VS_INCLUDE_INSTALL_TO_DEFAULT_BUILD 1)\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \"${BUILD_BUNDLE_DIR}\" CACHE PATH \"...\" FORCE)\nendif()\n\nset(INSTALL_BUNDLE_DATA_DIR \"${CMAKE_INSTALL_PREFIX}/data\")\nset(INSTALL_BUNDLE_LIB_DIR \"${CMAKE_INSTALL_PREFIX}\")\n```\n\n----------------------------------------\n\nTITLE: Appending C++ Wrapper Sources (Core)\nDESCRIPTION: Creates a list of core C++ wrapper source files (`CPP_WRAPPER_SOURCES_CORE`) and prepends the `WRAPPER_ROOT` path to each source file.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-todolist-drift/windows/flutter/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND CPP_WRAPPER_SOURCES_CORE\n  \"core_implementations.cc\"\n  \"standard_codec.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_CORE PREPEND \"${WRAPPER_ROOT}/\")\n```\n\n----------------------------------------\n\nTITLE: Installing AOT Library in CMake\nDESCRIPTION: This snippet installs the AOT library on non-Debug builds only. It checks the CMAKE_BUILD_TYPE and installs the AOT library if it's not a Debug build.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-trello/linux/CMakeLists.txt#_snippet_13\n\nLANGUAGE: CMake\nCODE:\n```\nif(NOT CMAKE_BUILD_TYPE MATCHES \"Debug\")\n  install(FILES \"${AOT_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Creating Flutter Interface Library\nDESCRIPTION: This snippet creates an interface library named `flutter`. It specifies include directories and link libraries for this interface. The `target_include_directories` command adds the `EPHEMERAL_DIR` to the include directories, and `target_link_libraries` links against the Flutter library, GTK, GLib, and GIO.  `add_dependencies` ensures that `flutter_assemble` target is built before this interface library.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/django-todolist/linux/flutter/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(flutter INTERFACE)\ntarget_include_directories(flutter INTERFACE\n  \"${EPHEMERAL_DIR}\"\n)\ntarget_link_libraries(flutter INTERFACE \"${FLUTTER_LIBRARY}\")\ntarget_link_libraries(flutter INTERFACE\n  PkgConfig::GTK\n  PkgConfig::GLIB\n  PkgConfig::GIO\n)\nadd_dependencies(flutter flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Install Plugin Bundled Libraries\nDESCRIPTION: This snippet conditionally installs bundled libraries if they exist. These libraries are dependencies included with plugins used in the application.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-todolist-drift/windows/CMakeLists.txt#_snippet_13\n\nLANGUAGE: CMake\nCODE:\n```\nif(PLUGIN_BUNDLED_LIBRARIES)\n  install(FILES \"${PLUGIN_BUNDLED_LIBRARIES}\"\n    DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Install Native Assets\nDESCRIPTION: Installs native assets provided by the build process to the library directory. This includes files like dynamic libraries. Installs native assets, typically DLLs, to the library directory.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/benchmarks/windows/CMakeLists.txt#_snippet_19\n\nLANGUAGE: cmake\nCODE:\n```\nset(NATIVE_ASSETS_DIR \"${PROJECT_BUILD_DIR}native_assets/windows/\")\ninstall(DIRECTORY \"${NATIVE_ASSETS_DIR}\"\n   DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n   COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Setting Wrapper Root Directory\nDESCRIPTION: Sets the WRAPPER_ROOT variable to the path of the 'cpp_client_wrapper' directory within the ephemeral directory. This directory contains C++ wrapper code for the Flutter engine.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/django-todolist/windows/flutter/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nset(WRAPPER_ROOT \"${EPHEMERAL_DIR}/cpp_client_wrapper\")\n```\n\n----------------------------------------\n\nTITLE: Append Flutter Library Headers\nDESCRIPTION: Creates a list of Flutter library header files located in the `flutter_linux` subdirectory of the ephemeral directory.  These headers are required to compile code that interacts with the Flutter engine.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-todolist/linux/flutter/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND FLUTTER_LIBRARY_HEADERS\n  \"fl_basic_message_channel.h\"\n  \"fl_binary_codec.h\"\n  \"fl_binary_messenger.h\"\n  \"fl_dart_project.h\"\n  \"fl_engine.h\"\n  \"fl_json_message_codec.h\"\n  \"fl_json_method_codec.h\"\n  \"fl_message_codec.h\"\n  \"fl_method_call.h\"\n  \"fl_method_channel.h\"\n  \"fl_method_codec.h\"\n  \"fl_method_response.h\"\n  \"fl_plugin_registrar.h\"\n  \"fl_plugin_registry.h\"\n  \"fl_standard_message_codec.h\"\n  \"fl_standard_method_codec.h\"\n  \"fl_string_codec.h\"\n  \"fl_value.h\"\n  \"fl_view.h\"\n  \"flutter_linux.h\"\n)\nlist_prepend(FLUTTER_LIBRARY_HEADERS \"${EPHEMERAL_DIR}/flutter_linux/\")\n```\n\n----------------------------------------\n\nTITLE: Prepending to Flutter Library Headers List\nDESCRIPTION: This snippet prepends the path to the Flutter Linux headers within the `ephemeral` directory to each entry in the `FLUTTER_LIBRARY_HEADERS` list. This ensures the correct header files are found during compilation.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-todolist-optional-sync/linux/flutter/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nlist_prepend(FLUTTER_LIBRARY_HEADERS \"${EPHEMERAL_DIR}/flutter_linux/\")\n```\n\n----------------------------------------\n\nTITLE: Setting Phony Output File\nDESCRIPTION: This snippet defines the `PHONY_OUTPUT` variable, which specifies a non-existent file. This file is used to force the custom command to run every time, as there is no reliable way to get a full input/output list from the Flutter tool.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-todolist/windows/flutter/CMakeLists.txt#_snippet_28\n\nLANGUAGE: cmake\nCODE:\n```\nset(PHONY_OUTPUT \"${CMAKE_CURRENT_BINARY_DIR}/_phony_\")\nset_source_files_properties(\"${PHONY_OUTPUT}\" PROPERTIES SYMBOLIC TRUE)\n```\n\n----------------------------------------\n\nTITLE: Add Runner Subdirectory\nDESCRIPTION: Adds the 'runner' subdirectory to the build process. This is where the application-specific CMakeLists.txt is located. This includes the 'runner' subdirectory, which builds the application executable.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/benchmarks/windows/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(\"runner\")\n```\n\n----------------------------------------\n\nTITLE: Executable Definition & Linking\nDESCRIPTION: Defines the executable target using `add_executable`, specifying the source files to be compiled. It then applies standard build settings and links the executable against the Flutter library and GTK. Additionally, a dependency on `flutter_assemble` is added to ensure Flutter assets are built before the executable is linked.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-todolist/linux/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nadd_definitions(-DAPPLICATION_ID=\"${APPLICATION_ID}\")\n\n# Define the application target. To change its name, change BINARY_NAME above,\n# not the value here, or `flutter run` will no longer work.\n#\n# Any new source files that you add to the application should be added here.\nadd_executable(${BINARY_NAME}\n  \"main.cc\"\n  \"my_application.cc\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n)\n\n# Apply the standard set of build settings. This can be removed for applications\n# that need different build settings.\napply_standard_settings(${BINARY_NAME})\n\n# Add dependency libraries. Add any application-specific dependencies here.\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter)\ntarget_link_libraries(${BINARY_NAME} PRIVATE PkgConfig::GTK)\n\n# Run the Flutter tool portions of the build. This must not be removed.\nadd_dependencies(${BINARY_NAME} flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Including Generated Plugin Build Rules\nDESCRIPTION: This snippet includes the `flutter/generated_plugins.cmake` file, which manages building the Flutter plugins and adding them to the application.  This ensures the plugin build process is integrated into the main CMake build.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/firebase-nodejs-todolist/linux/CMakeLists.txt#_snippet_14\n\nLANGUAGE: CMake\nCODE:\n```\n# Generated plugin build rules, which manage building the plugins and adding\n# them to the application.\ninclude(flutter/generated_plugins.cmake)\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Policies CMake\nDESCRIPTION: This snippet explicitly opts into modern CMake behaviors to avoid warnings when using newer CMake versions. This ensures compatibility and best practices for the build process.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-edge-function-auth/windows/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_policy(SET CMP0063 NEW)\n```\n\n----------------------------------------\n\nTITLE: Setting the binary name\nDESCRIPTION: Sets the name of the executable file.  This name is used when the application is built. Changing this will alter the on-disk name of the application.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-trello/windows/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(BINARY_NAME \"trelloappclone_flutter\")\n```\n\n----------------------------------------\n\nTITLE: Setting Minimum CMake Version\nDESCRIPTION: This snippet sets the minimum required CMake version to 3.10. This ensures that the CMake features used in the script are supported by the CMake version used for building the project.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/django-todolist/linux/flutter/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.10)\n```\n\n----------------------------------------\n\nTITLE: Applying Standard Build Settings\nDESCRIPTION: Applies a set of standard build settings to the executable target.  This is a convenience function (likely defined elsewhere) that configures common compiler flags and other settings. This can be customized or removed for applications needing custom build configurations.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-trello/windows/runner/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\napply_standard_settings(${BINARY_NAME})\n```\n\n----------------------------------------\n\nTITLE: Setting Global Variables\nDESCRIPTION: Sets several global variables: `FLUTTER_LIBRARY` (path to Flutter library), `FLUTTER_ICU_DATA_FILE` (path to ICU data file), `PROJECT_BUILD_DIR` (project's build directory), and `AOT_LIBRARY` (path to ahead-of-time compiled library). The `PARENT_SCOPE` option makes these variables available in the parent directory's CMake scope, enabling their use in install scripts.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-anonymous-auth/linux/flutter/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_LIBRARY ${FLUTTER_LIBRARY} PARENT_SCOPE)\nset(FLUTTER_ICU_DATA_FILE \"${EPHEMERAL_DIR}/icudtl.dat\" PARENT_SCOPE)\nset(PROJECT_BUILD_DIR \"${PROJECT_DIR}/build/\" PARENT_SCOPE)\nset(AOT_LIBRARY \"${PROJECT_DIR}/build/lib/libapp.so\" PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Adding preprocessor definitions\nDESCRIPTION: This snippet adds preprocessor definitions to the executable target.  These definitions provide information about the Flutter version. They are defined as private, meaning they are only visible within the target.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-anonymous-auth/windows/runner/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION=\\\"${FLUTTER_VERSION}\\\"\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_MAJOR=${FLUTTER_VERSION_MAJOR}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_MINOR=${FLUTTER_VERSION_MINOR}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_PATCH=${FLUTTER_VERSION_PATCH}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_BUILD=${FLUTTER_VERSION_BUILD}\")\n```\n\n----------------------------------------\n\nTITLE: Adding Flutter Assemble Dependency to Plugin Wrapper\nDESCRIPTION: This snippet adds a dependency on the 'flutter_assemble' target to the 'flutter_wrapper_plugin' target. This ensures that the Flutter engine is assembled before the plugin wrapper is built.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-todolist/windows/flutter/CMakeLists.txt#_snippet_22\n\nLANGUAGE: cmake\nCODE:\n```\nadd_dependencies(flutter_wrapper_plugin flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Adding Executable Target\nDESCRIPTION: Adds an executable target named `${BINARY_NAME}` (defined in the top-level CMakeLists.txt).  It specifies the source files to be compiled into the executable, including Flutter-generated and application-specific source code. The `WIN32` keyword indicates it's a Windows executable.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-trello/windows/runner/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nadd_executable(${BINARY_NAME} WIN32\n  \"flutter_window.cpp\"\n  \"main.cpp\"\n  \"utils.cpp\"\n  \"win32_window.cpp\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n  \"Runner.rc\"\n  \"runner.exe.manifest\"\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing CMake Project\nDESCRIPTION: This snippet initializes the CMake project, setting the minimum required version, project name, and plugin name. The plugin name is crucial and must not be changed as it is used during build generation.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/packages/powersync_flutter_libs/windows/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\n\n# Project-level configuration.\nset(PROJECT_NAME \"powersync_flutter_libs\")\nproject(${PROJECT_NAME} LANGUAGES CXX)\n\n# This value is used when generating builds using this plugin, so it must\n# not be changed.\nset(PLUGIN_NAME \"powersync_flutter_libs_plugin\")\n```\n\n----------------------------------------\n\nTITLE: Setting Flutter Library Path\nDESCRIPTION: Defines the path to the Flutter library (`libflutter_linux_gtk.so`) and other related files such as the ICU data file and AOT library. These paths are published to the parent scope for use in other build steps.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-simple-chat/linux/flutter/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_LIBRARY \"${EPHEMERAL_DIR}/libflutter_linux_gtk.so\")\n\n# Published to parent scope for install step.\nset(FLUTTER_LIBRARY ${FLUTTER_LIBRARY} PARENT_SCOPE)\nset(FLUTTER_ICU_DATA_FILE \"${EPHEMERAL_DIR}/icudtl.dat\" PARENT_SCOPE)\nset(PROJECT_BUILD_DIR \"${PROJECT_DIR}/build/\" PARENT_SCOPE)\nset(AOT_LIBRARY \"${PROJECT_DIR}/build/lib/libapp.so\" PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Set Flutter Library Location\nDESCRIPTION: Defines the path to the Flutter Windows library (DLL). This library provides the core Flutter runtime functionality.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-anonymous-auth/windows/flutter/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nset(FLUTTER_LIBRARY \"${EPHEMERAL_DIR}/flutter_windows.dll\")\n```\n\n----------------------------------------\n\nTITLE: Initializing CMake Project\nDESCRIPTION: This snippet initializes the CMake project, sets the minimum required CMake version, specifies the languages used (CXX), and defines the project name, binary name, and application ID.  These initial settings are crucial for configuring the overall build environment.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/firebase-nodejs-todolist/linux/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.10)\nproject(runner LANGUAGES CXX)\n\n# The name of the executable created for the application. Change this to change\n# the on-disk name of your application.\nset(BINARY_NAME \"powersync_supabase_demo\")\n# The unique GTK application identifier for this application. See:\n# https://wiki.gnome.org/HowDoI/ChooseApplicationID\nset(APPLICATION_ID \"co.powersync.demotodolist\")\n```\n\n----------------------------------------\n\nTITLE: Adding Plugin Library Target in CMake\nDESCRIPTION: This snippet adds the plugin library target with its associated source files.  It sets the library as SHARED, meaning it will be dynamically linked. The source file specified here is \"powersync_flutter_libs_plugin.cpp\".\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/packages/powersync_flutter_libs/windows/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\n# Define the plugin library target. Its name must not be changed (see comment\n# on PLUGIN_NAME above).\n#\n# Any new source files that you add to the plugin should be added here.\nadd_library(${PLUGIN_NAME} SHARED\n  \"powersync_flutter_libs_plugin.cpp\"\n)\n```\n\n----------------------------------------\n\nTITLE: Defining List Prepend Function\nDESCRIPTION: Defines a function called `list_prepend` that prepends a specified prefix to each element in a list. This function is necessary because `list(TRANSFORM ... PREPEND ...)` is unavailable in CMake versions earlier than 3.12.  It modifies a list in the parent scope.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-anonymous-auth/linux/flutter/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(list_prepend LIST_NAME PREFIX)\n    set(NEW_LIST \"\")\n    foreach(element ${${LIST_NAME}})\n        list(APPEND NEW_LIST \"${PREFIX}${element}\")\n    endforeach(element)\n    set(${LIST_NAME} \"${NEW_LIST}\" PARENT_SCOPE)\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Manually Version Packages using Melos\nDESCRIPTION: This command allows manually setting the version of a specific package using `melos`. It uses the `-V` flag followed by the package name and the desired version number in the format `M.M.P` (Major.Minor.Patch).  Example shown is for the `powersync` package.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/RELEASING.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmelos version -V ${PACKAGE_NAME}:M.M.P\n```\n\nLANGUAGE: bash\nCODE:\n```\nfor e.g melos version -V powersync:1.6.3\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Command for Flutter Assembly\nDESCRIPTION: Adds a custom command to assemble the Flutter library. This command executes a shell script to build the Flutter engine. It's marked with a non-existent file `${CMAKE_CURRENT_BINARY_DIR}/_phony_` as output to ensure that it runs every time.  The `VERBATIM` option ensures the command is passed to the shell exactly as written.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/firebase-nodejs-todolist/linux/flutter/CMakeLists.txt#_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CMAKE_CURRENT_BINARY_DIR}/_phony_\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.sh\"\n      ${FLUTTER_TARGET_PLATFORM} ${CMAKE_BUILD_TYPE}\n  VERBATIM\n)\n```\n\n----------------------------------------\n\nTITLE: Add Custom Command for Flutter Assemble\nDESCRIPTION: Adds a custom command that runs the Flutter tool backend script to generate the Flutter library, headers, and C++ wrapper sources. It uses a phony output file to ensure the command runs every time, as there is no reliable way to determine the full input/output list from the Flutter tool.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-simple-chat/windows/flutter/CMakeLists.txt#_snippet_12\n\nLANGUAGE: cmake\nCODE:\n```\nset(PHONY_OUTPUT \"${CMAKE_CURRENT_BINARY_DIR}/_phony_\")\nset_source_files_properties(\"${PHONY_OUTPUT}\" PROPERTIES SYMBOLIC TRUE)\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CPP_WRAPPER_SOURCES_CORE} ${CPP_WRAPPER_SOURCES_PLUGIN}\n    ${CPP_WRAPPER_SOURCES_APP}\n    ${PHONY_OUTPUT}\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.bat\"\n      windows-x64 $<CONFIG>\n  VERBATIM\n)\n```\n\n----------------------------------------\n\nTITLE: Bundling Libraries with the Plugin in CMake\nDESCRIPTION: This snippet defines a list of libraries that should be bundled with the plugin.  In this case, it includes the PowerSync prebuilt library defined by POWERSYNC_FILE_PATH. The PARENT_SCOPE ensures the variable is available in the parent scope.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/packages/powersync_flutter_libs/windows/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\n# ----------------------------------------------------------------------\n\n# List of absolute paths to libraries that should be bundled with the plugin.\n# This list could contain prebuilt libraries, or libraries created by an\n# external build triggered from this build file.\nset(powersync_flutter_libs_bundled_libraries\n  \"${POWERSYNC_FILE_PATH}\"\n  PARENT_SCOPE\n)\n```\n\n----------------------------------------\n\nTITLE: Project Definition\nDESCRIPTION: Defines the project name and supported languages (CXX in this case). The project name is used for generating build artifacts.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-edge-function-auth/windows/runner/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nproject(runner LANGUAGES CXX)\n```\n\n----------------------------------------\n\nTITLE: Setting Phony Output Variable\nDESCRIPTION: Defines the `PHONY_OUTPUT` variable, which points to a non-existent file. This file is used to force the custom command to run every time, ensuring that the Flutter tool is always executed.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-todolist-drift/windows/flutter/CMakeLists.txt#_snippet_13\n\nLANGUAGE: cmake\nCODE:\n```\nset(PHONY_OUTPUT \"${CMAKE_CURRENT_BINARY_DIR}/_phony_\")\nset_source_files_properties(\"${PHONY_OUTPUT}\" PROPERTIES SYMBOLIC TRUE)\n```\n\n----------------------------------------\n\nTITLE: Import PowerSync Attachments Helper and Core\nDESCRIPTION: Imports the necessary packages for using PowerSync Attachments Helper and PowerSync Core. These imports provide the required classes and functions for managing attachments and database synchronization.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/packages/powersync_attachments_helper/README.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nimport 'dart:async';\nimport 'package:powersync_attachments_helper/powersync_attachments_helper.dart';\nimport 'package:powersync_core/powersync_core.dart';\n```\n\n----------------------------------------\n\nTITLE: Linking Libraries and Include Directories\nDESCRIPTION: This snippet links necessary libraries, including 'flutter', 'flutter_wrapper_app', and 'dwmapi.lib', to the executable target. It also adds the CMake source directory to the include directories, which allows the compiler to find header files. This enables access to Flutter functionality and Windows API.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/benchmarks/windows/runner/CMakeLists.txt#_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter flutter_wrapper_app)\ntarget_link_libraries(${BINARY_NAME} PRIVATE \"dwmapi.lib\")\ntarget_include_directories(${BINARY_NAME} PRIVATE \"${CMAKE_SOURCE_DIR}\")\n```\n\n----------------------------------------\n\nTITLE: Including Generated Configuration\nDESCRIPTION: Includes a generated CMake configuration file from the ephemeral directory.  This file likely contains configurations produced by Flutter tools.  Dependencies will be set up according to the included configuration.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/firebase-nodejs-todolist/linux/flutter/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(${EPHEMERAL_DIR}/generated_config.cmake)\n```\n\n----------------------------------------\n\nTITLE: Prepending Ephemeral Directory to Headers\nDESCRIPTION: Prepends the `EPHEMERAL_DIR` path to each header file in the `FLUTTER_LIBRARY_HEADERS` list, ensuring the correct include paths are used during compilation.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/benchmarks/linux/flutter/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nlist_prepend(FLUTTER_LIBRARY_HEADERS \"${EPHEMERAL_DIR}/flutter_linux/\")\n```\n\n----------------------------------------\n\nTITLE: Applying Standard Settings\nDESCRIPTION: This snippet applies a predefined set of build settings, likely defined elsewhere in the CMake project or imported as a module. It helps standardize the build process.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/django-todolist/windows/runner/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\napply_standard_settings(${BINARY_NAME})\n```\n\n----------------------------------------\n\nTITLE: Add Custom Command (Flutter Assemble)\nDESCRIPTION: Adds a custom command that executes the `tool_backend.bat` script from the Flutter tool to assemble the Flutter library and other necessary files. This command is executed during the build process and generates the Flutter Windows DLL, header files, and C++ wrapper sources.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-edge-function-auth/windows/flutter/CMakeLists.txt#_snippet_13\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CPP_WRAPPER_SOURCES_CORE} ${CPP_WRAPPER_SOURCES_PLUGIN}\n    ${CPP_WRAPPER_SOURCES_APP}\n    ${PHONY_OUTPUT}\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.bat\"\n      windows-x64 $<CONFIG>\n  VERBATIM\n)\n```\n\n----------------------------------------\n\nTITLE: Add Custom Target for Flutter Assemble\nDESCRIPTION: Adds a custom target named `flutter_assemble` that depends on the Flutter library, headers, and C++ wrapper sources. This target ensures that the Flutter tool backend script is executed before other targets that depend on these outputs.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-simple-chat/windows/flutter/CMakeLists.txt#_snippet_13\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_target(flutter_assemble DEPENDS\n  \"${FLUTTER_LIBRARY}\"\n  ${FLUTTER_LIBRARY_HEADERS}\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Executable Target\nDESCRIPTION: This snippet adds an executable target named by the variable BINARY_NAME, compiling specified source files like 'flutter_window.cpp', 'main.cpp', 'utils.cpp', 'win32_window.cpp', generated plugin source, a resource file, and a manifest file. It creates the executable for the Flutter Windows application.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/benchmarks/windows/runner/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(${BINARY_NAME} WIN32\n  \"flutter_window.cpp\"\n  \"main.cpp\"\n  \"utils.cpp\"\n  \"win32_window.cpp\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n  \"Runner.rc\"\n  \"runner.exe.manifest\"\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Flutter Library Path\nDESCRIPTION: Sets the `FLUTTER_LIBRARY` variable to the path of the Flutter Windows DLL within the `ephemeral` directory, and sets the `FLUTTER_ICU_DATA_FILE` variable to the location of the ICU data file. These variables are published to the parent scope for use in install steps.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-todolist-optional-sync/windows/flutter/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_LIBRARY \"${EPHEMERAL_DIR}/flutter_windows.dll\")\n\n# Published to parent scope for install step.\nset(FLUTTER_LIBRARY ${FLUTTER_LIBRARY} PARENT_SCOPE)\nset(FLUTTER_ICU_DATA_FILE \"${EPHEMERAL_DIR}/icudtl.dat\" PARENT_SCOPE)\nset(PROJECT_BUILD_DIR \"${PROJECT_DIR}/build/\" PARENT_SCOPE)\nset(AOT_LIBRARY \"${PROJECT_DIR}/build/windows/app.so\" PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Creating Flutter Library Interface\nDESCRIPTION: Creates an interface library named `flutter` and sets its include directories and link libraries. This library provides a convenient way to link against the Flutter engine in other targets.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-todolist-optional-sync/windows/flutter/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND FLUTTER_LIBRARY_HEADERS\n  \"flutter_export.h\"\n  \"flutter_windows.h\"\n  \"flutter_messenger.h\"\n  \"flutter_plugin_registrar.h\"\n  \"flutter_texture_registrar.h\"\n)\nlist(TRANSFORM FLUTTER_LIBRARY_HEADERS PREPEND \"${EPHEMERAL_DIR}/\")\nadd_library(flutter INTERFACE)\ntarget_include_directories(flutter INTERFACE\n  \"${EPHEMERAL_DIR}\"\n)\ntarget_link_libraries(flutter INTERFACE \"${FLUTTER_LIBRARY}.lib\")\nadd_dependencies(flutter flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Finding System Dependencies\nDESCRIPTION: This snippet uses `find_package` and `pkg_check_modules` to locate and import the GTK (gtk+-3.0) system dependency using PkgConfig. This enables the project to use the GTK library, a graphical user interface toolkit.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/firebase-nodejs-todolist/linux/CMakeLists.txt#_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\n# System-level dependencies.\nfind_package(PkgConfig REQUIRED)\npkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk+-3.0)\n```\n\n----------------------------------------\n\nTITLE: Creating Flutter Interface Library\nDESCRIPTION: Creates an interface library named `flutter`. Interface libraries are used to propagate usage requirements, such as include directories and linked libraries, to dependent targets without actually creating any build artifacts.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/benchmarks/linux/flutter/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(flutter INTERFACE)\ntarget_include_directories(flutter INTERFACE\n  \"${EPHEMERAL_DIR}\"\n)\ntarget_link_libraries(flutter INTERFACE \"${FLUTTER_LIBRARY}\")\ntarget_link_libraries(flutter INTERFACE\n  PkgConfig::GTK\n  PkgConfig::GLIB\n  PkgConfig::GIO\n)\nadd_dependencies(flutter flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Setting Wrapper Root Directory\nDESCRIPTION: Defines the `WRAPPER_ROOT` variable, which points to the directory containing the C++ client wrapper code. This code provides an interface between Flutter and native Windows components.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-todolist-drift/windows/flutter/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(WRAPPER_ROOT \"${EPHEMERAL_DIR}/cpp_client_wrapper\")\n```\n\n----------------------------------------\n\nTITLE: Creating Flutter Interface Library\nDESCRIPTION: Creates an interface library named `flutter` and specifies include directories and link libraries. This interface library allows other parts of the build system to link against the Flutter library and its dependencies.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-simple-chat/linux/flutter/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(flutter INTERFACE)\ntarget_include_directories(flutter INTERFACE\n  \"${EPHEMERAL_DIR}\"\n)\ntarget_link_libraries(flutter INTERFACE \"${FLUTTER_LIBRARY}\")\ntarget_link_libraries(flutter INTERFACE\n  PkgConfig::GTK\n  PkgConfig::GLIB\n  PkgConfig::GIO\n)\nadd_dependencies(flutter flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Setting Unicode Definitions\nDESCRIPTION: This snippet adds preprocessor definitions to enable Unicode support for the project.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-todolist/windows/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\n# Use Unicode for all projects.\nadd_definitions(-DUNICODE -D_UNICODE)\n```\n\n----------------------------------------\n\nTITLE: Adding Preprocessor Definitions for Version\nDESCRIPTION: This snippet adds preprocessor definitions to the executable target that represent the Flutter version information.  These definitions are used to embed the version number into the application. The definitions include the full version string, major, minor, patch, and build numbers.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/benchmarks/windows/runner/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION=\\\"${FLUTTER_VERSION}\\\"\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_MAJOR=${FLUTTER_VERSION_MAJOR}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_MINOR=${FLUTTER_VERSION_MINOR}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_PATCH=${FLUTTER_VERSION_PATCH}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_BUILD=${FLUTTER_VERSION_BUILD}\")\n```\n\n----------------------------------------\n\nTITLE: Adding Preprocessor Definitions\nDESCRIPTION: Adds preprocessor definitions to the executable target for the Flutter version.  These definitions are used to embed the version information into the application.  The version information comes from variables like FLUTTER_VERSION, FLUTTER_VERSION_MAJOR etc. which are defined elsewhere.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-todolist-drift/windows/runner/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION=\\\"${FLUTTER_VERSION}\\\"\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_MAJOR=${FLUTTER_VERSION_MAJOR}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_MINOR=${FLUTTER_VERSION_MINOR}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_PATCH=${FLUTTER_VERSION_PATCH}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_BUILD=${FLUTTER_VERSION_BUILD}\")\n```\n\n----------------------------------------\n\nTITLE: Disabling Windows Macros in CMake\nDESCRIPTION: This disables Windows macros that may conflict with C++ standard library functions, ensuring compatibility and preventing compilation errors. Specifically, it disables NOMINMAX.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/firebase-nodejs-todolist/windows/runner/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"NOMINMAX\")\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Command for Flutter Assembly\nDESCRIPTION: Adds a custom command to run the Flutter tool backend script. This command is responsible for assembling the Flutter library and generating header files. It is configured to run every time due to the lack of a full input/output list from the Flutter tool.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-simple-chat/linux/flutter/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CMAKE_CURRENT_BINARY_DIR}/_phony_\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.sh\"\n      ${FLUTTER_TARGET_PLATFORM} ${CMAKE_BUILD_TYPE}\n  VERBATIM\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Flutter Wrapper Plugin Library\nDESCRIPTION: Creates a static library 'flutter_wrapper_plugin' that includes the core and plugin C++ wrapper sources. It applies standard settings, sets properties for position-independent code and hidden CXX visibility, links to the Flutter library, and sets include directories.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/django-todolist/windows/flutter/CMakeLists.txt#_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(flutter_wrapper_plugin STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n)\napply_standard_settings(flutter_wrapper_plugin)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  POSITION_INDEPENDENT_CODE ON)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  CXX_VISIBILITY_PRESET hidden)\ntarget_link_libraries(flutter_wrapper_plugin PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_plugin PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_plugin flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Defining Project Name and Languages\nDESCRIPTION: Defines the project name and the languages used.  The project name is used to identify the overall CMake project. The LANGUAGES keyword specifies that the project uses CXX (C++) language, which is crucial for compiling the C++ source files.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/packages/powersync_flutter_libs/linux/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(PROJECT_NAME \"powersync_flutter_libs\")\nproject(${PROJECT_NAME} LANGUAGES CXX)\n```\n\n----------------------------------------\n\nTITLE: Define list_prepend Function\nDESCRIPTION: Defines a function to prepend a prefix to each element in a list. This is used because the `list(TRANSFORM ... PREPEND ...)` command is unavailable in CMake 3.10.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-todolist/linux/flutter/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(list_prepend LIST_NAME PREFIX)\n    set(NEW_LIST \"\")\n    foreach(element ${${LIST_NAME}})\n        list(APPEND NEW_LIST \"${PREFIX}${element}\")\n    endforeach(element)\n    set(${LIST_NAME} \"${NEW_LIST}\" PARENT_SCOPE)\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Creating Flutter Interface Library\nDESCRIPTION: Creates an interface library named `flutter`. This library is used to specify include directories and link libraries required by Flutter. It links against the Flutter library and the GTK, GLIB and GIO packages. It also adds a dependency to the `flutter_assemble` target.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-todolist-drift/linux/flutter/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(flutter INTERFACE)\ntarget_include_directories(flutter INTERFACE\n  \"${EPHEMERAL_DIR}\"\n)\ntarget_link_libraries(flutter INTERFACE \"${FLUTTER_LIBRARY}\")\ntarget_link_libraries(flutter INTERFACE\n  PkgConfig::GTK\n  PkgConfig::GLIB\n  PkgConfig::GIO\n)\nadd_dependencies(flutter flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Setting minimum CMake version\nDESCRIPTION: Specifies the minimum required version of CMake for the project. This ensures that the build process uses a compatible version of CMake.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-anonymous-auth/windows/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\n```\n\n----------------------------------------\n\nTITLE: Assemble Flutter Windows Tool Backend\nDESCRIPTION: Defines a custom command to invoke the Flutter tool backend for Windows. This command generates the Flutter library and wrapper sources. A phony output is used to ensure the command runs every time.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-anonymous-auth/windows/flutter/CMakeLists.txt#_snippet_13\n\nLANGUAGE: CMake\nCODE:\n```\nset(PHONY_OUTPUT \"${CMAKE_CURRENT_BINARY_DIR}/_phony_\")\nset_source_files_properties(\"${PHONY_OUTPUT}\" PROPERTIES SYMBOLIC TRUE)\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CPP_WRAPPER_SOURCES_CORE} ${CPP_WRAPPER_SOURCES_PLUGIN}\n    ${CPP_WRAPPER_SOURCES_APP}\n    ${PHONY_OUTPUT}\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.bat\"\n      windows-x64 $<CONFIG>\n  VERBATIM\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Targets and Files\nDESCRIPTION: This snippet installs the executable, ICU data file, Flutter library, and bundled plugin libraries into the specified directories. These are essential runtime files for the application.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/django-todolist/linux/CMakeLists.txt#_snippet_13\n\nLANGUAGE: CMake\nCODE:\n```\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_ICU_DATA_FILE}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n  COMPONENT Runtime)\n\nforeach(bundled_library ${PLUGIN_BUNDLED_LIBRARIES})\n  install(FILES \"${bundled_library}\"\n    DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendforeach(bundled_library)\n```\n\n----------------------------------------\n\nTITLE: Appending to Flutter library headers list\nDESCRIPTION: Defines a list of Flutter library headers and then prepends the ephemeral directory path to each header using the defined `list_prepend` function.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-todolist-drift/linux/flutter/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND FLUTTER_LIBRARY_HEADERS\n  \"fl_basic_message_channel.h\"\n  \"fl_binary_codec.h\"\n  \"fl_binary_messenger.h\"\n  \"fl_dart_project.h\"\n  \"fl_engine.h\"\n  \"fl_json_message_codec.h\"\n  \"fl_json_method_codec.h\"\n  \"fl_message_codec.h\"\n  \"fl_method_call.h\"\n  \"fl_method_channel.h\"\n  \"fl_method_codec.h\"\n  \"fl_method_response.h\"\n  \"fl_plugin_registrar.h\"\n  \"fl_plugin_registry.h\"\n  \"fl_standard_message_codec.h\"\n  \"fl_standard_method_codec.h\"\n  \"fl_string_codec.h\"\n  \"fl_value.h\"\n  \"fl_view.h\"\n  \"flutter_linux.h\"\n)\nlist_prepend(FLUTTER_LIBRARY_HEADERS \"${EPHEMERAL_DIR}/flutter_linux/\")\n```\n\n----------------------------------------\n\nTITLE: Add Custom Command for Flutter Assembly\nDESCRIPTION: Adds a custom command to invoke the Flutter tool to assemble the Flutter library and related headers. A phony file is used as an output to ensure the command runs every time due to limitations in tracking input/output lists.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-todolist/linux/flutter/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CMAKE_CURRENT_BINARY_DIR}/_phony_\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.sh\"\n      ${FLUTTER_TARGET_PLATFORM} ${CMAKE_BUILD_TYPE}\n  VERBATIM\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Flutter Interface Library\nDESCRIPTION: Creates an interface library named `flutter`. Sets the include directories and links the library to the Flutter shared library and other system libraries. The interface library provides a convenient way to link against the Flutter engine and its dependencies in other CMake targets.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/firebase-nodejs-todolist/linux/flutter/CMakeLists.txt#_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(flutter INTERFACE)\ntarget_include_directories(flutter INTERFACE\n  \"${EPHEMERAL_DIR}\"\n)\ntarget_link_libraries(flutter INTERFACE \"${FLUTTER_LIBRARY}\")\ntarget_link_libraries(flutter INTERFACE\n  PkgConfig::GTK\n  PkgConfig::GLIB\n  PkgConfig::GIO\n)\nadd_dependencies(flutter flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Applying Standard Settings to Plugin Wrapper\nDESCRIPTION: This snippet applies standard build settings to the 'flutter_wrapper_plugin' target. The `apply_standard_settings` function is assumed to be defined elsewhere and configures common compiler flags and other settings.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-todolist/windows/flutter/CMakeLists.txt#_snippet_18\n\nLANGUAGE: cmake\nCODE:\n```\napply_standard_settings(flutter_wrapper_plugin)\n```\n\n----------------------------------------\n\nTITLE: Including Generated Plugins\nDESCRIPTION: This snippet includes the generated plugins CMake file, which manages building plugins and adding them to the application. It ensures proper integration of Flutter plugins into the native build.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-simple-chat/windows/CMakeLists.txt#_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(flutter/generated_plugins.cmake)\n```\n\n----------------------------------------\n\nTITLE: Adding Flutter Assemble Dependency\nDESCRIPTION: This snippet adds a dependency on the `flutter_assemble` target. This ensures that the Flutter tool portions of the build are executed before the application is built.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/django-todolist/linux/CMakeLists.txt#_snippet_9\n\nLANGUAGE: CMake\nCODE:\n```\n# Run the Flutter tool portions of the build. This must not be removed.\nadd_dependencies(${BINARY_NAME} flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Command\nDESCRIPTION: Adds a custom command to assemble the Flutter library. It executes the `tool_backend.sh` script with the specified environment variables, target platform, and build type. The `_phony_` file ensures the command runs every time. Dependencies include flutter assemble and flutter tool environment\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-todolist-drift/linux/flutter/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CMAKE_CURRENT_BINARY_DIR}/_phony_\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.sh\"\n      ${FLUTTER_TARGET_PLATFORM} ${CMAKE_BUILD_TYPE}\n  VERBATIM\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Standard Compilation Settings\nDESCRIPTION: This snippet defines a function `APPLY_STANDARD_SETTINGS` that applies standard compilation features, options, and definitions to a given target. It enables C++17, sets warning levels, disables exceptions, and defines debug configurations.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-todolist/windows/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_17)\n  target_compile_options(${TARGET} PRIVATE /W4 /WX /wd\"4100\")\n  target_compile_options(${TARGET} PRIVATE /EHsc)\n  target_compile_definitions(${TARGET} PRIVATE \"_HAS_EXCEPTIONS=0\")\n  target_compile_definitions(${TARGET} PRIVATE \"$<$<CONFIG:Debug>:_DEBUG>\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Applying Standard Compilation Settings in CMake\nDESCRIPTION: This CMake function, `APPLY_STANDARD_SETTINGS`, applies standard compilation settings to a given target. It sets the C++ standard to C++17, adds compiler options for warnings and exception handling, and defines preprocessor definitions including disabling exceptions.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-todolist-optional-sync/windows/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_17)\n  target_compile_options(${TARGET} PRIVATE /W4 /WX /wd\"4100\")\n  target_compile_options(${TARGET} PRIVATE /EHsc)\n  target_compile_definitions(${TARGET} PRIVATE \"_HAS_EXCEPTIONS=0\")\n  target_compile_definitions(${TARGET} PRIVATE \"$<$<CONFIG:Debug>:_DEBUG>\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Create Flutter Wrapper App Library\nDESCRIPTION: Creates a static library named `flutter_wrapper_app` from the core and application-specific C++ wrapper sources. It applies standard settings, links against the `flutter` interface library, includes necessary directories, and depends on the `flutter_assemble` target.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-simple-chat/windows/flutter/CMakeLists.txt#_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(flutter_wrapper_app STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\napply_standard_settings(flutter_wrapper_app)\ntarget_link_libraries(flutter_wrapper_app PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_app PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_app flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Set Binary Name\nDESCRIPTION: This snippet defines the name of the executable file that will be created during the build process. Changing this variable modifies the on-disk name of the application.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-todolist-drift/windows/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(BINARY_NAME \"supabase_todolist_drift\")\n```\n\n----------------------------------------\n\nTITLE: Setting Default Build Type\nDESCRIPTION: This snippet sets the default build type to \"Debug\" if no build type or configuration types are specified. It also defines the available build types as \"Debug\", \"Profile\", and \"Release\". This provides a fallback build type and allows users to select from predefined options.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/firebase-nodejs-todolist/linux/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\n# Define build configuration options.\nif(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n  set(CMAKE_BUILD_TYPE \"Debug\" CACHE\n    STRING \"Flutter build mode\" FORCE)\n  set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS\n    \"Debug\" \"Profile\" \"Release\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Preprocessor Definitions\nDESCRIPTION: This snippet defines preprocessor macros related to the Flutter version. These macros allow the code to access version information during compilation. The definitions are specific to the binary target.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/django-todolist/windows/runner/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION=\\\"${FLUTTER_VERSION}\\\"\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_MAJOR=${FLUTTER_VERSION_MAJOR}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_MINOR=${FLUTTER_VERSION_MINOR}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_PATCH=${FLUTTER_VERSION_PATCH}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_BUILD=${FLUTTER_VERSION_BUILD}\")\n```\n\n----------------------------------------\n\nTITLE: Initializing CMake project\nDESCRIPTION: This snippet initializes the CMake project, specifying the minimum required CMake version and the project name.  The LANGUAGES CXX argument indicates that the project uses C++.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-anonymous-auth/windows/runner/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\nproject(runner LANGUAGES CXX)\n```\n\n----------------------------------------\n\nTITLE: Applying standard compilation settings to targets\nDESCRIPTION: Defines a function APPLY_STANDARD_SETTINGS that applies common compilation features and options to the specified target. It sets the C++ standard to C++17, enables warnings, treats warnings as errors, disables specific warnings, enables exception handling, and defines debug flags for Debug builds.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-trello/windows/CMakeLists.txt#_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_17)\n  target_compile_options(${TARGET} PRIVATE /W4 /WX /wd\"4100\")\n  target_compile_options(${TARGET} PRIVATE /EHsc)\n  target_compile_definitions(${TARGET} PRIVATE \"_HAS_EXCEPTIONS=0\")\n  target_compile_definitions(${TARGET} PRIVATE \"$<$<CONFIG:Debug>:_DEBUG>\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Target for Flutter Assembly\nDESCRIPTION: Adds a custom target named `flutter_assemble` that depends on the Flutter library and headers. This target ensures that the Flutter engine is built before any other targets that depend on it. It is dependent on the `FLUTTER_LIBRARY` and `FLUTTER_LIBRARY_HEADERS`.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/firebase-nodejs-todolist/linux/flutter/CMakeLists.txt#_snippet_9\n\nLANGUAGE: CMake\nCODE:\n```\nadd_custom_target(flutter_assemble DEPENDS\n  \"${FLUTTER_LIBRARY}\"\n  ${FLUTTER_LIBRARY_HEADERS}\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Ephemeral Directory\nDESCRIPTION: This sets the `EPHEMERAL_DIR` variable to the `ephemeral` subdirectory within the current source directory.  This directory is expected to contain generated files, headers and configuration files used during the build process.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-anonymous-auth/linux/flutter/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(EPHEMERAL_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/ephemeral\")\n```\n\n----------------------------------------\n\nTITLE: Setting Flutter Library Variables\nDESCRIPTION: Sets the variables for the Flutter library, ICU data file, project build directory, and AOT library. These variables are published to the parent scope for use in the install step.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/benchmarks/windows/flutter/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_LIBRARY \"${EPHEMERAL_DIR}/flutter_windows.dll\")\n\n# Published to parent scope for install step.\nset(FLUTTER_LIBRARY ${FLUTTER_LIBRARY} PARENT_SCOPE)\nset(FLUTTER_ICU_DATA_FILE \"${EPHEMERAL_DIR}/icudtl.dat\" PARENT_SCOPE)\nset(PROJECT_BUILD_DIR \"${PROJECT_DIR}/build/\" PARENT_SCOPE)\nset(AOT_LIBRARY \"${PROJECT_DIR}/build/windows/app.so\" PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Adding Executable Target in CMake\nDESCRIPTION: This section defines the executable target for the Flutter application, specifying the source files to be included in the build. It utilizes the BINARY_NAME variable defined in the top-level CMakeLists.txt to name the executable.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/firebase-nodejs-todolist/windows/runner/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nadd_executable(${BINARY_NAME} WIN32\n  \"flutter_window.cpp\"\n  \"main.cpp\"\n  \"utils.cpp\"\n  \"win32_window.cpp\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n  \"Runner.rc\"\n  \"runner.exe.manifest\"\n)\n```\n\n----------------------------------------\n\nTITLE: Create Flutter Interface Library\nDESCRIPTION: Creates an interface library named `flutter`. This library provides a symbolic link to the actual Flutter library and includes the necessary header files. The `add_dependencies` command ensures that the `flutter_assemble` target is built before this library.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-edge-function-auth/windows/flutter/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(flutter INTERFACE)\ntarget_include_directories(flutter INTERFACE\n  \"${EPHEMERAL_DIR}\"\n)\ntarget_link_libraries(flutter INTERFACE \"${FLUTTER_LIBRARY}.lib\")\nadd_dependencies(flutter flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Defining build configuration options\nDESCRIPTION: Defines the build configuration types (Debug, Profile, Release). It checks if the generator is multi-config and sets the configuration types accordingly. If not, it sets the build type to Debug by default.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-anonymous-auth/windows/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nget_property(IS_MULTICONFIG GLOBAL PROPERTY GENERATOR_IS_MULTI_CONFIG)\nif(IS_MULTICONFIG)\n  set(CMAKE_CONFIGURATION_TYPES \"Debug;Profile;Release\"\n    CACHE STRING \"\" FORCE)\nelse()\n  if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n    set(CMAKE_BUILD_TYPE \"Debug\" CACHE\n      STRING \"Flutter build mode\" FORCE)\n    set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS\n      \"Debug\" \"Profile\" \"Release\")\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Modern CMake Behaviors\nDESCRIPTION: This snippet explicitly opts in to modern CMake behaviors using `cmake_policy`. This helps to avoid warnings with newer CMake versions by setting specific compatibility policies.  It ensures the project uses modern CMake features and avoids deprecated behaviors.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/firebase-nodejs-todolist/linux/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\n# Explicitly opt in to modern CMake behaviors to avoid warnings with recent\n# versions of CMake.\ncmake_policy(SET CMP0063 NEW)\n```\n\n----------------------------------------\n\nTITLE: Android Port Forwarding Configuration\nDESCRIPTION: Configures port forwarding for local services on Android using ADB. This is necessary to allow the Android app to communicate with the Django backend running locally. The command forwards TCP ports 8080 and 6061.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/django-todolist/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nadb reverse tcp:8080 tcp:8080 && adb reverse tcp:6061 tcp:6061\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Target for Flutter Assembly\nDESCRIPTION: Adds a custom target named `flutter_assemble`. This target depends on the Flutter library and headers, ensuring that they are built before any target that depends on `flutter_assemble`. This target simplifies the build process by grouping dependencies related to the Flutter runtime.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-anonymous-auth/linux/flutter/CMakeLists.txt#_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_target(flutter_assemble DEPENDS\n  \"${FLUTTER_LIBRARY}\"\n  ${FLUTTER_LIBRARY_HEADERS}\n)\n```\n\n----------------------------------------\n\nTITLE: Linking Libraries and Include Directories\nDESCRIPTION: This snippet links necessary libraries to the executable and adds include directories for finding header files. It specifies dependencies like Flutter's libraries and the dwmapi library, crucial for desktop window management.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/django-todolist/windows/runner/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter flutter_wrapper_app)\ntarget_link_libraries(${BINARY_NAME} PRIVATE \"dwmapi.lib\")\ntarget_include_directories(${BINARY_NAME} PRIVATE \"${CMAKE_SOURCE_DIR}\")\n```\n\n----------------------------------------\n\nTITLE: Finding System Packages\nDESCRIPTION: Uses pkg-config to find required system libraries (GTK, GLib, and GIO) and import their targets. These libraries are essential for Flutter's graphical interface and I/O operations on Linux.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-simple-chat/linux/flutter/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(PkgConfig REQUIRED)\npkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk+-3.0)\npkg_check_modules(GLIB REQUIRED IMPORTED_TARGET glib-2.0)\npkg_check_modules(GIO REQUIRED IMPORTED_TARGET gio-2.0)\n```\n\n----------------------------------------\n\nTITLE: Target Compile Definitions (Versioning)\nDESCRIPTION: Adds preprocessor definitions to the executable target for build version information. These definitions are used by the application to access version details during runtime.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-edge-function-auth/windows/runner/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION=\\\"${FLUTTER_VERSION}\\\"\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_MAJOR=${FLUTTER_VERSION_MAJOR}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_MINOR=${FLUTTER_VERSION_MINOR}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_PATCH=${FLUTTER_VERSION_PATCH}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_BUILD=${FLUTTER_VERSION_BUILD}\")\n```\n\n----------------------------------------\n\nTITLE: Setting Ephemeral Directory\nDESCRIPTION: Defines the `EPHEMERAL_DIR` variable, which points to the directory containing generated configuration files and libraries. This directory is used to store intermediate build artifacts. The variable uses `${CMAKE_CURRENT_SOURCE_DIR}` to represent the current source directory.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/firebase-nodejs-todolist/linux/flutter/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(EPHEMERAL_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/ephemeral\")\n```\n\n----------------------------------------\n\nTITLE: Adding Dependencies for Flutter Assembly in CMake\nDESCRIPTION: This specifies a dependency on the Flutter assembly process, ensuring that the necessary Flutter build steps are executed as part of the overall build process. This ensures that the Flutter assets are correctly packaged with the application.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/firebase-nodejs-todolist/windows/runner/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nadd_dependencies(${BINARY_NAME} flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Defining Build Configuration Options\nDESCRIPTION: This snippet defines build configuration options. It sets the `CMAKE_BUILD_TYPE` to \"Debug\" if it's not already defined and provides options for \"Debug\", \"Profile\", and \"Release\".\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/django-todolist/linux/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\n# Define build configuration options.\nif(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n  set(CMAKE_BUILD_TYPE \"Debug\" CACHE\n    STRING \"Flutter build mode\" FORCE)\n  set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS\n    \"Debug\" \"Profile\" \"Release\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Define Flutter Library Headers\nDESCRIPTION: Defines a list of header files required for the Flutter library. These headers provide access to the Flutter engine's API and are used by the C++ wrapper and application code.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-edge-function-auth/windows/flutter/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND FLUTTER_LIBRARY_HEADERS\n  \"flutter_export.h\"\n  \"flutter_windows.h\"\n  \"flutter_messenger.h\"\n  \"flutter_plugin_registrar.h\"\n  \"flutter_texture_registrar.h\"\n)\nlist(TRANSFORM FLUTTER_LIBRARY_HEADERS PREPEND \"${EPHEMERAL_DIR}/\")\n```\n\n----------------------------------------\n\nTITLE: Creating Flutter Interface Library\nDESCRIPTION: Creates an interface library named 'flutter'. This library exposes the Flutter API for linking against. It includes the necessary header directories and links to the Flutter DLL.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-trello/windows/flutter/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(flutter INTERFACE)\ntarget_include_directories(flutter INTERFACE\n  \"${EPHEMERAL_DIR}\"\n)\ntarget_link_libraries(flutter INTERFACE \"${FLUTTER_LIBRARY}.lib\")\nadd_dependencies(flutter flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Setting Compiler Definitions\nDESCRIPTION: This snippet adds preprocessor definitions for the build version, including the Flutter version, major, minor, patch, and build numbers. These definitions allow the application to access the version information at compile time. It also disables the Windows NOMINMAX macro.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-todolist/windows/runner/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION=\\\"${FLUTTER_VERSION}\\\"\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_MAJOR=${FLUTTER_VERSION_MAJOR}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_MINOR=${FLUTTER_VERSION_MINOR}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_PATCH=${FLUTTER_VERSION_PATCH}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_BUILD=${FLUTTER_VERSION_BUILD}\")\n\n# Disable Windows macros that collide with C++ standard library functions.\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"NOMINMAX\")\n```\n\n----------------------------------------\n\nTITLE: Including Generated Configuration\nDESCRIPTION: Includes the generated configuration file from the ephemeral directory. This file likely contains project-specific settings generated by the Flutter tool.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-todolist-optional-sync/windows/flutter/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(${EPHEMERAL_DIR}/generated_config.cmake)\n```\n\n----------------------------------------\n\nTITLE: Defining the project\nDESCRIPTION: Defines the project with its name and the languages used (C++). This sets up the basic project structure for CMake.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-anonymous-auth/windows/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nproject(powersync_flutter_demo LANGUAGES CXX)\n```\n\n----------------------------------------\n\nTITLE: Setting Flutter Library Variables\nDESCRIPTION: This snippet sets the `FLUTTER_LIBRARY` variable to the path of the Flutter Linux GTK shared library (`libflutter_linux_gtk.so`). It also sets `FLUTTER_ICU_DATA_FILE`, `PROJECT_BUILD_DIR`, and `AOT_LIBRARY` variables which are then set in the parent scope so they are accessible to other cmake files.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-todolist-optional-sync/linux/flutter/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_LIBRARY \"${EPHEMERAL_DIR}/libflutter_linux_gtk.so\")\n\n# Published to parent scope for install step.\nset(FLUTTER_LIBRARY ${FLUTTER_LIBRARY} PARENT_SCOPE)\nset(FLUTTER_ICU_DATA_FILE \"${EPHEMERAL_DIR}/icudtl.dat\" PARENT_SCOPE)\nset(PROJECT_BUILD_DIR \"${PROJECT_DIR}/build/\" PARENT_SCOPE)\nset(AOT_LIBRARY \"${PROJECT_DIR}/build/lib/libapp.so\" PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Disabling Windows Macros\nDESCRIPTION: Disables the `NOMINMAX` macro in Windows, preventing potential conflicts between Windows macros and C++ standard library functions. This ensures that standard C++ functions like `min` and `max` are used correctly.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-todolist-optional-sync/windows/runner/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"NOMINMAX\")\n```\n\n----------------------------------------\n\nTITLE: Set C++ Wrapper Sources (Plugin)\nDESCRIPTION: Defines a list of plugin-specific C++ wrapper source files (`CPP_WRAPPER_SOURCES_PLUGIN`) and prepends the `WRAPPER_ROOT` to each file path. These source files are used to register Flutter plugins within the application.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-simple-chat/windows/flutter/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND CPP_WRAPPER_SOURCES_PLUGIN\n  \"plugin_registrar.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_PLUGIN PREPEND \"${WRAPPER_ROOT}/\")\n```\n\n----------------------------------------\n\nTITLE: Installing Assets Directory\nDESCRIPTION: This snippet installs the assets directory, first removing any existing directory to ensure a clean install. The assets are located in the `PROJECT_BUILD_DIR`.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/firebase-nodejs-todolist/windows/CMakeLists.txt#_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\n# Fully re-copy the assets directory on each build to avoid having stale files\n# from a previous install.\nset(FLUTTER_ASSET_DIR_NAME \"flutter_assets\")\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\\\")\n  \" COMPONENT Runtime)\ninstall(DIRECTORY \"${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}\"\n  DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\" COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Setting Ephemeral Directory Variable\nDESCRIPTION: This snippet sets the `EPHEMERAL_DIR` variable to point to the `ephemeral` directory within the current source directory.  This directory likely contains generated files and configuration settings used during the build process.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-todolist-optional-sync/linux/flutter/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(EPHEMERAL_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/ephemeral\")\n```\n\n----------------------------------------\n\nTITLE: Linking Libraries and Include Directories in CMake\nDESCRIPTION: This adds dependency libraries and include directories required for the Flutter application. It links necessary libraries such as flutter, flutter_wrapper_app, and dwmapi.lib. It also includes the project's source directory.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/firebase-nodejs-todolist/windows/runner/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter flutter_wrapper_app)\ntarget_link_libraries(${BINARY_NAME} PRIVATE \"dwmapi.lib\")\ntarget_include_directories(${BINARY_NAME} PRIVATE \"${CMAKE_SOURCE_DIR}\")\n```\n\n----------------------------------------\n\nTITLE: Set Flutter Library Path\nDESCRIPTION: Sets the FLUTTER_LIBRARY variable to the path of the Flutter Windows DLL. Also, defines and publishes other file paths needed by the Flutter environment.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-edge-function-auth/windows/flutter/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_LIBRARY \"${EPHEMERAL_DIR}/flutter_windows.dll\")\n\n# Published to parent scope for install step.\nset(FLUTTER_LIBRARY ${FLUTTER_LIBRARY} PARENT_SCOPE)\nset(FLUTTER_ICU_DATA_FILE \"${EPHEMERAL_DIR}/icudtl.dat\" PARENT_SCOPE)\nset(PROJECT_BUILD_DIR \"${PROJECT_DIR}/build/\" PARENT_SCOPE)\nset(AOT_LIBRARY \"${PROJECT_DIR}/build/windows/app.so\" PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Setting Flutter Target Platform\nDESCRIPTION: Sets the target platform for the Flutter build. If not already defined, it defaults to windows-x64. This ensures the build is configured for the correct platform.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/benchmarks/windows/flutter/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nif (NOT DEFINED FLUTTER_TARGET_PLATFORM)\n  set(FLUTTER_TARGET_PLATFORM \"windows-x64\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Application ID Definition\nDESCRIPTION: This snippet adds a preprocessor definition for the application ID, allowing the application code to access the application ID at compile time. The `APPLICATION_ID` variable is used to define the `-DAPPLICATION_ID` preprocessor definition.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/firebase-nodejs-todolist/linux/CMakeLists.txt#_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\nadd_definitions(-DAPPLICATION_ID=\"${APPLICATION_ID}\")\n```\n\n----------------------------------------\n\nTITLE: Adding Flutter subdirectory\nDESCRIPTION: This snippet adds the Flutter-managed directory as a subdirectory to the CMake project.  This is where Flutter's build system integrates with CMake.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-simple-chat/linux/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_MANAGED_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/flutter\")\nadd_subdirectory(${FLUTTER_MANAGED_DIR})\n```\n\n----------------------------------------\n\nTITLE: Defining application ID\nDESCRIPTION: This snippet defines the application ID as a preprocessor definition.  This allows the application ID to be used in the C++ code.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-simple-chat/linux/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nadd_definitions(-DAPPLICATION_ID=\"${APPLICATION_ID}\")\n```\n\n----------------------------------------\n\nTITLE: Setting Project Configuration\nDESCRIPTION: This snippet sets the minimum required CMake version, the project name, and explicitly opts into modern CMake behaviors to avoid warnings.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/firebase-nodejs-todolist/windows/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\nproject(powersync_flutter_demo LANGUAGES CXX)\n\n# The name of the executable created for the application. Change this to change\n# the on-disk name of your application.\nset(BINARY_NAME \"powersync_flutter_demo\")\n\n# Explicitly opt in to modern CMake behaviors to avoid warnings with recent\n# versions of CMake.\ncmake_policy(SET CMP0063 NEW)\n```\n\n----------------------------------------\n\nTITLE: Including Generated Configuration\nDESCRIPTION: Includes a generated CMake configuration file from the ephemeral directory. This file likely contains configurations provided by the Flutter tool, such as platform-specific settings and toolchain information.  This ensures that the build uses configurations defined by the flutter tooling.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-anonymous-auth/linux/flutter/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(${EPHEMERAL_DIR}/generated_config.cmake)\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Target for Flutter Assembly\nDESCRIPTION: Adds a custom target named `flutter_assemble` that depends on the Flutter library and header files. This target ensures that the Flutter library is assembled before other targets that depend on it are built.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-simple-chat/linux/flutter/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_target(flutter_assemble DEPENDS\n  \"${FLUTTER_LIBRARY}\"\n  ${FLUTTER_LIBRARY_HEADERS}\n)\n```\n\n----------------------------------------\n\nTITLE: Including Generated Plugins\nDESCRIPTION: This snippet includes the generated plugins CMake file, which manages building the plugins and adding them to the application.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/django-todolist/linux/CMakeLists.txt#_snippet_11\n\nLANGUAGE: CMake\nCODE:\n```\n# Generated plugin build rules, which manage building the plugins and adding\n# them to the application.\ninclude(flutter/generated_plugins.cmake)\n```\n\n----------------------------------------\n\nTITLE: Finding Package Dependencies\nDESCRIPTION: This finds and imports the GTK package using PkgConfig. GTK is a required dependency for Flutter desktop applications.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-simple-chat/linux/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(PkgConfig REQUIRED)\npkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk+-3.0)\n```\n\n----------------------------------------\n\nTITLE: Set Flutter Library Path\nDESCRIPTION: Defines the `FLUTTER_LIBRARY` variable, specifying the path to the Flutter Windows DLL. This DLL contains the Flutter engine and is essential for running Flutter applications on Windows. The variable is also set in the parent scope to be available to the install step.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-simple-chat/windows/flutter/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_LIBRARY \"${EPHEMERAL_DIR}/flutter_windows.dll\")\n\n# Published to parent scope for install step.\nset(FLUTTER_LIBRARY ${FLUTTER_LIBRARY} PARENT_SCOPE)\nset(FLUTTER_ICU_DATA_FILE \"${EPHEMERAL_DIR}/icudtl.dat\" PARENT_SCOPE)\nset(PROJECT_BUILD_DIR \"${PROJECT_DIR}/build/\" PARENT_SCOPE)\nset(AOT_LIBRARY \"${PROJECT_DIR}/build/windows/app.so\" PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Setting Plugin Name\nDESCRIPTION: Defines the name of the Flutter plugin. This variable is crucial, as it is used when generating builds. It should not be changed after creation.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/packages/powersync_flutter_libs/linux/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(PLUGIN_NAME \"powersync_flutter_libs_plugin\")\n```\n\n----------------------------------------\n\nTITLE: Setting Ephemeral Directory\nDESCRIPTION: This snippet defines the `EPHEMERAL_DIR` variable, which points to the 'ephemeral' directory within the current source directory. This directory typically contains generated files and configurations used during the build process.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/django-todolist/linux/flutter/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(EPHEMERAL_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/ephemeral\")\n```\n\n----------------------------------------\n\nTITLE: Setting ICU Data File Path\nDESCRIPTION: This snippet defines the `FLUTTER_ICU_DATA_FILE` variable, which specifies the path to the ICU data file (`icudtl.dat`). It also publishes this variable to the parent scope for use in subsequent build steps.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-todolist/windows/flutter/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_ICU_DATA_FILE \"${EPHEMERAL_DIR}/icudtl.dat\" PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Installing AOT Library\nDESCRIPTION: This snippet installs the AOT (Ahead-Of-Time) compiled library, but only for 'Profile' and 'Release' configurations. This is to optimize the application performance in non-debug modes.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/firebase-nodejs-todolist/windows/CMakeLists.txt#_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\n# Install the AOT library on non-Debug builds only.\ninstall(FILES \"${AOT_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  CONFIGURATIONS Profile;Release\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Define Project and Languages\nDESCRIPTION: Defines the project name and the programming languages used in the project (CXX). It declares the project as 'benchmarks' and indicates that it involves C++ code. This declaration is essential for CMake to properly manage the build process.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/benchmarks/windows/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nproject(benchmarks LANGUAGES CXX)\n```\n\n----------------------------------------\n\nTITLE: Setting AOT Library Path\nDESCRIPTION: This snippet defines the `AOT_LIBRARY` variable, which specifies the path to the Ahead-Of-Time compiled library (`app.so`). It also publishes this variable to the parent scope for use in subsequent build steps.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-todolist/windows/flutter/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nset(AOT_LIBRARY \"${PROJECT_DIR}/build/windows/app.so\" PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Minimum Version\nDESCRIPTION: Specifies the minimum required CMake version for the project. Ensures compatibility with CMake features used in the script. It's important for maintaining consistent build behavior across different CMake versions.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/firebase-nodejs-todolist/linux/flutter/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.10)\n```\n\n----------------------------------------\n\nTITLE: Define C++ Wrapper Sources (Core)\nDESCRIPTION: Defines the core C++ wrapper sources, including implementations and standard codec handling. These sources are shared between plugin and app wrappers.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-anonymous-auth/windows/flutter/CMakeLists.txt#_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\nlist(APPEND CPP_WRAPPER_SOURCES_CORE\n  \"core_implementations.cc\"\n  \"standard_codec.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_CORE PREPEND \"${WRAPPER_ROOT}/\")\n```\n\n----------------------------------------\n\nTITLE: Adding Dependency on Flutter Assembly\nDESCRIPTION: This snippet adds a dependency to the `${BINARY_NAME}` target on the `flutter_assemble` target.  This ensures that the Flutter tool is executed as part of the build process to assemble the Flutter application.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/firebase-nodejs-todolist/linux/CMakeLists.txt#_snippet_12\n\nLANGUAGE: CMake\nCODE:\n```\n# Run the Flutter tool portions of the build. This must not be removed.\nadd_dependencies(${BINARY_NAME} flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Setting Flutter Library Path\nDESCRIPTION: Sets the `FLUTTER_LIBRARY` variable to the path of the Flutter library (`libflutter_linux_gtk.so`). This library contains the core Flutter runtime and is essential for running Flutter applications on Linux. The path is relative to the ephemeral directory.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-anonymous-auth/linux/flutter/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_LIBRARY \"${EPHEMERAL_DIR}/libflutter_linux_gtk.so\")\n```\n\n----------------------------------------\n\nTITLE: Implement PhotoAttachmentQueue\nDESCRIPTION: Implements the `PhotoAttachmentQueue` class, extending `AbstractAttachmentQueue`. This class overrides the `saveFile`, `deleteFile`, and `watchIds` methods to manage photo attachments. It handles queuing uploads and deletes, and watching for changes in the 'users' table to trigger attachment processing.  Dependencies include `PowerSyncDatabase`, `AbstractRemoteStorageAdapter` and `AttachmentService`.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/packages/powersync_attachments_helper/README.md#_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nclass PhotoAttachmentQueue extends AbstractAttachmentQueue {\n  PhotoAttachmentQueue(db, remoteStorage)\n      : super(db: db, remoteStorage: remoteStorage);\n\n  // This will create an item on the attachment queue to UPLOAD an image\n  // to remote storage\n  @override\n  Future<Attachment> saveFile(String fileId, int size, {mediaType = 'image/jpeg'}) async {\n    String filename = '$fileId.jpg';\n    Attachment photoAttachment = Attachment(\n      id: fileId,\n      filename: filename,\n      state: AttachmentState.queuedUpload.index,\n      mediaType: mediaType,\n      localUri: getLocalFilePathSuffix(filename),\n      size: size,\n    );\n\n    return attachmentsService.saveAttachment(photoAttachment);\n  }\n\n  // This will create an item on the attachment queue to DELETE a file\n  // in local and remote storage\n  @override\n  Future<Attachment> deleteFile(String fileId) async {\n    String filename = '$fileId.jpg';\n    Attachment photoAttachment = Attachment(\n        id: fileId,\n        filename: filename,\n        state: AttachmentState.queuedDelete.index);\n\n    return attachmentsService.saveAttachment(photoAttachment);\n  }\n\n  // This watcher will handle adding items to the queue based on\n  // a users table element receiving a photoId\n  @override\n  StreamSubscription<void> watchIds({String fileExtension = 'jpg'}) {\n    return db.watch('''\n      SELECT photo_id FROM users\n      WHERE photo_id IS NOT NULL\n    ''').map((results) {\n      return results.map((row) => row['photo_id'] as String).toList();\n    }).listen((ids) async {\n      List<String> idsInQueue = await attachmentsService.getAttachmentIds();\n      List<String> relevantIds =\n          ids.where((element) => !idsInQueue.contains(element)).toList();\n      syncingService.processIds(relevantIds, fileExtension);\n    });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Include Generated Plugins\nDESCRIPTION: Includes the generated plugins CMake file. This integrates any Flutter plugins into the application build. Includes a cmake file for handling generated plugins.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/benchmarks/windows/CMakeLists.txt#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(flutter/generated_plugins.cmake)\n```\n\n----------------------------------------\n\nTITLE: Setting Target Properties\nDESCRIPTION: Sets properties for the plugin library target. `CXX_VISIBILITY_PRESET hidden` restricts symbol visibility. `FLUTTER_PLUGIN_IMPL` defines a compiler definition specific to Flutter plugins. The include directory is set to the `include` directory in the source. The plugin is linked against the Flutter library.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/packages/powersync_flutter_libs/linux/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nset_target_properties(${PLUGIN_NAME} PROPERTIES\n  CXX_VISIBILITY_PRESET hidden)\ntarget_compile_definitions(${PLUGIN_NAME} PRIVATE FLUTTER_PLUGIN_IMPL)\ntarget_include_directories(${PLUGIN_NAME} INTERFACE \"${CMAKE_CURRENT_SOURCE_DIR}/include\")\ntarget_link_libraries(${PLUGIN_NAME} PRIVATE flutter)\n```\n\n----------------------------------------\n\nTITLE: Set C++ Wrapper Sources (Core)\nDESCRIPTION: Defines a list of core C++ wrapper source files (`CPP_WRAPPER_SOURCES_CORE`) and prepends the `WRAPPER_ROOT` to each file path.  These core implementation files are the base for both the plugin and the application wrapper.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-simple-chat/windows/flutter/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND CPP_WRAPPER_SOURCES_CORE\n  \"core_implementations.cc\"\n  \"standard_codec.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_CORE PREPEND \"${WRAPPER_ROOT}/\")\n```\n\n----------------------------------------\n\nTITLE: Adding Flutter Dependencies\nDESCRIPTION: This snippet adds a dependency on the flutter_assemble target. This ensures that the Flutter assets are built before the application is compiled.  It is a crucial step for Flutter project builds.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-simple-chat/windows/runner/CMakeLists.txt#_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nadd_dependencies(${BINARY_NAME} flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Setting up installation directories\nDESCRIPTION: Sets up the installation directories for the build bundle. The install step is made the default build step to ensure it runs.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-anonymous-auth/windows/CMakeLists.txt#_snippet_11\n\nLANGUAGE: CMake\nCODE:\n```\nset(BUILD_BUNDLE_DIR \"$<TARGET_FILE_DIR:${BINARY_NAME}>\")\nset(CMAKE_VS_INCLUDE_INSTALL_TO_DEFAULT_BUILD 1)\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \"${BUILD_BUNDLE_DIR}\" CACHE PATH \"...\" FORCE)\nendif()\n\nset(INSTALL_BUNDLE_DATA_DIR \"${CMAKE_INSTALL_PREFIX}/data\")\nset(INSTALL_BUNDLE_LIB_DIR \"${CMAKE_INSTALL_PREFIX}\")\n```\n\n----------------------------------------\n\nTITLE: Set Ephemeral Directory Variable\nDESCRIPTION: Defines the `EPHEMERAL_DIR` variable, which points to the directory containing generated configuration files. This directory is crucial for accessing Flutter-specific build settings and dependencies.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-simple-chat/windows/flutter/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(EPHEMERAL_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/ephemeral\")\n```\n\n----------------------------------------\n\nTITLE: Apply Standard Settings\nDESCRIPTION: Applies a standard set of build settings to the executable target. This is often a macro or function defined elsewhere that configures common compiler and linker options.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-edge-function-auth/windows/runner/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\napply_standard_settings(${BINARY_NAME})\n```\n\n----------------------------------------\n\nTITLE: Setting Ephemeral Directory\nDESCRIPTION: Defines the `EPHEMERAL_DIR` variable, which points to the directory containing generated configuration files and libraries. This directory is crucial for accessing Flutter-specific build artifacts.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-trello/linux/flutter/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(EPHEMERAL_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/ephemeral\")\n```\n\n----------------------------------------\n\nTITLE: Adding Flutter Subdirectory\nDESCRIPTION: This snippet adds the Flutter managed directory as a subdirectory, enabling the build system to process Flutter-specific build rules and configurations.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-simple-chat/windows/CMakeLists.txt#_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nset(FLUTTER_MANAGED_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/flutter\")\nadd_subdirectory(${FLUTTER_MANAGED_DIR})\n```\n\n----------------------------------------\n\nTITLE: Initializing CMake Project\nDESCRIPTION: This snippet sets the minimum required CMake version and declares the project using the CXX language. It is the starting point for configuring the build process.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/django-todolist/windows/runner/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\nproject(runner LANGUAGES CXX)\n```\n\n----------------------------------------\n\nTITLE: Define Flutter Library Headers\nDESCRIPTION: Creates a list of header files required by the Flutter library. These headers expose the Flutter API to C++ code.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-anonymous-auth/windows/flutter/CMakeLists.txt#_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nlist(APPEND FLUTTER_LIBRARY_HEADERS\n  \"flutter_export.h\"\n  \"flutter_windows.h\"\n  \"flutter_messenger.h\"\n  \"flutter_plugin_registrar.h\"\n  \"flutter_texture_registrar.h\"\n)\nlist(TRANSFORM FLUTTER_LIBRARY_HEADERS PREPEND \"${EPHEMERAL_DIR}/\")\n```\n\n----------------------------------------\n\nTITLE: Appending C++ Wrapper Sources (App)\nDESCRIPTION: Creates a list of app-related C++ wrapper source files (`CPP_WRAPPER_SOURCES_APP`) and prepends the `WRAPPER_ROOT` path to each source file.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-todolist-drift/windows/flutter/CMakeLists.txt#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND CPP_WRAPPER_SOURCES_APP\n  \"flutter_engine.cc\"\n  \"flutter_view_controller.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_APP PREPEND \"${WRAPPER_ROOT}/\")\n```\n\n----------------------------------------\n\nTITLE: Disabling Windows Macros\nDESCRIPTION: This snippet disables Windows macros that might conflict with standard C++ library functions. This is a common practice in Windows development to avoid naming collisions.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/django-todolist/windows/runner/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"NOMINMAX\")\n```\n\n----------------------------------------\n\nTITLE: Setting Output Directory for Executable\nDESCRIPTION: This snippet sets the `RUNTIME_OUTPUT_DIRECTORY` property for the `${BINARY_NAME}` target.  This places the unbundled executable in a subdirectory, to prevent users from running the incorrect version outside of the installed application bundle.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/firebase-nodejs-todolist/linux/CMakeLists.txt#_snippet_13\n\nLANGUAGE: CMake\nCODE:\n```\n# Only the install-generated bundle's copy of the executable will launch\n# correctly, since the resources must in the right relative locations. To avoid\n# people trying to run the unbundled copy, put it in a subdirectory instead of\n# the default top-level location.\nset_target_properties(${BINARY_NAME}\n  PROPERTIES\n  RUNTIME_OUTPUT_DIRECTORY \"${CMAKE_BINARY_DIR}/intermediates_do_not_run\"\n)\n```\n\n----------------------------------------\n\nTITLE: Adding build dependencies\nDESCRIPTION: Adds a dependency on the `flutter_assemble` target, ensuring that the Flutter-specific build steps are executed before the executable is built. This line guarantees that the Flutter assets are assembled before the native executable is linked.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-todolist-optional-sync/windows/runner/CMakeLists.txt#_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\nadd_dependencies(${BINARY_NAME} flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Installation settings\nDESCRIPTION: Configures the installation process to copy support files next to the executable. It sets the installation prefix and default installation behavior to copy all necessary files.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-trello/windows/CMakeLists.txt#_snippet_11\n\nLANGUAGE: CMake\nCODE:\n```\nset(BUILD_BUNDLE_DIR \"$<TARGET_FILE_DIR:${BINARY_NAME}>\")\n# Make the \"install\" step default, as it's required to run.\nset(CMAKE_VS_INCLUDE_INSTALL_TO_DEFAULT_BUILD 1)\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \"${BUILD_BUNDLE_DIR}\" CACHE PATH \"...\" FORCE)\nendif()\n\nset(INSTALL_BUNDLE_DATA_DIR \"${CMAKE_INSTALL_PREFIX}/data\")\nset(INSTALL_BUNDLE_LIB_DIR \"${CMAKE_INSTALL_PREFIX}\")\n\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_ICU_DATA_FILE}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n  COMPONENT Runtime)\n\nif(PLUGIN_BUNDLED_LIBRARIES)\n  install(FILES \"${PLUGIN_BUNDLED_LIBRARIES}\"\n    DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n\n# Fully re-copy the assets directory on each build to avoid having stale files\n# from a previous install.\nset(FLUTTER_ASSET_DIR_NAME \"flutter_assets\")\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\\\")\n  \" COMPONENT Runtime)\ninstall(DIRECTORY \"${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}\"\n  DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\" COMPONENT Runtime)\n\n# Install the AOT library on non-Debug builds only.\ninstall(FILES \"${AOT_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  CONFIGURATIONS Profile;Release\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Install Flutter Library\nDESCRIPTION: Installs the Flutter library to the library directory within the installation prefix. This ensures that the Flutter runtime is available. Installs the main flutter library.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/benchmarks/windows/CMakeLists.txt#_snippet_17\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(FILES \"${FLUTTER_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Target Link Libraries\nDESCRIPTION: Specifies the libraries to link with the executable target.  Includes Flutter's core libraries and `dwmapi.lib` for Desktop Window Manager API functions. `PRIVATE` ensures these libraries are not exposed to other targets.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-edge-function-auth/windows/runner/CMakeLists.txt#_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter flutter_wrapper_app)\ntarget_link_libraries(${BINARY_NAME} PRIVATE \"dwmapi.lib\")\n```\n\n----------------------------------------\n\nTITLE: Set Wrapper Root Directory\nDESCRIPTION: Sets the WRAPPER_ROOT variable to the location of the C++ client wrapper directory. This directory contains the source code for the C++ wrapper, which provides an interface between the Flutter engine and the application code.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-edge-function-auth/windows/flutter/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(WRAPPER_ROOT \"${EPHEMERAL_DIR}/cpp_client_wrapper\")\n```\n\n----------------------------------------\n\nTITLE: Appending Flutter Library Headers to List\nDESCRIPTION: Creates a list of Flutter library header files and prepends the `EPHEMERAL_DIR}/flutter_linux/` path to each header file in the list using the custom `list_prepend` function. These headers are required for compiling Flutter plugins and other native code that interacts with the Flutter engine.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/firebase-nodejs-todolist/linux/flutter/CMakeLists.txt#_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nlist(APPEND FLUTTER_LIBRARY_HEADERS\n  \"fl_basic_message_channel.h\"\n  \"fl_binary_codec.h\"\n  \"fl_binary_messenger.h\"\n  \"fl_dart_project.h\"\n  \"fl_engine.h\"\n  \"fl_json_message_codec.h\"\n  \"fl_json_method_codec.h\"\n  \"fl_message_codec.h\"\n  \"fl_method_call.h\"\n  \"fl_method_channel.h\"\n  \"fl_method_codec.h\"\n  \"fl_method_response.h\"\n  \"fl_plugin_registrar.h\"\n  \"fl_plugin_registry.h\"\n  \"fl_standard_message_codec.h\"\n  \"fl_standard_method_codec.h\"\n  \"fl_string_codec.h\"\n  \"fl_value.h\"\n  \"fl_view.h\"\n  \"flutter_linux.h\"\n)\nlist_prepend(FLUTTER_LIBRARY_HEADERS \"${EPHEMERAL_DIR}/flutter_linux/\")\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Target for Flutter Assembly\nDESCRIPTION: Defines a custom target named `flutter_assemble`. This target depends on the Flutter library, header files, and C++ wrapper sources. This target triggers the flutter_assemble command to build the required resources.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-todolist-drift/windows/flutter/CMakeLists.txt#_snippet_15\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_target(flutter_assemble DEPENDS\n  \"${FLUTTER_LIBRARY}\"\n  ${FLUTTER_LIBRARY_HEADERS}\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\n```\n\n----------------------------------------\n\nTITLE: Including Generated Plugin Build Rules\nDESCRIPTION: Includes the generated plugin build rules, which are essential for managing plugin builds and integrating them into the application. It uses `flutter/generated_plugins.cmake`.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/django-todolist/windows/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(flutter/generated_plugins.cmake)\n```\n\n----------------------------------------\n\nTITLE: Initializing CMake Project\nDESCRIPTION: This snippet initializes the CMake project, specifying the minimum required CMake version, project name, and supported languages (CXX). It also sets the name of the executable.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-simple-chat/windows/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\nproject(supabase_tutorial_chat_app LANGUAGES CXX)\n\n# The name of the executable created for the application. Change this to change\n# the on-disk name of your application.\nset(BINARY_NAME \"supabase_tutorial_chat_app\")\n```\n\n----------------------------------------\n\nTITLE: Setting RPATH for Bundled Libraries\nDESCRIPTION: This snippet sets the RPATH to load bundled libraries from the `lib/` directory relative to the binary. This is important for finding shared libraries at runtime.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/django-todolist/linux/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\n# Load bundled libraries from the lib/ directory relative to the binary.\nset(CMAKE_INSTALL_RPATH \"$ORIGIN/lib\")\n```\n\n----------------------------------------\n\nTITLE: Initializing Project Configuration in CMake\nDESCRIPTION: This snippet initializes the project-level configuration in CMake, setting the minimum required CMake version, project name, binary name, and application ID. It also opts-in to modern CMake behaviors and loads bundled libraries.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-trello/linux/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.10)\nproject(runner LANGUAGES CXX)\n\n# The name of the executable created for the application. Change this to change\n# the on-disk name of your application.\nset(BINARY_NAME \"trelloappclone_flutter\")\n# The unique GTK application identifier for this application. See:\n# https://wiki.gnome.org/HowDoI/ChooseApplicationID\nset(APPLICATION_ID \"com.example.trelloappclone_flutter\")\n\n# Explicitly opt in to modern CMake behaviors to avoid warnings with recent\n# versions of CMake.\ncmake_policy(SET CMP0063 NEW)\n\n# Load bundled libraries from the lib/ directory relative to the binary.\nset(CMAKE_INSTALL_RPATH \"$ORIGIN/lib\")\n```\n\n----------------------------------------\n\nTITLE: Create Flutter Wrapper Plugin Library\nDESCRIPTION: Creates a static library named `flutter_wrapper_plugin`. This library contains the core and plugin-related C++ wrapper sources. It links against the `flutter` interface library and includes the wrapper's header files. Standard settings are applied to the target and POSITION_INDEPENDENT_CODE and CXX_VISIBILITY_PRESET properties are configured.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-edge-function-auth/windows/flutter/CMakeLists.txt#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(flutter_wrapper_plugin STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n)\napply_standard_settings(flutter_wrapper_plugin)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  POSITION_INDEPENDENT_CODE ON)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  CXX_VISIBILITY_PRESET hidden)\ntarget_link_libraries(flutter_wrapper_plugin PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_plugin PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_plugin flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Set C++ Wrapper Sources (App)\nDESCRIPTION: Defines a list of application-specific C++ wrapper source files (`CPP_WRAPPER_SOURCES_APP`) and prepends the `WRAPPER_ROOT` to each file path. These files manage the Flutter engine and view controller for the application.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-simple-chat/windows/flutter/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND CPP_WRAPPER_SOURCES_APP\n  \"flutter_engine.cc\"\n  \"flutter_view_controller.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_APP PREPEND \"${WRAPPER_ROOT}/\")\n```\n\n----------------------------------------\n\nTITLE: Including Generated Configuration\nDESCRIPTION: This snippet includes a CMake configuration file located in the ephemeral directory. This file likely contains configurations generated by the Flutter tool, such as build settings and dependency information.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/django-todolist/linux/flutter/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(${EPHEMERAL_DIR}/generated_config.cmake)\n```\n\n----------------------------------------\n\nTITLE: Applying standard build settings\nDESCRIPTION: This snippet applies a standard set of build settings to the executable target.  These settings might include compiler flags, linker options, and other configurations.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-anonymous-auth/windows/runner/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\napply_standard_settings(${BINARY_NAME})\n```\n\n----------------------------------------\n\nTITLE: Initializing CMake project\nDESCRIPTION: Initializes the CMake project, specifying the minimum required CMake version and the project name with CXX as the language. The project name will be the name of the executable.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-todolist-drift/windows/runner/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\nproject(runner LANGUAGES CXX)\n```\n\n----------------------------------------\n\nTITLE: Setting Binary Name\nDESCRIPTION: This snippet sets the name of the executable that will be created for the application.  Changing the `BINARY_NAME` variable will change the on-disk name of the application.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/django-todolist/windows/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(BINARY_NAME \"powersync_flutter_demo\")\n```\n\n----------------------------------------\n\nTITLE: Install Native Assets\nDESCRIPTION: This snippet installs the native assets provided by the build.dart from all packages to the installation directory.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-todolist-drift/windows/CMakeLists.txt#_snippet_14\n\nLANGUAGE: CMake\nCODE:\n```\nset(NATIVE_ASSETS_DIR \"${PROJECT_BUILD_DIR}native_assets/windows/\")\ninstall(DIRECTORY \"${NATIVE_ASSETS_DIR}\"\n   DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n   COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Adding Dependencies\nDESCRIPTION: Adds a dependency on the flutter_assemble target. This ensures that the Flutter assets are built before the executable is built. It's essential for a Flutter project.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-todolist-drift/windows/runner/CMakeLists.txt#_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nadd_dependencies(${BINARY_NAME} flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Set Build Bundle Directory\nDESCRIPTION: Sets the directory where the built application bundle will be placed. This uses the target file directory of the binary. Defines the location of the build bundle using the target file directory of the main executable.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/benchmarks/windows/CMakeLists.txt#_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\nset(BUILD_BUNDLE_DIR \"$<TARGET_FILE_DIR:${BINARY_NAME}>\")\n```\n\n----------------------------------------\n\nTITLE: Setting up Installation Directories\nDESCRIPTION: This snippet sets up the installation directories for the application bundle. It defines the base bundle directory, data directory, and library directory.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/django-todolist/linux/CMakeLists.txt#_snippet_12\n\nLANGUAGE: CMake\nCODE:\n```\nset(BUILD_BUNDLE_DIR \"${PROJECT_BINARY_DIR}/bundle\")\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \"${BUILD_BUNDLE_DIR}\" CACHE PATH \"...\" FORCE)\nendif()\n\n# Start with a clean build bundle directory every time.\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${BUILD_BUNDLE_DIR}/\\\"\n  \" COMPONENT Runtime)\n\nset(INSTALL_BUNDLE_DATA_DIR \"${CMAKE_INSTALL_PREFIX}/data\")\nset(INSTALL_BUNDLE_LIB_DIR \"${CMAKE_INSTALL_PREFIX}/lib\")\n```\n\n----------------------------------------\n\nTITLE: Add Custom Target (Flutter Assemble)\nDESCRIPTION: Adds a custom target named `flutter_assemble` that depends on the Flutter library, header files, and C++ wrapper sources. This target ensures that these files are generated before any other targets that depend on them.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-edge-function-auth/windows/flutter/CMakeLists.txt#_snippet_14\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_target(flutter_assemble DEPENDS\n  \"${FLUTTER_LIBRARY}\"\n  ${FLUTTER_LIBRARY_HEADERS}\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\n```\n\n----------------------------------------\n\nTITLE: Installing ICU Data File\nDESCRIPTION: This snippet installs the Flutter ICU data file (`${FLUTTER_ICU_DATA_FILE}`) into the `data` directory within the installation prefix. This ensures that internationalization and localization data is included in the application bundle.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/firebase-nodejs-todolist/linux/CMakeLists.txt#_snippet_19\n\nLANGUAGE: CMake\nCODE:\n```\ninstall(FILES \"${FLUTTER_ICU_DATA_FILE}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Set Minimum CMake Version\nDESCRIPTION: Specifies the minimum required version of CMake for the build process. This ensures that the build system has the necessary features and capabilities.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-todolist/linux/flutter/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.10)\n```\n\n----------------------------------------\n\nTITLE: Finding Package Dependencies in CMake\nDESCRIPTION: This snippet uses pkg-config to find the required GTK dependencies. It imports the GTK target for linking.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-trello/linux/CMakeLists.txt#_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nfind_package(PkgConfig REQUIRED)\npkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk+-3.0)\n```\n\n----------------------------------------\n\nTITLE: Set Minimum CMake Version\nDESCRIPTION: Specifies the minimum required version of CMake for the project. This ensures that the build system has the necessary features and capabilities.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-edge-function-auth/windows/flutter/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Minimum Required Version\nDESCRIPTION: Specifies the minimum version of CMake required to build the project. This ensures that the build system has the necessary features and capabilities.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-trello/windows/flutter/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Minimum Required Version\nDESCRIPTION: Specifies the minimum required version of CMake for the build process. This ensures compatibility with the CMake features used in the file.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-simple-chat/linux/flutter/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.10)\n```\n\n----------------------------------------\n\nTITLE: Setting Minimum CMake Version\nDESCRIPTION: Specifies the minimum required CMake version for the project.  Ensures that the CMake version used to build the project is at least 3.10.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-trello/linux/flutter/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.10)\n```\n\n----------------------------------------\n\nTITLE: Install Flutter Assets\nDESCRIPTION: This snippet removes the old flutter assets and copies the flutter assets to the install directory.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-todolist-drift/windows/CMakeLists.txt#_snippet_15\n\nLANGUAGE: CMake\nCODE:\n```\nset(FLUTTER_ASSET_DIR_NAME \"flutter_assets\")\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\\\")\n  \" COMPONENT Runtime)\ninstall(DIRECTORY \"${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}\"\n  DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\" COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Adding Flutter Wrapper App Library\nDESCRIPTION: This snippet adds a static library named 'flutter_wrapper_app'. This library includes the core and application wrapper sources and is used for building the Flutter application itself.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-todolist/windows/flutter/CMakeLists.txt#_snippet_23\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(flutter_wrapper_app STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\n```\n\n----------------------------------------\n\nTITLE: Install Plugin Bundled Libraries\nDESCRIPTION: Installs any bundled libraries from Flutter plugins. This ensures that plugin dependencies are correctly placed. Installs any bundled libraries provided by plugins into the library directory.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/benchmarks/windows/CMakeLists.txt#_snippet_18\n\nLANGUAGE: cmake\nCODE:\n```\nif(PLUGIN_BUNDLED_LIBRARIES)\n  install(FILES \"${PLUGIN_BUNDLED_LIBRARIES}\"\n    DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Creating Flutter Wrapper App Library\nDESCRIPTION: Creates a static library 'flutter_wrapper_app' that includes the core and app C++ wrapper sources. It applies standard settings, links to the Flutter library, and sets include directories.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/django-todolist/windows/flutter/CMakeLists.txt#_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(flutter_wrapper_app STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\napply_standard_settings(flutter_wrapper_app)\ntarget_link_libraries(flutter_wrapper_app PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_app PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_app flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Target for Flutter Assemble\nDESCRIPTION: This snippet defines a custom target named `flutter_assemble`. This target depends on the output files of the custom command, ensuring that the command is executed before any target that depends on `flutter_assemble` is built. The dependencies are the Flutter library and headers.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-todolist-optional-sync/linux/flutter/CMakeLists.txt#_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_target(flutter_assemble DEPENDS\n  \"${FLUTTER_LIBRARY}\"\n  ${FLUTTER_LIBRARY_HEADERS}\n)\n```\n\n----------------------------------------\n\nTITLE: CMake Minimum Version\nDESCRIPTION: Specifies the minimum CMake version required to build the project. This ensures compatibility with the CMake features used in the script.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-edge-function-auth/windows/runner/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\n```\n\n----------------------------------------\n\nTITLE: Including Generated Configuration\nDESCRIPTION: Includes a generated CMake configuration file from the ephemeral directory. This file likely contains settings provided by the Flutter tool.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-simple-chat/linux/flutter/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(${EPHEMERAL_DIR}/generated_config.cmake)\n```\n\n----------------------------------------\n\nTITLE: Adding PowerSync Prebuilt Library in CMake\nDESCRIPTION: This snippet configures the inclusion of the prebuilt PowerSync library. It determines the architecture, sets the core file name based on the architecture, and defines the file path. Currently only supports x86_64/AMD64 architectures on Windows.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/packages/powersync_flutter_libs/windows/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\n# ----------------------------------------------------------------------\n# Add powersync prebuilt library.\n\nset(POWERSYNC_ARCH ${CMAKE_SYSTEM_PROCESSOR})\nset(CORE_FILE_NAME \"powersync.dll\")\n\nif (${POWERSYNC_ARCH} MATCHES \"x86_64\" OR ${POWERSYNC_ARCH} MATCHES \"AMD64\")\n  set(CORE_FILE_NAME \"powersync_x64.dll\")\nelseif (${POWERSYNC_ARCH} MATCHES \"^arm64\" OR ${POWERSYNC_ARCH} MATCHES \"^armv8\")\n  message(FATAL_ERROR \"Unsupported architecture: ${POWERSYNC_ARCH}, we are working on adding support for windows arm.\")\nendif ()\n\nset(POWERSYNC_FILE_PATH \"${CMAKE_CURRENT_SOURCE_DIR}/powersync_x64.dll\")\n```\n\n----------------------------------------\n\nTITLE: Installing PowerSync Core Package using Dart Pub\nDESCRIPTION: This command installs the `powersync_core` package from the Dart package repository (pub.dev). This package is the PowerSync client SDK for Dart, designed for non-Flutter environments. Requires Dart SDK to be installed.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/packages/powersync_core/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndart pub add powersync_core\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Command for Flutter Assembly\nDESCRIPTION: Adds a custom command that executes the Flutter tool backend script to assemble the Flutter library and headers. The command is triggered every time due to the `_phony_` file dependency. It also configures the environment using `FLUTTER_TOOL_ENVIRONMENT`.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/benchmarks/linux/flutter/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CMAKE_CURRENT_BINARY_DIR}/_phony_\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.sh\"\n      ${FLUTTER_TARGET_PLATFORM} ${CMAKE_BUILD_TYPE}\n  VERBATIM\n)\n```\n\n----------------------------------------\n\nTITLE: Including Generated Configuration\nDESCRIPTION: Includes the generated configuration file from the ephemeral directory. This file contains configuration settings provided by the Flutter tool.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/benchmarks/windows/flutter/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(${EPHEMERAL_DIR}/generated_config.cmake)\n```\n\n----------------------------------------\n\nTITLE: Including generated plugins\nDESCRIPTION: Includes the generated plugins CMake file. This manages building the plugins and adding them to the application.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-anonymous-auth/windows/CMakeLists.txt#_snippet_10\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(flutter/generated_plugins.cmake)\n```\n\n----------------------------------------\n\nTITLE: Defining List Prepend Function\nDESCRIPTION: Defines a CMake function `list_prepend` to prepend a prefix to each element in a list. This function is used to modify list variables by adding a specified prefix to each element, which is useful for updating paths or adding namespaces.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-trello/linux/flutter/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(list_prepend LIST_NAME PREFIX)\n    set(NEW_LIST \"\")\n    foreach(element ${${LIST_NAME}})\n        list(APPEND NEW_LIST \"${PREFIX}${element}\")\n    endforeach(element)\n    set(${LIST_NAME} \"${NEW_LIST}\" PARENT_SCOPE)\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Adding Link Libraries and Include Directories\nDESCRIPTION: Specifies libraries to link against the executable target. It links against flutter, flutter_wrapper_app, and dwmapi.lib. Adds the source directory to the include paths so the compiled code can locate header files. This section is for application-specific dependencies.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-todolist-drift/windows/runner/CMakeLists.txt#_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter flutter_wrapper_app)\ntarget_link_libraries(${BINARY_NAME} PRIVATE \"dwmapi.lib\")\ntarget_include_directories(${BINARY_NAME} PRIVATE \"${CMAKE_SOURCE_DIR}\")\n```\n\n----------------------------------------\n\nTITLE: Adding Flutter Wrapper Plugin Library\nDESCRIPTION: This snippet adds a static library named 'flutter_wrapper_plugin'. This library includes the core and plugin wrapper sources and is used for building Flutter plugins.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-todolist/windows/flutter/CMakeLists.txt#_snippet_17\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(flutter_wrapper_plugin STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Flutter Wrapper App Library\nDESCRIPTION: Creates a static library for the Flutter wrapper app. It includes core and app sources, applies standard settings, and links against the Flutter interface.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/benchmarks/windows/flutter/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND CPP_WRAPPER_SOURCES_APP\n  \"flutter_engine.cc\"\n  \"flutter_view_controller.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_APP PREPEND \"${WRAPPER_ROOT}/\")\n\n# Wrapper sources needed for the runner.\nadd_library(flutter_wrapper_app STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\napply_standard_settings(flutter_wrapper_app)\ntarget_link_libraries(flutter_wrapper_app PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_app PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_app flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Including Generated Configuration\nDESCRIPTION: Includes the generated configuration file from the ephemeral directory. This file contains settings provided by the Flutter tool.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-trello/windows/flutter/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(${EPHEMERAL_DIR}/generated_config.cmake)\n```\n\n----------------------------------------\n\nTITLE: Setting up PowerSync SQLCipher for Web\nDESCRIPTION: This command is used to set up the necessary web assets for the `powersync_sqlcipher` package.  This command downloads the required assets into your project directory to enable the package on web platforms. It ensures that the necessary components for web functionality are correctly configured.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/packages/powersync_sqlcipher/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndart run powersync_sqlcipher:setup_web\n```\n\n----------------------------------------\n\nTITLE: Appending Flutter Library Headers\nDESCRIPTION: This snippet appends a list of header files to the `FLUTTER_LIBRARY_HEADERS` variable. These headers are necessary for interacting with the Flutter engine.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-todolist/windows/flutter/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND FLUTTER_LIBRARY_HEADERS\n  \"flutter_export.h\"\n  \"flutter_windows.h\"\n  \"flutter_messenger.h\"\n  \"flutter_plugin_registrar.h\"\n  \"flutter_texture_registrar.h\"\n)\n```\n\n----------------------------------------\n\nTITLE: Applying Standard Compilation Settings\nDESCRIPTION: This snippet defines a function `APPLY_STANDARD_SETTINGS` that applies standard compilation features, options, and definitions to a given target. It includes enabling C++17 standard, setting warning levels, and disabling exceptions.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/firebase-nodejs-todolist/windows/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_17)\n  target_compile_options(${TARGET} PRIVATE /W4 /WX /wd\"4100\")\n  target_compile_options(${TARGET} PRIVATE /EHsc)\n  target_compile_definitions(${TARGET} PRIVATE \"_HAS_EXCEPTIONS=0\")\n  target_compile_definitions(${TARGET} PRIVATE \"$<$<CONFIG:Debug>:_DEBUG>\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Command for Flutter Assembly\nDESCRIPTION: Adds a custom command to invoke the Flutter tool backend script. This script is responsible for assembling the Flutter runtime environment, including generating the Flutter library and headers. The `_phony_` file is used to force the command to run every time. The command sets up an environment with Flutter tool variables and runs `tool_backend.sh`.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-anonymous-auth/linux/flutter/CMakeLists.txt#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CMAKE_CURRENT_BINARY_DIR}/_phony_\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.sh\"\n      ${FLUTTER_TARGET_PLATFORM} ${CMAKE_BUILD_TYPE}\n  VERBATIM\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Flutter Library Path\nDESCRIPTION: Sets the FLUTTER_LIBRARY variable to the path of the Flutter Windows DLL. It also sets FLUTTER_ICU_DATA_FILE and PROJECT_BUILD_DIR, making them available in the parent scope for the install step.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/django-todolist/windows/flutter/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nset(FLUTTER_LIBRARY \"${EPHEMERAL_DIR}/flutter_windows.dll\")\n\n# Published to parent scope for install step.\nset(FLUTTER_LIBRARY ${FLUTTER_LIBRARY} PARENT_SCOPE)\nset(FLUTTER_ICU_DATA_FILE \"${EPHEMERAL_DIR}/icudtl.dat\" PARENT_SCOPE)\nset(PROJECT_BUILD_DIR \"${PROJECT_DIR}/build/\" PARENT_SCOPE)\nset(AOT_LIBRARY \"${PROJECT_DIR}/build/windows/app.so\" PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Add Custom Target for Flutter Assembly\nDESCRIPTION: Adds a custom target `flutter_assemble` that depends on the output of the Flutter assembly command.  This ensures that the Flutter library and headers are built before any targets that depend on them.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-todolist/linux/flutter/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_target(flutter_assemble DEPENDS\n  \"${FLUTTER_LIBRARY}\"\n  ${FLUTTER_LIBRARY_HEADERS}\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Standard Compile Settings CMake\nDESCRIPTION: This CMake function applies standard compilation settings to a target. It sets the C++ standard to C++17, enables specific warning levels, and disables exceptions. It also adds a debug definition for debug configurations.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-edge-function-auth/windows/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_17)\n  target_compile_options(${TARGET} PRIVATE /W4 /WX /wd\"4100\")\n  target_compile_options(${TARGET} PRIVATE /EHsc)\n  target_compile_definitions(${TARGET} PRIVATE \"_HAS_EXCEPTIONS=0\")\n  target_compile_definitions(${TARGET} PRIVATE \"$<$<CONFIG:Debug>:_DEBUG>\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Prepending Ephemeral Directory to Headers\nDESCRIPTION: This snippet transforms the `FLUTTER_LIBRARY_HEADERS` list by prepending the ephemeral directory to each header file path. This ensures that the correct header files are included during compilation.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-todolist/windows/flutter/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nlist(TRANSFORM FLUTTER_LIBRARY_HEADERS PREPEND \"${EPHEMERAL_DIR}/\")\n```\n\n----------------------------------------\n\nTITLE: Initializing CMake Project\nDESCRIPTION: This snippet initializes the CMake project, specifying the minimum required CMake version and the project name along with the supported languages. It sets up the foundation for building the Flutter application on Windows.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/firebase-nodejs-todolist/windows/runner/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\nproject(runner LANGUAGES CXX)\n```\n\n----------------------------------------\n\nTITLE: Including Runner Build Rules\nDESCRIPTION: Includes the application build rules from the 'runner' subdirectory, configuring how the main application executable is built.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/django-todolist/windows/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(\"runner\")\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Target for Flutter Assembly\nDESCRIPTION: Adds a custom target named `flutter_assemble` that depends on the Flutter library and headers. This target ensures that the custom command to generate these files is executed before any other target that depends on them.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-trello/linux/flutter/CMakeLists.txt#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_target(flutter_assemble DEPENDS\n  \"${FLUTTER_LIBRARY}\"\n  ${FLUTTER_LIBRARY_HEADERS}\n)\n```\n\n----------------------------------------\n\nTITLE: Install ICU Data File\nDESCRIPTION: Installs the ICU data file to the data directory within the installation prefix. This file is necessary for internationalization support. Installs the ICU data file, which is needed for internationalization, into the data directory.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/benchmarks/windows/CMakeLists.txt#_snippet_16\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(FILES \"${FLUTTER_ICU_DATA_FILE}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Create Flutter Wrapper App Library\nDESCRIPTION: Creates a static library for the Flutter wrapper application. This library includes core and application-specific wrapper sources, links against the Flutter interface library, and sets the target to include directories.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-anonymous-auth/windows/flutter/CMakeLists.txt#_snippet_12\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(flutter_wrapper_app STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\napply_standard_settings(flutter_wrapper_app)\ntarget_link_libraries(flutter_wrapper_app PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_app PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_app flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Configuring Build Types CMake\nDESCRIPTION: This code snippet configures the build types (Debug, Profile, Release) for the project. It detects whether the generator is multi-configuration and sets the appropriate variables. If no build type is specified, it defaults to Debug.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-edge-function-auth/windows/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nget_property(IS_MULTICONFIG GLOBAL PROPERTY GENERATOR_IS_MULTI_CONFIG)\nif(IS_MULTICONFIG)\n  set(CMAKE_CONFIGURATION_TYPES \"Debug;Profile;Release\"\n    CACHE STRING \"\" FORCE)\nelse()\n  if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n    set(CMAKE_BUILD_TYPE \"Debug\" CACHE\n      STRING \"Flutter build mode\" FORCE)\n    set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS\n      \"Debug\" \"Profile\" \"Release\")\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Define Build Configuration Option\nDESCRIPTION: This snippet determines if the build is multi-configuration (e.g., Visual Studio) and sets the available build types (Debug, Profile, Release) accordingly.  If not multi-config, it sets the CMAKE_BUILD_TYPE to Debug by default and sets the valid options to \"Debug\", \"Profile\", and \"Release\".\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-todolist-drift/windows/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nget_property(IS_MULTICONFIG GLOBAL PROPERTY GENERATOR_IS_MULTI_CONFIG)\nif(IS_MULTICONFIG)\n  set(CMAKE_CONFIGURATION_TYPES \"Debug;Profile;Release\"\n    CACHE STRING \"\" FORCE)\nelse()\n  if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n    set(CMAKE_BUILD_TYPE \"Debug\" CACHE\n      STRING \"Flutter build mode\" FORCE)\n    set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS\n      \"Debug\" \"Profile\" \"Release\")\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Build Configuration Options\nDESCRIPTION: This snippet defines build configuration options for different build modes (Debug, Profile, Release). It sets linker and compiler flags specific to the Profile build mode and handles scenarios where `CMAKE_BUILD_TYPE` is not initially defined.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/firebase-nodejs-todolist/windows/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nget_property(IS_MULTICONFIG GLOBAL PROPERTY GENERATOR_IS_MULTI_CONFIG)\nif(IS_MULTICONFIG)\n  set(CMAKE_CONFIGURATION_TYPES \"Debug;Profile;Release\"\n    CACHE STRING \"\" FORCE)\nelse()\n  if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n    set(CMAKE_BUILD_TYPE \"Debug\" CACHE\n      STRING \"Flutter build mode\" FORCE)\n    set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS\n      \"Debug\" \"Profile\" \"Release\")\n  endif()\nendif()\n# Define settings for the Profile build mode.\nset(CMAKE_EXE_LINKER_FLAGS_PROFILE \"${CMAKE_EXE_LINKER_FLAGS_RELEASE}\")\nset(CMAKE_SHARED_LINKER_FLAGS_PROFILE \"${CMAKE_SHARED_LINKER_FLAGS_RELEASE}\")\nset(CMAKE_C_FLAGS_PROFILE \"${CMAKE_C_FLAGS_RELEASE}\")\nset(CMAKE_CXX_FLAGS_PROFILE \"${CMAKE_CXX_FLAGS_RELEASE}\")\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Minimum Version\nDESCRIPTION: This snippet sets the minimum required CMake version for the project. It ensures that the CMake version used is at least 3.14, which is necessary for the project's features and functionalities to work correctly.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-todolist/windows/flutter/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\n```\n\n----------------------------------------\n\nTITLE: Setting Project Properties in CMake\nDESCRIPTION: This snippet sets project properties such as the minimum required CMake version, project name, and binary name. It also handles build configuration settings (Debug, Profile, Release) and sets linker and compiler flags for the Profile build mode based on the Release mode. Finally, it defines Unicode settings for the project.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-todolist-optional-sync/windows/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\nproject(powersync_flutter_demo LANGUAGES CXX)\n\n# The name of the executable created for the application. Change this to change\n# the on-disk name of your application.\nset(BINARY_NAME \"powersync_flutter_demo\")\n\n# Explicitly opt in to modern CMake behaviors to avoid warnings with recent\n# versions of CMake.\ncmake_policy(SET CMP0063 NEW)\n\n# Define build configuration option.\nget_property(IS_MULTICONFIG GLOBAL PROPERTY GENERATOR_IS_MULTI_CONFIG)\nif(IS_MULTICONFIG)\n  set(CMAKE_CONFIGURATION_TYPES \"Debug;Profile;Release\"\n    CACHE STRING \"\" FORCE)\nelse()\n  if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n    set(CMAKE_BUILD_TYPE \"Debug\" CACHE\n      STRING \"Flutter build mode\" FORCE)\n    set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS\n      \"Debug\" \"Profile\" \"Release\")\n  endif()\nendif()\n# Define settings for the Profile build mode.\nset(CMAKE_EXE_LINKER_FLAGS_PROFILE \"${CMAKE_EXE_LINKER_FLAGS_RELEASE}\")\nset(CMAKE_SHARED_LINKER_FLAGS_PROFILE \"${CMAKE_SHARED_LINKER_FLAGS_RELEASE}\")\nset(CMAKE_C_FLAGS_PROFILE \"${CMAKE_C_FLAGS_RELEASE}\")\nset(CMAKE_CXX_FLAGS_PROFILE \"${CMAKE_CXX_FLAGS_RELEASE}\")\n\n# Use Unicode for all projects.\nadd_definitions(-DUNICODE -D_UNICODE)\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Target for Flutter Assembly\nDESCRIPTION: Adds a custom target named 'flutter_assemble' that depends on the Flutter library, headers, and wrapper sources. This target triggers the Flutter tool backend to generate the necessary build artifacts.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-trello/windows/flutter/CMakeLists.txt#_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_target(flutter_assemble DEPENDS\n  \"${FLUTTER_LIBRARY}\"\n  ${FLUTTER_LIBRARY_HEADERS}\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Flutter Library Headers List\nDESCRIPTION: Creates a list (`FLUTTER_LIBRARY_HEADERS`) of header files required for the Flutter library. These header files provide the necessary interfaces for interacting with the Flutter engine.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-trello/linux/flutter/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND FLUTTER_LIBRARY_HEADERS\n  \"fl_basic_message_channel.h\"\n  \"fl_binary_codec.h\"\n  \"fl_binary_messenger.h\"\n  \"fl_dart_project.h\"\n  \"fl_engine.h\"\n  \"fl_json_message_codec.h\"\n  \"fl_json_method_codec.h\"\n  \"fl_message_codec.h\"\n  \"fl_method_call.h\"\n  \"fl_method_channel.h\"\n  \"fl_method_codec.h\"\n  \"fl_method_response.h\"\n  \"fl_plugin_registrar.h\"\n  \"fl_plugin_registry.h\"\n  \"fl_standard_message_codec.h\"\n  \"fl_standard_method_codec.h\"\n  \"fl_string_codec.h\"\n  \"fl_value.h\"\n  \"fl_view.h\"\n  \"flutter_linux.h\"\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Target for Flutter Assembly\nDESCRIPTION: Creates a custom target named `flutter_assemble` that depends on the Flutter library and headers. This ensures that the custom command to assemble the Flutter components is executed before any targets that depend on `flutter_assemble`.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/benchmarks/linux/flutter/CMakeLists.txt#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_target(flutter_assemble DEPENDS\n  \"${FLUTTER_LIBRARY}\"\n  ${FLUTTER_LIBRARY_HEADERS}\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories for App Wrapper\nDESCRIPTION: This snippet adds the wrapper include directory to the include directories for the 'flutter_wrapper_app' target. This allows the application wrapper code to find the necessary header files.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-todolist/windows/flutter/CMakeLists.txt#_snippet_26\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_include_directories(flutter_wrapper_app PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Wrapper Root Directory\nDESCRIPTION: Sets the variable WRAPPER_ROOT to the path of the C++ client wrapper directory, located within the ephemeral directory.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-trello/windows/flutter/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(WRAPPER_ROOT \"${EPHEMERAL_DIR}/cpp_client_wrapper\")\n```\n\n----------------------------------------\n\nTITLE: Adding Preprocessor Definitions\nDESCRIPTION: Adds preprocessor definitions to the executable target. These definitions expose Flutter version information (version string, major, minor, patch, and build numbers) to the C++ code, allowing the application to access these values at compile time.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-trello/windows/runner/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION=\\\"${FLUTTER_VERSION}\\\"\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_MAJOR=${FLUTTER_VERSION_MAJOR}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_MINOR=${FLUTTER_VERSION_MINOR}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_PATCH=${FLUTTER_VERSION_PATCH}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_BUILD=${FLUTTER_VERSION_BUILD}\")\n```\n\n----------------------------------------\n\nTITLE: Appending Flutter Library Headers\nDESCRIPTION: Creates a list of header files that are part of the Flutter library interface. These headers provide the necessary declarations for interacting with the Flutter engine and associated components. The headers are appended to the `FLUTTER_LIBRARY_HEADERS` list.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-anonymous-auth/linux/flutter/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND FLUTTER_LIBRARY_HEADERS\n  \"fl_basic_message_channel.h\"\n  \"fl_binary_codec.h\"\n  \"fl_binary_messenger.h\"\n  \"fl_dart_project.h\"\n  \"fl_engine.h\"\n  \"fl_json_message_codec.h\"\n  \"fl_json_method_codec.h\"\n  \"fl_message_codec.h\"\n  \"fl_method_call.h\"\n  \"fl_method_channel.h\"\n  \"fl_method_codec.h\"\n  \"fl_method_response.h\"\n  \"fl_plugin_registrar.h\"\n  \"fl_plugin_registry.h\"\n  \"fl_standard_message_codec.h\"\n  \"fl_standard_method_codec.h\"\n  \"fl_string_codec.h\"\n  \"fl_value.h\"\n  \"fl_view.h\"\n  \"flutter_linux.h\"\n)\n```\n\n----------------------------------------\n\nTITLE: Appending Core Wrapper Sources\nDESCRIPTION: This snippet appends core C++ wrapper source files to the `CPP_WRAPPER_SOURCES_CORE` list. These files provide basic functionalities for interacting with the Flutter engine from C++.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-todolist/windows/flutter/CMakeLists.txt#_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND CPP_WRAPPER_SOURCES_CORE\n  \"core_implementations.cc\"\n  \"standard_codec.cc\"\n)\n```\n\n----------------------------------------\n\nTITLE: Configure ADB Reverse\nDESCRIPTION: These shell commands configure ADB reverse for Android, allowing the app running on an Android device or emulator to connect to the PowerSync service running on localhost. This is necessary because the Android device's localhost is different from the host machine's localhost.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/benchmarks/README.md#_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nadb reverse tcp:8080 tcp:8080\nadb reverse tcp:6060 tcp:6060\n```\n\n----------------------------------------\n\nTITLE: Appending Flutter Library Headers\nDESCRIPTION: Appends a list of Flutter library header files to the FLUTTER_LIBRARY_HEADERS list. Then, it prepends the EPHEMERAL_DIR path to each header file path.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-trello/windows/flutter/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND FLUTTER_LIBRARY_HEADERS\n  \"flutter_export.h\"\n  \"flutter_windows.h\"\n  \"flutter_messenger.h\"\n  \"flutter_plugin_registrar.h\"\n  \"flutter_texture_registrar.h\"\n)\nlist(TRANSFORM FLUTTER_LIBRARY_HEADERS PREPEND \"${EPHEMERAL_DIR}/\")\n```\n\n----------------------------------------\n\nTITLE: Adding Flutter managed directory as subdirectory\nDESCRIPTION: Adds the Flutter managed directory as a subdirectory to the current CMake project.  This allows CMake to build the Flutter-related components.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-trello/windows/CMakeLists.txt#_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\nset(FLUTTER_MANAGED_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/flutter\")\nadd_subdirectory(${FLUTTER_MANAGED_DIR})\n```\n\n----------------------------------------\n\nTITLE: Linking Flutter to Plugin Wrapper\nDESCRIPTION: This snippet links the 'flutter' interface library to the 'flutter_wrapper_plugin' target. This establishes the dependency between the plugin wrapper and the Flutter engine.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-todolist/windows/flutter/CMakeLists.txt#_snippet_20\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_link_libraries(flutter_wrapper_plugin PUBLIC flutter)\n```\n\n----------------------------------------\n\nTITLE: Creating Flutter Wrapper Plugin Library\nDESCRIPTION: Creates a static library named 'flutter_wrapper_plugin'. This library contains the C++ wrapper sources needed for a Flutter plugin. It links against the 'flutter' interface library.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-trello/windows/flutter/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(flutter_wrapper_plugin STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n)\napply_standard_settings(flutter_wrapper_plugin)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  POSITION_INDEPENDENT_CODE ON)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  CXX_VISIBILITY_PRESET hidden)\ntarget_link_libraries(flutter_wrapper_plugin PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_plugin PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_plugin flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Create Flutter Interface Library\nDESCRIPTION: Defines an interface library named `flutter`.  This library specifies include directories and link libraries required to use the Flutter engine in the application.  The `flutter_assemble` target is added as a dependency.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-todolist/linux/flutter/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(flutter INTERFACE)\ntarget_include_directories(flutter INTERFACE\n  \"${EPHEMERAL_DIR}\"\n)\ntarget_link_libraries(flutter INTERFACE \"${FLUTTER_LIBRARY}\")\ntarget_link_libraries(flutter INTERFACE\n  PkgConfig::GTK\n  PkgConfig::GLIB\n  PkgConfig::GIO\n)\nadd_dependencies(flutter flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Opting into modern CMake behaviors\nDESCRIPTION: Enables modern CMake behaviors to prevent warnings with newer CMake versions.  Specifically, it sets the CMP0063 policy to NEW.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-trello/windows/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_policy(SET CMP0063 NEW)\n```\n\n----------------------------------------\n\nTITLE: Define C++ Wrapper Sources (App)\nDESCRIPTION: Defines a list of source files for the application-related C++ wrapper. These files provide functionality for managing the Flutter engine and view controller.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-edge-function-auth/windows/flutter/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND CPP_WRAPPER_SOURCES_APP\n  \"flutter_engine.cc\"\n  \"flutter_view_controller.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_APP PREPEND \"${WRAPPER_ROOT}/\")\n```\n\n----------------------------------------\n\nTITLE: Setting Ephemeral Directory\nDESCRIPTION: Sets the variable `EPHEMERAL_DIR` to point to the `ephemeral` directory within the current source directory. This directory contains generated configuration files and other build artifacts.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-todolist-optional-sync/windows/flutter/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(EPHEMERAL_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/ephemeral\")\n```\n\n----------------------------------------\n\nTITLE: Adding include directories\nDESCRIPTION: Adds include directories to the executable target `${BINARY_NAME}`.  `CMAKE_SOURCE_DIR` specifies the root directory of the CMake project.  This allows the compiler to find header files.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-todolist-optional-sync/windows/runner/CMakeLists.txt#_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_include_directories(${BINARY_NAME} PRIVATE \"${CMAKE_SOURCE_DIR}\")\n```\n\n----------------------------------------\n\nTITLE: Adding Dependency on Flutter Assemble Target\nDESCRIPTION: This snippet adds a dependency to the `flutter` interface library on the `flutter_assemble` custom target. This ensures that the Flutter library and headers are assembled before any target that depends on the `flutter` library is built.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-todolist-optional-sync/linux/flutter/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nadd_dependencies(flutter flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Opting into modern CMake behaviors\nDESCRIPTION: Explicitly opts in to modern CMake behaviors to avoid warnings with recent versions of CMake. This ensures compatibility and best practices.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-anonymous-auth/windows/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_policy(SET CMP0063 NEW)\n```\n\n----------------------------------------\n\nTITLE: Create Flutter Wrapper Plugin Library\nDESCRIPTION: Creates a static library for the Flutter wrapper plugin. This library includes core and plugin-specific wrapper sources, links against the Flutter interface library, and sets target properties for position-independent code and hidden visibility.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-anonymous-auth/windows/flutter/CMakeLists.txt#_snippet_11\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(flutter_wrapper_plugin STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n)\napply_standard_settings(flutter_wrapper_plugin)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  POSITION_INDEPENDENT_CODE ON)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  CXX_VISIBILITY_PRESET hidden)\ntarget_link_libraries(flutter_wrapper_plugin PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_plugin PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_plugin flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Setting Wrapper Root Directory\nDESCRIPTION: This snippet defines the `WRAPPER_ROOT` variable, which points to the 'cpp_client_wrapper' directory inside the ephemeral directory. This directory contains the C++ wrapper code for Flutter plugins and the application itself.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-todolist/windows/flutter/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(WRAPPER_ROOT \"${EPHEMERAL_DIR}/cpp_client_wrapper\")\n```\n\n----------------------------------------\n\nTITLE: Creating Flutter Interface Library\nDESCRIPTION: This snippet creates an interface library named `flutter`. Interface libraries are used to propagate usage requirements like include directories and link libraries without actually building any code. It sets the include directories and link libraries for the Flutter library and GTK dependencies.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-todolist-optional-sync/linux/flutter/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(flutter INTERFACE)\ntarget_include_directories(flutter INTERFACE\n  \"${EPHEMERAL_DIR}\"\n)\ntarget_link_libraries(flutter INTERFACE \"${FLUTTER_LIBRARY}\")\ntarget_link_libraries(flutter INTERFACE\n  PkgConfig::GTK\n  PkgConfig::GLIB\n  PkgConfig::GIO\n)\n```\n\n----------------------------------------\n\nTITLE: Applying standard settings\nDESCRIPTION: Defines a function to apply standard compilation settings to a target. This includes setting the C++ standard to 17, adding compiler options for warnings and exceptions, and defining configuration-specific macros.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-anonymous-auth/windows/CMakeLists.txt#_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_17)\n  target_compile_options(${TARGET} PRIVATE /W4 /WX /wd\"4100\")\n  target_compile_options(${TARGET} PRIVATE /EHsc)\n  target_compile_definitions(${TARGET} PRIVATE \"_HAS_EXCEPTIONS=0\")\n  target_compile_definitions(${TARGET} PRIVATE \"$<$<CONFIG:Debug>:_DEBUG>\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Definition of list_prepend function\nDESCRIPTION: Defines a function to prepend a prefix to each element in a list. This function simulates the list(TRANSFORM ... PREPEND ...) command, which is not available in CMake 3.10. It iterates through the list and appends the prefix to each element, then updates the original list in the parent scope.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-todolist-drift/linux/flutter/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(list_prepend LIST_NAME PREFIX)\n    set(NEW_LIST \"\")\n    foreach(element ${${LIST_NAME}})\n        list(APPEND NEW_LIST \"${PREFIX}${element}\")\n    endforeach(element)\n    set(${LIST_NAME} \"${NEW_LIST}\" PARENT_SCOPE)\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Setting Ephemeral Directory\nDESCRIPTION: Defines the ephemeral directory path, which is used to locate generated configuration files and libraries during the build process.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-simple-chat/linux/flutter/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(EPHEMERAL_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/ephemeral\")\n```\n\n----------------------------------------\n\nTITLE: Set Binary Name\nDESCRIPTION: Sets the name of the executable file produced by the build process. This ensures a consistent naming convention for the output binary. By default, the binary name is set to 'benchmarks'.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/benchmarks/windows/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(BINARY_NAME \"benchmarks\")\n```\n\n----------------------------------------\n\nTITLE: Defining list_prepend Function\nDESCRIPTION: Defines a CMake function `list_prepend` that prepends a specified prefix to each element in a given list. This function simulates the `list(TRANSFORM ... PREPEND ...)` command, which isn't available in CMake 3.10.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/benchmarks/linux/flutter/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(list_prepend LIST_NAME PREFIX)\n    set(NEW_LIST \"\")\n    foreach(element ${${LIST_NAME}})\n        list(APPEND NEW_LIST \"${PREFIX}${element}\")\n    endforeach(element)\n    set(${LIST_NAME} \"${NEW_LIST}\" PARENT_SCOPE)\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Create Flutter Assemble Target\nDESCRIPTION: Creates a custom target named 'flutter_assemble' that depends on the Flutter library and wrapper sources. This target triggers the execution of the custom command that generates these files.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-anonymous-auth/windows/flutter/CMakeLists.txt#_snippet_14\n\nLANGUAGE: CMake\nCODE:\n```\nadd_custom_target(flutter_assemble DEPENDS\n  \"${FLUTTER_LIBRARY}\"\n  ${FLUTTER_LIBRARY_HEADERS}\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\n```\n\n----------------------------------------\n\nTITLE: Defining preprocessor definitions\nDESCRIPTION: Adds preprocessor definitions to the compilation process for the target `${BINARY_NAME}`. These definitions provide information about the Flutter version. The `PRIVATE` keyword ensures that these definitions are only visible within the current target.  The definitions use variables set elsewhere to define the version components.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-todolist-optional-sync/windows/runner/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION=\\\"${FLUTTER_VERSION}\\\"\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_MAJOR=${FLUTTER_VERSION_MAJOR}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_MINOR=${FLUTTER_VERSION_MINOR}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_PATCH=${FLUTTER_VERSION_PATCH}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_BUILD=${FLUTTER_VERSION_BUILD}\")\n```\n\n----------------------------------------\n\nTITLE: Creating Flutter Library Interface\nDESCRIPTION: Creates an interface library for Flutter.  Headers are added and linked, and a dependency on flutter_assemble is created to ensure the Flutter library is assembled before linking.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/benchmarks/windows/flutter/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND FLUTTER_LIBRARY_HEADERS\n  \"flutter_export.h\"\n  \"flutter_windows.h\"\n  \"flutter_messenger.h\"\n  \"flutter_plugin_registrar.h\"\n  \"flutter_texture_registrar.h\"\n)\nlist(TRANSFORM FLUTTER_LIBRARY_HEADERS PREPEND \"${EPHEMERAL_DIR}/\")\nadd_library(flutter INTERFACE)\ntarget_include_directories(flutter INTERFACE\n  \"${EPHEMERAL_DIR}\"\n)\ntarget_link_libraries(flutter INTERFACE \"${FLUTTER_LIBRARY}.lib\")\nadd_dependencies(flutter flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Install Application Executable\nDESCRIPTION: This snippet installs the application executable to the specified destination directory. The `COMPONENT Runtime` specifies that this is part of the runtime component.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-todolist-drift/windows/CMakeLists.txt#_snippet_10\n\nLANGUAGE: CMake\nCODE:\n```\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Defining Build Configuration Options\nDESCRIPTION: This section defines and manages the build configuration options (Debug, Profile, Release) based on whether the generator is multi-config or not. It ensures a build type is set if none is provided.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/django-todolist/windows/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nget_property(IS_MULTICONFIG GLOBAL PROPERTY GENERATOR_IS_MULTI_CONFIG)\nif(IS_MULTICONFIG)\n  set(CMAKE_CONFIGURATION_TYPES \"Debug;Profile;Release\"\n    CACHE STRING \"\" FORCE)\nelse()\n  if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n    set(CMAKE_BUILD_TYPE \"Debug\" CACHE\n      STRING \"Flutter build mode\" FORCE)\n    set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS\n      \"Debug\" \"Profile\" \"Release\")\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Minimum Version\nDESCRIPTION: This sets the minimum required CMake version to 3.10. This is crucial for ensuring compatibility with the features and syntax used in the CMake script.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-anonymous-auth/linux/flutter/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.10)\n```\n\n----------------------------------------\n\nTITLE: Installing Assets Directory\nDESCRIPTION: This snippet configures the installation of the assets directory. It removes the existing directory and copies the latest assets to ensure the application always uses the most recent version.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-simple-chat/windows/CMakeLists.txt#_snippet_10\n\nLANGUAGE: CMake\nCODE:\n```\nset(FLUTTER_ASSET_DIR_NAME \"flutter_assets\")\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\\\")\n  \" COMPONENT Runtime)\ninstall(DIRECTORY \"${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}\"\n  DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\" COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Include Flutter Build Rules\nDESCRIPTION: This snippet includes the Flutter library and tool build rules by adding the 'flutter' subdirectory.  This allows CMake to build the Flutter part of the app.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-todolist-drift/windows/CMakeLists.txt#_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nset(FLUTTER_MANAGED_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/flutter\")\nadd_subdirectory(${FLUTTER_MANAGED_DIR})\n```\n\n----------------------------------------\n\nTITLE: Set Flutter Library Variable\nDESCRIPTION: Defines the path to the Flutter library (`libflutter_linux_gtk.so`). This variable is published to the parent scope for use in the installation step.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-todolist/linux/flutter/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_LIBRARY \"${EPHEMERAL_DIR}/libflutter_linux_gtk.so\")\n\n# Published to parent scope for install step.\nset(FLUTTER_LIBRARY ${FLUTTER_LIBRARY} PARENT_SCOPE)\nset(FLUTTER_ICU_DATA_FILE \"${EPHEMERAL_DIR}/icudtl.dat\" PARENT_SCOPE)\nset(PROJECT_BUILD_DIR \"${PROJECT_DIR}/build/\" PARENT_SCOPE)\nset(AOT_LIBRARY \"${PROJECT_DIR}/build/lib/libapp.so\" PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Adding Flutter as a Subdirectory\nDESCRIPTION: This snippet adds the Flutter directory as a subdirectory, allowing CMake to build the Flutter-related parts of the application.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/django-todolist/linux/CMakeLists.txt#_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\n# Flutter library and tool build rules.\nset(FLUTTER_MANAGED_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/flutter\")\nadd_subdirectory(${FLUTTER_MANAGED_DIR})\n```\n\n----------------------------------------\n\nTITLE: Setting Ephemeral Directory\nDESCRIPTION: Sets the `EPHEMERAL_DIR` variable to point to the ephemeral directory within the project's source directory. This directory likely contains generated files or temporary build artifacts.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/benchmarks/linux/flutter/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(EPHEMERAL_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/ephemeral\")\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Minimum Version\nDESCRIPTION: Sets the minimum required CMake version for the build process. This ensures that the build system has the necessary features and capabilities to execute the build configuration correctly.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/benchmarks/linux/flutter/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.10)\n```\n\n----------------------------------------\n\nTITLE: Define C++ Wrapper Sources (App)\nDESCRIPTION: Defines the C++ wrapper sources specific to the application. These sources handle the Flutter engine and view controller.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-anonymous-auth/windows/flutter/CMakeLists.txt#_snippet_10\n\nLANGUAGE: CMake\nCODE:\n```\nlist(APPEND CPP_WRAPPER_SOURCES_APP\n  \"flutter_engine.cc\"\n  \"flutter_view_controller.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_APP PREPEND \"${WRAPPER_ROOT}/\")\n```\n\n----------------------------------------\n\nTITLE: Setting Flutter Library Headers\nDESCRIPTION: Creates a list of Flutter library header files and prepends the path to the ephemeral directory. It then creates an interface library 'flutter' and sets include directories and link libraries.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/django-todolist/windows/flutter/CMakeLists.txt#_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nlist(APPEND FLUTTER_LIBRARY_HEADERS\n  \"flutter_export.h\"\n  \"flutter_windows.h\"\n  \"flutter_messenger.h\"\n  \"flutter_plugin_registrar.h\"\n  \"flutter_texture_registrar.h\"\n)\nlist(TRANSFORM FLUTTER_LIBRARY_HEADERS PREPEND \"${EPHEMERAL_DIR}/\")\nadd_library(flutter INTERFACE)\ntarget_include_directories(flutter INTERFACE\n  \"${EPHEMERAL_DIR}\"\n)\ntarget_link_libraries(flutter INTERFACE \"${FLUTTER_LIBRARY}.lib\")\nadd_dependencies(flutter flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Appending Flutter Library Headers\nDESCRIPTION: Defines a list of Flutter library header files and prepends the path to the ephemeral directory. This list is used to specify include directories for the Flutter interface.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-simple-chat/linux/flutter/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND FLUTTER_LIBRARY_HEADERS\n  \"fl_basic_message_channel.h\"\n  \"fl_binary_codec.h\"\n  \"fl_binary_messenger.h\"\n  \"fl_dart_project.h\"\n  \"fl_engine.h\"\n  \"fl_json_message_codec.h\"\n  \"fl_json_method_codec.h\"\n  \"fl_message_codec.h\"\n  \"fl_method_call.h\"\n  \"fl_method_channel.h\"\n  \"fl_method_codec.h\"\n  \"fl_method_response.h\"\n  \"fl_plugin_registrar.h\"\n  \"fl_plugin_registry.h\"\n  \"fl_standard_message_codec.h\"\n  \"fl_standard_method_codec.h\"\n  \"fl_string_codec.h\"\n  \"fl_value.h\"\n  \"fl_view.h\"\n  \"flutter_linux.h\"\n)\nlist_prepend(FLUTTER_LIBRARY_HEADERS \"${EPHEMERAL_DIR}/flutter_linux/\")\n```\n\n----------------------------------------\n\nTITLE: Applying standard settings\nDESCRIPTION: Applies a standard set of build settings to the executable target `${BINARY_NAME}`.  This function is assumed to be defined elsewhere and configures common build options. It simplifies the CMake configuration by applying pre-defined settings.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-todolist-optional-sync/windows/runner/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\napply_standard_settings(${BINARY_NAME})\n```\n\n----------------------------------------\n\nTITLE: System Dependency Management (GTK)\nDESCRIPTION: Uses `find_package` to locate the PkgConfig module and `pkg_check_modules` to find the GTK library (version 3.0 or higher). The `REQUIRED IMPORTED_TARGET` arguments ensure that GTK is a required dependency and that an imported target named `PkgConfig::GTK` is created for linking.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-todolist/linux/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\n# System-level dependencies.\nfind_package(PkgConfig REQUIRED)\npkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk+-3.0)\n```\n\n----------------------------------------\n\nTITLE: Setting Ephemeral Directory Variable\nDESCRIPTION: Defines the `EPHEMERAL_DIR` variable to point to the 'ephemeral' directory within the current source directory. This directory contains generated configuration files and libraries used during the build process. It simplifies referencing files within this directory.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-edge-function-auth/linux/flutter/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(EPHEMERAL_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/ephemeral\")\n```\n\n----------------------------------------\n\nTITLE: Including Flutter Build Rules in CMake\nDESCRIPTION: This snippet includes Flutter library and tool build rules by adding the 'flutter' subdirectory. It also adds subdirectories for the application (runner) and includes generated plugin build rules from 'flutter/generated_plugins.cmake'. These rules manage building plugins and adding them to the application.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-todolist-optional-sync/windows/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\n# Flutter library and tool build rules.\nset(FLUTTER_MANAGED_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/flutter\")\nadd_subdirectory(${FLUTTER_MANAGED_DIR})\n\n# Application build; see runner/CMakeLists.txt.\nadd_subdirectory(\"runner\")\n\n# Generated plugin build rules, which manage building the plugins and adding\n# them to the application.\ninclude(flutter/generated_plugins.cmake)\n```\n\n----------------------------------------\n\nTITLE: Defining Build Configuration Options in CMake\nDESCRIPTION: This snippet defines the build configuration options, setting the CMAKE_BUILD_TYPE to \"Debug\" if it's not already defined. It also defines the allowed values for the CMAKE_BUILD_TYPE property.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-trello/linux/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nif(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n  set(CMAKE_BUILD_TYPE \"Debug\" CACHE\n    STRING \"Flutter build mode\" FORCE)\n  set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS\n    \"Debug\" \"Profile\" \"Release\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Flutter Library Headers\nDESCRIPTION: This snippet defines a list of Flutter library headers (`FLUTTER_LIBRARY_HEADERS`) and then prepends the path to the `flutter_linux` directory within the `EPHEMERAL_DIR` to each header file path using the custom `list_prepend` function defined earlier. This ensures that the compiler can find the necessary header files during the build process.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/django-todolist/linux/flutter/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND FLUTTER_LIBRARY_HEADERS\n  \"fl_basic_message_channel.h\"\n  \"fl_binary_codec.h\"\n  \"fl_binary_messenger.h\"\n  \"fl_dart_project.h\"\n  \"fl_engine.h\"\n  \"fl_json_message_codec.h\"\n  \"fl_json_method_codec.h\"\n  \"fl_message_codec.h\"\n  \"fl_method_call.h\"\n  \"fl_method_channel.h\"\n  \"fl_method_codec.h\"\n  \"fl_method_response.h\"\n  \"fl_plugin_registrar.h\"\n  \"fl_plugin_registry.h\"\n  \"fl_standard_message_codec.h\"\n  \"fl_standard_method_codec.h\"\n  \"fl_string_codec.h\"\n  \"fl_value.h\"\n  \"fl_view.h\"\n  \"flutter_linux.h\"\n)\nlist_prepend(FLUTTER_LIBRARY_HEADERS \"${EPHEMERAL_DIR}/flutter_linux/\")\n```\n\n----------------------------------------\n\nTITLE: Applying Standard Settings\nDESCRIPTION: This snippet applies the standard build settings, including compiler flags and linker options. It is a macro that encapsulates common settings for Flutter applications. Removing this is only advised when highly customized build configuration is required.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-simple-chat/windows/runner/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\napply_standard_settings(${BINARY_NAME})\n```\n\n----------------------------------------\n\nTITLE: Defining Compiler Definitions\nDESCRIPTION: This snippet defines preprocessor definitions for the build version. These definitions provide information about the Flutter version during compilation. It is important to define these to match the flutter version.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-simple-chat/windows/runner/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION=\\\"${FLUTTER_VERSION}\\\"\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_MAJOR=${FLUTTER_VERSION_MAJOR}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_MINOR=${FLUTTER_VERSION_MINOR}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_PATCH=${FLUTTER_VERSION_PATCH}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_BUILD=${FLUTTER_VERSION_BUILD}\")\n```\n\n----------------------------------------\n\nTITLE: Initializing CMake Project\nDESCRIPTION: This snippet initializes the CMake project, specifying the minimum required CMake version and the project language (CXX). It sets up the basic CMake environment for building the Flutter application runner.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-simple-chat/windows/runner/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\nproject(runner LANGUAGES CXX)\n```\n\n----------------------------------------\n\nTITLE: Initializing CMake project\nDESCRIPTION: Initializes a CMake project.  It specifies the minimum CMake version required and declares the project name and languages used (CXX). It is a necessary starting point for any CMake project.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-todolist-optional-sync/windows/runner/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\nproject(runner LANGUAGES CXX)\n```\n\n----------------------------------------\n\nTITLE: Set Ephemeral Directory Variable\nDESCRIPTION: Defines the path to the ephemeral directory where generated configuration files and build artifacts are stored.  This directory is typically managed by the Flutter tool.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-todolist/linux/flutter/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(EPHEMERAL_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/ephemeral\")\n```\n\n----------------------------------------\n\nTITLE: Adding include directories\nDESCRIPTION: This snippet adds the source directory to the include directories for the executable target. This allows the compiler to find header files in the project's source directory.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-anonymous-auth/windows/runner/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_include_directories(${BINARY_NAME} PRIVATE \"${CMAKE_SOURCE_DIR}\")\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Minimum Version\nDESCRIPTION: Specifies the minimum required version of CMake for the project. This ensures that the build system uses a compatible version of CMake to process the build configuration.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-todolist-drift/windows/flutter/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\n```\n\n----------------------------------------\n\nTITLE: Defining List Prepend Function\nDESCRIPTION: Defines a CMake function to prepend a prefix to each element in a list. This is used to construct paths to Flutter library headers.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-simple-chat/linux/flutter/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(list_prepend LIST_NAME PREFIX)\n    set(NEW_LIST \"\")\n    foreach(element ${${LIST_NAME}})\n        list(APPEND NEW_LIST \"${PREFIX}${element}\")\n    endforeach(element)\n    set(${LIST_NAME} \"${NEW_LIST}\" PARENT_SCOPE)\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Including generated plugins\nDESCRIPTION: This includes the generated plugins CMake file, which manages building the plugins and adding them to the application.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-simple-chat/linux/CMakeLists.txt#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(flutter/generated_plugins.cmake)\n```\n\n----------------------------------------\n\nTITLE: Configuring Installation Directory\nDESCRIPTION: This snippet configures the installation directory for the build output. It sets the install prefix to the build bundle directory, which is where the executable will reside.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-simple-chat/windows/CMakeLists.txt#_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\nset(BUILD_BUNDLE_DIR \"$<TARGET_FILE_DIR:${BINARY_NAME}>\")\n# Make the \"install\" step default, as it's required to run.\nset(CMAKE_VS_INCLUDE_INSTALL_TO_DEFAULT_BUILD 1)\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \"${BUILD_BUNDLE_DIR}\" CACHE PATH \"...\" FORCE)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Ephemeral Directory\nDESCRIPTION: Sets the variable EPHEMERAL_DIR to the path of the ephemeral directory. This directory contains generated configuration files and other build artifacts.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-trello/windows/flutter/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(EPHEMERAL_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/ephemeral\")\n```\n\n----------------------------------------\n\nTITLE: Linking libraries\nDESCRIPTION: This snippet links required libraries to the executable target.  It includes the flutter and flutter_wrapper_app libraries, as well as dwmapi.lib. These libraries provide essential functionalities for the Flutter application on Windows.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-anonymous-auth/windows/runner/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter flutter_wrapper_app)\ntarget_link_libraries(${BINARY_NAME} PRIVATE \"dwmapi.lib\")\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Minimum Version\nDESCRIPTION: Sets the minimum required CMake version for the project. This ensures that the build process uses a compatible version of CMake.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-todolist-optional-sync/windows/flutter/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\n```\n\n----------------------------------------\n\nTITLE: Including Generated Configuration\nDESCRIPTION: Includes a CMake file containing configurations generated by the Flutter tool. This file likely contains platform-specific settings and other necessary build configurations.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-todolist-drift/windows/flutter/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(${EPHEMERAL_DIR}/generated_config.cmake)\n```\n\n----------------------------------------\n\nTITLE: Installing assets directory\nDESCRIPTION: Installs the Flutter assets directory. It first removes the existing directory to ensure a clean install.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-anonymous-auth/windows/CMakeLists.txt#_snippet_13\n\nLANGUAGE: CMake\nCODE:\n```\nset(FLUTTER_ASSET_DIR_NAME \"flutter_assets\")\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\\\")\n  \" COMPONENT Runtime)\ninstall(DIRECTORY \"${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}\"\n  DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\" COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Project Definition\nDESCRIPTION: Defines the project name and supported languages (C++). The project name is used for various build-related tasks.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-trello/windows/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nproject(trelloappclone_flutter LANGUAGES CXX)\n```\n\n----------------------------------------\n\nTITLE: Set Minimum CMake Version\nDESCRIPTION: Specifies the minimum required version of CMake for the project. This ensures that the CMake version used is compatible with the commands and features used in the script.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-anonymous-auth/windows/flutter/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\n```\n\n----------------------------------------\n\nTITLE: Disabling Windows macros\nDESCRIPTION: This snippet disables the NOMINMAX macro. This macro prevents conflicts between Windows macros and C++ standard library functions such as min and max.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-anonymous-auth/windows/runner/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"NOMINMAX\")\n```\n\n----------------------------------------\n\nTITLE: Setting Profile build mode flags\nDESCRIPTION: Configures the linker and compiler flags for the Profile build mode. These flags are typically the same as the Release build mode.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-trello/windows/CMakeLists.txt#_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nset(CMAKE_EXE_LINKER_FLAGS_PROFILE \"${CMAKE_EXE_LINKER_FLAGS_RELEASE}\")\nset(CMAKE_SHARED_LINKER_FLAGS_PROFILE \"${CMAKE_SHARED_LINKER_FLAGS_RELEASE}\")\nset(CMAKE_C_FLAGS_PROFILE \"${CMAKE_C_FLAGS_RELEASE}\")\nset(CMAKE_CXX_FLAGS_PROFILE \"${CMAKE_CXX_FLAGS_RELEASE}\")\n```\n\n----------------------------------------\n\nTITLE: Defining List Prepend Function\nDESCRIPTION: This snippet defines a CMake function `list_prepend` that prepends a specified prefix to each element in a list. This function is used because `list(TRANSFORM ... PREPEND ...)` is not available in CMake versions older than 3.12.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/django-todolist/linux/flutter/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(list_prepend LIST_NAME PREFIX)\n    set(NEW_LIST \"\")\n    foreach(element ${${LIST_NAME}})\n        list(APPEND NEW_LIST \"${PREFIX}${element}\")\n    endforeach(element)\n    set(${LIST_NAME} \"${NEW_LIST}\" PARENT_SCOPE)\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Adding Dependencies\nDESCRIPTION: This snippet adds a dependency on the `flutter_assemble` target.  This ensures that the Flutter assets are assembled before the executable is built, which is a necessary step in the build process. The target flutter_assemble would be defined elsewhere in the build system.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-todolist/windows/runner/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nadd_dependencies(${BINARY_NAME} flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Adding runner subdirectory\nDESCRIPTION: Adds the runner directory as a subdirectory. This is where the application's CMakeLists.txt file is located.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-anonymous-auth/windows/CMakeLists.txt#_snippet_9\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(\"runner\")\n```\n\n----------------------------------------\n\nTITLE: Setting Wrapper Root Directory\nDESCRIPTION: Sets the `WRAPPER_ROOT` variable to point to the `cpp_client_wrapper` directory within the `ephemeral` directory. This directory contains C++ wrapper code for interacting with the Flutter engine.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-todolist-optional-sync/windows/flutter/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(WRAPPER_ROOT \"${EPHEMERAL_DIR}/cpp_client_wrapper\")\n```\n\n----------------------------------------\n\nTITLE: Setting Ephemeral Directory\nDESCRIPTION: Sets the ephemeral directory, which is used to store generated configuration files. This helps in organizing the build process and keeping generated files separate from the source code.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/benchmarks/windows/flutter/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(EPHEMERAL_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/ephemeral\")\n```\n\n----------------------------------------\n\nTITLE: Initializing Project Configuration CMake\nDESCRIPTION: This snippet initializes the CMake project with required settings, including the minimum CMake version, project name, and language support (CXX). It also sets the binary name for the application executable.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-edge-function-auth/windows/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\nproject(powersync_flutter_demo LANGUAGES CXX)\n\n# The name of the executable created for the application. Change this to change\n# the on-disk name of your application.\nset(BINARY_NAME \"powersync_flutter_demo\")\n```\n\n----------------------------------------\n\nTITLE: Setting Ephemeral Directory\nDESCRIPTION: This snippet defines the `EPHEMERAL_DIR` variable, which points to the 'ephemeral' directory within the current source directory. This directory contains generated configuration files and other temporary build artifacts.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-todolist/windows/flutter/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(EPHEMERAL_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/ephemeral\")\n```\n\n----------------------------------------\n\nTITLE: Disabling Windows Macros\nDESCRIPTION: Disables Windows macros that collide with C++ standard library functions by defining NOMINMAX.  This avoids potential compilation errors.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-todolist-drift/windows/runner/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"NOMINMAX\")\n```\n\n----------------------------------------\n\nTITLE: Including Generated Configuration\nDESCRIPTION: This snippet includes a generated CMake configuration file from the ephemeral directory. This file likely contains settings provided by the Flutter tool, customizing the build process based on the specific project requirements.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-todolist-optional-sync/linux/flutter/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(${EPHEMERAL_DIR}/generated_config.cmake)\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Target for Flutter Assembly\nDESCRIPTION: This snippet creates a custom target named `flutter_assemble` that depends on the Flutter library and header files. This target ensures that the custom command defined in the previous snippet is executed during the build process to assemble the Flutter application.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/django-todolist/linux/flutter/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_target(flutter_assemble DEPENDS\n  \"${FLUTTER_LIBRARY}\"\n  ${FLUTTER_LIBRARY_HEADERS}\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Flutter Subdirectory CMake\nDESCRIPTION: This snippet adds the Flutter managed directory as a subdirectory to the CMake project. This allows CMake to handle the build process for the Flutter-related components.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-edge-function-auth/windows/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_MANAGED_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/flutter\")\nadd_subdirectory(${FLUTTER_MANAGED_DIR})\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Command for Flutter Assemble\nDESCRIPTION: This snippet defines a custom command that executes the Flutter tool backend script to assemble the Flutter library and headers. A phony file is used as output to force the command to run every time, as there's no direct way to track all inputs and outputs from the Flutter tool. It uses environment variables and command-line arguments to configure the tool.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-todolist-optional-sync/linux/flutter/CMakeLists.txt#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CMAKE_CURRENT_BINARY_DIR}/_phony_\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.sh\"\n      ${FLUTTER_TARGET_PLATFORM} ${CMAKE_BUILD_TYPE}\n  VERBATIM\n)\n```\n\n----------------------------------------\n\nTITLE: Installing AOT Library\nDESCRIPTION: This snippet installs the AOT library on non-Debug builds. This optimizes the application's performance in release and profile builds.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/django-todolist/linux/CMakeLists.txt#_snippet_15\n\nLANGUAGE: CMake\nCODE:\n```\n# Install the AOT library on non-Debug builds only.\nif(NOT CMAKE_BUILD_TYPE MATCHES \"Debug\")\n  install(FILES \"${AOT_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining list_prepend Function\nDESCRIPTION: Defines a function named `list_prepend` to prepend a prefix to each element in a CMake list. This function is used because `list(TRANSFORM ... PREPEND ...)` is not available in CMake versions older than 3.12. It iterates through the list and appends the prefix to each element, then updates the original list in the parent scope.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-edge-function-auth/linux/flutter/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(list_prepend LIST_NAME PREFIX)\n    set(NEW_LIST \"\")\n    foreach(element ${${LIST_NAME}})\n        list(APPEND NEW_LIST \"${PREFIX}${element}\")\n    endforeach(element)\n    set(${LIST_NAME} \"${NEW_LIST}\" PARENT_SCOPE)\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Target for Flutter Assembly\nDESCRIPTION: Adds a custom target for Flutter assembly, which depends on the generated Flutter library, headers, and wrapper sources. This ensures that these files are generated before the target is built.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/benchmarks/windows/flutter/CMakeLists.txt#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_target(flutter_assemble DEPENDS\n  \"${FLUTTER_LIBRARY}\"\n  ${FLUTTER_LIBRARY_HEADERS}\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\n```\n\n----------------------------------------\n\nTITLE: Linking Libraries\nDESCRIPTION: This snippet links the necessary libraries for the application, including the Flutter engine and wrapper application. It also links against dwmapi.lib for desktop window management API functions. The include directories is set to the source directory.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-simple-chat/windows/runner/CMakeLists.txt#_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter flutter_wrapper_app)\ntarget_link_libraries(${BINARY_NAME} PRIVATE \"dwmapi.lib\")\ntarget_include_directories(${BINARY_NAME} PRIVATE \"${CMAKE_SOURCE_DIR}\")\n```\n\n----------------------------------------\n\nTITLE: Setting CMake minimum required version\nDESCRIPTION: Sets the minimum required CMake version for the build. Ensures that the CMake version used is at least 3.10.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-todolist-drift/linux/flutter/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.10)\n```\n\n----------------------------------------\n\nTITLE: Adding Runner Subdirectory CMake\nDESCRIPTION: This snippet adds the runner directory as a subdirectory to the CMake project. The runner directory contains the CMakeLists.txt file that manages the application build process.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-edge-function-auth/windows/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(\"runner\")\n```\n\n----------------------------------------\n\nTITLE: Adding Runner Subdirectory\nDESCRIPTION: This snippet adds the runner directory as a subdirectory, which typically contains the application-specific CMakeLists.txt file and source code.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-simple-chat/windows/CMakeLists.txt#_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(\"runner\")\n```\n\n----------------------------------------\n\nTITLE: Cleaning the Build Bundle Directory\nDESCRIPTION: This snippet uses the `install(CODE)` command to remove the build bundle directory recursively before each installation, ensuring a clean installation.  This avoids stale files from previous builds.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/firebase-nodejs-todolist/linux/CMakeLists.txt#_snippet_16\n\nLANGUAGE: CMake\nCODE:\n```\n# Start with a clean build bundle directory every time.\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${BUILD_BUNDLE_DIR}/\\\"\n  \" COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Setting Plugin Wrapper Properties\nDESCRIPTION: This snippet sets specific properties for the 'flutter_wrapper_plugin' target, including enabling position-independent code (PIC) and setting the CXX visibility preset to hidden.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-todolist/windows/flutter/CMakeLists.txt#_snippet_19\n\nLANGUAGE: cmake\nCODE:\n```\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  POSITION_INDEPENDENT_CODE ON)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  CXX_VISIBILITY_PRESET hidden)\n```\n\n----------------------------------------\n\nTITLE: Include Flutter Managed Directory\nDESCRIPTION: Adds the Flutter managed directory as a subdirectory. This incorporates Flutter's build rules into the CMake project. Includes the 'flutter' subdirectory which contains Flutter's build system integration.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/benchmarks/windows/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_MANAGED_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/flutter\")\nadd_subdirectory(${FLUTTER_MANAGED_DIR})\n```\n\n----------------------------------------\n\nTITLE: Define Phony Output\nDESCRIPTION: Defines a phony output file to force the custom command to run every time, as there is no way to get a full input/output list from the flutter tool.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-edge-function-auth/windows/flutter/CMakeLists.txt#_snippet_12\n\nLANGUAGE: cmake\nCODE:\n```\nset(PHONY_OUTPUT \"${CMAKE_CURRENT_BINARY_DIR}/_phony_\")\nset_source_files_properties(\"${PHONY_OUTPUT}\" PROPERTIES SYMBOLIC TRUE)\n```\n\n----------------------------------------\n\nTITLE: Creating Flutter Wrapper Plugin Library\nDESCRIPTION: Defines a static library named `flutter_wrapper_plugin`. This library includes core and plugin-related C++ wrapper sources, applies standard settings, and links to the `flutter` interface library. It also depends on the `flutter_assemble` target. Defines properties to enable position independent code and hides CXX visibility.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-todolist-drift/windows/flutter/CMakeLists.txt#_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(flutter_wrapper_plugin STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n)\napply_standard_settings(flutter_wrapper_plugin)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  POSITION_INDEPENDENT_CODE ON)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  CXX_VISIBILITY_PRESET hidden)\ntarget_link_libraries(flutter_wrapper_plugin PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_plugin PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_plugin flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Installing Assets Directory CMake\nDESCRIPTION: This snippet installs the assets directory. It removes the directory recursively before copying the new one to ensure that stale files are not present from previous builds.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-edge-function-auth/windows/CMakeLists.txt#_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_ASSET_DIR_NAME \"flutter_assets\")\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\\\")\n  \" COMPONENT Runtime)\ninstall(DIRECTORY \"${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}\"\n  DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\" COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Setting Powersync Core Library Name and Path\nDESCRIPTION: Defines the PowerSync core library file name based on the system architecture. It checks if the architecture is x86_64/AMD64 or arm64/armv8 and sets the core library file name accordingly. This allows the correct prebuilt library to be used depending on the platform.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/packages/powersync_flutter_libs/linux/CMakeLists.txt#_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nset(CORE_FILE_NAME \"libpowersync.so\")\n\nset(POWERSYNC_ARCH ${CMAKE_SYSTEM_PROCESSOR})\nif (${POWERSYNC_ARCH} MATCHES \"x86_64\" OR ${POWERSYNC_ARCH} MATCHES \"AMD64\")\n  set(CORE_FILE_NAME \"libpowersync_x64.so\")\nelseif (${POWERSYNC_ARCH} MATCHES \"^arm64\" OR ${POWERSYNC_ARCH} MATCHES \"^armv8\")\n  set(CORE_FILE_NAME \"libpowersync_aarch64.so\")\nendif ()\n\nset(POWERSYNC_FILE_PATH \"${CMAKE_CURRENT_SOURCE_DIR}/${CORE_FILE_NAME}\")\n```\n\n----------------------------------------\n\nTITLE: Setting Project Build Directory\nDESCRIPTION: This snippet defines the `PROJECT_BUILD_DIR` variable, which specifies the project's build directory. It also publishes this variable to the parent scope for use in subsequent build steps.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-todolist/windows/flutter/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nset(PROJECT_BUILD_DIR \"${PROJECT_DIR}/build/\" PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Disabling Windows NOMINMAX Macro\nDESCRIPTION: This snippet disables the Windows NOMINMAX macro for the executable target.  This is necessary to avoid conflicts between the Windows API macros 'min' and 'max' and the C++ standard library functions of the same name.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/benchmarks/windows/runner/CMakeLists.txt#_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"NOMINMAX\")\n```\n\n----------------------------------------\n\nTITLE: Setting Ephemeral Directory\nDESCRIPTION: Defines the `EPHEMERAL_DIR` variable, which points to the directory containing generated configuration files. This directory is crucial for including configurations provided by the Flutter tool.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-todolist-drift/windows/flutter/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(EPHEMERAL_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/ephemeral\")\n```\n\n----------------------------------------\n\nTITLE: Set Installation Directories\nDESCRIPTION: This snippet sets up the installation directories for the application bundle. It defines where the executable, data files, and libraries will be installed during the installation process. It also sets the install step as default.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-todolist-drift/windows/CMakeLists.txt#_snippet_9\n\nLANGUAGE: CMake\nCODE:\n```\nset(BUILD_BUNDLE_DIR \"$<TARGET_FILE_DIR:${BINARY_NAME}>\")\n# Make the \"install\" step default, as it's required to run.\nset(CMAKE_VS_INCLUDE_INSTALL_TO_DEFAULT_BUILD 1)\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \"${BUILD_BUNDLE_DIR}\" CACHE PATH \"...\" FORCE)\nendif()\n\nset(INSTALL_BUNDLE_DATA_DIR \"${CMAKE_INSTALL_PREFIX}/data\")\nset(INSTALL_BUNDLE_LIB_DIR \"${CMAKE_INSTALL_PREFIX}\")\n```\n\n----------------------------------------\n\nTITLE: Installing AOT Library\nDESCRIPTION: Installs the Ahead-of-Time (AOT) compiled library specifically for Profile and Release builds, placing it in the data directory. This step is skipped for Debug builds.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/django-todolist/windows/CMakeLists.txt#_snippet_13\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(FILES \"${AOT_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  CONFIGURATIONS Profile;Release\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Setting Flutter Library Path\nDESCRIPTION: This snippet sets the `FLUTTER_LIBRARY` variable to the path of the Flutter Linux GTK shared library (libflutter_linux_gtk.so). It then publishes this variable, along with other important paths (ICU data file, project build directory, AOT library), to the parent scope for use in other parts of the build process. It defines the path to the flutter engine library.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/django-todolist/linux/flutter/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_LIBRARY \"${EPHEMERAL_DIR}/libflutter_linux_gtk.so\")\n\n# Published to parent scope for install step.\nset(FLUTTER_LIBRARY ${FLUTTER_LIBRARY} PARENT_SCOPE)\nset(FLUTTER_ICU_DATA_FILE \"${EPHEMERAL_DIR}/icudtl.dat\" PARENT_SCOPE)\nset(PROJECT_BUILD_DIR \"${PROJECT_DIR}/build/\" PARENT_SCOPE)\nset(AOT_LIBRARY \"${PROJECT_DIR}/build/lib/libapp.so\" PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Policies\nDESCRIPTION: This snippet explicitly opts into modern CMake behaviors to avoid warnings with recent versions of CMake. It sets the CMP0063 policy to NEW.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/django-todolist/linux/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\n# Explicitly opt in to modern CMake behaviors to avoid warnings with recent\n# versions of CMake.\ncmake_policy(SET CMP0063 NEW)\n```\n\n----------------------------------------\n\nTITLE: Set Wrapper Root Directory\nDESCRIPTION: Sets the root directory for C++ client wrapper code. This directory contains the source files and headers needed for the native part of a Flutter plugin/app.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-anonymous-auth/windows/flutter/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nset(WRAPPER_ROOT \"${EPHEMERAL_DIR}/cpp_client_wrapper\")\n```\n\n----------------------------------------\n\nTITLE: Set Profile Build Mode Settings\nDESCRIPTION: This snippet configures the linker and compiler flags for the 'Profile' build mode, mirroring the settings used for the 'Release' build mode. This is common for performance profiling builds.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-todolist-drift/windows/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nset(CMAKE_EXE_LINKER_FLAGS_PROFILE \"${CMAKE_EXE_LINKER_FLAGS_RELEASE}\")\nset(CMAKE_SHARED_LINKER_FLAGS_PROFILE \"${CMAKE_SHARED_LINKER_FLAGS_RELEASE}\")\nset(CMAKE_C_FLAGS_PROFILE \"${CMAKE_C_FLAGS_RELEASE}\")\nset(CMAKE_CXX_FLAGS_PROFILE \"${CMAKE_CXX_FLAGS_RELEASE}\")\n```\n\n----------------------------------------\n\nTITLE: Initializing CMake Project\nDESCRIPTION: This snippet initializes the CMake project, sets the minimum required CMake version, specifies the languages used (C++), defines the binary name and application ID, and opts into modern CMake behaviors.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-simple-chat/linux/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.10)\nproject(runner LANGUAGES CXX)\n\n# The name of the executable created for the application. Change this to change\n# the on-disk name of your application.\nset(BINARY_NAME \"supabase_tutorial_chat_app\")\n# The unique GTK application identifier for this application. See:\n# https://wiki.gnome.org/HowDoI/ChooseApplicationID\nset(APPLICATION_ID \"com.example.supabase_tutorial_chat_app\")\n\n# Explicitly opt in to modern CMake behaviors to avoid warnings with recent\n# versions of CMake.\ncmake_policy(SET CMP0063 NEW)\n```\n\n----------------------------------------\n\nTITLE: Adding Executable Target\nDESCRIPTION: This snippet defines the executable target and lists the source files that will be compiled and linked to create the final executable. The BINARY_NAME variable is used to set the executable's name.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/django-todolist/windows/runner/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nadd_executable(${BINARY_NAME} WIN32\n  \"flutter_window.cpp\"\n  \"main.cpp\"\n  \"utils.cpp\"\n  \"win32_window.cpp\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n  \"Runner.rc\"\n  \"runner.exe.manifest\"\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Profile Build Mode Flags\nDESCRIPTION: This section defines settings specifically for the Profile build mode, aligning linker and compiler flags with the Release mode.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/django-todolist/windows/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nset(CMAKE_EXE_LINKER_FLAGS_PROFILE \"${CMAKE_EXE_LINKER_FLAGS_RELEASE}\")\nset(CMAKE_SHARED_LINKER_FLAGS_PROFILE \"${CMAKE_SHARED_LINKER_FLAGS_RELEASE}\")\nset(CMAKE_C_FLAGS_PROFILE \"${CMAKE_C_FLAGS_RELEASE}\")\nset(CMAKE_CXX_FLAGS_PROFILE \"${CMAKE_CXX_FLAGS_RELEASE}\")\n```\n\n----------------------------------------\n\nTITLE: Applying Standard Settings\nDESCRIPTION: Applies a set of standard build settings to the executable target.  These settings are defined elsewhere and may include compiler flags and optimization levels.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-todolist-drift/windows/runner/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\napply_standard_settings(${BINARY_NAME})\n```\n\n----------------------------------------\n\nTITLE: Setting Flutter Library\nDESCRIPTION: Sets the FLUTTER_LIBRARY variable to the path of the Flutter Windows DLL. It also sets the FLUTTER_ICU_DATA_FILE and PROJECT_BUILD_DIR variables.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-trello/windows/flutter/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_LIBRARY \"${EPHEMERAL_DIR}/flutter_windows.dll\")\n\n# Published to parent scope for install step.\nset(FLUTTER_LIBRARY ${FLUTTER_LIBRARY} PARENT_SCOPE)\nset(FLUTTER_ICU_DATA_FILE \"${EPHEMERAL_DIR}/icudtl.dat\" PARENT_SCOPE)\nset(PROJECT_BUILD_DIR \"${PROJECT_DIR}/build/\" PARENT_SCOPE)\nset(AOT_LIBRARY \"${PROJECT_DIR}/build/windows/app.so\" PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Finding System Dependencies\nDESCRIPTION: Uses `pkg-config` to find and import GTK, GLib, and GIO libraries. These libraries are essential for building Flutter applications with a GTK-based user interface on Linux.  The `IMPORTED_TARGET` option creates CMake targets that represent these libraries, simplifying linking later on.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-anonymous-auth/linux/flutter/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(PkgConfig REQUIRED)\npkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk+-3.0)\npkg_check_modules(GLIB REQUIRED IMPORTED_TARGET glib-2.0)\npkg_check_modules(GIO REQUIRED IMPORTED_TARGET gio-2.0)\n```\n\n----------------------------------------\n\nTITLE: Setting ephemeral directory variable\nDESCRIPTION: Sets the `EPHEMERAL_DIR` variable to the path of the ephemeral directory. This directory contains generated configuration files.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-todolist-drift/linux/flutter/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(EPHEMERAL_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/ephemeral\")\n```\n\n----------------------------------------\n\nTITLE: Defining Preprocessor Definitions in CMake\nDESCRIPTION: This section defines preprocessor definitions for the build version, including the Flutter version string, major, minor, patch, and build numbers. These definitions are used during compilation to embed version information into the application.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/firebase-nodejs-todolist/windows/runner/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION=\\\"${FLUTTER_VERSION}\\\"\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_MAJOR=${FLUTTER_VERSION_MAJOR}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_MINOR=${FLUTTER_VERSION_MINOR}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_PATCH=${FLUTTER_VERSION_PATCH}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_BUILD=${FLUTTER_VERSION_BUILD}\")\n```\n\n----------------------------------------\n\nTITLE: Set Ephemeral Directory\nDESCRIPTION: Defines the ephemeral directory where generated configuration files are located. This helps in organizing build artifacts and managing dependencies.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-anonymous-auth/windows/flutter/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(EPHEMERAL_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/ephemeral\")\n```\n\n----------------------------------------\n\nTITLE: Setting Output Directory\nDESCRIPTION: This snippet sets the output directory for the executable to a subdirectory named `intermediates_do_not_run`. This prevents users from accidentally running the unbundled copy of the executable.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/django-todolist/linux/CMakeLists.txt#_snippet_10\n\nLANGUAGE: CMake\nCODE:\n```\nset_target_properties(${BINARY_NAME}\n  PROPERTIES\n  RUNTIME_OUTPUT_DIRECTORY \"${CMAKE_BINARY_DIR}/intermediates_do_not_run\"\n)\n```\n\n----------------------------------------\n\nTITLE: Create Flutter Interface Library\nDESCRIPTION: Creates an interface library called 'flutter'. Interface libraries don't contain any code themselves but provide include directories and link dependencies to targets that depend on them.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-anonymous-auth/windows/flutter/CMakeLists.txt#_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(flutter INTERFACE)\ntarget_include_directories(flutter INTERFACE\n  \"${EPHEMERAL_DIR}\"\n)\ntarget_link_libraries(flutter INTERFACE \"${FLUTTER_LIBRARY}.lib\")\nadd_dependencies(flutter flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Adding Flutter Interface Library\nDESCRIPTION: This snippet adds an interface library named 'flutter'. Interface libraries are used to define dependencies and include directories without generating any actual object files. This 'flutter' target is used to represent the Flutter engine and its associated headers and libraries.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-todolist/windows/flutter/CMakeLists.txt#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(flutter INTERFACE)\ntarget_include_directories(flutter INTERFACE\n  \"${EPHEMERAL_DIR}\"\n)\ntarget_link_libraries(flutter INTERFACE \"${FLUTTER_LIBRARY}.lib\")\nadd_dependencies(flutter flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Command for Flutter Assembly\nDESCRIPTION: Adds a custom command to generate the Flutter library and headers. This command executes the `tool_backend.sh` script from the Flutter tools, which performs the actual build process. The `OUTPUT` specifies the files that will be generated, and `COMMAND` specifies the command to execute.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-trello/linux/flutter/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CMAKE_CURRENT_BINARY_DIR}/_phony_\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.sh\"\n      ${FLUTTER_TARGET_PLATFORM} ${CMAKE_BUILD_TYPE}\n  VERBATIM\n)\n```\n\n----------------------------------------\n\nTITLE: Define C++ Wrapper Sources (Plugin)\nDESCRIPTION: Defines a list of source files for the plugin-related C++ wrapper. These files provide functionality for registering Flutter plugins.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-edge-function-auth/windows/flutter/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND CPP_WRAPPER_SOURCES_PLUGIN\n  \"plugin_registrar.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_PLUGIN PREPEND \"${WRAPPER_ROOT}/\")\n```\n\n----------------------------------------\n\nTITLE: Disabling Windows Macros\nDESCRIPTION: Disables the `NOMINMAX` macro, preventing Windows macros from interfering with standard C++ library functions like `std::min` and `std::max`. This avoids potential naming conflicts.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-trello/windows/runner/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"NOMINMAX\")\n```\n\n----------------------------------------\n\nTITLE: Applying Standard Settings to App Wrapper\nDESCRIPTION: This snippet applies standard build settings to the 'flutter_wrapper_app' target. The `apply_standard_settings` function is assumed to be defined elsewhere and configures common compiler flags and other settings.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-todolist/windows/flutter/CMakeLists.txt#_snippet_24\n\nLANGUAGE: cmake\nCODE:\n```\napply_standard_settings(flutter_wrapper_app)\n```\n\n----------------------------------------\n\nTITLE: Adding Executable Target\nDESCRIPTION: This snippet defines the executable target for the application. It specifies the source files that make up the application and sets the target to be a WIN32 executable. It also includes generated plugin registrant and resource files.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-todolist/windows/runner/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nadd_executable(${BINARY_NAME} WIN32\n  \"flutter_window.cpp\"\n  \"main.cpp\"\n  \"utils.cpp\"\n  \"win32_window.cpp\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n  \"Runner.rc\"\n  \"runner.exe.manifest\"\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Flutter Library Variables\nDESCRIPTION: Defines variables for the Flutter library (`FLUTTER_LIBRARY`), ICU data file (`FLUTTER_ICU_DATA_FILE`), project build directory (`PROJECT_BUILD_DIR`), and AOT library (`AOT_LIBRARY`). These variables are published to the parent scope for use in install steps.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-todolist-drift/windows/flutter/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_LIBRARY \"${EPHEMERAL_DIR}/flutter_windows.dll\")\n\n# Published to parent scope for install step.\nset(FLUTTER_LIBRARY ${FLUTTER_LIBRARY} PARENT_SCOPE)\nset(FLUTTER_ICU_DATA_FILE \"${EPHEMERAL_DIR}/icudtl.dat\" PARENT_SCOPE)\nset(PROJECT_BUILD_DIR \"${PROJECT_DIR}/build/\" PARENT_SCOPE)\nset(AOT_LIBRARY \"${PROJECT_DIR}/build/windows/app.so\" PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Defining settings for the Profile build mode\nDESCRIPTION: Sets the linker and compiler flags for the Profile build mode to be the same as the Release build mode. This ensures consistent performance characteristics between Profile and Release builds.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-anonymous-auth/windows/CMakeLists.txt#_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nset(CMAKE_EXE_LINKER_FLAGS_PROFILE \"${CMAKE_EXE_LINKER_FLAGS_RELEASE}\")\nset(CMAKE_SHARED_LINKER_FLAGS_PROFILE \"${CMAKE_SHARED_LINKER_FLAGS_RELEASE}\")\nset(CMAKE_C_FLAGS_PROFILE \"${CMAKE_C_FLAGS_RELEASE}\")\nset(CMAKE_CXX_FLAGS_PROFILE \"${CMAKE_CXX_FLAGS_RELEASE}\")\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Command for Flutter Assembly\nDESCRIPTION: Adds a custom command to run the Flutter tool backend. This command generates the Flutter library, headers, and wrapper sources. A phony output file ensures the command runs every time.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/benchmarks/windows/flutter/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nset(PHONY_OUTPUT \"${CMAKE_CURRENT_BINARY_DIR}/_phony_\")\nset_source_files_properties(\"${PHONY_OUTPUT}\" PROPERTIES SYMBOLIC TRUE)\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CPP_WRAPPER_SOURCES_CORE} ${CPP_WRAPPER_SOURCES_PLUGIN}\n    ${CPP_WRAPPER_SOURCES_APP}\n    ${PHONY_OUTPUT}\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.bat\"\n      ${FLUTTER_TARGET_PLATFORM} $<CONFIG>\n  VERBATIM\n)\n```\n\n----------------------------------------\n\nTITLE: Including Flutter Build Rules\nDESCRIPTION: This section includes Flutter library and tool build rules by adding the `flutter` subdirectory. It uses `FLUTTER_MANAGED_DIR` to locate the Flutter build files.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/django-todolist/windows/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_MANAGED_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/flutter\")\nadd_subdirectory(${FLUTTER_MANAGED_DIR})\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Minimum Version\nDESCRIPTION: This snippet sets the minimum required CMake version for the project to 3.10. This ensures that the CMake version used to build the project is compatible with the commands and features used in the CMakeLists.txt file.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-todolist-optional-sync/linux/flutter/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.10)\n```\n\n----------------------------------------\n\nTITLE: Using Unicode for all projects\nDESCRIPTION: Adds preprocessor definitions to enable Unicode support in the project.  This ensures proper handling of international characters.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-trello/windows/CMakeLists.txt#_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nadd_definitions(-DUNICODE -D_UNICODE)\n```\n\n----------------------------------------\n\nTITLE: Appending C++ Wrapper Sources (Plugin)\nDESCRIPTION: Creates a list of plugin-related C++ wrapper source files (`CPP_WRAPPER_SOURCES_PLUGIN`) and prepends the `WRAPPER_ROOT` path to each source file.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-todolist-drift/windows/flutter/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND CPP_WRAPPER_SOURCES_PLUGIN\n  \"plugin_registrar.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_PLUGIN PREPEND \"${WRAPPER_ROOT}/\")\n```\n\n----------------------------------------\n\nTITLE: Adding Unicode Definitions\nDESCRIPTION: This snippet adds preprocessor definitions for Unicode support across the project, ensuring compatibility with Unicode character encoding.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-simple-chat/windows/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nadd_definitions(-DUNICODE -D_UNICODE)\n```\n\n----------------------------------------\n\nTITLE: Linking Libraries and Adding Includes\nDESCRIPTION: Links required libraries (flutter, flutter_wrapper_app, dwmapi.lib) to the executable target.  Also adds the source directory to the include path, allowing the compiler to find header files. The `dwmapi.lib` library is necessary for desktop window management API on Windows.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-trello/windows/runner/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter flutter_wrapper_app)\ntarget_link_libraries(${BINARY_NAME} PRIVATE \"dwmapi.lib\")\ntarget_include_directories(${BINARY_NAME} PRIVATE \"${CMAKE_SOURCE_DIR}\")\n```\n\n----------------------------------------\n\nTITLE: Adding Flutter Assemble Dependency to App Wrapper\nDESCRIPTION: This snippet adds a dependency on the 'flutter_assemble' target to the 'flutter_wrapper_app' target. This ensures that the Flutter engine is assembled before the application wrapper is built.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-todolist/windows/flutter/CMakeLists.txt#_snippet_27\n\nLANGUAGE: cmake\nCODE:\n```\nadd_dependencies(flutter_wrapper_app flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Setting Fallback Target Platform\nDESCRIPTION: Sets a fallback value for `FLUTTER_TARGET_PLATFORM` if it's not already defined. This ensures that the target platform is set even if the Flutter tool doesn't provide it.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-todolist-drift/windows/flutter/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nif (NOT DEFINED FLUTTER_TARGET_PLATFORM)\n  set(FLUTTER_TARGET_PLATFORM \"windows-x64\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configure PowerSync Sync Rules\nDESCRIPTION: This YAML snippet defines sync rules for PowerSync. It specifies two buckets: `bucket_items` for syncing benchmark items and `bulk` for syncing bulk data based on a size bucket parameter. These rules determine which data is synced from the Postgres database to the client.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/benchmarks/README.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nbucket_definitions:\n  bucket_items:\n    data:\n      - select * from benchmark_items\n  bulk:\n    parameters: select request.parameters() ->> 'size_bucket' as size_bucket\n    data:\n      - select * from bulk_data where size_bucket = bucket.size_bucket\n```\n\n----------------------------------------\n\nTITLE: Defining List Prepend Function\nDESCRIPTION: This snippet defines a CMake function called `list_prepend`. This function takes a list name and a prefix as input and prepends the prefix to each element in the list. It effectively serves the same purpose as `list(TRANSFORM ... PREPEND ...)` which is not available in CMake 3.10.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-todolist-optional-sync/linux/flutter/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(list_prepend LIST_NAME PREFIX)\n    set(NEW_LIST \"\")\n    foreach(element ${${LIST_NAME}})\n        list(APPEND NEW_LIST \"${PREFIX}${element}\")\n    endforeach(element)\n    set(${LIST_NAME} \"${NEW_LIST}\" PARENT_SCOPE)\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Adding dependencies\nDESCRIPTION: This snippet adds a dependency on the flutter_assemble target. This ensures that the Flutter assets are built before the executable target is built.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-anonymous-auth/windows/runner/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nadd_dependencies(${BINARY_NAME} flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Set Installation Directories\nDESCRIPTION: Sets the specific directories for data and library files within the installation prefix. These directories organize the installed application files. Defines specific install directories for data (assets, ICU data) and libraries.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/benchmarks/windows/CMakeLists.txt#_snippet_14\n\nLANGUAGE: cmake\nCODE:\n```\nset(INSTALL_BUNDLE_DATA_DIR \"${CMAKE_INSTALL_PREFIX}/data\")\nset(INSTALL_BUNDLE_LIB_DIR \"${CMAKE_INSTALL_PREFIX}\")\n```\n\n----------------------------------------\n\nTITLE: Set Install Prefix\nDESCRIPTION: Sets the installation prefix, which is the root directory for installation. This is configured to be the build bundle directory. Sets the installation prefix to the build bundle directory.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/benchmarks/windows/CMakeLists.txt#_snippet_13\n\nLANGUAGE: cmake\nCODE:\n```\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \"${BUILD_BUNDLE_DIR}\" CACHE PATH \"...\" FORCE)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting C++ Wrapper Sources (Core, Plugin, App)\nDESCRIPTION: Creates lists of C++ wrapper source files for core implementations, plugin registrar, and Flutter engine/view controller. It then prepends the appropriate path to each source file.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/django-todolist/windows/flutter/CMakeLists.txt#_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nlist(APPEND CPP_WRAPPER_SOURCES_CORE\n  \"core_implementations.cc\"\n  \"standard_codec.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_CORE PREPEND \"${WRAPPER_ROOT}/\")\nlist(APPEND CPP_WRAPPER_SOURCES_PLUGIN\n  \"plugin_registrar.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_PLUGIN PREPEND \"${WRAPPER_ROOT}/\")\nlist(APPEND CPP_WRAPPER_SOURCES_APP\n  \"flutter_engine.cc\"\n  \"flutter_view_controller.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_APP PREPEND \"${WRAPPER_ROOT}/\")\n```\n\n----------------------------------------\n\nTITLE: Appending App Wrapper Sources\nDESCRIPTION: This snippet appends application-related C++ wrapper source files to the `CPP_WRAPPER_SOURCES_APP` list. These files contain code for managing the Flutter engine and view controller within the application.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-todolist/windows/flutter/CMakeLists.txt#_snippet_15\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND CPP_WRAPPER_SOURCES_APP\n  \"flutter_engine.cc\"\n  \"flutter_view_controller.cc\"\n)\n```\n\n----------------------------------------\n\nTITLE: Prepending Wrapper Root to App Sources\nDESCRIPTION: This snippet transforms the `CPP_WRAPPER_SOURCES_APP` list by prepending the wrapper root directory to each source file path.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-todolist/windows/flutter/CMakeLists.txt#_snippet_16\n\nLANGUAGE: cmake\nCODE:\n```\nlist(TRANSFORM CPP_WRAPPER_SOURCES_APP PREPEND \"${WRAPPER_ROOT}/\")\n```\n\n----------------------------------------\n\nTITLE: Setting Ephemeral Directory\nDESCRIPTION: Sets the EPHEMERAL_DIR variable to the path of the 'ephemeral' directory within the source directory. This directory contains generated configuration files and other temporary build artifacts.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/django-todolist/windows/flutter/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(EPHEMERAL_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/ephemeral\")\n```\n\n----------------------------------------\n\nTITLE: Push Git Tags\nDESCRIPTION: This command pushes all local git tags to the remote repository.  The `--follow-tags` option ensures that annotated tags are pushed, which are created by the `melos version` command.  This action triggers the release workflow defined in `.github/workflows`.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/RELEASING.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit push --follow-tags\n```\n\n----------------------------------------\n\nTITLE: Create Flutter Wrapper App Library\nDESCRIPTION: Creates a static library named `flutter_wrapper_app`. This library contains the core and application-related C++ wrapper sources. It links against the `flutter` interface library and includes the wrapper's header files. Standard settings are applied to the target.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-edge-function-auth/windows/flutter/CMakeLists.txt#_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(flutter_wrapper_app STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\napply_standard_settings(flutter_wrapper_app)\ntarget_link_libraries(flutter_wrapper_app PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_app PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_app flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Add Unicode Definitions\nDESCRIPTION: This snippet adds preprocessor definitions to enable Unicode support for the project. This ensures that the application handles Unicode characters correctly.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-todolist-drift/windows/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nadd_definitions(-DUNICODE -D_UNICODE)\n```\n\n----------------------------------------\n\nTITLE: Applying Standard Build Settings\nDESCRIPTION: This snippet applies a standard set of build settings to the executable target. This may include compiler flags, linker options, and other common settings.  It assumes a function named 'apply_standard_settings' is defined elsewhere.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/benchmarks/windows/runner/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\napply_standard_settings(${BINARY_NAME})\n```\n\n----------------------------------------\n\nTITLE: Set Ephemeral Directory\nDESCRIPTION: Sets the EPHEMERAL_DIR variable to the location of the ephemeral directory, which contains generated configuration files and other temporary build artifacts. This directory is used throughout the build process to locate necessary files.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-edge-function-auth/windows/flutter/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(EPHEMERAL_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/ephemeral\")\n```\n\n----------------------------------------\n\nTITLE: Defining Flutter Library Headers List\nDESCRIPTION: Creates a list of Flutter library header files and prepends the `EPHEMERAL_DIR/flutter_linux/` path to each header file. This ensures that the compiler can find the necessary header files for the Flutter library. The `list_prepend` function is used for adding the path.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-edge-function-auth/linux/flutter/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND FLUTTER_LIBRARY_HEADERS\n  \"fl_basic_message_channel.h\"\n  \"fl_binary_codec.h\"\n  \"fl_binary_messenger.h\"\n  \"fl_dart_project.h\"\n  \"fl_engine.h\"\n  \"fl_json_message_codec.h\"\n  \"fl_json_method_codec.h\"\n  \"fl_message_codec.h\"\n  \"fl_method_call.h\"\n  \"fl_method_channel.h\"\n  \"fl_method_codec.h\"\n  \"fl_method_response.h\"\n  \"fl_plugin_registrar.h\"\n  \"fl_plugin_registry.h\"\n  \"fl_standard_message_codec.h\"\n  \"fl_standard_method_codec.h\"\n  \"fl_string_codec.h\"\n  \"fl_value.h\"\n  \"fl_view.h\"\n  \"flutter_linux.h\"\n)\nlist_prepend(FLUTTER_LIBRARY_HEADERS \"${EPHEMERAL_DIR}/flutter_linux/\")\n```\n\n----------------------------------------\n\nTITLE: Include Generated Configuration\nDESCRIPTION: Includes a CMake configuration file generated by the Flutter tool. This file likely contains project-specific settings and dependencies managed by the Flutter tooling.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-anonymous-auth/windows/flutter/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(${EPHEMERAL_DIR}/generated_config.cmake)\n```\n\n----------------------------------------\n\nTITLE: Install Binary\nDESCRIPTION: Installs the main executable to the installation prefix. This ensures that the executable is placed in the correct location. Installs the main executable to the installation prefix.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/benchmarks/windows/CMakeLists.txt#_snippet_15\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Set Flutter Library and ICU Data File\nDESCRIPTION: Sets the Flutter Library and the ICU data file in the parent scope for installation step. This makes them available to other CMake files in the project.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-anonymous-auth/windows/flutter/CMakeLists.txt#_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nset(FLUTTER_LIBRARY ${FLUTTER_LIBRARY} PARENT_SCOPE)\nset(FLUTTER_ICU_DATA_FILE \"${EPHEMERAL_DIR}/icudtl.dat\" PARENT_SCOPE)\nset(PROJECT_BUILD_DIR \"${PROJECT_DIR}/build/\" PARENT_SCOPE)\nset(AOT_LIBRARY \"${PROJECT_DIR}/build/windows/app.so\" PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Setting Profile Build Mode Flags\nDESCRIPTION: This snippet defines the flags for the Profile build mode, mirroring the Release build mode flags. This ensures consistent optimization settings for profiling.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-simple-chat/windows/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(CMAKE_EXE_LINKER_FLAGS_PROFILE \"${CMAKE_EXE_LINKER_FLAGS_RELEASE}\")\nset(CMAKE_SHARED_LINKER_FLAGS_PROFILE \"${CMAKE_SHARED_LINKER_FLAGS_RELEASE}\")\nset(CMAKE_C_FLAGS_PROFILE \"${CMAKE_C_FLAGS_RELEASE}\")\nset(CMAKE_CXX_FLAGS_PROFILE \"${CMAKE_CXX_FLAGS_RELEASE}\")\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Minimum Required Version\nDESCRIPTION: This snippet sets the minimum required CMake version to 3.14. This ensures that the CMake version used to build the project meets the minimum requirements for the specified commands and features.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/benchmarks/windows/runner/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\n```\n\n----------------------------------------\n\nTITLE: Add Dependencies\nDESCRIPTION: Adds a dependency on the `flutter_assemble` target. This ensures that the Flutter assets are built before the executable is linked.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-edge-function-auth/windows/runner/CMakeLists.txt#_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\nadd_dependencies(${BINARY_NAME} flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Create Flutter Interface Library\nDESCRIPTION: Creates an interface library named `flutter`. Interface libraries are used to propagate usage requirements, such as include directories and link libraries, without defining any actual symbols.  It includes directories and links the flutter library.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-simple-chat/windows/flutter/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(flutter INTERFACE)\ntarget_include_directories(flutter INTERFACE\n  \"${EPHEMERAL_DIR}\"\n)\ntarget_link_libraries(flutter INTERFACE \"${FLUTTER_LIBRARY}.lib\")\nadd_dependencies(flutter flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Prepending Wrapper Root to Plugin Sources\nDESCRIPTION: This snippet transforms the `CPP_WRAPPER_SOURCES_PLUGIN` list by prepending the wrapper root directory to each source file path.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-todolist/windows/flutter/CMakeLists.txt#_snippet_14\n\nLANGUAGE: cmake\nCODE:\n```\nlist(TRANSFORM CPP_WRAPPER_SOURCES_PLUGIN PREPEND \"${WRAPPER_ROOT}/\")\n```\n\n----------------------------------------\n\nTITLE: Adding runner subdirectory\nDESCRIPTION: Adds the runner subdirectory to the current CMake project.  This contains application-specific build files.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-trello/windows/CMakeLists.txt#_snippet_9\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(\"runner\")\n```\n\n----------------------------------------\n\nTITLE: Creating Flutter Wrapper Library (Plugin)\nDESCRIPTION: Creates a static library named `flutter_wrapper_plugin` that contains the C++ wrapper code required for Flutter plugins.  It links against the `flutter` interface library and sets include directories. The POSITION_INDEPENDENT_CODE and CXX_VISIBILITY_PRESET properties are configured for the library.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-todolist-optional-sync/windows/flutter/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND CPP_WRAPPER_SOURCES_CORE\n  \"core_implementations.cc\"\n  \"standard_codec.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_CORE PREPEND \"${WRAPPER_ROOT}/\")\nlist(APPEND CPP_WRAPPER_SOURCES_PLUGIN\n  \"plugin_registrar.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_PLUGIN PREPEND \"${WRAPPER_ROOT}/\")\n\n# Wrapper sources needed for a plugin.\nadd_library(flutter_wrapper_plugin STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n)\napply_standard_settings(flutter_wrapper_plugin)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  POSITION_INDEPENDENT_CODE ON)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  CXX_VISIBILITY_PRESET hidden)\ntarget_link_libraries(flutter_wrapper_plugin PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_plugin PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_plugin flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Setting Installation Directories\nDESCRIPTION: This snippet sets the installation directories for data and libraries within the bundle. It defines where application data and libraries will be installed within the relocatable bundle.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/firebase-nodejs-todolist/linux/CMakeLists.txt#_snippet_17\n\nLANGUAGE: CMake\nCODE:\n```\nset(INSTALL_BUNDLE_DATA_DIR \"${CMAKE_INSTALL_PREFIX}/data\")\nset(INSTALL_BUNDLE_LIB_DIR \"${CMAKE_INSTALL_PREFIX}/lib\")\n```\n\n----------------------------------------\n\nTITLE: Adding Plugin Library\nDESCRIPTION: Adds a shared library target for the Flutter plugin.  This defines how the plugin is built, including source files. New source files should be added to this list to be compiled into the plugin.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/packages/powersync_flutter_libs/linux/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(${PLUGIN_NAME} SHARED\n  \"powersync_flutter_libs_plugin.cc\"\n)\n```\n\n----------------------------------------\n\nTITLE: CMake Project Setup\nDESCRIPTION: This snippet sets the minimum CMake version required and defines the project name. It initializes the project with CXX language support and sets up basic project configurations needed for building the Flutter runner application on Windows.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-todolist/windows/runner/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\nproject(runner LANGUAGES CXX)\n```\n\n----------------------------------------\n\nTITLE: Adding Executable Target\nDESCRIPTION: Defines the executable target for the application.  It specifies the source files to be compiled into the executable. BINARY_NAME is defined in the top-level CMakeLists.txt file.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-todolist-drift/windows/runner/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(${BINARY_NAME} WIN32\n  \"flutter_window.cpp\"\n  \"main.cpp\"\n  \"utils.cpp\"\n  \"win32_window.cpp\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n  \"Runner.rc\"\n  \"runner.exe.manifest\"\n)\n```\n\n----------------------------------------\n\nTITLE: Define C++ Wrapper Sources (Plugin)\nDESCRIPTION: Defines the C++ wrapper sources specific to plugins. These sources handle plugin registration.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/supabase-anonymous-auth/windows/flutter/CMakeLists.txt#_snippet_9\n\nLANGUAGE: CMake\nCODE:\n```\nlist(APPEND CPP_WRAPPER_SOURCES_PLUGIN\n  \"plugin_registrar.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_PLUGIN PREPEND \"${WRAPPER_ROOT}/\")\n```\n\n----------------------------------------\n\nTITLE: Finding System Dependencies\nDESCRIPTION: This snippet uses the `pkg_check_modules` command to find and import required system dependencies using PkgConfig. It checks for GTK (gtk+-3.0), GLib (glib-2.0), and GIO (gio-2.0). These dependencies are essential for building a Flutter application with a GTK-based Linux target.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/django-todolist/linux/flutter/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(PkgConfig REQUIRED)\npkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk+-3.0)\npkg_check_modules(GLIB REQUIRED IMPORTED_TARGET glib-2.0)\npkg_check_modules(GIO REQUIRED IMPORTED_TARGET gio-2.0)\n```\n\n----------------------------------------\n\nTITLE: Setting CMake minimum version\nDESCRIPTION: Sets the minimum required CMake version for the project. This ensures that the build process uses a compatible version of CMake.\nSOURCE: https://github.com/powersync-ja/powersync.dart/blob/main/demos/django-todolist/windows/flutter/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\n```"
  }
]