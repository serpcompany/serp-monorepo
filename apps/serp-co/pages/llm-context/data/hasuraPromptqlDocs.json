[
  {
    "owner": "hasura",
    "repo": "promptql-docs",
    "content": "TITLE: Basic Request Body Structure\nDESCRIPTION: Core request body structure for executing a PromptQL program, including required fields for code, API key, LLM configuration, and DDN settings.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/promptql-apis/execute-program-api.mdx#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"code\": \"<your promptql program code>\",\n  \"promptql_api_key\": \"<promptql api key created from project settings>\",\n  \"ai_primitives_llm\": {\n    \"provider\": \"hasura\"\n  },\n  \"ddn\": {\n    \"url\": \"<project sql endpoint url>\",\n    \"headers\": {}\n  },\n  \"artifacts\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TypePermissions in Hasura\nDESCRIPTION: This YAML snippet demonstrates how to configure TypePermissions to control field-level access for different roles in a Hasura supergraph. It shows how to limit field visibility for 'admin' and 'user' roles on an 'article' type.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/metadata-reference/permissions.mdx#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nkind: TypePermissions\nversion: v1\ndefinition:\n  typeName: article\n  permissions:\n    - role: admin\n      output:\n        allowedFields:\n          - article_id\n          - author_id\n          - title\n    - role: user\n      output:\n        allowedFields:\n          - article_id\n          - author_id\n```\n\n----------------------------------------\n\nTITLE: Displaying Data Source Resources in PromptQL\nDESCRIPTION: Optional command to view resources discovered during introspection. This helps identify what entities are available for creating models.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/data-modeling/model.mdx#2025-04-17_snippet_1\n\nLANGUAGE: ddn\nCODE:\n```\nddn connector show-resources <connector_name>\n```\n\n----------------------------------------\n\nTITLE: Example Orders and Customers Query with Relationship\nDESCRIPTION: This GraphQL query demonstrates how to fetch orders along with their related customer details using the defined relationship. The query returns order information and nested customer data in a single request.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/metadata-reference/relationships.mdx#2025-04-17_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nquery OrdersAndCustomers {\n  orders {\n    orderId\n    orderDate\n    customer {\n      customerId\n      name\n      email\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Native PostgreSQL Operation to Connector\nDESCRIPTION: Command to create a native operation in the PostgreSQL connector configuration. Specifies the connector path, operation path, and operation type (mutation/query).\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/data-modeling/partials/classic-connectors/postgreSQL/_command-create-native-operation-how-to.mdx#2025-04-17_snippet_0\n\nLANGUAGE: ddn\nCODE:\n```\nddn connector plugin \\\n  --connector <subgraph_name>/<path-to-your-connector>/connector.yaml \\\n  -- \\\n  native-operation create \\\n  --operation-path <subgraph_name>/<path-to-your-connector>/native-operations/<operation_type>/<operation_name>.sql \\\n  --kind mutation\n```\n\n----------------------------------------\n\nTITLE: Authenticating CLI for Hasura DDN\nDESCRIPTION: This command authenticates the CLI for Hasura Cloud, allowing access to Hasura Cloud resources.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/_quickstart_template.mdx#2025-04-17_snippet_0\n\nLANGUAGE: ddn\nCODE:\n```\nddn auth login\n```\n\n----------------------------------------\n\nTITLE: Snowflake JDBC Connection Configuration\nDESCRIPTION: JDBC connection string format for Snowflake with database, warehouse, schema and role configuration.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/data-sources/connect-to-a-source.mdx#2025-04-17_snippet_7\n\nLANGUAGE: jdbc\nCODE:\n```\njdbc:snowflake://<account-identifier.<region>.snowflakecomputing.com?user=YOUR_USERNAME&&password=YOUR_PASSWORD&db=YOUR_DATABASE&warehouse=YOUR_WAREHOUSE&schema=YOUR_SCHEMA&role=YOUR_ROLE\n```\n\n----------------------------------------\n\nTITLE: Introspecting PostgreSQL Database with DDN CLI\nDESCRIPTION: Use the DDN CLI to introspect your PostgreSQL database and identify resources.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/data-modeling/partials/classic-connectors/postgreSQL/_command-create-tutorial.mdx#2025-04-17_snippet_0\n\nLANGUAGE: ddn\nCODE:\n```\nddn connector introspect <connector_name>\n```\n\n----------------------------------------\n\nTITLE: Configuring Auth0 Post-Login Action for Hasura JWT Claims\nDESCRIPTION: This JavaScript code sets up custom claims for Hasura in the Auth0 post-login action. It adds the necessary Hasura namespace with keys that Hasura DDN expects when decoding a JWT, including user roles and ID.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/auth/jwt/tutorials/integrations/1-auth0.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexports.onExecutePostLogin = async (event, api) => {\n  const namespace = \"claims.jwt.hasura.io\";\n  // Here, you'll need to fetch the user's role from Hasura DDN using an admin-level authenticated request\n  // Learn more here: https://hasura.io/docs/3.0/auth/authentication/jwt/special-roles\n  // Below, we're hard-coding the value for now\n  const user_role = \"user\"; // the role returned from your request ☝️\n  api.idToken.setCustomClaim(namespace, {\n    \"x-hasura-default-role\": user_role,\n    \"x-hasura-allowed-roles\": [user_role],\n    \"x-hasura-user-id\": event.user.user_id,\n    // Add any other custom claims you wish to include\n  });\n\n  // Set the necessary access token claims for Hasura to authenticate the user\n  api.accessToken.setCustomClaim(namespace, {\n    \"x-hasura-default-role\": user_role,\n    \"x-hasura-allowed-roles\": [user_role],\n    \"x-hasura-user-id\": event.user.user_id,\n  });\n};\n```\n\n----------------------------------------\n\nTITLE: Using PromptQL Artifacts for Email Processing in Python\nDESCRIPTION: This program demonstrates how to use previously stored artifacts in PromptQL. It retrieves emails from a table artifact, processes each email to extract the sender and classify if it's spam, and then marks spam emails accordingly.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/spec.mdx#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# Create a function to extract the sender's email address from an email\ndef get_sender_email(email):\n  extracted_info = primitives_extract(\n      json_schema=json_schema,\n      instructions=\"Extract the sender's email address from the email header (From: field)\",\n      input=email\n  )\n  return extracted_info.get('sender_email')\n\n# Create a function to classify an email as spam/scam\ndef classify_email(email):\n  classification = primitives_classify(\n    instructions=\"Determine if this email is likely to be spam/scam based on its content, tone, and characteristics\",\n    inputs_to_classify=[email],\n    categories=['Likely Spam', 'Legitimate Email'],\n    allow_multiple=False\n  )\n  return classification[0]\n\nemails = get_table_artifact('emails')\n\n# For each email, extract the sender's email address and classify if it's spam\nresult = []\nfor email in emails:\n    result.append({\n        'email': email,\n        'sender_email': get_sender_email(email),\n        'spam_classification': classify_email(email)\n    })\n\n# Run an action to mark the email as spam\nfor email in result:\n    if email['spam_classification'] == 'Likely Spam':\n        mark_email_as_spam(email['email'])\n```\n\n----------------------------------------\n\nTITLE: Defining a Hello Function Command in YAML\nDESCRIPTION: Example YAML configuration for a simple Hello command that demonstrates the basic structure of a Hasura DDN command definition. This command is backed by a function named 'hello' in a data connector and exposes a GraphQL query that accepts a name parameter and returns a string.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/metadata-reference/commands.mdx#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nkind: Command\nversion: v1\ndefinition:\n  name: Hello\n  outputType: String!\n  arguments:\n    - name: name\n      type: String\n  source:\n    dataConnectorName: my_data_connector\n    dataConnectorCommand:\n      function: hello\n  graphql:\n    rootFieldName: hello\n    rootFieldKind: Query\n```\n\n----------------------------------------\n\nTITLE: Structuring Request Body for Natural Language API in JSON\nDESCRIPTION: Demonstrates the structure of the JSON request body for the Natural Language API, including version, API key, LLM configuration, DDN settings, and interaction details.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/promptql-apis/natural-language-api.mdx#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"version\": \"v1\",\n  \"promptql_api_key\": \"<promptql api key created from project settings>\",\n  \"llm\": {\n    \"provider\": \"hasura\"\n  },\n  \"ddn\": {\n    \"url\": \"<project sql endpoint url>\",\n    \"headers\": {}\n  },\n  \"artifacts\": [],\n  \"system_instructions\": \"Optional system instructions for the LLM\",\n  \"timezone\": \"America/Los_Angeles\",\n  \"interactions\": [\n    {\n      \"user_message\": {\n        \"text\": \"Your message here\"\n      },\n      \"assistant_actions\": [\n        {\n          \"message\": \"Previous assistant message\",\n          \"plan\": \"Previous execution plan\",\n          \"code\": \"Previously executed code\",\n          \"code_output\": \"Previous code output\",\n          \"code_error\": \"Previous error message if any\"\n        }\n      ]\n    }\n  ],\n  \"stream\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing PromptQL Project with DDN CLI\nDESCRIPTION: Creates a new PromptQL project with bulk data handling capabilities\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/how-to-build-with-promptql/with-apis-with-bulk-data.mdx#2025-04-17_snippet_0\n\nLANGUAGE: ddn\nCODE:\n```\nddn supergraph init bulk-data --with-promptql && cd bulk-data\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Logic in Python\nDESCRIPTION: Defines a Python function that simulates taking an action on behalf of a user. It uses Pydantic for data validation and includes a FunctionConnector for registering the mutation.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/business-logic/tutorials/1-take-action-for-a-user.mdx#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom hasura_ndc import start\nfrom hasura_ndc.function_connector import FunctionConnector\nfrom pydantic import BaseModel, Field\nfrom hasura_ndc.errors import UnprocessableContent\nfrom typing import Annotated\n\nconnector = FunctionConnector()\n\nclass UserActionArguments(BaseModel):\n    request: Annotated[str, Field(description=\"What the user wants to do\")]\n\nclass UserActionResponse(BaseModel):\n    success: bool\n    message: str\n\n@connector.register_mutation\ndef take_action_on_behalf_of_user(args: UserActionArguments) -> UserActionResponse:\n    print(\"Taking action on behalf of user\")\n    return UserActionResponse(\n        success=True,\n        message=f\"Successfully took action on user's behalf: {args.request}\"\n    )\n\nif __name__ == \"__main__\":\n    start(connector)\n```\n\n----------------------------------------\n\nTITLE: Configuring Secure Data Connector with Environment Variables in YAML\nDESCRIPTION: Example configuration showing how to use environment variables for securing sensitive connector information like URLs and authentication headers in Hasura DDN. This approach prevents hardcoding of sensitive values in configuration files.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/help/security.mdx#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Example of using valueFromEnv in a connector configuration\nkind: DataConnectorLink\nversion: v1\ndefinition:\n  name: my_connector\n  url:\n    readWriteUrls:\n      read:\n        valueFromEnv: MY_CONNECTOR_READ_URL # URL is stored as an env var\n      write:\n        valueFromEnv: MY_CONNECTOR_WRITE_URL # URL is stored as an env var\n  headers:\n    Authorization:\n      valueFromEnv: MY_CONNECTOR_AUTHORIZATION_HEADER # API Key/Secret is stored as an env var\n  schema: ...\n```\n\n----------------------------------------\n\nTITLE: Configuring AuthConfig for JWT in Hasura\nDESCRIPTION: This YAML snippet demonstrates how to set up the AuthConfig object in Hasura to enable JWT authentication. It specifies the JWT mode, claims configuration, token location, and key verification method.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/auth/jwt/jwt-mode.mdx#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nkind: AuthConfig\nversion: v3\ndefinition:\n  mode:\n    jwt:\n      claimsConfig:\n        namespace:\n          claimsFormat: Json\n          location: /claims.jwt.hasura.io\n      tokenLocation:\n        type: BearerAuthorization\n      key:\n        fixed:\n          algorithm: HS256\n          key:\n            valueFromEnv: AUTH_SECRET\n```\n\n----------------------------------------\n\nTITLE: Adding Resources to DDN Metadata\nDESCRIPTION: A series of DDN CLI commands to add models, commands, and relationships from the connector to the project's metadata. The '*' wildcard is used to add all available resources.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/how-to-build-with-promptql/_boilerplateDx.mdx#2025-04-17_snippet_3\n\nLANGUAGE: ddn\nCODE:\n```\nddn model add my_connector \"*\"\nddn command add my_connector \"*\"\nddn relationship add my_connector \"*\"\n```\n\n----------------------------------------\n\nTITLE: Adding Descriptions to Commands in PromptQL\nDESCRIPTION: Example of adding semantic information to a WebSearch command. The description explains the purpose, inputs, return values, and usage examples of the function. It also includes descriptions for each argument.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/data-modeling/semantic-information.mdx#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nkind: Command\nversion: v1\ndefinition:\n  name: WebSearch\n  graphql:\n    rootFieldName: webSearch\n    rootFieldKind: Query\n  description: |\n    Perform a web search using DuckDuckGo and return the results.\n    Takes in default input arguments for limit and region.\n    limit is the number of results to return, default 10.\n    region is the region to search in, default \"us-en\".\n\n    Args:\n        search_term (str): The term to search for.\n\n    Returns:\n        List[Result]: A list of search result objects.\n  arguments:\n    - name: searchTerm\n      type: String!\n      description: The search query term to look up. Should be a clear, specific search phrase.\n    - name: limit\n      type: Int!\n      description: Maximum number of search results to return. Must be between 1 and 100.\n    - name: region\n      type: String!\n      description: Geographic region code for search results (e.g., us-en, uk-en).\n  source:\n    dataConnectorName: duckduckgo\n    argumentMapping:\n      limit: limit\n      region: region\n      searchTerm: search_term\n    dataConnectorCommand:\n      function: web_search\n  outputType: \"[WebSearch!]!\"\n```\n\n----------------------------------------\n\nTITLE: Creating PromptQL Artifacts from Email Data in Python\nDESCRIPTION: This program fetches the last 10 unread emails and stores them in a table artifact. Artifacts in PromptQL serve as persistent data stores that can be referenced from other PromptQL programs.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/spec.mdx#2025-04-17_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# Fetch last 10 unread emails\nemails = fetch_emails(limit=10, unread=True)\n\n# Create a list with one dictionary containing the emails\nresult = []\nfor email in emails:\n    result.append({\n        'email': email\n    })\n\n# Store as an artifact\nstore_table_artifact(\n    'emails',\n    'Last 10 unread emails',\n    'table',\n    result\n)\n```\n\n----------------------------------------\n\nTITLE: Applying Supergraph Build in DDN CLI\nDESCRIPTION: This command finalizes the integration, making the changes available to all collaborators. Only available to Owner and Admin roles.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/project-configuration/subgraphs/working-with-multiple-repositories.mdx#2025-04-17_snippet_11\n\nLANGUAGE: ddn\nCODE:\n```\nddn supergraph build apply <supergraph-build-version>\n```\n\n----------------------------------------\n\nTITLE: Defining an Object Type in YAML for PromptQL\nDESCRIPTION: A comprehensive example showing how to define a custom 'Author' object type in PromptQL, including field definitions, descriptions, global ID fields, GraphQL configuration, and data connector mappings for both a regular database and a vector database.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/metadata-reference/types.mdx#2025-04-17_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nkind: ObjectType\nversion: v1\ndefinition:\n  name: Author\n  fields:\n    - name: author_id\n      type: Int!\n      description: The id of the author\n    - name: first_name\n      type: String\n      description: The first name of the author\n    - name: last_name\n      type: String\n      description: The last name of the author\n    - name: biography\n      type: String\n      description: AI generated biography for the author\n      arguments:\n        - name: ai_model\n          argumentType: String!\n          description: The AI model to use for generating the biography\n  description: An author of a book\n  globalIdFields:\n    - author_id\n  graphql:\n    typeName: Author\n  dataConnectorTypeMapping:\n    - dataConnectorName: my_db\n      dataConnectorObjectType: author\n      fieldMapping:\n        author_id:\n          column:\n            name: id\n    - dataConnectorName: my_vector_db\n      dataConnectorObjectType: author\n      fieldMapping:\n        biography:\n          column:\n            name: biography\n            argumentMapping:\n              ai_model: model\n```\n\n----------------------------------------\n\nTITLE: Complete Model with Semantic Information in PromptQL\nDESCRIPTION: Comprehensive example of a product inventory model with semantic descriptions at multiple levels, including model, fields, and relationships. It demonstrates how to document business rules, constraints, and relationships.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/data-modeling/semantic-information.mdx#2025-04-17_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nkind: Model\nversion: v1\ndefinition:\n  name: product_inventory\n  description: |\n    Manages product inventory across all warehouses.\n    Updated in real-time with inventory movements.\n    Integrates with order processing and procurement systems.\n    Maintains historical inventory levels with daily snapshots.\n  fields:\n    - name: product_id\n      type: uuid\n      description: Unique product identifier. References master product catalog.\n\n    - name: warehouse_id\n      type: uuid\n      description: Identifier of the warehouse where product is stored. Foreign key to warehouses table.\n\n    - name: quantity_available\n      type: Int\n      description: |\n        Current available quantity for sale.\n        Excludes reserved and damaged items.\n        Negative values not allowed.\n        Updated via inventory_movement table.\n\n    - name: reorder_point\n      type: Int\n      description: |\n        Quantity threshold that triggers reorder.\n        Calculated weekly based on 30-day moving average of daily sales.\n        Must be greater than zero.\n\n    - name: last_counted_at\n      type: timestamp\n      description: |\n        Timestamp of last physical inventory count.\n        Updated by inventory audit process.\n        Should not be more than 30 days old.\n\n  relationships:\n    - name: warehouse\n      target: warehouses\n      description: Links to warehouse details. Each product-warehouse combination must be unique.\n\n    - name: product\n      target: products\n      description: Links to product master data. Inactive products still maintain inventory records.\n```\n\n----------------------------------------\n\nTITLE: Complete Node.js Server with Firebase Authentication\nDESCRIPTION: A complete Express.js server implementation that handles user login with Firebase, verifies tokens, adds custom claims for Hasura, and returns the JWT to the client.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/auth/jwt/tutorials/integrations/3-firebase.mdx#2025-04-17_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst express = require(\"express\");\nconst admin = require(\"firebase-admin\");\nconst bodyParser = require(\"body-parser\");\nconst axios = require(\"axios\");\n\n// Initialize Firebase Admin SDK\nadmin.initializeApp({\n  credential: admin.credential.cert(require(\"./service_account.json\")),\n});\n\nconst app = express();\napp.use(bodyParser.json());\n\n// Firebase API key from your Firebase project settings\nconst FIREBASE_API_KEY = \"your API key found on the Firebase project's console\";\n\n// Route to handle user login with email and password\napp.post(\"/login\", async (req, res) => {\n  const { email, password } = req.body;\n\n  if (!email || !password) {\n    return res.status(400).json({ message: \"Email and password are required\" });\n  }\n\n  try {\n    // Call Firebase REST API to sign in the user with email and password\n    const response = await axios.post(\n      `https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=${FIREBASE_API_KEY}`,\n      {\n        email,\n        password,\n        returnSecureToken: true,\n      }\n    );\n\n    const { idToken } = response.data;\n\n    // Verify the token using Firebase Admin SDK\n    const decodedToken = await admin.auth().verifyIdToken(idToken);\n\n    // Here, you'll need to fetch the user's role from Hasura DDN using an admin-level authenticated request\n    // Learn more here: https://hasura.io/docs/3.0/auth/authentication/jwt/special-roles\n    // Below, we're hard-coding the value for now\n    const user_role = \"user\"; // the role returned from your request ☝️\n    const customClaims = {\n      \"claims.jwt.hasura.io\": {\n        \"x-hasura-default-role\": user_role,\n        \"x-hasura-allowed-roles\": [\"user\"],\n        \"x-hasura-user-id\": decodedToken.uid,\n      },\n    };\n\n    // Set custom claims for the user based on their uid\n    await admin.auth().setCustomUserClaims(decodedToken.uid, customClaims);\n\n    // Send the updated JWT back in the response\n    res.status(200).json({\n      idToken,\n    });\n  } catch (error) {\n    console.error(\"Error logging in:\", error.response?.data || error.message);\n    res.status(401).json({ message: \"Invalid credentials\", error: error.response?.data || error.message });\n  }\n});\n\napp.listen(4000, () => {\n  console.log(\"Server running on port 4000\");\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Object OrderByExpression in Hasura\nDESCRIPTION: Example demonstrating how to define ordering rules for an Album object type, including field-level ordering configurations and relationship ordering. Shows how to specify different ordering expressions for various fields.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/metadata-reference/orderby-expressions.mdx#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nkind: OrderByExpression\nversion: v1\ndefinition:\n  name: Album_orderby_exp\n  operand:\n    object:\n      orderedType: Album\n      orderableFields:\n        - fieldName: AlbumId\n          orderByExpression: Int_orderby_exp\n        - fieldName: ArtistId\n          orderByExpression: Int_orderby_exp_asc\n        - fieldName: Address\n          orderByExpression: Address_orderby_exp\n      orderableRelationships:\n        - relationshipName: artist\n          orderByExpression: Artist_orderby_exp\n        - relationshipName: genre\n  graphql:\n    expressionTypeName: Album_orderby_Exp\n```\n\n----------------------------------------\n\nTITLE: Controlling Command Execution with CommandPermissions in PromptQL\nDESCRIPTION: A YAML configuration for controlling which commands can be executed by which roles. This example allows users to update only their own records by restricting the keyId argument to match their user-id session variable.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/data-modeling/permissions.mdx#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n# e.g., UpdateUsersById.hml\n---\nkind: CommandPermissions\nversion: v1\ndefinition:\n  commandName: UpdateUsersById # Specify the existing command\n  permissions:\n    - role: admin\n      allowExecution: true\n      #highlight-start\n    - role: user\n      allowExecution: true\n      argumentPresets: # Specify the arguments and their values which need to be passed to the command\n        - argument: keyId\n          value:\n            sessionVariable: \"x-hasura-user-id\" # The value of the argument must equal the session variable\n      #highlight-end\n```\n\n----------------------------------------\n\nTITLE: Configuring Snowflake JDBC Connection String\nDESCRIPTION: Example JDBC connection string format for connecting to Snowflake database. Includes parameters for account identifier, username, password, database, warehouse, schema and role configurations.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/how-to-build-with-promptql/with-snowflake.mdx#2025-04-17_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\njdbc:snowflake://<account-identifier.<region>.snowflakecomputing.com?user=YOUR_USERNAME&&password=YOUR_PASSWORD&db=YOUR_DATABASE&warehouse=YOUR_WAREHOUSE&schema=YOUR_SCHEMA&role=YOUR_ROLE\n```\n\n----------------------------------------\n\nTITLE: Initializing PromptQL Python Connector\nDESCRIPTION: Creates a new Python connector instance using the DDN CLI tool\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/data-modeling/partials/lambda-connectors/python/_command-create-tutorial.mdx#2025-04-17_snippet_0\n\nLANGUAGE: ddn\nCODE:\n```\nddn connector init my_python -i\n```\n\n----------------------------------------\n\nTITLE: Building Local Supergraph in DDN\nDESCRIPTION: Command to build a new local supergraph after updating the data model.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/data-modeling/iterate.mdx#2025-04-17_snippet_4\n\nLANGUAGE: ddn\nCODE:\n```\nddn supergraph build local\n```\n\n----------------------------------------\n\nTITLE: Implementing a Simple PromptQL Program for Email Fetching in Python\nDESCRIPTION: A basic PromptQL program that fetches the last 10 unread emails and calculates their average. It demonstrates how PromptQL programs can read data by invoking Python functions.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/spec.mdx#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# Fetch last 10 unread emails\nemails = fetch_emails(limit=10, unread=True)\n\n# Calculate average\naverage = sum(emails) / len(emails)\n```\n\n----------------------------------------\n\nTITLE: Model Permissions with Direct Filter\nDESCRIPTION: Example of model permissions configuration with direct field comparison filter for different roles.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/metadata-reference/permissions.mdx#2025-04-17_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nkind: ModelPermissions\nversion: v1\ndefinition:\n  modelName: Articles\n  permissions:\n    - role: admin\n      select:\n        filter: null\n    - role: user\n      select:\n        filter:\n          fieldComparison:\n            field: author_id\n            operator: _eq\n            value:\n              sessionVariable: x-hasura-user-id\n```\n\n----------------------------------------\n\nTITLE: Defining Table Structure in PromptQL Configuration\nDESCRIPTION: A comprehensive example of how to define tables with columns, data types, constraints, primary keys, and foreign keys. This detailed configuration enables the data connector to understand and work with the database's structure and relationships.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/connectors/_jdbcConfig.mdx#2025-04-17_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"tables\": [\n    {\n      \"name\": \"public.customers\",\n      \"description\": \"Customer information table\",\n      \"category\": \"TABLE\",\n      \"columns\": [\n        {\n          \"name\": \"customer_id\",\n          \"description\": \"Unique customer identifier\",\n          \"type\": {\n            \"scalar_type\": \"INT64\"\n          },\n          \"nullable\": false,\n          \"auto_increment\": false,\n          \"is_primarykey\": true\n        },\n        {\n          \"name\": \"name\",\n          \"description\": \"Customer name\",\n          \"type\": {\n            \"scalar_type\": \"STRING\"\n          },\n          \"nullable\": false,\n          \"auto_increment\": false\n        },\n        {\n          \"name\": \"location\",\n          \"description\": \"Geographic location\",\n          \"type\": {\n            \"scalar_type\": \"GEOGRAPHY\"\n          },\n          \"nullable\": true,\n          \"auto_increment\": false\n        },\n        {\n          \"name\": \"tags\",\n          \"description\": \"Customer tags\",\n          \"type\": {\n            \"array_type\": {\n              \"scalar_type\": \"STRING\"\n            }\n          },\n          \"nullable\": true,\n          \"auto_increment\": false\n        }\n      ],\n      \"primary_keys\": [\"customer_id\"],\n      \"foreign_keys\": {\n        \"fk_customer_order\": {\n          \"column_mapping\": {\n            \"customer_id\": \"customer_id\"\n          },\n          \"foreign_collection\": \"public.orders\"\n        }\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Native SQL Query with Parameterization\nDESCRIPTION: Creates a SQL query file that ranks users of the same age. It demonstrates using parameterized variables (enclosed in {{ }}) to make the query dynamic and reusable.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/data-modeling/partials/classic-connectors/postgreSQL/_model-create-native-query-tutorial.mdx#2025-04-17_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\n-- native_operations/queries/order_users_of_same_age.sql\nSELECT\n    id,\n    name,\n    age,\n    RANK() OVER (PARTITION BY age ORDER BY name ASC) AS rank_within_age\nFROM\n    users\nWHERE\n    age = {{ age }}\n```\n\n----------------------------------------\n\nTITLE: Defining Object Boolean Expression Type in Hasura YAML\nDESCRIPTION: This snippet shows how to create an object boolean expression type for an Album entity, specifying different comparison operators for its fields and relationships.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/metadata-reference/boolean-expressions.mdx#2025-04-17_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nkind: BooleanExpressionType\nversion: v2\ndefinition:\n  name: Album_bool_exp\n  operand:\n    object:\n      type: Album\n      comparableFields:\n        - fieldName: AlbumId\n          booleanExpressionType: Int_comparison_exp\n        - fieldName: ArtistId\n          booleanExpressionType: Int_comparison_exp_with_is_null\n        - fieldName: Address\n          booleanExpressionType: Address_bool_exp\n      comparableRelationships:\n        - relationshipName: artist\n          booleanExpressionType: Artist_bool_exp\n  logicalOperators:\n    enable: true\n  isNull:\n    enable: true\n  graphql:\n    typeName: Album_bool_exp\n```\n\n----------------------------------------\n\nTITLE: Importing React Components for PromptQL Documentation\nDESCRIPTION: This code snippet imports two custom React components used in the PromptQL documentation: Prereqs and Quickstart. These components likely contain reusable content for prerequisites and quickstart instructions.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/quickstart.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Prereqs from \"@site/docs/_prereqs.mdx\";\nimport Quickstart from \"@site/docs/_quickstart_template.mdx\";\n```\n\n----------------------------------------\n\nTITLE: Defining a Customer-Orders Relationship in YAML Metadata\nDESCRIPTION: YAML configuration that manually defines a one-to-many relationship from Customers to Orders, specifying the mapping between fields and the relationship type.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/data-modeling/relationship.mdx#2025-04-17_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n---\nkind: Relationship\nversion: v1\ndefinition:\n  sourceType: Customers # The existing source object type which also defines the model\n  name: orders # A name we want to use when we query the Orders from the Customer\n  description: |\n    Links customers to their purchase orders.\n    One customer can have multiple orders.\n    This is a critical business relationship that supports order history lookups, \n    customer purchase analysis, and revenue attribution.\n    Historical orders are retained even if customer becomes inactive.\n  target:\n    model: # The target can be a model or a command\n      name: Orders # The existing model that we want to access when we query the Orders from the Customer\n      relationshipType: Array # The relationship type which can be Object or Array. Since a customer can have many orders, we use an Array.\n  mapping: # The mapping defines which field on the source object type maps to which field on the target model\n    - source:\n        fieldPath:\n          - fieldName: customerId # The existing field on the source object type that we want to map to the target model\n      target:\n        modelField:\n          - fieldName: customerId # The existing field on the target model that we want to map to the source object type\n```\n\n----------------------------------------\n\nTITLE: PostgreSQL JDBC Connection Configuration\nDESCRIPTION: JDBC connection string format for PostgreSQL database with optional schema configuration.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/data-sources/connect-to-a-source.mdx#2025-04-17_snippet_5\n\nLANGUAGE: jdbc\nCODE:\n```\njdbc:postgresql://<host>:<port>/<database>?user=<username>&password=<password>\n```\n\n----------------------------------------\n\nTITLE: Building and Serving a Supergraph API in DDN\nDESCRIPTION: Commands to build a local supergraph API and start a Docker container to serve it. This creates a GraphQL API that exposes the data models with their relationships.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/data-modeling/partials/classic-connectors/postgreSQL/_relationship-create-model-to-model.mdx#2025-04-17_snippet_2\n\nLANGUAGE: ddn\nCODE:\n```\nddn supergraph build local\nddn run docker-start\n```\n\n----------------------------------------\n\nTITLE: Visualizing PromptQL Query Plan Creation and Execution Flow\nDESCRIPTION: This Mermaid flowchart illustrates the process of creating and executing a query plan in PromptQL. It shows the steps from user input through various data processing stages to the final result, emphasizing the separation between plan creation (an LLM task) and plan execution (a programmatic task).\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/benchmark.mdx#2025-04-17_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart TD\n  subgraph \"Create query plan (LLM task)\"\n    A[Fetch last 20 open tickets]\n    B[Extract project_id]\n    C[Enrich tickets with more project information]\n    D[Fetch ticket comments]\n    E[Classify ticket criticality]\n    F[Enrich ticket with all the required information]\n    G[Run ranking algorithm]\n\n    A --> B\n    B --> C\n    C --> D\n    D --> E\n    E --> F\n    F --> G\n  end\n\n  UI[User input] --> A\n\n  G --> H[\"Run query plan<br/><i>programmatically</i>\"]\n\n  subgraph Inputs\n    I[Tools]\n    J[LLM]\n  end\n\n  I --> H\n  J --> H\n\n  H --> R[Result]\n```\n\n----------------------------------------\n\nTITLE: Defining a Model in YAML for PromptQL\nDESCRIPTION: This YAML snippet demonstrates how to define a Model (v1) in PromptQL. It includes configurations for the model name, object type, data source, filter expressions, orderable fields, and GraphQL-specific settings.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/metadata-reference/models.mdx#2025-04-17_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nkind: Model\nversion: v1\ndefinition:\n  name: Articles\n  objectType: article\n  globalIdSource: true\n  arguments: []\n  source:\n    dataConnectorName: data_connector\n    collection: articles\n    argumentMapping: {}\n  filterExpressionType: Article_bool_exp\n  orderableFields:\n    - fieldName: article_id\n      orderByDirections:\n        enableAll: true\n    - fieldName: title\n      orderByDirections:\n        enableAll: true\n    - fieldName: author_id\n      orderByDirections:\n        enableAll: true\n  graphql:\n    selectUniques:\n      - queryRootField: ArticleByID\n        uniqueIdentifier:\n          - article_id\n        description: Description for the select unique ArticleByID\n    selectMany:\n      queryRootField: ArticleMany\n      description: Description for the select many ArticleMany\n    orderByExpressionType: Article_Order_By\n    apolloFederation:\n      entitySource: true\n  description: Description for the model Articles\n```\n\n----------------------------------------\n\nTITLE: Updating Source Data Introspection using DDN CLI\nDESCRIPTION: Command to re-introspect a data source when the underlying schema has changed, which is the first step in updating relationships.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/data-modeling/relationship.mdx#2025-04-17_snippet_5\n\nLANGUAGE: ddn\nCODE:\n```\nddn connector introspect <connector_name>\n```\n\n----------------------------------------\n\nTITLE: Configuring CommandPermissions with Argument Presets\nDESCRIPTION: This YAML snippet demonstrates how to configure CommandPermissions to control who can execute commands with additional security constraints. It shows how to allow both admin and user roles to execute a delete command, but with preset arguments that restrict users based on a field value.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/metadata-reference/permissions.mdx#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nkind: CommandPermissions\nversion: v1\ndefinition:\n  commandName: delete_user_by_id\n  permissions:\n    - role: admin\n      allowExecution: true\n    - role: user\n      allowExecution: true\n      argumentPresets:\n        - argument: pre_check\n          value:\n            booleanExpression:\n              fieldComparison:\n                field: is_invincible\n                operator: _eq\n                value:\n                  literal: false\n```\n\n----------------------------------------\n\nTITLE: Configuring JWT Authentication in YAML\nDESCRIPTION: Example configuration for JWT authentication, including claims configuration, token location, and key settings.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/metadata-reference/auth-config.mdx#2025-04-17_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\naudience: null\nissuer: null\nallowedSkew: null\nclaimsConfig:\n  namespace:\n    claimsFormat: Json\n    location: /claims.jwt.hasura.io\ntokenLocation:\n  type: BearerAuthorization\nkey:\n  fixed:\n    algorithm: HS256\n    key:\n      value: token\n```\n\n----------------------------------------\n\nTITLE: Configuring ModelPermissions for User-Specific Access in Hasura\nDESCRIPTION: Demonstrates how to set up ModelPermissions to restrict data access based on user ID using session variables. Allows admin full access while limiting users to only their own records.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/auth/permissions/tutorials/1-simple-user-permissions.mdx#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nkind: ModelPermissions\nversion: v1\ndefinition:\n  modelName: Users\n  permissions:\n    - role: admin\n      select:\n        filter: null\n    - role: user\n      select:\n        filter:\n          fieldComparison:\n            field: id\n            operator: _eq\n            value:\n              sessionVariable: x-hasura-user-id\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Providers for LLM and AI Primitives\nDESCRIPTION: Advanced configuration example demonstrating how to set different providers and models for main LLM and AI primitives functionality.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/project-configuration/promptql-config.mdx#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nkind: PromptQlConfig\nversion: v1\ndefinition:\n  llm:\n    provider: openai\n    model: o3-mini\n  ai_primitives_llm:\n    provider: openai\n    model: gpt-4o\n  system_instructions: |\n    You are a helpful AI Assistant.\n```\n\n----------------------------------------\n\nTITLE: Configuring RSA-based JWT Authentication in Hasura (JWKs)\nDESCRIPTION: Example configuration for RSA-based JWT authentication using a public key published as JWKs.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/auth/jwt/jwt-configuration.mdx#2025-04-17_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\nkind: AuthConfig\nversion: v3\ndefinition:\n  mode:\n    jwt:\n      claimsConfig:\n        namespace:\n          claimsFormat: Json\n          location: /claims.jwt.hasura.io\n      tokenLocation:\n        type: BearerAuthorization\n      key:\n        jwkFromUrl: https://www.googleapis.com/service_accounts/v1/jwk/securetoken@system.gserviceaccount.com\n```\n\n----------------------------------------\n\nTITLE: Configuring GraphQL Schema with GraphqlConfig in Hasura\nDESCRIPTION: This example shows a complete GraphqlConfig object that configures the root type names, field names for model selection inputs, and enum values for sorting operations. This configuration must be defined once in any subgraph of your supergraph.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/metadata-reference/graphql-config.mdx#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nkind: GraphqlConfig\nversion: v1\ndefinition:\n  query:\n    rootOperationTypeName: Query\n    argumentsInput:\n      fieldName: args\n    limitInput:\n      fieldName: limit\n    offsetInput:\n      fieldName: offset\n    filterInput:\n      fieldName: where\n      operatorNames:\n        and: _and\n        or: _or\n        not: _not\n        isNull: _is_null\n    orderByInput:\n      fieldName: order_by\n      enumDirectionValues:\n        asc: Asc\n        desc: Desc\n      enumTypeNames:\n        - directions:\n            - Asc\n            - Desc\n          typeName: OrderBy\n  mutation:\n    rootOperationTypeName: Mutation\n  apolloFederation:\n    enableRootFields: false\n```\n\n----------------------------------------\n\nTITLE: Redshift JDBC Connection Configuration\nDESCRIPTION: JDBC connection string format for Amazon Redshift database with schema configuration.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/data-sources/connect-to-a-source.mdx#2025-04-17_snippet_6\n\nLANGUAGE: jdbc\nCODE:\n```\njdbc:redshift://<host>:<port>/<database>?user=<username>&password=<password>\n```\n\n----------------------------------------\n\nTITLE: Configuring a Supergraph in YAML\nDESCRIPTION: Defines a supergraph configuration that includes two subgraphs. The config specifies the kind as Supergraph, version as v2, and lists the paths to the subgraph configuration files.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/metadata-reference/build-configs.mdx#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nkind: Supergraph\nversion: v2\ndefinition:\n  subgraphs:\n    - globals/subgraph.yaml\n    - app/subgraph.yaml\n```\n\n----------------------------------------\n\nTITLE: Introspecting Data Source in PromptQL\nDESCRIPTION: Command to introspect a data source to discover available resources for model creation. This is the first step in making your data accessible to PromptQL.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/data-modeling/model.mdx#2025-04-17_snippet_0\n\nLANGUAGE: ddn\nCODE:\n```\nddn connector introspect <connector_name>\n```\n\n----------------------------------------\n\nTITLE: Configuring Delete User Command Permissions in YAML\nDESCRIPTION: This YAML snippet demonstrates how to configure command permissions for a 'delete_user_by_id' command. It shows role-based access control and argument presets for admin and user roles.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/auth/permissions/command-permissions.mdx#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nkind: CommandPermissions\nversion: v1\ndefinition:\n  commandName: delete_user_by_id\n  permissions:\n    - role: admin\n      allowExecution: true\n    - role: user\n      allowExecution: true\n      argumentPresets:\n        - argument: pre_check\n          value:\n            booleanExpression:\n              fieldComparison:\n                field: is_invincible\n                operator: _eq\n                value:\n                  literal: false\n```\n\n----------------------------------------\n\nTITLE: Configuring DataConnectorLink in YAML\nDESCRIPTION: A sample DataConnectorLink configuration that demonstrates how to specify connector URL, headers, schema, and capabilities. This configuration is used to link data sources to subgraphs and define their interaction parameters.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/metadata-reference/data-connector-links.mdx#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nkind: DataConnectorLink\nversion: v1\ndefinition:\n  name: data_connector\n  url:\n    singleUrl:\n      value: http://data_connector:8100\n  headers: {}\n  schema:\n    version: v0.1\n    schema:\n      scalar_types: {}\n      object_types: {}\n      collections: []\n      functions: []\n      procedures: []\n    capabilities:\n      version: 0.1.3\n      capabilities:\n        query:\n          nested_fields: {}\n          variables: {}\n        mutation: {}\n```\n\n----------------------------------------\n\nTITLE: Defining TypePermissions for Article Type in YAML\nDESCRIPTION: This YAML snippet demonstrates how to define TypePermissions for an 'article' type, allowing admin access to all fields while restricting user access to the 'author_id' field. It showcases the structure of a TypePermissions object including roles, output context, and allowed fields.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/auth/permissions/type-permissions.mdx#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nkind: TypePermissions\nversion: v1\ndefinition:\n  typeName: article\n  permissions:\n    # highlight-start\n    - role: admin\n      output:\n        allowedFields:\n          - article_id\n          - author_id\n          - title\n    - role: user\n      output:\n        allowedFields:\n          - article_id\n          - title\n  # highlight-end\n```\n\n----------------------------------------\n\nTITLE: Using PromptQL Primitives for Email Analysis in Python\nDESCRIPTION: This PromptQL program demonstrates the use of AI primitives to analyze an email. It extracts the sender's email address using the extract primitive and classifies whether the email is spam using the classify primitive.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/spec.mdx#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# A PromptQL program that uses AI to analyze an email\n\nemail_text = \"\"\"From: prince.nigeria@royalfamily.ng\nDate: Thu, 14 Mar 2024 15:23:47 +0000\nTo: recipient@email.com\nSubject: URGENT: Your Assistance Required - $25M Inheritance\n\nDear Beloved Friend,\n\nI am Prince Mohammed Ibrahim, the son of late King Ibrahim of Nigeria. I am writing to request your urgent assistance in transferring the sum of $25,000,000 (Twenty-Five Million United States Dollars) from my father's account to your account.\n\nAs the sole heir to the throne and my father's fortune, I need a trusted foreign partner to help move these funds out of the country due to political instability. In return for your assistance, I am prepared to offer you 25% of the total sum.\n\nTo proceed, I only require:\n1. Your full name\n2. Bank account details\n3. A small processing fee of $1,000\n\nPlease treat this matter with utmost confidentiality and respond urgently.\n\nBest regards,\nPrince Mohammed Ibrahim\nRoyal Family of Nigeria\nTel: +234 801 234 5678\n\"\"\"\n\n# Extract the sender's email using the extract primitive\njson_schema = {\n    \"type\": \"object\",\n    \"properties\": {\n        \"sender_email\": {\n            \"type\": \"string\",\n            \"description\": \"The email address of the sender\"\n        }\n    }\n}\n\nextracted_info = primitives_extract(\n    json_schema=json_schema,\n    instructions=\"Extract the sender's email address from the email header (From: field)\",\n    input=email_text\n)\n\n# Classify if it's spam\nclassification = primitives_classify(\n    instructions=\"Determine if this email is likely to be spam/scam based on its content, tone, and characteristics\",\n    inputs_to_classify=[email_text],\n    categories=['Likely Spam', 'Legitimate Email'],\n    allow_multiple=False\n)\n\n# Store results in an artifact\nresult = [{\n    'email_content': email_text,\n    'extracted_sender': extracted_info.get('sender_email'),\n    'spam_classification': classification[0]\n}]\n\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Adding Descriptions to Database Tables in PromptQL\nDESCRIPTION: Example of adding semantic information to a customers table. The description explains what the table represents, its key relationships, and important business rules about data lifecycle.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/data-modeling/semantic-information.mdx#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nkind: Model\nversion: v1\ndefinition:\n  name: customers\n  description: |\n    Stores customer information for both individual and business accounts.\n    Customers can have multiple addresses and orders.\n    Inactive customers are soft-deleted (is_active=false) rather than removed.\n    Customer IDs are globally unique across all regions.\n  fields:\n    - name: id\n      type: uuid\n      description: Globally unique identifier for the customer. Used across all systems.\n    - name: customer_type\n      type: String\n      description: Type of customer account: 'individual' or 'business'. Affects pricing and service levels.\n    - name: is_active\n      type: Boolean\n      description: |\n        Indicates if the customer account is active.\n        False means soft-deleted, but records are retained for compliance.\n```\n\n----------------------------------------\n\nTITLE: Defining MongoDB Aggregation Pipeline Query\nDESCRIPTION: Defines a native MongoDB query that ranks users within their age group using an aggregation pipeline with window functions.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/data-modeling/partials/classic-connectors/mongoDB/_model-create-native-query-tutorial.mdx#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"usersRankedByAge\",\n  \"representation\": \"collection\",\n  \"description\": \"Rank users within their age group by name\",\n\n  \"inputCollection\": \"users\",\n\n  \"arguments\": {\n    \"age\": { \"type\": { \"scalar\": \"int\" } }\n  },\n\n  \"resultDocumentType\": \"UserRank\",\n  \"objectTypes\": {\n    \"UserRank\": {\n      \"fields\": {\n        \"_id\": { \"type\": { \"scalar\": \"objectId\" } },\n        \"name\": { \"type\": { \"scalar\": \"string\" } },\n        \"age\": { \"type\": { \"scalar\": \"int\" } },\n        \"rank\": { \"type\": { \"scalar\": \"int\" } }\n      }\n    }\n  },\n\n  \"pipeline\": [\n    {\n      \"$match\": {\n        \"age\": \"{{ age }}\"\n      }\n    },\n    {\n      \"$setWindowFields\": {\n        \"partitionBy\": \"$age\",\n        \"sortBy\": { \"name\": 1 },\n        \"output\": {\n          \"rank\": {\n            \"$rank\": {}\n          }\n        }\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Command in DDN\nDESCRIPTION: Commands to introspect data source and update an existing command with new changes.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/data-modeling/command.mdx#2025-04-17_snippet_4\n\nLANGUAGE: ddn\nCODE:\n```\nddn connector introspect <connector_name>\nddn command update <connector_link_name> <command_name>\n```\n\n----------------------------------------\n\nTITLE: Configuring Wildcard for Header Forwarding in YAML\nDESCRIPTION: Example of using a wildcard to forward all headers in the authentication configuration.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/metadata-reference/auth-config.mdx#2025-04-17_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\n'*'\n```\n\n----------------------------------------\n\nTITLE: Serving Supergraph API Build with DDN CLI\nDESCRIPTION: Start the Docker container and serve the supergraph API build using the DDN CLI.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/data-modeling/partials/classic-connectors/postgreSQL/_command-create-tutorial.mdx#2025-04-17_snippet_4\n\nLANGUAGE: ddn\nCODE:\n```\nddn run docker-start\nddn console --local\n```\n\n----------------------------------------\n\nTITLE: Defining an ObjectType in Hasura\nDESCRIPTION: A sample object type definition for CartItems with multiple fields and data connector mapping. This example demonstrates how to map database columns to your custom object type fields and configure GraphQL type representations.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/metadata-reference/types.mdx#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nkind: ObjectType\nversion: v1\ndefinition:\n  name: CartItems\n  fields:\n    - name: cartId\n      type: Uuid!\n    - name: createdAt\n      type: Timestamptz\n    - name: id\n      type: Uuid!\n    - name: productId\n      type: Uuid!\n    - name: quantity\n      type: Int4!\n    - name: updatedAt\n      type: Timestamptz\n  graphql:\n    typeName: CartItems\n    inputTypeName: CartItemsInput\n  dataConnectorTypeMapping:\n    - dataConnectorName: my_pg\n      dataConnectorObjectType: cart_items\n      fieldMapping:\n        cartId:\n          column:\n            name: cart_id\n        createdAt:\n          column:\n            name: created_at\n        id:\n          column:\n            name: id\n        productId:\n          column:\n            name: product_id\n        quantity:\n          column:\n            name: quantity\n        updatedAt:\n          column:\n            name: updated_at\n```\n\n----------------------------------------\n\nTITLE: Initializing Data Connector\nDESCRIPTION: Launches an interactive wizard to configure and add a data connector to the project.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/private-ddn/create-a-project-on-a-data-plane.mdx#2025-04-17_snippet_2\n\nLANGUAGE: ddn\nCODE:\n```\nddn connector init <connector_name> -i\n```\n\n----------------------------------------\n\nTITLE: MySQL Native Queries Configuration\nDESCRIPTION: Examples of both inline and parameterized native queries. Native queries allow direct SQL execution with the connector, with inline queries for static SQL and parameterized queries for dynamic inputs.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/connectors/mysql/configuration.mdx#2025-04-17_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"native_query_inline\": {\n    \"sql\": {\n      \"parts\": [\n        {\n          \"type\": \"text\",\n          \"value\": \"SELECT 1 AS result FROM DUAL\"\n        }\n      ]\n    },\n    \"columns\": {\n      \"result\": {\n        \"type\": \"named\",\n        \"name\": \"INT\"\n      }\n    },\n    \"arguments\": {},\n    \"description\": \"\"\n  },\n  \"ArtistById_parameterized\": {\n    \"sql\": {\n      \"parts\": [\n        {\n          \"type\": \"text\",\n          \"value\": \"SELECT * FROM CHINOOK.ARTIST WHERE ARTISTID = \"\n        },\n        {\n          \"type\": \"parameter\",\n          \"value\": \"ARTISTID\"\n        }\n      ]\n    },\n    \"columns\": {\n      \"ARTISTID\": {\n        \"type\": \"named\",\n        \"name\": \"INT\"\n      },\n      \"NAME\": {\n        \"type\": \"nullable\",\n        \"underlying_type\": {\n          \"type\": \"named\",\n          \"name\": \"STRING\"\n        }\n      }\n    },\n    \"arguments\": {\n      \"ARTISTID\": {\n        \"description\": null,\n        \"type\": {\n          \"type\": \"named\",\n          \"name\": \"INT\"\n        }\n      }\n    },\n    \"description\": null,\n    \"isProcedure\": false\n  }\n```\n\n----------------------------------------\n\nTITLE: Configuring Firebase JWT Authentication in Hasura\nDESCRIPTION: Example configuration for Firebase JWT authentication in Hasura, including JWK URL, issuer, and audience settings.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/auth/jwt/jwt-configuration.mdx#2025-04-17_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\nkind: AuthConfig\nversion: v3\ndefinition:\n  mode:\n    jwt:\n      claimsConfig:\n        namespace:\n          claimsFormat: Json\n          location: /claims.jwt.hasura.io\n      tokenLocation:\n        type: Header\n        name: Authorization\n      key:\n        jwkFromUrl: https://www.googleapis.com/service_accounts/v1/jwk/securetoken@system.gserviceaccount.com\n      issuer: https://securetoken.google.com/<firebase-project-id>\n      audience: <firebase-project-id>\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic PromptQL Settings with Hasura Provider\nDESCRIPTION: Minimal configuration example showing how to set up PromptQL with the Hasura provider and basic system instructions.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/project-configuration/promptql-config.mdx#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nkind: PromptQlConfig\nversion: v1\ndefinition:\n  llm:\n    provider: hasura\n  system_instructions: |\n    You are a helpful AI Assistant.\n```\n\n----------------------------------------\n\nTITLE: Scaffolding New PromptQL Project\nDESCRIPTION: Creates a new local project with PromptQL integration and changes into the project directory. Sets up the initial project structure and files.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/how-to-build-with-promptql/_boilerplateInit.mdx#2025-04-17_snippet_1\n\nLANGUAGE: ddn\nCODE:\n```\nddn supergraph init my-project --with-promptql && cd my-project\n```\n\n----------------------------------------\n\nTITLE: Defining Command Permissions in YAML\nDESCRIPTION: Example of defining permissions for an OpenDD command, including roles and execution allowances.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/metadata-reference/permissions.mdx#2025-04-17_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\nkind: CommandPermissions\nversion: v1\ndefinition:\n  commandName: get_article_by_id\n  permissions:\n    - role: admin\n      allowExecution: true\n    - role: user\n      allowExecution: true\n```\n\n----------------------------------------\n\nTITLE: Adding Descriptions to Table Fields in PromptQL\nDESCRIPTION: Example of adding semantic information to an order status field. The description explains the purpose of the field, valid values, and business rules affecting the field.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/data-modeling/semantic-information.mdx#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nname: status\ntype: String\ndescription: |\n  Current status of the order.\n  Possible values:\n  - 'pending': Initial state\n  - 'processing': Payment confirmed\n  - 'shipped': Order dispatched\n  - 'delivered': Confirmed receipt\n  - 'cancelled': Order cancelled\n  Only moves forward except for 'cancelled' state.\n```\n\n----------------------------------------\n\nTITLE: Configuring RSA-based JWT Authentication in Hasura (X509 Certificate)\nDESCRIPTION: Example configuration for RSA-based JWT authentication using a public key as an X509 certificate.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/auth/jwt/jwt-configuration.mdx#2025-04-17_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nkind: AuthConfig\nversion: v3\ndefinition:\n  mode:\n    jwt:\n      claimsConfig:\n        namespace:\n          claimsFormat: Json\n          location: /claims.jwt.hasura.io\n      tokenLocation:\n        type: BearerAuthorization\n      key:\n        fixed:\n          algorithm: RS512\n          key:\n            value:\n              '-----BEGIN\n              CERTIFICATE-----\\nMIIDHDCCAgSgAwIBAgIINw9gva8BPPIwDQYJKoZIhvcNAQEFBQAwMTEvMC0GA1UE\\nAxMmc2VjdXJldG9rZW4uc3lzdGVtLmdzZXJ2aWNlYWNjb3VudC5jb20wHhcNMTgQt7dIsMTIU9k1SUrFviZOGnmHWtIAw\\nmtYBcM9I0f9/ka45JIRp5Y1NKpAMFSShs7Wv0m1JS1kXQHdJsPSmjmDKcwnBe3R/\\nTU3foRRywR/3AJRM15FNjTqvUm7TeaW16LkkRoECAwEAAaM4MDYwDAYDVR0TAQH/\\nBAIwADAOBgNVHQ8BAf8EBAMCB4AwFgYDVR0lAQH/BAwwCgYIKwYBBQUHAwIwDQYJ\\nKoZIhvcNAQEFBQADggEBADfY2DEmc2gb8/pqMNWHYq/nTYfJPpK4VA9A0lFTNeoq\\nzmnbGwhKj24X+Nw8trsvkrKxHvCI1alDgBaCyzjGGvgOrh8X0wLtymp1yj6PWwee\\nR2ZPdUaB62TCzO0iRv7W6o39ey+mU/FyYRtxF0ecxG2a0KNsIyFkciXUAeC5UVDo\\nBNp678/SDDx9Ltuxc6h56a/hpBGf9Yzhr0RvYy3DmjBs6eopiGFmjnOKNxQrZ5t2\\n339JWR+yiGEAtoHqk/fINMf1An6Rung1xYowrm4guhCIVi5unAvQ89fq0I6mzPg6\\nLhTpeP0o+mVYrBmtYVpDpv0e71cfYowSJCCkod/9YbY=\\n-----END\n              CERTIFICATE-----'\n```\n\n----------------------------------------\n\nTITLE: Introspecting MongoDB with DDN CLI\nDESCRIPTION: Uses the DDN CLI to introspect a MongoDB instance named 'my_mongo'. This command analyzes the database structure to make it available for use with DDN.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/data-modeling/partials/classic-connectors/mongoDB/_model-create-tutorial.mdx#2025-04-17_snippet_1\n\nLANGUAGE: ddn\nCODE:\n```\nddn connector introspect my_mongo\n```\n\n----------------------------------------\n\nTITLE: Configuring AuthConfig for JWT Validation in YAML\nDESCRIPTION: YAML configuration for Hasura AuthConfig that sets up JWT mode with Cognito JWKs integration. Specifies the claims namespace, JWT key location, and token header configuration.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/auth/jwt/tutorials/integrations/2-aws-cognito.mdx#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nkind: AuthConfig\nversion: v3\ndefinition:\n  mode:\n    jwt:\n      claimsConfig:\n        namespace:\n          claimsFormat: StringifiedJson\n          location: \"/claims.jwt.hasura.io\"\n      key:\n        jwkFromUrl: \"https://cognito-idp.<your_region>.amazonaws.com/<your_region>_<your_user_pool_id>.well-known/jwks.json\"\n      tokenLocation:\n        type: Header\n        name: Auth-Token\n```\n\n----------------------------------------\n\nTITLE: Configuring EC-based JWT Authentication in Hasura (JWKs)\nDESCRIPTION: Example configuration for EC-based JWT authentication using a public key published as JWKs.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/auth/jwt/jwt-configuration.mdx#2025-04-17_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\nkind: AuthConfig\nversion: v3\ndefinition:\n  mode:\n    jwt:\n      claimsConfig:\n        namespace:\n          claimsFormat: Json\n          location: /claims.jwt.hasura.io\n      tokenLocation:\n        type: BearerAuthorization\n      key:\n        jwkFromUrl: https://www.gstatic.com/iap/verify/public_key-jwk\n```\n\n----------------------------------------\n\nTITLE: Example Webhook Response with Session Variables\nDESCRIPTION: JSON response from the authentication webhook containing the user ID and role as session variables. These variables will be used by Hasura DDN for permission enforcement.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/auth/webhook/webhook-mode.mdx#2025-04-17_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"x-hasura-user-id\": \"7cf0a66c-65b7-11ed-b904-fb49f034fbbb\",\n  \"x-hasura-role\": \"user\"\n}\n```\n\n----------------------------------------\n\nTITLE: Planning Prompt Example\nDESCRIPTION: Example of a planning prompt used to guide the AI agent in solving FRAMES-style questions using a step-by-step approach.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/rag-hundred-percent-accuracy.mdx#2025-04-17_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nThis problem requires the collection of many facts step by step and creating an algorithm to solve the problem. Don't rely on your own knowledge of facts, but instead try to collect facts step by step. To collect facts, retrieve relevant articles by making search queries. From a retrieved article use the extract function to extract the precise fact if its present in the article.\n```\n\n----------------------------------------\n\nTITLE: OpenAI LLM Provider Configuration\nDESCRIPTION: Configuration for using OpenAI as the LLM provider in the API request.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/promptql-apis/execute-program-api.mdx#2025-04-17_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"provider\": \"openai\",\n  \"api_key\": \"<your openai api key>\"\n}\n```\n\n----------------------------------------\n\nTITLE: Example JWT Payload for User Role\nDESCRIPTION: This JSON snippet demonstrates an example JWT payload for a user role, including the default role, allowed roles, and a user id. This payload would be used when making authenticated requests to the Hasura application.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/auth/jwt/jwt-mode.mdx#2025-04-17_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"iat\": 1735916718,\n  \"exp\": 1796916677,\n  \"claims.jwt.hasura.io\": {\n    \"x-hasura-default-role\": \"user\",\n    \"x-hasura-allowed-roles\": [\"user\"],\n    \"x-hasura-user-id\": \"7cf0a66c-65b7-11ed-b904-fb49f034fbbb\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking DDN CLI Version\nDESCRIPTION: Command to display the version information of the installed DDN CLI, useful for verifying compatibility with features and troubleshooting version-specific issues.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/faq.mdx#2025-04-17_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nddn version\n```\n\n----------------------------------------\n\nTITLE: Implementing Python Function Connector\nDESCRIPTION: Defines a Python function connector with a 'shout_name' function that converts input text to uppercase\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/data-modeling/partials/lambda-connectors/python/_command-create-tutorial.mdx#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom hasura_ndc import start\nfrom hasura_ndc.function_connector import FunctionConnector\n\nconnector = FunctionConnector()\n\n@connector.register_query\ndef shout_name(name: str) -> str:\n  return name.upper()\n\nif __name__ == \"__main__\":\n  start(connector)\n```\n\n----------------------------------------\n\nTITLE: Throwing Custom Errors in TypeScript Lambda Connector\nDESCRIPTION: Demonstrates how to throw custom errors with specific messages and metadata in TypeScript. Examples include Forbidden, Conflict, and UnprocessableContent error classes.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/business-logic/errors.mdx#2025-04-17_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as sdk from \"@hasura/ndc-lambda-sdk\";\n\n/** @readonly */\nexport function updateResource(userRole: string): void {\n  if (userRole !== \"admin\") {\n    throw new sdk.Forbidden(\"User does not have permission to update this resource\", { role: userRole });\n  }\n  console.log(\"Resource updated successfully.\");\n}\n\n/** @readonly */\nexport function createResource(id: string, existingIds: string[]): void {\n  if (existingIds.includes(id)) {\n    throw new sdk.Conflict(\"Resource with this ID already exists\", { existingId: id });\n  }\n  console.log(\"Resource created successfully.\");\n}\n\n/** @readonly */\nexport function divide(x: number, y: number): number {\n  if (y === 0) {\n    throw new sdk.UnprocessableContent(\"Cannot divide by zero\", { myErrorMetadata: \"stuff\", x, y });\n  }\n  return x / y;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Users Model in Hasura Data Domain YAML\nDESCRIPTION: This YAML snippet demonstrates how to define a Users model in Hasura Data Domain, including source configuration, filterable fields, orderable fields, and GraphQL query options.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/metadata-reference/models.mdx#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nkind: Model\nversion: v1\ndefinition:\n  name: Users\n  objectType: Users\n  source:\n    dataConnectorName: my_pg\n    collection: users\n  filterExpressionType: UsersBoolExp\n  orderableFields:\n    - fieldName: id\n      orderByDirections:\n        enableAll: true\n    - fieldName: name\n      orderByDirections:\n        enableAll: true\n    - fieldName: email\n      orderByDirections:\n        enableAll: true\n    - fieldName: createdAt\n      orderByDirections:\n        enableAll: true\n  graphql:\n    selectMany:\n      queryRootField: users\n    selectUniques:\n      - queryRootField: usersById\n        uniqueIdentifier:\n          - id\n    orderByExpressionType: UsersOrderBy\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Logic in TypeScript\nDESCRIPTION: Defines a TypeScript function that simulates taking an action on behalf of a user. It includes an interface for the response structure and a function that logs the request and returns a success message.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/business-logic/tutorials/1-take-action-for-a-user.mdx#2025-04-17_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ninterface UserActionResponse {\n  success: boolean;\n  message: string;\n}\n\nexport function takeActionOnBehalfOfUser(request: string): UserActionResponse {\n  console.log(`Taking action on behalf of user`);\n  return {\n    success: true,\n    message: `Successfully took action on user's behalf: ${request}`,\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Metadata Generation Commands\nDESCRIPTION: Series of commands to introspect data source and generate metadata for entities, commands, and relationships.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/private-ddn/ddn-workspace.mdx#2025-04-17_snippet_4\n\nLANGUAGE: ddn\nCODE:\n```\nddn connector introspect <connector_name>\n```\n\nLANGUAGE: ddn\nCODE:\n```\nddn model add <connector_name> '*'\nddn command add <connector_name> '*'\nddn relationship add <connector_name> '*'\n```\n\n----------------------------------------\n\nTITLE: Complete Command Definition Example in YAML\nDESCRIPTION: A full example of a command definition that retrieves the latest article. This demonstrates how to define a command with no arguments that returns a custom type, and how to configure the GraphQL field name and kind.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/metadata-reference/commands.mdx#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nkind: Command\nversion: v1\ndefinition:\n  name: get_latest_article\n  outputType: commandArticle\n  arguments: []\n  source:\n    dataConnectorName: data_connector\n    dataConnectorCommand:\n      function: latest_article\n    argumentMapping: {}\n  graphql:\n    rootFieldName: getLatestArticle\n    rootFieldKind: Query\n  description: Get the latest article\n```\n\n----------------------------------------\n\nTITLE: Configuring Authentication Webhook Body in YAML\nDESCRIPTION: Example configuration for the body to be sent to the POST authentication webhook, specifying headers to be forwarded.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/metadata-reference/auth-config.mdx#2025-04-17_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nheaders:\n  forward:\n    - Authorization\n  additional: {}\n```\n\n----------------------------------------\n\nTITLE: Updating Data Connector Link in YAML\nDESCRIPTION: YAML configuration for updating the data connector link with environment variables for connector URLs and authorization header.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/project-configuration/tutorials/independent-connector-deployment.mdx#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nkind: DataConnectorLink\nversion: v1\ndefinition:\n  name: <connector-link-name>\n  url:\n    readWriteUrls:\n      read:\n        valueFromEnv: <CONNECTOR>_READ_URL\n      write:\n        valueFromEnv: <CONNECTOR>_WRITE_URL\n  headers:\n    Authorization:\n      valueFromEnv: <CONNECTOR>_AUTHORIZATION_HEADER\n  schema: ...\n```\n\n----------------------------------------\n\nTITLE: Configuring AuthConfig for NoAuth Mode in YAML\nDESCRIPTION: A sample AuthConfig file that enables NoAuth mode with the admin role. This configuration is enabled by default when creating a new project with the ddn supergraph init command.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/auth/noauth-mode.mdx#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nkind: AuthConfig\nversion: v3\ndefinition:\n  mode:\n    noAuth:\n      role: admin\n      sessionVariables: {}\n```\n\n----------------------------------------\n\nTITLE: Implementing Lambda Trigger for JWT Claims Modification in JavaScript\nDESCRIPTION: AWS Lambda function that modifies Cognito JWT tokens to include custom Hasura namespace claims. The function adds user ID, default role, and allowed roles to the JWT claims.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/auth/jwt/tutorials/integrations/2-aws-cognito.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport const handler = async (event) => {\n  // Here, you'll need to fetch the user's role from Hasura DDN using an admin-level authenticated request\n  // Learn more here: https://hasura.io/docs/3.0/auth/authentication/jwt/special-roles\n  // Below, we're hard-coding the value for now\n  const user_role = \"user\"; // the role returned from your request ☝️\n  event.response = {\n    claimsOverrideDetails: {\n      claimsToAddOrOverride: {\n        \"claims.jwt.hasura.io\": JSON.stringify({\n          \"x-hasura-user-id\": event.request.userAttributes.sub,\n          \"x-hasura-default-role\": user_role,\n          \"x-hasura-allowed-roles\": [\"user\"],\n        }),\n      },\n    },\n  };\n\n  return event;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining MongoDB Native Mutation Configuration\nDESCRIPTION: JSON configuration that defines a native mutation for inserting a user record into MongoDB. It specifies the mutation name, arguments, result type, and the MongoDB command to execute.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/data-modeling/partials/classic-connectors/mongoDB/_command-create-tutorial.mdx#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n// native_mutations/insert_user.json\n{\n  \"name\": \"insertUser\",\n  \"description\": \"Inserts a user record into the database\",\n\n  \"arguments\": {\n    \"name\": { \"type\": { \"scalar\": \"string\" } }\n  },\n\n  \"resultType\": {\n    \"object\": \"InsertUser\"\n  },\n  \"objectTypes\": {\n    \"InsertUser\": {\n      \"fields\": {\n        \"ok\": { \"type\": { \"scalar\": \"double\" } },\n        \"n\": { \"type\": { \"scalar\": \"int\" } }\n      }\n    }\n  },\n\n  \"command\": {\n    \"insert\": \"users\",\n    \"documents\": [{ \"name\": \"{{ name }}\" }]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Cloud Build for Hasura DDN Project\nDESCRIPTION: This command creates a cloud build of the Hasura DDN project for deployment and sharing.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/_quickstart_template.mdx#2025-04-17_snippet_15\n\nLANGUAGE: ddn\nCODE:\n```\nddn supergraph build create\n```\n\n----------------------------------------\n\nTITLE: Complete HMAC-SHA JWT Configuration\nDESCRIPTION: Full example of JWT configuration using HMAC-SHA256 algorithm\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/auth/jwt/jwt-configuration.mdx#2025-04-17_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nkind: AuthConfig\nversion: v3\ndefinition:\n  mode:\n    jwt:\n      claimsConfig:\n        namespace:\n          claimsFormat: Json\n          location: /claims.jwt.hasura.io\n      tokenLocation:\n        type: BearerAuthorization\n      key:\n        fixed:\n          algorithm: HS256\n          key:\n            value: 3EK6FD+o0+c7tzBNVfjpMkNDi2yARAAKzQlk8O2IKoxQu4nF7EdAh8s3TwpHwrdWT6R\n```\n\n----------------------------------------\n\nTITLE: DDN Login Usage Examples\nDESCRIPTION: Examples showing both browser-based login and authentication using a Personal Access Token.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_auth_login.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Login with browser\n ddn auth login\n\n# Login with Personal Access Token\n ddn auth login --access-token <your-access-token>\n```\n\n----------------------------------------\n\nTITLE: Bearer Authorization Token Configuration\nDESCRIPTION: Configuration for JWT token location using Bearer Authorization header\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/auth/jwt/jwt-configuration.mdx#2025-04-17_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\ntokenLocation:\n  type: BearerAuthorization\n```\n\nLANGUAGE: none\nCODE:\n```\nAuthorization: Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWI...\n```\n\n----------------------------------------\n\nTITLE: DDN Connector Introspection Examples in Bash\nDESCRIPTION: These examples demonstrate various ways to use the 'ddn connector introspect' command, including introspecting a specific connector, using a custom connector configuration path, and skipping the DataConnectorLink update.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_connector_introspect.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Introspect Connector my_db from Subgraph located at ./foo/subgraph.yaml and update DataConnectorLink\n ddn connector introspect my_db --subgraph ./foo/subgraph.yaml\n\n# Introspect Connector located at ./foo/my_db/connector.yaml\n ddn connector introspect --connector ./foo/my_db/connector.yaml\n\n# Introspect Connector my_db but do not update DataConnectorLink\n ddn connector introspect my_db --subgraph ./foo/subgraph.yaml --no-update-link\n```\n\n----------------------------------------\n\nTITLE: Basic MySQL Connector Configuration Structure\nDESCRIPTION: The root configuration object for the MySQL connector with all primary fields. This structure defines the connection URL, properties, schemas, tables, functions, and native queries needed for the connector to function.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/connectors/mysql/configuration.mdx#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jdbcUrl\": \"\",\n  \"jdbcProperties\": {},\n  \"schemas\": [],\n  \"tables\": [],\n  \"functions\": [],\n  \"nativeQueries\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Comments Table as DDN Model\nDESCRIPTION: This command adds the 'comments' table from the 'my_pg' PostgreSQL connector as a model in DDN. This makes the table available for GraphQL operations.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/data-modeling/partials/classic-connectors/postgreSQL/_model-create-tutorial.mdx#2025-04-17_snippet_2\n\nLANGUAGE: ddn\nCODE:\n```\nddn model add my_pg comments\n```\n\n----------------------------------------\n\nTITLE: Creating Supergraph Build in Hasura DDN\nDESCRIPTION: Command to create builds for connectors, subgraphs, and the supergraph using the project name from .hasura/context.yaml file. This generates build version, Console URL, PromptQL URL, and Project Name.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/deployment/hasura-ddn/deploy-to-ddn.mdx#2025-04-17_snippet_0\n\nLANGUAGE: ddn\nCODE:\n```\nddn supergraph build create\n```\n\n----------------------------------------\n\nTITLE: Implementing ModelPermissions for Row-Level Security\nDESCRIPTION: This YAML configuration shows how to set up ModelPermissions to implement row-level security in Hasura. It demonstrates how to allow admins to see all rows while restricting users to only see rows where their user ID matches the author_id field.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/metadata-reference/permissions.mdx#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n---\nkind: ModelPermissions\nversion: v1\ndefinition:\n  modelName: Articles\n  permissions:\n    - role: admin\n      select:\n        filter: null\n    - role: user\n      select:\n        filter:\n          fieldComparison:\n            field: author_id\n            operator: _eq\n            value:\n              sessionVariable: x-hasura-user-id\n```\n\n----------------------------------------\n\nTITLE: Updating AuthConfig for JWT Mode with Auth0\nDESCRIPTION: This YAML configuration updates the AuthConfig object to use JWT mode with Auth0. It specifies the claims namespace, issuer, JWT key URL, audience, and token location for Hasura DDN authentication.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/auth/jwt/tutorials/integrations/1-auth0.mdx#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nkind: AuthConfig\nversion: v3\ndefinition:\n  mode:\n    jwt:\n      claimsConfig:\n        namespace:\n          claimsFormat: Json\n          location: \"/claims.jwt.hasura.io\"\n      issuer: \"<your Auth0 tenant's URL>\"\n      key:\n        jwkFromUrl: \"https://<your Auth0 tenant's URL>/.well-known/jwks.json\"\n      audience: [\"<your endpoint>\"]\n      tokenLocation:\n        type: Header\n        name: Auth-Token\n```\n\n----------------------------------------\n\nTITLE: Configuring NoAuth Mode in YAML\nDESCRIPTION: Example configuration for running the engine without authentication, specifying a role and session variables.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/metadata-reference/auth-config.mdx#2025-04-17_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nrole: admin\nsessionVariables:\n  x-hasura-user-id: '100'\n```\n\n----------------------------------------\n\nTITLE: Querying Users with Filters and Sorting in GraphQL\nDESCRIPTION: This GraphQL query demonstrates how to use the Users model defined earlier, including filtering, sorting, and pagination options.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/metadata-reference/models.mdx#2025-04-17_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nquery UsersQuery {\n  users(where: { name: { _eq: \"Bob\" } }, order_by: { createdAt: Asc }, limit: 10) {\n    id\n    name\n    email\n    createdAt\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring POST Authentication Webhook in YAML\nDESCRIPTION: Example configuration for a POST authentication webhook, including URL, custom headers, and body configuration.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/metadata-reference/auth-config.mdx#2025-04-17_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nurl:\n  value: http://auth_hook:3050/validate-request\ncustomHeadersConfig:\n  headers:\n    forward: '*'\n    additional:\n      user-agent: hasura-ddn\n  body:\n    headers:\n      forward:\n        - Authorization\n      additional: {}\n```\n\n----------------------------------------\n\nTITLE: Configuring a Subgraph in YAML\nDESCRIPTION: Defines a subgraph configuration named 'app'. It specifies the generator root path, include paths, environment variable mappings, and a connector configuration. This setup is typical for integrating a subgraph with its associated connector and environment.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/metadata-reference/build-configs.mdx#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nkind: Subgraph\nversion: v2\ndefinition:\n  name: app\n  generator:\n    rootPath: .\n  includePaths:\n    - metadata\n  envMapping:\n    APP_MY_CONNECTOR_AUTHORIZATION_HEADER:\n      fromEnv: APP_MY_CONNECTOR_AUTHORIZATION_HEADER\n    APP_MY_CONNECTOR_READ_URL:\n      fromEnv: APP_MY_CONNECTOR_READ_URL\n    APP_MY_CONNECTOR_WRITE_URL:\n      fromEnv: APP_MY_CONNECTOR_WRITE_URL\n  connectors:\n    - path: connector/my_connector/connector.yaml\n      connectorLinkName: my_connector\n```\n\n----------------------------------------\n\nTITLE: Structuring Non-streaming Response for Natural Language API in JSON\nDESCRIPTION: Shows the format of a non-streaming JSON response from the Natural Language API, including assistant actions and modified artifacts.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/promptql-apis/natural-language-api.mdx#2025-04-17_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"assistant_actions\": [\n    {\n      \"message\": \"Response message\",\n      \"plan\": \"Execution plan\",\n      \"code\": \"Executed code\",\n      \"code_output\": \"Code output\",\n      \"code_error\": \"Error message if any\"\n    }\n  ],\n  \"modified_artifacts\": [\n    {\n      \"identifier\": \"artifact_id\",\n      \"title\": \"Artifact Title\",\n      \"artifact_type\": \"text|table\",\n      \"data\": \"artifact_data\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Scaffolding a New Hasura DDN Project\nDESCRIPTION: This command creates a new local Hasura DDN project with PromptQL support and changes the directory to the newly created project.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/_quickstart_template.mdx#2025-04-17_snippet_1\n\nLANGUAGE: ddn\nCODE:\n```\nddn supergraph init imdb-promptflix --with-promptql && cd imdb-promptflix\n```\n\n----------------------------------------\n\nTITLE: Configuring Model Permissions for Articles in YAML\nDESCRIPTION: This YAML snippet demonstrates how to set up model permissions for an Articles model. It allows admin role to access all rows, while restricting user role to access only their own articles based on the author_id field matching the user's session variable.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/auth/permissions/model-permissions.mdx#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nkind: ModelPermissions\nversion: v1\ndefinition:\n  modelName: Articles\n  # highlight-start\n  permissions:\n    - role: admin\n      select:\n        filter: null\n    - role: user\n      select:\n        filter:\n          fieldComparison:\n            field: author_id\n            operator: _eq\n            value:\n              sessionVariable: x-hasura-user-id\n  # highlight-end\n```\n\n----------------------------------------\n\nTITLE: Adding Model to PromptQL Connector\nDESCRIPTION: This command adds the newly created native mutation model to the PromptQL connector.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/data-modeling/partials/classic-connectors/postgreSQL/_command-create-native-operation-tutorial.mdx#2025-04-17_snippet_5\n\nLANGUAGE: ddn\nCODE:\n```\nddn command add my_pg update_post_titles_by_age\n```\n\n----------------------------------------\n\nTITLE: Initializing DDN Connector\nDESCRIPTION: Command to initialize a new connector in a project directory with a unique name. Uses an interactive wizard to select the connector type and configure required values.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/data-sources/connect-to-a-source.mdx#2025-04-17_snippet_0\n\nLANGUAGE: ddn\nCODE:\n```\nddn connector init <your_name_for_the_connector> -i\n```\n\n----------------------------------------\n\nTITLE: Configure AuthConfig with JWT Settings in Hasura\nDESCRIPTION: Sets up an AuthConfig object that defines JWT-based authentication. It specifies the algorithm (HS256), the secret key, claims format, namespace location, and token location in the request header.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/auth/jwt/tutorials/setup-test-jwt.mdx#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nkind: AuthConfig\nversion: v3\ndefinition:\n  mode:\n    jwt:\n      claimsConfig:\n        namespace:\n          claimsFormat: Json\n          location: \"/claims.jwt.hasura.io\"\n      key:\n        fixed:\n          algorithm: HS256\n          key:\n            value: \"<insert-the-key-generated-in-previous-step>\"\n      tokenLocation:\n        type: Header\n        name: Auth-Token\n```\n\n----------------------------------------\n\nTITLE: Adding Metadata and Building\nDESCRIPTION: Commands for adding metadata, building locally, and running services\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/how-to-build-with-promptql/with-api-endpoints.mdx#2025-04-17_snippet_4\n\nLANGUAGE: ddn\nCODE:\n```\nddn connector introspect typescript\nddn commands list typescript\nddn commands add typescript helloFromHttpBin\nddn supergraph build local\nddn run docker-start\nddn console --local\n```\n\n----------------------------------------\n\nTITLE: Custom Header JWT Configuration\nDESCRIPTION: Configuration for JWT token location using custom headers\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/auth/jwt/jwt-configuration.mdx#2025-04-17_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\ntokenLocation:\n  type: Header\n  name: header_name\n```\n\nLANGUAGE: none\nCODE:\n```\nheader_name: eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWI...\n```\n\n----------------------------------------\n\nTITLE: Defining Manual Relationship in YAML for PromptQL\nDESCRIPTION: This YAML snippet defines a manual relationship from the Users model to the Posts model. It specifies the relationship name, source and target types, and field mappings.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/data-modeling/partials/classic-connectors/mongoDB/_relationship-create-model-to-model.mdx#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nkind: Relationship\nversion: v1\ndefinition:\n  name: posts\n  sourceType: Users\n  target:\n    model:\n      name: Posts\n      relationshipType: Array\n  mapping:\n    - source:\n        fieldPath:\n          - fieldName: userId\n      target:\n        modelField:\n          - fieldName: userId\n```\n\n----------------------------------------\n\nTITLE: Environment Variable Configuration for Webhook URL\nDESCRIPTION: Example .env file configuration for setting the authentication webhook URL used by Hasura DDN. This allows for dynamic and secure configuration of the webhook endpoint.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/auth/webhook/webhook-mode.mdx#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nAUTH_WEBHOOK_URL=http://auth_hook:3050/validate-request\n```\n\n----------------------------------------\n\nTITLE: Requesting Detailed Query Plan Explanation in PromptQL\nDESCRIPTION: This snippet demonstrates how to ask PromptQL to explain its response by detailing each step of the query plan, including any assumptions made. This approach helps users understand and verify the system's reasoning process.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/best-practices.mdx#2025-04-17_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nExplain the response by running each step in the query plan above one by one and store the response of each step, also mention any assumptions that you made which were not explicitly mentioned in the query plan.\n```\n\n----------------------------------------\n\nTITLE: Request Headers Configuration for PromptQL API\nDESCRIPTION: Required headers for making requests to the Execute Program API endpoint.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/promptql-apis/execute-program-api.mdx#2025-04-17_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nContent-Type: application/json\n```\n\n----------------------------------------\n\nTITLE: Initializing Lambda Connector\nDESCRIPTION: Initializes a new lambda connector using the DDN CLI. The command prompts for connector type and port selection.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/business-logic/tutorials/1-take-action-for-a-user.mdx#2025-04-17_snippet_1\n\nLANGUAGE: ddn\nCODE:\n```\nddn connector init my_ts -i\n```\n\n----------------------------------------\n\nTITLE: Auth Webhook Response Format with Session Variables\nDESCRIPTION: Example JSON response from the authentication webhook to Hasura DDN. Contains session variables including user role, user ID, and custom variables that can be used in permission rules.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/auth/webhook/webhook-mode.mdx#2025-04-17_snippet_4\n\nLANGUAGE: json\nCODE:\n```\nHTTP/1.1 200 OK\nContent-Type: application/json\n\n{\n    \"X-Hasura-Role\": \"user\",\n    \"X-Hasura-User-Id\": 25,\n    \"X-Hasura-Is-Owner\": \"true\",\n    \"X-Hasura-Custom\": \"custom value\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Cross-Subgraph Relationship in YAML\nDESCRIPTION: Illustrates how to create a relationship between models in different subgraphs using YAML configuration. This example links a 'Users' model to an 'Orders' model in the 'billing' subgraph.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/project-configuration/subgraphs/working-with-multiple-subgraphs.mdx#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nkind: Relationship\nversion: v1\ndefinition:\n  name: orders\n  sourceType: Users\n  target:\n    model:\n      subgraph: billing\n      name: Orders\n      relationshipType: Array\n  mapping:\n    - source:\n        fieldPath:\n          - fieldName: id\n      target:\n        modelField:\n          - fieldName: userId\n```\n\n----------------------------------------\n\nTITLE: Configuring Auth0 Credentials Exchange Action for Service Account\nDESCRIPTION: This JavaScript code sets up custom claims for a service account in the Auth0 credentials exchange action. It adds the necessary Hasura namespace with keys for the service account role.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/auth/jwt/tutorials/integrations/1-auth0.mdx#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexports.onExecuteCredentialsExchange = async (event, api) => {\n  const namespace = \"claims.jwt.hasura.io\";\n\n  const service_role = \"service_account\";\n\n  api.accessToken.setCustomClaim(namespace, {\n    \"x-hasura-default-role\": service_role,\n    \"x-hasura-allowed-roles\": [service_role],\n  });\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Resource Limits in connector.yaml for Hasura DDN Connector\nDESCRIPTION: This YAML snippet demonstrates how to set resource limits for a Hasura DDN connector at both the top level and per region. It includes memory and CPU allocations, allowing for fine-grained control over resource distribution across different regions.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/private-ddn/connector-deployment-resources.mdx#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntitle: \"Example connector.yaml configuration\"\nkind: Connector\nversion: v2\ndefinition:\n  name: my_connector\n  resources:\n    memory: 128M\n    cpu: 0.5\n  regionConfiguration:\n    - region: us-central1\n      resources:\n        memory: 128M\n        cpu: 2\n```\n\n----------------------------------------\n\nTITLE: Album OrderBy Expression Example\nDESCRIPTION: Complete example of an Album OrderByExpression configuration with GraphQL type naming and description. Shows how to define orderable fields and relationships for an Album type.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/metadata-reference/orderby-expressions.mdx#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nkind: OrderByExpression\nversion: v1\ndefinition:\n  name: Album_order_by_exp\n  operand:\n    object:\n      orderedType: Album\n      orderableFields:\n        - fieldName: AlbumId\n          orderByExpression: Int_order_by_exp\n        - fieldName: ArtistId\n          orderByExpression: Int_order_by_exp\n        - fieldName: Address\n          orderByExpression: Address_order_by_default_exp\n      orderableRelationships:\n        - relationshipName: artist\n          orderByExpression: Artist_order_by_default_exp\n  graphql:\n    expressionTypeName: App_Album_order_by_exp\n  description: Order by expression for Albums\n```\n\n----------------------------------------\n\nTITLE: Hasura Claims Location Configuration\nDESCRIPTION: YAML configuration for mapping JWT claims to Hasura session variables using JSON paths\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/auth/jwt/jwt-configuration.mdx#2025-04-17_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nclaimsConfig:\n  locations:\n    x-hasura-default-role:\n      path:\n        path: /hasura/all_roles/0\n    x-hasura-allowed-roles:\n      path:\n        path: /hasura/all_roles\n    x-hasura-user-id:\n      path:\n        path: /user/id\n```\n\n----------------------------------------\n\nTITLE: Command Options for DDN Connector Plugin\nDESCRIPTION: Lists the available options for the 'ddn connector plugin' command. These options allow users to customize the behavior of the command, such as specifying the connector, context, and environment variables.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_connector_plugin.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sass\nCODE:\n```\n    --ci                     Disables the use of context\n    --connector string       Path to Connector YAML config file\n-c, --context string         Name of the context to use. (default <current_context>)\n-e, --env stringArray        Environment variable, e.g. key=val. Can be repeated to provide multiple env vars\n    --env-file stringArray   Path to .env file. Can be repeated to provide multiple env files\n-h, --help                   help for plugin\n```\n\n----------------------------------------\n\nTITLE: Adding Native Mutation to PostgreSQL Connector Configuration\nDESCRIPTION: This command uses the PostgreSQL connector's plugin to add the native mutation to the connector's configuration file.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/data-modeling/partials/classic-connectors/postgreSQL/_command-create-native-operation-tutorial.mdx#2025-04-17_snippet_2\n\nLANGUAGE: ddn\nCODE:\n```\nddn connector plugin \\\n  --connector app/connector/my_pg/connector.yaml \\\n  -- \\\n  native-operation create \\\n  --operation-path native_operations/mutations/update_post_titles_by_age.sql \\\n  --kind mutation\n```\n\n----------------------------------------\n\nTITLE: Defining Complex AND Predicate in YAML\nDESCRIPTION: Example of a complex AND predicate combining multiple field comparisons in model permissions.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/metadata-reference/permissions.mdx#2025-04-17_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nand:\n  - fieldComparison:\n      field: author_id\n      operator: _eq\n      value:\n        sessionVariable: x-hasura-user-id\n  - fieldComparison:\n      field: title\n      operator: _eq\n      value:\n        literal: Hello World\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom System Instructions for GTM Teams\nDESCRIPTION: Example showing how to configure detailed system instructions for go-to-market teams with specific data access and response guidelines.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/project-configuration/promptql-config.mdx#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nkind: PromptQlConfig\nversion: v1\ndefinition:\n  llm:\n    provider: hasura\n  system_instructions: |\n\n    You are an AI assistant that helps go-to-market teams make data-driven decisions.\n\n    You have access to data from Salesforce (opportunities, accounts, leads), Clari (forecast categories, pipeline movement), and Postgres (custom product and revenue data). \n\n    Use this data to answer questions about sales performance, forecast accuracy, pipeline health, rep activity, and account trends. Prioritize clarity, brevity, and business relevance in your answers.\n\n    If a question is ambiguous, ask for clarification.\n```\n\n----------------------------------------\n\nTITLE: Introspecting Python Connector\nDESCRIPTION: Performs introspection on the created Python connector to discover available functions\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/data-modeling/partials/lambda-connectors/python/_command-create-tutorial.mdx#2025-04-17_snippet_2\n\nLANGUAGE: ddn\nCODE:\n```\nddn connector introspect my_python\n```\n\n----------------------------------------\n\nTITLE: Implementing a TypeScript Function for String Transformation\nDESCRIPTION: Defines a TypeScript function 'shoutName' that converts a string input to uppercase. The function is marked as @readonly indicating it doesn't modify any data.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/data-modeling/partials/lambda-connectors/typescript/_command-create-tutorial.mdx#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * @readonly\n */\nexport function shoutName(name: string): string {\n  return name.toUpperCase();\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Models and Building Project\nDESCRIPTION: Series of DDN commands to introspect, list, and add models before building the project\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/how-to-build-with-promptql/with-apis-with-bulk-data.mdx#2025-04-17_snippet_4\n\nLANGUAGE: ddn\nCODE:\n```\nddn connector introspect github\n```\n\nLANGUAGE: ddn\nCODE:\n```\nddn model list github\n```\n\nLANGUAGE: ddn\nCODE:\n```\nddn model add github repositories\n```\n\nLANGUAGE: ddn\nCODE:\n```\nddn supergraph build local\n```\n\nLANGUAGE: ddn\nCODE:\n```\nddn run docker-start\n```\n\nLANGUAGE: ddn\nCODE:\n```\nddn console --local\n```\n\n----------------------------------------\n\nTITLE: Tracking All Database Models in Hasura DDN\nDESCRIPTION: This command adds all models from the introspected database to the Hasura DDN project for tracking.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/_quickstart_template.mdx#2025-04-17_snippet_6\n\nLANGUAGE: ddn\nCODE:\n```\nddn model add imdb \"*\"\n```\n\n----------------------------------------\n\nTITLE: Starting DDN Services\nDESCRIPTION: Starts the necessary DDN services using Docker. This command launches the containers required to run the GraphQL API and related components.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/data-modeling/partials/classic-connectors/mongoDB/_model-create-tutorial.mdx#2025-04-17_snippet_4\n\nLANGUAGE: ddn\nCODE:\n```\nddn run docker-start\n```\n\n----------------------------------------\n\nTITLE: Creating JWT Claims Template for Hasura Integration\nDESCRIPTION: JWT claims template configuration for Clerk that includes Hasura-specific namespace and user role definitions.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/auth/jwt/tutorials/integrations/4-clerk.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n\t\"claims.jwt.hasura.io\": {\n\t\t\"x-hasura-user-id\": \"{{user.id}}\",\n\t\t\"x-hasura-default-role\": \"user\",\n\t\t\"x-hasura-allowed-roles\": [\n\t\t\t\"user\"\n\t\t]\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Local Build for Hasura DDN Project\nDESCRIPTION: This command creates a local build of the Hasura DDN project, storing the build files in the engine/build directory.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/_quickstart_template.mdx#2025-04-17_snippet_7\n\nLANGUAGE: ddn\nCODE:\n```\nddn supergraph build local\n```\n\n----------------------------------------\n\nTITLE: Example Usage of ddn auth generate-promptql-secret-key in Bash\nDESCRIPTION: This example demonstrates how to generate a PromptQL secret key for the project set in the current context and save it to the global config.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_auth_generate-promptql-secret-key.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nddn auth generate-promptql-secret-key\n```\n\n----------------------------------------\n\nTITLE: Configuring GraphQL API for a Model in YAML\nDESCRIPTION: This YAML snippet demonstrates how to configure the GraphQL API for a model, including select unique, select many, and aggregate operations. It shows the structure for defining query root fields, descriptions, and specific GraphQL type names.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/metadata-reference/models.mdx#2025-04-17_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nselectUniques:\n  - queryRootField: ArticleByID\n    uniqueIdentifier:\n      - article_id\n    description: Description for the select unique ArticleByID\nselectMany:\n  queryRootField: ArticleMany\n  description: Description for the select many ArticleMany\norderByExpressionType: Article_Order_By\naggregate:\n  queryRootField: ArticleAggregate\n  description: Aggregate over Articles\n```\n\n----------------------------------------\n\nTITLE: Initializing Python Connector with DDN\nDESCRIPTION: Command to initialize a new Python connector using the DDN CLI tool, selecting the hasura/python template\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/data-modeling/partials/lambda-connectors/python/_command-create-native-operation-how-to.mdx#2025-04-17_snippet_0\n\nLANGUAGE: ddn\nCODE:\n```\nddn connector init my_py -i\n```\n\n----------------------------------------\n\nTITLE: Configuring Subgraph Prefixes in YAML\nDESCRIPTION: This snippet demonstrates how to add custom prefixes for GraphQL root fields and type names in the subgraph.yaml file. It helps prevent naming collisions when federating multiple subgraphs.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/project-configuration/subgraphs/subgraph-prefixing.mdx#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nkind: Subgraph\nversion: v2\ndefinition:\n  name: my_subgraph\n  generator:\n    rootPath: .\n    graphqlRootFieldPrefix: my_subgraph_\n    graphqlTypeNamePrefix: My_subgraph_\n```\n\n----------------------------------------\n\nTITLE: Initializing a Lambda Connector with DDN CLI\nDESCRIPTION: This command initializes a new connector in your project directory using the DDN CLI. The -i flag makes the process interactive, allowing you to select specific options during setup.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/business-logic/add-a-lambda-connector.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nddn connector init <your_name_for_the_connector> -i\n```\n\n----------------------------------------\n\nTITLE: Editing MongoDB Native Mutation JSON Configuration\nDESCRIPTION: A sample JSON configuration for a native MongoDB mutation that creates a user document. This example shows how to define arguments, result types, and the MongoDB insert command with template variables.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/data-modeling/partials/classic-connectors/mongoDB/_command-update-tutorial.mdx#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n// native_mutations/create_user.json\n{\n  \"name\": \"createUser\",\n  \"description\": \"Create a new user with name and age\",\n  \"resultType\": {\n    \"object\": \"CreateUserResult\"\n  },\n  \"arguments\": {\n    \"name\": {\n      \"type\": {\n        \"scalar\": \"string\"\n      }\n    },\n    \"age\": {\n      \"type\": {\n        \"scalar\": \"int\"\n      }\n    },\n    \"role\": {\n      \"type\": {\n        \"nullable\": {\n          \"scalar\": \"string\"\n        }\n      }\n    } // add an argument\n  },\n  \"objectTypes\": {\n    \"CreateUserResult\": {\n      \"fields\": {\n        \"ok\": {\n          \"type\": {\n            \"scalar\": \"int\"\n          }\n        },\n        \"n\": {\n          \"type\": {\n            \"scalar\": \"int\"\n          }\n        }\n      }\n    }\n  },\n  \"command\": {\n    \"insert\": \"users\",\n    \"documents\": [\n      {\n        \"name\": \"{{ name }}\",\n        \"age\": \"{{ age }}\",\n        \"role\": \"{{ role }}\",\n        \"user_id\": {\n          \"$size\": {\n            \"$ifNull\": [\n              {\n                \"$objectToArray\": \"$$ROOT\"\n              },\n              []\n            ]\n          }\n        }\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Building and Serving PromptQL Supergraph API\nDESCRIPTION: These commands build the supergraph API and start the Docker container to serve it.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/data-modeling/partials/classic-connectors/postgreSQL/_command-create-native-operation-tutorial.mdx#2025-04-17_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nddn supergraph build local\nddn run docker-start\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Go Function for PromptQL\nDESCRIPTION: Example Go code demonstrating how to create a custom function (ProcedureCustomCode) that can be exposed to PromptQL. It includes input and output structs and a function that processes the input and returns an output.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/data-modeling/partials/lambda-connectors/go/_command-create-native-operation-how-to.mdx#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage functions\n\nimport (\n\t\"context\"\n\n\t\"hasura-ndc.dev/ndc-go/types\"\n)\n\n// InputArguments represents the input of the native operation.\ntype InputArguments struct {\n\tMyInput string `json:\"myInput\"`\n}\n\n// OutputResult represents the output of the native operation.\ntype OutputResult struct {\n\tMyOutput string `json:\"myOutput\"`\n}\n\n// ProcedureCustomCode is a native operation that can be called via PromptQL.\nfunc ProcedureCustomCode(ctx context.Context, state *types.State, arguments *InputArguments) (*OutputResult, error) {\n\t// Do something with the input\n\treturn &OutputResult{\n\t\tMyOutput: \"My output\",\n\t}, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Supergraph Project - Usage Examples\nDESCRIPTION: Examples demonstrating how to initialize a Supergraph project with default and custom subgraph configurations.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_supergraph_init.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Initialize a new Supergraph project directory with a default subgraph 'app'\n ddn supergraph init <path-to-project-dir>\n\n# Initialize a new Supergraph project directory with a subgraph 'mysg'\n ddn supergraph init <path-to-project-dir> --create-subgraph mysg\n```\n\n----------------------------------------\n\nTITLE: Object Type to Command Relationship Configuration\nDESCRIPTION: YAML configuration defining a relationship from a user object type to a command that returns session information. This enables querying user data and their current session in a single request by mapping the user ID to a command argument.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/metadata-reference/relationships.mdx#2025-04-17_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nkind: Relationship\nversion: v1\ndefinition:\n  name: currentSession\n  sourceType: user\n  target:\n    command:\n      name: getLoggedInUserInfo\n      subgraph: users\n  mapping:\n    - source:\n        fieldPath:\n          - fieldName: id\n      target:\n        argument:\n          argumentName: user_id\n  description: The current session information for the user\n```\n\n----------------------------------------\n\nTITLE: Initializing DDN Connector\nDESCRIPTION: Initializes a new connector in interactive mode within the project directory. The -i flag enables interactive configuration of the connector.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/how-to-build-with-promptql/_boilerplateInit.mdx#2025-04-17_snippet_2\n\nLANGUAGE: ddn\nCODE:\n```\nddn connector init my_connector -i\n```\n\n----------------------------------------\n\nTITLE: Basic LifecyclePluginHook Definition with Local URL in YAML\nDESCRIPTION: Example of a basic LifecyclePluginHook configuration using a local URL value instead of an environment variable. This demonstrates the structure for a test plugin at the pre-parse stage with explicit authentication headers.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/metadata-reference/engine-plugins.mdx#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nkind: LifecyclePluginHook\nversion: v1\ndefinition:\n  pre: parse\n  name: test\n  url:\n    value: http://localhost:8080\n  config:\n    request:\n      headers:\n        additional:\n          hasura-m-auth:\n            value: zZkhKqFjqXR4g5MZCsJUZCnhCcoPyZ\n      session: {}\n      rawRequest:\n        query: {}\n        variables: {}\n```\n\n----------------------------------------\n\nTITLE: Building and Running DDN Supergraph\nDESCRIPTION: Shows the commands to build a new supergraph, start Docker services, and open the local console for testing the custom business logic.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/business-logic/tutorials/1-take-action-for-a-user.mdx#2025-04-17_snippet_6\n\nLANGUAGE: ddn\nCODE:\n```\nddn supergraph build local\nddn run docker-start\nddn console --local\n```\n\n----------------------------------------\n\nTITLE: Creating MongoDB Native Query Using DDN CLI\nDESCRIPTION: Command to create a new native query using the MongoDB connector plugin. Requires specifying the connector path, aggregation pipeline file, and collection name.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/data-modeling/partials/classic-connectors/mongoDB/_model-create-native-query-how-to.mdx#2025-04-17_snippet_0\n\nLANGUAGE: ddn\nCODE:\n```\nddn connector plugin \\\n  --connector subgraph_name/connector/connector_name/connector.yaml \\\n  -- native-query create path/to/aggregation_pipeline_filename.json \\\n  --collection collection_name\n```\n\n----------------------------------------\n\nTITLE: Building and Serving Supergraph API with DDN CLI\nDESCRIPTION: Commands to build the local supergraph and start the Docker container serving your API. After these steps, you can execute your MongoDB native operations through GraphQL.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/data-modeling/partials/classic-connectors/mongoDB/_command-create-native-operation-how-to.mdx#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nddn supergraph build local\nddn run docker-start\n```\n\n----------------------------------------\n\nTITLE: Configuring ModelPermissions for Orders Model\nDESCRIPTION: This YAML snippet shows how to set up ModelPermissions for the Orders model in Hasura. It defines different row-level access permissions for admin and user roles, with the user role having access restricted based on the user id.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/auth/jwt/jwt-mode.mdx#2025-04-17_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n---\nkind: ModelPermissions\nversion: v1\ndefinition:\n  modelName: Orders\n  permissions:\n    - role: admin\n      select:\n        filter: null\n        allowSubscriptions: true\n    - role: user\n      select:\n        filter:\n          fieldComparison:\n            field: userId\n            operator: _eq\n            value:\n              sessionVariable: x-hasura-user-id\n```\n\n----------------------------------------\n\nTITLE: Updating a Specific Command in Node.js Connector\nDESCRIPTION: Updates the metadata for a specific command in your connector. This is used after making changes to the function implementation in your code editor.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/data-modeling/partials/lambda-connectors/typescript/_command-update-tutorial.mdx#2025-04-17_snippet_2\n\nLANGUAGE: ddn\nCODE:\n```\nddn command update my_ts shoutName\n```\n\n----------------------------------------\n\nTITLE: Configuring JWT Auth Settings in YAML\nDESCRIPTION: Example configuration for JWT authentication settings including claims config, token location, and key settings. Defines the auth mode, claims format, token placement, encryption algorithm and required security parameters.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/auth/jwt/jwt-configuration.mdx#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nkind: AuthConfig\nversion: v3\ndefinition:\n  mode:\n    jwt:\n      claimsConfig:\n        namespace:\n          claimsFormat: Json\n          location: /claims.jwt.hasura.io\n      tokenLocation:\n        type: BearerAuthorization\n      key:\n        fixed:\n          algorithm: HS256\n          key:\n            value: ultra-secret-very-secret-super-secret-key\n      audience: [\"myapp-1234\", \"myapp-6789\"]\n      allowedSkew: 60\n      issuer: https://my-auth-server.com\n```\n\n----------------------------------------\n\nTITLE: Creating Directory Structure for Native Queries\nDESCRIPTION: Creates the necessary directory structure to store MongoDB native queries in the connector.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/data-modeling/partials/classic-connectors/mongoDB/_model-create-native-query-tutorial.mdx#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nmkdir -p <my_subgraph>/connector/<connector_name>/native_queries/\n```\n\n----------------------------------------\n\nTITLE: Defining a Relationship between Orders and Customers in Hasura Metadata\nDESCRIPTION: This YAML configuration defines a relationship from the 'orders' object type to the 'customers' model. It specifies how fields map between the source and target, enabling queries that fetch customer details along with order information.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/metadata-reference/relationships.mdx#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nkind: Relationship\nversion: v1\ndefinition:\n  name: customer\n  sourceType: orders\n  target:\n    model:\n      name: customers\n      subgraph: customers\n      relationshipType: Object\n  mapping:\n    - source:\n        fieldPath:\n          - fieldName: customerId\n      target:\n        modelField:\n          - fieldName: customerId\n```\n\n----------------------------------------\n\nTITLE: Cross-Subgraph Relationship Definition\nDESCRIPTION: YAML configuration defining relationship between Users and Orders across subgraphs\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/project-configuration/tutorials/work-with-multiple-subgraphs.mdx#2025-04-17_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n---\nkind: Relationship\nversion: v1\ndefinition:\n  name: orders\n  sourceType: Users\n  target:\n    model:\n      subgraph: billing\n      name: Orders\n      relationshipType: Array\n  mapping:\n    - source:\n        fieldPath:\n          - fieldName: id\n      target:\n        modelField:\n          - fieldName: userId\n```\n\n----------------------------------------\n\nTITLE: Configuring Multi-Region Routing for Hasura PostgreSQL Connector\nDESCRIPTION: This YAML snippet shows how to configure multi-region routing for a Hasura PostgreSQL connector. It defines multiple regions with different read/write modes and environment variable mappings for each region's database connection.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/deployment/hasura-ddn/region-routing.mdx#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nkind: Connector\nversion: v2\ndefinition:\n  name: my_connector\n  subgraph: my_subgraph\n  source: hasura/connector_name:<version>\n  context: .\n  regionConfiguration:\n    - region: <region1: region from the list below>\n      mode: ReadWrite\n      envMapping:\n          <CONNECTOR_ENV_VAR>: # e.g. CONNECTION_URI\n              fromEnv: <CONNECTOR_ENV_VAR_REGION_1> # e.g. Env Var set as DB read write replica URL in region1\n    - region: <region2: region from the list below>\n      mode: ReadOnly\n      envMapping:\n          <CONNECTOR_ENV_VAR>: # e.g. CONNECTION_URI\n              fromEnv: <CONNECTOR_ENV_VAR_REGION_2> # e.g. Env Var set as DB read only replica URL in region2\n    - region: <region3: region from the list below>\n      mode: ReadOnly\n      envMapping:\n          <CONNECTOR_ENV_VAR>: # e.g. CONNECTION_URI\n              fromEnv: <CONNECTOR_ENV_VAR_REGION_3> # e.g. Env Var set as DB read only replica URL in region3\n```\n\n----------------------------------------\n\nTITLE: Adding Kaggle Models\nDESCRIPTION: DDN command to track all available models from the Kaggle dataset.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/recipes/tutorials/kaggle-csv-sqlite.mdx#2025-04-17_snippet_5\n\nLANGUAGE: ddn\nCODE:\n```\nddn model add kaggle \"*\"\n```\n\n----------------------------------------\n\nTITLE: Defining Author-Articles Relationship in YAML\nDESCRIPTION: This YAML example shows how to define a relationship between an author and their articles, demonstrating the structure for a model-based relationship.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/metadata-reference/relationships.mdx#2025-04-17_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nkind: Relationship\nversion: v1\ndefinition:\n  name: Articles\n  sourceType: author\n  target:\n    model:\n      name: Articles\n      subgraph: null\n      relationshipType: Array\n  mapping:\n    - source:\n        fieldPath:\n          - fieldName: author_id\n      target:\n        modelField:\n          - fieldName: author_id\n  description: Articles written by an author\n```\n\n----------------------------------------\n\nTITLE: Configuring GET Authentication Webhook Headers in YAML\nDESCRIPTION: Example configuration for headers to be sent to the GET authentication webhook, including forwarded and additional headers.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/metadata-reference/auth-config.mdx#2025-04-17_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nheaders:\n  forward:\n    - Authorization\n  additional:\n    user-agent: hasura-ddn\n```\n\n----------------------------------------\n\nTITLE: Installing DDN CLI with Bash Script on macOS and Linux\nDESCRIPTION: This command downloads and executes an installer script that sets up the Hasura DDN CLI on macOS or Linux systems. The script uses curl to fetch the installer from the Hasura CDN and then executes it with bash.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/_install-the-cli.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -L https://graphql-engine-cdn.hasura.io/ddn/cli/${props.revision || \"v4\"}/get.sh | bash\n```\n\n----------------------------------------\n\nTITLE: Adding All Detected Relationships using DDN CLI\nDESCRIPTION: Command to add all detected relationships from a connector to your metadata at once, using the wildcard syntax.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/data-modeling/relationship.mdx#2025-04-17_snippet_3\n\nLANGUAGE: ddn\nCODE:\n```\nddn relationship add <connector_link_name> \"*\"\n```\n\n----------------------------------------\n\nTITLE: Defining SQL Native Mutation for Updating Post Titles by Age\nDESCRIPTION: This SQL script defines a native mutation that updates post titles based on the user's age. It appends the age to the title or updates an existing age suffix.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/data-modeling/partials/classic-connectors/postgreSQL/_command-create-native-operation-tutorial.mdx#2025-04-17_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\n-- native_operations/mutations/update_post_titles_by_age.sql\nUPDATE posts\nSET title = CASE\n    WHEN title ~ ' - age \\d+$' THEN regexp_replace(title, ' - age \\d+$', ' - age ' || {{ age }})\n    ELSE title || ' - age ' || {{ age }}\nEND\nFROM users\nWHERE posts.user_id = users.id\n    AND users.age = {{ age }}\nRETURNING\n    posts.id,\n    posts.title,\n    posts.user_id,\n    users.name,\n    users.age;\n```\n\n----------------------------------------\n\nTITLE: Defining a ClickHouse Native SQL Query with Parameters\nDESCRIPTION: SQL query definition that selects user records filtered by name. It demonstrates the ClickHouse parameter syntax for creating parameterized queries with typed variables.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/data-modeling/partials/classic-connectors/clickHouse/_model-create-native-query-tutorial.mdx#2025-04-17_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\n// queries/UsersByName.sql\nSELECT *\nFROM \"default\".\"users\"\nWHERE \"users\".\"name\" = {name: String}\n```\n\n----------------------------------------\n\nTITLE: Configuring Scalar OrderByExpression in Hasura\nDESCRIPTION: Example showing how to configure a scalar OrderByExpression to restrict string sorting to ascending order only. This configuration creates a custom ordering expression for String type fields.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/metadata-reference/orderby-expressions.mdx#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nkind: OrderByExpression\nversion: v1\ndefinition:\n  name: String_orderby_exp_asc\n  operand:\n    scalar:\n      orderedType: String\n      enableOrderByDirections:\n        enableSpecific:\n          - Asc\n  graphql:\n    expressionTypeName: StringOrderByExp\n```\n\n----------------------------------------\n\nTITLE: Command-Specific Options for ddn supergraph build local (SASS)\nDESCRIPTION: The command-specific flags and options available for the 'ddn supergraph build local' command, including settings for context, environment variables, and output directories.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_supergraph_build_local.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sass\nCODE:\n```\n    --ci                     Disables the use of context\n-c, --context string         Name of the context to use. (default <current_context>)\n-e, --env stringArray        Environment variable, e.g. key=val. Can be repeated to provide multiple env vars\n    --env-file stringArray   Path to .env file. Can be repeated to provide multiple env files\n-h, --help                   help for local\n    --output-dir string      Path to the engine directory to output the build artifacts. (defaults to `<project-root>/engine/build)\n    --supergraph string      Path to Supergraph config file\n```\n\n----------------------------------------\n\nTITLE: Defining Data Connector Scalar Representation in YAML\nDESCRIPTION: Example YAML configuration for representing a data connector scalar type. It specifies the data connector name, scalar type, Open DD representation, and GraphQL configuration.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/metadata-reference/data-connector-links.mdx#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ndataConnectorName: data_connector\ndataConnectorScalarType: varchar\nrepresentation: String\ngraphql:\n  comparisonExpressionTypeName: String_Comparison_Exp\n```\n\n----------------------------------------\n\nTITLE: Creating a Local Subgraph with Hasura DDN CLI\nDESCRIPTION: This command initializes a new subgraph in a local project directory. It creates a new subdirectory with the subgraph's name.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/project-configuration/subgraphs/create-a-subgraph.mdx#2025-04-17_snippet_0\n\nLANGUAGE: ddn\nCODE:\n```\nddn subgraph init <subgraph-name>\n```\n\n----------------------------------------\n\nTITLE: Building Supergraph\nDESCRIPTION: Command to build a new local supergraph that includes the custom connector\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/data-modeling/partials/lambda-connectors/python/_command-create-native-operation-how-to.mdx#2025-04-17_snippet_4\n\nLANGUAGE: ddn\nCODE:\n```\nddn supergraph build local\n```\n\n----------------------------------------\n\nTITLE: Configuring ModelGraphQlDefinitionV2 in YAML for PromptQL\nDESCRIPTION: This YAML snippet shows how to configure ModelGraphQlDefinitionV2 in PromptQL. It includes settings for select uniques, select many, and aggregate operations in the GraphQL API.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/metadata-reference/models.mdx#2025-04-17_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nselectUniques:\n  - queryRootField: ArticleByID\n    uniqueIdentifier:\n      - article_id\n    description: Description for the select unique ArticleByID\nselectMany:\n  queryRootField: ArticleMany\n  description: Description for the select many ArticleMany\naggregate:\n  queryRootField: ArticleAggregate\n  description: Aggregate over Articles\n```\n\n----------------------------------------\n\nTITLE: Querying MongoDB Data with GraphQL\nDESCRIPTION: Example GraphQL query to fetch all comments from the MongoDB collection. The query requests comment_id, comment text, user_id, and post_id fields for each comment.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/data-modeling/partials/classic-connectors/mongoDB/_model-create-tutorial.mdx#2025-04-17_snippet_6\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  comments {\n    comment_id\n    comment\n    user_id\n    post_id\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Examples of Using ddn supergraph build local Command (Bash)\nDESCRIPTION: Examples showing how to build the Supergraph using different configurations, including default settings and custom file paths for supergraph config, environment variables, and output directories.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_supergraph_build_local.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Build the Supergraph using the supergraph config and local env file from context and output it to default engine directory i.e. <project-root>/engine/build\n ddn supergraph build local\n\n# Build the Supergraph using a specific supergraph config file and env file and output it to a specific directory\n ddn supergraph build local --output-dir <path-to-engine-directory> --supergraph supergraph.yaml --env-file .env\n```\n\n----------------------------------------\n\nTITLE: Restricting Field Access with TypePermissions in PromptQL\nDESCRIPTION: A YAML configuration for implementing field-level security that limits which fields a user can access. The admin role can access both id and name fields, while the user role can only access the name field.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/data-modeling/permissions.mdx#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# e.g., Users.hml\n---\nkind: TypePermissions\nversion: v1\ndefinition:\n  typeName: Users\n  permissions:\n    # admin is present by default\n    - role: admin\n      output:\n        allowedFields:\n          - id\n          - name\n    #highlight-start\n    - role: user\n      output:\n        allowedFields:\n          - name\n    #highlight-end\n```\n\n----------------------------------------\n\nTITLE: Introspecting PostgreSQL Data Connector in DDN\nDESCRIPTION: This command introspects the PostgreSQL data connector to fetch the latest resources, including the newly added native query.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/data-modeling/partials/classic-connectors/postgreSQL/_model-create-native-query-how-to.mdx#2025-04-17_snippet_1\n\nLANGUAGE: ddn\nCODE:\n```\nddn connector introspect <connector_name>\n```\n\n----------------------------------------\n\nTITLE: Building a Local Supergraph\nDESCRIPTION: Command to build a local Hasura supergraph that incorporates the custom connector and its functions.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/data-modeling/partials/lambda-connectors/go/_command-create-tutorial.mdx#2025-04-17_snippet_4\n\nLANGUAGE: ddn\nCODE:\n```\nddn supergraph build local\n```\n\n----------------------------------------\n\nTITLE: Resource Limit Overrides in Hasura DDN Connector Configuration\nDESCRIPTION: This YAML configuration demonstrates how to override top-level resource limits with region-specific values in a Hasura DDN connector. It shows how to set different memory and CPU allocations for a specific region, while maintaining default values for other regions.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/private-ddn/connector-deployment-resources.mdx#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ndefinition:\n  resources:\n    memory: 512M\n    cpu: 1\n  regionConfiguration:\n    - region: us-central1\n      resources:\n        memory: 128M\n        cpu: 2\n```\n\n----------------------------------------\n\nTITLE: Example Usage of DDN Connector List Command\nDESCRIPTION: These examples demonstrate how to use the 'ddn connector list' command to list all versions of all connectors and to list versions of a specific connector (Postgres in this case).\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_connector_list.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# List all versions of all connectors\n ddn connector list\n\n# List all versions of the Postgres connector\n ddn connector list --hub-connector hasura/postgres\n```\n\n----------------------------------------\n\nTITLE: Introspecting MongoDB Instance with DDN CLI\nDESCRIPTION: Uses the DDN CLI to introspect a MongoDB instance, gathering information about its structure and data models.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/data-modeling/partials/classic-connectors/mongoDB/_command-create-tutorial.mdx#2025-04-17_snippet_2\n\nLANGUAGE: ddn\nCODE:\n```\nddn connector introspect my_mongo\n```\n\n----------------------------------------\n\nTITLE: Configuring GET Authentication Webhook in YAML\nDESCRIPTION: Example configuration for a GET authentication webhook, specifying the URL and custom headers to be forwarded.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/metadata-reference/auth-config.mdx#2025-04-17_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nmethod: GET\nurl:\n  value: http://auth_hook:3050/validate-request\ncustomHeadersConfig:\n  headers:\n    forward:\n      - Authorization\n    additional:\n      user-agent: hasura-ddn\n```\n\n----------------------------------------\n\nTITLE: Updating Subgraph Name in Subgraph Config File (YAML)\nDESCRIPTION: This snippet shows how to update the name of the subgraph in the subgraph.yaml file. The 'name' field under the 'definition' section should be changed to the new subgraph name.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/project-configuration/tutorials/rename-subgraph.mdx#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nkind: Subgraph\nversion: v2\ndefinition:\n  name: <new-subgraph-name>\n  generator:\n    rootPath: .\n  includePaths:\n    - metadata\n  envMapping: ...\n```\n\n----------------------------------------\n\nTITLE: Model Permissions with Relationship Filter\nDESCRIPTION: Example of model permissions using relationship-based filtering for access control.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/metadata-reference/permissions.mdx#2025-04-17_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nkind: ModelPermissions\nversion: v1\ndefinition:\n  modelName: Articles\n  permissions:\n    - role: admin\n      select:\n        filter: null\n    - role: user\n      select:\n        filter:\n          relationship:\n            name: author\n            predicate:\n              fieldComparison:\n                field: id\n                operator: _eq\n                value:\n                  sessionVariable: x-hasura-user-id\n```\n\n----------------------------------------\n\nTITLE: Configuring RSA-based JWT Authentication in Hasura (PEM Format)\nDESCRIPTION: Example configuration for RSA-based JWT authentication using a public key in PEM format with a 512-bit key.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/auth/jwt/jwt-configuration.mdx#2025-04-17_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nkind: AuthConfig\nversion: v3\ndefinition:\n  mode:\n    jwt:\n      claimsConfig:\n        namespace:\n          claimsFormat: Json\n          location: /claims.jwt.hasura.io\n      tokenLocation:\n        type: BearerAuthorization\n      key:\n        fixed:\n          algorithm: RS512\n          key:\n            value:\n              '-----BEGIN PUBLIC\n              KEY-----\\nMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDdlatRjRjogo3WojgGHFHYLugd\\nUWAY9iR3fy4arWNA1KoS8kVw33cJibXr8bvwUAUparCwlvdbH6dvEOfou0/gCFQs\\nHUfQrSDv+MuSUMAe8jzKE4qW+jK+xQU9a03GUnKHkkle+Q0pX/g6jXZ7r1/xAK5D\\no2kQ+X5xK9cipRgEKwIDAQAB\\n-----END\n              PUBLIC KEY-----\\n'\n```\n\n----------------------------------------\n\nTITLE: Users and Current Session Query with Relationship\nDESCRIPTION: This GraphQL query shows how to fetch users and their current session information in a single request, leveraging a relationship between the user object type and a command that provides session data.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/metadata-reference/relationships.mdx#2025-04-17_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\nquery UsersAndCurrentSession {\n  users {\n    id\n    username\n    currentSession {\n      activeSince\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Supergraph Configuration\nDESCRIPTION: Example supergraph.yaml configuration showing subgraph structure\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/project-configuration/tutorials/work-with-multiple-subgraphs.mdx#2025-04-17_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nkind: Supergraph\nversion: v2\ndefinition:\n  subgraphs:\n    - globals/subgraph.yaml\n    - app/subgraph.yaml\n    - billing/subgraph.yaml\n```\n\n----------------------------------------\n\nTITLE: Managing Supergraph Builds with Service Account\nDESCRIPTION: Commands for creating and applying supergraph builds using service account authentication. Includes optional flags for build management.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/project-configuration/project-management/service-accounts.mdx#2025-04-17_snippet_1\n\nLANGUAGE: ddn\nCODE:\n```\n# Create supergraph build\nddn supergraph build create [flags]\n\n# Apply supergraph build\nddn supergraph build apply <supergraph-build-version> [flags]\n```\n\n----------------------------------------\n\nTITLE: Building the Hasura DDN Supergraph\nDESCRIPTION: Command to rebuild the Hasura DDN application after configuring authentication. This applies all the configuration changes to your local environment.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/auth/webhook/webhook-mode.mdx#2025-04-17_snippet_7\n\nLANGUAGE: ddn\nCODE:\n```\nddn supergraph build local\n```\n\n----------------------------------------\n\nTITLE: Building a Local Supergraph in DDN\nDESCRIPTION: This command builds a local supergraph in DDN, which compiles all the models into a unified GraphQL schema. This is required before running queries against your data.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/data-modeling/partials/classic-connectors/postgreSQL/_model-create-tutorial.mdx#2025-04-17_snippet_3\n\nLANGUAGE: ddn\nCODE:\n```\nddn supergraph build local\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables for Amazon Redshift Connection\nDESCRIPTION: This table outlines the required environment variables for connecting to an Amazon Redshift database using PromptQL. It includes the JDBC_URL for database connection and JDBC_SCHEMAS for specifying schemas to use.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/how-to-build-with-promptql/with-amazon-redshift.mdx#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| ENV            | Example                                                                        | Description                                                                                        |\n| -------------- | ------------------------------------------------------------------------------ | -------------------------------------------------------------------------------------------------- |\n| `JDBC_URL`     | `jdbc:redshift://<host>:<port>/<database>?user=<username>&password=<password>` | The JDBC URL to connect to the Amazon Redshift database.                                           |\n| `JDBC_SCHEMAS` | `public,app`                                                                   | The schemas to use for the database. Optional. This can also be included in the connection string. |\n```\n\n----------------------------------------\n\nTITLE: Building a Local Supergraph in DDN\nDESCRIPTION: Creates a local build of the supergraph using the DDN CLI. This command generates JSON files representing the built supergraph in the 'engine/build' directory.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/how-to-build-with-promptql/_boilerplateDx.mdx#2025-04-17_snippet_4\n\nLANGUAGE: ddn\nCODE:\n```\nddn supergraph build local\n```\n\n----------------------------------------\n\nTITLE: Introspecting and Adding Commands in DDN CLI\nDESCRIPTION: Demonstrates how to introspect the connector and add commands using the DDN CLI. These steps generate metadata for the custom functions.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/business-logic/tutorials/1-take-action-for-a-user.mdx#2025-04-17_snippet_5\n\nLANGUAGE: ddn\nCODE:\n```\nddn connector introspect my_ts\nddn command add my_ts take_action_on_behalf_of_user\n```\n\n----------------------------------------\n\nTITLE: Comparing GraphQL Schema Changes Between Builds Using DDN CLI in Bash\nDESCRIPTION: This example demonstrates how to compare changes in the GraphQL schema from build version 'qfrr5e5jyw' to 'g6v6nh73h0' for the project 'pet-lion-2649'.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_supergraph_build_diff.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nddn supergraph build diff qfrr5e5jyw g6v6nh73h0 --project pet-lion-2649\n```\n\n----------------------------------------\n\nTITLE: Resulting GraphQL Query from Hello Command\nDESCRIPTION: The GraphQL query that is generated from the Hello command definition. This shows how the command is exposed in the GraphQL API, allowing clients to invoke the 'hello' function with a name parameter.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/metadata-reference/commands.mdx#2025-04-17_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  hello(name: \"Hasura\")\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Supergraph Build with AuthConfig in DDN\nDESCRIPTION: Creates a new supergraph build that incorporates the JWT-based AuthConfig. This command is run from the project root and assigns a description to the build.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/auth/jwt/tutorials/setup-test-jwt.mdx#2025-04-17_snippet_2\n\nLANGUAGE: ddn\nCODE:\n```\nddn supergraph build create --description \"use jwt-based authconfig\"\n```\n\n----------------------------------------\n\nTITLE: Initializing Hasura DDN Cloud Project for Staging\nDESCRIPTION: Creates a new cloud project for the 'staging' context, using a specific environment file.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/project-configuration/tutorials/manage-multiple-environments.mdx#2025-04-17_snippet_11\n\nLANGUAGE: ddn\nCODE:\n```\nddn project init --env-file-name \".env.staging.cloud\"\n```\n\n----------------------------------------\n\nTITLE: Building Connector on DDN using YAML Configuration\nDESCRIPTION: Command to build a connector on DDN using a specified YAML configuration file. It uses environment variables and project settings.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/project-configuration/tutorials/independent-connector-deployment.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nddn connector build create --connector <subgraph-name>/connector/<connector-name>/connector.yaml \\\n  --env-file .env.cloud \\\n  --project <project-name>\n```\n\n----------------------------------------\n\nTITLE: Testing GraphQL Query\nDESCRIPTION: Example GraphQL query to test the shout_name function with input 'Alice'\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/data-modeling/partials/lambda-connectors/python/_command-create-tutorial.mdx#2025-04-17_snippet_7\n\nLANGUAGE: graphql\nCODE:\n```\nquery ShoutTheName {\n  shoutName(name: \"Alice\")\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Parent Project and Git Repository in DDN CLI\nDESCRIPTION: This command initializes a new local parent project, changes to the project directory, and initializes a Git repository.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/project-configuration/subgraphs/working-with-multiple-repositories.mdx#2025-04-17_snippet_0\n\nLANGUAGE: ddn\nCODE:\n```\nddn supergraph init <parent-project> && cd <parent-project> && git init\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Response from UpdatePostTitlesByAge Mutation\nDESCRIPTION: This JSON object represents the expected response from the UpdatePostTitlesByAge mutation, showing the number of affected rows and the updated post titles.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/data-modeling/partials/classic-connectors/postgreSQL/_command-create-native-operation-tutorial.mdx#2025-04-17_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"updatePostTitlesByAge\": {\n      \"affectedRows\": 2,\n      \"returning\": [\n        {\n          \"id\": 1,\n          \"title\": \"My First Post - age 25\"\n        },\n        {\n          \"id\": 2,\n          \"title\": \"Another Post - age 25\"\n        }\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: CommandSource Example in YAML\nDESCRIPTION: Configuration example for specifying the data connector source for a command. This defines which data connector and function will be used to execute the command logic, along with any argument mappings.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/metadata-reference/commands.mdx#2025-04-17_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ndataConnectorName: data_connector\ndataConnectorCommand:\n  function: latest_article\nargumentMapping: {}\n```\n\n----------------------------------------\n\nTITLE: Configuring an ObjectBooleanExpressionType in YAML\nDESCRIPTION: This example demonstrates how to define an ObjectBooleanExpressionType for an 'Author' object type. It specifies comparable fields like article_id, title, and author_id with all operators enabled, and defines the GraphQL type name as 'Author_bool_exp'.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/metadata-reference/boolean-expressions.mdx#2025-04-17_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nkind: ObjectBooleanExpressionType\nversion: v1\ndefinition:\n  name: AuthorBoolExp\n  objectType: Author\n  dataConnectorName: my_db\n  dataConnectorObjectType: author\n  comparableFields:\n    - fieldName: article_id\n      operators:\n        enableAll: true\n    - fieldName: title\n      operators:\n        enableAll: true\n    - fieldName: author_id\n      operators:\n        enableAll: true\n  graphql:\n    typeName: Author_bool_exp\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Python Connector Functions\nDESCRIPTION: Example implementation of a custom Python connector with a query function using the hasura_ndc package. Shows how to register a custom function that can be accessed by PromptQL\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/data-modeling/partials/lambda-connectors/python/_command-create-native-operation-how-to.mdx#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom hasura_ndc import start\nfrom hasura_ndc.function_connector import FunctionConnector\n\nconnector = FunctionConnector()\n\n@connector.register_query\ndef my_custom_code(my_input: str) -> str:\n  # Do something with the input\n  return \"My output\"\n\nif __name__ == \"__main__\":\n  start(connector)\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables for PostgreSQL in Hasura DDN\nDESCRIPTION: This snippet shows the required environment variables for connecting PromptQL to a PostgreSQL database. It includes the JDBC URL format and an optional schema specification.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/how-to-build-with-promptql/with-postgresql.mdx#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| ENV            | Example                                                                          | Description                                                                                        |\n| -------------- | -------------------------------------------------------------------------------- | -------------------------------------------------------------------------------------------------- |\n| `JDBC_URL`     | `jdbc:postgresql://<host>:<port>/<database>?user=<username>&password=<password>` | The JDBC URL to connect to the PostgreSQL database.                                                |\n| `JDBC_SCHEMAS` | `public,app`                                                                     | The schemas to use for the database. Optional. This can also be included in the connection string. |\n```\n\n----------------------------------------\n\nTITLE: Example GraphQL Mutation\nDESCRIPTION: Sample GraphQL mutation to create a new user with the implemented native mutation\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/data-modeling/partials/classic-connectors/mongoDB/_command-create-native-operation-tutorial.mdx#2025-04-17_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\nmutation CreateUser {\n  createUser(age: 25, name: \"Peter\") {\n    n\n    ok\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Descriptions to Relationships in PromptQL\nDESCRIPTION: Example of adding semantic information to a customer-order relationship. The description explains the business meaning of the relationship and important constraints.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/data-modeling/semantic-information.mdx#2025-04-17_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nkind: Relationship\nversion: v1\ndefinition:\n  name: customer_orders\n  source: customers\n  target: orders\n  description: |\n    Links customers to their orders. One customer can have multiple orders.\n    Orders cannot exist without a customer.\n    Historical orders are retained even if customer is deactivated.\n```\n\n----------------------------------------\n\nTITLE: Configuring EdDSA-based JWT Authentication in Hasura (PEM Format)\nDESCRIPTION: Example configuration for EdDSA-based JWT authentication using a public key in PEM format with Ed25519 variant.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/auth/jwt/jwt-configuration.mdx#2025-04-17_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\nkind: AuthConfig\nversion: v3\ndefinition:\n  mode:\n    jwt:\n      claimsConfig:\n        namespace:\n          claimsFormat: Json\n          location: /claims.jwt.hasura.io\n      tokenLocation:\n        type: BearerAuthorization\n      key:\n        fixed:\n          algorithm: Ed25519\n          key:\n            value:\n              '-----BEGIN PUBLIC KEY-----\\nMCowBQYDK2VwAyEAG9I+toAAJicilbPt36tiC4wi7E1Dp9rMmfnwdKyVXi0=\\n-----END PUBLIC\n              KEY-----'\n```\n\n----------------------------------------\n\nTITLE: Initializing Firebase Admin SDK\nDESCRIPTION: JavaScript code to initialize the Firebase Admin SDK with service account credentials.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/auth/jwt/tutorials/integrations/3-firebase.mdx#2025-04-17_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst admin = require(\"firebase-admin\");\n\n// service_account.json points to the private key from the prerequisites\nadmin.initializeApp({ credential: admin.credential.cert(require(\"./service_account.json\")) });\n```\n\n----------------------------------------\n\nTITLE: Querying Users with Posts in GraphQL\nDESCRIPTION: This GraphQL query retrieves users with their associated posts, demonstrating the newly created relationship.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/data-modeling/partials/classic-connectors/mongoDB/_relationship-create-model-to-model.mdx#2025-04-17_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\nquery UsersWithPosts {\n  users {\n    name\n    age\n    posts {\n      id\n      content\n      title\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying User by Global ID in GraphQL\nDESCRIPTION: This GraphQL query shows how to retrieve a User object using a Global ID, which is a unique identifier across the entire application.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/metadata-reference/models.mdx#2025-04-17_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  node(id: \"eyJ2ZXJzaW9uIjoxLCJ0eXBlbmFtZSI6IkFydGljbGUiLCJpZCI6eyJhcnRpY2xlX2lkIjoyfX0=\") {\n    id\n    __typename\n    ... on User {\n      name\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Command Metadata in Hasura DDN\nDESCRIPTION: This YAML snippet shows the configuration for the custom command in the Hasura DDN project, including description and argument mapping.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/_quickstart_template.mdx#2025-04-17_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\n---\nkind: Command\nversion: v1\ndefinition:\n  name: rent_single_movie_by_series_title\n  description:\n    This function allows users to rent movies from PromptFlix and should be used for any request to rent a movie.\n  outputType: rent_movie_response!\n  arguments:\n    - name: series_title\n      type: String!\n  source:\n    dataConnectorName: promptflix\n    dataConnectorCommand:\n      procedure: rentSingleMovieBySeriesTitle\n    argumentMapping:\n      series_title: seriesTitle\n  graphql:\n    rootFieldName: rent_single_movie_by_series_title\n    rootFieldKind: Mutation\n```\n\n----------------------------------------\n\nTITLE: Creating ConnectorBuild Basic Command Syntax\nDESCRIPTION: Basic command syntax for creating a ConnectorBuild on Hasura DDN using a connector configuration file.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_connector_build_create.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nddn connector build create --connector <path-to-connector-config-file-.yaml> [flags]\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Project Context in YAML\nDESCRIPTION: Example showing the default context configuration with project mapping to a cloud project. The configuration includes project ID, supergraph and subgraph paths, and environment file locations.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/project-configuration/project-management/manage-contexts.mdx#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ncontexts:\n  default:\n    project: great-ddn-1234\n    supergraph: ../supergraph.yaml\n    subgraph: ../app/subgraph.yaml\n    localEnvFile: ../.env\n    cloudEnvFile: ../.env.cloud\n```\n\n----------------------------------------\n\nTITLE: Examples of Using 'ddn model show' Command in Bash\nDESCRIPTION: Demonstrates two examples of using the 'ddn model show' command: one for a specific model 'Carts', and another using a glob pattern to match multiple models.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_model_show.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Show diff between the 'Carts' model and its corresponding ndc collection\n ddn model show Carts\n\n# Show diff between models and their corresponding ndc collections for all models matching glob pattern 'User*'\n ddn model show \"User*\"\n```\n\n----------------------------------------\n\nTITLE: Implementing HTTP API Call in TypeScript\nDESCRIPTION: TypeScript function implementation for making an HTTP POST request to httpbin.org with greeting functionality\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/how-to-build-with-promptql/with-api-endpoints.mdx#2025-04-17_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * This is an API to say hello from httpbin for a given name\n * @readonly\n */\nexport async function helloFromHttpBin(name?: string): Promise<{ greeting?: string }> {\n  const greeting = { greeting: name };\n\n  const response = await fetch(\"https://httpbin.org/post\", {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify({ greeting: `Hello ${name}!` }),\n  });\n\n  const data: any = await response.json();\n  return { greeting: data?.json?.greeting };\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Script for Supergraph Build in YAML\nDESCRIPTION: YAML configuration for adding a custom script to build the supergraph without connectors, including commands for both bash and PowerShell.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/project-configuration/tutorials/independent-connector-deployment.mdx#2025-04-17_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nkind: Context\nversion: v3\ndefinition:\n  current: default\n  contexts:\n    default: ...\n  scripts:\n    docker-start:\n      bash: HASURA_DDN_PAT=$(ddn auth print-access-token) docker compose --env-file .env up --build --pull always -d\n      powershell:\n        $Env:HASURA_DDN_PAT = (ddn auth print-access-token); docker compose --env-file .env up --build --pull always -d\n    build-supergraph:\n      bash:\n        ddn supergraph build create --no-build-connectors --supergraph supergraph.yaml --env-file .env.cloud --project\n        <project-name>\n      powershell:\n        ddn supergraph build create --no-build-connectors --supergraph supergraph.yaml --env-file .env.cloud --project\n        <project-name>\n```\n\n----------------------------------------\n\nTITLE: Configuring BigQuery Service Account Key\nDESCRIPTION: Example JSON structure for the BigQuery service account key file that enables authentication. Contains necessary fields like project ID, private key, client email, and authentication endpoints.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/how-to-build-with-promptql/with-bigquery.mdx#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"service_account\",\n  \"project_id\": \"project-id\",\n  \"private_key_id\": \"private-key-id\",\n  \"private_key\": \"-----BEGIN PRIVATE KEY-----\\nprivate-key\\n-----END PRIVATE KEY-----\\n\",\n  \"client_email\": \"service-account-email\",\n  \"client_id\": \"client-id\",\n  \"auth_uri\": \"https://accounts.google.com/o/oauth2/auth\",\n  \"token_uri\": \"https://oauth2.googleapis.com/token\",\n  \"auth_provider_x509_cert_url\": \"https://www.googleapis.com/oauth2/v1/certs\",\n  \"client_x509_cert_url\": \"https://www.googleapis.com/robot/v1/metadata/x509/service-account-email\"\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Auth Configuration for Development Environment in YAML\nDESCRIPTION: This YAML configuration file sets up the authentication mode for the development environment. It specifies the 'noAuth' mode with an admin role and empty session variables.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/project-configuration/project-management/manage-environments.mdx#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nkind: AuthConfig\nversion: v3\ndefinition:\n  mode:\n    noAuth:\n      role: admin\n      sessionVariables: {}\n```\n\n----------------------------------------\n\nTITLE: Examples of Adding Environment Variables to DDN Connector (Bash)\nDESCRIPTION: These examples demonstrate various ways to use the 'ddn connector env add' command. They show how to add a single variable, multiple variables to a specific env file, and how to specify a connector using a YAML config file.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_connector_env_add.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Add new environment variable to Connector mydb\n ddn connector env add mydb --env NEW_VAR=value\n\n# Add new environment variables to a specific env file\n ddn connector env add mydb --subgraph ./subgraph/subgraph.yaml --env VAR1=VAL1 --env VAR2=VAL2 --target-env-file .env.local\n\n# Add new environment variable to Connector located at ./foo/my_db/connector.yaml\n ddn connector env add --connector ./foo/my_db/connector.yaml --env NEW_VAR=value\n```\n\n----------------------------------------\n\nTITLE: Project Initialization\nDESCRIPTION: Command to scaffold a new local project with PromptQL support using the data plane ID.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/private-ddn/ddn-workspace.mdx#2025-04-17_snippet_2\n\nLANGUAGE: ddn\nCODE:\n```\nddn supergraph init my-project --with-promptql --project-data-plane-id <data-plane-id> && cd my-project\n```\n\n----------------------------------------\n\nTITLE: Implementing Continuous Data Loading\nDESCRIPTION: Sets up an async job to continuously insert new repository data at regular intervals\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/how-to-build-with-promptql/with-apis-with-bulk-data.mdx#2025-04-17_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nasync function insertData() {\n  const db = await getDB();\n\n  setInterval(async () => {\n    try {\n      const timestamp = new Date().toISOString();\n      await db.all(`\n        INSERT INTO repositories (id, name, description)\n        VALUES (\n          (SELECT COALESCE(MAX(id), 0) + 1 FROM repositories),\n          'project-${timestamp}',\n          'Automatically inserted at ${timestamp}'\n        )\n      `);\n      console.log(`Inserted new repository at ${timestamp}`);\n    } catch (err) {\n      console.error('Error inserting data:', err);\n    }\n  }, 1000);\n}\n\n(async () => {\n  const connector = await makeConnector(connectorConfig);\n  start(connector);\n\n  // Kick off an insert data job\n  insertData();\n})();\n```\n\n----------------------------------------\n\nTITLE: Examples of Using 'ddn subgraph add' Command in Bash\nDESCRIPTION: Examples demonstrating how to add a subgraph config file to one or multiple supergraph config files using the 'ddn subgraph add' command.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_subgraph_add.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Add a Subgraph config file \"./app/subgraph.yaml\" to the Supergraph config file \"./supergraph.yaml\"\n ddn subgraph add --subgraph ./app/subgraph.yaml --target-supergraph ./supergraph.yaml\n\n# Add a Subgraph config file \"./app/subgraph.yaml\" to multiple Supergraph config files\"\n ddn subgraph add --subgraph ./app/subgraph.yaml --target-supergraph ./supergraph.stg.yaml --target-supergraph ./supergraph.prod.yaml\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub API Token in .env File\nDESCRIPTION: Example of how to add the GitHub API token to the .env file for authentication with the GitHub API.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/recipes/tutorials/github-assistant.mdx#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# .env\n\n...\nGITHUB_API_TOKEN=<GITHUB_API_TOKEN>\n```\n\n----------------------------------------\n\nTITLE: Configuring MySQL Environment Variables for PromptQL\nDESCRIPTION: This snippet shows the required environment variable for connecting PromptQL to a MySQL database. It specifies the JDBC_URL format for MySQL connection.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/how-to-build-with-promptql/with-mysql.mdx#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| ENV        | Example                                        | Description                         |\n| ---------- | ---------------------------------------------- | ----------------------------------- |\n| `JDBC_URL` | `jdbc:mysql://user:password@host:3306/db_name` | This connector requires a JDBC URL. |\n```\n\n----------------------------------------\n\nTITLE: Initializing Custom Business Logic Connector\nDESCRIPTION: This command initializes a new connector for implementing custom business logic in the Hasura DDN project.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/_quickstart_template.mdx#2025-04-17_snippet_10\n\nLANGUAGE: ddn\nCODE:\n```\nddn connector init promptflix -i\n```\n\n----------------------------------------\n\nTITLE: PqlChat Component Example Implementation\nDESCRIPTION: Example implementation of a PqlChat conversation component showing user interaction and system response about available data analysis capabilities.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/promptql-playground/overview.mdx#2025-04-17_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<PqlChat>\n  <User>Hi, what are some questions you can answer?</User>\n  <Pql>\n    I can help you analyze data from what appears to be an e-commerce system. Here are some types of questions I can answer:\n\n    <ol>\n        <li>Product-related:</li>\n        <ul>\n            <li>Find popular products based on orders or reviews</li>\n            <li>Analyze product pricing across categories</li>\n            <li>Look up product details and descriptions</li>\n            <li>Find products from specific manufacturers or countries</li>\n        </ul>\n        <li>Order and Purchase Analysis:</li>\n        <ul>\n            <li>Track order statuses</li>\n            <li>Analyze delivery times</li>\n            <li>Look at purchase patterns</li>\n            <li>Find abandoned carts</li>\n        </ul>\n        <li>Customer Behavior:</li>\n        <ul>\n            <li>Analyze customer reviews and ratings</li>\n            <li>Look at shopping patterns</li>\n            <li>Track cart abandonment</li>\n            <li>Study product category preferences</li>\n        </ul>\n        <li>Business Metrics:</li>\n        <ul>\n            <li>Calculate sales metrics</li>\n            <li>Analyze review scores</li>\n            <li>Track coupon usage</li>\n            <li>Monitor cart completion rates</li>\n        </ul>\n    </ol>\n\n    Would you like me to explore any of these areas in particular?\n\n  </Pql>\n</PqlChat>\n```\n\n----------------------------------------\n\nTITLE: Structure Documentation in Markdown Tables\nDESCRIPTION: Comprehensive documentation of lifecycle plugin hook configurations, methods, and request/response structures using markdown tables. Each table defines configuration parameters, their values, requirements, and descriptions.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/metadata-reference/engine-plugins.mdx#2025-04-17_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n| Key          | Value                                                   | Required | Description                                     |\n| ------------ | ------------------------------------------------------- | -------- | ----------------------------------------------- |\n| `headers`    | LifecyclePluginHookHeadersConfig / null                  | false    | Configuration for headers in HTTP requests       |\n| `method`     | LifecyclePreRoutePluginHookConfigRequestMethods          | true     | Configuration for HTTP method                    |\n| `rawRequest` | PreRouteRequestConfig                                    | true     | Configuration for raw request body              |\n```\n\n----------------------------------------\n\nTITLE: Introspecting MongoDB Instance with DDN CLI\nDESCRIPTION: Command to introspect a MongoDB instance named 'my_mongo' using the DDN connector CLI tool. This is used to discover available collections and operations.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/data-modeling/partials/classic-connectors/mongoDB/_command-update-tutorial.mdx#2025-04-17_snippet_1\n\nLANGUAGE: ddn\nCODE:\n```\nddn connector introspect my_mongo\n```\n\n----------------------------------------\n\nTITLE: Examples of deleting subgraphs using DDN CLI\nDESCRIPTION: Practical examples of using the ddn subgraph delete command. The examples demonstrate removing a subgraph from local project metadata and optionally specifying a supergraph configuration file.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_subgraph_delete.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Removes subgraph corresponding to the subgraph config file, its dependent metadata objects, and associated connectors from the local project,removes subgraph from the supergraph config set in context\n ddn subgraph delete --subgraph ./foo/subgraph.yaml\n\n# Removes subgraph corresponding to the subgraph config file, its dependent metadata objects, and associated connectors from the local project, removes subgraph from the supergraph config \"./supergraph.yaml\"\n ddn subgraph delete --subgraph app/subgraph.yaml --supergraph ./supergraph.yaml\n```\n\n----------------------------------------\n\nTITLE: Running DDN Doctor Command\nDESCRIPTION: Output of the 'ddn doctor' command which checks for all required dependencies and their status, verifying Docker availability, Docker Compose version, and authentication status.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/faq.mdx#2025-04-17_snippet_7\n\nLANGUAGE: text\nCODE:\n```\nddn doctor\n3:23PM INF Evaluating the dependencies of DDN CLI...\nDDN CLI location: \"/usr/local/bin/ddn\"\nDDN CLI version: \"v2.15.0\"\n+------------------------------+--------+-----+\n| Criteria                     | Result | Fix |\n+------------------------------+--------+-----+\n| Docker available             | YES    |     |\n+------------------------------+--------+-----+\n| Docker Engine running        | YES    |     |\n+------------------------------+--------+-----+\n| Docker Registry reachable    | YES    |     |\n+------------------------------+--------+-----+\n| Docker Compose available     | YES    |     |\n+------------------------------+--------+-----+\n| Docker Compose version valid | YES    |     |\n+------------------------------+--------+-----+\n| Control Plane reachable      | YES    |     |\n+------------------------------+--------+-----+\n| DDN CLI Authenticated        | YES    |     |\n+------------------------------+--------+-----+\n```\n\n----------------------------------------\n\nTITLE: Introspecting Data Source in DDN\nDESCRIPTION: Command to introspect a data source to discover available commands that can be added to the supergraph.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/data-modeling/command.mdx#2025-04-17_snippet_0\n\nLANGUAGE: ddn\nCODE:\n```\nddn connector introspect <connector_name>\n```\n\n----------------------------------------\n\nTITLE: Adding Native Query to PostgreSQL Connector Configuration using DDN CLI\nDESCRIPTION: This command uses the DDN CLI plugin for the PostgreSQL connector to add a native query to the connector's configuration. It specifies the connector path, operation path, and query type.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/data-modeling/partials/classic-connectors/postgreSQL/_model-create-native-query-how-to.mdx#2025-04-17_snippet_0\n\nLANGUAGE: ddn\nCODE:\n```\nddn connector plugin \\\n  --connector subgraph_name/connector/connector_name/connector.yaml \\\n  -- native-operation create \\\n  --operation-path path/to/sql_file_name.sql \\\n  --kind query\n```\n\n----------------------------------------\n\nTITLE: Adding All Models from Data Source in PromptQL\nDESCRIPTION: Command to add all available entities from a data source as models. This is useful when you want PromptQL to have access to the entire data source.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/data-modeling/model.mdx#2025-04-17_snippet_3\n\nLANGUAGE: ddn\nCODE:\n```\nddn model add <connector_link_name> \"*\"\n```\n\n----------------------------------------\n\nTITLE: Raising Custom Error in Python Lambda Connector\nDESCRIPTION: Shows how to raise a custom UnprocessableContent error with a message and details in Python.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/business-logic/errors.mdx#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# There are different error types including: BadRequest, Forbidden, Conflict, UnprocessableContent, InternalServerError, NotSupported, and BadGateway\n@connector.register_query\ndef error():\n    raise UnprocessableContent(message=\"This is an error\", details={\"Error\": \"This is an error!\"})\n```\n\n----------------------------------------\n\nTITLE: Initializing PostgreSQL Connector for Hasura DDN\nDESCRIPTION: This command initializes a PostgreSQL connector for the Hasura DDN project, prompting for connection details.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/_quickstart_template.mdx#2025-04-17_snippet_2\n\nLANGUAGE: ddn\nCODE:\n```\nddn connector init imdb -i\n```\n\n----------------------------------------\n\nTITLE: Querying Users with Related Posts in GraphQL\nDESCRIPTION: GraphQL query that retrieves users along with their related posts. This demonstrates how to access the relationship from Users to Posts that was defined in DDN.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/data-modeling/partials/classic-connectors/postgreSQL/_relationship-create-model-to-model.mdx#2025-04-17_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\nquery UsersWithPosts {\n  users {\n    id\n    posts {\n      title\n    }\n    name\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Project and Login Commands\nDESCRIPTION: Commands for logging into DDN and creating a new project with a specified data plane ID and plan name.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/private-ddn/ddn-workspace.mdx#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n# Perform a ddn auth login using your personal Hasura Cloud account\nddn auth login\n\n# Create a project\nddn project create --data-plane-id <data-plane-id> --plan <plan-name>\n```\n\n----------------------------------------\n\nTITLE: Setting Context Values with DDN CLI\nDESCRIPTION: This command sets default values for keys used in DDN CLI commands. It allows setting values for project, supergraph, subgraph, and other allowed keys.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_context_set.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nddn context set <key> <value> (Allowed keys: supergraph, subgraph, localEnvFile, cloudEnvFile, selfHostedDataPlane, noBuildConnectors, project) [flags]\n```\n\n----------------------------------------\n\nTITLE: Configuring a Pre-parse LifecyclePluginHook in YAML\nDESCRIPTION: Example of a LifecyclePluginHook configuration in YAML format. This plugin is executed at the pre-parse stage of request processing. It includes configuration for headers, session data, and raw request handling with the URL being loaded from an environment variable.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/metadata-reference/engine-plugins.mdx#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nkind: LifecyclePluginHook\nversion: v1\ndefinition:\n  name: cloudflare allowlist\n  url:\n    valueFromEnv: ALLOW_LIST_URL\n  pre: parse\n  config:\n    request:\n      headers:\n        additional:\n          hasura-m-auth:\n            valueFromEnv: M_AUTH_KEY\n      session: {}\n      rawRequest:\n        query: {}\n        variables: {}\n```\n\n----------------------------------------\n\nTITLE: Introspecting Custom Connector in Hasura DDN\nDESCRIPTION: This command introspects the custom connector to make its functions available in the Hasura DDN project.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/_quickstart_template.mdx#2025-04-17_snippet_12\n\nLANGUAGE: ddn\nCODE:\n```\nddn connector introspect promptflix\n```\n\n----------------------------------------\n\nTITLE: Defining Function Configuration\nDESCRIPTION: Example of a function definition showing catalog, schema, name, and argument signature.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/connectors/snowflake/configuration.mdx#2025-04-17_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"function_catalog\": \"PUBLIC\",\n  \"function_schema\": \"PUBLIC\",\n  \"function_name\": \"add\",\n  \"argument_signature\": \"(N NUMBER, M NUMBER)\",\n  \"data_type\": \"TABLE (N NUMBER, M NUMBER)\",\n  \"comment\": \"Adds two numbers\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Connector Configuration in YAML\nDESCRIPTION: This YAML snippet demonstrates how to configure a connector in a DDN project. It specifies the connector type, version, name, subgraph, source, context, and environment variable mappings.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/metadata-reference/build-configs.mdx#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nkind: Connector\nversion: v2\ndefinition:\n  name: MY_CONNECTOR\n  subgraph: app\n  source: hasura/postgres:v1.1.1\n  context: .\n  envMapping:\n    CONNECTION_URI:\n      fromEnv: APP_MY_CONNECTOR_CONNECTION_URI\n    HASURA_SERVICE_TOKEN_SECRET:\n      fromEnv: APP_MY_CONNECTOR_HASURA_SERVICE_TOKEN_SECRET\n    OTEL_EXPORTER_OTLP_TRACES_ENDPOINT:\n      fromEnv: APP_MY_CONNECTOR_OTEL_EXPORTER_OTLP_TRACES_ENDPOINT\n    OTEL_SERVICE_NAME:\n      fromEnv: APP_MY_CONNECTOR_OTEL_SERVICE_NAME\n```\n\n----------------------------------------\n\nTITLE: CommandGraphQlDefinition Example in YAML\nDESCRIPTION: An example showing how to configure the GraphQL representation of a command. This configuration specifies the field name and whether it should be exposed as a query or mutation in the GraphQL schema.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/metadata-reference/commands.mdx#2025-04-17_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nrootFieldName: getLatestArticle\nrootFieldKind: Query\n```\n\n----------------------------------------\n\nTITLE: Configuring EC-based JWT Authentication in Hasura (X509 Certificate)\nDESCRIPTION: Example configuration for EC-based JWT authentication using a public key as an X509 certificate.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/auth/jwt/jwt-configuration.mdx#2025-04-17_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\nkind: AuthConfig\nversion: v3\ndefinition:\n  mode:\n    jwt:\n      claimsConfig:\n        namespace:\n          claimsFormat: Json\n          location: /claims.jwt.hasura.io\n      tokenLocation:\n        type: BearerAuthorization\n      key:\n        fixed:\n          algorithm: ES256\n          key:\n            value:\n              '\"-----BEGIN\n              CERTIFICATE-----\\nMIIBbjCCARWgAwIBAgIUGn02F6Y6s88dDGmIfwiNxWxDjhswCgYIKoZIzj0EAwIw\\nDTELMAkGA1UEBhMCSU4wHhcNMjMwNTI0MTAzNTI4WhcNMjgwNTIyMTAzNTI4WjAN\\nMQswCQYDVQQGEwJJTjBZMBMGByqGSM49AgEGCCqGSM49AwEHA0IABBFbP6OfrkG0\\n4y93Icpy+MF4FINkfavVFPCOZhKL1H/OkGe5DgSIycKp8w9aJmoHhB1sB3QTugfn\\nRWm5nU/TzsajUzBRMB0GA1UdDgQWBBSaqFjzps1qG+x2DPISjaXTWsTOdDAfBgNV\\nHSMEGDAWgBSaqFjzps1qG+x2DPISjaXTWsTOdDAPBgNVHRMBAf8EBTADAQH/MAoG\\nCCqGSM49BAMCA0cAMEQCIBDHHWa/uLAVdGFEk82auTmw995+MsRwv52VXLw2Z+ji\\nAiAXzOWIcGN8p25uhUN/7v9gEcADGIS4yUiv8gsn/Jk2ow==\\n-----END\n              CERTIFICATE-----'\n```\n\n----------------------------------------\n\nTITLE: Using ddn context get command in bash\nDESCRIPTION: The command syntax for retrieving values from the DDN CLI context. It allows retrieving various configuration values like project name, supergraph configuration, subgraph details, and environment settings.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_context_get.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nddn context get <key> (Allowed keys: project, supergraph, subgraph, localEnvFile, cloudEnvFile, selfHostedDataPlane, noBuildConnectors) [flags]\n```\n\n----------------------------------------\n\nTITLE: Querying the Comments Table with GraphQL\nDESCRIPTION: This GraphQL query retrieves all records from the comments table, including their id, comment text, user_id, and post_id fields. It demonstrates how to access the newly added table through GraphQL.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/data-modeling/partials/classic-connectors/postgreSQL/_model-create-tutorial.mdx#2025-04-17_snippet_6\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  comments {\n    id\n    comment\n    user_id\n    post_id\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a ScalarType in Hasura\nDESCRIPTION: A sample scalar type definition that shows how to create a custom UUID type in Hasura. This defines a new scalar type named 'Uuid' with GraphQL type name mapping.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/metadata-reference/types.mdx#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nkind: ScalarType\nversion: v1\ndefinition:\n  name: Uuid\n  graphql:\n    typeName: Uuid\n```\n\n----------------------------------------\n\nTITLE: Configuring EC-based JWT Authentication in Hasura (PEM Format)\nDESCRIPTION: Example configuration for EC-based JWT authentication using a public key in PEM format with ES256 algorithm.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/auth/jwt/jwt-configuration.mdx#2025-04-17_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\nkind: AuthConfig\nversion: v3\ndefinition:\n  mode:\n    jwt:\n      claimsConfig:\n        namespace:\n          claimsFormat: Json\n          location: /claims.jwt.hasura.io\n      tokenLocation:\n        type: BearerAuthorization\n      key:\n        fixed:\n          algorithm: ES256\n          key:\n            value:\n              '-----BEGIN PUBLIC\n              KEY-----\\nMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEEVs/o5+uQbTjL3chynL4wXgUg2R9\\nq9UU8I5mEovUf86QZ7kOBIjJwqnzD1omageEHWwHdBO6B+dFabmdT9POxg==\\n-----END\n              PUBLIC KEY-----'\n```\n\n----------------------------------------\n\nTITLE: Defining AWS CloudFormation Template for Hasura Cloud BYOC\nDESCRIPTION: This YAML template defines the AWS resources needed for Hasura Cloud BYOC, including IAM roles and policies. It creates a role named 'HasuraCloudBYOC' with specific permissions for managing EC2, EKS, IAM, and other AWS services.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/private-ddn/creating-a-data-plane/byoc.mdx#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nResources:\n  BootstrapRole:\n    Type: AWS::IAM::Role\n    Properties:\n      RoleName: HasuraCloudBYOC\n      AssumeRolePolicyDocument:\n        Version: '2012-10-17'\n        Statement:\n          - Effect: Allow\n            Principal:\n              AWS: arn:aws:iam::760537944023:role/PulumiDDNCli\n            Action: sts:AssumeRole\n            Condition:\n              StringEquals:\n                sts:ExternalId: hasura-cloud\n  BootstrapPolicy:\n    Type: AWS::IAM::Policy\n    Properties:\n      PolicyName: HasuraCloudBYOC\n      Roles:\n        - !Ref BootstrapRole\n      PolicyDocument:\n        Version: '2012-10-17'\n        Statement:\n          - Effect: Allow\n            Action:\n              - ec2:DescribeAddresses\n              - ec2:DescribeAddressesAttribute\n              - ec2:DescribeAvailabilityZones\n              - ec2:DescribeInternetGateways\n              - ec2:DescribeNatGateways\n              - ec2:DescribeNetworkInterfaces\n              - ec2:DescribeRegions\n              - ec2:DescribeRouteTables\n              - ec2:DescribeSecurityGroupRules\n              - ec2:DescribeSecurityGroups\n              - ec2:DescribeSubnets\n              - ec2:DescribeTags\n              - ec2:DescribeVpcAttribute\n              - ec2:DescribeVpcs\n              - eks:DeleteAddon\n              - eks:DescribeAddon\n              - eks:DescribeCluster\n              - eks:DescribeNodegroup\n              - eks:ListClusters\n              - iam:GetRole\n              - iam:GetServiceLinkedRoleDeletionStatus\n              - sqs:GetQueueAttributes\n            Resource: '*'\n          - Effect: Allow\n            Action:\n              - ec2:AllocateAddress\n              - ec2:AssociateAddress\n              - ec2:AssociateRouteTable\n              - ec2:CreateInternetGateway\n              - ec2:CreateNatGateway\n              - ec2:CreateRoute\n              - ec2:CreateRouteTable\n              - ec2:CreateSubnet\n              - ec2:CreateTags\n              - ec2:CreateVpc\n              - eks:CreateCluster\n              - eks:CreateNodegroup\n              - globalaccelerator:CreateAccelerator\n              - globalaccelerator:CreateEndpointGroup\n              - globalaccelerator:CreateListener\n              - globalaccelerator:TagResource\n              - sqs:CreateQueue\n              - sqs:TagQueue\n              - acm:RequestCertificate\n              - events:PutRule\n              - events:TagResource\n              - iam:CreateOpenIDConnectProvider\n              - iam:TagOpenIDConnectProvider\n            Resource: '*'\n            Condition:\n              StringEquals:\n                aws:RequestTag/Created-By: HasuraCloud\n          - Effect: Allow\n            Action:\n              - ec2:CreateTags\n            Resource:\n              - !Sub arn:aws:ec2:*:${AWS::AccountId}:security-group/*\n            Condition:\n              StringEquals:\n                aws:RequestTag/karpenter.sh/discovery: dataplane\n          - Effect: Allow\n            Action:\n              - ec2:DeleteTags\n            Resource:\n              - !Sub arn:aws:ec2:*:${AWS::AccountId}:security-group/*\n            Condition:\n              StringEquals:\n                aws:ResourceTag/karpenter.sh/discovery: dataplane\n          - Effect: Allow\n            Action:\n              - eks:AssociateAccessPolicy\n              - eks:DisassociateAccessPolicy\n            Resource:\n              - !Sub arn:aws:eks:*:${AWS::AccountId}:access-entry/dataplane/*\n          - Effect: Allow\n            Action:\n              - iam:AttachRolePolicy\n              - iam:CreateInstanceProfile\n              - iam:CreatePolicy\n              - iam:CreateRole\n              - iam:DeleteInstanceProfile\n              - iam:DeleteOpenIDConnectProvider\n              - iam:DeletePolicy\n              - iam:DeleteRole\n              - iam:DeleteServiceLinkedRole\n              - iam:DetachRolePolicy\n              - iam:GetInstanceProfile\n              - iam:GetOpenIDConnectProvider\n              - iam:GetPolicy\n              - iam:GetPolicyVersion\n              - iam:GetRolePolicy\n              - iam:ListAttachedRolePolicies\n              - iam:ListInstanceProfilesForRole\n              - iam:ListOpenIDConnectProviderTags\n              - iam:ListPolicyVersions\n              - iam:ListRolePolicies\n              - iam:PassRole\n              - iam:PutRolePolicy\n              - iam:RemoveRoleFromInstanceProfile\n              - iam:TagInstanceProfile\n              - iam:TagOpenIDConnectProvider\n              - iam:TagPolicy\n              - iam:TagRole\n            Resource:\n              # Roles\n              - !Sub arn:aws:iam::${AWS::AccountId}:role/KarpenterNodeRole\n              - !Sub arn:aws:iam::${AWS::AccountId}:role/eksClusterRole-*\n              - !Sub arn:aws:iam::${AWS::AccountId}:role/lb-controller-*\n              - !Sub arn:aws:iam::${AWS::AccountId}:role/autoscaler-controller-*\n              - !Sub arn:aws:iam::${AWS::AccountId}:role/global-accelerator-operator-*\n              - !Sub arn:aws:iam::${AWS::AccountId}:role/karpenter-controller-*\n              - !Sub arn:aws:iam::${AWS::AccountId}:role/HasuraWorkloadAutomationRole-*\n              - !Sub arn:aws:iam::${AWS::AccountId}:role/vpc-cni-*\n              - !Sub arn:aws:iam::${AWS::AccountId}:role/ebsCsiDriverRole-*\n              # Instance Profiles\n              - !Sub arn:aws:iam::${AWS::AccountId}:instance-profile/dataplane_*\n              # Policies\n              - !Sub arn:aws:iam::${AWS::AccountId}:policy/lb-controller-*\n              - !Sub arn:aws:iam::${AWS::AccountId}:policy/autoscaler-controller-*\n              - !Sub arn:aws:iam::${AWS::AccountId}:policy/global-accelerator-operator-*\n              - !Sub arn:aws:iam::${AWS::AccountId}:policy/karpenter-controller-*\n              # OIDC Providers\n              - !Sub arn:aws:iam::${AWS::AccountId}:oidc-provider/oidc.eks.*\n              # Service Roles\n              - !Sub arn:aws:iam::${AWS::AccountId}:role/aws-service-role/spot.amazonaws.com/AWSServiceRoleForEC2Spot\n          - Effect: Allow\n            Action:\n              - iam:CreateServiceLinkedRole\n            Resource: '*'\n            Condition:\n              StringEquals:\n                iam:AWSServiceName:\n                  - spot.amazonaws.com\n                  - globalaccelerator.amazonaws.com\n                  - eks.amazonaws.com\n                  - eks-nodegroup.amazonaws.com\n          - Effect: Allow\n            Action:\n              - eks:*\n              - globalaccelerator:*\n              - sqs:*\n              - acm:*\n              - events:*\n            Resource: '*'\n            Condition:\n              StringEquals:\n                aws:ResourceTag/Created-By: HasuraCloud\n          - Effect: Allow\n            Action:\n              - ec2:*\n            Resource: '*'\n            Condition:\n              StringEquals:\n                ec2:ResourceTag/Created-By: HasuraCloud\n\nOutputs:\n  RoleArn:\n    Description: \"ARN of the HasuraCloudBYOC IAM Role\"\n    Value: !GetAtt BootstrapRole.Arn\n```\n\n----------------------------------------\n\nTITLE: Defining Field Comparison Predicate in YAML\nDESCRIPTION: Example of a field comparison predicate used in model permissions. It compares the 'author_id' field with a session variable.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/metadata-reference/permissions.mdx#2025-04-17_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nfieldComparison:\n  field: author_id\n  operator: _eq\n  value:\n    sessionVariable: x-hasura-user-id\n```\n\n----------------------------------------\n\nTITLE: GraphQL Comments Query Response Format\nDESCRIPTION: This JSON shows the expected response format from the GraphQL comments query. It returns an array of comment objects with their corresponding fields under the data.comments path.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/data-modeling/partials/classic-connectors/postgreSQL/_model-create-tutorial.mdx#2025-04-17_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"comments\": [\n      {\n        \"id\": 1,\n        \"comment\": \"Great post! Really enjoyed reading this.\",\n        \"user_id\": 1,\n        \"post_id\": 2\n      },\n      {\n        \"id\": 2,\n        \"comment\": \"Thanks for sharing your thoughts!\",\n        \"user_id\": 2,\n        \"post_id\": 1\n      },\n      {\n        \"id\": 3,\n        \"comment\": \"Interesting perspective.\",\n        \"user_id\": 3,\n        \"post_id\": 1\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Native Queries\nDESCRIPTION: Examples of both inline and parameterized native queries with their structure and type definitions.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/connectors/snowflake/configuration.mdx#2025-04-17_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"native_query_inline\": {\n    \"sql\": {\n      \"parts\": [\n        {\n          \"type\": \"text\",\n          \"value\": \"SELECT 1 AS result FROM DUAL\"\n        }\n      ]\n    },\n    \"columns\": {\n      \"result\": {\n        \"type\": \"named\",\n        \"name\": \"INT\"\n      }\n    },\n    \"arguments\": {},\n    \"description\": \"\"\n  },\n  \"ArtistById_parameterized\": {\n    \"sql\": {\n      \"parts\": [\n        {\n          \"type\": \"text\",\n          \"value\": \"SELECT * FROM CHINOOK.ARTIST WHERE ARTISTID = \"\n        },\n        {\n          \"type\": \"parameter\",\n          \"value\": \"ARTISTID\"\n        }\n      ]\n    },\n    \"columns\": {\n      \"ARTISTID\": {\n        \"type\": \"named\",\n        \"name\": \"INT\"\n      },\n      \"NAME\": {\n        \"type\": \"nullable\",\n        \"underlying_type\": {\n          \"type\": \"named\",\n          \"name\": \"STRING\"\n        }\n      }\n    },\n    \"arguments\": {\n      \"ARTISTID\": {\n        \"description\": null,\n        \"type\": {\n          \"type\": \"named\",\n          \"name\": \"INT\"\n        }\n      }\n    },\n    \"description\": null,\n    \"isProcedure\": false\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example of Deleting a SupergraphBuild from a Project\nDESCRIPTION: A practical example showing how to delete a specific SupergraphBuild version from a project named 'pet-lion-2649' using the --project flag.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_supergraph_build_delete.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Delete a SupergraphBuild from a Project \"pet-lion-2649\"\n ddn supergraph build delete <supergraph-build-version> --project pet-lion-2649\n```\n\n----------------------------------------\n\nTITLE: Executing MongoDB Native Mutation via GraphQL\nDESCRIPTION: Example GraphQL mutation that calls the custom insertUser native mutation with a name parameter.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/data-modeling/partials/classic-connectors/mongoDB/_command-create-tutorial.mdx#2025-04-17_snippet_7\n\nLANGUAGE: graphql\nCODE:\n```\nmutation InsertUser {\n  insertUser(name: \"Sam\") {\n    ok\n    n\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Building Supergraph with DDN CLI\nDESCRIPTION: Command to build a new supergraph locally after configuring permissions.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/auth/permissions/tutorials/1-simple-user-permissions.mdx#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nddn supergraph build local\n```\n\n----------------------------------------\n\nTITLE: BigQuery JDBC Connection Configuration\nDESCRIPTION: JDBC connection string format for Google BigQuery with OAuth service account authentication.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/data-sources/connect-to-a-source.mdx#2025-04-17_snippet_2\n\nLANGUAGE: jdbc\nCODE:\n```\njdbc:bigquery://https://www.googleapis.com/bigquery/v2:443;ProjectId=project-id;DefaultDataset=dataset;OAuthType=0;OAuthServiceAcctEmail=service-account-email;OAuthPvtKey=/etc/connector/key.json;\n```\n\n----------------------------------------\n\nTITLE: Adding Models Examples in Bash\nDESCRIPTION: Examples of using the 'ddn model add' command in various scenarios, including adding all Models, specific Models, and using glob patterns for filtering.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_model_add.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Add all Models for DataConnectorLink \"mydb\" in the subgraph set in the context\n ddn model add mydb \"*\"\n\n# Add a new Model \"Album\" from the collection \"Album\" in the DataConnectorLink \"mydb\" in Subgraph \"app\"\n ddn model add mydb Album --subgraph ./app/subgraph.yaml\n\n# Add all the Models from the collections in the DataConnectorLink \"mydb\" in Subgraph \"app\"\n ddn model add mydb \"*\" --subgraph ./app/subgraph.yaml\n\n# Add Models filtered by glob pattern from the collections in the DataConnectorLink \"mydb\" in Subgraph \"app\"\n ddn model add mydb \"user*\" --subgraph ./app/subgraph.yaml\n```\n\n----------------------------------------\n\nTITLE: Configuring a Native Query in the PromptQL Configuration File\nDESCRIPTION: JSON configuration that defines the metadata for a native query, including its exposure type, file path, and return type schema. This maps the SQL query to a GraphQL-accessible endpoint with defined types.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/data-modeling/partials/classic-connectors/clickHouse/_model-create-native-query-tutorial.mdx#2025-04-17_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n// configuration.json\n{\n  \"tables\": {},\n  \"queries\": {\n    \"UserByName\": {\n      \"exposed_as\": \"collection\",\n      \"file\": \"queries/UserByName.sql\",\n      \"return_type\": {\n        \"kind\": \"definition\",\n        \"columns\": {\n          \"id\": \"Int32\",\n          \"name\": \"String\"\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Supergraph Build in Hasura DDN\nDESCRIPTION: Command to apply a specific build version as the official API for the project. The build becomes accessible via the API URL, console, or any client accessing the API URL.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/deployment/hasura-ddn/deploy-to-ddn.mdx#2025-04-17_snippet_1\n\nLANGUAGE: ddn\nCODE:\n```\nddn supergraph build apply <build-version>\n```\n\n----------------------------------------\n\nTITLE: Opening DDN Console\nDESCRIPTION: DDN command to open the local Hasura Console for exploring the data\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/recipes/tutorials/csv-files.mdx#2025-04-17_snippet_6\n\nLANGUAGE: ddn\nCODE:\n```\nddn console --local\n```\n\n----------------------------------------\n\nTITLE: Creating Base Build of Cloud Parent Project in DDN CLI\nDESCRIPTION: This command creates an initial build of the cloud parent project, serving as the foundation for future subgraph builds.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/project-configuration/subgraphs/working-with-multiple-repositories.mdx#2025-04-17_snippet_4\n\nLANGUAGE: ddn\nCODE:\n```\nddn supergraph build create\n```\n\n----------------------------------------\n\nTITLE: Examples of Using ddn auth print-promptql-secret-key Command in Bash\nDESCRIPTION: These examples demonstrate how to use the command to print the PromptQL secret key for the current project context and how to output the result in JSON format.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_auth_print-promptql-secret-key.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Print the PromptQL secret key of the project set in the context\n ddn auth print-promptql-secret-key\n\n# Print PromptQL secret key as JSON\n ddn auth print-promptql-secret-key --out json\n```\n\n----------------------------------------\n\nTITLE: Building Supergraph with Updated Config\nDESCRIPTION: Command to build the local supergraph with the updated AuthConfig.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/auth/jwt/tutorials/integrations/3-firebase.mdx#2025-04-17_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nddn supergraph build local\n```\n\n----------------------------------------\n\nTITLE: DDN Connector-Link Remove Command Options\nDESCRIPTION: Available command-specific options for the connector-link remove command, including CI mode, context selection, and environment file configuration.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_connector-link_remove.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sass\nCODE:\n```\n    --ci                            Disables the use of context\n-c, --context string                Name of the context to use. (default <current_context>)\n-h, --help                          help for remove\n    --subgraph string               Path to Subgraph config file\n    --target-env-file stringArray   Env file to remove ConnectorLink environment variables from\n```\n\n----------------------------------------\n\nTITLE: Sample ScalarType YAML Configuration\nDESCRIPTION: An example of a complete ScalarType configuration showing the schema format. This example defines a custom string type with GraphQL type mapping and description.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/metadata-reference/types.mdx#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nkind: ScalarType\nversion: v1\nname: CustomString\ngraphql:\n  typeName: CustomString\ndescription: A custom string type\n```\n\n----------------------------------------\n\nTITLE: Example Usage of DDN Connector Resource Display\nDESCRIPTION: Demonstrates a practical example of using the show-resources command with a specific connector named 'mydb'.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_connector_show-resources.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Show resources for Connector `mydb`\n ddn connector show-resources mydb\n```\n\n----------------------------------------\n\nTITLE: MySQL Function Definition Example\nDESCRIPTION: Sample function definition showing metadata about a database function. This example shows an 'add' function with its arguments and return type.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/connectors/mysql/configuration.mdx#2025-04-17_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"function_catalog\": \"public\",\n  \"function_schema\": \"public\",\n  \"function_name\": \"add\",\n  \"argument_signature\": \"(N NUMBER, M NUMBER)\",\n  \"data_type\": \"TABLE (N NUMBER, M NUMBER)\",\n  \"comment\": \"Adds two numbers\"\n}\n```\n\n----------------------------------------\n\nTITLE: Introspecting a Connector in DDN\nDESCRIPTION: Uses the DDN CLI to introspect a connector named 'my_connector'. This command analyzes the structure of the data source and generates a schema representation.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/how-to-build-with-promptql/_boilerplateDx.mdx#2025-04-17_snippet_1\n\nLANGUAGE: ddn\nCODE:\n```\nddn connector introspect my_connector\n```\n\n----------------------------------------\n\nTITLE: Defining Command Permission with Argument Preset in YAML\nDESCRIPTION: Example of defining a command permission for a user role with an argument preset using a session variable.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/metadata-reference/permissions.mdx#2025-04-17_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\nrole: user\nallowExecution: true\nargumentPresets:\n  - argument: user_id\n    value:\n      session_variable: x-hasura-user_id\n```\n\n----------------------------------------\n\nTITLE: Introspecting PostgreSQL Instance with DDN CLI\nDESCRIPTION: This command uses the DDN connector to introspect a PostgreSQL instance named 'my_pg'. This step allows DDN to understand the database schema and available tables.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/data-modeling/partials/classic-connectors/postgreSQL/_model-create-tutorial.mdx#2025-04-17_snippet_1\n\nLANGUAGE: ddn\nCODE:\n```\nddn connector introspect my_pg\n```\n\n----------------------------------------\n\nTITLE: Defining Scalar Boolean Expression Type in Hasura YAML\nDESCRIPTION: This snippet demonstrates how to create a scalar boolean expression type for String comparisons, allowing equals and is_null operators. It maps the equals operator to Postgres's _eq operator.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/metadata-reference/boolean-expressions.mdx#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nkind: BooleanExpressionType\nversion: v1\ndefinition:\n  name: String_comparison_exp_with_eq_and_is_null\n  operand:\n    scalar:\n      type: String\n      comparisonOperators:\n        - name: equals\n          argumentType: String!\n      dataConnectorOperatorMapping:\n        - dataConnectorName: postgres\n          dataConnectorScalarType: varchar\n          operatorMapping:\n            equals: _eq\n  logicalOperators:\n    enable: true\n  isNull:\n    enable: true\n  graphql:\n    typeName: String_comparison_exp_with_eq_and_is_null\n```\n\n----------------------------------------\n\nTITLE: Adding Model to Connector\nDESCRIPTION: Command to add a new model to the PostgreSQL connector configuration.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/data-modeling/partials/classic-connectors/postgreSQL/_command-create-native-operation-how-to.mdx#2025-04-17_snippet_3\n\nLANGUAGE: ddn\nCODE:\n```\nddn command add <connector_name> <mutation_name>\n```\n\n----------------------------------------\n\nTITLE: Command-Specific Options for DDN Relationship Add in SASS\nDESCRIPTION: Available options specific to the 'ddn relationship add' command, including flags for context, foreign key collection, foreign key name, and other configuration parameters.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_relationship_add.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sass\nCODE:\n```\n    --ci                     Disables the use of context\n-c, --context string         Name of the context to use. (default <current_context>)\n    --fk-collection string   Only consider foreign keys defined on this collection\n    --fk-name string         Only consider foreign keys with this name\n-h, --help                   help for add\n    --pattern string         Pattern to detect targets. Can be 'glob' or 'literal'. (default \"glob\")\n    --subgraph string        Path to Subgraph config file\n```\n\n----------------------------------------\n\nTITLE: Opening Local PromptQL Console\nDESCRIPTION: Opens the local PromptQL console interface using the DDN CLI. This provides a web-based interface for interacting with the DDN project and querying data.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/how-to-build-with-promptql/_boilerplateDx.mdx#2025-04-17_snippet_6\n\nLANGUAGE: ddn\nCODE:\n```\nddn console --local\n```\n\n----------------------------------------\n\nTITLE: Configuring noAuth Mode in Hasura AuthConfig\nDESCRIPTION: A basic example of AuthConfig metadata for noAuth mode, which allows API access without authentication. This configuration sets a default admin role and can include static session variables. Not recommended for production use.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/metadata-reference/auth-config.mdx#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nkind: AuthConfig\nversion: v3\ndefinition:\n  mode:\n    noAuth:\n      role: admin\n      sessionVariables: {}\n```\n\n----------------------------------------\n\nTITLE: Executing ddn connector build get Command in Bash\nDESCRIPTION: The basic syntax for using the 'ddn connector build get' command in the DDN CLI. It allows listing ConnectorBuilds or retrieving details of a specific one from Hasura DDN.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_connector_build_get.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nddn connector build get [connector-build-id] [flags]\n```\n\n----------------------------------------\n\nTITLE: Using Environment Variables for Connection URI in PromptQL\nDESCRIPTION: Demonstrates how to reference an environment variable for the connection URI. This approach improves security and flexibility by avoiding hardcoded connection strings in the configuration.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/connectors/_jdbcConfig.mdx#2025-04-17_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"connection_uri\": {\n    \"variable\": \"JDBC_URL\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Subgraph Build in Hasura DDN\nDESCRIPTION: This command creates a new subgraph build on the main project. It is used to prepare the subgraph for integration.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/project-configuration/subgraphs/working-with-multiple-repositories.mdx#2025-04-17_snippet_19\n\nLANGUAGE: ddn\nCODE:\n```\nddn subgraph build create\n```\n\n----------------------------------------\n\nTITLE: Configuring AuthConfig for Firebase JWT\nDESCRIPTION: YAML configuration for setting up Hasura AuthConfig to use JWT mode with Firebase JWKs for token validation.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/auth/jwt/tutorials/integrations/3-firebase.mdx#2025-04-17_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nkind: AuthConfig\nversion: v3\ndefinition:\n  mode:\n    jwt:\n      audience: [\"your-firebase-project-name\"]\n      claimsConfig:\n        namespace:\n          claimsFormat: Json\n          location: \"/claims.jwt.hasura.io\"\n      key:\n        jwkFromUrl: \"https://www.googleapis.com/service_accounts/v1/jwk/securetoken@system.gserviceaccount.com\"\n      tokenLocation:\n        type: Header\n        name: Auth-Token\n```\n\n----------------------------------------\n\nTITLE: Building Local Supergraph\nDESCRIPTION: Command to create a local build of the supergraph.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/project-configuration/tutorials/work-with-multiple-repositories.mdx#2025-04-17_snippet_24\n\nLANGUAGE: ddn\nCODE:\n```\nddn supergraph build local\n```\n\n----------------------------------------\n\nTITLE: Starting DDN Services with Docker\nDESCRIPTION: Launches all necessary services for the DDN environment using Docker containers.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/data-modeling/partials/lambda-connectors/typescript/_command-create-tutorial.mdx#2025-04-17_snippet_5\n\nLANGUAGE: ddn\nCODE:\n```\nddn run docker-start\n```\n\n----------------------------------------\n\nTITLE: Introspecting Data Sources using DDN CLI\nDESCRIPTION: Command to introspect a data source using the DDN connector to discover its structure and potential relationships.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/data-modeling/relationship.mdx#2025-04-17_snippet_0\n\nLANGUAGE: ddn\nCODE:\n```\nddn connector introspect <connector_name>\n```\n\n----------------------------------------\n\nTITLE: Provisioning Subgraphs in Hasura DDN\nDESCRIPTION: Creates two subgraphs (customers and billing) on the cloud project.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/project-configuration/tutorials/work-with-multiple-repositories.mdx#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nddn project subgraph create customers && ddn project subgraph create billing\n```\n\n----------------------------------------\n\nTITLE: Inherited Options for ddn auth print-access-token in SASS\nDESCRIPTION: These options are inherited from parent operations and can be used with the ddn auth print-access-token command. They include settings for log level, prompting behavior, output format, and request timeout.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_auth_print-access-token.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sass\nCODE:\n```\n--log-level string   Log level. Can be DEBUG, WARN, INFO, ERROR, or FATAL. (default \"INFO\")\n--no-prompt          Do not prompt for required but missing flags\n--out string         Output format. Can be table, json or yaml. (default \"table\")\n--timeout int        Request timeout in seconds [env: HASURA_DDN_TIMEOUT] (default 100)\n```\n\n----------------------------------------\n\nTITLE: Configuring Webhook Authentication in Hasura AuthConfig\nDESCRIPTION: An example of AuthConfig metadata for Webhook mode, which delegates authentication to a custom webhook. This configuration defines the webhook URL, HTTP method, and how to handle headers and request body when calling the authentication service.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/metadata-reference/auth-config.mdx#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nkind: AuthConfig\nversion: v3\ndefinition:\n  mode:\n    webhook:\n      url:\n        value: http://auth_hook:3050/validate-request\n      method: POST\n      customHeadersConfig:\n        body:\n          headers:\n            forward:\n              - authorization\n              - content-type\n        headers:\n          additional:\n            user-agent: \"Hasura DDN\"\n```\n\n----------------------------------------\n\nTITLE: Querying Related Data in GraphQL\nDESCRIPTION: This GraphQL query demonstrates how to fetch an order's tracking information and related shipping details using a relationship between commands.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/metadata-reference/relationships.mdx#2025-04-17_snippet_5\n\nLANGUAGE: graphql\nCODE:\n```\nquery TrackOrder {\n  trackOrder(orderId: \"ORD12345\") {\n    trackingNumber\n    shippingDetails {\n      carrier\n      estimatedDeliveryDate\n      currentStatus\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Native Query for ClickHouse in JSON\nDESCRIPTION: This JSON configuration specifies the SQL file path and return type for a ClickHouse native query. It defines the query name, exposure type, file path, and return type structure including column names and types.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/data-modeling/partials/classic-connectors/clickHouse/_model-create-native-query-how-to.mdx#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"tables\": {},\n  \"queries\": {\n    \"Name\": {\n      \"exposed_as\": \"collection\",\n      \"file\": \"path/to/sql_file_name.sql\",\n      \"return_type\": {\n        \"kind\": \"definition\",\n        \"columns\": {\n          \"column_name\": \"column_type\"\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: DDN Connector Init Command Options\nDESCRIPTION: This snippet lists the available options for the 'ddn connector init' command, including flags for setting environment variables, specifying directories, enabling interactive mode, and more.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_connector_init.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sass\nCODE:\n```\n    --add-env stringArray            Environment variable to set in the Connector. Can be repeated to provide multiple env vars\n    --add-to-compose-file string     The compose file to include the generated connector compose file\n    --ci                             Disables the use of context\n    --configure-port string          Initialize the connector with an already configured port\n-c, --context string                 Name of the context to use. (default <current_context>)\n    --dir string                     Directory to initialize the Connector\n-h, --help                           help for init\n    --hub-connector string           Name and version of Connector in Hasura Connector Hub. ref: https://hasura.io/connectors\n-i, --interactive                    Interactive mode\n    --no-link                        Do not create a ConnectorLink\n    --subgraph string                Subgraph to initialize the Connector in\n    --target-cloud-env-file string   Path to the cloud environment file\n    --target-local-env-file string   Path to the local environment file\n```\n\n----------------------------------------\n\nTITLE: Initialize PostgreSQL Connector\nDESCRIPTION: Sets up a PostgreSQL connector for the customers database with interactive prompt\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/project-configuration/tutorials/work-with-multiple-subgraphs.mdx#2025-04-17_snippet_1\n\nLANGUAGE: ddn\nCODE:\n```\nddn connector init customers_pg -i\n```\n\n----------------------------------------\n\nTITLE: Adding All Commands in DDN\nDESCRIPTION: Command to add all discovered operations from the data source to the metadata using wildcard.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/data-modeling/command.mdx#2025-04-17_snippet_3\n\nLANGUAGE: ddn\nCODE:\n```\nddn command add <connector_link_name> \"*\"\n```\n\n----------------------------------------\n\nTITLE: Configuring TypePermissions for Orders Type\nDESCRIPTION: This YAML snippet demonstrates how to set up TypePermissions for the Orders type in Hasura. It defines different field access permissions for admin and user roles.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/auth/jwt/jwt-mode.mdx#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n---\nkind: TypePermissions\nversion: v1\ndefinition:\n  typeName: Orders\n  permissions:\n    - role: admin\n      output:\n        allowedFields:\n          - createdAt\n          - deliveryDate\n          - id\n          - isReviewed\n          - productId\n          - status\n          - updatedAt\n          - userId\n    - role: user\n      output:\n        allowedFields:\n          - createdAt\n          - id\n          - isReviewed\n          - productId\n          - status\n          - updatedAt\n          - userId\n```\n\n----------------------------------------\n\nTITLE: Adding Environment Variables to a Lambda Connector with DDN CLI\nDESCRIPTION: This command adds a custom environment variable to a specific connector. The example shows adding a variable named 'FOO' with value 'bar' to a connector. This updates the .env file, connector.yaml, and compose.yaml files automatically.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/business-logic/add-env-vars-to-a-lambda.mdx#2025-04-17_snippet_0\n\nLANGUAGE: ddn\nCODE:\n```\nddn connector env add <connector_name> --env FOO=bar\n```\n\n----------------------------------------\n\nTITLE: DDN CLI Authentication\nDESCRIPTION: Commands for authenticating DDN CLI using either a service account token or personal access token.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/private-ddn/ddn-workspace.mdx#2025-04-17_snippet_1\n\nLANGUAGE: ddn\nCODE:\n```\nddn auth login --access-token <service-account-token>\n```\n\nLANGUAGE: ddn\nCODE:\n```\nddn auth login --pat <personal-account-token>\n```\n\n----------------------------------------\n\nTITLE: Type Permission Role Configuration Example\nDESCRIPTION: Example showing type permission configuration for a user role with both input and output permissions.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/metadata-reference/permissions.mdx#2025-04-17_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nrole: user\noutput:\n  allowedFields:\n    - article_id\n    - author_id\ninput:\n  fieldPresets:\n    - field: author_id\n      value:\n        sessionVariable: x-hasura-user-id\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Command to MongoDB Connector\nDESCRIPTION: Adds the previously defined insertUser command to the MongoDB connector configuration.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/data-modeling/partials/classic-connectors/mongoDB/_command-create-tutorial.mdx#2025-04-17_snippet_4\n\nLANGUAGE: ddn\nCODE:\n```\nddn command add my_mongo insertUser\n```\n\n----------------------------------------\n\nTITLE: Introspecting a ClickHouse Connector with DDN CLI\nDESCRIPTION: Command to introspect the ClickHouse connector to discover its schema and configuration. This step ensures the connector properly recognizes the native query definition.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/data-modeling/partials/classic-connectors/clickHouse/_model-create-native-query-tutorial.mdx#2025-04-17_snippet_3\n\nLANGUAGE: ddn\nCODE:\n```\nddn connector introspect <connector_name>\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic PromptQL Configuration Structure in JSON\nDESCRIPTION: The basic structure of a PromptQL configuration object with version, connection URI, schemas, tables, and functions. This serves as the foundation for configuring a data connector to interface with database entities.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/connectors/_jdbcConfig.mdx#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"version\": \"v2\",\n  \"connection_uri\": {\n    \"value\": \"...\",\n    \"variable\": \"...\"\n  },\n  \"schemas\": [\"public\"],\n  \"tables\": [...],\n  \"functions\": [],\n}\n```\n\n----------------------------------------\n\nTITLE: Database Introspection Command\nDESCRIPTION: Introspects the PostgreSQL database schema for the customers connector\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/project-configuration/tutorials/work-with-multiple-subgraphs.mdx#2025-04-17_snippet_2\n\nLANGUAGE: ddn\nCODE:\n```\nddn connector introspect customers_pg\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Claims in JWT Payload\nDESCRIPTION: This JSON snippet shows an example of a JWT payload with custom claims for Hasura. It includes the required x-hasura-default-role and x-hasura-allowed-roles, as well as a custom x-hasura-user-id claim.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/auth/jwt/jwt-mode.mdx#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"iat\": 1735916718,\n  \"exp\": 1796916677,\n  \"claims.jwt.hasura.io\": {\n    \"x-hasura-default-role\": \"admin\",\n    \"x-hasura-allowed-roles\": [\"user\", \"admin\"],\n    \"x-hasura-user-id\": 1234\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Structuring ArgumentDefinition in Markdown\nDESCRIPTION: Defines the ArgumentDefinition type, which represents the definition of an argument for a field, command, or model. It includes properties for name, type, and optional description.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/metadata-reference/commands.mdx#2025-04-17_snippet_10\n\nLANGUAGE: markdown\nCODE:\n```\n#### ArgumentDefinition {#command-argumentdefinition}\n\nThe definition of an argument for a field, command, or model.\n\n| Key | Value | Required | Description |\n|-----|-----|-----|-----|\n| `name` | [ArgumentName](#command-argumentname) | true | The name of an argument. |\n| `type` | [TypeReference](#command-typereference) | true |  |\n| `description` | string / null | false |  |\n```\n\n----------------------------------------\n\nTITLE: DDN Relationship Add Command Syntax in Bash\nDESCRIPTION: The basic syntax for the 'ddn relationship add' command, which requires a connector link name and collection name as parameters, with optional flags.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_relationship_add.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nddn relationship add <connector-link-name> <collection-name> [flags]\n```\n\n----------------------------------------\n\nTITLE: Rendering PqlChat Component in JSX\nDESCRIPTION: Demonstrates the usage of the PqlChat, User, and Pql components to create an interactive chat interface. This snippet shows a sample conversation about the capabilities of the system.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/how-to-build-with-promptql/_boilerplateDx.mdx#2025-04-17_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\n<PqlChat>\n  <User>Hi, what are some questions you can answer?</User>\n  <Pql>\n    I can help you analyze data from what appears to be an e-commerce system. Here are some types of questions I can answer:\n\n    <ol>\n        <li>Product-related:</li>\n        <ul>\n            <li>Find popular products based on orders or reviews</li>\n            <li>Analyze product pricing across categories</li>\n            <li>Look up product details and descriptions</li>\n            <li>Find products from specific manufacturers or countries</li>\n        </ul>\n        <li>Order and Purchase Analysis:</li>\n        <ul>\n            <li>Track order statuses</li>\n            <li>Analyze delivery times</li>\n            <li>Look at purchase patterns</li>\n            <li>Find abandoned carts</li>\n        </ul>\n        <li>Customer Behavior:</li>\n        <ul>\n            <li>Analyze customer reviews and ratings</li>\n            <li>Look at shopping patterns</li>\n            <li>Track cart abandonment</li>\n            <li>Study product category preferences</li>\n        </ul>\n        <li>Business Metrics:</li>\n        <ul>\n            <li>Calculate sales metrics</li>\n            <li>Analyze review scores</li>\n            <li>Track coupon usage</li>\n            <li>Monitor cart completion rates</li>\n        </ul>\n    </ol>\n\n    Would you like me to explore any of these areas in particular?\n\n  </Pql>\n</PqlChat>\n```\n\n----------------------------------------\n\nTITLE: Starting Local DDN Services\nDESCRIPTION: Launches the local Hasura DDN Engine and connector using Docker. This command starts all necessary services for running the DDN project locally.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/how-to-build-with-promptql/_boilerplateDx.mdx#2025-04-17_snippet_5\n\nLANGUAGE: ddn\nCODE:\n```\nddn run docker-start\n```\n\n----------------------------------------\n\nTITLE: Authenticating with GitHub Container Registry in Docker\nDESCRIPTION: Command to authenticate Docker with GitHub Container Registry using a Personal Access Token (PAT) with package scope, resolving authorization issues for connector images.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/data-sources/troubleshooting.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\necho \"<GH_PAT>\" | docker login ghcr.io -u <YOUR_GITHUB_USERNAME> --password-stdin\n```\n\n----------------------------------------\n\nTITLE: Setting Subgraph Context in DDN CLI\nDESCRIPTION: This command sets the subgraph as the default for future CLI commands.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/project-configuration/subgraphs/working-with-multiple-repositories.mdx#2025-04-17_snippet_7\n\nLANGUAGE: ddn\nCODE:\n```\nddn context set subgraph ./<subgraph-name>/subgraph.yaml\n```\n\n----------------------------------------\n\nTITLE: Example Usage of ddn context get-current-context in Bash\nDESCRIPTION: Example demonstrating how to get the name and contents of the current context using the DDN CLI.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_context_get-current-context.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Get name and contents of current context\n ddn context get-current-context\n```\n\n----------------------------------------\n\nTITLE: Examples of Using ddn auth print-access-token in Bash\nDESCRIPTION: These examples demonstrate how to use the ddn auth print-access-token command. The first example prints the access token as a string to STDOUT, while the second example prints the access token as JSON to STDOUT.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_auth_print-access-token.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Print the access token as a string to STDOUT\n ddn auth print-access-token\n\n# Print access token as a JSON to STDOUT\n ddn auth print-access-token --out json\n```\n\n----------------------------------------\n\nTITLE: DNS Resolution Error Log in Hasura DDN\nDESCRIPTION: Debug log entry indicating a DNS resolution failure for local.hasura.dev, often caused by DHCP server Domain Search option settings.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/data-sources/troubleshooting.mdx#2025-04-17_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\ndial tcp: lookup local.hasura.dev: no such host\n```\n\n----------------------------------------\n\nTITLE: DDN CLI Command Examples in Bash\nDESCRIPTION: These examples show various ways to use the 'ddn command add' command, including adding all commands, specific commands, and using glob patterns to filter commands. They demonstrate usage with different subgraphs and connector links.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_command_add.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Add all Commands for DataConnectorLink \"myfns\" in the subgraph set in the context\n ddn command add myfns \"*\"\n\n# Add a new Command \"Login\" from the procedure \"Login\" in the DataConnectorLink \"myfns\" in \"app\" Subgraph\n ddn command add myfns Login --subgraph ./app/subgraph.yaml\n\n# Add all the Commands from the procedures/functions in the DataConnectorLink \"myfns\" in \"app\" Subgraph\n ddn command add myfns \"*\" --subgraph ./app/subgraph.yaml\n\n# Add Commands filtered by glob pattern from the procedures/functions in the DataConnectorLink \"myfns\" in \"app\" Subgraph\n ddn command add myfns \"user*\" --subgraph ./app/subgraph.yaml\n```\n\n----------------------------------------\n\nTITLE: Command Options for ddn auth generate-promptql-secret-key in SASS\nDESCRIPTION: These are the available options for the 'ddn auth generate-promptql-secret-key' command, including flags for CI mode, context selection, help, and project specification.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_auth_generate-promptql-secret-key.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sass\nCODE:\n```\n    --ci               Disables the use of context\n-c, --context string   Name of the context to use. (default <current_context>)\n-h, --help             help for generate-promptql-secret-key\n-p, --project string   DDN Project name\n```\n\n----------------------------------------\n\nTITLE: Example JSON Response from Users with Posts Query\nDESCRIPTION: Example JSON response showing the data structure returned when querying users with their related posts. This demonstrates the hierarchical relationship between users and posts objects.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/data-modeling/partials/classic-connectors/postgreSQL/_relationship-create-model-to-model.mdx#2025-04-17_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"users\": [\n      {\n        \"id\": 1,\n        \"name\": \"Alice\"\n        \"posts\": [\n          {\n            \"title\": \"My First Post\"\n          },\n          {\n            \"title\": \"Another Post\"\n          }\n        ],\n      },\n      {\n        \"id\": 2,\n        \"name\": \"Bob\"\n        \"posts\": [\n          {\n            \"title\": \"Bob's Post\"\n          }\n        ],\n\n      },\n      {\n        \"id\": 3,\n        \"name\": \"Charlie\"\n        \"posts\": [\n          {\n            \"title\": \"Hello World\"\n          }\n        ],\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Name Transformation Function in Go\nDESCRIPTION: A Go function that converts a name string to uppercase. It defines input arguments and output result types, handles empty input validation, and uses the strings package for the transformation.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/data-modeling/partials/lambda-connectors/go/_command-create-tutorial.mdx#2025-04-17_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage functions\n\nimport (\n  \"context\"\n  \"fmt\"\n  \"hasura-ndc.dev/ndc-go/types\"\n  \"strings\"\n)\n\n// NameArguments defines the input arguments for the function\ntype NameArguments struct {\n  Name string `json:\"name\"` // required argument\n}\n\n// NameResult defines the output result for the function\ntype NameResult string\n\n// FunctionShoutName converts a name string to uppercase\nfunc FunctionShoutName(ctx context.Context, state *types.State, arguments *NameArguments) (*NameResult, error) {\n  if arguments.Name == \"\" {\n    return nil, fmt.Errorf(\"name cannot be empty\")\n  }\n\n  upperCaseName := NameResult(strings.ToUpper(arguments.Name))\n  return &upperCaseName, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a Native Query Model with DDN CLI\nDESCRIPTION: Command to update the data model with the newly created native query. This makes the query available through the PromptQL API for client applications.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/data-modeling/partials/classic-connectors/clickHouse/_model-create-native-query-tutorial.mdx#2025-04-17_snippet_4\n\nLANGUAGE: ddn\nCODE:\n```\nddn model add <connector_name> UserByName\n```\n\n----------------------------------------\n\nTITLE: Creating Directory Structure for Native Queries in PromptQL\nDESCRIPTION: Creates a directory structure to store native query files for a PostgreSQL connector. This establishes the proper file organization for custom SQL operations.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/data-modeling/partials/classic-connectors/postgreSQL/_model-create-native-query-tutorial.mdx#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nmkdir -p app/connector/my_pg/native_operations/queries/\n```\n\n----------------------------------------\n\nTITLE: Updating Context Configuration in YAML\nDESCRIPTION: Shows how to modify the context.yaml file to remove the subgraph configuration path from the context definition.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/project-configuration/tutorials/remove-subgraph.mdx#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nkind: Context\nversion: v3\ndefinition:\n  current: default\n  contexts:\n    default:\n      supergraph: ../supergraph.yaml\n      subgraph: ../<subgraph-name>/subgraph.yaml\n      ...\n```\n\n----------------------------------------\n\nTITLE: Amazon Athena Environment Configuration\nDESCRIPTION: Configuration settings required for connecting Hasura to an Amazon Athena database, including JDBC URL format and schema specifications. The connection requires proper JDBC URL formatting and comma-separated schema names without whitespace.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/how-to-build-with-promptql/with-amazon-athena.mdx#2025-04-17_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\nJDBC_URL=jdbc:athena://<host>:<port>/<database>?user=<username>&password=<password>\nJDBC_SCHEMAS=public,app\n```\n\n----------------------------------------\n\nTITLE: Inherited Options for DDN Command List in SASS\nDESCRIPTION: This snippet shows the options inherited from parent operations for the 'ddn command list' command. It includes flags for setting log level, disabling prompts, specifying output format, and setting request timeout.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_command_list.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sass\nCODE:\n```\n--log-level string   Log level. Can be DEBUG, WARN, INFO, ERROR, or FATAL. (default \"INFO\")\n--no-prompt          Do not prompt for required but missing flags\n--out string         Output format. Can be table, json or yaml. (default \"table\")\n--timeout int        Request timeout in seconds [env: HASURA_DDN_TIMEOUT] (default 100)\n```\n\n----------------------------------------\n\nTITLE: Setting Subgraph Configuration in Hasura DDN Context\nDESCRIPTION: Defines which subgraphs to include in the 'staging' context.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/project-configuration/tutorials/manage-multiple-environments.mdx#2025-04-17_snippet_9\n\nLANGUAGE: ddn\nCODE:\n```\nddn context set subgraph \"app/subgraph.yaml\"\n```\n\n----------------------------------------\n\nTITLE: Installing DDN CLI in Linux Environment\nDESCRIPTION: Command to download and install the DDN CLI using a bash script. This is typically the first step in setting up the CLI in your CI/CD environment.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/deployment/hasura-ddn/ci-cd.mdx#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncurl -L https://graphql-engine-cdn.hasura.io/ddn/cli/v4/get.sh | bash\n```\n\n----------------------------------------\n\nTITLE: Introspecting PromptQL Connector\nDESCRIPTION: Inspects the connector configuration and structure\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/data-modeling/partials/lambda-connectors/typescript/_command-create-native-operation-how-to.mdx#2025-04-17_snippet_2\n\nLANGUAGE: ddn\nCODE:\n```\nddn connector introspect my_ts\n```\n\n----------------------------------------\n\nTITLE: Adding a Subgraph to Supergraph Config in Hasura DDN\nDESCRIPTION: This command adds a newly created subgraph to the supergraph's configuration file. It specifies the subgraph's YAML file and the target supergraph YAML file.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/project-configuration/subgraphs/create-a-subgraph.mdx#2025-04-17_snippet_1\n\nLANGUAGE: ddn\nCODE:\n```\nddn subgraph add <subgraph-name> --subgraph ./<subgraph-name>/subgraph.yaml --target-supergraph ./supergraph.yaml\n```\n\n----------------------------------------\n\nTITLE: Defining ModelSource in YAML for GraphQL API\nDESCRIPTION: Example YAML configuration for ModelSource, which describes how a model maps to a particular data connector. It specifies the data connector name and the collection backing the model.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/metadata-reference/models.mdx#2025-04-17_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\ndataConnectorName: data_connector\ncollection: articles\n```\n\n----------------------------------------\n\nTITLE: Defining Cross-Subgraph Relationship\nDESCRIPTION: YAML configuration for defining a relationship between Users and Orders across subgraphs.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/project-configuration/tutorials/work-with-multiple-repositories.mdx#2025-04-17_snippet_32\n\nLANGUAGE: yaml\nCODE:\n```\n---\nkind: Relationship\nversion: v1\ndefinition:\n  name: orders\n  sourceType: Users\n  target:\n    model:\n      subgraph: billing\n      name: Orders\n      relationshipType: Array\n  mapping:\n    - source:\n        fieldPath:\n          - fieldName: id\n      target:\n        modelField:\n          - fieldName: userId\n```\n\n----------------------------------------\n\nTITLE: Available Options for ddn project init Command\nDESCRIPTION: List of specific flags and options available for the 'ddn project init' command, including context settings, data plane configuration, environment file handling, and project-specific options.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_project_init.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sass\nCODE:\n```\n    --ci                     Disables the use of context\n-c, --context string         Name of the context to use. (default <current_context>)\n    --data-plane-id uuid     The DDN instance where the Project should be hosted\n    --env-file-name string   Env file to be created and added to context as cloudEnvFile (default \".env.cloud\")\n    --from-env-file string   Env file to initialize the cloudEnvFile from\n-h, --help                   help for init\n    --plan string            DDN Project plan\n    --supergraph string      Path to Supergraph config file\n    --with-project string    Use an existing project instead of creating a new one\n    --with-promptql          Initialize with PromptQL support (alpha)\n```\n\n----------------------------------------\n\nTITLE: Setting Supergraph Configuration in Hasura DDN Context\nDESCRIPTION: Sets the supergraph configuration file for the 'staging' context.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/project-configuration/tutorials/manage-multiple-environments.mdx#2025-04-17_snippet_8\n\nLANGUAGE: ddn\nCODE:\n```\nddn context set supergraph \"supergraph.yaml\"\n```\n\n----------------------------------------\n\nTITLE: Building Supergraph with Specific Subgraph Versions\nDESCRIPTION: Commands to build supergraph using specific subgraph builds and versions.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/deployment/hasura-ddn/incremental-builds.mdx#2025-04-17_snippet_5\n\nLANGUAGE: ddn\nCODE:\n```\nddn supergraph build create --subgraph-version <subgraph-name>:<subgraph-build-version> --base-supergraph-on-applied\n```\n\nLANGUAGE: ddn\nCODE:\n```\nddn supergraph build create --subgraph-version <subgraph-name>:<subgraph-build-version> --subgraph-version <subgraph-name>:<subgraph-build-version> --base-supergraph-version <supergraph-build-version>\n```\n\n----------------------------------------\n\nTITLE: Inherited Options for 'ddn console' in SASS\nDESCRIPTION: This snippet shows the options inherited from parent operations for the 'ddn console' command. These include options for log level, prompting, output format, and request timeout.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_console.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sass\nCODE:\n```\n--log-level string   Log level. Can be DEBUG, WARN, INFO, ERROR, or FATAL. (default \"INFO\")\n--no-prompt          Do not prompt for required but missing flags\n--out string         Output format. Can be table, json or yaml. (default \"table\")\n--timeout int        Request timeout in seconds [env: HASURA_DDN_TIMEOUT] (default 100)\n```\n\n----------------------------------------\n\nTITLE: Basic DDN Model Remove Command Syntax\nDESCRIPTION: Shows the basic command syntax for removing models from local metadata using the DDN CLI.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_model_remove.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nddn model remove <model-name> [flags]\n```\n\n----------------------------------------\n\nTITLE: Configuring JWT Authentication in Hasura AuthConfig\nDESCRIPTION: An example of AuthConfig metadata for JWT mode, which uses JSON Web Tokens for authentication. This configuration defines where to look for claims within the token, how to obtain the token from requests, and specifies a secret key for verification.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/metadata-reference/auth-config.mdx#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nkind: AuthConfig\nversion: v3\ndefinition:\n  mode:\n    jwt:\n      claimsConfig:\n        namespace:\n          claimsFormat: Json\n          location: /claims.jwt.hasura.io\n      tokenLocation:\n        type: BearerAuthorization\n      key:\n        fixed:\n          algorithm: HS256\n          key:\n            valueFromEnv: AUTH_SECRET\n```\n\n----------------------------------------\n\nTITLE: Example Usage of DDN Command List in Bash\nDESCRIPTION: This example demonstrates how to use the 'ddn command list' command to list details about the functions/procedures of a DataConnectorLink named 'mydb' and their corresponding Commands.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_command_list.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nddn command list mydb\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenAI LLM Provider in JSON\nDESCRIPTION: Illustrates the JSON configuration for using OpenAI as the LLM provider, including the API key.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/promptql-apis/natural-language-api.mdx#2025-04-17_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"provider\": \"openai\",\n  \"api_key\": \"<your openai api key>\"\n}\n```\n\n----------------------------------------\n\nTITLE: Options Inherited from Parent Commands\nDESCRIPTION: Global options inherited from parent commands that can be used with the 'ddn project init' command, including logging configuration, output format selection, and timeout settings.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_project_init.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sass\nCODE:\n```\n--log-level string   Log level. Can be DEBUG, WARN, INFO, ERROR, or FATAL. (default \"INFO\")\n--no-prompt          Do not prompt for required but missing flags\n--out string         Output format. Can be table, json or yaml. (default \"table\")\n--timeout int        Request timeout in seconds [env: HASURA_DDN_TIMEOUT] (default 100)\n```\n\n----------------------------------------\n\nTITLE: Example POST Request Body to Auth Webhook\nDESCRIPTION: JSON example of the request body sent to the authentication webhook when using POST method. Contains headers from the original client request that were configured to be forwarded.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/auth/webhook/webhook-mode.mdx#2025-04-17_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"headers\": {\n    \"Authorization\": \"Bearer some-token\",\n    \"Content-Type\": \"application/json\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Structuring DataConnectorCommand in Markdown\nDESCRIPTION: Defines the DataConnectorCommand type, which represents the function or procedure in a data connector that backs a command. It must have exactly one of either a function or procedure field.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/metadata-reference/commands.mdx#2025-04-17_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n#### DataConnectorCommand {#command-dataconnectorcommand}\n\nThe function/procedure in the data connector that backs this command.\n\n\n**Must have exactly one of the following fields:**\n\n| Key | Value | Required | Description |\n|-----|-----|-----|-----|\n| `function` | [FunctionName](#command-functionname) | false | The name of a function backing the command. |\n| `procedure` | [ProcedureName](#command-procedurename) | false | The name of a procedure backing the command. |\n```\n\n----------------------------------------\n\nTITLE: Adding a Single Model from Data Source in PromptQL\nDESCRIPTION: Command to add a specific collection or entity as a model to your PromptQL metadata. This makes that particular data entity accessible for PromptQL queries.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/data-modeling/model.mdx#2025-04-17_snippet_2\n\nLANGUAGE: ddn\nCODE:\n```\nddn model add <connector_link_name> <collection_name>\n```\n\n----------------------------------------\n\nTITLE: Native Query Configuration for Snowflake\nDESCRIPTION: Configuration JSON that defines the native query structure, including SQL parts, column definitions, and type mappings for the ECOMM_USERS query.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/recipes/tutorials/add-jsonb-support-snowflake.mdx#2025-04-17_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\n  \"nativeQueries\": {\n  \"ECOMM_USERS\": {\n    \"sql\": {\n      \"parts\": [\n        {\n          \"type\": \"text\",\n          \"value\": \"select user_id, email, TO_JSON(user_details) as user_details, created_at from PUBLIC.ECOMM.USERS\"\n        }\n      ]\n    },\n    \"columns\": {\n      \"USER_DETAILS\": {\n        \"type\": \"named\",\n        \"name\": \"STRING\"\n      },\n      \"USER_ID\": {\n        \"type\": \"named\",\n        \"name\": \"BIGINTEGER\"\n      },\n      \"CREATED_AT\": {\n        \"type\": \"named\",\n        \"name\": \"TIMESTAMP\"\n      },\n      \"EMAIL\": {\n        \"type\": \"named\",\n        \"name\": \"STRING\"\n      }\n    },\n    \"arguments\": {},\n    \"description\": null,\n    \"isProcedure\": false\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying the Custom Function with GraphQL\nDESCRIPTION: Example GraphQL query that calls the 'shoutName' function with the name 'Alice' as input.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/data-modeling/partials/lambda-connectors/typescript/_command-create-tutorial.mdx#2025-04-17_snippet_7\n\nLANGUAGE: graphql\nCODE:\n```\nquery ShoutTheName {\n  shoutName(name: \"Alice\")\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Model for ClickHouse Native Query using DDN\nDESCRIPTION: This DDN command adds the model for the native query to the project. It requires specifying the connector link name and the model name as arguments.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/data-modeling/partials/classic-connectors/clickHouse/_model-create-native-query-how-to.mdx#2025-04-17_snippet_3\n\nLANGUAGE: ddn\nCODE:\n```\nddn model add <connector_link_name> <model_name>\n```\n\n----------------------------------------\n\nTITLE: Data Source Introspection and Metadata Generation\nDESCRIPTION: Series of commands to introspect data source and generate metadata for models, commands, and relationships.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/private-ddn/create-a-project-on-a-data-plane.mdx#2025-04-17_snippet_3\n\nLANGUAGE: ddn\nCODE:\n```\nddn connector introspect <connector_name>\n```\n\nLANGUAGE: ddn\nCODE:\n```\nddn model add <connector_name> '*'\n```\n\nLANGUAGE: ddn\nCODE:\n```\nddn command add <connector_name> '*'\n```\n\nLANGUAGE: ddn\nCODE:\n```\nddn relationship add <connector_name> '*'\n```\n\n----------------------------------------\n\nTITLE: Rebuilding Supergraph in Hasura DDN\nDESCRIPTION: CLI command to rebuild the supergraph after removing unused models, specifying whether to build locally or create a new supergraph.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/data-sources/troubleshooting.mdx#2025-04-17_snippet_8\n\nLANGUAGE: plaintext\nCODE:\n```\nddn supergraph build <local|create>\n```\n\n----------------------------------------\n\nTITLE: Creating a Cloud Subgraph with Hasura DDN CLI\nDESCRIPTION: This command creates a new subgraph on the current context's cloud project in Hasura DDN. It's used for adding subgraphs to existing cloud projects.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/project-configuration/subgraphs/create-a-subgraph.mdx#2025-04-17_snippet_3\n\nLANGUAGE: ddn\nCODE:\n```\nddn project subgraph create <subgraph-name>\n```\n\n----------------------------------------\n\nTITLE: Defining Cross-Repository Relationship in YAML\nDESCRIPTION: Shows how to create a relationship between models in different repositories using YAML configuration. This example links a 'User' type to a 'Product' type in the 'products' subgraph.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/project-configuration/subgraphs/working-with-multiple-subgraphs.mdx#2025-04-17_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nkind: Relationship\nversion: v1\ndefinition:\n  name: favorite_product\n  sourceType: User\n  target:\n    model:\n      name: Product\n      subgraph: products\n      relationshipType: Object\n  mapping:\n    - source:\n        fieldPath:\n          - fieldName: user_favorite_product_id\n      target:\n        modelField:\n          - fieldName: id\n```\n\n----------------------------------------\n\nTITLE: Available Options for 'ddn model show' Command in SASS\nDESCRIPTION: Lists the specific options available for the 'ddn model show' command, including flags for CI mode, context, help, pattern matching, and subgraph configuration.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_model_show.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sass\nCODE:\n```\n    --ci                Disables the use of context\n-c, --context string    Name of the context to use. (default <current_context>)\n-h, --help              help for show\n    --pattern string    Pattern to detect targets. Can be 'glob' or 'literal'. (default \"glob\")\n    --subgraph string   Path to Subgraph config file\n```\n\n----------------------------------------\n\nTITLE: DDN Subgraph Init Command Options\nDESCRIPTION: Available flags and options for the 'ddn subgraph init' command, including directory specification, GraphQL naming preferences, and supergraph configuration targets.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_subgraph_init.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sass\nCODE:\n```\n    --dir string                          Directory to initialize the Subgraph (Defaults to subgraph name)\n    --graphql-root-field-prefix string    Prefix to use while generating GraphQL root fields\n    --graphql-type-name-prefix string     Prefix to use while generating GraphQL type names\n-h, --help                                help for init\n    --subgraph-naming-convention string   Naming convention for the subgraph. Can be 'graphql', 'snake_case' or 'none'.\n    --target-supergraph stringArray       Supergraph config file to add the Subgraph. Can be repeated to provide multiple Supergraph config files\n```\n\n----------------------------------------\n\nTITLE: Creating a Subgraph Placeholder in Hasura DDN\nDESCRIPTION: This command creates a new subgraph placeholder in the main project. It requires specifying the desired subgraph name.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/project-configuration/subgraphs/working-with-multiple-repositories.mdx#2025-04-17_snippet_17\n\nLANGUAGE: ddn\nCODE:\n```\nddn project subgraph create <subgraph-name>\n```\n\n----------------------------------------\n\nTITLE: Generate JWT Token with Custom Claims for Testing\nDESCRIPTION: Uses jwt-cli to encode and generate a new JWT token with custom claims. The example sets expiration and issue times, default role as 'admin', and allowed roles. The token is signed with the previously generated secret key.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/auth/jwt/tutorials/setup-test-jwt.mdx#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\njwt encode --secret=\"<secret-key>\" '{\"exp\": 1739905122,\"iat\": 1708369122,\"claims.jwt.hasura.io\":{\"x-hasura-default-role\": \"admin\",\"x-hasura-allowed-roles\":[\"admin\"]}}'\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Function as Command in Hasura DDN\nDESCRIPTION: This command adds all functions from the custom connector as commands in the Hasura DDN project.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/_quickstart_template.mdx#2025-04-17_snippet_13\n\nLANGUAGE: ddn\nCODE:\n```\nddn command add promptflix \"*\"\n```\n\n----------------------------------------\n\nTITLE: Defining Databricks Connector Configuration Structure in JSON\nDESCRIPTION: The base JSON structure for configuring the Hasura Databricks connector. It includes the connection URI (specified as an environment variable), tables array for schema definitions, and arrays/objects for primary and foreign key relationships.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/connectors/databricks/configuration.mdx#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"connection_uri\": {\n    \"variable\": \"JDBC_URL\"\n  },\n  \"tables\": [],\n  \"primary_keys\": [],\n  \"foreign_keys\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Customers Subgraph YAML\nDESCRIPTION: Adds prefixing to the customers subgraph YAML file to prevent collisions in the supergraph.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/project-configuration/tutorials/work-with-multiple-repositories.mdx#2025-04-17_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nkind: Subgraph\nversion: v2\ndefinition:\n  name: customers\n  generator:\n    rootPath: .\n    namingConvention: snake_case\n    graphqlRootFieldPrefix: customers_\n    graphqlTypeNamePrefix: customers_\n  includePaths:\n    - metadata\n```\n\n----------------------------------------\n\nTITLE: Switching Hasura DDN Context to Default\nDESCRIPTION: Changes the current context back to the default for production deployment.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/project-configuration/tutorials/manage-multiple-environments.mdx#2025-04-17_snippet_13\n\nLANGUAGE: ddn\nCODE:\n```\nddn context set-current-context default\n```\n\n----------------------------------------\n\nTITLE: DDN Plugin Installation Options\nDESCRIPTION: The available flags and options specific to the 'install' command, including help and version specification.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_plugins_install.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sass\nCODE:\n```\n-h, --help             help for install\n    --version string   Version to be installed\n```\n\n----------------------------------------\n\nTITLE: DDN Context Creation - Inherited Options\nDESCRIPTION: Options inherited from parent operations including log level configuration, prompting behavior, output format, and timeout settings.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_context_create-context.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sass\nCODE:\n```\n--log-level string   Log level. Can be DEBUG, WARN, INFO, ERROR, or FATAL. (default \"INFO\")\n--no-prompt          Do not prompt for required but missing flags\n--out string         Output format. Can be table, json or yaml. (default \"table\")\n--timeout int        Request timeout in seconds [env: HASURA_DDN_TIMEOUT] (default 100)\n```\n\n----------------------------------------\n\nTITLE: Creating Supergraph Build\nDESCRIPTION: Command to create a new supergraph build with specific subgraph version.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/project-configuration/tutorials/work-with-multiple-repositories.mdx#2025-04-17_snippet_30\n\nLANGUAGE: ddn\nCODE:\n```\nddn supergraph build create --subgraph-version billing:<build-version> --base-supergraph-version <supergraph-build-id>\n```\n\n----------------------------------------\n\nTITLE: DDN Config Upgrade Inherited Options - SASS\nDESCRIPTION: Options inherited from parent commands including logging, output format, and timeout settings.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_codemod_upgrade-project-config-v2-to-v3.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sass\nCODE:\n```\n--log-level string   Log level. Can be DEBUG, WARN, INFO, ERROR, or FATAL. (default \"INFO\")\n--no-prompt          Do not prompt for required but missing flags\n--out string         Output format. Can be table, json or yaml. (default \"table\")\n--timeout int        Request timeout in seconds [env: HASURA_DDN_TIMEOUT] (default 100)\n```\n\n----------------------------------------\n\nTITLE: Creating New Hasura DDN Context\nDESCRIPTION: Creates a new context named 'staging' for managing different environments.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/project-configuration/tutorials/manage-multiple-environments.mdx#2025-04-17_snippet_7\n\nLANGUAGE: ddn\nCODE:\n```\nddn context create-context staging\n```\n\n----------------------------------------\n\nTITLE: Creating Initial Supergraph Build\nDESCRIPTION: Generates the first supergraph build to serve as a foundation for subgraph development.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/project-configuration/tutorials/work-with-multiple-repositories.mdx#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nddn supergraph build create\n```\n\n----------------------------------------\n\nTITLE: Displaying Connector Resources\nDESCRIPTION: Command to display all available resources in the connector, including the newly added native query.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/data-modeling/partials/classic-connectors/mongoDB/_model-create-native-query-how-to.mdx#2025-04-17_snippet_2\n\nLANGUAGE: ddn\nCODE:\n```\nddn connector show-resources <connector_name>\n```\n\n----------------------------------------\n\nTITLE: Adding a Specific Relationship to Metadata using DDN CLI\nDESCRIPTION: Command to add a detected relationship from a specific collection to your PromptQL metadata.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/data-modeling/relationship.mdx#2025-04-17_snippet_2\n\nLANGUAGE: ddn\nCODE:\n```\nddn relationship add <connector_link_name> <collection_name>\n```\n\n----------------------------------------\n\nTITLE: Building the Supergraph Application with DDN CLI\nDESCRIPTION: Command to build the supergraph application locally after setting up NoAuth mode. This builds the application with the NoAuth configuration.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/auth/noauth-mode.mdx#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nddn supergraph build local\n```\n\n----------------------------------------\n\nTITLE: Viewing Available Relationships using DDN CLI\nDESCRIPTION: Command to display the relationships that were automatically detected during introspection of a data source.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/data-modeling/relationship.mdx#2025-04-17_snippet_1\n\nLANGUAGE: ddn\nCODE:\n```\nddn connector show-resources <connector_name>\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of ddn plugins list Command\nDESCRIPTION: The basic syntax for using the 'ddn plugins list' command to display available plugins for the DDN CLI.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_plugins_list.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nddn plugins list [flags]\n```\n\n----------------------------------------\n\nTITLE: Inherited Options for DDN Plugin Commands\nDESCRIPTION: Options that are inherited from parent operations when using the 'ddn plugins install' command, including logging, output format, and timeout settings.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_plugins_install.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sass\nCODE:\n```\n--log-level string   Log level. Can be DEBUG, WARN, INFO, ERROR, or FATAL. (default \"INFO\")\n--no-prompt          Do not prompt for required but missing flags\n--out string         Output format. Can be table, json or yaml. (default \"table\")\n--timeout int        Request timeout in seconds [env: HASURA_DDN_TIMEOUT] (default 100)\n```\n\n----------------------------------------\n\nTITLE: Formatting Streaming Response Chunks for Natural Language API in JSON\nDESCRIPTION: Demonstrates the format of streaming response chunks in Server-Sent Events (SSE) format, including assistant action chunks and artifact update chunks.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/promptql-apis/natural-language-api.mdx#2025-04-17_snippet_6\n\nLANGUAGE: json\nCODE:\n```\ndata: {\n  \"message\": \"Chunk of response message\",\n  \"plan\": null,\n  \"code\": null,\n  \"code_output\": null,\n  \"code_error\": null,\n  \"type\": \"assistant_action_chunk\",\n  \"index\": 0\n}\n\ndata: {\n  \"type\": \"artifact_update_chunk\",\n  \"artifact\": {\n    \"identifier\": \"artifact_id\",\n    \"title\": \"Artifact Title\",\n    \"artifact_type\": \"text|table\",\n    \"data\": \"artifact_data\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Examples of ddn project init Usage in Bash\nDESCRIPTION: Example commands showing how to initialize a new Hasura DDN project with auto-generated name or configure a local directory to use an existing DDN project with necessary subgraphs.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_project_init.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Initialize a new Hasura DDN project (with an auto-generated name) with subgraphs based on your local directory\n ddn project init\n\n# Configure the local directory to use an existing Hasura DDN project creating subgraphs on the DDN project as necessary\n ddn project init --with-project myproject\n```\n\n----------------------------------------\n\nTITLE: Updating All MongoDB Commands with DDN CLI\nDESCRIPTION: Command to update all MongoDB operations in the connector using a wildcard pattern. This refreshes all operation definitions after making changes to underlying configurations.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/data-modeling/partials/classic-connectors/mongoDB/_command-update-tutorial.mdx#2025-04-17_snippet_4\n\nLANGUAGE: ddn\nCODE:\n```\nddn command update my_mongo \"*\"\n```\n\n----------------------------------------\n\nTITLE: Initializing PromptQL Connector\nDESCRIPTION: Creates a new connector instance selecting hasura/nodejs template\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/data-modeling/partials/lambda-connectors/typescript/_command-create-native-operation-how-to.mdx#2025-04-17_snippet_0\n\nLANGUAGE: ddn\nCODE:\n```\nddn connector init my_ts -i\n```\n\n----------------------------------------\n\nTITLE: Implementing Movie Rental Function in TypeScript\nDESCRIPTION: This TypeScript code defines a function for renting a movie, including interface definition and function implementation.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/_quickstart_template.mdx#2025-04-17_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\ninterface RentMovieResponse {\n  success: boolean;\n  message: string;\n}\n\nexport function rentSingleMovieBySeriesTitle(seriesTitle: string): RentMovieResponse {\n  console.log(`Renting movie series: ${seriesTitle}`);\n  return {\n    success: true,\n    message: `Successfully rented the movie series: ${seriesTitle}`,\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Available Options for ddn subgraph build create Command\nDESCRIPTION: List of all available options and flags for the ddn subgraph build create command, including descriptions of their purpose and default values.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_subgraph_build_create.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sass\nCODE:\n```\n    --ci                             Disables the use of context\n-c, --context string                 Name of the context to use. (default <current_context>)\n-d, --description string             (Optional) description of the build\n-e, --env stringArray                Environment variable, e.g. key=val. Can be repeated to provide multiple env vars\n    --env-file stringArray           Path to .env file. Can be repeated to provide multiple env files\n-h, --help                           help for create\n    --no-build-connectors            Do not recursively build all connectors in the subgraph and use their URLs for subgraph build. (default: false)\n-p, --project string                 DDN Project name\n    --self-hosted-data-plane         Is the data plane self hosted?\n    --subgraph string                Path to Subgraph config file\n    --target-env-file string         Env file to write the connector build URLs to.\n    --update-connector-link-schema   Update DataConnectorLink schema with the NDC schema of the connectors built recursively. (default: false)\n```\n\n----------------------------------------\n\nTITLE: Cloning CSV PromptQL Project Repository\nDESCRIPTION: Initial setup command to clone the CSV PromptQL project repository and navigate to the project directory\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/recipes/tutorials/csv-files.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone git@github.com:hasura/csv-promptql.git\ncd csv-promptql\n```\n\n----------------------------------------\n\nTITLE: Executing DDN CLI Logout Command in Bash\nDESCRIPTION: This snippet demonstrates how to use the 'ddn auth logout' command to log out from the DDN CLI. It includes the basic command syntax and an example of its usage.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_auth_logout.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nddn auth logout [flags]\n```\n\nLANGUAGE: bash\nCODE:\n```\n# Logout from DDN CLI\n ddn auth logout\n```\n\n----------------------------------------\n\nTITLE: Command-Specific Options for ddn plugins list\nDESCRIPTION: Command-specific flags available for the 'ddn plugins list' command, including options to skip index updates and display help information.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_plugins_list.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sass\nCODE:\n```\n    --dont-update-index   Don't update the plugin index local cache, only show the list\n-h, --help                help for list\n```\n\n----------------------------------------\n\nTITLE: Command-specific Options for 'ddn context get-context' in SASS\nDESCRIPTION: This snippet shows the command-specific option available for the 'ddn context get-context' command. The '-h' or '--help' flag can be used to display help information for the command.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_context_get-context.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sass\nCODE:\n```\n-h, --help   help for get-context\n```\n\n----------------------------------------\n\nTITLE: Example BooleanExpressionType Metadata in Hasura YAML\nDESCRIPTION: This example shows the complete structure of a BooleanExpressionType metadata definition for an Album type with comparable fields and relationships, including GraphQL configuration.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/metadata-reference/boolean-expressions.mdx#2025-04-17_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nkind: BooleanExpressionType\nversion: v1\ndefinition:\n  name: Album_bool_exp\n  operand:\n    object:\n      type: Album\n      comparableFields:\n        - fieldName: AlbumId\n          booleanExpressionType: pg_Int_Comparison_exp\n        - fieldName: ArtistId\n          booleanExpressionType: pg_Int_Comparison_exp_with_is_null\n        - fieldName: Address\n          booleanExpressionType: Address_bool_exp\n      comparableRelationships:\n        - relationshipName: artist\n          booleanExpressionType: Artist_bool_exp\n  logicalOperators:\n    enable: true\n  isNull:\n    enable: true\n  graphql:\n    typeName: App_Album_bool_exp\n```\n\n----------------------------------------\n\nTITLE: Initializing DDN Connector\nDESCRIPTION: Command to initialize a new billing PostgreSQL connector in interactive mode.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/project-configuration/tutorials/work-with-multiple-repositories.mdx#2025-04-17_snippet_21\n\nLANGUAGE: ddn\nCODE:\n```\nddn connector init billing_pg -i\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Claims for Hasura JWT\nDESCRIPTION: JavaScript code snippet to add custom claims to a Firebase user token, specifically adding the Hasura namespace with role information.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/auth/jwt/tutorials/integrations/3-firebase.mdx#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Here, you'll need to fetch the user's role from Hasura using an admin-level authenticated request\n// Learn more here: https://hasura.io/docs/3.0/auth/authentication/jwt/special-roles\n// Below, we're hard-coding the value for now\nconst user_role = \"user\"; // the role returned from your request ☝️\nconst customClaims = {\n  \"claims.jwt.hasura.io\": {\n    \"x-hasura-default-role\": user_role,\n    \"x-hasura-allowed-roles\": [\"user\"],\n    \"x-hasura-user-id\": decodedToken.uid,\n  },\n};\n\n// Set custom claims for the user based on their uid\nawait admin.auth().setCustomUserClaims(decodedToken.uid, customClaims);\n```\n\n----------------------------------------\n\nTITLE: DDN Supergraph Build Diff Command Options in SASS\nDESCRIPTION: These are the specific options available for the 'ddn supergraph build diff' command, including flags for CI mode, context specification, and project name.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_supergraph_build_diff.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sass\nCODE:\n```\n    --ci               Disables the use of context\n-c, --context string   Name of the context to use. (default <current_context>)\n-h, --help             help for diff\n-p, --project string   DDN Project name\n```\n\n----------------------------------------\n\nTITLE: Setting OpenAI API Key Environment Variable\nDESCRIPTION: Shell command to add OpenAI API key to .env file\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/recipes/tutorials/add-vector-search-to-postgresql.mdx#2025-04-17_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\necho APP_MYPYTHON_OPENAI_API_KEY='sk-proj...' >> .env\n```\n\n----------------------------------------\n\nTITLE: Updating a Model in PromptQL\nDESCRIPTION: Command to update an existing model after introspecting changes in the underlying data source. This ensures your PromptQL models stay in sync with your data.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/data-modeling/model.mdx#2025-04-17_snippet_4\n\nLANGUAGE: ddn\nCODE:\n```\nddn model update <connector_link_name> <model_name>\n```\n\n----------------------------------------\n\nTITLE: Adding a Relationship Between Users and Posts Models in DDN\nDESCRIPTION: Command to add a relationship from the Users model to the Posts model in DDN. This relationship is automatically detected based on the existing foreign key constraint in the PostgreSQL database.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/data-modeling/partials/classic-connectors/postgreSQL/_relationship-create-model-to-model.mdx#2025-04-17_snippet_1\n\nLANGUAGE: ddn\nCODE:\n```\nddn relationship add my_pg users\n```\n\n----------------------------------------\n\nTITLE: Introspecting ClickHouse with DDN CLI\nDESCRIPTION: This command uses the DDN CLI to introspect the ClickHouse instance named 'my_clickhouse'.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/data-modeling/partials/classic-connectors/clickHouse/_model-create-tutorial.mdx#2025-04-17_snippet_1\n\nLANGUAGE: ddn\nCODE:\n```\nddn connector introspect my_clickhouse\n```\n\n----------------------------------------\n\nTITLE: Running Custom Supergraph Build Script\nDESCRIPTION: Command to execute the custom script for building the supergraph without connectors.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/project-configuration/tutorials/independent-connector-deployment.mdx#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nddn run build-supergraph\n```\n\n----------------------------------------\n\nTITLE: Updating Specific MongoDB Command with DDN CLI\nDESCRIPTION: Command to update a specific MongoDB operation (insertUser) after modifying its configuration. This applies changes to the connector's operation definition.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/data-modeling/partials/classic-connectors/mongoDB/_command-update-tutorial.mdx#2025-04-17_snippet_3\n\nLANGUAGE: ddn\nCODE:\n```\nddn command update my_mongo insertUser\n```\n\n----------------------------------------\n\nTITLE: Re-adding a Relationship using DDN CLI\nDESCRIPTION: Command to delete and re-add a relationship after model updates, which is a way to refresh relationship mappings.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/data-modeling/relationship.mdx#2025-04-17_snippet_7\n\nLANGUAGE: ddn\nCODE:\n```\nddn relationship add <connector_link_name> <collection_name>\n```\n\n----------------------------------------\n\nTITLE: Creating Subgraph Build\nDESCRIPTION: Command to create a build of a subgraph and its associated connectors.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/deployment/hasura-ddn/incremental-builds.mdx#2025-04-17_snippet_4\n\nLANGUAGE: ddn\nCODE:\n```\nddn subgraph build create\n```\n\n----------------------------------------\n\nTITLE: Adding PostgreSQL Table as Model for Customers\nDESCRIPTION: Tracks the 'users' table from PostgreSQL as a model in the DDN metadata for the customers subgraph.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/project-configuration/tutorials/work-with-multiple-repositories.mdx#2025-04-17_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nddn models add customers_pg users\n```\n\n----------------------------------------\n\nTITLE: Upgrading DDN Plugins Command Syntax\nDESCRIPTION: The basic syntax for upgrading a DDN plugin to a newer version using the CLI. This command takes a plugin name as an argument and optional flags.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_plugins_upgrade.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nddn plugins upgrade <plugin-name> [flags]\n```\n\n----------------------------------------\n\nTITLE: Executing Vector Data Mutation\nDESCRIPTION: cURL command to execute the vectorization mutation via GraphQL API\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/recipes/tutorials/add-vector-search-to-postgresql.mdx#2025-04-17_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\ncurl -X POST http://localhost:3280/graphql \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"query\": \"mutation VectorizeReviews { vectorize }\"}'\n```\n\n----------------------------------------\n\nTITLE: Syntax for the 'ddn project get' Command in Hasura DDN CLI\nDESCRIPTION: The basic syntax for using the 'ddn project get' command, which can be used with or without a project name parameter to either list all projects or get details of a specific project.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_project_get.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nddn project get [project-name] [flags]\n```\n\n----------------------------------------\n\nTITLE: Building PromptQL Supergraph\nDESCRIPTION: Command to build the supergraph for the PromptQL project in the local environment.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/recipes/tutorials/github-assistant.mdx#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nddn supergraph build local\n```\n\n----------------------------------------\n\nTITLE: Setting Up Hasura DDN Project\nDESCRIPTION: Commands to navigate to the DDN project directory, build the supergraph, and initialize the project.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/recipes/tutorials/apple-health-assistant.mdx#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncd ddn-project\nddn supergraph build local\nddn project init\n```\n\n----------------------------------------\n\nTITLE: Adding PostgreSQL Table as Hasura DDN Model\nDESCRIPTION: Tracks the 'users' table from the PostgreSQL database as a model in Hasura DDN metadata.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/project-configuration/tutorials/manage-multiple-environments.mdx#2025-04-17_snippet_3\n\nLANGUAGE: ddn\nCODE:\n```\nddn models add my_pg users\n```\n\n----------------------------------------\n\nTITLE: Querying Native Operation with GraphQL in PromptQL\nDESCRIPTION: Example GraphQL query that uses the native operation with parameters. This query calls the orderUsersOfSameAge operation with age=25 and returns user data with their rank within the same age group.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/data-modeling/partials/classic-connectors/postgreSQL/_model-create-native-query-tutorial.mdx#2025-04-17_snippet_8\n\nLANGUAGE: graphql\nCODE:\n```\nquery UsersOfSameAge {\n  orderUsersOfSameAge(args: { age: 25 }) {\n    id\n    name\n    age\n    orderWithinAge\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Listing GCP Zones using gcloud CLI\nDESCRIPTION: This command uses the gcloud CLI to list available zones in a specified GCP region, showing their names, regions, and status. It's helpful for selecting appropriate zones when configuring a Data Plane in Google Cloud Platform.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/private-ddn/creating-a-data-plane/dedicated.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngcloud compute zones list \\\n  --filter=\"region:us-west2\" \\\n  --format=\"table(name,region,status)\"\n```\n\n----------------------------------------\n\nTITLE: Adding Required Python Dependencies\nDESCRIPTION: List of required Python packages for the connector\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/recipes/tutorials/add-vector-search-to-postgresql.mdx#2025-04-17_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\naiohttp==3.10.10\nasyncpg==0.30.0\n```\n\n----------------------------------------\n\nTITLE: Command Options for ddn supergraph build get\nDESCRIPTION: Available flags and options specific to the ddn supergraph build get command, including context selection and project specification.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_supergraph_build_get.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sass\nCODE:\n```\n    --ci               Disables the use of context\n-c, --context string   Name of the context to use. (default <current_context>)\n-h, --help             help for get\n-p, --project string   DDN Project name\n```\n\n----------------------------------------\n\nTITLE: Examples of DDN Subgraph Initialization Usage\nDESCRIPTION: Examples demonstrating how to initialize a Subgraph named 'app', and how to initialize a Subgraph with specific directory and supergraph configuration files.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_subgraph_init.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Initialize a Subgraph \"app\"\n ddn subgraph init app\n\n# Initialize a Subgraph \"app\" in the directory \"./app\" and add it to Supergraph config files \"./supergraph.yaml\" and \"./supergraph.cloud.yaml\"\n ddn subgraph init app --dir ./app --target-supergraph ./supergraph.yaml --target-supergraph ./supergraph.cloud.yaml\n```\n\n----------------------------------------\n\nTITLE: Configuring PostgreSQL Connection String\nDESCRIPTION: PostgreSQL connection string for connecting to the sample database as a read-only user.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/project-configuration/tutorials/work-with-multiple-repositories.mdx#2025-04-17_snippet_20\n\nLANGUAGE: plaintext\nCODE:\n```\npostgresql://read_only_user:readonlyuser@35.236.11.122:5432/v3-docs-sample-app\n```\n\n----------------------------------------\n\nTITLE: Removing a Connector from a Specific Subgraph\nDESCRIPTION: This command removes a Connector named 'my_db' from a specific Subgraph located at './foo/subgraph.yaml' and its associated DataConnectorLink. It shows how to use the --subgraph option to specify a non-default subgraph.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_connector_remove.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nddn connector remove my_db --subgraph ./foo/subgraph.yaml\n```\n\n----------------------------------------\n\nTITLE: Examples of ddn plugins list Command Usage\nDESCRIPTION: Examples showing how to list all plugins with the DDN CLI, including an option to list without updating the local cache.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_plugins_list.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# List all plugins\n ddn plugins list\n\n# List all plugins without updating the plugin index local cache\n ddn plugins list --dont-update-index\n```\n\n----------------------------------------\n\nTITLE: Add Database Model\nDESCRIPTION: Tracks the users table from PostgreSQL as a model in DDN metadata\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/project-configuration/tutorials/work-with-multiple-subgraphs.mdx#2025-04-17_snippet_3\n\nLANGUAGE: ddn\nCODE:\n```\nddn models add customers_pg users\n```\n\n----------------------------------------\n\nTITLE: Removing Command in DDN\nDESCRIPTION: Command to delete a command and its associated metadata from the system.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/data-modeling/command.mdx#2025-04-17_snippet_5\n\nLANGUAGE: ddn\nCODE:\n```\nddn command remove <command_name>\n```\n\n----------------------------------------\n\nTITLE: Updating a Model Definition using DDN CLI\nDESCRIPTION: Command to update a model definition after re-introspection, which is necessary before updating relationships based on that model.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/data-modeling/relationship.mdx#2025-04-17_snippet_6\n\nLANGUAGE: ddn\nCODE:\n```\nddn model update <connector_name> <model_name>\n```\n\n----------------------------------------\n\nTITLE: Introspecting MongoDB Connector\nDESCRIPTION: Command to introspect the MongoDB connector to fetch updated resources after adding a native query.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/data-modeling/partials/classic-connectors/mongoDB/_model-create-native-query-how-to.mdx#2025-04-17_snippet_1\n\nLANGUAGE: ddn\nCODE:\n```\nddn connector introspect <connector_name>\n```\n\n----------------------------------------\n\nTITLE: Adding Function to Command Registry\nDESCRIPTION: Registers the custom function with PromptQL command system\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/data-modeling/partials/lambda-connectors/typescript/_command-create-native-operation-how-to.mdx#2025-04-17_snippet_3\n\nLANGUAGE: ddn\nCODE:\n```\nddn command add my_ts myCustomCode\n```\n\n----------------------------------------\n\nTITLE: Detailed Relationship Configuration with Description\nDESCRIPTION: Extended YAML configuration for a relationship between orders and customers, including a description field that explains the relationship's purpose. This enables fetching customer details for any model or command that returns the orders object type.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/metadata-reference/relationships.mdx#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nkind: Relationship\nversion: v1\ndefinition:\n  name: customer\n  sourceType: orders\n  target:\n    model:\n      name: customers\n      subgraph: customers\n      relationshipType: Object\n  mapping:\n    - source:\n        fieldPath:\n          - fieldName: customerId\n      target:\n        modelField:\n          - fieldName: customerId\n  description: The customer details for an order\n```\n\n----------------------------------------\n\nTITLE: Command-Specific Options for Self-Hosted Engine URL in Sass Format\nDESCRIPTION: The available options specific to the set-self-hosted-engine-url command, including required parameters and flags for context management.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_supergraph_build_set-self-hosted-engine-url.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sass\nCODE:\n```\n    --build-version string   SupergraphBuild version (required)\n    --ci                     Disables the use of context\n-c, --context string         Name of the context to use. (default <current_context>)\n-h, --help                   help for set-self-hosted-engine-url\n-p, --project string         DDN Project name\n```\n\n----------------------------------------\n\nTITLE: Basic DDN Plugin Uninstall Command Syntax\nDESCRIPTION: The basic command syntax for uninstalling a DDN plugin with optional flags\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_plugins_uninstall.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nddn plugins uninstall <plugin-name> [flags]\n```\n\n----------------------------------------\n\nTITLE: Creating Hasura Cloud Project in DDN\nDESCRIPTION: Command to create a new project on Hasura Cloud if one doesn't exist.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/data-modeling/iterate.mdx#2025-04-17_snippet_5\n\nLANGUAGE: ddn\nCODE:\n```\nddn project init\n```\n\n----------------------------------------\n\nTITLE: Building Supergraph and Initializing Project\nDESCRIPTION: DDN commands to build the local supergraph and initialize the Hasura DDN project\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/recipes/tutorials/csv-files.mdx#2025-04-17_snippet_4\n\nLANGUAGE: ddn\nCODE:\n```\nddn supergraph build local\nddn project init\n```\n\n----------------------------------------\n\nTITLE: Building and Running DDN Supergraph\nDESCRIPTION: Commands to build the local supergraph API and start the Docker container for serving the API.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/data-modeling/partials/classic-connectors/clickHouse/_relationship-create-model-to-model.mdx#2025-04-17_snippet_1\n\nLANGUAGE: ddn\nCODE:\n```\nddn supergraph build local\nddn run docker-start\n```\n\n----------------------------------------\n\nTITLE: Displaying MongoDB Resources with DDN CLI\nDESCRIPTION: Command to show all resources discovered from a MongoDB instance after introspection. This displays collections, fields, and available operations.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/data-modeling/partials/classic-connectors/mongoDB/_command-update-tutorial.mdx#2025-04-17_snippet_2\n\nLANGUAGE: ddn\nCODE:\n```\nddn connector show-resources my_mongo\n```\n\n----------------------------------------\n\nTITLE: Introspecting Data Source with DDN Connector\nDESCRIPTION: Command to introspect a data source using a Hasura DDN connector. This command updates configuration files with schema information from the data source. Requires Docker daemon to be running and an initialized data connector.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/data-sources/introspect-a-source.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nddn connector introspect <name_of_connector>\n```\n\n----------------------------------------\n\nTITLE: Basic Command Syntax for Creating a SupergraphBuild\nDESCRIPTION: The basic syntax for the 'ddn supergraph build create' command used to create a SupergraphBuild on Hasura DDN.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_supergraph_build_create.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nddn supergraph build create [flags]\n```\n\n----------------------------------------\n\nTITLE: Installing curl in Linux Environment\nDESCRIPTION: Commands to install curl in a Linux environment if it's not already available. This is a prerequisite for downloading the DDN CLI.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/deployment/hasura-ddn/ci-cd.mdx#2025-04-17_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nsudo apt update && sudo apt upgrade\nsudo apt install curl\ncurl --version\n```\n\n----------------------------------------\n\nTITLE: Setting TypePermissions in YAML for NoAuth Mode\nDESCRIPTION: Sample TypePermissions configuration for a Posts model that grants the admin role access to specific fields. This configuration is necessary when using NoAuth mode to control field-level access.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/auth/noauth-mode.mdx#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nkind: TypePermissions\nversion: v1\ndefinition:\n  typeName: Posts\n  permissions:\n    - role: admin\n      output:\n        allowedFields:\n          - authorId\n          - content\n          - postId\n          - title\n```\n\n----------------------------------------\n\nTITLE: Defining Relationship Predicate in YAML\nDESCRIPTION: Example of a relationship predicate used in model permissions. It filters objects based on a related 'author' model.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/metadata-reference/permissions.mdx#2025-04-17_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nrelationship:\n  name: author\n  predicate:\n    fieldComparison:\n      field: id\n      operator: _eq\n      value:\n        sessionVariable: x-hasura-user-id\n```\n\n----------------------------------------\n\nTITLE: DDN Supergraph Prune Command Options\nDESCRIPTION: Available command-specific options for the prune operation including context selection, dry run mode, and Supergraph configuration path.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_supergraph_prune.mdx#2025-04-17_snippet_1\n\nLANGUAGE: sass\nCODE:\n```\n    --ci                  Disables the use of context\n-c, --context string      Name of the context to use. (default <current_context>)\n    --dry-run             Perform a dry run only. The changes won't be applied\n-h, --help                help for prune\n    --supergraph string   Path to Supergraph config file\n```\n\n----------------------------------------\n\nTITLE: Adding Environment Variables to DDN Connector (Bash)\nDESCRIPTION: This command adds environment variables to a DDN Connector. It can be used to add variables to a specific connector, to a specific environment file, or to a connector defined in a YAML config file.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_connector_env_add.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nddn connector env add [flags]\n```\n\n----------------------------------------\n\nTITLE: Configuring Anthropic LLM Provider in JSON\nDESCRIPTION: Demonstrates the JSON configuration for using Anthropic as the LLM provider, including the API key.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/promptql-apis/natural-language-api.mdx#2025-04-17_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"provider\": \"anthropic\",\n  \"api_key\": \"<your anthropic api key>\"\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Billing Subgraph Repository\nDESCRIPTION: Creates a new local project for the billing subgraph and maps it to the existing cloud project.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/project-configuration/tutorials/work-with-multiple-repositories.mdx#2025-04-17_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\nddn supergraph init billing-team --with-project <project-name> --create-subgraph billing --with-promptql && cd billing-team && git init\n```\n\n----------------------------------------\n\nTITLE: Creating and Populating ClickHouse Table\nDESCRIPTION: This SQL snippet creates a new 'comments' table in ClickHouse with columns for id, comment, user_id, and post_id. It then inserts three sample rows into the table.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/data-modeling/partials/classic-connectors/clickHouse/_model-create-tutorial.mdx#2025-04-17_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE comments (\n    id UInt32,\n    comment String,\n    user_id UInt32,\n    post_id UInt32\n)\nENGINE = MergeTree()\nORDER BY id;\n\nINSERT INTO comments (id, comment, user_id, post_id) VALUES\n    (1, 'Great post! Really enjoyed reading this.', 1, 2),\n    (2, 'Thanks for sharing your thoughts!', 2, 1),\n    (3, 'Interesting perspective.', 3, 1);\n```\n\n----------------------------------------\n\nTITLE: Removing Commands with DDN CLI\nDESCRIPTION: Demonstrates the basic syntax for removing Commands using the DDN CLI. The command accepts a command name and optional flags.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_command_remove.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nddn command remove <command-name> [flags]\n```\n\n----------------------------------------\n\nTITLE: Building Supergraph\nDESCRIPTION: Creates a new local build of the supergraph with the added function\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/data-modeling/partials/lambda-connectors/python/_command-create-tutorial.mdx#2025-04-17_snippet_4\n\nLANGUAGE: ddn\nCODE:\n```\nddn supergraph build local\n```\n\n----------------------------------------\n\nTITLE: Adding Specific Resources in DDN\nDESCRIPTION: Commands to add specific models, commands, or relationships to the data model. Replace placeholders with actual values.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/data-modeling/iterate.mdx#2025-04-17_snippet_2\n\nLANGUAGE: ddn\nCODE:\n```\nddn model add my_connector my_model\nddn command add my_connector my_command\nddn relationship add my_connector my_relationship\n```\n\n----------------------------------------\n\nTITLE: Viewing Available Resources from PostgreSQL Data Connector in DDN\nDESCRIPTION: Command to display all available resources from a PostgreSQL connector named 'my_pg' in the DDN framework. This helps identify tables and relationships available for use in your API.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/data-modeling/partials/classic-connectors/postgreSQL/_relationship-create-model-to-model.mdx#2025-04-17_snippet_0\n\nLANGUAGE: ddn\nCODE:\n```\nddn connector show-resources my_pg\n```\n\n----------------------------------------\n\nTITLE: Command Options for ddn supergraph build create\nDESCRIPTION: Complete list of specific options available for the 'ddn supergraph build create' command, including flags for applying builds, setting base supergraphs, controlling connector builds, and environment configuration.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_supergraph_build_create.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sass\nCODE:\n```\n    --apply                            Apply the build created after it is completed\n    --base-supergraph-on-applied       Use the applied Supergraph as the base supergraph\n    --base-supergraph-version string   Base Supergraph version for the compose build\n    --ci                               Disables the use of context\n-c, --context string                   Name of the context to use. (default <current_context>)\n-d, --description string               (Optional) description of the build\n-e, --env stringArray                  Environment variable, e.g. key=val. Can be repeated to provide multiple env vars\n    --env-file stringArray             Path to .env file. Can be repeated to provide multiple env files\n-h, --help                             help for create\n    --no-build-connectors              Do not recursively build all connectors in all subgraphs and use their URLs for supergraph build. (default: false)\n    --no-diff                          Do not do a GraphQL schema diff against the applied build\n    --output-dir string                Path to the directory to output the build artifacts\n-p, --project string                   DDN Project name\n    --self-hosted-data-plane           Is the data plane self hosted?\n    --subgraph-version stringArray     Subgraph(s) with build version to compose\n    --supergraph string                Path to Supergraph config file\n    --target-env-file string           Env file to write the connector build URLs to.\n    --update-connector-link-schema     Update DataConnectorLink schema with the NDC schema of the connectors built recursively. (default: false)\n```\n\n----------------------------------------\n\nTITLE: Inserting Sample User Data\nDESCRIPTION: Inserts sample user data into MongoDB using mongosh through Docker for testing the ranking query.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/data-modeling/partials/classic-connectors/mongoDB/_model-create-native-query-tutorial.mdx#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndocker exec -it mongodb mongosh my_database --eval \"\ndb.users.insertMany([\n  { user_id: 1, name: 'Dinesh', age: 25 },\n  { user_id: 2, name: 'Bertram', age: 25 },\n  { user_id: 3, name: 'Erlich', age: 25 }\n]);\n\"\n```\n\n----------------------------------------\n\nTITLE: Running DDN Connector SetEnv Command in Bash\nDESCRIPTION: This command sets environment variables for a connector and runs a specified command. It requires the path to the connector configuration file and the command to execute.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_connector_setenv.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nddn connector setenv --connector <path-to-connector-config-file-.yaml> -- <command> [flags]\n```\n\n----------------------------------------\n\nTITLE: Adding All Resources in DDN\nDESCRIPTION: Commands to add all discovered models, commands, or relationships to the data model.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/data-modeling/iterate.mdx#2025-04-17_snippet_3\n\nLANGUAGE: ddn\nCODE:\n```\nddn model add my_connector \"*\"\nddn command add my_connector \"*\"\nddn relationship add my_connector \"*\"\n```\n\n----------------------------------------\n\nTITLE: Restarting Docker Services Locally in DDN\nDESCRIPTION: Command to restart Docker services after iterating on the data model locally.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/data-modeling/iterate.mdx#2025-04-17_snippet_7\n\nLANGUAGE: ddn\nCODE:\n```\nddn run docker-start\n```\n\n----------------------------------------\n\nTITLE: Configuring POST Authentication Webhook Headers in YAML\nDESCRIPTION: Example configuration for headers and body to be sent to the POST authentication webhook.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/metadata-reference/auth-config.mdx#2025-04-17_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nheaders:\n  forward: '*'\n  additional:\n    user-agent: hasura-ddn\nbody:\n  headers:\n    forward:\n      - Authorization\n    additional: {}\n```\n\n----------------------------------------\n\nTITLE: Command Options - PromptQL Enable\nDESCRIPTION: Available command flags and options for the enable-promptql command, including CI mode, compose file path, context name, and other configuration options.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_codemod_enable-promptql.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sass\nCODE:\n```\n    --ci                         Disables the use of context\n    --compose-file-path string   Path to the docker compose file used to run engine\n-c, --context string             Name of the context to use. (default <current_context>)\n    --dir string                 The Hasura project directory (default \".\")\n-f, --force                      Run the command without asking for confirmation\n-h, --help                       help for enable-promptql\n    --subgraph string            Path to Subgraph config file\n```\n\n----------------------------------------\n\nTITLE: Removing a Connector using DDN CLI\nDESCRIPTION: This command removes a Connector named 'my_db' and its associated DataConnectorLink from the default subgraph. It demonstrates the basic usage of the 'ddn connector remove' command.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_connector_remove.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nddn connector remove my_db\n```\n\n----------------------------------------\n\nTITLE: Tracking Function in Connector\nDESCRIPTION: Adds the shout_name function to the tracked functions list\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/data-modeling/partials/lambda-connectors/python/_command-create-tutorial.mdx#2025-04-17_snippet_3\n\nLANGUAGE: ddn\nCODE:\n```\nddn command add my_python shout_name\n```\n\n----------------------------------------\n\nTITLE: Building Supergraph Without Connectors\nDESCRIPTION: Command to create a supergraph build without rebuilding connectors.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/deployment/hasura-ddn/incremental-builds.mdx#2025-04-17_snippet_2\n\nLANGUAGE: ddn\nCODE:\n```\nddn supergraph build create --no-build-connectors\n```\n\n----------------------------------------\n\nTITLE: Defining Supergraph Configuration for Development Environment in YAML\nDESCRIPTION: This YAML configuration file specifies the supergraph setup for the development environment. It includes a reference to a subgraph configuration file specific to development.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/project-configuration/project-management/manage-environments.mdx#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nkind: Supergraph\nversion: v2\ndefinition:\n  subgraphs:\n    # highlight-start\n    - globals/subgraph-development.yaml\n    # highlight-end\n    - my_subgraph/subgraph.yaml\n```\n\n----------------------------------------\n\nTITLE: DDN Header Forwarding Basic Command Syntax\nDESCRIPTION: The basic command syntax for configuring header forwarding to a connector in DDN.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_codemod_configure-header-forwarding.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nddn codemod configure-header-forwarding connector-name [flags]\n```\n\n----------------------------------------\n\nTITLE: Displaying Resources with DDN CLI\nDESCRIPTION: Show the list of resources identified by the connector using the DDN CLI.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/data-modeling/partials/classic-connectors/postgreSQL/_command-create-tutorial.mdx#2025-04-17_snippet_1\n\nLANGUAGE: ddn\nCODE:\n```\nddn connector show-resources my_pg\n```\n\n----------------------------------------\n\nTITLE: Running the ddn supergraph build local Command (Bash)\nDESCRIPTION: The basic syntax for the command that builds the Supergraph and generates assets for the local Engine using the DDN hosted metadata build service.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_supergraph_build_local.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nddn supergraph build local [flags]\n```\n\n----------------------------------------\n\nTITLE: Inherited DataConnectorLink CLI Options\nDESCRIPTION: Command line options inherited from parent operations for DDN connector-link commands\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_connector-link.mdx#2025-04-17_snippet_1\n\nLANGUAGE: sass\nCODE:\n```\n--log-level string   Log level. Can be DEBUG, WARN, INFO, ERROR, or FATAL. (default \"INFO\")\n--no-prompt          Do not prompt for required but missing flags\n--out string         Output format. Can be table, json or yaml. (default \"table\")\n--timeout int        Request timeout in seconds [env: HASURA_DDN_TIMEOUT] (default 100)\n```\n\n----------------------------------------\n\nTITLE: Basic Command Syntax for DDN Connector Resource Display\nDESCRIPTION: Shows the basic command syntax for displaying resources of a DDN connector. The command requires a connector name parameter and accepts optional flags.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_connector_show-resources.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nddn connector show-resources <connector-name> [flags]\n```\n\n----------------------------------------\n\nTITLE: Creating Supergraph Build with Customers Subgraph\nDESCRIPTION: Creates a new supergraph build incorporating the latest customers subgraph build.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/project-configuration/tutorials/work-with-multiple-repositories.mdx#2025-04-17_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nddn supergraph build create --subgraph-version customers:<build-version> --base-supergraph-version <supergraph-build-id>\n```\n\n----------------------------------------\n\nTITLE: Installing Plugins with DDN CLI\nDESCRIPTION: The basic command syntax for installing plugins in the DDN CLI. This command installs a plugin from the index and adds it to your configuration file.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_plugins_install.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nddn plugins install <name> [flags]\n```\n\n----------------------------------------\n\nTITLE: Loading DDN Autocompletion for Current Fish Shell Session\nDESCRIPTION: This command generates the autocompletion script for DDN and loads it into the current fish shell session.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_completion_fish.mdx#2025-04-17_snippet_0\n\nLANGUAGE: sass\nCODE:\n```\nddn completion fish | source\n```\n\n----------------------------------------\n\nTITLE: Updating Supergraph YAML Configuration in Hasura DDN\nDESCRIPTION: This snippet shows the structure of the supergraph.yaml file after adding a new subgraph. It demonstrates how the new subgraph is included in the subgraphs list.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/project-configuration/subgraphs/create-a-subgraph.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nkind: Supergraph\nversion: v2\ndefinition:\n  subgraphs:\n    - globals/subgraph.yaml\n    - app/subgraph.yaml\n    # highlight-start\n    - <subgraph-name>/subgraph.yaml\n    # highlight-end\n```\n\n----------------------------------------\n\nTITLE: Creating Projects with DDN CLI in Bash\nDESCRIPTION: Examples of using the 'ddn project create' command to create new projects on Hasura DDN. It shows how to create a project with an auto-generated name and how to create a project with a specified name.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_project_create.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Create a Project on Hasura DDN with auto-generated name\nddn project create\n\n# Create a Project with name \"test-project\" on Hasura DDN\nddn project create test-project\n```\n\n----------------------------------------\n\nTITLE: Launching the DDN Console for Local Development\nDESCRIPTION: Command to open the DDN console interface for local development. This provides a GraphQL playground where you can interact with your API and test queries with relationships.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/data-modeling/partials/classic-connectors/postgreSQL/_relationship-create-model-to-model.mdx#2025-04-17_snippet_3\n\nLANGUAGE: ddn\nCODE:\n```\nddn console --local\n```\n\n----------------------------------------\n\nTITLE: Initialize TypeScript Connector\nDESCRIPTION: Command to initialize and install the TypeScript connector\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/how-to-build-with-promptql/with-api-endpoints.mdx#2025-04-17_snippet_1\n\nLANGUAGE: ddn\nCODE:\n```\nddn connector init typescript -i\n```\n\n----------------------------------------\n\nTITLE: Building and Serving PromptQL Supergraph API\nDESCRIPTION: Builds the supergraph API and starts the Docker container to serve it. These commands compile all models and connectors into a working GraphQL API.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/data-modeling/partials/classic-connectors/postgreSQL/_model-create-native-query-tutorial.mdx#2025-04-17_snippet_7\n\nLANGUAGE: ddn\nCODE:\n```\nddn supergraph build local\nddn run docker-start\n```\n\n----------------------------------------\n\nTITLE: Creating AggregateExpressions for Int4 and Reviews in YAML\nDESCRIPTION: Defines aggregate expressions for Int4 scalar type and Reviews object type. These expressions specify how to aggregate data and map to data connector functions.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/metadata-reference/aggregate-expressions.mdx#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nkind: AggregateExpression\nversion: v1\ndefinition:\n  name: Int4_aggregate_exp\n  operand:\n    scalar:\n      aggregatedType: Int4\n      aggregationFunctions:\n        - name: avg\n          returnType: Numeric\n      dataConnectorAggregationFunctionMapping:\n        - dataConnectorName: my_connector\n          dataConnectorScalarType: int4\n          functionMapping:\n            avg:\n              name: avg\n  graphql:\n    selectTypeName: Int4_aggregate_fields\n\n---\nkind: AggregateExpression\nversion: v1\ndefinition:\n  name: Reviews_aggregate_exp\n  operand:\n    object:\n      aggregatedType: Reviews\n      aggregatableFields:\n        - fieldName: rating\n          aggregateExpression: Int4_aggregate_exp\n  graphql:\n    selectTypeName: Reviews_aggregate_fields\n  description: Aggregate over Reviews\n```\n\n----------------------------------------\n\nTITLE: Default Engine Environment Variables in Docker Compose\nDESCRIPTION: Environment variable configuration used by the default Docker Compose file for the engine container, showing paths for authentication configuration, metadata, and telemetry settings.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/faq.mdx#2025-04-17_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nAUTHN_CONFIG_PATH: /md/auth_config.json\nENABLE_CORS: \"true\"\nINTROSPECTION_METADATA_FILE: /md/metadata.json\nMETADATA_PATH: /md/open_dd.json\nOTLP_ENDPOINT: http://local.hasura.dev:4317\n```\n\n----------------------------------------\n\nTITLE: Initializing a New DDN Connector\nDESCRIPTION: Creates a new connector named 'my_ts' with the interactive flag to allow selecting hasura/nodejs from the available templates.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/data-modeling/partials/lambda-connectors/typescript/_command-create-tutorial.mdx#2025-04-17_snippet_0\n\nLANGUAGE: ddn\nCODE:\n```\nddn connector init my_ts -i\n```\n\n----------------------------------------\n\nTITLE: Tracking Custom Function in DDN\nDESCRIPTION: Command to track the custom 'customCode' function in the 'my_go' connector using the DDN CLI, making it available for use in the supergraph.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/data-modeling/partials/lambda-connectors/go/_command-create-native-operation-how-to.mdx#2025-04-17_snippet_3\n\nLANGUAGE: ddn\nCODE:\n```\nddn command add my_go customCode\n```\n\n----------------------------------------\n\nTITLE: Initializing New DDN Project with PromptQL\nDESCRIPTION: Creates a new DDN project with PromptQL support using the DDN CLI.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/business-logic/tutorials/1-take-action-for-a-user.mdx#2025-04-17_snippet_0\n\nLANGUAGE: ddn\nCODE:\n```\nddn supergraph init lambda-tutorial --with-promptql\n```\n\n----------------------------------------\n\nTITLE: Configuring JDBC URL Connection\nDESCRIPTION: Examples of JDBC URL configuration showing both direct string and environment variable reference options for connecting to Snowflake.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/connectors/snowflake/configuration.mdx#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jdbcUrl\": \"jdbc:snowflake://<account-identifier.<region>.snowflakecomputing.com?user=YOUR_USERNAME&&password=YOUR_PASSWORD&db=YOUR_DATABASE&warehouse=YOUR_WAREHOUSE&schema=YOUR_SCHEMA&role=YOUR_ROLE\",\n  \"jdbcUrl\": { \"variable\": \"SNOWFLAKE_JDBC_URL\" }\n}\n```\n\n----------------------------------------\n\nTITLE: Introspecting PostgreSQL Instance in PromptQL\nDESCRIPTION: This command introspects the PostgreSQL instance to discover available resources and schema.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/data-modeling/partials/classic-connectors/postgreSQL/_command-create-native-operation-tutorial.mdx#2025-04-17_snippet_3\n\nLANGUAGE: ddn\nCODE:\n```\nddn connector introspect my_pg\n```\n\n----------------------------------------\n\nTITLE: Command-Specific Options\nDESCRIPTION: Lists all available options specific to the rename-graphql-prefixes command, including flags for prefix configuration and subgraph handling.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_codemod_rename-graphql-prefixes.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sass\nCODE:\n```\n    --ci                               Disables the use of context\n-c, --context string                   Name of the context to use. (default <current_context>)\n    --from-graphql-root-field string   The previous GraphQL root field prefix\n    --from-graphql-type-name string    The previous GraphQL type name prefix\n    --graphql-root-field string        The new GraphQL root field prefix\n    --graphql-type-name string         The new GraphQL type name prefix\n-h, --help                             help for rename-graphql-prefixes\n    --no-update-subgraph-config        Do not update the subgraph config with the new prefixes\n    --subgraph string                  Path to Subgraph config file\n```\n\n----------------------------------------\n\nTITLE: Displaying PostgreSQL Resources\nDESCRIPTION: Command to display the resources discovered during introspection of the PostgreSQL connector.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/data-modeling/partials/classic-connectors/postgreSQL/_command-create-native-operation-how-to.mdx#2025-04-17_snippet_2\n\nLANGUAGE: ddn\nCODE:\n```\nddn connector show-resources <connector_name>\n```\n\n----------------------------------------\n\nTITLE: Example Usage of 'ddn command show' in Bash\nDESCRIPTION: These examples illustrate how to use the 'ddn command show' command. The first example shows the diff for a specific command named 'InsertUsers', while the second example uses a glob pattern to show diffs for all commands starting with 'Delete'.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_command_show.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Show diff between the 'InsertUsers' command and its corresponding ndc function/procedure\n ddn command show InsertUsers\n\n# Show diff between commands and their corresponding ndc functions/procedures for all commands matching glob pattern 'Delete*'\n ddn command show \"Delete*\"\n```\n\n----------------------------------------\n\nTITLE: Engine Missing Metadata Files Error\nDESCRIPTION: Error message displayed when the engine fails to start due to missing or invalid metadata files, indicating a file system error that can be resolved by running the appropriate build command.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/faq.mdx#2025-04-17_snippet_5\n\nLANGUAGE: text\nCODE:\n```\nError while starting up the engine: failed to build engine state - No such file or directory (os error 2)\n```\n\n----------------------------------------\n\nTITLE: Example Usage of DDN CLI Fix Traces Environment Variable Command\nDESCRIPTION: This example demonstrates how to use the 'ddn codemod fix-traces-env-var' command to fix the environment variable for the current directory.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_codemod_fix-traces-env-var.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nddn codemod fix-traces-env-var --dir .\n```\n\n----------------------------------------\n\nTITLE: Table Artifact Structure\nDESCRIPTION: Format for including a table artifact in the API request's artifacts array.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/promptql-apis/execute-program-api.mdx#2025-04-17_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"identifier\": \"my_table\",\n  \"title\": \"My Data Table\",\n  \"artifact_type\": \"table\",\n  \"data\": [\n    {\n      \"column1\": \"value1\",\n      \"column2\": \"value2\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing PostgreSQL Connector for Customers\nDESCRIPTION: Sets up a PostgreSQL connector for the customers subgraph using an interactive prompt.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/project-configuration/tutorials/work-with-multiple-repositories.mdx#2025-04-17_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nddn connector init customers_pg -i\n```\n\n----------------------------------------\n\nTITLE: Structuring Connector Packaging JSON in JavaScript\nDESCRIPTION: JSON structure for the connector-packaging.json file, which includes version, URI, checksum, and source information for a connector package.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/data-sources/publish-your-own-connector.mdx#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"version\": \"1.0.0\",\n  \"uri\": \"https://github.com/hasura/ndc-mongodb/releases/download/v0.0.1/connector-definition.tgz\",\n  \"checksum\": {\n    \"type\": \"sha256\",\n    \"value\": \"2cd3584557be7e2870f3488a30cac6219924b3f7accd9f5f473285323843a0f4\"\n  },\n  \"source\": {\n    \"hash\": \"c32adbde478147518f65ff465c40a0703239288a\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Executing ddn doctor command in Bash\nDESCRIPTION: This command checks if the dependencies (Docker and Docker Compose) of DDN CLI are installed, are of the required version, and if they are running.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_doctor.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nddn doctor [flags]\n```\n\n----------------------------------------\n\nTITLE: Example Usage of ddn model list Command in Bash\nDESCRIPTION: Example showing how to list details about collections of a DataConnectorLink named 'mydb' and their corresponding Models.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_model_list.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# List details about the collections of DataConnectorLink `mydb`, and their corresponding Models\n ddn model list mydb\n```\n\n----------------------------------------\n\nTITLE: Defining NOT Predicate in YAML\nDESCRIPTION: Example of a NOT predicate used in model permissions to negate a field comparison.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/metadata-reference/permissions.mdx#2025-04-17_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\nnot:\n  fieldComparison:\n    field: author_id\n    operator: _eq\n    value:\n      sessionVariable: x-hasura-user-id\n```\n\n----------------------------------------\n\nTITLE: Tracking a Function in DDN\nDESCRIPTION: Makes the 'shoutName' function available for use in the DDN ecosystem by adding it as a command to the 'my_ts' connector.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/data-modeling/partials/lambda-connectors/typescript/_command-create-tutorial.mdx#2025-04-17_snippet_3\n\nLANGUAGE: ddn\nCODE:\n```\nddn command add my_ts shoutName\n```\n\n----------------------------------------\n\nTITLE: Creating a Subgraph in Hasura DDN Project using CLI command\nDESCRIPTION: The basic syntax for creating a new Subgraph in a Hasura DDN Project using the DDN CLI. Requires specifying the subgraph name and supports various flags for configuration.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_project_subgraph_create.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nddn project subgraph create <subgraph-name> [flags]\n```\n\n----------------------------------------\n\nTITLE: Switching Subgraph Context in DDN CLI\nDESCRIPTION: Demonstrates how to set the current subgraph context using the DDN CLI. This allows for easier management when working with multiple subgraphs.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/project-configuration/subgraphs/working-with-multiple-subgraphs.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nddn context set subgraph ./<subgraph-name>/subgraph.yaml\n```\n\n----------------------------------------\n\nTITLE: Executing 'ddn command show' in Bash\nDESCRIPTION: This snippet demonstrates the basic syntax for using the 'ddn command show' command. It allows users to specify a command name and optional flags to show the diff between the command and its corresponding NDC function/procedure.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_command_show.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nddn command show <command-name> [flags]\n```\n\n----------------------------------------\n\nTITLE: Building and Running Supergraph API in PromptQL\nDESCRIPTION: These DDN commands build the local supergraph API and start the Docker container to serve it.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/data-modeling/partials/classic-connectors/mongoDB/_relationship-create-model-to-model.mdx#2025-04-17_snippet_1\n\nLANGUAGE: ddn\nCODE:\n```\nddn supergraph build local\nddn run docker-start\n```\n\n----------------------------------------\n\nTITLE: Data Source Configuration\nDESCRIPTION: Command to initialize a new data connector using an interactive wizard.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/private-ddn/ddn-workspace.mdx#2025-04-17_snippet_3\n\nLANGUAGE: ddn\nCODE:\n```\nddn connector init <connector_name> -i\n```\n\n----------------------------------------\n\nTITLE: Removing a Model in PromptQL\nDESCRIPTION: Command to delete a model when it's no longer needed. This removes both the model object and its associated metadata definitions from your PromptQL setup.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/data-modeling/model.mdx#2025-04-17_snippet_5\n\nLANGUAGE: ddn\nCODE:\n```\nddn model remove users\n```\n\n----------------------------------------\n\nTITLE: Initializing PostgreSQL Connector in Hasura DDN\nDESCRIPTION: Sets up a PostgreSQL connector named 'my_pg' in the Hasura DDN project, prompting for connection details.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/project-configuration/tutorials/manage-multiple-environments.mdx#2025-04-17_snippet_1\n\nLANGUAGE: ddn\nCODE:\n```\nddn connector init my_pg -i\n```\n\n----------------------------------------\n\nTITLE: Authenticating Service Account with DDN CLI\nDESCRIPTION: Command to login to DDN CLI using a service account token for authentication.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/project-configuration/project-management/service-accounts.mdx#2025-04-17_snippet_0\n\nLANGUAGE: ddn\nCODE:\n```\nddn auth login --access-token <service-account-token>\n```\n\n----------------------------------------\n\nTITLE: Setting Project Context in Hasura DDN\nDESCRIPTION: This command sets the project context for collaborators after accepting an invitation. It requires specifying the main project name.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/project-configuration/subgraphs/working-with-multiple-repositories.mdx#2025-04-17_snippet_18\n\nLANGUAGE: ddn\nCODE:\n```\nddn context set project <main-project-name>\n```\n\n----------------------------------------\n\nTITLE: Introspecting CSV Connector\nDESCRIPTION: DDN command to introspect the CSV connector and generate schema from the CSV files\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/recipes/tutorials/csv-files.mdx#2025-04-17_snippet_2\n\nLANGUAGE: ddn\nCODE:\n```\nddn connector introspect csv\n```\n\n----------------------------------------\n\nTITLE: Displaying Resources in PostgreSQL Connector using DDN\nDESCRIPTION: This command shows the found resources in the PostgreSQL connector, allowing verification of the new native query.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/data-modeling/partials/classic-connectors/postgreSQL/_model-create-native-query-how-to.mdx#2025-04-17_snippet_2\n\nLANGUAGE: ddn\nCODE:\n```\nddn connector show-resources <connector_name>\n```\n\n----------------------------------------\n\nTITLE: Adding MongoDB Model to DDN\nDESCRIPTION: Adds the 'comments' collection from the 'my_mongo' MongoDB instance as a model in DDN. This makes the collection available for GraphQL operations.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/data-modeling/partials/classic-connectors/mongoDB/_model-create-tutorial.mdx#2025-04-17_snippet_2\n\nLANGUAGE: ddn\nCODE:\n```\nddn model add my_mongo comments\n```\n\n----------------------------------------\n\nTITLE: Example JWT Decoded Payload Structure\nDESCRIPTION: Sample of a decoded JWT payload showing the standard claims (iat, exp) and custom Hasura claims namespace containing role configurations and custom values.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/auth/jwt/jwt-configuration.mdx#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"iat\": 1735916718,\n  \"exp\": 1796916677,\n  \"claims.jwt.hasura.io\": {\n    \"x-hasura-default-role\": \"user\",\n    \"x-hasura-allowed-roles\": [\"user\", \"admin\"],\n    \"x-hasura-user-id\": \"123\",\n    \"x-hasura-org-id\": \"456\",\n    \"x-hasura-custom\": \"custom-value\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding ClickHouse Model to DDN\nDESCRIPTION: This DDN CLI command adds the 'comments' model from the 'my_clickhouse' connector to the DDN configuration.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/data-modeling/partials/classic-connectors/clickHouse/_model-create-tutorial.mdx#2025-04-17_snippet_2\n\nLANGUAGE: ddn\nCODE:\n```\nddn model add my_clickhouse comments\n```\n\n----------------------------------------\n\nTITLE: Command-Specific Options for ddn connector-link add-resources\nDESCRIPTION: These are the options specific to the 'add-resources' subcommand, including flags for CI mode, context selection, and specifying the Subgraph config file path.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_connector-link_add-resources.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sass\nCODE:\n```\n    --ci                Disables the use of context\n-c, --context string    Name of the context to use. (default <current_context>)\n-h, --help              help for add-resources\n    --subgraph string   Path to Subgraph config file\n```\n\n----------------------------------------\n\nTITLE: Filtering by Album ID in JSON\nDESCRIPTION: This JSON example shows filtering an album where the AlbumId equals 100.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/metadata-reference/boolean-expressions.mdx#2025-04-17_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{ \"album\": { \"AlbumId\": { \"equals\": 100 } } }\n```\n\n----------------------------------------\n\nTITLE: Setting Up the Hasura DDN Project\nDESCRIPTION: Commands to build the supergraph and initialize the Hasura DDN project.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/recipes/tutorials/huggingface-csv-parquet-sqlite.mdx#2025-04-17_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nddn supergraph build local\nddn project init\n```\n\n----------------------------------------\n\nTITLE: DDN Connector Link Update Usage Examples\nDESCRIPTION: Examples showing how to update a DataConnectorLink schema for a Subgraph config and how to update while adding all resources to metadata.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_connector-link_update.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Update the schema of a DataConnectorLink 'mydb' for Subgraph config 'app'\n ddn connector-link update mydb --subgraph ./app/subgraph.yaml\n\n# Update the schema of a DataConnectorLink 'mydb' and add all Models, Commands and Relationships to the metadata for Subgraph config 'app'\n ddn connector-link update mydb --add-all-resources --subgraph ./app/subgraph.yaml\n```\n\n----------------------------------------\n\nTITLE: Creating and Setting Staging Environment File in Hasura DDN\nDESCRIPTION: Creates a .env.staging file and sets it as the local environment file for the 'staging' context.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/project-configuration/tutorials/manage-multiple-environments.mdx#2025-04-17_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\ntouch .env.staging && ddn context set localEnvFile \".env.staging\"\n```\n\n----------------------------------------\n\nTITLE: Adding a Command with DDN CLI\nDESCRIPTION: Add a new command to insert users using the DDN CLI.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/data-modeling/partials/classic-connectors/postgreSQL/_command-create-tutorial.mdx#2025-04-17_snippet_2\n\nLANGUAGE: ddn\nCODE:\n```\nddn command add my_pg insert_users\n```\n\n----------------------------------------\n\nTITLE: Listing Connector Versions with DDN CLI\nDESCRIPTION: This command lists available versions of connectors. It can be used to list all versions of all connectors or specific versions of a particular connector.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_connector_list.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nddn connector list [flags]\n```\n\n----------------------------------------\n\nTITLE: Executing DDN Connector Introspection in Bash\nDESCRIPTION: This snippet shows the basic syntax for running the 'ddn connector introspect' command. It introspects a named connector using a specified subgraph configuration file.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_connector_introspect.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nddn connector introspect <connector-name> --subgraph <path-to-subgraph-config-file> [flags]\n```\n\n----------------------------------------\n\nTITLE: Adding Single Command in DDN\nDESCRIPTION: Command to add a specific operation from discovered resources to the metadata.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/data-modeling/command.mdx#2025-04-17_snippet_2\n\nLANGUAGE: ddn\nCODE:\n```\nddn command add <connector_link_name> <operation_name>\n```\n\n----------------------------------------\n\nTITLE: Initializing Independent Subgraph and Repository in DDN CLI\nDESCRIPTION: This command creates a new supergraph with a new subgraph, initializes a repository, and sets up the necessary structure.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/project-configuration/subgraphs/working-with-multiple-repositories.mdx#2025-04-17_snippet_5\n\nLANGUAGE: ddn\nCODE:\n```\nddn supergraph init <subgraph-name-as-supergraph-name> --create-subgraph <subgraph-name> && cd <subgraph-name> && git init\n```\n\n----------------------------------------\n\nTITLE: Displaying Available Resources in PromptQL Connector\nDESCRIPTION: Shows all resources discovered in the PostgreSQL instance, including tables, views, and native operations. This helps verify that the native query was properly registered.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/data-modeling/partials/classic-connectors/postgreSQL/_model-create-native-query-tutorial.mdx#2025-04-17_snippet_4\n\nLANGUAGE: ddn\nCODE:\n```\nddn connector show-resources my_pg\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables\nDESCRIPTION: Command to copy the sample environment file to create a new .env file for configuration.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/recipes/tutorials/apple-health-assistant.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncp .env.sample .env\n```\n\n----------------------------------------\n\nTITLE: Adding Model for Native Query\nDESCRIPTION: Command to add a new model that corresponds to the native query using the connector link name and model name.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/data-modeling/partials/classic-connectors/mongoDB/_model-create-native-query-how-to.mdx#2025-04-17_snippet_3\n\nLANGUAGE: ddn\nCODE:\n```\nddn model add <connector_link_name> <model_name>\n```\n\n----------------------------------------\n\nTITLE: Building Supergraph with DDN CLI\nDESCRIPTION: Command to create a new local build of the supergraph using the DDN CLI, incorporating the custom Go connector and function.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/data-modeling/partials/lambda-connectors/go/_command-create-native-operation-how-to.mdx#2025-04-17_snippet_4\n\nLANGUAGE: ddn\nCODE:\n```\nddn supergraph build local\n```\n\n----------------------------------------\n\nTITLE: Creating DDN Context - Usage Example\nDESCRIPTION: Practical example showing how to create a new context named 'staging' using the DDN CLI.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_context_create-context.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Create a new context called staging\n ddn context create-context staging\n```\n\n----------------------------------------\n\nTITLE: Validating DDN CLI Installation\nDESCRIPTION: Command to verify that the DDN CLI is installed correctly on the system. Requires minimum CLI version v2.28.0 and Docker Compose v2.20 or later.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/_prereqs.mdx#2025-04-17_snippet_0\n\nLANGUAGE: ddn\nCODE:\n```\nddn doctor\n```\n\n----------------------------------------\n\nTITLE: Updating All Commands in Node.js Connector\nDESCRIPTION: Updates the metadata for all commands in your connector using the wildcard notation. This is useful when you've made changes to multiple functions at once.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/data-modeling/partials/lambda-connectors/typescript/_command-update-tutorial.mdx#2025-04-17_snippet_3\n\nLANGUAGE: ddn\nCODE:\n```\nddn command update my_ts \"*\"\n```\n\n----------------------------------------\n\nTITLE: Creating Directory for Native Mutations in PromptQL Connector\nDESCRIPTION: This command creates a new directory structure to store native mutations for a PostgreSQL connector in PromptQL.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/data-modeling/partials/classic-connectors/postgreSQL/_command-create-native-operation-tutorial.mdx#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nmkdir -p app/connector/my_pg/native_operations/mutations/\n```\n\n----------------------------------------\n\nTITLE: Configuring TypePermissions for Field-Level Access Control\nDESCRIPTION: Shows how to configure TypePermissions to specify which fields different roles can access. Defines allowed fields for both admin and user roles.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/auth/permissions/tutorials/1-simple-user-permissions.mdx#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n---\nkind: TypePermissions\nversion: v1\ndefinition:\n  typeName: Users\n  permissions:\n    - role: admin\n      output:\n        allowedFields:\n          - createdAt\n          - email\n          - favoriteArtist\n          - id\n          - isEmailVerified\n          - lastSeen\n          - name\n          - password\n          - updatedAt\n    - role: user\n      output:\n        allowedFields:\n          - createdAt\n          - email\n          - favoriteArtist\n          - id\n          - isEmailVerified\n          - lastSeen\n          - name\n          - password\n          - updatedAt\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom TypeScript Function\nDESCRIPTION: Defines a custom TypeScript function with @readonly tag for data retrieval operations\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/data-modeling/partials/lambda-connectors/typescript/_command-create-native-operation-how-to.mdx#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * @readonly\n */\nexport function myCustomCode(myInput: string): string {\n  // Do something with the input\n  return \"My output\";\n}\n```\n\n----------------------------------------\n\nTITLE: Executing 'ddn model show' Command in Bash\nDESCRIPTION: Shows the basic syntax for the 'ddn model show' command, which displays differences between a model and its corresponding NDC collection.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_model_show.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nddn model show <model-name> [flags]\n```\n\n----------------------------------------\n\nTITLE: Initializing Basic Snowflake Connector Configuration\nDESCRIPTION: Basic configuration structure for the Snowflake connector showing the main required fields including JDBC URL, properties, schemas, tables, functions and native queries.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/connectors/snowflake/configuration.mdx#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jdbcUrl\": \"\",\n  \"jdbcProperties\": {},\n  \"schemas\": [],\n  \"tables\": [],\n  \"functions\": [],\n  \"nativeQueries\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Starting DDN Docker Project\nDESCRIPTION: DDN command to start the Docker-based DDN project\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/recipes/tutorials/csv-files.mdx#2025-04-17_snippet_5\n\nLANGUAGE: ddn\nCODE:\n```\nddn run docker-start\n```\n\n----------------------------------------\n\nTITLE: Adding Model for Native Query in DDN\nDESCRIPTION: This command adds the model for the native query, linking it to the connector and specifying the model name.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/data-modeling/partials/classic-connectors/postgreSQL/_model-create-native-query-how-to.mdx#2025-04-17_snippet_3\n\nLANGUAGE: ddn\nCODE:\n```\nddn model add <connector_link_name> <model_name>\n```\n\n----------------------------------------\n\nTITLE: Initializing DDN Project for PromptQL\nDESCRIPTION: Command to initialize a Hasura DDN cloud project and set up PromptQL keys for connecting to the PromptQL runtime.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/recipes/tutorials/github-assistant.mdx#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nddn project init\n```\n\n----------------------------------------\n\nTITLE: Cloning the Huggingface Dataset PromptQL Project\nDESCRIPTION: Commands to clone the GitHub repository for the Huggingface Dataset PromptQL integration project and navigate to the project directory.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/recipes/tutorials/huggingface-csv-parquet-sqlite.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone git@github.com:hasura/huggingface-dataset-promptql.git\ncd huggingface-dataset-promptql\n```\n\n----------------------------------------\n\nTITLE: Available Options for ddn supergraph build apply\nDESCRIPTION: The complete list of options specific to the 'ddn supergraph build apply' command, including flags for context selection, disabling diff, specifying project name, and self-hosted data plane configuration.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_supergraph_build_apply.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sass\nCODE:\n```\n    --ci                       Disables the use of context\n-c, --context string           Name of the context to use. (default <current_context>)\n-h, --help                     help for apply\n    --no-diff                  Do not do a GraphQL schema diff against the applied build\n-p, --project string           DDN Project name\n    --self-hosted-data-plane   Is the data plane self hosted?\n```\n\n----------------------------------------\n\nTITLE: Starting Hasura DDN Local Services\nDESCRIPTION: Starts the local Hasura instance and PostgreSQL connector using Docker.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/project-configuration/tutorials/manage-multiple-environments.mdx#2025-04-17_snippet_5\n\nLANGUAGE: ddn\nCODE:\n```\nddn run docker-start\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic GraphiQLIDE Component in JSX\nDESCRIPTION: A simple example of implementing the GraphiQLIDE component with a basic query to fetch an author by ID. This demonstrates the minimal setup required for the component, including the import statement, query, and response properties.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/wiki/docusaurus-mdx-guide/graphiql-ide.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport GraphiQLIDE from '@site/src/components/GraphiQLIDE';\n\n<GraphiQLIDE\n  query={`query AuthorById {\n  author_by_pk(id: 1) {\n    id\n    name\n  }\n}`}\n  response={`{\n  \"data\": {\n    \"author_by_pk\": {\n      \"id\": 1,\n      \"name\": \"Justin\"\n    }\n  }\n}`}\n/>;\n```\n\n----------------------------------------\n\nTITLE: Defining MongoDB Native Mutation Schema\nDESCRIPTION: JSON configuration defining the createUser mutation schema with input arguments, result types, and MongoDB insert command\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/data-modeling/partials/classic-connectors/mongoDB/_command-create-native-operation-tutorial.mdx#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"createUser\",\n  \"description\": \"Create a new user with name and age\",\n  \"resultType\": {\n    \"object\": \"CreateUserResult\"\n  },\n  \"arguments\": {\n    \"name\": {\n      \"type\": {\n        \"scalar\": \"string\"\n      }\n    },\n    \"age\": {\n      \"type\": {\n        \"scalar\": \"int\"\n      }\n    }\n  },\n  \"objectTypes\": {\n    \"CreateUserResult\": {\n      \"fields\": {\n        \"ok\": {\n          \"type\": {\n            \"scalar\": \"int\"\n          }\n        },\n        \"n\": {\n          \"type\": {\n            \"scalar\": \"int\"\n          }\n        }\n      }\n    }\n  },\n  \"command\": {\n    \"insert\": \"users\",\n    \"documents\": [\n      {\n        \"name\": \"{{ name }}\",\n        \"age\": \"{{ age }}\",\n        \"user_id\": {\n          \"$size\": {\n            \"$ifNull\": [\n              {\n                \"$objectToArray\": \"$$ROOT\"\n              },\n              []\n            ]\n          }\n        }\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Subgraph for Development Environment in YAML\nDESCRIPTION: This YAML file defines the subgraph configuration for the development environment. It specifies the name, generator settings, and includes a path to development-specific metadata.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/project-configuration/project-management/manage-environments.mdx#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nkind: Subgraph\nversion: v2\ndefinition:\n  name: globals\n  generator:\n    rootPath: .\n  # highlight-start\n  includePaths:\n    - metadata_development\n  # highlight-end\n```\n\n----------------------------------------\n\nTITLE: Initializing Hasura DDN Project with PromptQL\nDESCRIPTION: Creates a new local Hasura DDN project named 'environments-example' with PromptQL enabled.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/project-configuration/tutorials/manage-multiple-environments.mdx#2025-04-17_snippet_0\n\nLANGUAGE: ddn\nCODE:\n```\nddn supergraph init environments-example --with-promptql && cd environments-example\n```\n\n----------------------------------------\n\nTITLE: Using 'ddn console' Command in Bash\nDESCRIPTION: This snippet demonstrates the basic usage of the 'ddn console' command in the DDN CLI. It shows various examples of how to use the command with different options.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_console.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nddn console [flags]\n```\n\nLANGUAGE: bash\nCODE:\n```\n# Open the console for the DDN project set in the context\n ddn console\n\n# Open the local dev console\n ddn console --local\n\n# Open the local dev console with a specific engine url\n ddn console --url http://localhost:8080\n\n# Open the console for a specific DDN project\n ddn console --project my-project-123\n\n# Open the console for a specific SupergraphBuild\n ddn console --project my-project-123 --build-version build-version-123\n```\n\n----------------------------------------\n\nTITLE: Running DDN Scripts with Examples\nDESCRIPTION: Provides practical examples of using the 'ddn run' command, including running a script normally and in detached mode by passing arguments after the double dash.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_run.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Run script `docker-start` defined in project's context config\n ddn run docker-start\n\n# Run script `docker-start` defined in project's context config in detached mode\n ddn run docker-start -- -d\n```\n\n----------------------------------------\n\nTITLE: Introspecting the Go Connector\nDESCRIPTION: Command to introspect the 'my_go' connector, which analyzes the connector's structure and capabilities for integration with the Hasura system.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/data-modeling/partials/lambda-connectors/go/_command-create-tutorial.mdx#2025-04-17_snippet_2\n\nLANGUAGE: ddn\nCODE:\n```\nddn connector introspect my_go\n```\n\n----------------------------------------\n\nTITLE: Examples of Setting API Access Mode in Bash\nDESCRIPTION: Usage examples for the set-api-access-mode command, showing how to set projects to private or public mode using either the context project or specifying a project explicitly.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_project_set-api-access-mode.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Set the API access mode for the DDN project set in the context as private\n ddn project set-api-access-mode private\n\n# Set the API access mode for the DDN project set in the context as public\n ddn project set-api-access-mode public\n\n# Set the API access mode for the DDN project 'my-project-123' as private\n ddn project set-api-access-mode private --project my-project-123\n\n# Set the API access mode for the DDN project 'my-project-123' as public\n ddn project set-api-access-mode public --project my-project-123\n```\n\n----------------------------------------\n\nTITLE: Configuring Authentication Webhook Headers in YAML\nDESCRIPTION: Example configuration for headers to be sent to the authentication webhook, specifying which headers to forward and additional headers to include.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/metadata-reference/auth-config.mdx#2025-04-17_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nforward:\n  - Authorization\nadditional:\n  user-agent: hasura-ddn\n```\n\n----------------------------------------\n\nTITLE: Applying Supergraph Build with DDN CLI\nDESCRIPTION: Command to apply a specific supergraph build to your project. This deploys the changes to your DDN environment using the build ID created in the previous step.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/deployment/hasura-ddn/ci-cd.mdx#2025-04-17_snippet_5\n\nLANGUAGE: ddn\nCODE:\n```\nddn supergraph build apply <build-id>\n```\n\n----------------------------------------\n\nTITLE: Configuring Billing Subgraph YAML\nDESCRIPTION: Adds prefixing to the billing subgraph YAML file to prevent collisions in the supergraph.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/project-configuration/tutorials/work-with-multiple-repositories.mdx#2025-04-17_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\nkind: Subgraph\nversion: v2\ndefinition:\n  name: billing\n  generator:\n    rootPath: .\n    namingConvention: snake_case\n    graphqlRootFieldPrefix: billing_\n    graphqlTypeNamePrefix: billing_\n  includePaths:\n    - metadata\n```\n\n----------------------------------------\n\nTITLE: Executing DDN CLI Command to Fix Traces Environment Variable\nDESCRIPTION: This command fixes the environment variable used for configuring traces for connectors in a Hasura project. It requires specifying the project directory.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_codemod_fix-traces-env-var.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nddn codemod fix-traces-env-var --dir <project-dir> [flags]\n```\n\n----------------------------------------\n\nTITLE: Adding DuckDuckAPI Connector\nDESCRIPTION: Initializes the connector by selecting hasura/duckduckapi from available options\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/how-to-build-with-promptql/with-apis-with-bulk-data.mdx#2025-04-17_snippet_1\n\nLANGUAGE: ddn\nCODE:\n```\nddn connector init github -i\n```\n\n----------------------------------------\n\nTITLE: Cloud Environment File Configuration in YAML\nDESCRIPTION: Example demonstrating the cloud environment file configuration used for cloud-related operations.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/project-configuration/project-management/manage-contexts.mdx#2025-04-17_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\ncontexts:\n  default:\n    project: great-ddn-1234\n    supergraph: ../supergraph.yaml\n    subgraph: ../app/subgraph.yaml\n    localEnvFile: ../.env\n    cloudEnvFile: ../.env.cloud\n```\n\n----------------------------------------\n\nTITLE: Available Options for ddn connector build get Command in SASS\nDESCRIPTION: List of available options and flags that can be used with the 'ddn connector build get' command, including options for specifying context, connector details, project and subgraph information, and output customization.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_connector_build_get.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sass\nCODE:\n```\n    --ci                      Disables the use of context\n    --connector string        Path to Connector YAML config file\n    --connector-name string   Connector name\n-c, --context string          Name of the context to use. (default <current_context>)\n-h, --help                    help for get\n-p, --project string          DDN Project name\n    --schema                  Get NDC schema of ConnectorBuild\n    --subgraph-name string    Subgraph name\n```\n\n----------------------------------------\n\nTITLE: Defining Connector Metadata JSON in JavaScript\nDESCRIPTION: JSON structure for the metadata.json file, which contains crucial information about the connector including overview, author details, and source code information.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/data-sources/publish-your-own-connector.mdx#2025-04-17_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"overview\": {\n    \"namespace\": \"your_namespace\",\n    \"description\": \"A brief description of your connector\",\n    \"title\": \"Your Connector Title\",\n    \"logo\": \"logo.png\",\n    \"tags\": [],\n    \"latest_version\": \"v1.0.0\"\n  },\n  \"author\": {\n    \"support_email\": \"support@example.com\",\n    \"homepage\": \"https://www.example.com\",\n    \"name\": \"Your Organization Name\"\n  },\n  \"is_verified\": false,\n  \"is_hosted_by_hasura\": false,\n  \"source_code\": {\n    \"is_open_source\": true,\n    \"repository\": \"https://github.com/your-org/your-connector-repo\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Success Response Structure\nDESCRIPTION: Example of a successful API response including program output, accessed artifacts, modified artifacts, and LLM usage details.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/promptql-apis/execute-program-api.mdx#2025-04-17_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"output\": \"<program output>\",\n  \"error\": null,\n  \"accessed_artifact_ids\": [\"artifact1\", \"artifact2\"],\n  \"modified_artifacts\": [\n    {\n      \"identifier\": \"new_artifact\",\n      \"title\": \"New Artifact\",\n      \"artifact_type\": \"table\",\n      \"data\": [\n        {\n          \"column1\": \"value1\",\n          \"column2\": \"value2\"\n        }\n      ]\n    }\n  ],\n  \"llm_usages\": [\n    {\n      \"provider\": \"anthropic\",\n      \"model\": \"claude-3-5-sonnet-20241022\",\n      \"input_tokens\": 691,\n      \"output_tokens\": 33\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Opening the Local DDN Console\nDESCRIPTION: Command to open the local DDN Console for exploring the project.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/recipes/tutorials/huggingface-csv-parquet-sqlite.mdx#2025-04-17_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nddn console --local\n```\n\n----------------------------------------\n\nTITLE: Checking DDN Project Initialization in Bash\nDESCRIPTION: This command checks if a DDN project has been initialized in the current directory. It retrieves the project context using the DDN CLI.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/promptql-playground/troubleshooting.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nddn context get project\n```\n\n----------------------------------------\n\nTITLE: Setting Up Hasura CLI Auto-Completion for Bash on Linux\nDESCRIPTION: This command generates and installs the auto-completion script for Hasura CLI on Linux systems.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/installation.mdx#2025-04-17_snippet_7\n\nLANGUAGE: ddn\nCODE:\n```\nddn completion bash > /etc/bash_completion.d/ddn\n```\n\n----------------------------------------\n\nTITLE: Example Usage of Supergraph Config Upgrade Command\nDESCRIPTION: This example demonstrates how to use the command to upgrade all Supergraph config files in the current directory from v1 to v2.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_codemod_upgrade-supergraph-config-v1-to-v2.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nddn codemod upgrade-supergraph-config-v1-to-v2 --dir .\n```\n\n----------------------------------------\n\nTITLE: ConnectorBuild Creation Example\nDESCRIPTION: Practical example showing how to create a ConnectorBuild using a specific connector configuration file path.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_connector_build_create.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nddn connector build create --connector ./app/connector/my_connector/connector.yaml\n```\n\n----------------------------------------\n\nTITLE: Displaying Inherited CLI Options for 'ddn model' Command in Sass\nDESCRIPTION: This code snippet shows the CLI options inherited from parent operations for the 'ddn model' command. It includes options for log level, prompting, output format, and request timeout.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_model.mdx#2025-04-17_snippet_1\n\nLANGUAGE: sass\nCODE:\n```\n--log-level string   Log level. Can be DEBUG, WARN, INFO, ERROR, or FATAL. (default \"INFO\")\n--no-prompt          Do not prompt for required but missing flags\n--out string         Output format. Can be table, json or yaml. (default \"table\")\n--timeout int        Request timeout in seconds [env: HASURA_DDN_TIMEOUT] (default 100)\n```\n\n----------------------------------------\n\nTITLE: Setting Current Context Command Synopsis\nDESCRIPTION: Basic command syntax for setting the current context in DDN CLI.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_context_set-current-context.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nddn context set-current-context <name> [flags]\n```\n\n----------------------------------------\n\nTITLE: Configuring Auth Hook Example in YAML\nDESCRIPTION: Example configuration showing how to set up an authentication webhook with URL and HTTP method specifications.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/metadata-reference/auth-config.mdx#2025-04-17_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\nurl: http://auth_hook:3050/validate-request\nmethod: Post\n```\n\n----------------------------------------\n\nTITLE: Specifying PostgreSQL Connection URI\nDESCRIPTION: This plaintext snippet provides the JDBC connection URI for the PostgreSQL database containing IMDB data.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/_quickstart_template.mdx#2025-04-17_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\njdbc:postgresql://35.236.11.122:5432/imdb?user=read_only_user&password=readonlyuser\n```\n\n----------------------------------------\n\nTITLE: Generate Random Hex String with OpenSSL for JWT Secret\nDESCRIPTION: Uses OpenSSL to generate a random 16-byte hexadecimal string that will serve as the JWT secret key. This command produces a secure random string of at least 32 characters required for JWT signing.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/auth/jwt/tutorials/setup-test-jwt.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nopenssl rand -hex 16\n```\n\n----------------------------------------\n\nTITLE: Example Usage of Set Self-Hosted Engine URL Command\nDESCRIPTION: This example demonstrates how to set the project URL to 'example.com:3000' for a specific project named 'pet-lion-2649' using the DDN CLI.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_project_set-self-hosted-engine-url.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nddn project set-self-hosted-engine-url example.com:3000 --project pet-lion-2649\n```\n\n----------------------------------------\n\nTITLE: Opening Local Console\nDESCRIPTION: Command to open the local Hasura console for development.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/project-configuration/tutorials/work-with-multiple-repositories.mdx#2025-04-17_snippet_26\n\nLANGUAGE: ddn\nCODE:\n```\nddn console --local\n```\n\n----------------------------------------\n\nTITLE: Removing Unused Models via Hasura DDN CLI\nDESCRIPTION: CLI command to remove unused models/tables from your Hasura DDN project, helpful when dealing with a large number of tables that may cause build timeouts.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/data-sources/troubleshooting.mdx#2025-04-17_snippet_7\n\nLANGUAGE: plaintext\nCODE:\n```\nddn model remove <table>\n```\n\n----------------------------------------\n\nTITLE: Introspecting PostgreSQL Database in Hasura DDN\nDESCRIPTION: Introspects the PostgreSQL database to generate Hasura metadata for the 'my_pg' connector.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/project-configuration/tutorials/manage-multiple-environments.mdx#2025-04-17_snippet_2\n\nLANGUAGE: ddn\nCODE:\n```\nddn connector introspect my_pg\n```\n\n----------------------------------------\n\nTITLE: Command Options for ddn model list in SASS Format\nDESCRIPTION: Available options specific to the 'ddn model list' command, including context selection and subgraph configuration.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_model_list.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sass\nCODE:\n```\n    --ci                Disables the use of context\n-c, --context string    Name of the context to use. (default <current_context>)\n-h, --help              help for list\n    --subgraph string   Path to Subgraph config file\n```\n\n----------------------------------------\n\nTITLE: DDN Login Command Options\nDESCRIPTION: Available command-specific options for DDN login, including access token and help flags.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_auth_login.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sass\nCODE:\n```\n    --access-token string   The Personal Access Token or Service Account Token [env: HASURA_DDN_ACCESS_TOKEN]\n-h, --help                  help for login\n    --pat string            Personal Access token [env: HASURA_DDN_PAT] (DEPRECATED: use --access-token instead)\n```\n\n----------------------------------------\n\nTITLE: Inherited Options for DDN Context Set Command\nDESCRIPTION: These options are inherited from parent operations and apply to the 'ddn context set' command, including log level, prompting behavior, output format, and timeout settings.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_context_set.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sass\nCODE:\n```\n--log-level string   Log level. Can be DEBUG, WARN, INFO, ERROR, or FATAL. (default \"INFO\")\n--no-prompt          Do not prompt for required but missing flags\n--out string         Output format. Can be table, json or yaml. (default \"table\")\n--timeout int        Request timeout in seconds [env: HASURA_DDN_TIMEOUT] (default 100)\n```\n\n----------------------------------------\n\nTITLE: Provisioning Subgraphs in DDN CLI\nDESCRIPTION: This command creates a new subgraph in the cloud parent project. Replace <subgraph-name> with the desired name.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/project-configuration/subgraphs/working-with-multiple-repositories.mdx#2025-04-17_snippet_3\n\nLANGUAGE: ddn\nCODE:\n```\nddn project subgraph create <subgraph-name>\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub Repository in PromptQL Connector\nDESCRIPTION: TypeScript code snippet showing how to set the organization name and repository name in the GitHub connector configuration file.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/recipes/tutorials/github-assistant.mdx#2025-04-17_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// index.ts\n\n...\n  const manager = new GitHubIssueSyncManager('<org-name>', '<repo-name>');\n  if (!process.env.GITHUB_API_TOKEN) {\n...\n```\n\n----------------------------------------\n\nTITLE: Initializing Hasura DDN Project\nDESCRIPTION: Command to initialize the Hasura DDN project in the current directory.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/recipes/tutorials/bart-api.mdx#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nddn project init\n```\n\n----------------------------------------\n\nTITLE: Querying ClickHouse Data with GraphQL\nDESCRIPTION: This GraphQL query retrieves all fields (id, comment, user_id, post_id) from the 'comments' table.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/data-modeling/partials/classic-connectors/clickHouse/_model-create-tutorial.mdx#2025-04-17_snippet_6\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  comments {\n    id\n    comment\n    user_id\n    post_id\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing DDN Project in Bash\nDESCRIPTION: This command initializes a DDN project in the current directory using the DDN CLI. It should be run if the project has not been initialized previously.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/promptql-playground/troubleshooting.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nddn project init\n```\n\n----------------------------------------\n\nTITLE: Invalid Object Type Field Type Mapping Example\nDESCRIPTION: Demonstrates an invalid type mapping between a PostgreSQL INTEGER column and a String field type in an object type definition, which would raise an error after the 2025-03-11 compatibility date.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/metadata-reference/compatibility-config.mdx#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"kind\": \"ObjectType\",\n  \"version\": \"v1\",\n  \"definition\": {\n    \"name\": \"User\",\n    \"fields\": [\n      {\n        \"name\": \"age\",\n        \"type\": \"String!\" // Error: PostgreSQL column is INTEGER but object type defines it as String\n      }\n    ],\n    \"dataConnectorTypeMapping\": [\n      {\n        \"dataConnectorName\": \"postgres\",\n        \"dataConnectorObjectType\": \"users\",\n        \"fieldMapping\": {\n          \"age\": {\n            \"column\": {\n              \"name\": \"age\"\n            }\n          }\n        }\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Examples of DDN Connector Initialization\nDESCRIPTION: These examples demonstrate various ways to initialize Connectors, including interactive mode, specifying subgraphs, setting custom directories, and configuring ports for different connector types like Postgres and NodeJS.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_connector_init.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Initialize a Connector interactively in a step by step manner\n ddn connector init -i\n\n# Initialize a Postgres Connector \"mydb\" in the Subgraph \"app\"\n ddn connector init mydb --subgraph ./app/subgraph.yaml --hub-connector hasura/postgres\n\n# Initialize a Postgres Connector \"mydb\" inside the directory ./connector\n ddn connector init mydb --dir ./connector --hub-connector hasura/postgres\n\n# Initialize a NodeJS Connector \"mylambda\" in the Subgraph \"app\" on port 8765\n ddn connector init mylambda --subgraph ./app/subgraph.yaml  --hub-connector hasura/nodejs --configure-port 8765 \n```\n\n----------------------------------------\n\nTITLE: Updating Specific Command for Go Connector\nDESCRIPTION: This command updates a specific command named 'shoutName' for the 'my_go' connector. It applies any changes made to the function in the editor.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/data-modeling/partials/lambda-connectors/go/_command-update-tutorial.mdx#2025-04-17_snippet_2\n\nLANGUAGE: ddn\nCODE:\n```\nddn command update my_go shoutName\n```\n\n----------------------------------------\n\nTITLE: Displaying ClickHouse Connector Resources using DDN\nDESCRIPTION: This DDN command shows the found resources for the ClickHouse connector, including the newly added native query. It requires specifying the connector name as an argument.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/data-modeling/partials/classic-connectors/clickHouse/_model-create-native-query-how-to.mdx#2025-04-17_snippet_2\n\nLANGUAGE: ddn\nCODE:\n```\nddn connector show-resources <connector_name>\n```\n\n----------------------------------------\n\nTITLE: DDN Project Create Command Synopsis in Bash\nDESCRIPTION: The basic syntax for the 'ddn project create' command, showing the optional project name parameter and the [flags] placeholder for additional options.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_project_create.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nddn project create [project-name] [flags]\n```\n\n----------------------------------------\n\nTITLE: Example of Applying a SupergraphBuild to a Project\nDESCRIPTION: An example showing how to apply a specific SupergraphBuild version to a project named 'pet-lion-2649' using the --project flag.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_supergraph_build_apply.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Apply a SupergraphBuild to a Project \"pet-lion-2649\"\n ddn supergraph build apply <supergraph-build-version> --project pet-lion-2649\n```\n\n----------------------------------------\n\nTITLE: DDN Command Inherited Options\nDESCRIPTION: Options inherited from parent operations including logging, prompting, output format and timeout settings.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_command.mdx#2025-04-17_snippet_1\n\nLANGUAGE: sass\nCODE:\n```\n--log-level string   Log level. Can be DEBUG, WARN, INFO, ERROR, or FATAL. (default \"INFO\")\n--no-prompt          Do not prompt for required but missing flags\n--out string         Output format. Can be table, json or yaml. (default \"table\")\n--timeout int        Request timeout in seconds [env: HASURA_DDN_TIMEOUT] (default 100)\n```\n\n----------------------------------------\n\nTITLE: DDN Model Remove Usage Examples\nDESCRIPTION: Demonstrates various examples of using the ddn model remove command, including removing all models, specific models, and using glob patterns.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_model_remove.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Remove all Models using the subgraph set in current context\n ddn model remove \"*\"\n\n# Remove the Model \"Album\" in the \"app\" Subgraph\n ddn model remove Album --subgraph ./app/subgraph.yaml\n\n# Remove all the Models in the Subgraph \"app\"\n ddn model remove \"*\" --subgraph ./app/subgraph.yaml\n\n# Remove Models filtered by glob pattern in the Subgraph \"app\"\n ddn model remove \"user*\" --subgraph ./app/subgraph.yaml\n```\n\n----------------------------------------\n\nTITLE: Importing PqlChat Components in JSX\nDESCRIPTION: Import statement for PqlChat components used in the playground interface, including user interaction and query plan components.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/promptql-playground/overview.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { PqlChat, User, Pql, QueryPlanComponent } from \"@site/src/components/PqlChat/PqlChat\";\n```\n\n----------------------------------------\n\nTITLE: Example Usage of Self-Hosted Engine URL Command in Bash\nDESCRIPTION: A practical example showing how to set a build URL to \"example.com:3000\" for a specific project named \"pet-lion-2649\".\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_supergraph_build_set-self-hosted-engine-url.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Set build URL to \"example.com:3000\" for project \"pet-lion-2649\"\n ddn supergraph build set-self-hosted-engine-url example.com:3000 --build-version <build-version> --project pet-lion-2649\n```\n\n----------------------------------------\n\nTITLE: Applying Supergraph Build\nDESCRIPTION: Command to apply a supergraph build version.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/project-configuration/tutorials/work-with-multiple-repositories.mdx#2025-04-17_snippet_31\n\nLANGUAGE: ddn\nCODE:\n```\nddn supergraph build apply <supergraph-build-version>\n```\n\n----------------------------------------\n\nTITLE: Executing ddn connector-link add-resources Command in Bash\nDESCRIPTION: This snippet shows the basic syntax for running the 'ddn connector-link add-resources' command. It requires specifying the connector-link-name and supports additional flags.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_connector-link_add-resources.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nddn connector-link add-resources <connector-link-name> [flags]\n```\n\n----------------------------------------\n\nTITLE: Options Inherited from Parent Commands\nDESCRIPTION: Options that are inherited from parent commands and can be used with the 'ddn supergraph build create' command, including logging options, output format settings, and timeout configuration.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_supergraph_build_create.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sass\nCODE:\n```\n--log-level string   Log level. Can be DEBUG, WARN, INFO, ERROR, or FATAL. (default \"INFO\")\n--no-prompt          Do not prompt for required but missing flags\n--out string         Output format. Can be table, json or yaml. (default \"table\")\n--timeout int        Request timeout in seconds [env: HASURA_DDN_TIMEOUT] (default 100)\n```\n\n----------------------------------------\n\nTITLE: Command Options for ddn subgraph build apply\nDESCRIPTION: Available command-specific options for the 'ddn subgraph build apply' command, including options for context, project specification, and self-hosted data plane configuration.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_subgraph_build_apply.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sass\nCODE:\n```\n    --ci                       Disables the use of context\n-c, --context string           Name of the context to use. (default <current_context>)\n-h, --help                     help for apply\n-p, --project string           DDN Project name\n    --self-hosted-data-plane   Is the data plane self hosted?\n```\n\n----------------------------------------\n\nTITLE: DDN Global Command Options\nDESCRIPTION: Inherited global options that apply to all DDN CLI commands, including logging, output format, and timeout settings.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_auth_login.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sass\nCODE:\n```\n--log-level string   Log level. Can be DEBUG, WARN, INFO, ERROR, or FATAL. (default \"INFO\")\n--no-prompt          Do not prompt for required but missing flags\n--out string         Output format. Can be table, json or yaml. (default \"table\")\n--timeout int        Request timeout in seconds [env: HASURA_DDN_TIMEOUT] (default 100)\n```\n\n----------------------------------------\n\nTITLE: Inherited Options for DDN Run Command\nDESCRIPTION: Shows the options inherited from parent commands when using 'ddn run'. These include logging configuration, prompting behavior, output format, and request timeout settings.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_run.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sass\nCODE:\n```\n--log-level string   Log level. Can be DEBUG, WARN, INFO, ERROR, or FATAL. (default \"INFO\")\n--no-prompt          Do not prompt for required but missing flags\n--out string         Output format. Can be table, json or yaml. (default \"table\")\n--timeout int        Request timeout in seconds [env: HASURA_DDN_TIMEOUT] (default 100)\n```\n\n----------------------------------------\n\nTITLE: Retrieving AWS Availability Zone IDs\nDESCRIPTION: This Bash command retrieves the Availability Zone IDs for a specified AWS region, which may be needed when providing optional information to the Hasura team.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/private-ddn/creating-a-data-plane/byoc.mdx#2025-04-17_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\naws ec2 describe-availability-zones \\\n--region <region> \\\n--output table \\\n--query \"AvailabilityZones[?State=='available'] | [].{ZoneName: ZoneName, ZoneId: ZoneId}\"\n```\n\n----------------------------------------\n\nTITLE: Initializing a DDN Connector using CLI\nDESCRIPTION: This snippet shows the basic syntax for initializing a new Connector using the DDN CLI. It allows specifying a connector name and type, with additional flags for customization.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_connector_init.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nddn connector init [connector-name] --hub-connector <connector-type> [flags]\n```\n\n----------------------------------------\n\nTITLE: Cloning Public Repository with DDN Metadata\nDESCRIPTION: Command to clone a public GitHub repository containing the DDN supergraph metadata, which is needed for the CI/CD pipeline to access and manage your project configuration.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/deployment/hasura-ddn/ci-cd.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/<your-org>/<your-repo>.git\n```\n\n----------------------------------------\n\nTITLE: Creating Supergraph Build with DDN CLI\nDESCRIPTION: Command to create a new supergraph build using the DDN CLI. This packages your metadata changes into a deployable build.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/deployment/hasura-ddn/ci-cd.mdx#2025-04-17_snippet_4\n\nLANGUAGE: ddn\nCODE:\n```\nddn supergraph build create\n```\n\n----------------------------------------\n\nTITLE: Changing Output Format in DDN CLI\nDESCRIPTION: Commands to change the default table output format of the DDN CLI to JSON or YAML for easier parsing or integration with other tools.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/faq.mdx#2025-04-17_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n--out=json\n```\n\nLANGUAGE: shell\nCODE:\n```\n--out=yaml\n```\n\n----------------------------------------\n\nTITLE: Starting Local Hasura DDN Services\nDESCRIPTION: This command starts the local Hasura DDN Engine and PostgreSQL connector services using Docker.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/_quickstart_template.mdx#2025-04-17_snippet_8\n\nLANGUAGE: ddn\nCODE:\n```\nddn run docker-start\n```\n\n----------------------------------------\n\nTITLE: Usage Examples - DDN Codemod\nDESCRIPTION: Examples demonstrating different ways to run the codemod, including running on the default supergraph, specific supergraph, or specific subgraph.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_codemod_upgrade-graphqlconfig-aggregate.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Run on the supergraph defined in the context\n ddn codemod upgrade-graphqlconfig-aggregate\n\n# Run on a specific supergraph\n ddn codemod upgrade-graphqlconfig-aggregate --supergraph ./supergraph.cloud.yaml\n\n# Run on a specific subgraph\n ddn codemod upgrade-graphqlconfig-aggregate --subgraph app/subgraph.yaml\n```\n\n----------------------------------------\n\nTITLE: Updating Connector Paths in Engine Compose File (YAML)\nDESCRIPTION: This snippet shows how to update the paths to the connector compose files in the main compose.yaml file. The paths should be changed to reflect the new subgraph name if the directory was renamed.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/project-configuration/tutorials/rename-subgraph.mdx#2025-04-17_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ninclude:\n  - path: <new-subgraph-name>/connector/<connector-1>/compose.yaml\n  - path: <new-subgraph-name>/connector/<connector-2>/compose.yaml\n  ...\nservices:\n  engine:\n    build:\n    ...\n```\n\n----------------------------------------\n\nTITLE: Adding Model to MongoDB Connector with DDN CLI\nDESCRIPTION: Command to add your model or operation to the connector. This step registers your native MongoDB operation with the connector framework.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/data-modeling/partials/classic-connectors/mongoDB/_command-create-native-operation-how-to.mdx#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nddn command add <connector_name> <operation_name>\n```\n\n----------------------------------------\n\nTITLE: Filtering by Nested Address Object in JSON\nDESCRIPTION: This JSON example demonstrates filtering albums by a postcode field within a nested Address object using the like operator.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/metadata-reference/boolean-expressions.mdx#2025-04-17_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{ \"album\": { \"Address\": { \"postcode\": { \"like\": \"N1\" } } } }\n```\n\n----------------------------------------\n\nTITLE: Returning Custom Error in Go Lambda Connector\nDESCRIPTION: Illustrates how to return a custom UnauthorizeError with a message and metadata in Go.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/business-logic/errors.mdx#2025-04-17_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage functions\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\n\t\"github.com/hasura/ndc-sdk-go/schema\"\n\t\"hasura-ndc.dev/ndc-go/types\"\n)\n\n// A hello argument\ntype HelloArguments struct {\n\tGreeting string `json:\"greeting\"`\n\tCount    *int   `json:\"count\"`\n}\n\n// A hello result\ntype HelloResult struct {\n\tReply string `json:\"reply\"`\n\tCount int    `json:\"count\"`\n}\n\n\nfunc FunctionHello(ctx context.Context, state *types.State, arguments *HelloArguments) (*HelloResult, error) {\n\tcount := 1\n\tauthorized := false // This is just an example\n\n\tif !authorized {\n\t\treturn nil, schema.UnauthorizeError(\"User is not authorized to perform this operation\", map[string]any{\n\t\t\t\"function\": \"hello\",\n\t\t})\n\t}\n\n\tif arguments.Count != nil {\n\t\tcount = *arguments.Count + 1\n\t}\n\treturn &HelloResult{\n\t\tReply: fmt.Sprintf(\"Hi! %s\", arguments.Greeting),\n\t\tCount: count,\n\t}, nil\n}\n```\n\n----------------------------------------\n\nTITLE: DDN Run Command Options\nDESCRIPTION: Lists the specific options available for the 'ddn run' command, currently only including the help flag.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_run.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sass\nCODE:\n```\n-h, --help   help for run\n```\n\n----------------------------------------\n\nTITLE: Opening Hasura DDN Console for Unauthenticated Requests\nDESCRIPTION: Command to open the Hasura DDN console locally for making unauthenticated requests. This enables testing the application in NoAuth mode.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/auth/noauth-mode.mdx#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nddn console --local\n```\n\n----------------------------------------\n\nTITLE: GraphQL Mutation Response in JSON\nDESCRIPTION: The JSON response from the GraphQL mutation, showing the affected rows and the details of the inserted user.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/data-modeling/partials/classic-connectors/postgreSQL/_command-create-tutorial.mdx#2025-04-17_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"insertUsers\": {\n      \"affectedRows\": 1,\n      \"returning\": [\n        {\n          \"id\": 4,\n          \"name\": \"Sean\",\n          \"age\": 21\n        }\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: DDN Model Remove Command Options\nDESCRIPTION: Lists the available options for the ddn model remove command, including context and pattern settings.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_model_remove.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sass\nCODE:\n```\n    --ci                Disables the use of context\n-c, --context string    Name of the context to use. (default <current_context>)\n-h, --help              help for remove\n    --pattern string    Pattern to detect targets. Can be 'glob' or 'literal'. (default \"glob\")\n    --subgraph string   Path to Subgraph config file\n```\n\n----------------------------------------\n\nTITLE: Executing ddn auth print-promptql-secret-key Command in Bash\nDESCRIPTION: This command prints the project's PromptQL secret key to STDOUT. It can be used with various flags to customize the output and specify the project context.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_auth_print-promptql-secret-key.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nddn auth print-promptql-secret-key [flags]\n```\n\n----------------------------------------\n\nTITLE: Executing ddn auth print-access-token Command in Bash\nDESCRIPTION: This command prints the access token to STDOUT. The access token is stored locally and is only available after authenticating your CLI using one of the options via the ddn auth login command.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_auth_print-access-token.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nddn auth print-access-token [flags]\n```\n\n----------------------------------------\n\nTITLE: Building and Initializing PromptQL Project\nDESCRIPTION: DDN commands to build the supergraph and initialize the project with PromptQL support.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/recipes/tutorials/kaggle-csv-sqlite.mdx#2025-04-17_snippet_6\n\nLANGUAGE: ddn\nCODE:\n```\nddn supergraph build local\nddn project init --with-promptql\n```\n\n----------------------------------------\n\nTITLE: Adding Hasura CLI Auto-Completion to PowerShell Profile\nDESCRIPTION: This line is added to the PowerShell profile to enable persistent auto-completion for Hasura CLI.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/installation.mdx#2025-04-17_snippet_11\n\nLANGUAGE: plaintext\nCODE:\n```\nddn completion powershell | Out-String | Invoke-Expression\n```\n\n----------------------------------------\n\nTITLE: Setting Up Hasura DDN Project\nDESCRIPTION: Commands to build the supergraph and initialize the Hasura DDN project.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/recipes/tutorials/duckduckgo-web-search.mdx#2025-04-17_snippet_3\n\nLANGUAGE: ddn\nCODE:\n```\nddn supergraph build local\nddn project init\n```\n\n----------------------------------------\n\nTITLE: Basic DDN Model Update Command Syntax\nDESCRIPTION: Basic command syntax for updating models in local metadata using the DDN CLI.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_model_update.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nddn model update <model-name> [flags]\n```\n\n----------------------------------------\n\nTITLE: Example Usage of DDN Project Subgraph Create Command\nDESCRIPTION: Examples demonstrating how to create a new Subgraph in a Hasura DDN Project, including creating a basic Subgraph and creating one with a custom description.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_project_subgraph_create.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Create a new Subgraph \"app\" in a Project\n ddn project subgraph create app --project pet-lion-2649\n\n# Create a new Subgraph \"app\" in a Project with a description\n ddn project subgraph create app --project pet-lion-2649 --description \"application management APIs\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving Subgraph Builds in DDN CLI\nDESCRIPTION: This command lists the available builds of subgraphs for use in other commands.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/project-configuration/subgraphs/working-with-multiple-repositories.mdx#2025-04-17_snippet_13\n\nLANGUAGE: ddn\nCODE:\n```\nddn subgraph build get\n```\n\n----------------------------------------\n\nTITLE: Querying Custom Function\nDESCRIPTION: Example GraphQL query demonstrating how to use the custom Python function in a PromptQL query\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/data-modeling/partials/lambda-connectors/python/_command-create-native-operation-how-to.mdx#2025-04-17_snippet_7\n\nLANGUAGE: graphql\nCODE:\n```\nquery MyCustomCode {\n  myCustomCode(myInput: \"My input\")\n}\n```\n\n----------------------------------------\n\nTITLE: Introspecting MongoDB Instance with DDN CLI\nDESCRIPTION: Command to introspect your MongoDB instance to discover available schemas and collections. This is the first step in setting up MongoDB native operations with your connector.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/data-modeling/partials/classic-connectors/mongoDB/_command-create-native-operation-how-to.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nddn connector introspect <connector_name>\n```\n\n----------------------------------------\n\nTITLE: Updating Single DDN Command\nDESCRIPTION: Updates a specific command named 'shout_name' in the Python connector using the DDN CLI.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/data-modeling/partials/lambda-connectors/python/_command-update-tutorial.mdx#2025-04-17_snippet_2\n\nLANGUAGE: ddn\nCODE:\n```\nddn command update my_py shout_name\n```\n\n----------------------------------------\n\nTITLE: Setting Subgraph Context for Billing\nDESCRIPTION: Sets the context to the billing subgraph configuration file for streamlined CLI commands.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/project-configuration/tutorials/work-with-multiple-repositories.mdx#2025-04-17_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\nddn context set subgraph ./billing/subgraph.yaml\n```\n\n----------------------------------------\n\nTITLE: Basic DDN Login Command Syntax\nDESCRIPTION: The basic syntax for the DDN authentication login command with optional flags.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_auth_login.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nddn auth login [flags]\n```\n\n----------------------------------------\n\nTITLE: Production Deployment\nDESCRIPTION: Creates a cloud build and deploys the supergraph to production.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/private-ddn/create-a-project-on-a-data-plane.mdx#2025-04-17_snippet_5\n\nLANGUAGE: ddn\nCODE:\n```\nddn supergraph build create\n```\n\n----------------------------------------\n\nTITLE: Executing DDN CLI Command to Upgrade Model Version\nDESCRIPTION: This snippet shows the basic syntax for running the 'ddn codemod upgrade-model-v1-to-v2' command. It updates the model version for each model in the supergraph's current context from 'v1' to 'v2'.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_codemod_upgrade-model-v1-to-v2.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nddn codemod upgrade-model-v1-to-v2 [flags]\n```\n\n----------------------------------------\n\nTITLE: Usage Examples for GraphQL Prefix Renaming\nDESCRIPTION: Demonstrates practical examples of using the rename-graphql-prefixes command, including adding new prefixes and changing existing ones.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_codemod_rename-graphql-prefixes.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Add root field and type name prefixes to the subgraph set in the context\n ddn codemod rename-graphql-prefixes --graphql-root-field 'app_' --graphql-type-name 'App_'\n\n# Change the root field prefix for the specified subgraph without modifying subgraph.yaml\n ddn codemod rename-graphql-prefixes --subgraph app/subgraph.yaml --graphql-root-field 'foo_' --from-graphql-root-field 'app_' --no-update-subgraph-config\n```\n\n----------------------------------------\n\nTITLE: Tracking the Name Transformation Function\nDESCRIPTION: Command to track the 'shoutName' function in the 'my_go' connector, making it available for use in the Hasura supergraph.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/data-modeling/partials/lambda-connectors/go/_command-create-tutorial.mdx#2025-04-17_snippet_3\n\nLANGUAGE: ddn\nCODE:\n```\nddn command add my_go shoutName\n```\n\n----------------------------------------\n\nTITLE: Building and Running Metadata Doc Generation\nDESCRIPTION: Commands to build and execute the documentation generator. Requires JSON schema files (hasura_yaml_schema_resolved.json, hml_schema_resolved.json, yaml_schema_resolved.json) to be present in the root directory.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/utilities/generate-metadata-docs/README.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\nnpm run start\n```\n\n----------------------------------------\n\nTITLE: Executing DDN Version Command in Bash\nDESCRIPTION: Basic command syntax for checking the DDN CLI version with optional flags.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_version.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nddn version [flags]\n```\n\n----------------------------------------\n\nTITLE: Building and Serving Supergraph API\nDESCRIPTION: Commands to build the local supergraph and start the Docker container for serving the API.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/data-modeling/partials/classic-connectors/postgreSQL/_command-create-native-operation-how-to.mdx#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nddn supergraph build local\nddn run docker-start\n```\n\n----------------------------------------\n\nTITLE: Example Usage of DDN CLI Context Upgrade Command\nDESCRIPTION: This example demonstrates how to upgrade the context configuration in the current Hasura directory from v2 to v3 using the DDN CLI.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_codemod_upgrade-context-v2-to-v3.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Upgrade context present in the current Hasura directory from v2 to v3\n ddn codemod upgrade-context-v2-to-v3 --dir .\n```\n\n----------------------------------------\n\nTITLE: Example Encoded JWT Token\nDESCRIPTION: Complete encoded JWT token string that represents the encoded version of the decoded payload example.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/auth/jwt/jwt-configuration.mdx#2025-04-17_snippet_2\n\nLANGUAGE: text\nCODE:\n```\neyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpYXQiOjE3MzU5MTY3MTgsImV4cCI6MTc5NjkxNjY3NywiY2xhaW1zLmp3dC5oYXN1cmEuaW8iOnsieC1oYXN1cmEtZGVmYXVsdC1yb2xlIjoidXNlciIsIngtaGFzdXJhLWFsbG93ZWQtcm9sZXMiOlsidXNlciIsImFkbWluIl0sIngtaGFzdXJhLXVzZXItaWQiOiIxMjMiLCJ4LWhhc3VyYS1vcmctaWQiOiI0NTYiLCJ4LWhhc3VyYS1jdXN0b20iOiJjdXN0b20tdmFsdWUifX0.5bwSMgxsyULY1uhCJxYd-sO35rCdznRCZ4YMLwDD5u8\n```\n\n----------------------------------------\n\nTITLE: Executing GraphQL Mutation for Updating Post Titles by Age\nDESCRIPTION: This GraphQL mutation demonstrates how to use the newly created native mutation to update post titles based on user age.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/data-modeling/partials/classic-connectors/postgreSQL/_command-create-native-operation-tutorial.mdx#2025-04-17_snippet_7\n\nLANGUAGE: graphql\nCODE:\n```\nmutation UpdatePostTitlesByAge {\n  updatePostTitlesByAge(age: \"25\") {\n    affectedRows\n    returning {\n      id\n      title\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using ddn subgraph build create Command Syntax\nDESCRIPTION: Basic command syntax for creating a SubgraphBuild on Hasura DDN using the CLI.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_subgraph_build_create.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nddn subgraph build create [flags]\n```\n\n----------------------------------------\n\nTITLE: Building Supergraph for Hasura Cloud in DDN\nDESCRIPTION: Command to build a new supergraph for a project on Hasura Cloud.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/data-modeling/iterate.mdx#2025-04-17_snippet_6\n\nLANGUAGE: ddn\nCODE:\n```\nddn supergraph build create\n```\n\n----------------------------------------\n\nTITLE: Inherited Options for DDN Connector Plugin\nDESCRIPTION: Options inherited from parent operations for the 'ddn connector plugin' command. These include settings for log level, output format, and request timeout.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_connector_plugin.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sass\nCODE:\n```\n--log-level string   Log level. Can be DEBUG, WARN, INFO, ERROR, or FATAL. (default \"INFO\")\n--no-prompt          Do not prompt for required but missing flags\n--out string         Output format. Can be table, json or yaml. (default \"table\")\n--timeout int        Request timeout in seconds [env: HASURA_DDN_TIMEOUT] (default 100)\n```\n\n----------------------------------------\n\nTITLE: Navigating to CSV Files Directory\nDESCRIPTION: Command to navigate to the directory where CSV files should be placed for import\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/recipes/tutorials/csv-files.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd app/connector/csv/csv_files\n```\n\n----------------------------------------\n\nTITLE: Building a DDN Supergraph\nDESCRIPTION: Creates a new build of the supergraph for local development, incorporating the newly added function.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/data-modeling/partials/lambda-connectors/typescript/_command-create-tutorial.mdx#2025-04-17_snippet_4\n\nLANGUAGE: ddn\nCODE:\n```\nddn supergraph build local\n```\n\n----------------------------------------\n\nTITLE: Opening the DDN Development Console\nDESCRIPTION: This command opens the DDN development console in local mode, providing a web interface for exploring and testing the GraphQL API.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/data-modeling/partials/classic-connectors/postgreSQL/_model-create-tutorial.mdx#2025-04-17_snippet_5\n\nLANGUAGE: ddn\nCODE:\n```\nddn console --local\n```\n\n----------------------------------------\n\nTITLE: Building Supergraph\nDESCRIPTION: Creates a new local build of the supergraph including custom functions\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/data-modeling/partials/lambda-connectors/typescript/_command-create-native-operation-how-to.mdx#2025-04-17_snippet_4\n\nLANGUAGE: ddn\nCODE:\n```\nddn supergraph build local\n```\n\n----------------------------------------\n\nTITLE: DDN Context Set Command Options\nDESCRIPTION: These are the specific options available for the 'ddn context set' command, including setting the context name and displaying help information.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_context_set.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sass\nCODE:\n```\n-c, --context string   Name of the context to use. (default <current_context>)\n-h, --help             help for set\n```\n\n----------------------------------------\n\nTITLE: Basic Command Syntax for DDN Subgraph Initialization\nDESCRIPTION: The basic syntax for initializing a new Subgraph in local metadata. This command creates a new named directory containing metadata and connector configuration files for data sources added to the subgraph.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_subgraph_init.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nddn subgraph init <subgraph-name> --dir <dir-name> [flags]\n```\n\n----------------------------------------\n\nTITLE: Verifying Current Subgraph Context in DDN CLI\nDESCRIPTION: Shows how to check the current subgraph context using the DDN CLI. This is useful for confirming which subgraph you're currently working with.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/project-configuration/subgraphs/working-with-multiple-subgraphs.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nddn context get subgraph\n```\n\n----------------------------------------\n\nTITLE: Generating JWT Token with Clerk SDK\nDESCRIPTION: JavaScript example showing how to generate a JWT token using Clerk's SDK.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/auth/jwt/tutorials/integrations/4-clerk.mdx#2025-04-17_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst jwt = await session.getToken({ template: \"hasura\" });\n```\n\n----------------------------------------\n\nTITLE: Example Script Usage with Custom Parameters\nDESCRIPTION: Example command showing how to run the script with a specific directory path and additional context text for the AI. This demonstrates how to focus the SEO improvements on particular topics.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/utilities/improve-front-matter-seo/README.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnode improve-seo.js /supergraph-modeling 'Remember to focus on cloud-related keywords. Or add the copy from\nOverview.mdx for the section.'\n```\n\n----------------------------------------\n\nTITLE: Applying Single Subgraph Build in DDN CLI\nDESCRIPTION: This command applies a single subgraph build. Available for Owner, Admin, and Subgraph Admin roles, but not for Subgraph Developer role.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/project-configuration/subgraphs/working-with-multiple-repositories.mdx#2025-04-17_snippet_12\n\nLANGUAGE: ddn\nCODE:\n```\nddn subgraph build apply <subgraph-build-version>\n```\n\n----------------------------------------\n\nTITLE: DDN Connector Build Logs Command Options\nDESCRIPTION: Available command-specific flags for customizing the log retrieval behavior.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_connector_build_logs.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sass\nCODE:\n```\n    --build          Specifies whether to show the build logs. (default: false)\n    --follow         Specifies whether to continuously follow the deployment logs. (default: false)\n-h, --help           help for logs\n    --since string   Specifies the starting time for log retrieval. Can be in ISO format (e.g. 2024-03-26T11:05:15Z) or a duration (e.g. 5m for 5 minutes ago). (By default, prints the entire available logs).\n```\n\n----------------------------------------\n\nTITLE: Viewing CLI Debug Logs\nDESCRIPTION: Command to enable debug logging level for the DDN CLI, providing verbose output for troubleshooting.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/faq.mdx#2025-04-17_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n--log-level=debug\n```\n\n----------------------------------------\n\nTITLE: DDN Header Forwarding Usage Examples\nDESCRIPTION: Examples demonstrating different ways to configure header forwarding using the DDN CLI, including using connector names and config files.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_codemod_configure-header-forwarding.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Configure header forwarding for the DataConnectorLink corresponding to Connector `mypostgres`\n ddn codemod configure-header-forwarding mypostgres\n\n# Configure header forwarding for the DataConnectorLink corresponding to Connector config file ./connector.yaml\n ddn codemod configure-header-forwarding --connector ./connector.yaml\n\n# Configure header forwarding for the DataConnectorLink `mypostgres`\n ddn codemod configure-header-forwarding --connector-link mypostgres\n```\n\n----------------------------------------\n\nTITLE: Opening DDN Development Console\nDESCRIPTION: Command to open the local DDN development console, providing a user interface for interacting with the custom Go connector and PromptQL.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/data-modeling/partials/lambda-connectors/go/_command-create-native-operation-how-to.mdx#2025-04-17_snippet_6\n\nLANGUAGE: ddn\nCODE:\n```\nddn console --local\n```\n\n----------------------------------------\n\nTITLE: Deleting a Project using DDN CLI in Bash\nDESCRIPTION: This command deletes a project on Hasura DDN. It requires the project name as an argument and can be used with optional flags.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_project_delete.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nddn project delete <project-name> [flags]\n```\n\n----------------------------------------\n\nTITLE: Installing DDN Completion for Linux Bash\nDESCRIPTION: Command to permanently install DDN CLI autocompletion script for bash shell on Linux systems.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_completion_bash.mdx#2025-04-17_snippet_1\n\nLANGUAGE: sass\nCODE:\n```\nddn completion bash > /etc/bash_completion.d/ddn\n```\n\n----------------------------------------\n\nTITLE: Using equals Boolean Filter in JSON\nDESCRIPTION: This JSON example demonstrates filtering data where the last_name field equals 'Bruce'.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/metadata-reference/boolean-expressions.mdx#2025-04-17_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{ \"last_name\": { \"equals\": \"Bruce\" } }\n```\n\n----------------------------------------\n\nTITLE: Setting Up Hasura CLI Auto-Completion for zsh on Linux\nDESCRIPTION: This command generates and installs the auto-completion script for Hasura CLI on Linux systems.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/installation.mdx#2025-04-17_snippet_4\n\nLANGUAGE: ddn\nCODE:\n```\nddn completion zsh > \"${fpath[1]}/_ddn\"\n```\n\n----------------------------------------\n\nTITLE: DDN Connector Inherited Options\nDESCRIPTION: Inherited command line options from parent operations, including logging level, prompting behavior, output format, and timeout settings.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_connector.mdx#2025-04-17_snippet_1\n\nLANGUAGE: sass\nCODE:\n```\n--log-level string   Log level. Can be DEBUG, WARN, INFO, ERROR, or FATAL. (default \"INFO\")\n--no-prompt          Do not prompt for required but missing flags\n--out string         Output format. Can be table, json or yaml. (default \"table\")\n--timeout int        Request timeout in seconds [env: HASURA_DDN_TIMEOUT] (default 100)\n```\n\n----------------------------------------\n\nTITLE: Adding Models with DDN CLI in Bash\nDESCRIPTION: Command syntax for adding new Models to local metadata using the DDN CLI. It specifies the connector link name and collection name, with optional flags.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_model_add.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nddn model add <connector-link-name> <collection-name> [flags]\n```\n\n----------------------------------------\n\nTITLE: Configuring GraphQL Aggregate Settings in YAML\nDESCRIPTION: Updates the GraphQL configuration to include aggregate settings. This defines how aggregate queries will be structured in the GraphQL API.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/metadata-reference/aggregate-expressions.mdx#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nkind: GraphqlConfig\nversion: v1\ndefinition:\n  query:\n    rootOperationTypeName: Query\n    argumentsInput:\n      fieldName: args\n    limitInput:\n      fieldName: limit\n    offsetInput:\n      fieldName: offset\n    filterInput:\n      fieldName: where\n      operatorNames:\n        and: _and\n        or: _or\n        not: _not\n        isNull: _is_null\n    orderByInput:\n      fieldName: order_by\n      enumDirectionValues:\n        asc: Asc\n        desc: Desc\n      enumTypeNames:\n        - directions:\n            - Asc\n            - Desc\n          typeName: OrderBy\n    aggregate:\n      filterInputFieldName: filter_input\n      countFieldName: _count\n      countDistinctFieldName: _count_distinct\n  mutation:\n    rootOperationTypeName: Mutation\n```\n\n----------------------------------------\n\nTITLE: Displaying Discovered Resources from Go Connector\nDESCRIPTION: This command shows the resources that were discovered from the 'my_go' connector during the introspection process.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/data-modeling/partials/lambda-connectors/go/_command-update-tutorial.mdx#2025-04-17_snippet_1\n\nLANGUAGE: ddn\nCODE:\n```\nddn connector show-resources my_go\n```\n\n----------------------------------------\n\nTITLE: Introspecting Go Connector with DDN CLI\nDESCRIPTION: Command to introspect the 'my_go' connector using the DDN CLI, which analyzes the connector's structure and capabilities.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/data-modeling/partials/lambda-connectors/go/_command-create-native-operation-how-to.mdx#2025-04-17_snippet_2\n\nLANGUAGE: ddn\nCODE:\n```\nddn connector introspect my_go\n```\n\n----------------------------------------\n\nTITLE: Databricks JDBC Connection Configuration\nDESCRIPTION: JDBC connection string format for Databricks with SQL warehouse and catalog configuration.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/data-sources/connect-to-a-source.mdx#2025-04-17_snippet_3\n\nLANGUAGE: jdbc\nCODE:\n```\njdbc:databricks://<host>:<port>/default;transportMode=http;ssl=1;AuthMech=3;httpPath=/sql/1.0/warehouses/<warehouse-id>;UID=token;PWD=<access-token>;ConnCatalog=main;\n```\n\n----------------------------------------\n\nTITLE: Updating Supergraph Configuration in YAML\nDESCRIPTION: Shows how to modify the supergraph.yaml file to remove references to a deleted subgraph by removing its path from the subgraphs list.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/project-configuration/tutorials/remove-subgraph.mdx#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nkind: Supergraph\nversion: v2\ndefinition:\n  subgraphs:\n    - globals/subgraph.yaml\n    - <subgraph-name>/subgraph.yaml\n    ...\n```\n\n----------------------------------------\n\nTITLE: Example of Installing a DDN Plugin\nDESCRIPTION: A practical example showing how to install a specific plugin named 'ndc-postgres' using the DDN CLI.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_plugins_install.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Install a plugin named \"ndc-postgres\"\n ddn plugins install ndc-postgres\n```\n\n----------------------------------------\n\nTITLE: Initializing Customers Subgraph Repository\nDESCRIPTION: Creates a new local project for the customers subgraph and maps it to the existing cloud project.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/project-configuration/tutorials/work-with-multiple-repositories.mdx#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nddn supergraph init customer-team --create-subgraph customers --with-project <project-name> --with-promptql && cd customer-team && git init\n```\n\n----------------------------------------\n\nTITLE: Executing ddn auth generate-promptql-secret-key Command in Bash\nDESCRIPTION: This command generates the project's PromptQL secret key and saves it to the global config. It can be run with optional flags to specify context, project, or CI mode.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_auth_generate-promptql-secret-key.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nddn auth generate-promptql-secret-key [flags]\n```\n\n----------------------------------------\n\nTITLE: Athena JDBC Connection Configuration\nDESCRIPTION: JDBC connection string format for Amazon Athena database with schema configuration.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/data-sources/connect-to-a-source.mdx#2025-04-17_snippet_1\n\nLANGUAGE: jdbc\nCODE:\n```\njdbc:athena://<host>:<port>/<database>?user=<username>&password=<password>\n```\n\n----------------------------------------\n\nTITLE: Introspecting Go Connector with DDN CLI\nDESCRIPTION: This command uses the DDN CLI to introspect a Go connector named 'my_go'. It analyzes the connector's structure and functionality.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/data-modeling/partials/lambda-connectors/go/_command-update-tutorial.mdx#2025-04-17_snippet_0\n\nLANGUAGE: ddn\nCODE:\n```\nddn connector introspect my_go\n```\n\n----------------------------------------\n\nTITLE: Building Supergraph Command\nDESCRIPTION: Command to build the DDN supergraph after configuration changes.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/auth/jwt/tutorials/integrations/4-clerk.mdx#2025-04-17_snippet_2\n\nLANGUAGE: ddn\nCODE:\n```\nddn supergraph build local\n```\n\n----------------------------------------\n\nTITLE: DDN Connector Build Logs Inherited Options\nDESCRIPTION: Global options inherited from parent commands that affect the log retrieval operation.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_connector_build_logs.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sass\nCODE:\n```\n--log-level string   Log level. Can be DEBUG, WARN, INFO, ERROR, or FATAL. (default \"INFO\")\n--no-prompt          Do not prompt for required but missing flags\n--out string         Output format. Can be table, json or yaml. (default \"table\")\n--timeout int        Request timeout in seconds [env: HASURA_DDN_TIMEOUT] (default 100)\n```\n\n----------------------------------------\n\nTITLE: Engine Container Error Example\nDESCRIPTION: Error output when required environment variables for the engine container are not properly configured, showing missing metadata and authentication configuration paths.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/faq.mdx#2025-04-17_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nerror: the following required arguments were not provided:\n--metadata-path <PATH>\n--authn-config-path <PATH>\n\nUsage: engine --metadata-path <PATH> --authn-config-path < PATH>\n\nFor more information, try '--help'\n```\n\n----------------------------------------\n\nTITLE: Examples of SupergraphBuild Creation Commands\nDESCRIPTION: Various examples demonstrating how to use the 'ddn supergraph build create' command with different options for building Supergraphs, including building with connectors, composing from subgraphs, and applying builds.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_supergraph_build_create.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Build the Connectors and the Supergraph\n ddn supergraph build create --supergraph supergraph.yaml --project pet-lion-2649 --env-file .env.cloud\n\n# Build the Supergraph without building the Connectors\n ddn supergraph build create --supergraph supergraph.yaml --project pet-lion-2649 --no-build-connectors\n\n# Build the Supergraph and update the link schema and target env file\n ddn supergraph build create --supergraph supergraph.yaml --project pet-lion-2649 --update-connector-link-schema --target-env-file .env.cloud\n\n# Build a composed Supergraph using Subgraphs with build versions and using the applied Supergraph Build as the base Supergraph (Advanced plan only)\n ddn supergraph build create --subgraph-version globals:c15b0b4031 --subgraph-version my_subgraph:c15b0b4031 --base-supergraph-on-applied\n\n# Build a composed Supergraph using Subgraphs with build versions and base Supergraph version (Advanced plan only)\n ddn supergraph build create --subgraph-version globals:c15b0b4031 --subgraph-version my_subgraph:c15b0b4031 --base-supergraph-version c15b0b4871\n\n# Build the Supergraph and also apply the build\n ddn supergraph build create --supergraph supergraph.yaml --project pet-lion-2649 --apply\n```\n\n----------------------------------------\n\nTITLE: Introspecting DDN Python Connector\nDESCRIPTION: Uses the DDN CLI to introspect a Python connector named 'my_py' to discover its capabilities and structure.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/data-modeling/partials/lambda-connectors/python/_command-update-tutorial.mdx#2025-04-17_snippet_0\n\nLANGUAGE: ddn\nCODE:\n```\nddn connector introspect my_py\n```\n\n----------------------------------------\n\nTITLE: Applying Subgraph Build\nDESCRIPTION: Command to apply a specific subgraph build to the active API.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/deployment/hasura-ddn/incremental-builds.mdx#2025-04-17_snippet_6\n\nLANGUAGE: ddn\nCODE:\n```\nddn subgraph build apply <build-version>\n```\n\n----------------------------------------\n\nTITLE: DDN Codemod Inherited Options\nDESCRIPTION: Options inherited from parent DDN commands, including logging configuration, output format selection, and timeout settings.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_codemod.mdx#2025-04-17_snippet_1\n\nLANGUAGE: sass\nCODE:\n```\n--log-level string   Log level. Can be DEBUG, WARN, INFO, ERROR, or FATAL. (default \"INFO\")\n--no-prompt          Do not prompt for required but missing flags\n--out string         Output format. Can be table, json or yaml. (default \"table\")\n--timeout int        Request timeout in seconds [env: HASURA_DDN_TIMEOUT] (default 100)\n```\n\n----------------------------------------\n\nTITLE: Creating and Populating a MongoDB Collection\nDESCRIPTION: Creates a new 'comments' collection in MongoDB and populates it with sample comment data. Each document contains comment_id, comment text, user_id, and post_id fields.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/data-modeling/partials/classic-connectors/mongoDB/_model-create-tutorial.mdx#2025-04-17_snippet_0\n\nLANGUAGE: js\nCODE:\n```\ndb.createCollection(\"comments\");\ndb.comments.insertMany([\n  {\n    comment_id: 1,\n    comment: \"Great post! Really enjoyed reading this.\",\n    user_id: 1,\n    post_id: 2,\n  },\n  {\n    comment_id: 2,\n    comment: \"Thanks for sharing your thoughts!\",\n    user_id: 2,\n    post_id: 1,\n  },\n  {\n    comment_id: 3,\n    comment: \"Interesting perspective.\",\n    user_id: 3,\n    post_id: 1,\n  },\n]);\n```\n\n----------------------------------------\n\nTITLE: Setting Supergraph Configuration in YAML\nDESCRIPTION: Example demonstrating the supergraph configuration within the context.yaml file, which specifies the path to the supergraph metadata object.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/project-configuration/project-management/manage-contexts.mdx#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ncontexts:\n  default:\n    project: great-ddn-1234\n    supergraph: ../supergraph.yaml\n    subgraph: ../app/subgraph.yaml\n    localEnvFile: ../.env\n    cloudEnvFile: ../.env.cloud\n```\n\n----------------------------------------\n\nTITLE: Basic Command Syntax - DDN Codemod AuthConfig Upgrade\nDESCRIPTION: Basic command syntax for upgrading AuthConfig versions using the DDN CLI codemod command.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_codemod_upgrade-auth-config-to-v3.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nddn codemod upgrade-auth-config-to-v3 [flags]\n```\n\n----------------------------------------\n\nTITLE: Configuring Type Permissions in YAML\nDESCRIPTION: Example of defining type permissions for an 'article' type with different field access levels for admin and user roles.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/metadata-reference/permissions.mdx#2025-04-17_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nkind: TypePermissions\nversion: v1\ndefinition:\n  typeName: article\n  permissions:\n    - role: admin\n      output:\n        allowedFields:\n          - article_id\n          - author_id\n          - title\n    - role: user\n      output:\n        allowedFields:\n          - article_id\n          - author_id\n```\n\n----------------------------------------\n\nTITLE: Example of Deleting a Specific Project in Bash\nDESCRIPTION: This example demonstrates how to delete a project named 'pet-lion-2649' on Hasura DDN using the DDN CLI.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_project_delete.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nddn project delete pet-lion-2649\n```\n\n----------------------------------------\n\nTITLE: Setting ModelPermissions in YAML for NoAuth Mode\nDESCRIPTION: Sample ModelPermissions configuration for a Posts model that grants the admin role full access with no filtering. This configuration is necessary when using NoAuth mode to control model-level access.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/auth/noauth-mode.mdx#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nkind: ModelPermissions\nversion: v1\ndefinition:\n  modelName: Posts\n  permissions:\n    - role: admin\n      select:\n        filter: null\n        allowSubscriptions: true\n```\n\n----------------------------------------\n\nTITLE: Initialize Supergraph Project with PromptQL\nDESCRIPTION: Creates a new project directory for subgraph example and changes into it\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/project-configuration/tutorials/work-with-multiple-subgraphs.mdx#2025-04-17_snippet_0\n\nLANGUAGE: ddn\nCODE:\n```\nddn supergraph init subgraph-example --with-promptql && cd subgraph-example\n```\n\n----------------------------------------\n\nTITLE: DDN Connector Link Command Options\nDESCRIPTION: Available command options for customizing the DataConnectorLink addition process, including configuration and context settings.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_connector-link_add.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sass\nCODE:\n```\n    --ci                                 Disables the use of context\n    --configure-connector-token string   Token used to authenticate requests to the Connector\n    --configure-host string              Read and Write URL of the Connector\n-c, --context string                     Name of the context to use. (default <current_context>)\n-h, --help                               help for add\n    --subgraph string                    Path to Subgraph config file\n    --target-env-file string             Subgraph env file to write the connector URLs to\n```\n\n----------------------------------------\n\nTITLE: Creating and Populating a Comments Table in PostgreSQL\nDESCRIPTION: This SQL snippet creates a new 'comments' table in PostgreSQL with primary key and required fields, then populates it with three sample comments. The table includes columns for ID, comment text, user ID, and post ID.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/data-modeling/partials/classic-connectors/postgreSQL/_model-create-tutorial.mdx#2025-04-17_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE public.comments (\n  id serial PRIMARY KEY,\n  comment text NOT NULL,\n  user_id integer NOT NULL,\n  post_id integer NOT NULL\n);\n\nINSERT INTO public.comments (comment, user_id, post_id)\nVALUES\n  ('Great post! Really enjoyed reading this.', 1, 2),\n  ('Thanks for sharing your thoughts!', 2, 1),\n  ('Interesting perspective.', 3, 1);\n```\n\n----------------------------------------\n\nTITLE: Initializing a Hasura Go Connector\nDESCRIPTION: Command to initialize a new connector named 'my_go' using the interactive mode to select hasura/go from the available templates.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/data-modeling/partials/lambda-connectors/go/_command-create-tutorial.mdx#2025-04-17_snippet_0\n\nLANGUAGE: ddn\nCODE:\n```\nddn connector init my_go -i\n```\n\n----------------------------------------\n\nTITLE: Updating Docker Compose Configuration for PromptQL Playground in YAML\nDESCRIPTION: This YAML snippet shows how to update the docker-compose.yaml file to mount the PromptQL Playground state file. It ensures thread data persistence across service restarts.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/promptql-playground/troubleshooting.mdx#2025-04-17_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n...\npromptql-playground:\n   ...\n   volumes:\n     ...\n     - ./.promptql_playground.db:/app/promptql_playground/promptql_playground.db\n   ...\n```\n\n----------------------------------------\n\nTITLE: Updating All Commands for PostgreSQL Connector\nDESCRIPTION: Updates all commands (\"*\" wildcard) associated with the 'my_pg' PostgreSQL connector. This refreshes the command metadata based on the latest database schema.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/data-modeling/partials/classic-connectors/postgreSQL/_command-update-tutorial.mdx#2025-04-17_snippet_2\n\nLANGUAGE: ddn\nCODE:\n```\nddn command update my_pg \"*\"\n```\n\n----------------------------------------\n\nTITLE: Command-specific options for ddn context get\nDESCRIPTION: The flags specific to the 'ddn context get' command, including the ability to specify a different context using the -c or --context flag.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_context_get.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sass\nCODE:\n```\n-c, --context string   Name of the context to use. (default <current_context>)\n-h, --help             help for get\n```\n\n----------------------------------------\n\nTITLE: Cleaning Up and Restarting the App\nDESCRIPTION: Command to reset the data and restart the application from scratch.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/recipes/tutorials/huggingface-csv-parquet-sqlite.mdx#2025-04-17_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose down -v && ddn run docker-start\n```\n\n----------------------------------------\n\nTITLE: DDN Connector Build Base Options\nDESCRIPTION: Basic command-line options available for the ddn connector build command.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_connector_build.mdx#2025-04-17_snippet_0\n\nLANGUAGE: sass\nCODE:\n```\n-h, --help   help for build\n```\n\n----------------------------------------\n\nTITLE: MongoDB Native Mutation Response\nDESCRIPTION: JSON response from executing the insertUser mutation, showing successful insertion with status indicators.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/data-modeling/partials/classic-connectors/mongoDB/_command-create-tutorial.mdx#2025-04-17_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"insertUser\": {\n      \"ok\": 1,\n      \"n\": 1\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Single Subgraph Build in DDN CLI\nDESCRIPTION: This command applies a single subgraph build. Available for Owner, Admin, and Subgraph Admin roles, but not for Subgraph Developer role.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/project-configuration/subgraphs/working-with-multiple-repositories.mdx#2025-04-17_snippet_16\n\nLANGUAGE: ddn\nCODE:\n```\nddn subgraph build apply --subgraph-version <subgraph_name:subgraph_version>\n```\n\n----------------------------------------\n\nTITLE: DDN Header Forwarding Command Options\nDESCRIPTION: Available command-specific options for configuring header forwarding in DDN.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_codemod_configure-header-forwarding.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sass\nCODE:\n```\n    --connector string        Path to Connector YAML config file\n    --connector-link string   Name of the DataConnectorLink to configure\n-h, --help                    help for configure-header-forwarding\n    --subgraph string         Path to Subgraph config file\n```\n\n----------------------------------------\n\nTITLE: Displaying Options for DDN Subgraph Command in SASS\nDESCRIPTION: This code snippet shows the available options for the 'ddn subgraph' command. It includes the help option and its usage.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_subgraph.mdx#2025-04-17_snippet_0\n\nLANGUAGE: sass\nCODE:\n```\n-h, --help   help for subgraph\n```\n\n----------------------------------------\n\nTITLE: Executing ddn subgraph build apply Command in Bash\nDESCRIPTION: The basic syntax for applying a Subgraph build on Hasura DDN. The command requires a subgraph-build-version parameter and supports various flags for configuration.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_subgraph_build_apply.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nddn subgraph build apply <subgraph-build-version> [flags]\n```\n\n----------------------------------------\n\nTITLE: Generating Hasura CLI Auto-Completion Script for PowerShell\nDESCRIPTION: This command generates and applies the auto-completion script for Hasura CLI in the current PowerShell session.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/installation.mdx#2025-04-17_snippet_8\n\nLANGUAGE: ddn\nCODE:\n```\nddn completion powershell | Out-String | Invoke-Expression\n```\n\n----------------------------------------\n\nTITLE: DDN Context Unset Command Syntax\nDESCRIPTION: Basic command syntax for unsetting context values in DDN CLI. Supports unsetting values for keys like noBuildConnectors, project, supergraph, subgraph, localEnvFile, cloudEnvFile, and selfHostedDataPlane.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_context_unset.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nddn context unset <key> (Allowed keys: noBuildConnectors, project, supergraph, subgraph, localEnvFile, cloudEnvFile, selfHostedDataPlane) [flags]\n```\n\n----------------------------------------\n\nTITLE: Initializing Supergraph Project - Basic Command Syntax\nDESCRIPTION: The basic command syntax for initializing a new Supergraph project directory using the DDN CLI.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_supergraph_init.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nddn supergraph init <path-to-project-dir> [flags]\n```\n\n----------------------------------------\n\nTITLE: Configuring Get Article Command Permissions in YAML\nDESCRIPTION: This YAML snippet shows how to set up command permissions for a 'get_article_by_id' command. It allows admin full access and restricts the user role to a specific article ID using an argument preset.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/auth/permissions/command-permissions.mdx#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nkind: CommandPermissions\nversion: v1\ndefinition:\n  commandName: get_article_by_id\n  permissions:\n    - role: admin\n      allowExecution: true\n    - role: user\n      allowExecution: true\n      argumentPresets:\n        - argument: id\n          value:\n            literal: 100\n```\n\n----------------------------------------\n\nTITLE: DDN Command List Options in SASS\nDESCRIPTION: This snippet lists the available options for the 'ddn command list' command. It includes flags for disabling context use, specifying a context, getting help, and specifying a Subgraph config file path.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_command_list.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sass\nCODE:\n```\n    --ci                Disables the use of context\n-c, --context string    Name of the context to use. (default <current_context>)\n-h, --help              help for list\n    --subgraph string   Path to Subgraph config file\n```\n\n----------------------------------------\n\nTITLE: Viewing Discovered Resources from Node.js Connector\nDESCRIPTION: This command displays all resources that were discovered during the introspection process of your connector. It helps verify what commands and functions are available.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/data-modeling/partials/lambda-connectors/typescript/_command-update-tutorial.mdx#2025-04-17_snippet_1\n\nLANGUAGE: ddn\nCODE:\n```\nddn connector show-resources my_ts\n```\n\n----------------------------------------\n\nTITLE: Updating Environment Variables for Connector\nDESCRIPTION: Environment variable configuration for connector URLs and authorization headers.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/deployment/hasura-ddn/incremental-builds.mdx#2025-04-17_snippet_1\n\nLANGUAGE: env\nCODE:\n```\nAPP_MY_CONNECTOR_CONNECTION_URI=\"<existing-connection-uri>\"\nAPP_MY_CONNECTOR_AUTHORIZATION_HEADER=\"<new-authorization-header>\"\nAPP_MY_CONNECTOR_READ_URL=\"<new-read-url>\"\nAPP_MY_CONNECTOR_WRITE_URL=\"<new-write-url>\"\n```\n\n----------------------------------------\n\nTITLE: Setting PostgreSQL Connection String\nDESCRIPTION: Shell command to add PostgreSQL connection string to .env file\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/recipes/tutorials/add-vector-search-to-postgresql.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\necho APP_DATABASE_URL=postgres://username:password@host:port/database >> .env\n```\n\n----------------------------------------\n\nTITLE: Inherited Options for 'ddn model show' Command in SASS\nDESCRIPTION: Describes options inherited from parent operations, including log level, prompting behavior, output format, and timeout settings.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_model_show.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sass\nCODE:\n```\n--log-level string   Log level. Can be DEBUG, WARN, INFO, ERROR, or FATAL. (default \"INFO\")\n--no-prompt          Do not prompt for required but missing flags\n--out string         Output format. Can be table, json or yaml. (default \"table\")\n--timeout int        Request timeout in seconds [env: HASURA_DDN_TIMEOUT] (default 100)\n```\n\n----------------------------------------\n\nTITLE: Loading DDN Completion for Current Bash Session\nDESCRIPTION: Command to generate and load DDN CLI autocompletion script for the current bash shell session.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_completion_bash.mdx#2025-04-17_snippet_0\n\nLANGUAGE: sass\nCODE:\n```\nsource <(ddn completion bash)\n```\n\n----------------------------------------\n\nTITLE: DDN Context Unset Usage Examples\nDESCRIPTION: Example commands showing how to unset project name and supergraph config file path from the context.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_context_unset.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Unset the Project name set in the context\n ddn context unset project\n\n# Unset the Supergraph config file path set in the context\n ddn context unset supergraph\n```\n\n----------------------------------------\n\nTITLE: Defining Users-Posts Relationship in YAML\nDESCRIPTION: YAML configuration that defines a one-to-many relationship from Users to Posts models using the userId field as the mapping key.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/data-modeling/partials/classic-connectors/clickHouse/_relationship-create-model-to-model.mdx#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nkind: Relationship\nversion: v1\ndefinition:\n  name: posts\n  sourceType: Users\n  target:\n    model:\n      name: Posts\n      relationshipType: Array\n  mapping:\n    - source:\n        fieldPath:\n          - fieldName: userId\n      target:\n        modelField:\n          - fieldName: userId\n```\n\n----------------------------------------\n\nTITLE: Initializing Go Connector with DDN CLI\nDESCRIPTION: Command to initialize a new connector named 'my_go' using the DDN CLI, selecting the hasura/go template interactively.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/data-modeling/partials/lambda-connectors/go/_command-create-native-operation-how-to.mdx#2025-04-17_snippet_0\n\nLANGUAGE: ddn\nCODE:\n```\nddn connector init my_go -i\n```\n\n----------------------------------------\n\nTITLE: Options inherited from parent operations\nDESCRIPTION: List of options inherited from parent commands that can be used with the ddn subgraph delete command, including log level, prompting behavior, output format, and request timeout.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_subgraph_delete.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sass\nCODE:\n```\n--log-level string   Log level. Can be DEBUG, WARN, INFO, ERROR, or FATAL. (default \"INFO\")\n--no-prompt          Do not prompt for required but missing flags\n--out string         Output format. Can be table, json or yaml. (default \"table\")\n--timeout int        Request timeout in seconds [env: HASURA_DDN_TIMEOUT] (default 100)\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query for Users with Response\nDESCRIPTION: A complete GraphQL query example that fetches user data with corresponding JSON response showing results.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/wiki/kitchen-sink.mdx#2025-04-17_snippet_6\n\nLANGUAGE: graphql\nCODE:\n```\nquery Users {\n  users {\n    id\n    name\n    email\n  }\n }\n```\n\n----------------------------------------\n\nTITLE: Creating Directory for MongoDB Native Mutations\nDESCRIPTION: Creates a new directory structure to store MongoDB native mutation configurations.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/data-modeling/partials/classic-connectors/mongoDB/_command-create-tutorial.mdx#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nmkdir -p app/connector/my_mongo/native_mutations/\n```\n\n----------------------------------------\n\nTITLE: Building DDN Supergraph\nDESCRIPTION: Creates a new local build of the DDN supergraph. This step compiles the schema and resolvers for the GraphQL API based on the added models.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/data-modeling/partials/classic-connectors/mongoDB/_model-create-tutorial.mdx#2025-04-17_snippet_3\n\nLANGUAGE: ddn\nCODE:\n```\nddn supergraph build local\n```\n\n----------------------------------------\n\nTITLE: Installing DDN Completions on macOS\nDESCRIPTION: Command to permanently install DDN CLI completions for Zsh on macOS systems using Homebrew.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_completion_zsh.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sass\nCODE:\n```\nddn completion zsh > $(brew --prefix)/share/zsh/site-functions/_ddn\n```\n\n----------------------------------------\n\nTITLE: DDN Header Forwarding Inherited Options\nDESCRIPTION: Options inherited from parent operations that can be used with the header forwarding command.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_codemod_configure-header-forwarding.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sass\nCODE:\n```\n--log-level string   Log level. Can be DEBUG, WARN, INFO, ERROR, or FATAL. (default \"INFO\")\n--no-prompt          Do not prompt for required but missing flags\n--out string         Output format. Can be table, json or yaml. (default \"table\")\n--timeout int        Request timeout in seconds [env: HASURA_DDN_TIMEOUT] (default 100)\n```\n\n----------------------------------------\n\nTITLE: DDN Connector Remove Command Options\nDESCRIPTION: This snippet lists the available options for the 'ddn connector remove' command. It includes options for specifying the connector, subgraph, context, and other parameters that modify the behavior of the remove operation.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_connector_remove.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sass\nCODE:\n```\n    --ci                                Disables the use of context\n    --connector string                  Path to Connector YAML config file\n    --connector-link string             DataConnectorLink corresponding to the Connector\n-c, --context string                    Name of the context to use. (default <current_context>)\n-h, --help                              help for remove\n    --remove-from-compose-file string   The compose file to include the generated connector compose file\n    --subgraph string                   SubgraphConfig file to remove the Connector from\n    --target-env-file stringArray       Paths to the .env files\n```\n\n----------------------------------------\n\nTITLE: DDN Connector Setup Commands\nDESCRIPTION: Series of DDN CLI commands to introspect MongoDB instance, show resources, and add the model.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/data-modeling/partials/classic-connectors/mongoDB/_model-create-native-query-tutorial.mdx#2025-04-17_snippet_2\n\nLANGUAGE: ddn\nCODE:\n```\nddn connector introspect <connector_name>\n```\n\nLANGUAGE: ddn\nCODE:\n```\nddn connector show-resources <connector_name>\n```\n\nLANGUAGE: ddn\nCODE:\n```\nddn model add <connector_name> usersRankedByAge\n```\n\n----------------------------------------\n\nTITLE: Starting Docker Services\nDESCRIPTION: Command to start the Docker services for the PromptQL environment\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/data-modeling/partials/lambda-connectors/python/_command-create-native-operation-how-to.mdx#2025-04-17_snippet_5\n\nLANGUAGE: ddn\nCODE:\n```\nddn run docker-start\n```\n\n----------------------------------------\n\nTITLE: DDN CLI Model Upgrade Command Options\nDESCRIPTION: This snippet lists the specific options available for the 'ddn codemod upgrade-model-v1-to-v2' command, including flags for CI mode, context selection, and specifying supergraph or subgraph paths.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_codemod_upgrade-model-v1-to-v2.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sass\nCODE:\n```\n    --ci                  Disables the use of context\n-c, --context string      Name of the context to use. (default <current_context>)\n-h, --help                help for upgrade-model-v1-to-v2\n    --subgraph string     Path to Subgraph config file\n    --supergraph string   Path to Supergraph config file\n```\n\n----------------------------------------\n\nTITLE: Configuring AuthConfig for Webhook Authentication in Hasura DDN\nDESCRIPTION: Example YAML configuration for setting up webhook authentication in Hasura. This configuration defines a POST method webhook with custom header forwarding for authorization and content-type headers, plus an additional user-agent header.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/auth/webhook/webhook-mode.mdx#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nkind: AuthConfig\nversion: v3\ndefinition:\n  mode:\n    webhook:\n      url:\n        valueFromEnv: AUTH_WEBHOOK_URL\n      method: POST\n      customHeadersConfig:\n        body:\n          headers:\n            forward:\n              - authorization\n              - content-type\n        headers:\n          additional:\n            user-agent: \"Hasura DDN\"\n```\n\n----------------------------------------\n\nTITLE: Executing DDN CLI Command for Supergraph Config Upgrade\nDESCRIPTION: This command upgrades all Supergraph config files from v1 to v2 in the specified project directory. It requires the --dir flag to specify the project directory.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_codemod_upgrade-supergraph-config-v1-to-v2.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nddn codemod upgrade-supergraph-config-v1-to-v2 --dir <project-dir> [flags]\n```\n\n----------------------------------------\n\nTITLE: DDN Connector Link Update Command Options\nDESCRIPTION: Available command-specific options for the update operation.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_connector-link_update.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sass\nCODE:\n```\n    --add-all-resources      Add all Models, Commands and Relationships from the updated DataConnectorLink to the local metadata\n    --ci                     Disables the use of context\n-c, --context string         Name of the context to use. (default <current_context>)\n-e, --env stringArray        Environment variable, e.g. key=val. Can be repeated to provide multiple env vars\n    --env-file stringArray   Path to .env file. Can be repeated to provide multiple env files\n-h, --help                   help for update\n    --subgraph string        Path to Subgraph config file\n```\n\n----------------------------------------\n\nTITLE: Setting HASURA_DDN_PROJECT_DIRECTORY Environment Variable in Bash\nDESCRIPTION: Shows how to set the HASURA_DDN_PROJECT_DIRECTORY environment variable to specify the project directory containing the hasura.yaml file.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/index.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nHASURA_DDN_PROJECT_DIRECTORY=/path/to/project\n```\n\n----------------------------------------\n\nTITLE: Running ddn context get-current-context Command in Bash\nDESCRIPTION: Command syntax for retrieving the name and contents of the current context using the DDN CLI.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_context_get-current-context.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nddn context get-current-context [flags]\n```\n\n----------------------------------------\n\nTITLE: Configuring Additional JDBC Properties\nDESCRIPTION: Example of how to specify additional JDBC properties as key-value pairs. These properties are passed to the JDBC driver to modify behavior, such as enabling multiple query statements.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/connectors/mysql/configuration.mdx#2025-04-17_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jdbcProperties\": { \"allowMultiQueries\": \"true\" }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Environment Variables for PromptQL GitHub Project\nDESCRIPTION: Command to create a .env file from the provided example, which will be used to store the GitHub API token.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/recipes/tutorials/github-assistant.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncp .env.example .env\n```\n\n----------------------------------------\n\nTITLE: Starting Docker for DDN Project\nDESCRIPTION: Command to start the Docker containers for the DDN project.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/recipes/tutorials/bart-api.mdx#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nddn run docker-start\n```\n\n----------------------------------------\n\nTITLE: Displaying MongoDB Resources with DDN CLI\nDESCRIPTION: Command to show the resources found after introspection. This helps verify that your MongoDB collections and schemas were correctly detected.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/data-modeling/partials/classic-connectors/mongoDB/_command-create-native-operation-how-to.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nddn connector show-resources <connector_name>\n```\n\n----------------------------------------\n\nTITLE: DDN CLI Logout Command Options in Sass\nDESCRIPTION: This snippet shows the available options for the 'ddn auth logout' command, including the help flag. It also lists options inherited from parent operations, such as log level, prompting behavior, output format, and timeout settings.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_auth_logout.mdx#2025-04-17_snippet_1\n\nLANGUAGE: sass\nCODE:\n```\n-h, --help   help for logout\n```\n\nLANGUAGE: sass\nCODE:\n```\n--log-level string   Log level. Can be DEBUG, WARN, INFO, ERROR, or FATAL. (default \"INFO\")\n--no-prompt          Do not prompt for required but missing flags\n--out string         Output format. Can be table, json or yaml. (default \"table\")\n--timeout int        Request timeout in seconds [env: HASURA_DDN_TIMEOUT] (default 100)\n```\n\n----------------------------------------\n\nTITLE: Bash Command in Danger Admonition\nDESCRIPTION: A bash command showing how to update a 'Users' model using the DDN CLI, presented with a danger warning.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/wiki/kitchen-sink.mdx#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nddn model update Users\n```\n\n----------------------------------------\n\nTITLE: Options for 'ddn project' Command\nDESCRIPTION: Lists the available options specific to the 'ddn project' command, showing the help flag that displays usage information.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_project.mdx#2025-04-17_snippet_0\n\nLANGUAGE: sass\nCODE:\n```\n-h, --help   help for project\n```\n\n----------------------------------------\n\nTITLE: Starting DDN Services with Docker\nDESCRIPTION: Command to start the DDN services using Docker, which includes the custom Go connector and other necessary components.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/data-modeling/partials/lambda-connectors/go/_command-create-native-operation-how-to.mdx#2025-04-17_snippet_5\n\nLANGUAGE: ddn\nCODE:\n```\nddn run docker-start\n```\n\n----------------------------------------\n\nTITLE: Usage Example - Enable PromptQL\nDESCRIPTION: Example showing how to use the command to enable PromptQL in a project.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_codemod_enable-promptql.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Enable PromptQL in an existing project\n ddn codemod enable-promptql\n```\n\n----------------------------------------\n\nTITLE: Inherited Options - Parent Operations\nDESCRIPTION: Options inherited from parent commands including logging level, output format, timeout settings, and prompt configurations.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_codemod_enable-promptql.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sass\nCODE:\n```\n--log-level string   Log level. Can be DEBUG, WARN, INFO, ERROR, or FATAL. (default \"INFO\")\n--no-prompt          Do not prompt for required but missing flags\n--out string         Output format. Can be table, json or yaml. (default \"table\")\n--timeout int        Request timeout in seconds [env: HASURA_DDN_TIMEOUT] (default 100)\n```\n\n----------------------------------------\n\nTITLE: Enabling Required GCP APIs\nDESCRIPTION: Command to enable necessary Google Cloud APIs for Hasura DDN deployment including compute, DNS, GKE hub, and certificate manager services.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/private-ddn/creating-a-data-plane/byoc.mdx#2025-04-17_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ngcloud services enable \\\n  compute.googleapis.com \\\n  dns.googleapis.com \\\n  gkehub.googleapis.com \\\n  multiclusterservicediscovery.googleapis.com \\\n  trafficdirector.googleapis.com \\\n  multiclusteringress.googleapis.com \\\n  container.googleapis.com \\\n  certificatemanager.googleapis.com --project ${GCP_PROJECT_ID}\n```\n\n----------------------------------------\n\nTITLE: Defining FunctionName in Markdown\nDESCRIPTION: Defines the FunctionName type as a string representing the name of a function backing a command.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/metadata-reference/commands.mdx#2025-04-17_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\n#### FunctionName {#command-functionname}\n\nThe name of a function backing the command.\n\n\n**Value:** string\n```\n\n----------------------------------------\n\nTITLE: Starting PromptQL Docker Containers\nDESCRIPTION: Command to start the PromptQL API server, engine, and connector using Docker.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/recipes/tutorials/github-assistant.mdx#2025-04-17_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nddn run docker-start\n```\n\n----------------------------------------\n\nTITLE: Executing ddn project init Command in Bash\nDESCRIPTION: Basic command syntax for initializing a DDN project in a local directory. This creates a new DDN project with an auto-generated name or configures the directory to use an existing project.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_project_init.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nddn project init [project-name] [flags]\n```\n\n----------------------------------------\n\nTITLE: Adding Commands with DDN CLI in Bash\nDESCRIPTION: This snippet demonstrates the basic syntax for adding commands to local metadata using the DDN CLI. It includes options for specifying the connector link name and procedure/function name.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_command_add.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nddn command add <connector-link-name> <procedure/function-name> [flags]\n```\n\n----------------------------------------\n\nTITLE: Creating GCP IAM Policy Bindings\nDESCRIPTION: Series of commands to create IAM policy bindings for Hasura's ddn-automation service account, granting necessary permissions for network, DNS, GKE, logging, monitoring, and certificate management.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/private-ddn/creating-a-data-plane/byoc.mdx#2025-04-17_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ngcloud projects add-iam-policy-binding ${GCP_PROJECT_ID} \\\n  --member \"serviceAccount:ddn-automation@hasura-ddn.iam.gserviceaccount.com\" \\\n  --role roles/compute.networkAdmin\n\ngcloud projects add-iam-policy-binding ${GCP_PROJECT_ID} \\\n  --member \"serviceAccount:ddn-automation@hasura-ddn.iam.gserviceaccount.com\" \\\n  --role roles/dns.admin\n\ngcloud projects add-iam-policy-binding ${GCP_PROJECT_ID} \\\n  --member \"serviceAccount:ddn-automation@hasura-ddn.iam.gserviceaccount.com\" \\\n  --role roles/gkehub.editor\n\ngcloud projects add-iam-policy-binding ${GCP_PROJECT_ID} \\\n  --member \"serviceAccount:ddn-automation@hasura-ddn.iam.gserviceaccount.com\" \\\n  --role roles/logging.configWriter\n\ngcloud projects add-iam-policy-binding ${GCP_PROJECT_ID} \\\n  --member \"serviceAccount:ddn-automation@hasura-ddn.iam.gserviceaccount.com\" \\\n  --role roles/container.clusterAdmin\n\ngcloud projects add-iam-policy-binding ${GCP_PROJECT_ID} \\\n  --member \"serviceAccount:ddn-automation@hasura-ddn.iam.gserviceaccount.com\" \\\n  --role roles/monitoring.metricsScopesAdmin\n\ngcloud projects add-iam-policy-binding ${GCP_PROJECT_ID} \\\n  --member \"serviceAccount:ddn-automation@hasura-ddn.iam.gserviceaccount.com\" \\\n  --role roles/certificatemanager.editor\n\ngcloud projects add-iam-policy-binding ${GCP_PROJECT_ID} \\\n  --member='serviceAccount:ddn-automation@hasura-ddn.iam.gserviceaccount.com' \\\n  --role='roles/resourcemanager.projectIamAdmin' \\\n  --condition='^:^title=Restrict IAM Granting for ddn-automation:description=Restrict ddn-automation to granting specific roles to specific members:expression=api.getAttribute(\"iam.googleapis.com/modifiedGrantsByRole\", []).hasOnly([\"roles/container.defaultNodeServiceAccount\"]) || api.getAttribute(\"iam.googleapis.com/modifiedGrantsByRole\", []).hasOnly([\"roles/container.admin\"]) || api.getAttribute(\"iam.googleapis.com/modifiedGrantsByRole\", []).hasOnly([\"roles/compute.networkViewer\"])'\n\ngcloud projects add-iam-policy-binding ${GCP_PROJECT_ID} \\\n  --member \"serviceAccount:ddn-automation@hasura-ddn.iam.gserviceaccount.com\" \\\n  --role roles/container.admin\n\ngcloud projects add-iam-policy-binding ${GCP_PROJECT_ID} \\\n  --member \"serviceAccount:ddn-automation@hasura-ddn.iam.gserviceaccount.com\" \\\n  --role roles/iam.serviceAccountAdmin\n\ngcloud projects add-iam-policy-binding ${GCP_PROJECT_ID} \\\n  --member \"serviceAccount:ddn-automation@hasura-ddn.iam.gserviceaccount.com\" \\\n  --role roles/iam.workloadIdentityPoolAdmin\n```\n\n----------------------------------------\n\nTITLE: TypePermissions Configuration for Role-Based Field Access\nDESCRIPTION: YAML configuration defining TypePermissions for the Orders type, allowing admin role to access all fields while restricting user role from accessing the deliveryDate field.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/auth/webhook/webhook-mode.mdx#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n---\nkind: TypePermissions\nversion: v1\ndefinition:\n  typeName: Orders\n  permissions:\n    - role: admin\n      output:\n        allowedFields:\n          - createdAt\n          - deliveryDate\n          - id\n          - isReviewed\n          - productId\n          - status\n          - updatedAt\n          - userId\n  # highlight-start\n    - role: user\n      output:\n        allowedFields:\n          - createdAt\n          - id\n          - isReviewed\n          - productId\n          - status\n          - updatedAt\n          - userId\n  # highlight-end\n```\n\n----------------------------------------\n\nTITLE: Displaying MongoDB Resources with DDN CLI\nDESCRIPTION: Shows the resources discovered from the MongoDB instance after introspection, allowing review before proceeding.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/data-modeling/partials/classic-connectors/mongoDB/_command-create-tutorial.mdx#2025-04-17_snippet_3\n\nLANGUAGE: ddn\nCODE:\n```\nddn connector show-resources my_mongo\n```\n\n----------------------------------------\n\nTITLE: DDN Connector Link Usage Examples\nDESCRIPTION: Examples demonstrating how to add DataConnectorLinks to Subgraphs with different configurations, including basic addition and configuration with custom host URLs.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_connector-link_add.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Add a DataConnectorLink to the Subgraph \"app\"\n ddn connector-link add mydb --subgraph ./app/subgraph.yaml\n\n# Add a DataConnectorLink to the Subgraph \"app\" and configure its connector URL as the Connector's local Docker service URL\n ddn connector-link add mydb --subgraph app/subgraph.yaml --configure-host http://local.hasura.dev:<port>\n```\n\n----------------------------------------\n\nTITLE: Executing GraphQL Mutation to Insert User\nDESCRIPTION: Run a GraphQL mutation to insert a new user into the database. The mutation includes user details and returns the affected rows and inserted data.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/data-modeling/partials/classic-connectors/postgreSQL/_command-create-tutorial.mdx#2025-04-17_snippet_5\n\nLANGUAGE: graphql\nCODE:\n```\nmutation InsertUser {\n  insertUsers(objects: { age: \"21\", name: \"Sean\" }, postCheck: {}) {\n    affectedRows\n    returning {\n      id\n      name\n      age\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Inherited Parent Command Options\nDESCRIPTION: Options inherited from parent commands including logging, output format, and timeout settings.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_connector-link_show.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sass\nCODE:\n```\n--log-level string   Log level. Can be DEBUG, WARN, INFO, ERROR, or FATAL. (default \"INFO\")\n--no-prompt          Do not prompt for required but missing flags\n--out string         Output format. Can be table, json or yaml. (default \"table\")\n--timeout int        Request timeout in seconds [env: HASURA_DDN_TIMEOUT] (default 100)\n```\n\n----------------------------------------\n\nTITLE: Setting Self-Hosted Engine URL in DDN CLI\nDESCRIPTION: This command sets the engine's URL for a project in a self-hosted data plane. It requires the URL as an argument and supports various flags for customization.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_project_set-self-hosted-engine-url.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nddn project set-self-hosted-engine-url <url> [flags]\n```\n\n----------------------------------------\n\nTITLE: Updating Subgraph Path in Context Config File (YAML)\nDESCRIPTION: This snippet demonstrates how to update the subgraph config file path in the context.yaml file. The path should be changed to reflect the new subgraph name if the directory was renamed.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/project-configuration/tutorials/rename-subgraph.mdx#2025-04-17_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nkind: Context\nversion: v3\ndefinition:\n  current: default\n  contexts:\n    default:\n      supergraph: ../supergraph.yaml\n      subgraph: ../<new-subgraph-name>/subgraph.yaml\n      ...\n```\n\n----------------------------------------\n\nTITLE: Running DDN Connector Plugin Command\nDESCRIPTION: Syntax for running a subcommand from a Connector plugin using the DDN CLI. This command allows users to execute specific operations defined in a Connector plugin.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_connector_plugin.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nddn connector plugin [flags] [-- <args>]\n```\n\n----------------------------------------\n\nTITLE: Inherited Options for DDN Connector Commands\nDESCRIPTION: Shows the options inherited from parent operations, including log level configuration, prompting behavior, output format, and timeout settings.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_connector_show-resources.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sass\nCODE:\n```\n--log-level string   Log level. Can be DEBUG, WARN, INFO, ERROR, or FATAL. (default \"INFO\")\n--no-prompt          Do not prompt for required but missing flags\n--out string         Output format. Can be table, json or yaml. (default \"table\")\n--timeout int        Request timeout in seconds [env: HASURA_DDN_TIMEOUT] (default 100)\n```\n\n----------------------------------------\n\nTITLE: Adding DuckDuckGo Commands to DDN Model\nDESCRIPTION: Command to add all DuckDuckGo web search commands to the DDN model.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/recipes/tutorials/duckduckgo-web-search.mdx#2025-04-17_snippet_2\n\nLANGUAGE: ddn\nCODE:\n```\nddn model add duckduckgo \"*\"\n```\n\n----------------------------------------\n\nTITLE: Introspecting PostgreSQL Database for Customers\nDESCRIPTION: Introspects the PostgreSQL database to generate Hasura metadata for the customers subgraph.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/project-configuration/tutorials/work-with-multiple-repositories.mdx#2025-04-17_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nddn connector introspect customers_pg\n```\n\n----------------------------------------\n\nTITLE: Starting Docker Services\nDESCRIPTION: Launches required Docker services for the environment\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/data-modeling/partials/lambda-connectors/typescript/_command-create-native-operation-how-to.mdx#2025-04-17_snippet_5\n\nLANGUAGE: ddn\nCODE:\n```\nddn run docker-start\n```\n\n----------------------------------------\n\nTITLE: Basic Command Syntax - DDN Codemod\nDESCRIPTION: The basic command syntax for running the GraphqlConfig aggregate upgrade codemod.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_codemod_upgrade-graphqlconfig-aggregate.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nddn codemod upgrade-graphqlconfig-aggregate [flags]\n```\n\n----------------------------------------\n\nTITLE: Anthropic LLM Provider Configuration\nDESCRIPTION: Configuration for using Anthropic as the LLM provider in the API request.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/promptql-apis/execute-program-api.mdx#2025-04-17_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"provider\": \"anthropic\",\n  \"api_key\": \"<your anthropic api key>\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Directory Structure for MongoDB Native Mutations\nDESCRIPTION: Creates the required directory structure to store MongoDB native mutation files\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/data-modeling/partials/classic-connectors/mongoDB/_command-create-native-operation-tutorial.mdx#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nmkdir -p app/connector/my_mongo/native_operations/mutations/\n```\n\n----------------------------------------\n\nTITLE: Launching PromptQL Console for Local Development\nDESCRIPTION: This DDN command launches the PromptQL console for local development, allowing you to query your data.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/data-modeling/partials/classic-connectors/mongoDB/_relationship-create-model-to-model.mdx#2025-04-17_snippet_2\n\nLANGUAGE: ddn\nCODE:\n```\nddn console --local\n```\n\n----------------------------------------\n\nTITLE: DDN Context Creation - Command Options\nDESCRIPTION: Available command-specific options for the create-context command, showing help flag option.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_context_create-context.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sass\nCODE:\n```\n-h, --help   help for create-context\n```\n\n----------------------------------------\n\nTITLE: Inherited Command Options\nDESCRIPTION: Shows options inherited from parent operations that can be used with the rename-graphql-prefixes command.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_codemod_rename-graphql-prefixes.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sass\nCODE:\n```\n--log-level string   Log level. Can be DEBUG, WARN, INFO, ERROR, or FATAL. (default \"INFO\")\n--no-prompt          Do not prompt for required but missing flags\n--out string         Output format. Can be table, json or yaml. (default \"table\")\n--timeout int        Request timeout in seconds [env: HASURA_DDN_TIMEOUT] (default 100)\n```\n\n----------------------------------------\n\nTITLE: DDN Auth Inherited Options\nDESCRIPTION: Command line options inherited from parent DDN commands, including logging, output format, and timeout settings\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_auth.mdx#2025-04-17_snippet_1\n\nLANGUAGE: sass\nCODE:\n```\n--log-level string   Log level. Can be DEBUG, WARN, INFO, ERROR, or FATAL. (default \"INFO\")\n--no-prompt          Do not prompt for required but missing flags\n--out string         Output format. Can be table, json or yaml. (default \"table\")\n--timeout int        Request timeout in seconds [env: HASURA_DDN_TIMEOUT] (default 100)\n```\n\n----------------------------------------\n\nTITLE: Opening Development Console\nDESCRIPTION: Command to open the local development console for PromptQL\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/data-modeling/partials/lambda-connectors/python/_command-create-native-operation-how-to.mdx#2025-04-17_snippet_6\n\nLANGUAGE: ddn\nCODE:\n```\nddn console --local\n```\n\n----------------------------------------\n\nTITLE: Defining DataConnectorName in Markdown\nDESCRIPTION: Defines the DataConnectorName type as a string representing the name of a data connector.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/metadata-reference/commands.mdx#2025-04-17_snippet_9\n\nLANGUAGE: markdown\nCODE:\n```\n#### DataConnectorName {#command-dataconnectorname}\n\nThe name of a data connector.\n\n\n**Value:** string\n```\n\n----------------------------------------\n\nTITLE: Configuring AuthConfig for JWT Authentication\nDESCRIPTION: YAML configuration for setting up JWT authentication mode with Clerk JWKs in Hasura DDN.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/auth/jwt/tutorials/integrations/4-clerk.mdx#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nkind: AuthConfig\nversion: v3\ndefinition:\n  mode:\n    jwt:\n      claimsConfig:\n        namespace:\n          claimsFormat: Json\n          location: \"/claims.jwt.hasura.io\"\n      key:\n        jwkFromUrl: \"https://<your-clerk-domain>/.well-known/jwks.json\"\n      tokenLocation:\n        type: Header\n        name: Auth-Token\n```\n\n----------------------------------------\n\nTITLE: Text Artifact Structure\nDESCRIPTION: Format for including a text artifact in the API request's artifacts array.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/promptql-apis/execute-program-api.mdx#2025-04-17_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"identifier\": \"my_text\",\n  \"title\": \"My Text Document\",\n  \"artifact_type\": \"text\",\n  \"data\": \"Text content here\"\n}\n```\n\n----------------------------------------\n\nTITLE: Inherited Options for DDN Project Commands in SASS\nDESCRIPTION: These options are inherited from parent operations and can be used with the 'ddn project delete' command, including log level, prompting, output format, and timeout settings.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_project_delete.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sass\nCODE:\n```\n--log-level string   Log level. Can be DEBUG, WARN, INFO, ERROR, or FATAL. (default \"INFO\")\n--no-prompt          Do not prompt for required but missing flags\n--out string         Output format. Can be table, json or yaml. (default \"table\")\n--timeout int        Request timeout in seconds [env: HASURA_DDN_TIMEOUT] (default 100)\n```\n\n----------------------------------------\n\nTITLE: Setting JDBC_SCHEMAS Environment Variable\nDESCRIPTION: This plaintext snippet specifies the JDBC_SCHEMAS environment variable for the PostgreSQL connector.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/_quickstart_template.mdx#2025-04-17_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\npublic\n```\n\n----------------------------------------\n\nTITLE: DDN Supergraph Prune Command Syntax\nDESCRIPTION: Basic command syntax for pruning unused Supergraph metadata using the DDN CLI.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_supergraph_prune.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nddn supergraph prune [flags]\n```\n\n----------------------------------------\n\nTITLE: Options for 'ddn connector build delete' Command\nDESCRIPTION: This snippet shows the available options specific to the 'delete' subcommand. Currently, it only includes a help flag for displaying command usage information.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_connector_build_delete.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sass\nCODE:\n```\n-h, --help   help for delete\n```\n\n----------------------------------------\n\nTITLE: Adding Models to the Project\nDESCRIPTION: Command to add all models from the Huggingface connector to the project.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/recipes/tutorials/huggingface-csv-parquet-sqlite.mdx#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nddn model add huggingface \"*\"\n```\n\n----------------------------------------\n\nTITLE: Opening Local DDN Console\nDESCRIPTION: Command to open the local DDN Console for exploring the project.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/recipes/tutorials/apple-health-assistant.mdx#2025-04-17_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nddn console --local\n```\n\n----------------------------------------\n\nTITLE: Example Usage of ddn connector build get Command in Bash\nDESCRIPTION: Various examples demonstrating how to use the 'ddn connector build get' command for different scenarios, such as getting details of a specific ConnectorBuild, listing ConnectorBuilds for a project or subgraph, and retrieving the NDC Schema of a ConnectorBuild.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_connector_build_get.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Get details of a ConnectorBuild\n ddn connector build get 1d4f4831-54a2-4ded-b680-07d00510a522\n\n# Get details of all ConnectorBuilds for Connector \"mydb\" for a Project and Subgraph\n ddn connector build get --connector-name mydb --project myproject --subgraph-name myapp\n\n# Get details of all ConnectorBuilds for Connector defined in a Connector config file\n ddn connector build get --connector ./myapp/connector/connector.cloud.yaml\n\n# Get details of all ConnectorBuilds for a Project\n ddn connector build get --project myproject\n\n# Get details of all ConnectorBuilds for a Subgraph in a Project\n ddn connector build get --project myproject --subgraph-name myapp\n\n# Get NDC Schema of a ConnectorBuild\n ddn connector build get 1d4f4831-54a2-4ded-b680-07d00510a522 --schema\n```\n\n----------------------------------------\n\nTITLE: Command Synopsis for ddn supergraph build get\nDESCRIPTION: The basic syntax for using the ddn supergraph build get command to list SupergraphBuilds or get details of a specific one.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_supergraph_build_get.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nddn supergraph build get [supergraph-build-version] [flags]\n```\n\n----------------------------------------\n\nTITLE: Defining Headers for Natural Language API Request in JSON\nDESCRIPTION: Specifies the Content-Type header required for making a request to the Natural Language API endpoint.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/promptql-apis/natural-language-api.mdx#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\nContent-Type: application/json\n```\n\n----------------------------------------\n\nTITLE: Setting Up Permanent Fish Auto-Completion for Hasura CLI\nDESCRIPTION: This command generates and installs the auto-completion script for Hasura CLI in the Fish shell configuration.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/installation.mdx#2025-04-17_snippet_13\n\nLANGUAGE: ddn\nCODE:\n```\nddn completion fish > ~/.config/fish/completions/ddn.fish\n```\n\n----------------------------------------\n\nTITLE: MySQL JDBC Connection Configuration\nDESCRIPTION: JDBC connection string format for MySQL database.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/data-sources/connect-to-a-source.mdx#2025-04-17_snippet_4\n\nLANGUAGE: jdbc\nCODE:\n```\njdbc:mysql://user:password@host:3306/db_name\n```\n\n----------------------------------------\n\nTITLE: Options Inherited from Parent Commands\nDESCRIPTION: Global options inherited from parent commands that can be used with 'ddn plugins list', including logging level, output format, and timeout settings.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_plugins_list.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sass\nCODE:\n```\n--log-level string   Log level. Can be DEBUG, WARN, INFO, ERROR, or FATAL. (default \"INFO\")\n--no-prompt          Do not prompt for required but missing flags\n--out string         Output format. Can be table, json or yaml. (default \"table\")\n--timeout int        Request timeout in seconds [env: HASURA_DDN_TIMEOUT] (default 100)\n```\n\n----------------------------------------\n\nTITLE: Usage Examples\nDESCRIPTION: Examples showing different ways to run the upgrade command, including targeting specific supergraphs and subgraphs.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_codemod_upgrade-graphqlconfig-subscriptions.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Run on the supergraph defined in the context\n ddn codemod upgrade-graphqlconfig-subscriptions\n\n# Run on a specific supergraph\n ddn codemod upgrade-graphqlconfig-subscriptions --supergraph ./supergraph.cloud.yaml\n\n# Run on a specific subgraph\n ddn codemod upgrade-graphqlconfig-subscriptions --subgraph app/subgraph.yaml\n```\n\n----------------------------------------\n\nTITLE: Displaying Inherited Options for ddn supergraph build Command in Sass\nDESCRIPTION: This code snippet lists the options inherited from parent operations for the 'ddn supergraph build' command. It includes options for log level, prompting, output format, and request timeout.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_supergraph_build.mdx#2025-04-17_snippet_1\n\nLANGUAGE: sass\nCODE:\n```\n--log-level string   Log level. Can be DEBUG, WARN, INFO, ERROR, or FATAL. (default \"INFO\")\n--no-prompt          Do not prompt for required but missing flags\n--out string         Output format. Can be table, json or yaml. (default \"table\")\n--timeout int        Request timeout in seconds [env: HASURA_DDN_TIMEOUT] (default 100)\n```\n\n----------------------------------------\n\nTITLE: Configuring Schema Selection in PromptQL\nDESCRIPTION: Shows how to specify which schemas should be included in the introspection process. This allows for limiting the scope of database objects that the data connector will work with.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/connectors/_jdbcConfig.mdx#2025-04-17_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"schemas\": [\"schema1\", \"schema2\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Components in Markdown\nDESCRIPTION: This snippet demonstrates how to import custom components and MDX files in a Markdown document. It includes imports for Thumbnail, Roles, and Permissions components.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/project-configuration/project-management/manage-collaborators.mdx#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nimport Thumbnail from \"@site/src/components/Thumbnail\";\nimport Roles from \"@site/docs/project-configuration/_roles.mdx\";\nimport Permissions from \"@site/docs/project-configuration/_permissions.mdx\";\n```\n\n----------------------------------------\n\nTITLE: Command-Specific Options for DDN Project Subgraph Create\nDESCRIPTION: Options specific to the 'ddn project subgraph create' command, including flags for CI mode, context selection, subgraph description, and project specification.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_project_subgraph_create.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sass\nCODE:\n```\n    --ci                   Disables the use of context\n-c, --context string       Name of the context to use. (default <current_context>)\n-d, --description string   (Optional) description of the subgraph\n-h, --help                 help for create\n-p, --project string       DDN Project name\n```\n\n----------------------------------------\n\nTITLE: Creating an HTML Table with Width Control in Docusaurus MDX\nDESCRIPTION: This snippet shows how to create an HTML table with controlled column widths in Docusaurus MDX. It's useful when you need more control over table layout or when dealing with mixed content in cells.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/wiki/docusaurus-mdx-guide/list-tables.mdx#2025-04-17_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<table>\n  <thead>\n    <tr>\n      <th width=\"20%\">Field</th>\n      <th width=\"40%\">Description</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>Region</td>\n      <td>The region of the datacenter where your New Relic account stores its data. <Link to=\"https://docs.newrelic.com/docs/using-new-relic/welcome-new-relic/get-started/our-eu-us-region-data-centers\">Read more about regions on New Relic docs.</Link></td>\n    </tr>\n    <tr>\n      <td>API Key</td>\n      <td>API keys are unique to your organization. An API key is required by the New Relic API to submit metrics and events to New Relic. You can get the API key from <Link to=\"https://one.newrelic.com/launcher/api-keys-ui.api-keys-launcher\">here</Link> if you are in New Relic US region and <Link to=\"https://one.eu.newrelic.com/launcher/api-keys-ui.api-keys-launcher\">here</Link> if you're in New Relic EU region.</td>\n    </tr>\n    <tr>\n      <td>Host</td>\n      <td>The name of the originating host of the log and metrics.</td>\n    </tr>\n    <tr>\n      <td>Custom Attributes</td>\n      <td>Custom Attributes associated with your logs and metrics. A default source tag <code>hasura-cloud-metrics</code> is added to all exported logs and metrics. Attributes <code>project_id</code> and <code>project_name</code> are added to all exported metrics.</td>\n    </tr>\n    <tr>\n      <td>Service Name</td>\n      <td>The name of the application or service generating the log events.</td>\n    </tr>\n  </tbody>\n</table>\n```\n\n----------------------------------------\n\nTITLE: Re-introspecting Data Model in DDN\nDESCRIPTION: Command to update the connector configuration by re-introspecting the data model to reflect changes in data sources.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/data-modeling/iterate.mdx#2025-04-17_snippet_0\n\nLANGUAGE: ddn\nCODE:\n```\nddn connector introspect my_connector\n```\n\n----------------------------------------\n\nTITLE: Configuring Single-Region Routing for Hasura Connector\nDESCRIPTION: This YAML snippet demonstrates how to set up single-region routing for a Hasura connector. It specifies the connector name, subgraph, source, and region configuration including the deployment region and environment variable mapping.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/deployment/hasura-ddn/region-routing.mdx#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nkind: Connector\nversion: v2\ndefinition:\n  name: my_connector\n  subgraph: my_subgraph\n  source: hasura/connector_name:<version>\n  context: .\n  regionConfiguration:\n    - region: <region from the list below>\n      mode: ReadWrite\n      envMapping:\n        <CONNECTOR_ENV_VAR>: # e.g. CONNECTION_URI\n          fromEnv: <CONNECTOR_ENV_VAR> # e.g. Env Var set as DB read write URL\n```\n\n----------------------------------------\n\nTITLE: Inherited Options for 'ddn command show' in SASS\nDESCRIPTION: This code block shows the options inherited from parent operations for the 'ddn command show' command. It includes flags for setting log level, disabling prompts, specifying output format, and setting request timeout.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_command_show.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sass\nCODE:\n```\n--log-level string   Log level. Can be DEBUG, WARN, INFO, ERROR, or FATAL. (default \"INFO\")\n--no-prompt          Do not prompt for required but missing flags\n--out string         Output format. Can be table, json or yaml. (default \"table\")\n--timeout int        Request timeout in seconds [env: HASURA_DDN_TIMEOUT] (default 100)\n```\n\n----------------------------------------\n\nTITLE: DDN Connector Build Logs Usage Examples\nDESCRIPTION: Examples demonstrating various ways to use the connector build logs command, including following logs in real-time and filtering by time duration.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_connector_build_logs.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Get running deploy logs\n ddn connector build logs <connector-build-id>\n\n# Get running deploy logs and keep following\n ddn connector build logs <connector-build-id> --follow\n\n# Get running deploy logs and keep following since a specified time duration\n ddn connector build logs <connector-build-id> --follow --since 10m\n\n# Get build logs of a ConnectorBuild\n ddn connector build logs <connector-build-id> --build\n```\n\n----------------------------------------\n\nTITLE: DDN Model Update Command Examples\nDESCRIPTION: Various examples demonstrating different ways to use the model update command, including updating all models, specific models, and using subgraph configurations.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_model_update.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Update all Models using the subgraph set in current context\n ddn model update \"*\"\n\n# Update the Model \"Album\" in the \"app\" Subgraph\n ddn model update Album --subgraph ./app/subgraph.yaml\n\n# Update all the Models in the Subgraph \"app\"\n ddn model update \"*\" --subgraph ./app/subgraph.yaml\n\n# Update Models filtered by glob pattern in the Subgraph \"app\"\n ddn model update \"user*\" --subgraph ./app/subgraph.yaml\n```\n\n----------------------------------------\n\nTITLE: Basic DDN Connector-Link Remove Command\nDESCRIPTION: Basic command syntax for removing a DataConnectorLink from a Subgraph using the DDN CLI.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_connector-link_remove.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nddn connector-link remove <connector-link-name> [flags]\n```\n\n----------------------------------------\n\nTITLE: Viewing Discovered Resources in DDN\nDESCRIPTION: Command to display the resources that have been discovered after re-introspection of the data model.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/data-modeling/iterate.mdx#2025-04-17_snippet_1\n\nLANGUAGE: ddn\nCODE:\n```\nddn connector show-resources my_connector\n```\n\n----------------------------------------\n\nTITLE: Configuring EdDSA-based JWT Authentication in Hasura (X509 Certificate)\nDESCRIPTION: Example configuration for EdDSA-based JWT authentication using a public key as an X509 certificate.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/auth/jwt/jwt-configuration.mdx#2025-04-17_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\nkind: AuthConfig\nversion: v3\ndefinition:\n  mode:\n    jwt:\n      claimsConfig:\n        namespace:\n          claimsFormat: Json\n          location: /claims.jwt.hasura.io\n      tokenLocation:\n        type: BearerAuthorization\n      key:\n        fixed:\n          algorithm: Ed25519\n          key:\n            value:\n              '-----BEGIN CERTIFICATE\n              REQUEST-----\\nMIIBAzCBtgIBADAnMQswCQYDVQQGEwJERTEYMBYGA1UEAwwPd3d3LmV4YW1wbGUu\\nY29tMCowBQYDK2VwAyEA/9DV/InajW02Q0tC/tyr9mCSbSnNP1txICXVJrTGKDSg\\nXDBaBgkqhkiG9w0BCQ4xTTBLMAsGA1UdDwQEAwIEMDATBgNVHSUEDDAKBggrBgEF\\nBQcDATAnBgNVHREEIDAegg93d3cuZXhhbXBsZS5jb22CC2V4YW1wbGUuY29tMAUG\\nAytlcANBAKbTqnTyPcf4ZkVuq2tC108pBGY19VgyoI+PP2wD2KaRz4QAO7Bjd+7S\\nljyJoN83UDdtdtgb7aFgb611gx9W4go=\\n-----END\n              CERTIFICATE REQUEST-----'\n```\n\n----------------------------------------\n\nTITLE: Inherited Parent Options\nDESCRIPTION: Additional options inherited from parent commands that can be used with the ConnectorBuild create command.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_connector_build_create.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sass\nCODE:\n```\n--log-level string   Log level. Can be DEBUG, WARN, INFO, ERROR, or FATAL. (default \"INFO\")\n--no-prompt          Do not prompt for required but missing flags\n--out string         Output format. Can be table, json or yaml. (default \"table\")\n--timeout int        Request timeout in seconds [env: HASURA_DDN_TIMEOUT] (default 100)\n```\n\n----------------------------------------\n\nTITLE: Basic Command Syntax for DDN GraphQL Prefix Renaming\nDESCRIPTION: Shows the basic command syntax for renaming GraphQL prefixes in metadata using the DDN CLI.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_codemod_rename-graphql-prefixes.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nddn codemod rename-graphql-prefixes [flags]\n```\n\n----------------------------------------\n\nTITLE: Example Usage of ddn update-cli Command in Bash\nDESCRIPTION: Examples demonstrating how to update the CLI to the latest version or a specific version, and information about disabling auto-update checks.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_update-cli.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Update CLI to latest version:\n ddn update-cli\n\n# Update CLI to a specific version (say v1.0.0):\n ddn update-cli --version v1.0.0\n\n# To disable the auto-update check on the CLI, set\n# \"show_update_notification\": false\n# in ~/.ddn/config.yaml\n```\n\n----------------------------------------\n\nTITLE: Adding PostgreSQL Table as Model\nDESCRIPTION: Command to track a PostgreSQL table as a model in DDN metadata.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/project-configuration/tutorials/work-with-multiple-repositories.mdx#2025-04-17_snippet_23\n\nLANGUAGE: ddn\nCODE:\n```\nddn models add billing_pg orders\n```\n\n----------------------------------------\n\nTITLE: Setting Self-Hosted Engine URL Command Syntax in Bash\nDESCRIPTION: The basic syntax for the command that sets the engine's URL for a build in a self-hosted data plane.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_supergraph_build_set-self-hosted-engine-url.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nddn supergraph build set-self-hosted-engine-url <url> --build-version <build-version> [flags]\n```\n\n----------------------------------------\n\nTITLE: Displaying Thumbnail Image in Markdown\nDESCRIPTION: This code snippet demonstrates how to include a thumbnail image in a Markdown document using a custom Thumbnail component. It specifies the alt text and source path for the image.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/promptql-playground/public-projects.mdx#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<Thumbnail alt=\"Enable Public PromptQL Playground\" src=\"/img/get-started/public-promptql.png\" />\n```\n\n----------------------------------------\n\nTITLE: Available Options for the delete Command\nDESCRIPTION: Lists the specific options available for the delete command, including context selection, CI mode, project specification, and help.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_supergraph_build_delete.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sass\nCODE:\n```\n    --ci               Disables the use of context\n-c, --context string   Name of the context to use. (default <current_context>)\n-h, --help             help for delete\n-p, --project string   DDN Project name\n```\n\n----------------------------------------\n\nTITLE: Moving Service Account Key File\nDESCRIPTION: Bash command to move the downloaded BigQuery service account key file to the connector folder specified in the JDBC_URL environment variable.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/how-to-build-with-promptql/with-bigquery.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmv /path/to/your/key.json app/connector/my_bigquery/key.json\n```\n\n----------------------------------------\n\nTITLE: Inherited Options for ddn supergraph Command in Sass\nDESCRIPTION: Options that are inherited from the parent command. These include log level configuration, prompt settings, output format selection, and request timeout settings.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_supergraph.mdx#2025-04-17_snippet_1\n\nLANGUAGE: sass\nCODE:\n```\n--log-level string   Log level. Can be DEBUG, WARN, INFO, ERROR, or FATAL. (default \"INFO\")\n--no-prompt          Do not prompt for required but missing flags\n--out string         Output format. Can be table, json or yaml. (default \"table\")\n--timeout int        Request timeout in seconds [env: HASURA_DDN_TIMEOUT] (default 100)\n```\n\n----------------------------------------\n\nTITLE: Examples of Removing Commands with DDN CLI\nDESCRIPTION: Provides various examples of using the 'ddn command remove' operation, including removing all commands, specific commands, and using glob patterns for filtering.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_command_remove.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Remove all Commands using the subgraph set in current context\n ddn command remove \"*\"\n\n# Remove the Command \"Album\" in the \"app\" Subgraph\n ddn command remove Album --subgraph ./app/subgraph.yaml\n\n# Remove all the Commands in the Subgraph \"app\"\n ddn command remove \"*\" --subgraph ./app/subgraph.yaml\n\n# Remove Command filtered by glob pattern in the Subgraph \"app\"\n ddn command remove \"user*\" --subgraph ./app/subgraph.yaml\n```\n\n----------------------------------------\n\nTITLE: Configuring JDBC URL with Literal or Environment Variable\nDESCRIPTION: Examples of how to specify the JDBC connection URL either as a literal string or as a reference to an environment variable. The JDBC URL is required for connecting to the MySQL database.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/connectors/mysql/configuration.mdx#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jdbcUrl\": \"jdbc:MySQL:thin:@//localhost:1521/xe?user=foo&password=bar\",\n  \"jdbcUrl\": { \"variable\": \"MYSQL_JDBC_URL\" }\n}\n```\n\n----------------------------------------\n\nTITLE: Opening Hasura Console for Local DDN Project\nDESCRIPTION: Command to open the local Hasura Console for exploring the DDN project.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/recipes/tutorials/duckduckgo-web-search.mdx#2025-04-17_snippet_5\n\nLANGUAGE: ddn\nCODE:\n```\nddn console --local\n```\n\n----------------------------------------\n\nTITLE: Creating an HTML Table with Code Blocks in Docusaurus MDX\nDESCRIPTION: This snippet demonstrates how to create an HTML table that includes code blocks in its cells. It shows the proper formatting and indentation required for code blocks within table cells.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/wiki/docusaurus-mdx-guide/list-tables.mdx#2025-04-17_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<table>\n<thead>\n  <tr>\n    <th width=\"10%\">Status code</th>\n    <th width=\"10%\">Description</th>\n    <th width=\"30%\">Response Structure</th>\n  </tr>\n</thead>\n<tbody>\n<tr>\n<td><code>200</code></td>\n<td>Success</td>\n<td>\n\n```\nRequest Specific\n```\n\n</td>\n</tr>\n<tr>\n<td><code>400</code></td>\n<td>Bad Request</td>\n<td>\n\n```haskell\n{\n    \"path\"  : String,\n    \"error\" : String\n}\n```\n\n</td>\n</tr>\n<tr>\n<td><code>401</code></td>\n<td>Unauthorized</td>\n<td>\n\n```haskell\n{\n    \"error\" : String\n}\n```\n\n</td>\n</tr>\n<tr>\n<td><code>500</code></td>\n<td>Internal server error</td>\n<td>\n\n```haskell\n{\n    \"error\" : String\n}\n```\n\n</td>\n</tr>\n</tbody>\n</table>\n```\n\n----------------------------------------\n\nTITLE: Local Environment File Configuration in YAML\nDESCRIPTION: Example showing the local environment file configuration used for local development settings.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/project-configuration/project-management/manage-contexts.mdx#2025-04-17_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ncontexts:\n  default:\n    project: great-ddn-1234\n    supergraph: ../supergraph.yaml\n    subgraph: ../app/subgraph.yaml\n    localEnvFile: ../.env\n    cloudEnvFile: ../.env.cloud\n```\n\n----------------------------------------\n\nTITLE: Options Inherited from Parent Commands\nDESCRIPTION: Options that are inherited from parent commands and can be used with 'ddn project get', including log level settings, output format options, and timeout configurations.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_project_get.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sass\nCODE:\n```\n--log-level string   Log level. Can be DEBUG, WARN, INFO, ERROR, or FATAL. (default \"INFO\")\n--no-prompt          Do not prompt for required but missing flags\n--out string         Output format. Can be table, json or yaml. (default \"table\")\n--timeout int        Request timeout in seconds [env: HASURA_DDN_TIMEOUT] (default 100)\n```\n\n----------------------------------------\n\nTITLE: Introspecting Python Connector\nDESCRIPTION: Command to introspect the Python connector to expose its capabilities to PromptQL\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/data-modeling/partials/lambda-connectors/python/_command-create-native-operation-how-to.mdx#2025-04-17_snippet_2\n\nLANGUAGE: ddn\nCODE:\n```\nddn connector introspect my_py\n```\n\n----------------------------------------\n\nTITLE: Cookie-based JWT Configuration\nDESCRIPTION: Configuration for JWT token location using cookies\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/auth/jwt/jwt-configuration.mdx#2025-04-17_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\ntokenLocation:\n  type: Cookie\n  name: cookie_name\n```\n\nLANGUAGE: none\nCODE:\n```\nCookie: cookie_name=eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWI...\n```\n\n----------------------------------------\n\nTITLE: Listing All Subgraphs for a Project in Bash\nDESCRIPTION: This example demonstrates how to list all subgraphs for a specific project using the DDN CLI. The project is identified by its name.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_project_subgraph_get.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nddn project subgraph get --project pet-lion-2649\n```\n\n----------------------------------------\n\nTITLE: Inherited Options for 'ddn subgraph add' in SASS Format\nDESCRIPTION: Options inherited from parent commands that can be used with 'ddn subgraph add', including logging, prompting, output format, and timeout settings.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_subgraph_add.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sass\nCODE:\n```\n--log-level string   Log level. Can be DEBUG, WARN, INFO, ERROR, or FATAL. (default \"INFO\")\n--no-prompt          Do not prompt for required but missing flags\n--out string         Output format. Can be table, json or yaml. (default \"table\")\n--timeout int        Request timeout in seconds [env: HASURA_DDN_TIMEOUT] (default 100)\n```\n\n----------------------------------------\n\nTITLE: Creating a Directory for Native Queries in PromptQL\nDESCRIPTION: Command to create a directory structure for storing native queries in a PromptQL connector. This establishes the file organization pattern needed for custom SQL queries.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/data-modeling/partials/classic-connectors/clickHouse/_model-create-native-query-tutorial.mdx#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nmkdir -p <my_subgraph>/connector/<connector_name>/queries/\n```\n\n----------------------------------------\n\nTITLE: DDN Connector Link Update Command Syntax\nDESCRIPTION: Basic command syntax for updating a DataConnectorLink using the DDN CLI.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_connector-link_update.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nddn connector-link update <connector-link-name> [flags]\n```\n\n----------------------------------------\n\nTITLE: Example Usage of DDN Connector SetEnv in Bash\nDESCRIPTION: This example demonstrates how to set environment variables for a Connector data source and run an npm start command.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_connector_setenv.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nddn connector setenv --connector ./foo/my_db.connector.local.yaml -- npm run start\n```\n\n----------------------------------------\n\nTITLE: Implementing GraphiQLIDE with Variables and Highlights in JSX\nDESCRIPTION: An advanced implementation of the GraphiQLIDE component that includes query variables for filtering authors by pincode and uses highlighting to emphasize important parts of the code. This example demonstrates how to properly format complex queries with variables.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/wiki/docusaurus-mdx-guide/graphiql-ide.mdx#2025-04-17_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n// highlight-start\nimport GraphiQLIDE from '@site/src/components/GraphiQLIDE';\n\n<GraphiQLIDE\n  query={`query get_authors_in_pincode ($jsonFilter: jsonb){\n// highlight-end\n    authors(\n      where: {\n        address: {_contains: $jsonFilter }\n      }\n    ) {\n      id\n      name\n      address\n    }\n  }`}\n  // highlight-next-line\n  variables={`{\n    \"jsonFilter\": {\n      \"pincode\": 560095\n    }\n  }`}\n  // highlight-next-line\n  response={`{\n    \"data\": {\n      \"authors\": [\n        {\n          \"id\": 1,\n          \"name\": \"Ash\",\n          \"address\": {\n            \"street_address\": \"161, 19th Main Road, Koramangala 6th Block\",\n            \"city\": \"Bengaluru\",\n            \"state\": \"Karnataka\",\n            \"pincode\": 560095,\n            \"phone\": \"9090909090\",\n          }\n        }\n      ]\n    }\n  }`}\n/>;\n```\n\n----------------------------------------\n\nTITLE: Staging Changes\nDESCRIPTION: Git command to stage all local changes\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/wiki/contributing.mdx#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ngit add .\n```\n\n----------------------------------------\n\nTITLE: Inherited Command Options in SASS\nDESCRIPTION: These options are inherited from parent operations and can be used with the 'ddn project subgraph get' command. They include settings for log level, prompting, output format, and request timeout.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_project_subgraph_get.mdx#2025-04-17_snippet_4\n\nLANGUAGE: sass\nCODE:\n```\n--log-level string   Log level. Can be DEBUG, WARN, INFO, ERROR, or FATAL. (default \"INFO\")\n--no-prompt          Do not prompt for required but missing flags\n--out string         Output format. Can be table, json or yaml. (default \"table\")\n--timeout int        Request timeout in seconds [env: HASURA_DDN_TIMEOUT] (default 100)\n```\n\n----------------------------------------\n\nTITLE: Creating New CloudFormation Stack for Hasura Cloud BYOC\nDESCRIPTION: These Bash commands create a new CloudFormation stack for Hasura Cloud BYOC using the provided template. It then waits for the stack creation to complete.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/private-ddn/creating-a-data-plane/byoc.mdx#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\naws cloudformation create-stack \\\n  --stack-name hasura-cloud-byoc \\\n  --template-body file://cloudformation.yaml \\\n  --capabilities CAPABILITY_NAMED_IAM\n\naws cloudformation wait stack-create-complete \\\n  --stack-name hasura-cloud-byoc\n```\n\n----------------------------------------\n\nTITLE: DDN Context Unset Inherited Options\nDESCRIPTION: Options inherited from parent commands including logging, output format, and timeout settings.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_context_unset.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sass\nCODE:\n```\n--log-level string   Log level. Can be DEBUG, WARN, INFO, ERROR, or FATAL. (default \"INFO\")\n--no-prompt          Do not prompt for required but missing flags\n--out string         Output format. Can be table, json or yaml. (default \"table\")\n--timeout int        Request timeout in seconds [env: HASURA_DDN_TIMEOUT] (default 100)\n```\n\n----------------------------------------\n\nTITLE: Inherited Options for ddn command remove\nDESCRIPTION: Shows options inherited from parent operations, including log level control, output format selection, and timeout settings.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_command_remove.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sass\nCODE:\n```\n--log-level string   Log level. Can be DEBUG, WARN, INFO, ERROR, or FATAL. (default \"INFO\")\n--no-prompt          Do not prompt for required but missing flags\n--out string         Output format. Can be table, json or yaml. (default \"table\")\n--timeout int        Request timeout in seconds [env: HASURA_DDN_TIMEOUT] (default 100)\n```\n\n----------------------------------------\n\nTITLE: Inherited Options for DDN Completion Command in Sass\nDESCRIPTION: These options are inherited from parent operations and can be used with the 'ddn completion' command. They include settings for log level, prompting, output format, and request timeout.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_completion.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sass\nCODE:\n```\n--log-level string   Log level. Can be DEBUG, WARN, INFO, ERROR, or FATAL. (default \"INFO\")\n--no-prompt          Do not prompt for required but missing flags\n--out string         Output format. Can be table, json or yaml. (default \"table\")\n--timeout int        Request timeout in seconds [env: HASURA_DDN_TIMEOUT] (default 100)\n```\n\n----------------------------------------\n\nTITLE: DDN ASCII Art Logo\nDESCRIPTION: ASCII art representation of the DDN logo used in the CLI interface.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn.mdx#2025-04-17_snippet_0\n\nLANGUAGE: ascii\nCODE:\n```\n\n       \n\nDDDDDDD\\   DDDDDDD\\   NN\\   NN\\ \nDD  __DD\\  DD  __DD\\  NNN\\  NN |\nDD |  DD | DD |  DD | NNNN\\ NN |\nDD |  DD | DD |  DD | NN NN\\NN |\nDD |  DD | DD |  DD | NN \\NNNN |\nDD |  DD | DD |  DD | NN |\\NNN |\nDDDDDDD  | DDDDDDD  | NN | \\NN |\n\\_______/  \\_______/  \\__|  \\__|\n\n\n\n```\n\n----------------------------------------\n\nTITLE: Inherited Options for DDN Model Add Command in SASS\nDESCRIPTION: Options inherited from parent operations for the 'ddn model add' command, including log level, prompting behavior, output format, and timeout settings.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_model_add.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sass\nCODE:\n```\n--log-level string   Log level. Can be DEBUG, WARN, INFO, ERROR, or FATAL. (default \"INFO\")\n--no-prompt          Do not prompt for required but missing flags\n--out string         Output format. Can be table, json or yaml. (default \"table\")\n--timeout int        Request timeout in seconds [env: HASURA_DDN_TIMEOUT] (default 100)\n```\n\n----------------------------------------\n\nTITLE: Inherited Options for DDN CLI Commands\nDESCRIPTION: These options are inherited from parent operations and can be used with the 'delete' command. They include settings for log level, prompting behavior, output format, and request timeout.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_connector_build_delete.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sass\nCODE:\n```\n--log-level string   Log level. Can be DEBUG, WARN, INFO, ERROR, or FATAL. (default \"INFO\")\n--no-prompt          Do not prompt for required but missing flags\n--out string         Output format. Can be table, json or yaml. (default \"table\")\n--timeout int        Request timeout in seconds [env: HASURA_DDN_TIMEOUT] (default 100)\n```\n\n----------------------------------------\n\nTITLE: DDN Model Add Command Options in SASS\nDESCRIPTION: Available options for the 'ddn model add' command, including CI mode, context selection, help, pattern detection, and subgraph specification.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_model_add.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sass\nCODE:\n```\n    --ci                Disables the use of context\n-c, --context string    Name of the context to use. (default <current_context>)\n-h, --help              help for add\n    --pattern string    Pattern to detect targets. Can be 'glob' or 'literal'. (default \"glob\")\n    --subgraph string   Path to Subgraph config file\n```\n\n----------------------------------------\n\nTITLE: Introspection Error Message in Hasura DDN\nDESCRIPTION: Error message displayed when a connector fails to introspect a data source, specifically when container building fails with exit status 17.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/data-sources/troubleshooting.mdx#2025-04-17_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nERR Failed building the container: exit status 17\n```\n\n----------------------------------------\n\nTITLE: Inherited Options from Parent Commands\nDESCRIPTION: Options that are inherited from parent commands when using ddn update-cli, including log level, prompting behavior, output format, and request timeout settings.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_update-cli.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sass\nCODE:\n```\n--log-level string   Log level. Can be DEBUG, WARN, INFO, ERROR, or FATAL. (default \"INFO\")\n--no-prompt          Do not prompt for required but missing flags\n--out string         Output format. Can be table, json or yaml. (default \"table\")\n--timeout int        Request timeout in seconds [env: HASURA_DDN_TIMEOUT] (default 100)\n```\n\n----------------------------------------\n\nTITLE: Executing DDN Command List in Bash\nDESCRIPTION: This snippet shows the basic syntax for using the 'ddn command list' command in the DDN CLI. It lists details about the functions/procedures of a specified DataConnectorLink and their corresponding Commands.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_command_list.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nddn command list <connector-link-name> [flags]\n```\n\n----------------------------------------\n\nTITLE: Initializing Cloud Project in DDN CLI\nDESCRIPTION: This command initializes the cloud project based on the local parent project.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/project-configuration/subgraphs/working-with-multiple-repositories.mdx#2025-04-17_snippet_1\n\nLANGUAGE: ddn\nCODE:\n```\nddn project init\n```\n\n----------------------------------------\n\nTITLE: DDN CLI Basic Subgraph Options\nDESCRIPTION: Basic command line options for the DDN project subgraph command, showing help flag options.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_project_subgraph.mdx#2025-04-17_snippet_0\n\nLANGUAGE: sass\nCODE:\n```\n-h, --help   help for subgraph\n```\n\n----------------------------------------\n\nTITLE: Subgraph Deletion Example\nDESCRIPTION: Example showing how to delete a subgraph named 'app' from a specific project.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_project_subgraph_delete.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Delete a Subgraph 'app' from a Project\n ddn project subgraph delete app --project pet-lion-2649\n```\n\n----------------------------------------\n\nTITLE: Setting Up Environment Variables\nDESCRIPTION: Commands to copy the example environment file and set up the Anthropic API key for the project.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/recipes/tutorials/huggingface-csv-parquet-sqlite.mdx#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncp .env.example .env\n```\n\nLANGUAGE: bash\nCODE:\n```\n# .env\n...\n...\nANTHROPIC_API_KEY=<your-anthropic-api-key>\n```\n\n----------------------------------------\n\nTITLE: Cloning Private Repository with DDN Metadata\nDESCRIPTION: Command to clone a private GitHub repository using a personal access token for authentication. This allows the CI/CD pipeline to access private repositories containing your DDN metadata.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/deployment/hasura-ddn/ci-cd.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://username:<pat>@github.com/<your-account-or-org>/<repo>.git\n```\n\n----------------------------------------\n\nTITLE: Introspecting Kaggle Connector\nDESCRIPTION: DDN command to introspect the Kaggle connector with debug logging enabled.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/recipes/tutorials/kaggle-csv-sqlite.mdx#2025-04-17_snippet_4\n\nLANGUAGE: ddn\nCODE:\n```\nddn connector introspect kaggle --log-level=DEBUG\n```\n\n----------------------------------------\n\nTITLE: Setting Up Hasura CLI Auto-Completion for zsh on macOS\nDESCRIPTION: This command generates and installs the auto-completion script for Hasura CLI on macOS using Homebrew.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/installation.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sass\nCODE:\n```\nddn completion zsh > $(brew --prefix)/share/zsh/site-functions/_ddn\n```\n\n----------------------------------------\n\nTITLE: Options Inherited from Parent Operations in DDN CLI\nDESCRIPTION: Options that are inherited from parent commands when using 'ddn subgraph init', including logging settings, prompt behavior, output format, and request timeout configuration.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_subgraph_init.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sass\nCODE:\n```\n--log-level string   Log level. Can be DEBUG, WARN, INFO, ERROR, or FATAL. (default \"INFO\")\n--no-prompt          Do not prompt for required but missing flags\n--out string         Output format. Can be table, json or yaml. (default \"table\")\n--timeout int        Request timeout in seconds [env: HASURA_DDN_TIMEOUT] (default 100)\n```\n\n----------------------------------------\n\nTITLE: JWT Claims Example with JSON Path Values\nDESCRIPTION: Example JWT token structure showing claims and nested user data\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/auth/jwt/jwt-configuration.mdx#2025-04-17_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"sub\": \"1234567890\",\n  \"name\": \"John Doe\",\n  \"admin\": true,\n  \"iat\": 1516239022,\n  \"user\": {\n    \"id\": \"ujdh739kd\"\n  },\n  \"hasura\": {\n    \"all_roles\": [\"user\", \"editor\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Required Node.js Packages\nDESCRIPTION: Command to install the Node.js dependencies required by the script. This needs to be run after cloning the repository and before using the script.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/utilities/improve-front-matter-seo/README.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Inherited Options for ddn connector-link add-resources\nDESCRIPTION: These options are inherited from parent operations and include settings for log level, prompting behavior, output format, and request timeout.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_connector-link_add-resources.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sass\nCODE:\n```\n--log-level string   Log level. Can be DEBUG, WARN, INFO, ERROR, or FATAL. (default \"INFO\")\n--no-prompt          Do not prompt for required but missing flags\n--out string         Output format. Can be table, json or yaml. (default \"table\")\n--timeout int        Request timeout in seconds [env: HASURA_DDN_TIMEOUT] (default 100)\n```\n\n----------------------------------------\n\nTITLE: Local Development Setup\nDESCRIPTION: Commands for building and running the project locally, including starting the Hasura DDN Engine and accessing the development console.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/private-ddn/create-a-project-on-a-data-plane.mdx#2025-04-17_snippet_4\n\nLANGUAGE: ddn\nCODE:\n```\nddn supergraph build local\n```\n\nLANGUAGE: ddn\nCODE:\n```\nddn run docker-start\n```\n\nLANGUAGE: ddn\nCODE:\n```\nddn console --local\n```\n\n----------------------------------------\n\nTITLE: Inherited Options for DDN Connector Env Command in Sass\nDESCRIPTION: This code snippet displays the options inherited from parent operations for the 'ddn connector env' command. It includes options for log level, prompting, output format, and request timeout.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_connector_env.mdx#2025-04-17_snippet_1\n\nLANGUAGE: sass\nCODE:\n```\n--log-level string   Log level. Can be DEBUG, WARN, INFO, ERROR, or FATAL. (default \"INFO\")\n--no-prompt          Do not prompt for required but missing flags\n--out string         Output format. Can be table, json or yaml. (default \"table\")\n--timeout int        Request timeout in seconds [env: HASURA_DDN_TIMEOUT] (default 100)\n```\n\n----------------------------------------\n\nTITLE: Updating Commands with DDN CLI in Bash\nDESCRIPTION: This snippet demonstrates the basic syntax for updating Commands using the DDN CLI. It shows how to update all Commands, specific Commands, or Commands matching a pattern, with options to specify subgraphs.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_command_update.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nddn command update <command-name> [flags]\n```\n\nLANGUAGE: bash\nCODE:\n```\n# Update all Commands using the subgraph set in current context\n ddn command update \"*\"\n\n# Update the Command \"Login\" in the \"app\" Subgraph\n ddn command update Login --subgraph ./app/subgraph.yaml\n\n# Update all the Commands in \"app\" Subgraph\n ddn command update \"*\" --subgraph ./app/subgraph.yaml\n\n# Update Commands filtered by glob pattern in the Subgraph \"app\"\n ddn command update \"user*\" --subgraph ./app/subgraph.yaml\n```\n\n----------------------------------------\n\nTITLE: DDN Context Inherited Options\nDESCRIPTION: Options inherited from parent operations for DDN context commands, including log level control, prompting behavior, output format selection, and timeout settings.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_context.mdx#2025-04-17_snippet_1\n\nLANGUAGE: sass\nCODE:\n```\n--log-level string   Log level. Can be DEBUG, WARN, INFO, ERROR, or FATAL. (default \"INFO\")\n--no-prompt          Do not prompt for required but missing flags\n--out string         Output format. Can be table, json or yaml. (default \"table\")\n--timeout int        Request timeout in seconds [env: HASURA_DDN_TIMEOUT] (default 100)\n```\n\n----------------------------------------\n\nTITLE: Displaying Help Options for DDN Relationship Command in Sass\nDESCRIPTION: This code snippet shows the options available for the 'ddn relationship' command. It includes the help flag and its description.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_relationship.mdx#2025-04-17_snippet_0\n\nLANGUAGE: sass\nCODE:\n```\n-h, --help   help for relationship\n```\n\n----------------------------------------\n\nTITLE: Inserting Sample Data for Testing Native Queries\nDESCRIPTION: Inserts sample user data with the same age to demonstrate the ranking functionality of the native query. This setup creates multiple users aged 25 for testing purposes.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/data-modeling/partials/classic-connectors/postgreSQL/_model-create-native-query-tutorial.mdx#2025-04-17_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nINSERT INTO users (name, age) VALUES ('Dan', 25), ('Erika', 25), ('Fatima', 25), ('Gabe', 25);\n```\n\n----------------------------------------\n\nTITLE: DDN CLI Inherited Options\nDESCRIPTION: This snippet lists the options inherited from parent operations for the DDN CLI, including log level, prompting behavior, output format, and timeout settings.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_completion_fish.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sass\nCODE:\n```\n--log-level string   Log level. Can be DEBUG, WARN, INFO, ERROR, or FATAL. (default \"INFO\")\n--no-prompt          Do not prompt for required but missing flags\n--out string         Output format. Can be table, json or yaml. (default \"table\")\n--timeout int        Request timeout in seconds [env: HASURA_DDN_TIMEOUT] (default 100)\n```\n\n----------------------------------------\n\nTITLE: DDN Auth Command Options\nDESCRIPTION: Basic command line options specific to the DDN auth command set\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_auth.mdx#2025-04-17_snippet_0\n\nLANGUAGE: sass\nCODE:\n```\n-h, --help   help for auth\n```\n\n----------------------------------------\n\nTITLE: Command Options Configuration\nDESCRIPTION: Available command-specific options for the subgraph build get command.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_subgraph_build_get.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sass\nCODE:\n```\n    --ci               Disables the use of context\n-c, --context string   Name of the context to use. (default <current_context>)\n-h, --help             help for get\n-p, --project string   DDN Project name\n```\n\n----------------------------------------\n\nTITLE: Updating Environment Variables for Connector\nDESCRIPTION: Example of updating environment variables in a .env file for connector URLs and authorization header.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/project-configuration/tutorials/independent-connector-deployment.mdx#2025-04-17_snippet_2\n\nLANGUAGE: env\nCODE:\n```\n<CONNECTOR>_READ_URL=\"<deployed-connector-read-url>\"\n<CONNECTOR>_WRITE_URL=\"<deployed-connector-write-url>\"\n<CONNECTOR>_AUTHORIZATION_HEADER=\"Bearer <deployed-connector-token>\"\n```\n\n----------------------------------------\n\nTITLE: Fetching Latest CLI Version from GitHub API\nDESCRIPTION: TypeScript function that fetches the latest CLI version from GitHub API using environment variables for URL and authentication token. It handles errors and returns the tag name of the latest release.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/utilities/update-cli-version/README.md#2025-04-17_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nconst getLatestVersion = async (): Promise<string | null> => {\n  const URL = process.env.V3_CLI_RELEASE_URL;\n  const TOKEN = process.env.GH_CLI_VERSION_TOKEN;\n\n  // We'll appease the compiler of any non-string possibilities\n  if (!URL || !TOKEN) {\n    throw new Error(\n      `Environment variables V3_CLI_RELEASE_URL and GH_CLI_VERSION_TOKEN must be defined in this utility's .env`\n    );\n  }\n\n  try {\n    const response = await fetch(URL, {\n      headers: {\n        Authorization: `Bearer ${TOKEN}`,\n        Accept: 'application/vnd.github+json',\n        'X-Github-Api-Version': '2022-11-28',\n      },\n    });\n\n    if (!response.ok) {\n      throw new Error(`Error fetching latest release: ${response.statusText}`);\n    }\n\n    const release = await response.json();\n    return release.tag_name;\n  } catch (error) {\n    console.error('Error retrieving latest release:', error);\n    return null;\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Listing Available Supergraph Builds\nDESCRIPTION: Retrieves a list of available supergraph builds to use as a base for the new build.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/project-configuration/tutorials/work-with-multiple-repositories.mdx#2025-04-17_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nddn supergraph build get\n```\n\n----------------------------------------\n\nTITLE: Introspecting PostgreSQL Database with DDN CLI\nDESCRIPTION: Uses the DDN CLI to introspect a PostgreSQL database named 'my_pg'. This command analyzes the database structure to discover available resources and commands.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/data-modeling/partials/classic-connectors/postgreSQL/_command-update-tutorial.mdx#2025-04-17_snippet_0\n\nLANGUAGE: ddn\nCODE:\n```\nddn connector introspect my_pg\n```\n\n----------------------------------------\n\nTITLE: Enabling Permanent zsh Shell Completion for Hasura CLI\nDESCRIPTION: This command adds shell completion to the zsh configuration file for persistent auto-completion.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/installation.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\necho \"autoload -U compinit; compinit\" >> ~/.zshrc\n```\n\n----------------------------------------\n\nTITLE: Configuring Table Definitions\nDESCRIPTION: Example of a table definition showing structure with columns, data types, and constraints.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/connectors/snowflake/configuration.mdx#2025-04-17_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"tableName\": \"DOCS.PUBLIC.USERS\",\n  \"tableType\": \"TABLE\",\n  \"description\": null,\n  \"columns\": [\n    {\n      \"name\": \"AGE\",\n      \"description\": null,\n      \"type\": \"NUMBER\",\n      \"numeric_precision\": 38,\n      \"numeric_scale\": 0,\n      \"nullable\": false,\n      \"auto_increment\": false,\n      \"is_primarykey\": null\n    },\n    {\n      \"name\": \"NAME\",\n      \"description\": null,\n      \"type\": \"TEXT\",\n      \"numeric_precision\": null,\n      \"numeric_scale\": null,\n      \"nullable\": false,\n      \"auto_increment\": false,\n      \"is_primarykey\": null\n    },\n    {\n      \"name\": \"ID\",\n      \"description\": null,\n      \"type\": \"NUMBER\",\n      \"numeric_precision\": 38,\n      \"numeric_scale\": 0,\n      \"nullable\": false,\n      \"auto_increment\": true,\n      \"is_primarykey\": null\n    }\n  ],\n  \"pks\": [],\n  \"fks\": null\n}\n```\n\n----------------------------------------\n\nTITLE: Cloning and Setting Up the Repository\nDESCRIPTION: Commands to clone the repository and navigate to the project directory. These are the initial steps to set up the project locally before installing dependencies.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/utilities/improve-front-matter-seo/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone [your-repo-url]\ncd [your-repo-directory]\n```\n\n----------------------------------------\n\nTITLE: Resetting Apple Health Data\nDESCRIPTION: Command to clean up and restart the app, resetting the Apple Health data.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/recipes/tutorials/apple-health-assistant.mdx#2025-04-17_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose down -v && docker compose up -d --build\n```\n\n----------------------------------------\n\nTITLE: Cloning and Setting Up BART API Project with Git\nDESCRIPTION: Commands to clone the example project repository and navigate to the project directory.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/recipes/tutorials/bart-api.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone git@github.com:robertjdominguez/example-promptql-bart.git\ncd example-promptql-bart\n```\n\n----------------------------------------\n\nTITLE: Inherited Options for DDN Relationship Command in Sass\nDESCRIPTION: This code snippet lists the options inherited from parent operations for the 'ddn relationship' command. It includes options for log level, prompting, output format, and timeout.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_relationship.mdx#2025-04-17_snippet_1\n\nLANGUAGE: sass\nCODE:\n```\n--log-level string   Log level. Can be DEBUG, WARN, INFO, ERROR, or FATAL. (default \"INFO\")\n--no-prompt          Do not prompt for required but missing flags\n--out string         Output format. Can be table, json or yaml. (default \"table\")\n--timeout int        Request timeout in seconds [env: HASURA_DDN_TIMEOUT] (default 100)\n```\n\n----------------------------------------\n\nTITLE: DDN Completion Command Options in Sass\nDESCRIPTION: This snippet shows the available options for the 'ddn completion' command. It includes a help flag for displaying command usage information.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_completion.mdx#2025-04-17_snippet_1\n\nLANGUAGE: sass\nCODE:\n```\n-h, --help   help for completion\n```\n\n----------------------------------------\n\nTITLE: Integrating Subgraph Build into Parent Project in DDN CLI\nDESCRIPTION: This command integrates the subgraph changes into an existing build of the parent supergraph.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/project-configuration/subgraphs/working-with-multiple-repositories.mdx#2025-04-17_snippet_10\n\nLANGUAGE: ddn\nCODE:\n```\nddn supergraph build create --subgraph-version <subgraph-name:build-version> --base-supergraph-version <parent-build-id>\n```\n\n----------------------------------------\n\nTITLE: Introspecting PostgreSQL Instance\nDESCRIPTION: Command to introspect a PostgreSQL connector instance to discover available resources and schema.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/data-modeling/partials/classic-connectors/postgreSQL/_command-create-native-operation-how-to.mdx#2025-04-17_snippet_1\n\nLANGUAGE: ddn\nCODE:\n```\nddn connector introspect <connector_name>\n```\n\n----------------------------------------\n\nTITLE: DDN Config Upgrade Command Syntax - Bash\nDESCRIPTION: Basic command syntax for upgrading a Hasura project configuration from v2 to v3. Requires specifying the project directory using the --dir flag.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_codemod_upgrade-project-config-v2-to-v3.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nddn codemod upgrade-project-config-v2-to-v3 --dir <project-dir> [flags]\n```\n\n----------------------------------------\n\nTITLE: Auth0 Service Account Access Token Response\nDESCRIPTION: This JSON snippet shows the expected response format when generating a service account access token from Auth0. It includes the access token and token type.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/auth/jwt/tutorials/integrations/1-auth0.mdx#2025-04-17_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"access_token\": \"<service account access token>\",\n  \"token_type\": \"Bearer\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TypeReference in Markdown\nDESCRIPTION: Defines the TypeReference type as a string representing a reference to an Open DD type, including nullable values and arrays. It explains the syntax for non-nullable and array types.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/metadata-reference/commands.mdx#2025-04-17_snippet_12\n\nLANGUAGE: markdown\nCODE:\n```\n#### TypeReference {#command-typereference}\n\nA reference to an Open DD type including nullable values and arrays.\nSuffix '!' to indicate a non-nullable reference, and wrap in '[]' to indicate an array.\nEg: '[String!]!' is a non-nullable array of non-nullable strings.\n\n\n**Value:** string\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query Example\nDESCRIPTION: Example GraphQL query to retrieve ranked users filtered by age.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/data-modeling/partials/classic-connectors/mongoDB/_model-create-native-query-tutorial.mdx#2025-04-17_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\nquery MyQuery {\n  usersRankedByAge(args: { age: 25 }) {\n    name\n    age\n    rank\n    id\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Inherited Command Options\nDESCRIPTION: Options inherited from parent operations that can be used with this command.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_codemod_upgrade-object-boolean-expression-types.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sass\nCODE:\n```\n--log-level string   Log level. Can be DEBUG, WARN, INFO, ERROR, or FATAL. (default \"INFO\")\n--no-prompt          Do not prompt for required but missing flags\n--out string         Output format. Can be table, json or yaml. (default \"table\")\n--timeout int        Request timeout in seconds [env: HASURA_DDN_TIMEOUT] (default 100)\n```\n\n----------------------------------------\n\nTITLE: Supergraph Initialization Options\nDESCRIPTION: Available command-line options for customizing the Supergraph initialization process, including project creation and subgraph configuration.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_supergraph_init.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sass\nCODE:\n```\n    --create-project                      Create a project while initializing the supergraph\n    --create-subgraph string              The default subgraph to add (default \"app\")\n    --globals-subgraph string             Name of the globals subgraph (default \"globals\")\n-h, --help                                help for init\n    --no-globals-subgraph                 Do not add a globals subgraph\n    --no-subgraph                         Do not add a default subgraph\n    --project-data-plane-id uuid          The DDN instance where the Project should be hosted, only used with --create-project flag or --with-promptql flag\n    --project-name string                 Create a new project with this name, only used with --create-project flag or --with-promptql flag\n    --project-plan string                 DDN Project plan, only used with --create-project flag or --with-promptql flag\n    --subgraph-naming-convention string   Naming convention for the subgraph. Can be 'graphql', 'snake_case' or 'none'.\n    --with-project string                 Use an existing project instead of creating a new one, only used with --create-project flag or --with-promptql flag\n    --with-promptql                       Initialize with PromptQL support, this also initializes a project with PromptQL enabled. (alpha)\n```\n\n----------------------------------------\n\nTITLE: Creating Subgraph Build in DDN CLI\nDESCRIPTION: This command creates a build for the subgraph, returning a build version for later integration.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/project-configuration/subgraphs/working-with-multiple-repositories.mdx#2025-04-17_snippet_8\n\nLANGUAGE: ddn\nCODE:\n```\nddn subgraph build create\n```\n\n----------------------------------------\n\nTITLE: DDN Context Basic Options\nDESCRIPTION: Basic command line options available for the DDN context command.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_context.mdx#2025-04-17_snippet_0\n\nLANGUAGE: sass\nCODE:\n```\n-h, --help   help for context\n```\n\n----------------------------------------\n\nTITLE: Executing DDN Completion Command in Bash\nDESCRIPTION: This command generates autocompletion scripts for the DDN CLI for the specified shell. It can be used with different subcommands for specific shell environments.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_completion.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nddn completion [command] [flags]\n```\n\n----------------------------------------\n\nTITLE: DDN Model Update Inherited Options\nDESCRIPTION: Options inherited from parent commands that can be used with the model update command, including logging and output formatting options.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_model_update.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sass\nCODE:\n```\n--log-level string   Log level. Can be DEBUG, WARN, INFO, ERROR, or FATAL. (default \"INFO\")\n--no-prompt          Do not prompt for required but missing flags\n--out string         Output format. Can be table, json or yaml. (default \"table\")\n--timeout int        Request timeout in seconds [env: HASURA_DDN_TIMEOUT] (default 100)\n```\n\n----------------------------------------\n\nTITLE: Locating PowerShell Profile for Hasura CLI Auto-Completion\nDESCRIPTION: This command helps locate the PowerShell profile file for setting up persistent auto-completion.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/installation.mdx#2025-04-17_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\n$PROFILE\n```\n\n----------------------------------------\n\nTITLE: Inherited Options for DDN Connector Introspection in SASS\nDESCRIPTION: This snippet shows the options inherited from parent operations for the 'ddn connector introspect' command, including log level control, output format, and timeout settings.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_connector_introspect.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sass\nCODE:\n```\n--log-level string   Log level. Can be DEBUG, WARN, INFO, ERROR, or FATAL. (default \"INFO\")\n--no-prompt          Do not prompt for required but missing flags\n--out string         Output format. Can be table, json or yaml. (default \"table\")\n--timeout int        Request timeout in seconds [env: HASURA_DDN_TIMEOUT] (default 100)\n```\n\n----------------------------------------\n\nTITLE: Opening Hasura DDN Local Console\nDESCRIPTION: Launches the local Hasura DDN console for interacting with the API.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/project-configuration/tutorials/manage-multiple-environments.mdx#2025-04-17_snippet_6\n\nLANGUAGE: ddn\nCODE:\n```\nddn console --local\n```\n\n----------------------------------------\n\nTITLE: Deleting a SupergraphBuild with the DDN CLI\nDESCRIPTION: The main command syntax for deleting a SupergraphBuild from a Project. It requires a supergraph-build-version parameter and accepts various flags.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_supergraph_build_delete.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nddn supergraph build delete <supergraph-build-version> [flags]\n```\n\n----------------------------------------\n\nTITLE: Monitoring CloudFormation Stack Status\nDESCRIPTION: This Bash command retrieves the current status of the CloudFormation stack for Hasura Cloud BYOC.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/private-ddn/creating-a-data-plane/byoc.mdx#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\naws cloudformation describe-stacks \\\n  --stack-name hasura-cloud-byoc \\\n  --query 'Stacks[0].StackStatus'\n```\n\n----------------------------------------\n\nTITLE: Inherited Options for DDN Connector SetEnv in SASS\nDESCRIPTION: These options are inherited from parent operations and include settings for log level, prompting behavior, output format, and request timeout.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_connector_setenv.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sass\nCODE:\n```\n--log-level string   Log level. Can be DEBUG, WARN, INFO, ERROR, or FATAL. (default \"INFO\")\n--no-prompt          Do not prompt for required but missing flags\n--out string         Output format. Can be table, json or yaml. (default \"table\")\n--timeout int        Request timeout in seconds [env: HASURA_DDN_TIMEOUT] (default 100)\n```\n\n----------------------------------------\n\nTITLE: Inherited Options - DDN Codemod\nDESCRIPTION: Options inherited from parent operations that can be used with the upgrade-graphqlconfig-aggregate command.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_codemod_upgrade-graphqlconfig-aggregate.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sass\nCODE:\n```\n--log-level string   Log level. Can be DEBUG, WARN, INFO, ERROR, or FATAL. (default \"INFO\")\n--no-prompt          Do not prompt for required but missing flags\n--out string         Output format. Can be table, json or yaml. (default \"table\")\n--timeout int        Request timeout in seconds [env: HASURA_DDN_TIMEOUT] (default 100)\n```\n\n----------------------------------------\n\nTITLE: Creating PromptQL Playground State File in Bash\nDESCRIPTION: This command creates an empty file to store the PromptQL Playground state. It helps in persisting threads data across service restarts.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/promptql-playground/troubleshooting.mdx#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ntouch .promptql_playground.db\n```\n\n----------------------------------------\n\nTITLE: Inherited Options for 'ddn context get-context' Command in SASS\nDESCRIPTION: These options are inherited from parent operations and can be used with the 'ddn context get-context' command. They include settings for log level, prompting behavior, output format, and request timeout.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_context_get-context.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sass\nCODE:\n```\n--log-level string   Log level. Can be DEBUG, WARN, INFO, ERROR, or FATAL. (default \"INFO\")\n--no-prompt          Do not prompt for required but missing flags\n--out string         Output format. Can be table, json or yaml. (default \"table\")\n--timeout int        Request timeout in seconds [env: HASURA_DDN_TIMEOUT] (default 100)\n```\n\n----------------------------------------\n\nTITLE: DDN Completion Command Options\nDESCRIPTION: Available options for the DDN completion bash command, including help flag.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_completion_bash.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sass\nCODE:\n```\n-h, --help   help for bash completion\n```\n\n----------------------------------------\n\nTITLE: Options for ddn auth print-access-token Command in SASS\nDESCRIPTION: This snippet shows the available options for the ddn auth print-access-token command. It includes the help flag for displaying command help information.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_auth_print-access-token.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sass\nCODE:\n```\n-h, --help   help for print-access-token\n```\n\n----------------------------------------\n\nTITLE: Opening the Development Console\nDESCRIPTION: Command to open the local Hasura development console for interacting with the supergraph.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/data-modeling/partials/lambda-connectors/go/_command-create-tutorial.mdx#2025-04-17_snippet_6\n\nLANGUAGE: ddn\nCODE:\n```\nddn console --local\n```\n\n----------------------------------------\n\nTITLE: Using is_null Boolean Filter in JSON\nDESCRIPTION: This JSON example shows how to filter data using the is_null operator on a field named first_name.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/metadata-reference/boolean-expressions.mdx#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{ \"first_name\": { \"_is_null\": true } }\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Response for Users with Posts Query\nDESCRIPTION: This JSON snippet shows a sample response from the GraphQL query, displaying users with their associated posts.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/data-modeling/partials/classic-connectors/mongoDB/_relationship-create-model-to-model.mdx#2025-04-17_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"users\": [\n      {\n        \"name\": \"Alice\",\n        \"age\": 25,\n        \"posts\": [\n          {\n            \"id\": \"67585252ee01950f5dfc0421\",\n            \"content\": \"This is Alice's first post.\",\n            \"title\": \"My First Post\"\n          },\n          {\n            \"id\": \"67585252ee01950f5dfc0422\",\n            \"content\": \"Alice writes again!\",\n            \"title\": \"Another Post\"\n          }\n        ]\n      },\n      {\n        \"name\": \"Bob\",\n        \"age\": 30,\n        \"posts\": [\n          {\n            \"id\": \"67585252ee01950f5dfc0423\",\n            \"content\": \"Bob shares his thoughts.\",\n            \"title\": \"Bob's Post\"\n          }\n        ]\n      },\n      {\n        \"name\": \"Charlie\",\n        \"age\": 35,\n        \"posts\": [\n          {\n            \"id\": \"67585252ee01950f5dfc0424\",\n            \"content\": \"Charlie joins the conversation.\",\n            \"title\": \"Hello World\"\n          }\n        ]\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Direct Connection URI in PromptQL Configuration\nDESCRIPTION: Shows how to specify a direct connection URI value in the configuration. This approach hardcodes the connection string directly in the configuration object.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/connectors/_jdbcConfig.mdx#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"connection_uri\": {\n    \"value\": \"<connection_uri>\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Docker Services\nDESCRIPTION: Command to start the necessary Docker services for running the Hasura supergraph.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/data-modeling/partials/lambda-connectors/go/_command-create-tutorial.mdx#2025-04-17_snippet_5\n\nLANGUAGE: ddn\nCODE:\n```\nddn run docker-start\n```\n\n----------------------------------------\n\nTITLE: DDN CLI Build Options\nDESCRIPTION: Basic help option flag for the build command\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_subgraph_build.mdx#2025-04-17_snippet_0\n\nLANGUAGE: sass\nCODE:\n```\n-h, --help   help for build\n```\n\n----------------------------------------\n\nTITLE: Inherited Options\nDESCRIPTION: Options inherited from parent commands that can be used with the upgrade-graphqlconfig-subscriptions command.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_codemod_upgrade-graphqlconfig-subscriptions.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sass\nCODE:\n```\n--log-level string   Log level. Can be DEBUG, WARN, INFO, ERROR, or FATAL. (default \"INFO\")\n--no-prompt          Do not prompt for required but missing flags\n--out string         Output format. Can be table, json or yaml. (default \"table\")\n--timeout int        Request timeout in seconds [env: HASURA_DDN_TIMEOUT] (default 100)\n```\n\n----------------------------------------\n\nTITLE: Setting API Access Mode Command Syntax in Bash\nDESCRIPTION: The basic command syntax for setting API access mode for a Hasura DDN project. API access can be set to public or private, with projects defaulting to private mode for data protection.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_project_set-api-access-mode.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nddn project set-api-access-mode <public|private> [flags]\n```\n\n----------------------------------------\n\nTITLE: Starting Docker Services\nDESCRIPTION: Launches the required Docker services for the application\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/data-modeling/partials/lambda-connectors/python/_command-create-tutorial.mdx#2025-04-17_snippet_5\n\nLANGUAGE: ddn\nCODE:\n```\nddn run docker-start\n```\n\n----------------------------------------\n\nTITLE: Displaying DDN Connector Resources\nDESCRIPTION: Shows the discovered resources and capabilities from a Python connector using the DDN CLI.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/data-modeling/partials/lambda-connectors/python/_command-update-tutorial.mdx#2025-04-17_snippet_1\n\nLANGUAGE: ddn\nCODE:\n```\nddn connector show-resources my_py\n```\n\n----------------------------------------\n\nTITLE: Retrieving Role ARN from CloudFormation Stack Output\nDESCRIPTION: This Bash command retrieves the Role ARN from the CloudFormation stack output, which is required information to be shared with the Hasura team.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/private-ddn/creating-a-data-plane/byoc.mdx#2025-04-17_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\naws cloudformation describe-stacks \\\n  --stack-name hasura-cloud-byoc \\\n  --query 'Stacks[0].Outputs[?OutputKey==`RoleArn`].OutputValue' \\\n  --output text\n```\n\n----------------------------------------\n\nTITLE: Basic Options for ddn supergraph Command in Sass\nDESCRIPTION: The basic command-line options available for the ddn supergraph command. These options include help flag for displaying the help information for the command.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_supergraph.mdx#2025-04-17_snippet_0\n\nLANGUAGE: sass\nCODE:\n```\n-h, --help   help for supergraph\n```\n\n----------------------------------------\n\nTITLE: Displaying CLI Version in React Component\nDESCRIPTION: React component that imports the latest CLI version from a JSON file and displays it in the documentation. This demonstrates how the updated version information is used in the actual documentation.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/utilities/update-cli-version/README.md#2025-04-17_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react';\nimport latestVersion from '../../../utilities/update-cli-version/latest-version.json';\n\nconst Index: React.FC = () => {\n  const version = latestVersion.tag_name;\n\n  console.log(version);\n\n  return (\n    <div>\n      <p>\n        You can download the CLI binary below. The latest version of the CLI is <kbd>{version}</kbd>. Please follow the\n        instructions for your system.\n      </p>\n    </div>\n  );\n};\n\nexport default Index;\n```\n\n----------------------------------------\n\nTITLE: Hasura LLM Provider Configuration\nDESCRIPTION: Configuration for using Hasura as the LLM provider in the API request.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/promptql-apis/execute-program-api.mdx#2025-04-17_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"provider\": \"hasura\"\n}\n```\n\n----------------------------------------\n\nTITLE: DDN Plugin Uninstall Inherited Options\nDESCRIPTION: Options inherited from parent commands that can be used with the uninstall command\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_plugins_uninstall.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sass\nCODE:\n```\n--log-level string   Log level. Can be DEBUG, WARN, INFO, ERROR, or FATAL. (default \"INFO\")\n--no-prompt          Do not prompt for required but missing flags\n--out string         Output format. Can be table, json or yaml. (default \"table\")\n--timeout int        Request timeout in seconds [env: HASURA_DDN_TIMEOUT] (default 100)\n```\n\n----------------------------------------\n\nTITLE: DDN Fish Completion Command Options\nDESCRIPTION: This snippet shows the available options for the 'ddn completion fish' command, including the help flag.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_completion_fish.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sass\nCODE:\n```\n-h, --help   help for fish completion\n```\n\n----------------------------------------\n\nTITLE: Command Synopsis - DDN CLI Enable PromptQL\nDESCRIPTION: Basic command syntax for enabling PromptQL in an existing project using the DDN CLI.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_codemod_enable-promptql.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nddn codemod enable-promptql --dir <project-dir> [flags]\n```\n\n----------------------------------------\n\nTITLE: Options Inherited from Parent Operations\nDESCRIPTION: Flags and options that are inherited from the parent operations in the DDN CLI command hierarchy.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_subgraph_build_create.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sass\nCODE:\n```\n--log-level string   Log level. Can be DEBUG, WARN, INFO, ERROR, or FATAL. (default \"INFO\")\n--no-prompt          Do not prompt for required but missing flags\n--out string         Output format. Can be table, json or yaml. (default \"table\")\n--timeout int        Request timeout in seconds [env: HASURA_DDN_TIMEOUT] (default 100)\n```\n\n----------------------------------------\n\nTITLE: Executing DDN CLI Command to Upgrade Context Config\nDESCRIPTION: This command upgrades the project's context configuration from v2 to v3. It requires specifying the project directory and can include additional flags.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_codemod_upgrade-context-v2-to-v3.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nddn codemod upgrade-context-v2-to-v3 --dir <project-dir> [flags]\n```\n\n----------------------------------------\n\nTITLE: Inherited Options for DDN Connector Remove\nDESCRIPTION: This snippet shows the options inherited from parent operations for the 'ddn connector remove' command. These options affect logging, output format, timeout, and prompting behavior across multiple DDN CLI commands.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_connector_remove.mdx#2025-04-17_snippet_4\n\nLANGUAGE: sass\nCODE:\n```\n--log-level string   Log level. Can be DEBUG, WARN, INFO, ERROR, or FATAL. (default \"INFO\")\n--no-prompt          Do not prompt for required but missing flags\n--out string         Output format. Can be table, json or yaml. (default \"table\")\n--timeout int        Request timeout in seconds [env: HASURA_DDN_TIMEOUT] (default 100)\n```\n\n----------------------------------------\n\nTITLE: Defining ProcedureName in Markdown\nDESCRIPTION: Defines the ProcedureName type as a string representing the name of a procedure backing a command.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/metadata-reference/commands.mdx#2025-04-17_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n#### ProcedureName {#command-procedurename}\n\nThe name of a procedure backing the command.\n\n\n**Value:** string\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Response from the Custom Function\nDESCRIPTION: The expected JSON response when calling the 'shoutName' function with 'Alice' as input, showing the uppercase transformation result.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/data-modeling/partials/lambda-connectors/typescript/_command-create-tutorial.mdx#2025-04-17_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"shoutName\": \"ALICE\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Cloning Apple Health AI Assistant Project\nDESCRIPTION: Commands to clone the Apple Health AI Assistant project repository and navigate to the project directory.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/recipes/tutorials/apple-health-assistant.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone git@github.com:praveenweb/apple-health-ai-assistant.git\ncd apple-health-ai-assistant\n```\n\n----------------------------------------\n\nTITLE: Executing DDN CLI Command for Subgraph Retrieval in Bash\nDESCRIPTION: This command is used to list subgraphs for a Hasura DDN project or get details of a specific subgraph. It can be used with or without specifying a subgraph name.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_project_subgraph_get.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nddn project subgraph get [subgraph-name] [flags]\n```\n\n----------------------------------------\n\nTITLE: Setting Subgraph Context via CLI\nDESCRIPTION: Command to set the subgraph configuration file path using the DDN CLI.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/project-configuration/project-management/manage-contexts.mdx#2025-04-17_snippet_3\n\nLANGUAGE: ddn\nCODE:\n```\nddn context set subgraph <path-to-subgraph-configuration-file>\n```\n\n----------------------------------------\n\nTITLE: Supergraph Build and Deploy\nDESCRIPTION: Command to build and deploy the supergraph to Private DDN.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/private-ddn/ddn-workspace.mdx#2025-04-17_snippet_5\n\nLANGUAGE: ddn\nCODE:\n```\nddn supergraph build create\n```\n\n----------------------------------------\n\nTITLE: Updating Subgraph Reference in Connector Config File (YAML)\nDESCRIPTION: This snippet demonstrates how to update the reference to the subgraph in the connector.yaml file. The 'subgraph' field under the 'definition' section should be changed to the new subgraph name.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/project-configuration/tutorials/rename-subgraph.mdx#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nkind: Connector\nversion: v2\ndefinition:\n  name: <connector-name>\n  subgraph: <new-subgraph-name>\n  source: hasura/<connector-type>\n  context: .\n  envMapping: ...\n```\n\n----------------------------------------\n\nTITLE: DDN Connector Basic Options\nDESCRIPTION: Basic command line options for the DDN connector command, showing the help flag option.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_connector.mdx#2025-04-17_snippet_0\n\nLANGUAGE: sass\nCODE:\n```\n-h, --help   help for connector\n```\n\n----------------------------------------\n\nTITLE: Opening DDN Development Console\nDESCRIPTION: Opens the local DDN console for development. This provides a web interface for interacting with the GraphQL API and testing queries.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/data-modeling/partials/classic-connectors/mongoDB/_model-create-tutorial.mdx#2025-04-17_snippet_5\n\nLANGUAGE: ddn\nCODE:\n```\nddn console --local\n```\n\n----------------------------------------\n\nTITLE: Building Documentation\nDESCRIPTION: Command to build the documentation for testing\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/wiki/contributing.mdx#2025-04-17_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nyarn build\n```\n\n----------------------------------------\n\nTITLE: Opening Development Console\nDESCRIPTION: Launches the local development console for testing\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/data-modeling/partials/lambda-connectors/python/_command-create-tutorial.mdx#2025-04-17_snippet_6\n\nLANGUAGE: ddn\nCODE:\n```\nddn console --local\n```\n\n----------------------------------------\n\nTITLE: Showing Available Resources in DDN\nDESCRIPTION: Displays the available resources and their status for a specific connector using the DDN CLI. This command is useful for verifying the connector's configuration.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/how-to-build-with-promptql/_boilerplateDx.mdx#2025-04-17_snippet_2\n\nLANGUAGE: ddn\nCODE:\n```\nddn connector show-resources my_connector\n```\n\n----------------------------------------\n\nTITLE: Starting Data Import with Docker Compose\nDESCRIPTION: Command to start the data import process using Docker Compose, building and running the necessary containers.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/recipes/tutorials/apple-health-assistant.mdx#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose up -d –build\n```\n\n----------------------------------------\n\nTITLE: Basic options for DDN plugins command in Hasura CLI\nDESCRIPTION: Shows the help option available for the 'ddn plugins' command that provides assistance with the plugins functionality.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_plugins.mdx#2025-04-17_snippet_0\n\nLANGUAGE: sass\nCODE:\n```\n-h, --help   help for plugins\n```\n\n----------------------------------------\n\nTITLE: Inherited options for DDN plugins command in Hasura CLI\nDESCRIPTION: Lists the global options inherited from parent commands, including logging level configuration, output format control, timeout settings, and other operational parameters.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_plugins.mdx#2025-04-17_snippet_1\n\nLANGUAGE: sass\nCODE:\n```\n--log-level string   Log level. Can be DEBUG, WARN, INFO, ERROR, or FATAL. (default \"INFO\")\n--no-prompt          Do not prompt for required but missing flags\n--out string         Output format. Can be table, json or yaml. (default \"table\")\n--timeout int        Request timeout in seconds [env: HASURA_DDN_TIMEOUT] (default 100)\n```\n\n----------------------------------------\n\nTITLE: Importing PqlChat Components in JSX\nDESCRIPTION: Imports various components from the PqlChat module, likely for use in a React application. These components are used to create an interactive chat interface for PromptQL.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/how-to-build-with-promptql/_boilerplateDx.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { PqlChat, User, Pql, QueryPlanComponent } from \"@site/src/components/PqlChat/PqlChat\";\n```\n\n----------------------------------------\n\nTITLE: DDN Supergraph Inherited Options\nDESCRIPTION: Options inherited from parent operations including log level settings, output format control, and timeout configuration.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_supergraph_prune.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sass\nCODE:\n```\n--log-level string   Log level. Can be DEBUG, WARN, INFO, ERROR, or FATAL. (default \"INFO\")\n--no-prompt          Do not prompt for required but missing flags\n--out string         Output format. Can be table, json or yaml. (default \"table\")\n--timeout int        Request timeout in seconds [env: HASURA_DDN_TIMEOUT] (default 100)\n```\n\n----------------------------------------\n\nTITLE: Enabling Zsh Shell Completion\nDESCRIPTION: Command to enable shell completion in Zsh environment by adding the completion initialization to .zshrc file.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_completion_zsh.mdx#2025-04-17_snippet_0\n\nLANGUAGE: sass\nCODE:\n```\necho \"autoload -U compinit; compinit\" >> ~/.zshrc\n```\n\n----------------------------------------\n\nTITLE: DDN CLI Inherited Options\nDESCRIPTION: Global options inherited from parent commands including logging, output format, and timeout settings\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_subgraph_build.mdx#2025-04-17_snippet_1\n\nLANGUAGE: sass\nCODE:\n```\n--log-level string   Log level. Can be DEBUG, WARN, INFO, ERROR, or FATAL. (default \"INFO\")\n--no-prompt          Do not prompt for required but missing flags\n--out string         Output format. Can be table, json or yaml. (default \"table\")\n--timeout int        Request timeout in seconds [env: HASURA_DDN_TIMEOUT] (default 100)\n```\n\n----------------------------------------\n\nTITLE: Error Response Structure\nDESCRIPTION: Format of error responses returned by the API when validation or execution fails.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/promptql-apis/execute-program-api.mdx#2025-04-17_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"detail\": [\n    {\n      \"loc\": [\"field_name\"],\n      \"msg\": \"error message\",\n      \"type\": \"error_type\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Azure Zone Mapping Output\nDESCRIPTION: This JSON snippet shows an example output of the Azure CLI command for retrieving zone information. It displays the mapping between logical and physical zone names for the East US region in Azure.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/private-ddn/creating-a-data-plane/dedicated.mdx#2025-04-17_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"availabilityZoneMappings\": [\n      {\n        \"logicalZone\": \"1\",\n        \"physicalZone\": \"eastus-az1\"\n      },\n      {\n        \"logicalZone\": \"2\",\n        \"physicalZone\": \"eastus-az3\"\n      },\n      {\n        \"logicalZone\": \"3\",\n        \"physicalZone\": \"eastus-az2\"\n      }\n    ],\n    \"displayName\": \"East US\",\n    \"name\": \"eastus\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Cloning the Kaggle Dataset Project Repository\nDESCRIPTION: Command to clone the kaggle-dataset-promptql project repository and navigate to its directory.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/recipes/tutorials/kaggle-csv-sqlite.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone git@github.com:hasura/kaggle-dataset-promptql.git\ncd kaggle-dataset-promptql\n```\n\n----------------------------------------\n\nTITLE: Command-Specific Options for ddn auth print-promptql-secret-key in SASS\nDESCRIPTION: These are the specific options available for the 'ddn auth print-promptql-secret-key' command, including flags for CI mode, context selection, and project specification.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_auth_print-promptql-secret-key.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sass\nCODE:\n```\n    --ci               Disables the use of context\n-c, --context string   Name of the context to use. (default <current_context>)\n-h, --help             help for print-promptql-secret-key\n-p, --project string   DDN Project name\n```\n\n----------------------------------------\n\nTITLE: DDN CLI Completion Options\nDESCRIPTION: Available command line options for DDN CLI Zsh completion command.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_completion_zsh.mdx#2025-04-17_snippet_4\n\nLANGUAGE: sass\nCODE:\n```\n-h, --help   help for zsh completion\n```\n\n----------------------------------------\n\nTITLE: Building Hasura Supergraph\nDESCRIPTION: Command to create a local build of the Hasura supergraph.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/recipes/tutorials/bart-api.mdx#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nddn supergraph build local\n```\n\n----------------------------------------\n\nTITLE: Serving Built Documentation\nDESCRIPTION: Command to serve the built documentation locally for testing\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/wiki/contributing.mdx#2025-04-17_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nyarn serve\n```\n\n----------------------------------------\n\nTITLE: Starting DDN Project\nDESCRIPTION: Command to start the DDN project using Docker.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/recipes/tutorials/kaggle-csv-sqlite.mdx#2025-04-17_snippet_7\n\nLANGUAGE: ddn\nCODE:\n```\nddn run docker-start\n```\n\n----------------------------------------\n\nTITLE: Using 'ddn subgraph add' Command in Bash\nDESCRIPTION: The basic syntax for the 'ddn subgraph add' command, which requires specifying the path to a subgraph config file and at least one target supergraph config file.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_subgraph_add.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nddn subgraph add --subgraph <path-to-subgraph-config-file> --target-supergraph <path-to-supergraph-config-file> [flags]\n```\n\n----------------------------------------\n\nTITLE: Example: Running Update Command for Connector\nDESCRIPTION: An example demonstrating how to run the 'update' command of a specific connector. This uses the '--connector' flag to specify the path to the Connector YAML config file.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_connector_plugin.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nddn connector plugin --connector app/connector/mypostgres/connector.yaml -- update\n```\n\n----------------------------------------\n\nTITLE: Installing Connector Dependencies\nDESCRIPTION: Moves to the connector directory and installs required npm packages\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/how-to-build-with-promptql/with-apis-with-bulk-data.mdx#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd app/connector/github && npm i\n```\n\n----------------------------------------\n\nTITLE: Inherited Options for ddn auth print-promptql-secret-key in SASS\nDESCRIPTION: These options are inherited from parent operations and can be used with the 'ddn auth print-promptql-secret-key' command, including log level settings, output format, and timeout configuration.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_auth_print-promptql-secret-key.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sass\nCODE:\n```\n--log-level string   Log level. Can be DEBUG, WARN, INFO, ERROR, or FATAL. (default \"INFO\")\n--no-prompt          Do not prompt for required but missing flags\n--out string         Output format. Can be table, json or yaml. (default \"table\")\n--timeout int        Request timeout in seconds [env: HASURA_DDN_TIMEOUT] (default 100)\n```\n\n----------------------------------------\n\nTITLE: Displaying Inherited Options for DDN Subgraph Command in SASS\nDESCRIPTION: This code snippet lists the options inherited from parent operations for the 'ddn subgraph' command. It includes options for log level, prompting, output format, and timeout.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_subgraph.mdx#2025-04-17_snippet_1\n\nLANGUAGE: sass\nCODE:\n```\n--log-level string   Log level. Can be DEBUG, WARN, INFO, ERROR, or FATAL. (default \"INFO\")\n--no-prompt          Do not prompt for required but missing flags\n--out string         Output format. Can be table, json or yaml. (default \"table\")\n--timeout int        Request timeout in seconds [env: HASURA_DDN_TIMEOUT] (default 100)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Azure Physical Zone Names using Azure CLI\nDESCRIPTION: This command uses the Azure CLI to retrieve information about availability zones in a specified Azure region, including the mapping between logical and physical zone names. It's useful for selecting the correct physical zone names when configuring a Data Plane in Azure.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/private-ddn/creating-a-data-plane/dedicated.mdx#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\naz rest --method get \\\n  --uri '/subscriptions/{subscriptionId}/locations?api-version=2022-12-01' \\\n  --query 'value[?name==`eastus` && availabilityZoneMappings != `null`].{displayName: displayName, name: name, availabilityZoneMappings: availabilityZoneMappings}'\n```\n\n----------------------------------------\n\nTITLE: Integer OrderBy Expression Example\nDESCRIPTION: Example showing how to configure an OrderByExpression for Integer type fields with all ordering directions enabled. Demonstrates basic scalar type ordering configuration.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/metadata-reference/orderby-expressions.mdx#2025-04-17_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nkind: OrderByExpression\nversion: v1\ndefinition:\n  name: Int_order_by_exp\n  operand:\n    scalar:\n      orderedType: Int\n      enableOrderByDirections:\n        enableAll: true\n  graphql:\n    expressionTypeName: App_Int_order_by_exp\n  description: Order by expression for Int\n```\n\n----------------------------------------\n\nTITLE: Deleting a ConnectorBuild using DDN CLI\nDESCRIPTION: This command deletes a ConnectorBuild from a Project using its unique identifier. It requires the connector-build-id as an argument and can be used with additional flags.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_connector_build_delete.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nddn connector build delete <connector-build-id> [flags]\n```\n\n----------------------------------------\n\nTITLE: DDN CLI Inherited Parent Options\nDESCRIPTION: Inherited command line options from parent operations including logging, prompting, output format, and timeout settings.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_project_subgraph.mdx#2025-04-17_snippet_1\n\nLANGUAGE: sass\nCODE:\n```\n--log-level string   Log level. Can be DEBUG, WARN, INFO, ERROR, or FATAL. (default \"INFO\")\n--no-prompt          Do not prompt for required but missing flags\n--out string         Output format. Can be table, json or yaml. (default \"table\")\n--timeout int        Request timeout in seconds [env: HASURA_DDN_TIMEOUT] (default 100)\n```\n\n----------------------------------------\n\nTITLE: Query Result Example\nDESCRIPTION: Example response showing the ranked users sorted by name within the age group.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/data-modeling/partials/classic-connectors/mongoDB/_model-create-native-query-tutorial.mdx#2025-04-17_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"usersRankedByAge\": [\n      {\n        \"name\": \"Alice\",\n        \"age\": 25,\n        \"rank\": 1,\n        \"id\": \"67ae6b1225e762d63aa00aa1\"\n      },\n      {\n        \"name\": \"Bertram\",\n        \"age\": 25,\n        \"rank\": 2,\n        \"id\": \"67ae85a5a437b6a167a00aa1\"\n      },\n      {\n        \"name\": \"Dinesh\",\n        \"age\": 25,\n        \"rank\": 3,\n        \"id\": \"67ae85a5a437b6a167a00aa3\"\n      },\n      {\n        \"name\": \"Erlich\",\n        \"age\": 25,\n        \"rank\": 4,\n        \"id\": \"67ae85a5a437b6a167a00aa2\"\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Usage Examples - DDN Codemod AuthConfig Upgrade\nDESCRIPTION: Examples demonstrating different ways to use the upgrade-auth-config-to-v3 command, including running on supergraph context, specific supergraph config file, and specific subgraph config file.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_codemod_upgrade-auth-config-to-v3.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Run on the supergraph defined in the context. Finds `AuthConfig` present in any subgraphs within the supergraph and modifies it to version v3\n ddn codemod upgrade-auth-config-to-v3\n\n# Run on a specific supergraph config file. Finds `AuthConfig` present in any subgraphs within the supergraph and modifies it to version v3\n ddn codemod upgrade-auth-config-to-v3 --supergraph ./supergraph.cloud.yaml\n\n# Run on a specific subgraph config file. Finds `AuthConfig` present in the subgraph and modifies it to version v3\n ddn codemod upgrade-auth-config-to-v3 --subgraph app/subgraph.yaml\n```\n\n----------------------------------------\n\nTITLE: Updating Connector Service Name in Compose File (YAML)\nDESCRIPTION: This snippet shows how to update the name of the connector service in the compose.yaml file. The service name should be changed to reflect the new subgraph name.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/project-configuration/tutorials/rename-subgraph.mdx#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  <new-subgraph-name>_<connector-name>:\n    build:\n      context: .\n      dockerfile_inline: ...\n```\n\n----------------------------------------\n\nTITLE: Defining DataConnectorArgumentName in Markdown\nDESCRIPTION: Defines the DataConnectorArgumentName type as a string representing the name of an argument defined by a data connector.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/metadata-reference/commands.mdx#2025-04-17_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n#### DataConnectorArgumentName {#command-dataconnectorargumentname}\n\nThe name of an argument as defined by a data connector.\n\n\n**Value:** string\n```\n\n----------------------------------------\n\nTITLE: Default Engine Dockerfile\nDESCRIPTION: Simple Dockerfile used to build the engine container image, copying the build directory containing metadata files to the appropriate location in the container.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/faq.mdx#2025-04-17_snippet_6\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM ghcr.io/hasura/v3-engine\nCOPY ./build /md/\n```\n\n----------------------------------------\n\nTITLE: Kaggle Dataset Identifier Example\nDESCRIPTION: Example format of a Kaggle dataset identifier used for importing datasets.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/recipes/tutorials/kaggle-csv-sqlite.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nrounakbanik/the-movies-dataset\n```\n\n----------------------------------------\n\nTITLE: Listing Supergraph Builds\nDESCRIPTION: Command to list available supergraph builds.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/project-configuration/tutorials/work-with-multiple-repositories.mdx#2025-04-17_snippet_29\n\nLANGUAGE: ddn\nCODE:\n```\nddn supergraph build get\n```\n\n----------------------------------------\n\nTITLE: Opening PromptQL Playground for Hasura DDN\nDESCRIPTION: This command opens the PromptQL Playground console for interacting with the local Hasura DDN project.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/_quickstart_template.mdx#2025-04-17_snippet_9\n\nLANGUAGE: ddn\nCODE:\n```\nddn console --local\n```\n\n----------------------------------------\n\nTITLE: Tracking Custom Function\nDESCRIPTION: Command to track the custom Python function in the PromptQL system\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/data-modeling/partials/lambda-connectors/python/_command-create-native-operation-how-to.mdx#2025-04-17_snippet_3\n\nLANGUAGE: ddn\nCODE:\n```\nddn command add my_py my_custom_code\n```\n\n----------------------------------------\n\nTITLE: DDN Connector Environment Add Command Options (SASS)\nDESCRIPTION: This snippet lists the available options for the 'ddn connector env add' command. It includes options for specifying the connector, context, environment variables, and target environment file.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_connector_env_add.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sass\nCODE:\n```\n    --ci                            Disables the use of context\n    --connector string              Path to Connector YAML config file\n-c, --context string                Name of the context to use. (default <current_context>)\n-e, --env stringArray               Environment variable, e.g. key=val. Can be repeated to provide multiple env vars\n-h, --help                          help for add\n    --target-env-file stringArray   Path to the specific environment file to update (optional)\n```\n\n----------------------------------------\n\nTITLE: DDN Context Unset Command Options\nDESCRIPTION: Available command-specific flags for the context unset operation including context selection and help options.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_context_unset.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sass\nCODE:\n```\n-c, --context string   Name of the context to use. (default <current_context>)\n-h, --help             help for unset\n```\n\n----------------------------------------\n\nTITLE: Opening DDN Console\nDESCRIPTION: Command to launch the local DDN console for data exploration.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/recipes/tutorials/kaggle-csv-sqlite.mdx#2025-04-17_snippet_8\n\nLANGUAGE: ddn\nCODE:\n```\nddn console --local\n```\n\n----------------------------------------\n\nTITLE: Inherited Options for DDN Connector Init Command\nDESCRIPTION: This snippet shows the options inherited from parent operations for the 'ddn connector init' command, including log level settings, output format options, and timeout configurations.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_connector_init.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sass\nCODE:\n```\n--log-level string   Log level. Can be DEBUG, WARN, INFO, ERROR, or FATAL. (default \"INFO\")\n--no-prompt          Do not prompt for required but missing flags\n--out string         Output format. Can be table, json or yaml. (default \"table\")\n--timeout int        Request timeout in seconds [env: HASURA_DDN_TIMEOUT] (default 100)\n```\n\n----------------------------------------\n\nTITLE: Cleaning up and Restarting Application\nDESCRIPTION: Command to reset the Docker environment and restart the DDN application.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/recipes/tutorials/kaggle-csv-sqlite.mdx#2025-04-17_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose down -v && ddn run docker-start\n```\n\n----------------------------------------\n\nTITLE: Displaying Thumbnail Image for Custom README in Markdown\nDESCRIPTION: This code snippet shows how to embed a thumbnail image in a Markdown document to illustrate the custom README feature. It uses a custom Thumbnail component with specified alt text and image source.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/promptql-playground/public-projects.mdx#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n<Thumbnail alt=\"Custom Project README\" src=\"/img/get-started/promptql-readme.png\" />\n```\n\n----------------------------------------\n\nTITLE: Inherited Command Options\nDESCRIPTION: Options inherited from parent operations that can be used with the subgraph build get command.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_subgraph_build_get.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sass\nCODE:\n```\n--log-level string   Log level. Can be DEBUG, WARN, INFO, ERROR, or FATAL. (default \"INFO\")\n--no-prompt          Do not prompt for required but missing flags\n--out string         Output format. Can be table, json or yaml. (default \"table\")\n--timeout int        Request timeout in seconds [env: HASURA_DDN_TIMEOUT] (default 100)\n```\n\n----------------------------------------\n\nTITLE: Options Inherited from Parent Operations\nDESCRIPTION: Global options that are inherited from parent commands, including output format, logging level, and timeout settings.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_supergraph_build_get.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sass\nCODE:\n```\n--log-level string   Log level. Can be DEBUG, WARN, INFO, ERROR, or FATAL. (default \"INFO\")\n--no-prompt          Do not prompt for required but missing flags\n--out string         Output format. Can be table, json or yaml. (default \"table\")\n--timeout int        Request timeout in seconds [env: HASURA_DDN_TIMEOUT] (default 100)\n```\n\n----------------------------------------\n\nTITLE: Displaying Registry Directory Structure in Plaintext\nDESCRIPTION: Directory structure for the registry folder in the ndc-hub repository, showing the organization of connector files and folders.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/data-sources/publish-your-own-connector.mdx#2025-04-17_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nregistry/\n  ├── [namespace]/\n  │   ├── [connector-name]/\n  │   │   ├── releases/\n  │   │   │   ├── [version]/\n  │   │   │   │   └── connector-packaging.json\n  │   │   ├── logo.(png|svg)\n  │   │   └── README.md\n```\n\n----------------------------------------\n\nTITLE: Defining Compatibility Configuration in JSON\nDESCRIPTION: This snippet shows the structure of the v2_CompatibilityConfig object used to set the compatibility date for Hasura metadata. It specifies the kind and date fields, with the date determining which backwards incompatible changes will affect the metadata.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/metadata-reference/compatibility-config.mdx#2025-04-17_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"kind\": \"CompatibilityConfig\",\n  \"date\": \"2024-06-30\"\n}\n```\n\n----------------------------------------\n\nTITLE: DDN Connector Introspection Options in SASS\nDESCRIPTION: This snippet lists the available options for the 'ddn connector introspect' command, including flags for adding resources, specifying configuration files, and controlling environment variables.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_connector_introspect.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sass\nCODE:\n```\n    --add-all-resources      Add all Models, Commands and Relationships from the updated DataConnectorLink to the local metadata\n    --ci                     Disables the use of context\n    --connector string       Path to Connector YAML config file\n-c, --context string         Name of the context to use. (default <current_context>)\n-e, --env stringArray        Environment variable, e.g. key=val. Can be repeated to provide multiple env vars\n    --env-file stringArray   Path to .env file. Can be repeated to provide multiple env files\n-h, --help                   help for introspect\n    --no-update-link         Ignore updating DataConnectorLink in the metadata\n    --subgraph string        Path to Subgraph config file\n```\n\n----------------------------------------\n\nTITLE: Displaying DDN CLI Help Information in Bash\nDESCRIPTION: Demonstrates the output of the 'ddn --help' command, which provides information on all available operations and flags for the DDN CLI.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/index.mdx#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n\nDDDDDDD\\   DDDDDDD\\   NN\\   NN\\\nDD  __DD\\  DD  __DD\\  NNN\\  NN |\nDD |  DD | DD |  DD | NNNN\\ NN |\nDD |  DD | DD |  DD | NN NN\\NN |\nDD |  DD | DD |  DD | NN \\NNNN |\nDD |  DD | DD |  DD | NN |\\NNN |\nDDDDDDD  | DDDDDDD  | NN | \\NN |\n\\_______/  \\_______/  \\__|  \\__|\n\nUsage:\n  ddn [flags]\n  ddn [command]\n\nDDN operations\n  project        Manage Hasura DDN Project\n\nMetadata operations\n  command        Perform Command related operations\n  connector      Perform Connector related operations\n  connector-link Perform DataConnectorLink related operations\n  model          Perform Model related operations\n  relationship   Perform Relationship related operations\n  subgraph       Perform Subgraph related operations\n  supergraph     Perform Supergraph related operations\n\nAuthentication operations\n  auth           Manage Hasura DDN CLI Auth\n\nOther operations\n  codemod        Perform transformations on your Hasura project directory\n  completion     Generate the autocompletion script for the specified shell\n  console        Open the DDN console\n  context        Perform context operations\n  help           Help about any command\n  plugins        Manage plugins for the CLI\n  run            Run specific script from project's context config\n  update-cli     Update this CLI to the latest version or to a specific version\n  version        Prints the CLI version\n\nFlags:\n  -h, --help               help for ddn\n      --log-level string   Log level. Can be DEBUG, WARN, INFO, ERROR, or FATAL. (default \"INFO\")\n      --no-prompt          Do not prompt for required but missing flags\n      --out string         Output format. Can be table, json or yaml. (default \"table\")\n      --timeout int        Request timeout in seconds [env: HASURA_DDN_TIMEOUT] (default 100)\n  -v, --version            Prints the CLI version\n\nUse \"ddn [command] --help\" for more information about a command.\n\n```\n\n----------------------------------------\n\nTITLE: DDN Command Update Options in SASS\nDESCRIPTION: This snippet lists the available options for the 'ddn command update' CLI command. It includes options specific to the update command as well as options inherited from parent commands.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_command_update.mdx#2025-04-17_snippet_1\n\nLANGUAGE: sass\nCODE:\n```\n    --ci                Disables the use of context\n-c, --context string    Name of the context to use. (default <current_context>)\n-h, --help              help for update\n    --pattern string    Pattern to detect targets. Can be 'glob' or 'literal'. (default \"glob\")\n    --subgraph string   Path to Subgraph config file\n```\n\nLANGUAGE: sass\nCODE:\n```\n--log-level string   Log level. Can be DEBUG, WARN, INFO, ERROR, or FATAL. (default \"INFO\")\n--no-prompt          Do not prompt for required but missing flags\n--out string         Output format. Can be table, json or yaml. (default \"table\")\n--timeout int        Request timeout in seconds [env: HASURA_DDN_TIMEOUT] (default 100)\n```\n\n----------------------------------------\n\nTITLE: DDN Connector-Link Remove Inherited Options\nDESCRIPTION: Options inherited from parent operations, including logging configuration, output format, and timeout settings.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_connector-link_remove.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sass\nCODE:\n```\n--log-level string   Log level. Can be DEBUG, WARN, INFO, ERROR, or FATAL. (default \"INFO\")\n--no-prompt          Do not prompt for required but missing flags\n--out string         Output format. Can be table, json or yaml. (default \"table\")\n--timeout int        Request timeout in seconds [env: HASURA_DDN_TIMEOUT] (default 100)\n```\n\n----------------------------------------\n\nTITLE: DDN PowerShell Completion Options\nDESCRIPTION: Available command line options for the PowerShell completion command. Shows the help flag option.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_completion_powershell.mdx#2025-04-17_snippet_1\n\nLANGUAGE: sass\nCODE:\n```\n-h, --help   help for powershell completion\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Response from GraphQL Query\nDESCRIPTION: This JSON object represents the expected response from the GraphQL query, containing the data from the 'comments' table.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/data-modeling/partials/classic-connectors/clickHouse/_model-create-tutorial.mdx#2025-04-17_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"comments\": [\n      {\n        \"id\": 1,\n        \"comment\": \"Great post! Really enjoyed reading this.\",\n        \"user_id\": 1,\n        \"post_id\": 2\n      },\n      {\n        \"id\": 2,\n        \"comment\": \"Thanks for sharing your thoughts!\",\n        \"user_id\": 2,\n        \"post_id\": 1\n      },\n      {\n        \"id\": 3,\n        \"comment\": \"Interesting perspective.\",\n        \"user_id\": 3,\n        \"post_id\": 1\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Subgraph Path in Supergraph Config File (YAML)\nDESCRIPTION: This snippet demonstrates how to update the path to the subgraph config file in the supergraph.yaml file. The path should be changed to reflect the new subgraph name if the directory was renamed.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/project-configuration/tutorials/rename-subgraph.mdx#2025-04-17_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nkind: Supergraph\nversion: v2\ndefinition:\n  subgraphs:\n    - globals/subgraph.yaml\n    - <new-subgraph-name>/subgraph.yaml\n    ...\n```\n\n----------------------------------------\n\nTITLE: Available Options for 'ddn command show' in SASS\nDESCRIPTION: This code block lists the available options for the 'ddn command show' command. It includes flags for disabling context, specifying a context name, getting help, setting a pattern for target detection, and specifying a subgraph config file path.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_command_show.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sass\nCODE:\n```\n    --ci                Disables the use of context\n-c, --context string    Name of the context to use. (default <current_context>)\n-h, --help              help for show\n    --pattern string    Pattern to detect targets. Can be 'glob' or 'literal'. (default \"glob\")\n    --subgraph string   Path to Subgraph config file\n```\n\n----------------------------------------\n\nTITLE: Resetting Docker Environment\nDESCRIPTION: Command to clean up Docker environment and restart the DDN project\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/recipes/tutorials/csv-files.mdx#2025-04-17_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose down -v && ddn run docker-start\n```\n\n----------------------------------------\n\nTITLE: Inherited Options for ddn auth generate-promptql-secret-key in SASS\nDESCRIPTION: These options are inherited from parent operations and include settings for log level, prompting behavior, output format, and request timeout.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_auth_generate-promptql-secret-key.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sass\nCODE:\n```\n--log-level string   Log level. Can be DEBUG, WARN, INFO, ERROR, or FATAL. (default \"INFO\")\n--no-prompt          Do not prompt for required but missing flags\n--out string         Output format. Can be table, json or yaml. (default \"table\")\n--timeout int        Request timeout in seconds [env: HASURA_DDN_TIMEOUT] (default 100)\n```\n\n----------------------------------------\n\nTITLE: Starting DDN Docker Services\nDESCRIPTION: This DDN CLI command starts the necessary Docker services for the DDN setup.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/data-modeling/partials/classic-connectors/clickHouse/_model-create-tutorial.mdx#2025-04-17_snippet_4\n\nLANGUAGE: ddn\nCODE:\n```\nddn run docker-start\n```\n\n----------------------------------------\n\nTITLE: Example of Deleting a ConnectorBuild\nDESCRIPTION: This example demonstrates how to delete a specific ConnectorBuild using its UUID. The command does not require any additional flags in this basic usage.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_connector_build_delete.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nddn connector build delete 1d4f4831-54a2-4ded-b680-07d00510a522\n```\n\n----------------------------------------\n\nTITLE: Importing JDBC Configuration Documentation in MDX\nDESCRIPTION: This snippet imports the JDBC configuration documentation from a shared component file to be included in the PostgreSQL connector configuration page.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/connectors/postgresql/configuration.mdx#2025-04-17_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\nimport Config from \"@site/docs/reference/connectors/_jdbcConfig.mdx\";\n\n<Config />\n```\n\n----------------------------------------\n\nTITLE: Inherited Options for DDN CLI Commands\nDESCRIPTION: These options are inherited from parent operations and apply to multiple DDN CLI commands. They control logging, prompting, output format, and request timeout.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_codemod_upgrade-context-v2-to-v3.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sass\nCODE:\n```\n--log-level string   Log level. Can be DEBUG, WARN, INFO, ERROR, or FATAL. (default \"INFO\")\n--no-prompt          Do not prompt for required but missing flags\n--out string         Output format. Can be table, json or yaml. (default \"table\")\n--timeout int        Request timeout in seconds [env: HASURA_DDN_TIMEOUT] (default 100)\n```\n\n----------------------------------------\n\nTITLE: Inherited Options from Parent Operations\nDESCRIPTION: These options are inherited from parent operations and apply to the 'set-self-hosted-engine-url' command, including log level settings, output format, and timeout configuration.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_project_set-self-hosted-engine-url.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sass\nCODE:\n```\n--log-level string   Log level. Can be DEBUG, WARN, INFO, ERROR, or FATAL. (default \"INFO\")\n--no-prompt          Do not prompt for required but missing flags\n--out string         Output format. Can be table, json or yaml. (default \"table\")\n--timeout int        Request timeout in seconds [env: HASURA_DDN_TIMEOUT] (default 100)\n```\n\n----------------------------------------\n\nTITLE: Setting up Kaggle Configuration Directory\nDESCRIPTION: Commands to navigate to the Kaggle connector directory and create environment configuration file.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/recipes/tutorials/kaggle-csv-sqlite.mdx#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd app/connector/kaggle\ncp .env.sample .env\n```\n\n----------------------------------------\n\nTITLE: Initializing Local Development Environment for Hasura Docs\nDESCRIPTION: Quick setup script to clone the repository, install dependencies and start the development server\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/wiki/contributing.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/hasura/ddn-docs.git\ncd ddn-docs\nyarn install\nyarn start\n```\n\n----------------------------------------\n\nTITLE: Basic DataConnectorLink CLI Options\nDESCRIPTION: Basic command line options for the DDN connector-link command\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_connector-link.mdx#2025-04-17_snippet_0\n\nLANGUAGE: sass\nCODE:\n```\n-h, --help   help for connector-link\n```\n\n----------------------------------------\n\nTITLE: Generating Auth0 Service Account Access Token\nDESCRIPTION: This Python script demonstrates how to generate a new access token for a service account using the Auth0 API. It sends a POST request to the Auth0 token endpoint with the necessary credentials.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/auth/jwt/tutorials/integrations/1-auth0.mdx#2025-04-17_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport http.client\n\nconn = http.client.HTTPSConnection(\"<Auth0 domain>\")\n\npayload = \"{\\\"client_id\\\":\\\"<client id>\\\",\\\"client_secret\\\":\\\"<Auth0 Client Secret>\\\",\\\"audience\\\":\\\"<your GraphQL endpoint>\\\",\\\"grant_type\\\":\\\"client_credentials\\\"}\"\n\nheaders = { 'content-type': \"application/json\" }\n\nconn.request(\"POST\", \"/oauth/token\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))\n```\n\n----------------------------------------\n\nTITLE: Command-specific Options for 'ddn project get'\nDESCRIPTION: The options that are specific to the 'ddn project get' command, showing available flags and their descriptions.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_project_get.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sass\nCODE:\n```\n-h, --help   help for get\n```\n\n----------------------------------------\n\nTITLE: Example Usage of DDN Context Set Command\nDESCRIPTION: These examples demonstrate how to use the 'ddn context set' command to set various context values such as project name, supergraph config file path, and subgraph config file path.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_context_set.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Set the Project name in the context\n ddn context set project foo-bar-1234\n\n# Set the local Supergraph config file path in the context\n ddn context set supergraph ./supergraph.local.yaml\n\n# Set the Subgraph config file path in the context\n ddn context set subgraph ./app/subgraph.yaml\n```\n\n----------------------------------------\n\nTITLE: Inherited Options for ddn connector build get Command in SASS\nDESCRIPTION: Options inherited from parent operations that can be used with the 'ddn connector build get' command, including log level settings, output format, and timeout configuration.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_connector_build_get.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sass\nCODE:\n```\n--log-level string   Log level. Can be DEBUG, WARN, INFO, ERROR, or FATAL. (default \"INFO\")\n--no-prompt          Do not prompt for required but missing flags\n--out string         Output format. Can be table, json or yaml. (default \"table\")\n--timeout int        Request timeout in seconds [env: HASURA_DDN_TIMEOUT] (default 100)\n```\n\n----------------------------------------\n\nTITLE: Inherited options for ddn doctor command in SASS\nDESCRIPTION: This snippet lists the options inherited from parent operations, including log level, prompting behavior, output format, and timeout settings.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_doctor.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sass\nCODE:\n```\n--log-level string   Log level. Can be DEBUG, WARN, INFO, ERROR, or FATAL. (default \"INFO\")\n--no-prompt          Do not prompt for required but missing flags\n--out string         Output format. Can be table, json or yaml. (default \"table\")\n--timeout int        Request timeout in seconds [env: HASURA_DDN_TIMEOUT] (default 100)\n```\n\n----------------------------------------\n\nTITLE: Importing React Components in JSX for Hasura Docs\nDESCRIPTION: Shows how to import React components in Hasura documentation pages using the @site global variable for absolute imports.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/wiki/docusaurus-mdx-guide/page-structure.mdx#2025-04-17_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport Thumbnail from '@site/src/components/Thumbnail';\n```\n\n----------------------------------------\n\nTITLE: Rendering Custom React Components in PromptQL Documentation\nDESCRIPTION: This code snippet demonstrates the usage of the imported custom React components (Prereqs and Quickstart) within the markdown content of the PromptQL quickstart guide.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/quickstart.mdx#2025-04-17_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Prereqs />\n\n## Build your First PromptQL app\n\n<Quickstart />\n```\n\n----------------------------------------\n\nTITLE: Setting Subgraph Context for Customers\nDESCRIPTION: Sets the context to the customers subgraph configuration file for streamlined CLI commands.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/project-configuration/tutorials/work-with-multiple-repositories.mdx#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nddn context set subgraph ./customers/subgraph.yaml\n```\n\n----------------------------------------\n\nTITLE: Examples of ddn context get command usage\nDESCRIPTION: Practical examples showing how to retrieve specific values from the context, including getting the Project name and the Supergraph configuration file path.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_context_get.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Get the Project name set in the context\n ddn context get project\n\n# Get the Supergraph config file path set in the context\n ddn context get supergraph\n```\n\n----------------------------------------\n\nTITLE: DDN Command Basic Options\nDESCRIPTION: Basic command line options available for the DDN command operation.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_command.mdx#2025-04-17_snippet_0\n\nLANGUAGE: sass\nCODE:\n```\n-h, --help   help for command\n```\n\n----------------------------------------\n\nTITLE: Importing JDBC Configuration Component in MDX\nDESCRIPTION: Imports a reusable JDBC configuration component from the site documentation to be used for Redshift connector setup.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/connectors/redshift/configuration.mdx#2025-04-17_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\nimport Config from \"@site/docs/reference/connectors/_jdbcConfig.mdx\";\n\n<Config />\n```\n\n----------------------------------------\n\nTITLE: Command Options\nDESCRIPTION: Available command-specific flags and options for the upgrade-graphqlconfig-subscriptions command.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_codemod_upgrade-graphqlconfig-subscriptions.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sass\nCODE:\n```\n    --ci                  Disables the use of context\n-c, --context string      Name of the context to use. (default <current_context>)\n-h, --help                help for upgrade-graphqlconfig-subscriptions\n    --subgraph string     Path to Subgraph config file\n    --supergraph string   Path to Supergraph config file\n```\n\n----------------------------------------\n\nTITLE: Creating Feature Branch\nDESCRIPTION: Git command to create and switch to a new feature branch following Hasura's naming convention\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/wiki/contributing.mdx#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout -b <your-name>/docs/<short-update-description>\n```\n\n----------------------------------------\n\nTITLE: Inherited Command Options\nDESCRIPTION: Options inherited from parent commands including logging configuration, output format, and timeout settings.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_project_subgraph_delete.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sass\nCODE:\n```\n--log-level string   Log level. Can be DEBUG, WARN, INFO, ERROR, or FATAL. (default \"INFO\")\n--no-prompt          Do not prompt for required but missing flags\n--out string         Output format. Can be table, json or yaml. (default \"table\")\n--timeout int        Request timeout in seconds [env: HASURA_DDN_TIMEOUT] (default 100)\n```\n\n----------------------------------------\n\nTITLE: Basic Command Synopsis\nDESCRIPTION: The basic command syntax for getting subgraph build information.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_subgraph_build_get.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nddn subgraph build get [subgraph-build-version] [flags]\n```\n\n----------------------------------------\n\nTITLE: Implementing Vector Search Functions in Python\nDESCRIPTION: Python implementation of semantic search and vectorization functions using OpenAI embeddings and PostgreSQL\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/recipes/tutorials/add-vector-search-to-postgresql.mdx#2025-04-17_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom hasura_ndc import start\nfrom hasura_ndc.function_connector import FunctionConnector\nfrom pydantic import BaseModel\nfrom typing import List, Optional\nimport os\nimport aiohttp\nimport asyncpg\nimport asyncio\n\nconnector = FunctionConnector()\n\nclass ReviewRow(BaseModel):\n    reviewId: int\n\n@connector.register_query\nasync def semanticSearchReviews(text: str, limit: Optional[int] = None, offset: Optional[int] = None) -> List[ReviewRow]:\n    openai_api_key = os.environ.get(\"OPENAI_API_KEY\")\n    pg_connection_uri = os.environ.get(\"DATABASE_URL\")\n\n    try:\n        # Generate embedding for the search text\n        headers = {\n            \"Content-Type\": \"application/json\",\n            \"Authorization\": f\"Bearer {openai_api_key}\",\n        }\n        payload = {\n            \"input\": text,\n            \"model\": \"text-embedding-3-large\",\n        }\n\n        async with aiohttp.ClientSession() as session:\n            async with session.post(\"https://api.openai.com/v1/embeddings\", headers=headers, json=payload) as response:\n                embeddingData = await response.json()\n\n        embedding = embeddingData['data'][0]['embedding']\n        formattedEmbedding = '[' + ','.join(map(str, embedding)) + ']'\n\n        # Connect to the database\n        conn = await asyncpg.connect(pg_connection_uri)\n\n        # Base query to find reviews with similar embeddings\n        searchQuery = \"\"\"\n            SELECT\n                review_id,\n                1 - (embedding <=> $1::vector) as similarity\n            FROM Reviews\n            WHERE embedding IS NOT NULL\n            ORDER BY embedding <=> $1::vector\n        \"\"\"\n\n        if limit is not None:\n            searchQuery += f\" LIMIT {limit}\"\n            if offset is not None:\n                searchQuery += f\" OFFSET {offset}\"\n        else:\n            searchQuery += \" LIMIT 20\"\n\n        queryParams = [formattedEmbedding]\n\n        results = await conn.fetch(searchQuery, *queryParams)\n\n        # Map the results to the expected ReviewRow interface\n        reviewRows = [ReviewRow(reviewId=row['review_id']) for row in results]\n\n        await conn.close()\n\n        return reviewRows\n    except Exception as e:\n        print(f\"Error performing semantic search: {e}\")\n        return []\n\n@connector.register_mutation\nasync def vectorize() -> str:\n    openai_api_key = os.environ.get(\"OPENAI_API_KEY\")\n    pg_connection_uri = os.environ.get(\"DATABASE_URL\")\n\n    try:\n        headers = {\n            \"Content-Type\": \"application/json\",\n            \"Authorization\": f\"Bearer {openai_api_key}\",\n        }\n\n        conn = await asyncpg.connect(pg_connection_uri)\n\n        # Get all reviews that don't have embeddings yet\n        getReviewsQuery = \"\"\"\n            SELECT review_id, comment\n            FROM Reviews\n            WHERE embedding IS NULL AND comment IS NOT NULL\n        \"\"\"\n        reviews = await conn.fetch(getReviewsQuery)\n\n        # Process reviews in batches to avoid rate limits\n        batchSize = 100\n        for i in range(0, len(reviews), batchSize):\n            batch = reviews[i:i+batchSize]\n\n            async def get_embedding_for_review(review):\n                payload = {\n                    \"input\": review['comment'],\n                    \"model\": \"text-embedding-3-large\",\n                }\n                async with aiohttp.ClientSession() as session:\n                    async with session.post(\"https://api.openai.com/v1/embeddings\", headers=headers, json=payload) as response:\n                        embeddingData = await response.json()\n                embedding = embeddingData['data'][0]['embedding']\n                return {\n                    'review_id': review['review_id'],\n                    'embedding': embedding\n                }\n\n            tasks = [get_embedding_for_review(review) for review in batch]\n            embeddings = await asyncio.gather(*tasks)\n\n            # Update reviews with their embeddings\n            updateQuery = \"\"\"\n                UPDATE Reviews\n                SET embedding = $1::vector\n                WHERE review_id = $2\n            \"\"\"\n            for item in embeddings:\n                formattedEmbedding = '[' + ','.join(map(str, item['embedding'])) + ']'\n                await conn.execute(updateQuery, formattedEmbedding, item['review_id'])\n\n            # Log progress\n            print(f\"Processed {min(i + batchSize, len(reviews))} out of {len(reviews)} reviews\")\n\n        await conn.close()\n\n        return \"SUCCESS\"\n    except Exception as e:\n        print(f\"Error vectorizing reviews: {e}\")\n        raise e\n\nif __name__ == \"__main__\":\n    start(connector)\n```\n\n----------------------------------------\n\nTITLE: Using Frontmatter in Markdown for Hasura Documentation\nDESCRIPTION: This snippet demonstrates how to add frontmatter to a markdown file in Docusaurus for Hasura GraphQL Engine documentation. It shows the YAML frontmatter block delimited by triple dashes that includes title, description, and keywords metadata.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/wiki/docusaurus-mdx-guide/metadata.mdx#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\n\ntitle: Hasura GraphQL Engine Documentation\ndescription: Hasura GraphQL Engine Documentation\nkeywords: - hasura - docs - manual - graphql engine\n\n---\n```\n\n----------------------------------------\n\nTITLE: Inherited Options for DDN Plugins Commands\nDESCRIPTION: Options that are inherited from parent commands and can be used with the 'upgrade' command, including logging, output format, and timeout settings.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_plugins_upgrade.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sass\nCODE:\n```\n--log-level string   Log level. Can be DEBUG, WARN, INFO, ERROR, or FATAL. (default \"INFO\")\n--no-prompt          Do not prompt for required but missing flags\n--out string         Output format. Can be table, json or yaml. (default \"table\")\n--timeout int        Request timeout in seconds [env: HASURA_DDN_TIMEOUT] (default 100)\n```\n\n----------------------------------------\n\nTITLE: Inherited Options from Parent Commands\nDESCRIPTION: Options that are inherited from parent commands and can be used with the get-current-context command.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_context_get-current-context.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sass\nCODE:\n```\n--log-level string   Log level. Can be DEBUG, WARN, INFO, ERROR, or FATAL. (default \"INFO\")\n--no-prompt          Do not prompt for required but missing flags\n--out string         Output format. Can be table, json or yaml. (default \"table\")\n--timeout int        Request timeout in seconds [env: HASURA_DDN_TIMEOUT] (default 100)\n```\n\n----------------------------------------\n\nTITLE: Configuring Databricks Environment Variables\nDESCRIPTION: Configuration details for connecting PromptQL to Databricks, including JDBC URL format and schema specifications. The JDBC URL can be obtained from Databricks UI under SQL Warehouses section.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/how-to-build-with-promptql/with-databricks.mdx#2025-04-17_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\nJDBC_URL=jdbc:databricks://<host>:<port>/default;transportMode=http;ssl=1;AuthMech=3;httpPath=/sql/1.0/warehouses/<warehouse-id>;UID=token;PWD=<access-token>;ConnCatalog=main;\nJDBC_SCHEMAS=default,public\n```\n\n----------------------------------------\n\nTITLE: Development Watch Mode for Metadata Doc Generation\nDESCRIPTION: Command to run the documentation generator in watch mode for development purposes.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/utilities/generate-metadata-docs/README.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run watch\n```\n\n----------------------------------------\n\nTITLE: DDN CLI Basic Command\nDESCRIPTION: Basic command syntax for invoking the DDN CLI with optional flags.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nddn [flags]\n```\n\n----------------------------------------\n\nTITLE: Checking Enabled AWS Regions using AWS CLI\nDESCRIPTION: AWS CLI command to list all enabled regions in your AWS account. This verification step ensures the target deployment region is available for use.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/private-ddn/creating-a-data-plane/byoc.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\naws account get-regions --region-opt-status-contains ENABLED --query 'Regions[*].RegionName'\n```\n\n----------------------------------------\n\nTITLE: Command-Specific Options for Set Self-Hosted Engine URL\nDESCRIPTION: These are the specific options available for the 'set-self-hosted-engine-url' command, including flags for CI mode, context selection, and project specification.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_project_set-self-hosted-engine-url.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sass\nCODE:\n```\n    --ci               Disables the use of context\n-c, --context string   Name of the context to use. (default <current_context>)\n-h, --help             help for set-self-hosted-engine-url\n-p, --project string   DDN Project name\n```\n\n----------------------------------------\n\nTITLE: Command Options - DDN Codemod\nDESCRIPTION: Available command-specific options for the upgrade-graphqlconfig-aggregate codemod.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_codemod_upgrade-graphqlconfig-aggregate.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sass\nCODE:\n```\n    --ci                  Disables the use of context\n-c, --context string      Name of the context to use. (default <current_context>)\n-h, --help                help for upgrade-graphqlconfig-aggregate\n    --subgraph string     Path to Subgraph config file\n    --supergraph string   Path to Supergraph config file\n```\n\n----------------------------------------\n\nTITLE: Adding Page Title in Markdown for Hasura Docs\nDESCRIPTION: Illustrates how to add a main title for a Hasura documentation page using Markdown syntax.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/wiki/docusaurus-mdx-guide/page-structure.mdx#2025-04-17_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n# Data validations\n```\n\n----------------------------------------\n\nTITLE: Rendering MDX Components for PromptQL Setup\nDESCRIPTION: Component inclusion statements for rendering prerequisite information and quickstart guide content.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/how-to-build-with-promptql/with-a-datasource-and-custom-business-logic.mdx#2025-04-17_snippet_1\n\nLANGUAGE: mdx\nCODE:\n```\n<Prereqs />\n\n## Tutorial\n\n<Quickstart />\n```\n\n----------------------------------------\n\nTITLE: Initializing DDN Connector\nDESCRIPTION: Command to initialize a new Python connector for the project\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/recipes/tutorials/add-vector-search-to-postgresql.mdx#2025-04-17_snippet_0\n\nLANGUAGE: ddn\nCODE:\n```\nddn connector init mypython -i\n```\n\n----------------------------------------\n\nTITLE: Defining CommandName in Markdown\nDESCRIPTION: Defines the CommandName type as a string representing the name of a command.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/metadata-reference/commands.mdx#2025-04-17_snippet_13\n\nLANGUAGE: markdown\nCODE:\n```\n#### CommandName {#command-commandname}\n\nThe name of a command.\n\n\n**Value:** string\n```\n\n----------------------------------------\n\nTITLE: Pushing Changes\nDESCRIPTION: Git command to push local changes to the remote repository\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/wiki/contributing.mdx#2025-04-17_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ngit push origin <name-of-your-branch>\n```\n\n----------------------------------------\n\nTITLE: Running the SEO Front Matter Updater Script\nDESCRIPTION: Command syntax for running the script with optional parameters including target path and additional context. The script traverses through specified directories and updates front matter in .mdx files.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/utilities/improve-front-matter-seo/README.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnode improve-seo.js [target-path] [additional-text]\n```\n\n----------------------------------------\n\nTITLE: Options Inherited from Parent Operations in SASS Format\nDESCRIPTION: Options inherited from parent commands, including logging level configuration, output format selection, and timeout settings.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_model_list.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sass\nCODE:\n```\n--log-level string   Log level. Can be DEBUG, WARN, INFO, ERROR, or FATAL. (default \"INFO\")\n--no-prompt          Do not prompt for required but missing flags\n--out string         Output format. Can be table, json or yaml. (default \"table\")\n--timeout int        Request timeout in seconds [env: HASURA_DDN_TIMEOUT] (default 100)\n```\n\n----------------------------------------\n\nTITLE: Creating Hasura DDN Build for Production Project\nDESCRIPTION: Generates a new build on the production project using the default context's metadata.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/project-configuration/tutorials/manage-multiple-environments.mdx#2025-04-17_snippet_14\n\nLANGUAGE: ddn\nCODE:\n```\nddn supergraph build create\n```\n\n----------------------------------------\n\nTITLE: Adding Title Frontmatter in Markdown for Hasura Docs\nDESCRIPTION: Shows an alternative way to add a title using YAML frontmatter in Hasura documentation pages.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/wiki/docusaurus-mdx-guide/page-structure.mdx#2025-04-17_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Data validations\n---\n```\n\n----------------------------------------\n\nTITLE: DDN Model Update Command Options\nDESCRIPTION: Available command-specific options for the model update command, including CI mode, context selection, and pattern matching options.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_model_update.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sass\nCODE:\n```\n    --ci                Disables the use of context\n-c, --context string    Name of the context to use. (default <current_context>)\n-h, --help              help for update\n    --pattern string    Pattern to detect targets. Can be 'glob' or 'literal'. (default \"glob\")\n    --subgraph string   Path to Subgraph config file\n```\n\n----------------------------------------\n\nTITLE: Options Inherited from Parent Commands\nDESCRIPTION: Lists options inherited from parent commands that can be used with the delete command, including log level control, prompting behavior, output format selection, and request timeout settings.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_supergraph_build_delete.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sass\nCODE:\n```\n--log-level string   Log level. Can be DEBUG, WARN, INFO, ERROR, or FATAL. (default \"INFO\")\n--no-prompt          Do not prompt for required but missing flags\n--out string         Output format. Can be table, json or yaml. (default \"table\")\n--timeout int        Request timeout in seconds [env: HASURA_DDN_TIMEOUT] (default 100)\n```\n\n----------------------------------------\n\nTITLE: Fixed JWT Key Configuration\nDESCRIPTION: Configuration for JWT key using fixed algorithm and secret key\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/auth/jwt/jwt-configuration.mdx#2025-04-17_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nkey:\n  fixed:\n    algorithm: HS256\n    key:\n      value: ultra-secret-very-secret-super-secret-key\n      # valueFromEnv: AUTH_JWT_KEY\n```\n\n----------------------------------------\n\nTITLE: Building PromptQL Documentation for Production\nDESCRIPTION: Command to generate static production-ready content for the documentation, which will be output to the 'build' directory for deployment to any static hosting service.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/README.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn build\n```\n\n----------------------------------------\n\nTITLE: DDN CLI Options Configuration\nDESCRIPTION: Available configuration options for the DDN CLI, including help, log level, prompting behavior, output format, and timeout settings.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sass\nCODE:\n```\n-h, --help               help for ddn\n    --log-level string   Log level. Can be DEBUG, WARN, INFO, ERROR, or FATAL. (default \"INFO\")\n    --no-prompt          Do not prompt for required but missing flags\n    --out string         Output format. Can be table, json or yaml. (default \"table\")\n    --timeout int        Request timeout in seconds [env: HASURA_DDN_TIMEOUT] (default 100)\n```\n\n----------------------------------------\n\nTITLE: Constructing URL for Shareable Prompt in PromptQL Playground\nDESCRIPTION: Demonstrates the URL format for creating a shareable prompt in the PromptQL playground. The URL includes the project identifier and an encoded prompt parameter.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/promptql-playground/saved-prompts.mdx#2025-04-17_snippet_0\n\nLANGUAGE: code\nCODE:\n```\nhttps://promptql.console.hasura.io/public/<your_project>/playground?prompt=<encoded_prompt>\n```\n\n----------------------------------------\n\nTITLE: Example of Shareable Prompt URL for PromptQL Playground\nDESCRIPTION: Provides a concrete example of a shareable prompt URL for the PromptQL playground. This example pre-fills the prompt 'find the top 10 results for hasura' in the chat input.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/promptql-playground/saved-prompts.mdx#2025-04-17_snippet_1\n\nLANGUAGE: code\nCODE:\n```\nhttps://promptql.console.hasura.io/public/duckduckgo/playground?prompt=find%20the%20top%2010%20results%20for%20hasura\n```\n\n----------------------------------------\n\nTITLE: Command-specific Options for 'ddn console' in SASS\nDESCRIPTION: This snippet lists the specific options available for the 'ddn console' command. It includes options for specifying build version, project, local console, and engine URL.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_console.mdx#2025-04-17_snippet_1\n\nLANGUAGE: sass\nCODE:\n```\n    --build-version string   SupergraphBuild version\n-h, --help                   help for console\n    --local                  Open the local dev console\n-p, --project string         DDN Project name\n    --url string             Local engine url\n```\n\n----------------------------------------\n\nTITLE: Global options for DDN CLI commands\nDESCRIPTION: Options that apply to all DDN CLI operations, including log level settings, output format configuration, and timeout settings.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_context_get.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sass\nCODE:\n```\n--log-level string   Log level. Can be DEBUG, WARN, INFO, ERROR, or FATAL. (default \"INFO\")\n--no-prompt          Do not prompt for required but missing flags\n--out string         Output format. Can be table, json or yaml. (default \"table\")\n--timeout int        Request timeout in seconds [env: HASURA_DDN_TIMEOUT] (default 100)\n```\n\n----------------------------------------\n\nTITLE: DDN CLI Command Options in SASS\nDESCRIPTION: This snippet lists the specific options available for the 'ddn command add' command. It includes flags for CI mode, context selection, help, pattern matching, and subgraph specification.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_command_add.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sass\nCODE:\n```\n    --ci                Disables the use of context\n-c, --context string    Name of the context to use. (default <current_context>)\n-h, --help              help for add\n    --pattern string    Pattern to detect targets. Can be 'glob' or 'literal'. (default \"glob\")\n    --subgraph string   Path to Subgraph config file\n```\n\n----------------------------------------\n\nTITLE: JavaScript Example in Tip Admonition\nDESCRIPTION: A simple JavaScript variable declaration example used to demonstrate code within an admonition.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/wiki/kitchen-sink.mdx#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst foo = 'bar';\n```\n\n----------------------------------------\n\nTITLE: Opening Local Console for Customers Subgraph\nDESCRIPTION: Launches the local console for testing and exploring the customers subgraph.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/project-configuration/tutorials/work-with-multiple-repositories.mdx#2025-04-17_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nddn console --local\n```\n\n----------------------------------------\n\nTITLE: Examples of Using 'ddn project get' Command\nDESCRIPTION: Example usage patterns for the 'ddn project get' command, showing how to list all projects and how to retrieve details for a specific project by name.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_project_get.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# List all your Projects on Hasura DDN.\n ddn project get\n\n# Get details of a Project \"pet-lion-2649\" on Hasura DDN.\n ddn project get pet-lion-2649\n```\n\n----------------------------------------\n\nTITLE: Deploying Supergraph Build\nDESCRIPTION: Command to apply a specific supergraph build version.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/deployment/hasura-ddn/incremental-builds.mdx#2025-04-17_snippet_3\n\nLANGUAGE: ddn\nCODE:\n```\nddn supergraph build apply <build-version>\n```\n\n----------------------------------------\n\nTITLE: Example Usage of 'ddn context get-context' Command in Bash\nDESCRIPTION: These examples demonstrate how to use the 'ddn context get-context' command. The first example lists all contexts, while the second retrieves details for a specific context named 'default'.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_context_get-context.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Get list of contexts\n ddn context get-context\n\n# Get details of context 'default'\n ddn context get-context default\n```\n\n----------------------------------------\n\nTITLE: Configuring Firewall for Public Access in Hasura DDN\nDESCRIPTION: IP address range to add to your allowlist when your data source is behind a firewall, enabling access from Hasura DDN when not using Private DDN.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/data-sources/troubleshooting.mdx#2025-04-17_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n0.0.0.0/0\n```\n\n----------------------------------------\n\nTITLE: Implementing Tabs Component in Docusaurus using JSX\nDESCRIPTION: This snippet demonstrates how to import and use the Tabs and TabItem components from Docusaurus theme to create tabbed content. It includes two tabs with different content and labels.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/wiki/docusaurus-mdx-guide/tabs.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Tabs from '@theme/Tabs';\nimport TabItem from '@theme/TabItem';\n\n<Tabs className=\"api-tabs\">\n  <TabItem value=\"console\" label=\"Console\">\n    Click the `Reload` button in the `Remote Schema` section on the Hasura Console.\n  </TabItem>\n  <TabItem value=\"api\" label=\"API\">\n    Make a request to the [reload_remote_schema](#) API.\n  </TabItem>\n</Tabs>;\n```\n\n----------------------------------------\n\nTITLE: Command-Specific Options for Context Upgrade\nDESCRIPTION: These options are specific to the 'upgrade-context-v2-to-v3' command. They allow specifying the project directory and accessing help information.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_codemod_upgrade-context-v2-to-v3.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sass\nCODE:\n```\n    --dir string   The Hasura project directory (required)\n-h, --help         help for upgrade-context-v2-to-v3\n```\n\n----------------------------------------\n\nTITLE: Parent Command Options for DDN Project Operations\nDESCRIPTION: Additional options inherited from parent operations that can be used with the set-api-access-mode command, including logging control and output formatting options.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_project_set-api-access-mode.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sass\nCODE:\n```\n--log-level string   Log level. Can be DEBUG, WARN, INFO, ERROR, or FATAL. (default \"INFO\")\n--no-prompt          Do not prompt for required but missing flags\n--out string         Output format. Can be table, json or yaml. (default \"table\")\n--timeout int        Request timeout in seconds [env: HASURA_DDN_TIMEOUT] (default 100)\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Heading IDs in Markdown\nDESCRIPTION: Demonstrates how to create custom heading IDs in Docusaurus using the {#custom-id} syntax. Highlights the practice of using lowercase kebab-case for consistency.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/wiki/docusaurus-mdx-guide/headings.mdx#2025-04-17_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n## Step 1: Create a Hasura Cloud project {#create-hasura-project-aws-rds-aurora}\n\nOn the Hasura Cloud dashboard, create a new project:\n```\n\n----------------------------------------\n\nTITLE: Creating Initial Commit for Parent Project\nDESCRIPTION: Adds all files and creates an initial commit for the parent project.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/project-configuration/tutorials/work-with-multiple-repositories.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit add . && git commit -m \"Initial commit\"\n```\n\n----------------------------------------\n\nTITLE: Static Hosts File Entry for Local Development\nDESCRIPTION: Entry to add to the hosts file on Linux/Unix/MacOS systems to map local.hasura.dev to localhost, resolving DNS resolution issues.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/data-sources/troubleshooting.mdx#2025-04-17_snippet_6\n\nLANGUAGE: plaintext\nCODE:\n```\n127.0.0.1 local.hasura.dev\n```\n\n----------------------------------------\n\nTITLE: Example JSON Response from the Name Transformation Query\nDESCRIPTION: The expected JSON response from the 'shoutName' GraphQL query, showing the transformed name 'ALICE' in uppercase.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/data-modeling/partials/lambda-connectors/go/_command-create-tutorial.mdx#2025-04-17_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"shoutName\": \"ALICE\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Show DataConnectorLink Command Syntax\nDESCRIPTION: Basic command syntax for showing DataConnectorLink details with required arguments and flags.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_connector-link_show.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nddn connector-link show <connector-link-name> [flags]\n```\n\n----------------------------------------\n\nTITLE: Command-specific options for ddn subgraph delete\nDESCRIPTION: List of options specific to the ddn subgraph delete command, including flags for disabling context, specifying context, showing help, and configuring subgraph and supergraph paths.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_subgraph_delete.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sass\nCODE:\n```\n    --ci                  Disables the use of context\n-c, --context string      Name of the context to use. (default <current_context>)\n-h, --help                help for delete\n    --subgraph string     Path to Subgraph config file (required)\n    --supergraph string   Path to Supergraph config file\n```\n\n----------------------------------------\n\nTITLE: Creating External Links in Markdown Documentation\nDESCRIPTION: This snippet shows the syntax for creating an external link to Google in Markdown. The format uses square brackets for the link text followed by parentheses containing the URL.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/wiki/style/links.mdx#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n[Google](https://www.google.com/)\n```\n\n----------------------------------------\n\nTITLE: DDN Plugin Uninstall Command Options\nDESCRIPTION: Available command-line options specific to the uninstall command\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_plugins_uninstall.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sass\nCODE:\n```\n-h, --help   help for uninstall\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Thumbnail Component in React/JSX\nDESCRIPTION: Shows how to import and implement the Thumbnail component with various image attributes like source, alt text, and width. The component accepts standard image props as parameters.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/wiki/docusaurus-mdx-guide/thumbnail.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Thumbnail from '@site/src/components/Thumbnail';\n\n<Thumbnail\n  src=\"/img/get-started/0.0.1_console-add-connection-string.png\"\n  alt=\"Add a new PG data source using its connection string\"\n  width=\"437px\"\n/>;\n```\n\n----------------------------------------\n\nTITLE: Command Options Configuration\nDESCRIPTION: Available command-specific options for the subgraph delete operation including CI mode, context selection, and project specification.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_project_subgraph_delete.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sass\nCODE:\n```\n    --ci               Disables the use of context\n-c, --context string   Name of the context to use. (default <current_context>)\n-h, --help             help for delete\n-p, --project string   DDN Project name\n```\n\n----------------------------------------\n\nTITLE: Basic Command Syntax\nDESCRIPTION: Basic syntax for running the DDN codemod command to upgrade object boolean expression types.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_codemod_upgrade-object-boolean-expression-types.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nddn codemod upgrade-object-boolean-expression-types [flags]\n```\n\n----------------------------------------\n\nTITLE: Introspecting PostgreSQL Instance in PromptQL\nDESCRIPTION: Runs connector introspection on the PostgreSQL database to discover its schema. This is necessary to update the connector's understanding of available data sources.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/data-modeling/partials/classic-connectors/postgreSQL/_model-create-native-query-tutorial.mdx#2025-04-17_snippet_3\n\nLANGUAGE: ddn\nCODE:\n```\nddn connector introspect my_pg\n```\n\n----------------------------------------\n\nTITLE: Example JSON Response\nDESCRIPTION: Sample JSON response showing the nested relationship between users and their posts.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/data-modeling/partials/classic-connectors/clickHouse/_relationship-create-model-to-model.mdx#2025-04-17_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"users\": [\n      {\n        \"name\": \"Alice\",\n        \"age\": 25,\n        \"posts\": [\n          {\n            \"content\": \"This is Alice's first post.\",\n            \"title\": \"My First Post\",\n            \"userId\": 1\n          },\n          {\n            \"content\": \"Alice writes again!\",\n            \"title\": \"Another Post\",\n            \"userId\": 1\n          }\n        ]\n      },\n      {\n        \"name\": \"Bob\",\n        \"age\": 30,\n        \"posts\": [\n          {\n            \"content\": \"Bob shares his thoughts.\",\n            \"title\": \"Bob's Post\",\n            \"userId\": 2\n          }\n        ]\n      },\n      {\n        \"name\": \"Charlie\",\n        \"age\": 35,\n        \"posts\": [\n          {\n            \"content\": \"Charlie joins the conversation.\",\n            \"title\": \"Hello World\",\n            \"userId\": 3\n          }\n        ]\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Cloning Hasura Docs Repository\nDESCRIPTION: Command to clone the documentation repository\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/wiki/contributing.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/hasura/ddn-docs.git\n```\n\n----------------------------------------\n\nTITLE: Markdown Navigation Link Structure\nDESCRIPTION: Simple markdown link structure pointing to the version support policy documentation page\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/help/policies/index.mdx#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- [Version Support Policy](/help/policies/versioning.mdx)\n```\n\n----------------------------------------\n\nTITLE: Inherited Options for DDN Connector Environment Add Command (SASS)\nDESCRIPTION: This snippet shows the options inherited from parent operations for the 'ddn connector env add' command. It includes options for log level, prompting, output format, and request timeout.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_connector_env_add.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sass\nCODE:\n```\n--log-level string   Log level. Can be DEBUG, WARN, INFO, ERROR, or FATAL. (default \"INFO\")\n--no-prompt          Do not prompt for required but missing flags\n--out string         Output format. Can be table, json or yaml. (default \"table\")\n--timeout int        Request timeout in seconds [env: HASURA_DDN_TIMEOUT] (default 100)\n```\n\n----------------------------------------\n\nTITLE: Defining Schema Configuration\nDESCRIPTION: Example of specifying schemas to include in the introspection process.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/connectors/snowflake/configuration.mdx#2025-04-17_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"schemas\": [\"PUBLIC\", \"OTHER_SCHEMA\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Command Options for ddn context get-current-context\nDESCRIPTION: Available flags specific to the get-current-context command.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_context_get-current-context.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sass\nCODE:\n```\n-h, --help   help for get-current-context\n```\n\n----------------------------------------\n\nTITLE: Displaying CLI Options for 'ddn model' Command in Sass\nDESCRIPTION: This code snippet shows the CLI options specific to the 'ddn model' command. It includes the help option for displaying command information.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_model.mdx#2025-04-17_snippet_0\n\nLANGUAGE: sass\nCODE:\n```\n-h, --help   help for model\n```\n\n----------------------------------------\n\nTITLE: Importing JDBC Configuration Component in MDX\nDESCRIPTION: Imports a reusable JDBC configuration component from the documentation site's shared components directory for use in BigQuery connector documentation.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/connectors/bigquery/configuration.mdx#2025-04-17_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\nimport Config from \"@site/docs/reference/connectors/_jdbcConfig.mdx\";\n\n<Config />\n```\n\n----------------------------------------\n\nTITLE: Example Usage of ddn subgraph build apply Command\nDESCRIPTION: Example showing how to apply a Subgraph build to a specific project named 'pet-lion-2649' using the --project flag.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_subgraph_build_apply.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Apply a Subgraph build to Project \"pet-lion-2649\"\n ddn subgraph build apply <subgraph-build-version> --project pet-lion-2649\n```\n\n----------------------------------------\n\nTITLE: Running Scripts Using DDN CLI Command Syntax\nDESCRIPTION: Shows the basic syntax for running a script using the 'ddn run' command. This command executes custom scripts defined in the project's context config file, typically located at '<project-root>/.hasura/context.yaml'.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_run.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nddn run <script-name> [flags] [-- <args>]\n```\n\n----------------------------------------\n\nTITLE: Executing DDN Supergraph Build Diff Command in Bash\nDESCRIPTION: This command compares changes in the GraphQL schema between two build versions. It requires specifying two build version identifiers and optionally a project name.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_supergraph_build_diff.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nddn supergraph build diff <build-version-1> <build-version-2> [flags]\n```\n\n----------------------------------------\n\nTITLE: Using the ddn model list Command in Bash\nDESCRIPTION: The command syntax for listing details about collections of a specified DataConnectorLink and their corresponding Models.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_model_list.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nddn model list <connector-link-name> [flags]\n```\n\n----------------------------------------\n\nTITLE: Command Options Configuration\nDESCRIPTION: Available command-specific options for the upgrade-object-boolean-expression-types codemod.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_codemod_upgrade-object-boolean-expression-types.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sass\nCODE:\n```\n    --ci                  Disables the use of context\n-c, --context string      Name of the context to use. (default <current_context>)\n-h, --help                help for upgrade-object-boolean-expression-types\n    --subgraph string     Path to Subgraph config file\n    --supergraph string   Path to Supergraph config file\n```\n\n----------------------------------------\n\nTITLE: Adding Model for Native Query in PromptQL\nDESCRIPTION: Adds the native query as a model in your PromptQL setup. This makes the query available as a GraphQL operation in the final API.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/data-modeling/partials/classic-connectors/postgreSQL/_model-create-native-query-tutorial.mdx#2025-04-17_snippet_5\n\nLANGUAGE: ddn\nCODE:\n```\nddn model add my_pg order_users_of_same_age\n```\n\n----------------------------------------\n\nTITLE: Creating Commit\nDESCRIPTION: Git command to create a commit with a properly formatted message\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/wiki/contributing.mdx#2025-04-17_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ngit commit -m \"docs: update / fix / add <feature>\"\n```\n\n----------------------------------------\n\nTITLE: Adding CSV Models\nDESCRIPTION: DDN command to track all models generated from the CSV schema\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/recipes/tutorials/csv-files.mdx#2025-04-17_snippet_3\n\nLANGUAGE: ddn\nCODE:\n```\nddn model add csv \"*\"\n```\n\n----------------------------------------\n\nTITLE: Opening PowerShell Profile for Editing\nDESCRIPTION: This command opens the PowerShell profile in a text editor for adding the auto-completion script.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/installation.mdx#2025-04-17_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\nnotepad $PROFILE\n```\n\n----------------------------------------\n\nTITLE: Importing Video Player Component in MDX\nDESCRIPTION: Example of importing the custom Player component in an MDX documentation file for displaying video content.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/wiki/style/images.mdx#2025-04-17_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport Player from '@site/src/components/Player';\n```\n\n----------------------------------------\n\nTITLE: DDN Connector Build Logs Basic Command\nDESCRIPTION: The basic command syntax for retrieving connector build logs from Hasura DDN.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_connector_build_logs.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nddn connector build logs <connector-build-id> [flags]\n```\n\n----------------------------------------\n\nTITLE: Introspecting Node.js Lambda Connector with DDN CLI\nDESCRIPTION: Use the DDN CLI to introspect your Node.js lambda connector, which analyzes your connector code and discovers available commands and resources.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/data-modeling/partials/lambda-connectors/typescript/_command-update-tutorial.mdx#2025-04-17_snippet_0\n\nLANGUAGE: ddn\nCODE:\n```\nddn connector introspect my_ts\n```\n\n----------------------------------------\n\nTITLE: Introspecting the DDN Connector\nDESCRIPTION: Runs the introspection process on the 'my_ts' connector to analyze and discover the available functions and their signatures.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/data-modeling/partials/lambda-connectors/typescript/_command-create-tutorial.mdx#2025-04-17_snippet_2\n\nLANGUAGE: ddn\nCODE:\n```\nddn connector introspect my_ts\n```\n\n----------------------------------------\n\nTITLE: Setting Up Hasura CLI Auto-Completion for Bash on macOS\nDESCRIPTION: This command generates and installs the auto-completion script for Hasura CLI on macOS using Homebrew.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/installation.mdx#2025-04-17_snippet_6\n\nLANGUAGE: ddn\nCODE:\n```\nddn completion bash > $(brew --prefix)/etc/bash_completion.d/ddn\n```\n\n----------------------------------------\n\nTITLE: Command-Specific Options for ddn update-cli\nDESCRIPTION: Available flags specific to the ddn update-cli command, including help and version specification options.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_update-cli.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sass\nCODE:\n```\n-h, --help             help for update-cli\n    --version string   A specific version to install\n```\n\n----------------------------------------\n\nTITLE: Building Connector on Hasura DDN\nDESCRIPTION: Command to create a new build of a connector on Hasura DDN infrastructure.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/deployment/hasura-ddn/incremental-builds.mdx#2025-04-17_snippet_0\n\nLANGUAGE: ddn\nCODE:\n```\nddn connector build create --connector <path-to-connector.yaml>\n```\n\n----------------------------------------\n\nTITLE: Options Inherited from Parent Commands\nDESCRIPTION: Options that are inherited from parent commands and can be used with the 'ddn subgraph build apply' command, including log level configuration, prompting behavior, output format, and request timeout settings.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_subgraph_build_apply.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sass\nCODE:\n```\n--log-level string   Log level. Can be DEBUG, WARN, INFO, ERROR, or FATAL. (default \"INFO\")\n--no-prompt          Do not prompt for required but missing flags\n--out string         Output format. Can be table, json or yaml. (default \"table\")\n--timeout int        Request timeout in seconds [env: HASURA_DDN_TIMEOUT] (default 100)\n```\n\n----------------------------------------\n\nTITLE: Applying a Subgraph Build in Hasura DDN\nDESCRIPTION: This command applies a specific subgraph build version to the main project. It requires the project owner or admin privileges and the subgraph build version.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/project-configuration/subgraphs/working-with-multiple-repositories.mdx#2025-04-17_snippet_20\n\nLANGUAGE: ddn\nCODE:\n```\nddn subgraph build apply <subgraph-build-version>\n```\n\n----------------------------------------\n\nTITLE: DDN Connector Link Basic Command Syntax\nDESCRIPTION: The basic command syntax for adding a new DataConnectorLink to a Subgraph using the DDN CLI.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_connector-link_add.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nddn connector-link add <connector-link-name> [flags]\n```\n\n----------------------------------------\n\nTITLE: Configuring Anthropic API Key in .env File\nDESCRIPTION: Example of how to set the Anthropic API key in the .env file. This key is required for the AI functionality of the application.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/recipes/tutorials/bart-api.mdx#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# .env\n...\n...\nANTHROPIC_API_KEY=<your-anthropic-api-key>\n```\n\n----------------------------------------\n\nTITLE: DDN Relationship List Inherited Options\nDESCRIPTION: Options inherited from parent operations that can be used with the relationship list command\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_relationship_list.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sass\nCODE:\n```\n--log-level string   Log level. Can be DEBUG, WARN, INFO, ERROR, or FATAL. (default \"INFO\")\n--no-prompt          Do not prompt for required but missing flags\n--out string         Output format. Can be table, json or yaml. (default \"table\")\n--timeout int        Request timeout in seconds [env: HASURA_DDN_TIMEOUT] (default 100)\n```\n\n----------------------------------------\n\nTITLE: Markdown Bullet List Example\nDESCRIPTION: Demonstrates proper formatting for bullet lists in markdown documentation including punctuation and spacing rules.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/wiki/style/bullets.mdx#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- Don't use bullet points for one point.\n- Make sure that content which belongs under a bullet point is actually indented under that bullet point in markdown.\n- Use a period at the end of bullet lists which are a sentence, like this.\n- Bullet points should not have a blank line between each point.\n```\n\n----------------------------------------\n\nTITLE: Setting Up Temporary zsh Auto-Completion for Hasura CLI\nDESCRIPTION: This command loads auto-completion for the Hasura CLI in the current zsh session.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/installation.mdx#2025-04-17_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nsource <(ddn completion zsh)\n```\n\n----------------------------------------\n\nTITLE: Configuring Hasura LLM Provider in JSON\nDESCRIPTION: Shows the JSON configuration for using Hasura as the LLM provider in the Natural Language API request.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/promptql-apis/natural-language-api.mdx#2025-04-17_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"provider\": \"hasura\"\n}\n```\n\n----------------------------------------\n\nTITLE: Options Inherited from Parent Operations\nDESCRIPTION: Options that are inherited from parent commands, including logging configuration, prompting behavior, output format selection, and request timeout settings.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_supergraph_build_apply.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sass\nCODE:\n```\n--log-level string   Log level. Can be DEBUG, WARN, INFO, ERROR, or FATAL. (default \"INFO\")\n--no-prompt          Do not prompt for required but missing flags\n--out string         Output format. Can be table, json or yaml. (default \"table\")\n--timeout int        Request timeout in seconds [env: HASURA_DDN_TIMEOUT] (default 100)\n```\n\n----------------------------------------\n\nTITLE: Displaying Data Source Resources in DDN\nDESCRIPTION: Command to show the resources discovered from the data source after introspection.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/data-modeling/command.mdx#2025-04-17_snippet_1\n\nLANGUAGE: ddn\nCODE:\n```\nddn connector show-resources <connector_name>\n```\n\n----------------------------------------\n\nTITLE: Updating Existing CloudFormation Stack for Hasura Cloud BYOC\nDESCRIPTION: These Bash commands update an existing CloudFormation stack for Hasura Cloud BYOC using the provided template. It then waits for the stack update to complete.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/private-ddn/creating-a-data-plane/byoc.mdx#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\naws cloudformation update-stack \\\n  --stack-name hasura-cloud-byoc \\\n  --template-body file://cloudformation.yaml \\\n  --capabilities CAPABILITY_NAMED_IAM\n\naws cloudformation wait stack-update-complete \\\n  --stack-name hasura-cloud-byoc\n```\n\n----------------------------------------\n\nTITLE: Inherited Options from Parent Commands in Sass Format\nDESCRIPTION: Options that are inherited from parent commands, including settings for logging, output format, and request timeouts.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_supergraph_build_set-self-hosted-engine-url.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sass\nCODE:\n```\n--log-level string   Log level. Can be DEBUG, WARN, INFO, ERROR, or FATAL. (default \"INFO\")\n--no-prompt          Do not prompt for required but missing flags\n--out string         Output format. Can be table, json or yaml. (default \"table\")\n--timeout int        Request timeout in seconds [env: HASURA_DDN_TIMEOUT] (default 100)\n```\n\n----------------------------------------\n\nTITLE: Inherited Options for DDN CLI Model Upgrade Command\nDESCRIPTION: This snippet shows the options inherited from parent operations for the 'ddn codemod upgrade-model-v1-to-v2' command, including log level, prompting behavior, output format, and timeout settings.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_codemod_upgrade-model-v1-to-v2.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sass\nCODE:\n```\n--log-level string   Log level. Can be DEBUG, WARN, INFO, ERROR, or FATAL. (default \"INFO\")\n--no-prompt          Do not prompt for required but missing flags\n--out string         Output format. Can be table, json or yaml. (default \"table\")\n--timeout int        Request timeout in seconds [env: HASURA_DDN_TIMEOUT] (default 100)\n```\n\n----------------------------------------\n\nTITLE: Building DDN Supergraph\nDESCRIPTION: This command builds a local supergraph using DDN CLI.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/data-modeling/partials/classic-connectors/clickHouse/_model-create-tutorial.mdx#2025-04-17_snippet_3\n\nLANGUAGE: ddn\nCODE:\n```\nddn supergraph build local\n```\n\n----------------------------------------\n\nTITLE: Options for DDN Project Delete Command in SASS\nDESCRIPTION: These are the specific options available for the 'ddn project delete' command, including force deletion and help.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_project_delete.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sass\nCODE:\n```\n-f, --force   Delete project without confirmation\n-h, --help    help for delete\n```\n\n----------------------------------------\n\nTITLE: Configuring Subgraph Path in YAML\nDESCRIPTION: Example showing how to specify the subgraph configuration file path in the context configuration.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/project-configuration/project-management/manage-contexts.mdx#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ncontexts:\n  default:\n    project: great-ddn-1234\n    supergraph: ../supergraph.yaml\n    subgraph: ../app/subgraph.yaml\n    localEnvFile: ../.env\n    cloudEnvFile: ../.env.cloud\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenAI API Key in .env File\nDESCRIPTION: Example of creating a .env file with the OpenAI API key. This configuration is required for the script to communicate with OpenAI's GPT-4 model.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/utilities/improve-front-matter-seo/README.md#2025-04-17_snippet_2\n\nLANGUAGE: makefile\nCODE:\n```\nOPENAI_API_KEY=your_openai_api_key\n```\n\n----------------------------------------\n\nTITLE: Example DDN Connector-Link Remove Usage\nDESCRIPTION: Example showing how to remove a DataConnectorLink named 'mydb' from a Subgraph located at './app/subgraph.yaml'.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_connector-link_remove.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nddn connector-link remove mydb --subgraph ./app/subgraph.yaml\n```\n\n----------------------------------------\n\nTITLE: Removing Environment Variables\nDESCRIPTION: Example of environment variables that should be removed when deleting a subgraph, showing the typical naming pattern with subgraph prefix.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/project-configuration/tutorials/remove-subgraph.mdx#2025-04-17_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n<SUBGRAPH_NAME>_<CONNECTOR>_READ_URL=\"<connector-read-url>\"\n<SUBGRAPH_NAME>_<CONNECTOR>_WRITE_URL=\"<connector-write-url>\"\n<SUBGRAPH_NAME>_<CONNECTOR>_AUTHORIZATION_HEADER=\"Bearer <roken>\"\n```\n\n----------------------------------------\n\nTITLE: DDN Project Create Command Options in SASS\nDESCRIPTION: Specific options available for the 'ddn project create' command, including setting the data plane ID, accessing help, and specifying the project plan.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_project_create.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sass\nCODE:\n```\n    --data-plane-id uuid   The DDN instance where the Project should be hosted\n-h, --help                 help for create\n    --plan string          DDN Project plan\n```\n\n----------------------------------------\n\nTITLE: Installing DDN Autocompletion for Fish Shell Persistently\nDESCRIPTION: This command generates the autocompletion script for DDN and saves it to the fish shell's completions directory for persistent loading in new sessions.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_completion_fish.mdx#2025-04-17_snippet_1\n\nLANGUAGE: sass\nCODE:\n```\nddn completion fish > ~/.config/fish/completions/ddn.fish\n```\n\n----------------------------------------\n\nTITLE: Displaying Options for ddn supergraph build Command in Sass\nDESCRIPTION: This code snippet shows the available options for the 'ddn supergraph build' command. It includes a help option specific to this command.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_supergraph_build.mdx#2025-04-17_snippet_0\n\nLANGUAGE: sass\nCODE:\n```\n-h, --help   help for build\n```\n\n----------------------------------------\n\nTITLE: DDN CLI Inherited Options\nDESCRIPTION: Options inherited from parent operations for DDN CLI commands including logging, prompting, output format, and timeout settings.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_completion_zsh.mdx#2025-04-17_snippet_5\n\nLANGUAGE: sass\nCODE:\n```\n--log-level string   Log level. Can be DEBUG, WARN, INFO, ERROR, or FATAL. (default \"INFO\")\n--no-prompt          Do not prompt for required but missing flags\n--out string         Output format. Can be table, json or yaml. (default \"table\")\n--timeout int        Request timeout in seconds [env: HASURA_DDN_TIMEOUT] (default 100)\n```\n\n----------------------------------------\n\nTITLE: Initializing PromptQL Supergraph Project\nDESCRIPTION: Command to create a new supergraph project with PromptQL integration\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/how-to-build-with-promptql/with-api-endpoints.mdx#2025-04-17_snippet_0\n\nLANGUAGE: ddn\nCODE:\n```\nddn supergraph init myproject --with-promptql\n```\n\n----------------------------------------\n\nTITLE: Setting Current Context Example\nDESCRIPTION: Example showing how to set the current context to 'default' using the DDN CLI.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_context_set-current-context.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Set current context to 'default'\n ddn context set-current-context default\n```\n\n----------------------------------------\n\nTITLE: Command-Specific Options for Fix Traces Environment Variable\nDESCRIPTION: These are the specific options available for the 'ddn codemod fix-traces-env-var' command, including the required project directory flag.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_codemod_fix-traces-env-var.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sass\nCODE:\n```\n    --dir string   The Hasura project directory (required)\n-h, --help         help for fix-traces-env-var\n```\n\n----------------------------------------\n\nTITLE: Markdown Heading Format Examples\nDESCRIPTION: Examples of correct heading formats in markdown, including title case, sentence case, and step numbering conventions.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/wiki/style/headings.mdx#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nTitle Capitalization Like This\n```\n\nLANGUAGE: markdown\nCODE:\n```\nSentence capitalization like this\n```\n\nLANGUAGE: markdown\nCODE:\n```\nStep 0: Do something great\n```\n\nLANGUAGE: markdown\nCODE:\n```\n## Introduction\n```\n\n----------------------------------------\n\nTITLE: Using DDN CLI to delete a subgraph\nDESCRIPTION: Basic syntax for the ddn subgraph delete command showing the required argument (subgraph-name) and optional flags.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_subgraph_delete.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nddn subgraph delete <subgraph-name> [flags]\n```\n\n----------------------------------------\n\nTITLE: Markdown Page Title Example\nDESCRIPTION: Example of a self-sufficient page title with sidebar label configuration\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/wiki/style/headings.mdx#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nAWS deployment guide for Hasura GraphQL Engine\n```\n\n----------------------------------------\n\nTITLE: Options for DDN Plugins Upgrade Command\nDESCRIPTION: Available options specific to the 'upgrade' command, including help flag and specifying a version for the upgrade.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_plugins_upgrade.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sass\nCODE:\n```\n-h, --help             help for upgrade\n    --version string   Version to be upgraded\n```\n\n----------------------------------------\n\nTITLE: Generating PromptQL Secret Key in Bash\nDESCRIPTION: This command generates a PromptQL Secret key for the project using the DDN CLI. It should be run if the project lacks a PromptQL Secret key or if the existing key is invalid.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/promptql-playground/troubleshooting.mdx#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nddn auth generate-promptql-secret-key\n```\n\n----------------------------------------\n\nTITLE: DDN Relationship List Command Options\nDESCRIPTION: Available command-specific options for the relationship list command\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_relationship_list.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sass\nCODE:\n```\n    --ci                  Disables the use of context\n-c, --context string      Name of the context to use. (default <current_context>)\n-h, --help                help for list\n    --subgraph string     Path to Subgraph config file\n    --supergraph string   Path to Supergraph config file\n```\n\n----------------------------------------\n\nTITLE: Displaying Options for DDN Connector Env Command in Sass\nDESCRIPTION: This code snippet shows the options available for the 'ddn connector env' command. It includes the help flag for displaying command information.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_connector_env.mdx#2025-04-17_snippet_0\n\nLANGUAGE: sass\nCODE:\n```\n-h, --help   help for env\n```\n\n----------------------------------------\n\nTITLE: Opening Hasura Console\nDESCRIPTION: Command to open the local Hasura Console for exploring the project.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/recipes/tutorials/bart-api.mdx#2025-04-17_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nddn console --local\n```\n\n----------------------------------------\n\nTITLE: Command Options for Subgraph Retrieval in SASS\nDESCRIPTION: These are the specific options available for the 'ddn project subgraph get' command. They include flags for CI mode, context specification, help, and project name.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_project_subgraph_get.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sass\nCODE:\n```\n    --ci               Disables the use of context\n-c, --context string   Name of the context to use. (default <current_context>)\n-h, --help             help for get\n-p, --project string   DDN Project name\n```\n\n----------------------------------------\n\nTITLE: Command Options for set-api-access-mode\nDESCRIPTION: List of specific command options available for the set-api-access-mode command, including context selection and project specification.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_project_set-api-access-mode.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sass\nCODE:\n```\n    --ci               Disables the use of context\n-c, --context string   Name of the context to use. (default <current_context>)\n-h, --help             help for set-api-access-mode\n-p, --project string   DDN Project name\n```\n\n----------------------------------------\n\nTITLE: Setting Custom URL Slug in Markdown\nDESCRIPTION: Example of using frontmatter to manually set URL slug for index files.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/wiki/working-with-docusaurus.mdx#2025-04-17_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n---\nslug: index\n---\n```\n\n----------------------------------------\n\nTITLE: MySQL Table Definition Example\nDESCRIPTION: Sample table definition generated during introspection, showing columns, primary keys, and foreign key relationships. This example depicts an 'Album' table with its columns and relationships.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/connectors/mysql/configuration.mdx#2025-04-17_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"tableName\": \"Album\",\n  \"tableType\": \"TABLE\",\n  \"description\": \"\",\n  \"columns\": [\n    {\n      \"name\": \"AlbumId\",\n      \"description\": \"\",\n      \"type\": \"int\",\n      \"numeric_scale\": 0,\n      \"nullable\": false,\n      \"auto_increment\": true,\n      \"is_primarykey\": true\n    },\n    {\n      \"name\": \"Title\",\n      \"description\": \"\",\n      \"type\": \"varchar\",\n      \"numeric_scale\": null,\n      \"nullable\": false,\n      \"auto_increment\": false,\n      \"is_primarykey\": false\n    },\n    {\n      \"name\": \"ArtistId\",\n      \"description\": \"\",\n      \"type\": \"int\",\n      \"numeric_scale\": 0,\n      \"nullable\": false,\n      \"auto_increment\": false,\n      \"is_primarykey\": false\n    }\n  ],\n  \"pks\": [\"AlbumId\"],\n  \"fks\": {\n    \"FK_AlbumArtistId\": {\n      \"foreign_collection\": \"Artist\",\n      \"column_mapping\": {\n        \"ArtistId\": \"ArtistId\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Loading DDN Completions for Current Session\nDESCRIPTION: Command to load DDN CLI completions for the current shell session.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_completion_zsh.mdx#2025-04-17_snippet_1\n\nLANGUAGE: sass\nCODE:\n```\nsource <(ddn completion zsh)\n```\n\n----------------------------------------\n\nTITLE: Object Type Definition with JSON Metadata\nDESCRIPTION: YAML configuration that defines the object type structure with detailed metadata descriptions for JSON fields and their mappings to Snowflake columns.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/recipes/tutorials/add-jsonb-support-snowflake.mdx#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nkind: ObjectType\nversion: v1\ndefinition:\n  name: EcommUsers\n  fields:\n    - name: createdAt\n      type: Timestamp!\n    - name: email\n      type: String_1!\n    - name: userDetails\n      type: String_1!\n      description:\n        \"This is stringified JSON it has the following fields: address, shipping_state, phone, preferences is an object\n        which has newsletter and theme {address: '123 Main St', shipping_state: 'CA', phone: '555-555-5555',\n        preferences: {newsletter: true, theme: 'dark'}}\"\n    - name: userId\n      type: Biginteger!\n  graphql:\n    typeName: EcommUsers\n    inputTypeName: EcommUsersInput\n  dataConnectorTypeMapping:\n    - dataConnectorName: snow\n      dataConnectorObjectType: ECOMM_USERS\n      fieldMapping:\n        createdAt:\n          column:\n            name: CREATED_AT\n        email:\n          column:\n            name: EMAIL\n        userDetails:\n          column:\n            name: USER_DETAILS\n        userId:\n          column:\n            name: USER_ID\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query for Users in Caution Admonition\nDESCRIPTION: A GraphQL query example that retrieves user data with id, name, and email fields from a users collection.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/wiki/kitchen-sink.mdx#2025-04-17_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\nquery Users {\n  users {\n    id\n    name\n    email\n  }\n }\n```\n\n----------------------------------------\n\nTITLE: Installing PromptQL Documentation Dependencies with Yarn\nDESCRIPTION: Command to install all required dependencies for the PromptQL documentation project using Yarn package manager.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn\n```\n\n----------------------------------------\n\nTITLE: DDN Relationship List Usage Examples\nDESCRIPTION: Examples showing different ways to use the relationship list command including listing for specific supergraphs and subgraphs\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_relationship_list.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# List all Relationships for the supergraph set in the context\n ddn relationship list\n\n# List all Relationships for a specific supergraph\n ddn relationship list --supergraph ./supergraph.cloud.yaml\n\n# List all Relationships for a specific subgraph\n ddn relationship list --subgraph app/subgraph.yaml\n```\n\n----------------------------------------\n\nTITLE: Creating Hasura DDN Build for Staging Project\nDESCRIPTION: Generates a new build on the staging project using the current context's metadata.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/project-configuration/tutorials/manage-multiple-environments.mdx#2025-04-17_snippet_12\n\nLANGUAGE: ddn\nCODE:\n```\nddn supergraph build create\n```\n\n----------------------------------------\n\nTITLE: Starting DDN Project\nDESCRIPTION: Command to start the DDN project using Docker.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/recipes/tutorials/apple-health-assistant.mdx#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nddn run docker-start\n```\n\n----------------------------------------\n\nTITLE: DDN Connector Link Update Inherited Options\nDESCRIPTION: Options inherited from parent operations that can be used with the update command.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_connector-link_update.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sass\nCODE:\n```\n--log-level string   Log level. Can be DEBUG, WARN, INFO, ERROR, or FATAL. (default \"INFO\")\n--no-prompt          Do not prompt for required but missing flags\n--out string         Output format. Can be table, json or yaml. (default \"table\")\n--timeout int        Request timeout in seconds [env: HASURA_DDN_TIMEOUT] (default 100)\n```\n\n----------------------------------------\n\nTITLE: Inherited Options for DDN Project Commands in SASS\nDESCRIPTION: Options inherited from parent operations for all DDN project commands, including log level, prompting behavior, output format, and request timeout settings.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_project_create.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sass\nCODE:\n```\n--log-level string   Log level. Can be DEBUG, WARN, INFO, ERROR, or FATAL. (default \"INFO\")\n--no-prompt          Do not prompt for required but missing flags\n--out string         Output format. Can be table, json or yaml. (default \"table\")\n--timeout int        Request timeout in seconds [env: HASURA_DDN_TIMEOUT] (default 100)\n```\n\n----------------------------------------\n\nTITLE: Examples of DDN Relationship Add Command Usage in Bash\nDESCRIPTION: Example usages of the 'ddn relationship add' command showing different scenarios: adding all relationships, adding relationships for specific collections, using glob patterns, and specifying foreign key constraints.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_relationship_add.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Add all Relationships for DataConnectorLink \"mydb\" in the subgraph set in the context\n ddn relationship add mydb \"*\"\n\n# Add Relationships for the collection \"Album\" in the DataConnectorLink \"mydb\" in the Subgraph \"app\"\n ddn relationship add mydb Album --subgraph ./app/subgraph.yaml\n\n# Add Relationships for collections that match the glob pattern \"sales_*\"\n ddn relationship add mydb \"sales_*\"\n\n# Add Relationships for the collection \"Album\" defined by the foreign key \"artists_album_id_fkey\" on the collection \"Artist\"\n ddn relationship add mydb Album --fk-collection Artist --fk-name artists_album_id_fkey\n```\n\n----------------------------------------\n\nTITLE: Admonition Formatting with Diff Highlighting\nDESCRIPTION: Demonstrates proper formatting for admonitions with empty lines at beginning and end, highlighted using diff syntax.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/wiki/docusaurus-mdx-guide/admonitions.mdx#2025-04-17_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\n+\n:::info Note\n+\nMake sure to place the note/admonition in a place where the user will see it at the appropriate time.\n+\n:::\n+\n```\n\n----------------------------------------\n\nTITLE: Options Inherited from Parent Operations in SASS\nDESCRIPTION: Options that are inherited from parent commands and apply to the 'ddn relationship add' command, including logging level, prompting behavior, output format, and timeout settings.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_relationship_add.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sass\nCODE:\n```\n--log-level string   Log level. Can be DEBUG, WARN, INFO, ERROR, or FATAL. (default \"INFO\")\n--no-prompt          Do not prompt for required but missing flags\n--out string         Output format. Can be table, json or yaml. (default \"table\")\n--timeout int        Request timeout in seconds [env: HASURA_DDN_TIMEOUT] (default 100)\n```\n\n----------------------------------------\n\nTITLE: Building Local Hasura DDN Supergraph\nDESCRIPTION: Creates a local build of the Hasura DDN supergraph, storing it in the 'engine/build' directory.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/project-configuration/tutorials/manage-multiple-environments.mdx#2025-04-17_snippet_4\n\nLANGUAGE: ddn\nCODE:\n```\nddn supergraph build local\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Logic in Go\nDESCRIPTION: Defines a Go function that simulates taking an action on behalf of a user. It includes structs for input arguments and response, and a function that prints a message and returns a success response.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/business-logic/tutorials/1-take-action-for-a-user.mdx#2025-04-17_snippet_4\n\nLANGUAGE: go\nCODE:\n```\npackage functions\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\n\t\"hasura-ndc.dev/ndc-go/types\"\n)\n\ntype TakeActionArguments struct {\n\tRequest string `json:\"request\"`\n}\n\ntype TakeActionResponse struct {\n\tSuccess bool   `json:\"success\"`\n\tMessage string `json:\"message\"`\n}\n\nfunc ProcedureTakeActionOnBehalfOfUser(\n\tctx context.Context,\n\tstate *types.State,\n\targs *TakeActionArguments,\n) (*TakeActionResponse, error) {\n\tfmt.Println(\"Taking action on behalf of user\")\n\n\treturn &TakeActionResponse{\n\t\tSuccess: true,\n\t\tMessage: fmt.Sprintf(\"Successfully took action on user's behalf: %s\", args.Request),\n\t}, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Inherited DDN CLI Options\nDESCRIPTION: Global options inherited from parent commands including logging level, prompting behavior, output format, and timeout settings.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_completion_powershell.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sass\nCODE:\n```\n--log-level string   Log level. Can be DEBUG, WARN, INFO, ERROR, or FATAL. (default \"INFO\")\n--no-prompt          Do not prompt for required but missing flags\n--out string         Output format. Can be table, json or yaml. (default \"table\")\n--timeout int        Request timeout in seconds [env: HASURA_DDN_TIMEOUT] (default 100)\n```\n\n----------------------------------------\n\nTITLE: Viewing Details of a Specific Subgraph in Bash\nDESCRIPTION: This example shows how to view details of a specific subgraph named 'app' within a project using the DDN CLI. Both the subgraph name and project name are specified.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_project_subgraph_get.mdx#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nddn project subgraph get app --project pet-lion-2649\n```\n\n----------------------------------------\n\nTITLE: Implementing Row-Level Security with ModelPermissions in PromptQL\nDESCRIPTION: A YAML configuration for implementing row-level security that restricts users to only access their own records in the Users table. The admin role has full access while the user role can only see records where the id matches their user-id session variable.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/data-modeling/permissions.mdx#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\n# e.g., Users.hml\nkind: ModelPermissions\nversion: v1\ndefinition:\n  modelName: Users\n  permissions:\n    # admin is present by default\n    - role: admin\n      select:\n        filter: null\n    #highlight-start\n    - role: user\n      select:\n        filter:\n          fieldComparison:\n            field: id\n            operator: _eq\n            value:\n              sessionVariable: x-hasura-user-id\n    #highlight-end\n```\n\n----------------------------------------\n\nTITLE: Creating Environment Configuration for CLI Version Utility\nDESCRIPTION: Shell command to create a scaffolded .env file with GitHub API URL and token placeholder for the CLI version update utility.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/utilities/update-cli-version/README.md#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\necho -e 'V3_CLI_RELEASE_URL=\"https://api.github.com/repos/hasura/v3-cli-go/releases/latest\"\\nGH_CLI_VERSION_TOKEN=' > .env\n```\n\n----------------------------------------\n\nTITLE: Deleting Subgraph Command Syntax\nDESCRIPTION: Basic command syntax for deleting a subgraph from a project using the DDN CLI.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_project_subgraph_delete.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nddn project subgraph delete <subgraph-name> [flags]\n```\n\n----------------------------------------\n\nTITLE: Starting Local Hasura Engine for Customers\nDESCRIPTION: Starts the local Hasura Engine and PostgreSQL connector for testing the customers subgraph.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/project-configuration/tutorials/work-with-multiple-repositories.mdx#2025-04-17_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nddn run docker-start\n```\n\n----------------------------------------\n\nTITLE: DDN Connector Build Inherited Options\nDESCRIPTION: Options inherited from parent operations for all connector build commands, including logging, output format, and timeout settings.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_connector_build.mdx#2025-04-17_snippet_1\n\nLANGUAGE: sass\nCODE:\n```\n--log-level string   Log level. Can be DEBUG, WARN, INFO, ERROR, or FATAL. (default \"INFO\")\n--no-prompt          Do not prompt for required but missing flags\n--out string         Output format. Can be table, json or yaml. (default \"table\")\n--timeout int        Request timeout in seconds [env: HASURA_DDN_TIMEOUT] (default 100)\n```\n\n----------------------------------------\n\nTITLE: DDN Version Inherited Options\nDESCRIPTION: Options inherited from parent operations including log level control, prompting behavior, output format, and timeout settings.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_version.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sass\nCODE:\n```\n--log-level string   Log level. Can be DEBUG, WARN, INFO, ERROR, or FATAL. (default \"INFO\")\n--no-prompt          Do not prompt for required but missing flags\n--out string         Output format. Can be table, json or yaml. (default \"table\")\n--timeout int        Request timeout in seconds [env: HASURA_DDN_TIMEOUT] (default 100)\n```\n\n----------------------------------------\n\nTITLE: Executing 'ddn context get-context' Command in Bash\nDESCRIPTION: This snippet shows the basic syntax for using the 'ddn context get-context' command. It can be used to list all contexts or get details of a specific context by providing its name.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_context_get-context.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nddn context get-context [name] [flags]\n```\n\n----------------------------------------\n\nTITLE: Inherited Options for DDN Supergraph Build Diff Command in SASS\nDESCRIPTION: These options are inherited from parent operations and can be used with the 'ddn supergraph build diff' command. They include settings for log level, prompting behavior, output format, and request timeout.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_supergraph_build_diff.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sass\nCODE:\n```\n--log-level string   Log level. Can be DEBUG, WARN, INFO, ERROR, or FATAL. (default \"INFO\")\n--no-prompt          Do not prompt for required but missing flags\n--out string         Output format. Can be table, json or yaml. (default \"table\")\n--timeout int        Request timeout in seconds [env: HASURA_DDN_TIMEOUT] (default 100)\n```\n\n----------------------------------------\n\nTITLE: Listing AWS Availability Zones using AWS CLI\nDESCRIPTION: This command uses the AWS CLI to list available Availability Zones in a specified region, displaying their Zone Names and Zone IDs. It's useful for selecting the appropriate AZ IDs when configuring a Data Plane in AWS.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/private-ddn/creating-a-data-plane/dedicated.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\naws ec2 describe-availability-zones \\\n  --region us-east-1 \\\n  --output table \\\n  --query \"AvailabilityZones[?State=='available'] | [].{ZoneName: ZoneName, ZoneId: ZoneId}\"\n```\n\n----------------------------------------\n\nTITLE: Inherited Options for DDN Project Subgraph Create Command\nDESCRIPTION: Options inherited from parent commands that can be used with the 'ddn project subgraph create' command, including log level, prompting behavior, output format, and request timeout settings.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_project_subgraph_create.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sass\nCODE:\n```\n--log-level string   Log level. Can be DEBUG, WARN, INFO, ERROR, or FATAL. (default \"INFO\")\n--no-prompt          Do not prompt for required but missing flags\n--out string         Output format. Can be table, json or yaml. (default \"table\")\n--timeout int        Request timeout in seconds [env: HASURA_DDN_TIMEOUT] (default 100)\n```\n\n----------------------------------------\n\nTITLE: Updating Engine Compose Configuration in YAML\nDESCRIPTION: Demonstrates how to update the compose.yaml file by removing connector references for the deleted subgraph.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/project-configuration/tutorials/remove-subgraph.mdx#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ninclude:\n  - path: <subgraph-name>/connector/<connector-1>/compose.yaml\n  - path: <subgraph-name>/connector/<connector-2>/compose.yaml\n  ...\nservices:\n  engine: ...\n```\n\n----------------------------------------\n\nTITLE: DDN Model Remove Inherited Options\nDESCRIPTION: Shows the options inherited from parent operations for the ddn model remove command.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_model_remove.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sass\nCODE:\n```\n--log-level string   Log level. Can be DEBUG, WARN, INFO, ERROR, or FATAL. (default \"INFO\")\n--no-prompt          Do not prompt for required but missing flags\n--out string         Output format. Can be table, json or yaml. (default \"table\")\n--timeout int        Request timeout in seconds [env: HASURA_DDN_TIMEOUT] (default 100)\n```\n\n----------------------------------------\n\nTITLE: Initializing Hasura DDN Parent Project\nDESCRIPTION: Creates a new local project for the parent supergraph and initializes a git repository.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/project-configuration/tutorials/work-with-multiple-repositories.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nddn supergraph init parent-project --with-promptql && cd parent-project && git init\n```\n\n----------------------------------------\n\nTITLE: DDN Connector SetEnv Command Options in SASS\nDESCRIPTION: These are the available options for the 'ddn connector setenv' command, including flags for CI mode, context selection, and environment variable specification.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_connector_setenv.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sass\nCODE:\n```\n    --ci                     Disables the use of context\n    --connector string       Path to Connector YAML config file\n-c, --context string         Name of the context to use. (default <current_context>)\n-e, --env stringArray        Environment variable, e.g. key=val. Can be repeated to provide multiple env vars\n    --env-file stringArray   Path to .env file. Can be repeated to provide multiple env files\n-h, --help                   help for setenv\n```\n\n----------------------------------------\n\nTITLE: Starting DDN Project with Docker\nDESCRIPTION: Command to start the DDN project using Docker.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/recipes/tutorials/duckduckgo-web-search.mdx#2025-04-17_snippet_4\n\nLANGUAGE: ddn\nCODE:\n```\nddn run docker-start\n```\n\n----------------------------------------\n\nTITLE: Command Options for 'ddn subgraph add' in SASS Format\nDESCRIPTION: Available command-specific options for the 'ddn subgraph add' command, including help flag, subgraph path, and target supergraph specifications.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_subgraph_add.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sass\nCODE:\n```\n-h, --help                            help for add\n    --subgraph string                 Path to Subgraph config file (required)\n    --target-supergraph stringArray   Supergraph config file to add the Subgraph. Can be repeated to provide multiple Supergraph config files (required)\n```\n\n----------------------------------------\n\nTITLE: ModelPermissions Configuration for Row-Level Security\nDESCRIPTION: YAML configuration defining ModelPermissions for the Orders model, allowing admin role full access while restricting user role to only access rows where userId matches their session variable.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/auth/webhook/webhook-mode.mdx#2025-04-17_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n---\nkind: ModelPermissions\nversion: v1\ndefinition:\n  modelName: Orders\n  permissions:\n    - role: admin\n      select:\n        filter: null\n        allowSubscriptions: true\n# highlight-start\n    - role: user\n      select:\n        filter:\n          fieldComparison:\n            field: userId\n            operator: _eq\n            value:\n              sessionVariable: x-hasura-user-id\n# highlight-end\n```\n\n----------------------------------------\n\nTITLE: Renaming GraphQL Prefixes Using Codemod\nDESCRIPTION: These bash commands show how to use the 'rename-graphql-prefixes' codemod to add, remove, or change prefixes in already generated metadata. The codemod can be applied to the current subgraph context or a specific subgraph file.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/project-configuration/subgraphs/subgraph-prefixing.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Add root field and type name prefixes to the subgraph set in the context\nddn codemod rename-graphql-prefixes --graphql-root-field 'app_' --graphql-type-name 'App_'\n\n# Change the root field prefix for the specified subgraph\nddn codemod rename-graphql-prefixes --subgraph app/subgraph.yaml --from-graphql-root-field 'app_' --graphql-root-field 'new_'\n```\n\n----------------------------------------\n\nTITLE: ConnectorBuild Command Options\nDESCRIPTION: Available command options and flags for customizing the ConnectorBuild creation process.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_connector_build_create.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sass\nCODE:\n```\n    --ci                             Disables the use of context\n    --connector string               Path to Connector YAML config file\n-c, --context string                 Name of the context to use. (default <current_context>)\n-e, --env stringArray                Environment variable, e.g. key=val. Can be repeated to provide multiple env vars\n    --env-file stringArray           Path to .env file. Can be repeated to provide multiple env files\n-h, --help                           help for create\n-p, --project string                 DDN Project name\n    --target-connector-link string   DataConnectorLink to update with the schema from the ConnectorBuild\n    --target-env-file string         Path to the env file in which the Build URLs should be updated in\n    --target-subgraph string         Path to Subgraph config file containing target DataConnectorLink\n    --update-connector-link-schema   Update DataConnectorLink schema with the NDC schema of the built connector. (default: false)\n```\n\n----------------------------------------\n\nTITLE: Examples of DDN CLI Model Upgrade Command Usage\nDESCRIPTION: These examples demonstrate different ways to use the 'ddn codemod upgrade-model-v1-to-v2' command, including running on the current context, a specific supergraph, or a specific subgraph.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_codemod_upgrade-model-v1-to-v2.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Run on the supergraph defined in the context\n ddn codemod upgrade-model-v1-to-v2\n\n# Run on a specific supergraph\n ddn codemod upgrade-model-v1-to-v2 --supergraph ./supergraph.cloud.yaml\n\n# Run on a specific subgraph\n ddn codemod upgrade-model-v1-to-v2 --subgraph app/subgraph.yaml\n```\n\n----------------------------------------\n\nTITLE: DDN Connector Link Inherited Options\nDESCRIPTION: Options inherited from parent operations that affect the connector link addition process, including logging and output formatting settings.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_connector-link_add.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sass\nCODE:\n```\n--log-level string   Log level. Can be DEBUG, WARN, INFO, ERROR, or FATAL. (default \"INFO\")\n--no-prompt          Do not prompt for required but missing flags\n--out string         Output format. Can be table, json or yaml. (default \"table\")\n--timeout int        Request timeout in seconds [env: HASURA_DDN_TIMEOUT] (default 100)\n```\n\n----------------------------------------\n\nTITLE: Inherited Parent Command Options\nDESCRIPTION: Options inherited from parent operations that can be used with the set-current-context command.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_context_set-current-context.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sass\nCODE:\n```\n--log-level string   Log level. Can be DEBUG, WARN, INFO, ERROR, or FATAL. (default \"INFO\")\n--no-prompt          Do not prompt for required but missing flags\n--out string         Output format. Can be table, json or yaml. (default \"table\")\n--timeout int        Request timeout in seconds [env: HASURA_DDN_TIMEOUT] (default 100)\n```\n\n----------------------------------------\n\nTITLE: Creating Initial Git Commit\nDESCRIPTION: This shell command adds all files to Git staging and creates an initial commit.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/project-configuration/subgraphs/working-with-multiple-repositories.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ngit add . && git commit -m \"Initial commit\"\n```\n\n----------------------------------------\n\nTITLE: Command-Specific Options for DDN Connector Resource Display\nDESCRIPTION: Lists the specific options available for the show-resources command, including CI mode, context selection, and subgraph configuration.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_connector_show-resources.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sass\nCODE:\n```\n    --ci                Disables the use of context\n-c, --context string    Name of the context to use. (default <current_context>)\n-h, --help              help for show-resources\n    --subgraph string   Path to Subgraph config file\n```\n\n----------------------------------------\n\nTITLE: Starting the DDN Project\nDESCRIPTION: Command to start the DDN project using Docker.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/recipes/tutorials/huggingface-csv-parquet-sqlite.mdx#2025-04-17_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nddn run docker-start\n```\n\n----------------------------------------\n\nTITLE: Checking for Existing CloudFormation Stack\nDESCRIPTION: This Bash command checks if the CloudFormation stack for Hasura Cloud BYOC already exists. It's used to determine whether to create a new stack or update an existing one.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/private-ddn/creating-a-data-plane/byoc.mdx#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\naws cloudformation describe-stacks --stack-name hasura-cloud-byoc\n```\n\n----------------------------------------\n\nTITLE: Converting Video to WebM Format using FFmpeg\nDESCRIPTION: Command to convert and compress MP4 videos to WebM format using FFmpeg with VP9 codec and specific compression settings. The CRF value of 55 provides a balance between quality and file size.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/wiki/style/images.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n ffmpeg -i <ORIGINAL>.mp4 -c vp9 -b:v 0 -crf 55 <DESIRED_FINAL_FILENAME>.webm\n```\n\n----------------------------------------\n\nTITLE: Options Inherited from Parent Commands\nDESCRIPTION: Shows the global options inherited from parent commands that can be used with all 'ddn project' subcommands, including logging, output formatting, and timeout settings.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_project.mdx#2025-04-17_snippet_1\n\nLANGUAGE: sass\nCODE:\n```\n--log-level string   Log level. Can be DEBUG, WARN, INFO, ERROR, or FATAL. (default \"INFO\")\n--no-prompt          Do not prompt for required but missing flags\n--out string         Output format. Can be table, json or yaml. (default \"table\")\n--timeout int        Request timeout in seconds [env: HASURA_DDN_TIMEOUT] (default 100)\n```\n\n----------------------------------------\n\nTITLE: Using Markdown Variables for Links in Hasura Docs\nDESCRIPTION: Demonstrates the use of reference-style links in Markdown to improve maintainability and reduce repetition in Hasura documentation.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/wiki/docusaurus-mdx-guide/page-structure.mdx#2025-04-17_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n## Section one\n\n.....\n\nREST ... [create_action][metadata-create-action] or [update_action][metadata-update-action] Metadata APIs ...\n[request_transform][requesttransformation] field ...:\n\n....\n\n## Section two\n\n.....\n\nREST ... [create_action][metadata-create-action] or [update_action][metadata-update-action] Metadata APIs ...\n[request_transform][requesttransformation] field ...:\n\n....\n\n<!-- Shared Link Variables -->\n\n[metadata-create-action]: /api-reference/metadata-api/actions.mdx#metadata-create-action\n[metadata-update-action]: /api-reference/metadata-api/actions.mdx#metadata-update-action\n[requesttransformation]: /api-reference/syntax-defs.mdx#requesttransformation\n```\n\n----------------------------------------\n\nTITLE: DDN Codemod Help Options\nDESCRIPTION: Basic help command options for the DDN codemod CLI command.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_codemod.mdx#2025-04-17_snippet_0\n\nLANGUAGE: sass\nCODE:\n```\n-h, --help   help for codemod\n```\n\n----------------------------------------\n\nTITLE: Command-Specific Options for DDN Connector List\nDESCRIPTION: These options are specific to the 'ddn connector list' command. They allow for specifying help output and filtering by a specific connector from the Hasura Connector Hub.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_connector_list.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sass\nCODE:\n```\n-h, --help                   help for list\n    --hub-connector string   Name of the Connector in Hasura Connector Hub, ref: https://hasura.io/connectors. eg: hasura/nodejs\n```\n\n----------------------------------------\n\nTITLE: Querying the Name Transformation Function with GraphQL\nDESCRIPTION: A GraphQL query that calls the 'shoutName' function with the name 'Alice' as input, demonstrating how to use the custom function in a query.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/data-modeling/partials/lambda-connectors/go/_command-create-tutorial.mdx#2025-04-17_snippet_7\n\nLANGUAGE: graphql\nCODE:\n```\nquery ShoutTheName {\n  shoutName(name: \"Alice\")\n}\n```\n\n----------------------------------------\n\nTITLE: Command Options - DDN Codemod AuthConfig Upgrade\nDESCRIPTION: Available command-specific options for the upgrade-auth-config-to-v3 command.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_codemod_upgrade-auth-config-to-v3.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sass\nCODE:\n```\n    --ci                  Disables the use of context\n-c, --context string      Name of the context to use. (default <current_context>)\n-h, --help                help for upgrade-auth-config-to-v3\n    --subgraph string     Path to Subgraph config file\n    --supergraph string   Path to Supergraph config file\n```\n\n----------------------------------------\n\nTITLE: Creating Environment File for API Keys\nDESCRIPTION: Command to create a .env file from the provided example file for storing API keys.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/recipes/tutorials/bart-api.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncp .env.example .env\n```\n\n----------------------------------------\n\nTITLE: Inherited Options for DDN CLI Commands in SASS\nDESCRIPTION: This snippet shows the options inherited from parent operations for the 'ddn command add' command. It includes options for log level, prompting, output format, and request timeout.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_command_add.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sass\nCODE:\n```\n--log-level string   Log level. Can be DEBUG, WARN, INFO, ERROR, or FATAL. (default \"INFO\")\n--no-prompt          Do not prompt for required but missing flags\n--out string         Output format. Can be table, json or yaml. (default \"table\")\n--timeout int        Request timeout in seconds [env: HASURA_DDN_TIMEOUT] (default 100)\n```\n\n----------------------------------------\n\nTITLE: Inherited Options for DDN Connector Commands\nDESCRIPTION: These options are inherited from parent operations and apply to all DDN connector commands. They control logging, prompting behavior, output format, and request timeout.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_connector_list.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sass\nCODE:\n```\n--log-level string   Log level. Can be DEBUG, WARN, INFO, ERROR, or FATAL. (default \"INFO\")\n--no-prompt          Do not prompt for required but missing flags\n--out string         Output format. Can be table, json or yaml. (default \"table\")\n--timeout int        Request timeout in seconds [env: HASURA_DDN_TIMEOUT] (default 100)\n```\n\n----------------------------------------\n\nTITLE: Creating Internal Links in Markdown Documentation\nDESCRIPTION: This snippet demonstrates how to create an internal link to another documentation page using root relative file paths. It shows the preferred way to link to other pages in the documentation to avoid broken links when files are moved.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/wiki/style/links.mdx#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[Postgres tables](/schema/postgres/tables.mdx)\n```\n\n----------------------------------------\n\nTITLE: Inherited Parent Operation Options\nDESCRIPTION: Global options inherited from parent operations that can be used with the init command.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_supergraph_init.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sass\nCODE:\n```\n--log-level string   Log level. Can be DEBUG, WARN, INFO, ERROR, or FATAL. (default \"INFO\")\n--no-prompt          Do not prompt for required but missing flags\n--out string         Output format. Can be table, json or yaml. (default \"table\")\n--timeout int        Request timeout in seconds [env: HASURA_DDN_TIMEOUT] (default 100)\n```\n\n----------------------------------------\n\nTITLE: Initialize Billing Subgraph\nDESCRIPTION: Creates a new billing subgraph with type name prefix to avoid conflicts\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/project-configuration/tutorials/work-with-multiple-subgraphs.mdx#2025-04-17_snippet_4\n\nLANGUAGE: ddn\nCODE:\n```\nddn subgraph init billing --graphql-type-name-prefix billing\n```\n\n----------------------------------------\n\nTITLE: Opening DDN Development Console\nDESCRIPTION: Starts the local development console interface for interacting with the DDN ecosystem.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/data-modeling/partials/lambda-connectors/typescript/_command-create-tutorial.mdx#2025-04-17_snippet_6\n\nLANGUAGE: ddn\nCODE:\n```\nddn console --local\n```\n\n----------------------------------------\n\nTITLE: DDN Codemod Usage Examples\nDESCRIPTION: Examples showing different ways to run the codemod command, including running on supergraph and subgraph configurations.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_codemod_upgrade-object-boolean-expression-types.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Run on the supergraph defined in the context\n ddn codemod upgrade-object-boolean-expression-types\n\n# Run on a specific supergraph\n ddn codemod upgrade-object-boolean-expression-types --supergraph ./supergraph.cloud.yaml\n\n# Run on a specific subgraph\n ddn codemod upgrade-object-boolean-expression-types --subgraph app/subgraph.yaml\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables in Connector\nDESCRIPTION: YAML configuration for mapping environment variables in the connector\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/recipes/tutorials/add-vector-search-to-postgresql.mdx#2025-04-17_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nDATABASE_URL:\n  fromEnv: APP_DATABASE_URL\nOPENAI_API_KEY:\n  fromEnv: APP_MYPYTHON_OPENAI_API_KEY\n```\n\n----------------------------------------\n\nTITLE: Example DDN Subgraph Build Commands\nDESCRIPTION: Examples showing how to view details of a specific SubgraphBuild and list all SubgraphBuilds in a project.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_subgraph_build_get.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# View details of a SubgraphBuild in the Project 'pet-lion-2649'\n ddn subgraph build get <subgraph-build-version> --project pet-lion-2649\n\n# List all SubgraphBuilds of a Project 'pet-lion-2649'\n ddn subgraph build get --project pet-lion-2649\n```\n\n----------------------------------------\n\nTITLE: DDN Version Command Help Options\nDESCRIPTION: Available help flags for the version command.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_version.mdx#2025-04-17_snippet_1\n\nLANGUAGE: sass\nCODE:\n```\n-h, --help   help for version\n```\n\n----------------------------------------\n\nTITLE: Example PromptQL Query\nDESCRIPTION: Sample PromptQL query to retrieve order information.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/project-configuration/tutorials/work-with-multiple-repositories.mdx#2025-04-17_snippet_27\n\nLANGUAGE: plaintext\nCODE:\n```\nGive me the ID, status, and when each order was created.\n```\n\n----------------------------------------\n\nTITLE: Example JSON Response\nDESCRIPTION: Expected JSON response from the shout_name query showing uppercase transformation\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/data-modeling/partials/lambda-connectors/python/_command-create-tutorial.mdx#2025-04-17_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"shoutName\": \"ALICE\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Command-Specific Options for Supergraph Config Upgrade\nDESCRIPTION: These are the specific options available for the upgrade-supergraph-config-v1-to-v2 command. It includes the required --dir flag to specify the Hasura project directory.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_codemod_upgrade-supergraph-config-v1-to-v2.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sass\nCODE:\n```\n    --dir string   The Hasura project directory (required)\n-h, --help         help for upgrade-supergraph-config-v1-to-v2\n```\n\n----------------------------------------\n\nTITLE: Filtering by Artist Relationship in JSON\nDESCRIPTION: This JSON example shows how to filter albums by a related artist's name using the equals operator.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/metadata-reference/boolean-expressions.mdx#2025-04-17_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{ \"album\": { \"artist\": { \"name\": { \"equals\": \"Madonna\" } } } }\n```\n\n----------------------------------------\n\nTITLE: Starting Local PromptQL Environment\nDESCRIPTION: Serves the built supergraph and starts the local console for testing and development.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/data-modeling/partials/classic-connectors/mongoDB/_command-create-tutorial.mdx#2025-04-17_snippet_6\n\nLANGUAGE: ddn\nCODE:\n```\nddn run docker-start\nddn console --local\n```\n\n----------------------------------------\n\nTITLE: Usage Examples for ddn supergraph build get\nDESCRIPTION: Examples showing how to view details of a specific SupergraphBuild and how to list all SupergraphBuilds in a project.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_supergraph_build_get.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# View details of a SupergraphBuild in the Project \"pet-lion-2649\"\n ddn supergraph build get <supergraph-build-version> --project pet-lion-2649\n\n# List all SupergraphBuilds of a Project \"pet-lion-2649\"\n ddn supergraph build get --project pet-lion-2649\n```\n\n----------------------------------------\n\nTITLE: Example Usage of ddn connector-link add-resources Command\nDESCRIPTION: This example demonstrates how to add all models, commands, and relationships from the schema of a DataConnectorLink named 'mydb' for a Subgraph config named 'app'.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_connector-link_add-resources.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nddn connector-link add-resources mydb --subgraph ./app/subgraph.yaml\n```\n\n----------------------------------------\n\nTITLE: Using ddn supergraph build apply Command in Bash\nDESCRIPTION: The basic syntax for applying a SupergraphBuild to a Project using the DDN CLI. This command requires specifying the supergraph build version as an argument and accepts various flags to customize its behavior.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_supergraph_build_apply.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nddn supergraph build apply <supergraph-build-version> [flags]\n```\n\n----------------------------------------\n\nTITLE: Registering a Native Query with the PromptQL Connector Plugin\nDESCRIPTION: Uses the DDN connector plugin to register the native query in the connector configuration. This command identifies the SQL file and specifies its operation type as a query.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/data-modeling/partials/classic-connectors/postgreSQL/_model-create-native-query-tutorial.mdx#2025-04-17_snippet_2\n\nLANGUAGE: ddn\nCODE:\n```\nddn connector plugin \\\n  --connector app/connector/my_pg/connector.yaml \\\n  -- \\\n  native-operation create \\\n  --operation-path native_operations/queries/order_users_of_same_age.sql \\\n  --kind query\n```\n\n----------------------------------------\n\nTITLE: DDN CLI Global Options\nDESCRIPTION: Inherited options available for all DDN CLI commands including logging, prompting, output format, and timeout settings.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_completion_bash.mdx#2025-04-17_snippet_4\n\nLANGUAGE: sass\nCODE:\n```\n--log-level string   Log level. Can be DEBUG, WARN, INFO, ERROR, or FATAL. (default \"INFO\")\n--no-prompt          Do not prompt for required but missing flags\n--out string         Output format. Can be table, json or yaml. (default \"table\")\n--timeout int        Request timeout in seconds [env: HASURA_DDN_TIMEOUT] (default 100)\n```\n\n----------------------------------------\n\nTITLE: Querying JSON Data from Snowflake\nDESCRIPTION: SQL query that retrieves user data and transforms the user_details column into structured JSON using Snowflake's TO_JSON function.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/recipes/tutorials/add-jsonb-support-snowflake.mdx#2025-04-17_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nselect user_id, email, TO_JSON(user_details) as user_details, created_at from PUBLIC.ECOMM.USERS\n```\n\n----------------------------------------\n\nTITLE: Using Root Relative Paths in Find and Replace Operations\nDESCRIPTION: Example of a find and replace operation to update paths when documents are moved, demonstrating the advantage of root relative paths for maintenance.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/wiki/docusaurus-mdx-guide/links.mdx#2025-04-17_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nFind `/folder1/subfolder2/doc3.mdx` and replace with `/folder1/newsubfolder4/doc5.mdx`\n```\n\n----------------------------------------\n\nTITLE: Introspecting PostgreSQL Database\nDESCRIPTION: Command to introspect the PostgreSQL database schema using the DDN connector.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/project-configuration/tutorials/work-with-multiple-repositories.mdx#2025-04-17_snippet_22\n\nLANGUAGE: ddn\nCODE:\n```\nddn connector introspect billing_pg\n```\n\n----------------------------------------\n\nTITLE: Updating All Commands for Go Connector\nDESCRIPTION: This command updates all commands associated with the 'my_go' connector. It applies changes made to any functions in the editor.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/data-modeling/partials/lambda-connectors/go/_command-update-tutorial.mdx#2025-04-17_snippet_3\n\nLANGUAGE: ddn\nCODE:\n```\nddn command update my_go \"*\"\n```\n\n----------------------------------------\n\nTITLE: Invalid Argument Type Mapping Example\nDESCRIPTION: Shows an invalid argument type mapping between a PostgreSQL INTEGER function parameter and a String argument type in a command definition, which would raise an error after the 2025-03-11 compatibility date.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/metadata-reference/compatibility-config.mdx#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"kind\": \"Command\",\n  \"version\": \"v1\",\n  \"definition\": {\n    \"name\": \"get_users_by_age\",\n    \"arguments\": [\n      {\n        \"name\": \"age\",\n        \"type\": \"String!\" // Error: PostgreSQL function expects INTEGER but argument is defined as String\n      }\n    ],\n    \"source\": {\n      \"dataConnectorName\": \"postgres\",\n      \"dataConnectorCommand\": {\n        \"function\": \"get_users_by_age\"\n      },\n      \"argumentMapping\": {\n        \"age\": \"age\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ArgumentName in Markdown\nDESCRIPTION: Defines the ArgumentName type as a string representing the name of an argument.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/metadata-reference/commands.mdx#2025-04-17_snippet_11\n\nLANGUAGE: markdown\nCODE:\n```\n#### ArgumentName {#command-argumentname}\n\nThe name of an argument.\n\n\n**Value:** string\n```\n\n----------------------------------------\n\nTITLE: Displaying Found Resources in PromptQL PostgreSQL Connector\nDESCRIPTION: This command shows the resources discovered during the introspection of the PostgreSQL instance.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/data-modeling/partials/classic-connectors/postgreSQL/_command-create-native-operation-tutorial.mdx#2025-04-17_snippet_4\n\nLANGUAGE: ddn\nCODE:\n```\nddn connector show-resources my_pg\n```\n\n----------------------------------------\n\nTITLE: Creating a Subgraph Build with Environment Variables Example\nDESCRIPTION: Example showing how to build a Subgraph from a config file for a specific project with environment variables.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_subgraph_build_create.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Build the Subgraph from a config file for Project with some environment variables\n ddn subgraph build create --subgraph ./app/subgraph.yaml --project pet-lion-2649 --env key1=val1\n```\n\n----------------------------------------\n\nTITLE: Inherited Options - DDN Codemod AuthConfig Upgrade\nDESCRIPTION: Options inherited from parent operations for the upgrade-auth-config-to-v3 command.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_codemod_upgrade-auth-config-to-v3.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sass\nCODE:\n```\n--log-level string   Log level. Can be DEBUG, WARN, INFO, ERROR, or FATAL. (default \"INFO\")\n--no-prompt          Do not prompt for required but missing flags\n--out string         Output format. Can be table, json or yaml. (default \"table\")\n--timeout int        Request timeout in seconds [env: HASURA_DDN_TIMEOUT] (default 100)\n```\n\n----------------------------------------\n\nTITLE: Configuring Command Permissions in YAML\nDESCRIPTION: Example of defining permissions for a command 'get_article_by_id' with different roles and argument presets.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/metadata-reference/permissions.mdx#2025-04-17_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n---\nkind: CommandPermissions\nversion: v1\ndefinition:\n  commandName: get_article_by_id\n  permissions:\n    - role: admin\n      allowExecution: true\n    - role: user\n      allowExecution: true\n      argumentPresets:\n        - argument: id\n          value:\n            literal: 100\n```\n\n----------------------------------------\n\nTITLE: Building Single Subgraph in DDN CLI\nDESCRIPTION: This command builds a single subgraph. Available for Owner, Admin, Subgraph Admin, and Subgraph Developer roles.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/project-configuration/subgraphs/working-with-multiple-repositories.mdx#2025-04-17_snippet_15\n\nLANGUAGE: ddn\nCODE:\n```\nddn subgraph build create --subgraph-version <subgraph_name:subgraph_version> --base-supergraph-version <supergraph_version>\n```\n\n----------------------------------------\n\nTITLE: Launching DDN Console\nDESCRIPTION: Command to open the local DDN console for testing queries.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/data-modeling/partials/classic-connectors/clickHouse/_relationship-create-model-to-model.mdx#2025-04-17_snippet_2\n\nLANGUAGE: ddn\nCODE:\n```\nddn console --local\n```\n\n----------------------------------------\n\nTITLE: Applying Supergraph Build\nDESCRIPTION: Applies the newly created supergraph build to update the API.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/project-configuration/tutorials/work-with-multiple-repositories.mdx#2025-04-17_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nddn supergraph build apply <supergraph-build-version>\n```\n\n----------------------------------------\n\nTITLE: Building Supergraph API with DDN CLI\nDESCRIPTION: Create a new build of the supergraph API using the DDN CLI.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/data-modeling/partials/classic-connectors/postgreSQL/_command-create-tutorial.mdx#2025-04-17_snippet_3\n\nLANGUAGE: ddn\nCODE:\n```\nddn supergraph build local\n```\n\n----------------------------------------\n\nTITLE: Defining ScalarType and DataConnectorScalarRepresentation in YAML\nDESCRIPTION: Defines a Numeric scalar type and its representation in a data connector. This is a prerequisite for creating aggregate expressions.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/metadata-reference/aggregate-expressions.mdx#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nkind: ScalarType\nversion: v1\ndefinition:\n  name: Numeric\n  graphql:\n    typeName: Numeric\n\n---\nkind: DataConnectorScalarRepresentation\nversion: v1\ndefinition:\n  dataConnectorName: my_connector\n  dataConnectorScalarType: numeric\n  representation: Numeric\n  graphql:\n    comparisonExpressionTypeName: NumericComparisonExp\n```\n\n----------------------------------------\n\nTITLE: Basic Command Syntax\nDESCRIPTION: The basic command syntax for upgrading GraphqlConfig to support subscriptions.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_codemod_upgrade-graphqlconfig-subscriptions.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nddn codemod upgrade-graphqlconfig-subscriptions [flags]\n```\n\n----------------------------------------\n\nTITLE: Rebuilding Hasura Supergraph\nDESCRIPTION: This bash command demonstrates how to rebuild the Hasura supergraph locally after updating the AuthConfig and claims. This step is necessary to apply the changes to the application.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/auth/jwt/jwt-mode.mdx#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nddn supergraph build local\n```\n\n----------------------------------------\n\nTITLE: Displaying Resources from PostgreSQL Database\nDESCRIPTION: Shows all resources that were discovered from the PostgreSQL database introspection. This command lists tables, views, and other database objects that can be used in PromptQL.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/data-modeling/partials/classic-connectors/postgreSQL/_command-update-tutorial.mdx#2025-04-17_snippet_1\n\nLANGUAGE: ddn\nCODE:\n```\nddn connector show-resources my_pg\n```\n\n----------------------------------------\n\nTITLE: Authenticating Hasura DDN CLI\nDESCRIPTION: Command to authenticate the DDN CLI with Hasura Cloud. Launches a browser window for login/signup and establishes CLI access to Hasura Cloud resources.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/how-to-build-with-promptql/_boilerplateInit.mdx#2025-04-17_snippet_0\n\nLANGUAGE: ddn\nCODE:\n```\nddn auth login\n```\n\n----------------------------------------\n\nTITLE: Defining DuckDB Schema\nDESCRIPTION: Creates a repositories table schema with sample data in DuckDB\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/how-to-build-with-promptql/with-apis-with-bulk-data.mdx#2025-04-17_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst connectorConfig: duckduckapi = {\n  dbSchema: `\n    -- Create repositories table with commonly needed fields\n    DROP TABLE IF EXISTS repositories;\n    CREATE TABLE repositories (\n        id INTEGER PRIMARY KEY,\n        name VARCHAR NOT NULL,\n        description TEXT\n    );\n\n    -- Sample data\n    INSERT INTO repositories (id, name, description)\n    VALUES (1, 'my-project', 'A sample repository');\n  `,\n  functionsFilePath: path.resolve(__dirname, './functions.ts'),\n};\n```\n\n----------------------------------------\n\nTITLE: Loading PowerShell Autocompletion for Current Session\nDESCRIPTION: Command to generate and load DDN CLI autocompletion scripts for the current PowerShell session. This provides immediate access to command completion features.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_completion_powershell.mdx#2025-04-17_snippet_0\n\nLANGUAGE: sass\nCODE:\n```\nddn completion powershell | Out-String | Invoke-Expression\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Metadata Doc Generation\nDESCRIPTION: Instructions for installing necessary dependencies before running the documentation generator. Includes optional TypeScript installation for CI environments.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/utilities/generate-metadata-docs/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd utilities/generate-metadata-docs\n# if you're running this in an Action, install TS\n# npm install typescript\nnpm i\n```\n\n----------------------------------------\n\nTITLE: Building Supergraph with Multiple Specific Subgraphs in DDN CLI\nDESCRIPTION: This command builds a supergraph based on a specific build and with multiple specific subgraphs.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/project-configuration/subgraphs/working-with-multiple-repositories.mdx#2025-04-17_snippet_14\n\nLANGUAGE: ddn\nCODE:\n```\nddn supergraph build create --subgraph-version <subgraph_name:subgraph_version> --subgraph-version <subgraph_name:subgraph_version>  --base-supergraph-version <supergraph_version>\n```\n\n----------------------------------------\n\nTITLE: Updating DDN CLI in Bash\nDESCRIPTION: This command updates the DDN CLI to the latest version. It's recommended to ensure you're using the most recent version when troubleshooting issues.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/promptql-playground/troubleshooting.mdx#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nddn update-cli\n```\n\n----------------------------------------\n\nTITLE: Model Permission Role Configuration\nDESCRIPTION: Example of model permission configuration for a user role with filters and argument presets.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/metadata-reference/permissions.mdx#2025-04-17_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nrole: user\nselect:\n  filter:\n    fieldComparison:\n      field: author_id\n      operator: _eq\n      value:\n        sessionVariable: x-hasura-user-id\n  argument_presets:\n    - field: likes_dogs\n      value:\n        literal: true\n```\n\n----------------------------------------\n\nTITLE: DDN Config Upgrade Command Options - SASS\nDESCRIPTION: Available command-specific options for the upgrade command, including the required directory flag and help option.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_codemod_upgrade-project-config-v2-to-v3.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sass\nCODE:\n```\n    --dir string   The Hasura project directory (required)\n-h, --help         help for upgrade-project-config-v2-to-v3\n```\n\n----------------------------------------\n\nTITLE: Command-Specific Options\nDESCRIPTION: Available flags specific to the 'show' command including context and CI options.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_connector-link_show.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sass\nCODE:\n```\n    --ci                Disables the use of context\n-c, --context string    Name of the context to use. (default <current_context>)\n-h, --help              help for show\n    --subgraph string   Path to Subgraph config file\n```\n\n----------------------------------------\n\nTITLE: Starting PromptQL Documentation Development Server\nDESCRIPTION: Command to launch a local development server for previewing the documentation with hot-reload capabilities, allowing changes to reflect automatically without server restarts.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/README.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn start\n```\n\n----------------------------------------\n\nTITLE: Creating DDN Context - Basic Command Syntax\nDESCRIPTION: The basic command syntax for creating a new context using DDN CLI. The command requires a context name parameter and accepts optional flags.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_context_create-context.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nddn context create-context <name> [flags]\n```\n\n----------------------------------------\n\nTITLE: Executing DDN CLI Commands in Bash\nDESCRIPTION: Demonstrates the typical command structure for the DDN CLI, showing how to use commands, subcommands, arguments, and flags.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/index.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nddn <command> <subcommand> <argument> --<flag> \"<flag_value>\"\n```\n\n----------------------------------------\n\nTITLE: Using Video Player Component in Documentation\nDESCRIPTION: Example showing how to use the Player component to embed a video in documentation with the source path specified.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/wiki/style/images.mdx#2025-04-17_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Player src=\"/img/<SUBDIRECTORY>/<FILENAME>.webm\" />\n```\n\n----------------------------------------\n\nTITLE: Specifying Database Schemas for Introspection\nDESCRIPTION: Example of how to configure which schemas to include in the introspection process. If not provided, all schemas will be introspected.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/connectors/mysql/configuration.mdx#2025-04-17_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"schemas\": [\"public\", \"other_schema\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Note Admonition with Custom Title in Markdown\nDESCRIPTION: Shows how to create a note admonition with a custom title 'Additional Resources' and includes a link to a webinar.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/wiki/docusaurus-mdx-guide/admonitions.mdx#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n:::note Additional Resources\n\nData Federation with Hasura - [Watch Webinar](https://hasura.io/events/webinar/data-federation-hasura-graphql/).\n\n:::\n```\n\n----------------------------------------\n\nTITLE: Kaggle Environment Variables Configuration\nDESCRIPTION: Example configuration for Kaggle credentials and dataset identifier in the .env file.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/recipes/tutorials/kaggle-csv-sqlite.mdx#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nKAGGLE_USERNAME=\"<your_username>\"\nKAGGLE_KEY=\"xxxxxxxxxxxxxxxx\"\nKAGGLE_IDENTIFIER=\"rounakbanik/the-movies-dataset\"\n```\n\n----------------------------------------\n\nTITLE: Creating Subgraph Build\nDESCRIPTION: Command to create a new subgraph build in the cloud project.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/project-configuration/tutorials/work-with-multiple-repositories.mdx#2025-04-17_snippet_28\n\nLANGUAGE: ddn\nCODE:\n```\nddn subgraph build create\n```\n\n----------------------------------------\n\nTITLE: Creating Local Build for Customers Subgraph\nDESCRIPTION: Generates a local build for the customers subgraph.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/project-configuration/tutorials/work-with-multiple-repositories.mdx#2025-04-17_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nddn supergraph build local\n```\n\n----------------------------------------\n\nTITLE: Cloning the ndc-hub Repository in Shell\nDESCRIPTION: Command to clone the ndc-hub repository, which is used for publishing connectors to the Hasura Connector Hub.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/data-sources/publish-your-own-connector.mdx#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/hasura/ndc-hub.git\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query for Users with Posts\nDESCRIPTION: GraphQL query that retrieves users with their related posts, demonstrating the bidirectional relationship.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/data-modeling/partials/classic-connectors/clickHouse/_relationship-create-model-to-model.mdx#2025-04-17_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\nquery UsersWithPosts {\n  users {\n    name\n    age\n    posts {\n      content\n      title\n      userId\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Inherited Options for DDN Codemod Commands\nDESCRIPTION: These options are inherited from parent operations and can be used with the upgrade-supergraph-config-v1-to-v2 command. They include settings for log level, prompting, output format, and request timeout.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_codemod_upgrade-supergraph-config-v1-to-v2.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sass\nCODE:\n```\n--log-level string   Log level. Can be DEBUG, WARN, INFO, ERROR, or FATAL. (default \"INFO\")\n--no-prompt          Do not prompt for required but missing flags\n--out string         Output format. Can be table, json or yaml. (default \"table\")\n--timeout int        Request timeout in seconds [env: HASURA_DDN_TIMEOUT] (default 100)\n```\n\n----------------------------------------\n\nTITLE: Removing a Connector with Specific Paths\nDESCRIPTION: This command removes a Connector located at './foo/my_db/connector.yaml' with a DataConnectorLink specified by 'app/subgraph.yaml' and named 'my_db'. It demonstrates using multiple options to provide detailed paths and names for the connector and subgraph.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_connector_remove.mdx#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nddn connector remove --connector ./foo/my_db/connector.yaml --subgraph app/subgraph.yaml --connector-link my_db\n```\n\n----------------------------------------\n\nTITLE: Importing MDX Components for PromptQL Documentation\nDESCRIPTION: MDX import statements for prerequisite components and quickstart template used in the PromptQL documentation.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/how-to-build-with-promptql/with-a-datasource-and-custom-business-logic.mdx#2025-04-17_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\nimport Prereqs from \"@site/docs/_prereqs.mdx\";\nimport Quickstart from \"@site/docs/_quickstart_template.mdx\";\n```\n\n----------------------------------------\n\nTITLE: Adding Anthropic API Key to Environment\nDESCRIPTION: Example of adding the Anthropic API key to the .env file for authentication.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/recipes/tutorials/apple-health-assistant.mdx#2025-04-17_snippet_4\n\nLANGUAGE: env\nCODE:\n```\n...\nANTHROPIC_API_KEY=<your-anthropic-api-key>\n```\n\n----------------------------------------\n\nTITLE: Initializing Cloud Project as Parent Project in DDN CLI\nDESCRIPTION: This command initializes the cloud project as the parent project, linking the local subgraph to it.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/project-configuration/subgraphs/working-with-multiple-repositories.mdx#2025-04-17_snippet_6\n\nLANGUAGE: ddn\nCODE:\n```\nddn project init --with-project <parent-project-name>\n```\n\n----------------------------------------\n\nTITLE: Scaffolding New DDN Project\nDESCRIPTION: Creates a new local project with PromptQL support and links it to a specific data plane ID.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/private-ddn/create-a-project-on-a-data-plane.mdx#2025-04-17_snippet_1\n\nLANGUAGE: ddn\nCODE:\n```\nddn supergraph init my-project --with-promptql --project-data-plane-id <data-plane-id> && cd my-project\n```\n\n----------------------------------------\n\nTITLE: Configuring Huggingface Dataset ID\nDESCRIPTION: Example of specifying a Huggingface Dataset ID with a glob pattern to select all CSV files from a particular dataset.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/recipes/tutorials/huggingface-csv-parquet-sqlite.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndrossi/EDA_on_IMDB_Movies_Dataset/*.csv\n```\n\n----------------------------------------\n\nTITLE: Using ddn update-cli Command in Bash\nDESCRIPTION: The basic syntax for the ddn update-cli command which allows updating the CLI to the latest version or a specific version.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_update-cli.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nddn update-cli [flags]\n```\n\n----------------------------------------\n\nTITLE: Example of Upgrading a DDN Plugin\nDESCRIPTION: A practical example showing how to upgrade the 'ndc-postgres' plugin to a newer version using the DDN CLI.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_plugins_upgrade.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Upgrade a plugin \"ndc-postgres\" to a newer version\n ddn plugins upgrade ndc-postgres\n```\n\n----------------------------------------\n\nTITLE: Options for ddn doctor command in SASS\nDESCRIPTION: This snippet shows the available options for the 'ddn doctor' command, including the help flag.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_doctor.mdx#2025-04-17_snippet_1\n\nLANGUAGE: sass\nCODE:\n```\n-h, --help   help for doctor\n```\n\n----------------------------------------\n\nTITLE: Authenticating DDN CLI\nDESCRIPTION: Initiates authentication flow for the DDN CLI, opening a browser window for login credentials.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/private-ddn/create-a-project-on-a-data-plane.mdx#2025-04-17_snippet_0\n\nLANGUAGE: ddn\nCODE:\n```\nddn auth login\n```\n\n----------------------------------------\n\nTITLE: Retrieving Supergraph Build in DDN CLI\nDESCRIPTION: This command retrieves the latest build version from the parent supergraph.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/project-configuration/subgraphs/working-with-multiple-repositories.mdx#2025-04-17_snippet_9\n\nLANGUAGE: ddn\nCODE:\n```\nddn supergraph build get\n```\n\n----------------------------------------\n\nTITLE: GraphQL Response JSON Structure\nDESCRIPTION: Example response from the GraphQL API showing the comments data. The response includes all three comments with their respective fields as requested in the query.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/data-modeling/partials/classic-connectors/mongoDB/_model-create-tutorial.mdx#2025-04-17_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"comments\": [\n      {\n        \"comment_id\": 1,\n        \"comment\": \"Great post! Really enjoyed reading this.\",\n        \"user_id\": 1,\n        \"post_id\": 2\n      },\n      {\n        \"comment_id\": 2,\n        \"comment\": \"Thanks for sharing your thoughts!\",\n        \"user_id\": 2,\n        \"post_id\": 1\n      },\n      {\n        \"comment_id\": 3,\n        \"comment\": \"Interesting perspective.\",\n        \"user_id\": 3,\n        \"post_id\": 1\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Introspecting the Huggingface Connector\nDESCRIPTION: Command to introspect the Huggingface connector with debug logging enabled.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/recipes/tutorials/huggingface-csv-parquet-sqlite.mdx#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nddn connector introspect huggingface --log-level=DEBUG\n```\n\n----------------------------------------\n\nTITLE: MongoDB Connector Introspection Commands\nDESCRIPTION: DDN commands for introspecting and showing MongoDB connector resources\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/data-modeling/partials/classic-connectors/mongoDB/_command-create-native-operation-tutorial.mdx#2025-04-17_snippet_2\n\nLANGUAGE: ddn\nCODE:\n```\nddn connector introspect my_mongo\n```\n\nLANGUAGE: ddn\nCODE:\n```\nddn connector show-resources my_mongo\n```\n\nLANGUAGE: ddn\nCODE:\n```\nddn command add my_mongo createUser\n```\n\n----------------------------------------\n\nTITLE: Registering Azure API Server VNet Integration Preview\nDESCRIPTION: Command to register the EnableAPIServerVnetIntegrationPreview feature flag for Azure Kubernetes Service.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/private-ddn/creating-a-data-plane/byoc.mdx#2025-04-17_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\naz feature register --namespace \"Microsoft.ContainerService\" --name \"EnableAPIServerVnetIntegrationPreview\"\n```\n\n----------------------------------------\n\nTITLE: Starting DDN Services with Docker\nDESCRIPTION: This command starts the necessary Docker containers for running DDN services. It initializes all required services to make the GraphQL API operational.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/data-modeling/partials/classic-connectors/postgreSQL/_model-create-tutorial.mdx#2025-04-17_snippet_4\n\nLANGUAGE: ddn\nCODE:\n```\nddn run docker-start\n```\n\n----------------------------------------\n\nTITLE: Installing DDN Completion for macOS Bash\nDESCRIPTION: Command to permanently install DDN CLI autocompletion script for bash shell on macOS using Homebrew.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_completion_bash.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sass\nCODE:\n```\nddn completion bash > $(brew --prefix)/etc/bash_completion.d/ddn\n```\n\n----------------------------------------\n\nTITLE: Cloning DuckDuckGo Search Project in Bash\nDESCRIPTION: Commands to clone the DuckDuckGo search project repository and navigate to the project directory.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/recipes/tutorials/duckduckgo-web-search.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone git@github.com:hasura/duckduckgo-search.git\ncd duckduckgo-search\n```\n\n----------------------------------------\n\nTITLE: Cloning the PromptQL GitHub Example Project\nDESCRIPTION: Commands to clone the example PromptQL GitHub project repository and navigate to the project directory.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/recipes/tutorials/github-assistant.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone git@github.com:hasura/example-promptql-github.git\ncd example-promptql-github\n```\n\n----------------------------------------\n\nTITLE: Importing Thumbnail Component in React\nDESCRIPTION: Import statement for the Thumbnail component used for displaying images in the documentation.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/project-configuration/project-management/console-collaborator-comments.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Thumbnail from \"@site/src/components/Thumbnail\";\n```\n\n----------------------------------------\n\nTITLE: Building Supergraph API with DDN CLI\nDESCRIPTION: Creates a new local build of the supergraph API that includes the MongoDB native mutation.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/data-modeling/partials/classic-connectors/mongoDB/_command-create-tutorial.mdx#2025-04-17_snippet_5\n\nLANGUAGE: ddn\nCODE:\n```\nddn supergraph build local\n```\n\n----------------------------------------\n\nTITLE: Verifying Hasura CLI Installation\nDESCRIPTION: This snippet demonstrates how to verify the successful installation of the Hasura CLI by checking its version.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/installation.mdx#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nDDN CLI Version: v2.0.1\n```\n\n----------------------------------------\n\nTITLE: DataConnectorLink Show Example Usage\nDESCRIPTION: Example showing how to display details for a DataConnectorLink named 'mydb'.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_connector-link_show.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Show DataConnectorLink details for `mydb`\nddn connector-link show mydb\n```\n\n----------------------------------------\n\nTITLE: Introspecting DuckDuckGo Connector with DDN\nDESCRIPTION: Command to introspect the DuckDuckGo connector using DDN CLI in debug mode.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/recipes/tutorials/duckduckgo-web-search.mdx#2025-04-17_snippet_1\n\nLANGUAGE: ddn\nCODE:\n```\nddn connector introspect duckduckgo --log-level=DEBUG\n```\n\n----------------------------------------\n\nTITLE: Opening DDN Development Console\nDESCRIPTION: This command opens the local DDN development console for interacting with the GraphQL API.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/data-modeling/partials/classic-connectors/clickHouse/_model-create-tutorial.mdx#2025-04-17_snippet_5\n\nLANGUAGE: ddn\nCODE:\n```\nddn console --local\n```\n\n----------------------------------------\n\nTITLE: Starting Docker Services\nDESCRIPTION: Command to start local Hasura Engine and PostgreSQL connector in Docker.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/project-configuration/tutorials/work-with-multiple-repositories.mdx#2025-04-17_snippet_25\n\nLANGUAGE: ddn\nCODE:\n```\nddn run docker-start\n```\n\n----------------------------------------\n\nTITLE: Options Inherited from Parent Commands (SASS)\nDESCRIPTION: Global options that are inherited from parent commands and apply to all DDN CLI commands, including logging level, output format, and timeout settings.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_supergraph_build_local.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sass\nCODE:\n```\n--log-level string   Log level. Can be DEBUG, WARN, INFO, ERROR, or FATAL. (default \"INFO\")\n--no-prompt          Do not prompt for required but missing flags\n--out string         Output format. Can be table, json or yaml. (default \"table\")\n--timeout int        Request timeout in seconds [env: HASURA_DDN_TIMEOUT] (default 100)\n```\n\n----------------------------------------\n\nTITLE: Configuring Huggingface Dataset Environment\nDESCRIPTION: Commands to navigate to the Huggingface connector directory, copy the sample environment file, and set the HUGGINGFACE_DATASET variable.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/recipes/tutorials/huggingface-csv-parquet-sqlite.mdx#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncd app/connector/huggingface\ncp .env.sample .env\n```\n\nLANGUAGE: bash\nCODE:\n```\nHUGGINGFACE_DATASET=\"drossi/EDA_on_IMDB_Movies_Dataset/*.csv\"\n```\n\n----------------------------------------\n\nTITLE: Specific Planning Example\nDESCRIPTION: Detailed example showing how to provide specific step-by-step instructions for the AI agent to solve a particular problem.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/rag-hundred-percent-accuracy.mdx#2025-04-17_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nFind the article that contains the S&P 500 list.\n\nExtract the company name of the alphabetically first ticker from the article.\n\nThen, extract the company name of the alphabetically second to last ticker.\n\nGet articles about these two companies and try to extract the employee count of these companies from those articles if present.\n\nTell me the employee count difference.\n```\n\n----------------------------------------\n\nTITLE: Updating All DDN Commands\nDESCRIPTION: Updates all commands in the Python connector using a wildcard pattern with the DDN CLI.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/data-modeling/partials/lambda-connectors/python/_command-update-tutorial.mdx#2025-04-17_snippet_3\n\nLANGUAGE: ddn\nCODE:\n```\nddn command update my_py \"*\"\n```\n\n----------------------------------------\n\nTITLE: PromptQL Test Query\nDESCRIPTION: Example query to test the HTTP API integration\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/how-to-build-with-promptql/with-api-endpoints.mdx#2025-04-17_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\nsay hello from httpBin for everyone\n```\n\n----------------------------------------\n\nTITLE: Implementing LatestRelease Component in JSX for Hasura Version Display\nDESCRIPTION: This snippet demonstrates how to import and use the LatestRelease component to dynamically display the latest stable and pre-release versions of Hasura GraphQL Engine. The component can be used with or without the prerelease prop to show different version types.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/wiki/docusaurus-mdx-guide/release-tag.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport LatestRelease from \"@site/src/components/LatestRelease\";\n\nThe current latest stable version is:\n\n<code>hasura/graphql-engine:<LatestRelease /></code>\n\nThe current latest pre-release version is:\n\n<code>hasura/graphql-engine:<LatestRelease prerelease /></code>\n```\n\n----------------------------------------\n\nTITLE: DDN Plugin Uninstall Example Usage\nDESCRIPTION: Example showing how to uninstall a specific plugin named 'ndc-postgres'\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_plugins_uninstall.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Uninstall a plugin named \"ndc-postgres\"\n ddn plugins uninstall ndc-postgres\n```\n\n----------------------------------------\n\nTITLE: Creating Subgraph Build for Customers\nDESCRIPTION: Creates a build of the customers subgraph on the cloud project.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/project-configuration/tutorials/work-with-multiple-repositories.mdx#2025-04-17_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nddn subgraph build create\n```\n\n----------------------------------------\n\nTITLE: Setting Up Temporary Bash Auto-Completion for Hasura CLI\nDESCRIPTION: This command loads auto-completion for the Hasura CLI in the current Bash session.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/installation.mdx#2025-04-17_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nsource <(ddn completion bash)\n```\n\n----------------------------------------\n\nTITLE: Example Response Format\nDESCRIPTION: Expected JSON response format from the createUser mutation\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/data-modeling/partials/classic-connectors/mongoDB/_command-create-native-operation-tutorial.mdx#2025-04-17_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"createUser\": {\n      \"n\": 1,\n      \"ok\": 1\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Introspect and List Connector Commands\nDESCRIPTION: Commands to introspect the TypeScript connector and list available commands\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/how-to-build-with-promptql/with-api-endpoints.mdx#2025-04-17_snippet_2\n\nLANGUAGE: ddn\nCODE:\n```\nddn connector introspect typescript\nddn commands list typescript\n```\n\n----------------------------------------\n\nTITLE: Opening Development Console\nDESCRIPTION: Launches the local development console for testing\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/data-modeling/partials/lambda-connectors/typescript/_command-create-native-operation-how-to.mdx#2025-04-17_snippet_6\n\nLANGUAGE: ddn\nCODE:\n```\nddn console --local\n```\n\n----------------------------------------\n\nTITLE: Command-Specific Options\nDESCRIPTION: Available command-specific options for the set-current-context command.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_context_set-current-context.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sass\nCODE:\n```\n-h, --help   help for set-current-context\n```\n\n----------------------------------------\n\nTITLE: Bash Command Example in Note Admonition\nDESCRIPTION: A bash command example showing how to update a 'Users' model using the DDN CLI.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/wiki/kitchen-sink.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nddn model update Users\n```\n\n----------------------------------------\n\nTITLE: Launching PromptQL Console\nDESCRIPTION: Command to open the PromptQL playground console for interacting with the GitHub data.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/recipes/tutorials/github-assistant.mdx#2025-04-17_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nddn console --local\n```\n\n----------------------------------------\n\nTITLE: MDX Import Components\nDESCRIPTION: React/MDX component imports for documentation visualizations including thumbnails, architecture diagrams, and data charts.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/rag-hundred-percent-accuracy.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Thumbnail from \"@site/src/components/Thumbnail\";\nimport Architecture from \"@site/src/components/Benchmark/Architectures\";\nimport FRAMESAccuracyChart from \"@site/src/components/FRAMES/FRAMESAccuracyChart\";\nimport FRAMESQuestionTable from \"@site/src/components/FRAMES/FRAMESQuestionTable\";\n```\n\n----------------------------------------\n\nTITLE: Ignored Headers List in Webhook Configuration\nDESCRIPTION: List of HTTP headers that are ignored by default when forwarding headers to the authentication webhook. These common headers are filtered out unless explicitly specified in the customHeadersConfig.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/auth/webhook/webhook-mode.mdx#2025-04-17_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nAccept Accept-Datetime Accept-Encoding Accept-Language Cache-Control Connection Content-Length Content-MD5 Content-Type\nDNT Host Origin Referer User-Agent\n```\n\n----------------------------------------\n\nTITLE: Authorization Failure Log for Connector Images\nDESCRIPTION: Log output showing authorization failure when trying to pull connector images from the GitHub Container Registry, typically due to an expired GitHub access token.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/data-sources/troubleshooting.mdx#2025-04-17_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nFailed to resolve source metadata for ghcr.io/hasura/<connector>: failed to authorize: failed to fetch oauth token: unexpected status from GET request to https://ghcr.io/token?scope=repository%3Ahasura%2F<connector>%3Apull&service=ghcr.io: 403 Forbidden\n```\n\n----------------------------------------\n\nTITLE: TypeScript Typing Example in Info Admonition\nDESCRIPTION: A TypeScript code snippet showing type annotation for a string variable.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/wiki/kitchen-sink.mdx#2025-04-17_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst foo: string = 'bar';\n```\n\n----------------------------------------\n\nTITLE: Starting Supergraph API\nDESCRIPTION: Commands to build and serve the supergraph API\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/data-modeling/partials/classic-connectors/mongoDB/_command-create-native-operation-tutorial.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nddn supergraph build local\nddn run docker-start\n```\n\n----------------------------------------\n\nTITLE: DDN Relationship List Command Syntax\nDESCRIPTION: Basic command syntax for listing relationships in DDN CLI\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_relationship_list.mdx#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nddn relationship list [flags]\n```\n\n----------------------------------------\n\nTITLE: Data Source Timeout Debug Log Entry\nDESCRIPTION: Log entry indicating that the connector service health check is waiting, which may precede a timeout during operations like introspection.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/data-sources/troubleshooting.mdx#2025-04-17_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\nINF Waiting for the Connector service to be healthy...\n```\n\n----------------------------------------\n\nTITLE: Structuring Error Response for Natural Language API in JSON\nDESCRIPTION: Shows the format of an error response from the Natural Language API, including the error type and message.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/promptql-apis/natural-language-api.mdx#2025-04-17_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"error_chunk\",\n  \"error\": \"Error message describing what went wrong\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Sidebar Labels in Markdown\nDESCRIPTION: Example showing how to set sidebar label and position using frontmatter in MDX files.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/wiki/working-with-docusaurus.mdx#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\nsidebar_label: Creating actions\nsidebar_position: 1\n---\n```\n\n----------------------------------------\n\nTITLE: Building Supergraph without Connectors on DDN\nDESCRIPTION: Command to create a supergraph build on DDN without building the related connectors, using specified configuration and environment files.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/project-configuration/tutorials/independent-connector-deployment.mdx#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nddn supergraph build create --no-build-connectors \\\n  --supergraph supergraph.yaml \\\n  --env-file .env.cloud \\\n  --project <project-name>\n```\n\n----------------------------------------\n\nTITLE: Creating Internal Document References in Markdown\nDESCRIPTION: Examples of using relative paths to reference other documents within the same documentation site.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/wiki/docusaurus-mdx-guide/links.mdx#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n[Get started With Hasura Cloud](../relative/path/to/getting-started-document.mdx)\n\n[Remote Schemas](../relative/path/to/remote-schemas-document.mdx)\n```\n\n----------------------------------------\n\nTITLE: Creating HTML Parsed Literals with Links in Code Blocks\nDESCRIPTION: Example showing how to create code blocks with clickable links using HTML and JavaScript string templates in Docusaurus. This technique is used when regular markdown code blocks don't support embedded links.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/wiki/docusaurus-mdx-guide/code-blocks.mdx#2025-04-17_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div className=\"parsed-literal\">\n  <pre>\n<code>\n{`{\n  \"table\"  : `}<a href=\"#tablename\">TableName</a>{`\n  \"column\" : `}<a href=\"#pgcolumn\">PGColumn</a>{`\n}`}\n</code>\n</pre>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Global Options for DDN CLI Commands\nDESCRIPTION: These options are inherited from parent operations and can be used with various DDN CLI commands, including log level, output format, and timeout settings.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_codemod_fix-traces-env-var.mdx#2025-04-17_snippet_3\n\nLANGUAGE: sass\nCODE:\n```\n--log-level string   Log level. Can be DEBUG, WARN, INFO, ERROR, or FATAL. (default \"INFO\")\n--no-prompt          Do not prompt for required but missing flags\n--out string         Output format. Can be table, json or yaml. (default \"table\")\n--timeout int        Request timeout in seconds [env: HASURA_DDN_TIMEOUT] (default 100)\n```\n\n----------------------------------------\n\nTITLE: Recursive Object Types Example\nDESCRIPTION: Demonstrates an invalid recursive object type definition that would cause infinite recursion, and shows how to fix it by making one of the references nullable.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/metadata-reference/compatibility-config.mdx#2025-04-17_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"kind\": \"ObjectType\",\n  \"version\": \"v1\",\n  \"definition\": {\n    \"name\": \"Person\",\n    \"fields\": [\n      {\n        \"name\": \"id\",\n        \"type\": \"Int!\"\n      },\n      {\n        \"name\": \"name\",\n        \"type\": \"String!\"\n      },\n      {\n        \"name\": \"bestFriend\",\n        \"type\": \"Friend\" // Now nullable, breaking the infinite recursion\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating External Markdown Links\nDESCRIPTION: Example of creating an external link in Markdown syntax that directs to Hasura Cloud signup page.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/wiki/docusaurus-mdx-guide/links.mdx#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n`[Hasura Cloud](https://cloud.hasura.io/signup/)`\n```\n\n----------------------------------------\n\nTITLE: Running the CLI Version Update Utility\nDESCRIPTION: Command to run the CLI version update utility from the root of the docs directory using yarn.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/utilities/update-cli-version/README.md#2025-04-17_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nyarn update-cli-version\n```\n\n----------------------------------------\n\nTITLE: Creating Links in React Components\nDESCRIPTION: Examples of using Docusaurus Link component for creating both internal and external links in React components.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/wiki/docusaurus-mdx-guide/links.mdx#2025-04-17_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport Link from '@docusaurus/Link';\n\n// Internal Link\n<Link to=\"/rst-vs-mdx-guide/links#root-relative-links\">Root Relative Links</Link>\n\n// External Link\n<Link to=\"https://hasura.io\">Hasura</Link>\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query with Line Highlighting\nDESCRIPTION: A GraphQL query example that shows how to filter authors who have articles with ratings greater than 4, with specific lines highlighted to emphasize important parts of the query.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/wiki/docusaurus-mdx-guide/code-blocks.mdx#2025-04-17_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\nquery {\n  authors(where: { articles: { rating: { _gt: 4 } } }) {\n    id\n    name\n    articles(where: { rating: { _gt: 4 } }) {\n      id\n      title\n      rating\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Meta Information in Markdown for Hasura Docs\nDESCRIPTION: Demonstrates how to add meta information like description and keywords at the beginning of a Hasura documentation page using YAML frontmatter.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/wiki/docusaurus-mdx-guide/page-structure.mdx#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ndescription: Data validations in Hasura\nkeywords:\n  - hasura\n  - docs\n  - schema\n  - data validation\n---\n```\n\n----------------------------------------\n\nTITLE: Configuring Command-to-Command Relationship in YAML\nDESCRIPTION: This YAML configuration defines a relationship between the 'trackOrder' and 'getShippingDetails' commands, allowing the tracking number to be used to fetch shipping details.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/metadata-reference/relationships.mdx#2025-04-17_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nkind: Relationship\nversion: v1\ndefinition:\n  name: shippingDetails\n  sourceType: trackOrder\n  target:\n    command:\n      name: getShippingDetails\n      subgraph: orders\n  mapping:\n    - source:\n        fieldPath:\n          - fieldName: trackingNumber\n      target:\n        argument:\n          argumentName: trackingNumber\n  description: The shipping details for an order based on its tracking number\n```\n\n----------------------------------------\n\nTITLE: Basic Note Admonition in Markdown\nDESCRIPTION: Demonstrates how to create a basic note admonition with formatting and a link to Discord.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/wiki/docusaurus-mdx-guide/admonitions.mdx#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n:::note\n\n**This** is an example of a call-out admonition. For more info please get in touch with us on [Discord]\n(https://discord.gg/vBPpJkS).\n\n:::\n```\n\n----------------------------------------\n\nTITLE: Managing Repeated Links with Reference-Style Link Syntax\nDESCRIPTION: Example of using reference-style link syntax in Markdown to manage repeated links throughout a document, improving maintainability by defining link targets at the end of the file.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/wiki/docusaurus-mdx-guide/links.mdx#2025-04-17_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n## Section one\n\n.....\n\nREST ... [create_action][metadata-create-action] or [update_action][metadata-update-action] Metadata APIs ...\n[request_transform][requesttransformation] field ...:\n\n....\n\n## Section two\n\n.....\n\nREST ... [create_action][metadata-create-action] or [update_action][metadata-update-action] Metadata APIs ...\n[request_transform][requesttransformation] field ...:\n\n....\n\n<!-- Shared Link Variables -->\n\n[metadata-create-action]: /api-reference/metadata-api/actions.mdx#metadata-create-action\n[metadata-update-action]: /api-reference/metadata-api/actions.mdx#metadata-update-action\n[requesttransformation]: /api-reference/syntax-defs.mdx#requesttransformation\n```\n\n----------------------------------------\n\nTITLE: Adding Highlighted GraphQL Code Block in Markdown\nDESCRIPTION: Example showing how to create a code block with GraphQL syntax highlighting and line highlighting in MDX for Docusaurus. The example uses backticks with language specification and line numbers for highlighting specific lines.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/wiki/docusaurus-mdx-guide/code-blocks.mdx#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```graphql {2,5}\n    query {\n    // highlight-next-line\n      authors (where: {articles: {rating: {_gt: 4}}}) {\n        id\n        name\n        // highlight-next-line\n        articles (where: {rating: {_gt: 4}}) {\n          id\n          title\n          rating\n        }\n      }\n    }\n```\n```\n\n----------------------------------------\n\nTITLE: Creating and Linking to Default Heading IDs in Markdown\nDESCRIPTION: Shows how Docusaurus automatically generates heading IDs and demonstrates the syntax for linking to these auto-generated IDs within the same document or across different documents.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/wiki/docusaurus-mdx-guide/headings.mdx#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## Heading H2 example\n\n<!-- will have a generated id as below -->\n\nheading-h2-example\n```\n\nLANGUAGE: markdown\nCODE:\n```\n[Link to Sub Section](/path/to/sub/section.mdx#heading-h2-example)`.\n\n<!-- or just the hash-param if its in the same document -->\n\n[Link to sub section in same document](#heading-ids)\n```\n\n----------------------------------------\n\nTITLE: Installing DDN Completions on Linux\nDESCRIPTION: Command to permanently install DDN CLI completions for Zsh on Linux systems.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_completion_zsh.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sass\nCODE:\n```\nddn completion zsh > \"${fpath[1]}/_ddn\"\n```\n\n----------------------------------------\n\nTITLE: Starting Development Server\nDESCRIPTION: Command to start the local development server\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/wiki/contributing.mdx#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nyarn start\n```\n\n----------------------------------------\n\nTITLE: Introspecting ClickHouse Data Connector using DDN\nDESCRIPTION: This DDN command introspects the ClickHouse data connector to fetch the latest resources. It requires specifying the connector name as an argument.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/data-modeling/partials/classic-connectors/clickHouse/_model-create-native-query-how-to.mdx#2025-04-17_snippet_1\n\nLANGUAGE: ddn\nCODE:\n```\nddn connector introspect <connector_name>\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Markdown Table in Docusaurus MDX\nDESCRIPTION: This snippet demonstrates how to create a basic table using markdown syntax in Docusaurus MDX. It's suitable for tables with simple text content and no complex UI or column width control.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/wiki/docusaurus-mdx-guide/list-tables.mdx#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Field             | Description                                                                                                                                                                                                                                                                                                                                                                              |\n| ----------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| Region            | The region of the datacenter where your New Relic account stores its data. [Read more about regions on New Relic docs.](https://docs.newrelic.com/docs/using-new-relic/welcome-new-relic/get-started/our-eu-us-region-data-centers)                                                                                                                                                      |\n| API Key           | API keys are unique to your organization. An API key is required by the New Relic API to submit metrics and events to New Relic. You can get the API key from [here](https://one.newrelic.com/launcher/api-keys-ui.api-keys-launcher) if you are in New Relic US region and [here](https://one.eu.newrelic.com/launcher/api-keys-ui.api-keys-launcher) if you're in New Relic EU region. |\n| Host              | The name of the originating host of the log and metrics.                                                                                                                                                                                                                                                                                                                                 |\n| Custom Attributes | Custom Attributes associated with your logs and metrics. A default source tag `hasura-cloud-metrics` is added to all exported logs and metrics. Attributes `project_id` and `project_name` are added to all exported metrics.                                                                                                                                                            |\n| Service Name      | The name of the application or service generating the log events.                                                                                                                                                                                                                                                                                                                        |\n```\n\n----------------------------------------\n\nTITLE: Configuring Directory Categories in JSON\nDESCRIPTION: JSON configuration for customizing directory labels and positions in the sidebar navigation.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/wiki/working-with-docusaurus.mdx#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"label\": \"Actions\",\n  \"position\": 3\n}\n```\n\n----------------------------------------\n\nTITLE: Using Heading Hierarchy in Markdown\nDESCRIPTION: Demonstrates the proper usage of heading hierarchy from h1 to h6 in Markdown, showing the correct syntax for each heading level.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/wiki/docusaurus-mdx-guide/headings.mdx#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# This is the Main Page Title\n\n## This is a H2 heading\n\n### This is a H3 heading\n\n#### This is a H4 heading\n\n##### This is a H5 heading\n\n###### This is a H6 heading\n```\n\n----------------------------------------\n\nTITLE: Setting Up Temporary Fish Auto-Completion for Hasura CLI\nDESCRIPTION: This command loads auto-completion for the Hasura CLI in the current Fish shell session.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/installation.mdx#2025-04-17_snippet_12\n\nLANGUAGE: ddn\nCODE:\n```\nddn completion fish | source\n```\n\n----------------------------------------\n\nTITLE: Creating Root Relative Markdown Link\nDESCRIPTION: Example of a root relative link in Markdown that references the actions overview page, starting after the 'latest' directory level.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/wiki/docusaurus-mdx-guide/links.mdx#2025-04-17_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n[MDX Root Relative Actions Link](/actions/overview.mdx)\n```\n\n----------------------------------------\n\nTITLE: Installing Firebase Admin SDK\nDESCRIPTION: Command to install the firebase-admin package for Node.js applications.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/auth/jwt/tutorials/integrations/3-firebase.mdx#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm i firebase-admin\n```\n\n----------------------------------------\n\nTITLE: Using JavaScript with Syntax Highlighting\nDESCRIPTION: A JavaScript code example demonstrating variable declarations with highlighted lines 1 and 3.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/wiki/kitchen-sink.mdx#2025-04-17_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst foo = 'bar';\nconst baz = 'qux';\nconst quux = 'quuz';\n```\n\n----------------------------------------\n\nTITLE: Installing Documentation Dependencies\nDESCRIPTION: Commands to navigate to the project directory and install required dependencies\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/wiki/contributing.mdx#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd ddn-docs && yarn install\n```\n\n----------------------------------------\n\nTITLE: DDN Config Upgrade Example Usage - Bash\nDESCRIPTION: Example showing how to upgrade a project in the current directory from v2 to v3.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_codemod_upgrade-project-config-v2-to-v3.mdx#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Upgrade project in the current directory from v2 to v3\n ddn codemod upgrade-project-config-v2-to-v3 --dir .\n```\n\n----------------------------------------\n\nTITLE: Using Thumbnail Component in JSX\nDESCRIPTION: Demonstrates how to import and use the Thumbnail component to add a zoomable image with alt text and width configuration. The component allows for click-to-zoom functionality and proper image accessibility.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/wiki/docusaurus-mdx-guide/images.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Thumbnail from '@site/src/components/Thumbnail';\n\n<Thumbnail\n  src=\"/img/graphql/manual/schema/validation-add-check-constraint.png\"\n  alt=\"Add check constraint\"\n  width=\"700px\"\n/>;\n```\n\n----------------------------------------\n\nTITLE: Rendering YouTube Video Embed in JSX\nDESCRIPTION: This code snippet renders an iframe element to embed a YouTube video. It sets the source URL, allows specific permissions, and enables fullscreen mode.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/index.mdx#2025-04-17_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<iframe\n  src={\"https://www.youtube.com/embed/nGcf09iVQbk\"}\n  allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\"\n  allowFullScreen\n/>\n```\n\n----------------------------------------\n\nTITLE: Introspecting PostgreSQL Database for Hasura DDN\nDESCRIPTION: This command introspects the connected PostgreSQL database, generating a schema representation in the configuration file.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/_quickstart_template.mdx#2025-04-17_snippet_5\n\nLANGUAGE: ddn\nCODE:\n```\nddn connector introspect imdb\n```\n\n----------------------------------------\n\nTITLE: Options for ddn command remove\nDESCRIPTION: Lists the available options for the 'ddn command remove' operation, including context selection, CI mode, and pattern matching.\nSOURCE: https://github.com/hasura/promptql-docs/blob/main/docs/reference/cli/commands/ddn_command_remove.mdx#2025-04-17_snippet_2\n\nLANGUAGE: sass\nCODE:\n```\n    --ci                Disables the use of context\n-c, --context string    Name of the context to use. (default <current_context>)\n-h, --help              help for remove\n    --pattern string    Pattern to detect targets. Can be 'glob' or 'literal'. (default \"glob\")\n    --subgraph string   Path to Subgraph config file\n```"
  }
]