[
  {
    "owner": "slidevjs",
    "repo": "slidev",
    "content": "TITLE: Initializing Slidev Project Locally with pnpm\nDESCRIPTION: The code demonstrates initializing a new Slidev project locally using pnpm. It prerequisites the installation of Node.js version 18.0 or higher. The 'pnpm create slidev' command sets up a basic Slidev project structure with sample content.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/docs/guide/index.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# If you haven\\'t installed pnpm\\nnpm i -g pnpm\\n\\npnpm create slidev\n```\n\n----------------------------------------\n\nTITLE: Basic Click Animation Components in Markdown\nDESCRIPTION: Demonstrates basic usage of v-click component and directive for show/hide animations in slides.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/docs/guide/animations.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<!-- Component usage:\n     this will be invisible until you press \"next\" -->\n<v-click> Hello World! </v-click>\n\n<!-- Directive usage:\n     this will be invisible until you press \"next\" the second time -->\n<div v-click class=\"text-xl\"> Hey! </div>\n```\n\n----------------------------------------\n\nTITLE: Handling Event Listeners with Cleanup - TypeScript\nDESCRIPTION: The `useEventListener` function sets up an event listener on a target and ensures that the listener is removed when the component unmounts, preventing memory leaks by utilizing Vue's lifecycle hooks.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/demo/composable-vue/slides.md#2025-04-21_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\nimport { onUnmounted } from 'vue'\n\nexport function useEventListener(target: EventTarget, name: string, fn: any) {\n  target.addEventListener(name, fn)\n\n  onUnmounted(() => {\n    target.removeEventListener(name, fn) // <--\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Monaco Runner Block in Slidev\nDESCRIPTION: Shows how to create a basic Monaco Runner code block with TypeScript. This example defines a distance function and logs the result, allowing for interactive editing and execution directly in the presentation.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/docs/features/monaco-run.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```ts {monaco-run}\nfunction distance(x: number, y: number) {\n  return Math.sqrt(x ** 2 + y ** 2)\n}\nconsole.log(distance(3, 4))\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Slidev Deck with YAML Headmatter\nDESCRIPTION: This YAML configuration block defines global options for a Slidev presentation deck. It includes settings for theme, title, export options, styling, fonts, and various features like presenter mode, monaco editor, and drawing capabilities.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/docs/custom/index.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\n# theme id, package name, or local path\n# Learn more: https://sli.dev/guide/theme-addon.html#use-theme\ntheme: default\n# addons, can be a list of package names or local paths\n# Learn more: https://sli.dev/guide/theme-addon.html#use-addon\naddons: []\n# title of your slide, will inferred from the first header if not specified\ntitle: Slidev\n# titleTemplate for the webpage, `%s` will be replaced by the slides deck's title\ntitleTemplate: '%s - Slidev'\n# information for your slides, can be a Markdown string\ninfo: false\n# author field for exported PDF or PPTX\nauthor: Your Name Here\n# keywords field for exported PDF, comma-delimited\nkeywords: keyword1,keyword2\n\n# enable presenter mode, can be boolean, 'dev' or 'build'\npresenter: true\n# enable browser exporter, can be boolean, 'dev' or 'build'\nbrowserExporter: dev\n# enabled pdf downloading in SPA build, can also be a custom url\ndownload: false\n# filename of the export file\nexportFilename: slidev-exported\n# export options\n# use export CLI options in camelCase format\n# Learn more: https://sli.dev/guide/exporting.html\nexport:\n  format: pdf\n  timeout: 30000\n  dark: false\n  withClicks: false\n  withToc: false\n# enable twoslash, can be boolean, 'dev' or 'build'\ntwoslash: true\n# show line numbers in code blocks\nlineNumbers: false\n# enable monaco editor, can be boolean, 'dev' or 'build'\nmonaco: true\n# Where to load monaco types from, can be 'cdn', 'local' or 'none'\nmonacoTypesSource: local\n# explicitly specify extra local packages to import the types for\nmonacoTypesAdditionalPackages: []\n# explicitly specify extra local modules as dependencies of monaco runnable\nmonacoRunAdditionalDeps: []\n# download remote assets in local using vite-plugin-remote-assets, can be boolean, 'dev' or 'build'\nremoteAssets: false\n# controls whether texts in slides are selectable\nselectable: true\n# enable slide recording, can be boolean, 'dev' or 'build'\nrecord: dev\n# enable Slidev's context menu, can be boolean, 'dev' or 'build'\ncontextMenu: true\n# enable wake lock, can be boolean, 'dev' or 'build'\nwakeLock: true\n# take snapshot for each slide in the overview\noverviewSnapshots: false\n\n# force color schema for the slides, can be 'auto', 'light', or 'dark'\ncolorSchema: auto\n# router mode for vue-router, can be \"history\" or \"hash\"\nrouterMode: history\n# aspect ratio for the slides\naspectRatio: 16/9\n# real width of the canvas, unit in px\ncanvasWidth: 980\n# used for theme customization, will inject root styles as `--slidev-theme-x` for attribute `x`\nthemeConfig:\n  primary: '#5d8392'\n\n# favicon, can be a local file path or URL\nfavicon: 'https://cdn.jsdelivr.net/gh/slidevjs/slidev/assets/favicon.png'\n# URL of PlantUML server used to render diagrams\n# Learn more: https://sli.dev/features/plantuml.html\nplantUmlServer: https://www.plantuml.com/plantuml\n# fonts will be auto-imported from Google fonts\n# Learn more: https://sli.dev/custom/config-fonts.html\nfonts:\n  sans: Roboto\n  serif: Roboto Slab\n  mono: Fira Code\n\n# default frontmatter applies to all slides\ndefaults:\n  layout: default\n  # ...\n\n# drawing options\n# Learn more: https://sli.dev/guide/drawing.html\ndrawings:\n  enabled: true\n  persist: false\n  presenterOnly: false\n  syncAll: true\n\n# HTML tag attributes\nhtmlAttrs:\n  dir: ltr\n  lang: en\n\n# SEO meta tags\nseoMeta:\n  ogTitle: Slidev Starter Template\n  ogDescription: Presentation slides for developers\n  ogImage: https://cover.sli.dev\n  ogUrl: https://example.com\n  twitterCard: summary_large_image\n  twitterTitle: Slidev Starter Template\n  twitterDescription: Presentation slides for developers\n  twitterImage: https://cover.sli.dev\n  twitterSite: username\n  twitterUrl: https://example.com\n---\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Sequence Diagram with Mermaid in Markdown\nDESCRIPTION: This example demonstrates how to create a simple sequence diagram using Mermaid syntax in a Markdown code block. The diagram shows an interaction between Alice and John with a descriptive note.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/docs/features/mermaid.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```mermaid\nsequenceDiagram\n  Alice->John: Hello John, how are you?\n  Note over Alice,John: A typical interaction\n```\n```\n\n----------------------------------------\n\nTITLE: Fetching Data Asynchronously with Composition API - TypeScript\nDESCRIPTION: The `useFetch` function manages fetching data from a URL and handles both data and potential errors using shallow refs. The function abstracts the process of API requests into a reusable composable.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/demo/composable-vue/slides.md#2025-04-21_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\nexport function useFetch<R>(url: MaybeRef<string>) {\n  const data = shallowRef<T | undefined>()\n  const error = shallowRef<Error | undefined>()\n\n  fetch(unref(url))\n    .then(r => r.json())\n    .then(r => data.value = r)\n    .catch(e => error.value = e)\n\n  return {\n    data,\n    error,\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a SSR Friendly Shared State - TypeScript\nDESCRIPTION: To create a shared state that's compatible with server-side rendering, use `provide` and `inject` in Vue. This allows for app-level state management that persists across different rendered components.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/demo/composable-vue/slides.md#2025-04-21_snippet_28\n\nLANGUAGE: typescript\nCODE:\n```\nexport const myStateKey: InjectionKey<MyState> = Symbol('state')\n\nexport function createMyState() {\n  const state = {\n    /* ... */\n  }\n\n  return {\n    install(app: App) {\n      app.provide(myStateKey, state)\n    },\n  }\n}\n\nexport function useMyState(): MyState {\n  return inject(myStateKey)!\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// main.ts\nconst App = createApp(App)\n\napp.use(createMyState())\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// A.vue\n\n// use everywhere in your app\nconst state = useMyState()\n```\n\n----------------------------------------\n\nTITLE: Configuring Slides with Frontmatter in Slidev\nDESCRIPTION: Shows how to use YAML frontmatter to configure individual slides and the entire slide deck in Slidev, including themes, layouts, and backgrounds.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/docs/guide/syntax.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntheme: seriph\ntitle: Welcome to Slidev\n---\n\n# Slide 1\n\nThe frontmatter of this slide is also the headmatter\n\n---\nlayout: center\nbackground: /background-1.png\nclass: text-white\n---\n\n# Slide 2\n\nA page with the layout `center` and a background image\n\n---\n\n# Slide 3\n\nA page without frontmatter\n\n---\nsrc: ./pages/4.md  # This slide only contains a frontmatter\n---\n\n---\n\n# Slide 5\n```\n\n----------------------------------------\n\nTITLE: Using `useVModel` for Two-Way Binding - TypeScript\nDESCRIPTION: The `useVModel` function simplifies two-way data binding with Vue's props. It allows a computed property to both read from and write to the parent component's property efficiently, emitting updates appropriately.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/demo/composable-vue/slides.md#2025-04-21_snippet_29\n\nLANGUAGE: typescript\nCODE:\n```\nexport function useVModel(props, name) {\n  const emit = getCurrentInstance().emit\n\n  return computed({\n    get() {\n      return props[name]\n    },\n    set(v) {\n      emit(`update:${name}`, v)\n    },\n  })\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineComponent({\n  setup(props) {\n    const value = useVModel(props, 'value')\n\n    return { value }\n  },\n})\n```\n\nLANGUAGE: html\nCODE:\n```\n<template>\n  <input v-model=\"value\" />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Code Runners in Slidev\nDESCRIPTION: This snippet demonstrates how to create custom code runners for languages like Python and HTML in Slidev. The code shows the implementation of custom runners that can execute code remotely or perform other processing on code inputs.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/docs/custom/config-code-runners.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineCodeRunnersSetup } from '@slidev/types'\n\nexport default defineCodeRunnersSetup(() => {\n  return {\n    async python(code, ctx) {\n      // Somehow execute the code and return the result\n      const result = await executePythonCodeRemotely(code)\n      return {\n        text: result\n      }\n    },\n    html(code, ctx) {\n      return {\n        html: sanitizeHtml(code)\n      }\n    },\n    // or other languages, key is the language id\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Structuring Slides with Markdown in Slidev\nDESCRIPTION: Demonstrates how to create slides using Markdown syntax in Slidev, including slide separators, code blocks, and UnoCSS classes.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/docs/guide/syntax.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Title\n\nHello, **Slidev**!\n\n---\n\n# Slide 2\n\nUse code blocks for highlighting:\n\n```ts\nconsole.log('Hello, World!')\n```\n\n---\n\n# Slide 3\n\nUse UnoCSS classes and Vue components to style and enrich your slides:\n\n<div class=\"p-3\">\n  <Tweet id=\"...\" />\n</div>\n```\n\n----------------------------------------\n\nTITLE: Using Vue Components in Markdown Slides with Slidev\nDESCRIPTION: Demonstrates how to incorporate Vue components directly in Markdown slides without manual imports using unplugin-vue-components. The example shows a component with a prop being passed.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/docs/guide/component.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# My Slide\n\n<MyComponent :count=\"4\"/>\n```\n\n----------------------------------------\n\nTITLE: Specifying Themes Using YAML\nDESCRIPTION: This YAML snippet defines the theming for a Slidev presentation. The theme can easily be switched by modifying just the theme property in the frontmatter.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/packages/slidev/template.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntheme: default\n---\n```\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntheme: seriph\n---\n```\n\n----------------------------------------\n\nTITLE: Accessing Global Context in Vue Components\nDESCRIPTION: Demonstrates how to use Slidev's global context within Vue components to display configuration data and implement navigation controls.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/docs/guide/global-context.md#2025-04-21_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<!-- Foo.vue -->\n\n<template>\n  <div>Title: {{ $slidev.configs.title }}</div>\n  <button @click=\"$nav.next\">\n    Next Click\n  </button>\n  <button @click=\"$nav.nextSlide\">\n    Next Slide\n  </button>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Creating TwoSlash-enhanced TypeScript Code Block in Markdown\nDESCRIPTION: Shows how to add the 'twoslash' specifier to a TypeScript code block in Markdown to enable TwoSlash type information. The example demonstrates importing ref from Vue and creating a ref with a hover type indicator.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/docs/features/twoslash.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```ts twoslash\nimport { ref } from 'vue'\n\nconst count = ref(0)\n//            ^?\n```\n```\n\n----------------------------------------\n\nTITLE: Creating Diagrams using Mermaid Syntax\nDESCRIPTION: These Mermaid code blocks illustrate how to create diagrams directly within the markdown formatted presentation. Different types of visuals like sequence diagrams and flowcharts can easily be generated.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/packages/slidev/template.md#2025-04-21_snippet_5\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    Alice->John: Hello John, how are you?\n    Note over Alice,John: A typical interaction\n```\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph TD\nB[Text] --> C{Decision}\nC -->|One| D[Result 1]\nC -->|Two| E[Result 2]\n```\n\nLANGUAGE: mermaid\nCODE:\n```\nmindmap\n  root((mindmap))\n    Origins\n      Long history\n      ::icon(fa fa-book)\n      Popularisation\n        British popular psychology author Tony Buzan\n    Research\n      On effectivness<br/>and features\n      On Automatic creation\n        Uses\n            Creative techniques\n            Strategic planning\n            Argument mapping\n    Tools\n      Pen and paper\n      Mermaid\n```\n\n----------------------------------------\n\nTITLE: Using Reactive Objects with Composables - TypeScript\nDESCRIPTION: The `useMouse` function demonstrates how to use both `ref` and `reactive` together to track mouse coordinates. This allows for easy destructuring of reactive properties while keeping them synchronized with actual state changes.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/demo/composable-vue/slides.md#2025-04-21_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nimport { reactive, ref } from 'vue'\n\nfunction useMouse() {\n  return {\n    x: ref(0),\n    y: ref(0),\n  }\n}\n\nconst { x, y } = useMouse()\nconst mouse = reactive(useMouse())\n\nmouse.x === x.value // true\n```\n\n----------------------------------------\n\nTITLE: Designing UML Diagrams with PlantUML Syntax\nDESCRIPTION: This PlantUML code block provides the structure for creating a UML diagram, showing relationships between components and packages within a system architecture.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/packages/slidev/template.md#2025-04-21_snippet_6\n\nLANGUAGE: plantuml\nCODE:\n```\n@startuml\n\npackage \"Some Group\" {\n  HTTP - [First Component]\n  [Another Component]\n}\n\nnode \"Other Groups\" {\n  FTP - [Second Component]\n  [First Component] --> FTP\n}\n\ncloud {\n  [Example 1]\n}\n\ndatabase \"MySql\" {\n  folder \"This is my folder\" {\n    [Folder 3]\n  }\n  frame \"Foo\" {\n    [Frame 4]\n  }\n}\n\n[Another Component] --> [Example 1]\n[Example 1] --> [Folder 3]\n[Folder 3] --> [Frame 4]\n\n@enduml\n```\n\n----------------------------------------\n\nTITLE: Building Slidev as a SPA using Bash\nDESCRIPTION: This snippet demonstrates how to build Slidev presentations as a static single-page application (SPA) using the Slidev CLI command. The built files will be placed in the 'dist' directory by default.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/docs/guide/hosting.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ slidev build\n```\n\n----------------------------------------\n\nTITLE: Defining Pre-Parser Setup in TypeScript\nDESCRIPTION: This snippet demonstrates how to create a basic pre-parser setup in Slidev. It includes a function to transform raw lines, replacing '@@@' with 'HELLO'. The setup uses the definePreparserSetup function and illustrates the structure of a pre-parser configuration file.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/docs/custom/config-parser.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { definePreparserSetup } from '@slidev/types'\n\nexport default definePreparserSetup(({ filepath, headmatter, mode }) => {\n  return [\n    {\n      transformRawLines(lines) {\n        for (const i in lines) {\n          if (lines[i] === '@@@')\n            lines[i] = 'HELLO'\n        }\n      },\n    }\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Ref Handling in Vue Composition API - TypeScript\nDESCRIPTION: This snippet illustrates how to create a ref in Vue using the `ref()` function. It highlights that providing a ref to `ref()` returns the same ref, showcasing the utility of Vue's reactive system in a composable context.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/demo/composable-vue/slides.md#2025-04-21_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nconst foo = ref(1) // Ref<1>\nconst bar = ref(foo) // Ref<1>\n\nfoo === bar // true\n```\n\nLANGUAGE: typescript\nCODE:\n```\nfunction useFoo(foo: Ref<string> | string) {\n  // no need!\n  const bar = isRef(foo) ? foo : ref(foo)\n\n  // they are the same\n  const bar = ref(foo)\n\n  /* ... */\n}\n```\n\n----------------------------------------\n\nTITLE: Using `ref` and `unref` in Composables - TypeScript\nDESCRIPTION: `MaybeRef<T>` type is useful for handling both ref and non-ref values in Vue. The `ref()` function normalizes values while the `unref()` function extracts raw values for use, ensuring consistent handling of data types within composable functions.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/demo/composable-vue/slides.md#2025-04-21_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\ntype MaybeRef<T> = Ref<T> | T\n\nfunction useBala<T>(arg: MaybeRef<T>) {\n  const reference = ref(arg) // get the ref\n  const value = unref(arg) // get the value\n}\n```\n\n----------------------------------------\n\nTITLE: Using Click Markers in Slidev\nDESCRIPTION: This Markdown snippet demonstrates how to use click markers to control the highlighting and auto-scrolling of presenter notes in Slidev. By placing `[click]` markers at specific lines, users can specify the timing for highlighting notes. The `n` parameter in `[click:{n+1}]` allows skipping a specified number of clicks. There are no external dependencies required other than Slidev itself. Inputs are Markdown lines with `[click]` markers, which control the emphasis during presentations.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/docs/features/click-marker.md#2025-04-21_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n<!--\\nContent before the first click\\n\\n[click] This will be highlighted after the first click\\n\\nAlso highlighted after the first click\\n\\n- [click] This list element will be highlighted after the second click\\n\\n[click:3] Last click (skip two clicks)\\n-->\n```\n\n----------------------------------------\n\nTITLE: Defining Slide Structure in Markdown\nDESCRIPTION: This Markdown snippet illustrates how to structure slides in Slidev using Markdown syntax, including defining a theme and utilizing a YAML block for slide layout. The approach allows for easy formatting and organization of slide content.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/docs/features/block-frontmatter.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntheme: default\n---\n\n# Slide 1\n\n---\n\n# Slide 2\n\n---\n\n# Slide 3\n```\n\n----------------------------------------\n\nTITLE: Exporting Slidev Presentations to PDF Format\nDESCRIPTION: Command to export slidev presentations to PDF format after installing the required playwright-chromium dependency.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/docs/guide/exporting.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ slidev export\n```\n\n----------------------------------------\n\nTITLE: Static Line Highlighting in TypeScript Code Block\nDESCRIPTION: Demonstrates how to highlight specific lines in a TypeScript code block using line numbers within curly braces. In this example, lines 2 and 3 are highlighted.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/docs/features/line-highlighting.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```ts {2,3}\nfunction add(\n  a: Ref<number> | number,\n  b: Ref<number> | number\n) {\n  return computed(() => unref(a) + unref(b))\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Extending Slidev's Vue 3 App with Custom Plugins\nDESCRIPTION: This snippet demonstrates how to configure the Vue 3 application in Slidev by creating a setup file. It shows how to import the defineAppSetup function from Slidev types and use it to register a custom Vue plugin with the app instance.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/docs/custom/config-vue.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineAppSetup } from '@slidev/types'\n\nexport default defineAppSetup(({ app, router }) => {\n  // Vue App\n  app.use(YourPlugin)\n})\n```\n\n----------------------------------------\n\nTITLE: Motion Animation with Vue Directive\nDESCRIPTION: Example of using v-motion directive for element animations with initial, enter, and leave states.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/docs/guide/animations.md#2025-04-21_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<div\n  v-motion\n  :initial=\"{ x: -80 }\"\n  :enter=\"{ x: 0 }\"\n  :leave=\"{ x: 80 }\"\n>\n  Slidev\n</div>\n```\n\n----------------------------------------\n\nTITLE: Implementing Magic Move with Multiple Code Blocks in Slidev\nDESCRIPTION: This snippet demonstrates how to wrap multiple code blocks with the magic-move syntax in Slidev. The code blocks represent different steps that will morph into each other as you click through the presentation.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/docs/features/shiki-magic-move.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n````md magic-move\n```js\nconsole.log(`Step ${1}`)\n```\n```js\nconsole.log(`Step ${1 + 1}`)\n```\n```ts\nconsole.log(`Step ${3}` as string)\n```\n````\n```\n\n----------------------------------------\n\nTITLE: Creating a Monaco Editor Code Block in Slidev\nDESCRIPTION: This snippet demonstrates how to turn a code block into a fully-featured Monaco editor by adding the {monaco} annotation after the language identifier. This allows for live code editing within the presentation.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/docs/features/monaco-editor.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```ts {monaco}\nconsole.log('HelloWorld')\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing useTimeAgo with MaybeRef Type Helper\nDESCRIPTION: Demonstrates a complete implementation of the useTimeAgo composable using the MaybeRef type helper to support flexible argument types.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/demo/composable-vue/slides.md#2025-04-21_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Ref } from 'vue'\nimport { computed, unref } from 'vue'\n\ntype MaybeRef<T> = Ref<T> | T\n\nexport function useTimeAgo(\n  time: MaybeRef<Date | number | string>,\n) {\n  return computed(() => someFormating(unref(time)))\n}\n```\n\n----------------------------------------\n\nTITLE: Running Single File Slides with Slidev CLI\nDESCRIPTION: Once the Slidev CLI is installed, this command can be used to start a single Markdown file as a slide presentation by executing 'slidev slides.md'.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/docs/guide/index.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nslidev slides.md\n```\n\n----------------------------------------\n\nTITLE: Specifying a Layout in Frontmatter - Markdown\nDESCRIPTION: This snippet demonstrates how to specify a layout using frontmatter in a Markdown file, typically used in Slidev. The layout controls the visual representation of a slide, and the default value is 'cover' for the first slide and 'default' for the others.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/docs/guide/layout.md#2025-04-21_snippet_0\n\nLANGUAGE: md\nCODE:\n```\n---\nlayout: quote\n---\n\nA quote from someone\n```\n\n----------------------------------------\n\nTITLE: Configuring Animation Transitions in Slidev with Vue Script Setup\nDESCRIPTION: This Vue script defines a 'final' animation state object with spring physics parameters for use with v-motion directives. It specifies position, rotation, scale, and transition properties including damping, stiffness, and mass.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/demo/starter/slides.md#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst final = {\n  x: 0,\n  y: 0,\n  rotate: 0,\n  scale: 1,\n  transition: {\n    type: 'spring',\n    damping: 10,\n    stiffness: 20,\n    mass: 2\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Typed Provide/Inject for Sharing Types - TypeScript\nDESCRIPTION: The provided code snippets showcase how to define a typed injection key and use it in both a parent and child component to share data. This helps in establishing a strongly typed context for the application state.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/demo/composable-vue/slides.md#2025-04-21_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\n// context.ts\nimport type { InjectionKey } from 'vue'\n\nexport interface UserInfo {\n  id: number\n  name: string\n}\n\nexport const injectKeyUser: InjectionKey<UserInfo> = Symbol('user')\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// parent.vue\nimport { provide } from 'vue'\nimport { injectKeyUser } from './context'\n\nexport default {\n  setup() {\n    provide(injectKeyUser, {\n      id: '7', // type error: should be number\n      name: 'Anthony',\n    })\n  },\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// child.vue\nimport { inject } from 'vue'\nimport { injectKeyUser } from './context'\n\nexport default {\n  setup() {\n    const user = inject(injectKeyUser)\n    // UserInfo | undefined\n\n    if (user)\n      console.log(user.name) // Anthony\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Canvas Size and Aspect Ratio in Slidev Frontmatter\nDESCRIPTION: This snippet demonstrates how to set the aspect ratio and canvas width for slides in Slidev using frontmatter options. The aspectRatio determines the slide proportions, while canvasWidth sets the actual width in pixels.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/docs/features/canvas-size.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\n# aspect ratio for the slides\naspectRatio: 16/9\n# real width of the canvas, unit in px\ncanvasWidth: 980\n---\n\n# Your slides here\n```\n\n----------------------------------------\n\nTITLE: Implementing Compact Syntax for Presentations in TypeScript\nDESCRIPTION: This pre-parser extension adds support for compact '@src:' and '@cover:' syntaxes in Slidev presentations. It transforms these custom syntaxes into proper Slidev frontmatter and layout configurations, allowing for more concise slide definitions.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/docs/custom/config-parser.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { definePreparserSetup } from '@slidev/types'\n\nexport default definePreparserSetup(() => {\n  return [\n    {\n      transformRawLines(lines) {\n        let i = 0\n        while (i < lines.length) {\n          const l = lines[i]\n          if (l.match(/^@cover:/i)) {\n            lines.splice(\n              i,\n              1,\n              '---',\n              'layout: cover',\n              `background: ${l.replace(/^@cover: */i, '')}`,\n              '---',\n              ''\n            )\n            continue\n          }\n          if (l.match(/^@src:/i)) {\n            lines.splice(\n              i,\n              1,\n              '---',\n              `src: ${l.replace(/^@src: */i, '')}`,\n              '---',\n              ''\n            )\n            continue\n          }\n          i++\n        }\n      }\n    },\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Using Vue Named Slots in Markdown Layout\nDESCRIPTION: This snippet demonstrates how to use Vue's named slots within a Markdown document using the `two-cols` layout. It showcases defining content for the default and right slots using `<template v-slot:name>` syntax. This approach requires the Vue.js framework and an understanding of its component slot features.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/docs/features/slot-sugar.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\\nlayout: two-cols\\n---\\n\\n<template v-slot:default>\\n\\n# Left\\n\\nThis is shown on the left\\n\\n</template>\\n<template v-slot:right>\\n\\n# Right\\n\\nThis is shown on the right\\n\\n</template>\n```\n\n----------------------------------------\n\nTITLE: Installing and Running Slidev Presentation\nDESCRIPTION: Commands to install dependencies and start the Slidev development server. After running these commands, the presentation can be accessed at http://localhost:3030.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/packages/create-app/template/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n- `pnpm install`\n- `pnpm dev`\n```\n\n----------------------------------------\n\nTITLE: Using Monaco Editor for Code Editing in Slidev\nDESCRIPTION: This snippet demonstrates how to create an editable code block using Monaco Editor in Slidev. The {monaco} directive transforms a TypeScript code block into an interactive editor that allows real-time editing during presentations.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/demo/starter/slides.md#2025-04-21_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ref } from 'vue'\nimport { emptyArray } from './external'\n\nconst arr = ref(emptyArray(10))\n```\n\n----------------------------------------\n\nTITLE: Code Runner Context Interface Definition\nDESCRIPTION: This TypeScript interface defines the context object provided to code runners. It includes properties for options passed to the runner, a highlight function for code highlighting, and a run function for executing code in other runners.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/docs/custom/config-code-runners.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface CodeRunnerContext {\n  /**\n   * Options passed to runner via the `runnerOptions` prop.\n   */\n  options: Record<string, unknown>\n  /**\n   * Highlight code with shiki.\n   */\n  highlight: (code: string, lang: string, options?: Partial<CodeToHastOptions>) => string\n  /**\n   * Use (other) code runner to run code.\n   */\n  run: (code: string, lang: string) => Promise<CodeRunnerOutputs>\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Two-Column Layout with Header in Slidev\nDESCRIPTION: This snippet demonstrates how to use the two-cols-header layout to create a slide with a header spanning both columns and content split into left and right columns below using Markdown syntax with dividers.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/docs/builtin/layouts.md#2025-04-21_snippet_9\n\nLANGUAGE: markdown\nCODE:\n```\n---\nlayout: two-cols-header\n---\n\nThis spans both\n\n::left::\n\n# Left\n\nThis shows on the left\n\n::right::\n\n# Right\n\nThis shows on the right\n```\n\n----------------------------------------\n\nTITLE: Creating a Monaco Diff Editor in Slidev\nDESCRIPTION: This snippet shows how to create a Monaco diff editor using the {monaco-diff} annotation. The original and modified code are separated by ~~~ which allows the editor to display differences between the two versions.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/docs/features/monaco-editor.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n```ts {monaco-diff}\nconsole.log('Original text')\n~~~\nconsole.log('Modified text')\n```\n```\n\n----------------------------------------\n\nTITLE: Interactive Vue Counter Component\nDESCRIPTION: A Vue Single File Component that implements a counter with increment/decrement buttons and computed double value display. Uses Vue 3 Composition API with script setup syntax and includes styled template with Tailwind CSS classes.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/demo/vue-runner/slides.md#2025-04-21_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { computed, ref } from 'vue'\nconst counter = ref(1)\nconst doubled = computed(() => counter.value * 2)\nfunction inc() { counter.value++ }\n</script>\n\n<template>\n  <div class=\"select-none text-lg flex gap-4 items-center\">\n    <span class=\"text-gray text-lg\">\n      <span class=\"text-orange\">{{ counter }}</span>\n      * 2 =\n      <span class=\"text-green\">{{ doubled }}</span>\n    </span>\n    <button class=\"border border-main p2 rounded\" @click=\"inc\">+1</button>\n    <button class=\"border border-main p2 rounded\" @click=\"counter -= 1\">-1</button>\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Comparing Ref and Plain Variables in Vue\nDESCRIPTION: Demonstrates the difference between using a plain variable and a ref in Vue. The ref provides type checking and reactivity while requiring the .value property for access.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/demo/composable-vue/slides.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ref } from 'vue'\n\nlet foo = 0\nlet bar = ref(0)\n\nfoo = 1\nbar = 1 // ts-error\n```\n\n----------------------------------------\n\nTITLE: Configuring and Using MDC Syntax in Slidev\nDESCRIPTION: Demonstrates how to enable MDC syntax in Slidev and shows various usage examples including styled text, inline components, image attributes, and block components. The syntax allows for enhanced markdown functionality with component integration and styling capabilities.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/docs/features/mdc.md#2025-04-21_snippet_0\n\nLANGUAGE: mdc\nCODE:\n```\n---\nmdc: true\n---\n\nThis is a [red text]{style=\"color:red\"} :inline-component{prop=\"value\"}\n\n![](/image.png){width=500px lazy}\n\n::block-component{prop=\"value\"}\nThe **default** slot\n::\n```\n\n----------------------------------------\n\nTITLE: Importing Specific Slides by Number in Slidev\nDESCRIPTION: This example shows how to import specific slides from another presentation by referencing their slide numbers in the src path. The syntax uses hash notation followed by slide numbers or ranges to selectively import slides.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/docs/features/importing-slides.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n---\nsrc: ./another-presentation.md#2,5-7\n---\n```\n\n----------------------------------------\n\nTITLE: Configuring Internal Slidev Plugins with Vite\nDESCRIPTION: This snippet demonstrates how to create a vite.config.ts file to configure Slidev's internal plugins like markdown-it, Vue, and others. It uses the slidev property in the configuration object to override default settings.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/docs/custom/config-vite.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from 'vite'\n\nexport default defineConfig({\n  slidev: {\n    vue: {\n      /* vue options */\n    },\n    markdown: {\n      /* markdown-it options */\n      markdownItSetup(md) {\n        /* custom markdown-it plugins */\n        md.use(MyPlugin)\n      },\n    },\n    /* options for other plugins */\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Draggable Component with Direct Props\nDESCRIPTION: Shows how to use the v-drag component with directly specified position values as props, allowing for inline definition of draggable element properties.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/docs/features/draggable.md#2025-04-21_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n<v-drag pos=\"Left,Top,Width,Height,Rotate\" text-3xl>\n  <div class=\"i-carbon:arrow-up\" />\n  Use the `v-drag` component to have a draggable container!\n</v-drag>\n```\n\n----------------------------------------\n\nTITLE: Configuring UnoCSS with TypeScript in Slidev\nDESCRIPTION: This code snippet shows how to create a uno.config.ts file to extend the builtin UnoCSS configurations in Slidev. It defines a custom shortcut for the default background.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/docs/custom/config-unocss.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from 'unocss'\n\nexport default defineConfig({\n  shortcuts: {\n    // custom the default background\n    'bg-main': 'bg-white text-[#181818] dark:(bg-[#121212] text-[#ddd])',\n  },\n  // ...\n})\n```\n\n----------------------------------------\n\nTITLE: Custom Mermaid Theme Configuration in TypeScript\nDESCRIPTION: Advanced Mermaid configuration example that demonstrates how to create custom themes by defining themeVariables. Includes settings for general theme properties and sequence diagram specific variables.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/docs/custom/config-mermaid.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineMermaidSetup } from '@slidev/types'\n\nexport default defineMermaidSetup(() => {\n  return {\n    theme: 'base',\n    themeVariables: {\n      // General theme variables\n      noteBkgColor: '#181d29',\n      noteTextColor: '#F3EFF5cc',\n      noteBorderColor: '#404551',\n\n      // Sequence diagram variables\n      actorBkg: '#0E131F',\n      actorBorder: '#44FFD2',\n      actorTextColor: '#F3EFF5',\n      actorLineColor: '#F3EFF5',\n      signalColor: '#F3EFF5',\n      signalTextColor: '#F3EFF5',\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Customized Flow Diagram with Mermaid Configuration Options\nDESCRIPTION: This example shows how to create a flow diagram with custom theme and scaling options. The configuration is passed as a JavaScript object with theme set to 'neutral' and scale reduced to 0.8.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/docs/features/mermaid.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n```mermaid {theme: 'neutral', scale: 0.8}\ngraph TD\nB[Text] --> C{Decision}\nC -->|One| D[Result 1]\nC -->|Two| E[Result 2]\n```\n```\n\n----------------------------------------\n\nTITLE: Using Shorthand Slot Syntax in Vue Layout\nDESCRIPTION: This snippet introduces a shorthand syntax `::name::` for defining Vue slots within a Markdown document. It simplifies the process of assigning content to named slots in the `two-cols` layout. Understanding of Vue.js slots and Markdown syntax is required.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/docs/features/slot-sugar.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n---\\nlayout: two-cols\\n---\\n\\n# Left\\n\\nThis is shown on the left\\n\\n::right::\\n\\n# Right\\n\\nThis is shown on the right\n```\n\n----------------------------------------\n\nTITLE: Configuring iframe-left Layout in Slidev\nDESCRIPTION: This snippet demonstrates how to use the iframe-left layout to display a web page on the left side with content on the right side using YAML frontmatter configuration.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/docs/builtin/layouts.md#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n---\nlayout: iframe-left\n\n# the web page source\nurl: https://github.com/slidevjs/slidev\n\n# a custom class name to the content\nclass: my-cool-content-on-the-right\n---\n```\n\n----------------------------------------\n\nTITLE: Setting Maximum Height for Code Blocks in Slidev Markdown\nDESCRIPTION: Demonstrates how to set a fixed height for code blocks with the maxHeight parameter, enabling scrolling when code is too long. The example shows TypeScript code with line highlighting capabilities via the curly braces syntax.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/docs/features/code-block-max-height.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```ts {2|3|7|12}{maxHeight:'100px'}\nfunction add(\n  a: Ref<number> | number,\n  b: Ref<number> | number\n) {\n  return computed(() => unref(a) + unref(b))\n}\n/// ...as many lines as you want\nconst c = add(1, 2)\n```\n```\n\n----------------------------------------\n\nTITLE: Using UnoCSS Directives in Slide-Scoped Styles\nDESCRIPTION: This example shows how to use nested CSS and UnoCSS directives within slide-scoped styles. The strong tags inside blockquotes are styled with teal color that adapts to light/dark modes.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/docs/features/slide-scope-style.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n# Slidev\n\n> Hello **world**\n\n<style>\nblockquote {\n  strong {\n    --uno: 'text-teal-500 dark:text-teal-400';\n  }\n}\n</style>\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Context Menu Items in Slidev with TypeScript\nDESCRIPTION: This code demonstrates how to create custom context menu items in Slidev. It imports necessary utilities, defines a menu item with an icon, label, and action, and shows how to disable items conditionally based on presenter mode.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/docs/custom/config-context-menu.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useNav } from '@slidev/client'\nimport { defineContextMenuSetup } from '@slidev/types'\nimport { computed } from 'vue'\nimport Icon3DCursor from '~icons/carbon/3d-cursor'\n\nexport default defineContextMenuSetup((items) => {\n  const { isPresenter } = useNav()\n  return computed(() => [\n    ...items.value,\n    {\n      small: false,\n      icon: Icon3DCursor, // if `small` is `true`, only the icon is shown\n      label: 'Custom Menu Item', // or a Vue component\n      action() {\n        alert('Custom Menu Item Clicked!')\n      },\n      disabled: isPresenter.value,\n    },\n  ])\n})\n```\n\n----------------------------------------\n\nTITLE: Monaco Runner with Controlled Output Display\nDESCRIPTION: Shows how to configure a Monaco Runner to only display its output after a specific number of clicks using the showOutputAt property, which works similar to the v-click directive in Slidev.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/docs/features/monaco-run.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n```ts {monaco-run} {showOutputAt:'+1'}\nconsole.log('Shown after 1 click')\n```\n```\n\n----------------------------------------\n\nTITLE: Using Wildcard for Line Highlighting with Line Numbers in Markdown\nDESCRIPTION: This example shows how to use a wildcard {*} for line highlighting in conjunction with line numbering in a Slidev Markdown code block. It demonstrates the integration of line numbering with the line highlighting feature.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/docs/features/code-block-line-numbers.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n```ts {*}{lines:true,startLine:5}\n// ...\n```\n```\n\n----------------------------------------\n\nTITLE: Creating Sequence Diagrams with Mermaid in Slidev\nDESCRIPTION: This Mermaid code snippet creates a simple sequence diagram showing interaction between Alice and John. The diagram is scaled to 0.5 of its original size and includes an alt text for accessibility.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/demo/starter/slides.md#2025-04-21_snippet_8\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    Alice->John: Hello John, how are you?\n    Note over Alice,John: A typical interaction\n```\n\n----------------------------------------\n\nTITLE: Custom CSS Transitions for Click Animations\nDESCRIPTION: Demonstrates how to customize transition effects for click animations using CSS.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/docs/guide/animations.md#2025-04-21_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n/* styles.css */\n\n.slidev-vclick-target {\n  transition: all 500ms ease;\n}\n\n.slidev-vclick-hidden {\n  transform: scale(0);\n}\n```\n\n----------------------------------------\n\nTITLE: Hiding and Removing Highlights in TypeScript Code Block\nDESCRIPTION: Illustrates how to use 'hide' to hide the entire code block and 'none' to remove all highlighting. These options are applied in two separate stages.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/docs/features/line-highlighting.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n```ts {hide|none}\nfunction add(\n  a: Ref<number> | number,\n  b: Ref<number> | number\n) {\n  return computed(() => unref(a) + unref(b))\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Monaco Runner with Disabled Autorun\nDESCRIPTION: Demonstrates how to create a Monaco Runner code block with autorun disabled. This requires the user to explicitly click the run button to execute the code.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/docs/features/monaco-run.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n```ts {monaco-run} {autorun:false}\nconsole.log('Click the play button to run me')\n```\n```\n\n----------------------------------------\n\nTITLE: Using VueUse Motion for Animations\nDESCRIPTION: This HTML snippet showcases how to animate elements using VueUse Motion. It demonstrates how to bind initial and enter properties to manage element animations during presentation transitions.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/packages/slidev/template.md#2025-04-21_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<div\n  v-motion\n  :initial=\"{ x: -80 }\"\n  :enter=\"{ x: 0 }\">\n  Slidev\n</div>\n```\n\n----------------------------------------\n\nTITLE: Exporting Slidev Presentations to PPTX Format\nDESCRIPTION: Command to export slidev presentations to PPTX format, which will convert all slides to images within the PowerPoint file.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/docs/guide/exporting.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ slidev export --format pptx\n```\n\n----------------------------------------\n\nTITLE: Rendering Block LaTeX Equations in Slidev\nDESCRIPTION: Shows how to create centered block-level LaTeX mathematical expressions using double dollar signs with aligned environments for multiple equations.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/docs/features/latex.md#2025-04-21_snippet_1\n\nLANGUAGE: latex\nCODE:\n```\n$$\n\\begin{aligned}\n\\nabla \\cdot \\vec{E} &= \\frac{\\rho}{\\varepsilon_0} \\\\\n\\nabla \\cdot \\vec{B} &= 0 \\\\\n\\nabla \\times \\vec{E} &= -\\frac{\\partial\\vec{B}}{\\partial t} \\\\\n\\nabla \\times \\vec{B} &= \\mu_0\\vec{J} + \\mu_0\\varepsilon_0\\frac{\\partial\\vec{E}}{\\partial t}\n\\end{aligned}\n$$\n```\n\n----------------------------------------\n\nTITLE: Using the Transform Component in Slidev Markdown\nDESCRIPTION: The Transform component applies a scaling factor to its child elements. This is particularly useful when you need to resize specific elements on a slide without affecting the overall slide layout. The scale property accepts a numeric value representing the scaling factor.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/docs/features/transform-component.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<Transform :scale=\"0.5\">\n  <YourElements />\n</Transform>\n```\n\n----------------------------------------\n\nTITLE: Using Slide Lifecycle Hooks in Slidev\nDESCRIPTION: Demonstrates how to use Slidev's lifecycle hooks to detect when slides become active or inactive. The example shows importing and using useIsSlideActive, onSlideEnter, and onSlideLeave hooks from the @slidev/client library.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/docs/features/slide-hook.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { onSlideEnter, onSlideLeave, useIsSlideActive } from '@slidev/client'\n\nconst isActive = useIsSlideActive()\n\nonSlideEnter(() => {\n  /* Called whenever the slide becomes active */\n})\n\nonSlideLeave(() => {\n  /* Called whenever the slide becomes inactive */\n})\n```\n\n----------------------------------------\n\nTITLE: Highlighting Code in Slidev Presentations\nDESCRIPTION: Demonstrates how to use Markdown-flavored code blocks for syntax highlighting in Slidev, powered by Shiki.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/docs/guide/syntax.md#2025-04-21_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n```ts\nconsole.log('Hello, World!')\n```\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic PlantUML Diagram in Slidev Markdown\nDESCRIPTION: This snippet demonstrates how to embed a simple PlantUML diagram in Slidev markdown. The example shows a basic sequence diagram between Alice and Bob, enclosed in plantuml code fence delimiters.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/docs/features/plantuml.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```plantuml\n@startuml\nAlice -> Bob : Hello!\n@enduml\n```\n```\n\n----------------------------------------\n\nTITLE: Importing Writable Code Snippets with Monaco Editor in Markdown\nDESCRIPTION: This snippet demonstrates how to import a code file into a Slidev presentation while making it editable with Monaco Editor. The {monaco-write} directive enables direct editing of the file from within the presentation, with changes saved back to the original file.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/docs/features/monaco-write.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<<< ./some-file.ts {monaco-write}\n```\n\n----------------------------------------\n\nTITLE: Implementing Line Highlighting in LaTeX Blocks\nDESCRIPTION: Demonstrates how to highlight specific lines in LaTeX block equations using line numbers within curly braces for step-by-step presentation.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/docs/features/latex.md#2025-04-21_snippet_2\n\nLANGUAGE: latex\nCODE:\n```\n$$ {1|3|all}\n\\begin{aligned}\n\\nabla \\cdot \\vec{E} &= \\frac{\\rho}{\\varepsilon_0} \\\\\n\\nabla \\cdot \\vec{B} &= 0 \\\\\n\\nabla \\times \\vec{E} &= -\\frac{\\partial\\vec{B}}{\\partial t} \\\\\n\\nabla \\times \\vec{B} &= \\mu_0\\vec{J} + \\mu_0\\varepsilon_0\\frac{\\partial\\vec{E}}{\\partial t}\n\\end{aligned}\n$$\n```\n\n----------------------------------------\n\nTITLE: Configuring image Layout in Slidev\nDESCRIPTION: This snippet shows how to use the image layout in Slidev. It demonstrates setting up a slide with an image as the main content using YAML frontmatter configuration.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/docs/builtin/layouts.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n---\nlayout: image\n\n# the image source\nimage: /path/to/the/image\n---\n```\n\n----------------------------------------\n\nTITLE: Creating a Docker Image for Slidev using Dockerfile\nDESCRIPTION: This Dockerfile snippet outlines how to create a custom Docker image for a Slidev presentation by adding local files to the image.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/docs/guide/hosting.md#2025-04-21_snippet_8\n\nLANGUAGE: Dockerfile\nCODE:\n```\nFROM tangramor/slidev:latest\n\nADD . /slidev\n```\n\n----------------------------------------\n\nTITLE: Using SlidevVideo Component - Slidev\nDESCRIPTION: SlidevVideo component embeds a video player with properties for controls, autoplay options, and custom sources, enhancing the multimedia capability of presentations.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/docs/builtin/components.md#2025-04-21_snippet_11\n\nLANGUAGE: markdown\nCODE:\n```\n<SlidevVideo v-click autoplay controls>\n  <source src=\"/myMovie.mp4\" type=\"video/mp4\" />\n  <source src=\"/myMovie.webm\" type=\"video/webm\" />\n  <p>\n    Your browser does not support videos. You may download it\n    <a href=\"/myMovie.mp4\">here</a>.\n  </p>\n</SlidevVideo>\n```\n\n----------------------------------------\n\nTITLE: Direct Value Draggable Element Implementation\nDESCRIPTION: Demonstrates how to create a draggable image element by directly specifying position values in the directive. Values are provided as an array of Left,Top,Width,Height,Rotate.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/docs/features/draggable.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n<img v-drag=\"[Left,Top,Width,Height,Rotate]\" src=\"https://sli.dev/logo.png\">\n```\n\n----------------------------------------\n\nTITLE: Installing Icon Sets with Package Managers\nDESCRIPTION: Commands for installing Iconify icon collections using different package managers. Replace [the-collection-you-want] with the specific icon set name you need, such as 'mdi' or 'carbon'.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/docs/features/icons.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm add @iconify-json/[the-collection-you-want]\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @iconify-json/[the-collection-you-want]\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @iconify-json/[the-collection-you-want]\n```\n\nLANGUAGE: bash\nCODE:\n```\nbun add @iconify-json/[the-collection-you-want]\n```\n\n----------------------------------------\n\nTITLE: Rendering Chemical Equations with KaTeX in Slidev\nDESCRIPTION: Demonstrates how to use the mhchem syntax with LaTeX to display chemical equations after configuring the necessary KaTeX extension.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/docs/features/latex.md#2025-04-21_snippet_4\n\nLANGUAGE: latex\nCODE:\n```\n$$\n\\displaystyle{\\ce{B(OH)3 + H2O <--> B(OH)4^- + H+}}\n$$\n```\n\n----------------------------------------\n\nTITLE: Importing JavaScript Snippets with Markdown\nDESCRIPTION: This snippet demonstrates how to import code from a JavaScript file located at `@/snippets/snippet.js` using the special `@` syntax that corresponds to the package root directory. It is recommended to store snippets in this directory to ensure compatibility with the Monaco editor.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/docs/features/import-snippet.md#2025-04-21_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n<<< @/snippets/snippet.js\n```\n\n----------------------------------------\n\nTITLE: Importing External Markdown Slides in Slidev\nDESCRIPTION: This example demonstrates how to split a Slidev presentation into multiple files by using the 'src' frontmatter option to import content from external markdown files. The main slides.md file imports content from './pages/toc.md' and can reuse the same file multiple times.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/docs/features/importing-slides.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Title\n\nThis is a normal page\n\n---\nsrc: ./pages/toc.md // [!code highlight]\n---\n\n<!-- this page will be loaded from './pages/toc.md' -->\n\nContents here are ignored\n\n---\n\n# Page 4\n\nAnother normal page\n\n---\nsrc: ./pages/toc.md   # Reuse the same file // [!code highlight]\n---\n```\n\n----------------------------------------\n\nTITLE: Navigation Control Examples with $nav\nDESCRIPTION: Demonstrates various navigation controls available through the $nav object, including going to the next step, next slide, or a specific slide number.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/docs/guide/global-context.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n$nav.next() // go next step\n$nav.nextSlide() // go next slide (skip clicks)\n$nav.go(10) // go slide #10\n\n$nav.currentPage // current slide number\n$nav.currentLayout // current layout name\n```\n\n----------------------------------------\n\nTITLE: Using Monaco Editor with Code Execution in Slidev\nDESCRIPTION: This snippet demonstrates how to create an executable code editor using Monaco Editor in Slidev. The {monaco-run} directive allows the presenter to edit and execute TypeScript code directly in the presentation, displaying the results in real-time.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/demo/starter/slides.md#2025-04-21_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nimport { version } from 'vue'\nimport { emptyArray, sayHello } from './external'\n\nsayHello()\nconsole.log(`vue ${version}`)\nconsole.log(emptyArray<number>(10).reduce(fib => [...fib, fib.at(-1)! + fib.at(-2)!], [1, 1]))\n```\n\n----------------------------------------\n\nTITLE: Using Transform Component - Slidev\nDESCRIPTION: Transform component enables scaling and transforming child elements within it, allowing for dynamic modifications in presentation.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/docs/builtin/components.md#2025-04-21_snippet_9\n\nLANGUAGE: markdown\nCODE:\n```\n<Transform :scale=\"0.5\">\n  <YourElements />\n</Transform>\n```\n\n----------------------------------------\n\nTITLE: Generating PDF Outline for Slidev Exports\nDESCRIPTION: Command to generate a PDF outline (table of contents) when exporting slidev presentations to PDF format.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/docs/guide/exporting.md#2025-04-21_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\n$ slidev export --with-toc\n```\n\n----------------------------------------\n\nTITLE: Combining Magic Move with Line Highlighting and Line Numbers in Slidev\nDESCRIPTION: This example shows how to mix Shiki Magic Move with line highlighting and line numbers features in Slidev. It includes configuration options for animation at specific indices and toggling line numbers visibility.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/docs/features/shiki-magic-move.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n````md magic-move {at:4, lines: true} // [!code hl]\n```js {*|1|2-5} // [!code hl]\nlet count = 1\nfunction add() {\n  count++\n}\n```\n\nNon-code blocks in between as ignored, you can put some comments.\n\n```js {*}{lines: false} // [!code hl]\nlet count = 1\nconst add = () => count += 1\n```\n````\n```\n\n----------------------------------------\n\nTITLE: Importing TypeScript Types for Slidev\nDESCRIPTION: Shows how to import and use TypeScript types from @slidev/types for type-safe programming when working with Slidev data structures.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/docs/guide/global-context.md#2025-04-21_snippet_9\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport type { TocItem } from '@slidev/types'\n\nfunction tocFunc(tree: TocItem[]): TocItem[] {\n  // ...\n}\n</script>\n```\n\n----------------------------------------\n\nTITLE: Layout-specific Global Bottom Layer in Slidev\nDESCRIPTION: This example shows how to hide the global bottom layer on slides with a specific layout (e.g., 'cover').\nSOURCE: https://github.com/slidevjs/slidev/blob/main/docs/features/global-layers.md#2025-04-21_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<!-- hide the footer from \"cover\" layout -->\n<template>\n  <footer\n    v-if=\"$nav.currentLayout !== 'cover'\"\n    class=\"absolute bottom-0 left-0 right-0 p-2\"\n  >\n    Your Name\n  </footer>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Draggable Component with Frontmatter Data\nDESCRIPTION: Illustrates using the v-drag component with position data defined in frontmatter. This approach allows for more complex draggable containers with custom content.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/docs/features/draggable.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n---\ndragPos:\n  foo: Left,Top,Width,Height,Rotate\n---\n\n<v-drag pos=\"foo\" text-3xl>\n  <div class=\"i-carbon:arrow-up\" />\n  Use the `v-drag` component to have a draggable container!\n</v-drag>\n```\n\n----------------------------------------\n\nTITLE: Customizing Font Weights and Italic Styles\nDESCRIPTION: YAML configuration for customizing font weights and enabling italic variants. By default, Slidev imports weights 200, 400, and 600 for each font.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/docs/custom/config-fonts.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n---\nfonts:\n  sans: Robot\n  # default\n  weights: '200,400,600'\n  # import italic fonts, default `false`\n  italic: false\n---\n```\n\n----------------------------------------\n\nTITLE: Configuring Slidev Commands in package.json\nDESCRIPTION: This JSON snippet outlines script configurations within package.json for Slidev operations, including development server start ('slidev --open'), build, and export commands.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/docs/guide/index.md#2025-04-21_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"scripts\\\": {\\n    \\\"dev\\\": \\\"slidev --open\\\",\\n    \\\"build\\\": \\\"slidev build\\\",\\n    \\\"export\\\": \\\"slidev export\\\"\\n  }\\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Shared State in Vue - TypeScript\nDESCRIPTION: This example demonstrates creating a shared state using Vue's Composition API. It defines a reactive object that can be imported and modified across multiple components. However, it notes that this approach is not suitable for server-side rendering.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/demo/composable-vue/slides.md#2025-04-21_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\n// shared.ts\nimport { reactive } from 'vue'\n\nexport const state = reactive({\n  foo: 1,\n  bar: 'Hello',\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// A.vue\nimport { state } from './shared.ts'\n\nstate.foo += 1\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// B.vue\nimport { state } from './shared.ts'\n\nconsole.log(state.foo) // 2\n```\n\n----------------------------------------\n\nTITLE: Applying Scoped CSS to a Single Slide in Slidev\nDESCRIPTION: This example demonstrates how to use a <style> tag within a markdown slide to apply styles that only affect the current slide. The h1 heading is colored red, but this styling doesn't affect other slides.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/docs/features/slide-scope-style.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# This is Red\n\n<style>\nh1 {\n  color: red;\n}\n</style>\n\n---\n\n# Other slides are not affected\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Transformers Setup for Slidev in TypeScript\nDESCRIPTION: This TypeScript snippet defines a custom setup for markdown transformers using the Slidev framework. It imports necessary types from '@slidev/types' and defines a `myCodeblock` function that alters markdown code blocks through regular expression replacement. The transformation setup is exported using `defineTransformersSetup` and specifies stages like `pre`, `preCodeblock`, `postCodeblock`, and `post`, which are ordered for processing markdown content. No external dependencies are needed beyond Slidev types, and the snippet expects markdown input with custom code syntax to be processed.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/docs/custom/config-transformers.md#2025-04-21_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport type { MarkdownTransformContext } from '@slidev/types'\\nimport { defineTransformersSetup } from '@slidev/types'\\n\\nfunction myCodeblock(ctx: MarkdownTransformContext) {\\n  console.log('index in presentation', ctx.slide.index)\\n  ctx.s.replace(\\n    /^```myblock *(\\{[^\\n]*\\})?\\n([\\s\\S]+?)\\n```/gm,\\n    (full, options = '', code = '') => {\\n      return `...`\\n    },\\n  )\\n}\\n\\nexport default defineTransformersSetup(() => {\\n  return {\\n    pre: [],\\n    preCodeblock: [myCodeblock],\\n    postCodeblock: [],\\n    post: [],\\n  }\\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Flow Charts with Mermaid in Slidev\nDESCRIPTION: This Mermaid diagram defines a simple decision flow chart with a neutral theme and scaled to 0.8 of its original size. It shows a text node flowing to a decision point with two possible outcomes.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/demo/starter/slides.md#2025-04-21_snippet_9\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph TD\nB[Text] --> C{Decision}\nC -->|One| D[Result 1]\nC -->|Two| E[Result 2]\n```\n\n----------------------------------------\n\nTITLE: Implementing Draggable Elements with Frontmatter Data\nDESCRIPTION: Shows how to create a draggable image element using frontmatter data to define position and dimensions. The position is specified using Left,Top,Width,Height,Rotate format in the frontmatter.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/docs/features/draggable.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ndragPos:\n  square: Left,Top,Width,Height,Rotate\n---\n\n<img v-drag=\"'square'\" src=\"https://sli.dev/logo.png\">\n```\n\n----------------------------------------\n\nTITLE: Ref Auto-unwrapping in Vue Templates\nDESCRIPTION: Shows how ref values are automatically unwrapped in Vue templates, allowing for cleaner template syntax without .value.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/demo/composable-vue/slides.md#2025-04-21_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<template>\n  <button @click=\"counter += 1\">\n    Counter is {{ counter }}\n  </button>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Configuring PDF Generation in Slidev Headmatter (Markdown)\nDESCRIPTION: This snippet shows how to enable PDF generation in Slidev using the headmatter configuration. It demonstrates both automatic generation and providing a custom URL for the PDF.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/docs/features/build-with-pdf.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ndownload: true\n---\n```\n\nLANGUAGE: markdown\nCODE:\n```\n---\ndownload: 'https://myside.com/my-talk.pdf'\n---\n```\n\n----------------------------------------\n\nTITLE: Creating Two-Column Layout in Slidev\nDESCRIPTION: This snippet demonstrates how to use the two-cols layout to separate slide content into two columns using a combination of YAML frontmatter and Markdown syntax with the ::right:: divider.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/docs/builtin/layouts.md#2025-04-21_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\n---\nlayout: two-cols\n---\n\n# Left\n\nThis shows on the left\n\n::right::\n\n# Right\n\nThis shows on the right\n```\n\n----------------------------------------\n\nTITLE: Using Composables for Type-Safe Context Access\nDESCRIPTION: Shows how to use Slidev's composables from @slidev/client for programmatic and type-safe access to context values, including slide navigation, dark mode, and slide lifecycle hooks.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/docs/guide/global-context.md#2025-04-21_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { onSlideEnter, onSlideLeave, useDarkMode, useIsSlideActive, useNav, useSlideContext } from '@slidev/client'\n\nconst { $slidev } = useSlideContext()\nconst { currentPage, currentLayout, currentSlideRoute } = useNav()\nconst { isDark } = useDarkMode()\nconst isActive = useIsSlideActive()\nonSlideEnter(() => { /* ... */ })\nonSlideLeave(() => { /* ... */ })\n// ...\n</script>\n```\n\n----------------------------------------\n\nTITLE: Styling Icons with CSS Classes in HTML\nDESCRIPTION: Example of how to apply CSS styling to icons in Slidev presentations. This snippet demonstrates basic usage, text color/size changes, and animations using utility classes.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/docs/features/icons.md#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<uim-rocket />\n<uim-rocket class=\"text-3xl text-red-400 mx-2\" />\n<uim-rocket class=\"text-3xl text-orange-400 animate-ping\" />\n```\n\n----------------------------------------\n\nTITLE: Opening Cloudflare Quick Tunnels in Slidev with Package Managers\nDESCRIPTION: Commands to run Slidev with remote access and Cloudflare Quick Tunnels enabled using different package managers. The --remote and --tunnel flags are used to activate these features.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/docs/features/remote-access.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm dev -- --remote --tunnel\n# i.e. slidev --remote --tunnel\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev -- --remote --tunnel\n# i.e. slidev --remote --tunnel\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn dev --remote --tunnel\n# i.e. slidev --remote --tunnel\n```\n\nLANGUAGE: bash\nCODE:\n```\nbun dev --remote --tunnel\n# i.e. slidev --remote --tunnel\n```\n\n----------------------------------------\n\nTITLE: Disabling Monaco Editor in Slidev - YAML\nDESCRIPTION: This YAML frontmatter configuration shows how to disable the Monaco editor in Slidev presentations. Users can set 'monaco' to 'false' or conditionally enable it during development or build processes.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/docs/custom/config-monaco.md#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n---\nmonaco: false # can also be `dev` or `build` to conditionally enable it\n---\n```\n\n----------------------------------------\n\nTITLE: Advanced Transition Configuration with TransitionGroup in Slidev\nDESCRIPTION: This advanced usage example demonstrates configuring Slidev transitions with additional options using the TransitionGroup component. The snippet customizes enter and active classes for detailed control over the transition effects.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/docs/guide/animations.md#2025-04-21_snippet_8\n\nLANGUAGE: Markdown\nCODE:\n```\n---\\ntransition:\\n  name: my-transition\\n  enterFromClass: custom-enter-from\\n  enterActiveClass: custom-enter-active\\n---\\n\n```\n\n----------------------------------------\n\nTITLE: Configuring MDC Syntax with View Transitions in Markdown\nDESCRIPTION: This snippet demonstrates how to enable and use the Markdown Component (MDC) Syntax to define a view transition in a Slidev slide. The code specifies a transition in the front matter and applies it using the .view-transition-title CSS class. Dependencies include enabled MDC syntax in the Slidev setup.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/docs/guide/animations.md#2025-04-21_snippet_5\n\nLANGUAGE: Markdown\nCODE:\n```\n---\\ntransition: view-transition\\nmdc: true\\n---\\n\\n# View Transition {.inline-block.view-transition-title}\\n\\n---\\n\\n# View Transition {.inline-block.view-transition-title}\\n\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Transitions Using CSS in Slidev\nDESCRIPTION: This snippet shows how to define a custom transition named my-transition in Slidev using CSS. It specifies the enter and leave transition properties for a smooth fade effect. The custom transition is referenced in the Markdown front matter of a Slidev slide.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/docs/guide/animations.md#2025-04-21_snippet_6\n\nLANGUAGE: Markdown\nCODE:\n```\n---\\ntransition: my-transition\\n---\\n\n```\n\nLANGUAGE: CSS\nCODE:\n```\n.my-transition-enter-active,\\n.my-transition-leave-active {\\n  transition: opacity 0.5s ease;\\n}\\n\\n.my-transition-enter-from,\\n.my-transition-leave-to {\\n  opacity: 0;\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Implementing TwoSlash for TypeScript Code Blocks\nDESCRIPTION: This TypeScript code snippet showcases the use of TwoSlash, allowing for TypeScript hover information and error checking within markdown code blocks. It demonstrates the use of Vue's ref and computed functionalities to create a reactive count.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/packages/slidev/template.md#2025-04-21_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\n// TwoSlash enables TypeScript hover information\n// and errors in markdown code blocks\n// More at https://shiki.style/packages/twoslash\n\nimport { computed, ref } from 'vue'\n\nconst count = ref(0)\nconst doubled = computed(() => count.value * 2)\n\ndoubled.value = 2\n```\n\n----------------------------------------\n\nTITLE: Enabling PDF Generation via Slidev CLI (Bash)\nDESCRIPTION: This snippet demonstrates how to use the Slidev CLI to enable PDF generation during the build process using the --download flag.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/docs/features/build-with-pdf.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ slidev build --download\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Themes and Languages for Shiki in Slidev\nDESCRIPTION: This snippet shows how to import and use custom TextMate grammar and theme files in the Shiki setup. It also demonstrates adding multiple languages, including custom ones.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/docs/custom/config-highlighter.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n/* ./setup/shiki.ts */\nimport { defineShikiSetup } from '@slidev/types'\n// ---cut-start---\n// @ts-expect-error missing types\n// ---cut-end---\nimport customLanguage from './customLanguage.tmLanguage.json'\n// ---cut-start---\n// @ts-expect-error missing types\n// ---cut-end---\nimport customTheme from './customTheme.tmTheme.json'\n\nexport default defineShikiSetup(() => {\n  return {\n    themes: {\n      dark: customTheme,\n      light: 'min-light',\n    },\n    langs: [\n      'js',\n      'typescript',\n      'cpp',\n      customLanguage,\n      // ...\n    ],\n    transformers: [\n      // ...\n    ],\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring image-left Layout in Slidev\nDESCRIPTION: This snippet shows how to use the image-left layout in Slidev. It demonstrates setting up a slide with an image on the left side and content on the right side using YAML frontmatter configuration.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/docs/builtin/layouts.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nlayout: image-left\n\n# the image source\nimage: /path/to/the/image\n\n# a custom class name to the content\nclass: my-cool-content-on-the-right\n---\n```\n\n----------------------------------------\n\nTITLE: Implementing Default Slot in Vue Layout\nDESCRIPTION: This Vue template specifies a basic layout using the default slot to display slide content. The layout class is styled as 'slidev-layout default'.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/docs/guide/write-layout.md#2025-04-21_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <div class=\"slidev-layout default\">\n    <slot />\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Configuring v-mark directive with options object in Vue\nDESCRIPTION: Example of using the v-mark directive with a configuration object to specify when it appears (at click 5), the color (#234), and the type of mark (circle).\nSOURCE: https://github.com/slidevjs/slidev/blob/main/docs/features/rough-marker.md#2025-04-21_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<span v-mark=\"{ at: 5, color: '#234', type: 'circle' }\">\nImportant text\n</span>\n```\n\n----------------------------------------\n\nTITLE: SCSS Layout-Specific Transitions\nDESCRIPTION: Shows how to apply custom transitions to specific slides or layouts using SCSS.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/docs/guide/animations.md#2025-04-21_snippet_4\n\nLANGUAGE: scss\nCODE:\n```\n.slidev-page-7,\n.slidev-layout.my-custom-layout {\n  .slidev-vclick-target {\n    transition: all 500ms ease;\n  }\n\n  .slidev-vclick-hidden {\n    transform: scale(0);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using YAML Frontmatter in Slidev Markdown\nDESCRIPTION: This YAML code snippet demonstrates how to define the layout of a slide using the 'layout' key within a YAML frontmatter block. It is intended for use within Slidev presentations to set specific slide attributes directly in the content.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/docs/features/block-frontmatter.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nlayout: quote\n```\n\n----------------------------------------\n\nTITLE: Theme Configuration After Ejection\nDESCRIPTION: YAML frontmatter configuration that updates the theme path to the locally ejected theme directory\nSOURCE: https://github.com/slidevjs/slidev/blob/main/docs/features/eject-theme.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntheme: ./theme\n---\n```\n\n----------------------------------------\n\nTITLE: Default Slidev Configurations in JSON\nDESCRIPTION: This JSON snippet illustrates how to set default presentation configurations in a Slidev theme by adding a 'slidev.defaults' field in the package.json. No additional dependencies are required, and it expects to merge these configurations with user-specific settings, detailing options like transition styles and aspect ratio.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/docs/guide/write-theme.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"slidev\": {\n    \"defaults\": {\n      \"transition\": \"slide-left\",\n      \"aspectRatio\": \"4/3\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Monaco Setup in Slidev - TypeScript\nDESCRIPTION: This snippet sets up the Monaco editor configuration for Slidev using TypeScript. It imports the required function from Slidev types and defines an async setup function that utilizes Monaco for custom configurations. Ensure `@slidev/types` is installed as a dependency.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/docs/custom/config-monaco.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineMonacoSetup } from '@slidev/types'\n\nexport default defineMonacoSetup(async (monaco) => {\n  // use `monaco` to configure\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Special Ref with useTitle Composable\nDESCRIPTION: Shows how to create and use a special ref with the useTitle composable from VueUse, which synchronizes a ref value with the page title.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/demo/composable-vue/slides.md#2025-04-21_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useTitle } from '@vueuse/core'\n\nconst title = useTitle()\n\ntitle.value = 'Hello World'\n// now the page's title changed\n```\n\n----------------------------------------\n\nTITLE: Resulting Merged Markdown\nDESCRIPTION: The final merged result showing how frontmatter properties are combined, with the main entry's properties taking precedence.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/docs/features/frontmatter-merging.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n---\nlayout: cover\nbackground: https://sli.dev/bar.png\nclass: text-center\n---\n\n# Cover\n\nCover Page\n```\n\n----------------------------------------\n\nTITLE: Using LightOrDark Component - Slidev\nDESCRIPTION: LightOrDark component switches content based on whether light or dark theme is active. It utilizes named slots to define content for each theme, making it flexible for design.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/docs/builtin/components.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n<LightOrDark>\n  <template #dark>Dark mode is on</template>\n  <template #light>Light mode is on</template>\n</LightOrDark>\n```\n\nLANGUAGE: markdown\nCODE:\n```\n<LightOrDark width=\"100\" alt=\"some image\">\n  <template #dark=\"props\">\n    <img src=\"/dark.png\" v-bind=\"props\"/>\n  </template>\n  <template #light=\"props\">\n    <img src=\"/light.png\" v-bind=\"props\"/>\n  </template>\n</LightOrDark>\n```\n\n----------------------------------------\n\nTITLE: Configuring Drawing Persistence in Slidev\nDESCRIPTION: This snippet shows how to configure Slidev to persist drawings as SVGs in the '.slidev/drawings' directory, which will be included in exported PDFs or hosted sites.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/docs/features/drawing.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ndrawings:\n  persist: true\n---\n```\n\n----------------------------------------\n\nTITLE: Implementing a useDark Composable Function\nDESCRIPTION: Shows the implementation of a useDark composable function that manages dark mode preference using other composable functions like usePreferredDark and useLocalStorage.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/demo/composable-vue/slides.md#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nexport function useDark(options: UseDarkOptions = {}) {\n  const preferredDark = usePreferredDark() // <--\n  const store = useLocalStorage('vueuse-dark', 'auto') // <--\n\n  return computed<boolean>({\n    get() {\n      return store.value === 'auto'\n        ? preferredDark.value\n        : store.value === 'dark'\n    },\n    set(v) {\n      store.value = v === preferredDark.value\n        ? 'auto'\n        : v ? 'dark' : 'light'\n    },\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Navigation Controls in Slidev\nDESCRIPTION: This example shows how to create a custom navigation control button for moving to the next slide.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/docs/features/global-layers.md#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!-- custom-nav-controls -->\n<template>\n  <button class=\"icon-btn\" title=\"Next\" @click=\"$nav.next\">\n    <div class=\"i-carbon:arrow-right\" />\n  </button>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Setting Slidev Theme in Headmatter\nDESCRIPTION: This code snippet shows how to specify a theme in the headmatter of a Slidev presentation. The `theme` option is used to define which theme to use for the presentation. The example sets the theme to \"seriph\".\nSOURCE: https://github.com/slidevjs/slidev/blob/main/docs/guide/theme-addon.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntheme: seriph\n---\n\n# The first slide\n```\n\n----------------------------------------\n\nTITLE: Styling Content with UnoCSS Classes in HTML\nDESCRIPTION: This snippet demonstrates how to use UnoCSS classes to style content in Slidev. It creates a grid layout with specific column sizes and gap.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/docs/custom/config-unocss.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"grid pt-4 gap-4 grid-cols-[100px,1fr]\">\n\n### Name\n\n- Item 1\n- Item 2\n\n</div>\n```\n\n----------------------------------------\n\nTITLE: Initializing Custom Shortcuts Setup in Slidev with TypeScript\nDESCRIPTION: Demonstrates how to create a custom shortcuts configuration file that extends the base shortcuts. Shows adding new keyboard bindings for next/previous slide navigation with enter and backspace keys. Uses the defineShortcutsSetup utility to configure navigation operations.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/docs/custom/config-shortcuts.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { NavOperations, ShortcutOptions } from '@slidev/types'\nimport { defineShortcutsSetup } from '@slidev/types'\n\nexport default defineShortcutsSetup((nav: NavOperations, base: ShortcutOptions[]) => {\n  return [\n    ...base, // keep the existing shortcuts\n    {\n      key: 'enter',\n      fn: () => nav.next(),\n      autoRepeat: true,\n    },\n    {\n      key: 'backspace',\n      fn: () => nav.prev(),\n      autoRepeat: true,\n    },\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Using AutoFitText Component - Slidev\nDESCRIPTION: The AutoFitText component automatically adjusts the font size of the text to fit within a specified maximum and minimum. This is particularly useful for ensuring text fits neatly within a designated area on the slides.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/docs/builtin/components.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n<AutoFitText :max=\"200\" :min=\"100\" modelValue=\"Some text\"/>\n```\n\n----------------------------------------\n\nTITLE: Using Wildcard Line Highlighting with Max Height in Slidev\nDESCRIPTION: Shows how to use the {*} placeholder for line highlighting in combination with the maxHeight property. This allows for highlighting all lines while maintaining a scrollable code block.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/docs/features/code-block-max-height.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n```ts {*}{maxHeight:'100px'}\n// ...\n```\n```\n\n----------------------------------------\n\nTITLE: Accessing Global Context Directly in Markdown Slides\nDESCRIPTION: Shows how to directly access Slidev's global context values like $nav within markdown slides. This enables dynamic content that reacts to the current page state.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/docs/guide/global-context.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<!-- slides.md -->\n\n# Page 1\n\nCurrent page is: {{ $nav.currentPage }}\n```\n\n----------------------------------------\n\nTITLE: Presenter-mode Specific Navigation Controls in Slidev\nDESCRIPTION: This example demonstrates how to create a custom navigation control that is hidden in Presenter mode.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/docs/features/global-layers.md#2025-04-21_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<!-- custom-nav-controls -->\n<!-- hide the button in Presenter model -->\n<template>\n  <button v-if=\"!$nav.isPresenter\" class=\"icon-btn\" title=\"Next\" @click=\"$nav.next\">\n    <div class=\"i-carbon:arrow-right\" />\n  </button>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Customizing Background Size in image Layout\nDESCRIPTION: This snippet demonstrates how to customize the background size of an image in the image layout using the backgroundSize attribute in the YAML frontmatter.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/docs/builtin/layouts.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n---\nlayout: image\nimage: /path/to/the/image\nbackgroundSize: contain\n---\n```\n\n----------------------------------------\n\nTITLE: Defining Slidev Presentation Pages with Markdown and Layout Directives\nDESCRIPTION: This snippet shows how to structure Slidev presentation slides using markdown. It includes page numbering, slide separation with '---', layout directives with frontmatter, and component embedding with the Tweet component.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/test/fixtures/markdown/sub/pages3-4.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Page 3\n\n---\nlayout: cover\n---\n\n# Page 4\n\n<Tweet />\n```\n\n----------------------------------------\n\nTITLE: Creating Vertical Flexbox Layout with Centered Items\nDESCRIPTION: Uses CSS Flexbox to create a vertical column layout with horizontally centered items, implemented through UnoCSS utility classes.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/docs/guide/faq.md#2025-04-21_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n<div class=\"flex flex-col items-center\">\n  <div>\n    Centered content\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Using Vue with Monaco Editor - TypeScript\nDESCRIPTION: This snippet demonstrates how to use Vue's reactivity with the Monaco editor in a Slidev setup. It imports Vue's 'ref' and a mouse utility hook. Ensure that 'vue' and '@vueuse/core' are installed as dependencies for this code to work correctly.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/docs/custom/config-monaco.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ref } from 'vue'\nimport { useMouse } from '@vueuse/core'\n\nconst counter = ref(0)\n```\n\n----------------------------------------\n\nTITLE: Using Toc Component - Slidev\nDESCRIPTION: Toc component generates a Table of Contents for the presentation, allowing for easy navigation across sections. Configuration options like depth and style can be customized.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/docs/builtin/components.md#2025-04-21_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\n<Toc />\n```\n\n----------------------------------------\n\nTITLE: Configuring KaTeX Extensions for Chemical Equations in Slidev\nDESCRIPTION: Shows how to create a Vite configuration file to load the mhchem KaTeX extension, which enables rendering of chemical equations in Slidev presentations.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/docs/features/latex.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport 'katex/contrib/mhchem'\n\nexport default {}\n```\n\n----------------------------------------\n\nTITLE: Basic Mermaid Configuration in TypeScript\nDESCRIPTION: Basic setup for configuring Mermaid diagrams in Slidev using the defineMermaidSetup function. Sets the theme to 'forest'.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/docs/custom/config-mermaid.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineMermaidSetup } from '@slidev/types'\n\nexport default defineMermaidSetup(() => {\n  return {\n    theme: 'forest',\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Draggable Arrows in Slidev\nDESCRIPTION: This snippet demonstrates how to create a two-way draggable arrow in Slidev presentations using the v-drag-arrow component. The two-way property indicates that the arrow can be dragged from either end.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/demo/starter/slides.md#2025-04-21_snippet_14\n\nLANGUAGE: markdown\nCODE:\n```\n<v-drag-arrow two-way />\n```\n\n----------------------------------------\n\nTITLE: Customizing Monaco Editor Options - TypeScript\nDESCRIPTION: This snippet defines custom editor options for the Monaco editor. It demonstrates how to customize settings like word wrapping in the code runner using an object that conforms to the IEditorOptions interface from Monaco.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/docs/custom/config-monaco.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// ./setup/monaco.ts\nimport { defineMonacoSetup } from '@slidev/types'\n\nexport default defineMonacoSetup(() => {\n  return {\n    editorOptions: {\n      wordWrap: 'on'\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Draggable Elements with v-drag Component in Slidev\nDESCRIPTION: This snippet shows how to use the v-drag component to create a draggable container in Slidev. It demonstrates how to wrap content within the component to make it draggable while preserving its styling and content.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/demo/starter/slides.md#2025-04-21_snippet_13\n\nLANGUAGE: markdown\nCODE:\n```\n<v-drag text-3xl>\n  <div class=\"i-carbon:arrow-up\" />\n  Use the `v-drag` component to have a draggable container!\n</v-drag>\n```\n\n----------------------------------------\n\nTITLE: TypeScript Code Example with Computed Values\nDESCRIPTION: Demonstrates TypeScript code with Vue composition API, showing ref and computed property usage with TwoSlash enabled for TypeScript hover information.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/demo/starter/slides.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// TwoSlash enables TypeScript hover information\n// and errors in markdown code blocks\n// More at https://shiki.style/packages/twoslash\n\nimport { computed, ref } from 'vue'\n\nconst count = ref(0)\nconst doubled = computed(() => count.value * 2)\n\ndoubled.value = 2\n```\n\n----------------------------------------\n\nTITLE: Absolute Positioning with UnoCSS\nDESCRIPTION: Demonstrates how to use UnoCSS utility classes to position elements absolutely on a slide, creating a footer positioned at the bottom left corner.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/docs/guide/faq.md#2025-04-21_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n<div class=\"absolute left-30px bottom-30px\">\n  This is a left-bottom aligned footer\n</div>\n```\n\n----------------------------------------\n\nTITLE: Creating a Reactive Addition Function with Refs\nDESCRIPTION: Shows how to create a reactive addition function that accepts refs and returns a computed value that updates when the input refs change.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/demo/composable-vue/slides.md#2025-04-21_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nfunction add(a: Ref<number>, b: Ref<number>) {\n  return computed(() => a.value + b.value)\n}\n```\n\n----------------------------------------\n\nTITLE: Using RenderWhen Component - Slidev\nDESCRIPTION: RenderWhen component conditionally renders content based on the provided context, allowing certain text to only appear in specific view modes (e.g., presenter view).\nSOURCE: https://github.com/slidevjs/slidev/blob/main/docs/builtin/components.md#2025-04-21_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n<RenderWhen context=\"presenter\">This will only be rendered in presenter view.</RenderWhen>\n```\n\n----------------------------------------\n\nTITLE: Font Configuration with Default Fallbacks\nDESCRIPTION: Basic font configuration that will automatically have fallback fonts appended. Slidev includes appropriate system fonts as fallbacks for sans, serif, and mono font families.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/docs/custom/config-fonts.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n---\nfonts:\n  sans: Robot\n  serif: Robot Slab\n  mono: Fira Code\n---\n```\n\n----------------------------------------\n\nTITLE: Initializing Slidev Project with npm\nDESCRIPTION: Command to create a new Slidev project using npm init, which triggers the Slidev project template generator\nSOURCE: https://github.com/slidevjs/slidev/blob/main/packages/create-app/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm init slidev\n```\n\n----------------------------------------\n\nTITLE: Implementing Draggable Elements with v-drag Directive in Slidev\nDESCRIPTION: This snippet demonstrates how to use the v-drag directive to make an image draggable in Slidev presentations. The 'square' parameter is used as an identifier for the draggable element's position state.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/demo/starter/slides.md#2025-04-21_snippet_12\n\nLANGUAGE: markdown\nCODE:\n```\n<img v-drag=\"'square'\" src=\"https://sli.dev/logo.png\">\n```\n\n----------------------------------------\n\nTITLE: Setup ThemeGallery Component in Vue\nDESCRIPTION: Initialize and use the ThemeGallery Vue component to display available themes for Slidev. Requires the \\'ThemeGallery\\' component from \\'../.vitepress/theme/components/ThemeGallery.vue\\'. Utilizes Vue\\'s <ClientOnly> feature to dynamically render themes, separated into official and community collections.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/docs/resources/theme-gallery.md#2025-04-21_snippet_0\n\nLANGUAGE: Vue\nCODE:\n```\n<script setup>\nimport ThemeGallery from '../.vitepress/theme/components/ThemeGallery.vue'\n</script>\n```\n\nLANGUAGE: Vue\nCODE:\n```\n<ClientOnly>\n  <ThemeGallery collection=\\\"official\\\"/>\n</ClientOnly>\n\n<ClientOnly>\n  <ThemeGallery collection=\\\"community\\\"/>\n</ClientOnly>\n```\n\n----------------------------------------\n\nTITLE: Creating Component Diagrams with PlantUML in Slidev\nDESCRIPTION: This PlantUML diagram illustrates a component architecture with packages, nodes, cloud, and database elements. It defines relationships between components with arrows and demonstrates how to organize elements in containers like folders and frames.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/demo/starter/slides.md#2025-04-21_snippet_11\n\nLANGUAGE: plantuml\nCODE:\n```\n@startuml\n\npackage \"Some Group\" {\n  HTTP - [First Component]\n  [Another Component]\n}\n\nnode \"Other Groups\" {\n  FTP - [Second Component]\n  [First Component] --> FTP\n}\n\ncloud {\n  [Example 1]\n}\n\ndatabase \"MySql\" {\n  folder \"This is my folder\" {\n    [Folder 3]\n  }\n  frame \"Foo\" {\n    [Frame 4]\n  }\n}\n\n[Another Component] --> [Example 1]\n[Example 1] --> [Folder 3]\n[Folder 3] --> [Frame 4]\n\n@enduml\n```\n\n----------------------------------------\n\nTITLE: Main Entry Markdown with Imported Slide\nDESCRIPTION: Example of a main entry markdown file that imports another slide and sets frontmatter properties.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/docs/features/frontmatter-merging.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\nsrc: ./cover.md\nbackground: https://sli.dev/bar.png\nclass: text-center\n---\n```\n\n----------------------------------------\n\nTITLE: Creating a Flexible Reactive Addition Function\nDESCRIPTION: Shows how to create a flexible reactive addition function that accepts both refs and plain values using unref, enhancing reusability.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/demo/composable-vue/slides.md#2025-04-21_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nfunction add(\n  a: Ref<number> | number,\n  b: Ref<number> | number,\n) {\n  return computed(() => unref(a) + unref(b))\n}\n```\n\n----------------------------------------\n\nTITLE: Fixing Missing Content with Wait Option in Slidev Export\nDESCRIPTION: Command to add a wait time between slides to ensure all content and animations are properly captured during export.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/docs/guide/exporting.md#2025-04-21_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\n$ slidev export --wait 1000\n```\n\n----------------------------------------\n\nTITLE: Conditional Global Bottom Layer in Slidev\nDESCRIPTION: This snippet demonstrates how to conditionally display a global bottom layer, hiding it on a specific page number.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/docs/features/global-layers.md#2025-04-21_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<!-- hide the footer from Page 4 -->\n<template>\n  <footer\n    v-if=\"$nav.currentPage !== 4\"\n    class=\"absolute bottom-0 left-0 right-0 p-2\"\n  >\n    Your Name\n  </footer>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Using Image Assets with Static Path Analysis in Markdown\nDESCRIPTION: Shows how to use relative paths for images that can be statically analyzed during build. These paths will be properly resolved to '/BASE_URL/assets/image.png' after build.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/docs/guide/faq.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n![alt](./image.png)\n<img src=\"./image.png\" />\n```\n\n----------------------------------------\n\nTITLE: Vue Component Counter Implementation\nDESCRIPTION: Shows how to use Vue components within slides with a counter example.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/demo/starter/slides.md#2025-04-21_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<Counter :count=\"10\" />\n```\n\n----------------------------------------\n\nTITLE: Binding an Existing Ref to useTitle Composable\nDESCRIPTION: Demonstrates how to bind an existing ref or computed property to the useTitle composable, showing the flexibility of composable functions.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/demo/composable-vue/slides.md#2025-04-21_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useTitle } from '@vueuse/core'\nimport { computed, ref } from 'vue'\n\nconst name = ref('Hello')\nconst title = computed(() => {\n  return `${name.value} - World`\n})\n\nuseTitle(title) // Hello - World\n\nname.value = 'Hi' // Hi - World\n```\n\n----------------------------------------\n\nTITLE: Configuring image-right Layout in Slidev\nDESCRIPTION: This snippet shows how to use the image-right layout in Slidev. It demonstrates setting up a slide with an image on the right side and content on the left side using YAML frontmatter configuration.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/docs/builtin/layouts.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n---\nlayout: image-right\n\n# the image source\nimage: /path/to/the/image\n\n# a custom class name to the content\nclass: my-cool-content-on-the-left\n---\n```\n\n----------------------------------------\n\nTITLE: Conditional Rendering Based on Render Context\nDESCRIPTION: Demonstrates how to conditionally render content based on the current render context, which can be slide, overview, presenter, or previewNext.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/docs/guide/global-context.md#2025-04-21_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n<div v-if=\"['slide', 'presenter'].includes($renderContext)\">\n  This content will only be rendered in main slides view\n</div>\n```\n\n----------------------------------------\n\nTITLE: Dynamic Line Highlighting in TypeScript Code Block\nDESCRIPTION: Shows how to create multiple stages of line highlighting using the pipe symbol. This example has three stages: highlighting lines 2-3, then line 5, and finally all lines.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/docs/features/line-highlighting.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n```ts {2-3|5|all}\nfunction add(\n  a: Ref<number> | number,\n  b: Ref<number> | number\n) {\n  return computed(() => unref(a) + unref(b))\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Click Animation Implementation\nDESCRIPTION: Demonstrates how to add click animations to elements using v-click directive.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/demo/starter/slides.md#2025-04-21_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<div v-click>This shows up when you click the slide.</div>\n```\n\n----------------------------------------\n\nTITLE: Running Slidev with Docker using Bash\nDESCRIPTION: This Bash command runs a prebuilt Slidev Docker image to start a Slidev presentation. It includes configurations for user permissions and port mapping.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/docs/guide/hosting.md#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --name slidev --rm -it \\\n    --user node \\\n    -v ${PWD}:/slidev \\\n    -p 3030:3030 \\\n    -e NPM_MIRROR=\"https://registry.npmmirror.com\" \\\n    tangramor/slidev:latest\n```\n\n----------------------------------------\n\nTITLE: Using Link Component - Slidev\nDESCRIPTION: The Link component allows users to create navigable links to specific slides within the presentation. This facilitates easy navigation and organization of slide content.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/docs/builtin/components.md#2025-04-21_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n<Link to=\"42\">Go to slide 42</Link>\n```\n\nLANGUAGE: markdown\nCODE:\n```\n<Link to=\"42\" title=\"Go to slide 42\"/>\n```\n\nLANGUAGE: markdown\nCODE:\n```\n<Link to=\"solutions\" title=\"Go to solutions\"/>\n```\n\n----------------------------------------\n\nTITLE: Customizing Background Size in image-left Layout\nDESCRIPTION: This snippet shows how to customize the background size of an image in the image-left layout using specific dimensions in the backgroundSize attribute.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/docs/builtin/layouts.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n---\nlayout: image-left\nimage: /path/to/the/image\nbackgroundSize: 20em 70%\n---\n```\n\n----------------------------------------\n\nTITLE: Using Template Refs with Lifecycle Hooks - TypeScript\nDESCRIPTION: This snippet demonstrates how to use a template ref in combination with the `onMounted` lifecycle hook to access a DOM element after the component has been mounted.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/demo/composable-vue/slides.md#2025-04-21_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineComponent, onMounted, ref } from 'vue'\n\nexport default defineComponent({\n  setup() {\n    const element = ref<HTMLElement | undefined>()\n\n    onMounted(() => {\n      element.value // now you have it\n    })\n\n    return { element }\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Using Youtube Component - Slidev\nDESCRIPTION: Youtube component embeds YouTube videos based on their unique ID, providing an option for setting dimensions for the video player.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/docs/builtin/components.md#2025-04-21_snippet_12\n\nLANGUAGE: markdown\nCODE:\n```\n<Youtube id=\"luoMHjh-XcQ\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Slidev Addon in Markdown\nDESCRIPTION: This code snippet demonstrates how to preview a local Slidev addon by configuring it in the frontmatter of a slides.md file. It uses the 'addons' property to specify the local addon directory.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/docs/guide/write-addon.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\naddons:\n  - ./\n---\n```\n\n----------------------------------------\n\nTITLE: Implementing Named Slots in Split Layout\nDESCRIPTION: This Vue template creates a split layout utilizing named slots. It divides content into two sections, 'left' and 'right', allowing for more complex layout designs.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/docs/guide/write-layout.md#2025-04-21_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <div class=\"slidev-layout split\">\n    <div class=\"left\">\n      <slot name=\"left\" />\n    </div>\n    <div class=\"right\">\n      <slot name=\"right\" />\n    </div>\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Importing JavaScript with Language Override\nDESCRIPTION: This markdown snippet imports a file and explicitly specifies the language as `ts` (TypeScript) for scenarios where a language override is necessary. This is useful for ensuring proper syntax highlighting.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/docs/features/import-snippet.md#2025-04-21_snippet_2\n\nLANGUAGE: Markdown\nCODE:\n```\n<<< @/snippets/snippet.js ts\n```\n\n----------------------------------------\n\nTITLE: Configuring Slidev Include Patterns in VS Code Settings\nDESCRIPTION: JSON configuration for specifying which files should be recognized as Slidev presentations using glob patterns. This setting allows users to customize which markdown files are included as Slidev entries.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/docs/features/vscode-extension.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"slidev.include\": [\"**/presentation.md\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Output Filename for Slidev Exports\nDESCRIPTION: Command to specify a custom output filename when exporting slidev presentations.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/docs/guide/exporting.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ slidev export --output my-pdf-export\n```\n\n----------------------------------------\n\nTITLE: Creating a Table of Contents in HTML\nDESCRIPTION: This HTML snippet generates a table of contents using the custom <Toc> component with specified minDepth and maxDepth parameters to control the heading levels displayed.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/packages/slidev/template.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<Toc minDepth=\"1\" maxDepth=\"1\"></Toc>\n```\n\n----------------------------------------\n\nTITLE: Using MaybeRef in a useTimeAgo Composable\nDESCRIPTION: Shows how to use the MaybeRef type in a useTimeAgo composable function to allow flexible parameter passing, accepting both refs and plain values.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/demo/composable-vue/slides.md#2025-04-21_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nexport function useTimeAgo(\n  time: Date | number | string | Ref<Date | number | string>,\n) {\n  return computed(() => someFormating(unref(time)))\n}\n```\n\n----------------------------------------\n\nTITLE: Styling with UnoCSS and PostCSS\nDESCRIPTION: Demonstration of using UnoCSS and PostCSS in a Slidev layout to apply CSS styles and leverage advanced features like CSS nesting and at-directives. The example shows how different elements are styled with custom CSS variables, enhancing the flexibility in handling styles in Slidev applications.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/docs/custom/directory-structure.md#2025-04-21_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n.slidev-layout {\n  --uno: px-14 py-10 text-[1.1rem];\n\n  h1, h2, h3, h4, p, div {\n    --uno: select-none;\n  }\n\n  pre, code {\n    --uno: select-text;\n  }\n\n  a {\n    color: theme('colors.primary');\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Local Fonts in Slidev\nDESCRIPTION: YAML configuration to use local fonts instead of importing from Google Fonts. The 'local' property specifies which fonts should be considered local and not fetched from a CDN.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/docs/custom/config-fonts.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n---\nfonts:\n  # like font-family in css, you can use `,` to separate multiple fonts for fallback\n  sans: 'Helvetica Neue,Robot'\n  # mark 'Helvetica Neue' as local font\n  local: Helvetica Neue\n---\n```\n\n----------------------------------------\n\nTITLE: Configuring KaTeX Options in Slidev using TypeScript\nDESCRIPTION: This code snippet shows how to create a custom KaTeX configuration in Slidev. It uses the defineKatexSetup function to specify options like maxExpand. The configuration is set in a separate TypeScript file.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/docs/custom/config-katex.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineKatexSetup } from '@slidev/types'\n\nexport default defineKatexSetup(() => {\n  return {\n    maxExpand: 2000,\n    /* ... */\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Importing Specific Code Regions in Markdown\nDESCRIPTION: This code snippet shows how to import only a specific region from a file using the VS Code region features. This allows for importing only a certain part of the code for more focused presentations.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/docs/features/import-snippet.md#2025-04-21_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n<<< @/snippets/snippet.js#region-name\n```\n\n----------------------------------------\n\nTITLE: Using Line Highlighting Placeholder in Markdown\nDESCRIPTION: This snippet illustrates using a placeholder `{*}` in markdown to apply certain code block features like line highlighting, enhancing readability and focus during presentations.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/docs/features/import-snippet.md#2025-04-21_snippet_4\n\nLANGUAGE: Markdown\nCODE:\n```\n<<< @/snippets/snippet.js {*}{lines:true}\n```\n\n----------------------------------------\n\nTITLE: Conditional Rendering with Click Counter\nDESCRIPTION: Example of how to conditionally render content based on the number of clicks on the current slide, using the $clicks global context variable.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/docs/guide/global-context.md#2025-04-21_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<div v-if=\"$clicks > 3\">Content</div>\n```\n\n----------------------------------------\n\nTITLE: Dynamic Page Number Footer in Slidev\nDESCRIPTION: This snippet creates a footer that displays the current page number and total number of pages, excluding the cover layout.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/docs/features/global-layers.md#2025-04-21_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<!-- an example footer for pages -->\n<template>\n  <footer\n    v-if=\"$nav.currentLayout !== 'cover'\"\n    class=\"absolute bottom-0 left-0 right-0 p-2\"\n  >\n    {{ $nav.currentPage }} / {{ $nav.total }}\n  </footer>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Configuring Slidev Addons in Headmatter\nDESCRIPTION: This code snippet shows how to specify addons in the headmatter of a Slidev presentation. The `addons` option is used to list the addons to be included in the presentation. The example includes the `excalidraw` and `@slidev/plugin-notes` addons.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/docs/guide/theme-addon.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n---\naddons:\n  - excalidraw\n  - '@slidev/plugin-notes'\n---\n```\n\n----------------------------------------\n\nTITLE: Specifying Additional Packages for Type Acquisition - Markdown\nDESCRIPTION: This YAML frontmatter configuration allows users to specify additional packages for which they want Monaco to acquire types. This is useful when Slidev does not automatically detect all the required libraries.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/docs/custom/config-monaco.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n---\nmonacoTypesAdditionalPackages:\n  - lodash-es\n  - foo\n---\n```\n\n----------------------------------------\n\nTITLE: Adding Presenter Notes in Slidev Markdown\nDESCRIPTION: Illustrates how to add presenter notes to slides using HTML comments at the end of each slide in Slidev Markdown.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/docs/guide/syntax.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n---\nlayout: cover\n---\n\n# Slide 1\n\nThis is the cover page.\n\n<!-- This is a **note** -->\n\n---\n\n# Slide 2\n\n<!-- This is NOT a note because it is not at the end of the slide -->\n\nThe second page\n\n<!--\nThis is _another_ note\n-->\n```\n\n----------------------------------------\n\nTITLE: Working with Theme Configurations\nDESCRIPTION: Demonstrates defining and accessing theme configurations from the frontmatter via the $slidev.themeConfigs object.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/docs/guide/global-context.md#2025-04-21_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: My First Slidev!\nthemeConfig:\n  primary: '#213435'\n---\n```\n\nLANGUAGE: markdown\nCODE:\n```\n{{ $slidev.themeConfigs.primary }} // '#213435'\n```\n\n----------------------------------------\n\nTITLE: Using SlidesTotal Component - Slidev\nDESCRIPTION: SlidesTotal component displays the total number of slides in the presentation, helpful for audience awareness of the complete slide count.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/docs/builtin/components.md#2025-04-21_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n<SlidesTotal />\n```\n\n----------------------------------------\n\nTITLE: Loading Types from CDN - Markdown\nDESCRIPTION: This YAML frontmatter option configures the Monaco editor to load types from a CDN, specifically using the '@typescript/ata' package. This feature is beneficial for client-side operations and enhancing type acquisition.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/docs/custom/config-monaco.md#2025-04-21_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n---\nmonacoTypesSource: ata\n---\n```\n\n----------------------------------------\n\nTITLE: Configuring Line Numbers and Highlighting in Markdown Code Blocks\nDESCRIPTION: This snippet demonstrates how to enable line numbers, set a custom starting line number, and highlight specific lines in a TypeScript code block within Markdown. It uses Slidev's syntax for code block configuration.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/docs/features/code-block-line-numbers.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```ts {6,7}{lines:true,startLine:5}\nfunction add(\n  a: Ref<number> | number,\n  b: Ref<number> | number\n) {\n  return computed(() => unref(a) + unref(b))\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Using HTML for Custom Image Styles\nDESCRIPTION: This snippet illustrates how to use the HTML <img> tag to include a local image in a Slidev project. It allows for custom styling and sizing, useful when Markdown's image capabilities are not sufficient.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/docs/features/bundle-remote-assets.md#2025-04-21_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<img src=\"/pic.png\" class=\"m-40 h-40 rounded shadow\" />\n```\n\n----------------------------------------\n\nTITLE: Ref Auto-unwrapping in Reactive Objects\nDESCRIPTION: Demonstrates how reactive objects automatically unwrap nested refs, allowing for cleaner syntax when accessing nested reactive values.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/demo/composable-vue/slides.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { reactive, ref } from 'vue'\n\nconst foo = ref('bar')\nconst data = reactive({ foo, id: 10 })\ndata.foo // 'bar'\n```\n\n----------------------------------------\n\nTITLE: Referencing Local Image in Markdown\nDESCRIPTION: This snippet shows how to reference a local image stored in the public folder of a Slidev project. It emphasizes the correct usage of the leading slash for referencing local files instead of a relative path.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/docs/features/bundle-remote-assets.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n![Local Image](/pic.png)\n```\n\n----------------------------------------\n\nTITLE: Defining a MaybeRef Type Helper\nDESCRIPTION: Shows how to define a MaybeRef type helper to simplify function signatures that accept both refs and plain values.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/demo/composable-vue/slides.md#2025-04-21_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\ntype MaybeRef<T> = Ref<T> | T\n```\n\n----------------------------------------\n\nTITLE: Running Development Commands for Theme Preview - npm Commands\nDESCRIPTION: This snippet outlines the npm commands necessary for starting the theme development preview. It includes commands to install dependencies, run the development server, generate PDFs, and create screenshots of the slides.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/packages/create-theme/template/README.md#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n- `npm install`\n- `npm run dev` to start theme preview of `example.md`\n- Edit the `example.md` and style to see the changes\n- `npm run export` to generate the preview PDF\n- `npm run screenshot` to generate the preview PNG\n```\n\n----------------------------------------\n\nTITLE: Creating a Global Bottom Layer in Slidev\nDESCRIPTION: This snippet demonstrates how to create a global bottom layer that displays a footer with the author's name on all slides.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/docs/features/global-layers.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!-- global-bottom.vue -->\n<template>\n  <footer class=\"absolute bottom-0 left-0 right-0 p-2\">Your Name</footer>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Structuring Main Slidev Presentation File with External References\nDESCRIPTION: Example of a main slides.md file that contains its own content and imports another slide file using the src attribute. The file demonstrates how to combine local and external slide content.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/demo/starter/pages/imported-slides.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Page 1\n\nPage 2 from main entry.\n\n---\n\n## src: ./subpage.md\n```\n\n----------------------------------------\n\nTITLE: Specifying Slidev Engine Version in JSON\nDESCRIPTION: This JSON snippet is used to declare the minimum Slidev engine version required for a theme, ensuring compatibility with specific features. This is set in the 'engines' field of the package.json file. It presents an error message if the Slidev version does not meet the specified requirement.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/docs/guide/write-theme.md#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"engines\": {\n    \"slidev\": \">=0.48.0\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Shiki Setup for Slidev in TypeScript\nDESCRIPTION: This snippet demonstrates how to create a basic Shiki setup file for Slidev. It defines dark and light themes using the defineShikiSetup function from @slidev/types.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/docs/custom/config-highlighter.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n/* ./setup/shiki.ts */\nimport { defineShikiSetup } from '@slidev/types'\n\nexport default defineShikiSetup(() => {\n  return {\n    themes: {\n      dark: 'min-dark',\n      light: 'min-light',\n    },\n    transformers: [\n      // ...\n    ],\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Defining YAML Frontmatter Layout\nDESCRIPTION: This snippet demonstrates how YAML frontmatter can be used for defining layout properties in a document or presentation slide. It sets layout parameters using YAML syntax.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/test/fixtures/markdown/frontmatter.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n\"# The first yaml block should be treated as frontmatter\\nlayout: from yaml\"\n```\n\n----------------------------------------\n\nTITLE: Handling Markdown Code Blocks\nDESCRIPTION: This snippet shows how to handle a Markdown code block, simulating a frontmatter. It includes the formatting of Markdown syntax commonly used in documents.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/test/fixtures/markdown/frontmatter.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n\"```md\\n---\\nthis should be treated as code block\\n---\\n\\n---\\n\\nAlso part of the code block\\n```\"\n```\n\n----------------------------------------\n\nTITLE: Initializing Styles with TypeScript\nDESCRIPTION: Example of importing multiple CSS styles for a Slidev application using an index.ts TypeScript file. This setup allows managing the import order of styles by manually including files such as base.css, code.css, and layouts.css. It enables integration with UnoCSS and PostCSS, leveraging features like CSS nesting and at-directives.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/docs/custom/directory-structure.md#2025-04-21_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\n// styles/index.ts\n\nimport './base.css'\nimport './code.css'\nimport './layouts.css'\n```\n\n----------------------------------------\n\nTITLE: Configuring iframe Layout in Slidev\nDESCRIPTION: This snippet shows how to use the iframe layout to display a web page as the main content of a slide using YAML frontmatter configuration.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/docs/builtin/layouts.md#2025-04-21_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n---\nlayout: iframe\n\n# the web page source\nurl: https://github.com/slidevjs/slidev\n---\n```\n\n----------------------------------------\n\nTITLE: TwoSlash-rendered TypeScript Code Example\nDESCRIPTION: Shows the rendered output of a TwoSlash-enhanced TypeScript code block. This example demonstrates how type information appears when hovering over the 'ref' function result.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/docs/features/twoslash.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ref } from 'vue'\n\nconst count = ref(0)\n//            ^?\n```\n\n----------------------------------------\n\nTITLE: Creating External Slidev Content File for Import\nDESCRIPTION: Example of a subpage.md file that contains slide content to be imported into the main presentation. This demonstrates how to structure an external file for inclusion.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/demo/starter/pages/imported-slides.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n# Page 2\n\nPage 2 from another file.\n```\n\n----------------------------------------\n\nTITLE: Applying Navigation Direction Styles in CSS\nDESCRIPTION: This snippet applies different transition delay styles to elements based on the navigation direction using CSS class selectors. It uses the classes \".slidev-nav-go-forward\" and \".slidev-nav-go-backward\" to manage animations when navigating through slides.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/docs/features/direction-variant.md#2025-04-21_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n/* example: delay on only forward but not backward */\n.slidev-nav-go-forward .slidev-vclick-target {\n  transition-delay: 500ms;\n}\n.slidev-nav-go-backward .slidev-vclick-target {\n  transition-delay: 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Inline LaTeX in Slidev Markdown\nDESCRIPTION: Demonstrates how to use single dollar signs to surround LaTeX expressions for inline rendering within Slidev markdown content.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/docs/features/latex.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n$\\sqrt{3x-1}+(1+x)^2$\n```\n\n----------------------------------------\n\nTITLE: Initializing Slidev Project with Yarn\nDESCRIPTION: Alternative command to create a new Slidev project using Yarn create, which triggers the Slidev project template generator\nSOURCE: https://github.com/slidevjs/slidev/blob/main/packages/create-app/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn create slidev\n```\n\n----------------------------------------\n\nTITLE: Exporting Slidev Presentations with Click Steps\nDESCRIPTION: Command to export slidev presentations with click animations enabled, creating multiple pages for slides with multiple steps.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/docs/guide/exporting.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ slidev export --with-clicks\n```\n\n----------------------------------------\n\nTITLE: Initializing Slidev Project Locally with bun\nDESCRIPTION: The example demonstrates creating a Slidev project using the Bun package manager. It highlights 'bun create slidev' as a command for quickly setting up Slidev locally.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/docs/guide/index.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nbun create slidev\n```\n\n----------------------------------------\n\nTITLE: Setting Exportable Slides Range in Slidev\nDESCRIPTION: Command to export specific slides or ranges of slides from a slidev presentation using the --range option.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/docs/guide/exporting.md#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ slidev export --range 1,6-8,10\n```\n\n----------------------------------------\n\nTITLE: Setting a random image as a slide background in Slidev\nDESCRIPTION: This YAML snippet demonstrates how to set a random image from the curated collection at `https://cover.sli.dev` as the background for a slide in a Slidev presentation. The `background` property is set to the specified URL, which dynamically serves a random image from the collection.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/docs/resources/covers.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\n# random image from the curated collection\nbackground: https://cover.sli.dev\n---\n```\n\n----------------------------------------\n\nTITLE: Directory Structure Convention in Slidev\nDESCRIPTION: Example of a conventional directory structure for Slidev projects, outlining where to place custom components, layouts, public assets, and configuration files. This structure reduces configuration surface by making extensions flexible and intuitive. It includes directories and files such as components/, layouts/, public/, setup/, snippets/, styles/, index.html, slides.md, and vite.config.ts.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/docs/custom/directory-structure.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyour-slidev/\n  ├── components/       # custom components\n  ├── layouts/          # custom layouts\n  ├── public/           # static assets\n  ├── setup/            # custom setup / hooks\n  ├── snippets/         # code snippets\n  ├── styles/           # custom style\n  ├── index.html        # injections to index.html\n  ├── slides.md         # the main slides entry\n  └── vite.config.ts    # extending vite config\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions Workflow for Deploying to GitHub Pages using YAML\nDESCRIPTION: This YAML snippet outlines a GitHub Actions workflow for automatically deploying Slidev slides to GitHub Pages. It includes steps for checking out the code, setting up Node.js, installing dependencies, building the slides, and deploying them.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/docs/guide/hosting.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nname: Deploy pages\n\non:\n  workflow_dispatch:\n  push:\n    branches: [main]\n\npermissions:\n  contents: read\n  pages: write\n  id-token: write\n\nconcurrency:\n  group: pages\n  cancel-in-progress: false\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v4\n\n      - uses: actions/setup-node@v4\n        with:\n          node-version: 'lts/*'\n\n      - name: Setup @antfu/ni\n        run: npm i -g @antfu/ni\n\n      - name: Install dependencies\n        run: nci\n\n      - name: Build\n        run: nr build --base /${{github.event.repository.name}}/\n\n      - name: Setup Pages\n        uses: actions/configure-pages@v4\n\n      - uses: actions/upload-pages-artifact@v3\n        with:\n          path: dist\n\n  deploy:\n    environment:\n      name: github-pages\n      url: ${{ steps.deployment.outputs.page_url }}\n    needs: build\n    runs-on: ubuntu-latest\n    name: Deploy\n    steps:\n      - name: Deploy to GitHub Pages\n        id: deployment\n        uses: actions/deploy-pages@v4\n```\n\n----------------------------------------\n\nTITLE: Creating Complex Grid Layout with Custom Column Widths\nDESCRIPTION: Demonstrates a more complex grid layout with three columns of different widths: fixed width (200px), auto-sized, and percentage-based (10%).\nSOURCE: https://github.com/slidevjs/slidev/blob/main/docs/guide/faq.md#2025-04-21_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n<div class=\"grid grid-cols-[200px_1fr_10%] gap-4\">\n  <div>\n    The first column (200px)\n  </div>\n  <div>\n    The second column (auto fit)\n  </div>\n  <div>\n    The third column (10% width to parent container)\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Utilizing UnoCSS Variants for Navigation\nDESCRIPTION: This HTML snippet demonstrates the use of UnoCSS variants to trigger transitions only in specific navigation directions. By prefixing UnoCSS classes with \"forward:\" or \"backward:\", different styles can be applied based on the direction of navigation.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/docs/features/direction-variant.md#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div v-click class=\"transition delay-300\">Element</div> // [!code --]\n<div v-click class=\"transition forward:delay-300\">Element</div> // [!code ++]\n```\n\n----------------------------------------\n\nTITLE: Exporting Slidev Presentations to PNG Format\nDESCRIPTION: Command to export slidev presentations as PNG images instead of PDF files.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/docs/guide/exporting.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ slidev export --format png\n```\n\n----------------------------------------\n\nTITLE: Exporting Multiple Slidev Presentations at Once\nDESCRIPTION: Commands to export multiple slidev presentations simultaneously, either by listing specific files or using wildcards.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/docs/guide/exporting.md#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$ slidev export slides1.md slides2.md\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ slidev export *.md\n```\n\n----------------------------------------\n\nTITLE: Exporting Slidev Presentations in Dark Mode\nDESCRIPTION: Command to export slidev presentations using the dark version of the theme.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/docs/guide/exporting.md#2025-04-21_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n$ slidev export --dark\n```\n\n----------------------------------------\n\nTITLE: Importing External Markdown Pages in Slidev\nDESCRIPTION: YAML frontmatter configurations for importing external markdown files as slides in Slidev. Shows various import patterns using the src attribute with both relative and absolute paths, along with optional background configurations.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/test/fixtures/markdown/multi-entries.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nsrc: sub/page1.md\n---\n```\n\nLANGUAGE: yaml\nCODE:\n```\n---\nsrc: /sub/page2.md\nbackground: https://sli.dev/demo-cover.png#2\n---\n```\n\nLANGUAGE: yaml\nCODE:\n```\n---\nsrc: ./sub/pages3-4.md\nbackground: https://sli.dev/demo-cover.png#34\n---\n```\n\nLANGUAGE: yaml\nCODE:\n```\n---\nsrc: sub/nested1-4.md\nbackground: https://sli.dev/demo-cover.png#14\n---\n```\n\n----------------------------------------\n\nTITLE: Creating Two-Column Layout with CSS Grid\nDESCRIPTION: Implements a simple two-column layout using CSS Grid through UnoCSS utility classes. This creates equal width columns with a gap between them.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/docs/guide/faq.md#2025-04-21_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n<div class=\"grid grid-cols-2 gap-4\">\n  <div>\n    The first column\n  </div>\n  <div>\n    The second column\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Adding CSS for Transparent Background in Slidev Exports\nDESCRIPTION: CSS example to make all backgrounds transparent in the application when using the --omit-background option.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/docs/guide/exporting.md#2025-04-21_snippet_16\n\nLANGUAGE: css\nCODE:\n```\n* {\n  background: transparent !important;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Routes in Slidev with TypeScript\nDESCRIPTION: This snippet defines a custom route within a Slidev application using the `defineRoutesSetup` function. It imports the necessary function from `@slidev/types` and adds a new route, `/my-page`, which maps to a Vue component located at `../pages/my-page.vue`. The `// @ts-expect-error missing types` comment suggests there might be missing type definitions for the component.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/docs/custom/config-routes.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineRoutesSetup } from '@slidev/types'\n\nexport default defineRoutesSetup((routes) => {\n  return [\n    ...routes,\n    {\n      path: '/my-page',\n      // ---cut-start---\n      // @ts-expect-error missing types\n      // ---cut-end---\n      component: () => import('../pages/my-page.vue'),\n    },\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Advanced Code Block Features in Markdown\nDESCRIPTION: This example shows how to import code snippets with advanced features like line highlighting and specifying editor height for display using Monaco. The features can be adjusted by specifying options in the import statement.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/docs/features/import-snippet.md#2025-04-21_snippet_3\n\nLANGUAGE: Markdown\nCODE:\n```\n<<< @/snippets/snippet.js {2,3|5}{lines:true}\n```\n\nLANGUAGE: Markdown\nCODE:\n```\n<<< @/snippets/snippet.js ts {monaco}{height:200px}\n```\n\n----------------------------------------\n\nTITLE: Increasing Timeout for Slidev Export Operations\nDESCRIPTION: Command to increase the Playwright timeout for exporting large slidev presentations.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/docs/guide/exporting.md#2025-04-21_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n$ slidev export --timeout 60000\n```\n\n----------------------------------------\n\nTITLE: Resulting CSS for Font Configuration with Fallbacks\nDESCRIPTION: The CSS that Slidev generates from the font configuration, showing how fallback fonts are automatically appended to each font family declaration.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/docs/custom/config-fonts.md#2025-04-21_snippet_4\n\nLANGUAGE: css\nCODE:\n```\n.font-sans {\n  font-family: \"Robot\",ui-sans-serif,system-ui,-apple-system,BlinkMacSystemFont,\"Segoe UI\",Roboto,\"Helvetica Neue\",Arial,\"Noto Sans\",sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\",\"Segoe UI Symbol\",\"Noto Color Emoji\";\n}\n.font-serif {\n  font-family: \"Robot Slab\",ui-serif,Georgia,Cambria,\"Times New Roman\",Times,serif;\n}\n.font-mono {\n  font-family: \"Fira Code\",ui-monospace,SFMono-Regular,Menlo,Monaco,Consolas,\"Liberation Mono\",\"Courier New\",monospace;\n}\n```\n\n----------------------------------------\n\nTITLE: Changing Wait-Until State for Slidev Export\nDESCRIPTION: Command to change the wait-until state for exporting slidev presentations to help resolve timeout issues.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/docs/guide/exporting.md#2025-04-21_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n$ slidev export --wait-until none\n```\n\n----------------------------------------\n\nTITLE: Creating Horizontal Flexbox Layout\nDESCRIPTION: Uses CSS Flexbox to create a horizontal layout with vertically centered items, implemented through UnoCSS utility classes.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/docs/guide/faq.md#2025-04-21_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n<div class=\"flex items-center\">\n  <div>\n    First block\n  </div>\n  <div>\n    Second block\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Using a Flexible Reactive Addition Function\nDESCRIPTION: Demonstrates the usage of a flexible reactive addition function with a mix of ref and plain values, showing its versatility.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/demo/composable-vue/slides.md#2025-04-21_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nconst a = ref(1)\n\nconst c = add(a, 5)\nc.value // 6\n```\n\n----------------------------------------\n\nTITLE: Configuring Slide Content Zoom with Slidev Markdown\nDESCRIPTION: This snippet demonstrates how to use the zoom option in Slidev markdown to scale content on a per-slide basis. By specifying a zoom factor within the slide's front matter, individual slides can be resized without affecting others. Key parameter is 'zoom', which defines the scaling factor.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/docs/features/zoom-slide.md#2025-04-21_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n---\\nzoom: 0.8\\n---\\n\\n# A Slide with lots of content\\n\\n---\\n\\n# Other slides aren\\'t affected\n```\n\n----------------------------------------\n\nTITLE: Initializing Slidev Theme in Bash\nDESCRIPTION: These snippets demonstrate how to scaffold a new Slidev theme using pnpm, npm, yarn, or bun. The appropriate command initializes a theme project which can be further customized. All four snippets do not require additional parameters and expect no inputs or outputs other than setting up the project structure.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/docs/guide/write-theme.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ pnpm create slidev-theme\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ npm init slidev-theme@latest\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn create slidev-theme\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ bun create slidev-theme\n```\n\n----------------------------------------\n\nTITLE: Using SlideCurrentNo Component - Slidev\nDESCRIPTION: SlideCurrentNo component renders the current slide number, providing context to the audience regarding their current position in the presentation.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/docs/builtin/components.md#2025-04-21_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n<SlideCurrentNo />\n```\n\n----------------------------------------\n\nTITLE: Including Remote Image in Markdown with Vite Plugin Remote Assets\nDESCRIPTION: This snippet demonstrates how to include a remote image in Slidev using Markdown syntax. It leverages the vite-plugin-remote-assets for caching images during build for faster loading. The remote image is specified using a full URL.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/docs/features/bundle-remote-assets.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n![Remote Image](https://sli.dev/favicon.png)\n```\n\n----------------------------------------\n\nTITLE: Installing Prettier Plugin for Slidev using yarn\nDESCRIPTION: Command to install Prettier and the Slidev plugin using yarn package manager.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/docs/features/prettier-plugin.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn add -D prettier prettier-plugin-slidev\n```\n\n----------------------------------------\n\nTITLE: External Snippet Import with Highlighting\nDESCRIPTION: Multiple ways of importing and highlighting external code snippets with different configurations\nSOURCE: https://github.com/slidevjs/slidev/blob/main/packages/vscode/syntaxes/slidev.example.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @/snippets/snippet.js {2,3|5}\n<<< @/snippets/snippet.js {2,3|5}{lines:true}\n<<< @/snippets/snippet.js ts {monaco-run}{lines: true}\n```\n\n----------------------------------------\n\nTITLE: Using a Reactive Addition Function with Refs\nDESCRIPTION: Demonstrates the usage of a reactive addition function with ref values, creating a computed result that updates reactively.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/demo/composable-vue/slides.md#2025-04-21_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nconst a = ref(1)\nconst b = ref(2)\n\nconst c = add(a, b)\nc.value // 3\n```\n\n----------------------------------------\n\nTITLE: Using Arrow Component in Markdown - Slidev\nDESCRIPTION: The Arrow component allows the user to draw arrows between specified coordinates in the presentation. The component has required props for start and end points, with optional width and color customization.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/docs/builtin/components.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<Arrow x1=\"10\" y1=\"20\" x2=\"100\" y2=\"200\" />\n```\n\nLANGUAGE: markdown\nCODE:\n```\n<Arrow v-bind=\"{ x1:10, y1:10, x2:200, y2:200 }\" />\n```\n\n----------------------------------------\n\nTITLE: Initializing Slidev Project with npm\nDESCRIPTION: Command to create a new Slidev project using npm. Requires Node.js version 18 or higher to be installed.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm init slidev\n```\n\n----------------------------------------\n\nTITLE: Using TitleRenderer Component - Slidev\nDESCRIPTION: TitleRenderer component displays the main title of a slide and can be configured via the front matter in the slide markdown to specify title and level.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/docs/builtin/components.md#2025-04-21_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\nimport TitleRenderer from '#slidev/title-renderer'\n<TitleRenderer no=\"42\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Individual Slides with YAML Frontmatter in Slidev\nDESCRIPTION: This YAML configuration defines per-slide options in Slidev. It includes settings for controlling animations, visibility, layout, transitions, and other slide-specific behaviors that can be set in each slide's frontmatter block.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/docs/custom/index.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n---\n# custom clicks count\n# Learn more: https://sli.dev/guide/animations.html#custom-total-clicks-count\nclicks: 0\n# custom start clicks count\nclicksStart: 0\n# completely disable and hide the slide\ndisabled: false\n# the same as `disabled`\nhide: false\n# hide the slide for the <Toc> components\nhideInToc: false\n# defines the layout component applied to the slide\nlayout: <\"cover\" if the slide is the first slide, otherwise \"default\">\n# override the title level for the <TitleRenderer> and <Toc> components\n# only if `title` has also been declared\nlevel: 1\n# mount this slide before entering\npreload: true\n# create a route alias that can be used in the URL or with the <Link> component\nrouteAlias: undefined # or string\n# includes a markdown file\n# Learn more: https://sli.dev/guide/syntax.html#importing-slides\nsrc: undefined # or string\n# override the title for the <TitleRenderer> and <Toc> components\n# only if `title` has also been declared\ntitle: undefined # or string\n# defines the transition between the slide and the next one\n# Learn more: https://sli.dev/guide/animations.html#slide-transitions\ntransition: undefined # or BuiltinSlideTransition | string | TransitionGroupProps | null\n# custom zoom scale\n# useful for slides with a lot of content\nzoom: 1\n# used as positions of draggable elements\n# Learn more: https://sli.dev/features/draggable.html\ndragPos: {} # type: Record<string, string>\n---\n```\n\n----------------------------------------\n\nTITLE: Using Vue Composition API in Vue 2 - TypeScript\nDESCRIPTION: The following code demonstrates integrating the Composition API into a Vue 2 application, enabling usage of composables and reactive properties. This snippet shows how to install the Composition API plugin and import necessary utilities.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/demo/composable-vue/slides.md#2025-04-21_snippet_31\n\nLANGUAGE: typescript\nCODE:\n```\nimport VueCompositionAPI from '@vue/composition-api'\nimport Vue from 'vue'\n\nVue.use(VueCompositionAPI)\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { reactive, ref } from '@vue/composition-api'\n```\n\n----------------------------------------\n\nTITLE: Mathematical Notation in Slidev\nDESCRIPTION: Example of using LaTeX mathematical notation within a Slidev slide. Shows a simple mathematical expression with a variable and addition.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/test/fixtures/markdown/multi-entries.md#2025-04-23_snippet_1\n\nLANGUAGE: latex\nCODE:\n```\n$x+2$\n```\n\n----------------------------------------\n\nTITLE: Using the unref Function in Vue\nDESCRIPTION: Demonstrates the usage of the unref function to handle both ref values and regular values uniformly, providing flexibility in function implementations.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/demo/composable-vue/slides.md#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ref, unref } from 'vue'\n\nconst foo = ref('foo')\nunref(foo) // 'foo'\n\nconst bar = 'bar'\nunref(bar) // 'bar'\n```\n\n----------------------------------------\n\nTITLE: Organizing Custom Components Directory Structure in Slidev\nDESCRIPTION: Shows the file structure for creating custom Vue components in a Slidev project. Custom components should be placed in the components directory at the root of the project.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/docs/guide/component.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyour-slidev/\n  ├── ...\n  ├── slides.md\n  └── components/\n      ├── ...\n      └── MyComponent.vue\n```\n\n----------------------------------------\n\nTITLE: Enabling Remote Access in Slidev with Package Managers\nDESCRIPTION: Commands to run Slidev with remote access enabled using different package managers. The --remote flag is used to activate remote access.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/docs/features/remote-access.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm dev --remote\n# i.e. slidev --remote\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev -- --remote\n# i.e. slidev --remote\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn dev --remote\n# i.e. slidev --remote\n```\n\nLANGUAGE: bash\nCODE:\n```\nbun dev --remote\n# i.e. slidev --remote\n```\n\n----------------------------------------\n\nTITLE: Using Tweet Component - Slidev\nDESCRIPTION: Tweet component allows embedding of tweets using their unique ID, and supports additional properties for scaling and conversation view.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/docs/builtin/components.md#2025-04-21_snippet_10\n\nLANGUAGE: markdown\nCODE:\n```\n<Tweet id=\"20\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing Motion Animations with v-motion in Slidev\nDESCRIPTION: This snippet demonstrates how to use the v-motion directive to create animations in Slidev presentations. It shows how to define initial states, enter animations, click interactions, and leave animations for elements.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/demo/starter/slides.md#2025-04-21_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<div\n  v-motion\n  :initial=\"{ x: -80 }\"\n  :enter=\"{ x: 0 }\"\n  :click-3=\"{ x: 80 }\"\n  :leave=\"{ x: 1000 }\"\n>\n  Slidev\n</div>\n```\n\n----------------------------------------\n\nTITLE: Initializing Slidev Theme with npm\nDESCRIPTION: This code snippet demonstrates how to initialize a new Slidev theme using npm. It sets up the project's structure and dependencies required for a Slidev theme. The user needs to have npm installed on their system to execute this command.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/packages/create-theme/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm init slidev-theme\n```\n\n----------------------------------------\n\nTITLE: Comparing Reactive and Plain Objects in Vue\nDESCRIPTION: Shows the difference between using a plain object and a reactive object in Vue. Reactive objects provide reactivity while maintaining a similar syntax to plain objects.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/demo/composable-vue/slides.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { reactive } from 'vue'\n\nconst foo = { prop: 0 }\nconst bar = reactive({ prop: 0 })\n\nfoo.prop = 1\nbar.prop = 1\n```\n\n----------------------------------------\n\nTITLE: Using $page for Current Page Information\nDESCRIPTION: Shows how to access and utilize the current page number with $page, including comparing it with the navigation's current page.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/docs/guide/global-context.md#2025-04-21_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\nPage: {{ $page }}\n\nIs current page active: {{ $page === $nav.currentPage }}\n```\n\n----------------------------------------\n\nTITLE: Configuring Prettier for Slidev\nDESCRIPTION: JSON configuration to activate the Slidev plugin in Prettier. This setup applies the plugin to specific Markdown files used for slides.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/docs/features/prettier-plugin.md#2025-04-21_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"overrides\": [\n    {\n      \"files\": [\"slides.md\", \"pages/*.md\"],\n      \"options\": {\n        \"parser\": \"slidev\",\n        \"plugins\": [\"prettier-plugin-slidev\"]\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Explicit Slot Order with Shorthand Syntax in Vue\nDESCRIPTION: This snippet shows how to explicitly specify the order of slots using the shorthand syntax in a Vue component layout. It demonstrates assigning content to the right slot before the default slot in the `two-cols` layout. Knowledge of Vue.js, its slot mechanism, and Markdown is assumed.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/docs/features/slot-sugar.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n---\\nlayout: two-cols\\n---\\n\\n::right::\\n\\n# Right\\n\\nThis shows on the right\\n\\n::default::\\n\\n# Left\\n\\nThis is shown on the left\n```\n\n----------------------------------------\n\nTITLE: Preview Slidev Theme with Markdown\nDESCRIPTION: This markdown snippet demonstrates how to set up a demo slide deck to preview a theme by specifying it in the front matter of a 'slides.md' file. The headmatter sets the theme to the current directory, and the usual procedure for starting slide demos applies.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/docs/guide/write-theme.md#2025-04-21_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntheme: ./  # Use the theme in the current directory\n---\n```\n\n----------------------------------------\n\nTITLE: Netlify Deployment Configuration using TOML\nDESCRIPTION: This TOML configuration file is for deploying a Slidev project on Netlify, specifying the build command and the publish directory.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/docs/guide/hosting.md#2025-04-21_snippet_5\n\nLANGUAGE: toml\nCODE:\n```\n[build]\npublish = 'dist'\ncommand = 'npm run build'\n\n[build.environment]\nNODE_VERSION = '20'\n\n[[redirects]]\nfrom = '/*'\nto = '/index.html'\nstatus = 200\n```\n\n----------------------------------------\n\nTITLE: Changing Output Directory for Slidev Build using Bash\nDESCRIPTION: This code snippet illustrates how to change the default output directory of the Slidev build process using the '--out' option.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/docs/guide/hosting.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ slidev build --out my-build-folder\n```\n\n----------------------------------------\n\nTITLE: Installing the {{package-name}} Theme in Slidev - Frontmatter\nDESCRIPTION: This snippet details how to install the {{package-name}} theme by adding necessary frontmatter to the slides.md file. The frontmatter must include the theme name, which prompts Slidev to automatically install the theme upon starting the application.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/packages/create-theme/template/README.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n<pre><code>---\ntheme: <b>{{name}}</b>\n---</code></pre>\n```\n\n----------------------------------------\n\nTITLE: Embedding Vue Components in HTML\nDESCRIPTION: This HTML snippet demonstrates how to embed Vue components directly within the Slidev presentation, such as a counter component with a specified prop.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/packages/slidev/template.md#2025-04-21_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<Counter :count=\"10\" />\n```\n\n----------------------------------------\n\nTITLE: Running Slidev with npm and passing options\nDESCRIPTION: Example of how to run Slidev using npm and pass options to the Slidev command. This is necessary because npm requires the use of '--' to separate its own options from those intended for the script being run.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/docs/builtin/cli.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run slidev -- --remote --port 8080 --open\n```\n\n----------------------------------------\n\nTITLE: Vue Composition API Component with Script Setup\nDESCRIPTION: Vue component using script setup and ref for reactive state management\nSOURCE: https://github.com/slidevjs/slidev/blob/main/packages/vscode/syntaxes/slidev.example.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ref } from 'vue'\nlet a = ref(1)\n```\n\n----------------------------------------\n\nTITLE: Configuring iframe-right Layout in Slidev\nDESCRIPTION: This snippet demonstrates how to use the iframe-right layout to display a web page on the right side with content on the left side using YAML frontmatter configuration.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/docs/builtin/layouts.md#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n---\nlayout: iframe-right\n\n# the web page source\nurl: https://github.com/slidevjs/slidev\n\n# a custom class name to the content\nclass: my-cool-content-on-the-left\n---\n```\n\n----------------------------------------\n\nTITLE: Single File Slidev Installation\nDESCRIPTION: The code installs Slidev CLI globally via different package managers (pnpm, npm, yarn, and bun) for single Markdown slide files usage. Each command reflects the specific syntax per package manager for global installations.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/docs/guide/index.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npnpm i -g @slidev/cli\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm i -g @slidev/cli\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn global add @slidev/cli\n```\n\nLANGUAGE: bash\nCODE:\n```\nbun i -g @slidev/cli\n```\n\n----------------------------------------\n\nTITLE: Setting Up Slidev Addon Gallery Vue Component in Markdown\nDESCRIPTION: This code sets up a Vue component within a Markdown file to display the Slidev addon gallery. It imports the AddonGallery component and disables the aside layout feature. The component will render different collections of addons based on the 'collection' prop.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/docs/resources/addon-gallery.md#2025-04-23_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport AddonGallery from '../.vitepress/theme/components/AddonGallery.vue'\n</script>\n```\n\n----------------------------------------\n\nTITLE: Click Animation Example with v-clicks Component\nDESCRIPTION: Shows how to use v-clicks component to animate multiple list items sequentially.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/docs/guide/animations.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n<v-clicks>\n\n- Item 1\n- Item 2\n- Item 3\n\n</v-clicks>\n```\n\n----------------------------------------\n\nTITLE: Displaying Current Page Number in Slidev\nDESCRIPTION: HTML snippet that displays the current page number using Slidev's navigation state object. This demonstrates how to access presentation metadata within slides.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/cypress/fixtures/basic/slides.md#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div>{{$slidev.nav.currentPage}}</div>\n```\n\n----------------------------------------\n\nTITLE: Vercel Deployment Configuration using JSON\nDESCRIPTION: This JSON configuration is used for deploying a Slidev application on Vercel, specifying rewrite rules for the application.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/docs/guide/hosting.md#2025-04-21_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"rewrites\": [\n    { \"source\": \"/(.*)\", \"destination\": \"/index.html\" }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Ejecting Slidev Theme via CLI\nDESCRIPTION: Command to extract the current theme into a local directory for customization and modification\nSOURCE: https://github.com/slidevjs/slidev/blob/main/docs/features/eject-theme.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ slidev theme eject\n```\n\n----------------------------------------\n\nTITLE: Using YAML for Content Configuration 1\nDESCRIPTION: The snippet illustrates the use of YAML blocks within a document when a frontmatter already exists. It details specific layout configurations.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/test/fixtures/markdown/frontmatter.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n\"# When there is already a frontmatter, the first yaml block should be treated as content\\nlayout: should not from yaml 1\"\n```\n\n----------------------------------------\n\nTITLE: Installing pnpm Package Manager for Slidev Development\nDESCRIPTION: Command to globally install pnpm, the package manager used by the Slidev project for dependency management.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/CONTRIBUTING.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i -g pnpm\n```\n\n----------------------------------------\n\nTITLE: Theme Metadata Configuration in JSON\nDESCRIPTION: In this JSON snippet, the color schema (light, dark, or both) for a Slidev theme is explicitly set within package.json. By default, Slidev supports both modes, but this setting allows for specificity in theme presentation.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/docs/guide/write-theme.md#2025-04-21_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"slidev\": {\n    \"colorSchema\": \"light\" // or \"dark\" or \"both\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Font Configuration in Slidev\nDESCRIPTION: Basic YAML configuration for setting sans, serif, and mono fonts in a Slidev presentation. This automatically imports the specified fonts from Google Fonts by default.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/docs/custom/config-fonts.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nfonts:\n  # basically the text\n  sans: Robot\n  # use with `font-serif` css class from UnoCSS\n  serif: Robot Slab\n  # for code blocks, inline code, etc.\n  mono: Fira Code\n---\n```\n\n----------------------------------------\n\nTITLE: Twitter Component Integration\nDESCRIPTION: Example of embedding Twitter tweets in slides using the built-in Tweet component.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/demo/starter/slides.md#2025-04-21_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<Tweet id=\"1390115482657726468\" />\n```\n\n----------------------------------------\n\nTITLE: Defining User Interface and Update Function in TypeScript\nDESCRIPTION: Demonstrates a TypeScript interface for User and a function to update user data with partial updates\nSOURCE: https://github.com/slidevjs/slidev/blob/main/packages/create-theme/template/example.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface User {\n  id: number\n  firstName: string\n  lastName: string\n  role: string\n}\n\nfunction updateUser(id: number, update: Partial<User>) {\n  const user = getUser(id)\n  const newUser = { ...user, ...update }\n  saveUser(id, newUser)\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Frontmatter for Slide Scaling in TypeScript\nDESCRIPTION: This pre-parser extension adds support for a custom '_scale' frontmatter property in Slidev. It wraps the slide content in a Transform component with the specified scale, allowing for easy slide scaling without creating new layouts.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/docs/custom/config-parser.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { definePreparserSetup } from '@slidev/types'\n\nexport default definePreparserSetup(() => {\n  return [\n    {\n      async transformSlide(content, frontmatter) {\n        if ('_scale' in frontmatter) {\n          return [\n            `<Transform :scale=${frontmatter._scale}>`,\n            '',\n            content,\n            '',\n            '</Transform>'\n          ].join('\\n')\n        }\n      },\n    },\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Font Providers\nDESCRIPTION: YAML configuration to specify the font provider. Options include 'google', 'coollabs', or 'none' to disable auto-importing and treat all fonts as local.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/docs/custom/config-fonts.md#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n---\nfonts:\n  provider: none\n---\n```\n\n----------------------------------------\n\nTITLE: Organizing Layout Files for Custom Layouts\nDESCRIPTION: This bash snippet demonstrates the directory structure for creating a new Vue layout in Slidev. It shows the placement of the layout file within the 'layouts' directory to integrate it into the presentation.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/docs/guide/write-layout.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyour-slidev/\n  ├── ...\n  ├── slides.md\n  └── layouts/\n      ├── ...\n      └── MyLayout.vue\n```\n\n----------------------------------------\n\nTITLE: Theme Configuration in YAML\nDESCRIPTION: Shows how to configure different themes in Slidev using YAML frontmatter.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/demo/starter/slides.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntheme: default\n---\n```\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntheme: seriph\n---\n```\n\n----------------------------------------\n\nTITLE: Disabling Drawing Synchronization Across Instances\nDESCRIPTION: This configuration disables the default behavior of syncing drawings across all instances. With this setting, only drawings from the presenter instance will be synced to other viewers.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/docs/features/drawing.md#2025-04-21_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n---\ndrawings:\n  syncAll: false\n---\n```\n\n----------------------------------------\n\nTITLE: External Markdown File for Slidev Import\nDESCRIPTION: An example of an external markdown file that can be imported into a Slidev presentation. The file contains two slides with 'Table of Contents' titles and different content that can be reused in the main presentation.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/docs/features/importing-slides.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n# Table of Contents\n\nPart 1\n\n---\n\n# Table of Contents\n\nPart 2\n```\n\n----------------------------------------\n\nTITLE: Installing Prettier Plugin for Slidev using bun\nDESCRIPTION: Command to install Prettier and the Slidev plugin using bun package manager.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/docs/features/prettier-plugin.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nbun add -D prettier prettier-plugin-slidev\n```\n\n----------------------------------------\n\nTITLE: Disabling Font Fallbacks\nDESCRIPTION: YAML configuration to disable automatic fallback fonts. This allows for complete control over the font stack by setting the 'fallbacks' property to false.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/docs/custom/config-fonts.md#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n---\nfonts:\n  mono: 'Fira Code, monospace'\n  fallbacks: false\n---\n```\n\n----------------------------------------\n\nTITLE: Implementing the unref Function in Vue\nDESCRIPTION: Shows the implementation of the unref function, which returns the value of a ref or the original value if it's not a ref.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/demo/composable-vue/slides.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nfunction unref<T>(r: Ref<T> | T): T {\n  return isRef(r) ? r.value : r\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Slidev Theme via NPM\nDESCRIPTION: This code snippet demonstrates how to install a Slidev theme using npm. The `npm install` command is used to install the specified theme package from the npm registry. In this example, it installs the `@slidev/theme-seriph` theme.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/docs/guide/theme-addon.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install @slidev/theme-seriph\n```\n\n----------------------------------------\n\nTITLE: Creating a Title Setter with Vue Composition API - TypeScript\nDESCRIPTION: The `useTitle` composable sets the document title to a reactive value. It accepts a `MaybeRef` type that allows for flexible input (string, null, or undefined), initializing the document title when the composable is first called. Changes to the title are automatically synchronized with the document title using Vue's `watch` functionality.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/demo/composable-vue/slides.md#2025-04-21_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { MaybeRef } from '@vueuse/core'\nimport { ref, watch } from 'vue'\n\nexport function useTitle(\n  newTitle: MaybeRef<string | null | undefined>,\n) {\n  const title = ref(newTitle || document.title)\n\n  watch(title, (t) => {\n    if (t != null)\n      document.title = t\n  }, { immediate: true })\n\n  return title\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Forward and Backward Transitions in Slidev\nDESCRIPTION: This Markdown snippet configures different transitions for forward and backward slide navigation in Slidev. It utilizes the '|' separator to assign specific transitions when navigating through slides.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/docs/guide/animations.md#2025-04-21_snippet_7\n\nLANGUAGE: Markdown\nCODE:\n```\n---\\ntransition: go-forward | go-backward\\n---\\n\n```\n\n----------------------------------------\n\nTITLE: Vue Template with Monaco Run\nDESCRIPTION: Simple Vue template with Monaco run configuration\nSOURCE: https://github.com/slidevjs/slidev/blob/main/packages/vscode/syntaxes/slidev.example.md#2025-04-21_snippet_4\n\nLANGUAGE: vue\nCODE:\n```\n<template>\n  <div />\n</template>\n```\n\n----------------------------------------\n\nTITLE: Using Absolute Paths for Assets in Frontmatter and Components\nDESCRIPTION: Solves the 404 error issue by using absolute paths for assets placed in the public folder. This ensures proper path resolution during build.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/docs/guide/faq.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n---\nbackground: /image.png\n---\n\n<Comp src=\"/image.png\" />\n```\n\n----------------------------------------\n\nTITLE: Adding Wait Time Before Slidev Export\nDESCRIPTION: Command to add an extra delay before exporting slidev presentations to ensure proper rendering.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/docs/guide/exporting.md#2025-04-21_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n$ slidev export --wait 10000\n```\n\n----------------------------------------\n\nTITLE: Extending `useVModel` for Independent Updates - TypeScript\nDESCRIPTION: The `usePassiveVModel` function allows for more independent updates by storing a ref for the value. It synchronizes with the prop changes and lets the local ref be updated directly, maintaining reactivity in two-way bindings.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/demo/composable-vue/slides.md#2025-04-21_snippet_30\n\nLANGUAGE: typescript\nCODE:\n```\nexport function usePassiveVModel(props, name) {\n  const emit = getCurrentInstance().emit\n  const data = ref(props[name]) // store the value in a ref\n\n  watch(() => props.value, v => data.value = v) // sync the ref whenever the prop changes\n\n  return computed({\n    get() {\n      return data.value\n    },\n    set(v) {\n      data.value = v // when setting value, update the ref directly\n      emit(`update:${name}`, v) // then emit out the changes\n    },\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Feature List with Search and Tag Filters\nDESCRIPTION: This HTML snippet integrates search and tag filtering with the rendering of a feature list using Vue features, such as v-if and v-for. It uses VitePress components to provide a dynamic interface that allows users to search and filter through features.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/docs/features/index.md#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<ClientOnly>\n<div flex items-center mt-6 gap-6>\n  <div\n    flex items-center rounded-md\n    px3 py2 gap-2 border-2 border-solid border-transparent\n    class=\"bg-$vp-c-bg-alt focus-within:border-color-$vp-c-brand\"\n  >\n    <div class=\"i-carbon:search\" text-sm op-80 />\n    <input\n      v-model=\"search\"\n      type=\"search\" text-base\n      placeholder=\"Search features...\"\n    />\n  </div>\n  <div\n    v-if=\"tagsArr.length\"\n    flex items-center gap-1\n  >\n    <div class=\"i-carbon:tag\" text-sm mr-1 op-80 />\n    <FeatureTag v-for=\"tag in tagsArr\" :key=\"tag\" :tag removable @remove=\"removeTag(tag)\"/>\n  </div>\n</div>\n\n<FeaturesOverview :features=\"filteredFeatures\" />\n\n<div v-if=\"filteredFeatures.length === 0\" class=\"w-full mt-6 op-80 flex flex-col items-center\">\n  No results found\n  <button class=\"block select-button flex-inline gap-1 items-center px-2 py-1 hover:bg-gray-400/10 rounded\" @click=\"resetFilters()\">\n    <div class=\"i-carbon:filter-remove\" />\n    Clear Filters\n  </button>\n</div>\n</ClientOnly>\n```\n\n----------------------------------------\n\nTITLE: Basic TypeScript Console Log\nDESCRIPTION: Simple console logging demonstration with TypeScript highlighting\nSOURCE: https://github.com/slidevjs/slidev/blob/main/packages/vscode/syntaxes/slidev.example.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconsole.log('Hello World')\n```\n\n----------------------------------------\n\nTITLE: Using a Basic Addition Function\nDESCRIPTION: Demonstrates the usage of a simple addition function with regular values.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/demo/composable-vue/slides.md#2025-04-21_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nconst a = 1\nconst b = 2\n\nconst c = add(a, b) // 3\n```\n\n----------------------------------------\n\nTITLE: Imported Cover Slide Markdown\nDESCRIPTION: Example of an imported markdown file containing a cover slide with its own frontmatter properties.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/docs/features/frontmatter-merging.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n---\nlayout: cover\nbackground: https://sli.dev/foo.png\n---\n\n# Cover\n\nCover Page\n```\n\n----------------------------------------\n\nTITLE: Setting Up Local Slidev Documentation Server\nDESCRIPTION: Commands for installing dependencies and starting the local development server for the Slidev documentation. It uses pnpm as the package manager.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/docs/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i -g pnpm\n\npnpm i\npnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Implementing Draggable Arrow Component\nDESCRIPTION: Demonstrates the usage of the v-drag-arrow component for creating draggable arrow elements in slides. This component provides a simplified way to add interactive arrows.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/docs/features/draggable.md#2025-04-21_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n<v-drag-arrow />\n```\n\n----------------------------------------\n\nTITLE: Creating Mind Maps with Mermaid in Slidev\nDESCRIPTION: This Mermaid code creates a mindmap showing the concept of mindmaps, including their origins, research, and tools. It demonstrates how to structure hierarchical information and include icons using Mermaid's mindmap syntax.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/demo/starter/slides.md#2025-04-21_snippet_10\n\nLANGUAGE: mermaid\nCODE:\n```\nmindmap\n  root((mindmap))\n    Origins\n      Long history\n      ::icon(fa fa-book)\n      Popularisation\n        British popular psychology author Tony Buzan\n    Research\n      On effectiveness<br/>and features\n      On Automatic creation\n        Uses\n            Creative techniques\n            Strategic planning\n            Argument mapping\n    Tools\n      Pen and paper\n      Mermaid\n```\n\n----------------------------------------\n\nTITLE: Incorrect Way to Add Vue Plugin in Slidev\nDESCRIPTION: This example shows the incorrect approach to configure the Vue plugin in Slidev. Instead of re-adding plugins that are already used internally by Slidev, users should use the slidev.vue configuration field.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/docs/custom/config-vite.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport Vue from '@vitejs/plugin-vue'\nimport { defineConfig } from 'vite'\n\nexport default defineConfig({\n  plugins: [\n    Vue({\n      /* vue options */\n    })\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Styling Paragraphs with Red Text in HTML\nDESCRIPTION: HTML style snippet for making paragraph text red. This is used on Page 2 of the presentation to demonstrate styling capabilities.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/cypress/fixtures/basic/slides.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<style>\np {\n  color: red;\n}\n</style>\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Addition Function\nDESCRIPTION: Shows a simple addition function as a baseline for comparison with reactive function patterns in Vue.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/demo/composable-vue/slides.md#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nfunction add(a: number, b: number) {\n  return a + b\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Vite Plugins Based on Slide Data\nDESCRIPTION: This snippet shows how to add custom Vite plugins that can access slide data. It creates a setup/vite-plugins.ts file that uses defineVitePluginsSetup to register plugins that have access to the slide content.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/docs/custom/config-vite.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineVitePluginsSetup } from '@slidev/types'\n\nexport default defineVitePluginsSetup((options) => {\n  return [\n    // Your plugins here\n    // Slide data is available as options.data.slides\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Basic Toc Component Implementation in HTML\nDESCRIPTION: Shows how to implement a table of contents component in Slidev presentations with depth configuration options.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/demo/starter/slides.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<Toc minDepth=\"1\" maxDepth=\"1\" />\n```\n\n----------------------------------------\n\nTITLE: Rendering Mathematical Equation in LaTeX\nDESCRIPTION: This snippet demonstrates how to render a simple mathematical equation using LaTeX syntax within a Slidev presentation. The equation is x+2.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/cypress/fixtures/basic/sub/page1.md#2025-04-21_snippet_0\n\nLANGUAGE: latex\nCODE:\n```\n$x+2$\n```\n\n----------------------------------------\n\nTITLE: Injections in index.html for Slidev\nDESCRIPTION: Detailed example of modifying the main index.html file in Slidev for injecting meta tags and scripts. The snippet adds links to Google Fonts and custom scripts, demonstrating how these modifications reflect in the final rendered HTML. This approach helps in enhancing page customization by dynamically adding required elements in the HTML structure.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/docs/custom/directory-structure.md#2025-04-21_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<!-- ./index.html -->\n<head>\n  <link rel=\"preconnect\" href=\"https://fonts.gstatic.com\">\n  <link href=\"https://fonts.googleapis.com/css2?family=Fira+Code:wght@400;600&family=Nunito+Sans:wght@200;400;600&display=swap\" rel=\"stylesheet\">\n</head>\n\n<body>\n  <script src=\"./your-scripts\"></script>\n</body>\n```\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <link rel=\"icon\" type=\"image/png\" href=\"https://cdn.jsdelivr.net/gh/slidevjs/slidev/assets/favicon.png\">\n  <!-- injected head -->\n  <link rel=\"preconnect\" href=\"https://fonts.gstatic.com\">\n  <link href=\"https://fonts.googleapis.com/css2?family=Fira+Code:wght@400;600&family=Nunito+Sans:wght@200;400;600&display=swap\" rel=\"stylesheet\">\n</head>\n<body>\n  <div id=\"app\"></div>\n  <script type=\"module\" src=\"__ENTRY__\"></script>\n  <!-- injected body -->\n  <script src=\"./your-scripts\"></script>\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Custom Frontmatter for Note Transformation in TypeScript\nDESCRIPTION: This pre-parser extension adds support for a custom '_note' frontmatter property in Slidev. It replaces the default slide notes with content from a specified file, allowing for external note management.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/docs/custom/config-parser.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport fs, { promises as fsp } from 'node:fs'\nimport { definePreparserSetup } from '@slidev/types'\n\nexport default definePreparserSetup(() => {\n  return [\n    {\n      async transformNote(note, frontmatter) {\n        if ('_note' in frontmatter && fs.existsSync(frontmatter._note)) {\n          try {\n            const newNote = await fsp.readFile(frontmatter._note, 'utf8')\n            return newNote\n          }\n          catch (err) {\n          }\n        }\n\n        return note\n      },\n    },\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Specifying Additional Dependencies in YAML Frontmatter\nDESCRIPTION: This YAML example shows how to manually specify additional dependencies for code runners in a Slidev presentation's frontmatter. Dependencies can be specified as relative paths or package names.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/docs/custom/config-code-runners.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nmonacoRunAdditionalDeps:\n  - ./path/to/dependency\n  - lodash-es\n```\n\n----------------------------------------\n\nTITLE: Configuring Slidev Cover Layout with Frontmatter\nDESCRIPTION: YAML frontmatter that configures a slide with 'cover' layout, which typically creates a full-page cover slide in Slidev presentations.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/cypress/fixtures/basic/sub/page2.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nlayout: cover\n---\n```\n\n----------------------------------------\n\nTITLE: Slidev Landing Page Layout Configuration\nDESCRIPTION: This snippet configures the layout of the landing page. It sets the layout to 'home', which likely corresponds to a predefined layout in the Slidev theme. It also disables markdown styles, allowing for custom styling of the landing page content.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/docs/index.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nlayout: home\nmarkdownStyles: false\n---\n```\n\n----------------------------------------\n\nTITLE: Accessing Slide Configuration Values\nDESCRIPTION: Shows how to access configuration values defined in the frontmatter across different slides using the $slidev.configs object.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/docs/guide/global-context.md#2025-04-21_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: My First Slidev!\n---\n\n# Page 1\n\n---\n\n# Any Page\n\n{{ $slidev.configs.title }} // 'My First Slidev!'\n```\n\n----------------------------------------\n\nTITLE: Restricting Drawing Feature to Presenter Mode\nDESCRIPTION: This snippet shows how to configure Slidev to make the drawing feature available only in Presenter Mode, preventing audience members from drawing on slides.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/docs/features/drawing.md#2025-04-21_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n---\ndrawings:\n  presenterOnly: true\n---\n```\n\n----------------------------------------\n\nTITLE: Building Slidev in Watch Mode\nDESCRIPTION: Command to build the Slidev project with watch mode enabled for development.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/CONTRIBUTING.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Slidev Layout Definition\nDESCRIPTION: This YAML frontmatter defines the layout for the slide. The 'layout' property is set to 'cover', which likely uses a predefined layout template provided by Slidev.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/test/fixtures/markdown/sub/page2.md#2025-04-21_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\n---\nlayout: cover\n---\n```\n\n----------------------------------------\n\nTITLE: Rendering Official Addons Gallery with Client-Side Only Component\nDESCRIPTION: This code renders the official addons collection using the AddonGallery component. It's wrapped in a ClientOnly component to ensure it only renders on the client side, which is necessary for dynamic content that requires browser APIs.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/docs/resources/addon-gallery.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<ClientOnly>\n  <AddonGallery collection=\"official\"/>\n</ClientOnly>\n```\n\n----------------------------------------\n\nTITLE: Enabling Drawing Feature Only in Development Mode\nDESCRIPTION: This configuration enables the drawing feature only in development mode, making it unavailable in production or when presenting to an audience.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/docs/features/drawing.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n---\ndrawings:\n  enabled: dev\n---\n```\n\n----------------------------------------\n\nTITLE: Running Slidev Demo in Development Mode\nDESCRIPTION: Command to run the Slidev demo locally for testing during development.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/CONTRIBUTING.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npnpm demo:dev\n```\n\n----------------------------------------\n\nTITLE: Initializing Slidev Project Using npm\nDESCRIPTION: This command initializes a new Slidev project using npm. Running this command will set up the basic structure for a Slidev presentation.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/demo/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm init slidev\n```\n\n----------------------------------------\n\nTITLE: TypeScript Code Block with Line Highlighting\nDESCRIPTION: TypeScript code block demonstrating line highlighting and Monaco integration\nSOURCE: https://github.com/slidevjs/slidev/blob/main/packages/vscode/syntaxes/slidev.example.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst a = 1\n```\n\n----------------------------------------\n\nTITLE: Disabling Drawing Feature in Slidev\nDESCRIPTION: This snippet demonstrates how to completely disable the drawing feature in Slidev presentations by setting the 'enabled' property to false.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/docs/features/drawing.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n---\ndrawings:\n  enabled: false\n---\n```\n\n----------------------------------------\n\nTITLE: Building All Slidev Packages\nDESCRIPTION: Command to build all packages in the Slidev monorepo at once from the project root.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/CONTRIBUTING.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm build\n```\n\n----------------------------------------\n\nTITLE: Creating Slidev Theme with Yarn\nDESCRIPTION: This code snippet shows how to create a Slidev theme using Yarn. It performs the same function as the npm command but requires the Yarn package manager instead. Ensure Yarn is installed before executing this command.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/packages/create-theme/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn create slidev-theme\n```\n\n----------------------------------------\n\nTITLE: Importing Vue Demi Components\nDESCRIPTION: Demonstrates how to import core Vue functionality from vue-demi library, which provides a unified API that works consistently across Vue 2 and Vue 3.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/demo/composable-vue/slides.md#2025-04-21_snippet_32\n\nLANGUAGE: typescript\nCODE:\n```\n// same syntax for both Vue 2 and 3\nimport { defineComponent, reactive, ref } from 'vue-demi'\n```\n\n----------------------------------------\n\nTITLE: Building Slidev with a Base Path using Bash\nDESCRIPTION: This snippet shows how to specify a base path when building Slidev slides to deploy under sub-routes. The base path must start and end with a slash.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/docs/guide/hosting.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ slidev build --base /talks/my-cool-talk/\n```\n\n----------------------------------------\n\nTITLE: Installing Slidev Project Dependencies\nDESCRIPTION: Command to install all dependencies for the Slidev project after cloning the repository.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/CONTRIBUTING.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm install\n```\n\n----------------------------------------\n\nTITLE: Slidev Markdown Content with Component\nDESCRIPTION: This Markdown content defines the content of the slide.  It includes a level 1 heading and a custom component called `<Tweet />`. This component is assumed to render a Tweet embed or similar content.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/test/fixtures/markdown/sub/page2.md#2025-04-21_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n# Page 2\n\n<Tweet />\n```\n\n----------------------------------------\n\nTITLE: Markdown Configuration for Recording Documentation\nDESCRIPTION: Front matter configuration for the recording documentation page, specifying dependencies, related projects, tags, and description.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/docs/features/recording.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ndepends:\n  - guide/ui#navigation-bar\nrelates:\n  - RecordRTC: https://github.com/muaz-khan/RecordRTC\n  - WebRTC API: https://webrtc.org/\ntags: [presenter, tool]\ndescription: |\n  Record your presentation with the built-in camera view and recording feature.\n---\n```\n\n----------------------------------------\n\nTITLE: Building Multiple Markdown Files using Bash\nDESCRIPTION: This snippet illustrates how to build multiple Slidev presentation files in one command, either by specifying multiple files or using a glob pattern.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/docs/guide/hosting.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ slidev build slides1.md slides2.md\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ slidev build *.md\n```\n\n----------------------------------------\n\nTITLE: Vue Landing Page Component Inclusion\nDESCRIPTION: This snippet includes a Vue component named '<LandingPage />' on the landing page. This component is responsible for rendering the actual content of the landing page. It requires the existence of a Vue component named LandingPage.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/docs/index.md#2025-04-21_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<LandingPage />\n```\n\n----------------------------------------\n\nTITLE: Embedding Tweet Component in Slidev\nDESCRIPTION: Vue component syntax for embedding a Tweet in a Slidev slide, using the Tweet component with a prop to specify the tweet ID.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/cypress/fixtures/basic/sub/page2.md#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<Tweet :id=\"20\"/>\n```\n\n----------------------------------------\n\nTITLE: Using Watch with Ref in Vue\nDESCRIPTION: Demonstrates how to use the watch function with a ref in Vue. The watch function automatically unwraps the ref value in the callback function.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/demo/composable-vue/slides.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst counter = ref(0)\n\nwatch(counter, (count) => {\n  console.log(count) // same as `counter.value`\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing Slidev Project Locally with npm\nDESCRIPTION: This command initializes a new Slidev project distilling an 'npm init slidev@latest' command. A faster approach might involve other tools like pnpm, as npm tends to be slower due to package redownload.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/docs/guide/index.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Not recommended -\\n# NPM will download the packages each time you create a new project,\\n# which is slow and takes up a lot of space\\n\\nnpm init slidev@latest\n```\n\n----------------------------------------\n\nTITLE: Declaring Page Title in Markdown\nDESCRIPTION: Defines the title for page 1 using Markdown h1 heading syntax\nSOURCE: https://github.com/slidevjs/slidev/blob/main/test/fixtures/markdown/sub/page1.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Page 1\n```\n\n----------------------------------------\n\nTITLE: Using YAML for Content Configuration 2\nDESCRIPTION: This snippet follows a similar pattern to the previous one, showing the use of YAML blocks within the document context, used for layout adjustments.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/test/fixtures/markdown/frontmatter.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n\"# When there is already a frontmatter, the first yaml block should be treated as content\\nlayout: should not from yaml 2\"\n```\n\n----------------------------------------\n\nTITLE: Initializing Slidev Project Locally with yarn\nDESCRIPTION: Using yarn to kickstart a Slidev project with 'yarn create slidev' provides a swift and smooth installation process for developers comfortable with Yarn's ecosystem.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/docs/guide/index.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn create slidev\n```\n\n----------------------------------------\n\nTITLE: Installing Prettier Plugin for Slidev using npm\nDESCRIPTION: Command to install Prettier and the Slidev plugin using npm package manager.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/docs/features/prettier-plugin.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i -D prettier prettier-plugin-slidev\n```\n\n----------------------------------------\n\nTITLE: Installing Playwright-Chromium Using Different Package Managers\nDESCRIPTION: Commands for installing the playwright-chromium dependency required for exporting slidev presentations using different package managers (pnpm, npm, yarn, bun).\nSOURCE: https://github.com/slidevjs/slidev/blob/main/docs/guide/exporting.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ pnpm add -D playwright-chromium\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ npm i -D playwright-chromium\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn add -D playwright-chromium\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ bun add -D playwright-chromium\n```\n\n----------------------------------------\n\nTITLE: Problematic Asset References in Frontmatter and Components\nDESCRIPTION: Demonstrates how relative paths in frontmatter and components will not be properly resolved during build, leading to 404 errors. These paths aren't statically analyzable.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/docs/guide/faq.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n---\nbackground: ./image.png  # Broken after build\n---\n\n<Comp src=\"./image.png\" />\n```\n\n----------------------------------------\n\nTITLE: Filtering Features with Vue Composition API\nDESCRIPTION: This TypeScript snippet sets up computed properties and reactive references using Vue's Composition API to manage filtering of features based on search queries and tags. It requires Vue and VueUse libraries, and it connects to a data source of features, enabling case-insensitive search and filtering by tags.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/docs/features/index.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useUrlSearchParams } from '@vueuse/core'\nimport { computed, toRef, ref } from 'vue'\nimport { withBase } from 'vitepress'\nimport { data as features } from './index.data'\n\nconst query = useUrlSearchParams('hash-params', { removeFalsyValues: true })\nconst search = toRef(query, 'search') as Ref<string | null>\nconst tags = toRef(query, 'tags') as Ref<string | null>\nconst tagsArr = computed({\n  get: () => tags.value?.toLowerCase().split(',').map(t => t.trim()).filter(Boolean) ?? [],\n  set: (val: string[]) => query.tags = val.join(','),\n})\n\nconst filteredFeatures = computed(() => {\n  const s = search.value?.toLowerCase().trim()\n  const t = tagsArr.value\n  return Object.values(features).filter(feature => {\n    return (!s || feature.title.toLowerCase().includes(s) || feature.description.toLowerCase().includes(s))\n      && (!t?.length || t.every(tag => feature.tags?.includes(tag)))\n  })\n})\n\nfunction resetFilters() {\n  query.search = null\n  query.tags = null\n}\n\nfunction removeTag(tag: string) {\n  tagsArr.value = tagsArr.value.filter(t => t !== tag)\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting Slidev Presentations to Markdown Format\nDESCRIPTION: Command to compile slidev presentations into a markdown file composed of compiled PNG images.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/docs/guide/exporting.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ slidev export --format md\n```\n\n----------------------------------------\n\nTITLE: Specifying Executable Path for Slidev Export\nDESCRIPTION: Command to set a custom browser executable path for Playwright when exporting slidev presentations.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/docs/guide/exporting.md#2025-04-21_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\n$ slidev export --executable-path [path_to_chromium]\n```\n\n----------------------------------------\n\nTITLE: Removing Background for PNG Exports in Slidev\nDESCRIPTION: Command to remove the default browser background when exporting slidev presentations to PNG format.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/docs/guide/exporting.md#2025-04-21_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\n$ slidev export --omit-background\n```\n\n----------------------------------------\n\nTITLE: Installing Emoji Fonts for Slidev Exports in Linux Containers\nDESCRIPTION: Bash commands to fix broken emojis in exported PDFs or PNGs by installing the required Google Noto Emoji font in Linux environments.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/docs/guide/exporting.md#2025-04-21_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\n$ curl -L --output NotoColorEmoji.ttf https://github.com/googlefonts/noto-emoji/raw/main/fonts/NotoColorEmoji.ttf\n$ sudo mv NotoColorEmoji.ttf /usr/local/share/fonts/\n$ fc-cache -fv\n```\n\n----------------------------------------\n\nTITLE: Installing Prettier Plugin for Slidev using pnpm\nDESCRIPTION: Command to install Prettier and the Slidev plugin using pnpm package manager.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/docs/features/prettier-plugin.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm i -D prettier prettier-plugin-slidev\n```\n\n----------------------------------------\n\nTITLE: Custom Styles for All Features Page\nDESCRIPTION: This CSS snippet defines custom styles for the 'all-features' page, specifically adjusting the layout and scroll behavior. It targets the container to ensure a maximum width and adds a custom scroll behavior to the root element.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/docs/features/index.md#2025-04-21_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n.all-features-page .VPDoc > .container > .content {\n  max-width: 72vw !important;\n}\n\n:root {\n  overflow-y: scroll;\n}\n```\n\n----------------------------------------\n\nTITLE: Running Slidev with Real-World Example\nDESCRIPTION: Command to run Slidev with the 'Composable Vue' real-world example for testing and development.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/CONTRIBUTING.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npnpm demo:composable-vue\n```\n\n----------------------------------------\n\nTITLE: Rendering Community Addons Gallery with Client-Side Only Component\nDESCRIPTION: This code renders the community addons collection using the AddonGallery component. Similar to the official addons section, it's wrapped in a ClientOnly component to ensure proper client-side rendering. A comment indicates that the addon data is defined in a separate file.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/docs/resources/addon-gallery.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<!-- Edit in ./docs/.vitepress/addons.ts -->\n<ClientOnly>\n  <AddonGallery collection=\"community\"/>\n</ClientOnly>\n```\n\n----------------------------------------\n\nTITLE: Logging Output in TypeScript\nDESCRIPTION: This snippet demonstrates how to log a simple message to the console using TypeScript. It highlights basic logging functionality, which is essential for debugging and output verification in development. The expected output is a string displayed in the console.\nSOURCE: https://github.com/slidevjs/slidev/blob/main/test/fixtures/markdown/minimal.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconsole.log('Hello World')\n```"
  }
]