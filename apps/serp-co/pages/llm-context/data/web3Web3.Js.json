[
  {
    "owner": "web3",
    "repo": "web3.js",
    "content": "TITLE: Initializing Web3 with Provider\nDESCRIPTION: Example showing how to initialize Web3 with an RPC endpoint provider and make a basic blockchain query.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/01_getting_started/quickstart.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Web3 } from 'web3';\n\n// private RPC endpoint\nconst web3 = new Web3('https://mainnet.infura.io/v3/YOUR_INFURA_ID');\n\n// or public RPC endpoint\n// const web3 = new Web3('https://eth.llamarpc.com');\n\nweb3.eth.getBlockNumber().then(console.log);\n// â†³ 18849658n\n```\n\n----------------------------------------\n\nTITLE: Sending EIP-1559 Transaction with Web3.js\nDESCRIPTION: Demonstrates how to create and send an EIP-1559 transaction using Web3.js. The code shows account creation from a private key, transaction object construction with EIP-1559 specific parameters (type 2), and transaction sending process. The example includes automatic fee calculation features of Web3.js.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/10_web3_eth/eth.md#2025-04-21_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Web3 } from 'web3';\n\nconst web3 = new Web3('http://localhost:8545');\n\nasync function test() {\n\tconst privateKey = 'YOUR PRIVATE KEY HERE';\n\t// add private key to wallet to have auto-signing transactions feature\n\tconst account = web3.eth.accounts.privateKeyToAccount(privateKey);\n\tweb3.eth.accounts.wallet.add(account);\n\n\t// create transaction object\n\tconst tx = {\n\t\tfrom: account.address,\n\t\tto: '0x27aa427c1d668ddefd7bc93f8857e7599ffd16ab',\n\t\tvalue: '0x1',\n\t\tgasLimit: BigInt(21000),\n\t\ttype: BigInt(2), // <- specify type\n\t\t// maxFeePerGas - you can specify this property directly or web3js will fill this field automatically\n\t\t// maxPriorityFeePerGas - you can specify this property directly or web3js will fill this field automatically\n\t};\n\n\t// send transaction\n\tconst receipt = await web3.eth.sendTransaction(tx);\n\n\tconsole.log('Receipt:', receipt);\n\t// Receipt: {\n\t//   blockHash: '0xfe472084d1471720b6887071d32a793f7c4576a489098e7d2a89aef205c977fb',\n\t//   blockNumber: 23n,\n\t//   cumulativeGasUsed: 21000n,\n\t//   effectiveGasPrice: 2546893579n,\n\t//   from: '0xe2597eb05cf9a87eb1309e86750c903ec38e527e',\n\t//   gasUsed: 21000n,\n\t//   logs: [],\n\t//   logsBloom: '0x0000...00000000000',\n\t//   status: 1n,\n\t//   to: '0x27aa427c1d668ddefd7bc93f8857e7599ffd16ab',\n\t//   transactionHash: '0x5c7a3d2965b426a5776e55f049ee379add44652322fb0b9fc2f7f57b38fafa2a',\n\t//   transactionIndex: 0n,\n\t//   type: 2n\n\t// }\n}\n(async () => {\n\tawait test();\n})();\n```\n\n----------------------------------------\n\nTITLE: HTML Implementation for Metamask Integration with Web3.js\nDESCRIPTION: A complete HTML file that demonstrates how to connect to Metamask, check chain ID, display block information, and subscribe to new blocks using Web3.js.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/07_dapps/metamask-vanilla.md#2025-04-21_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n\t<head>\n\t\t<meta charset=\"UTF-8\" />\n\t\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n\t\t<title>Web3.js MetaMask Tutorial</title>\n\t\t<!-- import Web3.js -->\n\t\t<script src=\"https://cdn.jsdelivr.net/npm/web3@latest/dist/web3.min.js\"></script>\n\t</head>\n\t<body>\n\t\t<!-- placeholders -->\n\t\t<div id=\"provider\"></div>\n\t\t<div id=\"chainId\"></div>\n\t\t<div id=\"latestBlock\"></div>\n\t\t<div id=\"warn\" style=\"color: red\"></div>\n\t\t<script type=\"module\">\n\t\t\t// ensure that there is an injected the Ethereum provider\n\t\t\tif (window.ethereum) {\n\t\t\t\t// use the injected Ethereum provider to initialize Web3.js\n\t\t\t\tconst web3 = new Web3(window.ethereum);\n\n\t\t\t\t// check if Ethereum provider comes from MetaMask\n\t\t\t\tif (window.ethereum.isMetaMask) {\n\t\t\t\t\tdocument.getElementById('provider').innerText =\n\t\t\t\t\t\t'Connected to Ethereum with MetaMask.';\n\t\t\t\t} else {\n\t\t\t\t\tdocument.getElementById('provider').innerText =\n\t\t\t\t\t\t'Non-MetaMask Ethereum provider detected.';\n\t\t\t\t}\n\n\t\t\t\t// get chain ID and populate placeholder\n\t\t\t\tdocument.getElementById(\n\t\t\t\t\t'chainId',\n\t\t\t\t).innerText = `Chain ID: ${await web3.eth.getChainId()}`;\n\t\t\t\t// get latest block and populate placeholder\n\t\t\t\tdocument.getElementById(\n\t\t\t\t\t'latestBlock',\n\t\t\t\t).innerText = `Latest Block: ${await web3.eth.getBlockNumber()}`;\n\n\t\t\t\t// subscribe to new blocks and update UI when a new block is created\n\t\t\t\tconst blockSubscription = await web3.eth.subscribe('newBlockHeaders');\n\t\t\t\tblockSubscription.on('data', block => {\n\t\t\t\t\tdocument.getElementById(\n\t\t\t\t\t\t'latestBlock',\n\t\t\t\t\t).innerText = `Latest Block: ${block.number}`;\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t// no Ethereum provider - instruct user to install MetaMask\n\t\t\t\tdocument.getElementById('warn').innerHTML =\n\t\t\t\t\t\"Please <a href='https://metamask.io/download/'>install MetaMask</a>.\";\n\t\t\t}\n\t\t</script>\n\t</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Implementing Web3.js and MetaMask Integration in HTML\nDESCRIPTION: This HTML file sets up a web page that interacts with MetaMask using Web3.js. It includes functionality for connecting to MetaMask, signing messages, and recovering accounts from signatures.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/07_dapps/metamask-vanilla.md#2025-04-21_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n\t<head>\n\t\t<meta charset=\"UTF-8\" />\n\t\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n\t\t<title>Web3.js MetaMask Tutorial</title>\n\t\t<!-- import Web3.js -->\n\t\t<script src=\"https://cdn.jsdelivr.net/npm/web3@latest/dist/web3.min.js\"></script>\n\t</head>\n\t<body>\n\t\t<!-- placeholders -->\n\t\t<div id=\"provider\"></div>\n\t\t<div id=\"chainId\"></div>\n\t\t<div id=\"latestBlock\"></div>\n\t\t<div id=\"connectedAccount\"></div>\n\t\t<div id=\"warn\" style=\"color: red\"></div>\n\n\t\t<div>\n\t\t\t<button id=\"requestAccounts\">Request MetaMask Accounts</button>\n\t\t</div>\n\n\t\t<div>\n\t\t\t<input id=\"messageToSign\" placeholder=\"Message to Sign\" disabled />\n\t\t\t<button id=\"signMessage\" disabled>Sign Message</button>\n\t\t\t<div id=\"signingResult\"></div>\n\t\t</div>\n\n\t\t<div>\n\t\t\t<input id=\"originalMessage\" placeholder=\"Original Message\" disabled />\n\t\t\t<input id=\"signedMessage\" placeholder=\"Signed Message\" disabled />\n\t\t\t<button id=\"recoverAccount\" disabled>Recover Account</button>\n\t\t\t<div id=\"signingAccount\"></div>\n\t\t</div>\n\t\t<script type=\"module\">\n\t\t\t// ensure that there is an injected the Ethereum provider\n\t\t\tif (window.ethereum) {\n\t\t\t\t// use the injected Ethereum provider to initialize Web3.js\n\t\t\t\tconst web3 = new Web3(window.ethereum);\n\n\t\t\t\t// check if Ethereum provider comes from MetaMask\n\t\t\t\tif (window.ethereum.isMetaMask) {\n\t\t\t\t\tdocument.getElementById('provider').innerText =\n\t\t\t\t\t\t'Connected to Ethereum with MetaMask.';\n\t\t\t\t} else {\n\t\t\t\t\tdocument.getElementById('provider').innerText =\n\t\t\t\t\t\t'Non-MetaMask Ethereum provider detected.';\n\t\t\t\t}\n\n\t\t\t\t// get chain ID and populate placeholder\n\t\t\t\tdocument.getElementById(\n\t\t\t\t\t'chainId',\n\t\t\t\t).innerText = `Chain ID: ${await web3.eth.getChainId()}`;\n\t\t\t\t// get latest block and populate placeholder\n\t\t\t\tdocument.getElementById(\n\t\t\t\t\t'latestBlock',\n\t\t\t\t).innerText = `Latest Block: ${await web3.eth.getBlockNumber()}`;\n\n\t\t\t\t// subscribe to new blocks and update UI when a new block is created\n\t\t\t\tconst blockSubscription = await web3.eth.subscribe('newBlockHeaders');\n\t\t\t\tblockSubscription.on('data', block => {\n\t\t\t\t\tdocument.getElementById(\n\t\t\t\t\t\t'latestBlock',\n\t\t\t\t\t).innerText = `Latest Block: ${block.number}`;\n\t\t\t\t});\n\n\t\t\t\t// click event for \"Request MetaMask Accounts\" button\n\t\t\t\tdocument.getElementById('requestAccounts').addEventListener('click', async () => {\n\t\t\t\t\t// request accounts from MetaMask\n\t\t\t\t\tawait window.ethereum.request({ method: 'eth_requestAccounts' });\n\t\t\t\t\tdocument.getElementById('requestAccounts').remove();\n\n\t\t\t\t\t// get list of accounts\n\t\t\t\t\tconst accounts = await web3.eth.getAccounts();\n\t\t\t\t\t// get the first account and populate placeholder\n\t\t\t\t\tdocument.getElementById(\n\t\t\t\t\t\t'connectedAccount',\n\t\t\t\t\t).innerText = `Account: ${accounts[0]}`;\n\n\t\t\t\t\t// enable signing input\n\t\t\t\t\tconst messageToSign = document.getElementById('messageToSign');\n\t\t\t\t\tconst sign = document.getElementById('signMessage');\n\t\t\t\t\tmessageToSign.disabled = false;\n\t\t\t\t\tsign.disabled = false;\n\n\t\t\t\t\t// click event for \"Sign Message\" button\n\t\t\t\t\tsign.addEventListener('click', async () => {\n\t\t\t\t\t\t// sign message with first MetaMask account\n\t\t\t\t\t\tconst signature = await web3.eth.personal.sign(\n\t\t\t\t\t\t\tmessageToSign.value,\n\t\t\t\t\t\t\taccounts[0],\n\t\t\t\t\t\t\t'',\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\t// update placeholder with signed message\n\t\t\t\t\t\tdocument.getElementById(\n\t\t\t\t\t\t\t'signingResult',\n\t\t\t\t\t\t).innerText = `Signed Message: ${signature}`;\n\t\t\t\t\t});\n\n\t\t\t\t\t// enable signature verification input\n\t\t\t\t\tconst originalMessage = document.getElementById('originalMessage');\n\t\t\t\t\tconst signedMessaged = document.getElementById('signedMessage');\n\t\t\t\t\tconst recoverAccount = document.getElementById('recoverAccount');\n\t\t\t\t\toriginalMessage.disabled = false;\n\t\t\t\t\tsignedMessaged.disabled = false;\n\t\t\t\t\trecoverAccount.disabled = false;\n\n\t\t\t\t\t// click event for \"Recover Account\" button\n\t\t\t\t\trecoverAccount.addEventListener('click', async () => {\n\t\t\t\t\t\t// recover account from signature\n\t\t\t\t\t\tconst account = await web3.eth.personal.ecRecover(\n\t\t\t\t\t\t\toriginalMessage.value,\n\t\t\t\t\t\t\tsignedMessaged.value,\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\t// update placeholder with recovered signature account\n\t\t\t\t\t\tdocument.getElementById(\n\t\t\t\t\t\t\t'signingAccount',\n\t\t\t\t\t\t).innerText = `Signing Account: ${account}`;\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t// no Ethereum provider - instruct user to install MetaMask\n\t\t\t\tdocument.getElementById('warn').innerHTML =\n\t\t\t\t\t\"Please <a href='https://metamask.io/download/'>install MetaMask</a>.\";\n\t\t\t\tdocument.getElementById('requestAccounts').disabled = true;\n\t\t\t}\n\t\t</script>\n\t</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Deploying Smart Contract with Web3.js Contract Instance\nDESCRIPTION: Demonstrates how to create a new Contract instance and deploy a smart contract using Web3.js. The bytecode is required for deployment along with any constructor arguments.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/05_smart_contracts/mastering_smart_contracts.md#2025-04-21_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Contract} from 'web3-eth-contract';\n\nconst myContract = new Contract(abi, undefined, options);\n// if there is no options to be passed you can write:\nconst myContract = new Contract(abi);\n\nawait myContract.deploy({\n    data: '0x' + bytecode,\n\n    // the smart contract constructor arguments in an array\n    arguments: [arg1, arg2],\n}).send({\n    from: someAccount,\n    ...\n});\n\n// the contract address will be filled automatically here after deployment:\nmyContract.options.address\n```\n\n----------------------------------------\n\nTITLE: Creating Contract Instance with ABI in Web3.js\nDESCRIPTION: Demonstrates the basic contract instantiation with ABI, which is required for proper contract interaction and TypeScript IntelliSense support.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/05_smart_contracts/mastering_smart_contracts.md#2025-04-21_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nconst myContract = new Contract(abi, address || undefined, options);\n// remember that address can be empty if the contract is not deployed yet.\n// or you can set the address to directly interact with the contract.\n```\n\n----------------------------------------\n\nTITLE: Calling Contract Methods in TypeScript\nDESCRIPTION: This snippet illustrates how to call contract methods using Web3.js. It shows examples of sending transactions for state-changing methods and calling view/pure methods that don't modify the blockchain state.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/05_smart_contracts/mastering_smart_contracts.md#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// note that the bellow METHOD_NAME and METHOD_PARAMETERS are\n// according to the early provided ABI.\n// And TypeScript intellisense will help you with.\n\n// to call a method by sending a transaction\ncontract.methods.METHOD_NAME(METHOD_PARAMETERS).send();\n// you need to specify the account (from) that will be used to sign and send the transaction\ncontract.methods.METHOD_NAME(METHOD_PARAMETERS).send({ from: '0x...' });\n\n// to call a view or pure method that does not send a transaction\ncontract.methods.METHOD_NAME(METHOD_PARAMETERS).call();\n```\n\n----------------------------------------\n\nTITLE: Deploying a Contract with Web3.js in TypeScript\nDESCRIPTION: This snippet shows the process of deploying a new contract instance using Web3.js. It includes steps for obtaining the deployer account, estimating gas, and sending the deployment transaction. It also demonstrates how to handle the deployed contract's address.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/05_smart_contracts/mastering_smart_contracts.md#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n// this will give you the accounts from the connected provider\n// For example, if you are using MetaMask, it will be the account available.\nconst providersAccounts = await web3.eth.getAccounts();\nconst defaultAccount = providersAccounts[0];\nconsole.log('deployer account:', defaultAccount);\n\n// NOTE: If you want to manually unlock an account with a private key, you can use wallet.add(privateKey).\n// however, exercise caution and ensure the security of your private keys.\n\n// this is how to obtain the deployer function,\n// so you can estimate its needed gas and deploy it.\nconst contractDeployer = myContract.deploy({\n\tdata: bytecode, // prefix the bytecode with '0x' if it is note already\n\targuments: [1], // provide the parameters in an array; in this case, it's the number `1`.\n});\n\n// optionally, estimate the gas that will be used for development and log it\nconst gas = await contractDeployer.estimateGas({\n\tfrom: defaultAccount,\n});\nconsole.log('estimated gas:', gas);\n\n// Deploy the contract to the Ganache network\nconst tx = await contractDeployer.send({\n\tfrom: defaultAccount,\n\tgas,\n\tgasPrice: 10000000000,\n});\nconsole.log('Contract deployed at address: ' + tx.options.address);\n```\n\n----------------------------------------\n\nTITLE: Configuring Web3Modal Instance\nDESCRIPTION: Setup and configuration of Web3Modal including project ID, chain configuration, metadata, and modal creation. Demonstrates the complete initialization process with necessary parameters.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/07_dapps/web3_modal_guide/index.mdx#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createWeb3Modal, defaultConfig } from 'web3modal-web3/react'\n\n// 1. Get projectId, Your Project ID can be obtained from walletconnect.com\nconst projectId = 'YOUR_PROJECT_ID'\n\n// 2. Set chains\nconst mainnet = {\n  chainId: 1,\n  name: 'Ethereum',\n  currency: 'ETH',\n  explorerUrl: 'https://etherscan.io',\n  rpcUrl: 'https://cloudflare-eth.com'\n}\n\n// 3. Create a metadata object\nconst metadata = {\n  name: 'My Website',\n  description: 'My Website description',\n  url: 'https://mywebsite.com', // origin must match your domain & subdomain\n  icons: ['https://avatars.mywebsite.com/']\n}\n\n// 4. Create web3 config\nconst web3Config = defaultConfig({\n  /*Required*/\n  metadata,\n\n  /*Optional*/\n  enableEIP6963: true, // true by default\n  enableInjected: true, // true by default\n  enableCoinbase: true, // true by default\n  rpcUrl: '...', // used for the Coinbase SDK\n  defaultChainId: 1, // used for the Coinbase SDK\n})\n\n// 5. Create a Web3Modal instance\ncreateWeb3Modal({\n  web3Config,\n  chains: [mainnet],\n  projectId,\n  enableAnalytics: true // Optional - defaults to your Cloud configuration\n})\n\nexport default function App() {\n  return <YourApp />\n}\n```\n\n----------------------------------------\n\nTITLE: Transferring ETH\nDESCRIPTION: Example of transferring ETH using a wallet account, including transaction creation and submission.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/01_getting_started/quickstart.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// add an account to a wallet\nconst account = web3.eth.accounts.wallet.add(\n\t'0x50d349f5cf627d44858d6fcb6fbf15d27457d35c58ba2d5cfeaf455f25db5bec'\n);\n\n// create transaction object to send 1 eth to '0xa32...c94' address from the account[0]\nconst tx = {\n\tfrom: account[0].address,\n\tto: '0xa3286628134bad128faeef82f44e99aa64085c94',\n\tvalue: web3.utils.toWei('1', 'ether'),\n};\n\n// send the transaction\nconst txReceipt = await web3.eth.sendTransaction(tx);\n\nconsole.log('Tx hash:', txReceipt.transactionHash);\n```\n\n----------------------------------------\n\nTITLE: Sending Raw Transaction with Web3.js in JavaScript\nDESCRIPTION: This code snippet demonstrates how to send a raw transaction using Web3.js. It includes creating a Web3 instance, importing a private key, creating a transaction object with necessary gas properties, signing the transaction, and sending it to the network. The example also shows how to calculate maxFeePerGas based on the current block's baseFeePerGas.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/04_transactions/transactions.md#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nconst { Web3 } = require('web3');\n\nasync function main() {\n\tconst web3 = new Web3('http://127.0.0.1:8545/');\n\n\tconst privateKey = '<redacted>';\n\t// import the Hardhat test account without the use of a wallet\n\tconst sender = web3.eth.accounts.privateKeyToAccount(privateKey);\n\n\tconst receiver = web3.eth.accounts.create();\n\n\t// used to calculate the transaction's maxFeePerGas\n\tconst block = await web3.eth.getBlock();\n\n\tconst transaction = {\n\t\tfrom: sender.address,\n\t\tto: receiver.address,\n\t\tvalue: 100,\n\t\t// the following two properties must be included in raw transactions\n\t\tmaxFeePerGas: block.baseFeePerGas * 2n,\n\t\tmaxPriorityFeePerGas: 100000,\n\t};\n\n\tconst signedTransaction = await web3.eth.accounts.signTransaction(\n\t\ttransaction,\n\t\tsender.privateKey,\n\t);\n\tconst receipt = await web3.eth.sendSignedTransaction(signedTransaction.rawTransaction);\n\tconsole.log(receipt);\n}\n\nmain();\n```\n\n----------------------------------------\n\nTITLE: Sending an Ethereum Transaction with Web3.js\nDESCRIPTION: JavaScript code that demonstrates how to send a transaction between accounts on the Hardhat network, including signing the transaction and examining the receipt.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/04_transactions/transactions.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst { Web3 } = require('web3');\n\nasync function main() {\n\tconst web3 = new Web3('http://127.0.0.1:8545/');\n\n\t// create a new Web3.js account object with the private key of a Hardhat test account\n\tconst privateKey = '<redacted>';\n\t// the account is created with a wallet, which makes it easier to use\n\tconst sender = web3.eth.accounts.wallet.add(privateKey)[0];\n\n\t// generate a new random Web3.js account object to receive the transaction\n\tconst receiver = web3.eth.accounts.create();\n\n\t// log initial balances\n\tconsole.log(\n\t\t'Initial sender balance:',\n\t\t// account balance in wei\n\t\tawait web3.eth.getBalance(sender.address),\n\t);\n\tconsole.log(\n\t\t'Initial receiver balance:',\n\t\t// account balance in wei\n\t\tawait web3.eth.getBalance(receiver.address),\n\t);\n\n\t// sign and send the transaction\n\tconst receipt = await web3.eth.sendTransaction({\n\t\tfrom: sender.address,\n\t\tto: receiver.address,\n\t\t// amount in wei\n\t\tvalue: 100,\n\t});\n\n\t// log transaction receipt\n\tconsole.log(receipt);\n\n\t// log final balances\n\tconsole.log('Final sender balance:', await web3.eth.getBalance(sender.address));\n\tconsole.log('Final receiver balance:', await web3.eth.getBalance(receiver.address));\n}\n\nmain();\n```\n\n----------------------------------------\n\nTITLE: Sending EIP-2930 Transaction with web3.js\nDESCRIPTION: This code snippet shows how to create and send an EIP-2930 transaction using web3.js. It includes setting up a Web3 instance, adding a private key to the wallet, creating a transaction object with the type set to 1 (EIP-2930), and sending the transaction.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/10_web3_eth/eth.md#2025-04-21_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Web3 } from 'web3';\n\nconst web3 = new Web3('http://localhost:8545');\n\nasync function test() {\n\tconst privateKey = 'YOUR PRIVATE KEY HERE';\n\t// add private key to wallet to have auto-signing transactions feature\n\tconst account = web3.eth.accounts.privateKeyToAccount(privateKey);\n\tweb3.eth.accounts.wallet.add(account);\n\n\t// create transaction object\n\tconst tx = {\n\t\tfrom: account.address,\n\t\tto: '0x27aa427c1d668ddefd7bc93f8857e7599ffd16ab',\n\t\tvalue: '0x1',\n\t\tgasLimit: BigInt(21000),\n\t\ttype: BigInt(1), // <- specify type\n\t\t// gasPrice - you can specify this property directly or web3js will fill this field automatically\n\t};\n\n\t// send transaction\n\tconst receipt = await web3.eth.sendTransaction(tx);\n\n\tconsole.log('Receipt:', receipt);\n\t// Receipt: {\n\t//   blockHash: '0xd8f6a3638112d17b476fd1b7c4369d473bc1a484408b6f39dbf64410df44adf6',\n\t//   blockNumber: 24n,\n\t//   cumulativeGasUsed: 21000n,\n\t//   effectiveGasPrice: 2546893579n,\n\t//   from: '0xe2597eb05cf9a87eb1309e86750c903ec38e527e',\n\t//   gasUsed: 21000n,\n\t//   logs: [],\n\t//   logsBloom: '0x...0000',\n\t//   status: 1n,\n\t//   to: '0x27aa427c1d668ddefd7bc93f8857e7599ffd16ab',\n\t//   transactionHash: '0xd1d682b6f6467897db5b8f0a99a6be2fb788d32fbc1329b568b8f6b2c15e809a',\n\t//   transactionIndex: 0n,\n\t//   type: 1n\n\t// }\n}\n(async () => {\n\tawait test();\n})();\n```\n\n----------------------------------------\n\nTITLE: Web3.js Ethereum Connection Setup\nDESCRIPTION: TypeScript code demonstrating how to set up a Web3 instance and connect to a local Ganache network, including fetching the current block number.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/10_web3_eth/eth.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Web3 } from 'web3';\n\n// Set up a connection to the Ganache network\nconst web3 = new Web3(new Web3.providers.HttpProvider('http://localhost:7545'));\n/* NOTE:\ninstead of using ganache, you can also interact with a testnet/mainnet using another provider\nhttps://app.infura.io/\nhttps://dashboard.alchemy.com/\nor use a public provider https://chainlist.org/\n*/\n\n// Log the current block number to the console\nconst block = await web3.eth.getBlockNumber();\n\nconsole.log('Last block:', block);\n// â†³ Last block: 4975299n\n```\n\n----------------------------------------\n\nTITLE: Signing and Sending Ethereum Transactions in TypeScript\nDESCRIPTION: This code demonstrates how to sign an Ethereum transaction with a private key and send it to the network using web3.js. It creates a transaction sending 1 ETH between accounts, signs it offline, and broadcasts the signed transaction.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/10_web3_eth/eth.md#2025-04-21_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Web3 } from 'web3';\nconst web3 = new Web3('http://localhost:7545');\n\n//make sure to copy the private key from ganache\nconst privateKey = '0x0fed6f64e01bc9fac9587b6e7245fd9d056c3c004ad546a17d3d029977f0930a';\nconst value = web3.utils.toWei('1', 'ether');\n\nasync function sendSigned() {\n\tconst accounts = await web3.eth.getAccounts();\n\tconst fromAddress = accounts[0];\n\tconst toAddress = accounts[1];\n\t// Create a new transaction object\n\tconst tx = {\n\t\tfrom: fromAddress,\n\t\tto: toAddress,\n\t\tvalue: value,\n\t\tgas: 21000,\n\t\tgasPrice: web3.utils.toWei('10', 'gwei'),\n\t\tnonce: await web3.eth.getTransactionCount(fromAddress),\n\t};\n\n\t// Sign the transaction with the private key\n\tconst signedTx = await web3.eth.accounts.signTransaction(tx, privateKey);\n\n\t// Send the signed transaction to the network\n\tconst receipt = await web3.eth.sendSignedTransaction(signedTx.rawTransaction);\n\n\tconsole.log('Transaction receipt:', receipt);\n}\n(async () => {\n\tawait sendSigned();\n})();\n```\n\n----------------------------------------\n\nTITLE: Implementing React component for MetaMask integration\nDESCRIPTION: Creates a React component that detects the MetaMask provider, initializes Web3.js, retrieves the chain ID and latest block number, and subscribes to new block events. Uses React hooks to manage state and side effects.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/07_dapps/metamask-react.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useEffect, useState } from 'react';\nimport { Web3 } from 'web3';\n\nfunction App() {\n\tconst [web3, setWeb3] = useState<Web3 | null>(null);\n\tconst [warning, setWarning] = useState<string | null>(null);\n\tconst [provider, setProvider] = useState<string | null>(null);\n\tconst [chainId, setChainId] = useState<string | null>(null);\n\tconst [latestBlock, setLatestBlock] = useState<string | null>(null);\n\tuseEffect(() => {\n\t\t// ensure that there is an injected the Ethereum provider\n\t\tif (window.ethereum) {\n\t\t\t// use the injected Ethereum provider to initialize Web3.js\n\t\t\tsetWeb3(new Web3(window.ethereum));\n\t\t\t// check if Ethereum provider comes from MetaMask\n\t\t\tif (window.ethereum.isMetaMask) {\n\t\t\t\tsetProvider('Connected to Ethereum with MetaMask.');\n\t\t\t} else {\n\t\t\t\tsetProvider('Non-MetaMask Ethereum provider detected.');\n\t\t\t}\n\t\t} else {\n\t\t\t// no Ethereum provider - instruct user to install MetaMask\n\t\t\tsetWarning('Please install MetaMask');\n\t\t}\n\t}, []);\n\n\tuseEffect(() => {\n\t\tasync function getChainId() {\n\t\t\tif (web3 === null) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// get chain ID and populate placeholder\n\t\t\tsetChainId(`Chain ID: ${await web3.eth.getChainId()}`);\n\t\t}\n\n\t\tasync function getLatestBlock() {\n\t\t\tif (web3 === null) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// get latest block and populate placeholder\n\t\t\tsetLatestBlock(`Latest Block: ${await web3.eth.getBlockNumber()}`);\n\n\t\t\t// subscribe to new blocks and update UI when a new block is created\n\t\t\tconst blockSubscription = await web3.eth.subscribe('newBlockHeaders');\n\t\t\tblockSubscription.on('data', block => {\n\t\t\t\tsetLatestBlock(`Latest Block: ${block.number}`);\n\t\t\t});\n\t\t}\n\n\t\tgetChainId();\n\t\tgetLatestBlock();\n\t}, [web3]);\n\treturn (\n\t\t<>\n\t\t\t<div id=\"warn\" style={{ color: 'red' }}>\n\t\t\t\t{warning}\n\t\t\t</div>\n\t\t\t<div id=\"provider\">{provider}</div>\n\t\t\t<div id=\"chainId\">{chainId}</div>\n\t\t\t<div id=\"latestBlock\">{latestBlock}</div>\n\t\t</>\n\t);\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Reading Smart Contract Data\nDESCRIPTION: Examples of reading data from a smart contract using call methods.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/01_getting_started/quickstart.md#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// make the call to the contract\nconst symbol = await uniswapToken.methods.symbol().call();\n\nconsole.log('Uniswap symbol:', symbol);\n// â†³ Uniswap symbol: UNI\n\n// make the call to the contract\nconst totalSupply = await uniswapToken.methods.totalSupply().call();\n\nconsole.log('Uniswap Total supply:', totalSupply);\n// â†³ Uniswap Total Supply: 1000000000000000000000000000n\n```\n\n----------------------------------------\n\nTITLE: Deploying Smart Contract with Web3.js\nDESCRIPTION: Script that deploys a smart contract to a development network using Web3.js. It reads contract bytecode and ABI from files, estimates gas, deploys the contract, and saves the deployed address.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/05_smart_contracts/smart_contracts_guide.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nconst { Web3 } = require('web3');\nconst path = require('path');\nconst fs = require('fs');\n\nconst web3 = new Web3('http://127.0.0.1:8545/');\n\nconst bytecodePath = path.join(__dirname, 'MyContractBytecode.bin');\nconst bytecode = fs.readFileSync(bytecodePath, 'utf8');\n\nconst abi = require('./MyContractAbi.json');\nconst myContract = new web3.eth.Contract(abi);\nmyContract.handleRevert = true;\n\nasync function deploy() {\n\tconst providersAccounts = await web3.eth.getAccounts();\n\tconst defaultAccount = providersAccounts[0];\n\tconsole.log('Deployer account:', defaultAccount);\n\n\tconst contractDeployer = myContract.deploy({\n\t\tdata: '0x' + bytecode,\n\t\targuments: [1],\n\t});\n\n\tconst gas = await contractDeployer.estimateGas({\n\t\tfrom: defaultAccount,\n\t});\n\tconsole.log('Estimated gas:', gas);\n\n\ttry {\n\t\tconst tx = await contractDeployer.send({\n\t\t\tfrom: defaultAccount,\n\t\t\tgas,\n\t\t\tgasPrice: 10000000000,\n\t\t});\n\t\tconsole.log('Contract deployed at address: ' + tx.options.address);\n\n\t\tconst deployedAddressPath = path.join(__dirname, 'MyContractAddress.txt');\n\t\tfs.writeFileSync(deployedAddressPath, tx.options.address);\n\t} catch (error) {\n\t\tconsole.error(error);\n\t}\n}\n\ndeploy();\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Smart Contract Events in TypeScript with web3.js\nDESCRIPTION: Demonstrates how to subscribe to smart contract events using web3.js. Requires a WebSocket provider and includes functions for both subscribing and unsubscribing from events.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/06_events_subscriptions/index.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Web3 } from 'web3';\n\n// set a provider - MUST be a WebSocket(WSS) provider\nconst web3 = new Web3('wss://ethereum-rpc.publicnode.com');\n\nasync function subscribe() {\n\t// create a new contract object, providing the ABI and address\n\tconst contract = new web3.eth.Contract(abi, address);\n\n\t// subscribe to the smart contract event\n\tconst subscription = contract.events.EventName();\n\n\t// new value every time the event is emitted\n\tsubscription.on('data', console.log);\n}\n\n// function to unsubscribe from a subscription\nasync function unsubscribe(subscription) {\n\tawait subscription.unsubscribe();\n}\n\nsubscribe();\nunsubscribe(subscription);\n```\n\n----------------------------------------\n\nTITLE: ERC20 Token Transfer with Legacy Transaction\nDESCRIPTION: Shows how to interact with an ERC20 token (WETH) using legacy transaction type. Includes contract initialization and transfer method execution.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/04_transactions/tx-types.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Web3 } from 'web3';\n\nconst web3 = new Web3('https://rpc2.sepolia.org');\n\nconst ADDRESS_WETH_SEPOLIA = '0xfFf9976782d46CC05630D1f6eBAb18b2324d6B14';\nconst ABI = [\n\t{\n\t\tconstant: false,\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tname: 'dst',\n\t\t\t\ttype: 'address',\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'wad',\n\t\t\t\ttype: 'uint256',\n\t\t\t},\n\t\t],\n\t\tname: 'transfer',\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tname: '',\n\t\t\t\ttype: 'bool',\n\t\t\t},\n\t\t],\n\t\tpayable: false,\n\t\tstateMutability: 'nonpayable',\n\t\ttype: 'function',\n\t},\n];\n\nasync function transfer() {\n\tconst wallet = web3.eth.accounts.wallet.add('YOUR_PRIVATE_KEY');\n\tconst myERC20 = new web3.eth.Contract(ABI, ADDRESS_WETH_SEPOLIA);\n\n\tconst TO = '0xEA9eEca67682Cd9c6Ce3DdD1681049D7A897289F';\n\tconst VALUE = 1;\n\n\tconst txReceipt = await myERC20.methods.transfer(TO, VALUE).send({\n\t\tfrom: wallet[0].address,\n\t\ttype: 0,\n\t});\n\n\tconsole.log(txReceipt.transactionHash);\n}\n\ntransfer();\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Contract Events in TypeScript\nDESCRIPTION: This code demonstrates how to subscribe to contract events using Web3.js. It shows how to set up event filters, specify block ranges, and handle event data and errors. It also includes an example of subscribing to all events.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/05_smart_contracts/mastering_smart_contracts.md#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n//If you want to filter events, create `options`:\nconst options: ContractEventOptions = {\n    // the following means all events where `myNumber` is `12` or `13`\n    filter: myNumber: [12,13];\n    // you can specify the block from where you like to start\n    // listing to events\n    fromBlock: 'earliest';\n\n    // You can also manually set the topics for the event filter.\n    // If given the filter property and event signature,\n    // (topic[0]) will not be set automatically.\n    // Each topic can also be a nested array of topics that behaves\n    // as `or` operation between the given nested topics.\n    topics?: ['0x617cf8a4400dd7963ed519ebe655a16e8da1282bb8fea36a21f634af912f54ab'];\n}\n\n// if you would like to not filter, don't pass `options`.\nconst event = await myContract.events.MyEvent(options);\n\nevent.on('data', (data) => {\n    console.log(data)\n});\nevent.on('error', (err: Error) => {\n    console.log(err);\n});\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst event = await myContract.events.allEvents(options);\n```\n\n----------------------------------------\n\nTITLE: Initializing Web3 with MetaMask Provider\nDESCRIPTION: Shows how to initialize Web3.js using the MetaMask injected provider in a browser environment. Includes checking for provider availability, requesting account access, and retrieving connected accounts.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/02_web3_providers_guide/index.md#2025-04-21_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://cdn.jsdelivr.net/npm/web3@latest/dist/web3.min.js\"></script>\n<script>\n\twindow.addEventListener('load', function () {\n\t\t// check if web3 is available\n\t\tif (typeof window.ethereum !== 'undefined') {\n\t\t\t// highlight-start\n\t\t\t// use the browser injected Ethereum provider\n\t\t\tweb3 = new Web3(window.ethereum);\n\t\t\t// highlight-end\n\n\t\t\t// request access to the user's MetaMask account\n\t\t\twindow.ethereum.enable();\n\n\t\t\t// get the user's accounts\n\t\t\tweb3.eth.getAccounts().then(function (accounts) {\n\t\t\t\t// show the first account\n\t\t\t\tdocument.getElementById('log').innerHTML =\n\t\t\t\t\t'Connected with MetaMask account: ' + accounts[0];\n\t\t\t});\n\t\t} else {\n\t\t\t// if window.ethereum is not available, give instructions to install MetaMask\n\t\t\tdocument.getElementById('log').innerHTML =\n\t\t\t\t'Please install MetaMask to connect with the Ethereum network';\n\t\t}\n\t});\n</script>\n```\n\n----------------------------------------\n\nTITLE: Configuring Web3 Contract Instance in TypeScript\nDESCRIPTION: This snippet demonstrates how to set up a Web3 connection, create a contract instance, and modify its configuration. It shows how to set the 'handleRevert' option specifically for the contract instance.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/05_smart_contracts/mastering_smart_contracts.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Web3} from 'web3';\n\n// Set up a connection to a testnet or Ethereum network\nconst web3 = new Web3(new Web3.providers.HttpProvider('http://127.0.0.1:8545')); //or new Web3('http://127.0.0.1:8545')\n\n// Create a new contract object using the ABI and bytecode\nconst abi = [{...}]\nconst myContract = new web3.eth.Contract(abi);\nconsole.log(myContract.config.handleRevert); //false\n\n// This will set `handleRevert` to `true` only on `myContract` instance:\nmyContract.handleRevert = true; // same as: myContract.config.handleRevert\nconsole.log(myContract.config.handleRevert); //true\n```\n\n----------------------------------------\n\nTITLE: Estimating Gas for Ethereum Transaction with Web3.js\nDESCRIPTION: Demonstrates how to estimate the required gas for an Ethereum transaction using Web3.js's estimateGas method. Creates a transaction draft and applies the estimated gas value to the final transaction object.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/04_transactions/gas-and-fees.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst transactionDraft: Transaction = {\n\tfrom: '<SENDER ADDRESS>',\n\tto: '<RECEIVER ADDRESS>',\n\tvalue: web3.utils.ethUnitMap.ether,\n};\n\nconst gas: bigint = await web3.eth.estimateGas(transactionDraft);\n\nconst transaction: Transaction = {\n\t...transactionDraft,\n\tgas,\n};\n```\n\n----------------------------------------\n\nTITLE: Event Subscription Event Handlers in TypeScript\nDESCRIPTION: Shows different event handlers available for subscriptions including data, changed, error, and connected events.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/06_events_subscriptions/index.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nsubscription.on('data', data => console.log(data));\n```\n\nLANGUAGE: typescript\nCODE:\n```\nsubscription.on('changed', changed => console.log(changed));\n```\n\nLANGUAGE: typescript\nCODE:\n```\nsubscription.on('error', error => console.log(error));\n```\n\nLANGUAGE: typescript\nCODE:\n```\nsubscription.on('connected', connected => console.log(connected));\n```\n\n----------------------------------------\n\nTITLE: Estimating Gas for Ethereum Contract Deployment in TypeScript\nDESCRIPTION: This code demonstrates how to use web3.js to estimate the gas required for deploying a smart contract to the Ethereum blockchain. It shows the difference between default BigInt format and hexadecimal format for gas estimates.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/10_web3_eth/eth.md#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Web3, ETH_DATA_FORMAT, DEFAULT_RETURN_FORMAT } from 'web3';\n\nasync function estimate() {\n\t// abi of our contract\n\tconst abi = [\n\t\t{\n\t\t\tinputs: [{ internalType: 'uint256', name: '_myNumber', type: 'uint256' }],\n\t\t\tstateMutability: 'nonpayable',\n\t\t\ttype: 'constructor',\n\t\t},\n\t\t{\n\t\t\tinputs: [],\n\t\t\tname: 'myNumber',\n\t\t\toutputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],\n\t\t\tstateMutability: 'view',\n\t\t\ttype: 'function',\n\t\t},\n\t\t{\n\t\t\tinputs: [{ internalType: 'uint256', name: '_myNumber', type: 'uint256' }],\n\t\t\tname: 'setMyNumber',\n\t\t\toutputs: [],\n\t\t\tstateMutability: 'nonpayable',\n\t\t\ttype: 'function',\n\t\t},\n\t];\n\n\tconst web3 = new Web3(new Web3.providers.HttpProvider('http://localhost:7545'));\n\n\t//get the available accounts\n\tconst accounts = await web3.eth.getAccounts();\n\tlet acc = await accounts[0];\n\n\tlet contract = new web3.eth.Contract(abi);\n\n\tconst deployment = contract.deploy({\n\t\tdata: '0x608060405234801561001057600080fd5b506040516101d93803806101d983398181016040528101906100329190610054565b806000819055505061009e565b60008151905061004e81610087565b92915050565b60006020828403121561006657600080fd5b60006100748482850161003f565b91505092915050565b6000819050919050565b6100908161007d565b811461009b57600080fd5b50565b61012c806100ad6000396000f3fe6080604052348015600f57600080fd5b506004361060325760003560e01c806323fd0e401460375780636ffd773c146051575b600080fd5b603d6069565b6040516048919060bf565b60405180910390f35b6067600480360381019060639190608c565b606f565b005b60005481565b8060008190555050565b60008135905060868160e2565b92915050565b600060208284031215609d57600080fd5b600060a9848285016079565b91505092915050565b60b98160d8565b82525050565b600060208201905060d2600083018460b2565b92915050565b6000819050919050565b60e98160d8565b811460f357600080fd5b5056fea2646970667358221220d28cf161457f7936995800eb9896635a02a559a0561bff6a09a40bfb81cd056564736f6c63430008000033',\n\t\t// @ts-expect-error\n\t\targuments: [1],\n\t});\n\n\tlet estimatedGas = await deployment.estimateGas({ from: acc }, DEFAULT_RETURN_FORMAT);\n\t// the returned data will be formatted as a bigint\n\n\tconsole.log('Default format:', estimatedGas);\n\n\testimatedGas = await deployment.estimateGas({ from: acc }, ETH_DATA_FORMAT);\n\t// the returned data will be formatted as a hexstring\n\n\tconsole.log('Eth format:', estimatedGas);\n}\n\n(async () => {\n\tawait estimate();\n})();\n```\n\n----------------------------------------\n\nTITLE: Initializing Web3.js and Connecting to MetaMask in React\nDESCRIPTION: This React component initializes Web3.js with the MetaMask provider, retrieves blockchain information, and allows users to request access to their MetaMask accounts. It manages state for Web3 instance, warnings, provider info, chain ID, latest block, and connected account.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/07_dapps/metamask-react.md#2025-04-21_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useEffect, useState } from 'react';\nimport { Web3 } from 'web3';\n\nfunction App() {\n\tconst [web3, setWeb3] = useState<Web3 | null>(null);\n\tconst [warning, setWarning] = useState<string | null>(null);\n\tconst [provider, setProvider] = useState<string | null>(null);\n\tconst [chainId, setChainId] = useState<string | null>(null);\n\tconst [latestBlock, setLatestBlock] = useState<string | null>(null);\n\tconst [accountButtonDisabled, setAccountButtonDisabled] = useState<boolean>(false);\n\tconst [accounts, setAccounts] = useState<string[] | null>(null);\n\tconst [connectedAccount, setConnectedAccount] = useState<string | null>(null);\n\tuseEffect(() => {\n\t\tif (window.ethereum) {\n\t\t\tsetWeb3(new Web3(window.ethereum));\n\t\t\tif (window.ethereum.isMetaMask) {\n\t\t\t\tsetProvider('Connected to Ethereum with MetaMask.');\n\t\t\t} else {\n\t\t\t\tsetProvider('Non-MetaMask Ethereum provider detected.');\n\t\t\t}\n\t\t} else {\n\t\t\tsetWarning('Please install MetaMask');\n\t\t\tsetAccountButtonDisabled(true);\n\t\t}\n\t}, []);\n\n\tuseEffect(() => {\n\t\tasync function getChainId() {\n\t\t\tif (web3 === null) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tsetChainId(`Chain ID: ${await web3.eth.getChainId()}`);\n\t\t}\n\n\t\tasync function getLatestBlock() {\n\t\t\tif (web3 === null) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tsetLatestBlock(`Latest Block: ${await web3.eth.getBlockNumber()}`);\n\n\t\t\tconst blockSubscription = await web3.eth.subscribe('newBlockHeaders');\n\t\t\tblockSubscription.on('data', block => {\n\t\t\t\tsetLatestBlock(`Latest Block: ${block.number}`);\n\t\t\t});\n\t\t}\n\n\t\tgetChainId();\n\t\tgetLatestBlock();\n\t}, [web3]);\n\n\tasync function requestAccounts() {\n\t\tif (web3 === null) {\n\t\t\treturn;\n\t\t}\n\n\t\tawait window.ethereum.request({ method: 'eth_requestAccounts' });\n\t\tdocument.getElementById('requestAccounts')?.remove();\n\n\t\tconst allAccounts = await web3.eth.getAccounts();\n\t\tsetAccounts(allAccounts);\n\t\tsetConnectedAccount(`Account: ${allAccounts[0]}`);\n\t}\n\treturn (\n\t\t<>\n\t\t\t<div id=\"warn\" style={{ color: 'red' }}>\n\t\t\t\t{warning}\n\t\t\t</div>\n\t\t\t<div id=\"provider\">{provider}</div>\n\t\t\t<div id=\"chainId\">{chainId}</div>\n\t\t\t<div id=\"latestBlock\">{latestBlock}</div>\n\t\t\t<div id=\"connectedAccount\">{connectedAccount}</div>\n\t\t\t<div>\n\t\t\t\t<button\n\t\t\t\t\tonClick={() => requestAccounts()}\n\t\t\t\t\tid=\"requestAccounts\"\n\t\t\t\t\tdisabled={accountButtonDisabled}\n\t\t\t\t>\n\t\t\t\t\tRequest MetaMask Accounts\n\t\t\t\t</button>\n\t\t\t</div>\n\t\t</>\n\t);\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Creating Custom RPC Method in TypeScript\nDESCRIPTION: Implements a custom RPC method within the CustomRpcMethodsPlugin class in TypeScript, using the Web3.js requestManager to send the custom RPC call.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/13_advanced/custom_RPC.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Web3PluginBase } from 'web3';\n\nexport default class CustomRpcMethodsPlugin extends Web3PluginBase {\n\tpublic pluginNamespace = 'customRpcMethods';\n\n\tpublic async customRpcMethod() {\n\t\t// step 3\n\t\treturn this.requestManager.send({\n\t\t\t// plugin has access to web3.js internal features like request manager\n\t\t\tmethod: 'custom_rpc_method',\n\t\t\tparams: [],\n\t\t});\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Listening to EIP-1193 Events with web3.js in TypeScript\nDESCRIPTION: This code demonstrates how to register and handle EIP-1193 events with web3.js providers. It shows how to listen for message, connect, disconnect, accountsChanged, chainChanged, and error events, as well as how to use once() for one-time event listening and removeListener() to unregister from events.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/02_web3_providers_guide/events_listening.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Web3 } from 'web3';\n\nconst web3 = new Web3(/* PROVIDER*/);\n\nweb3.provider.on('message', () => {\n\t// ...\n});\n\nweb3.provider.on('connect', () => {\n\t// ...\n});\n\nweb3.provider.on('disconnect', () => {\n\t// ...\n});\n\nweb3.provider.on('accountsChanged', () => {\n\t// ...\n});\n\nweb3.provider.on('chainChanged', () => {\n\t// ...\n});\n\n// it is possible to catch errors that could happen in the underlying connection Socket with the `error` event\n// and it is also used to catch the error when max reconnection attempts is exceeded\n//  as in section: /docs/guides/web3_providers_guide/#error-message\nweb3.provider.on('error', () => {\n\t// ...\n});\n\n// ...\n\n// for every event above `once` can be used to register to the event only once\nweb3.provider.once('SUPPORTED_EVENT_NAME', () => {\n\t// ...\n});\n\n// And to unregister a listener `removeListener` could be called\nweb3.provider.removeListener('SUPPORTED_EVENT_NAME', () => {\n\t// ...\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Wallet with Random Accounts in JavaScript\nDESCRIPTION: This snippet demonstrates how to create a Web3.js wallet with two new random accounts and use the second account to sign a message. It showcases wallet creation, account access, and message signing.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/03_wallet/index.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// create a wallet with 2 new random accounts\nconst wallet = web3.eth.accounts.wallet.create(2);\n\nconsole.log(wallet);\n/* â†³\nWallet(2) [\n  {\n    address: '0xaaD0d33dc9800258c1265bdDA47b9266472144F7',\n    privateKey: '<redacted>',\n    signTransaction: [Function: signTransaction],\n    sign: [Function: sign],\n    encrypt: [Function: encrypt]\n  },\n  {\n    address: '0x359caa845324802C64B97544460F31fba4f9B9ba',\n    privateKey: '<redacted>',\n    signTransaction: [Function: signTransaction],\n    sign: [Function: sign],\n    encrypt: [Function: encrypt]\n  },\n  _accountProvider: {\n    create: [Function: createWithContext],\n    privateKeyToAccount: [Function: privateKeyToAccountWithContext],\n    decrypt: [Function: decryptWithContext]\n  },\n  _addressMap: Map(2) {\n    '0xaad0d33dc9800258c1265bdda47b9266472144f7' => 0,\n    '0x359caa845324802c64b97544460f31fba4f9b9ba' => 1\n  },\n  _defaultKeyName: 'web3js_wallet'\n]\n*/\n\n// use the second account in the wallet to sign a message\nconst signature = wallet[1].sign('Hello, Web3.js!');\n// wallet accounts can also be accessed with the \"at\" and \"get\" methods\n// wallet.at(1).sign(\"Hello, Web3.js!\")\n// wallet.get(1).sign(\"Hello, Web3.js!\")\nconsole.log(signature);\n/* â†³\n{\n  message: 'Hello, Web3.js!',\n  messageHash: '0xc0f5f7ee704f1473acbb7959f5f925d787a9aa76dccc1b4914cbe77c09fd68d5',\n  v: '0x1c',\n  r: '0xd90fc42ff83fdf0ec6778c1c27f3051439de7844eacf06195c761fece19ed77d',\n  s: '0x729693156c48d07df9f4970772049dbe24ebce979765f788974a13c318b2834a',\n  signature: '0xd90fc42ff83fdf0ec6778c1c27f3051439de7844eacf06195c761fece19ed77d729693156c48d07df9f4970772049dbe24ebce979765f788974a13c318b2834a1c'\n}\n*/\n```\n\n----------------------------------------\n\nTITLE: Sending Ethereum Transactions with Web3.js and Wagmi\nDESCRIPTION: This component demonstrates how to use the useWeb3jsSigner hook to send transactions to the Ethereum mainnet. It includes wallet connection functionality from Wagmi and executes a transaction when a user connects their wallet.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/16_wagmi_usage/index.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { mainnet } from 'wagmi/chains';\nimport { useAccount, useConnect } from 'wagmi';\nimport { useWeb3jsSigner } from '../web3/useWeb3js';\nimport { useEffect } from 'react';\n\nfunction SendTransaction() {\n\tconst account = useAccount();\n\tconst { connectors, connect } = useConnect();\n\tconst web3js = useWeb3jsSigner({ chainId: mainnet.id });\n\n\tuseEffect(() => {\n\t\tif (account && account.address) {\n\t\t\tweb3js.eth\n\t\t\t\t.sendTransaction({\n\t\t\t\t\tfrom: account.address,\n\t\t\t\t\tto: '0x', // some address\n\t\t\t\t\tvalue: '0x1', // set your value\n\t\t\t\t})\n\t\t\t\t.then(console.log)\n\t\t\t\t.catch(console.error);\n\t\t}\n\t}, [account]);\n\n\treturn (\n\t\t<>\n\t\t\t{connectors.map(connector => (\n\t\t\t\t<button key={connector.uid} onClick={() => connect({ connector })} type=\"button\">\n\t\t\t\t\t{connector.name}\n\t\t\t\t</button>\n\t\t\t))}\n\t\t</>\n\t);\n}\n\nexport default SendTransaction;\n```\n\n----------------------------------------\n\nTITLE: Using Access List in EIP-2930 Transaction with web3.js\nDESCRIPTION: This code snippet demonstrates how to use an access list in an EIP-2930 transaction using web3.js. It includes deploying a contract, creating an access list, and sending a transaction with the access list. This example showcases the gas optimization feature of EIP-2930 transactions.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/10_web3_eth/eth.md#2025-04-21_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Web3 } from 'web3';\n\nimport { GreeterAbi, GreeterBytecode } from './fixture/Greeter';\n\nconst web3 = new Web3('http://localhost:8545');\n\nasync function test() {\n\tconst privateKey = 'YOUR PRIVATE KEY HERE';\n\t// add private key to wallet to have auto-signing transactions feature\n\tconst account = web3.eth.accounts.privateKeyToAccount(privateKey);\n\tweb3.eth.accounts.wallet.add(account);\n\n\t// deploy contract\n\tconst contract = new web3.eth.Contract(GreeterAbi);\n\tconst deployedContract = await contract\n\t\t.deploy({\n\t\t\tdata: GreeterBytecode,\n\t\t\targuments: ['My Greeting'],\n\t\t})\n\t\t.send({ from: account.address });\n\tdeployedContract.defaultAccount = account.address;\n\n\tconst transaction = {\n\t\tfrom: account.address,\n\t\tto: deployedContract.options.address,\n\t\tdata: '0xcfae3217', // greet function call data encoded\n\t};\n\tconst { accessList } = await web3.eth.createAccessList(transaction, 'latest');\n\n\tconsole.log('AccessList:', accessList);\n\t// AccessList: [\n\t//   {\n\t//     address: '0xce1f86f87bd3b8f32f0fb432f88e848f3a957ed7',\n\t//     storageKeys: [\n\t//       '0x0000000000000000000000000000000000000000000000000000000000000001'\n\t//     ]\n\t//   }\n\t// ]\n\n\t// create transaction object with accessList\n\tconst tx = {\n\t\tfrom: account.address,\n\t\tto: deployedContract.options.address,\n\t\tgasLimit: BigInt(46000),\n\t\ttype: BigInt(1), // <- specify type\n\t\taccessList,\n\t\tdata: '0xcfae3217',\n\t\t// gasPrice - you can specify this property directly or web3js will fill this field automatically\n\t};\n\n\t// send transaction\n\tconst receipt = await web3.eth.sendTransaction(tx);\n\n\tconsole.log('Receipt:', receipt);\n\t// Receipt: {\n\t//   blockHash: '0xc7b9561100c8ff6f1cde7a05916e86b7d037b2fdba86b0870e842d1814046e4b',\n\t//   blockNumber: 43n,\n\t//   cumulativeGasUsed: 26795n,\n\t//   effectiveGasPrice: 2504325716n,\n\t//   from: '0xe2597eb05cf9a87eb1309e86750c903ec38e527e',\n\t//   gasUsed: 26795n,\n\t//   logs: [],\n\t//   logsBloom: '0x...00000000000',\n\t//   status: 1n,\n\t//   to: '0xce1f86f87bd3b8f32f0fb432f88e848f3a957ed7',\n\t//   transactionHash: '0xa49753be1e2bd22c2a8e2530726614c808838bb0ebbed72809bbcb34f178799a',\n\t//   transactionIndex: 0n,\n\t//   type: 1n\n\t// }\n}\n(async () => {\n\tawait test();\n})();\n```\n\n----------------------------------------\n\nTITLE: Using EIP-6963 Provider Discovery in Web3.js\nDESCRIPTION: Demonstrates how to discover multiple injected providers using Web3.js, subscribe to provider discovery events, and inject a selected provider into a Web3 instance for interaction with the Ethereum blockchain.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/02_web3_providers_guide/eip6963.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n//Assuming multiple providers are installed in browser.\n\nimport { Web3 } from 'web3';\n\n// Following will subscribe to event that will be triggered when providers map is updated.\n\nWeb3.onNewProviderDiscovered(provider => {\n\tconsole.log(provider.detail); // This will log the populated providers map object, provider.detail has Map of all providers yet discovered\n\t// add logic here for updating UI of your DApp\n});\n\n// Call the function and wait for the promise to resolve\nlet providers = await Web3.requestEIP6963Providers();\nfor (const [key, value] of providers) {\n\tconsole.log(value);\n\n\t/* Based on your DApp's logic show use list of providers and get selected provider's UUID from user for injecting its EIP6963ProviderDetail.provider EIP1193 object into web3 object */\n\n\tif (value.info.name === 'MetaMask') {\n\t\tconst web3 = new Web3(value.provider);\n\n\t\t// now you can use web3 object with injected provider\n\t\tconsole.log(\n\t\t\tawait web3.eth.getTransaction(\n\t\t\t\t'0x82512812c11f56aa2474a16d5cc8916b73cd6ed96bf9b8defb3499ec2d9070cb',\n\t\t\t),\n\t\t);\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a React Component for Web3.js Integration with Ethereum Providers\nDESCRIPTION: This snippet demonstrates a React component that uses Web3.js to connect to Ethereum providers, fetch account balances, and update in real-time. It handles provider selection, account changes, and balance updates on new block creation.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/07_dapps/intermediate-dapp.md#2025-04-21_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useEffect, useState } from 'react';\nimport { type EIP6963ProviderDetail, Web3 } from 'web3';\n\nimport { useProviders } from './useProviders';\n\nfunction App() {\n\t// get the dynamic list of providers\n\tconst providers = useProviders();\n\n\t// application state\n\tconst [web3, setWeb3] = useState<Web3 | undefined>(undefined);\n\tconst [accounts, setAccounts] = useState<string[]>([]);\n\tconst [balances, setBalances] = useState<Map<string, number>>(new Map());\n\n\t// click-handler for provider buttons\n\tfunction setProvider(provider: EIP6963ProviderDetail) {\n\t\tconst web3: Web3 = new Web3(provider.provider);\n\t\tsetWeb3(web3);\n\t\tweb3.eth.requestAccounts().then(setAccounts);\n\t\tprovider.provider.on('accountsChanged', setAccounts);\n\t\tprovider.provider.on('chainChanged', () => window.location.reload());\n\t}\n\n\t// update account balances\n\tuseEffect(() => {\n\t\tasync function updateBalances(web3: Web3) {\n\t\t\tconst balances = new Map<string, number>();\n\t\t\tfor (const account of accounts) {\n\t\t\t\tconst balance = await web3.eth.getBalance(account);\n\t\t\t\tbalances.set(account, parseFloat(web3.utils.fromWei(balance, 'ether')));\n\t\t\t}\n\n\t\t\tsetBalances(balances);\n\t\t}\n\n\t\tif (web3 === undefined) {\n\t\t\treturn;\n\t\t}\n\n\t\t// set balances for list of accounts\n\t\tupdateBalances(web3);\n\n\t\t// update balances when a new block is created\n\t\tconst subscription = web3.eth.subscribe('newBlockHeaders').then(subscription => {\n\t\t\tsubscription.on('data', () => updateBalances(web3));\n\t\t\treturn subscription;\n\t\t});\n\n\t\treturn () => {\n\t\t\tsubscription.then(subscription => subscription.unsubscribe());\n\t\t};\n\t}, [accounts, web3]);\n\n\treturn (\n\t\t<>\n\t\t\t{web3 === undefined\n\t\t\t\t? // no provider set, display list of available providers\n\t\t\t\t  providers.map((provider: EIP6963ProviderDetail) => {\n\t\t\t\t\t\t// for each provider, display a button to connect to that provider\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<div key={provider.info.uuid}>\n\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\tonClick={() => setProvider(provider)}\n\t\t\t\t\t\t\t\t\tstyle={{ display: 'inline-flex', alignItems: 'center' }}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<img\n\t\t\t\t\t\t\t\t\t\tsrc={provider.info.icon}\n\t\t\t\t\t\t\t\t\t\talt={provider.info.name}\n\t\t\t\t\t\t\t\t\t\twidth=\"35\"\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t<span>{provider.info.name}</span>\n\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t);\n\t\t\t\t  })\n\t\t\t\t: accounts.map((address: string, ndx: number) => {\n\t\t\t\t\t\t// provider set, list accounts and balances\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<div key={address}>\n\t\t\t\t\t\t\t\t<div>Account: {address}</div>\n\t\t\t\t\t\t\t\t<div>Balance: {`${balances.get(address)}`}</div>\n\t\t\t\t\t\t\t\t{ndx !== accounts.length - 1 ? <br /> : null}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t);\n\t\t\t\t  })}\n\t\t</>\n\t);\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing MetaMask Message Signing in React TypeScript\nDESCRIPTION: A React component that connects to MetaMask, enables message signing with Web3.js, and handles Ethereum interactions. The component manages state for Web3 instance, accounts, chain information, and message signing functionality.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/07_dapps/metamask-react.md#2025-04-21_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useEffect, useState } from 'react';\nimport { Web3 } from 'web3';\n\nfunction App() {\n\tconst [web3, setWeb3] = useState<Web3 | null>(null);\n\tconst [warning, setWarning] = useState<string | null>(null);\n\tconst [provider, setProvider] = useState<string | null>(null);\n\tconst [chainId, setChainId] = useState<string | null>(null);\n\tconst [latestBlock, setLatestBlock] = useState<string | null>(null);\n\tconst [accountButtonDisabled, setAccountButtonDisabled] = useState<boolean>(false);\n\tconst [accounts, setAccounts] = useState<string[] | null>(null);\n\tconst [connectedAccount, setConnectedAccount] = useState<string | null>(null);\n\tconst [messageToSign, setMessageToSign] = useState<string | null>(null);\n\tconst [signingResult, setSigningResult] = useState<string | null>(null);\n\n\tuseEffect(() => {\n\t\tif (window.ethereum) {\n\t\t\tsetWeb3(new Web3(window.ethereum));\n\t\t\tif (window.ethereum.isMetaMask) {\n\t\t\t\tsetProvider('Connected to Ethereum with MetaMask.');\n\t\t\t} else {\n\t\t\t\tsetProvider('Non-MetaMask Ethereum provider detected.');\n\t\t\t}\n\t\t} else {\n\t\t\tsetWarning('Please install MetaMask');\n\t\t\tsetAccountButtonDisabled(true);\n\t\t}\n\t}, []);\n\n\tuseEffect(() => {\n\t\tasync function getChainId() {\n\t\t\tif (web3 === null) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tsetChainId(`Chain ID: ${await web3.eth.getChainId()}`);\n\t\t}\n\n\t\tasync function getLatestBlock() {\n\t\t\tif (web3 === null) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tsetLatestBlock(`Latest Block: ${await web3.eth.getBlockNumber()}`);\n\t\t\tconst blockSubscription = await web3.eth.subscribe('newBlockHeaders');\n\t\t\tblockSubscription.on('data', block => {\n\t\t\t\tsetLatestBlock(`Latest Block: ${block.number}`);\n\t\t\t});\n\t\t}\n\n\t\tgetChainId();\n\t\tgetLatestBlock();\n\t}, [web3]);\n\n\tasync function requestAccounts() {\n\t\tif (web3 === null) {\n\t\t\treturn;\n\t\t}\n\t\tawait window.ethereum.request({ method: 'eth_requestAccounts' });\n\t\tdocument.getElementById('requestAccounts')?.remove();\n\t\tconst allAccounts = await web3.eth.getAccounts();\n\t\tsetAccounts(allAccounts);\n\t\tsetConnectedAccount(`Account: ${allAccounts[0]}`);\n\t}\n\n\tasync function signMessage() {\n\t\tif (web3 === null || accounts === null || messageToSign === null) {\n\t\t\treturn;\n\t\t}\n\t\tconst signature = await web3.eth.personal.sign(messageToSign, accounts[0], '');\n\t\tsetSigningResult(signature);\n\t}\n\n\treturn (\n\t\t<>\n\t\t\t<div id=\"warn\" style={{ color: 'red' }}>\n\t\t\t\t{warning}\n\t\t\t</div>\n\t\t\t<div id=\"provider\">{provider}</div>\n\t\t\t<div id=\"chainId\">{chainId}</div>\n\t\t\t<div id=\"latestBlock\">{latestBlock}</div>\n\t\t\t<div id=\"connectedAccount\">{connectedAccount}</div>\n\t\t\t<div>\n\t\t\t\t<button\n\t\t\t\t\tonClick={() => requestAccounts()}\n\t\t\t\t\tid=\"requestAccounts\"\n\t\t\t\t\tdisabled={accountButtonDisabled}\n\t\t\t\t>\n\t\t\t\t\tRequest MetaMask Accounts\n\t\t\t\t</button>\n\t\t\t</div>\n\t\t\t<div>\n\t\t\t\t<input\n\t\t\t\t\tonChange={e => {\n\t\t\t\t\t\tsetMessageToSign(e.target.value);\n\t\t\t\t\t}}\n\t\t\t\t\tid=\"messageToSign\"\n\t\t\t\t\tplaceholder=\"Message to Sign\"\n\t\t\t\t\tdisabled={connectedAccount === null}\n\t\t\t\t/>\n\t\t\t\t<button\n\t\t\t\t\tonClick={() => signMessage()}\n\t\t\t\t\tid=\"signMessage\"\n\t\t\t\t\tdisabled={connectedAccount === null}\n\t\t\t\t>\n\t\t\t\t\tSign Message\n\t\t\t\t</button>\n\t\t\t\t<div id=\"signingResult\">{signingResult}</div>\n\t\t\t</div>\n\t\t</>\n\t);\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Interacting with Deployed Smart Contract using Web3.js\nDESCRIPTION: Shows how to create a Contract instance for interacting with an already deployed smart contract. The contract address is required in this case.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/05_smart_contracts/mastering_smart_contracts.md#2025-04-21_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Contract } from 'web3-eth-contract';\n\nconst myContract = new Contract(abi, smartContractAddress, options);\n// if there is no options to be passed you can write:\nconst myContract = new Contract(abi, smartContractAddress);\n```\n\n----------------------------------------\n\nTITLE: Creating and Managing Wallets\nDESCRIPTION: Examples of creating random accounts and adding existing accounts using private keys to a Web3 wallet.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/01_getting_started/quickstart.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// create random wallet with 1 account\nweb3.eth.accounts.wallet.create(1);\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// the private key must start with the \"0x\" prefix\nconst account = web3.eth.accounts.wallet.add(\n\t'0x50d349f5cf627d44858d6fcb6fbf15d27457d35c58ba2d5cfeaf455f25db5bec'\n);\n\nconsole.log(account[0].address);\n//â†³ 0xcE6A5235d6033341972782a15289277E85E5b305\n\nconsole.log(account[0].privateKey);\n//â†³ 0x50d349f5cf627d44858d6fcb6fbf15d27457d35c58ba2d5cfeaf455f25db5bec\n```\n\n----------------------------------------\n\nTITLE: Initializing Basic Web3 Provider\nDESCRIPTION: Demonstrates basic initialization of a Web3 instance with a provider and making a network call.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/02_web3_providers_guide/index.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Web3 } from 'web3';\n\nconst web3 = new Web3(/* PROVIDER*/);\n\n// calling any method that interacts with the network will use the supplied provider\nawait web3.eth.getBlockNumber();\n```\n\n----------------------------------------\n\nTITLE: Signing Messages with MetaMask and Web3.js\nDESCRIPTION: This HTML snippet extends the previous example to include functionality for signing messages using the connected MetaMask account. It demonstrates how to use Web3.js to sign messages and display the results.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/07_dapps/metamask-vanilla.md#2025-04-21_snippet_6\n\nLANGUAGE: HTML\nCODE:\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n\t<head>\n\t\t<meta charset=\"UTF-8\" />\n\t\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n\t\t<title>Web3.js MetaMask Tutorial</title>\n\t\t<!-- import Web3.js -->\n\t\t<script src=\"https://cdn.jsdelivr.net/npm/web3@latest/dist/web3.min.js\"></script>\n\t</head>\n\t<body>\n\t\t<!-- placeholders -->\n\t\t<div id=\"provider\"></div>\n\t\t<div id=\"chainId\"></div>\n\t\t<div id=\"latestBlock\"></div>\n\t\t<div id=\"connectedAccount\"></div>\n\t\t<div id=\"warn\" style=\"color: red\"></div>\n\n\t\t<div>\n\t\t\t<button id=\"requestAccounts\">Request MetaMask Accounts</button>\n\t\t</div>\n\n\t\t<div>\n\t\t\t<input id=\"messageToSign\" placeholder=\"Message to Sign\" disabled />\n\t\t\t<button id=\"signMessage\" disabled>Sign Message</button>\n\t\t\t<div id=\"signingResult\"></div>\n\t\t</div>\n\t\t<script type=\"module\">\n\t\t\t// ensure that there is an injected the Ethereum provider\n\t\t\tif (window.ethereum) {\n\t\t\t\t// use the injected Ethereum provider to initialize Web3.js\n\t\t\t\tconst web3 = new Web3(window.ethereum);\n\n\t\t\t\t// check if Ethereum provider comes from MetaMask\n\t\t\t\tif (window.ethereum.isMetaMask) {\n\t\t\t\t\tdocument.getElementById('provider').innerText =\n\t\t\t\t\t\t'Connected to Ethereum with MetaMask.';\n\t\t\t\t} else {\n\t\t\t\t\tdocument.getElementById('provider').innerText =\n\t\t\t\t\t\t'Non-MetaMask Ethereum provider detected.';\n\t\t\t\t}\n\n\t\t\t\t// get chain ID and populate placeholder\n\t\t\t\tdocument.getElementById(\n\t\t\t\t\t'chainId',\n\t\t\t\t).innerText = `Chain ID: ${await web3.eth.getChainId()}`;\n\t\t\t\t// get latest block and populate placeholder\n\t\t\t\tdocument.getElementById(\n\t\t\t\t\t'latestBlock',\n\t\t\t\t).innerText = `Latest Block: ${await web3.eth.getBlockNumber()}`;\n\n\t\t\t\t// subscribe to new blocks and update UI when a new block is created\n\t\t\t\tconst blockSubscription = await web3.eth.subscribe('newBlockHeaders');\n\t\t\t\tblockSubscription.on('data', block => {\n\t\t\t\t\tdocument.getElementById(\n\t\t\t\t\t\t'latestBlock',\n\t\t\t\t\t).innerText = `Latest Block: ${block.number}`;\n\t\t\t\t});\n\n\t\t\t\t// click event for \"Request MetaMask Accounts\" button\n\t\t\t\tdocument.getElementById('requestAccounts').addEventListener('click', async () => {\n\t\t\t\t\t// request accounts from MetaMask\n\t\t\t\t\tawait window.ethereum.request({ method: 'eth_requestAccounts' });\n\t\t\t\t\tdocument.getElementById('requestAccounts').remove();\n\n\t\t\t\t\t// get list of accounts\n\t\t\t\t\tconst accounts = await web3.eth.getAccounts();\n\t\t\t\t\t// get the first account and populate placeholder\n\t\t\t\t\tdocument.getElementById(\n\t\t\t\t\t\t'connectedAccount',\n\t\t\t\t\t).innerText = `Account: ${accounts[0]}`;\n\n\t\t\t\t\t// enable signing input\n\t\t\t\t\tconst messageToSign = document.getElementById('messageToSign');\n\t\t\t\t\tconst sign = document.getElementById('signMessage');\n\t\t\t\t\tmessageToSign.disabled = false;\n\t\t\t\t\tsign.disabled = false;\n\n\t\t\t\t\t// click event for \"Sign Message\" button\n\t\t\t\t\tsign.addEventListener('click', async () => {\n\t\t\t\t\t\t// sign message with first MetaMask account\n\t\t\t\t\t\tconst signature = await web3.eth.personal.sign(\n\t\t\t\t\t\t\tmessageToSign.value,\n\t\t\t\t\t\t\taccounts[0],\n\t\t\t\t\t\t\t'',\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\t// update placeholder with signed message\n\t\t\t\t\t\tdocument.getElementById(\n\t\t\t\t\t\t\t'signingResult',\n\t\t\t\t\t\t).innerText = `Signed Message: ${signature}`;\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t// no Ethereum provider - instruct user to install MetaMask\n\t\t\t\tdocument.getElementById('warn').innerHTML =\n\t\t\t\t\t\"Please <a href='https://metamask.io/download/'>install MetaMask</a>.\";\n\t\t\t\tdocument.getElementById('requestAccounts').disabled = true;\n\t\t\t}\n\t\t</script>\n\t</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Interacting with Smart Contract using Web3.js\nDESCRIPTION: Script that demonstrates how to interact with a deployed smart contract using Web3.js. It reads and updates contract state, showing both call and send operations.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/05_smart_contracts/smart_contracts_guide.md#2025-04-21_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nconst { Web3 } = require('web3');\nconst path = require('path');\nconst fs = require('fs');\n\nconst web3 = new Web3('http://127.0.0.1:8545/');\n\n// Read the contract address from the file system\nconst deployedAddressPath = path.join(__dirname, 'MyContractAddress.txt');\nconst deployedAddress = fs.readFileSync(deployedAddressPath, 'utf8');\n\n// Create a new contract object using the ABI and address\nconst abi = require('./MyContractAbi.json');\nconst myContract = new web3.eth.Contract(abi, deployedAddress);\nmyContract.handleRevert = true;\n\nasync function interact() {\n\tconst accounts = await web3.eth.getAccounts();\n\tconst defaultAccount = accounts[0];\n\n\ttry {\n\t\t// Get the current value of my number\n\t\tconst myNumber = await myContract.methods.myNumber().call();\n\t\tconsole.log('myNumber value: ' + myNumber);\n\n\t\t// Increment my number\n\t\tconst receipt = await myContract.methods.setMyNumber(BigInt(myNumber) + 1n).send({\n\t\t\tfrom: defaultAccount,\n\t\t\tgas: 1000000,\n\t\t\tgasPrice: '10000000000',\n\t\t});\n\t\tconsole.log('Transaction Hash: ' + receipt.transactionHash);\n\n\t\t// Get the updated value of my number\n\t\tconst myNumberUpdated = await myContract.methods.myNumber().call();\n\t\tconsole.log('myNumber updated value: ' + myNumberUpdated);\n\t} catch (error) {\n\t\tconsole.error(error);\n\t}\n}\n\ninteract();\n```\n\n----------------------------------------\n\nTITLE: Connecting to Hardhat Network Using Web3.js\nDESCRIPTION: A Node.js script that initializes Web3.js with the Hardhat development network URL and retrieves the chain ID to verify the connection.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/05_smart_contracts/smart_contracts_guide.md#2025-04-21_snippet_10\n\nLANGUAGE: js\nCODE:\n```\nconst { Web3 } = require('web3');\n\nconst web3 = new Web3('http://127.0.0.1:8545/');\n\n// Log the chain ID to the console\nweb3.eth\n\t.getChainId()\n\t.then(result => {\n\t\tconsole.log('Chain ID: ' + result);\n\t})\n\t.catch(error => {\n\t\tconsole.error(error);\n\t});\n```\n\n----------------------------------------\n\nTITLE: Writing a Solidity Smart Contract\nDESCRIPTION: A simple Solidity smart contract that defines a variable 'myNumber' with functions to get and set its value. It includes a constructor that initializes the value.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/05_smart_contracts/smart_contracts_guide.md#2025-04-21_snippet_3\n\nLANGUAGE: js\nCODE:\n```\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ncontract MyContract {\n  uint256 public myNumber;\n\n  constructor(uint256 _myNumber) {\n    myNumber = _myNumber;\n  }\n\n  function setMyNumber(uint256 _myNumber) public {\n    myNumber = _myNumber;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Requesting MetaMask Account Access with Web3.js\nDESCRIPTION: This HTML snippet demonstrates how to connect to MetaMask, request account access, and display account information using Web3.js. It includes checks for MetaMask availability and chain information display.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/07_dapps/metamask-vanilla.md#2025-04-21_snippet_5\n\nLANGUAGE: HTML\nCODE:\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n\t<head>\n\t\t<meta charset=\"UTF-8\" />\n\t\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n\t\t<title>Web3.js MetaMask Tutorial</title>\n\t\t<!-- import Web3.js -->\n\t\t<script src=\"https://cdn.jsdelivr.net/npm/web3@latest/dist/web3.min.js\"></script>\n\t</head>\n\t<body>\n\t\t<!-- placeholders -->\n\t\t<div id=\"provider\"></div>\n\t\t<div id=\"chainId\"></div>\n\t\t<div id=\"latestBlock\"></div>\n\t\t<div id=\"connectedAccount\"></div>\n\t\t<div id=\"warn\" style=\"color: red\"></div>\n\n\t\t<div>\n\t\t\t<button id=\"requestAccounts\">Request MetaMask Accounts</button>\n\t\t</div>\n\t\t<script type=\"module\">\n\t\t\t// ensure that there is an injected the Ethereum provider\n\t\t\tif (window.ethereum) {\n\t\t\t\t// use the injected Ethereum provider to initialize Web3.js\n\t\t\t\tconst web3 = new Web3(window.ethereum);\n\n\t\t\t\t// check if Ethereum provider comes from MetaMask\n\t\t\t\tif (window.ethereum.isMetaMask) {\n\t\t\t\t\tdocument.getElementById('provider').innerText =\n\t\t\t\t\t\t'Connected to Ethereum with MetaMask.';\n\t\t\t\t} else {\n\t\t\t\t\tdocument.getElementById('provider').innerText =\n\t\t\t\t\t\t'Non-MetaMask Ethereum provider detected.';\n\t\t\t\t}\n\n\t\t\t\t// get chain ID and populate placeholder\n\t\t\t\tdocument.getElementById(\n\t\t\t\t\t'chainId',\n\t\t\t\t).innerText = `Chain ID: ${await web3.eth.getChainId()}`;\n\t\t\t\t// get latest block and populate placeholder\n\t\t\t\tdocument.getElementById(\n\t\t\t\t\t'latestBlock',\n\t\t\t\t).innerText = `Latest Block: ${await web3.eth.getBlockNumber()}`;\n\n\t\t\t\t// subscribe to new blocks and update UI when a new block is created\n\t\t\t\tconst blockSubscription = await web3.eth.subscribe('newBlockHeaders');\n\t\t\t\tblockSubscription.on('data', block => {\n\t\t\t\t\tdocument.getElementById(\n\t\t\t\t\t\t'latestBlock',\n\t\t\t\t\t).innerText = `Latest Block: ${block.number}`;\n\t\t\t\t});\n\n\t\t\t\t// click event for \"Request MetaMask Accounts\" button\n\t\t\t\tdocument.getElementById('requestAccounts').addEventListener('click', async () => {\n\t\t\t\t\t// request accounts from MetaMask\n\t\t\t\t\tawait window.ethereum.request({ method: 'eth_requestAccounts' });\n\t\t\t\t\tdocument.getElementById('requestAccounts').remove();\n\n\t\t\t\t\t// get list of accounts\n\t\t\t\t\tconst accounts = await web3.eth.getAccounts();\n\t\t\t\t\t// get the first account and populate placeholder\n\t\t\t\t\tdocument.getElementById(\n\t\t\t\t\t\t'connectedAccount',\n\t\t\t\t\t).innerText = `Account: ${accounts[0]}`;\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t// no Ethereum provider - instruct user to install MetaMask\n\t\t\t\tdocument.getElementById('warn').innerHTML =\n\t\t\t\t\t\"Please <a href='https://metamask.io/download/'>install MetaMask</a>.\";\n\t\t\t\tdocument.getElementById('requestAccounts').disabled = true;\n\t\t\t}\n\t\t</script>\n\t</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Adding Accounts to an Existing Wallet in JavaScript\nDESCRIPTION: This snippet demonstrates how to add new accounts to an existing Web3.js wallet. It shows three methods: creating a wallet with one random account, adding another random account using the wallet's 'create' method, and creating a new account separately and adding it to the wallet.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/03_wallet/index.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// create a wallet with a single random accounts\nconst wallet = web3.eth.accounts.wallet.create(1);\n\nconsole.log(wallet);\n/* â†³\nWallet(1) [\n  {\n    address: '0x6680D50C2165e8F1841D9CdaA42C2F1b949a39f2',\n    privateKey: '<redacted>',\n    signTransaction: [Function: signTransaction],\n    sign: [Function: sign],\n    encrypt: [Function: encrypt]\n  },\n  _accountProvider: {\n    create: [Function: createWithContext],\n    privateKeyToAccount: [Function: privateKeyToAccountWithContext],\n    decrypt: [Function: decryptWithContext]\n  },\n  _addressMap: Map(1) { '0x6680d50c2165e8f1841d9cdaa42c2f1b949a39f2' => 0 },\n  _defaultKeyName: 'web3js_wallet'\n]\n*/\n\n// add a new account to the wallet with the wallet's \"create\" method\nwallet.create(1);\n\nconsole.log(wallet);\n/* â†³\nWallet(2) [\n  {\n    address: '0x6680D50C2165e8F1841D9CdaA42C2F1b949a39f2',\n    privateKey: '<redacted>',\n    signTransaction: [Function: signTransaction],\n    sign: [Function: sign],\n    encrypt: [Function: encrypt]\n  },\n  {\n    address: '0x5eD8a3ED6Bb1f32e4B479380cFAcf43C49a5440A',\n    privateKey: '<redacted>',\n    signTransaction: [Function: signTransaction],\n    sign: [Function: sign],\n    encrypt: [Function: encrypt]\n  },\n  _accountProvider: {\n    create: [Function: createWithContext],\n    privateKeyToAccount: [Function: privateKeyToAccountWithContext],\n    decrypt: [Function: decryptWithContext]\n  },\n  _addressMap: Map(2) {\n    '0x6680d50c2165e8f1841d9cdaa42c2f1b949a39f2' => 0,\n    '0x5ed8a3ed6bb1f32e4b479380cfacf43c49a5440a' => 1\n  },\n  _defaultKeyName: 'web3js_wallet'\n]\n*/\n\n// create a new account and add it to the wallet\nconst newAccount = web3.eth.accounts.create();\nwallet.add(newAccount);\n\nconsole.log(wallet);\n/* â†³\nWallet(3) [\n  {\n    address: '0x6680D50C2165e8F1841D9CdaA42C2F1b949a39f2',\n    privateKey: '<redacted>',\n    signTransaction: [Function: signTransaction],\n    sign: [Function: sign],\n    encrypt: [Function: encrypt]\n  },\n  {\n    address: '0x5eD8a3ED6Bb1f32e4B479380cFAcf43C49a5440A',\n    privateKey: '<redacted>',\n    signTransaction: [Function: signTransaction],\n    sign: [Function: sign],\n    encrypt: [Function: encrypt]\n  },\n  {\n    address: '0x3065Cf410Bd6A10c5FF3Df8f60b82fF5Ee5db18a',\n    privateKey: '<redacted>',\n    signTransaction: [Function: signTransaction],\n    sign: [Function: sign],\n    encrypt: [Function: encrypt]\n  },\n  _accountProvider: {\n    create: [Function: createWithContext],\n    privateKeyToAccount: [Function: privateKeyToAccountWithContext],\n    decrypt: [Function: decryptWithContext]\n  },\n  _addressMap: Map(3) {\n    '0x6680d50c2165e8f1841d9cdaa42c2f1b949a39f2' => 0,\n    '0x5ed8a3ed6bb1f32e4b479380cfacf43c49a5440a' => 1,\n    '0x3065cf410bd6a10c5ff3df8f60b82ff5ee5db18a' => 2\n  },\n  _defaultKeyName: 'web3js_wallet'\n]\n*/\n```\n\n----------------------------------------\n\nTITLE: Initializing Web3 with Remote Provider\nDESCRIPTION: Demonstrates how to initialize Web3.js using a remote provider like Alchemy, Infura, or QuickNode via HTTP endpoint. Requires an API key from the chosen provider service.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/02_web3_providers_guide/index.md#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Web3 } from 'web3';\nconst web3 = new Web3('https://eth-mainnet.alchemyapi.io/v2/your-api-key');\n```\n\n----------------------------------------\n\nTITLE: Writing to Smart Contracts\nDESCRIPTION: Example of writing data to a smart contract by sending a transaction.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/01_getting_started/quickstart.md#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n// address to send the token\nconst to = '0xcf185f2F3Fe19D82bFdcee59E3330FD7ba5f27ce';\n\n// value to transfer (1 with 18 decimals)\nconst value = web3.utils.toWei('1', 'ether');\n\n// send the transaction => return the Tx receipt\nconst txReceipt = await uniswapToken.methods.transfer(to, value).send({ from: account[0].address });\n\nconsole.log('Tx hash:', txReceipt.transactionHash);\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Return Format in Web3.js\nDESCRIPTION: Demonstrates how to set the default return format for numeric and bytes data types in Web3.js. Uses FMT_NUMBER.BIGINT for numbers and FMT_BYTES.HEX for bytes data.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/09_web3_config/index.md#2025-04-21_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Web3, FMT_NUMBER, FMT_BYTES } from 'web3';\n\nweb3.defaultReturnFormat = {\n\tnumber: FMT_NUMBER.BIGINT,\n\tbytes: FMT_BYTES.HEX,\n};\n```\n\n----------------------------------------\n\nTITLE: Sample Solidity Smart Contract\nDESCRIPTION: This is an example of a simple Solidity smart contract that stores and allows modification of a number. It includes a constructor and a function to set the number.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/05_smart_contracts/mastering_smart_contracts.md#2025-04-21_snippet_10\n\nLANGUAGE: solidity\nCODE:\n```\n// SPDX-License-Identifier: MIT\npragma solidity 0.8.0;\n\ncontract MyContract {\n    uint256 public myNumber;\n\n    constructor(uint256 _myNumber) {\n        myNumber = _myNumber;\n    }\n\n    function setMyNumber(uint256 _myNumber) public {\n        myNumber = _myNumber;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Instantiating Contract Objects in TypeScript\nDESCRIPTION: Shows how to create Contract instances using different approaches, including direct instantiation and using a Web3 instance.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/05_smart_contracts/mastering_smart_contracts.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Contract } from 'web3-eth-contract';\n\n// instantiating Contract directly with provider URL from Contract package\n// alternatively, you can instantiate the Contract without a provider and set it later using contract.setProvider()\nconst abi = [{...}];\nconst address = '0x...';\nconst contract = new Contract(abi, address { provider: 'http://127.0.0.1:8545' });\n\n// the provider can be set like this if not provided at the constructor:\ncontract.setProvider('http://127.0.0.1:7545');\n\n// using Contract from a web3 instance\nconst web3 = new Web3('http://localhost:8545');\nconst contract = new web3.eth.Contract(abi, address);\n// no need to pass the provider to this contract instance.\n// because it will have the same provider of the web3 instance.\n```\n\n----------------------------------------\n\nTITLE: Implementing Transaction Middleware in TypeScript for Web3.js\nDESCRIPTION: Example of a transaction middleware class that implements TransactionMiddleware interface to log transaction data before it's sent to the network.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/14_web3_plugin_guide/plugin_authors.md#2025-04-21_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nexport class TxnMiddleware implements TransactionMiddleware {\n\tpublic async processTransaction(\n\t\ttransaction: TransactionMiddlewareData,\n\t): Promise<TransactionMiddlewareData> {\n\t\tconst txObj = { ...transaction };\n\t\tconsole.log('Transaction data:', txObj);\n\t\treturn Promise.resolve(txObj);\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Ethereum Transfer Form Component in React/TypeScript\nDESCRIPTION: A React component that implements a form for transferring Ether between Ethereum addresses. Includes address validation, form state management, and transaction handling using Web3.js.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/07_dapps/intermediate-dapp.md#2025-04-21_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nimport { type ChangeEvent, type FormEvent, useEffect, useState } from 'react';\nimport { type Address, Web3 } from 'web3';\n\nfunction TransferForm({ address, web3 }: { address: Address; web3: Web3 }) {\n\tconst [isFormValid, setIsFormValid] = useState<boolean>(false);\n\tconst [transferTo, setTransferTo] = useState<string>('');\n\tconst [transferAmount, setTransferAmount] = useState<string>('');\n\n\tfunction isValidAddress(address: string): boolean {\n\t\treturn /^(0x)?[0-9a-fA-F]{40}$/.test(address);\n\t}\n\n\tuseEffect(() => {\n\t\tconst amount = parseFloat(transferAmount);\n\t\tsetIsFormValid(isValidAddress(transferTo) && !isNaN(amount) && amount > 0);\n\t}, [transferTo, transferAmount]);\n\n\tfunction transferFormChange(e: ChangeEvent<HTMLInputElement>): void {\n\t\tconst { name, value } = e.target;\n\n\t\tif (name === 'to') {\n\t\t\tsetTransferTo(value);\n\t\t} else if (name === 'amount') {\n\t\t\tsetTransferAmount(value);\n\t\t}\n\t}\n\n\tfunction transfer(e: FormEvent<HTMLFormElement>): void {\n\t\te.preventDefault();\n\n\t\tif (web3 === undefined) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst formData: FormData = new FormData(e.currentTarget);\n\n\t\tconst to: FormDataEntryValue | null = formData.get('to');\n\t\tif (to === null || !isValidAddress(to as string)) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst amount: FormDataEntryValue | null = formData.get('amount');\n\t\tif (amount === null) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst value: number = parseFloat(amount as string);\n\t\tif (isNaN(value) || value <= 0) {\n\t\t\treturn;\n\t\t}\n\n\t\tsetTransferTo('');\n\t\tsetTransferAmount('');\n\n\t\tweb3.eth.sendTransaction({\n\t\t\tfrom: address,\n\t\t\tto: to as string,\n\t\t\tvalue: web3.utils.toWei(value, 'ether'),\n\t\t});\n\t}\n\n\treturn (\n\t\t<form onSubmit={transfer}>\n\t\t\t<label>\n\t\t\t\tTransfer to:{' '}\n\t\t\t\t<input value={transferTo} onChange={transferFormChange} name=\"to\" type=\"text\" />\n\t\t\t</label>\n\n\t\t\t<span style={{ paddingRight: '5px' }}></span>\n\n\t\t\t<label>\n\t\t\t\tTransfer amount in ether:{' '}\n\t\t\t\t<input\n\t\t\t\t\tvalue={transferAmount === undefined ? '' : transferAmount.toString()}\n\t\t\t\t\tonChange={transferFormChange}\n\t\t\t\t\tname=\"amount\"\n\t\t\t\t\ttype=\"number\"\n\t\t\t\t/>\n\t\t\t</label>\n\n\t\t\t<span style={{ paddingRight: '5px' }}></span>\n\n\t\t\t<button type=\"submit\" disabled={!isFormValid}>\n\t\t\t\tTransfer\n\t\t\t</button>\n\t\t</form>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Module Augmentation Example for Web3.js Plugin\nDESCRIPTION: Example of implementing module augmentation for a Web3.js plugin to provide type safety and IntelliSense support when the plugin is registered by users.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/14_web3_plugin_guide/plugin_authors.md#2025-04-21_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Web3PluginBase } from 'web3';\n\nexport class CustomRpcMethodsPlugin extends Web3PluginBase {\n\tpublic pluginNamespace = 'customRpcMethods';\n\n\tpublic someMethod() {\n\t\treturn 'someValue';\n\t}\n}\n\n// Module Augmentation\ndeclare module 'web3' {\n\tinterface Web3Context {\n\t\tcustomRpcMethods: CustomRpcMethodsPlugin;\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Web3 Plugin in JavaScript\nDESCRIPTION: This snippet demonstrates how to create a basic Web3 plugin by extending the Web3PluginBase class. It includes defining a namespace and implementing a simple method for the plugin.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/14_web3_plugin_guide/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n//1. import the `Web3PluginBase` module\nimport { Web3PluginBase } from \"web3\";\n\n//2. Create a Class extending the `Web3Pluginbase`\nclass MyPlugin extends Web3PluginBase {\n\n    //3. Add a name to the plugin\n    pluginNamespace = \"pluginExample\";\n\n    //4. Create any methods with your desired functionality\n    async doSomething(){\n        console.log(\"Hello web3!\");\n        //send transactions\n        //initialize contracts\n        //deploy or interact with contracts\n        //add your own library, logic or functionality\n        //much more...\n    }\n}\n\nmodule.exports = MyPlugin;\n```\n\n----------------------------------------\n\nTITLE: Complete Custom Web3.js Subscription Implementation in TypeScript\nDESCRIPTION: Provides a full example of implementing and using a custom Web3.js subscription, including class definition, registration, subscription, and event handling.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/06_events_subscriptions/custom_subscriptions.md#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// Subscription class\nclass MyCustomSubscription extends Web3Subscription<\n\t{\n\t\t// here provide the type of the `data` that will be emitted by the node\n\t\tdata: string;\n\t},\n\t// here specify the types of the arguments that will be passed to the node when subscribing\n\t{\n\t\tcustomArg: string;\n\t}\n> {\n\tprotected _buildSubscriptionParams() {\n\t\t// the `someCustomSubscription` below is the name of the subscription provided by the node your are connected to.\n\t\treturn ['someCustomSubscription', this.args];\n\t}\n\n\tprotected formatSubscriptionResult(data: string) {\n\t\treturn format(data);\n\t}\n\n\tconstructor(\n\t\targs: { customArg: string },\n\t\toptions: {\n\t\t\tsubscriptionManager: Web3SubscriptionManager;\n\t\t\treturnFormat?: DataFormat;\n\t\t},\n\t) {\n\t\tsuper(args, options);\n\n\t\t// Additional initialization\n\t}\n}\n\n// Usage\n\nconst args = {\n\tcustomArg: 'hello custom',\n};\n\nconst CustomSubscriptions = {\n\t// the key (`custom`) is what you chose to use when you call `web3.subscriptionManager.subscribe`.\n\t// the value (`MyCustomSubscription`) is your class name.\n\tcustom: MyCustomSubscription,\n\t// you can have as many custom subscriptions as you like...\n\t// custom2: MyCustomSubscription2,\n\t// custom3: MyCustomSubscription3,\n};\n\nconst web3 = new Web3({\n\tprovider, // the provider that support the custom event that you like to subscribe to.\n\tregisteredSubscriptions: CustomSubscriptions,\n});\n\nconst sub = web3.subscriptionManager.subscribe('custom', args);\n\nsub.on('data', result => {\n\t// New data\n});\n\n/* Unsubscribe:\nIf you want to subscribe later based on some code logic:\n\nif () { await sub.subscribe(); }\n*/\n```\n\n----------------------------------------\n\nTITLE: Sending Legacy Transaction with web3.js\nDESCRIPTION: This code snippet demonstrates how to create and send a Legacy transaction using web3.js. It includes setting up a Web3 instance, adding a private key to the wallet, creating a transaction object with specific parameters, and sending the transaction.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/10_web3_eth/eth.md#2025-04-21_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Web3 } from 'web3';\n\nconst web3 = new Web3('http://localhost:8545');\n\nasync function test() {\n\tconst privateKey = 'YOUR PRIVATE KEY HERE';\n\t// add private key to wallet to have auto-signing transactions feature\n\tconst account = web3.eth.accounts.privateKeyToAccount(privateKey);\n\tweb3.eth.accounts.wallet.add(account);\n\n\t// create transaction object\n\tconst tx = {\n\t\tfrom: account.address,\n\t\tto: '0x27aa427c1d668ddefd7bc93f8857e7599ffd16ab',\n\t\tvalue: '0x1',\n\t\tgas: BigInt(21000),\n\t\tgasPrice: await web3.eth.getGasPrice(),\n\t\ttype: BigInt(0), // <- specify type\n\t};\n\n\t// send transaction\n\tconst receipt = await web3.eth.sendTransaction(tx);\n\n\tconsole.log('Receipt:', receipt);\n\t// Receipt: {\n\t//   blockHash: '0xc0f2fea359233b0843fb53255b8a7f42aa7b1aff53da7cbe78c45b5bac187ad4',\n\t//   blockNumber: 21n,\n\t//   cumulativeGasUsed: 21000n,\n\t//   effectiveGasPrice: 2569891347n,\n\t//   from: '0xe2597eb05cf9a87eb1309e86750c903ec38e527e',\n\t//   gasUsed: 21000n,\n\t//   logs: [],\n\t//   logsBloom: '0x0...00000',\n\t//   status: 1n,\n\t//   to: '0x27aa427c1d668ddefd7bc93f8857e7599ffd16ab',\n\t//   transactionHash: '0x0ffe880776f5631e4b64caf521bd01cd816dd2cc29e533bc56f392211856cf9a',\n\t//   transactionIndex: 0n,\n\t//   type: 0n\n\t// }\n}\n(async () => {\n\tawait test();\n})();\n```\n\n----------------------------------------\n\nTITLE: Sending EIP-2930 Transaction (Type 1)\nDESCRIPTION: Demonstrates how to send a Type 1 transaction with access list optimization. Creates and includes access list data for optimizing gas usage when accessing contract storage.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/04_transactions/tx-types.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Web3 } from 'web3';\n\nconst web3 = new Web3('https://rpc2.sepolia.org');\n\nasync function txEIP2930() {\n\tconst wallet = web3.eth.wallet.add('YOUR_PRIVATE_KEY');\n\n\tconst sender = wallet[0].address;\n\tconst contractAddress1 = '0x...';\n\tconst gas = 500000;\n\tconst gasPrice = await web3.eth.getGasPrice();\n\tconst data = '0x9a67c8b100000000000000000000000000000000000000000000000000000000000004d0';\n\n\tconst accessListData = await web3.eth.createAccessList({\n\t\tfrom: sender,\n\t\tto: contractAddress1,\n\t\tdata,\n\t});\n\n\tconst tx = {\n\t\tfrom: sender,\n\t\tto: contractAddress1,\n\t\tdata,\n\t\tgas,\n\t\tgasPrice,\n\t\ttype: 1,\n\t\taccessList: accessListData.accessList,\n\t};\n\n\tconst txReceipt = await web3.eth.sendTransaction(tx);\n\tconsole.log('Tx hash', txReceipt.transactionHash);\n}\n\ntxEIP2930();\n```\n\n----------------------------------------\n\nTITLE: Extending Web3PluginBase Class\nDESCRIPTION: Basic example showing how to extend the Web3PluginBase abstract class to create a custom plugin. This is the fundamental approach for building plugins in web3.js v4.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/14_web3_plugin_guide/plugin_authors.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Web3PluginBase } from 'web3';\n\nexport class CustomRpcMethodsPlugin extends Web3PluginBase { ... }\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Common Settings in Web3.js\nDESCRIPTION: Example of setting defaultCommon configuration including baseChain, hardfork, and custom chain parameters.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/09_web3_config/index.md#2025-04-21_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Web3, Hardfork } from 'web3';\n\nconst web3 = new Web3('http://127.0.0.1:7545');\n\nweb3.defaultHardfork = 'berlin';\nweb3.defaultChain = 'goerli';\n\nweb3.defaultCommon = {\n\tbaseChain: 'goerli',\n\thardfork: 'berlin' as Hardfork,\n\tcustomChain: {\n\t\tnetworkId: 1,\n\t\tchainId: 1,\n\t},\n};\n\nconsole.log(web3.getContextObject().config);\n```\n\n----------------------------------------\n\nTITLE: Querying Contract Events\nDESCRIPTION: Example of querying past events from a smart contract.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/01_getting_started/quickstart.md#2025-04-21_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n// get past `Transfer` events from block 18850576\nconst eventTransfer = await uniswapToken.getPastEvents('Transfer', { fromBlock: 18850576 });\n\nconsole.log(eventTransfer);\n// â†³ [{...},{...}, ...] array with all the events emitted\n```\n\n----------------------------------------\n\nTITLE: Registering a Plugin in JavaScript\nDESCRIPTION: Example code demonstrating how a user can register a plugin with a Web3 instance in JavaScript. The code imports the required modules, creates a new Web3 instance, registers the plugin, and calls a method on the plugin.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/14_web3_plugin_guide/plugin_users.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// code written by the plugin **user**\n\nconst { Web3 } = require('web3');\nconst { PluginExample } = require('web3-plugin-example');\n\nconst web3 = new Web3('http://127.0.0.1:8545');\nweb3.registerPlugin(new PluginExample(any_parameters, if_needed));\n\nweb3.pluginExample.sampleMethod();\n```\n\n----------------------------------------\n\nTITLE: Configuring Web3Modal with React and Chain Settings\nDESCRIPTION: TypeScript implementation of Web3Modal configuration for React. It sets up project ID, chain configurations, metadata, and creates a Web3Modal instance with specific features like EIP6963 support and wallet connectors.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/07_dapps/web3_modal_guide/react.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createWeb3Modal, defaultConfig } from 'web3modal-web3/react';\n\n// 1. Get projectId, Your Project ID can be obtained from walletconnect.com\nconst projectId = 'YOUR_PROJECT_ID';\n\n// 2. Set chains\nconst mainnet = {\n\tchainId: 1,\n\tname: 'Ethereum',\n\tcurrency: 'ETH',\n\texplorerUrl: 'https://etherscan.io',\n\trpcUrl: 'https://cloudflare-eth.com',\n};\n\n// 3. Create a metadata object\nconst metadata = {\n\tname: 'My Website',\n\tdescription: 'My Website description',\n\turl: 'https://mywebsite.com', // origin must match your domain & subdomain\n\ticons: ['https://avatars.mywebsite.com/'],\n};\n\n// 4. Create web3 config\nconst web3Config = defaultConfig({\n\t/*Required*/\n\tmetadata,\n\n\t/*Optional*/\n\tenableEIP6963: true, // true by default\n\tenableInjected: true, // true by default\n\tenableCoinbase: true, // true by default\n\trpcUrl: '...', // used for the Coinbase SDK\n\tdefaultChainId: 1, // used for the Coinbase SDK\n});\n\n// 5. Create a Web3Modal instance\ncreateWeb3Modal({\n\tweb3Config,\n\tchains: [mainnet],\n\tprojectId,\n\tenableAnalytics: true, // Optional - defaults to your Cloud configuration\n});\n\nexport default function App() {\n\treturn <YourApp />;\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying contract with Viem\nDESCRIPTION: Equivalent code in Viem to deploy a contract.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/18_migration_viem/index.md#2025-04-21_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createWalletClient, custom } from 'viem';\nimport { mainnet } from 'viem/chains';\n\nconst walletClient = createWalletClient({\n\tchain: mainnet,\n\ttransport: custom(window.ethereum),\n});\n\nconst hash = await walletClient.deployContract({\n\tabi,\n\taccount, //given account\n\targs: ['constructor param'],\n\tbytecode: bytecode,\n});\n```\n\n----------------------------------------\n\nTITLE: Ignoring Web3.js Automatic Gas Pricing in Contract Interactions\nDESCRIPTION: This code example demonstrates how to disable automatic gas price filling when interacting with smart contract methods using the 'ignoreGasPricing' configuration option. This is useful when using providers like MetaMask that handle gas estimation independently.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/05_smart_contracts/tips_and_tricks.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nlet contractDeployed: Contract<typeof BasicAbi>;\n// instantiate contract...\ncontractDeployed.config.ignoreGasPricing = true;\nconst receipt = await contractDeployed.methods.setValues(1, 'string value', true).send(sendOptions);\n```\n\n----------------------------------------\n\nTITLE: Compiling Solidity Smart Contract to Generate ABI and Bytecode\nDESCRIPTION: A Node.js script that reads the Solidity source code, compiles it using solc, and extracts the ABI and bytecode, saving them to files and logging them to the console.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/05_smart_contracts/smart_contracts_guide.md#2025-04-21_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nconst solc = require('solc');\nconst path = require('path');\nconst fs = require('fs');\n\nconst contractName = 'MyContract';\nconst fileName = `${contractName}.sol`;\n\n// Read the Solidity source code from the file system\nconst contractPath = path.join(__dirname, fileName);\nconst sourceCode = fs.readFileSync(contractPath, 'utf8');\n\n// solc compiler config\nconst input = {\n\tlanguage: 'Solidity',\n\tsources: {\n\t\t[fileName]: {\n\t\t\tcontent: sourceCode,\n\t\t},\n\t},\n\tsettings: {\n\t\toutputSelection: {\n\t\t\t'*': {\n\t\t\t\t'*': ['*'],\n\t\t\t},\n\t\t},\n\t},\n};\n\n// Compile the Solidity code using solc\nconst compiledCode = JSON.parse(solc.compile(JSON.stringify(input)));\n\n// Get the bytecode from the compiled contract\nconst bytecode = compiledCode.contracts[fileName][contractName].evm.bytecode.object;\n\n// Write the bytecode to a new file\nconst bytecodePath = path.join(__dirname, 'MyContractBytecode.bin');\nfs.writeFileSync(bytecodePath, bytecode);\n\n// Log the compiled contract code to the console\nconsole.log('Contract Bytecode:\\n', bytecode);\n\n// Get the ABI from the compiled contract\nconst abi = compiledCode.contracts[fileName][contractName].abi;\n\n// Write the Contract ABI to a new file\nconst abiPath = path.join(__dirname, 'MyContractAbi.json');\nfs.writeFileSync(abiPath, JSON.stringify(abi, null, '\\t'));\n\n// Log the Contract ABI to the console\nconsole.log('Contract ABI:\\n', abi);\n```\n\n----------------------------------------\n\nTITLE: Using getAddress function with ENS\nDESCRIPTION: Retrieves the Ethereum address associated with a given ENS name using the getAddress function.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/11_ens/index.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst address = await web3.eth.ens.getAddress('ethereum.eth');\nconsole.log(address);\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Chain Options in Web3.js\nDESCRIPTION: Available network options for the defaultChain parameter in Web3.js configuration.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/09_web3_config/index.md#2025-04-21_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n'goerli';\n'kovan';\n'mainnet';\n'rinkeby';\n'ropsten';\n'sepolia';\n```\n\n----------------------------------------\n\nTITLE: Sending Value Transactions with web3.js in TypeScript\nDESCRIPTION: This code demonstrates how to send ETH from one account to another using web3.js. It connects to a local Ganache blockchain, retrieves accounts, checks balances, and executes a transaction of 1 ETH between accounts.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/10_web3_eth/eth.md#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Web3 } from 'web3';\nimport fs from 'fs';\nimport path from 'path';\n\n// Set up a connection to the Ethereum network\nconst web3 = new Web3(new Web3.providers.HttpProvider('http://localhost:7545'));\nweb3.eth.Contract.handleRevert = true;\n\nasync function interact() {\n\t//fetch all the available accounts\n\tconst accounts = await web3.eth.getAccounts();\n\tconsole.log(accounts);\n\n\tlet balance1, balance2;\n\t//The initial balances of the accounts should be 100 Eth (10^18 wei)\n\tbalance1 = await web3.eth.getBalance(accounts[0]);\n\tbalance2 = await web3.eth.getBalance(accounts[1]);\n\n\tconsole.log(balance1, balance2);\n\n\t//create a transaction sending 1 Ether from account 0 to account 1\n\tconst transaction = {\n\t\tfrom: accounts[0],\n\t\tto: accounts[1],\n\t\t// value should be passed in wei. For easier use and to avoid mistakes,\n\t//\twe utilize the auxiliary `toWei` function:\n\t\tvalue: web3.utils.toWei('1', 'ether'),\n\t};\n\n\t//send the actual transaction\n\tconst transactionHash = await web3.eth.sendTransaction(transaction);\n\tconsole.log('transactionHash', transactionHash);\n\n\tbalance1 = await web3.eth.getBalance(accounts[0]);\n\tbalance2 = await web3.eth.getBalance(accounts[1]);\n\n\t// see the updated balances\n\tconsole.log(balance1, balance2);\n\n\t// irrelevant with the actual transaction, just to know the gasPrice\n\tconst gasPrice = await web3.eth.getGasPrice();\n\tconsole.log(gasPrice);\n}\n\n(async () => {\n\tawait interact();\n})();\n```\n\n----------------------------------------\n\nTITLE: Ignoring Gas Pricing in Transaction Example\nDESCRIPTION: Shows how to disable automatic gas estimation in Web3.js for transactions by setting ignoreGasPricing to true. Includes a complete transaction example with custom parameters.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/09_web3_config/index.md#2025-04-21_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nconst web3 = new Web3(PROVIDER);\nweb3.config.ignoreGasPricing = true; // when setting configurations for the web3 object, this will also apply to newly created contracts from the web3 object\nconst transaction: TransactionWithToLocalWalletIndex = {\n\tfrom: tempAcc.address,\n\tto: '0x0000000000000000000000000000000000000000',\n\tvalue: BigInt(1),\n\tdata: '0x64edfbf0e2c706ba4a09595315c45355a341a576cc17f3a19f43ac1c02f814ee',\n};\nconst receipt = await web3.eth.sendTransaction(transaction); // web3.js will not estimate gas now.\n```\n\n----------------------------------------\n\nTITLE: Running Solidity Compiler Script\nDESCRIPTION: Command to execute the compilation script that generates the ABI and bytecode for the smart contract.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/05_smart_contracts/smart_contracts_guide.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnode compile.js\n```\n\n----------------------------------------\n\nTITLE: Retrieving Chain ID with web3.eth.getChainId in TypeScript\nDESCRIPTION: Shows the change in return type for web3.eth.getChainId from a number string to a BigInt. This method retrieves the current chain ID of the connected Ethereum network.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/15_web3_upgrade_guide/web3_eth_migration_guide.md#2025-04-21_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n// in 1.x\nweb3.eth.getChainId().then(console.log);\n// 1337\n\n// in 4.x\nweb3.eth.getChainId().then(console.log);\n// 1337n\n```\n\n----------------------------------------\n\nTITLE: Converting Hex to Numbers and BigInt\nDESCRIPTION: Examples of using Web3.js utility functions to convert hexadecimal values to numbers, strings, and BigInt.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/12_web3_utils_module/index.md#2025-04-21_snippet_8\n\nLANGUAGE: js\nCODE:\n```\nconsole.log(web3.utils.toNumber('0xa'));\n// 10 (number)\n\nconsole.log(web3.utils.hexToNumber('0xa'));\n// 10 (number)\n\nconsole.log(web3.utils.toDecimal('0xa'));\n// 10 (number)\n\nconsole.log(web3.utils.hexToNumberString('0xa'));\n// 10 (string)\n\nconsole.log(web3.utils.toBigInt('0xa'));\n// 10n (bigint)\n```\n\n----------------------------------------\n\nTITLE: Modern Disconnect Event Handler in Web3.js v4\nDESCRIPTION: Shows the current recommended approach for handling provider disconnection events in Web3.js v4 using the 'disconnect' event as specified in EIP-1193.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/15_web3_upgrade_guide/providers_migration_guide.md#2025-04-21_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nconst provider = new IpcProvider(host + port);\n// we would use disconnect to listen to the disconnect function\nprovider.on('disconnect', function (err) {\n\tconsole.log('closed');\n\tresolve();\n});\nprovider.disconnect(1012);\n// would eventually log 'closed'\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Return Formats in Web3.js (TypeScript)\nDESCRIPTION: This snippet shows how to use different return formats in Web3.js, including default formats, specifying formats for individual function calls, and configuring default formats for the web3-eth package.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/01_getting_started/return-formats.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Block, FMT_BYTES, FMT_NUMBER, Numbers, Web3 } from 'web3';\n\nconst web3 = new Web3('https://eth.llamarpc.com');\n\n// use the default return format\nweb3.eth.getBlock().then((block: Block) => {\n\tconsole.log(`Block #${block.number} Hash: ${block.hash}`);\n});\n// â†³ Block #20735255 Hash: 0xbaea6dbd46fa810a27be4c9eac782602f8efe7512fb30a8455c127b101a23e22\n\n// specify the return format for a single function invocation\nweb3.eth\n\t.getBlockNumber({\n\t\tbytes: FMT_BYTES.HEX,\n\t\tnumber: FMT_NUMBER.HEX,\n\t})\n\t.then((blockNumber: Numbers) => {\n\t\tconsole.log(`Block #${blockNumber}`);\n\t});\n// â†³ Block #0x13c6517\n\n// configure default return format for the web3-eth package\nweb3.eth.defaultReturnFormat = {\n\tbytes: FMT_BYTES.UINT8ARRAY,\n\tnumber: FMT_NUMBER.HEX,\n};\n\nweb3.eth.getBlock().then((block: Block) => {\n\tconsole.log(`Block #${block.number} Hash: [${block.hash}]`);\n});\n// â†³ Block #0x13c6517 Hash: [186,234,109,...,162,62,34]\n```\n\n----------------------------------------\n\nTITLE: Basic Validation Using web3-validator\nDESCRIPTION: Examples of using the validator to validate Ethereum data types with both throwing and silent error handling modes\nSOURCE: https://github.com/web3/web3.js/blob/4.x/packages/web3-validator/README.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { validator } from 'web3-validator';\n\n// To validate and throw\nvalidator.validate(['uint8', 'string'], [val1, val2]);\n\n// To validate and return error\nconst errors = validator.validate(['uint8', 'string'], [val1, val2], { silent: true });\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Contract Events\nDESCRIPTION: Example of creating a real-time subscription to contract events using WebSocket provider.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/01_getting_started/quickstart.md#2025-04-21_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Web3 } from 'web3';\n\n// WebSocket provider\nconst web3 = new Web3('wss://ethereum.publicnode.com');\n\n// instantiate contract\nconst uniswapToken = new web3.eth.Contract(abi, address);\n\n// create the subscription to all the 'Transfer' events\nconst subscription = uniswapToken.events.Transfer();\n\n// listen to the events\nsubscription.on('data', console.log);\n// â†³ [{...},{...}, ...] live events will be printed in the console\n```\n\n----------------------------------------\n\nTITLE: Setting Default Block Options in Web3.js\nDESCRIPTION: Demonstrates the available options for setting the defaultBlock parameter in Web3.js, including specific block numbers, 'earliest', 'latest', 'pending', 'finalized', and 'safe' blocks.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/09_web3_config/index.md#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nweb3.defaultBlock = 20167235; // A block number\nweb3.defaultBlock = 'earliest'; // The genesis block\nweb3.defaultBlock = 'latest'; // The latest block (current head of the blockchain)\nweb3.defaultBlock = 'pending'; // The block pending to be mined (including pending transactions)\nweb3.defaultBlock = 'finalized'; // (For POS networks) The finalized block is one which has been accepted as canonical by greater than 2/3 of validators\nweb3.defaultBlock = 'safe'; // (For POS networks) The safe head block is one which under normal network conditions, is expected to be included in the canonical chain.\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Ethereum Logs in TypeScript\nDESCRIPTION: Demonstrates how to subscribe to Ethereum logs using web3.js LogsSubscription class.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/06_events_subscriptions/index.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Web3 } from 'web3';\n\nconst web3 = new Web3('wss://ethereum-rpc.publicnode.com');\n\nasync function subscribe() {\n\t//create subscription\n\tconst subscription = await web3.eth.subscribe('logs');\n\n\t//print logs of the latest mined block\n\tsubscription.on('data', data => console.log(data));\n}\n\n// function to unsubscribe from a subscription\nasync function unsubscribe(subscription) {\n\tawait subscription.unsubscribe();\n}\n\nsubscribe();\nunsubscribe(subscription);\n```\n\n----------------------------------------\n\nTITLE: Creating and Signing with New Ethereum Account using Web3.js\nDESCRIPTION: Demonstrates how to generate a new random Ethereum account using Web3.js and use it to sign a message. The code shows the account creation process and the resulting signature format including message hash, v, r, s components.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/03_wallet/index.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// generate a new random account\nconst account = web3.eth.accounts.create();\n\nconsole.log(account);\n/* â†³\n{\n  address: '0x9E82491d1978217d631a3b467BF912933F54788f',\n  privateKey: '<redacted>',\n  signTransaction: [Function: signTransaction],\n  sign: [Function: sign],\n  encrypt: [Function: encrypt]\n}\n*/\n\n// use the account to sign a message\nconst signature = account.sign('Hello, Web3.js!');\n/*  â†³ \n{\n  message: 'Hello, Web3.js!',\n  messageHash: '0xc0f5f7ee704f1473acbb7959f5f925d787a9aa76dccc1b4914cbe77c09fd68d5',\n  v: '0x1b',\n  r: '0x129822b685d4404924a595af66c9cdd6367a57c66ac66e2e10fd9915d4772fbd',\n  s: '0x62db48d6f5e47fe87c64a0991d6d94d23b6024d5d8335348f6686b8c46edb1e9',\n  signature: '0x129822b685d4404924a595af66c9cdd6367a57c66ac66e2e10fd9915d4772fbd62db48d6f5e47fe87c64a0991d6d94d23b6024d5d8335348f6686b8c46edb1e91b'\n}\n*/\n```\n\n----------------------------------------\n\nTITLE: Smart Contract Transaction Fee Management\nDESCRIPTION: Comprehensive example showing how to handle transaction fees and access lists when interacting with smart contracts using Web3.js, including fee calculation and transaction sending.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/04_transactions/gas-and-fees.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst transfer: NonPayableMethodObject = erc20.methods.transfer(receiver.address, 1);\n\nconst transferOpts: NonPayableCallOptions = { from: sender.address };\nconst accessListResult: AccessListResult = await transfer.createAccessList(transferOpts);\nconst transactionDraft: Transaction = transfer.populateTransaction(transferOpts);\n\nconst feeData: FeeData = await web3.eth.calculateFeeData();\n\nconst transferTxn: Transaction = {\n\t...transactionDraft,\n\tmaxFeePerGas: feeData.maxFeePerGas,\n\tmaxPriorityFeePerGas: feeData.maxPriorityFeePerGas,\n\taccessList: accessListResult.accessList,\n\tgas: accessListResult.gasUsed,\n};\n\nconst receipt: TransactionReceipt = await web3.eth.sendTransaction(transferTxn);\n```\n\n----------------------------------------\n\nTITLE: Loading an Existing Account into a Wallet in JavaScript\nDESCRIPTION: This snippet shows how to create a Web3.js wallet with a single existing account using its private key. It demonstrates the process of loading an existing account into a wallet.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/03_wallet/index.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// create a wallet with a single existing account\nconst wallet = web3.eth.accounts.wallet.add('<redacted>');\n\nconsole.log(wallet);\n/* â†³\nWallet(1) [\n  {\n    address: '0xC978F87516152f542dc4D6f64C810B0c206b11A8',\n    privateKey: '<redacted>',\n    signTransaction: [Function: signTransaction],\n    sign: [Function: sign],\n    encrypt: [Function: encrypt]\n  },\n  _accountProvider: {\n    create: [Function: createWithContext],\n    privateKeyToAccount: [Function: privateKeyToAccountWithContext],\n    decrypt: [Function: decryptWithContext]\n  },\n  _addressMap: Map(1) { '0xc978f87516152f542dc4d6f64c810b0c206b11a8' => 0 },\n  _defaultKeyName: 'web3js_wallet'\n]\n*/\n```\n\n----------------------------------------\n\nTITLE: Event Definition and Handling in Solidity and Web3.js\nDESCRIPTION: Paired examples showing event definition in a Solidity contract and the corresponding event subscription in Web3.js. The Solidity contract emits a Transfer event, while the JavaScript code uses Web3.js to listen for and process these events in real-time.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/glossary/index.md#2025-04-21_snippet_4\n\nLANGUAGE: solidity\nCODE:\n```\ncontract MyContract {\n\tevent Transfer(address indexed from, address indexed to, uint256 value);\n\n\tfunction transfer(address recipient, uint256 amount) public {\n\t\t// ... transfer logic ...\n\t\temit Transfer(msg.sender, recipient, amount);\n\t}\n}\n\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Web3 } from 'web3';\nconst MyContract = require('./MyContract.json'); // Assuming ABI is loaded\n\nconst web3 = new Web3('wss://mainnet.infura.io/v3/YOUR_INFURA_ID'); // Replace with your provider URL\nconst contractAddress = '0x...'; // Replace with your contract address\n\nconst myContract = new web3.eth.Contract(MyContract.abi, contractAddress);\n\nconst transferEvent = myContract.events.Transfer(); // Access the Transfer event\n\ntransferEvent.on('data', event => {\n\tconsole.log('Transfer Event:', event);\n\t// Process the event data (from, to, value)\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Transaction Event Handlers in Web3.js\nDESCRIPTION: Demonstrates how to send an Ethereum transaction and subscribe to various lifecycle events including sending, sent, transaction hash, receipt, confirmation, and error events. Uses Web3.js to connect to a local Ethereum node and handle transaction events.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/04_transactions/transactions.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst { Web3 } = require('web3');\n\nconst web3 = new Web3('http://127.0.0.1:8545/');\n\nconst privateKey = '<redacted>';\nconst sender = web3.eth.accounts.wallet.add(privateKey)[0];\n\nconst receiver = web3.eth.accounts.create();\n\nweb3.eth\n\t.sendTransaction({\n\t\tfrom: sender.address,\n\t\tto: receiver.address,\n\t\tvalue: 100,\n\t})\n\t.on('sending', sending => {\n\t\tconsole.log('Sending:', sending);\n\t})\n\t.on('sent', sent => {\n\t\tconsole.log('Sent:', sent);\n\t})\n\t.on('transactionHash', transactionHash => {\n\t\tconsole.log('Transaction Hash:', transactionHash);\n\t})\n\t.on('receipt', receipt => {\n\t\tconsole.log('Receipt:', receipt);\n\t})\n\t.on('confirmation', confirmation => {\n\t\tconsole.log('Confirmation:', confirmation);\n\t\tprocess.exit(0);\n\t})\n\t.on('error', error => {\n\t\tconsole.log('Error:', error);\n\t\tprocess.exit(1);\n\t});\n```\n\n----------------------------------------\n\nTITLE: Signing messages with Web3.js\nDESCRIPTION: Example of signing a message using Web3.js.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/18_migration_viem/index.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst signature = web3.eth.accounts.sign('Some data', privateKey).signature;\nconsole.log(signature);\n```\n\n----------------------------------------\n\nTITLE: Using FMT_NUMBER.STR Format in Web3.js (TypeScript)\nDESCRIPTION: This snippet shows how to use the FMT_NUMBER.STR format to get block number as a string in Web3.js.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/01_getting_started/return-formats.md#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nweb3.eth\n\t.getBlockNumber({\n\t\tbytes: FMT_BYTES.HEX,\n\t\tnumber: FMT_NUMBER.STR,\n\t})\n\t.then((blockNumber: Numbers) => {\n\t\tconsole.log(`Block #${blockNumber}`);\n\t});\n// â†³ Block #20735255\n```\n\n----------------------------------------\n\nTITLE: Sending Legacy Raw Transaction (Type 0)\nDESCRIPTION: Demonstrates how to send a legacy (Type 0) Ethereum transaction using web3.js. Includes basic transaction parameters like gas price, nonce, and value.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/04_transactions/tx-types.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Web3 } from 'web3';\n\nconst web3 = new Web3('https://rpc2.sepolia.org');\n\nasync function txLegacy() {\n\tconst wallet = web3.eth.wallet.add('YOUR_PRIVATE_KEY');\n\n\tconst sender = wallet[0].address;\n\tconst recipient = '0x807BFe4940016B5a7FdA19482042917B02e68359';\n\tconst value = 1;\n\tconst nonce = await web3.eth.getTransactionCount(sender);\n\tconst gas = 21000;\n\tconst gasPrice = await web3.eth.getGasPrice();\n\n\tconst tx = {\n\t\tfrom: sender,\n\t\tto: recipient,\n\t\tvalue,\n\t\tnonce,\n\t\tgas,\n\t\tgasPrice,\n\t\ttype: 0,\n\t};\n\n\tconst txReceipt = await web3.eth.sendTransaction(tx);\n\tconsole.log('Tx hash', txReceipt.transactionHash);\n}\n\ntxLegacy();\n```\n\n----------------------------------------\n\nTITLE: Creating Provider Store Hook with EIP-6963 Support\nDESCRIPTION: TypeScript implementation of a custom React hook that uses useSyncExternalStore to manage and provide access to EIP-6963 compatible wallet providers via Web3.js helper functions.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/07_dapps/intermediate-dapp.md#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useSyncExternalStore } from 'react';\nimport {\n\ttype EIP6963ProviderDetail,\n\ttype EIP6963ProviderResponse,\n\ttype EIP6963ProvidersMapUpdateEvent,\n\tWeb3,\n\tweb3ProvidersMapUpdated,\n} from 'web3';\n\n// initial empty list of providers\nlet providerList: EIP6963ProviderDetail[] = [];\n\n/**\n * External store for subscribing to EIP-6963 providers\n */\nconst providerStore = {\n\t// get current list of providers\n\tgetSnapshot: () => providerList,\n\t// subscribe to EIP-6963 provider events\n\tsubscribe: (callback: () => void) => {\n\t\t// update the list of providers\n\t\tfunction setProviders(response: EIP6963ProviderResponse) {\n\t\t\tproviderList = [];\n\t\t\tresponse.forEach((provider: EIP6963ProviderDetail) => {\n\t\t\t\tproviderList.push(provider);\n\t\t\t});\n\n\t\t\t// notify subscribers that the list of providers has been updated\n\t\t\tcallback();\n\t\t}\n\n\t\t// Web3.js helper function to request EIP-6963 providers\n\t\tWeb3.requestEIP6963Providers().then(setProviders);\n\n\t\t// handler for newly discovered providers\n\t\tfunction updateProviders(providerEvent: EIP6963ProvidersMapUpdateEvent) {\n\t\t\tsetProviders(providerEvent.detail);\n\t\t}\n\n\t\t// register handler for newly discovered providers with Web3.js helper function\n\t\tWeb3.onNewProviderDiscovered(updateProviders);\n\n\t\t// return a function that unsubscribes from the created event listener\n\t\treturn () => window.removeEventListener(web3ProvidersMapUpdated as any, updateProviders);\n\t},\n};\n\n// export the provider store as a React hook\nexport const useProviders = () =>\n\tuseSyncExternalStore(providerStore.subscribe, providerStore.getSnapshot);\n```\n\n----------------------------------------\n\nTITLE: Implementing Web3.js Message Signing and Account Recovery in React\nDESCRIPTION: A React component that demonstrates Web3.js integration with MetaMask, including account connection, message signing, and signature verification. The component manages state for Web3 instance, connected accounts, messages, and signatures, while providing UI elements for user interaction.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/07_dapps/metamask-react.md#2025-04-21_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useEffect, useState } from 'react';\nimport { Web3 } from 'web3';\n\nfunction App() {\n\tconst [web3, setWeb3] = useState<Web3 | null>(null);\n\tconst [warning, setWarning] = useState<string | null>(null);\n\tconst [provider, setProvider] = useState<string | null>(null);\n\tconst [chainId, setChainId] = useState<string | null>(null);\n\tconst [latestBlock, setLatestBlock] = useState<string | null>(null);\n\tconst [accountButtonDisabled, setAccountButtonDisabled] = useState<boolean>(false);\n\tconst [accounts, setAccounts] = useState<string[] | null>(null);\n\tconst [connectedAccount, setConnectedAccount] = useState<string | null>(null);\n\tconst [messageToSign, setMessageToSign] = useState<string | null>(null);\n\tconst [signingResult, setSigningResult] = useState<string | null>(null);\n\tconst [originalMessage, setOriginalMessage] = useState<string | null>(null);\n\tconst [signedMessage, setSignedMessage] = useState<string | null>(null);\n\tconst [signingAccount, setSigningAccount] = useState<string | null>(null);\n\n\tuseEffect(() => {\n\t\tif (window.ethereum) {\n\t\t\tsetWeb3(new Web3(window.ethereum));\n\t\t\tif (window.ethereum.isMetaMask) {\n\t\t\t\tsetProvider('Connected to Ethereum with MetaMask.');\n\t\t\t} else {\n\t\t\t\tsetProvider('Non-MetaMask Ethereum provider detected.');\n\t\t\t}\n\t\t} else {\n\t\t\tsetWarning('Please install MetaMask');\n\t\t\tsetAccountButtonDisabled(true);\n\t\t}\n\t}, []);\n\n\tuseEffect(() => {\n\t\tasync function getChainId() {\n\t\t\tif (web3 === null) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tsetChainId(`Chain ID: ${await web3.eth.getChainId()}`);\n\t\t}\n\n\t\tasync function getLatestBlock() {\n\t\t\tif (web3 === null) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tsetLatestBlock(`Latest Block: ${await web3.eth.getBlockNumber()}`);\n\t\t\tconst blockSubscription = await web3.eth.subscribe('newBlockHeaders');\n\t\t\tblockSubscription.on('data', block => {\n\t\t\t\tsetLatestBlock(`Latest Block: ${block.number}`);\n\t\t\t});\n\t\t}\n\n\t\tgetChainId();\n\t\tgetLatestBlock();\n\t}, [web3]);\n\n\tasync function requestAccounts() {\n\t\tif (web3 === null) {\n\t\t\treturn;\n\t\t}\n\t\tawait window.ethereum.request({ method: 'eth_requestAccounts' });\n\t\tdocument.getElementById('requestAccounts')?.remove();\n\t\tconst allAccounts = await web3.eth.getAccounts();\n\t\tsetAccounts(allAccounts);\n\t\tsetConnectedAccount(`Account: ${allAccounts[0]}`);\n\t}\n\n\tasync function signMessage() {\n\t\tif (web3 === null || accounts === null || messageToSign === null) {\n\t\t\treturn;\n\t\t}\n\t\tconst signature = await web3.eth.personal.sign(messageToSign, accounts[0], '');\n\t\tsetSigningResult(signature);\n\t}\n\n\tasync function recoverAccount() {\n\t\tif (web3 === null || originalMessage === null || signedMessage === null) {\n\t\t\treturn;\n\t\t}\n\t\tconst account = await web3.eth.personal.ecRecover(originalMessage, signedMessage);\n\t\tsetSigningAccount(account);\n\t}\n\n\treturn (\n\t\t<>\n\t\t\t<div id=\"warn\" style={{ color: 'red' }}>\n\t\t\t\t{warning}\n\t\t\t</div>\n\t\t\t<div id=\"provider\">{provider}</div>\n\t\t\t<div id=\"chainId\">{chainId}</div>\n\t\t\t<div id=\"latestBlock\">{latestBlock}</div>\n\t\t\t<div id=\"connectedAccount\">{connectedAccount}</div>\n\t\t\t<div>\n\t\t\t\t<button\n\t\t\t\t\tonClick={() => requestAccounts()}\n\t\t\t\t\tid=\"requestAccounts\"\n\t\t\t\t\tdisabled={accountButtonDisabled}\n\t\t\t\t>\n\t\t\t\t\tRequest MetaMask Accounts\n\t\t\t\t</button>\n\t\t\t</div>\n\t\t\t<div>\n\t\t\t\t<input\n\t\t\t\t\tonChange={e => {\n\t\t\t\t\t\tsetMessageToSign(e.target.value);\n\t\t\t\t\t}}\n\t\t\t\t\tid=\"messageToSign\"\n\t\t\t\t\tplaceholder=\"Message to Sign\"\n\t\t\t\t\tdisabled={connectedAccount === null}\n\t\t\t\t/>\n\t\t\t\t<button\n\t\t\t\t\tonClick={() => signMessage()}\n\t\t\t\t\tid=\"signMessage\"\n\t\t\t\t\tdisabled={connectedAccount === null}\n\t\t\t\t>\n\t\t\t\t\tSign Message\n\t\t\t\t</button>\n\t\t\t\t<div id=\"signingResult\">{signingResult}</div>\n\t\t\t</div>\n\t\t\t<div>\n\t\t\t\t<input\n\t\t\t\t\tonChange={e => {\n\t\t\t\t\t\tsetOriginalMessage(e.target.value);\n\t\t\t\t\t}}\n\t\t\t\t\tid=\"originalMessage\"\n\t\t\t\t\tplaceholder=\"Original Message\"\n\t\t\t\t\tdisabled={connectedAccount === null}\n\t\t\t\t/>\n\t\t\t\t<input\n\t\t\t\t\tonChange={e => {\n\t\t\t\t\t\tsetSignedMessage(e.target.value);\n\t\t\t\t\t}}\n\t\t\t\t\tid=\"signedMessage\"\n\t\t\t\t\tplaceholder=\"Signed Message\"\n\t\t\t\t\tdisabled={connectedAccount === null}\n\t\t\t\t/>\n\t\t\t\t<button\n\t\t\t\t\tonClick={() => recoverAccount()}\n\t\t\t\t\tid=\"recoverAccount\"\n\t\t\t\t\tdisabled={connectedAccount === null}\n\t\t\t\t>\n\t\t\t\t\tRecover Account\n\t\t\t\t</button>\n\t\t\t\t<div id=\"signingAccount\">{signingAccount}</div>\n\t\t\t</div>\n\t\t</>\n\t);\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Setting up web3 and ENS in TypeScript\nDESCRIPTION: Initializes a Web3 instance with a provider and demonstrates how to use ENS with the web3 object.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/11_ens/index.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport Web3 from 'web3';\n\n// Assuming you have a provider, replace 'http://localhost:8545' with your Web3 provider\nconst web3 = new Web3('http://localhost:8545');\n\n// You can use ENS with web3 object:\nconst ens = await web3.eth.ens.getAddress('alice.eth');\n```\n\n----------------------------------------\n\nTITLE: Using getPubKey function with ENS\nDESCRIPTION: Fetches the public key x and y associated with a provided ENS name using the getPubkey function.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/11_ens/index.md#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst key = await web3.eth.ens.getPubkey('xyz.eth');\nconsole.log(key);\n```\n\n----------------------------------------\n\nTITLE: Sending EIP-1559 Transaction (Type 2)\nDESCRIPTION: Shows how to send a Type 2 transaction with EIP-1559 fee structure. Includes maxFeePerGas and maxPriorityFeePerGas calculations for optimal gas pricing.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/04_transactions/tx-types.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Web3 } from 'web3';\n\nconst web3 = new Web3('https://rpc2.sepolia.org');\n\nasync function txEIP1559() {\n\tconst wallet = web3.eth.wallet.add('YOUR_PRIVATE_KEY');\n\n\tconst sender = wallet[0].address;\n\tconst recipient = '0x807BFe4940016B5a7FdA19482042917B02e68359';\n\tconst value = 1;\n\tconst nonce = await web3.eth.getTransactionCount(sender);\n\tconst gasLimit = 21000;\n\tconst maxFeePerGas = Number((await web3.eth.calculateFeeData()).maxFeePerGas);\n\tconst maxPriorityFeePerGas = Number((await web3.eth.calculateFeeData()).maxPriorityFeePerGas);\n\n\tconst tx = {\n\t\tfrom: sender,\n\t\tto: recipient,\n\t\tvalue,\n\t\tnonce,\n\t\tgasLimit,\n\t\tmaxFeePerGas,\n\t\tmaxPriorityFeePerGas,\n\t\ttype: 2,\n\t};\n\n\tconst txReceipt = await web3.eth.sendTransaction(tx);\n\tconsole.log('Tx hash', txReceipt.transactionHash);\n}\n\ntxEIP1559();\n```\n\n----------------------------------------\n\nTITLE: Importing Contract Class in TypeScript\nDESCRIPTION: Demonstrates different ways to import the Contract class from Web3.js packages and create contract instances.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/05_smart_contracts/mastering_smart_contracts.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Importing from web3-eth-contract package\nimport { Contract } from 'web3-eth-contract';\nconst contract = new Contract(...);\n\n// Importing from the main web3 package\nimport { Contract } from 'web3';\nconst contract = new Contract(...);\n\n// Importing from the main web3 package from inside `web3.eth` namespace\nimport { Web3 } from 'web3';\nconst web3 = new Web3('http://127.0.0.1:8545');\nconst contract = new web3.eth.Contract(...);\n\n// to set the provider for the contract instance:\ncontract.setProvider('http://127.0.0.1:7545');\n```\n\n----------------------------------------\n\nTITLE: Generating Random Bytes and Hex with Web3\nDESCRIPTION: Examples of using Web3.js utility functions to generate random bytes in both array format and hexadecimal string format.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/12_web3_utils_module/index.md#2025-04-21_snippet_4\n\nLANGUAGE: js\nCODE:\n```\n// Random bytes in hex format and array format\n\nconsole.log(web3.utils.randomBytes(32));\n/* => array format\nUint8Array(32) [\n  251,  70, 124,  65, 203, 180,  92, 234,\n  210, 236,  72, 154,  83, 219, 171, 223,\n  212, 136, 117, 140,  67, 117,  86,  81,\n  234, 245, 148, 186, 175,  83,  98,  78\n]\n*/\n\nconsole.log(web3.utils.randomHex(32));\n/* => hex string format\n0x594386dc9b2e150979416f9b2a093e01f84a37c4f8db5fc1b0d9b1dc83a12c1f\n*/\n```\n\n----------------------------------------\n\nTITLE: Final Implementation with Generated Types\nDESCRIPTION: Example showing how to use the generated TypeScript contract files with proper type inference.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/05_smart_contracts/infer_contract_types.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Contract, ContractAbi, Web3 } from 'web3';\nimport ERC20 from './artifacts/ERC20';\n\n(async function () {\n\tconst web3 = new Web3('https://goerli.infura.io/v3/fd1f29ab70844ef48e644489a411d4b3');\n\n\tconst contract = new Contract(\n\t\tERC20.abi as ContractAbi,\n\t\t'0x7af963cF6D228E564e2A0aA0DdBF06210B38615D',\n\t\tweb3,\n\t);\n\n\tconst holder = '0xa8F6eB216e26C1F7d924A801E46eaE0CE8ed1A0A';\n\n\tconst balance = await contract.methods.balanceOf(holder).call();\n\tconst ticker = await contract.methods.symbol().call();\n\n\tconsole.log(`${holder} as ${balance.toString()} ${ticker} tokens`);\n})();\n```\n\n----------------------------------------\n\nTITLE: Loading Existing Ethereum Account from Private Key with Web3.js\nDESCRIPTION: Shows how to load an existing Ethereum account using its private key and perform message signing. The code demonstrates the privateKeyToAccount method and the resulting signature structure.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/03_wallet/index.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// load an existing account from its private key\nconst account = web3.eth.accounts.privateKeyToAccount('<redacted>');\n\nconsole.log(account);\n/* â†³\n{\n  address: '0x9E82491d1978217d631a3b467BF912933F54788f',\n  privateKey: '<redacted>',\n  signTransaction: [Function: signTransaction],\n  sign: [Function: sign],\n  encrypt: [Function: encrypt]\n}\n*/\n\n// use the account to sign a message\nconst signature = account.sign('Hello, Web3.js!');\n/*  â†³ \n{\n  message: 'Hello, Web3.js!',\n  messageHash: '0xc0f5f7ee704f1473acbb7959f5f925d787a9aa76dccc1b4914cbe77c09fd68d5',\n  v: '0x1b',\n  r: '0x129822b685d4404924a595af66c9cdd6367a57c66ac66e2e10fd9915d4772fbd',\n  s: '0x62db48d6f5e47fe87c64a0991d6d94d23b6024d5d8335348f6686b8c46edb1e9',\n  signature: '0x129822b685d4404924a595af66c9cdd6367a57c66ac66e2e10fd9915d4772fbd62db48d6f5e47fe87c64a0991d6d94d23b6024d5d8335348f6686b8c46edb1e91b'\n}\n*/\n```\n\n----------------------------------------\n\nTITLE: Deploying Smart Contract with Web3.js\nDESCRIPTION: TypeScript code to deploy the 'Lock' smart contract using Web3.js v4 in a Hardhat environment.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/08_hardhat_tutorial/index.md#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { web3 } from 'hardhat';\nimport artifacts from '../artifacts/contracts/Lock.sol/Lock.json';\n\nasync function main() {\n\tconst currentTimestampInSeconds = Math.round(Date.now() / 1000);\n\tconst unlockTime = currentTimestampInSeconds + 60;\n\n\tconst lockedAmount = web3.utils.toWei('0.001', 'ether');\n\n\tconst [deployer] = await web3.eth.getAccounts();\n\tconst lockContract = new web3.eth.Contract(artifacts.abi);\n\tconst rawContract = lockContract.deploy({\n\t\tdata: artifacts.bytecode,\n\t\targuments: [unlockTime],\n\t});\n\n\tconst lock = await rawContract.send({\n\t\tfrom: deployer,\n\t\tgasPrice: '10000000000',\n\t\tvalue: lockedAmount.toString(),\n\t});\n\n\tconsole.log(\n\t\t`Lock with ${web3.utils.toWei(\n\t\t\tlockedAmount,\n\t\t\t'ether',\n\t\t)}ETH and unlock timestamp ${unlockTime} deployed to ${lock.options.address}`,\n\t);\n}\n\n// We recommend this pattern to be able to use async/await everywhere\n// and properly handle errors.\nmain().catch(error => {\n\tconsole.error(error);\n\tprocess.exitCode = 1;\n});\n```\n\n----------------------------------------\n\nTITLE: Using the CustomRPCPlugin with Web3 in JavaScript\nDESCRIPTION: Demonstrates how to register and use the CustomRPCPlugin with a Web3 instance in JavaScript, allowing access to the custom RPC methods.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/13_advanced/custom_RPC.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst { Web3 } = require('web3');\nconst CustomRpcMethodsPlugin = require('web3-plugin-example');\n\nconst web3 = new Web3('http://127.0.0.1:8545');\n\nweb3.registerPlugin(new CustomRpcMethodsPlugin()); // step 5\n\nweb3.customRpcMethods.customRpcMethod(); //usage\n```\n\n----------------------------------------\n\nTITLE: Testing Smart Contract with Web3.js in TypeScript\nDESCRIPTION: Implementation of contract tests using Web3.js and Hardhat. Tests contract deployment, unlock time verification, ownership validation, and withdrawal functionality. Uses fixtures for test setup and demonstrates both read (.call()) and write (.send()) operations.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/08_hardhat_tutorial/index.md#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { time, loadFixture } from '@nomicfoundation/hardhat-toolbox/network-helpers';\nimport { expect } from 'chai';\nimport { web3 } from 'hardhat';\nimport artifacts from '../artifacts/contracts/Lock.sol/Lock.json';\n\ndescribe('Lock', function () {\n\tasync function deployOneYearLockFixture() {\n\t\tconst ONE_YEAR_IN_SECS = 365 * 24 * 60 * 60;\n\t\tconst ONE_GWEI = 1_000_000_000;\n\n\t\tconst lockedAmount = ONE_GWEI;\n\t\tconst unlockTime = (await time.latest()) + ONE_YEAR_IN_SECS;\n\n\t\tconst lockContract = new web3.eth.Contract(artifacts.abi);\n\t\tlockContract.handleRevert = true;\n\n\t\tconst [deployer, otherAccount] = await web3.eth.getAccounts();\n\t\tconst rawContract = lockContract.deploy({\n\t\t\tdata: artifacts.bytecode,\n\t\t\targuments: [unlockTime],\n\t\t});\n\n\t\tconst estimateGas = await rawContract.estimateGas({\n\t\t\tfrom: deployer,\n\t\t\tvalue: lockedAmount.toString(),\n\t\t});\n\n\t\tconst lock = await rawContract.send({\n\t\t\tfrom: deployer,\n\t\t\tgas: estimateGas.toString(),\n\t\t\tgasPrice: '10000000000',\n\t\t\tvalue: lockedAmount.toString(),\n\t\t});\n\n\t\tconsole.log('Lock contract deployed to: ', lock.options.address);\n\t\treturn { lock, unlockTime, lockedAmount, deployer, otherAccount, rawContract };\n\t}\n\n\tdescribe('Deployment', function () {\n\t\tit('Should set the right unlockTime', async function () {\n\t\t\tconst { lock, unlockTime } = await loadFixture(deployOneYearLockFixture);\n\t\t\tconst setTime = await lock.methods.unlockTime().call();\n\t\t\tconsole.log('SetTime', setTime);\n\t\t\texpect(setTime).to.equal(unlockTime);\n\t\t});\n\n\t\tit('Should set the right deployer', async function () {\n\t\t\tconst { lock, deployer } = await loadFixture(deployOneYearLockFixture);\n\n\t\t\texpect(await lock.methods.owner().call()).to.equal(deployer);\n\t\t});\n\n\t\tit('Should receive and store the funds to lock', async function () {\n\t\t\tconst { lock, lockedAmount } = await loadFixture(deployOneYearLockFixture);\n\t\t\tconst balance = await web3.eth.getBalance(String(lock.options.address));\n\t\t\texpect(balance).to.equal(lockedAmount);\n\t\t});\n\n\t\tit(\"Shouldn't fail if the unlockTime has arrived and the deployer calls it\", async function () {\n\t\t\tconst { lock, unlockTime, deployer } = await loadFixture(deployOneYearLockFixture);\n\n\t\t\tawait time.increaseTo(unlockTime);\n\t\t\tawait expect(lock.methods.withdraw().send({ from: deployer })).not.to.be.reverted;\n\t\t});\n\t});\n});\n```\n\n----------------------------------------\n\nTITLE: Using ENS (Ethereum Name Service) in a Web3 Plugin\nDESCRIPTION: This example shows how to integrate ENS functionality into a Web3 plugin to resolve Ethereum names to addresses using the web3-eth-ens package.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/14_web3_plugin_guide/index.mdx#2025-04-21_snippet_7\n\nLANGUAGE: js\nCODE:\n```\nimport { Web3PluginBase } from \"web3\";\nimport { ENS } from \"web3-eth-ens\";\n\nclass MyPlugin extends Web3PluginBase {\n  pluginNamespace = \"pluginExample\";\n\n  async getAddressENS() {\n    const ens = new ENS(undefined, this); //link to current web3Context\n    return ens.getAddress(\"ethereum.eth\");\n  }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Configuration in Constructor for Individual Web3 Package\nDESCRIPTION: Demonstrates how to set configuration options by passing them in the constructor when instantiating an individual Web3 package (Web3Eth in this case).\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/09_web3_config/index.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Web3Eth } from 'web3-eth';\n\nconst web3EthObj = new Web3Eth({\n\tprovider: 'http://127.0.0.1:7545',\n\tconfig: {\n\t\tdefaultTransactionType: 0x0,\n\t},\n});\n\nweb3EthObj\n\t.sendTransaction({\n\t\tfrom: '0x18532dF2Ab835d4E9D07a8b9B759bf5F8f890f49',\n\t\tto: '0x018e221145dE7cefAD09BD53F41c11A918Bf1Cb7',\n\t\tvalue: 100,\n\t\tgasLimit: 21000,\n\t})\n\t.then(res => console.log(res));\n```\n\n----------------------------------------\n\nTITLE: ERC20 Token Transfer with EIP-1559\nDESCRIPTION: Demonstrates ERC20 token transfer using EIP-1559 transaction type. Shows contract initialization and transaction execution with Type 2 parameters.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/04_transactions/tx-types.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Web3 } from 'web3';\n\nconst web3 = new Web3('https://rpc2.sepolia.org');\n\nconst ADDRESS_WETH_SEPOLIA = '0xfFf9976782d46CC05630D1f6eBAb18b2324d6B14';\nconst ABI = [\n\t{\n\t\tconstant: false,\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tname: 'dst',\n\t\t\t\ttype: 'address',\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'wad',\n\t\t\t\ttype: 'uint256',\n\t\t\t},\n\t\t],\n\t\tname: 'transfer',\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tname: '',\n\t\t\t\ttype: 'bool',\n\t\t\t},\n\t\t],\n\t\tpayable: false,\n\t\tstateMutability: 'nonpayable',\n\t\ttype: 'function',\n\t},\n];\n\nasync function transfer() {\n\tconst wallet = web3.eth.accounts.wallet.add('YOUR_PRIVATE_KEY');\n\tconst myERC20 = new web3.eth.Contract(ABI, ADDRESS_WETH_SEPOLIA);\n\n\tconst TO = '0xEA9eEca67682Cd9c6Ce3DdD1681049D7A897289F';\n\tconst VALUE = 1;\n\n\tconst txReceipt = await myERC20.methods.transfer(TO, VALUE).send({\n\t\tfrom: wallet[0].address,\n\t\ttype: 2,\n\t});\n\n\tconsole.log(txReceipt.transactionHash);\n}\n\ntransfer();\n```\n\n----------------------------------------\n\nTITLE: HTTP Provider Implementation\nDESCRIPTION: Shows two methods of initializing an HTTP provider - using a URL string directly or constructing an HttpProvider instance.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/02_web3_providers_guide/index.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Web3, HttpProvider } from 'web3';\n\n// supply an HTTP provider as a URL string\nconst web3 = new Web3('https://mainnet.infura.io/v3/YOUR_INFURA_ID');\n\nawait web3.eth.getBlockNumber();\n// â†³ 18849658n\n\n// OR\n\n// supply an HTTP provider by constructing a new HttpProvider\nconst web3_2 = new Web3(new HttpProvider('https://mainnet.infura.io/v3/YOUR_INFURA_ID'));\n\nawait web3.eth.getBlockNumber();\n// â†³ 18849658n\n```\n\n----------------------------------------\n\nTITLE: Using getOwner function with ENS\nDESCRIPTION: Obtains the owner of a specified ENS name using the getOwner function.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/11_ens/index.md#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst owner = await web3.eth.ens.getOwner('ethereum.eth');\nconsole.log(owner);\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Custom Web3.js Subscription in TypeScript\nDESCRIPTION: Demonstrates how to register custom subscriptions with Web3, subscribe to a custom event, and listen for emitted data.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/06_events_subscriptions/custom_subscriptions.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst CustomSubscriptions = {\n\tcustom: MyCustomSubscription,\n};\n\nconst web3 = new Web3({\n\tprovider,\n\tregisteredSubscriptions: CustomSubscriptions,\n});\n\nconst sub = web3.subscriptionManager.subscribe('custom', args);\n\nsub.on('data', result => {\n\t// This will be called every time a new data arrived from the provider to this subscription\n});\n```\n\n----------------------------------------\n\nTITLE: Account Creation Changes in Web3.js v4.x\nDESCRIPTION: Demonstrates the changes in account creation method between Web3.js v1.x and v4.x. The entropy parameter has been removed in v4.x in favor of using the ethereum-cryptography/secp256k1 package for private key generation.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/15_web3_upgrade_guide/accounts_migration_guide.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// In 1.x\nconst account = web3.eth.accounts.create('optionalEntropy'); // entropy is an optional parameter\n\n// In 4.x\nconst account = web3.eth.accounts.create('optionalEntropy'); // will result in an error\nconst account = web3.eth.accounts.create(); // correct way\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Events in web3.js v4.x\nDESCRIPTION: Example of subscribing to newHeads event in web3.js version 4.x using the new event-based pattern. The subscription is created first, then event handlers for data and errors are attached separately.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/15_web3_upgrade_guide/subscribe_migration_guide.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// in 4.x\nconst subscription = await web3.eth.subscribe('newHeads');\n\n// note that in version 4.x the way you get notified for `data` and `error` has changed\nsubscription.on('data', async blockhead => {\n\tconsole.log('New block header: ', blockhead);\n});\nsubscription.on('error', error =>\n\tconsole.log('Error when subscribing to New block header: ', error),\n);\n```\n\n----------------------------------------\n\nTITLE: Contract Send Method Resolution Changes\nDESCRIPTION: Demonstrates how the contract send method now resolves with the full receipt object in 4.x instead of just the transaction hash in 1.x.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/15_web3_upgrade_guide/contracts_migration_guide.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// 1.x\nconst transactionHash = await myContract.method.MyMethod().send();\n\n// 4.x\nconst receipt = await myContract.method.MyMethod().send();\nconst transactionHash = receipt.transactionHash;\n```\n\n----------------------------------------\n\nTITLE: Generating Access Lists for Ethereum Transactions\nDESCRIPTION: Illustrates the process of generating access lists for Ethereum transactions to make gas costs more predictable using Web3.js's createAccessList method.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/04_transactions/gas-and-fees.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst transactionDraft: TransactionForAccessList = {\n\tfrom: '<SENDER ADDRESS>',\n\tto: '<RECEIVER ADDRESS>',\n\tvalue: web3.utils.ethUnitMap.ether,\n};\n\nconst accessListResult: AccessListResult = await web3.eth.createAccessList(transactionDraft);\n\nconst transaction: Transaction = {\n\t...transactionDraft,\n\taccessList: accessListResult.accessList,\n\tgas: accessListResult.gasUsed,\n};\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Pending Transactions in TypeScript\nDESCRIPTION: Shows how to subscribe to pending transactions using web3.js NewPendingTransactionsSubscription class.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/06_events_subscriptions/index.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Web3 } from 'web3';\n\nconst web3 = new Web3('wss://ethereum-rpc.publicnode.com');\n\nasync function subscribe() {\n\t//create subscription\n\tconst subscription = await web3.eth.subscribe('pendingTransactions'); //or (\"newPendingTransactions\")\n\n\t//print tx hashs of pending transactions\n\tsubscription.on('data', data => console.log(data));\n}\n\n// function to unsubscribe from a subscription\nasync function unsubscribe(subscription) {\n\tawait subscription.unsubscribe();\n}\n\nsubscribe();\nunsubscribe(subscription);\n```\n\n----------------------------------------\n\nTITLE: Configuring Web3 Parameters in a Plugin\nDESCRIPTION: This example shows how to configure Web3 parameters within a plugin, such as setting transaction reversion handling and default transaction type.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/14_web3_plugin_guide/index.mdx#2025-04-21_snippet_9\n\nLANGUAGE: js\nCODE:\n```\nimport { Web3PluginBase } from 'web3';\n\nclass MyPlugin extends Web3PluginBase {\n  pluginNamespace = 'pluginExample';\n\n  async configParams() {\n    this.config.handleRevert = true;\n    this.config.defaultTransactionType = 0x1;\n    //more params...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Web3 Service Implementation\nDESCRIPTION: TypeScript implementation of Web3 service using Web3-eth package\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/07_dapps/lightweight-dapp.md#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Web3Eth } from 'web3-eth';\nimport type { EIP1193Provider, Web3APISpec } from 'web3-types';\n\nconst provider: EIP1193Provider<Web3APISpec> | undefined = window.ethereum;\nif (provider !== undefined) {\n\tprovider.on('chainChanged', () => window.location.reload());\n}\n\nconst web3: Web3Eth = provider === undefined ? new Web3Eth() : new Web3Eth(provider);\nconst Web3Service = { provider, web3 };\n\nexport default Web3Service;\n```\n\n----------------------------------------\n\nTITLE: Validating and Formatting Ethereum Addresses\nDESCRIPTION: Example of using Web3.js utility function to validate and convert Ethereum addresses to checksum format.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/12_web3_utils_module/index.md#2025-04-21_snippet_10\n\nLANGUAGE: js\nCODE:\n```\n// isAddress() is deprecated so we can use toCheckSumAddress()\n// to see if the hex string we are passing is a correct ethereum address\n\n// passing an address with all characters lowercase\nconsole.log(web3.utils.toChecksumAddress('0xa3286628134bad128faeef82f44e99aa64085c94'));\n// 0xA3286628134baD128faeef82F44e99AA64085C94\n\n// passing a wrong address\nconsole.log(web3.utils.toChecksumAddress('0xa3286628134bad128faeef82f44e99aa64085c9'));\n// InvalidAddressError: Invalid value given \"0xa286628134bad128faeef82f44e99aa64085c94\". Error: invalid ethereum address.\n```\n\n----------------------------------------\n\nTITLE: Packing and Padding Hex Values\nDESCRIPTION: Examples of using Web3.js utility functions for packing and padding hexadecimal values with various options.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/12_web3_utils_module/index.md#2025-04-21_snippet_11\n\nLANGUAGE: js\nCODE:\n```\n// same as abi.encodePacked() in solidity (must be strings)\n// converts everything to hex and packs everything without padding\nconsole.log(web3.utils.encodePacked('1', '1', '1'));\n// 0x313131\n\n// it will convert the number `10` to hex('a') and add 0s until it's 32 characters long\n// the third argument will be the one that will fill/pad the whole hex string, in this case is '0'\nconsole.log(web3.utils.padRight(10, 32, 0));\n// 0xa0000000000000000000000000000000\n\nconsole.log(web3.utils.rightPad(10, 32, 0));\n// 0xa0000000000000000000000000000000\n\nconsole.log(web3.utils.padLeft(10, 32, 0));\n// 0x0000000000000000000000000000000a\n\nconsole.log(web3.utils.leftPad(10, 32, 0));\n// 0x0000000000000000000000000000000a\n```\n\n----------------------------------------\n\nTITLE: Calculating Transaction Fees with Web3.js\nDESCRIPTION: Shows how to calculate transaction fees using Web3.js's calculateFeeData method. Determines the maxFeePerGas and maxPriorityFeePerGas values for an Ethereum transaction.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/04_transactions/gas-and-fees.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst transactionDraft: Transaction = {\n\tfrom: '<SENDER ADDRESS>',\n\tto: '<RECEIVER ADDRESS>',\n\tvalue: web3.utils.ethUnitMap.ether,\n};\n\nconst feeData: FeeData = await web3.eth.calculateFeeData();\n\nconst transaction: Transaction = {\n\t...transactionDraft,\n\tmaxFeePerGas: feeData.maxFeePerGas,\n\tmaxPriorityFeePerGas: feeData.maxPriorityFeePerGas,\n};\n```\n\n----------------------------------------\n\nTITLE: Unit Conversion Function Update\nDESCRIPTION: Changes in toWei function requiring explicit source unit parameter in 4.x.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/15_web3_upgrade_guide/web3_utils_migration_guide.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// 1.x\nweb3.utils.toWei('0.1');\n\n// 4.x\nweb3.utils.toWei('0.1', 'ether');\n```\n\n----------------------------------------\n\nTITLE: React App Component Implementation\nDESCRIPTION: Main React component implementation using Web3 service\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/07_dapps/lightweight-dapp.md#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useState } from 'react';\n\nimport Web3Service from './web3/web3-service';\n\nfunction App() {\n\tconst hasProvider = Web3Service.provider !== undefined;\n\tconst [chainId, setChainId] = useState<bigint>(0n);\n\tif (hasProvider) {\n\t\tWeb3Service.web3.getChainId().then(setChainId);\n\t}\n\n\treturn (\n\t\t<main>\n\t\t\t<h1>Web3.js + React Minimal dApp Template</h1>\n\t\t\t<div>\n\t\t\t\tThis is a sample project that demonstrates using{' '}\n\t\t\t\t<a href=\"https://web3js.org/\">Web3.js</a> with the{' '}\n\t\t\t\t<a href=\"https://react.dev/\">React</a> front-end framework.\n\t\t\t\t<ul>\n\t\t\t\t\t<li>\n\t\t\t\t\t\t<a href=\"https://docs.web3js.org/\">Web3.js Docs</a>\n\t\t\t\t\t</li>\n\t\t\t\t\t<li>\n\t\t\t\t\t\t<a href=\"https://react.dev/learn\">React Docs</a>\n\t\t\t\t\t</li>\n\t\t\t\t</ul>\n\t\t\t\tLearn more about this project and its design by referring to the{' '}\n\t\t\t\t<a href=\"https://github.com/web3/create-web3js-dapp/blob/main/templates/min/web3js-react-dapp-min/README.md\">\n\t\t\t\t\tGitHub README\n\t\t\t\t</a>\n\t\t\t\t.\n\t\t\t</div>\n\t\t\t{!hasProvider ? (\n\t\t\t\t<>\n\t\t\t\t\t<h2>Install a Wallet</h2>\n\t\t\t\t\t<div>Install a wallet browser extension:</div>\n\t\t\t\t\t<ul>\n\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t<a href=\"https://www.enkrypt.com/download.html\">Enkrypt</a>\n\t\t\t\t\t\t</li>\n\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t<a href=\"https://www.exodus.com/download/\">Exodus</a>\n\t\t\t\t\t\t</li>\n\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t<a href=\"https://metamask.io/download/\">MetaMask</a>\n\t\t\t\t\t\t</li>\n\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t<a href=\"https://trustwallet.com/download\">Trust Wallet</a>\n\t\t\t\t\t\t</li>\n\t\t\t\t\t</ul>\n\t\t\t\t</>\n\t\t\t) : (\n\t\t\t\t<>\n\t\t\t\t\t<h2>Network Details</h2>\n\t\t\t\t\t<div>Chain ID: {chainId.toString()}</div>\n\t\t\t\t</>\n\t\t\t)}\n\t\t\t<br />\n\t\t\t<i>\n\t\t\t\tThis project was bootstrapped with{' '}\n\t\t\t\t<a href=\"https://github.com/facebook/create-react-app\">Create React App</a>.\n\t\t\t</i>\n\t\t</main>\n\t);\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Implementing Main App Component with Wallet Integration\nDESCRIPTION: The main App component that handles wallet provider integration, account management, and balance tracking. Uses Web3.js for blockchain interactions and includes the TransferForm component for each connected account.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/07_dapps/intermediate-dapp.md#2025-04-21_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useEffect, useState } from 'react';\nimport { type EIP6963ProviderDetail, Web3 } from 'web3';\nimport TransferForm from './TransferForm';\nimport { useProviders } from './useProviders';\n\nfunction App() {\n\tconst providers = useProviders();\n\tconst [web3, setWeb3] = useState<Web3 | undefined>(undefined);\n\tconst [accounts, setAccounts] = useState<string[]>([]);\n\tconst [balances, setBalances] = useState<Map<string, number>>(new Map());\n\n\tfunction setProvider(provider: EIP6963ProviderDetail) {\n\t\tconst web3: Web3 = new Web3(provider.provider);\n\t\tsetWeb3(web3);\n\t\tweb3.eth.requestAccounts().then(setAccounts);\n\t\tprovider.provider.on('accountsChanged', setAccounts);\n\t\tprovider.provider.on('chainChanged', () => window.location.reload());\n\t}\n\n\tuseEffect(() => {\n\t\tasync function updateBalances(web3: Web3) {\n\t\t\tconst balances = new Map<string, number>();\n\t\t\tfor (const account of accounts) {\n\t\t\t\tconst balance = await web3.eth.getBalance(account);\n\t\t\t\tbalances.set(account, parseFloat(web3.utils.fromWei(balance, 'ether')));\n\t\t\t}\n\n\t\t\tsetBalances(balances);\n\t\t}\n\n\t\tif (web3 === undefined) {\n\t\t\treturn;\n\t\t}\n\n\t\tupdateBalances(web3);\n\n\t\tconst subscription = web3.eth.subscribe('newBlockHeaders').then(subscription => {\n\t\t\tsubscription.on('data', () => updateBalances(web3));\n\t\t\treturn subscription;\n\t\t});\n\n\t\treturn () => {\n\t\t\tsubscription.then(subscription => subscription.unsubscribe());\n\t\t};\n\t}, [accounts, web3]);\n\n\treturn (\n\t\t<>\n\t\t\t{web3 === undefined\n\t\t\t\t? providers.map((provider: EIP6963ProviderDetail) => {\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<div key={provider.info.uuid}>\n\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\tonClick={() => setProvider(provider)}\n\t\t\t\t\t\t\t\tstyle={{ display: 'inline-flex', alignItems: 'center' }}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<img\n\t\t\t\t\t\t\t\t\tsrc={provider.info.icon}\n\t\t\t\t\t\t\t\t\talt={provider.info.name}\n\t\t\t\t\t\t\t\t\twidth=\"35\"\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t<span>{provider.info.name}</span>\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t);\n\t\t\t\t})\n\t\t\t\t: accounts.map((address: string, ndx: number) => {\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<div key={address}>\n\t\t\t\t\t\t\t<div>Account: {address}</div>\n\t\t\t\t\t\t\t<div>Balance: {`${balances.get(address)}`}</div>\n\t\t\t\t\t\t\t<TransferForm address={address} web3={web3}></TransferForm>\n\t\t\t\t\t\t\t{ndx !== accounts.length - 1 ? <br /> : null}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t);\n\t\t\t\t})}\n\t\t</>\n\t);\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Setting Configuration Options for web3-eth Package in TypeScript\nDESCRIPTION: This code shows how to set configuration options directly on the web3-eth package. It sets the defaultTransactionType configuration property, demonstrating how to customize web3-eth's behavior.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/10_web3_eth/eth.md#2025-04-21_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Web3Eth } from 'web3-eth';\n\nconst eth = new Web3Eth('http://localhost:8545');\n\nconsole.log('defaultTransactionType before', eth.config.defaultTransactionType);\n// defaultTransactionType before 0x0\n\neth.setConfig({ defaultTransactionType: '0x1' });\n\nconsole.log('eth.config.defaultTransactionType after', eth.config.defaultTransactionType);\n// defaultTransactionType before 0x1\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Block Headers in TypeScript\nDESCRIPTION: Demonstrates subscription to new block headers using web3.js NewHeadsSubscription class.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/06_events_subscriptions/index.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Web3 } from 'web3';\n\nconst web3 = new Web3('wss://ethereum-rpc.publicnode.com');\n\nasync function subscribe() {\n\t//create subscription\n\tconst subscription = await web3.eth.subscribe('newBlockHeaders'); //or (\"newHeads\")\n\n\t//print block header everytime a block is mined\n\tsubscription.on('data', data => console.log(data));\n}\n\n// function to unsubscribe from a subscription\nasync function unsubscribe(subscription) {\n\tawait subscription.unsubscribe();\n}\n\nsubscribe();\nunsubscribe(subscription);\n```\n\n----------------------------------------\n\nTITLE: WebSocket Provider Implementation\nDESCRIPTION: Shows initialization of WebSocket providers using both URL string and WebSocketProvider constructor approaches.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/02_web3_providers_guide/index.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Web3, WebSocketProvider } from 'web3';\n\n// supply a WebSocket provider as a URL string\nconst web3 = new Web3('wss://mainnet.infura.io/ws/v3/YOUR_INFURA_ID');\n\nawait web3.eth.getBlockNumber();\n// â†³ 18849658n\n\n// OR\n\n// supply a WebSocket provider by constructing a new WebSocketProvider\nconst web3_2 = new Web3(new WebSocketProvider('wss://mainnet.infura.io/ws/v3/YOUR_INFURA_ID'));\n\nawait web3.eth.getBlockNumber();\n// â†³ 18849658n\n```\n\n----------------------------------------\n\nTITLE: Provider Initialization Comparison\nDESCRIPTION: Demonstrates how to initialize providers and get block numbers in both Web3.js and Ethers.js.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/17_migration_ethers/index.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Web3 } from 'web3';\n\n// private RPC endpoint\nconst web3 = new Web3(providerURL);\n\nconst blockNumber = await web3.eth.getBlockNumber();\nconsole.log(blockNumber);\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ethers } from 'ethers';\n\n// ethers.js v6\nconst provider = new ethers.JsonRpcProvider(providerURL);\n\nconst blockNumber = await provider.getBlockNumber();\nconsole.log(blockNumber);\n```\n\n----------------------------------------\n\nTITLE: Querying Ethereum Blockchain\nDESCRIPTION: Examples of common blockchain queries using web3-eth package including balance checks, block numbers, chain ID, and gas prices.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/01_getting_started/quickstart.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// get the balance of an address\nawait web3.eth.getBalance('0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045');\n// â†³ 114438180989009447638n\n\n// get last block number\nawait web3.eth.getBlockNumber();\n// â†³ 18849658n\n\n// get the chain id of the current provider\nawait web3.eth.getChainId();\n// â†³ 1n\n\n// get the nonce of an address\nawait web3.eth.getTransactionCount('0x37826D8B5F4B175517A0f42c886f8Fca38C55Fe7');\n// â†³ 7n\n\n// get the current gas price\nawait web3.eth.getGasPrice();\n// â†³ 23879160756n\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom RPC Methods Plugin Class in JavaScript\nDESCRIPTION: Defines a JavaScript class that extends Web3PluginBase to create a custom plugin for adding new RPC methods to Web3.js.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/13_advanced/custom_RPC.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst { Web3PluginBase } = require('web3');\n\nclass CustomRpcMethodsPlugin extends Web3PluginBase {\n\t// step 1\n\t// ...\n}\n\nmodule.exports = CustomRpcMethodsPlugin;\n```\n\n----------------------------------------\n\nTITLE: Smart Contract with Function Overloading in Solidity\nDESCRIPTION: This Solidity contract demonstrates parameter overloading by defining two functions with the same name but different parameter types. One accepts a uint256 value and the other accepts an address, illustrating how overloaded functions work in smart contracts.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/05_smart_contracts/tips_and_tricks.md#2025-04-21_snippet_1\n\nLANGUAGE: solidity\nCODE:\n```\n// SPDX-License-Identifier: GPL-3.0\n\npragma solidity >=0.8.20 <0.9.0;\n\ncontract TestOverloading {\n\tfunction funcWithParamsOverloading(uint256 userId) public pure returns (string memory) {\n\t\treturn \"called for the parameter with the type 'uint256'\";\n\t}\n\n\tfunction funcWithParamsOverloading(address userAddress) public pure returns (string memory) {\n\t\treturn \"called for the parameter with the type 'address'\";\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Receipt Status Type Change in Web3.js Contract\nDESCRIPTION: Demonstrates the change in receipt.status from boolean to unsigned integer type when handling contract method receipts. The new version uses BigInt instead of boolean values.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/15_web3_upgrade_guide/contracts_migration_guide.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// in 1.x\nmyContract.methods\n\t.MyMethod()\n\t.send()\n\t.on('receipt', receipt => {\n\t\tconsole.log(receipt.status); // true | false\n\t});\n\n// in 4.x\nmyContract.methods\n\t.MyMethod()\n\t.send()\n\t.on('receipt', receipt => {\n\t\tconsole.log(receipt.status); // BigInt(0) | BigInt(1)\n\t});\n```\n\n----------------------------------------\n\nTITLE: Implementing Connect Button Component\nDESCRIPTION: Simple implementation of the Web3Modal connect button component\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/07_dapps/web3_modal_guide/index.mdx#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport default function ConnectButton() {\n  return <w3m-button/>\n}\n```\n\n----------------------------------------\n\nTITLE: Calling contract method with Web3.js\nDESCRIPTION: Example of calling a contract method using Web3.js.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/18_migration_viem/index.md#2025-04-21_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nconst contract = new web3.eth.Contract(ABI, CONTRACT_ADDRESS);\nconst result = await contract.methods.someFunction().call();\nconsole.log(result);\n```\n\n----------------------------------------\n\nTITLE: Making Custom RPC Calls with Web3 RequestManager\nDESCRIPTION: This snippet demonstrates how to use the Web3 requestManager to make custom JSON-RPC calls to an Ethereum node, including examples for custom methods, getting nonce, and block number.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/14_web3_plugin_guide/index.mdx#2025-04-21_snippet_8\n\nLANGUAGE: js\nCODE:\n```\nimport { Web3PluginBase } from 'web3';\n\nclass MyPlugin extends Web3PluginBase {\n  pluginNamespace = 'pluginExample';\n\n  async customRPC() {\n    return await this.requestManager.send({\n      method: \"custom_RPC_call\",\n      params: [],\n    });\n  }\n\n  async getNonce() {\n    return await this.requestManager.send({\n      jsonrpc: \"2.0\",\n      method: \"eth_getTransactionCount\",\n      params: [\"0xEA9eEca67682Cd9c6Ce3DdD1681049D7A897289F\", \"latest\"],\n    });\n  }\n\n  async getBlockNumber() {\n    return await this.requestManager.send({\n      jsonrpc: \"2.0\",\n      method: \"eth_blockNumber\",\n      params: [],\n    });\n  }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Adding New Transaction Type in Web3.js Plugin\nDESCRIPTION: Demonstration of how to create a new transaction type by extending BaseTransaction class and registering it with TransactionFactory. This allows plugins to expand the range of transaction types supported by web3.js.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/14_web3_plugin_guide/plugin_authors.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// create new TransactionType class which extends BaseTransaction class\nimport { BaseTransaction } from 'web3-eth-accounts';\nconst TRANSACTION_TYPE = 15;\nclass SomeNewTxTypeTransaction extends BaseTransaction {\n\t// ...\n}\n\n// create new plugin and add `SomeNewTxTypeTransaction` to the library\nimport { Web3EthPluginBase } from 'web3';\n\nclass SomeNewTxTypeTransactionPlugin extends Web3EthPluginBase {\n\tpublic pluginNamespace = 'someNewTxTypeTransaction';\n\tpublic constructor() {\n\t\tsuper();\n\t\tTransactionFactory.registerTransactionType(TRANSACTION_TYPE, SomeNewTxTypeTransaction);\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Using Web3 Hashing Functions\nDESCRIPTION: Examples of using Web3.js utility functions for hashing data with SHA3 and Solidity SHA3.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/12_web3_utils_module/index.md#2025-04-21_snippet_9\n\nLANGUAGE: js\nCODE:\n```\n// both will return undefined if an empty string is passed as an argument\nconsole.log(web3.utils.sha3('hello web3'));\n// 0x6c171485a0138b7b0a49d72b570e1d9c589d42a79ae57329d90671d1ac702d74\n\nconsole.log(web3.utils.soliditySha3({ type: 'string', value: 'hello web3' }));\n// 0x6c171485a0138b7b0a49d72b570e1d9c589d42a79ae57329d90671d1ac702d74\n```\n\n----------------------------------------\n\nTITLE: Smart Contract Instantiation\nDESCRIPTION: Example of instantiating a smart contract using its ABI and address, specifically for the Uniswap token contract.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/01_getting_started/quickstart.md#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// Uniswap token smart contract address (Mainnet)\nconst address = '0x1f9840a85d5af5bf1d1762f925bdaddc4201f984';\n\n// you can find the complete ABI on etherscan.io\n// https://etherscan.io/address/0x1f9840a85d5af5bf1d1762f925bdaddc4201f984#code\nconst ABI = [\n\t{\n\t\tname: 'symbol',\n\t\toutputs: [{ type: 'string' }],\n\t\ttype: 'function',\n\t},\n\t{\n\t\tname: 'totalSupply',\n\t\toutputs: [{ type: 'uint256' }],\n\t\ttype: 'function',\n\t},\n];\n\n// instantiate the smart contract\nconst uniswapToken = new web3.eth.Contract(abi, address);\n```\n\n----------------------------------------\n\nTITLE: Working with Ethereum Accounts in a Web3 Plugin\nDESCRIPTION: This snippet demonstrates how to create Ethereum accounts within a Web3 plugin, showcasing account generation functionality.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/14_web3_plugin_guide/index.mdx#2025-04-21_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nimport { Web3PluginBase, eth } from 'web3';\n\nclass MyPlugin extends Web3PluginBase {\n  pluginNamespace = 'pluginExample';\n\n  async createAccount() {\n    const account = eth.accounts.create();\n    console.log(\"account:\", account);\n    /*\n    account: {\n        address: '0x59E797F2F66AffA9A419a6BC2ED4742b7cBc2570',\n        privateKey: '0x52a81fc3a7fd6ce9644147c9fb5bfbe1f708f37b4611b3c3310eb9a6dc85ccf4',\n        signTransaction: [Function: signTransaction],\n        sign: [Function: sign],\n        encrypt: [Function: encrypt]\n    }\n    */\n  }\n}\n\nexport default MyPlugin;\n```\n\n----------------------------------------\n\nTITLE: Importing web3-eth Package Directly in TypeScript\nDESCRIPTION: This code demonstrates how to import and use the web3-eth package directly instead of the global web3 package to reduce build size. It retrieves account balances from a local Ethereum node.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/10_web3_eth/eth.md#2025-04-21_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Web3Eth } from 'web3-eth';\n\nconst eth = new Web3Eth('http://localhost:7545');\n\nasync function test() {\n\tconst accounts = await eth.getAccounts();\n\tconst currentBalance = await eth.getBalance(accounts[0]);\n\tconsole.log('Current balance:', currentBalance);\n\t// 115792089237316195423570985008687907853269984665640564039437613106102441895127n\n}\n\n(async () => {\n\tawait test();\n})();\n```\n\n----------------------------------------\n\nTITLE: Setting Global Configuration Using Web3Context in TypeScript\nDESCRIPTION: Shows how to set global configuration using the Web3Context object for advanced users. This method allows setting the default transaction type to '0x0'.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/09_web3_config/index.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Web3, Web3Context } from 'web3';\n\nconst context = new Web3Context('http://127.0.0.1:7545');\ncontext.setConfig({ defaultTransactionType: '0x0' });\n\nconst web3 = new Web3(context);\n\n//it will not default to 0x0 type transactions\nweb3.eth\n\t.sendTransaction({\n\t\tfrom: '0x18532dF2Ab835d4E9D07a8b9B759bf5F8f890f49',\n\t\tto: '0x018e221145dE7cefAD09BD53F41c11A918Bf1Cb7',\n\t\tvalue: 100,\n\t\tgasLimit: 21000,\n\t})\n\t.then(res => console.log(res));\n```\n\n----------------------------------------\n\nTITLE: Message Signing Implementation\nDESCRIPTION: Shows how to implement message signing in both libraries.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/17_migration_ethers/index.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// Sign with web3.js, using a private key:\nconst signature = web3.eth.accounts.sign('Some data', privateKey).signature;\n\n// Sign using an account managed by the connected provider\nconst signature = await web3.eth.sign(\n\tweb3.utils.utf8ToHex('Some data'), // data to be signed (4.x only supports Hex Strings)\n\t'0x6E599DA0bfF7A6598AC1224E4985430Bf16458a4', // the address\n);\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst signer = new ethers.Wallet(privateKey);\nconst signature = await signer.signMessage('Some data');\n```\n\n----------------------------------------\n\nTITLE: HTTP Provider Configuration\nDESCRIPTION: Demonstrates how to configure an HTTP provider with custom options using HttpProviderOptions object.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/02_web3_providers_guide/index.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Web3, HttpProvider } from 'web3';\n\nconst httpOptions = {\n\tproviderOptions: {\n\t\tbody: undefined,\n\t\tcache: 'force-cache',\n\t\tcredentials: 'same-origin',\n\t\theaders: {\n\t\t\t'Content-Type': 'application/json',\n\t\t},\n\t\tintegrity: undefined,\n\t\tkeepalive: true,\n\t\tmethod: 'GET',\n\t\tmode: 'same-origin',\n\t\tredirect: 'error',\n\t\treferrer: undefined,\n\t\treferrerPolicy: 'same-origin',\n\t\tsignal: undefined,\n\t\twindow: undefined,\n\t} as RequestInit,\n};\n\nconst web3 = new Web3(new HttpProvider('https://eth.llamarpc.com', httpOptions));\n```\n\n----------------------------------------\n\nTITLE: Initializing Web3 with WebSocketProvider in JavaScript\nDESCRIPTION: A JavaScript example demonstrating how to set up a Web3 instance with a WebSocket provider. WebSocket connections enable real-time, bidirectional communication with an Ethereum node, ideal for applications requiring event monitoring and subscription features.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/glossary/index.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Web3 } from 'web3';\nconst web3 = new Web3(new Web3.providers.WebsocketProvider('ws://localhost:8546'));\n```\n\n----------------------------------------\n\nTITLE: BigNumber Handling Changes\nDESCRIPTION: Migration from BN.js package to native JavaScript BigInt type for handling large numbers.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/15_web3_upgrade_guide/web3_utils_migration_guide.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// 1.x\nnew Web3.utils.BN(1);\n\n// 4.x\nBigInt(4);\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Syncing Status in TypeScript\nDESCRIPTION: Shows how to subscribe to node syncing status using web3.js SyncingSubscription class.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/06_events_subscriptions/index.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Web3 } from 'web3';\n\nconst web3 = new Web3('wss://ethereum-rpc.publicnode.com');\n\nasync function subscribe() {\n\t//create subscription\n\tconst subscription = await web3.eth.subscribe('syncing');\n\n\t//this will return `true` when the node is syncing\n\t//when it's finished syncing will return `false`, for the `changed` event.\n\tsubscription.on('data', data => console.log(data));\n}\n\n// function to unsubscribe from a subscription\nasync function unsubscribe(subscription) {\n\tawait subscription.unsubscribe();\n}\n\nsubscribe();\nunsubscribe(subscription);\n```\n\n----------------------------------------\n\nTITLE: Extending Web3EthPluginBase Class\nDESCRIPTION: Example of extending Web3EthPluginBase, which provides Ethereum JSON RPC API interface support. This approach is recommended for plugins that make Ethereum JSON RPC calls directly to a provider.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/14_web3_plugin_guide/plugin_authors.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Web3EthPluginBase } from 'web3';\n\nexport class CustomRpcMethodsPlugin extends Web3EthPluginBase { ... }\n```\n\n----------------------------------------\n\nTITLE: Extending Web3.js with Custom Block Receipts Method\nDESCRIPTION: Example showing how to extend Web3.js with a custom getBlockReceipts RPC method using the legacy extend interface. The code initializes a Web3 instance, extends it with a new BlockReceipts property containing the custom method, and demonstrates how to call it.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/13_advanced/extend.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Web3 } from 'web3';\n\nconst web3 = new Web3('https://eth.llamarpc.com');\n\nasync function main() {\n\tweb3.extend({\n\t\tproperty: 'BlockReceipts',\n\t\tmethods: [\n\t\t\t{\n\t\t\t\tname: 'getBlockReceipts',\n\t\t\t\t// https://www.quicknode.com/docs/ethereum/eth_getBlockReceipts\n\t\t\t\tcall: 'eth_getBlockReceipts',\n\t\t\t},\n\t\t],\n\t});\n\n\tconst receipts = await web3.BlockReceipts.getBlockReceipts('latest');\n\tconsole.log(receipts);\n}\n\nmain();\n```\n\n----------------------------------------\n\nTITLE: Converting Between Ethereum Denominations\nDESCRIPTION: Examples of using Web3.js utility functions to convert between different Ethereum denominations such as wei and ether.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/12_web3_utils_module/index.md#2025-04-21_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nconsole.log(web3.utils.fromWei('1', 'ether'));\n// 0.000000000000000001\n\nconsole.log(web3.utils.toWei('1', 'ether'));\n// 1_000_000_000_000_000_000\n```\n\n----------------------------------------\n\nTITLE: Implementing Request Middleware in TypeScript for Web3.js\nDESCRIPTION: Example of a request middleware class that implements RequestManagerMiddleware interface to log RPC requests and responses. The middleware can intercept and modify both requests before sending to network and responses before returning to Web3.js.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/14_web3_plugin_guide/plugin_authors.md#2025-04-21_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nexport class RequestMiddleware<API> implements RequestManagerMiddleware<API> {\n\tpublic async processRequest<ParamType = unknown[]>(\n\t\trequest: JsonRpcPayload<ParamType>,\n\t): Promise<JsonRpcPayload<ParamType>> {\n\t\tconst reqObj = { ...request } as JsonRpcPayload;\n\t\tconsole.log('Request:', reqObj);\n\t\treturn Promise.resolve(reqObj as JsonRpcPayload<ParamType>);\n\t}\n\n\tpublic async processResponse<\n\t\tMethod extends Web3APIMethod<API>,\n\t\tResponseType = Web3APIReturnType<API, Method>,\n\t>(response: JsonRpcResponse<ResponseType>): Promise<JsonRpcResponse<ResponseType>> {\n\t\tconst resObj = { ...response };\n\t\tconsole.log('Response:', resObj);\n\t\treturn Promise.resolve(resObj);\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Handling contract events with Web3.js\nDESCRIPTION: Example of handling contract events using Web3.js.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/18_migration_viem/index.md#2025-04-21_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nconst event = contract.events.SomeEvent({ fromBlock: 0 });\nevent.on('data', resolve);\nevent.on('error', reject);\n```\n\n----------------------------------------\n\nTITLE: Browser Provider Integration\nDESCRIPTION: Shows how to handle browser-injected providers like MetaMask in both libraries.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/17_migration_ethers/index.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst web3 = new Web3(window.ethereum);\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// in v6\nconst provider = new ethers.BrowserProvider(window.ethereum);\n```\n\n----------------------------------------\n\nTITLE: Handling Reconnection Error Events in Web3.js v4\nDESCRIPTION: Example showing how to catch and handle the maximum reconnection attempts error in Web3.js v4. The error message includes the maxAttempts value which can be either user-provided or the default value of 5.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/15_web3_upgrade_guide/providers_migration_guide.md#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nprovider.on('error', error => {\n\tif (error.message.startsWith('Maximum number of reconnect attempts reached!')) {\n\t\t// the `error.message` will be `Maximum number of reconnect attempts reached! (${maxAttempts})`\n\t\t// the `maxAttempts` is equal to the provided value by the user, or the default value `5`.\n\t}\n});\n```\n\n----------------------------------------\n\nTITLE: Private Key Generation\nDESCRIPTION: Demonstrates private key generation in both libraries.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/17_migration_ethers/index.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst privateKey = web3.eth.accounts.create().privateKey;\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst privateKey = ethers.Wallet.createRandom().privateKey;\n```\n\n----------------------------------------\n\nTITLE: AbiInput Type Definition in Web3.js 4.x\nDESCRIPTION: The updated AbiInput type definition in Web3.js 4.x, which introduces a union type and a more detailed AbiParameter type with additional properties like baseType, arrayLength, and arrayChildren.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/15_web3_upgrade_guide/abi_migration_guide.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport type AbiInput = string | AbiParameter | { readonly [key: string]: unknown };\n// where AbiParameter is ...\n\nexport type AbiParameter = {\n\treadonly name: string;\n\treadonly type: string;\n\treadonly baseType?: string;\n\treadonly indexed?: boolean;\n\treadonly components?: ReadonlyArray<AbiParameter>;\n\treadonly arrayLength?: number;\n\treadonly arrayChildren?: ReadonlyArray<AbiParameter>;\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Transaction Polling Settings in Web3.js\nDESCRIPTION: Shows how to configure transaction polling interval and view the resulting configuration object. Demonstrates setting the polling interval and its effect on related configuration parameters.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/09_web3_config/index.md#2025-04-21_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Web3 } from 'web3';\n\nconst web3 = new Web3('http://127.0.0.1:7545');\n\nweb3.transactionPollingInterval = 1000; // 1000 ms = 1 s\n\nconsole.log(web3.getContextObject().config);\n```\n\n----------------------------------------\n\nTITLE: Setting Global Configuration for Web3 Instance in TypeScript\nDESCRIPTION: Demonstrates how to set global configuration parameters when instantiating a Web3 object. This example sets the default transaction type to '0x0'.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/09_web3_config/index.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Web3 } from 'web3';\n\nconst web3 = new Web3({\n\tprovider: 'https://mainnet.infura.io/v3/YOURID',\n\tconfig: {\n\t\tdefaultTransactionType: '0x0',\n\t},\n});\n\n//now default transaction type will be 0x0 so using following function in eth will send type 0x0 transaction\n\nweb3.eth\n\t.sendTransaction({\n\t\tfrom: '0x18532dF2Ab835d4E9D07a8b9B759bf5F8f890f49',\n\t\tto: '0xB2f70d8965e754cc07D343a9b5332876D3070155',\n\t\tvalue: 100,\n\t\tgasLimit: 21000,\n\t})\n\t.then(res => console.log(res));\n```\n\n----------------------------------------\n\nTITLE: Using the CustomRPCPlugin with Web3 in TypeScript\nDESCRIPTION: Demonstrates how to register and use the CustomRPCPlugin with a Web3 instance in TypeScript, allowing access to the custom RPC methods with proper type support.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/13_advanced/custom_RPC.md#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Web3 } from 'web3';\nimport CustomRpcMethodsPlugin from 'web3-plugin-example';\n\nconst web3 = new Web3('http://127.0.0.1:8545');\n\nweb3.registerPlugin(new CustomRpcMethodsPlugin()); // step 5\n\nweb3.customRpcMethods.customRpcMethod(); //usage\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom RPC Methods Plugin Class in TypeScript\nDESCRIPTION: Defines a TypeScript class that extends Web3PluginBase to create a custom plugin for adding new RPC methods to Web3.js.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/13_advanced/custom_RPC.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Web3PluginBase } from 'web3';\n\nexport default class CustomRpcMethodsPlugin extends Web3PluginBase {\n\t// step 1\n\t// ...\n}\n```\n\n----------------------------------------\n\nTITLE: Calling Overloaded Smart Contract Functions in TypeScript\nDESCRIPTION: This TypeScript example demonstrates how to correctly call overloaded functions in a smart contract by explicitly specifying the parameter types in the method name. The code shows how to interact with both versions of the 'funcWithParamsOverloading' function.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/05_smart_contracts/tips_and_tricks.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Web3 } from 'web3';\n\nconst ABI = [\n\t{\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tinternalType: 'uint256',\n\t\t\t\tname: 'userId',\n\t\t\t\ttype: 'uint256',\n\t\t\t},\n\t\t],\n\t\tname: 'funcWithParamsOverloading',\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tinternalType: 'string',\n\t\t\t\tname: '',\n\t\t\t\ttype: 'string',\n\t\t\t},\n\t\t],\n\t\tstateMutability: 'pure',\n\t\ttype: 'function',\n\t},\n\t{\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tinternalType: 'address',\n\t\t\t\tname: 'userAddress',\n\t\t\t\ttype: 'address',\n\t\t\t},\n\t\t],\n\t\tname: 'funcWithParamsOverloading',\n\t\toutputs: [\n\t\t\t{\n\t\t\t\tinternalType: 'string',\n\t\t\t\tname: '',\n\t\t\t\ttype: 'string',\n\t\t\t},\n\t\t],\n\t\tstateMutability: 'pure',\n\t\ttype: 'function',\n\t},\n] as const;\n\n(async function () {\n\tconst web3 = new Web3(provider);\n\n\tconst contract = new web3.eth.Contract(ABI, contractAddress);\n\n\t// Calling the function that accepts an address\n\tconst res1 = await contract.methods['funcWithParamsOverloading(address)'](userAddress).call();\n\n\t// Calling the function that accepts a uint256\n\tconst res2 = await contract.methods['funcWithParamsOverloading(uint256)'](userId).call();\n})();\n```\n\n----------------------------------------\n\nTITLE: Querying Past Logs with web3.eth.getPastLogs in TypeScript\nDESCRIPTION: Demonstrates the change in return type for logIndex, transactionIndex, and blockNumber from numbers to BigInt when using web3.eth.getPastLogs. The method queries past logs for a specific address and topic.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/15_web3_upgrade_guide/web3_eth_migration_guide.md#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n//in 1.x\nawait web3.eth\n\t.getPastLogs({\n\t\taddress: '0xE012dB5CA859A3238DdC576c0092BA5E728B7268',\n\t\ttopics: ['0x617cf8a4400dd7963ed519ebe655a16e8da1282bb8fea36a21f634af912f54ab'],\n\t})\n\t.then(console.log);\n// [{\n//   address: \"0xe405df0ea854cd98df9f646559ce2001396e8f5b\",\n//   topics: [\n//     \"0x617cf8a4400dd7963ed519ebe655a16e8da1282bb8fea36a21f634af912f54ab\",\n//   ],\n//   data: \"0x000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000027431000000000000000000000000000000000000000000000000000000000000\",\n//   blockNumber: 221,\n//   transactionHash:\n//     \"0xc96bbd8308f70940aa465ecdf95c7ce8c687dede5c53e5ce5ce55434c6e406bd\",\n//   transactionIndex: 0,\n//   blockHash:\n//     \"0xfd1657fc5d2b18153aa569956718cd2d3a05285712208a9544dfc093966b9c5f\",\n//   logIndex: 0,\n//   removed: false,\n// },];\n\n//in 4.x\nawait web3.eth\n\t.getPastLogs({\n\t\taddress: '0xE012dB5CA859A3238DdC576c0092BA5E728B7268',\n\t\ttopics: ['0x617cf8a4400dd7963ed519ebe655a16e8da1282bb8fea36a21f634af912f54ab'],\n\t})\n\t.then(console.log);\n// [{\n//   address: \"0xe405df0ea854cd98df9f646559ce2001396e8f5b\",\n//   topics: [\n//     \"0x617cf8a4400dd7963ed519ebe655a16e8da1282bb8fea36a21f634af912f54ab\",\n//   ],\n//   data: \"0x000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000027431000000000000000000000000000000000000000000000000000000000000\",\n//   blockNumber: 221n,\n//   transactionHash:\n//     \"0xc96bbd8308f70940aa465ecdf95c7ce8c687dede5c53e5ce5ce55434c6e406bd\",\n//   transactionIndex: 0n,\n//   blockHash:\n//     \"0xfd1657fc5d2b18153aa569956718cd2d3a05285712208a9544dfc093966b9c5f\",\n//   logIndex: 0n,\n//   removed: false,\n// },];\n```\n\n----------------------------------------\n\nTITLE: Using Extended Sign Typed Data in Web3-Eth\nDESCRIPTION: Implementation of signTypedData method for eth_signTypedData and eth_signTypedData_v4 RPC calls in Web3-Eth package.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/CHANGELOG.md#2025-04-21_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nsignTypedData(address: string, typedData: Eip712TypedData): Promise<string>\n```\n\n----------------------------------------\n\nTITLE: Using Web3's Format Function for Data Conversion\nDESCRIPTION: Examples of using Web3.js format function to convert data between different formats with various schemas and return formats.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/12_web3_utils_module/index.md#2025-04-21_snippet_13\n\nLANGUAGE: js\nCODE:\n```\nimport { format } from 'web3-utils';\nimport { FMT_BYTES, FMT_NUMBER } from 'web3-types';\n\n// format a primitive number as a hexidecimal string\nconsole.log(format({ format: 'uint' }, 221, { number: FMT_NUMBER.HEX }));\n// â†³ 0xdd\n\n// format a primitive number as a BigInt\nconsole.log(format({ format: 'uint' }, 221, { number: FMT_NUMBER.BIGINT }));\n// â†³ 221n\n\n// format a stringified number as a hexidecimal string\nconsole.log(format({ format: 'uint' }, '221', { number: FMT_NUMBER.HEX }));\n// â†³ 0xdd\n\n// format a Uint8Array of bytes as a hexidecimal string\nconsole.log(\n\tformat({ format: 'bytes' }, new Uint8Array([2, 33]), {\n\t\tbytes: FMT_BYTES.HEX,\n\t}),\n);\n// â†³ 0x0221\n\n// format an array of values\nconsole.log(\n\tformat({ type: 'array', items: { format: 'uint' } }, ['221', 1983], {\n\t\tnumber: FMT_NUMBER.HEX,\n\t}),\n);\n// â†³ [ '0xdd', '0x7bf' ]\n\n// format an object with multiple properties\nconsole.log(\n\tformat(\n\t\t{\n\t\t\ttype: 'object',\n\t\t\tproperties: {\n\t\t\t\taNumber: { format: 'uint' },\n\t\t\t\tsomeBytes: { format: 'bytes' },\n\t\t\t},\n\t\t},\n\t\t{ aNumber: '221', someBytes: new Uint8Array([2, 33]) },\n\t\t{ bytes: FMT_BYTES.UINT8ARRAY, number: FMT_NUMBER.HEX },\n\t),\n);\n// â†³ { aNumber: '0xdd', someBytes: Uint8Array(2) [ 2, 33 ] }\n```\n\n----------------------------------------\n\nTITLE: Adding new RPC methods to Web3Eth in web3-eth\nDESCRIPTION: New methods exported from Web3Eth and filtering_rpc_method_wrappers for creating and managing filters.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/CHANGELOG.md#2025-04-21_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\ncreateNewPendingTransactionFilter, createNewFilter, createNewBlockFilter, uninstallFilter, getFilterChanges, getFilterLogs\n```\n\n----------------------------------------\n\nTITLE: Interacting with Smart Contracts in a Web3 Plugin\nDESCRIPTION: This snippet demonstrates how to initialize and interact with smart contracts within a Web3 plugin, showing both reading and writing operations.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/14_web3_plugin_guide/index.mdx#2025-04-21_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nimport { Web3PluginBase, Contract } from 'web3';\n\nclass MyPlugin extends Web3PluginBase {\n  pluginNamespace = 'pluginExample';\n\n  async interactWithContract() {\n    //1. Initialize contract\n    const myContract = new Contract(ABI, ADDRESS);\n\n    //2. Interact with reading functions\n    const response = myContract.methods.doSomething().call();\n\n    //3. Interact with writing functions\n    //You must initialize a wallet to be able to send the TX from wallet[0].address\n    const txReceipt = myContract.methods.doSomething().send({from: wallet[0].address})\n  }\n}\n\nexport default MyPlugin;\n```\n\n----------------------------------------\n\nTITLE: Providing API Generic to Web3PluginBase\nDESCRIPTION: Example of providing an API type as a generic to Web3PluginBase to add type hinting to the requestManager during plugin development. This approach improves type safety for custom RPC methods.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/14_web3_plugin_guide/plugin_authors.md#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Web3PluginBase } from 'web3';\n\ntype CustomRpcApi = {\n\tcustom_rpc_method_with_parameters: (parameter1: string, parameter2: number) => string;\n};\n\nexport class CustomRpcMethodsPlugin extends Web3PluginBase<CustomRpcApi> {\n\tpublic pluginNamespace = 'customRpcMethods';\n\n\tpublic async customRpcMethodWithParameters(parameter1: string, parameter2: number) {\n\t\treturn this.requestManager.send({\n\t\t\tmethod: 'custom_rpc_method_with_parameters',\n\t\t\tparams: [parameter1, parameter2],\n\t\t});\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Using FMT_BYTES.HEX Format in Web3.js (TypeScript)\nDESCRIPTION: This snippet demonstrates how to use the FMT_BYTES.HEX format to get block hash as a hexadecimal string in Web3.js.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/01_getting_started/return-formats.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nweb3.eth\n\t.getBlock(undefined, undefined, {\n\t\tbytes: FMT_BYTES.HEX,\n\t\tnumber: FMT_NUMBER.BIGINT,\n\t})\n\t.then((block: Block) => {\n\t\tconsole.log(`Block hash: ${block.hash}`);\n\t});\n// â†³ Block hash: 0xbaea6dbd46fa810a27be4c9eac782602f8efe7512fb30a8455c127b101a23e22\n```\n\n----------------------------------------\n\nTITLE: Using a Web3 Plugin in a Web3.js Application\nDESCRIPTION: This example shows how to import a plugin, initialize a Web3 instance, register the plugin with the Web3 context, and then use the plugin's methods.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/14_web3_plugin_guide/index.mdx#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n//1. import the plugin and web3 module\nimport { Web3 } from \"web3\";\nimport MyPlugin from \"./plugin\";\n\n//2. Initialize the web3 instance\nconst web3 = new Web3(\"https://eth.llamarpc.com\");\n\n//3. Register plugin to add the current Web3Context\nweb3.registerPlugin(new MyPlugin());\n\n//4. Use the plugin methods\nweb3.pluginExample.doSomething();\n//--> Hello web3!\n```\n\n----------------------------------------\n\nTITLE: Wallet Creation and Management\nDESCRIPTION: Shows how to create and manage wallets in both libraries.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/17_migration_ethers/index.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst web3 = new Web3();\nconst wallet = web3.eth.accounts.wallet.add(\n\t// you can generate a private key using web3.eth.accounts.create().privateKey\n\tprivateKey,\n);\n\n// outputs: 0x6f7D735dFB514AA1778E8D97EaCE72BfECE71865\nconsole.log(wallet[0].address);\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst wallet = new ethers.Wallet(\n\t// A private key that you might had generated with:\n\tethers.Wallet.createRandom().privateKey,\n\t// or explicitly given privateKey\n);\n\n// outputs: 0x6f7D735dFB514AA1778E8D97EaCE72BfECE71865\nconsole.log(wallet.address);\n```\n\n----------------------------------------\n\nTITLE: Importing Web3.js Library\nDESCRIPTION: Examples showing how to import Web3 class using both CommonJS and ESM import styles.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/01_getting_started/quickstart.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst { Web3 } = require('web3');\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Web3 } from 'web3';\n```\n\n----------------------------------------\n\nTITLE: Deploying contract with Web3.js\nDESCRIPTION: Example of deploying a contract using Web3.js.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/18_migration_viem/index.md#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nconst contract = new web3.eth.Contract(abi);\nconst deployTx = await contract\n\t.deploy({\n\t\tdata: bytecode,\n\t\targuments: ['constructor param'],\n\t})\n\t.send({\n\t\tfrom: account,\n\t\tgas: '1000000',\n\t});\nconsole.log(deployTx.options.address);\n```\n\n----------------------------------------\n\nTITLE: Extending Web3Subscription Class in TypeScript\nDESCRIPTION: Demonstrates how to extend the Web3Subscription class to create a custom subscription with specified event map and argument types.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/06_events_subscriptions/custom_subscriptions.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass MyCustomSubscription extends Web3Subscription<\n\t{\n\t\t// here provide the type of the `data` that will be emitted by the node\n\t\tdata: string;\n\t},\n\t// here specify the types of the arguments that will be passed to the node when subscribing\n\t{\n\t\tcustomArg: string;\n\t}\n> {\n\t// ...\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Web3 in 1.x (No Longer Supported)\nDESCRIPTION: Demonstrates the old method of importing and instantiating Web3 that is no longer supported in version 4.x.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/15_web3_upgrade_guide/index.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// This will return the name space and the line after it will throw an error!\nconst Web3 = require('web3');\n\nconst web3 = new Web3();\n```\n\n----------------------------------------\n\nTITLE: Message Signing Changes in Web3.js\nDESCRIPTION: Illustrates changes in the web3.eth.sign method, where 4.x only accepts HexString input while 1.x supported both UTF-8 and hex strings.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/15_web3_upgrade_guide/web3_eth_migration_guide.md#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// In 1.x, data can be provided as both a UTF-8 string and a hex string\nawait web3.eth.sign('Hello world', '0xd8c375f286c258521564da00ddee3945d1d057c4');\nawait web3.eth.sign(\n\tweb3.utils.utf8ToHex('Hello world'),\n\t'0xd8c375f286c258521564da00ddee3945d1d057c4',\n);\n\n// 4.x only supports Hex Strings\nawait web3.eth.sign(\n\tweb3.utils.utf8ToHex('Hello world'),\n\t'0xd8c375f286c258521564da00ddee3945d1d057c4',\n);\n```\n\n----------------------------------------\n\nTITLE: WebSocket Provider Event Handling - v1.x vs v4\nDESCRIPTION: Comparison of event handling between web3.js v1.x and v4, showing the change from 'close' to 'disconnect' event.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/15_web3_upgrade_guide/providers_migration_guide.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// in 1.x\nconst provider = new WebSocketProvider(host + port);\n// we would use close to listen to the disconnect function\nprovider.on('close', function (err) {\n\tconsole.log('closed');\n\tresolve();\n});\nprovider.disconnect(1012);\n\n// in v4\nconst provider = new WebSocketProvider(host + port);\n// we would use disconnect to listen to the disconnect function\nprovider.on('disconnect', function (err) {\n\tconsole.log('closed');\n\tresolve();\n});\nprovider.disconnect(1012);\n```\n\n----------------------------------------\n\nTITLE: Hex Validation Function Changes\nDESCRIPTION: Updates to isHex and isHexStrict validation function behavior for edge cases.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/15_web3_upgrade_guide/web3_utils_migration_guide.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nisHex('-123'); // in 1.x used to return `false`. But changed in 4.x to return `true`\n// `true`\n```\n\nLANGUAGE: typescript\nCODE:\n```\nisHex(''); // in 1.x used to return `true`. But changed in 4.x to return `false`\n// `false`\n```\n\nLANGUAGE: typescript\nCODE:\n```\nisHex('-0x'); // in 1.x used to return `true`. But changed in 4.x to return `false`\n// `false`\n\nisHexStrict('-0x'); // in 1.x used to return `true`. But changed in 4.x to return `false`\n// `false`\n```\n\n----------------------------------------\n\nTITLE: Converting Values to Hexadecimal Format\nDESCRIPTION: Examples of various Web3.js utility functions for converting different data types to hexadecimal format.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/12_web3_utils_module/index.md#2025-04-21_snippet_6\n\nLANGUAGE: js\nCODE:\n```\n// most versatile one\nconsole.log(web3.utils.toHex(10));\n// 0xa\n\nconsole.log(web3.utils.toHex(true));\n// 0x01\n\nconsole.log(web3.utils.numberToHex(10));\n// 0xa\n\nconsole.log(web3.utils.fromDecimal(10));\n// 0xa\n\nconst arr = new Uint8Array([1, 2, 3, 4]);\n\nconsole.log(web3.utils.toHex(arr));\n// 0x7b2230223a312c2231223a322c2232223a332c2233223a347d\n\nconsole.log(web3.utils.bytesToHex(arr));\n// 0x01020304\n```\n\n----------------------------------------\n\nTITLE: WebSocket Provider Configuration\nDESCRIPTION: Shows how to configure a WebSocket provider with ClientRequestArgs/ClientOptions and ReconnectOptions parameters.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/02_web3_providers_guide/index.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// include both optional parameters\nconst provider = new WebSocketProvider(\n\t`ws://localhost:8545`,\n\t{\n\t\theaders: {\n\t\t\t// for node services that require an API key in a header\n\t\t\t'x-api-key': '<API key>',\n\t\t},\n\t},\n\t{\n\t\tdelay: 500,\n\t\tautoReconnect: true,\n\t\tmaxAttempts: 10,\n\t},\n);\n\n// OR include only ReconnectOptions\nconst provider = new WebSocketProvider(\n\t`ws://localhost:8545`,\n\t{},\n\t{\n\t\tdelay: 500,\n\t\tautoReconnect: true,\n\t\tmaxAttempts: 10,\n\t},\n);\n```\n\n----------------------------------------\n\nTITLE: Bytes Format Options Enum in Web3.js\nDESCRIPTION: Defines the available format options for bytes data in Web3.js using an enum. Includes HEX and UINT8ARRAY formats.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/09_web3_config/index.md#2025-04-21_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nexport enum FMT_BYTES {\n\tHEX = 'BYTES_HEX',\n\tUINT8ARRAY = 'BYTES_UINT8ARRAY',\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Contract Options in TypeScript\nDESCRIPTION: This code shows how to set various options for a Web3 contract instance, including the contract address, sender address, gas price, and gas limit. It also demonstrates how to update the contract's ABI.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/05_smart_contracts/mastering_smart_contracts.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nmyContract.options = {\n    address: '0x1234567890123456789012345678901234567891',\n    from: '0xde0B295669a9FD93d5F28D9Ec85E40f4cb697BAe',\n    gasPrice: '10000000000000',\n    gas: 1000000\n}\n\n// If the smart contract is not deployed yet, the property `address` will be filled automatically after deployment succeed.\n// If the smart contract is already deployed, you can set the `address`:\nmyContract.options.address = '0x1234567890123456789012345678901234567891';\n// this is the same as the second parameter in the constructor:\n// new Contract(abi, `address`);\n\n// set default from address\nmyContract.options.from = '0x1234567890123456789012345678901234567891';\n// set default gas price in wei\nmyContract.options.gasPrice = '20000000000000';\n// set the gas limit\nmyContract.options.gas = 5000000;\n\n// you can also use this to update the ABI of the contract\nmyContract.options.jsonInterface = [{...}]; // ABI\n// this is the same as the first parameter in the Contract constructor:\n// new Contract(`abi`, address)\n```\n\n----------------------------------------\n\nTITLE: Integrating Ethereum Module in a Web3 Plugin\nDESCRIPTION: This snippet demonstrates how to use the Ethereum module within a Web3 plugin to access blockchain information like chain ID and block number, with formatting options.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/14_web3_plugin_guide/index.mdx#2025-04-21_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport { FMT_NUMBER, Web3PluginBase, eth } from 'web3';\n\nclass MyPlugin extends Web3PluginBase {\n  pluginNamespace = 'pluginExample';\n\n  async getChainId() {\n    //`this` is the web3context used when you register the plugin in the usage\n    return await eth.getChainId(this, { number: FMT_NUMBER.NUMBER });\n  }\n\n  async getBlockNumber() {\n    return await eth.getBlockNumber(this, { number: FMT_NUMBER.NUMBER });\n  }\n\n  //more web3.eth. methods...\n}\n\nexport default MyPlugin;\n```\n\n----------------------------------------\n\nTITLE: Creating Custom RPC Method in JavaScript\nDESCRIPTION: Implements a custom RPC method within the CustomRpcMethodsPlugin class in JavaScript, using the Web3.js requestManager to send the custom RPC call.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/13_advanced/custom_RPC.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst { Web3PluginBase } = require('web3');\n\nclass CustomRpcMethodsPlugin extends Web3PluginBase {\n\tpluginNamespace = 'customRpcMethods';\n\n\tasync customRpcMethod() {\n\t\t// step 3\n\t\treturn this.requestManager.send({\n\t\t\t// plugin has access to web3.js internal features like request manager\n\t\t\tmethod: 'custom_rpc_method',\n\t\t\tparams: [],\n\t\t});\n\t}\n}\n\nmodule.exports = CustomRpcMethodsPlugin;\n```\n\n----------------------------------------\n\nTITLE: Importing PromiEvent in 1.x vs 4.x\nDESCRIPTION: Shows how to import the PromiEvent class which has moved from 'web3-core-promievent' to 'web3-core' in version 4.x.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/15_web3_upgrade_guide/index.md#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n// in 1.x\nimport Web3PromiEvent from 'web3-core-promievent';\n\n// in 4.x\nimport { Web3PromiEvent } from 'web3-core';\n```\n\n----------------------------------------\n\nTITLE: WebSocket Provider Usage Examples\nDESCRIPTION: Examples demonstrating WebSocket provider initialization and termination in web3.js v4.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/15_web3_upgrade_guide/providers_migration_guide.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst web3 = new Web3(wsUrl);\n// The program will keep running to listen for events.\n\n// When you are ready to terminate your program\nweb3.currentProvider?.disconnect();\n// The program will now terminate\n```\n\n----------------------------------------\n\nTITLE: Configuring Hardhat with Wallet Mnemonic\nDESCRIPTION: Hardhat configuration file that sets up a local development network using the wallet's secret recovery phrase to fund test accounts.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/07_dapps/intermediate-dapp.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nmodule.exports = {\n\tnetworks: {\n\t\thardhat: {\n\t\t\taccounts: {\n\t\t\t\tmnemonic: '<SECRET RECOVERY PHRASE>',\n\t\t\t},\n\t\t\tchainId: 1337,\n\t\t},\n\t},\n};\n```\n\n----------------------------------------\n\nTITLE: Connecting to the Hardhat Network with Web3.js\nDESCRIPTION: JavaScript code that establishes a connection to the local Hardhat network and verifies it by retrieving the chain ID.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/04_transactions/transactions.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst { Web3 } = require('web3');\n\nconst web3 = new Web3('http://127.0.0.1:8545/');\n\n// Log the chain ID to the console\nweb3.eth\n\t.getChainId()\n\t.then(result => {\n\t\tconsole.log('Chain ID: ' + result);\n\t})\n\t.catch(error => {\n\t\tconsole.error(error);\n\t});\n```\n\n----------------------------------------\n\nTITLE: Importing Web3 Utils Package Changes\nDESCRIPTION: Changes in importing web3-utils package between version 1.x and 4.x. Shows transition from default import to named import syntax.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/15_web3_upgrade_guide/web3_utils_migration_guide.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// 1.x\nimport web3Utils from 'web3-utils';\n\n// 4.x\nimport * as web3Utils from 'web3-utils';\n```\n\n----------------------------------------\n\nTITLE: Converting Between UTF-8, ASCII, and Hex in Web3\nDESCRIPTION: Examples of using Web3.js utility functions to convert between UTF-8, ASCII, and hexadecimal formats.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/12_web3_utils_module/index.md#2025-04-21_snippet_7\n\nLANGUAGE: js\nCODE:\n```\nconsole.log(web3.utils.utf8ToHex('ðŸ˜Š'));\n// 0xf09f988a\n\nconsole.log(web3.utils.fromUtf8('ðŸ˜Š'));\n// 0xf09f988a\n\nconsole.log(web3.utils.asciiToHex('ðŸ˜Š'));\n// 0xd83dde0a\n\nconsole.log(web3.utils.toUtf8('0xf09f988a'));\n// ðŸ˜Š\n\nconsole.log(web3.utils.hexToUtf8('0xf09f988a'));\n// ðŸ˜Š\n\nconsole.log(web3.utils.hexToString('0xf09f988a'));\n// ðŸ˜Š\n\n// emojis are not ASCII character, that's why it won't work\nconsole.log(web3.utils.toAscii('0x4869'));\n// Hi\n\nconsole.log(web3.utils.hexToAscii('0x4869'));\n// Hi\n```\n\n----------------------------------------\n\nTITLE: Initializing TypeSafe Contract API\nDESCRIPTION: Example showing how to initialize a type-safe Contract API instance. Uses TypeScript with const assertion for full type safety. Requires an ABI array to be provided.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/packages/web3-eth-contract/README.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Contract } from 'web3-eth-contract';\n\nconst abi = [...] as const;\n\nconst contract = new Contract(abi);\n```\n\n----------------------------------------\n\nTITLE: Getting Current Configuration for Web3 Instance\nDESCRIPTION: Illustrates how to retrieve the current configuration parameters for a Web3 instance using the getContextObject().config method.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/09_web3_config/index.md#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Web3 } from 'web3';\n\nconst web3 = new Web3('http://127.0.0.1:7545');\n\nconsole.log(web3.getContextObject().config);\n/* â†³\n  handleRevert: false,\n  defaultAccount: undefined,\n  defaultBlock: 'latest',\n  transactionBlockTimeout: 50,\n  transactionConfirmationBlocks: 24,\n  transactionPollingInterval: 1000,\n  transactionPollingTimeout: 750000,\n  transactionReceiptPollingInterval: undefined,\n  transactionSendTimeout: 750000,\n  transactionConfirmationPollingInterval: undefined,\n  blockHeaderTimeout: 10,\n  maxListenersWarningThreshold: 100,\n  contractDataInputFill: 'input',\n  defaultNetworkId: undefined,\n  defaultChain: 'mainnet',\n  defaultHardfork: 'london',\n  defaultCommon: undefined,\n  defaultTransactionType: '0x2',\n  defaultMaxPriorityFeePerGas: '0x9502f900',\n ...\n*/\n```\n\n----------------------------------------\n\nTITLE: Instantiating Contract with Options in TypeScript\nDESCRIPTION: Demonstrates how to create a Contract instance with additional options, such as default gas price and gas limit.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/05_smart_contracts/mastering_smart_contracts.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst abi = [{...}]; /* obtained ABI as an array */;\nconst address = '0x...'; // Deployed address of the contract\n\nconst myContract = new Contract(abi, address, {\n  defaultGasPrice: '20000000000', // default gas price in wei, 20 gwei in this case\n  defaultGas: 5000000, // provide the gas limit for transactions\n  //...other optional properties\n});\n```\n\n----------------------------------------\n\nTITLE: Working Contract Initialization with Manual ABI Type Assertion\nDESCRIPTION: Demonstrates the workaround of copying the ABI into a TypeScript file with 'as const' assertion to enable proper type inference.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/05_smart_contracts/infer_contract_types.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Contract, Web3} from 'web3';\n\nconst ERC20 = [\n    ...\n    // 'as const' is important part, without it typescript would create generic type and remove available methods from type\n] as const;\n\n(async function () {\n  const web3 = new Web3('rpc url');\n\n  const contract = new Contract(ERC20, '0x7af963cF6D228E564e2A0aA0DdBF06210B38615D', web3);\n\n  const holder = '0xa8F6eB216e26C1F7d924A801E46eaE0CE8ed1A0A';\n\n  //Works now\n  const balance = await contract.methods.balanceOf(holder).call();\n})();\n```\n\n----------------------------------------\n\nTITLE: Transaction Confirmation Event Changes in Web3.js\nDESCRIPTION: Demonstrates changes in transaction confirmation event handling between Web3.js v1.x and v4.x. Notable changes include the confirmation object structure and BigInt usage for numeric values.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/15_web3_upgrade_guide/web3_eth_migration_guide.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// in 1.x\nweb3.eth.sendTransaction({ ... }).on('confirmation', (confirmationNumber, receipt) => { ... });\n// in 4.x\nweb3.eth.sendTransaction({ ... }).on('confirmation', (confirmationObject) => { ... });\n```\n\n----------------------------------------\n\nTITLE: WebSocket Provider Options Comparison\nDESCRIPTION: Comparison of WebSocket provider options configuration between web3.js v1.x and v4.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/15_web3_upgrade_guide/providers_migration_guide.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// in 1.x\nvar options = {\n\ttimeout: 30000, // ms\n\n\t// Useful for credentialed urls, e.g: ws://username:password@localhost:8546\n\theaders: {\n\t\tauthorization: 'Basic username:password',\n\t},\n\n\tclientConfig: {\n\t\t// Useful if requests are large\n\t\tmaxReceivedFrameSize: 100000000, // bytes - default: 1MiB\n\t\tmaxReceivedMessageSize: 100000000, // bytes - default: 8MiB\n\n\t\t// Useful to keep a connection alive\n\t\tkeepalive: true,\n\t\tkeepaliveInterval: 60000, // ms\n\t},\n\n\t// Enable auto reconnection\n\treconnect: {\n\t\tauto: true,\n\t\tdelay: 5000, // ms\n\t\tmaxAttempts: 5,\n\t\tonTimeout: false,\n\t},\n};\n// in v4\nlet clientOptions: ClientOptions = {\n\t// Useful for credentialed urls, e.g: ws://username:password@localhost:8546\n\theaders: {\n\t\tauthorization: 'Basic username:password',\n\t},\n\tmaxPayload: 100000000,\n};\n\nconst reconnectOptions: ReconnectOptions = {\n\tautoReconnect: true,\n\tdelay: 5000,\n\tmaxAttempts: 5,\n};\n```\n\n----------------------------------------\n\nTITLE: IPC Provider Configuration\nDESCRIPTION: Shows configuration of an IPC provider with SocketConstructorOpts and ReconnectOptions parameters.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/02_web3_providers_guide/index.md#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// include both optional parameters\nconst provider = new IpcProvider(\n\t'/Users/myuser/Library/Ethereum/geth.ipc',\n\t{\n\t\twritable: false,\n\t},\n\t{\n\t\tdelay: 500,\n\t\tautoReconnect: true,\n\t\tmaxAttempts: 10,\n\t},\n);\n\n// OR include only ReconnectOptions\nconst provider = new IpcProvider(\n\t'/Users/myuser/Library/Ethereum/geth.ipc',\n\t{},\n\t{\n\t\tdelay: 500,\n\t\tautoReconnect: true,\n\t\tmaxAttempts: 10,\n\t},\n);\n```\n\n----------------------------------------\n\nTITLE: Installing Web3.js using NPM\nDESCRIPTION: Command to install the Web3.js package using NPM package manager. The package allows interaction with Ethereum blockchain via JavaScript.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install web3\n```\n\n----------------------------------------\n\nTITLE: Comparing sendTransaction 'receipt' Event in Web3.js 1.x and 4.x\nDESCRIPTION: Shows the difference in the 'receipt' event data for sendTransaction between web3.js versions 1.x and 4.x. In 4.x, several numeric values are returned as BigInt instead of numbers or strings.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/15_web3_upgrade_guide/web3_eth_migration_guide.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// in 1.x\nweb3.eth.sendTransaction({ ... }).on('receipt', (receipt) => { ... });\n// receipt would be:\n// {\n//   blockHash: '0x55ff0699736027fd0eddf90e890294ba6765ecf699cefd2f6c255a2fdae06a5a',\n//   blockNumber: 14966017n,\n//   cumulativeGasUsed: 6992382n,\n//   effectiveGasPrice: 31200410061n,\n//   from: '0x3b7414be92e87837d6f95d01b8e3c93ac9d20804',\n//   gasUsed: 21000n,\n//   logs: [],\n//   logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n//   status: 1n,\n//   to: '0x8b664e252b7c5c87c17e73c69f16e56454c9661f',\n//   transactionHash: '0x219f94fa188e6a0927c3c659537b5c76f4a750b948e7a73c80b28786227aa593',\n//   transactionIndex: 80n,\n//   type: 2n\n// }\n\n// in 4.x\nweb3.eth.sendTransaction({ ... }).on('receipt', (receipt) => { ... });\n// receipt would be:\n// {\n//     transactionHash: '0xef37e818889e7b40df24f8546ae15b16cda7e8fdc99ad76356611401cb4c4f93',\n//     transactionIndex: '0x0',\n//     blockNumber: '0xf',\n//     blockHash: '0x8a700d6665a5b91789f7525490c453d55208f7560662aa3ff2eaab8d297bfd07',\n//     from: '0x6e599da0bff7a6598ac1224e4985430bf16458a4',\n//     to: '0x0000000000000000000000000000000000000000',\n//     cumulativeGasUsed: '0x5208',\n//     gasUsed: '0x5208',\n//     logs: [],\n//     logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n//     status: '0x1',\n//     effectiveGasPrice: '0x77359400',\n//     type: '0x0'\n// }\n```\n\n----------------------------------------\n\nTITLE: Creating wallet client with account in Viem\nDESCRIPTION: Equivalent code in Viem to create a wallet client with an account.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/18_migration_viem/index.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createWalletClient, http } from 'viem';\nimport { privateKeyToAccount } from 'viem/accounts';\nimport { mainnet } from 'viem/chains';\n\nconst account = privateKeyToAccount(privateKey);\n\nconst client = createWalletClient({\n\taccount,\n\tchain: mainnet,\n\ttransport: http(),\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Web3 with HttpProvider in TypeScript\nDESCRIPTION: A TypeScript example showing how to initialize a Web3 instance using an HTTP provider. This allows applications to connect to an Ethereum node over HTTP for reading blockchain data and sending transactions.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/glossary/index.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Web3 } from 'web3';\nconst web3 = new Web3(new Web3.providers.HttpProvider('http://localhost:8545'));\n```\n\n----------------------------------------\n\nTITLE: Plugin Developer Code in JavaScript\nDESCRIPTION: Example code written by a plugin developer in JavaScript. The code exports a PluginExample class that extends Web3PluginBase, defines a namespace, and implements a sample method. It also includes module augmentation for TypeScript compatibility.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/14_web3_plugin_guide/plugin_users.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// code written by the plugin **developer**\n\nconst { Web3PluginBase } = require('web3');\n\nexport class PluginExample extends Web3PluginBase {\n\tpublic pluginNamespace = 'pluginExample';\n\n\tpublic sampleMethod() {\n\t\treturn 'simpleValue';\n\t}\n}\n\n// Module Augmentation\ndeclare module 'web3' {\n\tinterface Web3Context {\n\t\tpluginExample: PluginExample;\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Defining EIP6963ProviderInfo Interface in TypeScript\nDESCRIPTION: TypeScript interface that specifies the metadata structure for an EIP-6963 provider, including UUID, name, icon, and RDNS identifier.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/02_web3_providers_guide/eip6963.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface EIP6963ProviderInfo {\n\tuuid: string;\n\tname: string;\n\ticon: string;\n\trdns: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Registering a Plugin in TypeScript\nDESCRIPTION: Example code demonstrating how a user can register a plugin with a Web3 instance in TypeScript. The code imports the required modules using TypeScript import syntax, creates a Web3 instance, registers the plugin, and calls a plugin method.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/14_web3_plugin_guide/plugin_users.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// code written by the plugin **user**\n\nimport { Web3 } from 'web3';\nimport { PluginExample } from 'web3-plugin-example';\n\nconst web3 = new Web3('http://127.0.0.1:8545');\nweb3.registerPlugin(new PluginExample(any_parameters, if_needed));\n\nweb3.pluginExample.sampleMethod();\n```\n\n----------------------------------------\n\nTITLE: Sending transaction with Web3.js\nDESCRIPTION: Example of sending a transaction using Web3.js.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/18_migration_viem/index.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconst tx = await web3.eth.sendTransaction({\n\tfrom: account,\n\tto: '0x92d3267215Ec56542b985473E73C8417403B15ac',\n\tvalue: web3.utils.toWei('0.001', 'ether'),\n});\n```\n\n----------------------------------------\n\nTITLE: Managing Web3 Wallet in a Plugin\nDESCRIPTION: This example shows how to create and manage a Web3 wallet within a plugin, including account creation and addition to the wallet for transaction signing.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/14_web3_plugin_guide/index.mdx#2025-04-21_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nimport { Web3PluginBase, eth } from 'web3';\n\nclass MyPlugin extends Web3PluginBase {\n  pluginNamespace = 'pluginExample';\n\n  async createWallet() {\n    //1. Create a random account\n    const accounts = eth.accounts.create();\n    //2. Add the account to the wallet\n    const wallet = this.wallet.add(accounts);\n    //by creating the wallet, web3.js will use this account to sign TXs under the hood\n    console.log(wallet);\n    /*\n    Wallet(1) [\n    {\n      address: '0x233725561B1430bE2C24Ce9EEabe63E4B46EC9E3',\n      privateKey: '0x6856adf06dd803e0354450ccf251f829a2c9ef1177ce371f8835bbfb56cd0898',\n      signTransaction: [Function: signTransaction],\n      sign: [Function: sign],\n      encrypt: [Function: encrypt]\n    },\n    _accountProvider: {\n      create: [Function: createWithContext],\n      privateKeyToAccount: [Function: privateKeyToAccountWithContext],\n      decrypt: [Function: decryptWithContext]\n    },\n    _addressMap: Map(1) { '0x233725561b1430be2c24ce9eeabe63e4b46ec9e3' => 0 },\n    _defaultKeyName: 'web3js_wallet'\n  ]\n    */\n  }\n}\n\nexport default MyPlugin;\n```\n\n----------------------------------------\n\nTITLE: HTTP Provider Options Interface Definition - v1.x\nDESCRIPTION: TypeScript interface definitions for HTTP provider options in web3.js v1.x showing the structure of HttpProviderOptions, HttpAgent, and HttpHeader interfaces.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/15_web3_upgrade_guide/providers_migration_guide.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface HttpProviderOptions {\n\tkeepalive?: boolean;\n\ttimeout?: number;\n\theaders?: HttpHeader[];\n\twithCredentials?: boolean;\n\tagent?: HttpAgent;\n}\n\ninterface HttpAgent {\n\thttp?: http.Agent;\n\thttps?: https.Agent;\n\tbaseUrl?: string;\n}\n\ninterface HttpHeader {\n\tname: string;\n\tvalue: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Ethereum Block Data with Web3.js and Wagmi\nDESCRIPTION: This component demonstrates how to use the useWeb3js hook to fetch block data from the Ethereum mainnet. It retrieves information from a specific block and displays its hash, extraData, and miner address.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/16_wagmi_usage/index.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useWeb3js } from '../web3/useWeb3js';\nimport { mainnet } from 'wagmi/chains';\nimport { useEffect, useState } from 'react';\n\ntype Block = {\n\thash: string;\n\textraData: string;\n\tminer: string;\n};\n\nfunction Block() {\n\tconst web3js = useWeb3js({ chainId: mainnet.id });\n\tconst [block, setBlock] = useState<Block>();\n\n\tuseEffect(() => {\n\t\tweb3js.eth\n\t\t\t.getBlock(19235006)\n\t\t\t.then(b => {\n\t\t\t\tsetBlock(b as Block);\n\t\t\t})\n\t\t\t.catch(console.error);\n\t}, [setBlock]);\n\n\tif (!block) return <div>Loading...</div>;\n\n\treturn (\n\t\t<>\n\t\t\t<div id=\"hash\">{block.hash}</div>\n\t\t\t<div id=\"extraData\">{block.extraData}</div>\n\t\t\t<div id=\"miner\">{block.miner}</div>\n\t\t</>\n\t);\n}\n\nexport default Block;\n```\n\n----------------------------------------\n\nTITLE: Setting Provider for Contract Instance in TypeScript\nDESCRIPTION: This code shows how to set a specific provider for a contract instance when importing the Contract object from web3-eth-contract. This is useful when there is no web3 context to read the provider from.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/05_smart_contracts/mastering_smart_contracts.md#2025-04-21_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n// Importing from web3-eth-contract package\nimport { Contract } from 'web3-eth-contract';\nconst contract = new Contract(...);\n\n// to set the provider for the contract instance\ncontract.setProvider('yourProvider');\n```\n\n----------------------------------------\n\nTITLE: Comparing getFeeHistory Return Values in Web3.js 1.x and 4.x\nDESCRIPTION: Demonstrates the difference in return values for the getFeeHistory method between web3.js versions 1.x and 4.x. In 4.x, oldestBlock is returned as a BigInt and baseFeePerGas as number[].\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/15_web3_upgrade_guide/web3_eth_migration_guide.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// in 1.x\nawait web3.eth.getFeeHistory('0x1', 'latest', []);\n// {\n//     oldestBlock: '0x0',\n//     baseFeePerGas: [ '0x3b9aca00', '0x342770c0' ],\n//     gasUsedRatio: [ 0 ]\n// }\n\n// in 4.x\nawait web3.eth.getFeeHistory('0x1', 'latest', []);\n// {\n//     oldestBlock: 0n,\n//     baseFeePerGas: [ 1000000000, 875000000 ],\n//     gasUsedRatio: [ 0 ]\n// }\n```\n\n----------------------------------------\n\nTITLE: Calling contract method with Viem\nDESCRIPTION: Equivalent code in Viem to call a contract method.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/18_migration_viem/index.md#2025-04-21_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nconst data = await publicClient.readContract({\n\taddress: '0x92d3267215Ec56542b985473E73C8417403B15ac',\n\tabi: wagmiAbi,\n\tfunctionName: 'tokenTotalSupply',\n});\n```\n\n----------------------------------------\n\nTITLE: Local Provider Implementation\nDESCRIPTION: Shows how to implement local providers using IPC, HTTP, and WebSocket connections with a local Geth node.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/02_web3_providers_guide/index.md#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Web3 } from 'web3';\nimport { IpcProvider } from 'web3-providers-ipc';\n\n// IPC provider\nconst web3 = new Web3(new IpcProvider('/Users/myuser/Library/Ethereum/geth.ipc'));\n// the path above is for macOS\n// on Windows the path is: '\\\\.\\pipe\\geth.ipc'\n// on Linux the path is: '/users/myuser/.ethereum/geth.ipc'\n\n// HTTP provider\nweb3.setProvider('http://localhost:8545');\n// OR\nweb3.setProvider(new Web3.providers.HttpProvider('http://localhost:8545'));\n\n// WebSocket provider\nweb3.setProvider('ws://localhost:8546');\n// OR\nweb3.setProvider(new Web3.providers.WebsocketProvider('ws://localhost:8546'));\n```\n\n----------------------------------------\n\nTITLE: Installing Web3Modal Dependencies\nDESCRIPTION: Command to install required npm packages for Web3Modal integration with Web3.js\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/07_dapps/web3_modal_guide/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install web3modal-web3js web3js\n```\n\n----------------------------------------\n\nTITLE: Transaction Signing Changes in Web3.js\nDESCRIPTION: Shows differences in transaction signing between versions, including changes in gas fee parameters, contract deployment data handling, and transaction hash inclusion.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/15_web3_upgrade_guide/web3_eth_migration_guide.md#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// In 1.x - Legacy (type 0x0) transaction\nawait web3.eth.signTransaction({\n\tfrom: '0x95Cd1391888fe2460371c67cc3e45b9579c3E0dA',\n\tto: '0x6E599DA0bfF7A6598AC1224E4985430Bf16458a4',\n\tgas: '21000',\n\tgasPrice: '0xc3e17d20',\n\tnonce: '0x4',\n});\n\n// In 4.x - Legacy (type 0x0) transaction\nawait web3.eth.signTransaction({\n\tfrom: '0x95Cd1391888fe2460371c67cc3e45b9579c3E0dA',\n\tto: '0x6E599DA0bfF7A6598AC1224E4985430Bf16458a4',\n\tgas: '21000',\n\tgasPrice: '0xc3e17d20',\n\tnonce: '0x4',\n});\n```\n\n----------------------------------------\n\nTITLE: Importing and using ENS in TypeScript\nDESCRIPTION: Demonstrates how to import the ENS class from web3-eth-ens and initialize it with a provider.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/11_ens/index.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ENS } from 'web3-eth-ens';\n\nconst ens = new ENS(undefined, 'https://127.0.0.1:4545');\n\nconsole.log(await ens.getAddress('vitalik.eth'));\n```\n\n----------------------------------------\n\nTITLE: IPC Provider Implementation\nDESCRIPTION: Demonstrates initialization of an IPC (Inter-Process Communication) provider for local node communication.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/02_web3_providers_guide/index.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Web3 } from 'web3';\nimport { IpcProvider } from 'web3-providers-ipc';\n\nconst web3 = new Web3(new IpcProvider('/users/myuser/.ethereum/geth.ipc'));\n\nawait web3.eth.getBlockNumber();\n// â†³ 18849658n\n```\n\n----------------------------------------\n\nTITLE: Using FMT_BYTES.UINT8ARRAY Format in Web3.js (TypeScript)\nDESCRIPTION: This snippet shows how to use the FMT_BYTES.UINT8ARRAY format to get block hash as a Uint8Array in Web3.js.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/01_getting_started/return-formats.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nweb3.eth\n\t.getBlock(undefined, undefined, {\n\t\tbytes: FMT_BYTES.UINT8ARRAY,\n\t\tnumber: FMT_NUMBER.BIGINT,\n\t})\n\t.then((block: Block) => {\n\t\tconsole.log(`Block hash: [${block.hash}]`);\n\t});\n// â†³ Block hash: [186,234,109,...,162,62,34]\n```\n\n----------------------------------------\n\nTITLE: Contract Instantiation Error Message Change\nDESCRIPTION: Shows the difference in error messages when attempting to create a contract instance without the 'new' keyword between versions 1.x and 4.x.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/15_web3_upgrade_guide/contracts_migration_guide.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// 1.x\nconst contract = Contract(jsonInterface, address);\n// Please use the \"new\" keyword to instantiate a web3.eth.Contract() object!\n\n// 4.x\nconst contract = Contract(jsonInterface, address);\n// Class constructor ContractBuilder cannot be invoked without 'new'\n```\n\n----------------------------------------\n\nTITLE: Transaction Confirmation Numbering Changes\nDESCRIPTION: Shows how confirmation number progression differs between versions, with 4.x starting from 2 instead of 1 as in 1.x.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/15_web3_upgrade_guide/web3_eth_migration_guide.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// in 1.x\nweb3.eth.sendTransaction({ ... }).on('confirmation', (confirmationNumber, receipt) => {\n    // confirmationNumber would equal 1 the first time the event was emitted\n    // confirmationNumber would then equal 2 the next time\n    // and so on until 12 (or whatever transactionConfirmationBlocks is set to) confirmations are found\n});\n\n// in 4.x\nweb3.eth.sendTransaction({ ... }).on('confirmation', (confirmationObject) => {\n    // confirmationNumber would equal 2 the first time the event was emitted\n    // confirmationNumber would then equal 3 the next time\n    // and so on until 12 (or whatever transactionConfirmationBlocks is set to) confirmations are found\n});\n```\n\n----------------------------------------\n\nTITLE: Registering and Using a Web3.js Plugin\nDESCRIPTION: Example code showing how a user would register and use a web3.js plugin. This demonstrates the plugin registration process using Web3Context and how the plugin methods are accessed through the defined namespace.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/14_web3_plugin_guide/plugin_authors.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// registering_a_plugin.ts\nimport { Web3Context } from 'web3';\n\nimport { CustomRpcMethodsPlugin } from './custom_rpc_methods_plugin';\n\nconst web3Context = new Web3Context('http://127.0.0.1:8545');\nweb3Context.registerPlugin(new CustomRpcMethodsPlugin());\n\nawait web3Context.customRpcMethods.someMethod();\n```\n\n----------------------------------------\n\nTITLE: Confirmation Handler Parameter Changes in Web3.js Contract\nDESCRIPTION: Illustrates the change in confirmation event handler parameters, moving from multiple separate parameters to a single object parameter containing the same information.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/15_web3_upgrade_guide/contracts_migration_guide.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n//1.x\nmyContract .send().on('confirmation', (confirmations: number, receipt: object, latestBlockHash: string) => {})\n\n//4.x\nmyContract .send().on('confirmation', ({confirmations: bigint, receipt: object, latestBlockHash: string}) => {})\n```\n\n----------------------------------------\n\nTITLE: Comparing Ethereum Block Numbers\nDESCRIPTION: Example of using Web3.js utility function to compare Ethereum block numbers in different formats.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/12_web3_utils_module/index.md#2025-04-21_snippet_12\n\nLANGUAGE: js\nCODE:\n```\n// accepts numbers and formats as well\nconsole.log(web3.utils.compareBlockNumbers('pending', 'latest'));\n// 1\n\nconsole.log(web3.utils.compareBlockNumbers('latest', 'pending'));\n// -1\n\nconsole.log(web3.utils.compareBlockNumbers('latest', 'latest'));\n// 0\n\nconsole.log(web3.utils.compareBlockNumbers(2, 2));\n// 0\n```\n\n----------------------------------------\n\nTITLE: Web3Context Link Workaround for Plugins\nDESCRIPTION: Specific code demonstrating the workaround for linking Web3Context with instantiated web3.js packages in plugins. This code ensures that the context of a Contract instance is properly linked to the user's Web3Context.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/14_web3_plugin_guide/plugin_authors.md#2025-04-21_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\npublic link(parentContext: Web3Context) {\n\tsuper.link(parentContext);\n\t// This workaround will ensure the context of the Contract\n\t// instance is linked to the context of the class the\n\t// plugin user is registering the plugin with\n\tthis._contract.link(parentContext);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing pluginNamespace in a Custom Plugin\nDESCRIPTION: Example plugin implementation showing how to set up the pluginNamespace property which determines how the plugin will be accessed by users. This example defines a namespace called 'customRpcMethods'.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/14_web3_plugin_guide/plugin_authors.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// custom_rpc_methods_plugin.ts\nimport { Web3PluginBase } from 'web3';\n\nexport class CustomRpcMethodsPlugin extends Web3PluginBase {\n\tpublic pluginNamespace = 'customRpcMethods';\n\n\tpublic someMethod() {\n\t\treturn 'someValue';\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Smart Contract Interaction\nDESCRIPTION: Example of interacting with an ERC20 smart contract using Web3.js, including balance checking and contract name retrieval\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/07_dapps/web3_modal_guide/index.mdx#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport Web3 from 'web3';\nimport { ERC20ABI } from './contracts/ERC20';\n\nconst USDTAddress = '0xdac17f958d2ee523a2206206994597c13d831ec7';\n\nfunction Components() {\n  const { isConnected } = useWeb3ModalAccount()\n  const { walletProvider } = useWeb3ModalProvider()\n  const [USDTBalance, setUSDTBalance] = useState(0);\n  const [smartContractName, setSmartContractName] = useState('');\n\n  async function getContractInfo() {\n    if (!isConnected) throw Error('not connected');\n    const web3 = new Web3({\n      provider: walletProvider,\n      config: { defaultNetworkId: chainId },\n    });\n    const contract = new web3.eth.Contract(ERC20ABI, USDTAddress);\n    const balance = await contract.methods.balanceOf(address).call();\n    const name = (await contract.methods.name().call()) as string;\n    setUSDTBalance(Number(balance));\n    setSmartContractName(name);\n  }\n\n  return <> <button onClick={getContractInfo}>Get User Balance and Contract name</button> <p> Balance: {USDTBalance} smartContractName: {smartContractName}</p></>\n}\n```\n\n----------------------------------------\n\nTITLE: Defining EIP6963ProviderDetail Interface in TypeScript\nDESCRIPTION: TypeScript interface defining the structure of an EIP-6963 provider detail, which includes provider information and the actual EIP1193 provider object.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/02_web3_providers_guide/eip6963.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface EIP6963ProviderDetail {\n\tinfo: EIP6963ProviderInfo;\n\tprovider: EIP1193Provider;\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Viem Clients to Web3.js Instances in Wagmi\nDESCRIPTION: This utility provides functions to convert Viem clients to web3.js instances for use with Wagmi. It includes a conversion function (clientToWeb3js) and two React hooks (useWeb3js and useWeb3jsSigner) that handle different client types.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/16_wagmi_usage/index.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Web3 } from 'web3';\nimport { useMemo } from 'react';\nimport type { Chain, Client, Transport } from 'viem';\nimport { type Config, useClient, useConnectorClient } from 'wagmi';\n\nexport function clientToWeb3js(client?: Client<Transport, Chain>) {\n\tif (!client) {\n\t\treturn new Web3();\n\t}\n\n\tconst { transport } = client;\n\n\tif (transport.type === 'fallback') {\n\t\treturn new Web3(transport.transports[0].value.url);\n\t}\n\treturn new Web3(transport);\n}\n\n/** Action to convert a viem Client to a web3.js Instance. */\nexport function useWeb3js({ chainId }: { chainId?: number } = {}) {\n\tconst client = useClient<Config>({ chainId });\n\treturn useMemo(() => clientToWeb3js(client), [client]);\n}\n\n/** Action to convert a viem ConnectorClient to a web3.js Instance. */\nexport function useWeb3jsSigner({ chainId }: { chainId?: number } = {}) {\n\tconst { data: client } = useConnectorClient<Config>({ chainId });\n\treturn useMemo(() => clientToWeb3js(client), [client]);\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Shim.js in App\nDESCRIPTION: TypeScript code showing how to import the shim.js file at the top of App.js for BigInt support.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/19_resources_and_troubleshooting/index.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// Make sure you use `import` and not `require`!\nimport './shim.js';\n```\n\n----------------------------------------\n\nTITLE: Using getContenthash function with ENS\nDESCRIPTION: Retrieves the content hash associated with a provided ENS name using the getContenthash function.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/11_ens/index.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst hash = await web3.eth.ens.getContenthash('ethereum.eth');\nconsole.log(hash);\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Events in web3.js v1.x\nDESCRIPTION: Example of subscribing to newBlockHeaders event in web3.js version 1.x using the callback pattern. The subscription is created in a single step with an error and result callback.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/15_web3_upgrade_guide/subscribe_migration_guide.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nvar subscription = web3.eth.subscribe('newBlockHeaders', function (error, result) {\n\tif (!error) console.log(result);\n});\n```\n\n----------------------------------------\n\nTITLE: Importing Formatters in 1.x vs 4.x\nDESCRIPTION: Shows how to import formatters which have moved from 'web3-core-helpers' to 'web3-core' in version 4.x.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/15_web3_upgrade_guide/index.md#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// in 1.x\nimport { formatters } from 'web3-core-helpers';\n\n// in 4.x\nimport { formatters } from 'web3-core';\n```\n\n----------------------------------------\n\nTITLE: Defining a Smart Contract with Events in Solidity\nDESCRIPTION: A sample Solidity smart contract that demonstrates contract structure with state variables, a constructor, events, and functions. The contract emits events when specific functions are called, which can then be captured by Web3.js applications.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/glossary/index.md#2025-04-21_snippet_0\n\nLANGUAGE: solidity\nCODE:\n```\npragma solidity ^0.8.4;\n\ncontract Test {\n\tuint256 a;\n\taddress d = 0xdCad3a6d3569DF655070DEd06cb7A1b2Ccd1D3AF;\n\n\tconstructor(uint256 testInt) {\n\t\ta = testInt;\n\t}\n\n\tevent Event(uint256 indexed b, bytes32 c);\n\n\tevent Event2(uint256 indexed b, bytes32 c);\n\n\tfunction foo(uint256 b, bytes32 c) public returns (address) {\n\t\temit Event(b, c);\n\t\treturn d;\n\t}\n}\n\n```\n\n----------------------------------------\n\nTITLE: Using recordExists function with ENS\nDESCRIPTION: Checks whether a record exists for a given ENS name using the recordExists function.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/11_ens/index.md#2025-04-21_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nconst result = await web3.eth.ens.recordExists('ethereum.eth');\nconsole.log(result);\n```\n\n----------------------------------------\n\nTITLE: Importing the Web3 Library for Utils\nDESCRIPTION: Example showing how to import the entire Web3 library and access the utils module both with and without initializing a provider.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/12_web3_utils_module/index.md#2025-04-21_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n// import web3 module\nimport { Web3 } from 'web3';\n\n// no need to initialize a provider\nWeb3.utils.toHex('web3');\n//=> 0x77656233\n\n// initializing  a provider\nconst web3 = new Web3('https:// eth.llamarpc.com');\n\n// access the utils package\nweb3.utils.toHex('web3');\n//=> 0x77656233\n```\n\n----------------------------------------\n\nTITLE: Fetching Account Proof with web3.eth.getProof in TypeScript\nDESCRIPTION: Illustrates the change in return types for balance and nonce from number strings to BigInt when using web3.eth.getProof. This method retrieves the Merkle-proof for an account and the storage values for given storage keys.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/15_web3_upgrade_guide/web3_eth_migration_guide.md#2025-04-21_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n// in 1.x\nweb3.eth\n\t.getProof(\n\t\t'0x10d53fb7D9C9EedC40A97B51663fFd8DcC651a6b',\n\t\t[\n\t\t\t'0x0000000000000000000000000000000000000000000000000000000000000000',\n\t\t\t'0x0000000000000000000000000000000000000000000000000000000000000001',\n\t\t],\n\t\t'latest',\n\t)\n\t.then(console.log);\n// {\n//   address: '0x10d53fb7D9C9EedC40A97B51663fFd8DcC651a6b',\n//   accountProof: [...],\n//   balance: '0',\n//   codeHash: '0x9bbff76f89bb6a6e787eea245acb599900f2d58faab236e165e2b32df0198c84',\n//   nonce: '1',\n//   storageHash: '0x291bd0e0825fa92cfeb0d3b28529bae6709aa1db89a25f7e62ba5422bbb1e10e',\n//   storageProof: [...]\n//}\n// in 4.x\nweb3.eth\n\t.getProof(\n\t\t'0x10d53fb7D9C9EedC40A97B51663fFd8DcC651a6b',\n\t\t[\n\t\t\t'0x0000000000000000000000000000000000000000000000000000000000000000',\n\t\t\t'0x0000000000000000000000000000000000000000000000000000000000000001',\n\t\t],\n\t\t'latest',\n\t)\n\t.then(console.log);\n    {\n//   accountProof: [...],\n//   balance: 0n,\n//   codeHash: '0x9bbff76f89bb6a6e787eea245acb599900f2d58faab236e165e2b32df0198c84',\n//   nonce: 1n,\n//   storageHash: '0x291bd0e0825fa92cfeb0d3b28529bae6709aa1db89a25f7e62ba5422bbb1e10e',\n//   storageProof: [...]\n// }\n```\n\n----------------------------------------\n\nTITLE: Basic Web3.js Contract Initialization with Type Issues\nDESCRIPTION: Shows the basic approach of initializing a Web3.js contract that results in typing issues due to TypeScript's limitations with JSON imports.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/05_smart_contracts/infer_contract_types.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Contract, Web3 } from 'web3';\nimport ERC20 from './node_modules/@openzeppelin/contracts/build/contracts/ERC20.json';\n\n(async function () {\n\tconst web3 = new Web3('rpc url');\n\n\tconst contract = new Contract(ERC20.abi, '0x7af963cF6D228E564e2A0aA0DdBF06210B38615D', web3);\n\n\tconst holder = '0xa8F6eB216e26C1F7d924A801E46eaE0CE8ed1A0A';\n\n\t//Error because Contract doesn't know what methods exists\n\tconst balance = await contract.methods.balanceOf(holder).call();\n})();\n```\n\n----------------------------------------\n\nTITLE: Creating wallet and adding account in Web3.js\nDESCRIPTION: Example of creating a wallet and adding an account using Web3.js.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/18_migration_viem/index.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst web3 = new Web3();\nconst wallet = web3.eth.accounts.wallet.add(privateKey);\nconsole.log(wallet[0].address);\n```\n\n----------------------------------------\n\nTITLE: Installing Individual Web3 Package using npm\nDESCRIPTION: Shows the npm command to install an individual Web3 package, specifically the web3-eth package.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/09_web3_config/index.md#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnpm i web3-eth\n```\n\n----------------------------------------\n\nTITLE: Unsubscribing from Custom Web3.js Subscription in TypeScript\nDESCRIPTION: Shows how to unsubscribe from a custom Web3.js subscription.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/06_events_subscriptions/custom_subscriptions.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nawait sub.unsubscribe();\n```\n\n----------------------------------------\n\nTITLE: Using FMT_NUMBER.BIGINT Format in Web3.js (TypeScript)\nDESCRIPTION: This snippet demonstrates how to use the FMT_NUMBER.BIGINT format to get block number as a BigInt in Web3.js.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/01_getting_started/return-formats.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nweb3.eth\n\t.getBlockNumber({\n\t\tbytes: FMT_BYTES.HEX,\n\t\tnumber: FMT_NUMBER.BIGINT,\n\t})\n\t.then((blockNumber: Numbers) => {\n\t\tconsole.log(`Block #${blockNumber}`);\n\t});\n// â†³ Block #20735255\n```\n\n----------------------------------------\n\nTITLE: Retrieving Event Logs with Web3.js in TypeScript\nDESCRIPTION: A TypeScript example showing how to retrieve past event logs from the Ethereum blockchain using Web3.js. This code demonstrates setting up filtering options to specifically look for Transfer events from a particular contract address within a specified block range.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/glossary/index.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Web3 } from 'web3';\nconst web3 = new Web3('https://mainnet.infura.io/v3/YOUR_INFURA_PROJECT_ID');\n\nconst options = {\n  fromBlock: 0,\n  toBlock: 'latest',\n  address: '0xYourContractAddress',\n  topics: [\n    web3.utils.sha3('Transfer(address,address,uint256)')\n  ]\n};\n\nweb3.eth.getPastLogs(options)\n  .then((logs) => {\n    console.log(logs);\n  })\n  .catch((error) => {\n    console.error('Error retrieving logs:', error);\n  });\n`\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Web3Utils in JavaScript\nDESCRIPTION: Example of how to import and use the Web3Utils package in a JavaScript file. It demonstrates logging the available utility functions.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/packages/web3-utils/README.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst Web3Utils = require('web3-utils');\nconsole.log(Web3Utils);\n{\n    sha3: function(){},\n    soliditySha3: function(){},\n    isAddress: function(){},\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Adding pluginNamespace Property in JavaScript\nDESCRIPTION: Adds a public pluginNamespace property to the CustomRpcMethodsPlugin class in JavaScript, which is used to access the plugin.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/13_advanced/custom_RPC.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst { Web3PluginBase } = require('web3');\n\nclass CustomRpcMethodsPlugin extends Web3PluginBase {\n\tpluginNamespace = 'customRpcMethods'; // step 2\n}\n\nmodule.exports = CustomRpcMethodsPlugin;\n```\n\n----------------------------------------\n\nTITLE: ABI Generation Script\nDESCRIPTION: TypeScript script that automates the process of converting JSON artifacts into properly typed TypeScript files.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/05_smart_contracts/infer_contract_types.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport fs from 'fs';\nimport path from 'path';\n\n//read destination directory submitted as first param\nvar destination = process.argv.slice(2)[0];\n\n//read all contract artifacts from artifacts.json which should be in the directory from where script should be executed\nconst artifactContent = fs.readFileSync('./artifacts.json', 'utf-8');\n\nconst artifacts: string[] = JSON.parse(artifactContent);\n\n(async function () {\n\tfor (const artifact of artifacts) {\n\t\tlet content;\n\t\ttry {\n\t\t\t//try to import from node_modules\n\t\t\tcontent = JSON.stringify(await import(artifact));\n\t\t} catch (e) {\n\t\t\t//try to read as path on disc\n\t\t\tcontent = fs.readFileSync(artifact, 'utf-8');\n\t\t}\n\t\tconst filename = path.basename(artifact, '.json');\n\t\t//create and write typescript file\n\t\tfs.writeFileSync(\n\t\t\tpath.join(destination, filename + '.ts'),\n\t\t\t`const artifact = ${content.trimEnd()} as const; export default artifact;`,\n\t\t);\n\t}\n})();\n```\n\n----------------------------------------\n\nTITLE: Plugin Developer Code in TypeScript\nDESCRIPTION: Example code written by a plugin developer in TypeScript. The code is similar to the JavaScript version but uses TypeScript import syntax. It defines a PluginExample class with a namespace and sample method, and includes module augmentation.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/14_web3_plugin_guide/plugin_users.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// code written by the plugin **developer**\n\nimport { Web3PluginBase } from 'web3';\n\nexport class PluginExample extends Web3PluginBase {\n\tpublic pluginNamespace = 'pluginExample';\n\n\tpublic sampleMethod() {\n\t\treturn 'simpleValue';\n\t}\n}\n\n// Module Augmentation\ndeclare module 'web3' {\n\tinterface Web3Context {\n\t\tpluginExample: PluginExample;\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Ambiguity in Overloaded Function Calls\nDESCRIPTION: This code snippet illustrates the potential issues when calling overloaded functions without specifying the parameter types. It generates a warning and automatically selects the first matching function in the ABI, which may not be the intended behavior.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/05_smart_contracts/tips_and_tricks.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// Assuming a contract with overloaded methods: funcWithParamsOverloading(uint256) and funcWithParamsOverloading(string)...\n\n(async function () {\n  try {\n    // A call without specifying overloading results in a warning and choosing the first matched overload\n    const ambiguousResult = await contract.methods.funcWithParamsOverloading('0x0123').call();\n})();\n```\n\n----------------------------------------\n\nTITLE: Updating ENS Registry Address in JavaScript\nDESCRIPTION: In Web3.js 4.x, the default ENS registry address is set to the mainnet address, unlike in 1.x where it was dynamically determined based on the current network.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/15_web3_upgrade_guide/web3_eth_ens.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nweb3.eth.ens.registryAddress\n```\n\n----------------------------------------\n\nTITLE: Initializing Hardhat Project\nDESCRIPTION: Command to initialize a Hardhat project with default settings, which creates the necessary configuration files and directories.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/05_smart_contracts/smart_contracts_guide.md#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nnpx hardhat init\n```\n\n----------------------------------------\n\nTITLE: Using FMT_NUMBER.HEX Format in Web3.js (TypeScript)\nDESCRIPTION: This snippet shows how to use the FMT_NUMBER.HEX format to get block number as a hexadecimal string in Web3.js.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/01_getting_started/return-formats.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nweb3.eth\n\t.getBlockNumber({\n\t\tbytes: FMT_BYTES.HEX,\n\t\tnumber: FMT_NUMBER.HEX,\n\t})\n\t.then((blockNumber: Numbers) => {\n\t\tconsole.log(`Block #${blockNumber}`);\n\t});\n// â†³ Block #0x13c6517\n```\n\n----------------------------------------\n\nTITLE: Importing Utils Module Directly\nDESCRIPTION: Example showing how to import the utils module directly from web3 and access its functions.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/12_web3_utils_module/index.md#2025-04-21_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n// import utils module\nimport { utils } from 'web3';\n\n// access the utils package\nutils.toWei('1', 'ether');\n```\n\n----------------------------------------\n\nTITLE: Modifying ENS SetOwner Function Signature in JavaScript\nDESCRIPTION: The setOwner function in Web3.js 4.x maintains the same signature as in 1.x, including the 'address' parameter that was previously undocumented.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/15_web3_upgrade_guide/web3_eth_ens.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nsetOwner(name: string, address: string, txConfig?: TransactionConfig | undefined, callback?: ....)\n```\n\n----------------------------------------\n\nTITLE: ABI for Sample Solidity Contract in TypeScript\nDESCRIPTION: This snippet shows the Application Binary Interface (ABI) for the sample Solidity contract. The ABI defines the methods and variables available in the smart contract for interaction.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/05_smart_contracts/mastering_smart_contracts.md#2025-04-21_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nconst abi = [\n\t{\n\t\tinputs: [{ internalType: 'uint256', name: '_myNumber', type: 'uint256' }],\n\t\tstateMutability: 'nonpayable',\n\t\ttype: 'constructor',\n\t},\n\t{\n\t\tinputs: [],\n\t\tname: 'myNumber',\n\t\toutputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],\n\t\tstateMutability: 'view',\n\t\ttype: 'function',\n\t},\n\t{\n\t\tinputs: [{ internalType: 'uint256', name: '_myNumber', type: 'uint256' }],\n\t\tname: 'setMyNumber',\n\t\toutputs: [],\n\t\tstateMutability: 'nonpayable',\n\t\ttype: 'function',\n\t},\n] as const;\n```\n\n----------------------------------------\n\nTITLE: Numeric Format Options Enum in Web3.js\nDESCRIPTION: Defines the available format options for numeric data in Web3.js using an enum. Includes NUMBER, HEX, STR, and BIGINT formats.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/09_web3_config/index.md#2025-04-21_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nexport enum FMT_NUMBER {\n\tNUMBER = 'NUMBER_NUMBER',\n\tHEX = 'NUMBER_HEX',\n\tSTR = 'NUMBER_STR',\n\tBIGINT = 'NUMBER_BIGINT',\n}\n```\n\n----------------------------------------\n\nTITLE: BigInt Usage in Events and Functions\nDESCRIPTION: Shows how numeric values in events and function returns now use BigInt type instead of strings when decoding parameters.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/15_web3_upgrade_guide/contracts_migration_guide.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// Events\n// 1.x\ninstance.events.BasicEvent().on('data', function (event) {\n\tconsole.log(event);\n});\n\nawait instance.methods.firesEvent(acc, 1).send();\n\n//4.x\ninstance.events\n\t.MultiValueIndexedEvent({\n\t\tfilter: { val: 100 },\n\t})\n\t.on('data', console.log);\nawait instance.methods.firesMultiValueIndexedEvent('value', 100, true).send(sendOptions);\n\n// Functions\n//1.x\nawait instance.methods.setValue(1).send();\nvar value = await instance.methods.getValue().call();\nconsole.log(value);\n// > '1'\n\n//4.x\nawait instance.methods.setValue(10).send();\nvar value = await instance.methods.getValue().call();\nconsole.log(value);\n// 10n // Note that a BigInt is returned\n```\n\n----------------------------------------\n\nTITLE: Comparing sendTransaction 'sent' Event in Web3.js 1.x and 4.x\nDESCRIPTION: Illustrates the difference in the 'sent' event payload for sendTransaction between web3.js versions 1.x and 4.x. In 4.x, only the transaction object is received instead of a payload object.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/15_web3_upgrade_guide/web3_eth_migration_guide.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// in 1.x\nweb3.eth.sendTransaction({ ... }).on('sent', (payload) => { ... });\n// payload would be:\n// {\n//   method: 'eth_sendTransaction',\n//   params: [\n//     {\n//       from: '0x6e599da0bff7a6598ac1224e4985430bf16458a4',\n//       to: '0x0000000000000000000000000000000000000000',\n//       value: '0x1'\n//     }\n//   ],\n//   callback: undefined\n// }\n\n// in 4.x\nweb3.eth.sendTransaction({ ... }).on('sent', (sentTransactionObject) => { ... });\n// sentTransactionObject would be:\n// {\n//     from: '0x6E599DA0bfF7A6598AC1224E4985430Bf16458a4',\n//     to: '0x0000000000000000000000000000000000000000',\n//     value: '0x1',\n//     gasPrice: '0x77359400',\n//     maxPriorityFeePerGas: undefined,\n//     maxFeePerGas: undefined\n// }\n```\n\n----------------------------------------\n\nTITLE: Clearing Subscriptions in web3.js v1.x and v4.x\nDESCRIPTION: Comparison of clearing subscriptions between web3.js v1.x and v4.x. Shows how the return value changed from a boolean to an array of subscription IDs, and demonstrates the alternative direct unsubscribe method.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/15_web3_upgrade_guide/subscribe_migration_guide.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// in 1.x\nvar subscription = web3.eth.subscribe('newBlockHeaders', function (error, result) {\n\tif (!error) console.log(result);\n});\nweb3.eth.clearSubscriptions(function (error, success) {\n\tconsole.log(success); // true\n});\n\n// in 4.x\nconst subscription = await web3.eth.subscribe('newHeads');\n\n// note that in version 4.x the way you get notified for `data` and `error` has changed\nnewBlocksSubscription.on('data', async blockhead => {\n\tconsole.log('New block header: ', blockhead);\n});\nnewBlocksSubscription.on('error', error =>\n\tconsole.log('Error when subscribing to New block header: ', error),\n);\n\nconst ids = await web3.eth.clearSubscriptions();\nconsole.log(ids); // [...] An array of subscription ids that were cleared\n\n// note that you can unsubscribe from a specific subscription by calling unsubscribe()\n//\ton that subscription object: `await subscription.unsubscribe();` and this would return void if succeeded.\n```\n\n----------------------------------------\n\nTITLE: Extending TypeScript definitions for Ethereum provider\nDESCRIPTION: Updates the TypeScript definitions to recognize the Ethereum provider injected by MetaMask into the global Window object, enabling proper type checking.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/07_dapps/metamask-react.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { MetaMaskProvider } from 'web3';\n\n/// <reference types=\"react-scripts\" />\n\ndeclare global {\n\tinterface Window {\n\t\tethereum: MetaMaskProvider;\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Web3 Extend Implementation in 1.x vs 4.x\nDESCRIPTION: Demonstrates how to extend Web3 with custom methods in both versions, with 4.x requiring TypeScript module augmentation for type support.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/15_web3_upgrade_guide/index.md#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// in 1.x\nweb3.extend({\n\tproperty: 'myModule',\n\tmethods: [\n\t\t{\n\t\t\tname: 'getBalance',\n\t\t\tcall: 'eth_getBalance',\n\t\t\tparams: 2,\n\t\t\tinputFormatter: [\n\t\t\t\tweb3.extend.formatters.inputAddressFormatter,\n\t\t\t\tweb3.extend.formatters.inputDefaultBlockNumberFormatter,\n\t\t\t],\n\t\t\toutputFormatter: web3.utils.hexToNumberString,\n\t\t},\n\t\t{\n\t\t\tname: 'getGasPriceSuperFunction',\n\t\t\tcall: 'eth_gasPriceSuper',\n\t\t\tparams: 2,\n\t\t\tinputFormatter: [null, web3.utils.numberToHex],\n\t\t},\n\t],\n});\n\n// in 4.0.4+\ndeclare module 'web3' {\n\tinterface Web3Context {\n\t\tmyModule: {\n\t\t\tgetBalance(address: Address, blockTag: BlockTag): Promise<bigint>;\n\t\t\tgetGasPriceSuperFunction(blockTag: BlockTag): Promise<bigint>;\n\t\t};\n\t}\n}\n\nweb3.extend({\n\tproperty: 'myModule',\n\tmethods: [\n\t\t{\n\t\t\tname: 'getBalance',\n\t\t\tcall: 'eth_getBalance',\n\t\t},\n\t\t{\n\t\t\tname: 'getGasPriceSuperFunction',\n\t\t\tcall: 'eth_gasPriceSuper',\n\t\t},\n\t],\n});\n```\n\n----------------------------------------\n\nTITLE: Installing web3-eth-iban using Yarn\nDESCRIPTION: Command to install the web3-eth-iban package using Yarn package manager.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/packages/web3-eth-iban/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add web3-eth-iban\n```\n\n----------------------------------------\n\nTITLE: Creating Random Account for Error Demo\nDESCRIPTION: Code modification to demonstrate transaction error handling by using a random account without funds.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/04_transactions/transactions.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nconst sender = web3.eth.accounts.wallet.create(1)[0];\n```\n\n----------------------------------------\n\nTITLE: Bytecode Example for Solidity Contract\nDESCRIPTION: This snippet shows an example of bytecode resulting from the compilation of a Solidity contract. Bytecode is a compact representation of the contract's instructions, typically represented as a long hexadecimal string.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/05_smart_contracts/mastering_smart_contracts.md#2025-04-21_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nconst bytecode = '0x60806040523480156100115760006000fd5b50604051610224380380610224...';\n```\n\n----------------------------------------\n\nTITLE: Setting Up Module Augmentation in TypeScript\nDESCRIPTION: Configures module augmentation in TypeScript to enable access to the custom plugin on the Web3 object, allowing for proper type inference and autocompletion.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/13_advanced/custom_RPC.md#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Web3PluginBase } from 'web3';\n\nexport default class CustomRpcMethodsPlugin extends Web3PluginBase {\n\tpublic pluginNamespace = 'customRpcMethods';\n\n\tpublic async customRpcMethod() {\n\t\treturn this.requestManager.send({\n\t\t\t// plugin has access to web3.js internal features like request manager\n\t\t\tmethod: 'custom_rpc_method',\n\t\t\tparams: [],\n\t\t});\n\t}\n}\n\n// Module Augmentation\ndeclare module 'web3' {\n\t// step 4\n\n\tinterface Web3Context {\n\t\tcustomRpcMethods: CustomRpcMethodsPlugin;\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Deploy Event Payload Changes in Web3.js Contract\nDESCRIPTION: Shows how the deploy send event payload structure has changed. In 4.x, the event handler receives the transaction object directly instead of the complete JSON-RPC payload.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/15_web3_upgrade_guide/contracts_migration_guide.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// 1.x\nmyContract\n\t.deploy()\n\t.send()\n\t.on('send', payload => {\n\t\tconsole.log(payload);\n\t\t// {id: <1>, jsonrpc: '2.0', method: 'eth_sendTransaction', params: [txObject] }\n\t});\n\n// 4.x\nmyContract\n\t.deploy()\n\t.send()\n\t.on('send', txObject => {\n\t\tconsole.log(txObject);\n\t\t// {id: <>, gas: <>,...}\n\t});\n```\n\n----------------------------------------\n\nTITLE: Handling contract events with Viem\nDESCRIPTION: Equivalent code in Viem to handle contract events.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/18_migration_viem/index.md#2025-04-21_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nconst unwatch = publicClient.watchContractEvent({\n\taddress: '0x92d3267215Ec56542b985473E73C8417403B15ac',\n\tabi: wagmiAbi,\n\teventName: 'Transfer',\n\targs: { from: '0x34d3267215Ec56542b985473E73C8417403B1533' },\n\tonLogs: logs => func(logs),\n});\n```\n\n----------------------------------------\n\nTITLE: Using requestManager in a Web3.js Plugin\nDESCRIPTION: Example of a plugin utilizing the inherited requestManager to make RPC calls to an Ethereum provider. The plugin accesses the requestManager from the Web3Context to send custom RPC methods.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/14_web3_plugin_guide/plugin_authors.md#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Web3PluginBase } from 'web3';\n\nexport class CustomRpcMethodsPlugin extends Web3PluginBase {\n\tpublic pluginNamespace = 'customRpcMethods';\n\n\tpublic async customRpcMethod() {\n\t\treturn this.requestManager.send({\n\t\t\tmethod: 'custom_rpc_method',\n\t\t\tparams: [],\n\t\t});\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Sending transaction with Viem\nDESCRIPTION: Equivalent code in Viem to send a transaction.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/18_migration_viem/index.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createWalletClient, custom, parseEther } from 'viem'\nimport { mainnet } from 'viem/chains'\n\nconst walletClient = createWalletClient({\n  chain: mainnet,\n  transport: custom(window.ethereum!),\n});\n\nconst [account] = await walletClient.getAddresses();\n\nconst hash = await walletClient.sendTransaction({\n  account,\n  to: '0x92d3267215Ec56542b985473E73C8417403B15ac',\n  value: parseEther('0.001')\n});\n```\n\n----------------------------------------\n\nTITLE: Importing Web3 in 4.x (TypeScript)\nDESCRIPTION: Shows the correct way to import Web3 in TypeScript using the new namespace structure in version 4.x.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/15_web3_upgrade_guide/index.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Web3 } from 'web3';\n\nconst web3 = new Web3();\n```\n\n----------------------------------------\n\nTITLE: Installing a Web3.js Plugin via Package.json\nDESCRIPTION: This snippet shows how a plugin appears in package.json after installation. The example shows a simple dependency declaration for 'web3-plugin-example' with version '0.1.0'.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/14_web3_plugin_guide/plugin_users.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n# package.json\n{\n\t...\n\t\"dependencies\": {\n\t\t\"web3-plugin-example\": \"0.1.0\"\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Specific Utility Functions from web3-utils in JavaScript\nDESCRIPTION: Demonstrates how to import only the required utility functions (numberToHex and hexToNumber) from web3-utils using CommonJS require syntax.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/13_advanced/tree_shaking.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst { numberToHex, hexToNumber } = require('web3-utils');\n// ...\n```\n\n----------------------------------------\n\nTITLE: Registering Transaction Middleware in Web3.js Plugin\nDESCRIPTION: Example showing how to register transaction middleware in a plugin's link method using Web3Eth.setTransactionMiddleware.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/14_web3_plugin_guide/plugin_authors.md#2025-04-21_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\npublic link(parentContext: Web3Context): void {\n  (parentContext as any).Web3Eth.setTransactionMiddleware(\n    new TxnMiddleware()\n  );\n  super.link(parentContext);\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Web3.js via Package Managers\nDESCRIPTION: Commands for installing Web3.js using NPM or Yarn package managers.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/01_getting_started/quickstart.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i web3\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add web3\n```\n\n----------------------------------------\n\nTITLE: IPC Provider Implementation - v1.x vs v4\nDESCRIPTION: Comparison of IPC provider implementation between web3.js v1.x and v4, including configuration options.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/15_web3_upgrade_guide/providers_migration_guide.md#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// in 1.x\nimport * as net from 'net';\n\nconst ipcProvider = new IpcProvider('/Users/myuser/Library/Ethereum/geth.ipc', new net.Server());\n\n// in v4\nimport { IpcProvider } from 'web3-providers-ipc';\n\nconst ipcProvider = new IpcProvider('/Users/myuser/Library/Ethereum/geth.ipc');\n```\n\n----------------------------------------\n\nTITLE: Wallet Creation Changes in Web3.js v4.x\nDESCRIPTION: Shows the changes in wallet creation method between Web3.js v1.x and v4.x. Similar to account creation, the entropy parameter has been removed in v4.x.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/15_web3_upgrade_guide/accounts_migration_guide.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// In 1.x\nconst wallet = web3.eth.accounts.wallet.create(1, 'optionalEntropy'); // entropy is an optional parameter\n\n// In 4.x\nconst account = web3.eth.accounts.wallet.create(1, 'optionalEntropy'); // will result in an error\nconst account = web3.eth.accounts.wallet.create(); // correct way\n```\n\n----------------------------------------\n\nTITLE: Registering Request Middleware in Web3.js Plugin\nDESCRIPTION: Example showing how to register request middleware in a plugin's link method using Web3RequestManager.setMiddleware.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/14_web3_plugin_guide/plugin_authors.md#2025-04-21_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\npublic link(parentContext: Web3Context): void {\n  parentContext.requestManager.setMiddleware(new RequestMiddleware());\n  super.link(parentContext);\n}\n```\n\n----------------------------------------\n\nTITLE: Using getResolver function with ENS\nDESCRIPTION: Retrieves the resolver for a given ENS name using the getResolver function.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/11_ens/index.md#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst resolver = await web3.eth.ens.getResolver('xyz.eth');\nconsole.log(resolver.options.address);\n```\n\n----------------------------------------\n\nTITLE: Signing messages with Viem\nDESCRIPTION: Equivalent code in Viem to sign a message.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/18_migration_viem/index.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createWalletClient, custom } from 'viem'\nimport { mainnet } from 'viem/chains'\n\nconst walletClient = createWalletClient({\n  chain: mainnet,\n  transport: custom(window.ethereum!),\n});\n\nconst [account] = await walletClient.getAddresses();\n\nconst signature = await walletClient.signMessage({\n  account,\n  message: 'Some data',\n});\n```\n\n----------------------------------------\n\nTITLE: Importing Web3 in 4.x (JavaScript)\nDESCRIPTION: Shows the correct way to import Web3 in JavaScript using the new namespace structure in version 4.x.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/15_web3_upgrade_guide/index.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst { Web3 } = require('web3');\n\nconst web3 = new Web3();\n```\n\n----------------------------------------\n\nTITLE: Expected Interaction Output\nDESCRIPTION: Example output showing the contract interaction results including initial value, transaction hash, and updated value.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/05_smart_contracts/smart_contracts_guide.md#2025-04-21_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\nmyNumber value: 1\nTransaction Hash: 0x956bf08a0ba71a768fdbf9879531e52e9b6a0e2802ad92f66387fc30fa939eb8\nmyNumber updated value: 2\n```\n\n----------------------------------------\n\nTITLE: Comparing sendTransaction 'sending' Event in Web3.js 1.x and 4.x\nDESCRIPTION: Shows the difference in the 'sending' event payload for sendTransaction between web3.js versions 1.x and 4.x. In 4.x, only the transaction object is received instead of a payload object.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/15_web3_upgrade_guide/web3_eth_migration_guide.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// in 1.x\nweb3.eth.sendTransaction({ ... }).on('sending', (payload) => { ... });\n// payload would be:\n// {\n//   method: 'eth_sendTransaction',\n//   params: [\n//     {\n//       from: '0x6e599da0bff7a6598ac1224e4985430bf16458a4',\n//       to: '0x0000000000000000000000000000000000000000',\n//       value: '0x1',\n//       maxPriorityFeePerGas: '0x9502F900',\n//       maxFeePerGas: '0xc3e17d20'\n//     }\n//   ],\n//   callback: undefined\n// }\n\n// in 4.x\nweb3.eth.sendTransaction({ ... }).on('sending', (sendTransactionObject) => { ... });\n// sendTransactionObject would be:\n// {\n//     from: '0x6e599da0bff7a6598ac1224e4985430bf16458a4',\n//     to: '0x0000000000000000000000000000000000000000',\n//     value: '0x1',\n//     gasPrice: '0x77359400',\n//     maxPriorityFeePerGas: undefined,\n//     maxFeePerGas: undefined\n// }\n```\n\n----------------------------------------\n\nTITLE: Contract Send Method Resolution Changes in Web3.js 1.x vs 4.x\nDESCRIPTION: Shows how contract send method now resolves with complete receipt object instead of just transaction hash.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/packages/web3-eth-contract/CHANGELOG.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst transactionHash = await myContract.method.MyMethod().send();\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst receipt = await myContract.method.MyMethod().send();\nconst transactionHash = receipt.transactionHash;\n```\n\n----------------------------------------\n\nTITLE: Using stripHexPrefix Utility in Web3.js v4.x\nDESCRIPTION: Demonstrates the usage of stripHexPrefix utility which has been moved from web3-utils to web3-eth-accounts package in v4.x.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/15_web3_upgrade_guide/accounts_migration_guide.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { stripHexPrefix } from 'web3-eth-accounts';\n\nconsole.log(stripHexPrefix('0x123')); // \"123\"\n```\n\n----------------------------------------\n\nTITLE: Using getTTL function with ENS\nDESCRIPTION: Retrieves the Time-to-Live (TTL) value associated with a specified ENS name using the getTTL function.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/11_ens/index.md#2025-04-21_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nconst ttl = await web3.eth.ens.getTTL('xyz.eth');\nconsole.log(ttl);\n```\n\n----------------------------------------\n\nTITLE: Initializing Web3.js with browser-injected provider\nDESCRIPTION: Example of initializing Web3.js with a browser-injected provider like MetaMask.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/18_migration_viem/index.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst web3 = new Web3(window.ethereum);\n```\n\n----------------------------------------\n\nTITLE: Setting Configuration Using setConfig for Individual Web3 Package\nDESCRIPTION: Shows how to use the setConfig function to set configuration options for an individually imported Web3 package (Web3Eth in this example).\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/09_web3_config/index.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Web3Eth } from 'web3-eth';\n\nconst web3EthObj = new Web3Eth('http://127.0.0.1:7545');\n\nweb3EthObj.setConfig({ defaultTransactionType: 0x0 });\n\nweb3EthObj\n\t.sendTransaction({\n\t\tfrom: '0x18532dF2Ab835d4E9D07a8b9B759bf5F8f890f49',\n\t\tto: '0x018e221145dE7cefAD09BD53F41c11A918Bf1Cb7',\n\t\tvalue: 100,\n\t\tgasLimit: 21000,\n\t})\n\t.then(res => console.log(res));\n```\n\n----------------------------------------\n\nTITLE: Building Static Website Content with Yarn\nDESCRIPTION: Command to generate static content into the build directory which can then be served using any static contents hosting service.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn build\n```\n\n----------------------------------------\n\nTITLE: Implementing _buildSubscriptionParams Method in TypeScript\nDESCRIPTION: Shows how to override the _buildSubscriptionParams method to specify the exact data that will be passed to the provider when subscribing.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/06_events_subscriptions/custom_subscriptions.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nprotected _buildSubscriptionParams() {\n  // the `someCustomSubscription` below is the name of the subscription provided by the node you are connected to.\n  return ['someCustomSubscription', this.args];\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Web3.requestEIP6963Providers return type in web3\nDESCRIPTION: Change in return type for the static Web3.requestEIP6963Providers function to Promise<EIP6963ProviderResponse>.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/CHANGELOG.md#2025-04-21_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype EIP6963ProviderResponse = Map<string, EIP6963ProviderDetail>;\n```\n\n----------------------------------------\n\nTITLE: Example of Plugin Usage Without Provider Configuration\nDESCRIPTION: Code example showing what happens when a plugin is used without configuring an Ethereum provider. This will result in a ProviderError when methods that rely on requestManager are called.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/14_web3_plugin_guide/plugin_authors.md#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// registering_a_plugin.ts\nimport { Web3Context } from 'web3';\n\nimport { CustomRpcMethodsPlugin } from './custom_rpc_methods_plugin';\n\nconst web3Context = new Web3Context();\nweb3Context.registerPlugin(new CustomRpcMethodsPlugin());\n\n// The following would result in a thrown ProviderError when\n// the plugin attempts to call this.requestManager.send(...)\nawait web3Context.customRpcMethods.customRpcMethod();\n```\n\n----------------------------------------\n\nTITLE: Webpack Configuration Setup\nDESCRIPTION: Webpack configuration for development build with bundle analysis\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/07_dapps/lightweight-dapp.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst path = require('path');\n\nconst HtmlWebpackPlugin = require('html-webpack-plugin');\nconst { BundleAnalyzerPlugin } = require('webpack-bundle-analyzer');\n\nmodule.exports = {\n\tmode: 'development',\n\tentry: path.join(__dirname, 'src', 'index.tsx'),\n\tmodule: {\n\t\trules: [\n\t\t\t{\n\t\t\t\texclude: /node_modules/,\n\t\t\t\ttest: /\\.(ts|tsx)$/,\n\t\t\t\tuse: {\n\t\t\t\t\tloader: 'babel-loader',\n\t\t\t\t\toptions: {\n\t\t\t\t\t\tpresets: [\n\t\t\t\t\t\t\t'@babel/preset-env',\n\t\t\t\t\t\t\t['@babel/preset-react', { runtime: 'automatic' }],\n\t\t\t\t\t\t\t'@babel/preset-typescript',\n\t\t\t\t\t\t],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t],\n\t},\n\toutput: {\n\t\tpath: path.join(__dirname, 'dist'),\n\t\tfilename: 'index_bundle.js',\n\t},\n\tresolve: {\n\t\textensions: ['.ts', '.tsx'],\n\t},\n\tplugins: [new HtmlWebpackPlugin({ template: 'index.html' }), new BundleAnalyzerPlugin()],\n};\n```\n\n----------------------------------------\n\nTITLE: AbiInput Interface Definition in Web3.js 1.x\nDESCRIPTION: The original AbiInput interface structure from Web3.js version 1.x, which includes basic fields for name, type, indexed flag, components, and internalType.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/15_web3_upgrade_guide/abi_migration_guide.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface AbiInput {\n    name: string;\n    type: string;\n    indexed?: boolean;\n\tcomponents?: AbiInput[];\n    internalType?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Package-Level Configuration in Web3 Instance\nDESCRIPTION: Illustrates how to set configuration options for individual packages within a Web3 instance using the setConfig function. This example sets the default transaction type for the eth package.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/09_web3_config/index.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Web3 } from 'web3';\n\nconst web3 = new Web3('https://mainnet.infura.io/v3/YOURID');\n\nweb3.eth.setConfig({ defaultTransactionType: '0x0' });\n\nweb3.eth\n\t.sendTransaction({\n\t\tfrom: '0x18532dF2Ab835d4E9D07a8b9B759bf5F8f890f49',\n\t\tto: '0xB2f70d8965e754cc07D343a9b5332876D3070155',\n\t\tvalue: 100,\n\t\tgasLimit: 21000,\n\t})\n\t.then(res => console.log(res));\n```\n\n----------------------------------------\n\nTITLE: JSON ABI for Solidity Contract\nDESCRIPTION: The JSON representation of the Application Binary Interface (ABI) for the sample Solidity contract. This ABI defines the contract's interface including constructor, events, and functions, allowing Web3.js to interact with the deployed smart contract.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/glossary/index.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n[\n\t{\n\t\t\"type\": \"constructor\",\n\t\t\"stateMutability\": \"nonpayable\",\n\t\t\"inputs\": [{ \"internalType\": \"uint256\", \"name\": \"testInt\", \"type\": \"uint256\" }]\n\t},\n\t{\n\t\t\"type\": \"event\",\n\t\t\"name\": \"Event\",\n\t\t\"inputs\": [\n\t\t\t{ \"indexed\": true, \"internalType\": \"uint256\", \"name\": \"b\", \"type\": \"uint256\" },\n\t\t\t{ \"indexed\": false, \"internalType\": \"bytes32\", \"name\": \"c\", \"type\": \"bytes32\" }\n\t\t],\n\t\t\"anonymous\": false\n\t},\n\t{\n\t\t\"type\": \"event\",\n\t\t\"name\": \"Event2\",\n\t\t\"inputs\": [\n\t\t\t{ \"indexed\": true, \"internalType\": \"uint256\", \"name\": \"b\", \"type\": \"uint256\" },\n\t\t\t{ \"indexed\": false, \"internalType\": \"bytes32\", \"name\": \"c\", \"type\": \"bytes32\" }\n\t\t],\n\t\t\"anonymous\": false\n\t},\n\t{\n\t\t\"type\": \"function\",\n\t\t\"name\": \"foo\",\n\t\t\"stateMutability\": \"nonpayable\",\n\t\t\"inputs\": [\n\t\t\t{ \"internalType\": \"uint256\", \"name\": \"b\", \"type\": \"uint256\" },\n\t\t\t{ \"internalType\": \"bytes32\", \"name\": \"c\", \"type\": \"bytes32\" }\n\t\t],\n\t\t\"outputs\": [{ \"internalType\": \"address\", \"name\": \"\", \"type\": \"address\" }]\n\t}\n]\n```\n\n----------------------------------------\n\nTITLE: Importing Types in 1.x vs 4.x\nDESCRIPTION: Shows how type definitions have moved from 'web3/providers' to a dedicated 'web3-types' package in version 4.x.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/15_web3_upgrade_guide/index.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// Provider types\n// in 1.x\nimport type { Provider, Callback, JsonRPCResponse } from 'web3/providers';\n\n// in 4.x\nimport type {\n\tWeb3BaseProvider as Provider,\n\tWeb3ProviderRequestCallback as Callback,\n\tJsonRpcResponse,\n} from 'web3-types';\n\n// in 1.x\nimport type { Transaction, TransactionReceipt } from 'web3-core';\n\n// in 4.x\nimport type { Transaction, TransactionReceipt } from 'web3-types';\n```\n\n----------------------------------------\n\nTITLE: Package.json Scripts Configuration\nDESCRIPTION: Common development scripts used in Web3.js packages including clean, build, lint, test, and format commands. Each script serves a specific purpose in the development workflow.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/README.md#2025-04-21_snippet_3\n\nLANGUAGE: Markdown\nCODE:\n```\n| Script                         | Description                                                        |\n| ------------------------------ | ------------------------------------------------------------------ |\n| clean                          | Uses `rimraf` to remove `dist/`                                    |\n| build                          | Uses `tsc` to build all packages                                   |\n| lint                           | Uses `eslint` to lint all packages                                 |\n| lint:fix                       | Uses `eslint` to check and fix any warnings                        |\n| format                         | Uses `prettier` to format the code                                 |\n| test                           | Uses `jest` to run unit tests in each package                      |\n| test:integration               | Uses `jest` to run tests under `/test/integration` in each package |\n| test:unit                      | Uses `jest` to run tests under `/test/unit` in each package        |\n| test:manual:long-connection-ws | Runs manual tests for keeping a long WebSocket connection          |\n| test:manual                    | Runs manual tests under `test/manual` in the web3 package          |\n```\n\n----------------------------------------\n\nTITLE: Installing web3-validator with NPM\nDESCRIPTION: Command to install web3-validator package using NPM package manager\nSOURCE: https://github.com/web3/web3.js/blob/4.x/packages/web3-validator/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install web3-validator\n```\n\n----------------------------------------\n\nTITLE: Installing web3-eth using NPM\nDESCRIPTION: Command to install the web3-eth package using NPM (Node Package Manager). This package is used for interacting with the Ethereum blockchain and smart contracts.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/packages/web3-eth/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install web3-eth\n```\n\n----------------------------------------\n\nTITLE: Installing web3-providers-ws using NPM\nDESCRIPTION: Command to install the web3-providers-ws package using NPM (Node Package Manager). This installs the Websocket provider for Web3.js.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/packages/web3-providers-ws/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install web3-providers-ws\n```\n\n----------------------------------------\n\nTITLE: Installing web3-types using NPM\nDESCRIPTION: Command to install the web3-types package using NPM (Node Package Manager).\nSOURCE: https://github.com/web3/web3.js/blob/4.x/packages/web3-types/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install web3-types\n```\n\n----------------------------------------\n\nTITLE: Running Gas Estimation Script in TypeScript\nDESCRIPTION: Command to execute the gas estimation script using ts-node, which allows running TypeScript files directly without prior compilation to JavaScript.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/10_web3_eth/eth.md#2025-04-21_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nnpx ts-node estimate.ts\n```\n\n----------------------------------------\n\nTITLE: Creating Viem wallet client with browser-injected provider\nDESCRIPTION: Equivalent code in Viem to create a wallet client using a browser-injected provider.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/18_migration_viem/index.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createWalletClient, custom } from 'viem';\nimport { mainnet } from 'viem/chains';\n\nconst client = createWalletClient({\n\tchain: mainnet,\n\ttransport: custom(window.ethereum),\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Viem public client\nDESCRIPTION: Equivalent code in Viem to create a public client for interacting with the Ethereum network.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/18_migration_viem/index.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createPublicClient, http } from 'viem';\n\nconst client = createPublicClient({ transport: http(providerURL) });\n```\n\n----------------------------------------\n\nTITLE: Strip Hex Prefix Function Relocation\nDESCRIPTION: Migration of stripHexPrefix method from web3-utils to web3-eth-accounts package.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/15_web3_upgrade_guide/web3_utils_migration_guide.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { stripHexPrefix } from 'web3-eth-accounts';\n\nconsole.log(stripHexPrefix('0x123')); // \"123\"\n```\n\n----------------------------------------\n\nTITLE: Using Web3 Utilities in a Plugin\nDESCRIPTION: This example shows how to incorporate Web3 utility functions within a plugin, specifically demonstrating conversion from Wei to Ether.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/14_web3_plugin_guide/index.mdx#2025-04-21_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nimport { Web3PluginBase, utils } from 'web3';\n\nclass MyPlugin extends Web3PluginBase {\n  pluginNamespace = 'pluginExample';\n\n  weiToEth(value) {\n    //`this` is the web3context used when you register the plugin in the usage\n    return utils.fromWei(value, 'ether');\n  }\n\n  //more web3.eth. methods...\n}\n\nexport default MyPlugin;\n```\n\n----------------------------------------\n\nTITLE: Adding pluginNamespace Property in TypeScript\nDESCRIPTION: Adds a public pluginNamespace property to the CustomRpcMethodsPlugin class in TypeScript, which is used to access the plugin.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/13_advanced/custom_RPC.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Web3PluginBase } from 'web3';\n\nexport default class CustomRpcMethodsPlugin extends Web3PluginBase {\n\tpublic pluginNamespace = 'customRpcMethods'; // step 2\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Current Configuration for Individual Web3 Package\nDESCRIPTION: Shows how to get the current configuration parameters for an individually imported Web3 package (Web3Eth in this case) using the getContextObject().config method.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/09_web3_config/index.md#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Web3Eth } from 'web3';\n\nconst web3 = new Web3Eth('http://127.0.0.1:7545');\n\nconsole.log(web3.getContextObject().config);\n/* â†³\n  handleRevert: false,\n  defaultAccount: undefined,\n  defaultBlock: 'latest',\n  transactionBlockTimeout: 50,\n  transactionConfirmationBlocks: 24,\n  transactionPollingInterval: 1000,\n  transactionPollingTimeout: 750000,\n  ...\n*/\n```\n\n----------------------------------------\n\nTITLE: Generating private key with Web3.js\nDESCRIPTION: Example of generating a private key using Web3.js.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/18_migration_viem/index.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst privateKey = web3.eth.accounts.create().privateKey;\nconsole.log(privateKey);\n```\n\n----------------------------------------\n\nTITLE: Generating private key with Viem\nDESCRIPTION: Equivalent code in Viem to generate a private key.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/18_migration_viem/index.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { generatePrivateKey } from 'viem/accounts';\n\nconst privateKey = generatePrivateKey();\nconsole.log(privateKey);\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Constructor for Web3Subscription in TypeScript\nDESCRIPTION: Demonstrates how to create a custom constructor for additional initialization or processing in a custom Web3Subscription class.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/06_events_subscriptions/custom_subscriptions.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconstructor(\n  args: {customArg: string},\n  options: {\n    subscriptionManager: Web3SubscriptionManager;\n    returnFormat?: DataFormat;\n  }\n) {\n  super(args, options);\n\n  // Additional initialization\n}\n```\n\n----------------------------------------\n\nTITLE: Executing the Transaction Script\nDESCRIPTION: Command to run the script that sends an Ethereum transaction on the local network.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/04_transactions/transactions.md#2025-04-21_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nnode transaction-receipt.js\n```\n\n----------------------------------------\n\nTITLE: Setting tsconfig Module to ES2015\nDESCRIPTION: Configures TypeScript to use ES2015 modules or higher to support import statements, as tree shaking doesn't work with CommonJS require statements.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/13_advanced/tree_shaking.md#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"module\": \"ES2015\"\n```\n\n----------------------------------------\n\nTITLE: Initializing Web3.js provider\nDESCRIPTION: Example of initializing a Web3.js provider with a provider URL.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/18_migration_viem/index.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport Web3 from 'web3';\n\nconst web3 = new Web3(providerURL);\n```\n\n----------------------------------------\n\nTITLE: Receipt Status Change in Web3.js 1.x vs 4.x\nDESCRIPTION: Demonstrates the change in receipt status type from boolean to unsigned integer between web3.js v1.x and v4.x.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/packages/web3-eth-contract/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nmyContract.methods\n\t.MyMethod()\n\t.send()\n\t.on('receipt', receipt => {\n\t\tconsole.log(receipt.status); // true | false\n\t});\n```\n\nLANGUAGE: typescript\nCODE:\n```\nmyContract.methods\n\t.MyMethod()\n\t.send()\n\t.on('receipt', receipt => {\n\t\tconsole.log(receipt.status); // BigInt(0) | BigInt(1)\n\t});\n```\n\n----------------------------------------\n\nTITLE: Ignoring Gas Pricing in Contract Example\nDESCRIPTION: Demonstrates how to disable automatic gas estimation for contract interactions by setting ignoreGasPricing configuration on a contract instance.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/09_web3_config/index.md#2025-04-21_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nlet contractDeployed: Contract<typeof BasicAbi>;\n// instantiate contract...\ncontractDeployed.config.ignoreGasPricing = true;\nconst receipt = await contractDeployed.methods.setValues(1, 'string value', true).send(sendOptions);\n```\n\n----------------------------------------\n\nTITLE: Block Number Comparison Updates\nDESCRIPTION: Changes in compareBlockNumbers function behavior for comparing block tags and numbers.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/15_web3_upgrade_guide/web3_utils_migration_guide.md#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ncompareBlockNumbers('earliest', 'safe'); // its valid comparison, and it will return `-1`\n\ncompareBlockNumbers(8692, 2); // its valid comparison, and it will return `1`\n\ncompareBlockNumbers('latest', 500); // in 1.x it used to return `1`, but now it will throw error InvalidBlockError\n```\n\n----------------------------------------\n\nTITLE: Displaying Ethereum Contract Address in Bash\nDESCRIPTION: Shows the Ethereum address of a deployed smart contract on the Mumbai testnet.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/05_smart_contracts/mastering_smart_contracts.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n0xB9433C87349134892f6C9a9E342Ed6adce39F8dF\n```\n\n----------------------------------------\n\nTITLE: Initializing Node.js Project\nDESCRIPTION: Command to initialize a new Node.js project using npm.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/10_web3_eth/eth.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm init -y\n```\n\n----------------------------------------\n\nTITLE: Enabling Production Mode in Webpack\nDESCRIPTION: Sets the webpack configuration mode to 'production' to enable optimizations including minification and tree shaking.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/13_advanced/tree_shaking.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n'mode':'production'\n```\n\n----------------------------------------\n\nTITLE: Starting a Local HTTP Server\nDESCRIPTION: Command to start a local HTTP server using watch-http-server to serve the HTML file, allowing for automatic page refreshing when changes are made.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/07_dapps/metamask-vanilla.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpx watch-http-server .\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Web3Modal with React\nDESCRIPTION: Commands to install the required dependencies for a Web3Modal project with React and web3.js. This includes the core packages like web3modal-web3js, react, and development tools like vite.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/07_dapps/web3_modal_guide/react.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install web3modal-web3js react react-dom\nnpm install --save-dev vite @vitejs/plugin-react\n```\n\n----------------------------------------\n\nTITLE: Using BatchRequest in 4.x\nDESCRIPTION: Demonstrates the new promise-based approach for batch requests in version 4.x, where add() returns a promise and execute() is async.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/15_web3_upgrade_guide/index.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// in 4.x\n\nconst request1 = {\n\tjsonrpc: '2.0',\n\tid: 10,\n\tmethod: 'eth_getBalance',\n\tparams: ['0xf4ffff492596ac13fee6126846350433bf9a5021', 'latest'],\n};\nconst request2 = {\n\tjsonrpc: '2.0',\n\tid: 12,\n\tmethod: 'eth_getBalance',\n\tparams: ['0xdc6bad79dab7ea733098f66f6c6f9dd008da3258', 'latest'],\n};\nbatch.add(request1);\nconst request2Promise = batch.add(request2);\nrequest2Promise.then(response => {\n\tconsole.log(response);\n});\n\n// in 4.x\nconst responses = await batch.execute();\n```\n\n----------------------------------------\n\nTITLE: Event Emitter Implementation in Web3-Utils\nDESCRIPTION: Custom EventEmitter implementation to replace Node's native EventEmitter.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/CHANGELOG.md#2025-04-21_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nclass EventEmitter {\n    // Custom implementation\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Specific Utility Functions from web3-utils in TypeScript\nDESCRIPTION: Shows how to import only the required utility functions (numberToHex and hexToNumber) from web3-utils using ES module import syntax in TypeScript.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/13_advanced/tree_shaking.md#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { numberToHex, hexToNumber } from 'web3-utils';\n// ...\n```\n\n----------------------------------------\n\nTITLE: Creating and Pushing Git Tags for Web3.js Release\nDESCRIPTION: Git commands to tag the release commit with the version number and push both the release branch and tags to the remote repository.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/RELEASE.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ngit tag bumped-version\ngit push origin release/bumped-version\ngit push origin --tags\n```\n\n----------------------------------------\n\nTITLE: Embedding Web3.js Playground using iframe in HTML\nDESCRIPTION: This HTML snippet embeds a StackBlitz playground for Web3.js using an iframe. It provides an interactive coding environment for experimenting with Web3.js. The iframe is set to a height of 700px and a width of 80% of the container.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/web3_playground.md#2025-04-21_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<iframe height=\"700px\" id=\"playground-iframe\"  width=\"80%\"\n  max-width=\"80%\"  src=\"https://stackblitz.com/edit/web3jsplayground?embed=1&file=index.ts&hideNavigation=0&view=editor&hideExplorer=0&showSidebar=1\"></iframe>\n```\n\n----------------------------------------\n\nTITLE: Hex Conversion Behavior Changes\nDESCRIPTION: Updated behavior of toHex function for string numbers and various input types between versions.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/15_web3_upgrade_guide/web3_utils_migration_guide.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// 1.x\nnew Web3().utils.toHex(0x1); // returns  0x1\nnew Web3().utils.toHex('0x1'); // returns  0x1\nnew Web3().utils.toHex(1); // returns  0x1\nnew Web3().utils.toHex('1'); // returns  0x1\n\n// 4.x\nnew Web3().utils.toHex(0x1); // returns  0x1\nnew Web3().utils.toHex('0x1'); // returns  0x1\nnew Web3().utils.toHex(1); // returns  0x1\nnew Web3().utils.toHex('1'); // returns  0x31\n```\n\n----------------------------------------\n\nTITLE: Initializing a New Node.js Project\nDESCRIPTION: Command to initialize a new Node.js project with default settings, which creates a package.json file.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/05_smart_contracts/smart_contracts_guide.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm init -y\n```\n\n----------------------------------------\n\nTITLE: Creating HTML Entry Point for React Web3 App\nDESCRIPTION: HTML template for the project's main index.html file. It defines the basic structure with a root element for the React application to mount on and references the main TypeScript entry point.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/07_dapps/web3_modal_guide/react.md#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n\t<head>\n\t\t<meta charset=\"UTF-8\" />\n\t\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n\t\t<title>React Web3 example</title>\n\t</head>\n\t<body>\n\t\t<div id=\"app\"></div>\n\t\t<script type=\"module\" src=\"/src/main.tsx\"></script>\n\t</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Creating Project Directory\nDESCRIPTION: Commands to create a new project directory and initialize it as a Node.js project.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/10_web3_eth/eth.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmkdir web3-eth-tutorial\ncd web3-eth-tutorial\n```\n\n----------------------------------------\n\nTITLE: Starting the React development server\nDESCRIPTION: Launches the React development server which compiles the application and opens it in a web browser for testing the MetaMask integration.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/07_dapps/metamask-react.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Using FMT_NUMBER.NUMBER Format in Web3.js (TypeScript)\nDESCRIPTION: This snippet demonstrates how to use the FMT_NUMBER.NUMBER format to get block number as a JavaScript Number in Web3.js.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/01_getting_started/return-formats.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nweb3.eth\n\t.getBlockNumber({\n\t\tbytes: FMT_BYTES.HEX,\n\t\tnumber: FMT_NUMBER.NUMBER,\n\t})\n\t.then((blockNumber: Numbers) => {\n\t\tconsole.log(`Block #${blockNumber}`);\n\t});\n// â†³ Block #20735255\n```\n\n----------------------------------------\n\nTITLE: BigInt Validation in Web3-Utils\nDESCRIPTION: Implementation of numberToHex method that accepts BigInt values for validation.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/CHANGELOG.md#2025-04-21_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nnumberToHex(value: BigInt): string\n```\n\n----------------------------------------\n\nTITLE: Importing Specific Utils Functions\nDESCRIPTION: Example showing how to import individual utility functions directly from the web3-utils package.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/12_web3_utils_module/index.md#2025-04-21_snippet_3\n\nLANGUAGE: js\nCODE:\n```\n// import toWei and toHex functions\nimport { toWei, toHex } from 'web3-utils';\n\n// usage\ntoWei('1', 'ether');\ntoHex('');\n```\n\n----------------------------------------\n\nTITLE: Initializing a Node.js Project with npm\nDESCRIPTION: Command to initialize a new Node.js project by creating a package.json file with default settings.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/04_transactions/transactions.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm init -y\n```\n\n----------------------------------------\n\nTITLE: Initializing a React project with TypeScript and adding Web3.js\nDESCRIPTION: Creates a new React application with TypeScript template using create-react-app and adds Web3.js as a dependency using npm.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/07_dapps/metamask-react.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-react-app web3-metamask-react --template typescript\ncd web3-metamask-react\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm i web3\n```\n\n----------------------------------------\n\nTITLE: Publishing Web3.js Packages to NPM\nDESCRIPTION: Lerna commands for publishing web3.js packages to NPM with different distribution tags. The first command publishes with the 'latest' tag, while the second allows specifying a custom tag like 'rc'.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/RELEASE.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpx lerna publish from-package --ignore-scripts\nnpx lerna publish from-package --ignore-scripts --dist-tag <<TAG>>\n```\n\n----------------------------------------\n\nTITLE: Deprecated extend method in Web3.js 4.x\nDESCRIPTION: Code snippet showing methods that are deprecated in web3.js 4.x, including web3.extend, web3.eth.extend, web3.shh.extend, and web3.bzz.extend.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/15_web3_upgrade_guide/personal_migration_guide.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// -> web3.extend\n// -> web3.eth.extend\n// -> web3.shh.extend\n// -> web3.bzz.extend\n```\n\n----------------------------------------\n\nTITLE: Adding populateTransaction to contract.deploy in web3-eth-contract\nDESCRIPTION: New property added to contract.deploy(...) for populating transaction data.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/CHANGELOG.md#2025-04-21_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\ncontract.deploy(...).populateTransaction\n```\n\n----------------------------------------\n\nTITLE: Using BatchRequest in 1.x\nDESCRIPTION: Shows how batch requests were implemented in version 1.x, which used a callback pattern.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/15_web3_upgrade_guide/index.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// in 1.x\nbatch.add(\n\tweb3.eth.getBalance.request('0x0000000000000000000000000000000000000000', 'latest', callback),\n);\n\n// in 1.x\nbatch.execute();\n```\n\n----------------------------------------\n\nTITLE: Formatting Changelog Entry Example in Markdown\nDESCRIPTION: Demonstrates the structure and format for documenting changes in the changelog, including sections for Added, Changed, Deprecated, Removed, Fixed, and Security updates.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/packages/web3-eth/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n## [1.0.0]\n\n### Added\n\n- I've added feature XY (#1000)\n\n### Changed\n\n- I've cleaned up XY (#1000)\n\n### Deprecated\n\n- I've deprecated XY (#1000)\n\n### Removed\n\n- I've removed XY (#1000)\n\n### Fixed\n\n- I've fixed XY (#1000)\n\n### Security\n\n- I've improved the security in XY (#1000)\n```\n\n----------------------------------------\n\nTITLE: Running Signed Transaction Script in TypeScript\nDESCRIPTION: Command to execute the signed transaction script using ts-node, allowing direct execution of TypeScript files without compilation to JavaScript.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/10_web3_eth/eth.md#2025-04-21_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nnpx ts-node sendSigned.ts\n```\n\n----------------------------------------\n\nTITLE: HTTP Provider Options Comparison - v1.x vs v4\nDESCRIPTION: Comparison example showing how HTTP provider options are structured differently between web3.js v1.x and v4.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/15_web3_upgrade_guide/providers_migration_guide.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// in 1.x\nlet httpOptions = {\n    keepAlive: true,\n    withCredentials: false,\n    timeout: 20000, // ms\n    headers: [\n        {\n            name: 'Access-Control-Allow-Origin',\n            value: '*'\n        },\n    ],\n    agent: {\n        http: http.Agent(...),\n        baseUrl: ''\n    }\n};\n\n// in v4\nlet httpOptions = {\n\tproviderOptions: {\n\t\tbody: undefined,\n\t\tcache: 'force-cache',\n\t\tcredentials: 'same-origin',\n\t\theaders: {\n\t\t\t'Content-Type': 'application/json',\n\t\t},\n\t\tintegrity: 'foo',\n\t\tkeepalive: true,\n\t\tmethod: 'GET',\n\t\tmode: 'same-origin',\n\t\tredirect: 'error',\n\t\treferrer: 'foo',\n\t\treferrerPolicy: 'same-origin',\n\t\tsignal: undefined,\n\t\twindow: undefined,\n\t} as RequestInit,\n};\n```\n\n----------------------------------------\n\nTITLE: Installing Hardhat as Development Dependency\nDESCRIPTION: Console command to install Hardhat as a development dependency for local Ethereum network simulation.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/07_dapps/intermediate-dapp.md#2025-04-21_snippet_3\n\nLANGUAGE: console\nCODE:\n```\nnpm i -D hardhat\n```\n\n----------------------------------------\n\nTITLE: Installing Web3.js using NPM\nDESCRIPTION: Command to install the web3.js package using the Node Package Manager (NPM). This installs the latest version of the web3 library into your Node.js project.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/packages/web3/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install web3\n```\n\n----------------------------------------\n\nTITLE: Bumping Package Versions with Lerna for Web3.js\nDESCRIPTION: Command to update package version numbers using Lerna without creating git tags or pushing changes. This is used during the release process to prepare packages for a new release.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/RELEASE.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nlerna version --no-push --no-private --no-git-tag-version\n```\n\n----------------------------------------\n\nTITLE: Installing Web3.js using Yarn\nDESCRIPTION: Command to install the Web3.js package using Yarn package manager. This provides the same functionality as the NPM installation method.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add web3\n```\n\n----------------------------------------\n\nTITLE: Configuring Hardhat with Web3.js v4 Plugin\nDESCRIPTION: TypeScript code to import and configure the Web3.js v4 plugin in the Hardhat configuration file.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/08_hardhat_tutorial/index.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { HardhatUserConfig } from 'hardhat/config';\nimport '@nomicfoundation/hardhat-toolbox';\nimport '@nomicfoundation/hardhat-web3-v4'; // <================\n\nconst config: HardhatUserConfig = {\n\tsolidity: '0.8.19',\n};\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Importing Web3.js Correctly\nDESCRIPTION: Example of the correct way to import Web3 using default import syntax in React Native.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/19_resources_and_troubleshooting/index.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nimport Web3 from 'web3';\n```\n\n----------------------------------------\n\nTITLE: Confirmations Handler Changes in Web3.js 1.x vs 4.x\nDESCRIPTION: Illustrates the change in confirmation handler parameter structure from multiple parameters to a single object parameter.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/packages/web3-eth-contract/CHANGELOG.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nmyContract .send().on('confirmation', (confirmations: number, receipt: object, latestBlockHash: string) => {})`\n```\n\nLANGUAGE: typescript\nCODE:\n```\nmyContract .send().on('confirmation', ({confirmations: bigint, receipt: object, latestBlockHash: string}) => {})`\n```\n\n----------------------------------------\n\nTITLE: Installing Web3 Plugin using NPM\nDESCRIPTION: Command to install the web3-plugin-example package using NPM package manager.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/tools/web3-plugin-example/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install web3-plugin-example\n```\n\n----------------------------------------\n\nTITLE: Accessing Provider Connection in Web3.js 1.x\nDESCRIPTION: Example showing how to close a connection in web3.js 1.x version, which is no longer supported in newer versions as the internal connection object is not exposed directly.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/packages/web3/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nweb3.currentProvider.connection.close();\n```\n\n----------------------------------------\n\nTITLE: Installing web3-eth using Yarn\nDESCRIPTION: Command to install the web3-eth package using Yarn package manager. This alternative to NPM can be used to add the web3-eth package to your project for Ethereum blockchain interactions.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/packages/web3-eth/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add web3-eth\n```\n\n----------------------------------------\n\nTITLE: Installing React Native Quick Crypto\nDESCRIPTION: Installation command for adding react-native-quick-crypto as a dependency to resolve prototype errors.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/19_resources_and_troubleshooting/index.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nyarn add react-native-quick-crypto\n```\n\n----------------------------------------\n\nTITLE: Installing Web3 Utils Package with npm\nDESCRIPTION: Commands to install either the standalone web3-utils package or the complete web3 library which includes utils.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/12_web3_utils_module/index.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i web3-utils\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm i web3\n```\n\n----------------------------------------\n\nTITLE: ABI Schema Validation Example\nDESCRIPTION: Example of using ABI schema format for validation of Ethereum data\nSOURCE: https://github.com/web3/web3.js/blob/4.x/packages/web3-validator/README.md#2025-04-21_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n[{ \"name\": \"owner\", \"type\": \"address\" }]\n```\n\n----------------------------------------\n\nTITLE: Installing Web3.js using Yarn\nDESCRIPTION: Command to install the web3.js package using Yarn package manager. This adds the web3 library to your project's dependencies in package.json.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/packages/web3/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add web3\n```\n\n----------------------------------------\n\nTITLE: Example Changelog Template\nDESCRIPTION: Template showing the standard format for changelog entries including Added, Changed, Deprecated, Removed, Fixed, and Security sections.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/packages/web3-providers-ipc/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## [1.0.0]\n\n### Added\n\n- I've added feature XY (#1000)\n\n### Changed\n\n- I've cleaned up XY (#1000)\n\n### Deprecated\n\n- I've deprecated XY (#1000)\n\n### Removed\n\n- I've removed XY (#1000)\n\n### Fixed\n\n- I've fixed XY (#1000)\n\n### Security\n\n- I've improved the security in XY (#1000)\n```\n\n----------------------------------------\n\nTITLE: WebSocket Provider Options Interface - v1.x\nDESCRIPTION: TypeScript interface definition for WebSocket provider options in web3.js v1.x.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/15_web3_upgrade_guide/providers_migration_guide.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ninterface WebsocketProviderOptions {\n\thost?: string;\n\ttimeout?: number;\n\treconnectDelay?: number;\n\theaders?: any;\n\tprotocol?: string;\n\tclientConfig?: object;\n\trequestOptions?: any;\n\torigin?: string;\n\treconnect?: ReconnectOptions;\n}\n\ninterface ReconnectOptions {\n\tauto?: boolean;\n\tdelay?: number;\n\tmaxAttempts?: number;\n\tonTimeout?: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Release Branch in Git for Web3.js\nDESCRIPTION: Commands to create and checkout a new release branch in the web3.js repository. This is part of the release process where a new branch is created from the 4.x base branch with a specific naming convention.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/RELEASE.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout 4.x\ngit checkout -b release/bumped-version\n```\n\n----------------------------------------\n\nTITLE: Installing web3-eth-personal using NPM\nDESCRIPTION: Command to install the web3-eth-personal package using NPM (Node Package Manager). This allows developers to add the module to their project dependencies.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/packages/web3-eth-personal/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install web3-eth-personal\n```\n\n----------------------------------------\n\nTITLE: Installing Ethers.js v6\nDESCRIPTION: Instructions for installing the ethers.js package using npm.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/17_migration_ethers/index.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install ethers@6\n```\n\n----------------------------------------\n\nTITLE: Legacy Close Event Handler in Web3.js v1.x\nDESCRIPTION: Demonstrates the deprecated 'close' event usage in Web3.js version 1.x for handling provider disconnection events. This approach is no longer recommended as per EIP-1193.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/15_web3_upgrade_guide/providers_migration_guide.md#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst provider = new IpcProvider(host + port);\n// we would use close to listen to the disconnect function\nprovider.on('close', function (err) {\n\tconsole.log('closed');\n\tresolve();\n});\nprovider.disconnect(1012);\n// would eventually log closed\n```\n\n----------------------------------------\n\nTITLE: Overriding Web3Context's link Method for Contract Integration\nDESCRIPTION: Implementation of a workaround for linking Web3Context with contract instances in plugins. This approach solves an issue where contract instances might not properly receive the provider from the plugin's context.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/14_web3_plugin_guide/plugin_authors.md#2025-04-21_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Contract, ContractAbi, Web3Context, Web3PluginBase, types, utils } from 'web3';\n\nimport { ERC20TokenAbi } from './ERC20Token';\n\nexport class ContractMethodWrappersPlugin extends Web3PluginBase {\n\tpublic pluginNamespace = 'contractMethodWrappersPlugin';\n\n\tprivate readonly _contract: Contract<typeof ERC20TokenAbi>;\n\n\tpublic constructor(abi: ContractAbi, address: types.Address) {\n\t\tsuper();\n\t\tthis._contract = new Contract(abi, address);\n\t}\n\n\t/**\n\t * This method overrides the inherited `link` method from\n\t * `Web3PluginBase` to add a configured `RequestManager`\n\t * to the Contract instance when `Web3.registerPlugin`\n\t * is called.\n\t *\n\t * @param parentContext - The context to be added to the instance of `ChainlinkPlugin`,\n\t * and by extension, the instance of `Contract`.\n\t */\n\tpublic link(parentContext: Web3Context) {\n\t\tsuper.link(parentContext);\n\t\tthis._contract.link(parentContext);\n\t}\n\n\tpublic async getFormattedBalance<ReturnFormat extends types.DataFormat>(\n\t\taddress: types.Address,\n\t\treturnFormat?: ReturnFormat,\n\t) {\n\t\treturn utils.format(\n\t\t\t{ eth: 'unit' },\n\t\t\tawait this._contract.methods.balanceOf(address).call(),\n\t\t\treturnFormat ?? types.DEFAULT_RETURN_FORMAT,\n\t\t);\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Plugin Dependencies in package.json\nDESCRIPTION: Example package.json configuration showing how to set up peer dependencies for a web3.js plugin. The plugin should depend on web3 package version 4.0.2 or higher but less than version 5, listed as a peer dependency.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/14_web3_plugin_guide/plugin_authors.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"name\": \"web3-plugin-custom-rpc-methods\",\n\t\"version\": \"0.1.0\",\n\t\"peerDependencies\": {\n\t\t\"web3\": \">= 4.0.2 < 5\"\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Running Deployment Script\nDESCRIPTION: Command to run the deployment script using Hardhat, which deploys the 'Lock' contract to a local blockchain.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/08_hardhat_tutorial/index.md#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nnpx hardhat run scripts/deploy.ts\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Web3.js Release\nDESCRIPTION: Command to verify and install all dependencies using Yarn as part of the web3.js release process.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/RELEASE.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn\n```\n\n----------------------------------------\n\nTITLE: Installing web3-rpc-providers using NPM\nDESCRIPTION: Command to install the web3-rpc-providers package using NPM (Node Package Manager). This will add the package to your project's dependencies.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/packages/web3-rpc-providers/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install web3-rpc-providers\n```\n\n----------------------------------------\n\nTITLE: Installing web3-validator with Yarn\nDESCRIPTION: Command to install web3-validator package using Yarn package manager\nSOURCE: https://github.com/web3/web3.js/blob/4.x/packages/web3-validator/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add web3-validator\n```\n\n----------------------------------------\n\nTITLE: Installing web3-providers-ws using Yarn\nDESCRIPTION: Command to install the web3-providers-ws package using Yarn package manager. This adds the Websocket provider for Web3.js to your project.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/packages/web3-providers-ws/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add web3-providers-ws\n```\n\n----------------------------------------\n\nTITLE: Installing Solidity Compiler\nDESCRIPTION: Command to install the Solidity compiler (solc) package using npm, ensuring compatibility with the Solidity version specified in the smart contract.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/05_smart_contracts/smart_contracts_guide.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm i solc@^0.8.0\n```\n\n----------------------------------------\n\nTITLE: Setting up React Entry Point with Web3Modal\nDESCRIPTION: TypeScript code for the main entry point of the React application. It initializes the React DOM root and renders the main App component within StrictMode for better development experience.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/07_dapps/web3_modal_guide/react.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport App from './App.js';\n\nReactDOM.createRoot(document.getElementById('app')!).render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n);\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry for Version 1.1.1 in Markdown\nDESCRIPTION: This snippet shows the changelog entry for version 1.1.1, indicating it as a stable release.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/tools/web3-packagetemplate/CHANGELOG.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n## [1.1.1]\n\n-   Stable release\n```\n\n----------------------------------------\n\nTITLE: Setting Contract Data Input Fill Options in Web3.js\nDESCRIPTION: Available options for contractDataInputFill parameter which determines how contract method data is populated.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/09_web3_config/index.md#2025-04-21_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n'data';\n'input';\n'both';\n```\n\n----------------------------------------\n\nTITLE: Installing web3-eth-abi using Yarn\nDESCRIPTION: Command to install the web3-eth-abi package using Yarn package manager. This is an alternative method to add the package to a project's dependencies.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/packages/web3-eth-abi/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add web3-eth-abi\n```\n\n----------------------------------------\n\nTITLE: Starting the Hardhat Development Network\nDESCRIPTION: Command to start a local Ethereum blockchain for development and testing.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/04_transactions/transactions.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpx hardhat node\n```\n\n----------------------------------------\n\nTITLE: Initializing a React Project with TypeScript\nDESCRIPTION: Console commands to create a new React project with TypeScript template and navigate to the project directory.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/07_dapps/intermediate-dapp.md#2025-04-21_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nnpx create-react-app web3-intermediate-dapp --template typescript\ncd web3-intermediate-dapp\n```\n\n----------------------------------------\n\nTITLE: Installing web3-errors using Yarn\nDESCRIPTION: Command to install the web3-errors package using Yarn package manager. This will add the package to your project's dependencies.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/packages/web3-errors/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add web3-errors\n```\n\n----------------------------------------\n\nTITLE: Importing Specific Web3-Eth Package in TypeScript\nDESCRIPTION: Shows how to import only the Web3Eth package using ES module import syntax in TypeScript instead of importing the entire web3.js library.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/13_advanced/tree_shaking.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Web3Eth } from 'web3-eth';\n// ...\n```\n\n----------------------------------------\n\nTITLE: Installing Web3.js Package\nDESCRIPTION: Console command to install Web3.js as a project dependency for interacting with Ethereum networks.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/07_dapps/intermediate-dapp.md#2025-04-21_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nnpm i web3\n```\n\n----------------------------------------\n\nTITLE: Installing web3-account-abstraction using NPM\nDESCRIPTION: Command to install the web3-account-abstraction package using NPM (Node Package Manager). This installs the package and its dependencies in your project.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/packages/web3-account-abstraction/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install web3-account-abstraction\n```\n\n----------------------------------------\n\nTITLE: Installing web3.js using npm\nDESCRIPTION: Command to install web3.js version 4 using npm package manager.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/11_ens/index.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install web3\n```\n\n----------------------------------------\n\nTITLE: Example Changelog Entry Template\nDESCRIPTION: Template structure showing how changelog entries should be formatted with sections for Added, Changed, Deprecated, Removed, Fixed, and Security updates.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/packages/web3-core/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## [1.0.0]\n\n### Added\n\n- I've added feature XY (#1000)\n\n### Changed\n\n- I've cleaned up XY (#1000)\n\n### Deprecated\n\n- I've deprecated XY (#1000)\n\n### Removed\n\n- I've removed XY (#1000)\n\n### Fixed\n\n- I've fixed XY (#1000)\n\n### Security\n\n- I've improved the security in XY (#1000)\n```\n\n----------------------------------------\n\nTITLE: Installing Web3 RPC Methods via Yarn\nDESCRIPTION: Command to install the web3-rpc-methods package using Yarn package manager\nSOURCE: https://github.com/web3/web3.js/blob/4.x/packages/web3-rpc-methods/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add web3-rpc-methods\n```\n\n----------------------------------------\n\nTITLE: Importing Specific Web3-Eth Package in JavaScript\nDESCRIPTION: Demonstrates how to import only the Web3Eth package using CommonJS require syntax instead of importing the entire web3.js library.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/13_advanced/tree_shaking.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst { Web3Eth } = require('web3-eth');\n// ...\n```\n\n----------------------------------------\n\nTITLE: Installing web3-core with Yarn\nDESCRIPTION: Command to install the web3-core package using Yarn package manager.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/packages/web3-core/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add web3-core\n```\n\n----------------------------------------\n\nTITLE: Setting Default Hardfork Options in Web3.js\nDESCRIPTION: Available hardfork options for Ethereum network configuration in Web3.js.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/09_web3_config/index.md#2025-04-21_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n'chainstart';\n'frontier';\n'homestead';\n'dao';\n'tangerineWhistle';\n'spuriousDragon';\n'byzantium';\n'constantinople';\n'petersburg';\n'istanbul';\n'muirGlacier';\n'berlin';\n'london';\n'altair';\n'arrowGlacier';\n'grayGlacier';\n'bellatrix';\n'merge';\n'capella';\n'sharding';\n```\n\n----------------------------------------\n\nTITLE: Installing web3-account-abstraction using Yarn\nDESCRIPTION: Command to install the web3-account-abstraction package using Yarn package manager. This adds the package and its dependencies to your project.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/packages/web3-account-abstraction/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add web3-account-abstraction\n```\n\n----------------------------------------\n\nTITLE: Adding Big-Integer Package\nDESCRIPTION: Installation command for adding the big-integer package as a dependency.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/19_resources_and_troubleshooting/index.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add big-integer\n```\n\n----------------------------------------\n\nTITLE: Example Changelog Entry Format\nDESCRIPTION: Template structure showing how changelog entries should be formatted with different change categories\nSOURCE: https://github.com/web3/web3.js/blob/4.x/tools/web3-plugin-example/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## [1.0.0]\n\n### Added\n\n- I've added feature XY (#1000)\n\n### Changed\n\n- I've cleaned up XY (#1000)\n\n### Deprecated\n\n- I've deprecated XY (#1000)\n\n### Removed\n\n- I've removed XY (#1000)\n\n### Fixed\n\n- I've fixed XY (#1000)\n\n### Security\n\n- I've improved the security in XY (#1000)\n```\n\n----------------------------------------\n\nTITLE: Checking Node.js and npm Versions via Command Line\nDESCRIPTION: Console commands to verify that Node.js and npm are installed with the expected versions before starting the tutorial.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/07_dapps/intermediate-dapp.md#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$: node -v\n# your version may be different, but it's best to use the current stable version\nv20.14.0\n$: npm -v\n10.8.2\n```\n\n----------------------------------------\n\nTITLE: Configuring Vite for React Development\nDESCRIPTION: JavaScript configuration file for Vite to enable React support. It uses the @vitejs/plugin-react plugin to provide React capabilities in the development environment.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/07_dapps/web3_modal_guide/react.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport react from '@vitejs/plugin-react';\nimport { defineConfig } from 'vite';\n\nexport default defineConfig({\n\tplugins: [react()],\n});\n```\n\n----------------------------------------\n\nTITLE: Installing web3-rpc-providers using Yarn\nDESCRIPTION: Command to install the web3-rpc-providers package using Yarn package manager. This will add the package to your project's dependencies.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/packages/web3-rpc-providers/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add web3-rpc-providers\n```\n\n----------------------------------------\n\nTITLE: Installing web3-providers-ipc using Yarn\nDESCRIPTION: Command to install the web3-providers-ipc package using Yarn package manager. This is an alternative method to install the IPC provider for Web3.js.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/packages/web3-providers-ipc/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add web3-providers-ipc\n```\n\n----------------------------------------\n\nTITLE: Checking Node.js Prerequisites\nDESCRIPTION: Command line instructions to verify Node.js and npm versions are installed correctly\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/07_dapps/lightweight-dapp.md#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$: node -v\n# your version may be different, but it's best to use the current stable version\nv20.14.0\n$: npm -v\n10.8.2\n```\n\n----------------------------------------\n\nTITLE: Example Changelog Entry Format\nDESCRIPTION: Template showing the standard format for changelog entries including sections for Added, Changed, Deprecated, Removed, Fixed, and Security updates\nSOURCE: https://github.com/web3/web3.js/blob/4.x/packages/web3-validator/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## [1.0.0]\n\n### Added\n\n- I've added feature XY (#1000)\n\n### Changed\n\n- I've cleaned up XY (#1000)\n\n### Deprecated\n\n- I've deprecated XY (#1000)\n\n### Removed\n\n- I've removed XY (#1000)\n\n### Fixed\n\n- I've fixed XY (#1000)\n\n### Security\n\n- I've improved the security in XY (#1000)\n```\n\n----------------------------------------\n\nTITLE: Running Transaction Event Handler Script\nDESCRIPTION: Command to execute the transaction events demonstration script.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/04_transactions/transactions.md#2025-04-21_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nnode transaction-events.js\n```\n\n----------------------------------------\n\nTITLE: TypeScript Environment Configuration\nDESCRIPTION: TypeScript configuration for Web3.js types and global window interface\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/07_dapps/lightweight-dapp.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n/// <reference types=\"react-scripts\" />\n\nimport type { EIP1193Provider, Web3APISpec } from 'web3-types';\n\ndeclare global {\n\tinterface Window {\n\t\tethereum?: EIP1193Provider<Web3APISpec>;\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Installing web3-eth-abi using NPM\nDESCRIPTION: Command to install the web3-eth-abi package using NPM (Node Package Manager). This allows developers to add the package to their project dependencies.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/packages/web3-eth-abi/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install web3-eth-abi\n```\n\n----------------------------------------\n\nTITLE: HTML Template Configuration\nDESCRIPTION: Basic HTML template file for the dApp development build\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/07_dapps/lightweight-dapp.md#2025-04-21_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n\t<head>\n\t\t<title>Web3.js Lightweight dApp Development</title>\n\t</head>\n\t<body>\n\t\t<div id=\"root\"></div>\n\t</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Implementing React Component to Display Available Wallet Providers\nDESCRIPTION: React component that uses the custom provider hook to display a list of all available EIP-6963 compatible wallet providers with their names and RDNS identifiers.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/07_dapps/intermediate-dapp.md#2025-04-21_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport type { EIP6963ProviderDetail } from 'web3';\n\nimport { useProviders } from './useProviders';\n\nfunction App() {\n\t// get the dynamic list of providers\n\tconst providers = useProviders();\n\n\treturn (\n\t\t<>\n\t\t\t{providers.map((provider: EIP6963ProviderDetail) => {\n\t\t\t\t// list available providers\n\t\t\t\treturn (\n\t\t\t\t\t<div key={provider.info.uuid}>\n\t\t\t\t\t\t{provider.info.name} [{provider.info.rdns}]\n\t\t\t\t\t</div>\n\t\t\t\t);\n\t\t\t})}\n\t\t</>\n\t);\n}\n\nexport default App;\n```\n\n----------------------------------------\n\nTITLE: Installing web3-utils using Yarn\nDESCRIPTION: Command to install the web3-utils package using Yarn package manager.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/packages/web3-utils/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add web3-utils\n```\n\n----------------------------------------\n\nTITLE: Checking Node.js and npm Versions\nDESCRIPTION: Commands to verify that Node.js and npm are installed and to check their versions, which are prerequisites for the tutorial.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/05_smart_contracts/smart_contracts_guide.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$: node -v\n# your version may be different, but it's best to use the current stable version\nv18.16.1\n$: npm -v\n9.5.1\n```\n\n----------------------------------------\n\nTITLE: Bundle Analysis Script\nDESCRIPTION: JavaScript script to analyze React production build bundle size\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/07_dapps/lightweight-dapp.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst webpack = require('webpack');\nconst { BundleAnalyzerPlugin } = require('webpack-bundle-analyzer');\n\nprocess.env.NODE_ENV = 'production';\n\nconst config = require('react-scripts/config/webpack.config')('production');\nconfig.plugins.push(new BundleAnalyzerPlugin({ analyzerPort: 8089 }));\n\nwebpack(config, (err, stats) => {\n\tif (err || stats.hasErrors()) {\n\t\tconsole.error(err);\n\t}\n});\n```\n\n----------------------------------------\n\nTITLE: Testing Web3.js Connection to the Hardhat Network\nDESCRIPTION: Command to execute the script that tests the connection to the Hardhat development network.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/04_transactions/transactions.md#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nnode index.js\n```\n\n----------------------------------------\n\nTITLE: Installing web3.js ENS package\nDESCRIPTION: Command to install the web3-eth-ens package using npm.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/11_ens/index.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install web3-eth-ens\n```\n\n----------------------------------------\n\nTITLE: Installing web3-eth-personal using Yarn\nDESCRIPTION: Command to install the web3-eth-personal package using Yarn package manager. This is an alternative method to add the module to a project's dependencies.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/packages/web3-eth-personal/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add web3-eth-personal\n```\n\n----------------------------------------\n\nTITLE: Installing web3-types using Yarn\nDESCRIPTION: Command to install the web3-types package using Yarn package manager.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/packages/web3-types/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add web3-types\n```\n\n----------------------------------------\n\nTITLE: JavaScript Web3 Import Example\nDESCRIPTION: Example showing how to import Web3 in a JavaScript file using CommonJS require syntax.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/README.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst { Web3 } = require('web3');\n// ...\n```\n\n----------------------------------------\n\nTITLE: Creating and Navigating to Project Directory\nDESCRIPTION: Commands to create a new project folder and navigate into it using the terminal.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/08_hardhat_tutorial/index.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmkdir myproject\n```\n\nLANGUAGE: bash\nCODE:\n```\ncd myproject\n```\n\n----------------------------------------\n\nTITLE: Adding decodeFunctionCall and decodeFunctionReturn in web3-eth-abi\nDESCRIPTION: New functions added to decode function calls and returns in the ABI module.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/CHANGELOG.md#2025-04-21_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\ndecodeFunctionCall, decodeFunctionReturn\n```\n\n----------------------------------------\n\nTITLE: Installing Web3 RPC Methods via NPM\nDESCRIPTION: Command to install the web3-rpc-methods package using NPM package manager\nSOURCE: https://github.com/web3/web3.js/blob/4.x/packages/web3-rpc-methods/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install web3-rpc-methods\n```\n\n----------------------------------------\n\nTITLE: Installing RN-Nodeify for React Native BigInt Support\nDESCRIPTION: Installation command for adding rn-nodeify as a development dependency to support BigInt in React Native.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/19_resources_and_troubleshooting/index.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn add --dev rn-nodeify\n```\n\n----------------------------------------\n\nTITLE: Disconnecting Provider in Web3.js 4.x\nDESCRIPTION: The recommended approach to disconnect a provider in web3.js 4.x, replacing the direct connection manipulation from earlier versions.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/packages/web3/CHANGELOG.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nweb3.currentProvider.disconnect();\n```\n\n----------------------------------------\n\nTITLE: Unreleased Changes Section in Markdown\nDESCRIPTION: Placeholder section for tracking unreleased changes that are yet to be included in a version release.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/packages/web3-account-abstraction/CHANGELOG.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n## [Unreleased]\n```\n\n----------------------------------------\n\nTITLE: Importing Tab Components in Markdown Files\nDESCRIPTION: JavaScript import statements needed at the top of markdown files to enable programming language tabs functionality in Docusaurus.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/README.md#2025-04-21_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nimport Tabs from '@theme/Tabs';\nimport TabItem from '@theme/TabItem';\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependencies\nDESCRIPTION: Console commands for initializing a new Web3.js dApp and installing development dependencies\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/07_dapps/lightweight-dapp.md#2025-04-21_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nnpm install -g create-web3js-dapp\nnpx create-web3js-dapp --framework react --template minimal\ncd web3js-react-dapp-min\n```\n\n----------------------------------------\n\nTITLE: Configuring .gitignore for Hardhat Configuration\nDESCRIPTION: Update to the .gitignore file to prevent the Hardhat configuration file containing sensitive wallet information from being committed to version control.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/07_dapps/intermediate-dapp.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.\n\n# add this line\nhardhat.config.js\n\n# dependencies\n/node_modules\n/.pnp\n.pnp.js\n\n# testing\n/coverage\n\n# production\n/build\n\n# misc\n.DS_Store\n.env.local\n.env.development.local\n.env.test.local\n.env.production.local\n\nnpm-debug.log*\nyarn-debug.log*\nyarn-error.log*\n```\n\n----------------------------------------\n\nTITLE: Starting Hardhat Development Network\nDESCRIPTION: Console command to start the Hardhat local development network with the configured accounts.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/07_dapps/intermediate-dapp.md#2025-04-21_snippet_6\n\nLANGUAGE: console\nCODE:\n```\nnpx hardhat node\n```\n\n----------------------------------------\n\nTITLE: Installing TypeScript Dependencies\nDESCRIPTION: Command to install TypeScript and Node.js type definitions.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/10_web3_eth/eth.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm i typescript @types/node\n```\n\n----------------------------------------\n\nTITLE: Example Changelog Entry Template\nDESCRIPTION: Template showing the standard format for changelog entries including sections for Added, Changed, Deprecated, Removed, Fixed, and Security updates\nSOURCE: https://github.com/web3/web3.js/blob/4.x/packages/web3-eth-abi/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## [1.0.0]\n\n### Added\n\n- I've added feature XY (#1000)\n\n### Changed\n\n- I've cleaned up XY (#1000)\n\n### Deprecated\n\n- I've deprecated XY (#1000)\n\n### Removed\n\n- I've removed XY (#1000)\n\n### Fixed\n\n- I've fixed XY (#1000)\n\n### Security\n\n- I've improved the security in XY (#1000)\n```\n\n----------------------------------------\n\nTITLE: Example Changelog Entry Format in Markdown\nDESCRIPTION: Demonstrates the structure and format used for documenting changes in each version of the project. Includes sections for Added, Changed, Deprecated, Removed, Fixed, and Security updates.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/packages/web3-errors/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## [1.0.0]\n\n### Added\n\n- I've added feature XY (#1000)\n\n### Changed\n\n- I've cleaned up XY (#1000)\n\n### Deprecated\n\n- I've deprecated XY (#1000)\n\n### Removed\n\n- I've removed XY (#1000)\n\n### Fixed\n\n- I've fixed XY (#1000)\n\n### Security\n\n- I've improved the security in XY (#1000)\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependencies with Yarn\nDESCRIPTION: Command to install all necessary dependencies for the Web3.js documentation website using Yarn package manager.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn\n```\n\n----------------------------------------\n\nTITLE: Creating a New Project Directory with Bash\nDESCRIPTION: Commands to create and navigate to a new directory for the tutorial project.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/04_transactions/transactions.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmkdir account-transactions-tutorial\ncd account-transactions-tutorial\n```\n\n----------------------------------------\n\nTITLE: Running Web3.js Connection Test\nDESCRIPTION: Command to execute the Web3.js script that verifies the connection to the Hardhat development network by retrieving and displaying the chain ID.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/05_smart_contracts/smart_contracts_guide.md#2025-04-21_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nnode index.js\n```\n\n----------------------------------------\n\nTITLE: Installing web3-eth-iban using NPM\nDESCRIPTION: Command to install the web3-eth-iban package using NPM (Node Package Manager).\nSOURCE: https://github.com/web3/web3.js/blob/4.x/packages/web3-eth-iban/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install web3-eth-iban\n```\n\n----------------------------------------\n\nTITLE: Installing Hardhat and Initializing Project\nDESCRIPTION: Commands to install Hardhat and initialize a new Hardhat project in the current directory.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/08_hardhat_tutorial/index.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install hardhat\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpx hardhat init\n```\n\n----------------------------------------\n\nTITLE: Expected Deployment Output\nDESCRIPTION: Example output showing the deployer account, estimated gas, and deployed contract address.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/05_smart_contracts/smart_contracts_guide.md#2025-04-21_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nDeployer account: 0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266\nEstimated gas: 141681n\nContract deployed at address: 0x5FbDB2315678afecb367f032d93F642f64180aa3\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry Example in Markdown\nDESCRIPTION: An example structure for a changelog entry, demonstrating how to document different types of changes including additions, changes, deprecations, removals, fixes, and security improvements.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/packages/web3-net/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n## [1.0.0]\n\n### Added\n\n- I've added feature XY (#1000)\n\n### Changed\n\n- I've cleaned up XY (#1000)\n\n### Deprecated\n\n- I've deprecated XY (#1000)\n\n### Removed\n\n- I've removed XY (#1000)\n\n### Fixed\n\n- I've fixed XY (#1000)\n\n### Security\n\n- I've improved the security in XY (#1000)\n```\n\n----------------------------------------\n\nTITLE: Example Changelog Entry Format in Markdown\nDESCRIPTION: Demonstrates the structure of a changelog entry, including sections for Added, Changed, Deprecated, Removed, Fixed, and Security improvements. This format is used throughout the document for consistency.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/packages/web3-eth-personal/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## [1.0.0]\n\n### Added\n\n- I've added feature XY (#1000)\n\n### Changed\n\n- I've cleaned up XY (#1000)\n\n### Deprecated\n\n- I've deprecated XY (#1000)\n\n### Removed\n\n- I've removed XY (#1000)\n\n### Fixed\n\n- I've fixed XY (#1000)\n\n### Security\n\n- I've improved the security in XY (#1000)\n```\n\n----------------------------------------\n\nTITLE: Installing web3-providers-http via Yarn\nDESCRIPTION: Command to install the web3-providers-http package using Yarn package manager. This is an alternative method to add the package to your project.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/packages/web3-providers-http/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add web3-providers-http\n```\n\n----------------------------------------\n\nTITLE: Deprecated Net Package Functions in TypeScript\nDESCRIPTION: Shows deprecated bzz and shh package net functionality that is no longer available in web3.js. This includes getId, isListening, and getPeerCount methods.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/15_web3_upgrade_guide/net_migration_guide.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// web3.bzz.net is NOT available\n// web3.shh.net is NOT available\n```\n\n----------------------------------------\n\nTITLE: Computing Keccak-256 hash with Viem\nDESCRIPTION: Equivalent code in Viem to compute a Keccak-256 hash.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/18_migration_viem/index.md#2025-04-21_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nimport { keccak256 , toHex } from 'viem'\n\nkeccak256(toHex('hello world'));\n```\n\n----------------------------------------\n\nTITLE: Installing Web3 Plugin using Yarn\nDESCRIPTION: Command to install the web3-plugin-example package using Yarn package manager.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/tools/web3-plugin-example/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add web3-plugin-example\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry Example Template\nDESCRIPTION: An example template showing the structure and format for changelog entries, including sections for Added, Changed, Deprecated, Removed, Fixed, and Security updates.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/packages/web3-types/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## [1.0.0]\n\n### Added\n\n- I've added feature XY (#1000)\n\n### Changed\n\n- I've cleaned up XY (#1000)\n\n### Deprecated\n\n- I've deprecated XY (#1000)\n\n### Removed\n\n- I've removed XY (#1000)\n\n### Fixed\n\n- I've fixed XY (#1000)\n\n### Security\n\n- I've improved the security in XY (#1000)\n```\n\n----------------------------------------\n\nTITLE: Lock Smart Contract in Solidity\nDESCRIPTION: A Solidity smart contract named 'Lock' that implements a time-locked withdrawal mechanism.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/08_hardhat_tutorial/index.md#2025-04-21_snippet_4\n\nLANGUAGE: solidity\nCODE:\n```\n// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.9;\n\n// Uncomment this line to use console.log\n// import \"hardhat/console.sol\";\n\ncontract Lock {\n  uint public unlockTime;\n  address payable public owner;\n\n  event Withdrawal(uint amount, uint when);\n\n  constructor(uint _unlockTime) payable {\n    require(\n      block.timestamp < _unlockTime,\n      \"Unlock time should be in the future\"\n    );\n\n    unlockTime = _unlockTime;\n    owner = payable(msg.sender);\n  }\n\n  function withdraw() public {\n    // Uncomment this line, and the import of \"hardhat/console.sol\", to print a log in your terminal\n    // console.log(\"Unlock time is %o and block timestamp is %o\", unlockTime, block.timestamp);\n\n    require(block.timestamp >= unlockTime, \"You can't withdraw yet\");\n    require(msg.sender == owner, \"You aren't the owner\");\n\n    emit Withdrawal(address(this).balance, block.timestamp);\n\n    owner.transfer(address(this).balance);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Synchronizing Changelog for Web3.js\nDESCRIPTION: Command to synchronize the root CHANGELOG.md file in the web3.js project, ensuring it includes all relevant package changes.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/RELEASE.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nyarn changelog sync\n```\n\n----------------------------------------\n\nTITLE: Running Transaction Script in TypeScript\nDESCRIPTION: Command to execute the transaction script using ts-node, a TypeScript execution engine that allows running TypeScript files directly without the need for prior compilation to JavaScript.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/10_web3_eth/eth.md#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nnpx ts-node transaction.ts\n```\n\n----------------------------------------\n\nTITLE: Changelog Example Template in Markdown\nDESCRIPTION: Example template showing the structure and format for changelog entries including Added, Changed, Deprecated, Removed, Fixed and Security sections.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/packages/web3-eth-accounts/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## [1.0.0]\n\n### Added\n\n- I've added feature XY (#1000)\n\n### Changed\n\n- I've cleaned up XY (#1000)\n\n### Deprecated\n\n- I've deprecated XY (#1000)\n\n### Removed\n\n- I've removed XY (#1000)\n\n### Fixed\n\n- I've fixed XY (#1000)\n\n### Security\n\n- I've improved the security in XY (#1000)\n```\n\n----------------------------------------\n\nTITLE: Installing Web3.js and Hardhat Dependencies\nDESCRIPTION: Command to install the required npm packages for the tutorial.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/04_transactions/transactions.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm i web3 hardhat\n```\n\n----------------------------------------\n\nTITLE: Computing Keccak-256 hash with Web3.js\nDESCRIPTION: Example of computing a Keccak-256 hash using Web3.js.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/18_migration_viem/index.md#2025-04-21_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nconst hash = web3.utils.keccak256('hello world');\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry Example Template in Markdown\nDESCRIPTION: Example template showing the structure and format for documenting different types of changes including additions, changes, deprecations, removals, fixes, and security updates.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/packages/web3-account-abstraction/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## [1.0.0]\n\n### Added\n\n- I've added feature XY (#1000)\n\n### Changed\n\n- I've cleaned up XY (#1000)\n\n### Deprecated\n\n- I've deprecated XY (#1000)\n\n### Removed\n\n- I've removed XY (#1000)\n\n### Fixed\n\n- I've fixed XY (#1000)\n\n### Security\n\n- I've improved the security in XY (#1000)\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry Template in Markdown\nDESCRIPTION: Example template showing the standard format for documenting version changes including additions, changes, deprecations, removals, fixes, and security updates.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/tools/eslint-config-base-web3/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## [1.0.0]\n\n### Added\n\n- I've added feature XY (#1000)\n\n### Changed\n\n- I've cleaned up XY (#1000)\n\n### Deprecated\n\n- I've deprecated XY (#1000)\n\n### Removed\n\n- I've removed XY (#1000)\n\n### Fixed\n\n- I've fixed XY (#1000)\n\n### Security\n\n- I've improved the security in XY (#1000)\n```\n\n----------------------------------------\n\nTITLE: Artifacts Configuration\nDESCRIPTION: JSON configuration file that specifies which contract artifacts should be processed by the generation script.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/05_smart_contracts/infer_contract_types.md#2025-04-21_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n[\n\t\"@openzeppelin/contracts/build/contracts/ERC20.json\",\n\t\"@openzeppelin/contracts/build/contracts/ERC1155.json\",\n\t\"./build/contracts/MyContract.json\"\n]\n```\n\n----------------------------------------\n\nTITLE: Example Changelog Entry Format in Markdown\nDESCRIPTION: This snippet demonstrates the format used for documenting changes in each version of the project. It includes sections for Added, Changed, Deprecated, Removed, Fixed, and Security updates.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/packages/web3-eth-ens/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## [1.0.0]\n\n### Added\n\n- I've added feature XY (#1000)\n\n### Changed\n\n- I've cleaned up XY (#1000)\n\n### Deprecated\n\n- I've deprecated XY (#1000)\n\n### Removed\n\n- I've removed XY (#1000)\n\n### Fixed\n\n- I've fixed XY (#1000)\n\n### Security\n\n- I've improved the security in XY (#1000)\n```\n\n----------------------------------------\n\nTITLE: Changelog Example Template\nDESCRIPTION: Example template showing the structure for changelog entries including sections for Added, Changed, Deprecated, Removed, Fixed, and Security updates.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/packages/web3-eth-iban/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## [1.0.0]\n\n### Added\n\n- I've added feature XY (#1000)\n\n### Changed\n\n- I've cleaned up XY (#1000)\n\n### Deprecated\n\n- I've deprecated XY (#1000)\n\n### Removed\n\n- I've removed XY (#1000)\n\n### Fixed\n\n- I've fixed XY (#1000)\n\n### Security\n\n- I've improved the security in XY (#1000)\n```\n\n----------------------------------------\n\nTITLE: Example Changelog Template in Markdown\nDESCRIPTION: Template showing the standard format for documenting changes including sections for Added, Changed, Deprecated, Removed, Fixed, and Security updates.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/packages/web3-providers-http/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## [1.0.0]\n\n### Added\n\n- I've added feature XY (#1000)\n\n### Changed\n\n- I've cleaned up XY (#1000)\n\n### Deprecated\n\n- I've deprecated XY (#1000)\n\n### Removed\n\n- I've removed XY (#1000)\n\n### Fixed\n\n- I've fixed XY (#1000)\n\n### Security\n\n- I've improved the security in XY (#1000)\n```\n\n----------------------------------------\n\nTITLE: Initializing a Hardhat Project\nDESCRIPTION: Command to set up a new Hardhat development environment.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/04_transactions/transactions.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpx hardhat init\n```\n\n----------------------------------------\n\nTITLE: Example Changelog Entry Template in Markdown\nDESCRIPTION: Template showing the standard format for documenting changes in the changelog, including sections for Added, Changed, Deprecated, Removed, Fixed, and Security updates.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/scripts/changelog/test/fixtures/mock_packages_directory/mock-package-1/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## [1.0.0]\n\n### Added\n\n- I've added feature XY (#1000)\n\n### Changed\n\n- I've cleaned up XY (#1000)\n\n### Deprecated\n\n- I've deprecated XY (#1000)\n\n### Removed\n\n- I've removed XY (#1000)\n\n### Fixed\n\n- I've fixed XY (#1000)\n\n### Security\n\n- I've improved the security in XY (#1000)\n```\n\n----------------------------------------\n\nTITLE: Test Execution Output\nDESCRIPTION: Example output from running the smart contract tests showing successful deployment and test results.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/08_hardhat_tutorial/index.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n/*\nLock\n    Deployment\nLock contract deployed to:  0x5FbDB2315678afecb367f032d93F642f64180aa3\nSetTime 1739193193n\n      âœ” Should set the right unlockTime (884ms)\n      âœ” Should set the right deployer (54ms)\n      âœ” Should receive and store the funds to lock\n      âœ” Shouldn't fail if the unlockTime has arrived and the deployer calls it\n*/\n```\n\n----------------------------------------\n\nTITLE: Setting Up React Native Quick Crypto\nDESCRIPTION: Command for setting up react-native-quick-crypto in iOS environment using pod install.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/19_resources_and_troubleshooting/index.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncd ios && pod install\n```\n\n----------------------------------------\n\nTITLE: Running TypeScript Code\nDESCRIPTION: Command to execute the TypeScript file using ts-node.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/10_web3_eth/eth.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpx ts-node index.ts\n```\n\n----------------------------------------\n\nTITLE: Interact Script Execution Command\nDESCRIPTION: Command to execute the contract interaction script.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/05_smart_contracts/smart_contracts_guide.md#2025-04-21_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nnode interact.js\n```\n\n----------------------------------------\n\nTITLE: Deploying Website without SSH\nDESCRIPTION: Command to deploy the website without using SSH, requiring GitHub username to be specified. This builds the website and pushes to the gh-pages branch.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/README.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ GIT_USER=<Your GitHub username> yarn deploy\n```\n\n----------------------------------------\n\nTITLE: Creating Project Directory\nDESCRIPTION: Commands to create and navigate to a new directory for the Web3.js Metamask tutorial.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/07_dapps/metamask-vanilla.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmkdir web3js-metamask-tutorial\ncd web3js-metamask-tutorial\n```\n\n----------------------------------------\n\nTITLE: Starting Hardhat Development Network\nDESCRIPTION: Command to start the Hardhat development network, which provides a local Ethereum environment for testing and development.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/05_smart_contracts/smart_contracts_guide.md#2025-04-21_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nnpx hardhat node\n```\n\n----------------------------------------\n\nTITLE: Building Web3.js Bundle\nDESCRIPTION: Command to build minified bundles for web3.js after version updates have been applied by Lerna.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/RELEASE.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nyarn build:web\n```\n\n----------------------------------------\n\nTITLE: Updating TransactionFactory in web3-eth-accounts\nDESCRIPTION: Fix for TransactionFactory.registerTransactionType to handle version mismatches between web3-eth and web3-eth-accounts by saving extraTxTypes at globals.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/CHANGELOG.md#2025-04-21_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nTransactionFactory.registerTransactionType\n```\n\n----------------------------------------\n\nTITLE: Executing Raw Transaction Script in Bash\nDESCRIPTION: This command runs the JavaScript file containing the raw transaction code. It assumes the file is named 'raw-transaction.js' and is located in the current directory.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/04_transactions/transactions.md#2025-04-21_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nnode raw-transaction.js\n```\n\n----------------------------------------\n\nTITLE: Checking Node.js Prerequisites with Bash\nDESCRIPTION: Command-line instructions to verify the required Node.js and npm versions are installed before starting the tutorial.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/04_transactions/transactions.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$: node -v\n# your version may be different, but it's best to use the current stable version\nv18.16.1\n$: npm -v\n9.5.1\n```\n\n----------------------------------------\n\nTITLE: Compiling Hardhat Project\nDESCRIPTION: Command to compile the Hardhat project, generating the 'artifacts' folder with build information and compiled contracts.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/08_hardhat_tutorial/index.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpx hardhat compile\n```\n\n----------------------------------------\n\nTITLE: Installing Web3.js v4 Plugin for Hardhat\nDESCRIPTION: Command to install the Hardhat-web3-v4 plugin and Web3.js v4 as development dependencies.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/08_hardhat_tutorial/index.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev @nomicfoundation/hardhat-web3-v4 'web3@4'\n```\n\n----------------------------------------\n\nTITLE: Deploy Script Execution Command\nDESCRIPTION: Command to execute the smart contract deployment script.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/05_smart_contracts/smart_contracts_guide.md#2025-04-21_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nnode deploy.js\n```\n\n----------------------------------------\n\nTITLE: Expected Server Output\nDESCRIPTION: Example output when starting the HTTP server, showing the ports for the websocket and HTTP connections.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/07_dapps/metamask-vanilla.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nWebsocket Server Listening on Port: 8086\nStarting up http-server, serving . on: http://0.0.0.0:8080\nHit CTRL-C to stop the server\nScanned working directory. ready for changes..\n```\n\n----------------------------------------\n\nTITLE: Rendering Markdown Table of Web3.js Packages\nDESCRIPTION: A markdown table displaying information about various Web3.js packages, including package names, version badges, license badges, documentation links, and descriptions.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/README.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n| Package                                                                                           | Version                                                                                                                                                                           | License                                                                                                               | Docs                                                                                                           | Description                                                                                                   |\n| ------------------------------------------------------------------------------------------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | --------------------------------------------------------------------------------------------------------------------- | -------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------- |\n| [web3](https://github.com/ChainSafe/web3.js/tree/4.x/packages/web3)                               | [![npm](https://img.shields.io/github/package-json/v/web3/web3.js/4.x?filename=packages%2Fweb3%2Fpackage.json)](https://www.npmjs.com/package/web3)                               | [![License: LGPL v3](https://img.shields.io/badge/License-LGPL%20v3-blue.svg)](https://www.gnu.org/licenses/lgpl-3.0) | [![documentation](https://img.shields.io/badge/typedoc-blue)](https://docs.web3js.org/api/web3)                | :rotating_light: Entire Web3.js offering (includes all packages)                                              |\n| [web3-core](https://github.com/ChainSafe/web3.js/tree/4.x/packages/web3-core)                     | [![npm](https://img.shields.io/github/package-json/v/web3/web3.js/4.x?filename=packages%2Fweb3-core%2Fpackage.json)](https://www.npmjs.com/package/web3-core)                     | [![License: LGPL v3](https://img.shields.io/badge/License-LGPL%20v3-blue.svg)](https://www.gnu.org/licenses/lgpl-3.0) | [![documentation](https://img.shields.io/badge/typedoc-blue)](https://docs.web3js.org/api/web3-core)           | Core functions for web3.js packages                                                                           |\n| [web3-errors](https://github.com/ChainSafe/web3.js/tree/4.x/packages/web3-errors)                 | [![npm](https://img.shields.io/github/package-json/v/web3/web3.js/4.x?filename=packages%2Fweb3-errors%2Fpackage.json)](https://www.npmjs.com/package/web3-core)                   | [![License: LGPL v3](https://img.shields.io/badge/License-LGPL%20v3-blue.svg)](https://www.gnu.org/licenses/lgpl-3.0) | [![documentation](https://img.shields.io/badge/typedoc-blue)](https://docs.web3js.org/api/web3-errors)         | Errors Objects                                                                                                |\n| [web3-eth](https://github.com/ChainSafe/web3.js/tree/4.x/packages/web3-eth)                       | [![npm](https://img.shields.io/github/package-json/v/web3/web3.js/4.x?filename=packages%2Fweb3-eth%2Fpackage.json)](https://www.npmjs.com/package/web3-eth)                       | [![License: LGPL v3](https://img.shields.io/badge/License-LGPL%20v3-blue.svg)](https://www.gnu.org/licenses/lgpl-3.0) | [![documentation](https://img.shields.io/badge/typedoc-blue)](https://docs.web3js.org/api/web3-eth)            | Modules to interact with the Ethereum blockchain and smart contracts                                          |\n| [web3-eth-abi](https://github.com/ChainSafe/web3.js/tree/4.x/packages/web3-eth-abi)               | [![npm](https://img.shields.io/github/package-json/v/web3/web3.js/4.x?filename=packages%2Fweb3-eth-abi%2Fpackage.json)](https://www.npmjs.com/package/web3-eth-abi)               | [![License: LGPL v3](https://img.shields.io/badge/License-LGPL%20v3-blue.svg)](https://www.gnu.org/licenses/lgpl-3.0) | [![documentation](https://img.shields.io/badge/typedoc-blue)](https://docs.web3js.org/api/web3-eth-abi)        | Functions for encoding and decoding EVM in/output                                                             |\n| [web3-eth-accounts](https://github.com/ChainSafe/web3.js/tree/4.x/packages/web3-eth-accounts)     | [![npm](https://img.shields.io/github/package-json/v/web3/web3.js/4.x?filename=packages%2Fweb3-eth-accounts%2Fpackage.json)](https://www.npmjs.com/package/web3-eth-accounts)     | [![License: LGPL v3](https://img.shields.io/badge/License-LGPL%20v3-blue.svg)](https://www.gnu.org/licenses/lgpl-3.0) | [![documentation](https://img.shields.io/badge/typedoc-blue)](https://docs.web3js.org/api/web3-eth-accounts)   | Functions for managing Ethereum accounts and signing                                                          |\n| [web3-eth-contract](https://github.com/ChainSafe/web3.js/tree/4.x/packages/web3-eth-contract)     | [![npm](https://img.shields.io/github/package-json/v/web3/web3.js/4.x?filename=packages%2Fweb3-eth-contract%2Fpackage.json)](https://www.npmjs.com/package/web3-eth-contract)     | [![License: LGPL v3](https://img.shields.io/badge/License-LGPL%20v3-blue.svg)](https://www.gnu.org/licenses/lgpl-3.0) | [![documentation](https://img.shields.io/badge/typedoc-blue)](https://docs.web3js.org/api/web3-eth-contract)   | The contract package contained in [web3-eth](https://github.com/ChainSafe/web3.js/tree/4.x/packages/web3-eth) |\n| [web3-eth-ens](https://github.com/ChainSafe/web3.js/tree/4.x/packages/web3-eth-ens)               | [![npm](https://img.shields.io/github/package-json/v/web3/web3.js/4.x?filename=packages%2Fweb3-eth-ens%2Fpackage.json)](https://www.npmjs.com/package/web3-eth-ens)               | [![License: LGPL v3](https://img.shields.io/badge/License-LGPL%20v3-blue.svg)](https://www.gnu.org/licenses/lgpl-3.0) | [![documentation](https://img.shields.io/badge/typedoc-blue)](https://docs.web3js.org/api/web3-eth-ens)        | Functions for interacting with the Ethereum Name Service                                                      |\n| [web3-eth-iban](https://github.com/ChainSafe/web3.js/tree/4.x/packages/web3-eth-iban)             | [![npm](https://img.shields.io/github/package-json/v/web3/web3.js/4.x?filename=packages%2Fweb3-eth-iban%2Fpackage.json)](https://www.npmjs.com/package/web3-eth-iban)             | [![License: LGPL v3](https://img.shields.io/badge/License-LGPL%20v3-blue.svg)](https://www.gnu.org/licenses/lgpl-3.0) | [![documentation](https://img.shields.io/badge/typedoc-blue)](https://docs.web3js.org/api/web3-eth-iban)       | Functionality for converting Ethereum addressed to IBAN addressed and vice versa                              |\n| [web3-eth-personal](https://github.com/ChainSafe/web3.js/tree/4.x/packages/web3-eth-personal)     | [![npm](https://img.shields.io/github/package-json/v/web3/web3.js/4.x?filename=packages%2Fweb3-eth-personal%2Fpackage.json)](https://www.npmjs.com/package/web3-eth-personal)     | [![License: LGPL v3](https://img.shields.io/badge/License-LGPL%20v3-blue.svg)](https://www.gnu.org/licenses/lgpl-3.0) | [![documentation](https://img.shields.io/badge/typedoc-blue)](https://docs.web3js.org/api/web3-eth-personal)   | Module to interact with the Ethereum blockchain accounts stored in the node                                   |\n| [web3-net](https://github.com/ChainSafe/web3.js/tree/4.x/packages/web3-net)                       | [![npm](https://img.shields.io/github/package-json/v/web3/web3.js/4.x?filename=packages%2Fweb3-net%2Fpackage.json)](https://www.npmjs.com/package/web3-net)                       | [![License: LGPL v3](https://img.shields.io/badge/License-LGPL%20v3-blue.svg)](https://www.gnu.org/licenses/lgpl-3.0) | [![documentation](https://img.shields.io/badge/typedoc-blue)](https://docs.web3js.org/api/web3-net)            | Functions to interact with an Ethereum node's network properties                                              |\n| [web3-providers-http](https://github.com/ChainSafe/web3.js/tree/4.x/packages/web3-providers-http) | [![npm](https://img.shields.io/github/package-json/v/web3/web3.js/4.x?filename=packages%2Fweb3-providers-http%2Fpackage.json)](https://www.npmjs.com/package/web3-providers-http) | [![License: LGPL v3](https://img.shields.io/badge/License-LGPL%20v3-blue.svg)](https://www.gnu.org/licenses/lgpl-3.0) | [![documentation](https://img.shields.io/badge/typedoc-blue)](https://docs.web3js.org/api/web3-providers-http) | Web3.js provider for the HTTP protocol                                                                        |\n| [web3-providers-ipc](https://github.com/ChainSafe/web3.js/tree/4.x/packages/web3-providers-ipc)   | [![npm](https://img.shields.io/github/package-json/v/web3/web3.js/4.x?filename=packages%2Fweb3-providers-ipc%2Fpackage.json)](https://www.npmjs.com/package/web3-providers-ipc)   | [![License: LGPL v3](https://img.shields.io/badge/License-LGPL%20v3-blue.svg)](https://www.gnu.org/licenses/lgpl-3.0) | [![documentation](https://img.shields.io/badge/typedoc-blue)](https://docs.web3js.org/api/web3-providers-ipc)  | Web3.js provider for IPC                                                                                      |\n```\n\n----------------------------------------\n\nTITLE: Installing web3-eth-accounts using NPM\nDESCRIPTION: Command to install the web3-eth-accounts package using NPM (Node Package Manager). This package is used for managing Ethereum accounts and signing transactions.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/packages/web3-eth-accounts/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install web3-eth-accounts\n```\n\n----------------------------------------\n\nTITLE: Installing Web3.js and Hardhat\nDESCRIPTION: Command to install Web3.js and Hardhat packages, which are required for deploying and interacting with the smart contract.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/05_smart_contracts/smart_contracts_guide.md#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nnpm i web3 hardhat\n```\n\n----------------------------------------\n\nTITLE: Installing web3-eth-contract with Yarn\nDESCRIPTION: Command to install the web3-eth-contract package using Yarn package manager.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/packages/web3-eth-contract/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add web3-eth-contract\n```\n\n----------------------------------------\n\nTITLE: Running Smart Contract Tests with Hardhat\nDESCRIPTION: Command to execute the contract tests using Hardhat test runner.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/08_hardhat_tutorial/index.md#2025-04-21_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nnpx hardhat test test/Lock.ts\n```\n\n----------------------------------------\n\nTITLE: Deploy Event Changes in Web3.js 1.x vs 4.x\nDESCRIPTION: Shows the change in deploy event payload structure between versions, where 4.x simplifies by directly providing transaction object.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/packages/web3-eth-contract/CHANGELOG.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nmyContract\n\t.deploy()\n\t.send()\n\t.on('send', payload => {\n\t\tconsole.log(payload);\n\t\t// {id: <1>, jsonrpc: '2.0', method: 'eth_sendTransaction', params: [txObject] }\n\t});\n```\n\nLANGUAGE: typescript\nCODE:\n```\nmyContract\n\t.deploy()\n\t.send()\n\t.on('send', txObject => {\n\t\tconsole.log(txObject);\n\t\t// {id: <>, gas: <>,...}\n\t});\n```\n\n----------------------------------------\n\nTITLE: Installing web3-eth-accounts using Yarn\nDESCRIPTION: Command to install the web3-eth-accounts package using Yarn package manager. This alternative to NPM can be used to add the package for Ethereum account management to your project.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/packages/web3-eth-accounts/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add web3-eth-accounts\n```\n\n----------------------------------------\n\nTITLE: Creating Project Directory and Initializing Node.js Project\nDESCRIPTION: Commands to create a new directory for the smart contract project and initialize it as a Node.js project using npm.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/05_smart_contracts/smart_contracts_guide.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmkdir smart-contract-tutorial\ncd smart-contract-tutorial\n```\n\n----------------------------------------\n\nTITLE: Implementing Programming Language Tabs in Docusaurus\nDESCRIPTION: HTML structure for creating programming language tabs in documentation that allow switching between JavaScript and TypeScript examples. Includes configuration for tab synchronization across the page and URL query string support.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/README.md#2025-04-21_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<Tabs groupId=\"prog-lang\" queryString>\n\n  <TabItem value=\"javascript\" label=\"JavaScript\"\n  \tattributes={{className: \"javascript-tab\"}}>\n\n```javascript\nconst { Web3 } = require('web3');\n// ...\n```\n\n  </TabItem>\n  \n  <TabItem value=\"typescript\" label=\"TypeScript\" default \n  \tattributes={{className: \"typescript-tab\"}}>\n\n```typescript\nimport { Web3 } from 'web3';\n// ...\n```\n\n  </TabItem>\n</Tabs>\n```\n\n----------------------------------------\n\nTITLE: Adding signMessageWithPrivateKey in web3-eth-accounts\nDESCRIPTION: New public function added to sign messages with a private key.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/CHANGELOG.md#2025-04-21_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nsignMessageWithPrivateKey\n```\n\n----------------------------------------\n\nTITLE: BigInt Polyfill Implementation\nDESCRIPTION: TypeScript code for implementing a BigInt polyfill in a shim.js file to resolve BigInt compatibility issues.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/19_resources_and_troubleshooting/index.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nif (typeof BigInt === 'undefined') {\n\tglobal.BigInt = require('big-integer');\n}\n```\n\n----------------------------------------\n\nTITLE: Installing web3-errors using NPM\nDESCRIPTION: Command to install the web3-errors package using NPM (Node Package Manager). This will add the package to your project's dependencies.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/packages/web3-errors/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install web3-errors\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry Example in Markdown\nDESCRIPTION: This snippet demonstrates the structure of a changelog entry, including various types of changes such as added features, changes, deprecations, removals, fixes, and security improvements.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/tools/web3-packagetemplate/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## [1.0.0]\n\n### Added\n\n- I've added feature XY (#1000)\n\n### Changed\n\n- I've cleaned up XY (#1000)\n\n### Deprecated\n\n- I've deprecated XY (#1000)\n\n### Removed\n\n- I've removed XY (#1000)\n\n### Fixed\n\n- I've fixed XY (#1000)\n\n### Security\n\n- I've improved the security in XY (#1000)\n```\n\n----------------------------------------\n\nTITLE: Installing Web3.js Package\nDESCRIPTION: Command to install the web3.js library using npm.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/10_web3_eth/eth.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm i web3\n```\n\n----------------------------------------\n\nTITLE: Example Changelog Entry Template in Markdown\nDESCRIPTION: Template showing the standard format for changelog entries including sections for Added, Changed, Deprecated, Removed, Fixed and Security updates.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/scripts/changelog/test/fixtures/mock_packages_directory/mock-package-3/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## [1.0.0]\n\n### Added\n\n- I've added feature XY (#1000)\n\n### Changed\n\n- I've cleaned up XY (#1000)\n\n### Deprecated\n\n- I've deprecated XY (#1000)\n\n### Removed\n\n- I've removed XY (#1000)\n\n### Fixed\n\n- I've fixed XY (#1000)\n\n### Security\n\n- I've improved the security in XY (#1000)\n```\n\n----------------------------------------\n\nTITLE: TypeScript Web3 Import Example\nDESCRIPTION: Example showing how to import Web3 in a TypeScript file using ES6 import syntax.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/README.md#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Web3 } from 'web3';\n// ...\n```\n\n----------------------------------------\n\nTITLE: Installing web3-utils using NPM\nDESCRIPTION: Command to install the web3-utils package using NPM package manager.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/packages/web3-utils/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install web3-utils\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry for Version 1.1.1-rc.1 in Markdown\nDESCRIPTION: This snippet shows the changelog entry for version 1.1.1-rc.1, which includes additions such as source files and a hybrid build of the library.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/tools/web3-packagetemplate/CHANGELOG.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## [1.1.1-rc.1]\n\n### Added\n\n-   Added source files (#5956)\n-   Added hybrid build (ESM and CJS) of library (#5904)\n```\n\n----------------------------------------\n\nTITLE: Example Changelog Entry Template\nDESCRIPTION: Template showing the standard format for changelog entries, including sections for Added, Changed, Deprecated, Removed, Fixed, and Security updates.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/packages/web3-providers-ws/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## [1.0.0]\n\n### Added\n\n- I've added feature XY (#1000)\n\n### Changed\n\n- I've cleaned up XY (#1000)\n\n### Deprecated\n\n- I've deprecated XY (#1000)\n\n### Removed\n\n- I've removed XY (#1000)\n\n### Fixed\n\n- I've fixed XY (#1000)\n\n### Security\n\n- I've improved the security in XY (#1000)\n```\n\n----------------------------------------\n\nTITLE: Installing web3-net using NPM\nDESCRIPTION: Command to install the web3-net package using NPM (Node Package Manager). This installs the package and its dependencies.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/packages/web3-net/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install web3-net\n```\n\n----------------------------------------\n\nTITLE: Unreleased Changes Section in Markdown\nDESCRIPTION: This snippet shows the section for unreleased changes in the changelog.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/tools/web3-packagetemplate/CHANGELOG.md#2025-04-21_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n## [Unreleased]\n```\n\n----------------------------------------\n\nTITLE: Installing web3-providers-http via NPM\nDESCRIPTION: Command to install the web3-providers-http package using NPM (Node Package Manager). This is one method to add the package to your project.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/packages/web3-providers-http/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install web3-providers-http\n```\n\n----------------------------------------\n\nTITLE: Starting Local Development Server with Yarn\nDESCRIPTION: Command to start a local development server that opens a browser window and reflects most changes live without requiring server restart.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn start\n```\n\n----------------------------------------\n\nTITLE: Installing web3-eth-ens using Yarn\nDESCRIPTION: Command to install the web3-eth-ens package using Yarn package manager. This adds the package to your project's dependencies.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/packages/web3-eth-ens/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add web3-eth-ens\n```\n\n----------------------------------------\n\nTITLE: Installing web3-providers-ipc using NPM\nDESCRIPTION: Command to install the web3-providers-ipc package using NPM (Node Package Manager). This installs the IPC provider for Web3.js.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/packages/web3-providers-ipc/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install web3-providers-ipc\n```\n\n----------------------------------------\n\nTITLE: Installing web3-net using Yarn\nDESCRIPTION: Command to install the web3-net package using Yarn package manager. This adds the package to your project dependencies.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/packages/web3-net/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add web3-net\n```\n\n----------------------------------------\n\nTITLE: Configuring sideEffects Property in package.json\nDESCRIPTION: Adds the sideEffects property to package.json and sets it to false to indicate that the code doesn't have side effects, which helps webpack optimize tree shaking.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/13_advanced/tree_shaking.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"sideEffects\": false\n```\n\n----------------------------------------\n\nTITLE: Example Changelog Entry Format\nDESCRIPTION: Template showing the standard format for changelog entries including Added, Changed, Deprecated, Removed, Fixed, and Security sections.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## [1.0.0]\n\n### Added\n\n- I've added feature XY (#1000)\n\n### Changed\n\n- I've cleaned up XY (#1000)\n\n### Deprecated\n\n- I've deprecated XY (#1000)\n\n### Removed\n\n- I've removed XY (#1000)\n\n### Fixed\n\n- I've fixed XY (#1000)\n\n### Security\n\n- I've improved the security in XY (#1000)\n```\n\n----------------------------------------\n\nTITLE: Documenting Changelog Entry Structure in Markdown\nDESCRIPTION: This code snippet provides an example structure for documenting changes in the changelog. It includes sections for Added, Changed, Deprecated, Removed, Fixed, and Security updates, along with instructions for referencing issue numbers.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/packages/web3-rpc-providers/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## [1.0.0]\n\n### Added\n\n- I've added feature XY (#1000)\n\n### Changed\n\n- I've cleaned up XY (#1000)\n\n### Deprecated\n\n- I've deprecated XY (#1000)\n\n### Removed\n\n- I've removed XY (#1000)\n\n### Fixed\n\n- I've fixed XY (#1000)\n\n### Security\n\n- I've improved the security in XY (#1000)\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Formatting for Subscription Results in TypeScript\nDESCRIPTION: Shows how to override the formatSubscriptionResult method to format the data received from the node before it is emitted.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/06_events_subscriptions/custom_subscriptions.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nprotected formatSubscriptionResult(data: string) {\n  const formattedData = format(data);\n  return formattedData;\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Node.js and npm Version\nDESCRIPTION: Commands to verify the installation of Node.js and npm, ensuring the environment is properly set up for the tutorial.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/07_dapps/metamask-vanilla.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$: node -v\n# your version may be different, but it's best to use the current stable version\nv18.16.1\n$: npm -v\n9.5.1\n```\n\n----------------------------------------\n\nTITLE: Installing web3-eth-contract with NPM\nDESCRIPTION: Command to install the web3-eth-contract package using NPM package manager.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/packages/web3-eth-contract/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install web3-eth-contract\n```\n\n----------------------------------------\n\nTITLE: Checking Node.js and npm versions\nDESCRIPTION: Verifies that Node.js and npm are installed on the system by checking their versions. This is a prerequisite check before starting the React project.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/07_dapps/metamask-react.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$: node -v\n# your version may be different, but it's best to use the current stable version\nv18.16.1\n$: npm -v\n9.5.1\n```\n\n----------------------------------------\n\nTITLE: Deploying Website with SSH\nDESCRIPTION: Command to deploy the website using SSH, which builds the website and pushes it to the gh-pages branch.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ USE_SSH=true yarn deploy\n```\n\n----------------------------------------\n\nTITLE: Installing web3-eth-ens using NPM\nDESCRIPTION: Command to install the web3-eth-ens package using NPM (Node Package Manager). This installs the package and its dependencies.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/packages/web3-eth-ens/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install web3-eth-ens\n```\n\n----------------------------------------\n\nTITLE: Release Candidate Changelog Entry in Markdown\nDESCRIPTION: Changelog entry for the 1.0.0.rc.0 release candidate version, documenting the RC release.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/packages/web3-account-abstraction/CHANGELOG.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## [1.0.0.rc.0]\n\n### Added\n\n-   RC release\n```\n\n----------------------------------------\n\nTITLE: Installing Viem package\nDESCRIPTION: Command to install Viem v2 package using npm.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/docs/docs/guides/18_migration_viem/index.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install viem@2\n```\n\n----------------------------------------\n\nTITLE: Installing web3-core with NPM\nDESCRIPTION: Command to install the web3-core package using NPM package manager.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/packages/web3-core/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install web3-core\n```\n\n----------------------------------------\n\nTITLE: Example Changelog Entry Format in Markdown\nDESCRIPTION: Template showing the structure of a changelog entry with all possible sections including Added, Changed, Deprecated, Removed, Fixed, and Security updates.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/scripts/changelog/test/fixtures/mock_packages_directory/mock-package-2/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## [1.0.0]\n\n### Added\n\n- I've added feature XY (#1000)\n\n### Changed\n\n- I've cleaned up XY (#1000)\n\n### Deprecated\n\n- I've deprecated XY (#1000)\n\n### Removed\n\n- I've removed XY (#1000)\n\n### Fixed\n\n- I've fixed XY (#1000)\n\n### Security\n\n- I've improved the security in XY (#1000)\n```\n\n----------------------------------------\n\nTITLE: Installing web3-packagetemplate using Yarn\nDESCRIPTION: Command to install the web3-packagetemplate package using Yarn package manager.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/tools/web3-packagetemplate/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add web3-packagetemplate\n```\n\n----------------------------------------\n\nTITLE: Installing web3-packagetemplate using NPM\nDESCRIPTION: Command to install the web3-packagetemplate package using Node Package Manager (NPM).\nSOURCE: https://github.com/web3/web3.js/blob/4.x/tools/web3-packagetemplate/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install web3-packagetemplate\n```\n\n----------------------------------------\n\nTITLE: Example Changelog Entry Format in Markdown\nDESCRIPTION: This snippet demonstrates the structure of a typical changelog entry, including sections for Added, Changed, Deprecated, Removed, Fixed, and Security updates. It serves as a template for future entries.\nSOURCE: https://github.com/web3/web3.js/blob/4.x/packages/web3-rpc-methods/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## [1.0.0]\n\n### Added\n\n- I've added feature XY (#1000)\n\n### Changed\n\n- I've cleaned up XY (#1000)\n\n### Deprecated\n\n- I've deprecated XY (#1000)\n\n### Removed\n\n- I've removed XY (#1000)\n\n### Fixed\n\n- I've fixed XY (#1000)\n\n### Security\n\n- I've improved the security in XY (#1000)\n```"
  }
]