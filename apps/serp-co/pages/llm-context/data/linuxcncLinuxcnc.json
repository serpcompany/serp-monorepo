[
  {
    "owner": "linuxcnc",
    "repo": "linuxcnc",
    "content": "TITLE: Safety Disclaimer for LinuxCNC Software\nDESCRIPTION: A formal disclaimer emphasizing that the authors accept no liability for harm resulting from the use of the software, warning against relying solely on software for safety, and advising on proper safety measures for machinery.\nSOURCE: https://github.com/linuxcnc/linuxcnc/blob/master/README.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n  \nＴｈｅ ａｕｔｈｏｒｓ ｏｆ ｔｈｉｓ ｓｏｆｔｗａｒｅ ａｃｃｅｐｔ\nａｂｓｏｌｕｔｅｌｙ ｎｏ ｌｉａｂｉｌｉｔｙ ｆｏｒ ａｎｙ\nｈａｒｍ　ｏｒ ｌｏｓｓ ｒｅｓｕｌｔｉｎｇ ｆｒｏｍ ｉｔｓ ｕｓｅ．\n\nＩｔ ｉｓ ＥＸＴＲＥＭＥＬＹ ｕｎｗｉｓｅ ｔｏ　ｒｅｌｙ\nｏｎ ｓｏｆｔｗａｒｅ ａｌｏｎｅ ｆｏｒ ｓａｆｅｔｙ．\n\nAny machinery capable of harming persons must have\nprovisions for completely removing power from all\nmotors, etc., before persons enter any danger area.\n\nAll machinery must be designed to comply with local \nand national safety codes, and the authors of this \nsoftware cannot and do not, take any responsibility \nfor such compliance.\n  \n```\n\n----------------------------------------\n\nTITLE: Configuring HAL File for Moveoff Component in LinuxCNC\nDESCRIPTION: This snippet shows the HAL file configuration for installing and connecting the Moveoff component in LinuxCNC. It uses a library file to set up the Moveoff component.\nSOURCE: https://github.com/linuxcnc/linuxcnc/blob/master/configs/sim/axis/moveoff/2_onpause_external.txt#2025-04-22_snippet_0\n\nLANGUAGE: hal\nCODE:\n```\n[HAL]HALFILE = LIB:hookup_moveoff.tcl\n```\n\n----------------------------------------\n\nTITLE: External Offset HAL Pin Interface\nDESCRIPTION: Defines the HAL pin interface for controlling external offsets in LinuxCNC. The interface uses enable, clear, scale, and count pins per axis, similar to wheel jogging. The final offset is calculated by multiplying counts by scale.\nSOURCE: https://github.com/linuxcnc/linuxcnc/blob/master/configs/sim/axis/external_offsets/eoffsets.txt#2025-04-22_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\naxis.L.eoffset-enable (bit)\naxis.L.eoffset-clear (bit)\naxis.L.eoffset-scale  (float)\naxis.L.eoffset-counts (s32)\n```\n\n----------------------------------------\n\nTITLE: Accessing Manual Pages for Moveoff Component and GUI in Shell\nDESCRIPTION: These shell commands utilize the 'man' utility to display the manual pages for the 'moveoff' LinuxCNC component and the related 'moveoff_gui' sample GUI. Running these commands in a terminal provides detailed documentation on the functionality, usage, and options for each.\nSOURCE: https://github.com/linuxcnc/linuxcnc/blob/master/configs/sim/axis/moveoff/3_always_local.txt#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nman moveoff  ------ moveoff component\nman moveoff_gui --- moveoff sample gui\n```\n\n----------------------------------------\n\nTITLE: Configuring Resource Paths in LinuxCNC INI\nDESCRIPTION: Example INI settings within the [RS274NGC] section, demonstrating how to define paths for resources like subroutines or user M-codes. It uses the relative path `../../nc_files` to refer to shared resource directories. This convention, combined with appropriate symlinks in the configuration's parent directory (e.g., `root/configs/sim/nc_files --> ../../nc_files`), ensures the path works correctly in both run-in-place (RIP) builds and user-copied configurations without modification.\nSOURCE: https://github.com/linuxcnc/linuxcnc/blob/master/configs/maintainer.txt#2025-04-22_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[RS274NGC]SUBROUTINE_PATH\n[RS274NGC]USER_M_PATH\n```\n\n----------------------------------------\n\nTITLE: Viewing xhc-whb04b-6 Help and Usage Synopsis - Shell Command - Bash\nDESCRIPTION: Executes the xhc-whb04b-6 binary with the -h flag to print the synopsis and list available command-line options. Useful for quickly reviewing supported flags and modes. Dependency: Built binaries and required dynamic libraries. Outputs usage information for reference; returns exit code 0 unless the binary is missing. Input: None, Output: Usage and help text to stdout.\nSOURCE: https://github.com/linuxcnc/linuxcnc/blob/master/src/hal/user_comps/xhc-whb04b-6/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ ./xhc-whb04b-6 -h\nxhc-whb04b-6 version 0.1 Sep 16 2017 14:41:32\n\nSYNOPSIS\n    xhc-whb04b-6 [-h] | [-H] [OPTIONS]\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Macros in LinuxCNC INI File\nDESCRIPTION: This snippet shows how to define macros in the LinuxCNC INI file. It demonstrates adding a [MACROS] section and defining individual macros, including ones with parameters.\nSOURCE: https://github.com/linuxcnc/linuxcnc/blob/master/configs/sim/gmoccapy/macros/macro_Instructions.txt#2025-04-22_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[MACROS]\nMACRO = jog_around\nMACRO = increment xinc yinc\n```\n\n----------------------------------------\n\nTITLE: Invoking xhc-whb04b-6 with HAL Pin Listing - Shell Command - Bash\nDESCRIPTION: Demonstrates listing configured HAL pins and related messages from the xhc-whb04b-6 component by invoking it with the -p option in a Unix shell. Dependency: The xhc-whb04b-6 binary must be built and present in PATH. The command shows how to query HAL pin mappings for diagnostic or integration purposes. Input: None, Output: HAL pin information to stdout.\nSOURCE: https://github.com/linuxcnc/linuxcnc/blob/master/src/hal/user_comps/xhc-whb04b-6/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nxhc-whb04b-6 -p\n```\n\n----------------------------------------\n\nTITLE: Configuring HALFILE for Moveoff Component in LinuxCNC HAL\nDESCRIPTION: This HAL configuration line, typically found in an INI file, specifies the TCL script (`hookup_moveoff.tcl`) located in the standard library path (`LIB:`) to be executed as the HAL file. This script is responsible for setting up the necessary connections for the 'moveoff' component within the LinuxCNC Hardware Abstraction Layer (HAL).\nSOURCE: https://github.com/linuxcnc/linuxcnc/blob/master/configs/sim/axis/moveoff/3_always_local.txt#2025-04-22_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[HAL]HALFILE = LIB:hookup_moveoff.tcl\n```\n\n----------------------------------------\n\nTITLE: Displaying HAL Histogram Command-Line Help - Bash\nDESCRIPTION: Prints usage information for the 'hal-histogram' utility in LinuxCNC, typically used to analyze real-time signal latencies or values for HAL (Hardware Abstraction Layer) pins. No external dependencies other than a working 'hal-histogram' installation are required. The command prints a help summary, including supported arguments, usage examples, and options.\nSOURCE: https://github.com/linuxcnc/linuxcnc/blob/master/configs/sim/axis/histogram_demo.txt#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ hal-histogram --help\n```\n\n----------------------------------------\n\nTITLE: Example Subroutine Path Configuration in LinuxCNC INI\nDESCRIPTION: Specific example INI setting within the [RS274NGC] section for defining the `SUBROUTINE_PATH`. It demonstrates referencing shared libraries (`ngcgui_lib`, `utilitysubs`) using the recommended `../../nc_files` relative path convention, which relies on symlinks for run-in-place builds and resolves correctly in user-copied configurations.\nSOURCE: https://github.com/linuxcnc/linuxcnc/blob/master/configs/maintainer.txt#2025-04-22_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[RS274NGC]SUBROUTINE_PATH = ../../nc_files/ngcgui_lib:../../nc_files/ngcgui_lib/utilitysubs\n```\n\n----------------------------------------\n\nTITLE: Modifying Direct Script Invocation in Python\nDESCRIPTION: This snippet demonstrates wrapping the main function call within an 'if __name__ == '__main__':' block. This standard Python practice ensures that the main logic is executed only when the script is run directly, preventing it from running automatically when imported as a module.\nSOURCE: https://github.com/linuxcnc/linuxcnc/blob/master/lib/python/qtvcp/lib/qt_vismach/README.txt#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# change:\nmain(model, tooltip, work, size=1500,lat=-65, lon=45)\n```\n\nLANGUAGE: python\nCODE:\n```\n# to:\nif __name__ == '__main__':\n    main(model, tooltip, work, size=1500,lat=-65, lon=45)\n```\n\n----------------------------------------\n\nTITLE: Moving Extra Joints using M144 MDI Command in LinuxCNC\nDESCRIPTION: Demonstrates using the M144 MDI command to move specific extra joints (identified by P parameter) to a target position (specified by Q parameter) in a LinuxCNC simulation. Requires the machine to be homed and in MDI mode. P4 targets joint 4, P5 targets joint 5.\nSOURCE: https://github.com/linuxcnc/linuxcnc/blob/master/configs/sim/axis/extrajoints/2extrajoints.txt#2025-04-22_snippet_0\n\nLANGUAGE: gcode\nCODE:\n```\nM144 P4 Q1.23 move joint.4 to 1.23\nM144 P4 Q4.56 move joint.4 to 4.56\nM144 P5 Q3.21 move joint.5 to 3.21\nM144 P5 Q2.22 move joint.5 to 2.22\n```\n\n----------------------------------------\n\nTITLE: Configuring NGCGUI Subfiles in INI File\nDESCRIPTION: This snippet demonstrates how to configure NGCGUI subfiles in the ini file. It shows how to mix .ngc and .gcmc files in the configuration.\nSOURCE: https://github.com/linuxcnc/linuxcnc/blob/master/configs/sim/gmoccapy/gmoccapy_pyngcgui_gcmc.txt#2025-04-22_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\nNGCGUI_SUBFILE    = drill.gcmc\nNGCGUI_SUBFILE    = wheels.gcmc\nNGCGUI_SUBFILE    = simp.ngc\n```\n\n----------------------------------------\n\nTITLE: Updating Vismach Import Statement to QtVismach in Python\nDESCRIPTION: This snippet shows how to change the import statement when migrating from the 'vismach' library to the 'qtvcp.lib.qt_vismach.qt_vismach' library. This is a necessary step for using the Qt-based visualization components.\nSOURCE: https://github.com/linuxcnc/linuxcnc/blob/master/lib/python/qtvcp/lib/qt_vismach/README.txt#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# change:\nfrom vismach import *\n```\n\nLANGUAGE: python\nCODE:\n```\n# to:\nfrom qtvcp.lib.qt_vismach.qt_vismach import *\n```\n\n----------------------------------------\n\nTITLE: Mapping Spindle Control Signals with HALUI in HAL\nDESCRIPTION: The snippet connects spindle control signals like 'start', 'stop', 'forward', and 'reverse' from a pendant to HALUI signals, allowing spindle operation through the pendant buttons. Dependencies include HALUI, part of the LinuxCNC system.\nSOURCE: https://github.com/linuxcnc/linuxcnc/blob/master/src/hal/user_comps/xhc-whb04b-6/example-configuration.md#2025-04-22_snippet_2\n\nLANGUAGE: HAL\nCODE:\n```\n# spindle related signals\nnet pdnt.spindle.is-on                    whb.halui.spindle.is-on               spindle.0.on\nnet pdnt.spindle.start                    whb.halui.spindle.start               halui.spindle.0.start\nnet pdnt.spindle.stop                     whb.halui.spindle.stop                halui.spindle.0.stop\nnet pdnt.spindle.forward                  whb.halui.spindle.forward             halui.spindle.0.forward\nnet pdnt.spindle.reverse                  whb.halui.spindle.reverse             halui.spindle.0.reverse\nnet pdnt.spindle.increase                 whb.halui.spindle.increase            halui.spindle.0.increase         # reserved whb.button.macro-3\nnet pdnt.spindle.decrease                 whb.halui.spindle.decrease            halui.spindle.0.decrease         # reserved whb.button.macro-4\nnet pdnt.spindle-speed-abs                whb.halui.spindle-speed-cmd           spindle.0.speed-out-abs          # speed cmd from motion in rpm absolute\n\n```\n\n----------------------------------------\n\nTITLE: Configuring PUMA Robot Kinematics in LinuxCNC - INI File\nDESCRIPTION: Defines machine and motion parameters for a PUMA robotic arm using the 'pumakins' module in LinuxCNC. This snippet specifies coordinate offsets, motion velocity, acceleration, and position limits, as well as a startup G-code file to set up the machine for cube tracing. Intended for users configuring or simulating a PUMA robot with LinuxCNC; dependencies include the puma-specific kinematics module, a compatible LinuxCNC installation, and referenced G-code files. Parameters such as velocity and position limits are set artificially high for convenience and not indicative of real hardware constraints.\nSOURCE: https://github.com/linuxcnc/linuxcnc/blob/master/configs/sim/axis/vismach/puma/puma_cube.txt#2025-04-22_snippet_0\n\nLANGUAGE: INI\nCODE:\n```\npuma_cube.ini -- Config file for a PUMA type robot using the puma-specific kinematics module pumakins.  This configuration provides a startup gcode file ([DISPLAY]OPEN)FILE) that sets usable coordinate offsets to trace a cube outline.  Velocity, acceleration and positional limits are set large for convenience and are not representative of a real machine.\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Axis Mapping for Identity Kinematics in INI (INI)\nDESCRIPTION: Specifies the configuration line within a LinuxCNC INI file to load the `genser-switchkins` module and set a custom axis-to-joint mapping for identity kinematics using the `coordinates` parameter. In this example, the mapping becomes a->joint0, b->joint1, c->joint2, x->joint3, y->joint4, z->joint5.\nSOURCE: https://github.com/linuxcnc/linuxcnc/blob/master/configs/sim/axis/vismach/puma/puma560.txt#2025-04-22_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\nKINEMATICS=genser-switchkins coordinates=abcxyz\n```\n\n----------------------------------------\n\nTITLE: Configuring HAL Net for Kinematics Switching\nDESCRIPTION: This HAL configuration snippet demonstrates how to connect an analog output pin to switch kinematic types in a LinuxCNC setup. It is essential for specifying the kinematic type via motion controls and utilizes a HAL net to bind the pin connections. There are no additional dependencies, as long as the LinuxCNC environment is set up with the specified pin addresses.\nSOURCE: https://github.com/linuxcnc/linuxcnc/blob/master/configs/sim/axis/vismach/5axis/table-rotary-tilting/xyzac-trt.txt#2025-04-22_snippet_0\n\nLANGUAGE: HAL\nCODE:\n```\nnet :kinstype-select <= motion.analog-out-03\nnet :kinstype-select => motion.switchkins-type\n```\n\n----------------------------------------\n\nTITLE: Defining M Codes for Kinematics Switching in LinuxCNC\nDESCRIPTION: This snippet defines the remapped user M codes used to switch between different kinematics modes in LinuxCNC. It includes codes for Identity, XYZBC (TCP), and custom kinematics.\nSOURCE: https://github.com/linuxcnc/linuxcnc/blob/master/configs/sim/axis/vismach/5axis/table-rotary-tilting/xyzbc-trt.txt#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nM429: Identity Kinematics\nM428: XYZBC (TCP)\nM430: userk Kinematics\n```\n\n----------------------------------------\n\nTITLE: Executing G-code Commands with Custom Identity Kinematics Mapping (G-code)\nDESCRIPTION: Demonstrates G-code commands for moving specific joints when the `puma560-switchkins` configuration is set to identity kinematics with a custom axis-to-joint mapping defined by `coordinates=abcxyz` (a->joint0, b->joint1, c->joint2, x->joint3, y->joint4, z->joint5). `g0x10` commands a rapid move for joint3, and `g0c10` commands a rapid move for joint2. This requires identity kinematics to be active and the specific INI configuration shown previously.\nSOURCE: https://github.com/linuxcnc/linuxcnc/blob/master/configs/sim/axis/vismach/puma/puma560.txt#2025-04-22_snippet_2\n\nLANGUAGE: gcode\nCODE:\n```\n'g0x10' moves joint3\n```\n\nLANGUAGE: gcode\nCODE:\n```\n'g0c10' moves joint2\n```\n\n----------------------------------------\n\nTITLE: LinuxCNC JWP_Z Operation Sequence\nDESCRIPTION: Step-by-step operational sequence for machine control including E-stop management, homing, program execution, and Z-offset adjustments. Details hotkey mappings for each operation.\nSOURCE: https://github.com/linuxcnc/linuxcnc/blob/master/configs/sim/axis/external_offsets/jwp_z.txt#2025-04-22_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n1) Estop OFF       (F1)\n2) Machine ON      (F2)\n3) HOME All        (Ctrl-Home)\n4) Run program     (R)\n5) initial pause:\n   adjust z offset (+Incr/-Decr)\n6) Resume          (S)\n7) Pause           (P)\n   adjust z offset (+Incr/-Decr)\n8) Resume          (R)\n9) Final pause\n   return offset to zero (+Incr/-Decr)\n   or Clear\n```\n\n----------------------------------------\n\nTITLE: Defining LinuxCNC HAL Component Interaction with PlantUML\nDESCRIPTION: This PlantUML code defines a component diagram showing how various HAL components (Component1, Component2, ComponentN) and a dedicated component for the WHB04B-6 device (WhbComponent) interact with shared memory (SHM) via input and output interfaces. The WHB04B-6 device communicates with its dedicated component via USB. This diagram is intended to visualize the HAL architecture in LinuxCNC.\nSOURCE: https://github.com/linuxcnc/linuxcnc/blob/master/src/hal/user_comps/xhc-whb04b-6/components-diagram-hal-mode.txt#2025-04-22_snippet_0\n\nLANGUAGE: plantuml\nCODE:\n```\n@startuml\nagent WHB04B_6\n\nframe HAL_Components {\n component ComponentN\n component Component2\n component Component1\n component WhbComponent\n\n cloud SHM {\n   interface inputs\n   interface outputs\n }\n\n WhbComponent <-- inputs : r\n WhbComponent --> outputs : w\n\n ComponentN <--> SHM : r/w\n Component2 <--> SHM : r/w\n Component1 <--> SHM : r/w\n WHB04B_6 <-->WhbComponent: USB i/o\n}\n\ncaption Fig1: Components diagram in HAL mode usecase.\n\n@enduml\n```\n\n----------------------------------------\n\nTITLE: Mapping Relative Axis Position with HALUI in HAL\nDESCRIPTION: This snippet maps relative axis position data from pendant controls to HALUI signals for X, Y, and Z axes. These mappings facilitate precise adjustments relative to a predefined point in CNC operations.\nSOURCE: https://github.com/linuxcnc/linuxcnc/blob/master/src/hal/user_comps/xhc-whb04b-6/example-configuration.md#2025-04-22_snippet_6\n\nLANGUAGE: HAL\nCODE:\n```\n# axis position related signals relative\nnet pdnt.axis.x.pos-relative              halui.axis.x.pos-relative             whb.halui.axis.x.pos-relative\nnet pdnt.axis.y.pos-relative              whb.halui.axis.y.pos-relative         whb.halui.axis.y.pos-relative\nnet pdnt.axis.z.pos-relative              whb.halui.axis.z.pos-relative         whb.halui.axis.z.pos-relative\n\n```\n\n----------------------------------------\n\nTITLE: Defining Mesa 7i93 Board Metadata in Python\nDESCRIPTION: This Python dictionary entry adds essential metadata for the Mesa 7i93 board to the `MESA_BOARD_META` dictionary in `pncconf`'s `private_data.py`. It specifies the required HAL driver ('hm2_eth'), the number of I/O pins per physical connector (24), and the total number of connectors (2) on the board. This information complements the firmware-specific data for `pncconf`.\nSOURCE: https://github.com/linuxcnc/linuxcnc/blob/master/src/emc/usr_intf/pncconf/ADDING_A_MESA_CARD.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n        '7i93':{'DRIVER':'hm2_eth','PINS_PER_CONNECTOR':24,'TOTAL_CONNECTORS':2},\n\n```\n\n----------------------------------------\n\nTITLE: Switching Kinematics in LinuxCNC Millturn\nDESCRIPTION: Commands M428 and M429 are used to switch between mill and turn kinematics. These commands set the motion.switchkins-type pin, force synchronization, and adjust softlimits based on values in millturn.ini.\nSOURCE: https://github.com/linuxcnc/linuxcnc/blob/master/configs/sim/axis/vismach/millturn/millturn.txt#2025-04-22_snippet_0\n\nLANGUAGE: gcode\nCODE:\n```\nM428\nM429\n```\n\n----------------------------------------\n\nTITLE: Executing MDI Commands via HAL Pins\nDESCRIPTION: This snippet demonstrates how MDI commands are executed using HALUI's MDI command pins. It requires HALUI configuration in ini files for defining specific MDI commands through the entry setup, facilitating direct command execution to the CNC interface.\nSOURCE: https://github.com/linuxcnc/linuxcnc/blob/master/configs/sim/axis/xhc-hb04/xhc-hb04-layout1.txt#2025-04-22_snippet_1\n\nLANGUAGE: Configuration\nCODE:\n```\n[HALUI]MDI_COMMAND = mdi_command\n```\n\n----------------------------------------\n\nTITLE: Mill Mode Axis Assignments in LinuxCNC Millturn\nDESCRIPTION: Default axis assignments for mill mode in LinuxCNC millturn configuration. Shows how G-code commands map to specific joints.\nSOURCE: https://github.com/linuxcnc/linuxcnc/blob/master/configs/sim/axis/vismach/millturn/millturn.txt#2025-04-22_snippet_1\n\nLANGUAGE: gcode\nCODE:\n```\ng0x10\ng0z10\n```\n\n----------------------------------------\n\nTITLE: Defining Mesa 7i93 Card Firmware Configuration in Python\nDESCRIPTION: This Python list defines the specific configuration for a Mesa 7i93 card using the SVST4_4d firmware within the `MESA_INTERNAL_FIRMWAREDATA` list in `pncconf`'s `private_data.py`. It specifies board/firmware details, driver, maximum counts for encoders, PWM generators, step generators, GPIOs, pin assignments for each function according to firmware layout, and connector mapping. This structure is crucial for `pncconf` to generate correct LinuxCNC HAL configurations.\nSOURCE: https://github.com/linuxcnc/linuxcnc/blob/master/src/emc/usr_intf/pncconf/ADDING_A_MESA_CARD.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n[\"7i93-Internal Data\", \"7i93\", \"SVST4_4d\", \"7i93\", \"hm2_eth\",\n        4,3, 0,0, 4,3, 0,0, 4,2, 0,0, [],0,0,0,0,0,0,0, 1, 48, 33, 100, [2,1],\n      # TAB 2\n      [S.ENCB,1],[S.ENCA,1],[S.ENCB,0],[S.ENCA,0],[S.ENCI,1],[S.ENCI,0],[S.PWMP,1],[S.PWMP,0],[S.PWMD,1],[S.PWMD,0],[S.PWME,1],[S.PWME,0],\n      [S.ENCB,3],[S.ENCA,3],[S.ENCB,2],[S.ENCA,2],[S.ENCI,3],[S.ENCI,2],[S.PWMP,3],[S.PWMP,2],[S.PWMD,3],[S.PWMD,2],[S.PWME,3],[S.PWME,2],\n      # TAB 1\n      [S.STEPA,0],[S.STEPB,0],[S.GPIOI,0],[S.GPIOI,0],[S.GPIOI,0],[S.GPIOI,0],[S.STEPA,1],[S.STEPB,1],[S.GPIOI,0],[S.GPIOI,0],[S.GPIOI,0],[S.GPIOI,0],\n      [S.STEPA,2],[S.STEPB,2],[S.GPIOI,0],[S.GPIOI,0],[S.GPIOI,0],[S.GPIOI,0],[S.STEPA,3],[S.STEPB,3],[S.GPIOI,0],[S.GPIOI,0],[S.GPIOI,0],[S.GPIOI,0],]\n```\n\n----------------------------------------\n\nTITLE: Turn Mode Axis Assignments in LinuxCNC Millturn\nDESCRIPTION: Axis assignments for turn mode in LinuxCNC millturn configuration. Demonstrates how G-code commands map to different joints compared to mill mode.\nSOURCE: https://github.com/linuxcnc/linuxcnc/blob/master/configs/sim/axis/vismach/millturn/millturn.txt#2025-04-22_snippet_2\n\nLANGUAGE: gcode\nCODE:\n```\ng0x10\ng0z10\n```\n\n----------------------------------------\n\nTITLE: Configuring HAL Net for Kinematics Selection in LinuxCNC\nDESCRIPTION: This snippet demonstrates how to connect the analog out pin to the switchkins-type input using a HAL net. It uses an example with N=3 to illustrate the configuration.\nSOURCE: https://github.com/linuxcnc/linuxcnc/blob/master/configs/sim/axis/vismach/5axis/table-rotary-tilting/xyzbc-trt.txt#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nnet :kinstype-select <= motion.analog-out-03\nnet :kinstype-select => motion.switchkins-type\n```\n\n----------------------------------------\n\nTITLE: Running XHC-WHB04B-6 HAL Component in halrun Mode\nDESCRIPTION: This snippet demonstrates initializing and using the XHC-WHB04B-6 pendant controller in HAL mode for LinuxCNC. It shows the command to load the user component, the initialization process with configuration parameters, USB device detection, and example input processing from the pendant. The session is terminated with Ctrl+C.\nSOURCE: https://github.com/linuxcnc/linuxcnc/blob/master/src/hal/user_comps/xhc-whb04b-6/README.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ halrun\nmsgd:0 stopped\nrtapi:0 stopped\nhalcmd: loadusr ../bin/xhc-whb04b-6 -Hup\nhalcmd: init  setting machine configuration to scale=80 max_velocity=800\nhal   initialize HAL component in HAL mode xhc-whb04b-6 ... ok\nhal   initialize shared HAL memory for component id  80 ... ok\nhal   bit   out xhc-whb04b-6.out.button.reset\n[...] //! < skipped several lines\ninit  usb context ... ok\ninit  not waiting for device XHC-WHB04B-6 vendorId=0x10ce productId=0xeb93, will continue in 0s .... ok\ninit  XHC-WHB04B-6 device found\ninit  detaching active kernel driver ... already detached\ninit  claiming interface ... ok\ninit  enabling reception ... ok\nin    0x04 47 03 00 10 12 00 45 delta 16 => | 04 | 47 |     start-pause |                 |     1( 30%) |     Y(    ) |   0 | 45\nhal   start/stop enabled (pin # 4)\nhal   OFF no axis active\nhal   Y axis active\nhal   step mode is continuous\nhal   step size 12\nin    0x04 cb 00 00 10 12 00 ca delta 16 => | 04 | cb |                 |                 |     1( 30%) |     Y(    ) |   0 | ca\nhal   start/stop disabled (pin # 4)\n^Ctermination requested upon signal number 2 ...\nconnection lost, cleaning up\n\nhalcmd:\n```\n\n----------------------------------------\n\nTITLE: Mapping Pendant Mode and Button Controls with HALUI in HAL\nDESCRIPTION: This code snippet maps various modes and buttons on a pendant device to HALUI signals. It enables control over feed modes and button actions such as start, stop, and spindle adjustments without affecting the connected machine’s internal logic. This configuration relies on HAL (Hardware Abstraction Layer) within the LinuxCNC framework.\nSOURCE: https://github.com/linuxcnc/linuxcnc/blob/master/src/hal/user_comps/xhc-whb04b-6/example-configuration.md#2025-04-22_snippet_1\n\nLANGUAGE: HAL\nCODE:\n```\n# unused, just exposes pendant internal status or as basic button\n#net pdnt.mode-lead                        whb.halui.feed.selected-lead\n#net pdnt.mode-mpg-feed                    whb.halui.feed.selected-mpg-feed\n#net pdnt.mode-continuous                  whb.halui.feed.selected-continuous\n#net pdnt.mode-step                        whb.halui.feed.selected-step\n\n#net pdnt.button.mode-mpg                  whb.button.mode-continuous\n#net pdnt.button.mode-step                 whb.button.mode-step\n#net pdnt.button.fn                        whb.button.fn\n#net pdnt.button.reset                     whb.button.reset\n#net pdnt.button.stop                      whb.button.stop\n#net pdnt.button.start-pause               whb.button.start-pause\n#net pdnt.button.s-on-off                  whb.button.s-on-off\n#net pdnt.button.spindle-plus              whb.button.spindle-plus\n#net pdnt.button.spindle-minus             whb.button.spindle-minus\n#net pdnt.button.feed-plus                 whb.button.feed-plus\n#net pdnt.button.feed-minus                whb.button.feed-minus\n\n```\n\n----------------------------------------\n\nTITLE: Loading the hal_pi_gpio Module with Direction and Exclude Masks - LinuxCNC HAL - Bash\nDESCRIPTION: This snippet demonstrates how to load the 'hal_pi_gpio' kernel module with specific direction (dir) and exclusion (exclude) masks on a Raspberry Pi system using the LinuxCNC 'loadrt' command. The 'dir' parameter is a bitmask specifying which pins are set as outputs, while 'exclude' disables certain GPIO pins from use by the module, allowing them to be left for their default hardware purposes (e.g., SPI, UART). Both parameters accept decimal or hexadecimal values. This approach requires LinuxCNC with HAL, compatible ARM hardware, and appropriate permissions to load realtime modules. Inputs are hexadecimal or decimal bitmask integers; output is a loaded kernel module with controlled GPIO exposure. Only works on compatible Raspberry Pi-based systems running a suitable LinuxCNC environment.\nSOURCE: https://github.com/linuxcnc/linuxcnc/blob/master/docs/src/drivers/hal_pi_gpio.txt#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nloadrt hal_pi_gpio dir=0x13407 exclude=0x1F64BF8\n```\n\n----------------------------------------\n\nTITLE: Mapping Feed Override and Velocity Controls with HALUI in HAL\nDESCRIPTION: This code establishes mappings for handling feed override and maximum velocity controls through a pendant, allowing for real-time adjustments during CNC machine operations. It integrates with HALUI for direct hardware interaction.\nSOURCE: https://github.com/linuxcnc/linuxcnc/blob/master/src/hal/user_comps/xhc-whb04b-6/example-configuration.md#2025-04-22_snippet_4\n\nLANGUAGE: HAL\nCODE:\n```\n# GUI feed rate related signals can be used when program is running moving GUI slider\nnet pdnt.feed-override.scale              whb.halui.feed-override.scale         halui.feed-override.scale        # needed for both FeedOverride+/- and rotary knob button\nnet pdnt.max-velocity.value               whb.halui.max-velocity.value          halui.max-velocity.value         # needed for Mpg mode : button feed position% * max-velocity = Mpg feedrate\n\n# take feed override min/max values from/to the GUI\nnet pdnt.feed-override.value              halui.feed-override.value             whb.halui.feed-override.value    # GUI feed rate related signals\nnet pdnt.feed-override.increase           whb.halui.feed-override.increase      halui.feed-override.increase\nnet pdnt.feed-override.decrease           whb.halui.feed-override.decrease      halui.feed-override.decrease\n\n```\n\n----------------------------------------\n\nTITLE: LinuxCNC External Offset Configuration Steps\nDESCRIPTION: Step-by-step operational procedure for using the offset configuration, including estop management, machine startup, homing, and parameter adjustment for offset control. Parameters include start angle, frequency multiplier, amplitude, and function type selection for different offset patterns.\nSOURCE: https://github.com/linuxcnc/linuxcnc/blob/master/configs/sim/axis/external_offsets/opa.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n1) Estop OFF  (F1)\n2) Machine ON (F2)\n3) HOME All   (Ctrl-Home)\n4) Run        (R)\n5) Enable/Disable offsets using pyvcp\n   panel On/Off buttons\n6) Select parameters:\n     Astart ----- starting angle\n     fmult ------ frequency multiplier\n     rfraction -- amplitude (radius fraction)\n     func ------- function\n                  0  polygon (inside)\n                  1  polygon (outside)\n                  2  sine wave\n                  3  square wave\n```\n\n----------------------------------------\n\nTITLE: Executing G-code Commands in Default Identity Kinematics Mode (G-code)\nDESCRIPTION: Demonstrates G-code commands for moving specific joints when the `puma560-switchkins` configuration is set to identity kinematics with the default axis-to-joint mapping (x->joint0, y->joint1, z->joint2, a->joint3, b->joint4, c->joint5). `g0x10` commands a rapid move for joint0, and `g0c10` commands a rapid move for joint5. This requires identity kinematics to be active, typically enabled via an M-code like M429.\nSOURCE: https://github.com/linuxcnc/linuxcnc/blob/master/configs/sim/axis/vismach/puma/puma560.txt#2025-04-22_snippet_0\n\nLANGUAGE: gcode\nCODE:\n```\n'g0x10' moves joint0\n```\n\nLANGUAGE: gcode\nCODE:\n```\n'g0c10' moves joint5\n```\n\n----------------------------------------\n\nTITLE: Defining Button Behavior for XHC-HB04\nDESCRIPTION: This segment shows how to connect the Start/Pause and STEP buttons to standard behaviors using HAL configuration. Dependencies include a correctly configured LinuxCNC environment with necessary HAL components. It specifies parameters for button actions leading to standard machine control outputs without inputs, mainly altering machine state.\nSOURCE: https://github.com/linuxcnc/linuxcnc/blob/master/configs/sim/axis/xhc-hb04/xhc-hb04-layout1.txt#2025-04-22_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n[XHC_HB04_BUTTON]start-pause = std_start_pause\n```\n\nLANGUAGE: Shell\nCODE:\n```\n[XHC_HB04_BUTTON]step = xhc-hb04.stepsize-up\n```\n\n----------------------------------------\n\nTITLE: Configuring Start/Pause Button in XHC-HB04 Layout2\nDESCRIPTION: This snippet shows how to connect the Start/Pause button for standard behavior in the XHC-HB04 pendant configuration.\nSOURCE: https://github.com/linuxcnc/linuxcnc/blob/master/configs/sim/axis/xhc-hb04/xhc-hb04-layout2_mm.txt#2025-04-22_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[XHC_HB04_BUTTON]start-pause = std_start_pause\n```\n\n----------------------------------------\n\nTITLE: Enabling Counter Mode for Encoder\nDESCRIPTION: This snippet enables counter mode for an encoder in a custom HAL file. Required when using a single input and index spindle encoder. Dependencies include specific MESA board and encoder configurations. The command adjusts encoder settings for the specified MESA board.\nSOURCE: https://github.com/linuxcnc/linuxcnc/blob/master/src/emc/usr_intf/pncconf/pncconf-help/help-mesa.txt#2025-04-22_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\nsetp hm2_7i43.0.encoder.00.counter-mode 1\n```\n\n----------------------------------------\n\nTITLE: Mapping Spindle Speed Override Controls with HALUI in HAL\nDESCRIPTION: This snippet outlines how a pendant's spindle speed override buttons connect to HALUI signals to adjust spindle speed during CNC operations. It highlights the connections required for increasing and decreasing override values.\nSOURCE: https://github.com/linuxcnc/linuxcnc/blob/master/src/hal/user_comps/xhc-whb04b-6/example-configuration.md#2025-04-22_snippet_3\n\nLANGUAGE: HAL\nCODE:\n```\n# spindle speed override signals\nnet pdnt.spindle-override.scale           whb.halui.spindle-override.scale      halui.spindle.0.override.scale   # needed for both spindle+/- and spindleoverride+/- button\nnet pdnt.spindle.override.value           halui.spindle.0.override.value        whb.halui.spindle-override.value # GUI feed rate related signals\nnet pdnt.spindle.override.increase        whb.halui.spindle-override.increase   halui.spindle.0.override.increase\nnet pdnt.spindle.override.decrease        whb.halui.spindle-override.decrease   halui.spindle.0.override.decrease\n\n```\n\n----------------------------------------\n\nTITLE: Connecting External Controls for Moveoff in LinuxCNC HAL\nDESCRIPTION: This HAL file configuration enables external controls for the Moveoff component in LinuxCNC. It specifies the use of a library file for external control connections.\nSOURCE: https://github.com/linuxcnc/linuxcnc/blob/master/configs/sim/axis/moveoff/2_onpause_external.txt#2025-04-22_snippet_1\n\nLANGUAGE: hal\nCODE:\n```\n[HAL]HALFILE = LIB:moveoff_external.hal\n```\n\n----------------------------------------\n\nTITLE: Mapping Axis Position Feedback with HALUI in HAL\nDESCRIPTION: This snippet provides connections from a pendant to HALUI for reporting axis positioning feedback. It allows users to monitor X, Y, and Z axis positions in real time, aiding in precise machine control.\nSOURCE: https://github.com/linuxcnc/linuxcnc/blob/master/src/hal/user_comps/xhc-whb04b-6/example-configuration.md#2025-04-22_snippet_5\n\nLANGUAGE: HAL\nCODE:\n```\n# axis position related signals feedback\nnet pdnt.axis.x.pos-feedback              halui.axis.x.pos-feedback             whb.halui.axis.x.pos-feedback\nnet pdnt.axis.y.pos-feedback              halui.axis.y.pos-feedback             whb.halui.axis.y.pos-feedback\nnet pdnt.axis.z.pos-feedback              halui.axis.z.pos-feedback             whb.halui.axis.z.pos-feedback\n\n```\n\n----------------------------------------\n\nTITLE: Axis-Specific External Offset Signal Mapping\nDESCRIPTION: HAL signal mappings for X, Y, Z axes external offset counts and global clear functionality. Each axis has its own count signal, and there's a shared clear signal for all axes.\nSOURCE: https://github.com/linuxcnc/linuxcnc/blob/master/configs/sim/axis/external_offsets/eoffsets.txt#2025-04-22_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\ne:xcounts  (sig to => axis.x.eoffset-counts)\ne:ycounts  (sig to => axis.y.eoffset-counts)\ne:zcounts  (sig to => axis.z.eoffset-counts)\ne:clearall (sig to => axis.*.eoffset-clear)\n```\n\n----------------------------------------\n\nTITLE: Configuring HAL Signal Networking for LinuxCNC\nDESCRIPTION: This code snippet sets up signal networking in LinuxCNC's HAL for a pendant's buttons and commands. It is intended for modifying and networking machine, program, and axis operations via signals. Ensure that the required components such as `xhc-whb04b-6` are loaded as dependencies.\nSOURCE: https://github.com/linuxcnc/linuxcnc/blob/master/src/hal/user_comps/xhc-whb04b-6/example-configuration.md#2025-04-22_snippet_0\n\nLANGUAGE: LinuxCNC HAL\nCODE:\n```\n# ######################################################################\n# load pendant components\n# ######################################################################\n\nloadusr -W xhc-whb04b-6 -HsfB\n```\n\nLANGUAGE: LinuxCNC HAL\nCODE:\n```\n# ######################################################################\n# pendant signal configuration\n# ######################################################################\n\n# On/Off signals\nnet machine.is-on                         halui.machine.is-on                   whb.halui.machine.is-on\nnet pdnt.machine.on                       whb.halui.machine.on                  halui.machine.on\nnet pdnt.machine.off                      whb.halui.machine.off                 halui.machine.off\n\n# program related signals\nnet pdnt.program.is-idle                  whb.halui.program.is-idle             halui.program.is-idle\nnet pdnt.program.is-paused                whb.halui.program.is-paused           halui.program.is-paused\nnet pdnt.program-is-running               whb.halui.program-is-running          halui.program.is-running\nnet pdnt.program.resume                   whb.halui.program.resume              halui.program.resume\nnet pdnt.program.pause                    whb.halui.program.pause               halui.program.pause\nnet pdnt.program.run                      whb.halui.program.run                 halui.program.run\nnet pdnt.program.stop                     whb.halui.program.stop                halui.program.stop\n\n# machine mode related signals\nnet pdnt.mode.auto                        whb.halui.mode.auto                   halui.mode.auto\nnet pdnt.mode.manual                      whb.halui.mode.manual                 halui.mode.manual\nnet pdnt.mode.mdi                         whb.halui.mode.mdi                    halui.mode.mdi\nnet pdnt.mode.joint                       whb.halui.mode.joint                  halui.mode.joint\nnet pdnt.mode.teleop                      whb.halui.mode.teleop                 halui.mode.teleop\nnet pdnt.mode.is-auto                     halui.mode.is-auto                    whb.halui.mode.is-auto\nnet pdnt.mode.is-manual                   halui.mode.is-manual                  whb.halui.mode.is-manual\nnet pdnt.mode.is-mdi                      halui.mode.is-mdi                     whb.halui.mode.is-mdi\nnet pdnt.mode.is-joint                    halui.mode.is-joint                   whb.halui.mode.is-joint\nnet pdnt.mode.is-teleop                   halui.mode.is-teleop                  whb.halui.mode.is-teleop\n\n# \"is-homed\" axis signal for allowing pendant when machine is not homed\nnet pdnt.axis.X.is-homed                  halui.joint.0.is-homed                whb.halui.joint.x.is-homed\nnet pdnt.axis.Y.is-homed                  halui.joint.1.is-homed                whb.halui.joint.y.is-homed\nnet pdnt.axis.Z.is-homed                  halui.joint.2.is-homed                whb.halui.joint.z.is-homed\n\n# \"selected axis\" signals\nnet pdnt.axis.X.select                    whb.halui.axis.x.select               halui.axis.x.select\nnet pdnt.axis.y.select                    whb.halui.axis.y.select               halui.axis.y.select\nnet pdnt.axis.Z.select                    whb.halui.axis.z.select               halui.axis.z.select\n\nnet pdnt.axis.x.jog-scale                 whb.axis.x.jog-scale                  axis.x.jog-scale\nnet pdnt.axis.y.jog-scale                 whb.axis.y.jog-scale                  axis.y.jog-scale\nnet pdnt.axis.z.jog-scale                 whb.axis.z.jog-scale                  axis.z.jog-scale\n\nnet pdnt.axis.x.jog-counts                whb.axis.x.jog-counts                 axis.x.jog-counts\nnet pdnt.axis.y.jog-counts                whb.axis.y.jog-counts                 axis.y.jog-counts\nnet pdnt.axis.z.jog-counts                whb.axis.z.jog-counts                 axis.z.jog-counts\n\nnet pdnt.axis.x.jog-enable                whb.axis.x.jog-enable                 axis.x.jog-enable\nnet pdnt.axis.y.jog-enable                whb.axis.y.jog-enable                 axis.y.jog-enable\nnet pdnt.axis.z.jog-enable                whb.axis.z.jog-enable                 axis.z.jog-enable\n\nnet pdnt.axis.x.jog-vel-mode              whb.axis.x.jog-vel-mode               axis.x.jog-vel-mode\nnet pdnt.axis.y.jog-vel-mode              whb.axis.y.jog-vel-mode               axis.y.jog-vel-mode\nnet pdnt.axis.z.jog-vel-mode              whb.axis.z.jog-vel-mode               axis.z.jog-vel-mode\n\n\n# macro buttons to MDI commands\nnet pdnt.macro-1                          whb.button.macro-1                    halui.mdi-command-01             # use MDI command from main.ini\nnet pdnt.macro-2                          whb.button.macro-2                    halui.mdi-command-02             # use MDI command from main.ini or used for Hardcoded lube on/off\nnet pdnt.reserved.for.spindle+            whb.button.macro-3                                                     # Hardcoded for spindle+ whb.halui.spindle.increase\nnet pdnt.reserved.for.spindle-            whb.button.macro-4                                                     # Hardcoded for spindle- whb.halui.spindle.decrease\nnet pdnt.macro-5                          whb.button.macro-5                    halui.mdi-command-05             # use MDI command from main.ini\nnet pdnt.macro-6                          whb.button.macro-6                    halui.mdi-command-06             # use MDI command from main.ini\nnet pdnt.macro-7                          whb.button.macro-7                    halui.mdi-command-07             # use MDI command from main.ini\nnet pdnt.reserved.for.spindle.dir         whb.button.macro-8                                                     # Hardcoded for spindle direction inside pendant\nnet pdnt.macro-9                          whb.button.macro-9                    halui.mdi-command-09             # use MDI command from main.ini\nnet pdnt.reserved.for.ABS-REL             whb.button.macro-10                                                    # Hardcoded for swap Dro  Relative/Absolute\nnet pdnt.macro-14                         whb.button.macro-14                   halui.mdi-command-14             # use MDI command from main.ini\nnet pdnt.reserved.for.flood               whb.button.macro-15                                                    # Hardcoded for halui.flood on/off\nnet pdnt.reserved.for.mist                whb.button.macro-16                                                    # Hardcoded for halui.mist on/off\n\nnet pdnt.macro.11                         whb.button.macro-11                   halui.mdi-command-11             # use MDI command from main.ini\nnet pdnt.macro.12                         whb.button.macro-12                   halui.mdi-command-12             # use MDI command from main.ini\nnet pdnt.macro.13                         whb.button.macro-13                   halui.mdi-command-13             # use MDI command from main.ini\n\n\n# flood and mist toggle signals\nnet  pdnt.flood.is-on                     whb.halui.flood.is-on                 halui.flood.is-on                #return signal is on or off\nnet  pdnt.flood.off                       whb.halui.flood.off                   halui.flood.off                  #reserved whb.button.macro-15\nnet  pdnt.flood.on                        whb.halui.flood.on                    halui.flood.on                   #reserved whb.button.macro-15\n\nnet  pdnt.mist.is-on                      whb.halui.mist.is-on                  halui.mist.is-on                 #return signal is on or off\nnet  pdnt.mist.off                        whb.halui.mist.off                    halui.mist.off                   #reserved whb.button.macro-16\nnet  pdnt.mist.on                         whb.halui.mist.on                     halui.mist.on                    #reserved whb.button.macro-16\n\n\n# default function button signals\nnet pdnt.button.m-home                    whb.button.m-home                     halui.home-all                   # Homing use built-in halui home all\nnet pdnt.button.safe-z                    whb.button.safe-z                     halui.mdi-command-03             # Safe-z  use MDI command from main.ini\nnet pdnt.button.w-home                    whb.button.w-home                     halui.mdi-command-04             # Unpark  use MDI command from main.ini\nnet pdnt.button.probe-z                   whb.button.probe-z                    halui.mdi-command-08             # Probe-Z use MDI command from main.ini\n```\n\n----------------------------------------\n\nTITLE: Controlling Extra Joints via sim_pin Settings in LinuxCNC\nDESCRIPTION: Lists key HAL pin identifiers used with the `sim_pin` application to control the behavior and position of extra joints (joint 4 and 5) managed by `limit3` components. Allows setting limits, maximum velocity/acceleration, and requesting positions independently.\nSOURCE: https://github.com/linuxcnc/linuxcnc/blob/master/configs/sim/axis/extrajoints/2extrajoints.txt#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nj4.limit3.min  min value\nj4.limit3.max  max value\nj4.limit3.maxv max velocity\nj4.limit3.maxa max acceleration\nj4.limit3.in   requested value\nsimilar for j5\n```\n\n----------------------------------------\n\nTITLE: Defining UI Status Display Layout using PlantUML Salt\nDESCRIPTION: This PlantUML code uses the Salt component to create a grid-based layout, likely for a LinuxCNC status display. It arranges various elements like icons (signal strength, battery, transmission indicator), machine coordinates (X, Y, Z), workpiece coordinates (X1, Y1, Z1, A1, B1, C1), and status messages (e.g., 'STP', 'CONT', 'MPG', 'F:120', 'S:1200', 'RESET') within a table-like structure. A legend at the end explains the meaning of the icons and coordinate types.\nSOURCE: https://github.com/linuxcnc/linuxcnc/blob/master/src/hal/user_comps/xhc-whb04b-6/display-layout-diagram.txt#2025-04-22_snippet_0\n\nLANGUAGE: plantuml\nCODE:\n```\n@startuml\n@startsalt\n\n{#\n| . | 1 | 2 | 3 \n| A | {\n .|. | <&signal>| <&battery-empty>  <&media-stop>|  STP: 1.0 \n  . | <&star>|X:|+1234|.4561\n  .      |.|Y:|-1470|.9632\n  .      |. |Z:|+0|.0000   |.\n} |\n{\n .|. | <&signal>| <&battery-empty>  <&media-stop>|  CONT 30% \n  . | <&star>|X:|+1234|.4561\n  .      |.|Y:|-1470|.9632\n  .      |. |Z:|+0|.0000   |.\n} |\n{\n .|. | <&signal>| <&battery-empty>  <&media-stop>|  CON:30% \n  . | <&star>|X:|+1234|.4561\n  .      |.|Y:|-1470|.9632\n  .      |. |Z:|+0|.0000   |.\n}\n\n| B |\n{\n .|. | <&signal>| <&battery-empty>  <&media-stop>|  MPG 30% \n  . | <&star>|X:|+1234|.4561\n  .      |.|Y:|-1470|.9632\n  .      |. |Z:|+0|.0000   |.|.\n} |\n{\n .|. | <&signal>| <&battery-empty>  <&media-stop>|  F:120  \n  . | <&star>|X:|+1234|.4561\n  .      |.|Y:|-1470|.9632\n  .      |. |Z:|+0|.0000   |.|.|.|.|.|.\n} |\n{\n .|. | <&signal>| <&battery-empty>  <&media-stop>|  S:1200 \n  . | <&star>|X:|+1234|.4561\n  .      |.|Y:|-1470|.9632\n  .      |. |Z:|+0|.0000   |.|.|.|.\n}\n\n| C |\n{\n .|. | <&signal>| <&battery-empty>  <&media-stop>|  S:1200 \n  . | <&star>|X:|+1234|.4561\n  .      |.|Y:|-1470|.9632\n  .      |. |Z:|+0|.0000   |.|.|.|.\n} |\n{\n .|. | <&signal>| <&battery-empty>  <&media-stop>|  RESET \n  . | <&star>|X:|+1234|.4561\n  .      |.|Y:|-1470|.9632\n  .      |. |Z:|+0|.0000   |.|.|.|.|.\n} |\n{\n .|. | <&signal>| <&battery-empty>  <&media-stop>|  CONT 30% \n  . | <&star>|X1:|+1234|.4561\n  .      |.|Y1:|-1470|.9632\n  .      |. |Z1:|+0|.0000   \n}\n\n| D | \n{\n .|. | <&signal>| <&battery-empty>  <&media-stop>|  CONT 30% \n  . | . |A1:|+1234|.4561\n  .      |.|B1:|-1470|.9632\n  .      |<&star> |C1:|+0|.0000   \n} {\n<&signal> ... signal strength | X,Y-C ... machine coord.\n<&star> ... selected axis     | X1,Y1-C1 ... workpiece coord.\n<&battery-empty> ... battery level\n<&media-stop> ... tx indicator\n} |* |\n}\n@endsalt\n@enduml\n```\n\n----------------------------------------\n\nTITLE: Configuring STEP Button in XHC-HB04 Layout2\nDESCRIPTION: This snippet demonstrates the typical connection for the STEP button in the XHC-HB04 pendant configuration.\nSOURCE: https://github.com/linuxcnc/linuxcnc/blob/master/configs/sim/axis/xhc-hb04/xhc-hb04-layout2_mm.txt#2025-04-22_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[XHC_HB04_BUTTON]step = xhc-hb04.stepsize-up\n```\n\n----------------------------------------\n\nTITLE: Configuration Setting - INI File Example\nDESCRIPTION: Sample INI configuration demonstrating RS274NGC_STARTUP_CODE setting mentioned in version 0.9.9.3 bugfix\nSOURCE: https://github.com/linuxcnc/linuxcnc/blob/master/src/emc/usr_intf/gmoccapy/release_notes.txt#2025-04-22_snippet_0\n\nLANGUAGE: INI\nCODE:\n```\nRS274NGC_STARTUP_CODE = G17 G21 G40 G43H0 G54 G64P0.001 G80 G90 G94 G98\n```\n\n----------------------------------------\n\nTITLE: Defining MDI Commands in HALUI Configuration\nDESCRIPTION: This snippet shows how to define MDI commands in the INI file for use with HALUI pins in the XHC-HB04 pendant configuration.\nSOURCE: https://github.com/linuxcnc/linuxcnc/blob/master/configs/sim/axis/xhc-hb04/xhc-hb04-layout2_mm.txt#2025-04-22_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[HALUI]MDI_COMMAND = mdi_command\n```\n\n----------------------------------------\n\nTITLE: Configuring GPIO Pins as Open Drain\nDESCRIPTION: This snippet sets GPIO pins to open drain mode for stepper motor outputs by modifying HAL files. It requires specific MESA firmware and component numbers. Inputs are GPIO pin numbers, and outputs are updated configurations in HAL files.\nSOURCE: https://github.com/linuxcnc/linuxcnc/blob/master/src/emc/usr_intf/pncconf/pncconf-help/help-mesa.txt#2025-04-22_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\nsetp hm2_5i20.0.gpio.048.is_opendrain true\nsetp hm2_5i20.0.gpio.049.is_opendrain true\n```\n\n----------------------------------------\n\nTITLE: Loading Moveoff HAL Configuration Script in LinuxCNC INI\nDESCRIPTION: Specifies the Tcl script (`hookup_moveoff.tcl`) located in the LinuxCNC library path (`LIB:`) to be executed for configuring the Hardware Abstraction Layer (HAL) connections required by the 'moveoff' component. This line is typically found within the `[HAL]` section of a LinuxCNC INI configuration file.\nSOURCE: https://github.com/linuxcnc/linuxcnc/blob/master/configs/sim/axis/moveoff/7_pyvcp.txt#2025-04-22_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[HAL]HALFILE = LIB:hookup_moveoff.tcl\n```\n\n----------------------------------------\n\nTITLE: Configuring HAL File for Moveoff in LinuxCNC\nDESCRIPTION: This snippet shows how to install and connect the Moveoff component using a HAL file. It uses a library file named 'hookup_moveoff.tcl' to set up the Moveoff component.\nSOURCE: https://github.com/linuxcnc/linuxcnc/blob/master/configs/sim/axis/moveoff/8_gladevcp.txt#2025-04-22_snippet_0\n\nLANGUAGE: tcl\nCODE:\n```\n[HAL]HALFILE = LIB:hookup_moveoff.tcl\n```\n\n----------------------------------------\n\nTITLE: Instalación del componente Moveoff en HAL para LinuxCNC\nDESCRIPTION: Este snippet muestra cómo instalar y conectar el componente Moveoff en LinuxCNC utilizando un archivo HAL. El archivo hookup_moveoff.tcl se carga para configurar las conexiones necesarias.\nSOURCE: https://github.com/linuxcnc/linuxcnc/blob/master/configs/sim/axis/moveoff/7_pyvcp_es.txt#2025-04-22_snippet_0\n\nLANGUAGE: tcl\nCODE:\n```\n[HAL]HALFILE = LIB:hookup_moveoff.tcl\n```\n\n----------------------------------------\n\nTITLE: Using CNC Commands for Z Probe in HALUI\nDESCRIPTION: This snippet provides CNC commands to automate the Z axis touchoff procedure using HALUI. The process includes using a probe command, setting the Z axis origin, and retracting the tool. CNC operators need to ensure parameters like maximum search distance and feed rate are within machine limits.\nSOURCE: https://github.com/linuxcnc/linuxcnc/blob/master/src/emc/usr_intf/pncconf/pncconf-help/help-advanced.txt#2025-04-22_snippet_0\n\nLANGUAGE: CNC Command\nCODE:\n```\nG38.2 Z-2 F 16\nG10 L20 P0 Z.25\nG0 Z.5\n```\n\n----------------------------------------\n\nTITLE: Accessing Help for moveoff and moveoff_gui Commands (Bash)\nDESCRIPTION: These commands demonstrate how to access further documentation and usage information for the `moveoff` utility and the `moveoff_gui` application from the command line using the `man` command and the `--help` option.\nSOURCE: https://github.com/linuxcnc/linuxcnc/blob/master/configs/sim/touchy/ngcgui/pyngcgui_touchy_moveoff.txt#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ man moveoff\n$ moveoff_gui --help | more\n```\n\n----------------------------------------\n\nTITLE: Listing Extended Help and Options for xhc-whb04b-6 - Plaintext Output - Plaintext\nDESCRIPTION: Presents the standard output produced by invoking the help option, detailing available options, usage, and author credits for the xhc-whb04b-6 HAL component. Provides insight into command-line flags, functional modes, and expected behavior under various arguments. There are no dependencies for reading this text, but it's meaningful within the context of the relevant executable and LinuxCNC setup.\nSOURCE: https://github.com/linuxcnc/linuxcnc/blob/master/src/hal/user_comps/xhc-whb04b-6/README.md#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nNAME\n    xhc-whb04b-6 - jog dial HAL component for the XHC-WHB04B-6 device\n\nDESCRIPTION\n    xhc-whb04b-6 is a HAL component that receives events from the XHC-WHB04B-6 device and exposes them to HAL via HAL pins.\n\nOPTIONS\n -h\n    Prints the synopsis and the most commonly used commands.\n\n -H\n    run xhc-whb04b-6 in HAL-mode instead of interactive mode. When in HAL mode commands from device will be exposed to HAL's shred memory. Interactive mode is useful for testing device connectivity and debugging.\n\n -t\n    Wait with timeout for USB device then proceed, exit otherwise. Without -t the timeout is implicitly infinite.\n\n -u, -U\n    Show received data from device. With -U received and transmitted data will be printed. Output is prefixed with \"usb\".\n\n -p\n    Show HAL pins and HAL related messages. Output is prefixed with \"hal\".\n\n -e\n    Show captured events such as button pressed/released, jog dial, axis rotary button, and feed rotary button event. Output is prefixed with \"event\".and in case.\n\n -a\n    Enable all logging facilities without explicitly specifying each.\n\n -c\n    Enable checksum output which is necessary for debugging the checksum generator function. Do not rely on this feature since it will be removed once the generator is implemented.\n\n -s\n    Enable spindle override value using wheel with feed button to Lead mode.\n\n -f\n    Enable feedrate override value using wheel after Lead mode or at first start (display MPG mode)\n\n -B\n    Add 5mm and 10mm to Step feedrate output\n\n -n\n    Force being silent and not printing any output except of errors. This will also inhibit messages prefixed with \"init\".\n    \n\nEXAMPLES\nxhc-whb04b-6 -ue\n    Prints incoming USB data transfer and generated key pressed/released events.\n\nxhc-whb04b-6 -p\n    Prints hal pin names and events distributed to HAL memory.\n\nxhc-whb04b-6 -Hn\n    Start in HAL mode and avoid output, except of errors.\n\nxhc-whb04b-6 -HsfB\n    Start in HAL mode + Spindle Override + Feedrate Override + Big step 5/10mm).\n\nAUTHORS\n    This component was started by Raoul Rubien (github.com/rubienr) based on predecessor device's component xhc-hb04.cc. https://github.com/machinekit/machinekit/graphs/contributors gives you a more complete list of contributors.\n    Updated for Linuxcnc 2020 by alkabal_free.fr\n```\n\n----------------------------------------\n\nTITLE: LinuxCNC External Offset Implementation Notes\nDESCRIPTION: Technical notes regarding the implementation of external offsets, including radius control through HAL pins and configuration dependencies for offset fidelity based on axis settings.\nSOURCE: https://github.com/linuxcnc/linuxcnc/blob/master/configs/sim/axis/external_offsets/opa.txt#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n1) The effective radius used for computing\n   external offsets is set using the\n   motion.analog-out-00 hal pin and \n   controlled by the sample program or\n   by MDI ( M68 E0 Q some_radius_value )\n\n2) Offset fidelity is dependent upon inifile\n   settings for [AXIS_X] items:\n     MAX_VELOCITY\n     MAX_ACCELERATION\n     OFFSET_AV_RATIO\n```\n\n----------------------------------------\n\nTITLE: Configuring HAL for Moveoff Demo in pyngcgui_touchy.ini (INI)\nDESCRIPTION: This snippet shows the necessary configuration within the `[HAL]` section of the `pyngcgui_touchy.ini` file. It specifies `hookup_move.tcl` as the HAL configuration file and `halui` as the HAL user interface component required for the moveoff demonstration.\nSOURCE: https://github.com/linuxcnc/linuxcnc/blob/master/configs/sim/touchy/ngcgui/pyngcgui_touchy_moveoff.txt#2025-04-22_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[HAL]\n...\nHALFILE = hookup_move.tcl\nHALUI   = halui\n```\n\n----------------------------------------\n\nTITLE: Identifying XHC-WHB04B-6 USB Device IDs\nDESCRIPTION: Specifies the unique USB Vendor ID (0x10ce) and Product ID (0xeb93) assigned to the XHC-WHB04B-6 pendant. These identifiers are used by the operating system and applications like LinuxCNC to detect and interact with the specific hardware device.\nSOURCE: https://github.com/linuxcnc/linuxcnc/blob/master/src/hal/user_comps/xhc-whb04b-6/README.md#2025-04-22_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nUSB vendor  ID = 0x10ce\nUSB product ID = 0xeb93\n```\n\n----------------------------------------\n\nTITLE: Launching GladeVCP with Debug Output for LinuxCNC Probe\nDESCRIPTION: Command to launch GladeVCP with increased debug output for the probe interface. It uses the probe.py script, sets the debug level to 3, and specifies the HAL and UI files.\nSOURCE: https://github.com/linuxcnc/linuxcnc/blob/master/configs/sim/axis/gladevcp/probe.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngladevcp -d -d -u probe.py -U debug=3 -H probe.hal probe.ui\n```\n\n----------------------------------------\n\nTITLE: Running GladeVCP Spinbutton Example Independently\nDESCRIPTION: Command-line instruction to run a spinbutton example using the GladeVCP (Glade Virtual Control Panel) tool with a specific Python script and UI file.\nSOURCE: https://github.com/linuxcnc/linuxcnc/blob/master/configs/apps/gladevcp/by-widget/spinbutton.txt#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ gladevcp -u spinbutton.py spinbutton.ui\n```\n\n----------------------------------------\n\nTITLE: Running Basic ComboBox Example with GladeVCP\nDESCRIPTION: Command to run a basic ComboBox example independently using GladeVCP. This connects the Python handler file with the UI definition file.\nSOURCE: https://github.com/linuxcnc/linuxcnc/blob/master/configs/apps/gladevcp/by-widget/combobox.txt#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ gladevcp -u combobox.py combobox.ui\n```\n\n----------------------------------------\n\nTITLE: Installing Poppler-Qt5 for PDF Viewing (Shell)\nDESCRIPTION: Installs the Python 3 bindings for Poppler-Qt5 using apt-get. This library allows the application to render and view PDF files.\nSOURCE: https://github.com/linuxcnc/linuxcnc/blob/master/configs/sim/woodpecker/README.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nsudo apt-get install python3-poppler-qt5\n```\n\n----------------------------------------\n\nTITLE: Running Manual List ComboBox Example with GladeVCP\nDESCRIPTION: Command to run the manual list construction ComboBox example with GladeVCP. This example demonstrates how to build dropdown lists programmatically.\nSOURCE: https://github.com/linuxcnc/linuxcnc/blob/master/configs/apps/gladevcp/by-widget/combobox.txt#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ gladevcp -u combobox_manual_list.py combobox_manual_list.ui\n```\n\n----------------------------------------\n\nTITLE: Launching Qt Designer 5 using Shell\nDESCRIPTION: This command starts the Qt Designer application. The `-qt=5` flag explicitly tells Designer to use the Qt 5 framework, which is necessary for compatibility with the QtVCP components developed for LinuxCNC using PyQt5. This should be run after setting up the plugins and environment.\nSOURCE: https://github.com/linuxcnc/linuxcnc/blob/master/lib/python/qtvcp/designer/README.txt#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ndesigner -qt=5\n```\n\n----------------------------------------\n\nTITLE: Basic Structure of a LinuxCNC Macro File\nDESCRIPTION: This snippet demonstrates the basic structure of a LinuxCNC macro file. It shows the required start and end syntax for a subroutine named 'jog_around'.\nSOURCE: https://github.com/linuxcnc/linuxcnc/blob/master/configs/sim/gmoccapy/macros/macro_Instructions.txt#2025-04-22_snippet_2\n\nLANGUAGE: ngc\nCODE:\n```\nO<jog_around> sub\n\n# Macro content goes here\n\nO<jog_around> endsub\nM2\n```\n\n----------------------------------------\n\nTITLE: RTAI System Initialization Log\nDESCRIPTION: Boot sequence log showing RTAI real-time system initialization including memory allocation, scheduling parameters, and timing configuration.\nSOURCE: https://github.com/linuxcnc/linuxcnc/blob/master/configs/by_interface/mesa/plasma-5i20/plasma.txt#2025-04-22_snippet_0\n\nLANGUAGE: log\nCODE:\n```\n[175654.344093] I-pipe: Domain RTAI registered.\n[175654.344104] RTAI[hal]: <3.6.1> mounted over IPIPE-NOTHREADS 2.0-04.\n[175654.344107] RTAI[hal]: compiled with gcc version 4.2.4 (Ubuntu 4.2.4-1ubuntu3).\n[175654.344115] RTAI[hal]: mounted (IPIPE-NOTHREADS, IMMEDIATE (INTERNAL IRQs DISPATCHED), ISOL_CPUS_MASK: 0).\n[175654.344118] PIPELINE layers:\n[175654.344121] e0af4000 9ac15d93 RTAI 200\n[175654.344123] c0383180 0 Linux 100\n```\n\n----------------------------------------\n\nTITLE: Installing PyModbus for Huanyang VFD Communication (Shell)\nDESCRIPTION: Installs the PyModbus library for Python 3 using apt-get. This dependency enables communication with Huanyang GT series Variable Frequency Drives (VFDs) via the Modbus protocol.\nSOURCE: https://github.com/linuxcnc/linuxcnc/blob/master/configs/sim/woodpecker/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nsudo apt-get install python3-pymodbus\n```\n\n----------------------------------------\n\nTITLE: Setting Subroutine Path in LinuxCNC INI File\nDESCRIPTION: This snippet shows how to set the subroutine path in the LinuxCNC INI file. It specifies where the system should look for macro files.\nSOURCE: https://github.com/linuxcnc/linuxcnc/blob/master/configs/sim/gmoccapy/macros/macro_Instructions.txt#2025-04-22_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[RS274NGC]\nSUBROUTINE_PATH = nc_files/subroutines\n```\n\n----------------------------------------\n\nTITLE: Defining WHB Component Simulation Diagram using PlantUML\nDESCRIPTION: This PlantUML code defines a component diagram for a simulation scenario involving the WHB04B-6 wireless MPG (Manual Pulse Generator). It visualizes the `WhbComponent` within a `Whb_Component` frame, its internal interfaces (`inputs`, `outputs`), its connection directions ('r' for read from inputs, 'w' for write to outputs), and its external bidirectional communication with the `WHB04B_6` agent via USB. A caption is included for context.\nSOURCE: https://github.com/linuxcnc/linuxcnc/blob/master/src/hal/user_comps/xhc-whb04b-6/components-diagram-simulation-mode.txt#2025-04-22_snippet_0\n\nLANGUAGE: plantuml\nCODE:\n```\n@startuml\n\nagent WHB04B_6\n\nframe Whb_Component {\n component WhbComponent\n\n\n   interface inputs\n   interface outputs\n\n\n WhbComponent <-- inputs : r\n WhbComponent --> outputs : w\n\n\n WHB04B_6 <-->WhbComponent: USB i/o\n}\n\ncaption Fig2: Components diagram in simulation mode usecase.\n\n@enduml\n```\n\n----------------------------------------\n\nTITLE: Configuring NGCGUI Subfiles in LinuxCNC INI File\nDESCRIPTION: This INI file snippet demonstrates how to configure NGCGUI_SUBFILE entries to include both .gcmc and .ngc files. It shows how to list multiple files and includes an empty entry.\nSOURCE: https://github.com/linuxcnc/linuxcnc/blob/master/configs/sim/axis/ngcgui/ngcgui_gcmc.txt#2025-04-22_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\nNGCGUI_SUBFILE    = drill.gcmc\nNGCGUI_SUBFILE    = wheels.gcmc\nNGCGUI_SUBFILE    = star.gcmc\nNGCGUI_SUBFILE    = simp.ngc\nNGCGUI_SUBFILE    = \"\"\n```\n\n----------------------------------------\n\nTITLE: Defining LinuxCNC Control Panel Layout using PlantUML Salt\nDESCRIPTION: This PlantUML Salt snippet defines a grid layout for a control panel, likely associated with LinuxCNC. It maps specific machine control functions (e.g., reset, start, feed control, spindle control, homing, probing, macros) and icons (power standby, reload) to positions within a grid. The layout includes controls for axis movement, speed adjustment, and step mode.\nSOURCE: https://github.com/linuxcnc/linuxcnc/blob/master/src/hal/user_comps/xhc-whb04b-6/buttons-layout-diagram.txt#2025-04-22_snippet_0\n\nLANGUAGE: plantuml\nCODE:\n```\n@startuml\n@startsalt\n{+\nreset  | stop           | start| . | <&power-standby>\nfeed+  | feed-          | Spindle+ | spindle-        | .\nm-home | safe-z         | w-home   | s-on/off        | fn\n.      | .              | probe-z  | .               | .\n.      | .              | macro10  | .               | .\n.      | <&reload> axis | .        | <&reload> speed | .\nCON    | .              | .        | .               |step \n.      | .              | .        | .               | .\n.      | <&reload> hand wheel| *                     | .\n}\n@endsalt\n@enduml\n```\n\n----------------------------------------\n\nTITLE: Configuring Meter Maximum Value in INI File\nDESCRIPTION: This snippet shows the INI file configuration for setting the maximum value of a meter widget. It defines a [METER] section with a MAX parameter.\nSOURCE: https://github.com/linuxcnc/linuxcnc/blob/master/configs/sim/axis/gladevcp/set-param-from-ini.txt#2025-04-22_snippet_0\n\nLANGUAGE: INI\nCODE:\n```\n[METER]MAX = 100\n```\n\n----------------------------------------\n\nTITLE: Running GladeVCP RadioButton Example\nDESCRIPTION: Command to run the GladeVCP radio button example independently. It uses the 'gladevcp' command with the '-u' flag to specify the Python file and the UI file.\nSOURCE: https://github.com/linuxcnc/linuxcnc/blob/master/configs/apps/gladevcp/by-widget/radiobutton_es.txt#2025-04-22_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n$ gladevcp -u radio.py radio.ui\n```\n\n----------------------------------------\n\nTITLE: Starting GladeVCP and Sim_Pin with TCL Script\nDESCRIPTION: This TCL script is mentioned to start gladevcp and sim_pin, which are tools used in LinuxCNC for creating and simulating HAL components.\nSOURCE: https://github.com/linuxcnc/linuxcnc/blob/master/configs/sim/axis/gladevcp/set-param-from-ini.txt#2025-04-22_snippet_1\n\nLANGUAGE: TCL\nCODE:\n```\n# No actual code provided, but the file set-param-from-ini.tcl is mentioned to start gladevcp and sim_pin\n```\n\n----------------------------------------\n\nTITLE: Creating a QWidget Wrapper for QtVismach Embedding in Python\nDESCRIPTION: This snippet provides a Python class 'Window' inheriting from QWidget, designed to embed the GLWidget (from qt_vismach) within a Qtvcp application. It initializes the GLWidget, sets up the 3D model ('model', 'world', 'work'), configures view parameters (distance, near/far planes, latitude limits), potentially integrates a HUD ('myhud'), and arranges the layout using QHBoxLayout. This class serves as the container for the visualization when used within a larger Qt application.\nSOURCE: https://github.com/linuxcnc/linuxcnc/blob/master/lib/python/qtvcp/lib/qt_vismach/README.txt#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# Add: (usually just above 'if __name__ == '__main__':')\n\n\n# we want to embed with qtvcp so build a window to display\n# the model\nclass Window(QWidget):\n\n    def __init__(self):\n        super(Window, self).__init__()\n        self.glWidget = GLWidget()\n        v = self.glWidget\n        v.set_latitudelimits(-180, 180)\n\n        # remove HUD cde if no HUD\n        v.hud = myhud\n        # HUD needs to know where to draw\n        v.hud.app = v\n\n        world = Capture()\n\n        v.model = Collection([model, world])\n        size = 600\n        v.distance = size * 3\n        v.near = size * 0.01\n        v.far = size * 10.0\n        v.tool2view = tooltip\n        v.world2view = world\n        v.work2view = work\n\n        mainLayout = QHBoxLayout()\n        mainLayout.addWidget(self.glWidget)\n        self.setLayout(mainLayout)\n```\n\n----------------------------------------\n\nTITLE: Copying QtVCP Plugin to Designer Directory using Shell\nDESCRIPTION: This command copies the LinuxCNC QtVCP plugin file, represented by the placeholder `<pluginfile>`, into the Qt Designer Python plugin directory created previously. The specific source path for `<pluginfile>` depends on whether LinuxCNC was installed from a package or built from source (Run-In-Place). This step makes the custom LinuxCNC widgets available within Qt Designer.\nSOURCE: https://github.com/linuxcnc/linuxcnc/blob/master/lib/python/qtvcp/designer/README.txt#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncp <pluginfile> ~/.designer/plugins/python/\n```\n\n----------------------------------------\n\nTITLE: Installing NumPy for Z Level Height Maps (Shell)\nDESCRIPTION: Installs the NumPy library for Python 3 using apt-get. NumPy is a fundamental package for scientific computing and is required for creating Z level height maps when using Z level compensation features.\nSOURCE: https://github.com/linuxcnc/linuxcnc/blob/master/configs/sim/woodpecker/README.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nsudo apt-get install python3-numpy\n```\n\n----------------------------------------\n\nTITLE: Loading OR Components with Names in HAL Files\nDESCRIPTION: Demonstrates how to load OR components with specific names in separate HAL files using the loadrt command. This approach is supported by two-pass processing.\nSOURCE: https://github.com/linuxcnc/linuxcnc/blob/master/configs/sim/axis/twopass/twopass.txt#2025-04-22_snippet_0\n\nLANGUAGE: hal\nCODE:\n```\nfile1.hal: loadrt or2 names=or2_a,or2_b\nfile2.hal: loadrt or2 names=or2_c,or2_d\n```\n\n----------------------------------------\n\nTITLE: Handling Invalid Arithmetic Expressions in ClassicLadder Evaluation\nDESCRIPTION: These example strings illustrate types of invalid arithmetic expressions that could lead to crashes (e.g., floating point exceptions) prior to v0.7.126. The update in v0.7.126 added error trapping during arithmetic evaluation ('arithm eval') to handle such malformed expressions gracefully instead of crashing. The examples include incomplete comparisons and invalid operator sequences.\nSOURCE: https://github.com/linuxcnc/linuxcnc/blob/master/src/hal/classicladder/HISTORY.txt#2025-04-22_snippet_3\n\nLANGUAGE: classicladder-expression\nCODE:\n```\n\"%W<4\" \"%W0:=123++\" \"%W0:=123%%\"\n```\n\n----------------------------------------\n\nTITLE: Connecting Moveoff Component with HAL File Reference\nDESCRIPTION: Reference to a HAL file that connects the moveoff component. The file is loaded from the library and contains the necessary configurations to hook up the moveoff component to the LinuxCNC system.\nSOURCE: https://github.com/linuxcnc/linuxcnc/blob/master/configs/sim/axis/moveoff/6_zretract.txt#2025-04-22_snippet_0\n\nLANGUAGE: tcl\nCODE:\n```\n[HAL]HALFILE = LIB:hookup_moveoff.tcl\n```\n\n----------------------------------------\n\nTITLE: Investigating Pendant Protocol: Checksum Equations - Implementation Pattern - C\nDESCRIPTION: Documents reverse-engineered C-like equations expressing how to calculate or check the USB checksum byte for the device's protocol. Useful for developers implementing or debugging the USB protocol handler for this pendant. Assumes knowledge of the device's protocol seeds and message format. Input: Protocol byte stream, Output: Boolean or integer checksum value. Limitation: Incomplete and based on empirical tests, the algorithm may not always be reliable.\nSOURCE: https://github.com/linuxcnc/linuxcnc/blob/master/src/hal/user_comps/xhc-whb04b-6/README.md#2025-04-22_snippet_3\n\nLANGUAGE: c\nCODE:\n```\nchecksum == random & seed\n```\n\nLANGUAGE: c\nCODE:\n```\n//! Works if seed is 0xfe, 0xff, otherwise not reliable. Some equation part must be missing.\n//! Not sure whether crc or hand-crafted algorithm is applied.\nchecksum == random - (keyCode ^ (~seed & random))\n```\n\n----------------------------------------\n\nTITLE: HostMot2 Hardware Detection Log\nDESCRIPTION: Log entries showing detection and initialization of Mesa 5i20 HostMot2 motion control card, including detailed I/O pin mappings for encoders, stepgen outputs, and general-purpose I/O.\nSOURCE: https://github.com/linuxcnc/linuxcnc/blob/master/configs/by_interface/mesa/plasma-5i20/plasma.txt#2025-04-22_snippet_1\n\nLANGUAGE: log\nCODE:\n```\n[175654.629887] hm2: loading Mesa HostMot2 driver version 0.15\n[175654.635022] hm2_pci: loading Mesa AnyIO HostMot2 driver version 0.6\n[175654.637533] hm2_pci: discovered 5i20 at 0000:02:03.0\n[175654.769217] hm2/hm2_5i20.0: 72 I/O Pins used:\n```\n\n----------------------------------------\n\nTITLE: Creating Qt Designer Plugin Directory using Shell\nDESCRIPTION: This command creates the necessary nested directory structure (`~/.designer/plugins/python`) within the user's home directory. The `-p` flag ensures that parent directories are created if they don't exist, and no error occurs if the directory already exists. This directory is where Qt Designer looks for Python plugins.\nSOURCE: https://github.com/linuxcnc/linuxcnc/blob/master/lib/python/qtvcp/designer/README.txt#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmkdir -p ~/.designer/plugins/python\n```\n\n----------------------------------------\n\nTITLE: Installing SciPy for Z Level Height Maps (Shell)\nDESCRIPTION: Installs the SciPy library for Python 3 using apt-get. SciPy builds on NumPy and provides additional algorithms for scientific and technical computing, necessary for creating Z level height maps.\nSOURCE: https://github.com/linuxcnc/linuxcnc/blob/master/configs/sim/woodpecker/README.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nsudo apt-get install python3-scipy\n```\n\n----------------------------------------\n\nTITLE: Monitoring XHC-WHB04B-6 USB Events via Command Line (Bash)\nDESCRIPTION: Demonstrates running the `xhc-whb04b-6` command-line utility (presumably located in `../bin/`) with the `-ue` options to monitor and interpret USB events from the pendant. The output shows initialization steps (finding the device, claiming the interface) followed by real-time logging of incoming data packets (`in`), their interpreted meaning (axis changes, feed changes, button presses/releases, jog dial movements), and corresponding event messages. This example illustrates how to capture and decode the pendant's communication for integration or debugging.\nSOURCE: https://github.com/linuxcnc/linuxcnc/blob/master/src/hal/user_comps/xhc-whb04b-6/README.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ ../bin/xhc-whb04b-6 -ue\ninit  setting machine configuration to scale=80 max_velocity=800\ninit  starting in simulation mode\ninit  usb context ... ok\ninit  not waiting for device XHC-WHB04B-6 vendorId=0x10ce productId=0xeb93, will continue in 0s .... ok\ninit  XHC-WHB04B-6 device found\ninit  detaching active kernel driver ... already detached\ninit  claiming interface ... ok\ninit  enabling reception ... ok\nin    0x04 ba 00 00 0e 11 00 ba delta 14 => | 04 | ba |                 |                 |  0.01(  5%) |     X(    ) |   0 | ba\nevent axis inactive       (    )\nevent axis active       X (    )\nevent feed inactive       (    )\nevent feed active   0.01(  5%)\nevent data interpreted, display data ready\nin    0x04 d3 00 00 0e 12 00 d2 delta 14 => | 04 | d3 |                 |                 |  0.01(  5%) |     Y(    ) |   0 | d2\nevent axis inactive     X (    )\nevent axis active       Y (    )\nevent data interpreted, display data ready\nin    0x04 82 01 00 0e 12 00 81 delta 14 => | 04 | 82 |           reset |                 |  0.01(  5%) |     Y(    ) |   0 | 81\n          reset\nevent pressed event data interpreted, display data ready\nin    0x04 bd 00 00 0e 12 00 bc delta 14 => | 04 | bd |                 |                 |  0.01(  5%) |     Y(    ) |   0 | bc\nevent released           reset\nevent data interpreted, display data ready\nin    0x04 9d 00 00 0e 12 01 9c delta 14 => | 04 | 9d |                 |                 |  0.01(  5%) |     Y(    ) |   1 | 9c\nevent jog dial   1\nevent data interpreted, display data ready\nin    0x04 de 00 00 0e 12 00 de delta 14 => | 04 | de |                 |                 |  0.01(  5%) |     Y(    ) |   0 | de\nevent data interpreted, display data ready\n^Ctermination requested upon signal number 2 ...\nconnection lost, cleaning up\n```\n\n----------------------------------------\n\nTITLE: Loading LinuxCNC RIP Environment using Shell\nDESCRIPTION: This command sources the `rip-environment` script located in a LinuxCNC Run-In-Place (RIP) development setup. Sourcing executes the script's commands in the current shell, typically setting environment variables like PATH and PYTHONPATH required for the RIP installation to function correctly. This step is necessary only for RIP installations before running tools like Qt Designer.\nSOURCE: https://github.com/linuxcnc/linuxcnc/blob/master/lib/python/qtvcp/designer/README.txt#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nsource ~/linuxcnc-dev/scripts/rip-environment\n```\n\n----------------------------------------\n\nTITLE: Installing Matplotlib for Z Level Height Maps (Shell)\nDESCRIPTION: Installs the Matplotlib library for Python 3 using apt-get. Matplotlib is a plotting library used in conjunction with NumPy and SciPy for visualizing or processing data related to Z level height maps.\nSOURCE: https://github.com/linuxcnc/linuxcnc/blob/master/configs/sim/woodpecker/README.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nsudo apt-get install python3-matplotlib\n```\n\n----------------------------------------\n\nTITLE: CoreXY Implementation Notes\nDESCRIPTION: Documentation of key requirements and alternative implementation methods for CoreXY kinematics in LinuxCNC. Specifies that corexykins requires home switches on motor positions for joints 0 and 1, and mentions an alternative implementation using trivkins with corexy_by_hal.comp.\nSOURCE: https://github.com/linuxcnc/linuxcnc/blob/master/configs/sim/axis/corexy/corexy_by_kins.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n$ man kins\n```\n\n----------------------------------------\n\nTITLE: Defining C Preprocessor Flags for LinuxCNC ClassicLadder Runtime\nDESCRIPTION: Specifies C preprocessor definitions passed via the `-D` flag during compilation of the ClassicLadder runtime component in LinuxCNC. These flags enable specific functionalities like HAL support (`-DHAL_SUPPORT`), sequential function chart support (`-DSEQUENTIAL_SUPPORT`), real-time capabilities (`-DRT_SUPPORT`), dynamic PLC sizing (`-DDYNAMIC_PLCSIZE`), legacy timer support (`-DOLD_TIMERS_MONOS_SUPPORT`), and Modbus master support (`-DMODBUS_IO_MASTER`).\nSOURCE: https://github.com/linuxcnc/linuxcnc/blob/master/src/hal/classicladder/zEMC_README.txt#2025-04-22_snippet_0\n\nLANGUAGE: Build Script\nCODE:\n```\n-DSEQUENTIAL_SUPPORT -DHAL_SUPPORT -DDYNAMIC_PLCSIZE -DRT_SUPPORT -DOLD_TIMERS_MONOS_SUPPORT -DMODBUS_IO_MASTER\n```\n\n----------------------------------------\n\nTITLE: Implementing Meter Scale Widget in Python\nDESCRIPTION: The meter_scale.py file is mentioned as a GladeVCP file, likely containing the Python implementation of the meter scale widget.\nSOURCE: https://github.com/linuxcnc/linuxcnc/blob/master/configs/sim/axis/gladevcp/set-param-from-ini.txt#2025-04-22_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\n# No actual code provided, but meter_scale.py is mentioned as a gladevcp file\n```\n\n----------------------------------------\n\nTITLE: Specifying Object File Dependencies for classicladder_rt.o (Makefile)\nDESCRIPTION: Lists the object files (`.o`) that are dependencies for building the `classicladder_rt.o` target. This line, typically found in a Makefile, indicates that `classicladder_rt.o` depends on and is likely linked from these specified object files, which handle various functionalities like HAL integration, arithmetic evaluation, array handling, and symbol management.\nSOURCE: https://github.com/linuxcnc/linuxcnc/blob/master/src/hal/classicladder/zEMC_README.txt#2025-04-22_snippet_1\n\nLANGUAGE: Makefile\nCODE:\n```\nclassicladder_rt.o includes:\n\tmodule_hal.o,arithm_eval.o,arrays.o,calc.o,calc_sequential.o,manager.o,symbols.o,vars_access.o\n```\n\n----------------------------------------\n\nTITLE: Running GladeVCP RadioButton Example\nDESCRIPTION: Command to execute the radio button example independently using gladevcp with the specified UI file and Python handler\nSOURCE: https://github.com/linuxcnc/linuxcnc/blob/master/configs/apps/gladevcp/by-widget/radiobutton.txt#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ gladevcp -u radio.py radio.ui\n```\n\n----------------------------------------\n\nTITLE: Defining Conditional Compilation for Old Timers in Makefile\nDESCRIPTION: This snippet shows a Makefile definition 'OLD_TIMERS_MONOS' introduced in v0.7.123. This definition allows conditional compilation of legacy timer and monostable blocks ('old' timers) to maintain compatibility with older ClassicLadder projects, while encouraging the use of the newer IEC61131-compliant timers.\nSOURCE: https://github.com/linuxcnc/linuxcnc/blob/master/src/hal/classicladder/HISTORY.txt#2025-04-22_snippet_1\n\nLANGUAGE: make\nCODE:\n```\nOLD_TIMERS_MONOS\n```\n\n----------------------------------------\n\nTITLE: Running Sourceview Widget Example Independently with GladeVCP in LinuxCNC\nDESCRIPTION: This command demonstrates how to run the sourceview widget example independently using gladevcp. It specifies the Python script (sourceview.py) and the UI file (sourceview.ui) to be used.\nSOURCE: https://github.com/linuxcnc/linuxcnc/blob/master/configs/apps/gladevcp/by-widget/sourceview.txt#2025-04-22_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n$ gladevcp -u sourceview.py sourceview.ui\n```\n\n----------------------------------------\n\nTITLE: Using Indexed Variables in ClassicLadder Expressions\nDESCRIPTION: Introduced in v0.7.122, this snippet demonstrates the syntax for accessing indexed variables within ClassicLadder arithmetic expressions. The example shows accessing a word variable (%W0) where the specific index is determined dynamically by the value of another variable (%W4). If %W4 holds the value 23, the expression effectively refers to %W23.\nSOURCE: https://github.com/linuxcnc/linuxcnc/blob/master/src/hal/classicladder/HISTORY.txt#2025-04-22_snippet_0\n\nLANGUAGE: classicladder-expression\nCODE:\n```\n%W0[%W4]\n```\n\n----------------------------------------\n\nTITLE: Modifying Serial Port Function Names in C\nDESCRIPTION: Renaming of CreateEvent() function to CreateEventLog() in log.c and log.h files to avoid conflicts with Windows API. This change resolves naming conflicts when including both Windows and project-specific headers.\nSOURCE: https://github.com/linuxcnc/linuxcnc/blob/master/src/hal/classicladder/HISTORY.txt#2025-04-22_snippet_4\n\nLANGUAGE: C\nCODE:\n```\nCreateEvent() to CreateEventLog()\n```\n\n----------------------------------------\n\nTITLE: Parallel Port Pin Mapping for Direct Access Project\nDESCRIPTION: Defines the mapping between physical DB25 parallel port pins and ClassicLadder input/output variables (I3-I7, Q0-Q7) for the 'parallel_port_direct' project. Inputs S3-S7 are connected to pins 15, 13, 12, 10, 11 respectively. Outputs D0-D7 are connected to pins 2-9 respectively. This configuration requires root privileges due to ioperm() usage.\nSOURCE: https://github.com/linuxcnc/linuxcnc/blob/master/src/hal/classicladder/README.txt#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n* -- Parallel port 1 --\nInputs     DB25Pin     ClassicLadder\nS3         15          I3\nS4         13          I4\nS5         12          I5\nS6         10          I6\nS7         11          I7\nOutputs    DB25Pin     Classicladder\nD0         2           Q0\nD1         3           Q1\nD2         4           Q2\nD3         5           Q3\nD4         6           Q4\nD5         7           Q5\nD6         8           Q6\nD7         9           Q7\n```\n\n----------------------------------------\n\nTITLE: HAL Pin Renaming Example\nDESCRIPTION: HAL pin renaming convention changes mentioned in version 0.9.9.7.1\nSOURCE: https://github.com/linuxcnc/linuxcnc/blob/master/src/emc/usr_intf/gmoccapy/release_notes.txt#2025-04-22_snippet_1\n\nLANGUAGE: HAL\nCODE:\n```\ngscreen.hal_hbar_spindle_feedback => gscreen.spindle_feedback_bar\ngscreen.hal_led_spindle_at_speed => gscreen.spindle_at_speed_led\n```\n\n----------------------------------------\n\nTITLE: Parallel Port Input Switch Wiring Example\nDESCRIPTION: ASCII diagram illustrating how input switches (Sx) should be wired to the parallel port for the direct access project. Each switch is connected between its corresponding input pin (e.g., pin 15 for S3) and ground (pin 24). This uses a normally open switch configuration.\nSOURCE: https://github.com/linuxcnc/linuxcnc/blob/master/src/hal/classicladder/README.txt#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n           _n_\n   (Sx) o--   --O (24)\n```\n\n----------------------------------------\n\nTITLE: Installing PyQt5 WebEngine for HTML Viewing (Shell)\nDESCRIPTION: Installs the Python 3 bindings for PyQt5 WebEngine using apt-get. This library is required to render and view job setup sheets and help pages formatted in HTML within the application.\nSOURCE: https://github.com/linuxcnc/linuxcnc/blob/master/configs/sim/woodpecker/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nsudo apt-get install python3-pyqt5.qtwebengine\n```\n\n----------------------------------------\n\nTITLE: External Mode Change Network Example\nDESCRIPTION: HAL network configuration for external mode changes mentioned in version 0.9.9.7\nSOURCE: https://github.com/linuxcnc/linuxcnc/blob/master/src/emc/usr_intf/gmoccapy/release_notes.txt#2025-04-22_snippet_2\n\nLANGUAGE: HAL\nCODE:\n```\nnet start halui.mode.auto => halui.program.run <= hardware.button\n```\n\n----------------------------------------\n\nTITLE: Defining Conditional Compilation for Modbus I/O Master in Makefile\nDESCRIPTION: This snippet mentions a Makefile definition 'MODBUS_IO_MASTER' introduced around v0.7.124. This definition provides a mechanism to conditionally compile or exclude the Modbus I/O master functionality, allowing builds tailored to specific needs or environments where Modbus is not required.\nSOURCE: https://github.com/linuxcnc/linuxcnc/blob/master/src/hal/classicladder/HISTORY.txt#2025-04-22_snippet_2\n\nLANGUAGE: make\nCODE:\n```\nMODBUS_IO_MASTER\n```\n\n----------------------------------------\n\nTITLE: Launching moveoff_gui Application via pyngcgui_touchy.ini (INI)\nDESCRIPTION: This configuration line within `pyngcgui_touchy.ini` defines how the `moveoff_gui` application is launched. It sets parameters such as window size (`-size`), location (`-loc`), controlled axes (`-axes`), autoresume behavior (`-autoresume`), delay (`-delay`), and various incremental move values (`-inc`).\nSOURCE: https://github.com/linuxcnc/linuxcnc/blob/master/configs/sim/touchy/ngcgui/pyngcgui_touchy_moveoff.txt#2025-04-22_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\nAPP = moveoff_gui \\\n    -size 20 -loc center \\\n    -axes xyz \\\n    -autoresume -delay 4 \\\n    -inc 0.001 -inc 0.01 -inc 0.1 -inc 1.0\n```\n\n----------------------------------------\n\nTITLE: Parallel Port Output LED Wiring Example\nDESCRIPTION: ASCII diagram showing how output LEDs (Dx) should be connected to the parallel port. Each LED is wired in series with a 330 Ohm current-limiting resistor between its corresponding output pin (e.g., pin 2 for D0) and ground (pin 25).\nSOURCE: https://github.com/linuxcnc/linuxcnc/blob/master/src/hal/classicladder/README.txt#2025-04-22_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n                      ,\n   (Dx) o--[ 330 ]--|>|--o (25)\n```\n\n----------------------------------------\n\nTITLE: Configuring Program Prefix in LinuxCNC INI\nDESCRIPTION: Example INI setting within the [DISPLAY] section. The configuration picker (`pickconfig.tcl`) automatically edits this key in copied INI files to point to the user's `nc_files` directory (`~/linuxcnc/nc_files`), ensuring programs and G-code files are found correctly in the user's environment.\nSOURCE: https://github.com/linuxcnc/linuxcnc/blob/master/configs/maintainer.txt#2025-04-22_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[DISPLAY]PROGRAM_PREFIX = ~/linuxcnc/nc_files\n```"
  }
]