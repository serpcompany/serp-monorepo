[
  {
    "owner": "a-h",
    "repo": "templ",
    "content": "TITLE: Defining a Basic Header Component in templ\nDESCRIPTION: Example of defining a basic header component in a .templ file that takes a name parameter and renders it within an h1 tag inside a header element.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/04-core-concepts/01-components.md#2025-04-18_snippet_0\n\nLANGUAGE: templ\nCODE:\n```\npackage main\n\ntempl headerTemplate(name string) {\n  <header data-testid=\"headerTemplate\">\n    <h1>{ name }</h1>\n  </header>\n}\n```\n\n----------------------------------------\n\nTITLE: Defining templ Page Structure\nDESCRIPTION: Creates a templ page that includes placeholders for React components and loads a JavaScript bundle. This structure allows for server-side rendering with client-side React integration.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/03-syntax-and-usage/17-using-react-with-templ.md#2025-04-18_snippet_1\n\nLANGUAGE: templ\nCODE:\n```\npackage main\n\ntempl page() {\n\t<html>\n\t\t<body>\n\t\t\t<div id=\"react-header\"></div>\n\t\t\t<div id=\"react-content\"></div>\n\t\t\t<div>This is server-side content from templ.</div>\n\t\t\t<!-- Load the React bundle created using esbuild -->\n\t\t\t<script src=\"static/index.js\"></script>\n\t\t</body>\n\t</html>\n}\n```\n\n----------------------------------------\n\nTITLE: Combining Go Code with templ Components\nDESCRIPTION: Illustrates how to use ordinary Go code alongside templ components in a templ file. Go variables can be used within the templ component.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/03-syntax-and-usage/01-basic-syntax.md#2025-04-18_snippet_2\n\nLANGUAGE: templ\nCODE:\n```\npackage main\n\n// Ordinary Go code that we can use in our Component.\nvar greeting = \"Welcome!\"\n\n// templ Component\ntempl headerTemplate(name string) {\n  <header>\n    <h1>{ name }</h1>\n    <h2>\"{ greeting }\" comes from ordinary Go code</h2>\n  </header>\n}\n```\n\n----------------------------------------\n\nTITLE: Main Program to Render Templ Component\nDESCRIPTION: Creates a main.go file that uses the generated templ component and renders it to stdout. This demonstrates how to use the component in a Go program and render its HTML output.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/02-quick-start/02-creating-a-simple-templ-component.md#2025-04-18_snippet_5\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\t\"os\"\n)\n\nfunc main() {\n\tcomponent := hello(\"John\")\n\tcomponent.Render(context.Background(), os.Stdout)\n}\n```\n\n----------------------------------------\n\nTITLE: Serving templ and React Components with Go\nDESCRIPTION: Go code to set up an HTTP server that serves the templ-generated page and static assets. This server combines server-side rendering with templ and client-side React components.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/03-syntax-and-usage/17-using-react-with-templ.md#2025-04-18_snippet_4\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"log\"\n\t\"net/http\"\n\n\t\"github.com/a-h/templ\"\n)\n\nfunc main() {\n\tmux := http.NewServeMux()\n\n\t// Serve the templ page.\n\tmux.Handle(\"/\", templ.Handler(page()))\n\n\t// Serve static content.\n\tmux.Handle(\"/static/\", http.StripPrefix(\"/static/\", http.FileServer(http.Dir(\"static\"))))\n\n\t// Start the server.\n\tfmt.Println(\"listening on localhost:8080\")\n\tif err := http.ListenAndServe(\"localhost:8080\", mux); err != nil {\n\t\tlog.Printf(\"error listening: %v\", err)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: HTML Output from Templ Component\nDESCRIPTION: Shows the HTML output generated by the templ component. This is the rendered result when the component is executed with the name \"John\".\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/02-quick-start/02-creating-a-simple-templ-component.md#2025-04-18_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<div>Hello, John</div>\n```\n\n----------------------------------------\n\nTITLE: Basic Prop Drilling Example in Templ\nDESCRIPTION: Demonstrates the traditional prop drilling pattern where data is passed through multiple component layers. Shows how parameters must be passed through intermediate components even when they don't use the data directly.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/03-syntax-and-usage/14-context.md#2025-04-18_snippet_0\n\nLANGUAGE: templ\nCODE:\n```\npackage main\n\ntempl top(name string) {\n\t<div>\n\t\t@middle(name)\n\t</div>\n}\n\ntempl middle(name string) {\n\t<ul>\n\t\t@bottom(name)\n\t</ul>\n}\n\ntempl bottom(name string) {\n  <li>{ name }</li>\n}\n```\n\n----------------------------------------\n\nTITLE: Generated Go Function Signature for Templ Component\nDESCRIPTION: Shows the function signature that gets generated from the templ file. This generated function takes the same parameters as defined in the templ file and returns a templ.Component.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/02-quick-start/02-creating-a-simple-templ-component.md#2025-04-18_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nfunc hello(name string) templ.Component {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing View Models for Invite Component in Go with templ\nDESCRIPTION: This code snippet demonstrates how to create and use a view model for an invite component. It includes a Handler struct for HTTP requests, a view model constructor, and a templ template function. The view model simplifies data passing and rendering, making the template easier to test and maintain.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/04-core-concepts/04-view-models.md#2025-04-18_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage invitesget\n\ntype Handler struct {\n  Invites *InviteService\n}\n\nfunc (h Handler) ServeHTTP(w http.ResponseWriter, r *http.Request) {\n  invites, err := h.Invites.Get(getUserIDFromContext(r.Context()))\n  if err != nil {\n     //TODO: Log error server side.\n  }\n  m := NewInviteComponentViewModel(invites, err)\n  teamInviteComponent(m).Render(r.Context(), w)\n}\n\nfunc NewInviteComponentViewModel(invites []models.Invite, err error) (m InviteComponentViewModel) {\n  m.InviteCount = len(invites)\n  if err != nil {\n    m.ErrorMessage = \"Failed to load invites, please try again\"\n  }\n  return m\n}\n\n\ntype InviteComponentViewModel struct {\n  InviteCount int\n  ErrorMessage string\n}\n\ntempl teamInviteComponent(model InviteComponentViewModel) {\n\tif model.InviteCount > 0 {\n\t\t<div>You have { fmt.Sprintf(\"%d\", model.InviteCount) } pending invites</div>\n\t}\n        if model.ErrorMessage != \"\" {\n\t\t<div class=\"error\">{ model.ErrorMessage }</div>\n        }\n}\n```\n\n----------------------------------------\n\nTITLE: Updated esbuild Command for Global Namespace\nDESCRIPTION: Modified esbuild command that creates a global namespace for the bundled JavaScript. This allows easy access to exported functions from the templ-generated HTML.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/03-syntax-and-usage/17-using-react-with-templ.md#2025-04-18_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nesbuild --bundle index.ts --outdir=../static --minify --global-name=bundle\n```\n\n----------------------------------------\n\nTITLE: Implementing JavaScript Event Handlers in templ\nDESCRIPTION: Shows how to use JavaScript event handlers in templ components, ensuring proper script emission and parameter handling.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/03-syntax-and-usage/03-attributes.md#2025-04-18_snippet_6\n\nLANGUAGE: templ\nCODE:\n```\nscript withParameters(a string, b string, c int) {\n\tconsole.log(a, b, c);\n}\n\nscript withoutParameters() {\n\talert(\"hello\");\n}\n\ntempl Button(text string) {\n\t<button onClick={ withParameters(\"test\", text, 123) } onMouseover={ withoutParameters() } type=\"button\">{ text }</button>\n}\n```\n\n----------------------------------------\n\nTITLE: HTTP Server with Parameterized templ Components and Status Codes\nDESCRIPTION: Implementation of an HTTP server that uses parameterized templ components and demonstrates the use of templ.WithStatus to set HTTP status codes. This example shows how to pass fixed data to components.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/05-server-side-rendering/01-creating-an-http-server-with-templ.md#2025-04-18_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"net/http\"\n\t\"time\"\n\n\t\"github.com/a-h/templ\"\n)\n\nfunc main() {\n\thttp.Handle(\"/\", templ.Handler(timeComponent(time.Now())))\n\thttp.Handle(\"/404\", templ.Handler(notFoundComponent(), templ.WithStatus(http.StatusNotFound)))\n\n\thttp.ListenAndServe(\":8080\", nil)\n}\n```\n\n----------------------------------------\n\nTITLE: Creating UI Components with Templ Templates\nDESCRIPTION: Templ components that render the counter application UI, including the count display and submission form. These components create the HTML structure with two buttons for incrementing global and user-specific counters.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/05-server-side-rendering/02-example-counter-application.md#2025-04-18_snippet_1\n\nLANGUAGE: templ\nCODE:\n```\npackage main\n\nimport \"strconv\"\n\ntempl counts(global, user int) {\n\t<div>Global: { strconv.Itoa(global) }</div>\n\t<div>User: { strconv.Itoa(user) }</div>\n}\n\ntempl form() {\n\t<form action=\"/\" method=\"POST\">\n\t\t<div><button type=\"submit\" name=\"global\" value=\"global\">Global</button></div>\n\t\t<div><button type=\"submit\" name=\"user\" value=\"user\">User</button></div>\n\t</form>\n}\n\ntempl page(global, user int) {\n\t@counts(global, user)\n\t@form()\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing HTMX-Enabled Form in templ\nDESCRIPTION: This templ component defines a form that uses HTMX attributes for partial page updates. It includes two counters (global and session) with buttons to increment them. The HTMX attributes enable the form to update without a full page reload.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/05-server-side-rendering/03-htmx.md#2025-04-18_snippet_1\n\nLANGUAGE: templ\nCODE:\n```\ntempl counts(global, session int) {\n\t// highlight-next-line\n\t<form id=\"countsForm\" action=\"/\" method=\"POST\" hx-post=\"/\" hx-select=\"#countsForm\" hx-swap=\"outerHTML\">\n\t\t<div class=\"columns\">\n\t\t\t<div class={ \"column\", \"has-text-centered\", \"is-primary\", border }>\n\t\t\t\t<h1 class=\"title is-size-1 has-text-centered\">{ strconv.Itoa(global) }</h1>\n\t\t\t\t<p class=\"subtitle has-text-centered\">Global</p>\n\t\t\t\t<div><button class=\"button is-primary\" type=\"submit\" name=\"global\" value=\"global\">+1</button></div>\n\t\t\t</div>\n\t\t\t<div class={ \"column\", \"has-text-centered\", border }>\n\t\t\t\t<h1 class=\"title is-size-1 has-text-centered\">{ strconv.Itoa(session) }</h1>\n\t\t\t\t<p class=\"subtitle has-text-centered\">Session</p>\n\t\t\t\t<div><button class=\"button is-secondary\" type=\"submit\" name=\"session\" value=\"session\">+1</button></div>\n\t\t\t</div>\n\t\t</div>\n\t</form>\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Component in templ\nDESCRIPTION: Shows how to create a templ component that renders HTML with dynamic content. Components are compiled into functions returning a templ.Component interface.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/03-syntax-and-usage/01-basic-syntax.md#2025-04-18_snippet_1\n\nLANGUAGE: templ\nCODE:\n```\npackage main\n\ntempl headerTemplate(name string) {\n  <header data-testid=\"headerTemplate\">\n    <h1>{ name }</h1>\n  </header>\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Basic templ Components in Go\nDESCRIPTION: A simple templ component definition that renders a static HTML div with 'Hello' text. This component takes no parameters and is suitable for static content.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/05-server-side-rendering/01-creating-an-http-server-with-templ.md#2025-04-18_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\ntempl hello() {\n\t<div>Hello</div>\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Go Code from Templ File\nDESCRIPTION: Runs the templ generate command to convert the templ file into Go code. This creates a hello_templ.go file containing Go functions to render the component.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/02-quick-start/02-creating-a-simple-templ-component.md#2025-04-18_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ntempl generate\n```\n\n----------------------------------------\n\nTITLE: Variable Usage in Templ Components\nDESCRIPTION: Shows how to use string variables, function parameters, and struct fields in Templ components\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/03-syntax-and-usage/04-expressions.md#2025-04-18_snippet_1\n\nLANGUAGE: templ\nCODE:\n```\npackage main\n\ntempl greet(prefix string, p Person) {\n  <div>{ prefix } { p.Name }{ exclamation }</div>\n}\n```\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\ntype Person struct {\n  Name string\n}\n\nconst exclamation = \"!\"\n\nfunc main() {\n  p := Person{ Name: \"John\" }\n  component := greet(\"Hello\", p) \n  component.Render(context.Background(), os.Stdout)\n}\n```\n\nLANGUAGE: html\nCODE:\n```\n<div>Hello John!</div>\n```\n\n----------------------------------------\n\nTITLE: Backend Implementation for Datastar Counter with Go\nDESCRIPTION: Server-side implementation of a counter application using Go, Chi router, and Datastar. Handles global counter state with atomic operations and user-specific state with session management, exposing endpoints for data retrieval and counter incrementation.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/05-server-side-rendering/04-datastar.md#2025-04-18_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage site\n\nimport (\n\t\"net/http\"\n\t\"sync/atomic\"\n\n\t\"github.com/Jeffail/gabs/v2\"\n\t\"github.com/go-chi/chi/v5\"\n\t\"github.com/gorilla/sessions\"\n\tdatastar \"github.com/starfederation/datastar/sdk/go\"\n)\n\nfunc setupExamplesTemplCounter(examplesRouter chi.Router, sessionSignals sessions.Store) error {\n\n\tvar globalCounter atomic.Uint32\n\tconst (\n\t\tsessionKey = \"templ_counter\"\n\t\tcountKey   = \"count\"\n\t)\n\n\tuserVal := func(r *http.Request) (uint32, *sessions.Session, error) {\n\t\tsess, err := sessionSignals.Get(r, sessionKey)\n\t\tif err != nil {\n\t\t\treturn 0, nil, err\n\t\t}\n\n\t\tval, ok := sess.Values[countKey].(uint32)\n\t\tif !ok {\n\t\t\tval = 0\n\t\t}\n\t\treturn val, sess, nil\n\t}\n\n\texamplesRouter.Get(\"/templ_counter/data\", func(w http.ResponseWriter, r *http.Request) {\n\t\tuserVal, _, err := userVal(r)\n\t\tif err != nil {\n\t\t\thttp.Error(w, err.Error(), http.StatusInternalServerError)\n\t\t}\n\n\t\tsignals := TemplCounterSignals{\n\t\t\tGlobal: globalCounter.Load(),\n\t\t\tUser:   userVal,\n\t\t}\n\n\t\tc := templCounterExampleInitialContents(signals)\n\t\tdatastar.NewSSE(w, r).MergeFragmentTempl(c)\n\t})\n\n\tupdateGlobal := func(signals *gabs.Container) {\n\t\tsignals.Set(globalCounter.Add(1), \"global\")\n\t}\n\n\texamplesRouter.Route(\"/templ_counter/increment\", func(incrementRouter chi.Router) {\n\t\tincrementRouter.Post(\"/global\", func(w http.ResponseWriter, r *http.Request) {\n\t\t\tupdate := gabs.New()\n\t\t\tupdateGlobal(update)\n\n\t\t\tdatastar.NewSSE(w, r).MarshalAndMergeSignals(update)\n\t\t})\n\n\t\tincrementRouter.Post(\"/user\", func(w http.ResponseWriter, r *http.Request) {\n\t\t\tval, sess, err := userVal(r)\n\t\t\tif err != nil {\n\t\t\t\thttp.Error(w, err.Error(), http.StatusInternalServerError)\n\t\t\t}\n\n\t\t\tval++\n\t\t\tsess.Values[countKey] = val\n\t\t\tif err := sess.Save(r, w); err != nil {\n\t\t\t\thttp.Error(w, err.Error(), http.StatusInternalServerError)\n\t\t\t}\n\n\t\t\tupdate := gabs.New()\n\t\t\tupdateGlobal(update)\n\t\t\tupdate.Set(val, \"user\")\n\n\t\t\tdatastar.NewSSE(w, r).MarshalAndMergeSignals(update)\n\t\t})\n\t})\n\n\treturn nil\n}\n```\n\n----------------------------------------\n\nTITLE: Composing Templates with Import Expressions in Templ\nDESCRIPTION: Demonstrates how to compose templates using import expressions in Templ. It shows how to create a main template that imports and renders multiple sub-templates.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/03-syntax-and-usage/10-template-composition.md#2025-04-18_snippet_0\n\nLANGUAGE: templ\nCODE:\n```\ntempl showAll() {\n\t@left()\n\t@middle()\n\t@right()\n}\n\ntempl left() {\n\t<div>Left</div>\n}\n\ntempl middle() {\n\t<div>Middle</div>\n}\n\ntempl right() {\n\t<div>Right</div>\n}\n```\n\n----------------------------------------\n\nTITLE: Creating HTTP Server with Templ Handler in Go\nDESCRIPTION: Sets up a basic HTTP server using Go's net/http package and serves a Templ component using templ.Handler. The server listens on port 3000 and renders a hello component with the name 'John'.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/02-quick-start/03-running-your-first-templ-application.md#2025-04-18_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\n\t\"github.com/a-h/templ\"\n)\n\nfunc main() {\n\tcomponent := hello(\"John\")\n\t\n\thttp.Handle(\"/\", templ.Handler(component))\n\n\tfmt.Println(\"Listening on :3000\")\n\thttp.ListenAndServe(\":3000\", nil)\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Single-Render Components with OnceHandler in Templ\nDESCRIPTION: Demonstrates how to create a button component that ensures its JavaScript function is only rendered once. Uses OnceHandler to prevent duplicate script injection when the component is used multiple times.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/03-syntax-and-usage/18-render-once.md#2025-04-18_snippet_0\n\nLANGUAGE: templ\nCODE:\n```\npackage once\n\nvar helloHandle = templ.NewOnceHandle()\n\ntempl hello(label, name string) {\n  @helloHandle.Once() {\n    <script>\n      function hello(name) {\n        alert('Hello, ' + name + '!');\n      }\n    </script>\n  }\n  <input type=\"button\" value={ label } data-name={ name } onclick=\"hello(this.getAttribute('data-name'))\"/>\n}\n\ntempl page() {\n  @hello(\"Hello User\", \"user\")\n  @hello(\"Hello World\", \"world\")\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Header Template in templ\nDESCRIPTION: Example of a header template definition in templ that includes a data-testid attribute for easier testing and accepts a name parameter to display in the h1 element.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/04-core-concepts/03-testing.md#2025-04-18_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ntempl headerTemplate(name string) {\n    <header data-testid=\"headerTemplate\">\n        <h1>{ name }</h1>\n    </header>\n}\n```\n\n----------------------------------------\n\nTITLE: Adding User Session Management with SCS Library\nDESCRIPTION: Enhanced Go web server implementation that adds per-user session state using the SCS library. This code stores and retrieves user-specific counter values via session cookies, allowing each user to have their own counter.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/05-server-side-rendering/02-example-counter-application.md#2025-04-18_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"log\"\n\t\"net/http\"\n\t\"time\"\n\n\t\"github.com/alexedwards/scs/v2\"\n)\n\ntype GlobalState struct {\n\tCount int\n}\n\nvar global GlobalState\n// highlight-next-line\nvar sessionManager *scs.SessionManager\n\nfunc getHandler(w http.ResponseWriter, r *http.Request) {\n\t// highlight-next-line\n\tuserCount := sessionManager.GetInt(r.Context(), \"count\")\n\tcomponent := page(global.Count, userCount)\n\tcomponent.Render(r.Context(), w)\n}\n\nfunc postHandler(w http.ResponseWriter, r *http.Request) {\n\t// Update state.\n\tr.ParseForm()\n\n\t// Check to see if the global button was pressed.\n\tif r.Form.Has(\"global\") {\n\t\tglobal.Count++\n\t}\n\t// highlight-start\n\tif r.Form.Has(\"user\") {\n\t\tcurrentCount := sessionManager.GetInt(r.Context(), \"count\")\n\t\tsessionManager.Put(r.Context(), \"count\", currentCount+1)\n\t}\n\t// highlight-end\n\n\t// Display the form.\n\tgetHandler(w, r)\n}\n\nfunc main() {\n\t// highlight-start\n\t// Initialize the session.\n\tsessionManager = scs.New()\n\tsessionManager.Lifetime = 24 * time.Hour\n\t// highlight-end\n\n\tmux := http.NewServeMux()\n\n\t// Handle POST and GET requests.\n\tmux.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n\t\tif r.Method == http.MethodPost {\n\t\t\tpostHandler(w, r)\n\t\t\treturn\n\t\t}\n\t\tgetHandler(w, r)\n\t})\n\n\t// highlight-start\n\t// Add the middleware.\n\tmuxWithSessionMiddleware := sessionManager.LoadAndSave(mux)\n\t// highlight-end\n\n\t// Start the server.\n\tfmt.Println(\"listening on http://localhost:8000\")\n\tif err := http.ListenAndServe(\"localhost:8000\", muxWithSessionMiddleware); err != nil {\n\t\tlog.Printf(\"error listening: %v\", err)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Static Blog Pages in Go\nDESCRIPTION: This main function creates the index page and individual blog post pages, converting markdown to HTML and using Templ to render the final output.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/06-static-rendering/02-blog-example.md#2025-04-18_snippet_4\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"bytes\"\n\t\"context\"\n\t\"io\"\n\t\"log\"\n\t\"os\"\n\t\"path\"\n\t\"time\"\n\n\t\"github.com/a-h/templ\"\n\t\"github.com/gosimple/slug\"\n\t\"github.com/yuin/goldmark\"\n)\n\nfunc main() {\n\t// Output path.\n\trootPath := \"public\"\n\tif err := os.Mkdir(rootPath, 0755); err != nil {\n\t\tlog.Fatalf(\"failed to create output directory: %v\", err)\n\t}\n\n\t// Create an index page.\n\tname := path.Join(rootPath, \"index.html\")\n\tf, err := os.Create(name)\n\tif err != nil {\n\t\tlog.Fatalf(\"failed to create output file: %v\", err)\n\t}\n\t// Write it out.\n\terr = indexPage(posts).Render(context.Background(), f)\n\tif err != nil {\n\t\tlog.Fatalf(\"failed to write index page: %v\", err)\n\t}\n\n\t// Create a page for each post.\n\tfor _, post := range posts {\n\t\t// Create the output directory.\n\t\tdir := path.Join(rootPath, post.Date.Format(\"2006/01/02\"), slug.Make(post.Title))\n\t\tif err := os.MkdirAll(dir, 0755); err != nil && err != os.ErrExist {\n\t\t\tlog.Fatalf(\"failed to create dir %q: %v\", dir, err)\n\t\t}\n\n\t\t// Create the output file.\n\t\tname := path.Join(dir, \"index.html\")\n\t\tf, err := os.Create(name)\n\t\tif err != nil {\n\t\t\tlog.Fatalf(\"failed to create output file: %v\", err)\n\t\t}\n\n\t\t// Convert the markdown to HTML, and pass it to the template.\n\t\tvar buf bytes.Buffer\n\t\tif err := goldmark.Convert([]byte(post.Content), &buf); err != nil {\n\t\t\tlog.Fatalf(\"failed to convert markdown to HTML: %v\", err)\n\t\t}\n\n\t\t// Create an unsafe component containing raw HTML.\n\t\tcontent := Unsafe(buf.String())\n\n\t\t// Use templ to render the template containing the raw HTML.\n\t\terr = contentPage(post.Title, content).Render(context.Background(), f)\n\t\tif err != nil {\n\t\t\tlog.Fatalf(\"failed to write output file: %v\", err)\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Lambda Entrypoint for templ Applications in Go\nDESCRIPTION: This snippet demonstrates how to set up the entrypoint for a templ application on AWS Lambda using the algnhsa package. It initializes handlers, sets up a database connection, and starts the Lambda function.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/08-hosting-and-deployment/01-hosting-on-aws-lambda.md#2025-04-18_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"os\"\n\n\t\"github.com/a-h/templ/examples/counter/db\"\n\t\"github.com/a-h/templ/examples/counter/handlers\"\n\t\"github.com/a-h/templ/examples/counter/services\"\n\t\"github.com/a-h/templ/examples/counter/session\"\n\t\"github.com/akrylysov/algnhsa\"\n\t\"golang.org/x/exp/slog\"\n)\n\nfunc main() {\n\t// Create handlers.\n\tlog := slog.New(slog.NewJSONHandler(os.Stderr))\n\ts, err := db.NewCountStore(os.Getenv(\"TABLE_NAME\"), os.Getenv(\"AWS_REGION\"))\n\tif err != nil {\n\t\tlog.Error(\"failed to create store\", slog.Any(\"error\", err))\n\t\tos.Exit(1)\n\t}\n\tcs := services.NewCount(log, s)\n\th := handlers.New(log, cs)\n\n\t// Add session middleware.\n\tsh := session.NewMiddleware(h)\n\n\t// Start Lambda.\n\talgnhsa.ListenAndServe(sh, nil)\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up a Static HTTP Server with templ.Handler\nDESCRIPTION: Implementation of a basic HTTP server that serves a static templ component. The templ.Handler function is used to convert the component into an HTTP handler.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/05-server-side-rendering/01-creating-an-http-server-with-templ.md#2025-04-18_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"net/http\"\n\n\t\"github.com/a-h/templ\"\n)\n\nfunc main() {\n\thttp.Handle(\"/\", templ.Handler(hello()))\n\n\thttp.ListenAndServe(\":8080\", nil)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Event Handlers without Inline Scripts in templ\nDESCRIPTION: Demonstrates a best practice approach to adding client-side behavior to a templ component using script tags and templ.OnceHandle. This method avoids inline event handlers and ensures scripts are only rendered once per request.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/03-syntax-and-usage/12-script-templates.md#2025-04-18_snippet_7\n\nLANGUAGE: templ\nCODE:\n```\npackage main\n\nimport \"net/http\"\n\nvar helloHandle = templ.NewOnceHandle()\n\ntempl hello(label, name string) {\n  @helloHandle.Once() {\n    <script>\n      function hello(name) {\n        alert('Hello, ' + name + '!');\n      }\n    </script>\n  }\n  <div>\n    <input type=\"button\" value={ label } data-name={ name }/>\n    <script>\n      (() => {\n        let scriptElement = document.currentScript;\n        let parent = scriptElement.closest('div');\n        let nearestButtonWithName = parent.querySelector('input[data-name]');\n        nearestButtonWithName.addEventListener('click', function() {\n          let name = nearestButtonWithName.getAttribute('data-name');\n          hello(name);\n        })\n      })()\n    </script>\n  </div>\n}\n\ntempl page() {\n  @hello(\"Hello User\", \"user\")\n  @hello(\"Hello World\", \"world\")\n}\n\nfunc main() {\n  http.Handle(\"/\", templ.Handler(page()))\n  http.ListenAndServe(\"127.0.0.1:8080\", nil)\n}\n```\n\n----------------------------------------\n\nTITLE: Iterating Through a Slice Using a For Loop in Templ\nDESCRIPTION: Example of using Go's standard for loop to iterate over a slice of Item objects and render them as list items in an HTML unordered list. The loop syntax follows Go's range pattern to access each item in the collection.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/03-syntax-and-usage/08-loops.md#2025-04-18_snippet_0\n\nLANGUAGE: templ\nCODE:\n```\npackage main\n\ntempl nameList(items []Item) {\n  <ul>\n  for _, item := range items {\n    <li>{ item.Name }</li>\n  }\n  </ul>\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamic CSS Components with Arguments in Templ\nDESCRIPTION: Demonstrates creating CSS components that accept function arguments to generate dynamic styles. Shows how to create a loading component with variable width percentage.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/03-syntax-and-usage/11-css-style-management.md#2025-04-18_snippet_27\n\nLANGUAGE: templ\nCODE:\n```\npackage main\n\ncss loading(percent int) {\n\twidth: { fmt.Sprintf(\"%d%%\", percent) };\n}\n\ntempl index() {\n    <div class={ loading(50) }></div>\n    <div class={ loading(100) }></div>\n}\n```\n\n----------------------------------------\n\nTITLE: Go Server Implementation for Chart Data\nDESCRIPTION: Go server implementation that provides time-series data to the Templ component for charting, demonstrating data passing from Go to JavaScript.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/03-syntax-and-usage/12-script-templates.md#2025-04-18_snippet_15\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"log\"\n\t\"net/http\"\n)\n\ntype TimeValue struct {\n\tTime  string  `json:\"time\"`\n\tValue float64 `json:\"value\"`\n}\n\nfunc main() {\n\tmux := http.NewServeMux()\n\n\t// Handle template.\n\tmux.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n\t\tdata := []TimeValue{\n\t\t\t{Time: \"2019-04-11\", Value: 80.01},\n\t\t\t{Time: \"2019-04-12\", Value: 96.63},\n\t\t\t{Time: \"2019-04-13\", Value: 76.64},\n\t\t\t{Time: \"2019-04-14\", Value: 81.89},\n\t\t\t{Time: \"2019-04-15\", Value: 74.43},\n\t\t\t{Time: \"2019-04-16\", Value: 80.01},\n\t\t\t{Time: \"2019-04-17\", Value: 96.63},\n\t\t\t{Time: \"2019-04-18\", Value: 76.64},\n\t\t\t{Time: \"2019-04-19\", Value: 81.89},\n\t\t\t{Time: \"2019-04-20\", Value: 74.43},\n\t\t}\n\t\tpage(data).Render(r.Context(), w)\n\t})\n\n\t// Start the server.\n\tfmt.Println(\"listening on :8080\")\n\tif err := http.ListenAndServe(\":8080\", mux); err != nil {\n\t\tlog.Printf(\"error listening: %v\", err)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom HTTP Handler with Dynamic templ Component Rendering\nDESCRIPTION: Implementation of a custom HTTP handler that renders a templ component with dynamic data. This approach allows for displaying real-time information by calling functions at request time rather than server startup.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/05-server-side-rendering/01-creating-an-http-server-with-templ.md#2025-04-18_snippet_5\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"net/http\"\n\t\"time\"\n)\n\nfunc NewNowHandler(now func() time.Time) NowHandler {\n\treturn NowHandler{Now: now}\n}\n\ntype NowHandler struct {\n\tNow func() time.Time\n}\n\nfunc (nh NowHandler) ServeHTTP(w http.ResponseWriter, r *http.Request) {\n\ttimeComponent(nh.Now()).Render(r.Context(), w)\n}\n\nfunc main() {\n\thttp.Handle(\"/\", NewNowHandler(time.Now))\n\n\thttp.ListenAndServe(\":8080\", nil)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Blog Templates with Templ\nDESCRIPTION: This snippet defines the main templates for the blog using Templ syntax. It includes components for the header, content, content page, and index page.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/06-static-rendering/02-blog-example.md#2025-04-18_snippet_0\n\nLANGUAGE: templ\nCODE:\n```\npackage main\n\nimport \"path\"\nimport \"github.com/gosimple/slug\"\n\ntempl headerComponent(title string) {\n\t<head><title>{ title }</title></head>\n}\n\ntempl contentComponent(title string, body templ.Component) {\n\t<body>\n\t\t<h1>{ title }</h1>\n\t\t<div class=\"content\">\n\t\t\t@body\n\t\t</div>\n\t</body>\n}\n\ntempl contentPage(title string, body templ.Component) {\n\t<html>\n\t\t@headerComponent(title)\n\t\t@contentComponent(title, body)\n\t</html>\n}\n\ntempl indexPage(posts []Post) {\n\t<html>\n\t\t@headerComponent(\"My Blog\")\n\t\t<body>\n\t\t\t<h1>My Blog</h1>\n\t\t\tfor _, post := range posts {\n\t\t\t\t<div><a href={ templ.SafeURL(path.Join(post.Date.Format(\"2006/01/02\"), slug.Make(post.Title), \"/\")) }>{ post.Title }</a></div>\n\t\t\t}\n\t\t</body>\n\t</html>\n}\n```\n\n----------------------------------------\n\nTITLE: Streaming Page Template Implementation\nDESCRIPTION: Example of a Templ page template that implements streaming using channels and Flush() component for real-time data rendering.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/05-server-side-rendering/05-streaming.md#2025-04-18_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ntempl Page(data chan string) {\n\t<!DOCTYPE html>\n\t<html>\n\t\t<head>\n\t\t\t<title>Page</title>\n\t\t</head>\n\t\t<body>\n\t\t\t<h1>Page</h1>\n\t\t\tfor d := range data {\n\t\t\t\t@templ.Flush() {\n\t\t\t\t\t<div>{ d }</div>\n\t\t\t\t}\n\t\t\t}\n\t\t</body>\n\t</html>\n}\n```\n\n----------------------------------------\n\nTITLE: Application Entrypoint Configuration\nDESCRIPTION: Main application entry point showing dependency wiring and HTTP server configuration.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/07-project-structure/01-project-structure.md#2025-04-18_snippet_4\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"os\"\n\t\"time\"\n\n\t\"github.com/a-h/templ/examples/counter/db\"\n\t\"github.com/a-h/templ/examples/counter/handlers\"\n\t\"github.com/a-h/templ/examples/counter/services\"\n\t\"github.com/a-h/templ/examples/counter/session\"\n\t\"golang.org/x/exp/slog\"\n)\n\nfunc main() {\n\tlog := slog.New(slog.NewJSONHandler(os.Stderr))\n\ts, err := db.NewCountStore(os.Getenv(\"TABLE_NAME\"), os.Getenv(\"AWS_REGION\"))\n\tif err != nil {\n\t\tlog.Error(\"failed to create store\", slog.Any(\"error\", err))\n\t\tos.Exit(1)\n\t}\n\tcs := services.NewCount(log, s)\n\th := handlers.New(log, cs)\n\n\tvar secureFlag = true\n\tif os.Getenv(\"SECURE_FLAG\") == \"false\" {\n\t\tsecureFlag = false\n\t}\n\n\tsh := session.NewMiddleware(h, session.WithSecure(secureFlag))\n\n\tserver := &http.Server{\n\t\tAddr:         \"localhost:9000\",\n\t\tHandler:      sh,\n\t\tReadTimeout:  time.Second * 10,\n\t\tWriteTimeout: time.Second * 10,\n\t}\n\n\tfmt.Printf(\"Listening on %v\\n\", server.Addr)\n\tserver.ListenAndServe()\n}\n```\n\n----------------------------------------\n\nTITLE: Conditional Rendering in templ Component\nDESCRIPTION: A templ component that uses an if/else statement to conditionally render different HTML elements based on a login status boolean. When logged in, displays a welcome message; when logged out, shows a login button.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/03-syntax-and-usage/06-if-else.md#2025-04-18_snippet_0\n\nLANGUAGE: templ\nCODE:\n```\ntempl login(isLoggedIn bool) {\n  if isLoggedIn {\n    <div>Welcome back!</div>\n  } else {\n    <input name=\"login\" type=\"button\" value=\"Log in\"/>\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Conditional Rendering with If Statement in Templ\nDESCRIPTION: Demonstrates how to use an if statement to conditionally render a paragraph element based on a boolean input.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/03-syntax-and-usage/05-statements.md#2025-04-18_snippet_0\n\nLANGUAGE: templ\nCODE:\n```\npackage main\n\ntempl showHelloIfTrue(b bool) {\n\t<div>\n\t\tif b {\n\t\t\t<p>Hello</p>\n\t\t}\n\t</div>\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Global State Handling in Go\nDESCRIPTION: Go code for a web server that handles both GET and POST requests, updating a global counter when the global button is pressed. This implementation maintains the global state in memory using a struct.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/05-server-side-rendering/02-example-counter-application.md#2025-04-18_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"log\"\n\t\"net/http\"\n)\n\ntype GlobalState struct {\n\tCount int\n}\n\nvar global GlobalState\n\nfunc getHandler(w http.ResponseWriter, r *http.Request) {\n\tcomponent := page(global.Count, 0)\n\tcomponent.Render(r.Context(), w)\n}\n\nfunc postHandler(w http.ResponseWriter, r *http.Request) {\n\t// Update state.\n\tr.ParseForm()\n\n\t// Check to see if the global button was pressed.\n\tif r.Form.Has(\"global\") {\n\t\tglobal.Count++\n\t}\n\t//TODO: Update session.\n\n\t// Display the form.\n\tgetHandler(w, r)\n}\n\nfunc main() {\n\t// Handle POST and GET requests.\n\thttp.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n\t\tif r.Method == http.MethodPost {\n\t\t\tpostHandler(w, r)\n\t\t\treturn\n\t\t}\n\t\tgetHandler(w, r)\n\t})\n\n\t// Start the server.\n\tfmt.Println(\"listening on http://localhost:8000\")\n\tif err := http.ListenAndServe(\"localhost:8000\", nil); err != nil {\n\t\tlog.Printf(\"error listening: %v\", err)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Reactive UI Components with Templ and Datastar\nDESCRIPTION: Frontend components for a counter application using Datastar and Templ. The code defines signals for global and user counter states, buttons to increment counters, and display components with reactive data bindings.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/05-server-side-rendering/04-datastar.md#2025-04-18_snippet_0\n\nLANGUAGE: templ\nCODE:\n```\npackage site\n\nimport datastar \"github.com/starfederation/datastar/sdk/go\"\n\ntype TemplCounterSignals struct {\n\tGlobal uint32 `json:\"global\"`\n\tUser   uint32 `json:\"user\"`\n}\n\ntempl templCounterExampleButtons() {\n\t<div>\n\t\t<button\n\t\t\tdata-on-click=\"@post('/examples/templ_counter/increment/global')\" \n\t\t>\n\t\t\tIncrement Global\n\t\t</button>\n\t\t<button\n\t\t\tdata-on-click={ datastar.PostSSE('/examples/templ_counter/increment/user') }\n\t\t\t<!-- Alternative: Using Datastar SDK sugar--> \n\t\t>\n\t\t\tIncrement User\n\t\t</button>\n\t</div>\n}\n\ntempl templCounterExampleCounts() {\n\t<div>\n\t\t<div>\n\t\t\t<div>Global</div>\n\t\t\t<div data-text=\"$global\"></div>\n\t\t</div>\n\t\t<div>\n\t\t\t<div>User</div>\n\t\t\t<div data-text=\"$user\"></div>\n\t\t</div>\n\t</div>\n}\n\ntempl templCounterExampleInitialContents(signals TemplCounterSignals) {\n\t<div\n\t\tid=\"container\"\n\t\tdata-signals={ templ.JSONString(signals) }\n\t>\n\t\t@templCounterExampleButtons()\n\t\t@templCounterExampleCounts()\n\t</div>\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic JavaScript in templ Component\nDESCRIPTION: Demonstrates how to include a JavaScript function and use it with an HTML button in a templ component. The example shows a simple click handler function.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/03-syntax-and-usage/12-script-templates.md#2025-04-18_snippet_0\n\nLANGUAGE: templ\nCODE:\n```\ntempl body() {\n  <script>\n    function handleClick(event) {\n      alert(event + ' clicked');\n    }\n  </script>\n  <button onclick=\"handleClick(this)\">Click me</button>\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Script Templates with Data Integration\nDESCRIPTION: Using script templates in Templ to pass Go data to JavaScript functions, demonstrated with a charting example that renders time-series data.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/03-syntax-and-usage/12-script-templates.md#2025-04-18_snippet_14\n\nLANGUAGE: templ\nCODE:\n```\npackage main\n\nscript graph(data []TimeValue) {\n\tconst chart = LightweightCharts.createChart(document.body, { width: 400, height: 300 });\n\tconst lineSeries = chart.addLineSeries();\n\tlineSeries.setData(data);\n}\n\ntempl page(data []TimeValue) {\n\t<html>\n\t\t<head>\n\t\t\t<script src=\"https://unpkg.com/lightweight-charts/dist/lightweight-charts.standalone.production.js\"></script>\n\t\t</head>\n\t\t<body onload={ graph(data) }></body>\n\t</html>\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing CSP Nonce Middleware in Go\nDESCRIPTION: Go implementation of middleware that generates a secure nonce, adds it to the Content-Security-Policy header, and passes it to Templ templates via context.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/10-security/02-content-security-policy.md#2025-04-18_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"log\"\n\t\"net/http\"\n\t\"time\"\n)\n\nfunc withNonce(next http.Handler) http.Handler {\n\treturn http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\t\tnonce := securelyGenerateRandomString()\n\t\tw.Header().Add(\"Content-Security-Policy\", fmt.Sprintf(\"script-src 'nonce-%s'\", nonce))\n\t\t// Use the context to pass the nonce to the handler.\n\t\tctx := templ.WithNonce(r.Context(), nonce)\n\t\tnext.ServeHTTP(w, r.WithContext(ctx))\n\t})\n}\n\nfunc main() {\n\tmux := http.NewServeMux()\n\n\t// Handle template.\n\tmux.HandleFunc(\"/\", templ.Handler(template()))\n\n\t// Apply middleware.\n\twithNonceMux := withNonce(mux)\n\n\t// Start the server.\n\tfmt.Println(\"listening on :8080\")\n\tif err := http.ListenAndServe(\":8080\", withNonceMux); err != nil {\n\t\tlog.Printf(\"error listening: %v\", err)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Interpolating Go Data in JavaScript within templ\nDESCRIPTION: Shows how to use {{ value }} syntax to interpolate Go data within JavaScript code in a templ component. This method allows for direct use of server-side variables in client-side scripts.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/03-syntax-and-usage/12-script-templates.md#2025-04-18_snippet_6\n\nLANGUAGE: templ\nCODE:\n```\ntempl body(msg string) {\n  <script>\n    const message = \"Your message: {{ msg }}\";\n    alert(message);\n  </script>\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Header Component with goquery in Go\nDESCRIPTION: Shows how to test a templ header component by rendering it to an io.Pipe, parsing with goquery, and verifying both the presence of a data-testid attribute and the correct page name in the h1 element.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/04-core-concepts/03-testing.md#2025-04-18_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nfunc TestHeader(t *testing.T) {\n    // Pipe the rendered template into goquery.\n    r, w := io.Pipe()\n    go func () {\n        _ = headerTemplate(\"Posts\").Render(context.Background(), w)\n        _ = w.Close()\n    }()\n    doc, err := goquery.NewDocumentFromReader(r)\n    if err != nil {\n        t.Fatalf(\"failed to read template: %v\", err)\n    }\n    // Expect the component to be present.\n    if doc.Find(`[data-testid=\"headerTemplate\"]`).Length() == 0 {\n        t.Error(\"expected data-testid attribute to be rendered, but it wasn't\")\n    }\n    // Expect the page name to be set correctly.\n    expectedPageName := \"Posts\"\n    if actualPageName := doc.Find(\"h1\").Text(); actualPageName != expectedPageName {\n        t.Errorf(\"expected page name %q, got %q\", expectedPageName, actualPageName)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Service Layer Implementation with Database Access\nDESCRIPTION: Service layer code showing database interaction and parallel processing of counter operations.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/07-project-structure/01-project-structure.md#2025-04-18_snippet_3\n\nLANGUAGE: go\nCODE:\n```\ntype Counts struct {\n\tGlobal  int\n\tSession int\n}\n\nfunc (cs Count) Get(ctx context.Context, sessionID string) (counts Counts, err error) {\n\tglobalAndSessionCounts, err := cs.CountStore.BatchGet(ctx, \"global\", sessionID)\n\tif err != nil {\n\t\terr = fmt.Errorf(\"countservice: failed to get counts: %w\", err)\n\t\treturn\n\t}\n\tif len(globalAndSessionCounts) != 2 {\n\t\terr = fmt.Errorf(\"countservice: unexpected counts returned, expected 2, got %d\", len(globalAndSessionCounts))\n\t}\n\tcounts.Global = globalAndSessionCounts[0]\n\tcounts.Session = globalAndSessionCounts[1]\n\treturn\n}\n```\n\nLANGUAGE: go\nCODE:\n```\nfunc (cs Count) Increment(ctx context.Context, it IncrementType, sessionID string) (counts Counts, err error) {\n\tvar global, session func(ctx context.Context, id string) (count int, err error)\n\tswitch it {\n\tcase IncrementTypeGlobal:\n\t\tglobal = cs.CountStore.Increment\n\t\tsession = cs.CountStore.Get\n\tcase IncrementTypeSession:\n\t\tglobal = cs.CountStore.Get\n\t\tsession = cs.CountStore.Increment\n\tdefault:\n\t\treturn counts, ErrUnknownIncrementType\n\t}\n\n\tvar wg sync.WaitGroup\n\twg.Add(2)\n\terrs := make([]error, 2)\n\tgo func() {\n\t\tdefer wg.Done()\n\t\tcounts.Global, errs[0] = global(ctx, \"global\")\n\t}()\n\tgo func() {\n\t\tdefer wg.Done()\n\t\tcounts.Session, errs[1] = session(ctx, sessionID)\n\t}()\n\twg.Wait()\n\n\treturn counts, errors.Join(errs...)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining templ Component for use with html/template\nDESCRIPTION: This snippet defines a templ component 'greeting' and an html/template 'example' that will be used together in the main Go code.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/03-syntax-and-usage/15-using-with-go-templates.md#2025-04-18_snippet_3\n\nLANGUAGE: templ\nCODE:\n```\npackage testgotemplates\n\nimport \"html/template\"\n\nvar example = template.Must(template.New(\"example\").Parse(`<!DOCTYPE html>\n<html>\n\t<body>\n\t\t{{ . }}\n\t</body>\n</html>\n`))\n\ntempl greeting() {\n\t<div>Hello, World!</div>\n}\n```\n\n----------------------------------------\n\nTITLE: Passing Go Data to JavaScript Event Handler in templ\nDESCRIPTION: Shows how to use templ.JSFuncCall to pass server-side data to a client-side JavaScript function. This example demonstrates passing a message to an alert function.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/03-syntax-and-usage/12-script-templates.md#2025-04-18_snippet_1\n\nLANGUAGE: templ\nCODE:\n```\ntempl Component(data CustomType) {\n\t<button onclick={ templ.JSFuncCall(\"alert\", data.Message) }>Show alert</button>\n}\n```\n\n----------------------------------------\n\nTITLE: Passing Server-Side Data via Script Element in templ\nDESCRIPTION: Demonstrates using templ.JSONScript to pass server-side data to the client in a script element. This method allows for larger amounts of data to be transferred efficiently.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/03-syntax-and-usage/12-script-templates.md#2025-04-18_snippet_5\n\nLANGUAGE: templ\nCODE:\n```\ntempl body(data any) {\n  @templ.JSONScript(\"id\", data)\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring internationalization middleware in Go web application\nDESCRIPTION: Main function that loads translations, sets up an HTTP server with internationalization middleware, and handles routing. It demonstrates integration of the language middleware with the templ handler.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/12-integrations/02-internationalization.md#2025-04-18_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nfunc main() {\n\tif err := ctxi18n.Load(locales.Content); err != nil {\n\t\tlog.Fatalf(\"error loading locales: %v\", err)\n\t}\n\n\tmux := http.NewServeMux()\n\tmux.Handle(\"/\", templ.Handler(page()))\n\n\twithLanguageMiddleware := newLanguageMiddleware(mux)\n\n\tlog.Println(\"listening on :8080\")\n\tif err := http.ListenAndServe(\"127.0.0.1:8080\", withLanguageMiddleware); err != nil {\n\t\tlog.Printf(\"error listening: %v\", err)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Inline Script in Templ Template\nDESCRIPTION: A Templ template file that defines an inline JavaScript alert function to be executed on page load.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/10-security/02-content-security-policy.md#2025-04-18_snippet_0\n\nLANGUAGE: templ\nCODE:\n```\npackage main\n\nimport \"context\"\nimport \"os\"\n\nscript onLoad() {\n    alert(\"Hello, world!\")\n}\n\ntempl template() {\n    @onLoad()\n}\n```\n\n----------------------------------------\n\nTITLE: Updated templ Component with React Integration\nDESCRIPTION: Enhances the templ component to include server-side data passing to React components. It demonstrates rendering multiple instances of a React component with different data.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/03-syntax-and-usage/17-using-react-with-templ.md#2025-04-18_snippet_7\n\nLANGUAGE: templ\nCODE:\n```\npackage main\n\nimport \"fmt\"\n\ntempl Hello(name string) {\n\t<div data-name={ name }>\n\t\t<script>\n\t\t\tbundle.renderHello(document.currentScript.closest('div'));\n\t\t</script>\n\t</div>\n}\n\ntempl page() {\n\t<html>\n\t\t<head>\n\t\t\t<title>React integration</title>\n\t\t</head>\n\t\t<body>\n\t\t\t<div id=\"react-header\"></div>\n\t\t\t<div id=\"react-content\"></div>\n\t\t\t<div>\n\t\t\t\tThis is server-side content from templ.\n\t\t\t</div>\n\t\t\t<!-- Load the React bundle that was created using esbuild -->\n\t\t\t<!-- Since the bundle was coded to expect the react-header and react-content elements to exist already, in this case, the script has to be loaded after the elements are on the page -->\n\t\t\t<script src=\"static/index.js\"></script>\n\t\t\t<!-- Now that the React bundle is loaded, we can use the functions that are in it -->\n\t\t\t<!-- the renderName function in the bundle can be used, but we want to pass it some server-side data -->\n\t\t\tfor _, name := range []string{\"Alice\", \"Bob\", \"Charlie\"} {\n\t\t\t\t@Hello(name)\n\t\t\t}\n\t\t</body>\n\t</html>\n}\n```\n\n----------------------------------------\n\nTITLE: Using Components as Parameters in Templ\nDESCRIPTION: Illustrates how to pass components as parameters and render them using the @component expression. It includes examples of defining layout and content components.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/03-syntax-and-usage/10-template-composition.md#2025-04-18_snippet_4\n\nLANGUAGE: templ\nCODE:\n```\npackage main\n\ntempl heading() {\n    <h1>Heading</h1>\n}\n\ntempl layout(contents templ.Component) {\n\t<div id=\"heading\">\n\t\t@heading()\n\t</div>\n\t<div id=\"contents\">\n\t\t@contents\n\t</div>\n}\n\ntempl paragraph(contents string) {\n\t<p>{ contents }</p>\n}\n```\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\t\"os\"\n)\n\nfunc main() {\n\tc := paragraph(\"Dynamic contents\")\n\tlayout(c).Render(context.Background(), os.Stdout)\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Dockerfile for Templ Applications\nDESCRIPTION: A Dockerfile that builds a Go application using templ in a two-stage build process. It copies static assets from the build stage to the deployment container to make them available in the running application.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/08-hosting-and-deployment/02-hosting-using-docker.md#2025-04-18_snippet_0\n\nLANGUAGE: Dockerfile\nCODE:\n```\n# Build.\nFROM golang:1.20 AS build-stage\nWORKDIR /app\nCOPY go.mod go.sum ./\nRUN go mod download\nCOPY . /app\nRUN CGO_ENABLED=0 GOOS=linux go build -o /entrypoint\n\n# Deploy.\nFROM gcr.io/distroless/static-debian11 AS release-stage\nWORKDIR /\nCOPY --from=build-stage /entrypoint /entrypoint\nCOPY --from=build-stage /app/assets /assets\nEXPOSE 8080\nUSER nonroot:nonroot\nENTRYPOINT [\"/entrypoint\"]\n```\n\n----------------------------------------\n\nTITLE: Creating Sample Blog Posts in Go\nDESCRIPTION: This snippet demonstrates how to create sample blog posts using the Post struct, including dates, titles, and markdown content.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/06-static-rendering/02-blog-example.md#2025-04-18_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nposts := []Post{\n\t{\n\t\tDate:  time.Date(2023, time.January, 1, 0, 0, 0, 0, time.UTC),\n\t\tTitle: \"Happy New Year!\",\n\t\tContent: `New Year is a widely celebrated occasion in the United Kingdom, marking the end of one year and the beginning of another.\n\nTop New Year Activities in the UK include:\n\n* Attending a Hogmanay celebration in Scotland\n* Taking part in a local First-Foot tradition in Scotland and Northern England\n* Setting personal resolutions and goals for the upcoming year\n* Going for a New Year's Day walk to enjoy the fresh start\n* Visiting a local pub for a celebratory toast and some cheer\n`,\n\t},\n\t{\n\t\tDate:  time.Date(2023, time.May, 1, 0, 0, 0, 0, time.UTC),\n\t\tTitle: \"May Day\",\n\t\tContent: `May Day is an ancient spring festival celebrated on the first of May in the United Kingdom, embracing the arrival of warmer weather and the renewal of life.\n\nTop May Day Activities in the UK:\n\n* Dancing around the Maypole, a traditional folk activity\n* Attending local village fetes and fairs\n* Watching or participating in Morris dancing performances\n* Enjoying the public holiday known as Early May Bank Holiday\n`,\n\t},\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamic Attribute and Content Component\nDESCRIPTION: Shows how to use placeholder expressions for both attributes and content in templ components.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/03-syntax-and-usage/02-elements.md#2025-04-18_snippet_3\n\nLANGUAGE: templ\nCODE:\n```\npackage main\n\ntempl button(name string, content string) {\n\t<button value={ name }>{ content }</button>\n}\n```\n\n----------------------------------------\n\nTITLE: Using JSExpression for DOM Events in Templ\nDESCRIPTION: Demonstrates using templ.JSExpression to pass JavaScript events to script templates, shown with a button click example that changes button text temporarily.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/03-syntax-and-usage/12-script-templates.md#2025-04-18_snippet_19\n\nLANGUAGE: templ\nCODE:\n```\npackage main\n\nscript showButtonWasClicked(event templ.JSExpression) {\n\tconst originalButtonText = event.target.innerText\n\tevent.target.innerText = \"I was Clicked!\"\n\tsetTimeout(() => event.target.innerText = originalButtonText, 2000)\n}\n\ntempl page() {\n\t<html>\n\t\t<body>\n\t\t\t<button type=\"button\" onclick={ showButtonWasClicked(templ.JSExpression(\"event\")) }>Click Me</button>\n\t\t</body>\n\t</html>\n}\n```\n\n----------------------------------------\n\nTITLE: Serving Static Content in Go with HTTP FileServer\nDESCRIPTION: Go code that sets up an HTTP server with routes for application endpoints and static content. It uses http.FileServer with StripPrefix to serve static assets from the assets directory.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/08-hosting-and-deployment/02-hosting-using-docker.md#2025-04-18_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nfunc main() {\n\t// Initialize the session.\n\tsessionManager = scs.New()\n\tsessionManager.Lifetime = 24 * time.Hour\n\n\tmux := http.NewServeMux()\n\n\t// Handle POST and GET requests.\n\tmux.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n\t\tif r.Method == http.MethodPost {\n\t\t\tpostHandler(w, r)\n\t\t\treturn\n\t\t}\n\t\tgetHandler(w, r)\n\t})\n\n\t// Include the static content.\n\tmux.Handle(\"/assets/\", http.StripPrefix(\"/assets/\", http.FileServer(http.Dir(\"assets\"))))\n\n\t// Add the middleware.\n\tmuxWithSessionMiddleware := sessionManager.LoadAndSave(mux)\n\n\t// Start the server.\n\tfmt.Println(\"listening on :8080\")\n\tif err := http.ListenAndServe(\":8080\", muxWithSessionMiddleware); err != nil {\n\t\tlog.Printf(\"error listening: %v\", err)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Dependency Injection in Go HTTP Handler\nDESCRIPTION: Example of dependency injection pattern in Go showing handler struct definition and constructor with service interface.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/07-project-structure/01-project-structure.md#2025-04-18_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ntype CountService interface {\n\tIncrement(ctx context.Context, it services.IncrementType, sessionID string) (counts services.Counts, err error)\n\tGet(ctx context.Context, sessionID string) (counts services.Counts, err error)\n}\n\nfunc New(log *slog.Logger, cs CountService) *DefaultHandler {\n\treturn &DefaultHandler{\n\t\tLog:          log,\n\t\tCountService: cs,\n\t}\n}\n\ntype DefaultHandler struct {\n\tLog          *slog.Logger\n\tCountService CountService\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Method Components in templ\nDESCRIPTION: Example of creating a templ component as a method on a struct type, allowing the component to access the struct's data.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/04-core-concepts/01-components.md#2025-04-18_snippet_5\n\nLANGUAGE: templ\nCODE:\n```\npackage main\n\nimport \"os\"\n\ntype Data struct {\n\tmessage string\n}\n\ntempl (d Data) Method() {\n\t<div>{ d.message }</div>\n}\n\nfunc main() {\n\td := Data{\n\t\tmessage: \"You can implement methods on a type.\",\n\t}\n\td.Method().Render(context.Background(), os.Stdout)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Boolean Attributes in templ\nDESCRIPTION: Demonstrates the use of boolean attributes in templ, including static and dynamic boolean attribute setting.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/03-syntax-and-usage/03-attributes.md#2025-04-18_snippet_2\n\nLANGUAGE: templ\nCODE:\n```\ntempl component() {\n  <hr noshade/>\n}\n```\n\nLANGUAGE: templ\nCODE:\n```\ntempl component() {\n  <hr noshade?={ false } />\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Tailwind CSS Content Paths for Templ Files\nDESCRIPTION: JavaScript configuration for Tailwind CSS to recognize content in HTML, Templ, and Go files. This ensures Tailwind processes classes used in these file types.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/09-developer-tools/02-ide-support.md#2025-04-18_snippet_8\n\nLANGUAGE: js\nCODE:\n```\nmodule.exports = {\n    content: [ \"./**/*.html\", \"./**/*.templ\", \"./**/*.go\", ],\n    theme: { extend: {}, },\n    plugins: [],\n}\n```\n\n----------------------------------------\n\nTITLE: Go Comments in Templ Files\nDESCRIPTION: Illustrates the use of Go-style comments outside of templ statements, combining both Go and templ syntax in a single file with proper commenting conventions.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/03-syntax-and-usage/13-comments.md#2025-04-18_snippet_2\n\nLANGUAGE: templ\nCODE:\n```\npackage main\n\n// Use standard Go comments outside templ statements.\nvar greeting = \"Hello!\"\n\ntempl hello(name string) {\n\t<p>{greeting} { name }</p>\n}\n```\n\n----------------------------------------\n\nTITLE: Using Spread Attributes in templ\nDESCRIPTION: Demonstrates how to use spread attributes to dynamically add a map of attributes to an element in templ.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/03-syntax-and-usage/03-attributes.md#2025-04-18_snippet_4\n\nLANGUAGE: templ\nCODE:\n```\ntempl component(shouldBeUsed bool, attrs templ.Attributes) {\n  <p { attrs... }>Text</p>\n  <hr\n    if shouldBeUsed {\n      { attrs... }\n    }\n  />\n}\n\ntempl usage() {\n  @component(false, templ.Attributes{\"data-testid\": \"paragraph\"}) \n}\n```\n\n----------------------------------------\n\nTITLE: Getting Children from Context in Go with Templ\nDESCRIPTION: Demonstrates how to retrieve children from the context using the templ.GetChildren function and render them within a wrapper component.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/03-syntax-and-usage/10-template-composition.md#2025-04-18_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n  \"context\"\n  \"os\"\n\n  \"github.com/a-h/templ\"\n)\n\nfunc main() {\n  contents := templ.ComponentFunc(func(ctx context.Context, w io.Writer) error {\n    _, err := io.WriteString(w, \"<div>Inserted from Go code</div>\")\n    return err\n  })\n  wrapChildren := templ.ComponentFunc(func(ctx context.Context, w io.Writer) error {\n    children := templ.GetChildren(ctx)\n    ctx = templ.ClearChildren(ctx)\n    _, err := io.WriteString(w, \"<div id=\\\"wrapper\\\">\")\n    if err != nil {\n      return err\n    }\n    err = children.Render(ctx, w)\n    if err != nil {\n      return err\n    }\n    _, err = io.WriteString(w, \"</div>\")\n    return err\n  })\n```\n\n----------------------------------------\n\nTITLE: Snapshot Testing with HTML Diff in Go\nDESCRIPTION: Implementation of snapshot testing that compares rendered HTML output against a previously saved expected.html file, using htmldiff to format and highlight differences for easier debugging.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/04-core-concepts/03-testing.md#2025-04-18_snippet_6\n\nLANGUAGE: go\nCODE:\n```\npackage testcomment\n\nimport (\n\t_ \"embed\"\n\t\"testing\"\n\n\t\"github.com/a-h/templ/generator/htmldiff\"\n)\n\n//go:embed expected.html\nvar expected string\n\nfunc Test(t *testing.T) {\n\tcomponent := render(\"sample content\")\n\n\tdiff, err := htmldiff.Diff(component, expected)\n\tif err != nil {\n\t\tt.Fatal(err)\n\t}\n\tif diff != \"\" {\n\t\tt.Error(diff)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Context Usage in Templ\nDESCRIPTION: Shows how to access context values within a Templ component using the implicit ctx variable.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/03-syntax-and-usage/14-context.md#2025-04-18_snippet_2\n\nLANGUAGE: templ\nCODE:\n```\ntempl themeName() {\n\t<div>{ ctx.Value(themeContextKey).(string) }</div>\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Basic templ Components with Go\nDESCRIPTION: Demonstrates how to create templ components that render HTML. The example shows two components: a simple Hello component that takes a name parameter, and a Greeting component that composes the Hello component while accepting a Person struct.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/index.md#2025-04-18_snippet_0\n\nLANGUAGE: templ\nCODE:\n```\npackage main\n\ntempl Hello(name string) {\n  <div>Hello, { name }</div>\n}\n\ntempl Greeting(person Person) {\n  <div class=\"greeting\">\n    @Hello(person.Name)\n  </div>\n}\n```\n\n----------------------------------------\n\nTITLE: Creating CSS Components in Templ\nDESCRIPTION: Shows how to create CSS components that generate unique class names and include the necessary styles only once per request.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/03-syntax-and-usage/11-css-style-management.md#2025-04-18_snippet_25\n\nLANGUAGE: templ\nCODE:\n```\npackage main\n\nvar red = \"#ff0000\"\nvar blue = \"#0000ff\"\n\ncss primaryClassName() {\n\tbackground-color: #ffffff;\n\tcolor: { red };\n}\n\ncss className() {\n\tbackground-color: #ffffff;\n\tcolor: { blue };\n}\n\ntempl button(text string, isPrimary bool) {\n\t<button class={ \"button\", className(), templ.KV(primaryClassName(), isPrimary) }>{ text }</button>\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up a TypeScript Project with NPM\nDESCRIPTION: Commands to create a new TypeScript project with NPM, install TypeScript and esbuild as development dependencies, and create a source directory for code.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/03-syntax-and-usage/12-script-templates.md#2025-04-18_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nmkdir ts\ncd ts\nnpm init\nnpm install --save-dev typescript esbuild\n```\n\nLANGUAGE: bash\nCODE:\n```\nmkdir src\n```\n\n----------------------------------------\n\nTITLE: Bypassing CSS Sanitization in Templ\nDESCRIPTION: Shows how to use templ.SafeCSS to bypass sanitization for trusted CSS values. This is useful for complex transformations and positioning.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/03-syntax-and-usage/11-css-style-management.md#2025-04-18_snippet_10\n\nLANGUAGE: templ\nCODE:\n```\nfunc calculatePositionStyles(x, y int) templ.SafeCSS {\n    return templ.SafeCSS(fmt.Sprintf(\n        \"transform: translate(%dpx, %dpx);\",\n        x*2,  // Example calculation\n        y*2,\n    ))\n}\n\ntempl DraggableElement(x, y int) {\n    <div style={ calculatePositionStyles(x, y) }>\n        Drag me\n    </div>\n}\n```\n\n----------------------------------------\n\nTITLE: Using Components with HandleFunc and Direct Rendering\nDESCRIPTION: Example showing how to render a templ component directly inside an HTTP handler function. The Render method is called on the component to write HTML to the response writer.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/05-server-side-rendering/01-creating-an-http-server-with-templ.md#2025-04-18_snippet_4\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"net/http\"\n)\n\nfunc main() {\n\thttp.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n\t\thello().Render(r.Context(), w)\n\t})\n\n\thttp.ListenAndServe(\":8080\", nil)\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Form Components with CSRF Protection in Templ\nDESCRIPTION: This Templ code creates two components: a Form component that displays a form with CSRF protection and a demonstration form without it, and a CSRF component that generates the hidden input field containing the CSRF token from the context.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/12-integrations/01-web-frameworks.md#2025-04-18_snippet_1\n\nLANGUAGE: templ\nCODE:\n```\ntempl Form() {\n  <h1>CSRF Example</h1>\n  <form method=\"post\" action=\"/\">\n    @CSRF()\n    <div>\n      If you inspect the HTML form, you will see a hidden field with the value: { ctx.Value(\"gorilla.csrf.Token\").(string) }\n    </div>\n    <input type=\"submit\" value=\"Submit with CSRF token\"/>\n  </form>\n  <form method=\"post\" action=\"/\">\n    <div>\n      You can also submit the form without the CSRF token to validate that the CSRF protection is working.\n    </div>\n    <input type=\"submit\" value=\"Submit without CSRF token\"/>\n  </form>\n}\n\ntempl CSRF() {\n  <input type=\"hidden\" name=\"gorilla.csrf.Token\" value={ ctx.Value(\"gorilla.csrf.Token\").(string) }/>\n}\n```\n\n----------------------------------------\n\nTITLE: Suspense Page Template with Shadow DOM\nDESCRIPTION: Advanced implementation of a page template using Declarative Shadow DOM for content loading with suspense-like functionality.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/05-server-side-rendering/05-streaming.md#2025-04-18_snippet_4\n\nLANGUAGE: go\nCODE:\n```\ntempl Page(data chan SlotContents) {\n\t<!DOCTYPE html>\n\t<html>\n\t\t<head>\n\t\t\t<title>Page</title>\n\t\t</head>\n\t\t<body>\n\t\t\t<h1>Page</h1>\n\t\t\t@templ.Flush() {\n\t\t\t\t<template shadowrootmode=\"open\">\n\t\t\t\t\t@Slot(\"a\")\n\t\t\t\t\t@Slot(\"b\")\n\t\t\t\t\t@Slot(\"c\")\n\t\t\t\t</template>\n\t\t\t}\n\t\t\tfor sc := range data {\n\t\t\t\t@templ.Flush() {\n\t\t\t\t\t<div slot={ sc.Name }>\n\t\t\t\t\t\t@sc.Contents\n\t\t\t\t\t</div>\n\t\t\t\t}\n\t\t\t}\n\t\t</body>\n\t</html>\n}\n```\n\n----------------------------------------\n\nTITLE: Output: Function Call With Proper Parameter Spacing in Templ\nDESCRIPTION: The corrected version of the templ template showing proper formatting with appropriate spacing between function parameters, specifically adding a space after the comma separator in the 'Other' function call.\nSOURCE: https://github.com/a-h/templ/blob/main/parser/v2/formattestdata/templelement_param_spacing.txt#2025-04-18_snippet_1\n\nLANGUAGE: templ\nCODE:\n```\npackage p\n\ntempl f() {\n\t@Other(p.Test, \"s\")\n}\n```\n\n----------------------------------------\n\nTITLE: HTML Tag Closure Example in templ\nDESCRIPTION: Demonstrates proper HTML element closure in templ, including self-closing tags for void elements.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/03-syntax-and-usage/02-elements.md#2025-04-18_snippet_2\n\nLANGUAGE: templ\nCODE:\n```\npackage main\n\ntempl component() {\n\t<div>Test</div>\n\t<img src=\"images/test.png\"/>\n\t<br/>\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Code-Only Component in Go\nDESCRIPTION: Example of implementing a templ.Component interface directly in Go code without using .templ files, creating a simple button component.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/04-core-concepts/01-components.md#2025-04-18_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\t\"io\"\n\t\"os\"\n\n\t\"github.com/a-h/templ\"\n)\n\nfunc button(text string) templ.Component {\n\treturn templ.ComponentFunc(func(ctx context.Context, w io.Writer) error {\n\t\t_, err := io.WriteString(w, \"<button>\"+text+\"</button>\")\n\t\treturn err\n\t})\n}\n\nfunc main() {\n\tbutton(\"Click me\").Render(context.Background(), os.Stdout)\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring HTML LSP for Templ Files in Neovim\nDESCRIPTION: Lua configuration to set up the HTML language server for both HTML and Templ files in Neovim. This allows HTML language features to work within Templ templates.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/09-developer-tools/02-ide-support.md#2025-04-18_snippet_5\n\nLANGUAGE: lua\nCODE:\n```\nlspconfig.html.setup({\n    on_attach = on_attach,\n    capabilities = capabilities,\n    filetypes = { \"html\", \"templ\" },\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing language middleware in Go for URL-based locale selection\nDESCRIPTION: HTTP middleware function that selects language based on URL path segments. It extracts the language code from the URL path and stores it in the request context using ctxi18n.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/12-integrations/02-internationalization.md#2025-04-18_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nfunc newLanguageMiddleware(next http.Handler) http.Handler {\n\treturn http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\t\tlang := \"en\" // Default language\n\t\tpathSegments := strings.Split(r.URL.Path, \"/\")\n\t\tif len(pathSegments) > 1 {\n\t\t\tlang = pathSegments[1]\n\t\t}\n\t\tctx, err := ctxi18n.WithLocale(r.Context(), lang)\n\t\tif err != nil {\n\t\t\tlog.Printf(\"error setting locale: %v\", err)\n\t\t\thttp.Error(w, \"error setting locale\", http.StatusBadRequest)\n\t\t\treturn\n\t\t}\n\t\tnext.ServeHTTP(w, r.WithContext(ctx))\n\t})\n}\n```\n\n----------------------------------------\n\nTITLE: Cross-Package Component Dependencies in Templ\nDESCRIPTION: Shows how to create reusable components with OnceHandler that can be shared across packages. Example demonstrates creating a jQuery dependency component.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/03-syntax-and-usage/18-render-once.md#2025-04-18_snippet_2\n\nLANGUAGE: templ\nCODE:\n```\npackage deps\n\nvar jqueryHandle = templ.NewOnceHandle()\n\ntempl JQuery() {\n  @jqueryHandle.Once() {\n    <script src=\"https://code.jquery.com/jquery-3.6.0.min.js\"></script>\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Maps for Dynamic Styles in Templ\nDESCRIPTION: Demonstrates using map[string]string to create dynamic styles based on component state. This example creates a progress bar with a width percentage and transition effect.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/03-syntax-and-usage/11-css-style-management.md#2025-04-18_snippet_6\n\nLANGUAGE: templ\nCODE:\n```\nfunc getProgressStyle(percent int) map[string]string {\n    return map[string]string{\n        \"width\": fmt.Sprintf(\"%d%%\", percent),\n        \"transition\": \"width 0.3s ease\",\n    }\n}\n\ntempl ProgressBar(percent int) {\n    <div style={ getProgressStyle(percent) } class=\"progress-bar\">\n        <div class=\"progress-fill\"></div>\n    </div>\n}\n```\n\n----------------------------------------\n\nTITLE: HTTP Middleware Context Example\nDESCRIPTION: Demonstrates how to use context with HTTP middleware to share values across components during HTTP requests.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/03-syntax-and-usage/14-context.md#2025-04-18_snippet_6\n\nLANGUAGE: templ\nCODE:\n```\ntype contextKey string\nvar contextClass = contextKey(\"class\")\n\nfunc Middleware(next http.Handler) http.Handler {\n  return http.HandlerFunc(func (w http.ResponseWriter, r *http.Request ) {\n    ctx := context.WithValue(r.Context(), contextClass, \"red\")\n    next.ServeHTTP(w, r.WithContext(ctx))\n  })\n}\n\ntempl Page() {\n  @Show()\n}\n\ntempl Show() {\n  <div class={ ctx.Value(contextClass) }>Display</div>\n}\n\nfunc main() {\n  h := templ.Handler(Page())\n  withMiddleware := Middleware(h)\n  http.Handle(\"/\", withMiddleware)\n  http.ListenAndServe(\":8080\", h)\n}\n```\n\n----------------------------------------\n\nTITLE: Setting JSON Attributes in templ\nDESCRIPTION: Demonstrates how to set an attribute's value to a JSON string in templ, useful for frameworks like HTMX or Alpine.js.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/03-syntax-and-usage/03-attributes.md#2025-04-18_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nfunc countriesJSON() string {\n\tcountries := []string{\"Czech Republic\", \"Slovakia\", \"United Kingdom\", \"Germany\", \"Austria\", \"Slovenia\"}\n\tbytes, _ := json.Marshal(countries)\n\treturn string(bytes)\n}\n```\n\nLANGUAGE: templ\nCODE:\n```\ntempl SearchBox() {\n\t<search-webcomponent suggestions={ countriesJSON() } />\n}\n```\n\n----------------------------------------\n\nTITLE: HTML Output from Templ For Loop Iteration\nDESCRIPTION: The rendered HTML output from the templ component that iterates through items. Shows how the template generates an unordered list with list items for each element in the input collection.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/03-syntax-and-usage/08-loops.md#2025-04-18_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<ul>\n  <li>A</li>\n  <li>B</li>\n  <li>C</li>\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Context Setup in Go\nDESCRIPTION: Demonstrates how to set up and pass context values to Templ components from Go code.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/03-syntax-and-usage/14-context.md#2025-04-18_snippet_3\n\nLANGUAGE: go\nCODE:\n```\ntype contextKey string\n\nvar themeContextKey contextKey = \"theme\"\n\nctx := context.WithValue(context.Background(), themeContextKey, \"test\")\n\nthemeName().Render(ctx, w)\n```\n\n----------------------------------------\n\nTITLE: Rendered HTML Output with CSP Nonces\nDESCRIPTION: The final HTML output showing how Templ automatically applies the nonce to both the function definition script and the function execution script.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/10-security/02-content-security-policy.md#2025-04-18_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<script nonce=\"randomly generated nonce\">\n  function __templ_onLoad_5a85() {\n    alert(\"Hello, world!\")\n  }\n</script>\n<script nonce=\"randomly generated nonce\">\n  __templ_onLoad_5a85()\n</script>\n```\n\n----------------------------------------\n\nTITLE: Rendering React Components in TypeScript\nDESCRIPTION: TypeScript code to render React components into specific DOM elements. This script is responsible for client-side rendering of React components within the templ-generated structure.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/03-syntax-and-usage/17-using-react-with-templ.md#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createRoot } from 'react-dom/client';\nimport { Header, Body } from './components';\n\n// Render the React component into the templ page at the react-header.\nconst headerRoot = document.getElementById('react-header');\nif (!headerRoot) {\n\tthrow new Error('Could not find element with id react-header');\n}\nconst headerReactRoot = createRoot(headerRoot);\nheaderReactRoot.render(Header());\n\n// Add the body React component.\nconst contentRoot = document.getElementById('react-content');\nif (!contentRoot) {\n\tthrow new Error('Could not find element with id react-content');\n}\nconst contentReactRoot = createRoot(contentRoot);\ncontentReactRoot.render(Body());\n```\n\n----------------------------------------\n\nTITLE: Installing HTMX Client-Side Library in HTML\nDESCRIPTION: This snippet shows how to include the HTMX library in an HTML document by adding a script tag in the head section. The src attribute points to the location of the htmx.min.js file.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/05-server-side-rendering/03-htmx.md#2025-04-18_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"/assets/js/htmx.min.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Importing Components in Templ\nDESCRIPTION: Demonstrates how to use a component from another package by importing the package and using the component as you would any other Go function or type.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/03-syntax-and-usage/10-template-composition.md#2025-04-18_snippet_8\n\nLANGUAGE: templ\nCODE:\n```\npackage main\n\nimport \"github.com/a-h/templ/examples/counter/components\"\n\ntempl Home() {\n\t@components.Hello()\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying Navigation Items with goquery in Go\nDESCRIPTION: Example of using goquery's Each method to iterate through navigation links and verify that they match expected values, ensuring the navigation component renders correct items.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/04-core-concepts/03-testing.md#2025-04-18_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nnavItems := []string{\"Home\", \"Posts\"}\n\ndoc.Find(\"nav a\").Each(func(i int, s *goquery.Selection) {\n    expected := navItems[i]\n    if actual := s.Text(); actual != expected {\n        t.Errorf(\"expected nav item %q, got %q\", expected, actual)\n    }\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing internationalized templ component with context-based translations\nDESCRIPTION: A templ component that demonstrates how to fetch translations using the i18n.T function with the context. It includes a language selector with links to switch between different language versions of the page.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/12-integrations/02-internationalization.md#2025-04-18_snippet_3\n\nLANGUAGE: templ\nCODE:\n```\npackage main\n\nimport (\n\t\"github.com/invopop/ctxi18n/i18n\"\n)\n\ntempl page() {\n\t<html>\n\t\t<head>\n\t\t\t<meta charset=\"UTF-8\"/>\n\t\t\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"/>\n\t\t\t<title>{ i18n.T(ctx, \"hello\") }</title>\n\t\t</head>\n\t\t<body>\n\t\t\t<h1>{ i18n.T(ctx, \"hello\") }</h1>\n\t\t\t<h2>{ i18n.T(ctx, \"select_language\") }</h2>\n\t\t\t<ul>\n\t\t\t\t<li><a href=\"/en\">English</a></li>\n\t\t\t\t<li><a href=\"/de\">Deutsch</a></li>\n\t\t\t\t<li><a href=\"/zh-cn\">中文</a></li>\n\t\t\t</ul>\n\t\t</body>\n\t</html>\n}\n```\n\n----------------------------------------\n\nTITLE: Calling Client-Side Functions with Server-Side Data in templ\nDESCRIPTION: Demonstrates using templ.JSFuncCall to call a client-side JavaScript function with server-side data. This method allows for dynamic initialization of client-side scripts with Go data.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/03-syntax-and-usage/12-script-templates.md#2025-04-18_snippet_3\n\nLANGUAGE: templ\nCODE:\n```\ntempl InitializeClientSideScripts(data CustomType) {\n  @templ.JSFuncCall(\"functionToCall\", data.Name, data.Age)\n}\n```\n\n----------------------------------------\n\nTITLE: Automatic HTML Escaping in Templ\nDESCRIPTION: Shows how Templ automatically escapes HTML special characters to prevent XSS attacks\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/03-syntax-and-usage/04-expressions.md#2025-04-18_snippet_3\n\nLANGUAGE: templ\nCODE:\n```\npackage main\n\ntempl component() {\n  <div>{ `</div><script>alert('hello!')</script><div>` }</div>\n}\n```\n\nLANGUAGE: html\nCODE:\n```\n<div>&lt;/div&gt;&lt;script&gt;alert(&#39;hello!&#39;)&lt;/script&gt;&lt;div&gt;</div>\n```\n\n----------------------------------------\n\nTITLE: Improved Context Usage in Templ\nDESCRIPTION: Shows the improved pattern of using a type-safe getter function to access context values.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/03-syntax-and-usage/14-context.md#2025-04-18_snippet_5\n\nLANGUAGE: templ\nCODE:\n```\ntempl themeName() {\n\t<div>{ GetTheme(ctx) }</div>\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Cache for Static Assets in Development\nDESCRIPTION: Go middleware function to disable caching of static assets in development mode by setting the Cache-Control header to no-store, preventing browsers from using stale cached versions after changes.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/09-developer-tools/04-live-reload-with-other-tools.md#2025-04-18_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nvar dev = true\n\nfunc disableCacheInDevMode(next http.Handler) http.Handler {\n\tif !dev {\n\t\treturn next\n\t}\n\treturn http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\t\tw.Header().Set(\"Cache-Control\", \"no-store\")\n\t\tnext.ServeHTTP(w, r)\n\t})\n}\n\nmux.Handle(\"/assets/\", \n  disableCacheInDevMode(\n    http.StripPrefix(\"/assets\", \n      http.FileServer(http.Dir(\"assets\")))))\n```\n\n----------------------------------------\n\nTITLE: Passing Children to Components in Templ\nDESCRIPTION: Illustrates how to pass children to a component for wrapping. It uses the { children... } expression to render the passed children within the component.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/03-syntax-and-usage/10-template-composition.md#2025-04-18_snippet_1\n\nLANGUAGE: templ\nCODE:\n```\ntempl showAll() {\n\t@wrapChildren() {\n\t\t<div>Inserted from the top</div>\n\t}\n}\n\ntempl wrapChildren() {\n\t<div id=\"wrapper\">\n\t\t{ children... }\n\t</div>\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Variables in Templ Component\nDESCRIPTION: Demonstrates how to declare and use scoped variables within a Templ component using raw Go syntax. The example shows accessing an array element and using it in the template output.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/03-syntax-and-usage/09-raw-go.md#2025-04-18_snippet_0\n\nLANGUAGE: templ\nCODE:\n```\npackage main\n\ntempl nameList(items []Item) {\n    {{ first := items[0] }}\n    <p>\n        { first.Name }\n    </p>\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up templ live reload with command line arguments\nDESCRIPTION: Command to run templ with live reload functionality that watches for changes in templ files, automatically regenerates code, restarts the Go application, and reloads the browser.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/09-developer-tools/03-live-reload.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ntempl generate --watch --proxy=\"http://localhost:8080\" --cmd=\"go run .\"\n```\n\n----------------------------------------\n\nTITLE: Rebuilding Go Source with Air\nDESCRIPTION: Command to watch and rebuild Go source files using Air. This monitors for changes in Go files, rebuilds the binary, and restarts the server, while excluding node_modules directory and cleaning up on exit.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/09-developer-tools/04-live-reload-with-other-tools.md#2025-04-18_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngo run github.com/cosmtrek/air@v1.51.0 \\\n  --build.cmd \"go build -o tmp/bin/main\" --build.bin \"tmp/bin/main\" --build.delay \"100\" \\\n  --build.exclude_dir \"node_modules\" \\\n  --build.include_ext \"go\" \\\n  --build.stop_on_error \"false\" \\\n  --misc.clean_on_exit true\n```\n\n----------------------------------------\n\nTITLE: Using Dynamic Style Attributes in Templ\nDESCRIPTION: Shows how to use variables in style attributes by using braces to denote Go expressions. This allows for dynamic styling based on input parameters.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/03-syntax-and-usage/11-css-style-management.md#2025-04-18_snippet_2\n\nLANGUAGE: templ\nCODE:\n```\ntempl button(style, text string) {\n\t<button style={ style }>{ text }</button>\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Navigation Component with goquery in Go\nDESCRIPTION: Shows how to test a templ navigation component by rendering it to an io.Pipe, parsing with goquery, and verifying the presence of the component's data-testid attribute.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/04-core-concepts/03-testing.md#2025-04-18_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nfunc TestNav(t *testing.T) {\n    r, w := io.Pipe()\n    go func() {\n        _ = navTemplate().Render(context.Background(), w)\n        _ = w.Close()\n    }()\n    doc, err := goquery.NewDocumentFromReader(r)\n    if err != nil {\n        t.Fatalf(\"failed to read template: %v\", err)\n    }\n    // Expect the component to include a testid.\n    if doc.Find(`[data-testid=\"navTemplate\"]`).Length() == 0 {\n        t.Error(\"expected data-testid attribute to be rendered, but it wasn't\")\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Passing Server-Side Data via HTML Attributes in templ\nDESCRIPTION: Shows how to use templ.JSONString to encode server-side data as a JSON string and pass it to the client via an HTML attribute. This is useful for frameworks like alpine.js.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/03-syntax-and-usage/12-script-templates.md#2025-04-18_snippet_4\n\nLANGUAGE: templ\nCODE:\n```\ntempl body(data any) {\n  <button id=\"alerter\" alert-data={ templ.JSONString(data) }>Show alert</button>\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling LSP Logging for Neovim Templ Integration\nDESCRIPTION: Neovim Lua configuration to enable detailed logging for the Templ language server. This setup helps with troubleshooting by providing logs, enabling HTTP debugging server, and setting root directory patterns.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/09-developer-tools/02-ide-support.md#2025-04-18_snippet_21\n\nLANGUAGE: lua\nCODE:\n```\nlocal configs = require('lspconfig.configs')\nconfigs.templ = {\n  default_config = {\n    cmd = { \"templ\", \"lsp\", \"-http=localhost:7474\", \"-log=/Users/adrian/templ.log\" },\n    filetypes = { 'templ' },\n    root_dir = nvim_lsp.util.root_pattern(\"go.mod\", \".git\"),\n    settings = {},\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Go Server for Static Assets\nDESCRIPTION: Go code to set up an HTTP server that serves both static JavaScript assets and Templ components.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/03-syntax-and-usage/12-script-templates.md#2025-04-18_snippet_13\n\nLANGUAGE: go\nCODE:\n```\nfunc main() {\n\tmux := http.NewServeMux()\n\t// Serve the JS bundle.\n\tmux.Handle(\"/assets/\", http.StripPrefix(\"/assets/\", http.FileServer(http.Dir(\"assets\"))))\n\n\t// Serve components.\n\tdata := map[string]any{\"msg\": \"Hello, World!\"}\n\th := templ.Handler(components.Page(data))\n\tmux.Handle(\"/\", h)\n\n\tfmt.Println(\"Listening on http://localhost:8080\")\n\thttp.ListenAndServe(\"localhost:8080\", mux)\n}\n```\n\n----------------------------------------\n\nTITLE: Combining Function and Literal Style Values\nDESCRIPTION: Demonstrates how to combine a function return value with a literal string value for styling. This allows mixing dynamic and static styles.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/03-syntax-and-usage/11-css-style-management.md#2025-04-18_snippet_5\n\nLANGUAGE: templ\nCODE:\n```\ntempl Page(userType string) {\n\t<div style={ getStyle(userType), \"color: blue\" }>Styled</div>\n}\n\nfunc getStyle(userType string) (string) {\n   return \"background-color: red\"\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Button Component Implementation in templ\nDESCRIPTION: Demonstrates creating a simple button component with text parameter in templ.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/03-syntax-and-usage/02-elements.md#2025-04-18_snippet_0\n\nLANGUAGE: templ\nCODE:\n```\npackage main\n\ntempl button(text string) {\n\t<button class=\"button\">{ text }</button>\n}\n```\n\n----------------------------------------\n\nTITLE: Using html/template in a templ Component\nDESCRIPTION: This snippet demonstrates how to use an existing html/template within a templ component using the templ.FromGoHTML function. It creates a templ component that incorporates an html/template.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/03-syntax-and-usage/15-using-with-go-templates.md#2025-04-18_snippet_0\n\nLANGUAGE: templ\nCODE:\n```\npackage testgotemplates\n\nimport \"html/template\"\n\nvar goTemplate = template.Must(template.New(\"example\").Parse(\"<div>{{ . }}</div>\"))\n\ntempl Example() {\n\t<!DOCTYPE html>\n\t<html>\n\t\t<body>\n\t\t\t@templ.FromGoHTML(goTemplate, \"Hello, World!\")\n\t\t</body>\n\t</html>\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Vim LSP for Templ Language Support\nDESCRIPTION: Vim configuration for setting up the Templ LSP server with keybindings for common LSP operations like go-to-definition, find references, and hover information. Also configures auto-formatting on save for Templ files.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/09-developer-tools/02-ide-support.md#2025-04-18_snippet_17\n\nLANGUAGE: vim\nCODE:\n```\n\" Register LSP server for Templ.\nau User lsp_setup call lsp#register_server({\n        \\ 'name': 'templ',\n        \\ 'cmd': [$GOPATH . '/bin/templ', 'lsp'],\n        \\ 'allowlist': ['templ'],\n        \\ })\n\nfunction! s:on_lsp_buffer_enabled() abort\n  setlocal signcolumn=yes\n  if exists('+tagfunc') | setlocal tagfunc=lsp#tagfunc | endif\n  nmap <buffer> gd <plug>(lsp-definition)\n  nmap <buffer> gs <plug>(lsp-document-symbol-search)\n  nmap <buffer> gS <plug>(lsp-workspace-symbol-search)\n  nmap <buffer> gr <plug>(lsp-references)\n  nmap <buffer> gi <plug>(lsp-implementation)\n  nmap <buffer> gt <plug>(lsp-type-definition)\n  nmap <buffer> <leader>rn <plug>(lsp-rename)\n  nmap <buffer> [g <plug>(lsp-previous-diagnostic)\n  nmap <buffer> ]g <plug>(lsp-next-diagnostic)\n  nmap <buffer> K <plug>(lsp-hover)\n\n  let g:lsp_format_sync_timeout = 1000\n  autocmd! BufWritePre *.templ call execute('LspDocumentFormatSync')\nendfunction\n\naugroup lsp_install\n    au!\n    \" call s:on_lsp_buffer_enabled only for languages that has the server registered.\n    autocmd User lsp_buffer_enabled call s:on_lsp_buffer_enabled()\naugroup END\n```\n\n----------------------------------------\n\nTITLE: Text Escaping in templ\nDESCRIPTION: Shows how templ handles text nodes. Static text is not modified, while dynamic content expressions are escaped using templ.EscapeString to prevent injection attacks.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/10-security/01-injection-attacks.md#2025-04-18_snippet_5\n\nLANGUAGE: html\nCODE:\n```\ntempl Example() {\n  <div>Node text is not modified at all.</div>\n  <div>{ \"will be escaped using templ.EscapeString\" }</div>\n}\n```\n\n----------------------------------------\n\nTITLE: Using a templ Component within html/template\nDESCRIPTION: This Go code demonstrates how to use a templ component within an html/template. It converts the templ component to template.HTML using templ.ToGoHTML and then executes the html/template with this value.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/03-syntax-and-usage/15-using-with-go-templates.md#2025-04-18_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nfunc main() {\n\t// Create the templ component.\n\ttemplComponent := greeting()\n\n\t// Render the templ component to a `template.HTML` value.\n\thtml, err := templ.ToGoHTML(context.Background(), templComponent)\n\tif err != nil {\n\t\tt.Fatalf(\"failed to convert to html: %v\", err)\n\t}\n\n\t// Use the `template.HTML` value within the text/html template.\n\terr = example.Execute(os.Stdout, html)\n\tif err != nil {\n\t\tt.Fatalf(\"failed to execute template: %v\", err)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying Generated templ Files in CI/CD Pipeline\nDESCRIPTION: This snippet demonstrates how to check if all templ files have been properly generated in a CI/CD pipeline. It runs the templ generate command and then uses git diff to check if any files have changed, failing the pipeline if differences are found.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/09-developer-tools/06-cicd.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ntempl generate\ngit diff --exit-code\n```\n\n----------------------------------------\n\nTITLE: Enabling Streaming in Templ Handler\nDESCRIPTION: Code snippet showing how to enable streaming in a Templ handler using WithStreaming option.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/05-server-side-rendering/05-streaming.md#2025-04-18_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ntempl.Handler(component, templ.WithStreaming()).ServeHTTP(w, r)\n```\n\n----------------------------------------\n\nTITLE: Conditional Styling with KeyValue Pattern in Templ\nDESCRIPTION: Demonstrates using templ.KV to conditionally apply styles based on component state. This pattern is useful for form validation styling.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/03-syntax-and-usage/11-css-style-management.md#2025-04-18_snippet_8\n\nLANGUAGE: templ\nCODE:\n```\ntempl TextInput(value string, hasError bool) {\n    <input\n        type=\"text\"\n        value={ value }\n        style={\n            templ.KV(\"border-color: #ff3860\", hasError),\n            templ.KV(\"background-color: #fff5f7\", hasError),\n            \"padding: 0.5em 1em;\",\n        }\n    >\n}\n```\n\n----------------------------------------\n\nTITLE: URL Sanitization in templ\nDESCRIPTION: Demonstrates URL handling in href attributes. Constants are not sanitized, while dynamic URLs must use templ.URL (which sanitizes) or templ.SafeURL (which bypasses sanitization but is still risky).\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/10-security/01-injection-attacks.md#2025-04-18_snippet_6\n\nLANGUAGE: html\nCODE:\n```\ntempl Example() {\n  <a href=\"http://constants.example.com/are/not/sanitized\">Text</a>\n  <a href={ templ.URL(\"will be sanitized by templ.URL to remove potential attacks\") }></a>\n  <a href={ templ.SafeURL(\"will not be sanitized by templ.URL\") }></a>\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Posts Handler Struct in Go\nDESCRIPTION: Definition of a PostsHandler struct that contains a logger and a function for retrieving posts, designed to be dependency-injected for easier testing.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/04-core-concepts/03-testing.md#2025-04-18_snippet_4\n\nLANGUAGE: go\nCODE:\n```\ntype PostsHandler struct {\n    Log      *log.Logger\n    GetPosts func() ([]Post, error)\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Emmet HTML Completion for Templ in VSCode\nDESCRIPTION: JSON configuration to enable Emmet HTML completion for .templ files in Visual Studio Code. This allows for HTML snippet expansion using Emmet's shorthand notation.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/09-developer-tools/02-ide-support.md#2025-04-18_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"emmet.includeLanguages\": {\n    \"templ\": \"html\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Conditional Attributes in templ\nDESCRIPTION: Shows how to use conditional statements to optionally add attributes to elements in templ.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/03-syntax-and-usage/03-attributes.md#2025-04-18_snippet_3\n\nLANGUAGE: templ\nCODE:\n```\ntempl component() {\n  <hr style=\"padding: 10px\"\n    if true {\n      class=\"itIsTrue\"\n    }\n  />\n}\n```\n\n----------------------------------------\n\nTITLE: Conditional Class Names with KeyValue Pattern\nDESCRIPTION: Shows how to conditionally apply CSS classes using the templ.KV helper and custom CSS components.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/03-syntax-and-usage/11-css-style-management.md#2025-04-18_snippet_20\n\nLANGUAGE: templ\nCODE:\n```\npackage main\n\ncss red() {\n\tbackground-color: #ff0000;\n}\n\ntempl button(text string, isPrimary bool) {\n\t<button class={ \"button\", templ.KV(\"is-primary\", isPrimary), templ.KV(red(), isPrimary) }>{ text }</button>\n}\n```\n\n----------------------------------------\n\nTITLE: HTML Comments in Templ Template\nDESCRIPTION: Demonstrates how to use HTML-style comments within templ statements. Shows both single-line and multi-line comment formats that will be rendered in the template output.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/03-syntax-and-usage/13-comments.md#2025-04-18_snippet_0\n\nLANGUAGE: templ\nCODE:\n```\ntempl template() {\n\t<!-- Single line -->\n\t<!--\n\t\tSingle or multiline.\n\t-->\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Go web server using templ\nDESCRIPTION: Example of a main.go file that creates a simple web server using templ. It defines a handler that serves a templ component on port 8080.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/09-developer-tools/03-live-reload.md#2025-04-18_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\n\t\"github.com/a-h/templ\"\n)\n\nfunc main() {\n\tcomponent := hello(\"World\")\n\n\thttp.Handle(\"/\", templ.Handler(component))\n\n\tfmt.Println(\"Listening on :8080\")\n\thttp.ListenAndServe(\":8080\", nil)\n}\n```\n\n----------------------------------------\n\nTITLE: Inline JavaScript Function Execution in Templ\nDESCRIPTION: Demonstrates using script templates as Templ components for direct rendering of JavaScript functions with Go data, using the @ expression syntax.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/03-syntax-and-usage/12-script-templates.md#2025-04-18_snippet_16\n\nLANGUAGE: templ\nCODE:\n```\npackage main\n\nimport \"fmt\"\n\nscript printToConsole(content string) {\n\tconsole.log(content)\n}\n\ntempl page(content string) {\n\t<html>\n\t\t<body>\n\t\t  @printToConsole(content)\n\t\t  @printToConsole(fmt.Sprintf(\"Again: %s\", content))\n\t\t</body>\n\t</html>\n}\n```\n\n----------------------------------------\n\nTITLE: Handling JavaScript Events Safely in templ\nDESCRIPTION: Event handlers like onClick must use a templ.ComponentScript to prevent unescaped user data. This example shows how to define and use a script handler that accepts parameters.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/10-security/01-injection-attacks.md#2025-04-18_snippet_1\n\nLANGUAGE: html\nCODE:\n```\nscript onClickHandler(msg string) {\n  alert(msg);\n}\n\ntempl Example(msg string) {\n  <div onClick={ onClickHandler(msg) }>\n    { \"will be HTML encoded using templ.Escape\" }\n  </div>\n}\n```\n\n----------------------------------------\n\nTITLE: Running Templ in Watch Mode with Proxy Server\nDESCRIPTION: Command to start the Templ proxy server in watch mode, which monitors .templ files for changes and automatically refreshes the browser. The command assumes your HTTP server runs on port 8080.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/09-developer-tools/04-live-reload-with-other-tools.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ntempl generate --watch --proxy=\"http://localhost:8080\" --open-browser=false\n```\n\n----------------------------------------\n\nTITLE: Watching and Compiling Tailwind CSS\nDESCRIPTION: Command to watch for changes in Tailwind CSS files and recompile the CSS bundle. It monitors both the input.css file and .templ files, generating a minified styles.css file in the assets directory.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/09-developer-tools/04-live-reload-with-other-tools.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx --yes tailwindcss -i ./input.css -o ./assets/styles.css --minify --watch\n```\n\n----------------------------------------\n\nTITLE: Using Style Elements in Templ\nDESCRIPTION: Shows how to include CSS styles directly within a template using the <style> element. Content is rendered without changes.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/03-syntax-and-usage/11-css-style-management.md#2025-04-18_snippet_23\n\nLANGUAGE: templ\nCODE:\n```\ntempl page() {\n\t<style type=\"text/css\">\n\t\tp {\n\t\t\tfont-family: sans-serif;\n\t\t}\n\t\t.button {\n\t\t\tbackground-color: black;\n\t\t\tforeground-color: white;\n\t\t}\n\t</style>\n\t<p>\n\t\tParagraph contents.\n\t</p>\n}\n```\n\n----------------------------------------\n\nTITLE: Combining Multiple Style Values in Templ\nDESCRIPTION: Demonstrates how to pass multiple style values to a single style attribute. Multiple style expressions are combined in the output.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/03-syntax-and-usage/11-css-style-management.md#2025-04-18_snippet_3\n\nLANGUAGE: templ\nCODE:\n```\ntempl button(style1, style2 string, text string) {\n\t<button style={ style1, style2 }>{ text }</button>\n}\n```\n\n----------------------------------------\n\nTITLE: Passing Event Objects to JavaScript Handler in templ\nDESCRIPTION: Illustrates how to use templ.JSExpression to pass both an event object and server-side data to a JavaScript function. This approach allows for more complex event handling.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/03-syntax-and-usage/12-script-templates.md#2025-04-18_snippet_2\n\nLANGUAGE: templ\nCODE:\n```\n<script>\n\tfunction clickHandler(event, message) {\n\t\talert(message);\n\t\tevent.preventDefault();\n\t}\n</script>\n<button onclick={ templ.JSFuncCall(\"clickHandler\", templ.JSExpression(\"event\"), \"message from Go\") }>Show event</button>\n```\n\n----------------------------------------\n\nTITLE: Running Coverage Tests for templ\nDESCRIPTION: Comprehensive set of commands to create test coverage profiles for different parts of the templ project and generate combined statistics.\nSOURCE: https://github.com/a-h/templ/blob/main/README.md#2025-04-18_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\n# Create test profile directories.\nmkdir -p coverage/fmt\nmkdir -p coverage/generate\nmkdir -p coverage/version\nmkdir -p coverage/unit\n# Build the test binary.\ngo build -cover -o ./coverage/templ-cover ./cmd/templ\n# Run the covered generate command.\nGOCOVERDIR=coverage/fmt ./coverage/templ-cover fmt .\nGOCOVERDIR=coverage/generate ./coverage/templ-cover generate -include-version=false\nGOCOVERDIR=coverage/version ./coverage/templ-cover version\n# Run the unit tests.\ngo test -cover ./... -coverpkg ./... -args -test.gocoverdir=\"$PWD/coverage/unit\"\n# Display the combined percentage.\ngo tool covdata percent -i=./coverage/fmt,./coverage/generate,./coverage/version,./coverage/unit\n# Generate a text coverage profile for tooling to use.\ngo tool covdata textfmt -i=./coverage/fmt,./coverage/generate,./coverage/version,./coverage/unit -o coverage.out\n# Print total\ngo tool cover -func coverage.out | grep total\n```\n\n----------------------------------------\n\nTITLE: Handling URL Attributes in templ\nDESCRIPTION: Explains how to properly handle URL attributes in templ, using the templ.URL function for sanitization and security.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/03-syntax-and-usage/03-attributes.md#2025-04-18_snippet_5\n\nLANGUAGE: templ\nCODE:\n```\ntempl component(p Person) {\n  <a href={ templ.URL(p.URL) }>{ strings.ToUpper(p.Name) }</a>\n}\n```\n\nLANGUAGE: templ\nCODE:\n```\ntempl component(contact model.Contact) {\n  <div hx-get={ string(templ.URL(fmt.Sprintf(\"/contacts/%s/email\", contact.ID)))}>\n    { contact.Name }\n  </div>\n}\n```\n\n----------------------------------------\n\nTITLE: Joining Components in Templ\nDESCRIPTION: Demonstrates how to aggregate multiple components into a single Component using templ.Join. It shows the creation of separate components and their combination.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/03-syntax-and-usage/10-template-composition.md#2025-04-18_snippet_6\n\nLANGUAGE: templ\nCODE:\n```\npackage main\n\ntempl hello() {\n\t<span>hello</span>\n}\n\ntempl world() {\n\t<span>world</span>\n}\n\ntempl helloWorld() {\n\t@templ.Join(hello(), world())\n}\n```\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\t\"os\"\n)\n\nfunc main() {\n\thelloWorld().Render(context.Background(), os.Stdout)\n}\n```\n\n----------------------------------------\n\nTITLE: Type-Safe Context Access in Go\nDESCRIPTION: Shows how to implement type-safe context access functions to avoid direct context value access.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/03-syntax-and-usage/14-context.md#2025-04-18_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nfunc GetTheme(ctx context.Context) string {\n\tif theme, ok := ctx.Value(themeContextKey).(string); ok {\n\t\treturn theme\n\t}\n\treturn \"\"\n}\n```\n\n----------------------------------------\n\nTITLE: Bundling JavaScript with esbuild in Watch Mode\nDESCRIPTION: Command to bundle JavaScript or TypeScript files using esbuild in watch mode. It monitors js/index.ts and related files, rebuilding the bundle in the assets directory whenever changes are detected.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/09-developer-tools/04-live-reload-with-other-tools.md#2025-04-18_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx --yes esbuild js/index.ts --bundle --outdir=assets/ --watch\n```\n\n----------------------------------------\n\nTITLE: String Literals in Templ Components\nDESCRIPTION: Demonstrates how to use Go string literals within Templ components using both double quotes and backticks\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/03-syntax-and-usage/04-expressions.md#2025-04-18_snippet_0\n\nLANGUAGE: templ\nCODE:\n```\npackage main\n\ntempl component() {\n  <div>{ \"print this\" }</div>\n  <div>{ `and this` }</div>\n}\n```\n\nLANGUAGE: html\nCODE:\n```\n<div>print this</div><div>and this</div>\n```\n\n----------------------------------------\n\nTITLE: Function Return Values in Templ\nDESCRIPTION: Demonstrates using functions that return strings or (string, error) within Templ components\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/03-syntax-and-usage/04-expressions.md#2025-04-18_snippet_2\n\nLANGUAGE: templ\nCODE:\n```\npackage main\n\nimport \"strings\"\nimport \"strconv\"\n\nfunc getString() (string, error) {\n  return \"DEF\", nil\n}\n\ntempl component() {\n  <div>{ strings.ToUpper(\"abc\") }</div>\n  <div>{ getString() }</div>\n}\n```\n\nLANGUAGE: html\nCODE:\n```\n<div>ABC</div>\n<div>DEF</div>\n```\n\n----------------------------------------\n\nTITLE: Testing HTTP Handler with Table-Driven Tests in Go\nDESCRIPTION: Table-driven test for a PostsHandler HTTP handler, testing both error and success scenarios with mock data retrievers and verifying appropriate responses using httptest and goquery.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/04-core-concepts/03-testing.md#2025-04-18_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nfunc TestPostsHandler(t *testing.T) {\n    tests := []struct {\n        name           string\n        postGetter     func() (posts []Post, err error)\n        expectedStatus int\n        assert         func(doc *goquery.Document)\n    }{\n        {\n            name: \"database errors result in a 500 error\",\n            postGetter: func() (posts []Post, err error) {\n                return nil, errors.New(\"database error\")\n            },\n            expectedStatus: http.StatusInternalServerError,\n            assert: func(doc *goquery.Document) {\n                expected := \"failed to retrieve posts\\n\"\n                if actual := doc.Text(); actual != expected {\n                    t.Errorf(\"expected error message %q, got %q\", expected, actual)\n                }\n            },\n        },\n        {\n            name: \"database success renders the posts\",\n            postGetter: func() (posts []Post, err error) {\n                return []Post{\n                    {Name: \"Name1\", Author: \"Author1\"},\n                    {Name: \"Name2\", Author: \"Author2\"},\n                }, nil\n            },\n            expectedStatus: http.StatusInternalServerError,\n            assert: func(doc *goquery.Document) {\n                if doc.Find(`[data-testid=\"postsTemplate\"]`).Length() == 0 {\n                    t.Error(\"expected posts to be rendered, but it wasn't\")\n                }\n            },\n        },\n    }\n    for _, test := range tests {\n        // Arrange.\n        w := httptest.NewRecorder()\n        r := httptest.NewRequest(http.MethodGet, \"/posts\", nil)\n\n        ph := NewPostsHandler()\n        ph.Log = log.New(io.Discard, \"\", 0) // Suppress logging.\n        ph.GetPosts = test.postGetter\n\n        // Act.\n        ph.ServeHTTP(w, r)\n        doc, err := goquery.NewDocumentFromReader(w.Result().Body)\n        if err != nil {\n            t.Fatalf(\"failed to read template: %v\", err)\n        }\n\n        // Assert.\n        test.assert(doc)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a React Component with Props\nDESCRIPTION: Defines a React component that accepts a 'name' prop. This component demonstrates how to pass server-side data to client-side React components.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/03-syntax-and-usage/17-using-react-with-templ.md#2025-04-18_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nexport const Hello = (name: string) => (\n  <div>Hello {name} (Client-side React, rendering server-side data)</div>\n);\n```\n\n----------------------------------------\n\nTITLE: CSS Dynamic Property Handling in templ\nDESCRIPTION: CSS property values based on expressions are sanitized through templ.SanitizeCSS, which replaces potentially unsafe values with placeholders to prevent injection attacks.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/10-security/01-injection-attacks.md#2025-04-18_snippet_8\n\nLANGUAGE: css\nCODE:\n```\ncss className() {\n\tcolor: { red };\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting Components in Templ\nDESCRIPTION: Shows how to make a templ component available to other packages by exporting it through capitalization of its name.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/03-syntax-and-usage/10-template-composition.md#2025-04-18_snippet_7\n\nLANGUAGE: templ\nCODE:\n```\npackage components\n\ntempl Hello() {\n\t<div>Hello</div>\n}\n```\n\n----------------------------------------\n\nTITLE: Settings Struct Pattern in Templ\nDESCRIPTION: Shows how to pass multiple settings through components using a structured approach with a Settings struct. Illustrates the coupling problem this can create.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/03-syntax-and-usage/14-context.md#2025-04-18_snippet_1\n\nLANGUAGE: templ\nCODE:\n```\npackage main\n\ntype Settings struct {\n\tUsername string\n\tLocale   string\n\tTheme    string\n}\n\ntempl top(settings Settings) {\n\t<div>\n\t\t@middle(settings)\n\t</div>\n}\n\ntempl middle(settings Settings) {\n\t<ul>\n\t\t@bottom(settings)\n\t</ul>\n}\n\ntempl bottom(settings Settings) {\n  <li>{ settings.Theme }</li>\n}\n```\n\n----------------------------------------\n\nTITLE: Using Shared Dependencies in Main Template\nDESCRIPTION: Demonstrates how to use shared dependency components within a main template file. Shows integration of the jQuery component in both the head and body sections.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/03-syntax-and-usage/18-render-once.md#2025-04-18_snippet_3\n\nLANGUAGE: templ\nCODE:\n```\npackage main\n\nimport \"deps\"\n\ntempl page() {\n  <html>\n    <head>\n      @deps.JQuery()\n    </head>\n    <body>\n      <h1>Hello, World!</h1>\n      @button()\n    </body>\n  </html>\n}\n\ntempl button() {\n  @deps.JQuery()\n  <button>Click me</button>\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Unsafe Component for Raw HTML in Go\nDESCRIPTION: This function creates an Unsafe component that writes HTML directly to the output writer without escaping, used for rendering markdown-generated HTML.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/06-static-rendering/02-blog-example.md#2025-04-18_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nfunc Unsafe(html string) templ.Component {\n\treturn templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {\n\t\t_, err = io.WriteString(w, html)\n\t\treturn\n\t})\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing CSRF Protection with gorilla/csrf and Templ in Go\nDESCRIPTION: This code demonstrates how to set up a Go HTTP server with CSRF protection using gorilla/csrf middleware and Templ for rendering. It includes a function to generate a secure random CSRF key and configures the HTTP server with CSRF protection middleware.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/12-integrations/01-web-frameworks.md#2025-04-18_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n  \"crypto/rand\"\n  \"fmt\"\n  \"net/http\"\n  \"github.com/gorilla/csrf\"\n)\n\nfunc mustGenerateCSRFKey() (key []byte) {\n  key = make([]byte, 32)\n  n, err := rand.Read(key)\n  if err != nil {\n    panic(err)\n  }\n  if n != 32 {\n    panic(\"unable to read 32 bytes for CSRF key\")\n  }\n  return\n}\n\nfunc main() {\n  r := http.NewServeMux()\n  r.Handle(\"/\", templ.Handler(Form()))\n\n  csrfMiddleware := csrf.Protect(mustGenerateCSRFKey())\n  withCSRFProtection := csrfMiddleware(r)\n\n  fmt.Println(\"Listening on localhost:8000\")\n  http.ListenAndServe(\"localhost:8000\", withCSRFProtection)\n}\n```\n\n----------------------------------------\n\nTITLE: Using templ.Raw Function Example\nDESCRIPTION: Example component showing how to use templ.Raw to render unescaped HTML content within a Templ template. The function bypasses normal HTML escaping to render trusted HTML directly.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/03-syntax-and-usage/16-rendering-raw-html.md#2025-04-18_snippet_0\n\nLANGUAGE: templ\nCODE:\n```\ntempl Example() {\n\t<!DOCTYPE html>\n\t<html>\n\t\t<body>\n\t\t\t@templ.Raw(\"<div>Hello, World!</div>\")\n\t\t</body>\n\t</html>\n}\n```\n\n----------------------------------------\n\nTITLE: Templ Generate Command Options\nDESCRIPTION: Details the usage and available options for the 'templ generate' command, which generates Go code from .templ files. Options include specifying paths, files, watching for changes, and various output configurations.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/09-developer-tools/01-cli.md#2025-04-18_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nusage: templ generate [<args>...]\n\nGenerates Go code from templ files.\n\nArgs:\n  -path <path>\n    Generates code for all files in path. (default .)\n  -f <file>\n    Optionally generates code for a single file, e.g. -f header.templ\n  -source-map-visualisations\n    Set to true to generate HTML files to visualise the templ code and its corresponding Go code.\n  -include-version\n    Set to false to skip inclusion of the templ version in the generated code. (default true)\n  -include-timestamp\n    Set to true to include the current time in the generated code.\n  -watch\n    Set to true to watch the path for changes and regenerate code.\n  -cmd <cmd>\n    Set the command to run after generating code.\n  -proxy\n    Set the URL to proxy after generating code and executing the command.\n  -proxyport\n    The port the proxy will listen on. (default 7331)\n  -proxybind\n    The address the proxy will listen on. (default 127.0.0.1)\n  -w\n    Number of workers to use when generating code. (default runtime.NumCPUs)\n  -lazy\n    Only generate .go files if the source .templ file is newer.\t\n  -pprof\n    Port to run the pprof server on.\n  -keep-orphaned-files\n    Keeps orphaned generated templ files. (default false)\n  -v\n    Set log verbosity level to \"debug\". (default \"info\")\n  -log-level\n    Set log verbosity level. (default \"info\", options: \"debug\", \"info\", \"warn\", \"error\")\n  -help\n    Print help and exit.\n```\n\n----------------------------------------\n\nTITLE: Safe CSS Property Usage with Rotation Example\nDESCRIPTION: Demonstrates using templ.SafeCSSProperty to bypass CSS sanitization for trusted values, shown with a rotation transform example.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/03-syntax-and-usage/11-css-style-management.md#2025-04-18_snippet_29\n\nLANGUAGE: templ\nCODE:\n```\ncss windVaneRotation(degrees float64) {\n\ttransform: { templ.SafeCSSProperty(fmt.Sprintf(\"rotate(%ddeg)\", int(math.Round(degrees)))) };\n}\n\ntempl Rotate(degrees float64) {\n\t<div class={ windVaneRotation(degrees) }>Rotate</div>\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Templ Component\nDESCRIPTION: Creates a hello.templ file with a simple templ component that displays a greeting. This component takes a name parameter and renders a div with personalized content.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/02-quick-start/02-creating-a-simple-templ-component.md#2025-04-18_snippet_2\n\nLANGUAGE: templ\nCODE:\n```\npackage main\n\ntempl hello(name string) {\n\t<div>Hello, { name }</div>\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Using External JavaScript in templ\nDESCRIPTION: Shows how to import external JavaScript libraries and use them within templ components. This example demonstrates loading a charting library and creating a chart using the imported functions.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/03-syntax-and-usage/12-script-templates.md#2025-04-18_snippet_8\n\nLANGUAGE: templ\nCODE:\n```\ntempl head() {\n\t<head>\n\t\t<script src=\"https://unpkg.com/lightweight-charts/dist/lightweight-charts.standalone.production.js\"></script>\n\t</head>\n}\n```\n\nLANGUAGE: templ\nCODE:\n```\ntempl body() {\n\t<script>\n\t\tconst chart = LightweightCharts.createChart(document.body, { width: 400, height: 300 });\n\t\tconst lineSeries = chart.addLineSeries();\n\t\tlineSeries.setData([\n\t\t\t\t{ time: '2019-04-11', value: 80.01 },\n\t\t\t\t{ time: '2019-04-12', value: 96.63 },\n\t\t\t\t{ time: '2019-04-13', value: 76.64 },\n\t\t\t\t{ time: '2019-04-14', value: 81.89 },\n\t\t\t\t{ time: '2019-04-15', value: 74.43 },\n\t\t\t\t{ time: '2019-04-16', value: 80.01 },\n\t\t\t\t{ time: '2019-04-17', value: 96.63 },\n\t\t\t\t{ time: '2019-04-18', value: 76.64 },\n\t\t\t\t{ time: '2019-04-19', value: 81.89 },\n\t\t\t\t{ time: '2019-04-20', value: 74.43 },\n\t\t]);\n\t</script>\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Syntax Highlighting for Templ Files in Neovim\nDESCRIPTION: Lua autocommand to automatically enable Tree-sitter syntax highlighting when opening Templ files in Neovim. This ensures proper syntax highlighting without manual intervention.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/09-developer-tools/02-ide-support.md#2025-04-18_snippet_14\n\nLANGUAGE: lua\nCODE:\n```\nvim.api.nvim_create_autocmd(\"BufEnter\", { pattern = \"*.templ\", callback = function() vim.cmd(\"TSBufEnable highlight\") end })\n```\n\n----------------------------------------\n\nTITLE: Installing Templ Locally as Tool\nDESCRIPTION: Command to install Templ locally in a project using Go's tool directive feature.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/02-quick-start/01-installation.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngo get -tool github.com/a-h/templ/cmd/templ@latest\n```\n\n----------------------------------------\n\nTITLE: Simple templ component definition\nDESCRIPTION: Example of a hello.templ file that defines a component which takes a name parameter and renders a greeting inside a body tag.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/09-developer-tools/03-live-reload.md#2025-04-18_snippet_2\n\nLANGUAGE: templ\nCODE:\n```\npackage main\n\ntempl hello(name string) {\n  <body>\n\t    <div>Hello, { name }</div>\n  </body>\n}\n```\n\n----------------------------------------\n\nTITLE: Writing a Go Program to Render HTML to a File\nDESCRIPTION: Main program that creates an HTML file and renders the templ component to it.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/06-static-rendering/01-generating-static-html-files-with-templ.md#2025-04-18_snippet_6\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\t\"log\"\n\t\"os\"\n)\n\nfunc main() {\n\tf, err := os.Create(\"hello.html\")\n\tif err != nil {\n\t\tlog.Fatalf(\"failed to create output file: %v\", err)\n\t}\n\n\terr = hello(\"John\").Render(context.Background(), f)\n\tif err != nil {\n\t\tlog.Fatalf(\"failed to write output file: %v\", err)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Post Struct in Go\nDESCRIPTION: This snippet defines the Post struct in Go to store information about blog posts, including the date, title, and content.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/06-static-rendering/02-blog-example.md#2025-04-18_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ntype Post struct {\n\tDate    time.Time\n\tTitle   string\n\tContent string\n}\n```\n\n----------------------------------------\n\nTITLE: Templ LSP Command Options\nDESCRIPTION: Available options for the templ lsp command, which provides Language Server Protocol implementation for IDE integrations. Includes debug and logging options.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/09-developer-tools/01-cli.md#2025-04-18_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n  -goplsLog string\n        The file to log gopls output, or leave empty to disable logging.\n  -goplsRPCTrace\n        Set gopls to log input and output messages.\n  -help\n        Print help and exit.\n  -http string\n        Enable http debug server by setting a listen address (e.g. localhost:7474)\n  -log string\n        The file to log templ LSP output to, or leave empty to disable logging.\n  -pprof\n        Enable pprof web server (default address is localhost:9999)\n```\n\n----------------------------------------\n\nTITLE: Using Dynamic Class Names in Templ\nDESCRIPTION: Shows how to use variables in class attributes by using braces to denote Go expressions.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/03-syntax-and-usage/11-css-style-management.md#2025-04-18_snippet_18\n\nLANGUAGE: templ\nCODE:\n```\npackage main\n\ntempl button(text string, className string) {\n\t<button class={ className }>{ text }</button>\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Switch Statement in templ Component\nDESCRIPTION: A templ component that uses a Go switch statement to conditionally render different HTML spans based on a user type parameter. The component handles three cases: 'test', 'admin', and a default case for unknown user types.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/03-syntax-and-usage/07-switch.md#2025-04-18_snippet_0\n\nLANGUAGE: templ\nCODE:\n```\npackage main\n\ntempl userTypeDisplay(userType string) {\n\tswitch userType {\n\t\tcase \"test\":\n\t\t\t<span>{ \"Test user\" }</span>\n\t\tcase \"admin\":\n\t\t\t<span>{ \"Admin user\" }</span>\n\t\tdefault:\n\t\t\t<span>{ \"Unknown user\" }</span>\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Go Server for Inline JavaScript Example\nDESCRIPTION: Go server implementation that passes current time data to a Templ template for rendering in JavaScript console logs.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/03-syntax-and-usage/12-script-templates.md#2025-04-18_snippet_17\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"log\"\n\t\"net/http\"\n\t\"time\"\n)\n\nfunc main() {\n\tmux := http.NewServeMux()\n\n\t// Handle template.\n\tmux.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n\t\t// Format the current time and pass it into our template\n\t\tpage(time.Now().String()).Render(r.Context(), w)\n\t})\n\n\t// Start the server.\n\tfmt.Println(\"listening on :8080\")\n\tif err := http.ListenAndServe(\":8080\", mux); err != nil {\n\t\tlog.Printf(\"error listening: %v\", err)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Formatter for Templ Files in Neovim\nDESCRIPTION: Lua function to format Templ files using the templ CLI formatter. This custom formatter can be used when there are conflicts between multiple LSPs or when you need more control over the formatting process.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/09-developer-tools/02-ide-support.md#2025-04-18_snippet_10\n\nLANGUAGE: lua\nCODE:\n```\nlocal custom_format = function()\n    if vim.bo.filetype == \"templ\" then\n        local bufnr = vim.api.nvim_get_current_buf()\n        local filename = vim.api.nvim_buf_get_name(bufnr)\n        local cmd = \"templ fmt \" .. vim.fn.shellescape(filename)\n\n        vim.fn.jobstart(cmd, {\n            on_exit = function()\n                -- Reload the buffer only if it's still the current buffer\n                if vim.api.nvim_get_current_buf() == bufnr then\n                    vim.cmd('e!')\n                end\n            end,\n        })\n    else\n        vim.lsp.buf.format()\n    end\nend\n```\n\n----------------------------------------\n\nTITLE: Exporting React Rendering Function in TypeScript\nDESCRIPTION: Exports a function to render the Hello React component with data from a HTML element. This function bridges server-side data with client-side React rendering.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/03-syntax-and-usage/17-using-react-with-templ.md#2025-04-18_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nexport function renderHello(e: HTMLElement) {\n  const name = e.getAttribute('data-name') ?? \"\";\n  createRoot(e).render(Hello(name));\n}\n```\n\n----------------------------------------\n\nTITLE: Building Safe URLs in Templ Component\nDESCRIPTION: Example of using urlbuilder package to construct a safe URL with path segments and query parameters. The component creates a link to an order details page with pagination parameters, demonstrating the fluent API for URL construction.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/13-experimental/02-urlbuilder.md#2025-04-18_snippet_0\n\nLANGUAGE: templ\nCODE:\n```\nimport (\n  \"github.com/templ-go/x/urlbuilder\"\n  \"strconv\"\n  \"strings\"\n)\n\ntempl component(o Order) {\n  <a\n    href={ urlbuilder.New(\"https\", \"example.com\").\n    Path(\"orders\").\n    Path(o.ID).\n    Path(\"line-items\").\n    Query(\"page\", strconv.Itoa(1)).\n    Query(\"limit\", strconv.Itoa(10)).\n    Build() }\n  >\n    { strings.ToUpper(o.Name) }\n  </a>\n}\n```\n\n----------------------------------------\n\nTITLE: Passing Templ Components as Parameters Within Templates\nDESCRIPTION: Shows how to pass templ components as parameters to other components within templates using standard Go function call syntax.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/03-syntax-and-usage/10-template-composition.md#2025-04-18_snippet_5\n\nLANGUAGE: templ\nCODE:\n```\npackage main\n\ntempl heading() {\n    <h1>Heading</h1>\n}\n\ntempl layout(contents templ.Component) {\n\t<div id=\"heading\">\n\t\t@heading()\n\t</div>\n\t<div id=\"contents\">\n\t\t@contents\n\t</div>\n}\n\ntempl paragraph(contents string) {\n\t<p>{ contents }</p>\n}\n\ntempl root() {\n\t@layout(paragraph(\"Dynamic contents\"))\n}\n```\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\t\"os\"\n)\n\nfunc main() {\n\troot().Render(context.Background(), os.Stdout)\n}\n```\n\n----------------------------------------\n\nTITLE: Storing translations in YAML for internationalization\nDESCRIPTION: Example of a YAML file storing English translations for internationalization purposes. Translations are organized hierarchically with language code as the top-level key.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/12-integrations/02-internationalization.md#2025-04-18_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nen:\n  hello: \"Hello\"\n  select_language: \"Select Language\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Neovim with Minimal Setup for Templ Development\nDESCRIPTION: Complete Neovim configuration that sets up lazy.nvim package manager, LSP support for templ, html, htmx, and tailwind, along with autocompletion and syntax highlighting via tree-sitter. This provides a minimal but functional environment for Templ development.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/09-developer-tools/02-ide-support.md#2025-04-18_snippet_15\n\nLANGUAGE: lua\nCODE:\n```\nlocal lazypath = vim.fn.stdpath(\"data\") .. \"/lazy/lazy.nvim\"\nif not vim.loop.fs_stat(lazypath) then\n  vim.fn.system({\n    \"git\",\n    \"clone\",\n    \"--filter=blob:none\",\n    \"https://github.com/folke/lazy.nvim.git\",\n    \"--branch=stable\", -- latest stable release\n    lazypath,\n  })\nend\nvim.opt.rtp:prepend(lazypath)\nvim.g.mapleader = \" \" -- Make sure to set `mapleader` before lazy so your mappings are correct\n\nrequire(\"lazy\").setup({\n  'neovim/nvim-lspconfig',\n  {\n    -- Autocompletion\n    'hrsh7th/nvim-cmp',\n    dependencies = {\n      'hrsh7th/cmp-nvim-lsp',\n    },\n  },\n  {\n    -- Highlight, edit, and navigate code\n    'nvim-treesitter/nvim-treesitter',\n    dependencies = {\n      'vrischmann/tree-sitter-templ',\n    },\n    build = ':TSUpdate',\n  },\n})\n\nvim.filetype.add({ extension = { templ = \"templ\" } })\n\ncapabilities = require('cmp_nvim_lsp').default_capabilities(capabilities)\nlocal lspconfig = require(\"lspconfig\")\n\nlspconfig.templ.setup{\n  on_attach = on_attach,\n  capabilities = capabilities,\n}\n\nlspconfig.tailwindcss.setup({\n  on_attach = on_attach,\n  capabilities = capabilities,\n  filetypes = { \"templ\", \"astro\", \"javascript\", \"typescript\", \"react\" },\n  init_options = { userLanguages = { templ = \"html\" } },\n})\n\nlspconfig.html.setup({\n  on_attach = on_attach,\n  capabilities = capabilities,\n  filetypes = { \"html\", \"templ\" },\n})\n\nlspconfig.htmx.setup({\n  on_attach = on_attach,\n  capabilities = capabilities,\n  filetypes = { \"html\", \"templ\" },\n})\n\nlocal cmp = require 'cmp'\ncmp.setup({\n  mapping = cmp.mapping.preset.insert({\n    ['<C-b>'] = cmp.mapping.scroll_docs(-4),\n    ['<C-f>'] = cmp.mapping.scroll_docs(4),\n    ['<C-Space>'] = cmp.mapping.complete(),\n    ['<C-e>'] = cmp.mapping.abort(),\n    ['<CR>'] = cmp.mapping.confirm({ select = true }),\n  }),\n  sources = cmp.config.sources({\n    { name = 'nvim_lsp' },\n  })\n})\n\nrequire'nvim-treesitter.configs'.setup {\n  ensure_installed = { \"templ\" },\n  sync_install = false,\n  auto_install = true,\n  ignore_install = { \"javascript\" },\n  highlight = {\n    enable = true,\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Using Children in Code Components with Go and Templ\nDESCRIPTION: Shows how to pass children to a component using Go code with the templ.WithChildren function. It demonstrates creating a component function and rendering it within a wrapper.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/03-syntax-and-usage/10-template-composition.md#2025-04-18_snippet_2\n\nLANGUAGE: templ\nCODE:\n```\ntempl wrapChildren() {\n\t<div id=\"wrapper\">\n\t\t{ children... }\n\t</div>\n}\n```\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n  \"context\"\n  \"os\"\n\n  \"github.com/a-h/templ\"\n)\n\nfunc main() {\n  contents := templ.ComponentFunc(func(ctx context.Context, w io.Writer) error {\n    _, err := io.WriteString(w, \"<div>Inserted from Go code</div>\")\n    return err\n  })\n  ctx := templ.WithChildren(context.Background(), contents)\n  wrapChildren().Render(ctx, os.Stdout)\n}\n```\n\n----------------------------------------\n\nTITLE: Slot Component for Declarative Shadow DOM\nDESCRIPTION: Implementation of a Slot component used for creating loading placeholders in Declarative Shadow DOM.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/05-server-side-rendering/05-streaming.md#2025-04-18_snippet_3\n\nLANGUAGE: go\nCODE:\n```\ntempl Slot(name string) {\n\t<slot name={ name }>\n\t\t<div>Loading { name }...</div>\n\t</slot>\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Tailwind CSS Intellisense for Templ in VSCode\nDESCRIPTION: JSON configuration to enable Tailwind CSS autocompletion in .templ files by mapping templ to html for the Tailwind CSS language server.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/09-developer-tools/02-ide-support.md#2025-04-18_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"tailwindCSS.includeLanguages\": {\n    \"templ\": \"html\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Including JavaScript in Templ Components\nDESCRIPTION: A Templ component for the HTML head that includes a script tag to load the bundled JavaScript file.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/03-syntax-and-usage/12-script-templates.md#2025-04-18_snippet_12\n\nLANGUAGE: templ\nCODE:\n```\ntempl head() {\n\t<head>\n\t\t<script src=\"/assets/js/index.js\"></script>\n\t</head>\n}\n```\n\n----------------------------------------\n\nTITLE: Visualizing HTTP Request Flow with Mermaid Diagram\nDESCRIPTION: A flowchart diagram showing how HTTP POST requests flow from browser to web server, updating state and returning as responses.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/05-server-side-rendering/02-example-counter-application.md#2025-04-18_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart TD\n  b[Browser] --HTTP POST request--> ws[Web Server];\n  ws --Update state--> ws;\n  ws --HTTP POST response--> b;\n```\n\n----------------------------------------\n\nTITLE: Creating React Components in TypeScript\nDESCRIPTION: Defines two simple React components (Header and Body) using TypeScript and JSX syntax. These components will be used in the templ application.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/03-syntax-and-usage/17-using-react-with-templ.md#2025-04-18_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nexport const Header = () => (<h1>React component Header</h1>);\n\nexport const Body = () => (<div>This is client-side content from React</div>);\n```\n\n----------------------------------------\n\nTITLE: HTML Rendering Output Example\nDESCRIPTION: Demonstrates how templ sanitizes class names in the final HTML output, replacing unsafe class names with a placeholder and escaping even bypassed sanitization content.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/10-security/01-injection-attacks.md#2025-04-18_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"--templ-css-class-safe-name &amp;sanitization bypassed\"></div>\n```\n\n----------------------------------------\n\nTITLE: Setting Up HTMX LSP for Templ Files in Neovim\nDESCRIPTION: Lua configuration to enable the HTMX language server for HTML and Templ files in Neovim. This provides autocompletion for HTMX attributes in Templ templates.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/09-developer-tools/02-ide-support.md#2025-04-18_snippet_6\n\nLANGUAGE: lua\nCODE:\n```\nlspconfig.htmx.setup({\n    on_attach = on_attach,\n    capabilities = capabilities,\n    filetypes = { \"html\", \"templ\" },\n})\n```\n\n----------------------------------------\n\nTITLE: Using Static Class and Style Attributes in Templ\nDESCRIPTION: Demonstrates how to add static class and style attributes to HTML elements in Templ components. The example creates a button with predefined classes and inline styling.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/03-syntax-and-usage/11-css-style-management.md#2025-04-18_snippet_0\n\nLANGUAGE: templ\nCODE:\n```\ntempl button(text string) {\n\t<button class=\"button is-primary\" style=\"background-color: red\">{ text }</button>\n}\n```\n\n----------------------------------------\n\nTITLE: Inline Method Component Initialization in templ\nDESCRIPTION: Example of initializing a struct and calling its component method inline within another templ component.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/04-core-concepts/01-components.md#2025-04-18_snippet_6\n\nLANGUAGE: templ\nCODE:\n```\npackage main\n\nimport \"os\"\n\ntype Data struct {\n\tmessage string\n}\n\ntempl (d Data) Method() {\n\t<div>{ d.message }</div>\n}\n\ntempl Message() {\n    <div>\n        @Data{\n            message: \"You can implement methods on a type.\",\n        }.Method()\n    </div>\n}\n\nfunc main() {\n\tMessage().Render(context.Background(), os.Stdout)\n}\n```\n\n----------------------------------------\n\nTITLE: templ.Component Interface Definition\nDESCRIPTION: The core interface that all templ components implement, containing a Render method that writes the component output to an io.Writer.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/04-core-concepts/01-components.md#2025-04-18_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ntype Component interface {\n\tRender(ctx context.Context, w io.Writer) error\n}\n```\n\n----------------------------------------\n\nTITLE: Running Documentation Development Server\nDESCRIPTION: Command to start the development server for the documentation site.\nSOURCE: https://github.com/a-h/templ/blob/main/README.md#2025-04-18_snippet_14\n\nLANGUAGE: sh\nCODE:\n```\nnpm run start\n```\n\n----------------------------------------\n\nTITLE: Installing Templ Globally via Go\nDESCRIPTION: Command to install Templ globally using Go 1.24 or greater.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/02-quick-start/01-installation.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo install github.com/a-h/templ/cmd/templ@latest\n```\n\n----------------------------------------\n\nTITLE: HTTP Request Handler Implementation in Go\nDESCRIPTION: Implementation of HTTP handler methods for processing GET and POST requests with templ component rendering.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/07-project-structure/01-project-structure.md#2025-04-18_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nfunc (h *DefaultHandler) ServeHTTP(w http.ResponseWriter, r *http.Request) {\n\tif r.Method == http.MethodPost {\n\t\th.Post(w, r)\n\t\treturn\n\t}\n\th.Get(w, r)\n}\n\nfunc (h *DefaultHandler) Get(w http.ResponseWriter, r *http.Request) {\n\tvar props ViewProps\n\tvar err error\n\tprops.Counts, err = h.CountService.Get(r.Context(), session.ID(r))\n\tif err != nil {\n\t\th.Log.Error(\"failed to get counts\", slog.Any(\"error\", err))\n\t\thttp.Error(w, \"failed to get counts\", http.StatusInternalServerError)\n\t\treturn\n\t}\n\th.View(w, r, props)\n}\n\nfunc (h *DefaultHandler) Post(w http.ResponseWriter, r *http.Request) {\n\tr.ParseForm()\n\n\tvar it services.IncrementType\n\tif r.Form.Has(\"global\") {\n\t\tit = services.IncrementTypeGlobal\n\t}\n\tif r.Form.Has(\"session\") {\n\t\tit = services.IncrementTypeSession\n\t}\n\n\tcounts, err := h.CountService.Increment(r.Context(), it, session.ID(r))\n\tif err != nil {\n\t\th.Log.Error(\"failed to increment\", slog.Any(\"error\", err))\n\t\thttp.Error(w, \"failed to increment\", http.StatusInternalServerError)\n\t\treturn\n\t}\n\n\th.View(w, r, ViewProps{\n\t\tCounts: counts,\n\t})\n}\n\ntype ViewProps struct {\n\tCounts services.Counts\n}\n\nfunc (h *DefaultHandler) View(w http.ResponseWriter, r *http.Request, props ViewProps) {\n\tcomponents.Page(props.Counts.Global, props.Counts.Session).Render(r.Context(), w)\n}\n```\n\n----------------------------------------\n\nTITLE: Using templUI Button Component in templ\nDESCRIPTION: This example demonstrates how to import and use the Button component from the templUI library in a templ page. It shows how to configure button properties including text and an icon.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/15-component-libraries/index.md#2025-04-18_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/axzilla/templui/components\"\n\ntempl ExamplePage() {\n  @components.Button(components.ButtonProps{\n    Text: \"Click me\",\n    IconRight: icons.ArrowRight(icons.IconProps{Size: \"16\"}),\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: HTML Output with SafeCSS\nDESCRIPTION: Shows the resulting HTML when using templ.SafeCSS to bypass sanitization for trusted URL content.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/03-syntax-and-usage/11-css-style-management.md#2025-04-18_snippet_15\n\nLANGUAGE: html\nCODE:\n```\n<div style=\"background-image: url(/safe.png);\">\n    Trusted content\n</div>\n```\n\n----------------------------------------\n\nTITLE: Configuring Format on Save for Templ in VSCode\nDESCRIPTION: JSON configuration to enable formatting of .templ files on save in Visual Studio Code. This sets the default formatter for .templ files to the a-h.templ extension.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/09-developer-tools/02-ide-support.md#2025-04-18_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"editor.formatOnSave\": true,\n    \"[templ]\": {\n        \"editor.defaultFormatter\": \"a-h.templ\"\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: Creating templ Components with Parameters\nDESCRIPTION: Definition of templ components that accept parameters. The timeComponent displays a timestamp passed as a parameter, while notFoundComponent renders a 404 error message.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/05-server-side-rendering/01-creating-an-http-server-with-templ.md#2025-04-18_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport \"time\"\n\ntempl timeComponent(d time.Time) {\n\t<div>{ d.String() }</div>\n}\n\ntempl notFoundComponent() {\n\t<div>404 - Not found</div>\n}\n```\n\n----------------------------------------\n\nTITLE: Combining Multiple Class Names in Templ\nDESCRIPTION: Demonstrates how to combine static and dynamic class names in a class attribute.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/03-syntax-and-usage/11-css-style-management.md#2025-04-18_snippet_19\n\nLANGUAGE: templ\nCODE:\n```\npackage main\n\ntempl button(text string, className string) {\n\t<button class={ \"button\", className }>{ text }</button>\n}\n```\n\n----------------------------------------\n\nTITLE: Using String Expression Attributes in templ\nDESCRIPTION: Shows how to use Go string variables as element attributes in templ components, including function calls that return strings.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/03-syntax-and-usage/03-attributes.md#2025-04-18_snippet_1\n\nLANGUAGE: templ\nCODE:\n```\ntempl component(testID string) {\n  <p data-testid={ testID }>Text</p>\n}\n\ntempl page() {\n  @component(\"testid-123\")\n}\n```\n\nLANGUAGE: go\nCODE:\n```\nfunc testID(isTrue bool) string {\n    if isTrue {\n        return \"testid-123\"\n    }\n    return \"testid-456\"\n}\n```\n\nLANGUAGE: templ\nCODE:\n```\ntempl component() {\n  <p data-testid={ testID(true) }>Text</p>\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Code for a Single Templ File\nDESCRIPTION: Example command showing how to generate Go code for a specific templ file using the -f flag.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/09-developer-tools/01-cli.md#2025-04-18_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ntempl generate -f header.templ\n```\n\n----------------------------------------\n\nTITLE: CSS Middleware Setup in Go\nDESCRIPTION: Shows how to configure CSS middleware for serving global stylesheets, reducing bandwidth by preventing duplicate style tags in responses.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/03-syntax-and-usage/11-css-style-management.md#2025-04-18_snippet_30\n\nLANGUAGE: go\nCODE:\n```\nc1 := className()\nhandler := NewCSSMiddleware(httpRoutes, c1)\nhttp.ListenAndServe(\":8000\", handler)\n```\n\n----------------------------------------\n\nTITLE: Running the Templ Application\nDESCRIPTION: Command to run the Go program with the templ component. This executes the application which renders the HTML to stdout.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/02-quick-start/02-creating-a-simple-templ-component.md#2025-04-18_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ngo run .\n```\n\n----------------------------------------\n\nTITLE: Handling Invalid CSS Values in Templ\nDESCRIPTION: Shows how invalid CSS property names and values are automatically sanitized during rendering.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/03-syntax-and-usage/11-css-style-management.md#2025-04-18_snippet_16\n\nLANGUAGE: templ\nCODE:\n```\ntempl InvalidButton() {\n    <button style={ \n        map[string]string{\n            \"\": \"invalid-property\",\n            \"color\": \"</style>\",\n        }\n    }>Click me</button>\n}\n```\n\n----------------------------------------\n\nTITLE: Binding Custom Format Function in Neovim\nDESCRIPTION: Lua code to bind the custom Templ formatter to a keybinding in Neovim. This sets up a leader keybinding for manual formatting of files.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/09-developer-tools/02-ide-support.md#2025-04-18_snippet_11\n\nLANGUAGE: lua\nCODE:\n```\nlocal on_attach = function(client, bufnr)\n    local opts = { buffer = bufnr, remap = false }\n    -- other configuration options\n    vim.keymap.set(\"n\", \"<leader>lf\", custom_format, opts)\nend\n```\n\n----------------------------------------\n\nTITLE: Declaring Package and Imports in templ\nDESCRIPTION: Demonstrates how to declare the package name and import required packages in a templ file, similar to Go syntax.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/03-syntax-and-usage/01-basic-syntax.md#2025-04-18_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport \"fmt\"\nimport \"time\"\n```\n\n----------------------------------------\n\nTITLE: Visualizing Application Architecture with Mermaid\nDESCRIPTION: Diagram showing the layered architecture pattern with handlers, services, database, and components.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/07-project-structure/01-project-structure.md#2025-04-18_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph LR\n    handler[HTTP handler] -- uses --> services[Services]\n    services -- use --> db[Database access code]\n    db -- uses --> dynamodb[(DynamoDB)]\n    handler -- renders --> components[Components]\n```\n\n----------------------------------------\n\nTITLE: Defining Constant Attributes in templ\nDESCRIPTION: Demonstrates how to set constant HTML attributes in templ components using double quotes.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/03-syntax-and-usage/03-attributes.md#2025-04-18_snippet_0\n\nLANGUAGE: templ\nCODE:\n```\ntempl component() {\n  <p data-testid=\"paragraph\">Text</p>\n}\n```\n\n----------------------------------------\n\nTITLE: Formatting Templ Files with Stdin/Stdout\nDESCRIPTION: Command to format templ content from standard input and output the result to standard output.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/09-developer-tools/01-cli.md#2025-04-18_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ntempl fmt\n```\n\n----------------------------------------\n\nTITLE: Correct Handling of Text Starting with Control Keywords in Templ\nDESCRIPTION: Demonstrates the correct way to handle text starting with 'if', 'switch', or 'for' using Go string expressions or capitalization.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/03-syntax-and-usage/05-statements.md#2025-04-18_snippet_4\n\nLANGUAGE: templ\nCODE:\n```\npackage main\n\ntempl display(price float64, count int) {\n\t<p>Switch to Linux</p>\n\t<p>{ `switch to Linux` }</p>\n\t<p>{ \"for a day\" }</p>\n\t<p>{ fmt.Sprintf(\"%f\", price) }{ \"for\" }{ fmt.Sprintf(\"%d\", count) }</p>\n\t<p>{ fmt.Sprintf(\"%f for %d\", price, count) }</p>\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering templ Component in Go\nDESCRIPTION: Shows how to render a templ component to stdout using Go's context and os packages.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/03-syntax-and-usage/02-elements.md#2025-04-18_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\t\"os\"\n)\n\nfunc main() {\n\tbutton(\"Click me\").Render(context.Background(), os.Stdout)\n}\n```\n\n----------------------------------------\n\nTITLE: HTML Output of Invalid CSS Handling\nDESCRIPTION: Shows how invalid CSS values are transformed in the output HTML for security.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/03-syntax-and-usage/11-css-style-management.md#2025-04-18_snippet_17\n\nLANGUAGE: html\nCODE:\n```\n<button style=\"zTemplUnsafeCSSPropertyName:zTemplUnsafeCSSPropertyValue;color:zTemplUnsafeCSSPropertyValue;\">\n    Click me\n</button>\n```\n\n----------------------------------------\n\nTITLE: Defining a Templ Function in Go\nDESCRIPTION: This snippet defines a templ function named 'test' that includes HTML markup and various types of comments. It demonstrates how different comment styles are handled in templ templates.\nSOURCE: https://github.com/a-h/templ/blob/main/parser/v2/formattestdata/comments_are_preserved.txt#2025-04-18_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\npackage main\n\ntempl test() {\n\t<!-- This is a comment -->\n\t// This is not included in the output.\n\t<div>Some standard templ</div>\n\t/* This is not included in the output too. */\n\t/*\n\t\tLeave this alone.\n\t*/\n}\n```\n\n----------------------------------------\n\nTITLE: Generated HTML Output\nDESCRIPTION: The resulting HTML output when rendering the templ component with isLoggedIn set to true, showing the welcome message div.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/03-syntax-and-usage/06-if-else.md#2025-04-18_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div>\n Welcome back!\n</div>\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS CDK Stack for Lambda Deployment in Go\nDESCRIPTION: This code snippet shows how to set up an AWS CDK stack for deploying a Go Lambda function. It configures the function properties, sets up environment variables, and creates a function URL for accessing the Lambda.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/08-hosting-and-deployment/01-hosting-on-aws-lambda.md#2025-04-18_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n// Strip the binary, and remove the deprecated Lambda SDK RPC code for performance.\n// These options are not required, but make cold start faster.\nbundlingOptions := &awslambdago.BundlingOptions{\n  GoBuildFlags: &[]*string{jsii.String(`-ldflags \"-s -w\" -tags lambda.norpc`)},\n}\nf := awslambdago.NewGoFunction(stack, jsii.String(\"handler\"), &awslambdago.GoFunctionProps{\n  Runtime:      awslambda.Runtime_PROVIDED_AL2(),\n  MemorySize:   jsii.Number(1024),\n  Architecture: awslambda.Architecture_ARM_64(),\n  Entry:        jsii.String(\"../lambda\"),\n  Bundling:     bundlingOptions,\n  Environment: &map[string]*string{\n    \"TABLE_NAME\": db.TableName(),\n  },\n})\n// Add a Function URL.\nlambdaURL := f.AddFunctionUrl(&awslambda.FunctionUrlOptions{\n  AuthType: awslambda.FunctionUrlAuthType_NONE,\n})\nawscdk.NewCfnOutput(stack, jsii.String(\"lambdaFunctionUrl\"), &awscdk.CfnOutputProps{\n  ExportName: jsii.String(\"lambdaFunctionUrl\"),\n  Value:      lambdaURL.Url(),\n})\n```\n\n----------------------------------------\n\nTITLE: Rendering a templ Component with Switch Statement\nDESCRIPTION: A Go main function that renders the userTypeDisplay component with the parameter 'Other', which will trigger the default case in the switch statement. The output is rendered to standard output.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/03-syntax-and-usage/07-switch.md#2025-04-18_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\t\"os\"\n)\n\nfunc main() {\n\tuserTypeDisplay(\"Other\").Render(context.Background(), os.Stdout)\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing a Go Module with Bash\nDESCRIPTION: Sets up a new Go module with a specific import path for the project.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/06-static-rendering/01-generating-static-html-files-with-templ.md#2025-04-18_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd static-generator\ngo mod init github.com/a-h/templ-examples/static-generator\n```\n\n----------------------------------------\n\nTITLE: Configuring NPM for TypeScript Bundling\nDESCRIPTION: Package.json configuration for bundling TypeScript code using esbuild, with script to build, minify, and output the compiled JavaScript to an assets directory.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/03-syntax-and-usage/12-script-templates.md#2025-04-18_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"ts\",\n  \"version\": \"1.0.0\",\n  \"scripts\": {\n    \"build\": \"esbuild --bundle --minify --outfile=../assets/js/index.js ./src/index.ts\"\n  },\n  \"devDependencies\": {\n    \"esbuild\": \"0.21.3\",\n    \"typescript\": \"^5.4.5\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: CSS Sanitization Behavior in Templ\nDESCRIPTION: Demonstrates how potentially dangerous CSS values are sanitized by default to prevent security vulnerabilities.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/03-syntax-and-usage/11-css-style-management.md#2025-04-18_snippet_12\n\nLANGUAGE: templ\nCODE:\n```\ntempl UnsafeExample() {\n    <div style={ \"background-image: url('javascript:alert(1)')\" }>\n        Dangerous content\n    </div>\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering a templ Component in Go\nDESCRIPTION: This Go code snippet shows how to render the Example templ component to standard output using the Render method.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/03-syntax-and-usage/15-using-with-go-templates.md#2025-04-18_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nfunc main() {\n\tExample.Render(context.Background(), os.Stdout)\n}\n```\n\n----------------------------------------\n\nTITLE: Class Name Sanitization in templ\nDESCRIPTION: Class names are sanitized by default, with unsafe names replaced by a placeholder. Sanitization can be bypassed using templ.SafeClass, but the result still undergoes HTML escaping.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/10-security/01-injection-attacks.md#2025-04-18_snippet_3\n\nLANGUAGE: html\nCODE:\n```\ntempl Example() {\n  <div class={ \"unsafe</style&gt;-will-sanitized\", templ.SafeClass(\"&sanitization bypassed\") }></div>\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TEMPL Input Component with HTML\nDESCRIPTION: Defines a TEMPL template named 'input' that takes value and validation string parameters. The template renders a div containing a paragraph with a link, demonstrating string interpolation within HTML elements.\nSOURCE: https://github.com/a-h/templ/blob/main/parser/v2/formattestdata/children_indented__first_child.txt#2025-04-18_snippet_0\n\nLANGUAGE: templ\nCODE:\n```\npackage test\n\ntempl input(value, validation string) {\n\t<div>\n        <p>{ \"the\" }<a href=\"http://example.com\">{ \"data\" }</a></p></div>\n}\n```\n\nLANGUAGE: templ\nCODE:\n```\npackage test\n\ntempl input(value, validation string) {\n\t<div>\n\t\t<p>{ \"the\" }<a href=\"http://example.com\">{ \"data\" }</a></p>\n\t</div>\n}\n```\n\n----------------------------------------\n\nTITLE: Raw HTML Output Result\nDESCRIPTION: The resulting HTML output after rendering the template with templ.Raw function. Shows how the HTML is rendered without escaping.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/03-syntax-and-usage/16-rendering-raw-html.md#2025-04-18_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html>\n\t<body>\n\t\t<div>Hello, World!</div>\n\t</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Defining the templ.Component Interface in Go\nDESCRIPTION: The core interface for templ components, which includes a Render method that outputs HTML to an io.Writer.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/06-static-rendering/01-generating-static-html-files-with-templ.md#2025-04-18_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntype Component interface {\n\t// Render the template.\n\tRender(ctx context.Context, w io.Writer) error\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Go Project with Templ Dependency\nDESCRIPTION: Initializes a new Go module and installs the templ package dependency. These commands set up the Go module and download the required templ library.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/02-quick-start/02-creating-a-simple-templ-component.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd hello-world\ngo mod init github.com/a-h/templ-examples/hello-world\ngo get github.com/a-h/templ\n```\n\n----------------------------------------\n\nTITLE: Running Templ with Code Generation, Watch Mode, and Proxy\nDESCRIPTION: This command runs the Templ code generator in watch mode, sets up a proxy to localhost:8080, and executes the Go application. It's designed for development workflows, allowing real-time code generation and application updates.\nSOURCE: https://github.com/a-h/templ/blob/main/examples/counter-basic/README.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ntempl generate --watch --proxy=\"http://localhost:8080\" --cmd=\"go run .\"\n```\n\n----------------------------------------\n\nTITLE: Using SafeCSS to Bypass Sanitization\nDESCRIPTION: Demonstrates using templ.SafeCSS to specify trusted CSS content that should not be sanitized.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/03-syntax-and-usage/11-css-style-management.md#2025-04-18_snippet_14\n\nLANGUAGE: templ\nCODE:\n```\ntempl SafeEmbed() {\n    <div style={ templ.SafeCSS(\"background-image: url(/safe.png);\") }>\n        Trusted content\n    </div>\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Templ File Extension in Neovim\nDESCRIPTION: Lua code to register the .templ file extension with Neovim's filetype detection system. This ensures that Neovim recognizes .templ files properly for syntax highlighting and LSP integration.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/09-developer-tools/02-ide-support.md#2025-04-18_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\nvim.filetype.add({ extension = { templ = \"templ\" } })\n```\n\n----------------------------------------\n\nTITLE: Using Function Return Values for Styles\nDESCRIPTION: Shows how to use a function that returns a style value and an error. This pattern is useful when style generation might fail.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/03-syntax-and-usage/11-css-style-management.md#2025-04-18_snippet_4\n\nLANGUAGE: templ\nCODE:\n```\ntempl Page(userType string) {\n\t<div style={ getStyle(userType) }>Styled</div>\n}\n\nfunc getStyle(userType string) (string, error) {\n   //TODO: Look up in something that might error.\n   return \"background-color: red\", errors.New(\"failed\")\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Templ Template Component\nDESCRIPTION: Defines a minimal Templ component named Hello that outputs the text 'Hello'. Shows basic Templ syntax with package declaration and component definition.\nSOURCE: https://github.com/a-h/templ/blob/main/parser/v2/formattestdata/templatefile_can_be_round_tripped.txt#2025-04-18_snippet_0\n\nLANGUAGE: templ\nCODE:\n```\npackage goof\n\ntempl Hello() {\n\tHello\n}\n```\n\n----------------------------------------\n\nTITLE: Expected HTML Output\nDESCRIPTION: The HTML output returned by the server when accessing the root endpoint, showing the rendered hello component with the name 'John'.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/02-quick-start/03-running-your-first-templ-application.md#2025-04-18_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<div>Hello, John</div>\n```\n\n----------------------------------------\n\nTITLE: Go Main Program Using templ Component\nDESCRIPTION: Main Go program that demonstrates how to render the templ component with a logged-in state. Uses context and os packages to render the output to stdout.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/03-syntax-and-usage/06-if-else.md#2025-04-18_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\t\"os\"\n)\n\nfunc main() {\n\tlogin(true).Render(context.Background(), os.Stdout)\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a templ Component in a .templ File\nDESCRIPTION: Defines a simple templ component that renders a greeting with a user-provided name.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/06-static-rendering/01-generating-static-html-files-with-templ.md#2025-04-18_snippet_3\n\nLANGUAGE: templ\nCODE:\n```\npackage main\n\ntempl hello(name string) {\n\t<div>Hello, { name }</div>\n}\n```\n\n----------------------------------------\n\nTITLE: Running Combined All Tasks\nDESCRIPTION: Meta-task that depends on build-templ, build-js, and run tasks, and executes them in sequence before printing a completion message.\nSOURCE: https://github.com/a-h/templ/blob/main/examples/integration-react/README.md#2025-04-18_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\necho \"Running\"\n```\n\n----------------------------------------\n\nTITLE: Templ CLI Basic Usage\nDESCRIPTION: Shows the basic usage of the templ command-line interface, listing all available commands including generate, fmt, lsp, info, and version.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/09-developer-tools/01-cli.md#2025-04-18_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nusage: templ <command> [<args>...]\n\ntempl - build HTML UIs with Go\n\nSee docs at https://templ.guide\n\ncommands:\n  generate   Generates Go code from templ files\n  fmt        Formats templ files\n  lsp        Starts a language server for templ files\n  info       Displays information about the templ environment\n  version    Prints the version\n```\n\n----------------------------------------\n\nTITLE: Testing Server Response with cURL\nDESCRIPTION: Command to test the web server's response using cURL, which sends an HTTP request to localhost on port 3000.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/02-quick-start/03-running-your-first-templ-application.md#2025-04-18_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl localhost:3000\n```\n\n----------------------------------------\n\nTITLE: Defining Conditional Attributes in Templ (Formatted Output)\nDESCRIPTION: Shows the properly formatted version of the conditional attributes templ component. This is the preferred syntax with proper indentation and structure for the conditional attribute.\nSOURCE: https://github.com/a-h/templ/blob/main/parser/v2/formattestdata/conditional_expressions_have_the_same_child_indentation_rules_as_regular_elements.txt#2025-04-18_snippet_1\n\nLANGUAGE: templ\nCODE:\n```\npackage test\n\ntempl conditionalAttributes(addClass bool) {\n\t<div\n\t\tid=\"conditional\"\n\t\tif addClass {\n\t\t\tclass=\"itWasTrue\"\n\t\t}\n\t>\n\t\tContent\n\t</div>\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Hello Template in Templ\nDESCRIPTION: This snippet defines a simple templ template named 'Hello' that renders the text 'Hello'. It's part of the 'goof' package and includes a multiline comment.\nSOURCE: https://github.com/a-h/templ/blob/main/parser/v2/formattestdata/templatefile_can_start_with_multiline_comments_and_whitespace.txt#2025-04-18_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\n/********************\n* multiline message *\n********************/\n\npackage goof\n\ntempl Hello() {\n\tHello\n}\n```\n\n----------------------------------------\n\nTITLE: HTML Output of Static Class and Style Attributes\nDESCRIPTION: Shows the resulting HTML output when rendering a button component with static class and style attributes.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/03-syntax-and-usage/11-css-style-management.md#2025-04-18_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<button class=\"button is-primary\" style=\"background-color: red\">\n Click me\n</button>\n```\n\n----------------------------------------\n\nTITLE: Rendering Dynamic Component in Go\nDESCRIPTION: Demonstrates rendering a templ component with dynamic values in Go.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/03-syntax-and-usage/02-elements.md#2025-04-18_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nfunc main() {\n\tcomponent := button(\"John\", \"Say Hello\")\n\tcomponent.Render(context.Background(), os.Stdout)\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Templ Files\nDESCRIPTION: Command to generate Templ template files\nSOURCE: https://github.com/a-h/templ/blob/main/examples/typescript/README.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ntempl generate\n```\n\n----------------------------------------\n\nTITLE: Properly Formatted Templ Input Component with Switch Statement\nDESCRIPTION: The same templ component after proper formatting, with correct indentation and line breaks. This version is much more readable and follows proper templ syntax conventions.\nSOURCE: https://github.com/a-h/templ/blob/main/parser/v2/formattestdata/switch_statements_are_placed_on_a_new_line.txt#2025-04-18_snippet_1\n\nLANGUAGE: templ\nCODE:\n```\npackage test\n\ntempl input(items []string) {\n\t<div>\n\t\t{ \"the\" }\n\t\t<div>{ \"other\" }</div>\n\t\tswitch items[0] {\n\t\t\tcase \"a\":\n\t\t\t\t<div>{ items[0] }</div>\n\t\t\tcase \"b\":\n\t\t\t\t<div>{ items[1] }</div>\n\t\t}\n\t</div>\n}\n```\n\n----------------------------------------\n\nTITLE: Generated Go Code from templ Component\nDESCRIPTION: Example of the Go function signature that is generated from a templ component. The function returns a templ.Component interface.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/04-core-concepts/01-components.md#2025-04-18_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nfunc headerTemplate(name string) templ.Component {\n  // Generated contents\n}\n```\n\n----------------------------------------\n\nTITLE: HTML Output of SafeCSS Usage\nDESCRIPTION: Shows the resulting HTML when using templ.SafeCSS to generate a transform style for a draggable element.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/03-syntax-and-usage/11-css-style-management.md#2025-04-18_snippet_11\n\nLANGUAGE: html\nCODE:\n```\n<div style=\"transform: translate(20px, 40px);\">\n    Drag me\n</div>\n```\n\n----------------------------------------\n\nTITLE: Formatted CSS Template Function with Proper Spacing\nDESCRIPTION: The formatted version of the CSS template function with proper indentation and spacing around interpolated values. This demonstrates the expected code style after formatting in the templ framework.\nSOURCE: https://github.com/a-h/templ/blob/main/parser/v2/formattestdata/cssarguments_multiline.txt#2025-04-18_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage p\n\ncss Style(\n\ta string,\n\tb string,\n\tc string,\n) {\n\tcolor: { a };\n\tbackground-color: { b };\n\tborder-color: { c };\n}\n```\n\n----------------------------------------\n\nTITLE: Formatted Button Template with Proper Indentation\nDESCRIPTION: Shows the properly formatted version of the same template with consistent indentation. This demonstrates how multiline attribute expressions should be formatted in templ templates, with proper alignment and indentation of nested structures.\nSOURCE: https://github.com/a-h/templ/blob/main/parser/v2/formattestdata/templ_expression_attributes_are_formatted_correctly_when_multiline.txt#2025-04-18_snippet_1\n\nLANGUAGE: templ\nCODE:\n```\npackage main\n\ntempl x(id string, class string) {\n\t<button\n\t\tid={ id }\n\t\tname={ \"name\" }\n\t\tclass={\n\t\t\t\"blue\",\n\t\t\tclass,\n\t\t\tmap[string]bool{\n\t\t\t\t\"a\": true,\n\t\t\t},\n\t\t}\n\t></button>\n}\n```\n\n----------------------------------------\n\nTITLE: Rendered HTML Output\nDESCRIPTION: Shows the final HTML output after the Templ component is rendered, displaying the accessed item's name.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/03-syntax-and-usage/09-raw-go.md#2025-04-18_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<p>A</p>\n```\n\n----------------------------------------\n\nTITLE: Restricting Style Attributes in templ\nDESCRIPTION: Style attributes cannot accept expressions, only constants, to prevent escaping vulnerabilities. Instead, templ recommends using CSS templates.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/10-security/01-injection-attacks.md#2025-04-18_snippet_2\n\nLANGUAGE: html\nCODE:\n```\ntempl Example() {\n  <div style={ \"will throw an error\" }></div>\n}\n```\n\n----------------------------------------\n\nTITLE: Conditional Attribute Template Function\nDESCRIPTION: Defines a templ template function that conditionally adds a class attribute to a div element based on a boolean parameter. The template includes fixed attributes 'id' and 'width' along with the conditional 'class' attribute.\nSOURCE: https://github.com/a-h/templ/blob/main/parser/v2/formattestdata/conditional_expressions_result_in_all_attrs_indented__2.txt#2025-04-18_snippet_0\n\nLANGUAGE: templ\nCODE:\n```\ntempl conditionalAttributes(addClass bool) {\n\t<div id=\"conditional\"\nif addClass {\nclass=\"itWasTrue\"\n}\nwidth=\"300\">Content</div>\n}\n```\n\nLANGUAGE: templ\nCODE:\n```\ntempl conditionalAttributes(addClass bool) {\n\t<div\n\t\tid=\"conditional\"\n\t\tif addClass {\n\t\t\tclass=\"itWasTrue\"\n\t\t}\n\t\twidth=\"300\"\n\t>Content</div>\n}\n```\n\n----------------------------------------\n\nTITLE: Running Docker Container with Port Mapping\nDESCRIPTION: Bash command to run a Docker container with port mapping. It maps port 8080 on the local machine to port 8080 inside the container, allowing access to the web application.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/08-hosting-and-deployment/02-hosting-using-docker.md#2025-04-18_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -p 8080:8080 counter-basic:latest\n```\n\n----------------------------------------\n\nTITLE: Handling Text Starting with Control Keywords in Templ\nDESCRIPTION: Shows how to handle text that starts with 'if', 'switch', or 'for' by using Go string expressions or capitalization.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/03-syntax-and-usage/05-statements.md#2025-04-18_snippet_1\n\nLANGUAGE: templ\nCODE:\n```\npackage main\n\ntempl display(price float64, count int) {\n\t<p>Switch to Linux</p>\n\t<p>{ `switch to Linux` }</p>\n\t<p>{ \"for a day\" }</p>\n\t<p>{ fmt.Sprintf(\"%f\", price) }{ \"for\" }{ fmt.Sprintf(\"%d\", count) }</p>\n\t<p>{ fmt.Sprintf(\"%f for %d\", price, count) }</p>\n}\n```\n\n----------------------------------------\n\nTITLE: Bundling Client-Side Code with esbuild\nDESCRIPTION: Command to bundle TypeScript and React code into a single JavaScript file using esbuild. This step prepares the client-side code for deployment and browser execution.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/03-syntax-and-usage/17-using-react-with-templ.md#2025-04-18_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nesbuild --bundle index.ts --outdir=../static --minify\n```\n\n----------------------------------------\n\nTITLE: Output Script Style Function Declaration\nDESCRIPTION: Expected output format showing proper indentation and spacing for the same Style function with three string parameters.\nSOURCE: https://github.com/a-h/templ/blob/main/parser/v2/formattestdata/scriptarguments_multiline.txt#2025-04-18_snippet_1\n\nLANGUAGE: templ\nCODE:\n```\npackage p\n\nscript Style(\n\ta string,\n\tb string,\n\tc string,\n) {\n\tconsole.log(a, b, c);\n}\n```\n\n----------------------------------------\n\nTITLE: Properly Formatted Conditional Attributes in Templ Template\nDESCRIPTION: The same Templ template after formatting, with consistent indentation and proper spacing. The conditional class attribute is properly indented within the element definition.\nSOURCE: https://github.com/a-h/templ/blob/main/parser/v2/formattestdata/conditional_expressions_with_else_blocks_are_also_formatted.txt#2025-04-18_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\npackage test\n\ntempl conditionalAttributes(addClass bool) {\n\t<div\n\t\tid=\"conditional\"\n\t\tif addClass {\n\t\t\tclass=\"itWasTrue\"\n\t\t} else {\n\t\t\tclass=\"itWasNotTrue\"\n\t\t}\n\t\twidth=\"300\"\n\t>Content</div>\n}\n```\n\n----------------------------------------\n\nTITLE: HTML Output of Map-based Style\nDESCRIPTION: Shows the resulting HTML when using a map to generate style attributes for a progress bar with a specific percentage width.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/03-syntax-and-usage/11-css-style-management.md#2025-04-18_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<div style=\"transition:width 0.3s ease;width:75%;\" class=\"progress-bar\">\n    <div class=\"progress-fill\"></div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Defining a CSS Template Function with Multiple Parameters in Templ\nDESCRIPTION: A CSS template definition named 'Style' that accepts three string parameters and uses them for color properties. The parameters are used for text color, background color, and border color respectively.\nSOURCE: https://github.com/a-h/templ/blob/main/parser/v2/formattestdata/cssarguments_multiline.txt#2025-04-18_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage p\n\ncss Style(\na string,\nb string,\nc string,\n) {\n\tcolor: {a};\n\tbackground-color: {b};\n\tborder-color: {c};\n}\n```\n\n----------------------------------------\n\nTITLE: Pulling Templ Docker Image\nDESCRIPTION: Command to pull the latest Templ Docker image from GitHub container registry.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/02-quick-start/01-installation.md#2025-04-18_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ndocker pull ghcr.io/a-h/templ:latest\n```\n\n----------------------------------------\n\nTITLE: Simplified Custom Templ Formatter for Neovim\nDESCRIPTION: A streamlined Lua function specifically for formatting Templ files in Neovim. This function is optimized for use with .templ files and reloads the buffer after formatting.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/09-developer-tools/02-ide-support.md#2025-04-18_snippet_13\n\nLANGUAGE: lua\nCODE:\n```\nlocal templ_format = function()\n    local bufnr = vim.api.nvim_get_current_buf()\n    local filename = vim.api.nvim_buf_get_name(bufnr)\n    local cmd = \"templ fmt \" .. vim.fn.shellescape(filename)\n\n    vim.fn.jobstart(cmd, {\n        on_exit = function()\n            -- Reload the buffer only if it's still the current buffer\n            if vim.api.nvim_get_current_buf() == bufnr then\n                vim.cmd('e!')\n            end\n        end,\n    })\nend\n```\n\n----------------------------------------\n\nTITLE: Air configuration for templ live reload\nDESCRIPTION: Example .air.toml configuration file for using Air with templ. It configures build commands, file watching patterns, and proxy settings for automatic reloading.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/09-developer-tools/03-live-reload.md#2025-04-18_snippet_6\n\nLANGUAGE: toml\nCODE:\n```\nroot = \".\"\ntmp_dir = \"tmp\"\n\n[build]\n  bin = \"./tmp/main\"\n  cmd = \"templ generate && go build -o ./tmp/main .\"\n  delay = 1000\n  exclude_dir = [\"assets\", \"tmp\", \"vendor\"]\n  exclude_file = []\n  exclude_regex = [\".*_templ.go\"]\n  exclude_unchanged = false\n  follow_symlink = false\n  full_bin = \"\"\n  include_dir = []\n  include_ext = [\"go\", \"tpl\", \"tmpl\", \"templ\", \"html\"]\n  kill_delay = \"0s\"\n  log = \"build-errors.log\"\n  send_interrupt = false\n  stop_on_error = true\n\n[color]\n  app = \"\"\n  build = \"yellow\"\n  main = \"magenta\"\n  runner = \"green\"\n  watcher = \"cyan\"\n\n[log]\n  time = false\n\n[misc]\n  clean_on_exit = false\n\n[proxy]\n  enabled = true\n  proxy_port = 8383\n  app_port = 8282\n```\n\n----------------------------------------\n\nTITLE: Defining Button Template with Multiline Attribute Expressions\nDESCRIPTION: Defines a templ component 'x' that renders a button with dynamic attributes. The template accepts id and class parameters and demonstrates multiline attribute value expressions using Go maps and string literals.\nSOURCE: https://github.com/a-h/templ/blob/main/parser/v2/formattestdata/templ_expression_attributes_are_formatted_correctly_when_multiline.txt#2025-04-18_snippet_0\n\nLANGUAGE: templ\nCODE:\n```\npackage main\n\ntempl x(id string, class string) {\n<button\nid={id}\nname={\n      \"name\"\n  }\nclass={ \n      \"blue\",\n    class,\n\t\tmap[string]bool{\n\t\t\"a\": true,\n\t\t},\n}\n></button>\n}\n```\n\n----------------------------------------\n\nTITLE: Formatted TEMPL Template Output\nDESCRIPTION: Properly formatted version of the TEMPL template with correct indentation and structure\nSOURCE: https://github.com/a-h/templ/blob/main/parser/v2/formattestdata/if_statements_are_placed_on_a_new_line.txt#2025-04-18_snippet_1\n\nLANGUAGE: templ\nCODE:\n```\npackage test\n\ntempl input(items []string) {\n\t<div>\n\t\t{ \"the\" }\n\t\t<div>{ \"other\" }</div>\n\t\tif items != nil {\n\t\t\t<div>{ items[0] }</div>\n\t\t} else {\n\t\t\t<div>{ items[1] }</div>\n\t\t}\n\t</div>\n}\n```\n\n----------------------------------------\n\nTITLE: HTML Output of Conditional Styling\nDESCRIPTION: Shows the resulting HTML when using conditional styling with the KeyValue pattern and an error state is active.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/03-syntax-and-usage/11-css-style-management.md#2025-04-18_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<input \n    type=\"text\" \n    value=\"\" \n    style=\"border-color: #ff3860; background-color: #fff5f7; padding: 0.5em 1em;\">\n```\n\n----------------------------------------\n\nTITLE: Output of html/template with templ Component\nDESCRIPTION: This HTML snippet shows the output of rendering an html/template that incorporates a templ component.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/03-syntax-and-usage/15-using-with-go-templates.md#2025-04-18_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html>\n\t<body>\n\t\t<div>Hello, World!</div>\n\t</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: CSS Constant Property Handling in templ\nDESCRIPTION: In CSS blocks, property names and constant values are not sanitized or escaped, allowing for direct use of standard CSS properties and values.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/10-security/01-injection-attacks.md#2025-04-18_snippet_7\n\nLANGUAGE: css\nCODE:\n```\ncss className() {\n\tbackground-color: #ffffff;\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying Docusaurus Website Without SSH\nDESCRIPTION: Command to deploy the Docusaurus website without using SSH, requiring the user's GitHub username.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/README.md#2025-04-18_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ GIT_USER=<Your GitHub username> yarn deploy\n```\n\n----------------------------------------\n\nTITLE: Generating Go Code from templ Files with Bash\nDESCRIPTION: Runs the templ generate command to convert templ files into Go code.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/06-static-rendering/01-generating-static-html-files-with-templ.md#2025-04-18_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ntempl generate\n```\n\n----------------------------------------\n\nTITLE: Complete Makefile for Templ Live Reload Environment\nDESCRIPTION: A comprehensive Makefile that orchestrates all components of the live reload environment, running multiple watch processes in parallel to monitor and rebuild Templ, Go, Tailwind CSS, and JavaScript files.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/09-developer-tools/04-live-reload-with-other-tools.md#2025-04-18_snippet_8\n\nLANGUAGE: make\nCODE:\n```\n# run templ generation in watch mode to detect all .templ files and \n# re-create _templ.txt files on change, then send reload event to browser. \n# Default url: http://localhost:7331\nlive/templ:\n\ttempl generate --watch --proxy=\"http://localhost:8080\" --open-browser=false -v\n\n# run air to detect any go file changes to re-build and re-run the server.\nlive/server:\n\tgo run github.com/cosmtrek/air@v1.51.0 \\\n\t--build.cmd \"go build -o tmp/bin/main\" --build.bin \"tmp/bin/main\" --build.delay \"100\" \\\n\t--build.exclude_dir \"node_modules\" \\\n\t--build.include_ext \"go\" \\\n\t--build.stop_on_error \"false\" \\\n\t--misc.clean_on_exit true\n\n# run tailwindcss to generate the styles.css bundle in watch mode.\nlive/tailwind:\n\tnpx --yes tailwindcss -i ./input.css -o ./assets/styles.css --minify --watch\n\n# run esbuild to generate the index.js bundle in watch mode.\nlive/esbuild:\n\tnpx --yes esbuild js/index.ts --bundle --outdir=assets/ --watch\n\n# watch for any js or css change in the assets/ folder, then reload the browser via templ proxy.\nlive/sync_assets:\n\tgo run github.com/cosmtrek/air@v1.51.0 \\\n\t--build.cmd \"templ generate --notify-proxy\" \\\n\t--build.bin \"true\" \\\n\t--build.delay \"100\" \\\n\t--build.exclude_dir \"\" \\\n\t--build.include_dir \"assets\" \\\n\t--build.include_ext \"js,css\"\n\n# start all 5 watch processes in parallel.\nlive: \n\tmake -j5 live/templ live/server live/tailwind live/esbuild live/sync_assets\n```\n\n----------------------------------------\n\nTITLE: Live reload sequence diagram\nDESCRIPTION: Mermaid sequence diagram illustrating the live reload process flow between browser, templ proxy, and application during the development cycle.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/09-developer-tools/03-live-reload.md#2025-04-18_snippet_3\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n    browser->>templ_proxy: HTTP\n    activate templ_proxy\n    templ_proxy->>app: HTTP\n    activate app\n    app->>templ_proxy: HTML\n    deactivate app\n    templ_proxy->>templ_proxy: add reload script\n    templ_proxy->>browser: HTML\n    deactivate templ_proxy\n    browser->>templ_proxy: SSE request to /_templ/reload/events\n    activate templ_proxy\n    templ_proxy->>generate: run templ generate if *.templ files have changed\n    templ_proxy->>app: restart app if *.go files have changed\n    templ_proxy->>browser: notify browser to reload page\n    deactivate templ_proxy\n```\n\n----------------------------------------\n\nTITLE: Conditionally Adding Attributes in Templ\nDESCRIPTION: This Templ function demonstrates how to conditionally add a class attribute to a div element based on a boolean parameter. It also shows the proper formatting and indentation for multi-line attribute declarations in Templ.\nSOURCE: https://github.com/a-h/templ/blob/main/parser/v2/formattestdata/conditional_expressions_result_in_all_attrs_indented.txt#2025-04-18_snippet_0\n\nLANGUAGE: templ\nCODE:\n```\npackage test\n\ntempl conditionalAttributes(addClass bool) {\n\t<div\n\t\tid=\"conditional\"\n\t\tif addClass {\n\t\t\tclass=\"itWasTrue\"\n\t\t}\n\t\twidth=\"300\"\n\t>Content</div>\n}\n```\n\n----------------------------------------\n\nTITLE: Formatted Template Code\nDESCRIPTION: Properly formatted templ code with consistent indentation and spacing\nSOURCE: https://github.com/a-h/templ/blob/main/parser/v2/formattestdata/templelement_multiline_block_containing_multiline_block.txt#2025-04-18_snippet_1\n\nLANGUAGE: templ\nCODE:\n```\npackage p\n\ntempl f() {\n\t@Other(\n\t\tp.Test,\n\t\t\"s\",\n\t) {\n\t\t@another.Component(\n\t\t\tp.Test,\n\t\t\t3,\n\t\t\t\"s\",\n\t\t) {\n\t\t\t<p>hello</p>\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Output of templ Component with html/template\nDESCRIPTION: This HTML snippet shows the output of rendering the Example templ component, which incorporates an html/template.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/03-syntax-and-usage/15-using-with-go-templates.md#2025-04-18_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html>\n\t<body>\n\t\t<div>Hello, World!</div>\n\t</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Defining Templ Function with Custom Component in Templ\nDESCRIPTION: This snippet defines a templ function 'f' that renders a custom component 'Other' with parameters and nested HTML content. The function is part of package 'p' and demonstrates the use of templ's custom syntax for component composition.\nSOURCE: https://github.com/a-h/templ/blob/main/parser/v2/formattestdata/templelement_simple_block_indentation.txt#2025-04-18_snippet_0\n\nLANGUAGE: templ\nCODE:\n```\npackage p\n\ntempl f() {\n\t@Other(p.Test, \"s\") {\n\t\t<p>hello</p>\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Building TypeScript with NPM Script\nDESCRIPTION: Alternative command to build TypeScript using NPM script from the ts directory\nSOURCE: https://github.com/a-h/templ/blob/main/examples/typescript/README.md#2025-04-18_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Generated HTML Output with Dynamic CSS\nDESCRIPTION: Shows the HTML and CSS output generated by the Templ template, including automatically generated class names and inline styles.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/03-syntax-and-usage/11-css-style-management.md#2025-04-18_snippet_28\n\nLANGUAGE: html\nCODE:\n```\n<style type=\"text/css\">\n .loading_a3cc{width:50%;}\n</style>\n<div class=\"loading_a3cc\"></div>\n<style type=\"text/css\">\n .loading_9ccc{width:100%;}\n</style>\n<div class=\"loading_9ccc\"></div>\n```\n\n----------------------------------------\n\nTITLE: Preventing Injection in Script and Style Tags in templ\nDESCRIPTION: Variables are not permitted in script and style tags to prevent injection vulnerabilities. Only static content is allowed in these sections.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/10-security/01-injection-attacks.md#2025-04-18_snippet_0\n\nLANGUAGE: html\nCODE:\n```\ntempl Example() {\n  <script>\n    function showAlert() {\n      alert(\"hello\");\n    }\n  </script>\n  <style type=\"text/css\">\n    /* Only CSS is allowed */\n  </style>\n}\n```\n\n----------------------------------------\n\nTITLE: Unformatted Templ Input Component with Switch Statement\nDESCRIPTION: An unformatted templ component that renders a div with a nested switch statement evaluating array items. The code shows improper indentation making it difficult to read.\nSOURCE: https://github.com/a-h/templ/blob/main/parser/v2/formattestdata/switch_statements_are_placed_on_a_new_line.txt#2025-04-18_snippet_0\n\nLANGUAGE: templ\nCODE:\n```\npackage test\n\ntempl input(items []string) {\n<div>{ \"the\" }<div>{ \"other\" }</div>switch items[0] {\n\tcase \"a\":\n<div>{ items[0] }</div>\n\tcase \"b\":\n<div>{ items[1] }</div>\n}</div>\n}\n```\n\n----------------------------------------\n\nTITLE: Formatted CSS in Templ\nDESCRIPTION: The same CSS block after formatting, with proper indentation applied while preserving the template expression.\nSOURCE: https://github.com/a-h/templ/blob/main/parser/v2/formattestdata/css_is_indented_by_one_level.txt#2025-04-18_snippet_1\n\nLANGUAGE: templ\nCODE:\n```\npackage test\n\ncss ClassName() {\n\tbackground-color: #ffffff;\n\tcolor: { constants.White };\n}\n```\n\n----------------------------------------\n\nTITLE: Rendered HTML Output from Templ Component\nDESCRIPTION: Shows the final HTML output after rendering the hello component twice. Demonstrates how the script is included only once while multiple buttons are created with different values.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/03-syntax-and-usage/18-render-once.md#2025-04-18_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<script>\n  function hello(name) {\n    alert('Hello, ' + name + '!');\n  }\n</script>\n<input type=\"button\" value=\"Hello User\" data-name=\"user\" onclick=\"hello(this.getAttribute('data-name'))\">\n<input type=\"button\" value=\"Hello World\" data-name=\"world\" onclick=\"hello(this.getAttribute('data-name'))\">\n```\n\n----------------------------------------\n\nTITLE: HTML Output from templ Switch Statement\nDESCRIPTION: The HTML output produced when rendering the userTypeDisplay component with an unrecognized user type. Since 'Other' doesn't match any of the defined cases, the switch statement's default case is executed, rendering 'Unknown user'.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/03-syntax-and-usage/07-switch.md#2025-04-18_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<span>\n Unknown user\n</span>\n```\n\n----------------------------------------\n\nTITLE: Defining Account Information Table Component in Templ\nDESCRIPTION: A templ component that renders an HTML table displaying account number and registration information. The component takes two string parameters: accountNumber and registration. The registration value is converted to uppercase using strings.ToUpper().\nSOURCE: https://github.com/a-h/templ/blob/main/parser/v2/formattestdata/tables_are_formatted_well.txt#2025-04-18_snippet_0\n\nLANGUAGE: templ\nCODE:\n```\npackage test\n\ntempl table(accountNumber string, registration string) {\n\t<table>\n\t       <tr>\n\t\t       <th width=\"20%\">Your account number</th>\n\t\t       <td width=\"80%\">{ accountNumber }</td>\n\t       </tr>\n\t       <tr>\n\t\t       <td>Registration</td>\n\t\t       <td>{ strings.ToUpper(registration) }</td>\n\t       </tr>\n\t</table>\n}\n```\n\n----------------------------------------\n\nTITLE: Running Go Application\nDESCRIPTION: Command to run the Go web server application\nSOURCE: https://github.com/a-h/templ/blob/main/examples/typescript/README.md#2025-04-18_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngo run .\n```\n\n----------------------------------------\n\nTITLE: Rendered HTML Output Example\nDESCRIPTION: Example of the HTML output generated by the inline JavaScript template, showing how script templates are rendered with the provided data.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/03-syntax-and-usage/12-script-templates.md#2025-04-18_snippet_18\n\nLANGUAGE: html\nCODE:\n```\n<html>\n\t<body>\n\t\t<script>function __templ_printToConsole_5a85(content){console.log(content)}</script>\n\t\t<script>__templ_printToConsole_5a85(\"2023-11-11 01:01:40.983381358 +0000 UTC\")</script>\n\t\t<script>__templ_printToConsole_5a85(\"Again: 2023-11-11 01:01:40.983381358 +0000 UTC\")</script>\n\t</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Defining Nested Template Component in Templ\nDESCRIPTION: Creates a template component named 'nested' that renders two nested div elements with interpolated string values 'the' and 'other'. Demonstrates basic HTML nesting and string interpolation syntax in templ.\nSOURCE: https://github.com/a-h/templ/blob/main/parser/v2/formattestdata/formatting_does_not_alter_whitespace.txt#2025-04-18_snippet_0\n\nLANGUAGE: templ\nCODE:\n```\npackage test\n\ntempl nested() {\n\t<div>{ \"the\" }<div>{ \"other\" }</div></div>\n}\n```\n\n----------------------------------------\n\nTITLE: Formatted Account Information Table Component in Templ\nDESCRIPTION: The properly formatted version of the templ component that renders an HTML table. This is the output version with corrected indentation for better readability and maintainability.\nSOURCE: https://github.com/a-h/templ/blob/main/parser/v2/formattestdata/tables_are_formatted_well.txt#2025-04-18_snippet_1\n\nLANGUAGE: templ\nCODE:\n```\npackage test\n\ntempl table(accountNumber string, registration string) {\n\t<table>\n\t\t<tr>\n\t\t\t<th width=\"20%\">Your account number</th>\n\t\t\t<td width=\"80%\">{ accountNumber }</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>Registration</td>\n\t\t\t<td>{ strings.ToUpper(registration) }</td>\n\t\t</tr>\n\t</table>\n}\n```\n\n----------------------------------------\n\nTITLE: Templ-Generated Output with Properly Self-Closed Void Elements\nDESCRIPTION: The output generated by Templ that shows the correct handling of void HTML elements. Templ automatically converts void elements to proper self-closing tags regardless of how they were written in the input.\nSOURCE: https://github.com/a-h/templ/blob/main/parser/v2/formattestdata/void_elements_are_converted_to_self_closing_elements.txt#2025-04-18_snippet_1\n\nLANGUAGE: templ\nCODE:\n```\npackage test\n\ntempl input(value, validation string) {\n\t<area/>\n\t<area/>\n\t<base/>\n\t<base/>\n\t<br/>\n\t<br/>\n\t<col/>\n\t<col/>\n\t<command/>\n\t<command/>\n\t<embed/>\n\t<embed/>\n\t<hr/>\n\t<hr/>\n\t<img/>\n\t<img/>\n\t<input/>\n\t<input/>\n\t<input/>Text\n\t<input/>Text\n\t<keygen/>\n\t<keygen/>\n\t<link/>\n\t<link/>\n\t<meta/>\n\t<meta/>\n\t<param/>\n\t<param/>\n\t<source/>\n\t<source/>\n\t<track/>\n\t<track/>\n\t<wbr/>\n\t<wbr/>\n}\n```\n\n----------------------------------------\n\nTITLE: Running Basic Templ Generation Command\nDESCRIPTION: The basic command to generate Go code from all .templ files in the current directory and its subdirectories.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/04-core-concepts/02-template-generation.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ntempl generate\n```\n\n----------------------------------------\n\nTITLE: Defining Nested Templ Template with HTML Elements\nDESCRIPTION: This snippet defines a Templ template named 'nested' that creates a structure of three div elements. It demonstrates the use of different quotation styles for attributes and includes a data attribute with JSON content.\nSOURCE: https://github.com/a-h/templ/blob/main/parser/v2/formattestdata/constant_attributes_prerfer_double_quotes__but_use_single_quotes_if_required.txt#2025-04-18_snippet_0\n\nLANGUAGE: templ\nCODE:\n```\npackage test\n\ntempl nested() {\n\t<div class=\"double\">double</div>\n\t<div class='single-not-required'>single-not-required</div>\n\t<div data-value='{\"data\":\"value\"}'>single-required</div>\n}\n```\n\n----------------------------------------\n\nTITLE: Building Templ Templates\nDESCRIPTION: Command to generate templ template files. This needs to be run before starting the application to compile templates.\nSOURCE: https://github.com/a-h/templ/blob/main/examples/integration-gofiber/README.md#2025-04-18_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ntempl generate\n```\n\n----------------------------------------\n\nTITLE: Triggering Templ Reload Events with Air\nDESCRIPTION: Command to monitor asset files (JS/CSS) and notify the Templ proxy server to trigger a browser reload when changes are detected. This uses Air with a special configuration to watch the assets directory.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/09-developer-tools/04-live-reload-with-other-tools.md#2025-04-18_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngo run github.com/cosmtrek/air@v1.51.0 \\\n  --build.cmd \"templ generate --notify-proxy\" \\\n  --build.bin \"true\" \\\n  --build.delay \"100\" \\\n  --build.exclude_dir \"\" \\\n  --build.include_dir \"assets\" \\\n  --build.include_ext \"js,css\"\n```\n\n----------------------------------------\n\nTITLE: Defining Templ Function for Rendering Item List in Go\nDESCRIPTION: This snippet defines a templ function named 'input' that takes a slice of strings and renders them in a nested HTML structure. It demonstrates the use of Go's range loop within templ syntax and how to output static and dynamic content.\nSOURCE: https://github.com/a-h/templ/blob/main/parser/v2/formattestdata/for_loops_are_placed_on_a_new_line.txt#2025-04-18_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\npackage test\n\ntempl input(items []string) {\n\t<div>\n\t\t{ \"the\" }\n\t\t<div>{ \"other\" }</div>\n\t\tfor _, item := range items {\n\t\t\t<div>{ item }</div>\n\t\t}\n\t</div>\n}\n```\n\n----------------------------------------\n\nTITLE: Properly Formatted CSS Style Definition in Templ\nDESCRIPTION: Expected output showing the correctly formatted CSS style block with proper indentation and spacing. The formatter has standardized the whitespace while preserving the structure and functionality.\nSOURCE: https://github.com/a-h/templ/blob/main/parser/v2/formattestdata/css_whitespace_is_tidied.txt#2025-04-18_snippet_1\n\nLANGUAGE: templ\nCODE:\n```\npackage test\n\ncss ClassName() {\n\tbackground-color: #ffffff;\n\tcolor: { constants.White };\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Templ Component with HTML Line Breaks in Go\nDESCRIPTION: This snippet defines a templ component named 'test' that renders a div containing text with line breaks for spacing. The component uses HTML <br/> tags to create line breaks between words.\nSOURCE: https://github.com/a-h/templ/blob/main/parser/v2/formattestdata/br_and_hr_all_on_one_line_are_not_placed_on_new_lines.txt#2025-04-18_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\npackage main\n\ntempl test() {\n\t<div>Linebreaks<br/>used<br/>for<br/>spacing</div>\n}\n```\n\n----------------------------------------\n\nTITLE: Templ Generate Command Help Documentation\nDESCRIPTION: Complete help documentation for the templ generate command showing all available options, their descriptions, and usage examples.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/04-core-concepts/02-template-generation.md#2025-04-18_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nusage: templ generate [<args>...]\n\nGenerates Go code from templ files.\n\nArgs:\n  -path <path>\n    Generates code for all files in path. (default .)\n  -f <file>\n    Optionally generates code for a single file, e.g. -f header.templ\n  -stdout\n    Prints to stdout instead of writing generated files to the filesystem.\n    Only applicable when -f is used.\n  -source-map-visualisations\n    Set to true to generate HTML files to visualise the templ code and its corresponding Go code.\n  -include-version\n    Set to false to skip inclusion of the templ version in the generated code. (default true)\n  -include-timestamp\n    Set to true to include the current time in the generated code.\n  -watch\n    Set to true to watch the path for changes and regenerate code.\n  -cmd <cmd>\n    Set the command to run after generating code.\n  -proxy\n    Set the URL to proxy after generating code and executing the command.\n  -proxyport\n    The port the proxy will listen on. (default 7331)\n  -proxybind\n    The address the proxy will listen on. (default 127.0.0.1)\n  -notify-proxy\n    If present, the command will issue a reload event to the proxy 127.0.0.1:7331, or use proxyport and proxybind to specify a different address.\n  -w\n    Number of workers to use when generating code. (default runtime.NumCPUs)\n  -lazy\n    Only generate .go files if the source .templ file is newer.\t\n  -pprof\n    Port to run the pprof server on.\n  -keep-orphaned-files\n    Keeps orphaned generated templ files. (default false)\n  -v\n    Set log verbosity level to \"debug\". (default \"info\")\n  -log-level\n    Set log verbosity level. (default \"info\", options: \"debug\", \"info\", \"warn\", \"error\")\n  -help\n    Print help and exit.\n\nExamples:\n\n  Generate code for all files in the current directory and subdirectories:\n\n    templ generate\n\n  Generate code for a single file:\n\n    templ generate -f header.templ\n\n  Watch the current directory and subdirectories for changes and regenerate code:\n\n    templ generate -watch\n```\n\n----------------------------------------\n\nTITLE: Serving Static Assets from Filesystem in Go (After)\nDESCRIPTION: Modified approach to serve static assets directly from the filesystem instead of embedding them, which is necessary for live reload to work properly without requiring a full server restart.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/09-developer-tools/04-live-reload-with-other-tools.md#2025-04-18_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nmux.Handle(\"/assets/\", \n  http.StripPrefix(\"/assets\", \n    http.FileServer(http.Dir(\"assets\"))))\n```\n\n----------------------------------------\n\nTITLE: HTML Output of Sanitized CSS\nDESCRIPTION: Shows how potentially dangerous CSS values are sanitized in the output HTML to prevent security vulnerabilities.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/03-syntax-and-usage/11-css-style-management.md#2025-04-18_snippet_13\n\nLANGUAGE: html\nCODE:\n```\n<div style=\"background-image:zTemplUnsafeCSSPropertyValue;\">\n    Dangerous content\n</div>\n```\n\n----------------------------------------\n\nTITLE: Templ Generation Command Output Example\nDESCRIPTION: Example output of the templ generate command showing warnings and a summary of the generation process.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/04-core-concepts/02-template-generation.md#2025-04-18_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n(!) void element <input> should not have child content [ from=12:2 to=12:7 ]\n(✓) Complete [ updates=62 duration=144.677334ms ]\n```\n\n----------------------------------------\n\nTITLE: Creating Dockerfile for Static Site Deployment on Fly.io\nDESCRIPTION: This Dockerfile sets up a container for hosting static files on Fly.io. It uses the 'pierrezemb/gostatic' base image, copies the contents of the 'public' directory into the container, and sets the entry point to run the static file server on port 8080.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/06-static-rendering/03-deploying-static-files.md#2025-04-18_snippet_0\n\nLANGUAGE: Dockerfile\nCODE:\n```\nFROM pierrezemb/gostatic\nCOPY ./public/ /srv/http/\nENTRYPOINT [\"/goStatic\", \"-port\", \"8080\"]\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Hello Template in Templ\nDESCRIPTION: This code defines a basic template named 'Hello' in the 'goof' package using the templ templating language for Go. The template simply outputs the text 'Hello' when rendered. The file includes various comment styles that demonstrate Go comment syntax.\nSOURCE: https://github.com/a-h/templ/blob/main/parser/v2/formattestdata/templatefile_can_start_with_multiple_comments_and_whitespace.txt#2025-04-18_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// Go comment\n\n/* Multiline comment on a single line */\n\n/*\n\nMulti-line comment on multiple lines\n\n*/\n\npackage goof\n\ntempl Hello() {\n\tHello\n}\n```\n\n----------------------------------------\n\nTITLE: Formatted Template Function Definition\nDESCRIPTION: Shows properly formatted template function with correct indentation of nested elements\nSOURCE: https://github.com/a-h/templ/blob/main/parser/v2/formattestdata/templelement_multiline_in_div.txt#2025-04-18_snippet_1\n\nLANGUAGE: templ\nCODE:\n```\npackage p\n\ntempl f() {\n\t<div>\n\t\t@Other(\n\t\t\tp.Test,\n\t\t\t\"s\",\n\t\t)\n\t</div>\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Conditional Attributes in Templ (Input Format)\nDESCRIPTION: Demonstrates how to create a templ component with a conditional class attribute. The component takes a boolean parameter 'addClass' and conditionally adds a class attribute when the parameter is true.\nSOURCE: https://github.com/a-h/templ/blob/main/parser/v2/formattestdata/conditional_expressions_have_the_same_child_indentation_rules_as_regular_elements.txt#2025-04-18_snippet_0\n\nLANGUAGE: templ\nCODE:\n```\npackage test\n\ntempl conditionalAttributes(addClass bool) {\n\t<div id=\"conditional\"\nif addClass {\nclass=\"itWasTrue\"\n}\n>\nContent</div>\n}\n```\n\n----------------------------------------\n\nTITLE: Formatting All Templ Files in Directory\nDESCRIPTION: Command to format all templ files in the current directory and its subdirectories.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/09-developer-tools/01-cli.md#2025-04-18_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ntempl fmt .\n```\n\n----------------------------------------\n\nTITLE: HTML Output of CSS Components\nDESCRIPTION: Shows the resulting HTML when using CSS components with auto-generated class names.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/03-syntax-and-usage/11-css-style-management.md#2025-04-18_snippet_26\n\nLANGUAGE: html\nCODE:\n```\n<style type=\"text/css\">\n .className_f179{background-color:#ffffff;color:#ff0000;}\n</style>\n<button class=\"button className_f179\">\n Click me\n</button>\n```\n\n----------------------------------------\n\nTITLE: Defining Input Component Template in Go with templ\nDESCRIPTION: This snippet defines a template for an input component using the templ package in Go. It creates a div containing a paragraph with mixed static and dynamic content, including a hyperlink.\nSOURCE: https://github.com/a-h/templ/blob/main/parser/v2/formattestdata/children_indented__closing_elm.txt#2025-04-18_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\npackage test\n\ntempl input(value, validation string) {\n\t<div><p>{ \"the\" }<a href=\"http://example.com\">{ \"data\" }</a></p>\n    </div>\n}\n```\n\n----------------------------------------\n\nTITLE: Serving Embedded Static Assets in Go (Before)\nDESCRIPTION: Example of how static assets are traditionally served in Go using embedded filesystem. This approach embeds assets in the binary, which isn't ideal for development with live reload.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/09-developer-tools/04-live-reload-with-other-tools.md#2025-04-18_snippet_5\n\nLANGUAGE: go\nCODE:\n```\n//go:embed assets/*\nvar assets embed.FS\n...\nmux.Handle(\"/assets/\", http.FileServer(http.FS(assets)))\n```\n\n----------------------------------------\n\nTITLE: Variable Assignment in TEMPL Template\nDESCRIPTION: Shows how to create a template that accepts an array of Item objects and assigns the first item to a variable. The template demonstrates basic variable assignment syntax within TEMPL delimiters {{}}.\nSOURCE: https://github.com/a-h/templ/blob/main/parser/v2/formattestdata/raw_go_is_formatted.txt#2025-04-18_snippet_0\n\nLANGUAGE: templ\nCODE:\n```\npackage test\n\ntempl nameList(items []Item) {\n\t{{ first := items[0] }}\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Simple Templ Template with Comments in Go\nDESCRIPTION: This snippet demonstrates how to define a basic templ template named 'test' with a comment. The template simply outputs the text 'Test'.\nSOURCE: https://github.com/a-h/templ/blob/main/parser/v2/formattestdata/godoc_comments_are_preserved.txt#2025-04-18_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\n// test the comment handling.\ntempl test() {\n\tTest\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Input Component Template in templ\nDESCRIPTION: This snippet defines a templ template named 'input' that takes two string parameters: 'value' and 'validation'. The template renders a div containing an empty paragraph element.\nSOURCE: https://github.com/a-h/templ/blob/main/parser/v2/formattestdata/empty_elements_stay_on_the_same_line.txt#2025-04-18_snippet_0\n\nLANGUAGE: templ\nCODE:\n```\npackage test\n\ntempl input(value, validation string) {\n\t<div>\n\t\t<p>\n\t\t</p>\n\t</div>\n}\n```\n\n----------------------------------------\n\nTITLE: Multi-stage Dockerfile for Templ Project\nDESCRIPTION: Complete multi-stage Dockerfile for building a project with Templ, including generation, building, testing, and deployment stages.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/02-quick-start/01-installation.md#2025-04-18_snippet_7\n\nLANGUAGE: Dockerfile\nCODE:\n```\n# Fetch\nFROM golang:latest AS fetch-stage\nCOPY go.mod go.sum /app\nWORKDIR /app\nRUN go mod download\n\n# Generate\nFROM ghcr.io/a-h/templ:latest AS generate-stage\nCOPY --chown=65532:65532 . /app\nWORKDIR /app\nRUN [\"templ\", \"generate\"]\n\n# Build\nFROM golang:latest AS build-stage\nCOPY --from=generate-stage /app /app\nWORKDIR /app\nRUN CGO_ENABLED=0 GOOS=linux go build -o /app/app\n\n# Test\nFROM build-stage AS test-stage\nRUN go test -v ./...\n\n# Deploy\nFROM gcr.io/distroless/base-debian12 AS deploy-stage\nWORKDIR /\nCOPY --from=build-stage /app/app /app\nEXPOSE 8080\nUSER nonroot:nonroot\nENTRYPOINT [\"/app\"]\n```\n\n----------------------------------------\n\nTITLE: Rendering Flow Diagram with Mermaid\nDESCRIPTION: Flowchart showing the typical template rendering lifecycle including database queries, API calls, and HTML generation.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/05-server-side-rendering/05-streaming.md#2025-04-18_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart TD;\n\tr[Request]\n\tq[DB Queries]\n\tq1[Query result]\n\tq2[Query result]\n\ta[API Calls]\n\tapi[API call result]\n\tt[Render template]\n\th[HTML]\n\tresponse[Response]\n\tr-->q;\n\tr-->a;\n\tq-->q1\n\tq-->q2\n\ta-->api\n\tq1-->t\n\tq2-->t\n\tapi-->t\n\tt-->h\n\th-->response;\n```\n\n----------------------------------------\n\nTITLE: HTML Output from Button Component\nDESCRIPTION: The HTML output generated when rendering the code-only button component.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/04-core-concepts/01-components.md#2025-04-18_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<button>\n Click me\n</button>\n```\n\n----------------------------------------\n\nTITLE: Formatted Input Component Template in Go with templ\nDESCRIPTION: This snippet shows the same input component template as before, but with improved formatting. It demonstrates proper indentation and line breaks for better readability in HTML structure.\nSOURCE: https://github.com/a-h/templ/blob/main/parser/v2/formattestdata/children_indented__closing_elm.txt#2025-04-18_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\npackage test\n\ntempl input(value, validation string) {\n\t<div>\n\t\t<p>{ \"the\" }<a href=\"http://example.com\">{ \"data\" }</a></p>\n\t</div>\n}\n```\n\n----------------------------------------\n\nTITLE: Building and Running Docker Container Locally\nDESCRIPTION: Bash commands for building and running a Docker container locally. The first command builds the image, and the second runs it with port mapping from the host to the container.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/08-hosting-and-deployment/02-hosting-using-docker.md#2025-04-18_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker build -t counter-basic:latest .\n```\n\n----------------------------------------\n\nTITLE: Defining a Simple Templ Template in Go\nDESCRIPTION: This code snippet defines a basic templ template named 'Hello' within the 'goof' package. The template function simply outputs the string 'Hello' when rendered.\nSOURCE: https://github.com/a-h/templ/blob/main/parser/v2/formattestdata/templatefile_can_start_with_comments_and_whitespace.txt#2025-04-18_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\n// Go comment\n\npackage goof\n\ntempl Hello() {\n\tHello\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a templ Component with Component Reference in Go\nDESCRIPTION: A simple templ template named 'f' that invokes another component named 'Other' and passes 'p.Test' as a parameter. This demonstrates how to reference components and package variables in templ.\nSOURCE: https://github.com/a-h/templ/blob/main/parser/v2/formattestdata/templelement_simple_no_change.txt#2025-04-18_snippet_0\n\nLANGUAGE: templ\nCODE:\n```\npackage p\n\ntempl f() {\n\t@Other(p.Test)\n}\n```\n\n----------------------------------------\n\nTITLE: Input: Function Call Without Proper Parameter Spacing in Templ\nDESCRIPTION: A templ template that shows a function call with insufficient spacing between parameters. The example shows a call to 'Other' function with two arguments having no space after the comma separator.\nSOURCE: https://github.com/a-h/templ/blob/main/parser/v2/formattestdata/templelement_param_spacing.txt#2025-04-18_snippet_0\n\nLANGUAGE: templ\nCODE:\n```\npackage p\n\ntempl f() {\n\t@Other(p.Test,\"s\")\n}\n```\n\n----------------------------------------\n\nTITLE: Running Templ in Docker\nDESCRIPTION: Command to run Templ generate command in a Docker container with current directory mounted.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/02-quick-start/01-installation.md#2025-04-18_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -v `pwd`:/app -w=/app ghcr.io/a-h/templ:latest generate\n```\n\n----------------------------------------\n\nTITLE: Defining List Component in Templ\nDESCRIPTION: This snippet defines a Templ component named 'List' that accepts three parameters of type 'list[item]'. The component renders an empty <div> element. This structure could be used as a base for more complex list rendering logic.\nSOURCE: https://github.com/a-h/templ/blob/main/parser/v2/formattestdata/templatearguments_multiline_with_generics.txt#2025-04-18_snippet_0\n\nLANGUAGE: templ\nCODE:\n```\npackage p\n\ntempl List(\n\tlist1 list[item],\n\tlist2 list[item],\n\tlist3 list[item],\n) {\n\t<div></div>\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Templ Template for HTML List Item in Go\nDESCRIPTION: This code snippet defines a templ template named 'x' that generates an HTML list item with a link to the home page. It includes a nested call to another template named 'hello' with the argument 'home'.\nSOURCE: https://github.com/a-h/templ/blob/main/parser/v2/formattestdata/templ_expression_elements_are_formatted_the_same_as_other_elements.txt#2025-04-18_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\npackage main\n\ntempl x() {\n\t<li>\n\t\t<a href=\"/\">\n\t\t\tHome\n\t\t\t@hello(\"home\") {\n\t\t\t\tdata\n\t\t\t}\n\t\t</a>\n\t</li>\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Vim Autocomplete for Templ Files\nDESCRIPTION: Vim configuration for asyncomplete keybindings to improve the autocomplete experience when working with Templ files. Sets up Tab, Shift-Tab, and Enter keys for navigating and selecting autocompletion items.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/09-developer-tools/02-ide-support.md#2025-04-18_snippet_18\n\nLANGUAGE: vim\nCODE:\n```\ninoremap <expr> <Tab>   pumvisible() ? \"\\<C-n>\" : \"\\<Tab>\"\ninoremap <expr> <S-Tab> pumvisible() ? \"\\<C-p>\" : \"\\<S-Tab>\"\ninoremap <expr> <cr>    pumvisible() ? asyncomplete#close_popup() : \"\\<cr>\"\n```\n\n----------------------------------------\n\nTITLE: Creating HTML Paragraph with Inline Elements using Templ\nDESCRIPTION: Example of a templ component that creates a paragraph containing multiple inline strong elements. Shows how to structure flowing text with HTML formatting while maintaining readability.\nSOURCE: https://github.com/a-h/templ/blob/main/parser/v2/formattestdata/inline_elements_are_not_placed_on_a_new_line.txt#2025-04-18_snippet_0\n\nLANGUAGE: templ\nCODE:\n```\npackage main\n\ntempl test() {\n\t<p>\n\t\tIn a flowing <strong>paragraph</strong>, you can use inline elements.\n\t\tThese <strong>inline elements</strong> can be <strong>styled</strong>\n\t\tand are not placed on new lines.\n\t</p>\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TEMPL Template Function in Go\nDESCRIPTION: This snippet defines a TEMPL template function 'x' that renders a div element with two placeholder values (pt1 and pt2). The input and output formats are shown to demonstrate proper TEMPL syntax and formatting.\nSOURCE: https://github.com/a-h/templ/blob/main/parser/v2/formattestdata/spacing_between_string_expressions_is_not_magically_added.txt#2025-04-18_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\npackage main\n\ntempl x() {\n    <div>{pt1}{pt2}</div>\n}\n```\n\nLANGUAGE: Go\nCODE:\n```\npackage main\n\ntempl x() {\n\t<div>{ pt1 }{ pt2 }</div>\n}\n```\n\n----------------------------------------\n\nTITLE: Resulting JavaScript Code After Templ Processing\nDESCRIPTION: The processed JavaScript output after Templ has handled the template. This shows how the alert function with nested quotes is preserved in the final output.\nSOURCE: https://github.com/a-h/templ/blob/main/parser/v2/scriptparsertestdata/doublequote.txt#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.alert(\"This is 'quoted'\");\n```\n\n----------------------------------------\n\nTITLE: Defining Template File Structure in Go\nDESCRIPTION: Core data structure for representing a parsed templ file, including header comments, package declaration, and template nodes.\nSOURCE: https://github.com/a-h/templ/blob/main/CONTRIBUTING.md#2025-04-18_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntype TemplateFile struct {\n\t// Header contains comments or whitespace at the top of the file.\n\tHeader []GoExpression\n\t// Package expression.\n\tPackage Package\n\t// Nodes in the file.\n\tNodes []TemplateFileNode\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Templ Formatting in CI\nDESCRIPTION: Command to check if templ files are properly formatted in CI environments, exiting with an error code if formatting is needed.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/09-developer-tools/01-cli.md#2025-04-18_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ntempl fmt -fail .\n```\n\n----------------------------------------\n\nTITLE: Processed Nested Templ Template with Consistent Quotations\nDESCRIPTION: This snippet shows the processed version of the 'nested' Templ template. The main difference is the consistent use of double quotes for HTML attributes, except for the data-value attribute which retains single quotes to preserve the JSON structure.\nSOURCE: https://github.com/a-h/templ/blob/main/parser/v2/formattestdata/constant_attributes_prerfer_double_quotes__but_use_single_quotes_if_required.txt#2025-04-18_snippet_1\n\nLANGUAGE: templ\nCODE:\n```\npackage test\n\ntempl nested() {\n\t<div class=\"double\">double</div>\n\t<div class=\"single-not-required\">single-not-required</div>\n\t<div data-value='{\"data\":\"value\"}'>single-required</div>\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Input Template in TEMPL\nDESCRIPTION: This snippet defines a TEMPL template named 'input' that takes 'value' and 'validation' as string parameters. It renders a div containing a paragraph with a link to 'http://example.com'. The template demonstrates the use of TEMPL's syntax for embedding HTML and dynamic content.\nSOURCE: https://github.com/a-h/templ/blob/main/parser/v2/formattestdata/all_children_indented__with_nested_indentation__when_close_tag_is_on_same_line.txt#2025-04-18_snippet_0\n\nLANGUAGE: TEMPL\nCODE:\n```\ntempl input(value, validation string) {\n\t<div><p>{ \"the\" }<a href=\"http://example.com\">{ \"data\" } </a></p></div>\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Project Directory for Templ Application\nDESCRIPTION: Creates a new directory for the templ hello-world project. This is the first step in setting up the project structure.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/02-quick-start/02-creating-a-simple-templ-component.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmkdir hello-world\n```\n\n----------------------------------------\n\nTITLE: Unformatted Conditional Attributes in Templ Template\nDESCRIPTION: An unformatted Templ template showing a div with conditional class attributes based on a boolean parameter. The formatting is compressed with inconsistent indentation.\nSOURCE: https://github.com/a-h/templ/blob/main/parser/v2/formattestdata/conditional_expressions_with_else_blocks_are_also_formatted.txt#2025-04-18_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\npackage test\n\ntempl conditionalAttributes(addClass bool) {\n\t<div id=\"conditional\"\nif addClass {\nclass=\"itWasTrue\"\n} else {\n\tclass=\"itWasNotTrue\"\n}\nwidth=\"300\">Content</div>\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Templ Function for Name Display in Go\nDESCRIPTION: This snippet defines a templ function 'x' that generates an HTML div element containing firstName and lastName variables. It demonstrates the syntax for embedding variables within HTML using templ.\nSOURCE: https://github.com/a-h/templ/blob/main/parser/v2/formattestdata/spacing_between_string_expressions_is_kept.txt#2025-04-18_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\npackage main\n\ntempl x() {\n\t<div>{ firstName } { lastName }</div>\n}\n```\n\n----------------------------------------\n\nTITLE: Output Raw JavaScript\nDESCRIPTION: Processed JavaScript output with script tags removed but core functionality preserved\nSOURCE: https://github.com/a-h/templ/blob/main/parser/v2/scriptparsertestdata/doublequote_apostrophe.txt#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.alert(\"You can use isn't and other text\");\n```\n\n----------------------------------------\n\nTITLE: Templ Benchmark Results\nDESCRIPTION: Benchmark results comparing performance of Templ, Go Template, and IO WriteString operations. Shows execution time, memory allocations, and operations per second.\nSOURCE: https://github.com/a-h/templ/blob/main/benchmarks/templ/README.md#2025-04-18_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\ngoos: darwin\ngoarch: arm64\npkg: github.com/a-h/templ/benchmarks/templ\nBenchmarkTempl-10                3291883               369.1 ns/op           536 B/op          6 allocs/op\nBenchmarkGoTemplate-10            481052              2475 ns/op            1400 B/op         38 allocs/op\nBenchmarkIOWriteString-10       20353198                56.64 ns/op          320 B/op          1 allocs/op\nPASS\nok      github.com/a-h/templ/benchmarks/templ   4.650s\n```\n\n----------------------------------------\n\nTITLE: Defining a Templ Template with Line Breaks\nDESCRIPTION: This snippet defines a Templ template named 'test' that includes HTML elements for line breaks and horizontal rules. It demonstrates how Templ handles spacing and formatting of these elements.\nSOURCE: https://github.com/a-h/templ/blob/main/parser/v2/formattestdata/br_elements_are_placed_on_new_lines.txt#2025-04-18_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\npackage main\n\ntempl test() {\n\t<div>\n\t\tLinebreaks<br/>and<hr/>rules<br/>for<br/>spacing\n\t</div>\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Templ Template with Multi-line Strings\nDESCRIPTION: Defines a Templ template function 'x' that uses the @something directive with multi-line string literals. The template includes two calls to '@something', one with a single string argument and another with two string arguments.\nSOURCE: https://github.com/a-h/templ/blob/main/parser/v2/formattestdata/multiline_string_literal_indentation_preserved.txt#2025-04-18_snippet_0\n\nLANGUAGE: templ\nCODE:\n```\npackage main\n\ntempl x() {\n\t@something(`Hi\nsome cool text\n\nfoo \n\nbar\n\n\t\t`)\n\t@something(`\n\t\tsomething\n\t\t\t\t`,\n\t`\n\t\t\t\tsomething\n\t\t\t\t`,\n\t)\n}\n```\n\n----------------------------------------\n\nTITLE: Watching Coverage Tests for templ\nDESCRIPTION: Command to continuously run tests and update coverage information when files change.\nSOURCE: https://github.com/a-h/templ/blob/main/README.md#2025-04-18_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\ngotestsum --watch -- -coverprofile=coverage.out\n```\n\n----------------------------------------\n\nTITLE: Correctly Formatted Templ Template with Proper Indentation\nDESCRIPTION: The correctly formatted version of the same Templ template where the @Other component call is properly indented inside the div element.\nSOURCE: https://github.com/a-h/templ/blob/main/parser/v2/formattestdata/templelement_simple_in_div.txt#2025-04-18_snippet_1\n\nLANGUAGE: templ\nCODE:\n```\npackage p\n\ntempl f() {\n\t<div>\n\t\t@Other(p.Test, \"s\")\n\t</div>\n}\n```\n\n----------------------------------------\n\nTITLE: Processing HTML Script Tag with JavaScript in Templ\nDESCRIPTION: This snippet demonstrates how Templ processes an HTML script tag containing JavaScript code. It shows that Templ preserves the JavaScript content within the script tag, including properly handling quoted strings.\nSOURCE: https://github.com/a-h/templ/blob/main/parser/v2/scriptparsertestdata/singlequote.txt#2025-04-18_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<script>\nwindow.alert('This is \"quoted\"');\n</script>\n```\n\n----------------------------------------\n\nTITLE: Displaying Success Message in JavaScript\nDESCRIPTION: This function creates a success message with custom text and displays it in a styled div element. It uses DOM manipulation to set the innerHTML of a specific element with the id 'form-response'.\nSOURCE: https://github.com/a-h/templ/blob/main/parser/v2/scriptparsertestdata/showsuccessmessage.txt#2025-04-18_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction showSuccessMessage(responseText) {\n\t\t\tconst formResponse = document.getElementById('form-response');\n\t\t\tformResponse.innerHTML = `\n\t\t\t\t<div class=\"bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded\">\n\t\t\t\t\t${responseText}\n\t\t\t\t</div>`;\n\t\t}\n```\n\n----------------------------------------\n\nTITLE: Building Snapshot with Goreleaser\nDESCRIPTION: Command to use goreleaser to build a command line binary snapshot of templ.\nSOURCE: https://github.com/a-h/templ/blob/main/README.md#2025-04-18_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ngoreleaser build --snapshot --clean\n```\n\n----------------------------------------\n\nTITLE: Live reload with wgo\nDESCRIPTION: Command to use wgo for live reloading templ applications. It watches for changes in Go and templ files while excluding generated _templ.go files to avoid continuous reloading.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/09-developer-tools/03-live-reload.md#2025-04-18_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nwgo -file=.go -file=.templ -xfile=_templ.go templ generate :: go run main.go\n```\n\n----------------------------------------\n\nTITLE: JavaScript Output from Templ\nDESCRIPTION: The extracted JavaScript code after Templ processes the script tag. Note how the backtick template literals and special characters are preserved.\nSOURCE: https://github.com/a-h/templ/blob/main/parser/v2/scriptparsertestdata/backtickquote_apostrophe.txt#2025-04-18_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nwindow.alert(`You can use isn't and other text`);\n```\n\n----------------------------------------\n\nTITLE: Unformatted CSS Style Definition in Templ\nDESCRIPTION: Input example of a CSS style block with inconsistent spacing and indentation. Defines a class with background-color and color properties, where the color references a constant value.\nSOURCE: https://github.com/a-h/templ/blob/main/parser/v2/formattestdata/css_whitespace_is_tidied.txt#2025-04-18_snippet_0\n\nLANGUAGE: templ\nCODE:\n```\npackage test\n\ncss ClassName() {\nbackground-color    :   #ffffff\t;\n  color\t:  { constants.White };\n  }\n```\n\n----------------------------------------\n\nTITLE: Generating Code with Templ\nDESCRIPTION: Runs the templ generate command to generate code from templates. This is a prerequisite for the deployment tasks.\nSOURCE: https://github.com/a-h/templ/blob/main/examples/counter/README.md#2025-04-18_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ntempl generate\n```\n\n----------------------------------------\n\nTITLE: Input Template with Incorrectly Closed Void Elements in Templ\nDESCRIPTION: A Templ template that demonstrates incorrectly closed void HTML elements. Void elements like <input>, <br>, and <img> cannot contain content and should not have closing tags.\nSOURCE: https://github.com/a-h/templ/blob/main/parser/v2/formattestdata/void_elements_are_converted_to_self_closing_elements.txt#2025-04-18_snippet_0\n\nLANGUAGE: templ\nCODE:\n```\npackage test\n\ntempl input(value, validation string) {\n\t<area>\n\t<area></area>\n\t<base>\n\t<base></base>\n\t<br>\n\t<br></br>\n\t<col>\n\t<col></col>\n\t<command>\n\t<command></command>\n\t<embed>\n\t<embed></embed>\n\t<hr>\n\t<hr></hr>\n\t<img>\n\t<img></img>\n\t<input>\n\t<input></input>\n\t<input>Text\n\t<input>Text</input>\n\t<keygen>\n\t<keygen></keygen>\n\t<link>\n\t<link></link>\n\t<meta>\n\t<meta></meta>\n\t<param>\n\t<param></param>\n\t<source>\n\t<source></source>\n\t<track>\n\t<track></track>\n\t<wbr>\n\t<wbr></wbr>\n}\n```\n\n----------------------------------------\n\nTITLE: Input HTML with Script Tags\nDESCRIPTION: Original HTML input containing JavaScript alert within script tags\nSOURCE: https://github.com/a-h/templ/blob/main/parser/v2/scriptparsertestdata/doublequote_apostrophe.txt#2025-04-18_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script>\nwindow.alert(\"You can use isn't and other text\");\n</script>\n```\n\n----------------------------------------\n\nTITLE: JavaScript Alert with Mixed Quotes\nDESCRIPTION: This JavaScript code uses the window.alert() method to display a message that includes both single and double quotes. It demonstrates the use of backticks (template literals) to avoid escaping quotes within the string.\nSOURCE: https://github.com/a-h/templ/blob/main/parser/v2/scriptparsertestdata/backtickquote.txt#2025-04-18_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nwindow.alert(`This is 'single quoted' and this is \"double quoted\"`);\n```\n\n----------------------------------------\n\nTITLE: Nix Flake Configuration for Templ\nDESCRIPTION: Complete Nix flake configuration for installing and using Templ in a Nix environment.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/02-quick-start/01-installation.md#2025-04-18_snippet_4\n\nLANGUAGE: nix\nCODE:\n```\n{\n  inputs = {\n    ...\n    templ.url = \"github:a-h/templ\";\n    ...\n  };\n  outputs = inputs@{\n    ...\n  }:\n\n  # For NixOS configuration:\n  {\n    # Add the overlay,\n    nixpkgs.overlays = [\n      inputs.templ.overlays.default\n    ];\n    # and install the package\n    environment.systemPackages = with pkgs; [\n      templ\n    ];\n  };\n\n  # For a flake project:\n  let\n    forAllSystems = f: nixpkgs.lib.genAttrs allSystems (system: f {\n      inherit system;\n      pkgs = import nixpkgs { inherit system; };\n    });\n    templ = system: inputs.templ.packages.${system}.templ;\n  in {\n    packages = forAllSystems ({ pkgs, system }: {\n      myNewPackage = pkgs.buildGoModule {\n        ...\n        preBuild = ''\n          ${templ system}/bin/templ generate\n        '';\n      };\n    });\n\n    devShell = forAllSystems ({ pkgs, system }:\n      pkgs.mkShell {\n        buildInputs = with pkgs; [\n          go\n          (templ system)\n        ];\n      };\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Running the Go Program with Bash\nDESCRIPTION: Executes the Go program to generate the HTML file.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/06-static-rendering/01-generating-static-html-files-with-templ.md#2025-04-18_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ngo run *.go\n```\n\n----------------------------------------\n\nTITLE: Original Unformatted templ Code\nDESCRIPTION: Input templ code showing template expressions without standardized spacing.\nSOURCE: https://github.com/a-h/templ/blob/main/parser/v2/formattestdata/spacing_between_string_spreads_attributes_is_kept.txt#2025-04-18_snippet_0\n\nLANGUAGE: templ\nCODE:\n```\npackage main\n\ntempl x() {\n    <div>{firstName...} {lastName...}</div>\n}\n```\n\n----------------------------------------\n\nTITLE: Building React TypeScript with esbuild\nDESCRIPTION: Task to bundle TypeScript React code using esbuild. This command bundles index.ts, minifies it, and outputs to the static directory with a global bundle name.\nSOURCE: https://github.com/a-h/templ/blob/main/examples/integration-react/README.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nesbuild --bundle index.ts --outdir=../static --minify --global-name=bundle\n```\n\n----------------------------------------\n\nTITLE: Script Tag Input in Templ\nDESCRIPTION: HTML script tag containing JavaScript code with template literals. Shows the input format before Templ processing.\nSOURCE: https://github.com/a-h/templ/blob/main/parser/v2/scriptparsertestdata/backtickquote_apostrophe.txt#2025-04-18_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<script>\nwindow.alert(`You can use isn't and other text`);\n</script>\n```\n\n----------------------------------------\n\nTITLE: Defining Input Template Component in Templ\nDESCRIPTION: Defines a template component named 'input' that takes two string parameters (value and validation) and renders nested div elements with bold text.\nSOURCE: https://github.com/a-h/templ/blob/main/parser/v2/formattestdata/non_empty_elements_with_children_that_are_all_on_the_same_line_are_not_split_into_multiple_lines.txt#2025-04-18_snippet_0\n\nLANGUAGE: templ\nCODE:\n```\npackage test\n\ntempl input(value, validation string) {\n\t<div><div><b>Text</b></div></div>\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Alert with Mixed Quotes in JavaScript\nDESCRIPTION: This code snippet demonstrates how to use JavaScript's template literals (backticks) to create an alert message that includes both single and double quotes. It's encapsulated within HTML script tags for embedding in a web page.\nSOURCE: https://github.com/a-h/templ/blob/main/parser/v2/scriptparsertestdata/backtickquote.txt#2025-04-18_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<script>\nwindow.alert(`This is 'single quoted' and this is \"double quoted\"`);\n</script>\n```\n\n----------------------------------------\n\nTITLE: HTML Comment Parser Testing in Go\nDESCRIPTION: Unit tests for the HTML comment parser, verifying successful parsing of various comment patterns including single-line, multiline, and tag-containing comments.\nSOURCE: https://github.com/a-h/templ/blob/main/CONTRIBUTING.md#2025-04-18_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nfunc TestHTMLCommentParser(t *testing.T) {\n\tvar tests = []struct {\n\t\tname     string\n\t\tinput    string\n\t\texpected HTMLComment\n\t}{\n\t\t{\n\t\t\tname:  \"comment - single line\",\n\t\t\tinput: `<!-- single line comment -->`,\n\t\t\texpected: HTMLComment{\n\t\t\t\tContents: \" single line comment \",\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname:  \"comment - no whitespace\",\n\t\t\tinput: `<!--no whitespace between sequence open and close-->`,\n\t\t\texpected: HTMLComment{\n\t\t\t\tContents: \"no whitespace between sequence open and close\",\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname: \"comment - multiline\",\n\t\t\tinput: `<!-- multiline\n\t\t\t\t\t\t\t\tcomment\n\t\t\t\t\t-->`,\n\t\t\texpected: HTMLComment{\n\t\t\t\tContents: ` multiline\n\t\t\t\t\t\t\t\tcomment\n\t\t\t\t\t`,\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname:  \"comment - with tag\",\n\t\t\tinput: `<!-- <p class=\"test\">tag</p> -->`,\n\t\t\texpected: HTMLComment{\n\t\t\t\tContents: ` <p class=\"test\">tag</p> `,\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tname:  \"comments can contain tags\",\n\t\t\tinput: `<!-- <div> hello world </div> -->`,\n\t\t\texpected: HTMLComment{\n\t\t\t\tContents: ` <div> hello world </div> `,\n\t\t\t},\n\t\t},\n\t}\n\tfor _, tt := range tests {\n\t\ttt := tt\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tinput := parse.NewInput(tt.input)\n\t\t\tresult, ok, err := htmlComment.Parse(input)\n\t\t\tif err != nil {\n\t\t\t\tt.Fatalf(\"parser error: %v\", err)\n\t\t\t}\n\t\t\tif !ok {\n\t\t\t\tt.Fatalf(\"failed to parse at %d\", input.Index())\n\t\t\t}\n\t\t\tif diff := cmp.Diff(tt.expected, result); diff != \"\" {\n\t\t\t\tt.Errorf(diff)\n\t\t\t}\n\t\t})\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Notifying templ proxy from external tools\nDESCRIPTION: Command to trigger a live reload notification to the templ proxy from external build tools, with options to customize the proxy address.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/09-developer-tools/03-live-reload.md#2025-04-18_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ntempl generate --notify-proxy\n```\n\nLANGUAGE: bash\nCODE:\n```\ntempl generate --notify-proxy --proxybind=\"localhost\" --proxyport=\"8080\"\n```\n\n----------------------------------------\n\nTITLE: Ensuring Generated Files are Committed\nDESCRIPTION: Command to check that all generated templ files have been properly generated and committed to git.\nSOURCE: https://github.com/a-h/templ/blob/main/README.md#2025-04-18_snippet_12\n\nLANGUAGE: sh\nCODE:\n```\ngit diff --exit-code\n```\n\n----------------------------------------\n\nTITLE: Formatted templ Code\nDESCRIPTION: Output templ code with proper spacing around template expressions and consistent indentation.\nSOURCE: https://github.com/a-h/templ/blob/main/parser/v2/formattestdata/spacing_between_string_spreads_attributes_is_kept.txt#2025-04-18_snippet_1\n\nLANGUAGE: templ\nCODE:\n```\npackage main\n\ntempl x() {\n\t<div>{ firstName... } { lastName... }</div>\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying Infrastructure with CDK Hotswap\nDESCRIPTION: Deploys infrastructure using AWS CDK's hotswap feature for faster deployments. This task requires the generate task to be run first and must be executed from the cdk directory.\nSOURCE: https://github.com/a-h/templ/blob/main/examples/counter/README.md#2025-04-18_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ncdk deploy --hotswap\n```\n\n----------------------------------------\n\nTITLE: HTML Script Tag with JavaScript Alert Function\nDESCRIPTION: A script tag containing JavaScript that calls window.alert() with a string containing single quotes. This demonstrates how Templ handles nested quotes in JavaScript embedded in HTML templates.\nSOURCE: https://github.com/a-h/templ/blob/main/parser/v2/scriptparsertestdata/doublequote.txt#2025-04-18_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script>\nwindow.alert(\"This is 'quoted'\");\n</script>\n```\n\n----------------------------------------\n\nTITLE: URL Sanitization Template Example\nDESCRIPTION: Template demonstrating URL sanitization behavior with different URL handling methods.\nSOURCE: https://github.com/a-h/templ/blob/main/CONTRIBUTING.md#2025-04-18_snippet_3\n\nLANGUAGE: templ\nCODE:\n```\npackage testahref\n\ntempl render() {\n\t<a href=\"javascript:alert(&#39;unaffected&#39;);\">Ignored</a>\n\t<a href={ templ.URL(\"javascript:alert('should be sanitized')\") }>Sanitized</a>\n\t<a href={ templ.SafeURL(\"javascript:alert('should not be sanitized')\") }>Unsanitized</a>\n}\n```\n\n----------------------------------------\n\nTITLE: Unformatted TEMPL Template Input\nDESCRIPTION: Raw unformatted TEMPL template showing a div structure with conditional rendering based on items array\nSOURCE: https://github.com/a-h/templ/blob/main/parser/v2/formattestdata/if_statements_are_placed_on_a_new_line.txt#2025-04-18_snippet_0\n\nLANGUAGE: templ\nCODE:\n```\npackage test\n\ntempl input(items []string) {\n<div>{ \"the\" }<div>{ \"other\" }</div>if items != nil {\n<div>{ items[0] }</div>\n\t\t} else {\n\t\t\t<div>{ items[1] }</div>\n\t\t}\n</div>\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Templ Development Shell via Nix\nDESCRIPTION: Command to enter Templ development environment using Nix.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/02-quick-start/01-installation.md#2025-04-18_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnix develop github:a-h/templ\n```\n\n----------------------------------------\n\nTITLE: Viewing Templ Generate Help Options\nDESCRIPTION: Command to display the help documentation for the templ generate command.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/04-core-concepts/02-template-generation.md#2025-04-18_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ntempl generate --help\n```\n\n----------------------------------------\n\nTITLE: Demonstrating JavaScript String Escape Sequences with Different Quote Styles\nDESCRIPTION: This code shows how JavaScript handles various character escape sequences (hex, Unicode, and extended Unicode) when used with different string declaration styles (single quotes, double quotes, and backticks). All escape sequences shown resolve to the character 'a' (ASCII/Unicode code point 61 in hex).\nSOURCE: https://github.com/a-h/templ/blob/main/parser/v2/scriptparsertestdata/escapechars.txt#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst singleQuotedBackslashEscape = '\\x61'; // a\nconst singleQuotedHexEscape = '\\x61';\nconst singleQuotedUnicodeEscape = '\\u0061';\nconst singleQuotedExtendedUnicodeEscape = '\\u{61}';\n\nconst doubleQuotedBackslashEscape = \"\\x61\"; // a\nconst doubleQuotedHexEscape = \"\\x61\";\nconst doubleQuotedUnicodeEscape = \"\\u0061\";\nconst doubleQuotedExtendedUnicodeEscape = \"\\u{61}\";\n\nconst backtickQuotedBackslashEscape = `\\x61`; // a\nconst backtickQuotedHexEscape = `\\x61`;\nconst backtickQuotedUnicodeEscape = `\\u0061`;\nconst backtickQuotedExtendedUnicodeEscape = `\\u{61}`;\n```\n\n----------------------------------------\n\nTITLE: HTML Comment Parser Error Testing in Go\nDESCRIPTION: Unit tests verifying error handling in the HTML comment parser for invalid syntax cases like unclosed comments and nested comments.\nSOURCE: https://github.com/a-h/templ/blob/main/CONTRIBUTING.md#2025-04-18_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nfunc TestHTMLCommentParserErrors(t *testing.T) {\n\tvar tests = []struct {\n\t\tname     string\n\t\tinput    string\n\t\texpected error\n\t}{\n\t\t{\n\t\t\tname:  \"unclosed HTML comment\",\n\t\t\tinput: `<!-- unclosed HTML comment`,\n\t\t\texpected: parse.Error(\"expected end comment literal '-->' not found\",\n\t\t\t\tparse.Position{\n\t\t\t\t\tIndex: 26,\n\t\t\t\t\tLine:  0,\n\t\t\t\t\tCol:   26,\n\t\t\t\t}),\n\t\t},\n\t\t{\n\t\t\tname:  \"comment in comment\",\n\t\t\tinput: `<!-- <-- other --> -->`,\n\t\t\texpected: parse.Error(\"comment contains invalid sequence '--'\", parse.Position{\n\t\t\t\tIndex: 8,\n\t\t\t\tLine:  0,\n\t\t\t\tCol:   8,\n\t\t\t}),\n\t\t},\n\t}\n\tfor _, tt := range tests {\n\t\ttt := tt\n\t\tt.Run(tt.name, func(t *testing.T) {\n\t\t\tinput := parse.NewInput(tt.input)\n\t\t\t_, _, err := htmlComment.Parse(input)\n\t\t\tif diff := cmp.Diff(tt.expected, err); diff != \"\" {\n\t\t\t\tt.Error(diff)\n\t\t\t}\n\t\t})\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Control Statement Usage in Templ\nDESCRIPTION: Illustrates an example of incorrect if statement usage that will cause a parser error due to a missing opening brace.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/03-syntax-and-usage/05-statements.md#2025-04-18_snippet_2\n\nLANGUAGE: templ\nCODE:\n```\npackage main\n\ntempl showIfTrue(b bool) {\n\tif b \n\t  <p>Hello</p>\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Templ Syntax Plugin for Vim\nDESCRIPTION: Vim-plug command to install the templ.vim plugin which provides better indentation for Go code outside of templ blocks and adds tcomment_vim support for templ files.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/09-developer-tools/02-ide-support.md#2025-04-18_snippet_20\n\nLANGUAGE: vim\nCODE:\n```\nPlug 'iefserge/templ.vim'\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple TypeScript Function\nDESCRIPTION: A basic TypeScript file with a hello function that logs a message to the console.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/03-syntax-and-usage/12-script-templates.md#2025-04-18_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nfunction hello() {\n  console.log('Hello, from TypeScript');\n}\n```\n\n----------------------------------------\n\nTITLE: Running Fuzz Tests for templ\nDESCRIPTION: Commands to run fuzzing tests for the parser components of templ.\nSOURCE: https://github.com/a-h/templ/blob/main/README.md#2025-04-18_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\n./parser/v2/fuzz.sh\n./parser/v2/goexpression/fuzz.sh\n```\n\n----------------------------------------\n\nTITLE: Generated Go Function Signature from templ\nDESCRIPTION: Example of the function signature generated from the templ file, which returns a templ.Component.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/06-static-rendering/01-generating-static-html-files-with-templ.md#2025-04-18_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nfunc hello(name string) templ.Component {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Properly Formatted Output Code\nDESCRIPTION: Cleaned up version with consistent indentation, proper Go formatting conventions, and removed unnecessary parentheses and semicolons.\nSOURCE: https://github.com/a-h/templ/blob/main/parser/v2/formattestdata/go_expressions_are_formatted_by_the_go_formatter.txt#2025-04-18_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\ntype Link struct {\n\tName string\n\tUrl  string\n}\n\nvar a = false\n\nfunc test() {\n\tlog.Print(\"hoi\")\n\n\tif a {\n\t\tlog.Fatal(\"OH NO !\")\n\t}\n}\n\ntempl x() {\n\t<div>Hello World</div>\n}\n```\n\n----------------------------------------\n\nTITLE: Resulting JavaScript Output from Templ Processing\nDESCRIPTION: This snippet shows the resulting JavaScript code after Templ has processed the HTML script tag. It demonstrates that Templ correctly preserves the JavaScript code, including the quoted string.\nSOURCE: https://github.com/a-h/templ/blob/main/parser/v2/scriptparsertestdata/singlequote.txt#2025-04-18_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nwindow.alert('This is \"quoted\"');\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Hello Template using Go templ\nDESCRIPTION: A simple templ definition that creates a Hello component. This component renders the text 'Hello' when used in a Go application with the templ templating system.\nSOURCE: https://github.com/a-h/templ/blob/main/parser/v2/formattestdata/templatefile_can_start_with_comments.txt#2025-04-18_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\n// Go comment\npackage goof\n\ntempl Hello() {\n\tHello\n}\n```\n\n----------------------------------------\n\nTITLE: Running Benchmarks for templ\nDESCRIPTION: Commands to generate templates and run benchmark tests for the project.\nSOURCE: https://github.com/a-h/templ/blob/main/README.md#2025-04-18_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\ngo run ./cmd/templ generate -include-version=false && go test ./... -bench=. -benchmem\n```\n\n----------------------------------------\n\nTITLE: Setting Up a New Project Directory with Bash\nDESCRIPTION: Creates a new directory for the static HTML generator project.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/06-static-rendering/01-generating-static-html-files-with-templ.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmkdir static-generator\n```\n\n----------------------------------------\n\nTITLE: Generated HTML Output\nDESCRIPTION: The resulting HTML file content after running the Go program.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/06-static-rendering/01-generating-static-html-files-with-templ.md#2025-04-18_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<div>Hello, John</div>\n```\n\n----------------------------------------\n\nTITLE: Running Linters for templ\nDESCRIPTION: Command to run the golangci-lint tool with verbose output for code quality checks.\nSOURCE: https://github.com/a-h/templ/blob/main/README.md#2025-04-18_snippet_11\n\nLANGUAGE: sh\nCODE:\n```\ngolangci-lint run --verbose\n```\n\n----------------------------------------\n\nTITLE: Input Code with Inconsistent Formatting\nDESCRIPTION: Original code with inconsistent indentation and formatting, including a Link struct definition, variable declaration, test function, and templ template.\nSOURCE: https://github.com/a-h/templ/blob/main/parser/v2/formattestdata/go_expressions_are_formatted_by_the_go_formatter.txt#2025-04-18_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\n      type Link struct {\nName string\n\t        Url  string\n}\n\nvar a = false;\n\nfunc test() {\n\t      log.Print(\"hoi\")\n\n\t      if (a) {\n      log.Fatal(\"OH NO !\")\n\t}\n}\n\ntempl x() {\n\t<div>Hello World</div>\n}\n```\n\n----------------------------------------\n\nTITLE: Input Script Style Function Declaration\nDESCRIPTION: Input format showing a script style function named Style that takes three string parameters a, b, and c.\nSOURCE: https://github.com/a-h/templ/blob/main/parser/v2/formattestdata/scriptarguments_multiline.txt#2025-04-18_snippet_0\n\nLANGUAGE: templ\nCODE:\n```\npackage p\n\nscript Style(\na string,\nb string,\nc string,\n) {\n\tconsole.log(a, b, c);\n}\n```\n\n----------------------------------------\n\nTITLE: Formatted Templ Template Definition\nDESCRIPTION: Properly formatted version of the same Templ template with improved HTML structure and indentation for better readability. Maintains identical functionality while being more maintainable.\nSOURCE: https://github.com/a-h/templ/blob/main/parser/v2/formattestdata/all_children_indented__with_nested_indentation__when_close_tag_is_on_new_line.txt#2025-04-18_snippet_1\n\nLANGUAGE: templ\nCODE:\n```\npackage test\n\ntempl input(value, validation string) {\n\t<div>\n\t\t<p>\n\t\t\t{ \"the\" }\n\t\t\t<a href=\"http://example.com\">\n\t\t\t\t{ \"data\" }\n\t\t\t</a>\n\t\t</p>\n\t</div>\n}\n```\n\n----------------------------------------\n\nTITLE: Running Templ via Nix\nDESCRIPTION: Command to run Templ directly using Nix without installation.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/02-quick-start/01-installation.md#2025-04-18_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnix run github:a-h/templ\n```\n\n----------------------------------------\n\nTITLE: Building TypeScript with Global esbuild\nDESCRIPTION: Command to bundle and minify TypeScript code using globally installed esbuild. Creates bundled output in assets/js/index.js\nSOURCE: https://github.com/a-h/templ/blob/main/examples/typescript/README.md#2025-04-18_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nesbuild --bundle --minify --outfile=assets/js/index.js ts/src/index.ts\n```\n\n----------------------------------------\n\nTITLE: Running Short Go Tests for templ\nDESCRIPTION: Commands to set the version, generate templates, and run short tests for the project.\nSOURCE: https://github.com/a-h/templ/blob/main/README.md#2025-04-18_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nversion set --template=\"0.3.%d\"\ngo run ./cmd/templ generate -include-version=false\ngo test ./... -short\n```\n\n----------------------------------------\n\nTITLE: Running Templ Benchmarks in Go\nDESCRIPTION: Command to execute benchmark tests using Go's testing framework.\nSOURCE: https://github.com/a-h/templ/blob/main/benchmarks/templ/README.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo test -bench .\n```\n\n----------------------------------------\n\nTITLE: Handling Mixed Quotes in JavaScript Within TEMPL Templates\nDESCRIPTION: Example showing how TEMPL processes script tags containing JavaScript with mixed quotes. The code demonstrates that an unclosed double quote inside single quotes is properly handled by the TEMPL parser.\nSOURCE: https://github.com/a-h/templ/blob/main/parser/v2/scriptparsertestdata/singlequote_apostrophe.txt#2025-04-18_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script>\nwindow.alert('An unclosed \" is allowed in single quotes');\n</script>\n```\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.alert('An unclosed \" is allowed in single quotes');\n```\n\n----------------------------------------\n\nTITLE: Formatted Output of Templ Template with Line Breaks\nDESCRIPTION: This snippet shows the formatted output of the 'test' Templ template. It demonstrates how Templ automatically adjusts the spacing and line breaks for better readability in the rendered HTML.\nSOURCE: https://github.com/a-h/templ/blob/main/parser/v2/formattestdata/br_elements_are_placed_on_new_lines.txt#2025-04-18_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\npackage main\n\ntempl test() {\n\t<div>\n\t\tLinebreaks\n\t\t<br/>\n\t\tand\n\t\t<hr/>\n\t\trules\n\t\t<br/>\n\t\tfor\n\t\t<br/>\n\t\tspacing\n\t</div>\n}\n```\n\n----------------------------------------\n\nTITLE: Main Function for Rendering Button Component\nDESCRIPTION: Shows a simple Go program that renders a button component to standard output.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/03-syntax-and-usage/11-css-style-management.md#2025-04-18_snippet_21\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\t\"os\"\n)\n\nfunc main() {\n\tbutton(\"Click me\", false).Render(context.Background(), os.Stdout)\n}\n```\n\n----------------------------------------\n\nTITLE: Properly Formatted templ Template (output example)\nDESCRIPTION: The same templ template code after proper formatting has been applied. This shows the correct indentation and spacing conventions for templ templates, with consistent indentation for component call parameters.\nSOURCE: https://github.com/a-h/templ/blob/main/parser/v2/formattestdata/templelement_multiline_block_indentation.txt#2025-04-18_snippet_1\n\nLANGUAGE: templ\nCODE:\n```\npackage p\n\ntempl f() {\n\t@Other(\n\t\tp.Test,\n\t\t\"s\",\n\t) {\n\t\t<p>hello</p>\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying Infrastructure with CDK\nDESCRIPTION: Deploys infrastructure using the AWS CDK. This task requires the generate task to be run first and needs to be executed from the cdk directory.\nSOURCE: https://github.com/a-h/templ/blob/main/examples/counter/README.md#2025-04-18_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncdk deploy\n```\n\n----------------------------------------\n\nTITLE: Installing Docusaurus Website Dependencies\nDESCRIPTION: Command to install project dependencies using Yarn package manager.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/README.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn\n```\n\n----------------------------------------\n\nTITLE: Installing TypeScript Dependencies\nDESCRIPTION: NPM command to install TypeScript project dependencies from the ts directory\nSOURCE: https://github.com/a-h/templ/blob/main/examples/typescript/README.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Pushing Release Tag for templ\nDESCRIPTION: Command to push a semantic version tag to GitHub to trigger the release process.\nSOURCE: https://github.com/a-h/templ/blob/main/README.md#2025-04-18_snippet_13\n\nLANGUAGE: sh\nCODE:\n```\nversion push --template=\"0.3.%d\" --prefix=\"v\"\n```\n\n----------------------------------------\n\nTITLE: Original Unformatted Template Code\nDESCRIPTION: Unformatted templ code with nested components and parameters\nSOURCE: https://github.com/a-h/templ/blob/main/parser/v2/formattestdata/templelement_multiline_block_containing_multiline_block.txt#2025-04-18_snippet_0\n\nLANGUAGE: templ\nCODE:\n```\npackage p\n\ntempl f() {\n@Other(\n\t\t\tp.Test,\n\"s\",\n){\n\t@another.Component(\n\t\t\tp.Test,\n\t\t\t3,\n\"s\",\n){\n\t<p>hello</p>\n}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: HTML Output of Style Element\nDESCRIPTION: Shows the resulting HTML when including a style element directly in a template.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/03-syntax-and-usage/11-css-style-management.md#2025-04-18_snippet_24\n\nLANGUAGE: html\nCODE:\n```\n<style type=\"text/css\">\n\tp {\n\t\tfont-family: sans-serif;\n\t}\n\t.button {\n\t\tbackground-color: black;\n\t\tforeground-color: white;\n\t}\n</style>\n<p>\n\tParagraph contents.\n</p>\n```\n\n----------------------------------------\n\nTITLE: Defining Input Component in Templ\nDESCRIPTION: This snippet defines a templ component named 'input' that takes 'value' and 'validation' as string parameters. It renders a nested div structure with bold text 'Text' inside.\nSOURCE: https://github.com/a-h/templ/blob/main/parser/v2/formattestdata/when_an_element_contains_children_that_are_on_new_lines__the_children_are_indented.txt#2025-04-18_snippet_0\n\nLANGUAGE: templ\nCODE:\n```\npackage test\n\ntempl input(value, validation string) {\n\t<div>\n\t\t<div><b>Text</b></div>\n\t</div>\n}\n```\n\n----------------------------------------\n\nTITLE: Building React Benchmark Project\nDESCRIPTION: Command to build the React benchmark project, compiling source code into deployable assets.\nSOURCE: https://github.com/a-h/templ/blob/main/benchmarks/react/README.md#2025-04-18_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Running GoFiber Application\nDESCRIPTION: Command to start the GoFiber web server with templ integration. Server will start on localhost:3000.\nSOURCE: https://github.com/a-h/templ/blob/main/examples/integration-gofiber/README.md#2025-04-18_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngo run .\n```\n\n----------------------------------------\n\nTITLE: Building Production Documentation Site\nDESCRIPTION: Command to build the production documentation site for templ.\nSOURCE: https://github.com/a-h/templ/blob/main/README.md#2025-04-18_snippet_15\n\nLANGUAGE: sh\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Setting Up Templ LSP in Neovim\nDESCRIPTION: Lua configuration for setting up the Templ language server in Neovim alongside other language servers. This example demonstrates how to configure multiple language servers with shared on_attach and capabilities settings.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/09-developer-tools/02-ide-support.md#2025-04-18_snippet_3\n\nLANGUAGE: lua\nCODE:\n```\nlocal lspconfig = require(\"lspconfig\")\n\n-- Use a loop to conveniently call 'setup' on multiple servers and\n-- map buffer local keybindings when the language server attaches\n\nlocal servers = { 'gopls', 'ccls', 'cmake', 'tsserver', 'templ' }\nfor _, lsp in ipairs(servers) do\n  lspconfig[lsp].setup({\n    on_attach = on_attach,\n    capabilities = capabilities,\n  })\nend\n```\n\n----------------------------------------\n\nTITLE: Running Go Application\nDESCRIPTION: Task to execute the Go application in the current directory using go run.\nSOURCE: https://github.com/a-h/templ/blob/main/examples/integration-react/README.md#2025-04-18_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngo run .\n```\n\n----------------------------------------\n\nTITLE: Disabling Deoplete for Templ Files in Vim\nDESCRIPTION: Vim configuration to disable deoplete autocompletion specifically for templ files to avoid conflicts with asyncomplete. This is only needed if you're using both completion engines.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/09-developer-tools/02-ide-support.md#2025-04-18_snippet_19\n\nLANGUAGE: vim\nCODE:\n```\nautocmd FileType templ call deoplete#custom#buffer_option('auto_complete', v:false)\n```\n\n----------------------------------------\n\nTITLE: Compact Templ Template Definition\nDESCRIPTION: Original unformatted Templ template defining an input component with HTML structure and string interpolation. Takes value and validation parameters as strings.\nSOURCE: https://github.com/a-h/templ/blob/main/parser/v2/formattestdata/all_children_indented__with_nested_indentation__when_close_tag_is_on_new_line.txt#2025-04-18_snippet_0\n\nLANGUAGE: templ\nCODE:\n```\npackage test\n\ntempl input(value, validation string) {\n\t<div><p>{ \"the\" }<a href=\"http://example.com\">{ \"data\" }\n</a></p></div>\n}\n```\n\n----------------------------------------\n\nTITLE: Building Docusaurus Static Website Content\nDESCRIPTION: Command to generate static content for the Docusaurus website, which can be served using any static content hosting service.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/README.md#2025-04-18_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn build\n```\n\n----------------------------------------\n\nTITLE: Generating Templ Templates\nDESCRIPTION: Task to generate templ templates using the templ CLI generate command.\nSOURCE: https://github.com/a-h/templ/blob/main/examples/integration-react/README.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ntempl generate\n```\n\n----------------------------------------\n\nTITLE: Optimized Input Component Template in templ\nDESCRIPTION: This snippet shows an optimized version of the 'input' template. It removes the unnecessary newline within the paragraph element, resulting in more compact HTML output.\nSOURCE: https://github.com/a-h/templ/blob/main/parser/v2/formattestdata/empty_elements_stay_on_the_same_line.txt#2025-04-18_snippet_1\n\nLANGUAGE: templ\nCODE:\n```\npackage test\n\ntempl input(value, validation string) {\n\t<div>\n\t\t<p></p>\n\t</div>\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for React Benchmark\nDESCRIPTION: Command to install all required npm dependencies for the React benchmark project.\nSOURCE: https://github.com/a-h/templ/blob/main/benchmarks/react/README.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i\n```\n\n----------------------------------------\n\nTITLE: Configuring Tailwind CSS LSP for Templ in Neovim\nDESCRIPTION: Lua configuration to set up the Tailwind CSS language server for Templ files in Neovim. This provides Tailwind CSS class autocompletion in Templ templates by mapping them to HTML.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/09-developer-tools/02-ide-support.md#2025-04-18_snippet_7\n\nLANGUAGE: lua\nCODE:\n```\nlspconfig.tailwindcss.setup({\n    on_attach = on_attach,\n    capabilities = capabilities,\n    filetypes = { \"templ\", \"astro\", \"javascript\", \"typescript\", \"react\" },\n    settings = {\n      tailwindCSS = {\n        includeLanguages = {\n          templ = \"html\",\n        },\n      },\n    },\n})\n```\n\n----------------------------------------\n\nTITLE: Deploying Docusaurus Website Using SSH\nDESCRIPTION: Command to deploy the Docusaurus website using SSH authentication.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/README.md#2025-04-18_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ USE_SSH=true yarn deploy\n```\n\n----------------------------------------\n\nTITLE: Defining a Script Element Component in Templ\nDESCRIPTION: A templ component that renders an HTML script element with a source URL. The component accepts 'value' and 'validation' string parameters, though they are not used in the component body.\nSOURCE: https://github.com/a-h/templ/blob/main/parser/v2/formattestdata/script_tags_are_not_converted_to_self_closing_elements.txt#2025-04-18_snippet_0\n\nLANGUAGE: templ\nCODE:\n```\npackage test\n\ntempl input(value, validation string) {\n\t<script src=\"https://example.com/myscript.js\"></script>\n}\n```\n\n----------------------------------------\n\nTITLE: Running React Benchmark (requires build)\nDESCRIPTION: Command to start the React benchmark application. Note that this requires the build task to be completed first.\nSOURCE: https://github.com/a-h/templ/blob/main/benchmarks/react/README.md#2025-04-18_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Unformatted templ Template (input example)\nDESCRIPTION: An example of unformatted templ template code showing improper indentation and spacing. This code defines a template function 'f' that includes a component call to 'Other' with parameters and HTML content.\nSOURCE: https://github.com/a-h/templ/blob/main/parser/v2/formattestdata/templelement_multiline_block_indentation.txt#2025-04-18_snippet_0\n\nLANGUAGE: templ\nCODE:\n```\npackage p\n\ntempl f() {\n\t@Other(\n\t\t\tp.Test,\n\"s\",\n){\n\t<p>hello</p>\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Using Custom Formatter on Save in Neovim\nDESCRIPTION: Lua autocommand to run the custom Templ formatter when saving .templ files in Neovim. This provides better compatibility when multiple LSPs are attached to the same buffer.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/09-developer-tools/02-ide-support.md#2025-04-18_snippet_12\n\nLANGUAGE: lua\nCODE:\n```\nvim.api.nvim_create_autocmd({ \"BufWritePre\" }, { pattern = { \"*.templ\" }, callback = custom_format })\n```\n\n----------------------------------------\n\nTITLE: Input Templ Template with Inconsistent Indentation\nDESCRIPTION: A Templ template function 'f()' with inconsistent indentation inside the div element. The @Other component call is not properly indented.\nSOURCE: https://github.com/a-h/templ/blob/main/parser/v2/formattestdata/templelement_simple_in_div.txt#2025-04-18_snippet_0\n\nLANGUAGE: templ\nCODE:\n```\npackage p\n\ntempl f() {\n\t<div>\n\t@Other(p.Test, \"s\")\n\t</div>\n}\n```\n\n----------------------------------------\n\nTITLE: Input Template Function Definition\nDESCRIPTION: Shows original template function with unformatted nested function call\nSOURCE: https://github.com/a-h/templ/blob/main/parser/v2/formattestdata/templelement_multiline_in_div.txt#2025-04-18_snippet_0\n\nLANGUAGE: templ\nCODE:\n```\npackage p\n\ntempl f() {\n\t<div>\n\t@Other(\n\t\t\tp.Test,\n\"s\",\n\t\t)\n\t</div>\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Format on Save for Templ Files in Neovim\nDESCRIPTION: Lua autocommand to format Templ files automatically on save using the LSP's formatting capabilities. This runs whenever a buffer with a .templ file is about to be written.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/09-developer-tools/02-ide-support.md#2025-04-18_snippet_9\n\nLANGUAGE: lua\nCODE:\n```\nvim.api.nvim_create_autocmd({ \"BufWritePre\" }, { pattern = { \"*.templ\" }, callback = vim.lsp.buf.format })\n```\n\n----------------------------------------\n\nTITLE: Unformatted CSS in Templ\nDESCRIPTION: An unformatted CSS block in a templ file with inline template expression.\nSOURCE: https://github.com/a-h/templ/blob/main/parser/v2/formattestdata/css_is_indented_by_one_level.txt#2025-04-18_snippet_0\n\nLANGUAGE: templ\nCODE:\n```\npackage test\n\ncss ClassName() {\nbackground-color: #ffffff;\ncolor: { constants.White };\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Empty Go Package with Dev Build Constraint\nDESCRIPTION: This snippet demonstrates a minimal Go package declaration with a build constraint for development builds. The package is named 'p' and has no implemented functionality.\nSOURCE: https://github.com/a-h/templ/blob/main/parser/v2/formattestdata/templateheader_with_build_tags.txt#2025-04-18_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\n//go:build dev\n\npackage p\n```\n\n----------------------------------------\n\nTITLE: Defining HTML Benchmark Template in Templ\nDESCRIPTION: Creates a template named Benchmark that outputs a simple HTML structure with divs, line breaks, and a list. Used for performance testing or demonstration purposes.\nSOURCE: https://github.com/a-h/templ/blob/main/parser/v2/benchmarktestdata/benchmark.txt#2025-04-18_snippet_0\n\nLANGUAGE: templ\nCODE:\n```\ntempl Benchmark() {\n\t\t\t\t<div>Hello</div>\n\t\t\t\t<br>\n\t\t\t\t<br>\n\t\t\t\t<br>\n\t\t\t\t</br>\n\t\t\t\t<div>Lorem ipsum dolor sit amet, consectetur adipiscing elit.</div>\n\t\t\t\t<br>\n\t\t\t\t<br>\n\t\t\t\t<ul>\n\t\t\t\t<li>Item 1</li>\n\t\t\t\t<li>Item 2</li>\n\t\t\t\t<li>Item 3</li>\n\t\t\t\t</ul>\n}\n```\n\n----------------------------------------\n\nTITLE: Text Starting with Control Keyword in Templ\nDESCRIPTION: Shows an example that will produce an error because the text starts with 'if' but no opening brace is found.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/03-syntax-and-usage/05-statements.md#2025-04-18_snippet_3\n\nLANGUAGE: templ\nCODE:\n```\npackage main\n\ntempl text(b bool) {\n\t<p>if a tree fell in the woods</p>\n}\n```\n\n----------------------------------------\n\nTITLE: HTML Comment Output\nDESCRIPTION: Shows how HTML comments from the templ template are rendered in the final HTML output, preserving the comment structure and formatting.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/03-syntax-and-usage/13-comments.md#2025-04-18_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!-- Single line -->\n<!--\n\tSingle or multiline.\n-->\n```\n\n----------------------------------------\n\nTITLE: Running the Go Web Server\nDESCRIPTION: Command to run the Go program that starts the web server, executing all Go files in the current directory.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/02-quick-start/03-running-your-first-templ-application.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngo run *.go\n```\n\n----------------------------------------\n\nTITLE: Running Go Tests for templ\nDESCRIPTION: Commands to set the version, generate templates, and run all tests for the project.\nSOURCE: https://github.com/a-h/templ/blob/main/README.md#2025-04-18_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nversion set --template=\"0.3.%d\"\ngo run ./cmd/templ generate -include-version=false\ngo test ./...\n```\n\n----------------------------------------\n\nTITLE: Installing Snapshot Version of templ\nDESCRIPTION: Commands to build and install the current version of templ, including cleanup of previous installations and LSP logs.\nSOURCE: https://github.com/a-h/templ/blob/main/README.md#2025-04-18_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n# Remove templ from the non-standard ~/bin/templ path\n# that this command previously used.\nrm -f ~/bin/templ\n# Clear LSP logs.\nrm -f cmd/templ/lspcmd/*.txt\n# Update version.\nversion set --template=\"0.3.%d\"\n# Install to $GOPATH/bin or $HOME/go/bin\ncd cmd/templ && go install\n```\n\n----------------------------------------\n\nTITLE: Running templ Generate Command\nDESCRIPTION: Command to run the generate functionality using a local version of templ.\nSOURCE: https://github.com/a-h/templ/blob/main/README.md#2025-04-18_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ngo run ./cmd/templ generate -include-version=false\n```\n\n----------------------------------------\n\nTITLE: Building Local Version of templ in Go\nDESCRIPTION: Commands to set the version and build a local version of the templ tool from source code.\nSOURCE: https://github.com/a-h/templ/blob/main/README.md#2025-04-18_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nversion set --template=\"0.3.%d\"\ncd cmd/templ\ngo build\n```\n\n----------------------------------------\n\nTITLE: HTML Output of Conditional Classes\nDESCRIPTION: Shows the resulting HTML when rendering a button with conditional classes where the condition is false.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/03-syntax-and-usage/11-css-style-management.md#2025-04-18_snippet_22\n\nLANGUAGE: html\nCODE:\n```\n<button class=\"button\">\n Click me\n</button>\n```\n\n----------------------------------------\n\nTITLE: URL Sanitization Expected Output\nDESCRIPTION: Expected HTML output showing the results of URL sanitization for different input cases.\nSOURCE: https://github.com/a-h/templ/blob/main/CONTRIBUTING.md#2025-04-18_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<a href=\"javascript:alert(&#39;unaffected&#39;);\">Ignored</a>\n<a href=\"about:invalid#TemplFailedSanitizationURL\">Sanitized</a>\n<a href=\"javascript:alert(&#39;should not be sanitized&#39;)\">Unsanitized</a>\n```\n\n----------------------------------------\n\nTITLE: Installing LSP and Autocomplete Plugins in Vim for Templ\nDESCRIPTION: Vim plugin installation commands using vim-plug for LSP and autocomplete support. This requires Vim 8+ and installs vim-lsp, asyncomplete.vim, and asyncomplete-lsp.vim.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/docs/09-developer-tools/02-ide-support.md#2025-04-18_snippet_16\n\nLANGUAGE: vim\nCODE:\n```\nPlug 'prabirshrestha/vim-lsp'\nPlug 'prabirshrestha/asyncomplete.vim'\nPlug 'prabirshrestha/asyncomplete-lsp.vim'\n```\n\n----------------------------------------\n\nTITLE: Executing Common CDK Commands in a Go Project\nDESCRIPTION: A list of essential CDK commands for deploying, comparing, and synthesizing CloudFormation templates, along with the Go test command for running unit tests.\nSOURCE: https://github.com/a-h/templ/blob/main/storybook/_example/cdk/README.md#2025-04-18_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncdk deploy\n```\n\nLANGUAGE: shell\nCODE:\n```\ncdk diff\n```\n\nLANGUAGE: shell\nCODE:\n```\ncdk synth\n```\n\nLANGUAGE: shell\nCODE:\n```\ngo test\n```\n\n----------------------------------------\n\nTITLE: Formatting Go and templ Code\nDESCRIPTION: Commands to format all Go and templ code in the project using gofmt and templ fmt.\nSOURCE: https://github.com/a-h/templ/blob/main/README.md#2025-04-18_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\ngofmt -s -w .\ngo run ./cmd/templ fmt .\n```\n\n----------------------------------------\n\nTITLE: Starting Docusaurus Local Development Server\nDESCRIPTION: Command to start a local development server for the Docusaurus website, which opens a browser window and supports live updates.\nSOURCE: https://github.com/a-h/templ/blob/main/docs/README.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn start\n```"
  }
]