[
  {
    "owner": "spotify",
    "repo": "spotify-web-api-ts-sdk",
    "content": "TITLE: Creating a Spotify API client instance\nDESCRIPTION: Shows how to initialize the Spotify SDK with different authentication methods (user authorization or client credentials) and make basic requests.\nSOURCE: https://github.com/spotify/spotify-web-api-ts-sdk/blob/main/README.md#2025-04-20_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nimport { SpotifyApi } from '@spotify/web-api-ts-sdk';\n\n// Choose one of the following:\nconst sdk = SpotifyApi.withUserAuthorization(\"client-id\", \"https://localhost:3000\", [\"scope1\", \"scope2\"]);\nconst sdk = SpotifyApi.withClientCredentials(\"client-id\", \"secret\", [\"scope1\", \"scope2\"]);\n```\n\n----------------------------------------\n\nTITLE: Using Authorization Code Flow with PKCE for authentication\nDESCRIPTION: Example of initializing the SDK with user authorization using the PKCE flow, which is recommended for browser-based applications.\nSOURCE: https://github.com/spotify/spotify-web-api-ts-sdk/blob/main/README.md#2025-04-20_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nconst sdk = SpotifyApi.withUserAuthorization(\"client-id\", \"https://localhost:3000\", [\"scope1\", \"scope2\"]);\nconst user = await sdk.currentUser.profile()\n```\n\n----------------------------------------\n\nTITLE: SDK Configuration with default settings\nDESCRIPTION: Shows the default configuration object for the Spotify SDK with options for customizing fetch behavior, request hooks, error handling, and more.\nSOURCE: https://github.com/spotify/spotify-web-api-ts-sdk/blob/main/README.md#2025-04-20_snippet_8\n\nLANGUAGE: ts\nCODE:\n```\nconst defaultConfig: SdkConfiguration = {\n    fetch: (req: RequestInfo | URL, init: RequestInit | undefined) => fetch(req, init),\n    beforeRequest: (_: string, __: RequestInit) => { },\n    afterRequest: (_: string, __: RequestInit, ___: Response) => { },\n    deserializer: new DefaultResponseDeserializer(),\n    responseValidator: new DefaultResponseValidator(),\n    errorHandler: new NoOpErrorHandler(),\n    redirectionStrategy: new DocumentLocationRedirectionStrategy(),\n    cachingStrategy: isBrowser\n        ? new LocalStorageCachingStrategy()\n        : new InMemoryCachingStrategy()\n};\n```\n\n----------------------------------------\n\nTITLE: Performing a search with the Spotify SDK\nDESCRIPTION: Example of searching for artists using the Spotify SDK and displaying the results in a table format.\nSOURCE: https://github.com/spotify/spotify-web-api-ts-sdk/blob/main/README.md#2025-04-20_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nconst items = await sdk.search(\"The Beatles\", [\"artist\"]);\n\nconsole.table(items.artists.items.map((item) => ({\n    name: item.name,\n    followers: item.followers.total,\n    popularity: item.popularity,\n})));\n```\n\n----------------------------------------\n\nTITLE: Implementing Mixed Server and Client Side Authentication\nDESCRIPTION: Setup for a mixed authentication approach where authorization happens client-side and the token is passed to a server for API interactions.\nSOURCE: https://github.com/spotify/spotify-web-api-ts-sdk/blob/main/README.md#2025-04-20_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nSpotifyApi.performUserAuthorization(\"client-id\", \"https://localhost:3000\", [\"scope1\", \"scope2\"], \"https://your-backend-server.com/accept-user-token\");\n// Alternatively if you want to perform your own custom post-back\nSpotifyApi.performUserAuthorization(\"client-id\", \"https://localhost:3000\", [\"scope1\", \"scope2\"], (accessToken) => { /* do postback here */ });\n```\n\n----------------------------------------\n\nTITLE: Server-side token handling for mixed authentication\nDESCRIPTION: Express server implementation to accept a user token from the client-side and initialize the Spotify SDK with that token.\nSOURCE: https://github.com/spotify/spotify-web-api-ts-sdk/blob/main/README.md#2025-04-20_snippet_7\n\nLANGUAGE: js\nCODE:\n```\nconst { SpotifyApi } = require(\"@spotify/web-api-ts-sdk\");\n\nconst express = require('express');\nconst bodyParser = require('body-parser'); \nconst app = express();\n \napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({ extended: false }));\n\nlet sdk;\n\napp.post('/accept-user-token', (req, res) => {\n    let data = req.body;\n    sdk = SpotifyApi.withAccessToken(\"client-id\", data); // SDK now authenticated as client-side user\n}); \n \napp.listen(3000, () => {\n  console.log('Example app listening on port 3000!')\n});\n```\n\n----------------------------------------\n\nTITLE: Customizing the Spotify SDK with configuration options\nDESCRIPTION: Example of overriding default SDK behavior by providing custom options during initialization, such as a custom fetch implementation.\nSOURCE: https://github.com/spotify/spotify-web-api-ts-sdk/blob/main/README.md#2025-04-20_snippet_9\n\nLANGUAGE: js\nCODE:\n```\nconst opts = {\n    fetch: (req, init) => {\n        console.log(\"Called via my custom fetch!\");\n        return fetch(req, init);\n    }\n}\n\nconst sdk = SpotifyApi.withUserAuthorization(\"client-id\", \"https://callback\", [\"scope1\"], opts);\n```\n\n----------------------------------------\n\nTITLE: Implementing custom request hooks in the Spotify SDK\nDESCRIPTION: Example of providing custom beforeRequest and afterRequest hooks to add logging or instrumentation around API calls.\nSOURCE: https://github.com/spotify/spotify-web-api-ts-sdk/blob/main/README.md#2025-04-20_snippet_10\n\nLANGUAGE: js\nCODE:\n```\nconst opts = {\n    beforeRequest: (req, init) => {\n        console.log(\"Called before the request is made\");\n    },\n    afterRequest: (req, init, res) => {\n        console.log(\"Called after the request is made\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a custom error handler for the Spotify SDK\nDESCRIPTION: Implementation of a custom error handler class that follows the IHandleErrors interface, allowing customized response to API errors.\nSOURCE: https://github.com/spotify/spotify-web-api-ts-sdk/blob/main/README.md#2025-04-20_snippet_11\n\nLANGUAGE: ts\nCODE:\n```\nexport default class MyErrorHandler implements IHandleErrors {\n    public async handleErrors(error: any): Promise<boolean> {\n        return false;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a custom response validator for the Spotify SDK\nDESCRIPTION: Custom implementation of a response validator that follows the IValidateResponses interface to handle API responses in a custom way.\nSOURCE: https://github.com/spotify/spotify-web-api-ts-sdk/blob/main/README.md#2025-04-20_snippet_12\n\nLANGUAGE: ts\nCODE:\n```\nexport default class MyResponseValidator implements IValidateResponses {\n    public async validateResponse(response: Response): Promise<void> {\n        // Something here\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Caching Strategy Interface in TypeScript\nDESCRIPTION: Interface definition for implementing custom caching strategies in the SDK. The ICachingStrategy interface defines methods for managing cached items including retrieval, creation, storage, and removal of cached data.\nSOURCE: https://github.com/spotify/spotify-web-api-ts-sdk/blob/main/README.md#2025-04-20_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ICachingStrategy {\n    getOrCreate<T>(cacheKey: string, createFunction: () => Promise<T & ICachable & object>): Promise<T & ICachable>;\n    get<T>(cacheKey: string): T & ICachable | null;\n    setCacheItem<T>(cacheKey: string, item: T & ICachable): void;\n    remove(cacheKey: string): void;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Redirection Strategy in TypeScript\nDESCRIPTION: Implementation of the default DocumentLocationRedirectionStrategy class that handles URL redirection for OAuth flow. This class implements the IRedirectionStrategy interface and provides methods for redirect handling and post-redirect operations.\nSOURCE: https://github.com/spotify/spotify-web-api-ts-sdk/blob/main/README.md#2025-04-20_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nexport default class DocumentLocationRedirectionStrategy implements IRedirectionStrategy {\n    public async redirect(targetUrl: string | URL): Promise<void> {\n        document.location = targetUrl.toString();\n    }\n\n    public async onReturnFromRedirect(): Promise<void> {\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Spotify Web API SDK via NPM\nDESCRIPTION: Command to install the Spotify Web API TypeScript SDK package using npm.\nSOURCE: https://github.com/spotify/spotify-web-api-ts-sdk/blob/main/README.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @spotify/web-api-ts-sdk\n```\n\n----------------------------------------\n\nTITLE: Setting up the SDK example app environment variables\nDESCRIPTION: Example .env file configuration for the SDK example app, containing the Spotify client ID and redirect URL.\nSOURCE: https://github.com/spotify/spotify-web-api-ts-sdk/blob/main/README.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nVITE_SPOTIFY_CLIENT_ID=your_spotify_client_id_for_tests\nVITE_REDIRECT_TARGET=http://localhost:3000\n```\n\n----------------------------------------\n\nTITLE: Running the example app with npm\nDESCRIPTION: Command to start the SDK example application after installing dependencies.\nSOURCE: https://github.com/spotify/spotify-web-api-ts-sdk/blob/main/README.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm run start\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependencies for Spotify Web API TypeScript SDK\nDESCRIPTION: Command to install all project dependencies using npm. This is the first step after cloning the repository to set up the development environment.\nSOURCE: https://github.com/spotify/spotify-web-api-ts-sdk/blob/main/CONTRIBUTING.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Starting the Spotify Web API TypeScript SDK Project\nDESCRIPTION: Command to start the project after installation. This runs the development server for local testing and development.\nSOURCE: https://github.com/spotify/spotify-web-api-ts-sdk/blob/main/CONTRIBUTING.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run start\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables for Spotify Web API Example App\nDESCRIPTION: Environment variable configuration needed for running the embedded example app. These variables must be placed in a .env file in the ./example folder.\nSOURCE: https://github.com/spotify/spotify-web-api-ts-sdk/blob/main/CONTRIBUTING.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nVITE_SPOTIFY_CLIENT_ID=the same value as set in INTEGRATION_TESTS_SPOTIFY_CLIENT_ID\nVITE_REDIRECT_TARGET=http://localhost:3000\n```\n\n----------------------------------------\n\nTITLE: Formatting Examples in Markdown\nDESCRIPTION: Example text formatting used to demonstrate unwanted physical contact descriptions\nSOURCE: https://github.com/spotify/spotify-web-api-ts-sdk/blob/main/CODE_OF_CONDUCT.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n\"_hug_\" or \"_backrub_\"\n```"
  }
]