[
  {
    "owner": "gchq",
    "repo": "gaffer-doc",
    "content": "TITLE: Visualizing Gaffer Data Flow with Mermaid\nDESCRIPTION: A flowchart diagram showing two main processes in Gaffer: Data Input flow (from raw data through schema to storage) and Graph Query flow (from query through Gaffer to results), illustrated using a key-value store backend.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/user-guide/gaffer-basics/what-is-gaffer.md#2025-04-23_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart TD\n    subgraph Graph Query\n        G{{Schema}} -.-> F\n        F([Query]) ---> H(Gaffer)\n        J(key-value store) <--> H\n        H --> K([Result])\n    end\n    subgraph Data Input\n        A(Data)-->B{{Schema}}\n        B --> C(Gaffer)\n        C --> D(key-value store)\n    end\n```\n\n----------------------------------------\n\nTITLE: Displaying Gaffer Operations Table in Markdown\nDESCRIPTION: A markdown table listing Gaffer operations, categorized by type. Each row contains the operation name and its corresponding type.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/operations.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nOperation | Type\n------------- | -------------\n[`operation.impl.add.AddElements`](core.md#addelements) | Core\n[`operation.impl.delete.DeleteElements`](core.md#deleteelements) | Core\n[`operation.impl.get.GetAdjacentIds`](get.md#getadjacentids) | Get\n[`operation.impl.get.GetAllElements`](get.md#getallelements) | Get\n[`operation.impl.get.GetElements`](get.md#getelements) | Get\n[`operation.impl.get.GetFromEndpoint`](misc.md#getfromendpoint) | Get\n[`operation.impl.GetWalks`](get.md#getwalks) | Get\n[`operation.impl.Count`](core.md#count) | Core\n[`operation.impl.CountGroups`](core.md#countgroups) | Core\n`operation.impl.DiscardOutput` | Core\n[`operation.impl.join.Join`](join.md) | Core\n[`operation.impl.compare.Min`](core.md#min) | Core\n[`operation.impl.compare.Max`](core.md#max) | Core\n[`operation.impl.compare.Sort`](core.md#sort) | Core\n[`operation.impl.function.Aggregate`](core.md#aggregate) | Core\n[`operation.impl.function.Filter`](core.md#filter) | Core\n[`operation.impl.function.Transform`](core.md#transform) | Core\n[`operation.impl.GetVariable`](core.md#getvariable)  | Core\n[`operation.impl.GetVariables`](core.md#getvariables) |  Core\n[`operation.impl.get.GetGraphCreatedTime`](core.md#getgraphcreatedtime) | Core\n[`operation.impl.Limit`](core.md#limit) | Core\n`operation.impl.Map` | Core\n[`operation.impl.Reduce`](core.md#reduce) | Core\n`operation.impl.SampleElementsForSplitPoints` | Core\n[`operation.impl.SetVariable`](core.md#setvariable) | Core\n`operation.impl.SplitStoreFromFile` | Core\n`operation.impl.SplitStoreFromIterable` | Core\n`operation.impl.Validate` | Core\n[`operation.impl.If`](flow.md#if) | Flow\n[`operation.impl.ForEach`](flow.md#foreach) | Flow\n[`operation.impl.While`](flow.md#while) | Flow\n[`operation.impl.output.ToArray`](core.md#toarray) | Output\n[`operation.impl.output.ToCsv`](core.md#tocsv) | Output\n[`operation.impl.output.ToEntitySeeds`](core.md#toentityseeds) | Output\n[`operation.impl.output.ToList`](core.md#tolist) | Output\n[`operation.impl.output.ToMap`](core.md#tomap) | Output\n[`operation.impl.output.ToSet`](core.md#toset) | Output\n[`operation.impl.output.ToSingletonList`](core.md#tosingletonlist) | Output\n[`operation.impl.output.ToStream`](core.md#tostream) | Output\n[`operation.impl.output.ToVertices`](core.md#tovertices) | Output\n`operation.OperationChain` | Chain\n`operation.OperationChainDAO` | Chain\n[`operation.impl.ScoreOperationChain`](misc.md#scoreoperationchain) | Chain\n`operation.impl.ValidateOperationChain` | Chain\n`operation.impl.add.ImportCsv` | Import\n[`operation.export.graph.ExportToOtherAuthorisedGraph`](export.md#exporttootherauthorisedgraph) | Export\n[`operation.export.graph.ExportToOtherGraph`](export.md#exporttoothergraph) | Export\n`operation.impl.export.GetExports` | Export\n`operation.impl.export.localfile.ExportToLocalFile` | Export\n`operation.impl.export.localfile.ImportFromLocalFile` | Export\n[`operation.impl.export.resultcache.ExportToGafferResultCache`](export.md#exporttogafferresultcache) | Export\n[`operation.impl.export.resultcache.GetGafferResultCacheExport`](export.md#getgafferresultcacheexport) | Export\n[`operation.impl.export.set.ExportToSet`](export.md#exporttoset) | Export\n[`operation.impl.export.set.GetSetExport`](export.md#getsetexport) | Export\n[`operation.impl.job.CancelScheduledJob`](job.md#cancelscheduledjob) | Job\n[`operation.impl.job.GetAllJobDetails`](job.md#getalljobdetails) | Job\n[`operation.impl.job.GetJobDetails`](job.md#getjobdetails) | Job\n[`operation.impl.job.GetJobResults`](job.md#getjobresults) | Job\n[`operation.impl.add.AddElementsFromFile`](flink.md#addelementsfromfile) | Flink\n[`operation.impl.add.AddElementsFromKafka`](flink.md#addelementsfromkafka) | Flink\n[`operation.impl.add.AddElementsFromSocket`](flink.md#addelementsfromsocket) | Flink\n[`operation.impl.generate.GenerateElements`](generate.md#generateelements) | Generate\n[`operation.impl.generate.GenerateObjects`](generate.md#generateobjects) | Generate\n`operation.impl.GenerateSplitPointsFromSample` | Generate\n[`named.operation.AddNamedOperation`](named.md#addnamedoperation) | Named\n[`named.operation.DeleteNamedOperation`](named.md#deletenamedoperation) | Named\n[`named.operation.GetAllNamedOperations`](named.md#getallnamedoperations) | Named\n[`named.operation.NamedOperation`](named.md#namedoperation) | Named\n[`named.view.AddNamedView`](named.md#addnamedview) | Named\n[`named.view.DeleteNamedView`](named.md#deletenamedview) | Named\n[`named.view.GetAllNamedViews`](named.md#getallnamedviews) | Named\n[`store.operation.DeleteAllData`](core.md#deletealldata) | Core\n[`store.operation.GetSchema`](core.md#getschema) | Store\n[`store.operation.GetTraits`](core.md#gettraits) | Store\n[`store.operation.HasTrait`](core.md#hastrait) | Store\n`store.operation.add.AddSchemaToLibrary` | Store\n`store.operation.add.AddStorePropertiesToLibrary` | Store\n`federatedstore.operation.AddGraph` | Federated\n`federatedstore.operation.AddGraphWithHooks` | Federated\n`federatedstore.operation.ChangeGraphAccess` | Federated\n`federatedstore.operation.ChangeGraphId` | Federated\n[`federatedstore.operation.FederatedOperation`](federated-operation.md#federated-operation) | Federated\n`federatedstore.operation.GetAllGraphIds` | Federated\n`federatedstore.operation.GetAllGraphInfo` | Federated\n`federatedstore.operation.RemoveGraph` | Federated\n`federatedstore.operation.RemoveGraphAndDeleteAllData` | Federated\n[`proxystore.operation.GetProxyProperties`](proxy.md#getproxyproperties) | Proxy\n[`proxystore.operation.GetProxyUrl`](proxy.md#getproxyurl) | Proxy\n`accumulostore.operation.hdfs.operation.ImportAccumuloKeyValueFiles` | Accumulo\n[<s>`accumulostore.operation.impl.GetElementsBetweenSets`</s>](accumulo.md#getelementsbetweensets) | Accumulo\n[`accumulostore.operation.impl.GetElementsBetweenSetsPairs`](accumulo.md#getelementsbetweensetspairs) | Accumulo\n[`accumulostore.operation.impl.GetElementsInRanges`](accumulo.md#getelementsinranges) | Accumulo\n[`accumulostore.operation.impl.GetElementsWithinSet`](accumulo.md#getelementswithinset) | Accumulo\n`accumulostore.operation.impl.SummariseGroupOverRanges` | Accumulo\n[`hdfs.operation.AddElementsFromHdfs`](hdfs.md#addelementsfromhdfs) | HDFS\n`hdfs.operation.SampleDataForSplitPoints` | HDFS\n`mapstore.operation.CountAllElementsDefaultView` | Map\n[`spark.operation.dataframe.GetDataFrameOfElements`](spark.md#getdataframeofelements) | Spark\n[`spark.operation.graphframe.GetGraphFrameOfElements`](spark.md#getgraphframeofelements) | Spark\n[`spark.operation.javardd.GetJavaRDDOfAllElements`](spark.md#getjavarddofallelements) | Spark\n[`spark.operation.javardd.GetJavaRDDOfElements`](spark.md#getjavarddofelements) | Spark\n`spark.operation.javardd.ImportJavaRDDOfElements` | Spark\n`spark.operation.javardd.SplitStoreFromJavaRDDOfElements` | Spark\n`spark.operation.scalardd.GetRDDOfAllElements` | Spark\n`spark.operation.scalardd.GetRDDOfElements` | Spark\n`spark.operation.scalardd.ImportRDDOfElements` | Spark\n`spark.operation.scalardd.SplitStoreFromRDDOfElements` | Spark\n`sparkaccumulo.operation.javardd.GetJavaRDDOfElementsInRanges` | Spark\n`sparkaccumulo.operation.javardd.ImportKeyValueJavaPairRDDToAccumulo` | Spark\n`sparkaccumulo.operation.scalardd.GetRDDOfElementsInRanges` | Spark\n`sparkaccumulo.operation.scalardd.ImportKeyValuePairRDDToAccumulo` | Spark\n```\n\n----------------------------------------\n\nTITLE: Basic Vertex Traversal Query in Gremlin Python\nDESCRIPTION: Demonstrates how to traverse from a vertex 'John' through 'Created' edges using Gremlin syntax. The query retrieves all software elements that John has created.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/user-guide/query/gremlin/gremlin.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ng.V(\"John\").out(\"Created\").element_map().to_list()\n```\n\n----------------------------------------\n\nTITLE: Introduction to Gaffer REST API Endpoints\nDESCRIPTION: Documentation showing key API concepts including GET and POST endpoints, particularly focusing on the /graph/operations/execute endpoint for running queries. Explains how JSON is used as the primary data interchange format.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/user-guide/apis/rest-api.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Using the REST API\n\nThese sections will cover the usage of the Gaffer REST API to perform queries\nand operations on a graph. This guide should cover a lot of the use cases a user\nmay face; however please refer to the [reference guide](../../reference/intro.md)\nfor a full list of what is possible.\n\n## What is the REST API?\n\nWhen a graph is deployed, a REST (or RESTful) API will be available at a\npredefined address. This provides an application programming interface (API)\nthat a user or computer can interact with to send and receive data between them\nand the application.\n\nIn Gaffer, the REST API consists of various predefined HTTP requests known as\nendpoints that can be used to interact with a running graph instance. These\nendpoints are accessed either by sending a crafted HTTP request to them e.g.\nwith a tool like [`curl`](https://curl.se/docs/httpscripting.html) or more\ncommonly by the provided [Swagger UI](https://swagger.io/).\n```\n\n----------------------------------------\n\nTITLE: Converting Elements to Stream with ToStream in JSON\nDESCRIPTION: JSON representation of an operation chain that gets elements from entity seeds and converts the results to a Stream. Includes the GetElements operation with EntitySeed inputs followed by the ToStream operation.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/core.md#2025-04-23_snippet_71\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"OperationChain\",\n  \"operations\" : [ {\n    \"class\" : \"GetElements\",\n    \"input\" : [ {\n      \"class\" : \"EntitySeed\",\n      \"vertex\" : 1\n    }, {\n      \"class\" : \"EntitySeed\",\n      \"vertex\" : 2\n    } ]\n  }, {\n    \"class\" : \"ToStream\"\n  } ]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing LDAP User Authentication in Gaffer REST API\nDESCRIPTION: Example implementation of a custom UserFactory that extends AbstractUserFactory to authenticate users via LDAP. The factory extracts user credentials from the authorization header and creates a User object with the appropriate userId, operation authorizations, and data authorizations.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/administration-guide/security/user-control.md#2025-04-23_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic class LdapUserFactory extends AbstractUserFactory {\n\n    public User createUser() {\n        final String authHeaderValue = this.httpHeaders.get(HttpHeaders.AUTHORIZATION); // add logic to fetch userId\n        final String userId = null; // extract from authHeaderValue\n        final List<String> opAuths = null; // fetch op auths for userId\n        final List<String> dataAuths = null; // fetch op auths for userId\n\n        // Create and return the Gaffer user\n        return new User.Builder()\n                .userId(userId)\n                .opAuths(opAuths)\n                .dataAuths(dataAuths)\n                .build();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Duplicate Edges in Corner Cases using Python\nDESCRIPTION: This Python code demonstrates how to use Gaffer's GetElements operation to potentially retrieve duplicate edges in corner cases, using both EntitySeed and EdgeSeed in the input.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/get.md#2025-04-23_snippet_27\n\nLANGUAGE: python\nCODE:\n```\ng.GetElements(\ninput=[\n    g.EntitySeed(\n    vertex=3\n    ),\n    g.EdgeSeed(\n    source=2,\n    destination=3,\n    directed_type=\"EITHER\",\n    matched_vertex=\"SOURCE\"\n    )\n]\n)\n```\n\n----------------------------------------\n\nTITLE: Running Gaffer REST Docker Container\nDESCRIPTION: Command to run the Gaffer REST Docker container, mapping port 8080 to the host machine.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/administration-guide/gaffer-deployment/quickstart.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -p 8080:8080 gchq/gaffer-rest:2.0.0\n```\n\n----------------------------------------\n\nTITLE: Advanced Query-Time Aggregation in Gaffer (Java, JSON, Python)\nDESCRIPTION: Demonstrates advanced query-time aggregation in Gaffer, overriding default aggregation logic to find the minimum 'added' value for John's commits within a date range.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/user-guide/query/gaffer-syntax/filtering.md#2025-04-23_snippet_24\n\nLANGUAGE: java\nCODE:\n```\nfinal GetAllElements edgesSummarisedInTimeWindowWithMinCountOperation = new GetAllElements.Builder()\n    .view(new View.Builder()\n        .edge(\"Commit\", new ViewElementDefinition.Builder()\n            .preAggregationFilter(new ElementFilter.Builder()\n                .execute(new InDateRange.Builder()\n                    .start(\"2024/05/01\")\n                    .end(\"2024/05/05\")\n                    .startInclusive(true)\n                    .endInclusive(false)\n                .build()))\n            .groupBy()\n            .aggregator(new ElementAggregator.Builder()\n                    .select(\"added\")\n                    .execute(new Min())\n                    .build())\n            .build())\n    .build())\n.build();\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"class\" : \"GetAllElements\",\n    \"view\" : {\n        \"edges\" : {\n            \"Commit\" : {\n                \"preAggregationFilterFunctions\" : [ {\n                    \"selection\" : [ \"date\" ],\n                    \"predicate\" : {\n                        \"class\" : \"InDateRange\",\n                        \"start\" : \"2024/05/01\",\n                        \"end\" : \"2024/05/05\",\n                        \"startInclusive\": true,\n                        \"endInclusive\": false\n                    }\n                }],\n                \"groupBy\" : [ ],\n                \"aggregator\" : {\n                    \"operators\" : [ {\n                        \"selection\" : [ \"added\" ],\n                        \"binaryOperator\" : {\n                        \"class\" : \"uk.gov.gchq.koryphe.impl.binaryoperator.Min\"\n                        }\n                    } ]\n                }\n            }\n        }\n    }\n}\n```\n\nLANGUAGE: python\nCODE:\n```\n elements = gc.execute_operation(\n    operation = g.GetElements(\n        input = [g.EntitySeed(vertex = \"John\")],\n        view = g.View(\n            edges = [\n                g.ElementDefinition(\n                    group = 'Commit',\n                    group_by = [],\n                    pre_aggregation_filter_functions=[\n                        g.PredicateContext(\n                            predicate=g.Or(\n                                predicates=[\n                                    g.InDateRange(\n                                        start=\"2024/05/01\",\n                                        end=\"2024/05/05\",\n                                        start_inclusive=True,\n                                        end_inclusive=False\n                                    )\n                                ]\n\n\n\n```\n\n----------------------------------------\n\nTITLE: Operation Chain with Count Example\nDESCRIPTION: Shows how to chain GetElements and Count operations to count the number of entities returned from a query across different languages.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/user-guide/query/gaffer-syntax/operations.md#2025-04-23_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nOperationChain<Long> countElements = new OperationChain.Builder()\n    .first(new GetElements.Builder().input(new EntitySeed(\"v1\")).build())\n    .then(new Count<>())\n    .build();\n\nLong result = graph.execute(countElements, user);\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"class\" : \"OperationChain\",\n    \"operations\" : [\n        {\n            \"class\": \"GetElements\",\n            \"input\": [\n                {\n                    \"class\": \"EntitySeed\",\n                    \"vertex\": \"v1\"\n                }\n            ]\n        },\n        {\n            \"class\" : \"Count\"\n        }\n    ]\n}\n```\n\nLANGUAGE: python\nCODE:\n```\ncount = gc.execute_operation_chain(\n    operation_chain=g.OperationChain(\n        operations=[\n            g.GetElements(input=[g.EntitySeed(vertex=\"v1\")]),\n            g.Count()\n        ]\n    )\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing a Max Aggregation Function\nDESCRIPTION: Java implementation of a Max aggregation function that extends KorypheBinaryOperator to find the maximum value between two Comparable objects.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/development-guide/extending-gaffer.md#2025-04-23_snippet_3\n\nLANGUAGE: java\nCODE:\n```\n@Since(\"1.0.0\")\n@Summary(\"Calculates the max value\")\npublic class Max extends KorypheBinaryOperator<Comparable> {\n    @Override\n    protected Comparable _apply(final Comparable a, final Comparable b) {\n        return a.compareTo(b) >= 0 ? a : b;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Gaffer Operation Chain\nDESCRIPTION: Shows how to execute multiple operations in sequence using an operation chain. This example gets all elements and then counts them.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/user-guide/apis/python-api.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ncount = gc.execute_operation_chain(\n    operation_chain=g.OperationChain(\n        operations=[\n            g.GetAllElements(),\n            g.Count()\n        ]\n    )\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Graph Instance in Java\nDESCRIPTION: Example showing how to create a basic Graph object using Graph.Builder with required configuration including graphId, schemas and store properties.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/development-guide/project-structure/components/graph.md#2025-04-23_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nGraph graph = new Graph.Builder()\n      .config(new GraphConfig.Builder()\n            .graphId(\"uniqueNameOfYourGraph\")\n            .build())\n      .addSchemas(schemas)\n      .storeProperties(storeProperties)\n      .build();\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Elements Schema in Gaffer\nDESCRIPTION: Demonstrates the basic structure of a Gaffer elements schema, showing how to define edges and entities with their required fields and properties. The schema includes definitions for both directed edges and nodes with associated types and properties.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/user-guide/schema.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"edges\": {\n        \"Edge\": {\n            \"source\": \"type\",\n            \"destination\": \"type\",\n            \"directed\": \"true\",\n            \"properties\": {\n                \"property\": \"type\"\n            }\n        }\n    },\n    \"entities\": {\n        \"Node\": {\n            \"description\": \"A Node\",\n            \"vertex\": \"type\",\n            \"properties\": {\n                \"property\": \"type\"\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Elements Schema for Gaffer Graph\nDESCRIPTION: Example Elements schema from the Gaffer Road Traffic example graph, demonstrating how to define edges and entities with their properties, types, and groupBy fields. It shows two edge types (RoadUse and RoadHasJunction) and one entity type (Cardinality).\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/administration-guide/gaffer-config/schema.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"edges\": {\n    \"RoadUse\": {\n      \"description\": \"A directed edge representing vehicles moving from junction A to junction B.\",\n      \"source\": \"junction\",\n      \"destination\": \"junction\",\n      \"directed\": \"true\",\n      \"properties\": {\n        \"startDate\": \"date.earliest\",\n        \"endDate\": \"date.latest\",\n        \"count\": \"count.long\"\n      },\n      \"groupBy\": [\n        \"startDate\",\n        \"endDate\"\n      ]\n    },\n    \"RoadHasJunction\": {\n      \"description\": \"A directed edge from each road to all the junctions on that road.\",\n      \"source\": \"road\",\n      \"destination\": \"junction\",\n      \"directed\": \"true\"\n    }\n  },\n  \"entities\": {\n    \"Cardinality\": {\n      \"description\": \"An entity that is added to every vertex representing the connectivity of the vertex.\",\n      \"vertex\": \"anyVertex\",\n      \"properties\": {\n        \"edgeGroup\": \"set\",\n        \"hllSketch\": \"hllSketch\",\n        \"count\": \"count.long\"\n      },\n      \"groupBy\": [\n        \"edgeGroup\"\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Properties in Gaffer Query (JSON)\nDESCRIPTION: This JSON snippet shows the structure of a GetElements operation with a View that filters properties. It includes only the 'hours' property from 'Created' edges and excludes the 'age' property from 'Person' entities.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/user-guide/query/gaffer-syntax/filtering.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"class\": \"GetElements\",\n    \"input\": [\n        {\n            \"class\": \"EntitySeed\",\n            \"vertex\": \"John\"\n        }\n    ],\n    \"view\": {\n        \"edges\": {\n            \"Created\": {\n                \"properties\" : [ \"hours\" ]\n            }\n        },\n        \"entities\" : {\n            \"Person\" : {\n                \"excludeProperties\" : [ \"age\" ]\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Types Schema in Gaffer\nDESCRIPTION: Shows how to define custom types in Gaffer's type schema, including basic Java types for strings and integers. The schema demonstrates type definitions with descriptions and corresponding Java classes.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/user-guide/schema.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"types\": {\n        \"type.string\": {\n            \"description\": \"A basic type to hold the string value of an element\",\n            \"class\": \"java.lang.String\"\n        },\n        \"type.int\": {\n            \"description\": \"A basic type to hold the int value of an element\",\n            \"class\": \"java.lang.Integer\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Establishing Gremlin Connection\nDESCRIPTION: Sets up a connection to the Gremlin server running on localhost and creates a traversal reference.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/user-guide/apis/gremlin-api.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ng = traversal().with_remote(DriverRemoteConnection('ws://localhost:8080/gremlin', 'g', message_serializer=GraphSONSerializersV3d0()))\n```\n\n----------------------------------------\n\nTITLE: Adding Elements to Gaffer Graph\nDESCRIPTION: Demonstrates how to add a new entity '6' and an edge connecting it to '5' using the AddElements operation. The example shows implementations in Java, JSON, and Python.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/core.md#2025-04-23_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nnew AddElements.Builder()\n            .input(new Entity.Builder()\n                            .group(\"entity\")\n                            .vertex(6)\n                            .property(\"count\", 1)\n                            .build(),\n                    new Edge.Builder()\n                            .group(\"edge\")\n                            .source(5).dest(6).directed(true)\n                            .property(\"count\", 1)\n                            .build())\n            .build();\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"AddElements\",\n  \"input\" : [ {\n    \"class\" : \"Entity\",\n    \"group\" : \"entity\",\n    \"vertex\" : 6,\n    \"properties\" : {\n      \"count\" : 1\n    }\n  }, {\n    \"class\" : \"Edge\",\n    \"group\" : \"edge\",\n    \"source\" : 5,\n    \"destination\" : 6,\n    \"directed\" : true,\n    \"properties\" : {\n      \"count\" : 1\n    }\n  } ],\n  \"skipInvalidElements\" : false,\n  \"validate\" : true\n}\n```\n\nLANGUAGE: python\nCODE:\n```\ng.AddElements(\n  input=[\n    g.Entity(\n      group=\"entity\",\n      properties={'count': 1},\n      vertex=6\n    ),\n    g.Edge(\n      group=\"edge\",\n      properties={'count': 1},\n      source=5,\n      destination=6,\n      directed=True\n    )\n  ],\n  skip_invalid_elements=False,\n  validate=True\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring ProxyStore Graph Connection in Java\nDESCRIPTION: Example showing how to configure a Graph object using ProxyStore.Builder() to connect to a Gaffer REST endpoint. The configuration specifies the host, port, and context root for the connection.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/user-guide/apis/java-api.md#2025-04-23_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nGraph graph = new Graph.Builder()\n    .store(new ProxyStore.Builder()\n            .graphId(uniqueNameOfYourGraph)\n            .host(\"localhost\")\n            .port(8080)\n            .contextRoot(\"rest\")\n            .build())\n    .build();\n```\n\n----------------------------------------\n\nTITLE: GetElements Operation Implementation\nDESCRIPTION: Demonstrates how to use the GetElements operation to retrieve entities and edges based on an EntitySeed vertex ID across different languages.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/user-guide/query/gaffer-syntax/operations.md#2025-04-23_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nfinal GetElements operation = new GetElements.Builder()\n    .input(new EntitySeed(\"v1\"))\n    .build();\n\ngraph.execute(operation, user);\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"class\": \"GetElements\",\n    \"input\": [\n        {\n            \"class\": \"EntitySeed\",\n            \"vertex\": \"v1\"\n        }\n    ]\n}\n```\n\nLANGUAGE: python\nCODE:\n```\nelements = gc.execute_operation(\n    operation=g.GetElements(input=[g.EntitySeed(vertex=\"v1\")])\n)\n```\n\n----------------------------------------\n\nTITLE: Full Schema Example in Gaffer (JSON)\nDESCRIPTION: A comprehensive example of a full Gaffer schema, including edge and entity definitions along with their properties, group-by clauses, and validation functions. It demonstrates how parent elements are merged into children for performance optimization.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/administration-guide/gaffer-config/schema.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"edges\" : {\n    \"RoadUse\" : {\n      \"description\" : \"A directed edge representing vehicles moving from junction A to junction B.\",\n      \"source\" : \"junction\",\n      \"destination\" : \"junction\",\n      \"directed\" : \"true\",\n      \"properties\" : {\n        \"startDate\" : \"date.earliest\",\n        \"endDate\" : \"date.latest\",\n        \"count\" : \"count.long\"\n      },\n      \"groupBy\" : [ \"startDate\", \"endDate\" ],\n      \"aggregateFunctions\" : [ {\n        \"selection\" : [ \"startDate\", \"endDate\" ],\n        \"binaryOperator\" : {\n          \"class\" : \"uk.gov.gchq.gaffer.doc.dev.aggregator.ExampleTuple2BinaryOperator\"\n        }\n      } ],\n      \"validateFunctions\" : [ {\n        \"selection\" : [ \"startDate\", \"endDate\" ],\n        \"predicate\" : {\n          \"class\" : \"uk.gov.gchq.koryphe.impl.predicate.IsXLessThanY\"\n        }\n      } ]\n    },\n    \"RoadHasJunction\" : {\n      \"description\" : \"A directed edge from each road to all the junctions on that road.\",\n      \"source\" : \"road\",\n      \"destination\" : \"junction\",\n      \"directed\" : \"true\"\n    }\n  },\n  \"entities\" : {\n    \"Cardinality\" : {\n      \"description\" : \"An entity that is added to every vertex representing the connectivity of the vertex.\",\n      \"vertex\" : \"anyVertex\",\n      \"properties\" : {\n        \"edgeGroup\" : \"set\",\n        \"hllSketch\" : \"hllSketch\",\n        \"count\" : \"count.long\"\n      },\n      \"groupBy\" : [ \"edgeGroup\" ]\n    }\n  },\n  \"types\" : {\n    \"junction\" : {\n      \"description\" : \"A road junction represented by a String.\",\n      \"class\" : \"java.lang.String\"\n    },\n    \"road\" : {\n      \"description\" : \"A road represented by a String.\",\n      \"class\" : \"java.lang.String\"\n    },\n    \"anyVertex\" : {\n      \"description\" : \"An String vertex - used for cardinalities\",\n      \"class\" : \"java.lang.String\"\n    },\n    \"count.long\" : {\n      \"description\" : \"A long count that must be greater than or equal to 0.\",\n      \"class\" : \"java.lang.Long\",\n      \"aggregateFunction\" : {\n        \"class\" : \"uk.gov.gchq.koryphe.impl.binaryoperator.Sum\"\n      },\n      \"validateFunctions\" : [ {\n        \"class\" : \"uk.gov.gchq.koryphe.impl.predicate.IsMoreThan\",\n        \"orEqualTo\" : true,\n        \"value\" : {\n          \"java.lang.Long\" : 0\n        }\n      } ]\n    },\n    \"true\" : {\n      \"description\" : \"A simple boolean that must always be true.\",\n      \"class\" : \"java.lang.Boolean\",\n      \"validateFunctions\" : [ {\n        \"class\" : \"uk.gov.gchq.koryphe.impl.predicate.IsTrue\"\n      } ]\n    },\n    \"date.earliest\" : {\n      \"description\" : \"A Date that when aggregated together will be the earliest date.\",\n      \"class\" : \"java.util.Date\",\n      \"aggregateFunction\" : {\n        \"class\" : \"uk.gov.gchq.koryphe.impl.binaryoperator.Min\"\n      },\n      \"validateFunctions\" : [ {\n        \"class\" : \"uk.gov.gchq.koryphe.impl.predicate.Exists\"\n      } ]\n    },\n    \"date.latest\" : {\n      \"description\" : \"A Date that when aggregated together will be the latest date.\",\n      \"class\" : \"java.util.Date\",\n      \"aggregateFunction\" : {\n        \"class\" : \"uk.gov.gchq.koryphe.impl.binaryoperator.Max\"\n      },\n      \"validateFunctions\" : [ {\n        \"class\" : \"uk.gov.gchq.koryphe.impl.predicate.Exists\"\n      } ]\n    },\n    \"set\" : {\n      \"class\" : \"java.util.TreeSet\",\n      \"aggregateFunction\" : {\n        \"class\" : \"uk.gov.gchq.koryphe.impl.binaryoperator.CollectionConcat\"\n      }\n    },\n    \"hllSketch\" : {\n      \"class\" : \"org.apache.datasketches.hll.HllSketch\",\n      \"aggregateFunction\" : {\n        \"class\" : \"uk.gov.gchq.gaffer.sketches.datasketches.cardinality.binaryoperator.HllSketchAggregator\"\n      },\n      \"serialiser\" : {\n        \"class\" : \"uk.gov.gchq.gaffer.sketches.datasketches.cardinality.serialisation.HllSketchSerialiser\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Edges with Visibility Properties in Gaffer (Java)\nDESCRIPTION: Java code for adding edges with visibility properties to a Gaffer graph. The example creates two RoadHasJunction edges with different visibility values ('private' and 'public') to demonstrate visibility-based access control.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/administration-guide/security/security-guide.md#2025-04-23_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nnew AddElements.Builder()\n            .input(new Edge.Builder()\n              .group(\"RoadHasJunction\")\n              .source(\"1\").dest(\"2\").directed(true)\n              .property(\"count\", 1)\n              .property(\"visibility\", \"private\")\n              .build(),\n              new Edge.Builder()\n              .group(\"RoadHasJunction\")\n              .source(\"1\").dest(\"2\").directed(true)\n              .property(\"count\", 2)\n              .property(\"visibility\", \"public\")\n              .build())\n            .build();\n```\n\n----------------------------------------\n\nTITLE: Retrieving Duplicate Edges in Corner Cases using JSON\nDESCRIPTION: This JSON representation of the GetElements operation shows how to retrieve potentially duplicate edges using both EntitySeed and EdgeSeed in the input, demonstrating a corner case in Gaffer's Accumulo store.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/get.md#2025-04-23_snippet_26\n\nLANGUAGE: json\nCODE:\n```\n{\n\"class\" : \"GetElements\",\n\"input\" : [ {\n    \"class\" : \"EntitySeed\",\n    \"vertex\" : 3\n}, {\n    \"class\" : \"EdgeSeed\",\n    \"source\" : 2,\n    \"destination\" : 3,\n    \"matchedVertex\" : \"SOURCE\",\n    \"directedType\" : \"EITHER\"\n} ]\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Filtered Walks in Gaffer Graph (Java)\nDESCRIPTION: Demonstrates using GetWalks to retrieve paths of length 2 starting from vertex 1, with pre-aggregation filters on edge properties. The example shows how to filter edges based on a 'count' property.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/get.md#2025-04-23_snippet_42\n\nLANGUAGE: java\nCODE:\n```\nfinal GetWalks getWalks = new GetWalks.Builder()\n        .operations(new GetElements.Builder()\n                        .view(new View.Builder().edge(\"edge\", new ViewElementDefinition.Builder()\n                                .preAggregationFilter(new ElementFilter.Builder()\n                                        .select(\"count\")\n                                        .execute(new IsMoreThan(3))\n                                        .build())\n                                .build())\n                                .build())\n                        .inOutType(SeededGraphFilters.IncludeIncomingOutgoingType.OUTGOING)\n                        .build(),\n                new GetElements.Builder()\n                        .view(new View.Builder().edge(\"edge1\", new ViewElementDefinition.Builder()\n                                .preAggregationFilter(new ElementFilter.Builder()\n                                        .select(\"count\")\n                                        .execute(new IsMoreThan(8))\n                                        .build())\n                                .build())\n                                .build())\n                        .inOutType(SeededGraphFilters.IncludeIncomingOutgoingType.INCOMING)\n                        .build())\n        .input(new EntitySeed(1))\n        .build();\n```\n\n----------------------------------------\n\nTITLE: Extended Property Types Schema in Gaffer\nDESCRIPTION: Enhanced types schema including property types for String, Integer, and Float values alongside entity ID types.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/development-guide/example-deployment/writing-the-schema.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"types\": {\n        \"id.person.string\": {\n            \"description\": \"A basic type to hold the string id of a person entity\",\n            \"class\": \"java.lang.String\"\n        },\n        \"id.software.string\": {\n            \"description\": \"A basic type to hold the string id of a person entity\",\n            \"class\": \"java.lang.String\"\n        },\n        \"property.string\": {\n            \"description\": \"A type to hold string properties of entities\",\n            \"class\": \"java.lang.String\"\n        },\n        \"property.integer\": {\n            \"description\": \"A basic type to hold integer properties of entities\",\n            \"class\": \"java.lang.Integer\"\n        },\n        \"property.float\": {\n            \"description\": \"A basic type to hold float properties of entities\",\n            \"class\": \"java.lang.Float\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Single Gaffer Operation\nDESCRIPTION: Demonstrates how to execute a single operation using the execute_operation() function to retrieve all elements from the graph.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/user-guide/apis/python-api.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nelements = gc.execute_operation(\n    operation=g.GetAllElements()\n)\n```\n\n----------------------------------------\n\nTITLE: Python OpenCypher Query Implementation\nDESCRIPTION: Demonstrates how to execute OpenCypher queries using Gafferpy, the Python client for Gaffer. Shows connection setup and query execution.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/user-guide/apis/opencypher.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom gafferpy import gaffer_connector\n\ngc = gaffer_connector.GafferConnector(\"http://localhost:8080/rest\")\n\n# Execute and return cypher\ncypher_result = gc.execute_cypher(\"MATCH (n) WHERE ID(n) = '1' RETURN n\")\n```\n\n----------------------------------------\n\nTITLE: Implementing Query-time Aggregation in Gaffer using Java\nDESCRIPTION: Java code snippet that demonstrates how to set up query-time aggregation in Gaffer. It creates a GetElements query that selects edges from a Person node and applies the Sum aggregator to the 'added' and 'removed' properties, effectively combining multiple edges into one with summed properties.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/user-guide/query/gaffer-syntax/filtering.md#2025-04-23_snippet_17\n\nLANGUAGE: java\nCODE:\n```\nfinal GetElements getEdgesAggregated = new GetElements.Builder()\n    .input(new EntitySeed(\"John\"))\n    .view(new View.Builder()\n            .edge(\"Commit\", new ViewElementDefinition.Builder()\n                    .groupBy()\n                    .aggregator(new ElementAggregator.Builder()\n                        .select([\"added\", \"removed\"])\n                        .execute(new Sum())\n                        .build()))\n            .build())\n    .build();\n\ngraph.execute(getEdgesAggregated, user);\n```\n\n----------------------------------------\n\nTITLE: Implementing Named Operation for Vehicle Traffic Analysis in Java\nDESCRIPTION: Java implementation of a named operation that analyzes junction usage by vehicle type. The operation chain includes multiple steps to traverse from regions to junctions, filter by date range, and sort results. Includes parameterization for vehicle type, result limit, and CSV output format.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/administration-guide/named-operations.md#2025-04-23_snippet_18\n\nLANGUAGE: java\nCODE:\n```\nfinal String fullExampleOpChain = \"{\n  \\\"operations\\\" : [ {\n    \\\"class\\\" : \\\"uk.gov.gchq.gaffer.operation.impl.get.GetAdjacentIds\\\",\n    \\\"view\\\" : {\n      \\\"edges\\\" : {\n        \\\"RegionContainsLocation\\\" : { }\n      }\n    }\n  }, {\n    \\\"class\\\" : \\\"uk.gov.gchq.gaffer.operation.impl.get.GetAdjacentIds\\\",\n    \\\"view\\\" : {\n      \\\"edges\\\" : {\n        \\\"LocationContainsRoad\\\" : { }\n      }\n    }\n  }, {\n    \\\"class\\\" : \\\"uk.gov.gchq.gaffer.operation.impl.output.ToSet\\\"\n  }, {\n    \\\"class\\\" : \\\"uk.gov.gchq.gaffer.operation.impl.get.GetAdjacentIds\\\",\n    \\\"view\\\" : {\n      \\\"edges\\\" : {\n        \\\"RoadHasJunction\\\" : { }\n      }\n    }\n  }, {\n    \\\"class\\\" : \\\"uk.gov.gchq.gaffer.operation.impl.get.GetElements\\\",\n    \\\"view\\\" : {\n      \\\"entities\\\" : {\n        \\\"JunctionUse\\\" : {\n          \\\"properties\\\" : [\\\"${vehicle}\\\"],\n          \\\"preAggregationFilterFunctions\\\" : [ {\n            \\\"selection\\\" : [ \\\"startDate\\\", \\\"endDate\\\" ],\n            \\\"predicate\\\" : {\n              \\\"class\\\" : \\\"uk.gov.gchq.koryphe.impl.predicate.range.InDateRangeDual\\\",\n              \\\"start\\\" : \\\"2000/01/01\\\",\n              \\\"end\\\" : \\\"2001/01/01\\\"\n            }\n          } ],\n          \\\"transientProperties\\\" : {\n            \\\"${vehicle}\\\" : \\\"Long\\\"\n          },\n          \\\"transformFunctions\\\" : [ {\n            \\\"selection\\\" : [ \\\"countByVehicleType\\\" ],\n            \\\"function\\\" : {\n              \\\"class\\\" : \\\"uk.gov.gchq.gaffer.types.function.FreqMapExtractor\\\",\n              \\\"key\\\" : \\\"${vehicle}\\\"\n            },\n            \\\"projection\\\" : [ \\\"${vehicle}\\\" ]\n          } ]\n        }\n      },\n      \\\"globalElements\\\" : [ {\n        \\\"groupBy\\\" : [ ]\n      } ]\n    },\n    \\\"includeIncomingOutGoing\\\" : \\\"OUTGOING\\\"\n  }, {\n    \\\"class\\\" : \\\"uk.gov.gchq.gaffer.operation.impl.compare.Sort\\\",\n    \\\"comparators\\\" : [ {\n      \\\"class\\\" : \\\"uk.gov.gchq.gaffer.data.element.comparison.ElementPropertyComparator\\\",\n      \\\"property\\\" : \\\"${vehicle}\\\",\n      \\\"groups\\\" : [ \\\"JunctionUse\\\" ],\n      \\\"reversed\\\" : true\n    } ],\n    \\\"deduplicate\\\" : true,\n    \\\"resultLimit\\\" : \\\"${result-limit}\\\"\n  }, {\n    \\\"class\\\" : \\\"uk.gov.gchq.gaffer.operation.impl.If\\\",\n    \\\"condition\\\" : \\\"${to-csv}\\\",\n    \\\"then\\\" : {\n        \\\"class\\\" : \\\"uk.gov.gchq.gaffer.operation.impl.output.ToCsv\\\",\n        \\\"elementGenerator\\\" : {\n          \\\"class\\\" : \\\"uk.gov.gchq.gaffer.data.generator.CsvGenerator\\\",\n          \\\"fields\\\" : {\n            \\\"VERTEX\\\" : \\\"Junction\\\",\n            \\\"${vehicle}\\\" : \\\"${vehicle}\\\"\n          },\n          \\\"constants\\\" : { },\n          \\\"quoted\\\" : false,\n          \\\"commaReplacement\\\" : \\\" \\\"\n        },\n        \\\"includeHeader\\\" : true\n    }\n  } ]\n}\";\n```\n\n----------------------------------------\n\nTITLE: Defining Types Schema in Gaffer (JSON)\nDESCRIPTION: An example of a Types schema in Gaffer, defining various data types including junctions, roads, counts, dates, and custom types like HllSketch. It demonstrates how to specify classes, validation functions, and aggregate functions for each type.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/administration-guide/gaffer-config/schema.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"types\": {\n    \"junction\": {\n      \"description\": \"A road junction represented by a String.\",\n      \"class\": \"java.lang.String\"\n    },\n    \"road\": {\n      \"description\": \"A road represented by a String.\",\n      \"class\": \"java.lang.String\"\n    },\n    \"anyVertex\": {\n      \"description\": \"An String vertex - used for cardinalities\",\n      \"class\": \"java.lang.String\"\n    },\n    \"count.long\": {\n      \"description\": \"A long count that must be greater than or equal to 0.\",\n      \"class\": \"java.lang.Long\",\n      \"validateFunctions\": [\n        {\n          \"class\": \"uk.gov.gchq.koryphe.impl.predicate.IsMoreThan\",\n          \"orEqualTo\": true,\n          \"value\": {\n            \"java.lang.Long\": 0\n          }\n        }\n      ],\n      \"aggregateFunction\": {\n        \"class\": \"uk.gov.gchq.koryphe.impl.binaryoperator.Sum\"\n      }\n    },\n    \"true\": {\n      \"description\": \"A simple boolean that must always be true.\",\n      \"class\": \"java.lang.Boolean\",\n      \"validateFunctions\": [\n        {\n          \"class\": \"uk.gov.gchq.koryphe.impl.predicate.IsTrue\"\n        }\n      ]\n    },\n    \"date.earliest\": {\n      \"description\": \"A Date that when aggregated together will be the earliest date.\",\n      \"class\": \"java.util.Date\",\n      \"validateFunctions\": [\n        {\n          \"class\": \"uk.gov.gchq.koryphe.impl.predicate.Exists\"\n        }\n      ],\n      \"aggregateFunction\": {\n        \"class\": \"uk.gov.gchq.koryphe.impl.binaryoperator.Min\"\n      }\n    },\n    \"date.latest\": {\n      \"description\": \"A Date that when aggregated together will be the latest date.\",\n      \"class\": \"java.util.Date\",\n      \"validateFunctions\": [\n        {\n          \"class\": \"uk.gov.gchq.koryphe.impl.predicate.Exists\"\n        }\n      ],\n      \"aggregateFunction\": {\n        \"class\": \"uk.gov.gchq.koryphe.impl.binaryoperator.Max\"\n      }\n    },\n    \"set\": {\n      \"class\": \"java.util.TreeSet\",\n      \"aggregateFunction\": {\n        \"class\": \"uk.gov.gchq.koryphe.impl.binaryoperator.CollectionConcat\"\n      }\n    },\n    \"hllSketch\": {\n      \"class\": \"org.apache.datasketches.hll.HllSketch\",\n      \"aggregateFunction\": {\n        \"class\": \"uk.gov.gchq.gaffer.sketches.datasketches.cardinality.binaryoperator.HllSketchAggregator\"\n      },\n      \"serialiser\": {\n        \"class\": \"uk.gov.gchq.gaffer.sketches.datasketches.cardinality.serialisation.HllSketchSerialiser\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring a Named Operation in Gaffer for Vehicle Frequency Analysis\nDESCRIPTION: Defines a named operation that finds junctions in a region with the highest frequency of a specific vehicle type. The operation includes filtering by region, aggregating vehicle counts, sorting results, and optional CSV output formatting. It also defines several parameters that can be customized when the operation is called.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/administration-guide/named-operations.md#2025-04-23_snippet_23\n\nLANGUAGE: python\nCODE:\n```\nselection=[ \n    \"countByVehicleType\" \n], \nfunction=g.FreqMapExtractor( \n    key=\"${vehicle}\" \n), \nprojection=[ \n    \"${vehicle}\" \n] \n) \n], \nproperties=[ \n    \"${vehicle}\" \n] \n) \n], \nglobal_elements=[ \n    g.GlobalElementDefinition( \n        group_by=[ \n        ] \n    ) \n], \nall_edges=False, \nall_entities=False \n), \ninclude_incoming_out_going=\"OUTGOING\" \n), \ng.Sort( \n    comparators=[ \n        g.ElementPropertyComparator( \n            groups=[ \n                \"JunctionUse\" \n            ], \n            property=\"${vehicle}\", \n            reversed=True \n        ) \n    ], \n    result_limit=\"${result-limit}\", \n    deduplicate=True \n), \ng.If( \n    condition=\"${to-csv}\", \n    then=g.ToCsv( \n        element_generator=g.CsvGenerator( \n            fields={'VERTEX': 'Junction', '${vehicle}': '${vehicle}'}, \n            constants={}, \n            quoted=False, \n            comma_replacement=\" \" \n        ), \n        include_header=True \n    ) \n) \n] \n), \noperation_name=\"frequent-vehicles-in-region\", \ndescription=\"Finds the junctions in a region with the most of an individual vehicle (e.g BUS, CAR) in the year 2000. The input is the region.\", \noverwrite_flag=True, \nparameters=[ \n    g.NamedOperationParameter( \n        name=\"to-csv\", \n        value_class=\"java.lang.Boolean\", \n        description=\"Enable this parameter to convert the results to a simple CSV in the format: Junction, Count\", \n        default_value=False, \n        required=False \n    ), \n    g.NamedOperationParameter( \n        name=\"result-limit\", \n        value_class=\"java.lang.Integer\", \n        description=\"The maximum number of junctions to return\", \n        default_value=2, \n        required=False \n    ), \n    g.NamedOperationParameter( \n        name=\"vehicle\", \n        value_class=\"java.lang.String\", \n        description=\"The type of vehicle: HGVR3, BUS, HGVR4, AMV, HGVR2, HGVA3, PC, HGVA3, PC, HGCA5, HGVA6, CAR, HGV, WM2, LGV\", \n        default_value=\"BUS\", \n        required=False  \n    ) \n]\n```\n\n----------------------------------------\n\nTITLE: Creating an Operation Builder in Gaffer\nDESCRIPTION: Implementation of a static inner Builder class for a GetElements operation that implements multiple builder interfaces to support operation configuration through method chaining.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/development-guide/project-structure/components/operation.md#2025-04-23_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npublic static class Builder extends Operation.BaseBuilder<GetElements, Builder>\n        implements InputOutput.Builder<GetElements, Iterable<? extends ElementId>, Iterable<? extends Element>, Builder>,\n        MultiInput.Builder<GetElements, ElementId, Builder>,\n        SeededGraphFilters.Builder<GetElements, Builder>,\n        Options.Builder<GetElements, Builder> {\n    public Builder() {\n            super(new GetElements());\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Left Outer Join with ElementMatch\nDESCRIPTION: Demonstrates performing a left outer join using ElementMatch to compare elements based on the 'count' property. The operation chain joins input elements with results from GetAllElements operation.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/join.md#2025-04-23_snippet_48\n\nLANGUAGE: java\nCODE:\n```\nfinal OperationChain<Iterable<? extends MapTuple>> opChain = new OperationChain.Builder()\n        .first(new Join.Builder<>()\n                .input(inputElements)\n                .operation(new GetAllElements())\n                .joinType(JoinType.OUTER)\n                .matchKey(MatchKey.LEFT)\n                .flatten(false)\n                .matchMethod(new ElementMatch(\"count\"))\n                .build())\n        .build();\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n\"class\" : \"OperationChain\",\n\"operations\" : [ {\n    \"class\" : \"Join\",\n    \"input\" : [ {\n    \"class\" : \"Entity\",\n    \"group\" : \"entity\",\n    \"vertex\" : 1,\n    \"properties\" : {\n        \"count\" : 3\n    }\n    }, {\n    \"class\" : \"Entity\",\n    \"group\" : \"entity\",\n    \"vertex\" : 4,\n    \"properties\" : {\n        \"count\" : 1\n    }\n    }, {\n    \"class\" : \"Entity\",\n    \"group\" : \"entity\",\n    \"vertex\" : 5,\n    \"properties\" : {\n        \"count\" : 3\n    }\n    }, {\n    \"class\" : \"Entity\",\n    \"group\" : \"entity\",\n    \"vertex\" : 6,\n    \"properties\" : {\n        \"count\" : 30\n    }\n    } ],\n    \"operation\" : {\n    \"class\" : \"GetAllElements\"\n    },\n    \"matchMethod\" : {\n    \"class\" : \"ElementMatch\"\n    },\n    \"matchKey\" : \"LEFT\",\n    \"flatten\" : false,\n    \"joinType\" : \"OUTER\"\n} ]\n}\n```\n\nLANGUAGE: python\nCODE:\n```\ng.OperationChain( \noperations=[ \n    g.Join( \n    operation=g.GetAllElements(), \n    match_method=g.ElementMatch(), \n    input=[ \n        g.Entity( \n        group=\"entity\", \n        properties={'count': 3}, \n        vertex=1 \n        ), \n        g.Entity( \n        group=\"entity\", \n        properties={'count': 1}, \n        vertex=4 \n        ), \n        g.Entity( \n        group=\"entity\", \n        properties={'count': 3}, \n        vertex=5 \n        ), \n        g.Entity( \n        group=\"entity\", \n        properties={'count': 30}, \n        vertex=6 \n        ) \n    ], \n    flatten=False, \n    match_key=\"LEFT\", \n    join_type=\"OUTER\" \n    ) \n] \n)\n```\n\n----------------------------------------\n\nTITLE: Importing CSV Data in Gaffer JSON\nDESCRIPTION: JSON operation chain for importing CSV data in Gaffer. It includes importing from a local file, generating elements, and adding them to the graph.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/user-guide/query/gaffer-syntax/import-export/csv.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"class\": \"OperationChain\",\n    \"operations\": [\n        {\n            \"class\": \"ImportFromLocalFile\",\n            \"filePath\": \"mydata.csv\"\n        },\n        {\n            \"class\": \"GenerateElements\",\n            \"elementGenerator\": {\n                \"class\": \"Neo4jCsvElementGenerator\"\n            }\n        },\n        {\n            \"class\": \"AddElements\"\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Entity and Edge from Gaffer Graph\nDESCRIPTION: Shows how to delete entity '5' and its associated edge to entity '2' using the DeleteElements operation within an OperationChain. The example includes Java, JSON, and Python implementations.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/core.md#2025-04-23_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nfinal OperationChain<Void> deleteElementsChain = new OperationChain.Builder()\n        .first(new GetElements.Builder()\n            .input(new EntitySeed(5))\n            .build())\n        .then(new DeleteElements())\n        .build();\n\ngraph.execute(deleteElementsChain, new User());\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"class\" : \"OperationChain\",\n    \"operations\" : [{\n        \"class\": \"GetElements\",\n        \"input\": [{\n            \"class\": \"EntitySeed\",\n            \"vertex\": 5,\n        }]\n    },\n    {\n        \"class\" : \"DeleteElements\"\n    }]\n}\n```\n\nLANGUAGE: python\nCODE:\n```\ng.OperationChain(\n    operations=[\n        g.GetElements(input=[g.EntitySeed(vertex=5)]),\n        g.DeleteElements()\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Min Operation with Count Property in Gaffer\nDESCRIPTION: This example demonstrates finding the minimum element based on the 'count' property across entity and edge groups. The operation chain first gets elements for two EntitySeeds and then applies the Min operation with an ElementPropertyComparator.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/core.md#2025-04-23_snippet_23\n\nLANGUAGE: java\nCODE:\n```\nfinal OperationChain<Element> opChain = new OperationChain.Builder()\n        .first(new GetElements.Builder()\n                .input(new EntitySeed(1), new EntitySeed(2))\n                .build())\n        .then(new Min.Builder()\n                .comparators(new ElementPropertyComparator.Builder()\n                        .groups(\"entity\", \"edge\")\n                        .property(\"count\")\n                        .build())\n                .build())\n        .build();\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"OperationChain\",\n  \"operations\" : [ {\n    \"class\" : \"GetElements\",\n    \"input\" : [ {\n      \"class\" : \"EntitySeed\",\n      \"vertex\" : 1\n    }, {\n      \"class\" : \"EntitySeed\",\n      \"vertex\" : 2\n    } ]\n  }, {\n    \"class\" : \"uk.gov.gchq.gaffer.operation.impl.compare.Min\",\n    \"comparators\" : [ {\n      \"class\" : \"ElementPropertyComparator\",\n      \"property\" : \"count\",\n      \"groups\" : [ \"entity\", \"edge\" ],\n      \"reversed\" : false\n    } ]\n  } ]\n}\n```\n\nLANGUAGE: python\nCODE:\n```\ng.OperationChain(\n  operations=[\n    g.GetElements(\n      input=[\n        g.EntitySeed(\n          vertex=1\n        ),\n        g.EntitySeed(\n          vertex=2\n        )\n      ]\n    ),\n    g.Min(\n      comparators=[\n        g.ElementPropertyComparator(\n          groups=[\n            \"entity\",\n            \"edge\"\n          ],\n          property=\"count\",\n          reversed=False\n        )\n      ]\n    )\n  ]\n)\n```\n\n----------------------------------------\n\nTITLE: Executing GetWalks Operation with Multiple Hops in Python\nDESCRIPTION: Python example of using GetWalks operation with three hops, each defined by an OperationChain containing GetElements operations with specific view configurations. The operation starts from vertex 1 and limits results to 1,000,000.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/get.md#2025-04-23_snippet_47\n\nLANGUAGE: python\nCODE:\n```\ng.GetWalks(\n  input=[\n    g.EntitySeed(\n      vertex=1\n    )\n  ],\n  operations=[\n    g.OperationChain(\n      operations=[\n        g.GetElements(\n          view=g.View(\n            entities=[\n              g.ElementDefinition(\n                group=\"entity1\"\n              ),\n              g.ElementDefinition(\n                group=\"entity\"\n              )\n            ],\n            edges=[\n              g.ElementDefinition(\n                group=\"edge\"\n              )\n            ],\n            all_edges=False,\n            all_entities=False\n          ),\n          include_incoming_out_going=\"OUTGOING\"\n        )\n      ]\n    ),\n    g.OperationChain(\n      operations=[\n        g.GetElements(\n          view=g.View(\n            entities=[\n              g.ElementDefinition(\n                group=\"entity1\"\n              )\n            ],\n            edges=[\n              g.ElementDefinition(\n                group=\"edge1\"\n              )\n            ],\n            all_edges=False,\n            all_entities=False\n          ),\n          include_incoming_out_going=\"INCOMING\"\n        )\n      ]\n    ),\n    g.OperationChain(\n      operations=[\n        g.GetElements(\n          view=g.View(\n            entities=[\n              g.ElementDefinition(\n                group=\"entity1\"\n              ),\n              g.ElementDefinition(\n                group=\"entity\"\n              )\n            ],\n            all_edges=False,\n            all_entities=False\n          ),\n          include_incoming_out_going=\"INCOMING\"\n        )\n      ]\n    )\n  ],\n  results_limit=1000000\n)\n```\n\n----------------------------------------\n\nTITLE: Filtering Elements by Count in Gaffer Graph\nDESCRIPTION: This example shows how to use GetAllElements with a View to filter elements based on a count property. It retrieves only elements with a count greater than 2, demonstrating the use of filters in Java, JSON, and Python.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/get.md#2025-04-23_snippet_32\n\nLANGUAGE: java\nCODE:\n```\nfinal GetAllElements operation = new GetAllElements.Builder()\n        .view(new View.Builder()\n                .entity(\"entity\", new ViewElementDefinition.Builder()\n                        .preAggregationFilter(new ElementFilter.Builder()\n                                .select(\"count\")\n                                .execute(new IsMoreThan(2))\n                                .build())\n                        .build())\n                .edge(\"edge\", new ViewElementDefinition.Builder()\n                        .preAggregationFilter(new ElementFilter.Builder()\n                                .select(\"count\")\n                                .execute(new IsMoreThan(2))\n                                .build())\n                        .build())\n                .build())\n        .build();\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"GetAllElements\",\n  \"view\" : {\n    \"edges\" : {\n      \"edge\" : {\n        \"preAggregationFilterFunctions\" : [ {\n          \"selection\" : [ \"count\" ],\n          \"predicate\" : {\n            \"class\" : \"IsMoreThan\",\n            \"orEqualTo\" : false,\n            \"value\" : 2\n          }\n        } ]\n      }\n    },\n    \"entities\" : {\n      \"entity\" : {\n        \"preAggregationFilterFunctions\" : [ {\n          \"selection\" : [ \"count\" ],\n          \"predicate\" : {\n            \"class\" : \"IsMoreThan\",\n            \"orEqualTo\" : false,\n            \"value\" : 2\n          }\n        } ]\n      }\n    }\n  }\n}\n```\n\nLANGUAGE: python\nCODE:\n```\ng.GetAllElements(\n  view=g.View(\n    entities=[\n      g.ElementDefinition(\n        group=\"entity\",\n        pre_aggregation_filter_functions=[\n          g.PredicateContext(\n            selection=[\n              \"count\"\n            ],\n            predicate=g.IsMoreThan(\n              value=2,\n              or_equal_to=False\n            )\n          )\n        ]\n      )\n    ],\n    edges=[\n      g.ElementDefinition(\n        group=\"edge\",\n        pre_aggregation_filter_functions=[\n          g.PredicateContext(\n            selection=[\n              \"count\"\n            ],\n            predicate=g.IsMoreThan(\n              value=2,\n              or_equal_to=False\n            )\n          )\n        ]\n      )\n    ],\n    all_edges=False,\n    all_entities=False\n  )\n)\n```\n\n----------------------------------------\n\nTITLE: Loading Schema from JSON in Gaffer (Java)\nDESCRIPTION: Demonstrates how to load a Gaffer schema from a JSON file using the fromJSON() method of the Schema class. This method accepts byte[], InputStream, or Path types for flexibility in schema loading.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/administration-guide/gaffer-config/schema.md#2025-04-23_snippet_5\n\nLANGUAGE: java\nCODE:\n```\nSchema mySchema = Schema.fromJson(Paths.get(\"path/to/schema.json\"));\n```\n\n----------------------------------------\n\nTITLE: Executing Operation Chain for Element Count in Java\nDESCRIPTION: Demonstrates how to create and execute an operation chain that retrieves all elements from the graph and counts them. The result is stored in a Long variable.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/user-guide/apis/java-api.md#2025-04-23_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nOperationChain<Long> countAllElements = new OperationChain.Builder()\n    .first(new GetAllElements())\n    .then(new Count<>())\n    .build();\n\nLong result = graph.execute(countAllElements, user);\n```\n\n----------------------------------------\n\nTITLE: Fetching Entities and Edges with Count Filter in JSON\nDESCRIPTION: JSON representation of the GetElements operation with a view to filter entities and edges based on a count property. This example retrieves elements with a count greater than 1.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/get.md#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n\"class\" : \"GetElements\",\n\"input\" : [ {\n    \"class\" : \"EntitySeed\",\n    \"vertex\" : 2\n}, {\n    \"class\" : \"EdgeSeed\",\n    \"source\" : 2,\n    \"destination\" : 3,\n    \"matchedVertex\" : \"SOURCE\",\n    \"directedType\" : \"EITHER\"\n} ],\n\"view\" : {\n    \"edges\" : {\n    \"edge\" : {\n        \"preAggregationFilterFunctions\" : [ {\n        \"selection\" : [ \"count\" ],\n        \"predicate\" : {\n            \"class\" : \"IsMoreThan\",\n            \"orEqualTo\" : false,\n            \"value\" : 1\n        }\n        } ]\n    }\n    },\n    \"entities\" : {\n    \"entity\" : {\n        \"preAggregationFilterFunctions\" : [ {\n        \"selection\" : [ \"count\" ],\n        \"predicate\" : {\n            \"class\" : \"IsMoreThan\",\n            \"orEqualTo\" : false,\n            \"value\" : 1\n        }\n        } ]\n    }\n    }\n}\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing OperationChain in Python with Gaffer\nDESCRIPTION: Python implementation of an operation chain that retrieves graph elements with a specific view, transforms them to vertices, and converts the result to a set. The operation uses entity seeds for vertices 1 and 2 and retrieves only outgoing edges.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/core.md#2025-04-23_snippet_79\n\nLANGUAGE: python\nCODE:\n```\ng.OperationChain(\n  operations=[\n    g.GetElements(\n      view=g.View(\n        edges=[\n          g.ElementDefinition(\n            group=\"edge\"\n          )\n        ],\n        all_edges=False,\n        all_entities=False\n      ),\n      input=[\n        g.EntitySeed(\n          vertex=1\n        ),\n        g.EntitySeed(\n          vertex=2\n        )\n      ],\n      include_incoming_out_going=\"OUTGOING\"\n    ),\n    g.ToVertices(\n      use_matched_vertex=\"OPPOSITE\"\n    ),\n    g.ToSet()\n  ]\n)\n```\n\n----------------------------------------\n\nTITLE: Fetching All Elements in Gaffer Graph\nDESCRIPTION: This snippet demonstrates how to use the GetAllElements operation to retrieve all elements from a Gaffer graph. It shows implementations in Java, JSON, and Python, along with example results.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/get.md#2025-04-23_snippet_31\n\nLANGUAGE: java\nCODE:\n```\nfinal GetAllElements operation = new GetAllElements();\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"GetAllElements\"\n}\n```\n\nLANGUAGE: python\nCODE:\n```\ng.GetAllElements()\n```\n\n----------------------------------------\n\nTITLE: Adding NamedOperation in Gremlin (Python)\nDESCRIPTION: This snippet demonstrates how to add a simple NamedOperation that counts all elements in the graph using Gremlin in Python. It creates an OperationChain with GetAllElements and Count operations, then adds it as a NamedOperation called 'CountAllElements'.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/user-guide/query/gremlin/custom-features.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\noperation = gc.OperationChain(\n    operations=[\n        gc.GetAllElements(),\n        gc.Count()\n    ]\n).to_json_str()\n\nparams = {\"add\": {\"name\": \"CountAllElements\", \"opChain\": operation}}\n\ng.call(\"namedoperation\", params)\n```\n\n----------------------------------------\n\nTITLE: Complete Types Schema with Validation in Gaffer\nDESCRIPTION: Complete types schema including all entity types, property types, and a Boolean type with validation function for edge direction.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/development-guide/example-deployment/writing-the-schema.md#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"types\": {\n        \"id.person.string\": {\n            \"description\": \"A basic type to hold the string id of a person entity\",\n            \"class\": \"java.lang.String\"\n        },\n        \"id.software.string\": {\n            \"description\": \"A basic type to hold the string id of a person entity\",\n            \"class\": \"java.lang.String\"\n        },\n        \"property.string\": {\n            \"description\": \"A type to hold string properties of entities\",\n            \"class\": \"java.lang.String\"\n        },\n        \"property.integer\": {\n            \"description\": \"A basic type to hold integer properties of entities\",\n            \"class\": \"java.lang.Integer\"\n        },\n        \"property.float\": {\n            \"description\": \"A basic type to hold float properties of entities\",\n            \"class\": \"java.lang.Float\"\n        },\n        \"true\": {\n            \"description\": \"A simple boolean that must always be true.\",\n            \"class\": \"java.lang.Boolean\",\n            \"validateFunctions\": [\n                {\n                    \"class\": \"uk.gov.gchq.koryphe.impl.predicate.IsTrue\"\n                }\n            ]\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing AddElementsFromHdfs Operation in Java\nDESCRIPTION: Main method implementation for adding elements from HDFS to Gaffer. Takes 5 command-line arguments: inputPath, outputPath, failurePath, schemaPath, and storePropertiesPath. Configures and executes an AddElementsFromHdfs operation with custom mapper and reducer settings.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/hdfs.md#2025-04-23_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nif (5 != args.length) {\n    System.err.println(\"Usage: hadoop jar custom-hdfs-import-<version>-shaded.jar <inputPath> <outputPath> <failurePath> <schemaPath> <storePropertiesPath>\");\n    System.exit(1);\n}\n\nfinal String inputPath = args[0];\nfinal String outputPath = args[1];\nfinal String failurePath = args[2];\nfinal String schemaPath = args[3];\nfinal String storePropertiesPath = args[4];\n\nfinal Graph graph = new Graph.Builder()\n        .storeProperties(storePropertiesPath)\n        .addSchemas(Paths.get(schemaPath))\n        .build();\n\nfinal AddElementsFromHdfs operation = new AddElementsFromHdfs.Builder()\n        .addInputMapperPair(inputPath, TextMapperGeneratorImpl.class.getName())\n        .outputPath(outputPath)\n        .failurePath(failurePath)\n        .splitsFilePath(\"/tmp/splits\")\n        .workingPath(\"/tmp/workingDir\")\n        .useProvidedSplits(false)\n        .jobInitialiser(new TextJobInitialiser())\n        .minReducers(10)\n        .maxReducers(100)\n        .build();\n\ngraph.execute(operation, new User());\n```\n\n----------------------------------------\n\nTITLE: Max Operation with Transient Properties in JSON\nDESCRIPTION: This JSON snippet shows a complex configuration for the Max operation with transient properties. It includes a custom View with transformers and multiple comparators in the Max operation.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/core.md#2025-04-23_snippet_31\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"OperationChain\",\n  \"operations\" : [ {\n    \"class\" : \"GetElements\",\n    \"input\" : [ {\n      \"class\" : \"EntitySeed\",\n      \"vertex\" : 1\n    }, {\n      \"class\" : \"EntitySeed\",\n      \"vertex\" : 2\n    } ],\n    \"view\" : {\n      \"edges\" : {\n        \"edge\" : {\n          \"transientProperties\" : {\n            \"score\" : \"Integer\"\n          },\n          \"transformFunctions\" : [ {\n            \"selection\" : [ \"DESTINATION\", \"count\" ],\n            \"function\" : {\n              \"class\" : \"ExampleScoreFunction\"\n            },\n            \"projection\" : [ \"score\" ]\n          } ]\n        }\n      },\n      \"entities\" : {\n        \"entity\" : {\n          \"transientProperties\" : {\n            \"score\" : \"Integer\"\n          },\n          \"transformFunctions\" : [ {\n            \"selection\" : [ \"VERTEX\", \"count\" ],\n            \"function\" : {\n              \"class\" : \"ExampleScoreFunction\"\n            },\n            \"projection\" : [ \"score\" ]\n          } ]\n        }\n      }\n    }\n  }, {\n    \"class\" : \"uk.gov.gchq.gaffer.operation.impl.compare.Max\",\n    \"comparators\" : [ {\n      \"class\" : \"ElementPropertyComparator\",\n      \"property\" : \"count\",\n      \"groups\" : [ \"entity\", \"edge\" ],\n      \"reversed\" : false\n    }, {\n      \"class\" : \"ElementPropertyComparator\",\n      \"property\" : \"score\",\n      \"groups\" : [ \"entity\", \"edge\" ],\n      \"reversed\" : false\n    } ]\n  } ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Schema with Visibility Property for RoadUse Edges in Gaffer\nDESCRIPTION: JSON schema definition that adds a visibility property to RoadUse edges and configures it as the visibilityProperty for the graph. This enables fine-grained access control on road usage data.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/administration-guide/security/security-guide.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"edges\": {\n    \"RoadUse\": {\n      \"description\": \"A directed edge representing vehicles moving from junction A to junction B.\",\n      \"source\": \"junction\",\n      \"destination\": \"junction\",\n      \"directed\": \"true\",\n      \"properties\": {\n        \"visibility\": \"visibility\",\n        \"count\": \"count.long\"\n      }\n    },\n    \"RoadHasJunction\": {\n      \"description\": \"A directed edge from each road to all the junctions on that road.\",\n      \"source\": \"road\",\n      \"destination\": \"junction\",\n      \"directed\": \"true\"\n    }\n  },\n  \"visibilityProperty\": \"visibility\"\n}\n```\n\n----------------------------------------\n\nTITLE: Performing Full Right Join with ElementMatch in Gaffer (Java)\nDESCRIPTION: This snippet demonstrates how to create an OperationChain with a Join operation using ElementMatch as the match method. It performs a full right join on the 'count' property.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/join.md#2025-04-23_snippet_35\n\nLANGUAGE: java\nCODE:\n```\nfinal OperationChain<Iterable<? extends MapTuple>> opChain = new OperationChain.Builder()\n        .first(new Join.Builder<>()\n                .input(inputElements)\n                .operation(new GetAllElements())\n                .joinType(JoinType.FULL)\n                .matchKey(MatchKey.RIGHT)\n                .flatten(false)\n                .matchMethod(new ElementMatch(\"count\"))\n                .build())\n        .build();\n```\n\n----------------------------------------\n\nTITLE: Implementing Left Key Full Join with KeyFunctionMatch and FunctionChain in Gaffer\nDESCRIPTION: This snippet demonstrates a more complex Join operation using KeyFunctionMatch with a FunctionChain for property transformation. It extracts the 'count' property, increments it by 1, and uses it for matching with other elements' 'count' property.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/join.md#2025-04-23_snippet_26\n\nLANGUAGE: java\nCODE:\n```\nfinal OperationChain<Iterable<? extends MapTuple>> opChain = new OperationChain.Builder()\n        .first(new Join.Builder<>()\n                .input(inputElements)\n                .operation(new GetAllElements())\n                .joinType(JoinType.FULL)\n                .matchKey(MatchKey.LEFT)\n                .flatten(false)\n                .matchMethod(new KeyFunctionMatch.Builder()\n                    .firstKeyFunction(new FunctionChain(new ExtractProperty(\"count\"), new Increment(1)))\n                    .secondKeyFunction(new ExtractProperty(\"count\"))\n                    .build())\n                .build())\n        .build();\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n\"class\" : \"OperationChain\",\n\"operations\" : [ {\n    \"class\" : \"Join\",\n    \"input\" : [{\n    \"class\" : \"Entity\",\n    \"group\" : \"entity\",\n    \"vertex\" : 1,\n    \"properties\" : {\n        \"count\" : 3\n    }\n    }, {\n    \"class\" : \"Entity\",\n    \"group\" : \"entity\",\n    \"vertex\" : 4,\n    \"properties\" : {\n        \"count\" : 1\n    }\n    }, {\n    \"class\" : \"Entity\",\n    \"group\" : \"entity\",\n    \"vertex\" : 5,\n    \"properties\" : {\n        \"count\" : 3\n    }\n    }, {\n    \"class\" : \"Entity\",\n    \"group\" : \"entity\",\n    \"vertex\" : 6,\n    \"properties\" : {\n        \"count\" : 30\n    }\n    }\n    ],\n    \"operation\" : {\n    \"class\" : \"GetAllElements\"\n    },\n    \"matchMethod\" : {\n    \"class\" : \"KeyFunctionMatch\",\n    \"firstKeyFunction\": {\n    \"class\" : \"FunctionChain\",\n    \"functions\" : [ {\n        \"class\" : \"ExtractProperty\",\n        \"name\": \"count\"\n    }, {\n    \"class\" : \"Increment\",\n    \"increment\" : 1\n    }\n    ]\n    },\n    \"secondKeyFunction\": {\n        \"class\": \"ExtractProperty\",\n        \"name\": \"count\"  \n        }\n    },\n    \"matchKey\": \"LEFT\",\n    \"flatten\": false,\n    \"joinType\" : \"FULL\"\n} ]\n}\n```\n\nLANGUAGE: python\nCODE:\n```\ng.OperationChain( \noperations=[ \n    g.Join( \n        operation=g.GetAllElements(), \n        match_method=g.KeyFunctionMatch(\n            first_key_function=g.FunctionChain([\n                g.ExtractProperty(\"count\"),\n                g.Increment(increment=1)\n                ]),\n            second_key_function=g.ExtractProperty(\"count\")\n        ),\n        input=[ \n            g.Entity( \n            group=\"entity\", \n            properties={\"count\": 3}, \n            vertex=1 \n            ), \n            g.Entity( \n            group=\"entity\", \n            properties={\"count\": 1}, \n            vertex=4 \n            ), \n            g.Entity( \n            group=\"entity\", \n            properties={\"count\": 3}, \n            vertex=5 \n            ), \n            g.Entity( \n            group=\"entity\", \n            properties={\"count\": 30}, \n            vertex=6 \n            ) \n    ], \n    flatten=False,\n    match_key=\"LEFT\",\n    join_type=\"FULL\" \n    ) \n] \n)\n```\n\nLANGUAGE: java\nCODE:\n```\n[ Entity[vertex=1,group=entity,properties=Properties[count=<java.lang.Integer>3]] --> [Edge[group=edge,source=3,destination=4,directed=true,properties=Properties[count=<java.lang.Integer>4]]] ]\n[ Entity[vertex=4,group=entity,properties=Properties[count=<java.lang.Integer>1]] --> [Edge[group=edge,source=2,destination=3,directed=true,properties=Properties[count=<java.lang.Integer>2]]], Entity[vertex=3,group=entity,properties=Properties[count=<java.lang.Integer>2]] ]\n[ Entity[vertex=5,group=entity,properties=Properties[count=<java.lang.Integer>3]] --> [Edge[group=edge,source=3,destination=4,directed=true,properties=Properties[count=<java.lang.Integer>4]]] ]\n[ Entity[vertex=6,group=entity,properties=Properties[count=<java.lang.Integer>30]] --> [] ]\n```\n\n----------------------------------------\n\nTITLE: Defining Graph Elements Schema\nDESCRIPTION: JSON schema defining edge and entity structures for Person, Repository, and Commit relationships with their respective properties.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/administration-guide/aggregation/ingest-example.md#2025-04-23_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"edges\": {\n        \"Commit\": {\n            \"source\": \"id.person.string\",\n            \"destination\": \"id.repo.string\",\n            \"directed\": \"true\",\n            \"properties\": {\n                \"first\": \"property.date.first\",\n                \"latest\": \"property.date.latest\",\n                \"count\": \"property.integer.count\"\n            }\n        }\n    },\n    \"entities\": {\n        \"Person\": {\n            \"description\": \"Entity representing a person vertex\",\n            \"vertex\": \"id.person.string\"\n        },\n        \"Repository\": {\n            \"description\": \"Entity representing a repository vertex\",\n            \"vertex\": \"id.repo.string\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Graph Walks with GetWalks in Python\nDESCRIPTION: This snippet demonstrates how to use the GetWalks operation in Python to retrieve walks through a graph starting from a given vertex. It includes multiple GetElements operations to define the walk steps, with filters for edge directions.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/get.md#2025-04-23_snippet_59\n\nLANGUAGE: python\nCODE:\n```\ng.GetWalks(\n  input=[\n    g.EntitySeed(\n      vertex=1\n    )\n  ],\n  operations=[\n    g.OperationChain(\n      operations=[\n        g.GetElements(\n          view=g.View(\n            edges=[\n              g.ElementDefinition(\n                group=\"edge\"\n              )\n            ],\n            all_edges=False,\n            all_entities=False\n          ),\n          include_incoming_out_going=\"OUTGOING\"\n        )\n      ]\n    ),\n    g.OperationChain(\n      operations=[\n        g.GetElements(\n          view=g.View(\n            edges=[\n              g.ElementDefinition(\n                group=\"edge1\"\n              )\n            ],\n            all_edges=False,\n            all_entities=False\n          ),\n          include_incoming_out_going=\"INCOMING\"\n        )\n      ]\n    )\n  ],\n  results_limit=1000000\n)\n```\n\n----------------------------------------\n\nTITLE: REST API OpenCypher Query Example\nDESCRIPTION: Shows how to execute an OpenCypher query through Gaffer's REST API using curl. The example demonstrates querying for nodes with a specific label.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/user-guide/apis/opencypher.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X 'POST' \\\n  'http://localhost:8080/rest/gremlin/cypher/execute' \\\n  -H 'accept: application/x-ndjson' \\\n  -H 'Content-Type: text/plain' \\\n  -d 'MATCH (n:\\'something\\') RETURN n'\n```\n\n----------------------------------------\n\nTITLE: Advanced Aggregate Operation with Custom Aggregator\nDESCRIPTION: Implementation of Aggregate operation specifically for edges with a transient property and custom aggregator. The groupBy is set to an empty array to override schema defaults.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/core.md#2025-04-23_snippet_5\n\nLANGUAGE: java\nCODE:\n```\nfinal String[] groupBy = {};\nfinal Aggregate aggregate = new Aggregate.Builder()\n        .edge(\"edge\", new AggregatePair(\n                groupBy,\n                new ElementAggregator.Builder()\n                        .select(\"transientProperty1\")\n                        .execute(new StringConcat())\n                        .build()))\n        .build();\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"Aggregate\",\n  \"edges\" : {\n    \"edge\" : {\n      \"elementAggregator\" : {\n        \"operators\" : [ {\n          \"selection\" : [ \"transientProperty1\" ],\n          \"binaryOperator\" : {\n            \"class\" : \"StringConcat\",\n            \"separator\" : \",\"\n          }\n        } ]\n      },\n      \"groupBy\" : [ ]\n    }\n  }\n}\n```\n\nLANGUAGE: python\nCODE:\n```\ng.Aggregate(\n  edges=[\n    g.AggregatePair(\n      group=\"edge\",\n      group_by=[\n      ],\n      element_aggregator=g.ElementAggregateDefinition(\n        operators=[\n          g.BinaryOperatorContext(\n            selection=[\n              \"transientProperty1\"\n            ],\n            binary_operator=g.BinaryOperator(\n              class_name=\"uk.gov.gchq.koryphe.impl.binaryoperator.StringConcat\",\n              fields={'separator': ','}\n            )\n          )\n        ]\n      )\n    )\n  ]\n)\n```\n\n----------------------------------------\n\nTITLE: Getting Filtered Walks in Gaffer Graph (Python)\nDESCRIPTION: Python implementation of the GetWalks operation to retrieve paths of length 2 with pre-aggregation filters on edge properties. This example filters edges based on the 'count' property.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/get.md#2025-04-23_snippet_44\n\nLANGUAGE: python\nCODE:\n```\ng.GetWalks(\n  input=[\n    g.EntitySeed(\n      vertex=1\n    )\n  ],\n  operations=[\n    g.OperationChain(\n      operations=[\n        g.GetElements(\n          view=g.View(\n            edges=[\n              g.ElementDefinition(\n                group=\"edge\",\n                pre_aggregation_filter_functions=[\n                  g.PredicateContext(\n                    selection=[\n                      \"count\"\n                    ],\n                    predicate=g.IsMoreThan(\n                      value=3,\n                      or_equal_to=False\n                    )\n                  )\n                ]\n              )\n            ],\n            all_edges=False,\n            all_entities=False\n          ),\n          include_incoming_out_going=\"OUTGOING\"\n        )\n      ]\n    ),\n    g.OperationChain(\n      operations=[\n        g.GetElements(\n          view=g.View(\n            edges=[\n              g.ElementDefinition(\n                group=\"edge1\",\n                pre_aggregation_filter_functions=[\n                  g.PredicateContext(\n                    selection=[\n                      \"count\"\n                    ],\n                    predicate=g.IsMoreThan(\n                      value=8,\n                      or_equal_to=False\n                    )\n                  )\n                ]\n              )\n            ],\n            all_edges=False,\n            all_entities=False\n          ),\n          include_incoming_out_going=\"INCOMING\"\n        )\n      ]\n    )\n  ],\n  results_limit=1000000\n)\n```\n\n----------------------------------------\n\nTITLE: Querying Summarized Edges with Time Window Filter in Gaffer (Java, JSON, Python)\nDESCRIPTION: Shows how to query summarized edges within a specific time window using pre-aggregation filtering in Gaffer.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/user-guide/query/gaffer-syntax/filtering.md#2025-04-23_snippet_23\n\nLANGUAGE: java\nCODE:\n```\nfinal GetElements getEdgeSummarisedInTimeWindow = new GetElements.Builder()\n    .input(new EntitySeed(\"John\"))\n    .view(new View.Builder()\n            .edge(\"Commit\", new ViewElementDefinition.Builder()\n                 .preAggregationFilter(new ElementFilter.Builder()\n                        .select(\"date\")\n                        .execute(new InDateRange.Builder()\n                            .start(\"2024/05/01\")\n                            .end(\"2024/05/03\")\n                            .startInclusive(true)\n                            .endInclusive(false)\n                        .build()))\n                    .groupBy()\n                    .build())\n            .build())\n    .build();\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"class\": \"GetElements\",\n    \"input\": [\n        {\n            \"class\": \"EntitySeed\",\n            \"vertex\": \"John\"\n        }\n    ],\n    \"view\": {\n        \"edges\": {\n            \"Commit\": {\n                \"groupBy\" : [ ],\n                \"preAggregationFilterFunctions\": [{\n                    \"selection\" : [\"date\"],\n                    \"predicate\" : {\n                        \"class\" : \"InDateRange\",\n                        \"start\" : \"2024/05/01\",\n                        \"end\" : \"2024/05/03\",\n                        \"startInclusive\": true,\n                        \"endInclusive\": false\n                    }\n                }]\n            }\n\n        }\n    }\n}\n```\n\nLANGUAGE: python\nCODE:\n```\nelements = gc.execute_operation(\n    operation = g.GetElements(\n        input = [g.EntitySeed(vertex = \"John\")],\n        view = g.View(\n            edges = [\n                g.ElementDefinition(\n                    group = 'Commit',\n                    group_by = [],\n                    pre_aggregation_filter_functions=[\n                        g.PredicateContext(\n                            predicate=g.Or(\n                                predicates=[\n                                    g.InDateRange(\n                                        start=\"2024/05/01\",\n                                        end=\"2024/05/03\",\n                                        start_inclusive=True,\n                                        end_inclusive=False\n                                    )\n                                ]\n                            )\n                        )\n                    ]\n                )\n            ]\n        )\n    )\n)\n```\n\n----------------------------------------\n\nTITLE: Filtering Properties in Gaffer Query (Java)\nDESCRIPTION: This snippet demonstrates how to create a View that filters properties in a Gaffer query. It includes only the 'hours' property from 'Created' edges and excludes the 'age' property from 'Person' entities.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/user-guide/query/gaffer-syntax/filtering.md#2025-04-23_snippet_3\n\nLANGUAGE: java\nCODE:\n```\n// Define the View to use\nfinal View viewWithFilters = new View.Builder()\n    .edge(\"Created\", new ViewElementDefinition.Builder()\n            .properties(\"hours\")\n            .build())\n    .entities(\"Person\", new ViewElementDefinition.Builder()\n            .excludeProperties(\"age\")\n            .build())\n    .build();\n\n// Create the operation to execute\nfinal GetElements operation = new GetElements.Builder()\n    .input(new EntitySeed(\"John\"))\n    .view(viewWithFilters)\n    .build();\n\ngraph.execute(operation, user);\n```\n\n----------------------------------------\n\nTITLE: Multiple Operations to Different Subgraphs\nDESCRIPTION: Example demonstrating how to send two different operations to two different subgraphs using an OperationChain.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/federated-operation.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"class\": \"uk.gov.gchq.gaffer.operation.OperationChain\",\n    \"operations\": [\n        {\n            \"class\": \"uk.gov.gchq.gaffer.federatedstore.operation.FederatedOperation\",\n            \"operation\": {\n                \"class\": \"ExampleOperation1\"\n            },\n            \"graphIds\": [ \"GraphA\" ]\n        },\n        {\n            \"class\": \"uk.gov.gchq.gaffer.federatedstore.operation.FederatedOperation\",\n            \"operation\": {\n                \"class\": \"ExampleOperation2\"\n            },\n            \"graphIds\": [ \"GraphB\" ]\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: GraphConfig JSON Configuration\nDESCRIPTION: JSON representation of GraphConfig showing how to configure graph ID, description, view filters, library and hooks in JSON format.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/development-guide/project-structure/components/graph.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"graphId\": \"exampleGraphId\",\n  \"description\": \"Example Graph description\",\n  \"view\": {\n    \"globalElements\": [\n      {\n        \"postAggregationFilterFunctions\": [\n          {\n            \"predicate\": {\n              \"class\": \"uk.gov.gchq.koryphe.impl.predicate.IsLessThan\",\n              \"orEqualTo\": false,\n              \"value\": \"10\"\n            },\n            \"selection\": [\"ExamplePropertyName\"]\n          }\n        ]\n      }\n    ]\n  },\n  \"library\": {\n      \"class\": \"uk.gov.gchq.gaffer.store.library.FileGraphLibrary\"\n  },\n  \"hooks\": [\n    {\n      \"class\": \"uk.gov.gchq.gaffer.graph.hook.Log4jLogger\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Properties in Gaffer Query (Python)\nDESCRIPTION: This Python snippet demonstrates how to create a GetElements operation with a View that filters properties. It includes only the 'hours' property from 'Created' edges and excludes the 'age' property from 'Person' entities.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/user-guide/query/gaffer-syntax/filtering.md#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nelements = gc.execute_operation(\n    operation = g.GetElements(\n        input = [g.EntitySeed(vertex = \"John\")]\n        view = g.View(\n            edges = [\n                g.ElementDefinition(\n                    group = 'Created',\n                    properties = [ \"hours\" ]\n                )\n            ]\n            entities = [\n                g.ElementDefinition(\n                    group = 'Person',\n                    exclude_properties = [ \"age\" ]\n                )\n            ]\n        )\n    )\n)\n```\n\n----------------------------------------\n\nTITLE: Representing Graph Elements in Gaffer JSON Format\nDESCRIPTION: This JSON snippet shows the structure of graph data in the Gaffer framework, including entities and edges with various properties. It demonstrates how cardinality is tracked using HyperLogLogPlus sketches and how elements are organized in collections based on their vertex IDs.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/get.md#2025-04-23_snippet_69\n\nLANGUAGE: json\nCODE:\n```\n\"edgeGroup\" : {\n  \"java.util.TreeSet\" : [ \"edge\" ]\n}\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"cardinality\",\n\"vertex\" : 8,\n\"properties\" : {\n\"hllp\" : {\n  \"com.clearspring.analytics.stream.cardinality.HyperLogLogPlus\" : {\n    \"hyperLogLogPlus\" : {\n      \"hyperLogLogPlusSketchBytes\" : \"/////gUFAQH9Fg==\",\n      \"cardinality\" : 1\n    }\n  }\n},\n\"count\" : 1,\n\"edgeGroup\" : {\n  \"java.util.TreeSet\" : [ \"edge1\" ]\n}\n}\n} ]\n}, {\n\"8\" : [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity1\",\n\"vertex\" : 8,\n\"properties\" : {\n\"count\" : 1\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"cardinality\",\n\"vertex\" : 8,\n\"properties\" : {\n\"hllp\" : {\n  \"com.clearspring.analytics.stream.cardinality.HyperLogLogPlus\" : {\n    \"hyperLogLogPlus\" : {\n      \"hyperLogLogPlusSketchBytes\" : \"/////gUFAQH9Fg==\",\n      \"cardinality\" : 1\n    }\n  }\n},\n\"count\" : 1,\n\"edgeGroup\" : {\n  \"java.util.TreeSet\" : [ \"edge1\" ]\n}\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"cardinality\",\n\"vertex\" : 8,\n\"properties\" : {\n\"hllp\" : {\n  \"com.clearspring.analytics.stream.cardinality.HyperLogLogPlus\" : {\n    \"hyperLogLogPlus\" : {\n      \"hyperLogLogPlusSketchBytes\" : \"/////gUFAQH7HQ==\",\n      \"cardinality\" : 1\n    }\n  }\n},\n\"count\" : 2,\n\"edgeGroup\" : {\n  \"java.util.TreeSet\" : [ \"edge\" ]\n}\n}\n} ]\n}, {\n\"8\" : [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity1\",\n\"vertex\" : 8,\n\"properties\" : {\n\"count\" : 1\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"cardinality\",\n\"vertex\" : 8,\n\"properties\" : {\n\"hllp\" : {\n  \"com.clearspring.analytics.stream.cardinality.HyperLogLogPlus\" : {\n    \"hyperLogLogPlus\" : {\n      \"hyperLogLogPlusSketchBytes\" : \"/////gUFAQH9Fg==\",\n      \"cardinality\" : 1\n    }\n  }\n},\n\"count\" : 1,\n\"edgeGroup\" : {\n  \"java.util.TreeSet\" : [ \"edge1\" ]\n}\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"cardinality\",\n\"vertex\" : 8,\n\"properties\" : {\n\"hllp\" : {\n  \"com.clearspring.analytics.stream.cardinality.HyperLogLogPlus\" : {\n    \"hyperLogLogPlus\" : {\n      \"hyperLogLogPlusSketchBytes\" : \"/////gUFAQH7HQ==\",\n      \"cardinality\" : 1\n    }\n  }\n},\n\"count\" : 2,\n\"edgeGroup\" : {\n  \"java.util.TreeSet\" : [ \"edge\" ]\n}\n}\n} ]\n}, {\n\"8\" : [ ]\n} ]\n}, {\n\"edges\" : [ [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 8,\n\"destination\" : 8,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 16\n}\n} ], [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 8,\n\"destination\" : 8,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 16\n}\n} ], [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge1\",\n\"source\" : 8,\n\"destination\" : 5,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n\"count\" : 13\n}\n} ] ],\n\"entities\" : [ {\n\"8\" : [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity1\",\n\"vertex\" : 8,\n\"properties\" : {\n\"count\" : 1\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"cardinality\",\n\"vertex\" : 8,\n\"properties\" : {\n\"hllp\" : {\n  \"com.clearspring.analytics.stream.cardinality.HyperLogLogPlus\" : {\n    \"hyperLogLogPlus\" : {\n      \"hyperLogLogPlusSketchBytes\" : \"/////gUFAQH7HQ==\",\n      \"cardinality\" : 1\n    }\n  }\n},\n\"count\" : 2,\n\"edgeGroup\" : {\n  \"java.util.TreeSet\" : [ \"edge\" ]\n}\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"cardinality\",\n\"vertex\" : 8,\n\"properties\" : {\n\"hllp\" : {\n  \"com.clearspring.analytics.stream.cardinality.HyperLogLogPlus\" : {\n    \"hyperLogLogPlus\" : {\n      \"hyperLogLogPlusSketchBytes\" : \"/////gUFAQH9Fg==\",\n      \"cardinality\" : 1\n    }\n  }\n},\n\"count\" : 1,\n\"edgeGroup\" : {\n  \"java.util.TreeSet\" : [ \"edge1\" ]\n}\n}\n} ]\n}, {\n\"8\" : [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity1\",\n\"vertex\" : 8,\n\"properties\" : {\n\"count\" : 1\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"cardinality\",\n\"vertex\" : 8,\n\"properties\" : {\n\"hllp\" : {\n  \"com.clearspring.analytics.stream.cardinality.HyperLogLogPlus\" : {\n    \"hyperLogLogPlus\" : {\n      \"hyperLogLogPlusSketchBytes\" : \"/////gUFAQH9Fg==\",\n      \"cardinality\" : 1\n    }\n  }\n},\n\"count\" : 1,\n\"edgeGroup\" : {\n  \"java.util.TreeSet\" : [ \"edge1\" ]\n}\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"cardinality\",\n\"vertex\" : 8,\n\"properties\" : {\n\"hllp\" : {\n  \"com.clearspring.analytics.stream.cardinality.HyperLogLogPlus\" : {\n    \"hyperLogLogPlus\" : {\n      \"hyperLogLogPlusSketchBytes\" : \"/////gUFAQH7HQ==\",\n      \"cardinality\" : 1\n    }\n  }\n},\n\"count\" : 2,\n\"edgeGroup\" : {\n  \"java.util.TreeSet\" : [ \"edge\" ]\n}\n}\n} ]\n}, {\n\"8\" : [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity1\",\n\"vertex\" : 8,\n\"properties\" : {\n\"count\" : 1\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"cardinality\",\n\"vertex\" : 8,\n\"properties\" : {\n\"hllp\" : {\n  \"com.clearspring.analytics.stream.cardinality.HyperLogLogPlus\" : {\n    \"hyperLogLogPlus\" : {\n      \"hyperLogLogPlusSketchBytes\" : \"/////gUFAQH9Fg==\",\n      \"cardinality\" : 1\n    }\n  }\n},\n\"count\" : 1,\n\"edgeGroup\" : {\n  \"java.util.TreeSet\" : [ \"edge1\" ]\n}\n}\n}, {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"cardinality\",\n\"vertex\" : 8,\n\"properties\" : {\n\"hllp\" : {\n  \"com.clearspring.analytics.stream.cardinality.HyperLogLogPlus\" : {\n    \"hyperLogLogPlus\" : {\n      \"hyperLogLogPlusSketchBytes\" : \"/////gUFAQH7HQ==\",\n      \"cardinality\" : 1\n    }\n  }\n},\n\"count\" : 2,\n\"edgeGroup\" : {\n  \"java.util.TreeSet\" : [ \"edge\" ]\n}\n}\n} ]\n}, {\n\"5\" : [ ]\n} ]\n}, {\n\"edges\" : [ [ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 8,\n\"destination\" : 8,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n```\n\n----------------------------------------\n\nTITLE: Using ApplyViewToElementsFunction with GetAllElements in Gaffer FederatedStore\nDESCRIPTION: This example demonstrates how to use the ApplyViewToElementsFunction with a GetAllElements operation. This merge function applies the View from the operation to all results, re-aggregating and re-filtering them using the Schema locally in the FederatedStore, making the results appear as if they came from a single graph.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/federated-operation.md#2025-04-23_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"class\": \"uk.gov.gchq.gaffer.federatedstore.operation.FederatedOperation\",\n    \"operation\": {\n        \"class\": \"GetAllElements\"\n    },\n    \"graphIds\": [\"GraphA\",\"GraphB\"],\n    \"mergeFunction\": {\n        \"class\": \"uk.gov.gchq.gaffer.federatedstore.util.ApplyViewToElementsFunction\"\n    }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n[\n    {\n        \"class\": \"uk.gov.gchq.gaffer.data.element.Edge\",\n        \"group\": \"LivesIn\",\n        \"source\": \"1\",\n        \"destination\": \"3\",\n        \"directed\": true,\n        \"matchedVertex\": \"SOURCE\",\n        \"properties\": {}\n    },\n    {\n        \"class\": \"uk.gov.gchq.gaffer.data.element.Edge\",\n        \"group\": \"MakeModel\",\n        \"source\": \"4\",\n        \"destination\": \"5\",\n        \"directed\": true,\n        \"matchedVertex\": \"SOURCE\",\n        \"properties\": {}\n    },\n    {\n        \"class\": \"uk.gov.gchq.gaffer.data.element.Entity\",\n        \"group\": \"Person\",\n        \"vertex\": \"1\",\n        \"properties\": {\n        \"name\": \"Bob\",\n        \"count\": 2\n        }\n    },\n    {\n        \"class\": \"uk.gov.gchq.gaffer.data.element.Edge\",\n        \"group\": \"WorksAs\",\n        \"source\": \"1\",\n        \"destination\": \"3\",\n        \"directed\": true,\n        \"matchedVertex\": \"SOURCE\",\n        \"properties\": {}\n    },\n    {\n        \"class\": \"uk.gov.gchq.gaffer.data.element.Edge\",\n        \"group\": \"Drives\",\n        \"source\": \"1\",\n        \"destination\": \"4\",\n        \"directed\": true,\n        \"matchedVertex\": \"SOURCE\",\n        \"properties\": {}\n    },\n    {\n        \"class\": \"uk.gov.gchq.gaffer.data.element.Entity\",\n        \"group\": \"Vehicle\",\n        \"vertex\": \"4\",\n        \"properties\": {\n        \"type\": \"Digger\"\n        }\n    },\n    {\n        \"class\": \"uk.gov.gchq.gaffer.data.element.Entity\",\n        \"group\": \"Manufacturer\",\n        \"vertex\": \"5\",\n        \"properties\": {\n        \"name\": \"JCB\"\n        }\n    },\n    {\n        \"class\": \"uk.gov.gchq.gaffer.data.element.Entity\",\n        \"group\": \"Job\",\n        \"vertex\": \"2\",\n        \"properties\": {\n        \"type\": \"Builder\"\n        }\n    },\n    {\n        \"class\": \"uk.gov.gchq.gaffer.data.element.Entity\",\n        \"group\": \"Place\",\n        \"vertex\": \"3\",\n        \"properties\": {\n        \"name\": \"Bobsville\"\n        }\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Filtering Edges of Type 'edge' with Count Greater Than 2 using Java\nDESCRIPTION: This Java code snippet demonstrates filtering specifically for edges of group 'edge' that have a 'count' property greater than 2. It uses an OperationChain with a NamedOperation and a Filter operation targeting edges.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/core.md#2025-04-23_snippet_14\n\nLANGUAGE: java\nCODE:\n```\nfinal OperationChain<Iterable<? extends Element>> opChain = new OperationChain.Builder()\n        .first(new NamedOperation.Builder<EntitySeed, Iterable<? extends Element>>()\n                .name(\"1-hop\")\n                .input(new EntitySeed(1))\n                .build())\n        .then(new Filter.Builder()\n                .edge(\"edge\", new ElementFilter.Builder()\n                        .select(\"count\")\n                        .execute(new IsMoreThan(2))\n                        .build())\n                .build())\n        .build();\n```\n\n----------------------------------------\n\nTITLE: Exporting Edges to New Graph using GraphLibrary Configuration in Python\nDESCRIPTION: This Python snippet demonstrates how to export all edges with group 'edge' to a new graph using a GraphLibrary. It creates an OperationChain with GetAllElements and ExportToOtherGraph operations, specifying the new graph ID.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/export.md#2025-04-23_snippet_47\n\nLANGUAGE: python\nCODE:\n```\ng.OperationChain( \n    operations=[ \n        g.GetAllElements( \n\n```\n\n----------------------------------------\n\nTITLE: Configuring ReduceRelatedElements with Complex Example in Java\nDESCRIPTION: This more complex Java example demonstrates ReduceRelatedElements with a larger set of elements including both edges and entities. It uses the same configuration as the basic example but with a more complex graph structure to illustrate more comprehensive relationship reduction.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/gaffer-functions.md#2025-04-23_snippet_38\n\nLANGUAGE: java\nCODE:\n```\nfinal List<Element> elements = Arrays.asList(\n        new Edge.Builder()\n                .source(\"1b\")\n                .dest(\"2a\")\n                .group(\"basicEdge\")\n                .property(\"visibility\", Sets.newHashSet(\"public\"))\n                .build(),\n        new Edge.Builder()\n                .source(\"1a\")\n                .dest(\"3a\")\n                .group(\"basicEdge\")\n                .property(\"visibility\", Sets.newHashSet(\"public\"))\n                .build(),\n        new Entity.Builder()\n                .vertex(\"2a\")\n                .group(\"basicEntity\")\n                .property(\"visibility\", Sets.newHashSet(\"public\"))\n                .build(),\n        new Edge.Builder()\n                .source(\"1b\")\n                .dest(\"1a\")\n                .group(\"relatesTo\")\n                .property(\"visibility\", Sets.newHashSet(\"public\"))\n                .build(),\n        new Edge.Builder()\n                .source(\"2a\")\n                .dest(\"2b\")\n                .group(\"relatesTo\")\n                .property(\"visibility\", Sets.newHashSet(\"public\"))\n                .build(),\n        new Edge.Builder()\n                .source(\"3a\")\n                .dest(\"3b\")\n                .group(\"relatesTo\")\n                .property(\"visibility\", Sets.newHashSet(\"private\"))\n                .build(),\n        new Edge.Builder()\n                .source(\"2a\")\n                .dest(\"3b\")\n                .group(\"relatesTo\")\n                .property(\"visibility\", Sets.newHashSet(\"private\"))\n                .build(),\n        new Edge.Builder()\n                .source(\"2b\")\n                .dest(\"3a\")\n                .group(\"relatesTo\")\n                .property(\"visibility\", Sets.newHashSet(\"public\"))\n                .build(),\n        new Edge.Builder()\n                .source(\"3a\")\n                .dest(\"4b\")\n                .group(\"relatesTo\")\n                .property(\"visibility\", Sets.newHashSet(\"private\"))\n                .build(),\n        new Edge.Builder()\n                .source(\"5b\")\n                .dest(\"4a\")\n                .group(\"relatesTo\")\n                .property(\"visibility\", Sets.newHashSet(\"public\"))\n                .build()\n);\nfinal ReduceRelatedElements function = new ReduceRelatedElements();\nfunction.setVisibilityProperty(\"visibility\");\nfunction.setVisibilityAggregator(new CollectionConcat<>());\nfunction.setVertexAggregator(new Max());\nfunction.setRelatedVertexGroups(Collections.singleton(\"relatesTo\"));\n```\n\n----------------------------------------\n\nTITLE: Implementing ElementMatch Join Operation\nDESCRIPTION: Demonstrates a left key inner join operation using ElementMatch to compare elements based on the 'count' property. The operation chain joins input elements with results from GetAllElements operation.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/join.md#2025-04-23_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nfinal OperationChain<Iterable<? extends MapTuple>> opChain = new OperationChain.Builder()\n        .first(new Join.Builder<>()\n                .input(inputElements)\n                .operation(new GetAllElements())\n                .joinType(JoinType.INNER)\n                .matchKey(MatchKey.LEFT)\n                .flatten(false)\n                .matchMethod(new ElementMatch(\"count\"))\n                .build())\n        .build();\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n\"class\" : \"OperationChain\",\n\"operations\" : [ {\n    \"class\" : \"Join\",\n    \"input\" : [ {\n    \"class\" : \"Entity\",\n    \"group\" : \"entity\",\n    \"vertex\" : 1,\n    \"properties\" : {\n        \"count\" : 3\n    }\n    }, {\n    \"class\" : \"Entity\",\n    \"group\" : \"entity\",\n    \"vertex\" : 4,\n    \"properties\" : {\n        \"count\" : 1\n    }\n    }, {\n    \"class\" : \"Entity\",\n    \"group\" : \"entity\",\n    \"vertex\" : 5,\n    \"properties\" : {\n        \"count\" : 3\n    }\n    }, {\n    \"class\" : \"Entity\",\n    \"group\" : \"entity\",\n    \"vertex\" : 6,\n    \"properties\" : {\n        \"count\" : 30\n    }\n    } ],\n    \"operation\" : {\n    \"class\" : \"GetAllElements\"\n    },\n    \"matchMethod\" : {\n    \"class\" : \"ElementMatch\"\n    },\n    \"matchKey\" : \"LEFT\",\n    \"flatten\" : false,\n    \"joinType\" : \"INNER\"\n} ]\n}\n```\n\nLANGUAGE: python\nCODE:\n```\ng.OperationChain( \noperations=[ \n    g.Join( \n    operation=g.GetAllElements(), \n    match_method=g.ElementMatch(), \n    input=[ \n        g.Entity( \n        group=\"entity\", \n        properties={'count': 3}, \n        vertex=1 \n        ), \n        g.Entity( \n        group=\"entity\", \n        properties={'count': 1}, \n        vertex=4 \n        ), \n        g.Entity( \n        group=\"entity\", \n        properties={'count': 3}, \n        vertex=5 \n        ), \n        g.Entity( \n        group=\"entity\", \n        properties={'count': 30}, \n        vertex=6 \n        ) \n    ], \n    flatten=False, \n    match_key=\"LEFT\", \n    join_type=\"INNER\" \n    ) \n] \n)\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Entities in Gaffer Schema JSON\nDESCRIPTION: This snippet shows the basic structure for defining entities in a Gaffer schema JSON file. It includes two entity types: Person and Software, each with a description and vertex type.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/development-guide/example-deployment/writing-the-schema.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"entities\": {\n        \"Person\": {\n            \"description\": \"Entity representing a person vertex\",\n            \"vertex\": \"id.person.string\"\n        },\n        \"Software\": {\n            \"description\": \"Entity representing a software vertex\",\n            \"vertex\": \"id.software.string\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring MapStore in store.properties\nDESCRIPTION: Example configuration for setting up MapStore in the store.properties file. This defines the store class and properties class for MapStore.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/administration-guide/gaffer-deployment/quickstart.md#2025-04-23_snippet_3\n\nLANGUAGE: properties\nCODE:\n```\ngaffer.store.class=uk.gov.gchq.gaffer.mapstore.MapStore\ngaffer.store.properties.class=uk.gov.gchq.gaffer.mapstore.MapStoreProperties\n```\n\n----------------------------------------\n\nTITLE: Fetching Entities and Edges with Count Filter in Python\nDESCRIPTION: Python implementation of the GetElements operation with a view to filter entities and edges based on a count property. This example retrieves elements with a count greater than 1.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/get.md#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ng.GetElements(\nview=g.View(\n    entities=[\n    g.ElementDefinition(\n        group=\"entity\",\n        pre_aggregation_filter_functions=[\n        g.PredicateContext(\n            selection=[\n            \"count\"\n            ],\n            predicate=g.IsMoreThan(\n            value=1,\n            or_equal_to=False\n            )\n        )\n        ]\n    )\n    ],\n    edges=[\n    g.ElementDefinition(\n        group=\"edge\",\n        pre_aggregation_filter_functions=[\n        g.PredicateContext(\n            selection=[\n            \"count\"\n            ],\n            predicate=g.IsMoreThan(\n            value=1,\n            or_equal_to=False\n            )\n        )\n        ]\n    )\n    ],\n    all_edges=False,\n    all_entities=False\n),\ninput=[\n    g.EntitySeed(\n    vertex=2\n    ),\n    g.EdgeSeed(\n    source=2,\n    destination=3,\n    directed_type=\"EITHER\",\n    matched_vertex=\"SOURCE\"\n    )\n]\n)\n```\n\n----------------------------------------\n\nTITLE: Basic Federated Operation Configuration\nDESCRIPTION: Example of configuring a basic Federated Operation with GetAllElements operation, targeting specific graphs and using a merge function.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/federated-operation.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"class\": \"uk.gov.gchq.gaffer.federatedstore.operation.FederatedOperation\",\n    \"operation\": {\n        \"class\": \"uk.gov.gchq.gaffer.operation.impl.get.GetAllElements\"\n    },\n    \"graphIds\": [ \"GraphA\", \"GraphB\" ],\n    \"mergeFunction\": {\n        \"class\": \"uk.gov.gchq.gaffer.federatedstore.util.ConcatenateMergeFunction\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Transforming Properties with MultiplyBy Function in Gaffer\nDESCRIPTION: Example demonstrating how to transform the 'hours' property into 'minutes' using the MultiplyBy function in Gaffer. The code shows how to create a transient property that multiplies the hours by 60 to get minutes.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/user-guide/query/gaffer-syntax/filtering.md#2025-04-23_snippet_15\n\nLANGUAGE: java\nCODE:\n```\nfinal GetElements getEdgesWithMinutes = new GetElements.Builder()\n    .input(new EntitySeed(\"John\"))\n    .view(new View.Builder()\n            .edge(\"Created\", new ViewElementDefinition.Builder()\n                    .transientProperty(\"minutes\", Integer.class)\n                    .transformer(new MultiplyBy(60))\n                    .build())\n            .build())\n    .build();\n\ngraph.execute(getEdgesWithMinutes, user);\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"class\": \"GetElements\",\n    \"input\": [\n        {\n            \"class\": \"EntitySeed\",\n            \"vertex\": \"John\"\n        }\n    ],\n    \"view\": {\n        \"edges\": {\n            \"Created\": {\n                \"transientProperties\" : {\n                    \"minutes\" : \"java.lang.Integer\"\n                },\n                \"transformFunctions\" : [\n                    {\n                        \"selection\" : [ \"hours\" ],\n                        \"function\" : {\n                            \"class\" : \"MultiplyBy\",\n                            \"by\" : 60\n                        },\n                        \"projection\" : [ \"minutes\" ]\n                    }\n                ]\n            }\n\n        }\n    }\n}\n```\n\nLANGUAGE: python\nCODE:\n```\nelements = gc.execute_operation(\n    operation = g.GetElements(\n        input = [g.EntitySeed(vertex = \"John\")]\n        view = g.View(\n            edges = [\n                g.ElementDefinition(\n                    group = 'Created',\n                    transient_properties = {'minutes': 'java.lang.Integer'},\n                    transform_functions = [\n                        g.FunctionContext(\n                            selection = [ \"hours\" ],\n                            function = g.MultiplyBy(by = 60),\n                            projection = [ \"minutes\" ]\n                        )\n                    ]\n                )\n            ]\n        )\n    )\n)\n```\n\n----------------------------------------\n\nTITLE: Fetching Entities and Edges Related to Vertex in Python\nDESCRIPTION: Python implementation of the GetElements operation to retrieve entities and edges related to a specific vertex. This example fetches all elements connected to vertex 2.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/get.md#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\ng.GetElements(\ninput=[\n    g.EntitySeed(\n    vertex=2\n    )\n]\n)\n```\n\n----------------------------------------\n\nTITLE: Count Operation in Operation Chain\nDESCRIPTION: Implementation of Count operation within an OperationChain to count all elements. Combines GetAllElements with Count operation.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/core.md#2025-04-23_snippet_6\n\nLANGUAGE: java\nCODE:\n```\nOperationChain<Long> countAllElements = new OperationChain.Builder()\n        .first(new GetAllElements())\n        .then(new Count<>())\n        .build();\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"OperationChain\",\n  \"operations\" : [ {\n    \"class\" : \"GetAllElements\"\n  }, {\n    \"class\" : \"Count\"\n  } ]\n}\n```\n\nLANGUAGE: python\nCODE:\n```\ng.OperationChain(\n  operations=[\n    g.GetAllElements(),\n    g.Count()\n  ]\n)\n```\n\n----------------------------------------\n\nTITLE: Adding a Parameterized Named Operation in Java\nDESCRIPTION: Creates a Named Operation with a parameter in Java that allows setting a result limit. The parameter 'param1' has a default value of 1 and can be overridden during execution.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/administration-guide/named-operations.md#2025-04-23_snippet_7\n\nLANGUAGE: java\nCODE:\n```\nfinal String opChainString = new JSONObject()\n    .put(\"operations\", new JSONArray()\n        .put(new JSONObject()\n            .put(\"class\", \"GetAdjacentIds\")\n            .put(\"includeIncomingOutGoing\", \"OUTGOING\"))\n        .put(new JSONObject()\n            .put(\"class\", \"GetAdjacentIds\")\n            .put(\"includeIncomingOutGoing\", \"OUTGOING\"))\n        .put(new JSONObject()\n            .put(\"class\", \"Limit\")\n            .put(\"resultLimit\", \"${param1}\")))\n    .toString();\n\nParameterDetail param = new ParameterDetail.Builder()\n        .defaultValue(1L)\n        .description(\"Limit param\")\n        .valueClass(Long.class)\n        .build();\nMap<String, ParameterDetail> paramMap = Maps.newHashMap();\nparamMap.put(\"param1\", param);\n\nfinal AddNamedOperation operation = new AddNamedOperation.Builder()\n        .operationChain(opChainString) \n        .description(\"2 hop query with settable limit\")\n        .name(\"2-hop-with-limit\")\n        .readAccessRoles(\"read-user\")\n        .writeAccessRoles(\"write-user\")\n        .parameters(paramMap)\n        .overwrite()\n        .score(3)\n        .build();\n```\n\n----------------------------------------\n\nTITLE: Complete Gaffer Schema JSON with Properties\nDESCRIPTION: This snippet shows a full Gaffer schema JSON configuration, including entities and edges with their properties. It demonstrates how to add property definitions and set aggregation flags for each element type.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/development-guide/example-deployment/writing-the-schema.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"edges\": {\n        \"Created\": {\n            \"source\": \"id.person.string\",\n            \"destination\": \"id.software.string\",\n            \"directed\": \"true\",\n            \"aggregate\": \"false\",\n            \"properties\": {\n                \"weight\": \"property.float\"\n            }\n        }\n    },\n    \"entities\": {\n        \"Person\": {\n            \"description\": \"Entity representing a person vertex\",\n            \"vertex\": \"id.person.string\",\n            \"aggregate\": \"false\",\n            \"properties\": {\n                \"name\": \"property.string\",\n                \"age\": \"property.integer\"\n            }\n        },\n        \"Software\": {\n            \"description\": \"Entity representing a software vertex\",\n            \"vertex\": \"id.software.string\",\n            \"aggregate\": \"false\",\n            \"properties\": {\n                \"name\": \"property.string\",\n                \"lang\": \"property.string\"\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Neo4j CSV Element Generator\nDESCRIPTION: Java implementation of a Neo4jCsvElementGenerator that extends OpenCypherCsvElementGenerator to transform Neo4j CSV data into Gaffer Elements.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/development-guide/extending-gaffer.md#2025-04-23_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n/**\n * An {@link OpenCypherCsvElementGenerator}s that will generate\n * Gaffer Elements from Neo4j CSV strings.\n */\n@Since(\"2.0.0\")\n@Summary(\"Generates elements from a Neo4j CSV\")\npublic class Neo4jCsvElementGenerator extends OpenCypherCsvElementGenerator {\n    @Override\n    protected LinkedHashMap<String, String> getFields() {\n        return new Neo4jCsvGenerator().getFields();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Schema using Java API in Gaffer\nDESCRIPTION: Shows how to create a Gaffer schema programmatically using the Java API. It involves using the Schema.Builder() method and creating maps for edges, entities, and types. This approach allows for more dynamic schema creation and customization.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/administration-guide/gaffer-config/schema.md#2025-04-23_snippet_6\n\nLANGUAGE: java\nCODE:\n```\nMap<String, SchemaEdgeDefinition> myEdges = new HashMap<>();\nmyEdges.put(\"myEdge\", new SchemaEdgeDefinition.Builder()...\n                                                        .build());\n\nMap<String, SchemaEntityDefinition> myEntities = new HashMap<>();\nmyEntities.put(\"myEntity\", new SchemaEntityDefinition.Builder()...\n                                                               .build());\n\nMap<String, TypeDefinition> myTypes = new HashMap<>();\nmyTypes.put(\"myType\", new TypeDefinition.Builder()...\n                                                  .build());\n\nSchema mySchema = new Schema.Builder().edges(edges)\n                                      .entities(entities)\n                                      .types(types)\n                                      .build();\n```\n\n----------------------------------------\n\nTITLE: Initializing Gaffer Python Connection\nDESCRIPTION: Sets up the initial connection to a Gaffer REST API endpoint using the Python connector. Imports required modules and establishes connection to the REST API running on localhost.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/user-guide/apis/python-api.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom gafferpy import gaffer as g\nfrom gafferpy import gaffer_connector\ngc = gaffer_connector.GafferConnector(\"http://localhost:8080/rest/latest\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Aggregation Schema for Gaffer\nDESCRIPTION: Example Aggregation Schema that shows advanced aggregation applied to multiple properties within an Element group. It defines a custom binary operator for aggregating startDate and endDate properties that overrides single property aggregation functions.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/administration-guide/gaffer-config/schema.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"edges\": {\n    \"RoadUse\": {\n      \"aggregateFunctions\": [\n        {\n          \"selection\": [\n            \"startDate\",\n            \"endDate\"\n          ],\n          \"binaryOperator\": {\n            \"class\": \"uk.gov.gchq.gaffer.doc.dev.aggregator.ExampleTuple2BinaryOperator\"\n          }\n        }\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Graph with Access Controls in JSON\nDESCRIPTION: This JSON snippet shows how to add a graph to a federated store with full access restrictions. It includes graph configuration, schema, properties, owner, public status, and read/write predicates using AccessPredicate and DefaultUserPredicate.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/administration-guide/gaffer-stores/simple-federated/access-control.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"class\": \"uk.gov.gchq.gaffer.federated.simple.operation.AddGraph\",\n    \"graphConfig\": {\n        \"graphId\": \"myGraph\"\n    },\n    \"schema\": {\n        \"entities\": {},\n        \"edges\": {},\n        \"types\": {}\n    },\n    \"properties\": {\n        \"gaffer.store.class\": \"uk.gov.gchq.gaffer.accumulostore.AccumuloStore\",\n        \"gaffer.store.properties.class\": \"uk.gov.gchq.gaffer.accumulostore.AccumuloProperties\",\n        \"gaffer.cache.service.class\": \"uk.gov.gchq.gaffer.cache.impl.HashMapCacheService\"\n    },\n    \"owner\": \"graphOwner\",\n    \"isPublic\": true,\n    \"readPredicate\": {\n        \"class\": \"uk.gov.gchq.gaffer.access.predicate.AccessPredicate\",\n        \"userPredicate\": {\n            \"class\": \"uk.gov.gchq.gaffer.access.predicate.user.DefaultUserPredicate\",\n            \"creatingUserId\": \"graphOwner\",\n            \"auths\": [ \"readAuth1\", \"readAuth2\" ]\n        }\n    },\n    \"writePredicate\": {\n        \"class\": \"uk.gov.gchq.gaffer.access.predicate.AccessPredicate\",\n        \"userPredicate\": {\n            \"class\": \"uk.gov.gchq.gaffer.access.predicate.user.DefaultUserPredicate\",\n            \"creatingUserId\": \"graphOwner\",\n            \"auths\": [ \"writeAuth1\", \"writeAuth2\" ]\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Named Operation with Parameters in Python\nDESCRIPTION: Illustrates how to execute a previously defined named operation in Gaffer using Python. It shows setting up the NamedOperation object with an input EntitySeed and parameters.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/flow.md#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\ng.NamedOperation( \n  input=[ \n    g.EntitySeed( \n      vertex=6 \n    ) \n  ], \n  operation_name=\"2-hop-with-optional-filtering\", \n  parameters={'enableFiltering': True} \n)\n```\n\n----------------------------------------\n\nTITLE: Constructing GetWalks Operation in Java\nDESCRIPTION: This Java code constructs a GetWalks operation to retrieve walks of length 2 starting from vertex 1. It specifies different edge groups and directions for each hop using GetElements operations.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/get.md#2025-04-23_snippet_56\n\nLANGUAGE: java\nCODE:\n```\nfinal GetWalks getWalks = new GetWalks.Builder()\n        .operations(new GetElements.Builder()\n                        .view(new View.Builder()\n                                .edge(\"edge\")\n                                .build())\n                        .inOutType(SeededGraphFilters.IncludeIncomingOutgoingType.OUTGOING)\n                        .build(),\n                new GetElements.Builder()\n                        .view(new View.Builder()\n                                .edge(\"edge1\")\n                                .build())\n                        .inOutType(SeededGraphFilters.IncludeIncomingOutgoingType.INCOMING)\n                        .build())\n        .input(new EntitySeed(1))\n        .build();\n```\n\n----------------------------------------\n\nTITLE: Getting Graph Walks with Self Loops - Java Implementation\nDESCRIPTION: Java code showing how to construct a GetWalks operation to retrieve walks of length 3 starting from vertex 8, using outgoing edges only. The operation is configured to handle self loops in the graph traversal.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/get.md#2025-04-23_snippet_66\n\nLANGUAGE: java\nCODE:\n```\nfinal GetWalks getWalks = new GetWalks.Builder()\n        .operations(new GetElements.Builder()\n                        .inOutType(SeededGraphFilters.IncludeIncomingOutgoingType.OUTGOING)\n                        .build(),\n                new GetElements.Builder()\n                        .inOutType(SeededGraphFilters.IncludeIncomingOutgoingType.OUTGOING)\n                        .build(),\n                new GetElements.Builder()\n                        .inOutType(SeededGraphFilters.IncludeIncomingOutgoingType.OUTGOING)\n                        .build())\n        .input(new EntitySeed(8))\n        .build();\n```\n\n----------------------------------------\n\nTITLE: Implementing Query-time Aggregation in Gaffer using Python\nDESCRIPTION: Python implementation of query-time aggregation in Gaffer. It creates a GetElements operation that targets the 'Commit' edge group, sets an empty group_by list, and configures a Sum binary operator to aggregate the 'added' and 'removed' properties.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/user-guide/query/gaffer-syntax/filtering.md#2025-04-23_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nelements = gc.execute_operation(\n    operation = g.GetElements(\n        input = [g.EntitySeed(vertex = \"John\")],\n        view = g.View(\n            edges = [\n                g.ElementDefinition(\n                    group = 'Commit',\n                    group_by = [],\n                    aggregate_functions = [\n                        g.BinaryOperatorContext(\n                            selection=[ \"added\", \"removed\" ],\n                            binary_operator = g.Sum()\n                        )\n                    ]\n                )\n            ]\n        )\n    )\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Validation Schema for Gaffer\nDESCRIPTION: Example Validation Schema that demonstrates advanced validation applied to multiple properties within an Element group. This schema uses a predicate to ensure startDate is less than endDate for the RoadUse edge type.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/administration-guide/gaffer-config/schema.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"edges\": {\n    \"RoadUse\": {\n      \"validateFunctions\": [\n        {\n          \"selection\": [\n            \"startDate\",\n            \"endDate\"\n          ],\n          \"predicate\": {\n            \"class\": \"uk.gov.gchq.koryphe.impl.predicate.IsXLessThanY\"\n          }\n        }\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Graph Elements and Properties in Gaffer JSON\nDESCRIPTION: This snippet defines edges, entities, and their properties using Gaffer's JSON format. It includes complex data types like HyperLogLogPlus for cardinality estimation and TreeSet for group storage.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/flow.md#2025-04-23_snippet_20\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"edges\": [ [ {\n    \"class\": \"uk.gov.gchq.gaffer.data.element.Edge\",\n    \"group\": \"edge1\",\n    \"source\": 6,\n    \"destination\": 7,\n    \"directed\": true,\n    \"matchedVertex\": \"SOURCE\",\n    \"properties\": {\n      \"count\": 13\n    }\n  } ] ],\n  \"entities\": [ {\n    \"1\": [ {\n      \"class\": \"uk.gov.gchq.gaffer.data.element.Entity\",\n      \"group\": \"entity1\",\n      \"vertex\": 1,\n      \"properties\": {\n        \"count\": 3\n      }\n    }, {\n      \"class\": \"uk.gov.gchq.gaffer.data.element.Entity\",\n      \"group\": \"cardinality\",\n      \"vertex\": 1,\n      \"properties\": {\n        \"hllp\": {\n          \"com.clearspring.analytics.stream.cardinality.HyperLogLogPlus\": {\n            \"hyperLogLogPlus\": {\n              \"hyperLogLogPlusSketchBytes\": \"/////gUFAQH9Fg==\",\n              \"cardinality\": 1\n            }\n          }\n        },\n        \"count\": 1,\n        \"edgeGroup\": {\n          \"java.util.TreeSet\": [ \"edge\" ]\n        }\n      }\n    } ]\n  } ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Named Operation with Optional Filtering in Python\nDESCRIPTION: Defines a named operation in Gaffer using Python. The operation includes a 2-hop query with optional filtering based on a count property. It demonstrates the use of OperationChainDAO, GetAdjacentIds, If condition, and GetElements operations.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/flow.md#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ng.AddNamedOperation( \n  operation_chain=g.OperationChainDAO( \n    operations=[ \n      g.GetAdjacentIds(), \n      g.If( \n        condition=\"${enableFiltering}\", \n        then=g.GetElements( \n          view=g.View( \n            entities=[ \n              g.ElementDefinition( \n                group=\"entity\", \n                pre_aggregation_filter_functions=[ \n                  g.PredicateContext( \n                    selection=[ \n                      \"count\" \n                    ], \n                    predicate=g.IsLessThan( \n                      value=10, \n                      or_equal_to=True \n                    ) \n                  ) \n                ] \n              ) \n            ], \n            all_edges=False, \n            all_entities=False \n          ) \n        ) \n      ), \n      g.GetElements() \n    ] \n  ), \n  operation_name=\"2-hop-with-optional-filtering\", \n  description=\"2 hop query with optional filtering by count\", \n  read_access_roles=[ \n    \"read-user\" \n  ], \n  write_access_roles=[ \n    \"write-user\" \n  ], \n  overwrite_flag=True, \n  score=4, \n  parameters=[ \n    g.NamedOperationParameter( \n      name=\"enableFiltering\", \n      value_class=\"boolean\", \n      description=\"Flag for enabling filtering\", \n      default_value=True, \n      required=False \n    ) \n  ] \n)\n```\n\n----------------------------------------\n\nTITLE: Extracting Elements with Map Operation in Python\nDESCRIPTION: Python implementation of using Map operation with FirstItem function to extract the first element from entities. Demonstrates constructing a view to filter entities and applying the Map operation.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/core.md#2025-04-23_snippet_45\n\nLANGUAGE: python\nCODE:\n```\ng.OperationChain(\n  operations=[\n    g.GetElements(\n      view=g.View(\n        entities=[\n          g.ElementDefinition(\n            group=\"entity\"\n          )\n        ],\n        all_edges=False,\n        all_entities=False\n      ),\n      input=[\n        g.EntitySeed(\n          vertex=1\n        ),\n        g.EntitySeed(\n          vertex=2\n        )\n      ]\n    ),\n    g.Map(\n      functions=[\n        g.FirstItem()\n      ]\n    )\n  ]\n)\n```\n\n----------------------------------------\n\nTITLE: Conditionally Get Elements or Limit Results using If Operation in Python\nDESCRIPTION: This Python snippet demonstrates creating an OperationChain with an If operation. It conditionally executes a GetElements operation if the result count is less than 5, otherwise limits the results to 5.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/flow.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ng.OperationChain( \n  operations=[ \n    g.GetAdjacentIds( \n      input=[ \n        g.EntitySeed( \n          vertex=2 \n        ) \n      ] \n    ), \n    g.If( \n      conditional=g.Conditional( \n        predicate=g.IsShorterThan( \n          max_length=5, \n          or_equal_to=False \n        ) \n      ), \n      then=g.OperationChain( \n        operations=[ \n          g.GetElements(), \n          g.Limit( \n            result_limit=5, \n            truncate=True \n          ) \n        ] \n      ), \n      otherwise=g.Limit( \n        result_limit=5, \n        truncate=True \n      ) \n    ) \n  ] \n)\n```\n\n----------------------------------------\n\nTITLE: Setting Operation Options in Gremlin Query (Python)\nDESCRIPTION: Shows two ways to set operation options in a Python Gremlin query. The first uses a list, and the second uses a dictionary to specify the graph ID for a federated store operation.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/gremlin-guide/gaffer-options.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ng.with_(\"operationOptions\", [\"gaffer.federatedstore.operation.graphIds:graphA\"]).V().to_list()\n```\n\nLANGUAGE: python\nCODE:\n```\ng.with_(\"operationOptions\", {\"gaffer.federatedstore.operation.graphIds\": \"graphA\"}).V().to_list()\n```\n\n----------------------------------------\n\nTITLE: Adding a Parameterized Named Operation in Python\nDESCRIPTION: Creates a Named Operation with a parameter in Python that allows setting a result limit. The parameter 'param1' controls the maximum number of results returned.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/administration-guide/named-operations.md#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\ng.AddNamedOperation( \n    operation_chain=g.OperationChainDAO( \n        operations=[ \n            g.GetAdjacentIds( \n                include_incoming_out_going=\"OUTGOING\" \n            ), \n            g.GetAdjacentIds( \n                include_incoming_out_going=\"OUTGOING\" \n            ), \n            g.Limit( \n                result_limit=\"${param1}\" \n            ) \n        ] \n    ), \n    operation_name=\"2-hop-with-limit\", \n    description=\"2 hop query with settable limit\", \n    read_access_roles=[ \n        \"read-user\" \n    ], \n    write_access_roles=[ \n        \"write-user\" \n    ], \n    overwrite_flag=True, \n    score=3, \n    parameters=[ \n        g.NamedOperationParameter( \n            name=\"param1\", \n            value_class=\"java.lang.Long\", \n            description=\"Limit param\", \n            default_value=1, \n            required=False \n        ) \n    ] \n)\n```\n\n----------------------------------------\n\nTITLE: Adding a Named Operation with Parameter in Gaffer\nDESCRIPTION: This example demonstrates adding a Named Operation with a parameter. It creates a 2-hop query with a settable limit parameter. The parameter allows for dynamic configuration of the operation at runtime.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/named.md#2025-04-23_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nfinal String opChainString = \"{\"\n        + \"    \\\"operations\\\" : [ {\"\n        + \"      \\\"class\\\" : \\\"uk.gov.gchq.gaffer.operation.impl.get.GetAdjacentIds\\\",\"\n        + \"      \\\"includeIncomingOutGoing\\\" : \\\"OUTGOING\\\"\"\n        + \"    }, {\"\n        + \"      \\\"class\\\" : \\\"uk.gov.gchq.gaffer.operation.impl.get.GetAdjacentIds\\\",\"\n        + \"      \\\"includeIncomingOutGoing\\\" : \\\"OUTGOING\\\"\"\n        + \"    }, {\"\n        + \"      \\\"class\\\" : \\\"uk.gov.gchq.gaffer.operation.impl.Limit\\\",\"\n        + \"      \\\"resultLimit\\\" : \\\"${param1}\\\"\"\n        + \"    }\"\n        + \" ]\"\n        + \"}\";\n\nParameterDetail param = new ParameterDetail.Builder()\n        .defaultValue(1L)\n        .description(\"Limit param\")\n        .valueClass(Long.class)\n        .build();\nMap<String, ParameterDetail> paramMap = Maps.newHashMap();\nparamMap.put(\"param1\", param);\n\nfinal AddNamedOperation operation = new AddNamedOperation.Builder()\n        .operationChain(opChainString)\n        .description(\"2 hop query with settable limit\")\n        .name(\"2-hop-with-limit\")\n        .readAccessRoles(\"read-user\")\n        .writeAccessRoles(\"write-user\")\n        .parameters(paramMap)\n        .overwrite()\n        .score(3)\n        .build();\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n\"class\" : \"AddNamedOperation\",\n\"operationName\" : \"2-hop-with-limit\",\n\"description\" : \"2 hop query with settable limit\",\n\"score\" : 3,\n\"operationChain\" : {\n    \"operations\" : [ {\n    \"class\" : \"uk.gov.gchq.gaffer.operation.impl.get.GetAdjacentIds\",\n    \"includeIncomingOutGoing\" : \"OUTGOING\"\n    }, {\n    \"class\" : \"uk.gov.gchq.gaffer.operation.impl.get.GetAdjacentIds\",\n    \"includeIncomingOutGoing\" : \"OUTGOING\"\n    }, {\n    \"class\" : \"uk.gov.gchq.gaffer.operation.impl.Limit\",\n    \"resultLimit\" : \"${param1}\"\n    } ]\n},\n\"overwriteFlag\" : true,\n\"parameters\" : {\n    \"param1\" : {\n    \"description\" : \"Limit param\",\n    \"defaultValue\" : 1,\n    \"valueClass\" : \"Long\",\n    \"required\" : false\n    }\n},\n\"readAccessRoles\" : [ \"read-user\" ],\n\"writeAccessRoles\" : [ \"write-user\" ]\n}\n```\n\nLANGUAGE: python\nCODE:\n```\ng.AddNamedOperation( \noperation_chain=g.OperationChainDAO( \n    operations=[ \n    g.GetAdjacentIds( \n        include_incoming_out_going=\"OUTGOING\" \n    ), \n    g.GetAdjacentIds( \n        include_incoming_out_going=\"OUTGOING\" \n    ), \n    g.Limit( \n        result_limit=\"${param1}\" \n    ) \n    ] \n), \noperation_name=\"2-hop-with-limit\", \ndescription=\"2 hop query with settable limit\", \nread_access_roles=[ \n    \"read-user\" \n], \nwrite_access_roles=[ \n    \"write-user\" \n], \noverwrite_flag=True, \nscore=3, \nparameters=[ \n    g.NamedOperationParameter( \n    name=\"param1\", \n    value_class=\"java.lang.Long\", \n    description=\"Limit param\", \n    default_value=1, \n    required=False \n    ) \n] \n)\n```\n\n----------------------------------------\n\nTITLE: Generating Elements from Domain Objects using GenerateElements in Java\nDESCRIPTION: This Java snippet shows how to use GenerateElements to create elements from custom domain objects. It uses a DomainObjectGenerator to convert the input objects into Entity and Edge objects.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/generate.md#2025-04-23_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nfinal GenerateElements<Object> operation = new GenerateElements.Builder<>()\n        .input(new DomainObject1(1, 1),\n                new DomainObject2(1, 2, 1))\n        .generator(new DomainObjectGenerator())\n        .build();\n```\n\n----------------------------------------\n\nTITLE: GetWalks with Cardinality Filtering in Java\nDESCRIPTION: Java example of using GetWalks with advanced filtering, including pre-aggregation and post-aggregation filters on cardinality entities. This operation starts from vertex 5 and applies HyperLogLogPlus filtering to limit the walk based on cardinality.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/get.md#2025-04-23_snippet_50\n\nLANGUAGE: java\nCODE:\n```\nfinal GetWalks getWalks = new GetWalks.Builder()\n        .operations(new OperationChain.Builder()\n                        .first(new GetElements.Builder()\n                                .view(new View.Builder()\n                                        .entity(\"cardinality\", new ViewElementDefinition.Builder()\n                                                .preAggregationFilter(new ElementFilter.Builder()\n                                                        .select(\"edgeGroup\")\n                                                        .execute(new IsEqual(CollectionUtil.treeSet(\"edge\")))\n                                                        .build())\n                                                .groupBy()\n                                                .postAggregationFilter(new ElementFilter.Builder()\n                                                        .select(\"hllp\")\n                                                        .execute(new HyperLogLogPlusIsLessThan(2))\n                                                        .build())\n                                                .build())\n                                        .build())\n                                .build())\n                        .then(new GetElements.Builder()\n                                .view(new View.Builder()\n                                        .edges(Lists.newArrayList(\"edge\", \"edge1\"))\n                                        .entities(Lists.newArrayList(\"entity\", \"entity1\"))\n                                        .build())\n                                .inOutType(SeededGraphFilters.IncludeIncomingOutgoingType.INCOMING)\n                                .build())\n                        .build(),\n                new GetElements.Builder()\n                        .view(new View.Builder()\n                                .edges(Lists.newArrayList(\"edge\", \"edge1\"))\n                                .entities(Lists.newArrayList(\"entity\", \"entity1\"))\n                                .build())\n                        .inOutType(SeededGraphFilters.IncludeIncomingOutgoingType.INCOMING)\n                        .build(),\n                new GetElements.Builder()\n                        .view(new View.Builder()\n                                .entities(Lists.newArrayList(\"entity\", \"entity1\"))\n                                .build())\n                        .inOutType(SeededGraphFilters.IncludeIncomingOutgoingType.INCOMING)\n                        .build())\n        .input(new EntitySeed(5))\n        .build();\n```\n\n----------------------------------------\n\nTITLE: Routing Different Operations to Different Graphs in Federated Store\nDESCRIPTION: Example of an operation chain that retrieves elements from one graph (graph1) using EntitySeed and adds them to another graph (graph2) by specifying graph IDs in individual operations rather than the outer chain.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/administration-guide/gaffer-stores/simple-federated/additional-info.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"class\": \"OperationChain\",\n    \"operations\": [\n        {\n            \"class\": \"GetElements\",\n            \"options\": {\n                \"federated.graphIds\": \"graph1\"\n            },\n            \"input\": [\n                {\n                    \"class\": \"EntitySeed\",\n                    \"vertex\": \"1\"\n                }\n            ]\n        },\n        {\n            \"class\": \"AddElements\",\n            \"options\": {\n                \"federated.graphIds\": \"graph2\"\n            }\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Extracting Entity Vertices with ToVertices Operation\nDESCRIPTION: Demonstrates using ToVertices operation to extract entity vertices from GetElements results. The operation chain includes GetElements with EntitySeeds, ToVertices with NONE edge vertices option, and ToSet for deduplication.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/core.md#2025-04-23_snippet_75\n\nLANGUAGE: java\nCODE:\n```\nfinal OperationChain<Set<?>> opChain = new Builder()\n        .first(new GetElements.Builder()\n                .input(new EntitySeed(1), new EntitySeed(2))\n                .view(new View.Builder()\n                        .entity(\"entity\")\n                        .build())\n                .build())\n        .then(new ToVertices.Builder()\n                .edgeVertices(ToVertices.EdgeVertices.NONE)\n                .build())\n        .then(new ToSet<>())\n        .build();\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"OperationChain\",\n  \"operations\" : [ {\n    \"class\" : \"GetElements\",\n    \"input\" : [ {\n      \"class\" : \"EntitySeed\",\n      \"vertex\" : 1\n    }, {\n      \"class\" : \"EntitySeed\",\n      \"vertex\" : 2\n    } ],\n    \"view\" : {\n      \"entities\" : {\n        \"entity\" : { }\n      }\n    }\n  }, {\n    \"class\" : \"ToVertices\",\n    \"edgeVertices\" : \"NONE\"\n  }, {\n    \"class\" : \"uk.gov.gchq.gaffer.operation.impl.output.ToSet\"\n  } ]\n}\n```\n\nLANGUAGE: python\nCODE:\n```\ng.OperationChain(\n  operations=[\n    g.GetElements(\n      view=g.View(\n        entities=[\n          g.ElementDefinition(\n            group=\"entity\"\n          )\n        ],\n        all_edges=False,\n        all_entities=False\n      ),\n      input=[\n        g.EntitySeed(\n          vertex=1\n        ),\n        g.EntitySeed(\n          vertex=2\n        )\n      ]\n    ),\n    g.ToVertices(\n      edge_vertices=\"NONE\"\n    ),\n    g.ToSet()\n  ]\n)\n```\n\n----------------------------------------\n\nTITLE: Using While Operation within GetWalks in Java\nDESCRIPTION: Creates a GetWalks operation that uses a While operation to perform three hops through the graph. The While operation runs GetElements with OUTGOING direction up to three times, starting from vertex 1.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/flow.md#2025-04-23_snippet_15\n\nLANGUAGE: java\nCODE:\n```\nfinal GetWalks operation = new Builder()\n        .input(new EntitySeed(1))\n        .operations(new While.Builder<Iterable<EntityId>, Iterable<? extends EntityId>>()\n                .condition(true)\n                .maxRepeats(3)\n                .operation(new GetElements.Builder()\n                        .inOutType(IncludeIncomingOutgoingType.OUTGOING)\n                        .build())\n                .build())\n        .build();\n```\n\n----------------------------------------\n\nTITLE: Results of Filtering Edges of Type 'edge' with Count Greater Than 2 in JSON\nDESCRIPTION: Results showing the edges that passed the filter condition (group = 'edge' and count > 2) in JSON format. The output includes only one Edge from vertex 1 to vertex 2 with count = 3.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/core.md#2025-04-23_snippet_18\n\nLANGUAGE: json\nCODE:\n```\n[ {\n  \"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n  \"group\" : \"edge\",\n  \"source\" : 1,\n  \"destination\" : 2,\n  \"directed\" : true,\n  \"matchedVertex\" : \"SOURCE\",\n  \"properties\" : {\n    \"count\" : 3\n  }\n} ]\n```\n\n----------------------------------------\n\nTITLE: Extracting Edges from Walks with Map Operation in Java\nDESCRIPTION: Advanced example showing how to extract edges from walks using Map operation with IterableFunction, ExtractWalkEdgesFromHop, and FirstItem. This demonstrates combining GetWalks with Map and ToVertices operations.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/core.md#2025-04-23_snippet_48\n\nLANGUAGE: java\nCODE:\n```\nfinal OperationChain<Set<?>> opChain = new OperationChain.Builder()\n        .first(new GetWalks.Builder()\n                .operations(new GetElements.Builder()\n                        .view(new View.Builder()\n                                .edge(\"edge\")\n                                .build())\n                        .build())\n                .resultsLimit(100)\n                .input(new EntitySeed(1), new EntitySeed(2))\n                .build())\n        .then(new Map.Builder<Iterable<Walk>>()\n                .first(new IterableFunction.Builder<Walk>()\n                        .first(new ExtractWalkEdgesFromHop(0))\n                        .then(new FirstItem<>())\n                        .build())\n                .build())\n        .then(new ToVertices.Builder()\n                .edgeVertices(ToVertices.EdgeVertices.SOURCE)\n                .build())\n        .then(new ToSet<>())\n        .build();\n```\n\n----------------------------------------\n\nTITLE: Filtering Elements with Count Greater Than 2 using Java\nDESCRIPTION: This Java code snippet demonstrates filtering elements that have a 'count' property greater than 2. It uses an OperationChain with a NamedOperation (1-hop) and a Filter operation to select elements based on their count property.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/core.md#2025-04-23_snippet_9\n\nLANGUAGE: java\nCODE:\n```\nfinal OperationChain<Iterable<? extends Element>> opChain = new OperationChain.Builder()\n        .first(new NamedOperation.Builder<EntitySeed, Iterable<? extends Element>>()\n                .name(\"1-hop\")\n                .input(new EntitySeed(1))\n                .build())\n        .then(new Filter.Builder()\n                .globalElements(new ElementFilter.Builder()\n                        .select(\"count\")\n                        .execute(new IsMoreThan(2))\n                        .build())\n                .build())\n        .build();\n```\n\n----------------------------------------\n\nTITLE: Configuring Inner Join with KeyFunctionMatch and FunctionChain in Gaffer (JSON)\nDESCRIPTION: This JSON configuration sets up an inner join operation using KeyFunctionMatch with a FunctionChain in Gaffer. It defines the input entities, specifies GetAllElements as the operation, and uses KeyFunctionMatch with property extraction and increment functions.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/join.md#2025-04-23_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n\"class\" : \"OperationChain\",\n\"operations\" : [ {\n    \"class\" : \"Join\",\n    \"input\" : [{\n    \"class\" : \"Entity\",\n    \"group\" : \"entity\",\n    \"vertex\" : 1,\n    \"properties\" : {\n        \"count\" : 3\n    }\n    }, {\n    \"class\" : \"Entity\",\n    \"group\" : \"entity\",\n    \"vertex\" : 4,\n    \"properties\" : {\n        \"count\" : 1\n    }\n    }, {\n    \"class\" : \"Entity\",\n    \"group\" : \"entity\",\n    \"vertex\" : 5,\n    \"properties\" : {\n        \"count\" : 3\n    }\n    }, {\n    \"class\" : \"Entity\",\n    \"group\" : \"entity\",\n    \"vertex\" : 6,\n    \"properties\" : {\n        \"count\" : 30\n    }\n    }\n    ],\n    \"operation\" : {\n    \"class\" : \"GetAllElements\"\n    },\n    \"matchMethod\" : {\n    \"class\" : \"KeyFunctionMatch\",\n    \"firstKeyFunction\": {\n    \"class\" : \"FunctionChain\",\n    \"functions\" : [ {\n        \"class\" : \"ExtractProperty\",\n        \"name\": \"count\"\n    }, {\n    \"class\" : \"Increment\",\n    \"increment\" : 1\n    }\n    ]\n    },\n    \"secondKeyFunction\": {\n        \"class\": \"ExtractProperty\",\n        \"name\": \"count\"  \n        }\n    },\n    \"matchKey\": \"LEFT\",\n    \"joinType\" : \"INNER\"\n} ]\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a Basic Named Operation in Python\nDESCRIPTION: Creates a Named Operation called '2-hop' using Python, which performs two consecutive GetAdjacentIds operations to traverse two hops outward in a graph.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/administration-guide/named-operations.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ng.AddNamedOperation( \n    operation_chain=g.OperationChainDAO( \n        operations=[ \n            g.GetAdjacentIds( \n                include_incoming_out_going=\"OUTGOING\" \n            ), \n            g.GetAdjacentIds( \n                include_incoming_out_going=\"OUTGOING\" \n            ) \n        ] \n    ), \n    operation_name=\"2-hop\", \n    description=\"2 hop query\", \n    read_access_roles=[ \n        \"read-user\" \n    ], \n    write_access_roles=[ \n        \"write-user\" \n    ], \n    overwrite_flag=True \n)\n```\n\n----------------------------------------\n\nTITLE: Getting Walks with Entities in Gaffer Graph (JSON)\nDESCRIPTION: JSON representation of the GetWalks operation to retrieve paths of length 2, including all entities attached to vertices along the path. This configuration specifies which entity types to include in the query results.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/get.md#2025-04-23_snippet_46\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"GetWalks\",\n  \"input\" : [ {\n    \"class\" : \"EntitySeed\",\n    \"vertex\" : 1\n  } ],\n  \"operations\" : [ {\n    \"class\" : \"OperationChain\",\n    \"operations\" : [ {\n      \"class\" : \"GetElements\",\n      \"view\" : {\n        \"edges\" : {\n          \"edge\" : { }\n        },\n        \"entities\" : {\n          \"entity1\" : { },\n          \"entity\" : { }\n        }\n      },\n      \"includeIncomingOutGoing\" : \"OUTGOING\"\n    } ]\n  }, {\n    \"class\" : \"OperationChain\",\n    \"operations\" : [ {\n      \"class\" : \"GetElements\",\n      \"view\" : {\n        \"edges\" : {\n          \"edge1\" : { }\n        },\n        \"entities\" : {\n          \"entity1\" : { }\n        }\n      },\n      \"includeIncomingOutGoing\" : \"INCOMING\"\n    } ]\n  }, {\n    \"class\" : \"OperationChain\",\n    \"operations\" : [ {\n      \"class\" : \"GetElements\",\n      \"view\" : {\n        \"entities\" : {\n          \"entity1\" : { },\n          \"entity\" : { }\n        }\n      },\n      \"includeIncomingOutGoing\" : \"INCOMING\"\n    } ]\n  } ],\n  \"resultsLimit\" : 1000000\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Edges of Type 'edge' with Count Greater Than 2 using JSON\nDESCRIPTION: This JSON configuration demonstrates filtering specifically for edges of group 'edge' that have a 'count' property greater than 2. It defines an OperationChain with a NamedOperation and a Filter operation targeting edges.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/core.md#2025-04-23_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"OperationChain\",\n  \"operations\" : [ {\n    \"class\" : \"NamedOperation\",\n    \"input\" : [ {\n      \"class\" : \"EntitySeed\",\n      \"class\" : \"EntitySeed\",\n      \"vertex\" : 1\n    } ],\n    \"operationName\" : \"1-hop\"\n  }, {\n    \"class\" : \"Filter\",\n    \"edges\" : {\n      \"edge\" : {\n        \"predicates\" : [ {\n          \"selection\" : [ \"count\" ],\n          \"predicate\" : {\n            \"class\" : \"IsMoreThan\",\n            \"orEqualTo\" : false,\n            \"value\" : 2\n          }\n        } ]\n      }\n    }\n  } ]\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Graph Walks with Additional Operations - Python\nDESCRIPTION: Python implementation for retrieving graph walks of length 2 from vertex 5, with sorting and edge filtering configurations using Gaffer's Python client.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/get.md#2025-04-23_snippet_73\n\nLANGUAGE: python\nCODE:\n```\ng.GetWalks(\n  input=[\n    g.EntitySeed(\n      vertex=5\n    )\n  ],\n  operations=[\n    g.OperationChain(\n      operations=[\n        g.GetElements(\n          view=g.View(\n            edges=[\n              g.ElementDefinition(\n                group=\"edge\"\n              ),\n              g.ElementDefinition(\n                group=\"edge1\"\n              )\n            ],\n            all_edges=False,\n            all_entities=False\n          ),\n          include_incoming_out_going=\"INCOMING\"\n        ),\n        g.Sort(\n          comparators=[\n            g.ElementPropertyComparator(\n              groups=[\n              ],\n              property=\"count\",\n              reversed=False\n            )\n          ],\n          deduplicate=True\n        )\n      ]\n    ),\n    g.OperationChain(\n      operations=[\n        g.GetElements(\n          view=g.View(\n            edges=[\n              g.ElementDefinition(\n                group=\"edge1\"\n              )\n            ],\n            all_edges=False,\n            all_entities=False\n          ),\n          include_incoming_out_going=\"INCOMING\"\n        )\n      ]\n    )\n  ],\n  results_limit=1000000\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Reduce Operation in Gaffer with Java\nDESCRIPTION: Example of using the Reduce operation within an OperationChain to aggregate values using a Sum function. This snippet shows how to combine GetAdjacentIds, ForEach, ToSingletonList, ToVertices and Reduce operations.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/core.md#2025-04-23_snippet_38\n\nLANGUAGE: java\nCODE:\n```\nfinal OperationChain<Iterable<?>> opChain = new OperationChain.Builder()\n        .first(new GetAdjacentIds.Builder()\n                .input(new EntitySeed(1))\n                .build())\n        .then(new ForEach.Builder<>()\n                .operation(new OperationChain.Builder()\n                        .first(new ToSingletonList<EntitySeed>())\n                        .then(new GetAdjacentIds())\n                        .then(new ToVertices())\n                        .then(new Reduce.Builder<>()\n                                .aggregateFunction(new Sum())\n                                .build())\n                        .build())\n                .build())\n        .build();\n```\n\n----------------------------------------\n\nTITLE: Named Operation Configuration in JSON\nDESCRIPTION: JSON configuration for the named operation that defines the operation chain structure, including view filters, transformations, and sorting logic. Specifies the same functionality as the Java implementation but in JSON format.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/administration-guide/named-operations.md#2025-04-23_snippet_19\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"class\" : \"AddNamedOperation\",\n    \"operationName\" : \"frequent-vehicles-in-region\",\n    \"description\" : \"Finds the junctions in a region with the most of an individual vehicle (e.g BUS, CAR) in the year 2000. The input is the region.\",\n    \"operationChain\" : {\n        \"operations\" : [ {\n            \"class\" : \"uk.gov.gchq.gaffer.operation.impl.get.GetAdjacentIds\",\n            \"view\" : {\n                \"edges\" : {\n                    \"RegionContainsLocation\" : { }\n                }\n            }\n        }, {\n            \"class\" : \"uk.gov.gchq.gaffer.operation.impl.get.GetAdjacentIds\",\n            \"view\" : {\n                \"edges\" : {\n                    \"LocationContainsRoad\" : { }\n                }\n            }\n        }, {\n            \"class\" : \"uk.gov.gchq.gaffer.operation.impl.output.ToSet\"\n        }, {\n            \"class\" : \"uk.gov.gchq.gaffer.operation.impl.get.GetAdjacentIds\",\n                \"view\" : {\n                    \"edges\" : {\n                        \"RoadHasJunction\" : { }\n                    }\n                }\n        }, {\n            \"class\" : \"uk.gov.gchq.gaffer.operation.impl.get.GetElements\",\n            \"view\" : {\n                \"entities\" : {\n                    \"JunctionUse\" : {\n                        \"properties\" : [ \"${vehicle}\" ],\n                        \"preAggregationFilterFunctions\" : [ {\n                            \"selection\" : [ \"startDate\", \"endDate\" ],\n                            \"predicate\" : {\n                                \"class\" : \"uk.gov.gchq.koryphe.impl.predicate.range.InDateRangeDual\",\n                                \"start\" : \"2000/01/01\",\n                                \"end\" : \"2001/01/01\"\n                            }\n                        } ],\n                        \"transientProperties\" : {\n                            \"${vehicle}\" : \"Long\"\n                        },\n                        \"transformFunctions\" : [ {\n                            \"selection\" : [ \"countByVehicleType\" ],\n                            \"function\" : {\n                                \"class\" : \"uk.gov.gchq.gaffer.types.function.FreqMapExtractor\",\n                                \"key\" : \"${vehicle}\"\n                            },\n                            \"projection\" : [ \"${vehicle}\" ]\n                        } ]\n                    }\n                },\n                \"globalElements\" : [ {\n                    \"groupBy\" : [ ]\n                } ]\n            },\n            \"includeIncomingOutGoing\" : \"OUTGOING\"\n        }, {\n            \"class\" : \"uk.gov.gchq.gaffer.operation.impl.compare.Sort\",\n            \"comparators\" : [ {\n                \"class\" : \"uk.gov.gchq.gaffer.data.element.comparison.ElementPropertyComparator\",\n                \"property\" : \"${vehicle}\",\n                \"groups\" : [ \"JunctionUse\" ],\n                \"reversed\" : true\n            } ]\n```\n\n----------------------------------------\n\nTITLE: Limiting Elements to a Fixed Number in Gaffer\nDESCRIPTION: This snippet demonstrates creating an OperationChain that gets all elements and then limits the results to 3 elements. The truncate parameter is set to true by default, meaning results will be truncated if they exceed the limit rather than throwing an exception.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/core.md#2025-04-23_snippet_19\n\nLANGUAGE: java\nCODE:\n```\nfinal OperationChain<Iterable<? extends Element>> opChain = new OperationChain.Builder()\n        .first(new GetAllElements())\n        .then(new Limit<>(3))\n        .build();\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"OperationChain\",\n  \"operations\" : [ {\n    \"class\" : \"GetAllElements\"\n  }, {\n    \"class\" : \"Limit\",\n    \"resultLimit\" : 3,\n    \"truncate\" : true\n  } ]\n}\n```\n\nLANGUAGE: python\nCODE:\n```\ng.OperationChain(\n  operations=[\n    g.GetAllElements(),\n    g.Limit(\n      result_limit=3,\n      truncate=True\n    )\n  ]\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Empty GroupBy Globally in Python\nDESCRIPTION: Python implementation of a Gaffer query that applies an empty groupBy to all element groups using the global_elements section of a View. This executes a GetElements operation to retrieve summarized elements connected to 'John'.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/user-guide/query/gaffer-syntax/filtering.md#2025-04-23_snippet_27\n\nLANGUAGE: python\nCODE:\n```\nelements = gc.execute_operation(\n    operation = g.GetElements(\n        input = [g.EntitySeed(vertex = \"John\")],\n        view = g.View(\n            global_elements = g.GlobalViewElementDefinition(\n                group_by = []\n            )\n        )\n    )\n)\n```\n\n----------------------------------------\n\nTITLE: Structuring an OperationChain Request in JSON for Gaffer REST API\nDESCRIPTION: This example demonstrates how to structure an OperationChain request using JSON for Gaffer's REST API. It includes two operations: GetAllElements and Count, showcasing the format for API interactions.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/user-guide/gaffer-basics/what-is-json.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"class\": \"OperationChain\",\n    \"operations\": [\n        {\n            \"class\": \"GetAllElements\"\n        },\n        {\n            \"class\": \"Count\"\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Edges with Visibility Properties in Gaffer (Python)\nDESCRIPTION: Python code for adding edges with visibility properties to a Gaffer graph. This example creates two RoadHasJunction edges with 'private' and 'public' visibility values.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/administration-guide/security/security-guide.md#2025-04-23_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\ng.AddElements( \n  input=[ \n    g.Edge( \n      group=\"RoadHasJunction\", \n      properties={\"count\": 1, \"visibility\": \"private\"}, \n      source=\"1\", \n      destination=\"2\", \n      directed=True \n    ),\n    g.Edge( \n    group=\"RoadHasJunction\", \n    properties={\"count\": 2, \"visibility\": \"public\"}, \n    source=\"1\", \n    destination=\"2\", \n    directed=True \n    )\n  ], \n  skip_invalid_elements=False, \n  validate=True \n)\n```\n\n----------------------------------------\n\nTITLE: Lazy Results Example in Java\nDESCRIPTION: Shows how to handle lazy loading of results in Java using GetAllElements operation, including examples of proper result handling with ToList and cache exports.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/user-guide/query/gaffer-syntax/operations.md#2025-04-23_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nfinal Iterable<? extends Element> elements = graph.execute(new GetAllElements(), getUser());\n```\n\n----------------------------------------\n\nTITLE: Adding a Basic Named Operation in Java\nDESCRIPTION: Creates a Named Operation called '2-hop' using Java, which consists of two GetAdjacentIds operations in sequence to perform a two-hop traversal in a graph.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/administration-guide/named-operations.md#2025-04-23_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nfinal AddNamedOperation operation = new AddNamedOperation.Builder()\n        .operationChain(new OperationChain.Builder()\n                .first(new GetAdjacentIds.Builder()\n                        .inOutType(SeededGraphFilters.IncludeIncomingOutgoingType.OUTGOING)\n                        .build())\n                .then(new GetAdjacentIds.Builder()\n                        .inOutType(SeededGraphFilters.IncludeIncomingOutgoingType.OUTGOING)\n                        .build())\n                .build())\n        .description(\"2 hop query\")\n        .name(\"2-hop\")\n        .readAccessRoles(\"read-user\")\n        .writeAccessRoles(\"write-user\")\n        .overwrite()\n        .build();\n```\n\n----------------------------------------\n\nTITLE: Filtering Edges Using Weight Threshold in Java\nDESCRIPTION: Demonstrates filtering Created edges based on a weight property threshold using a View with PreAggregationFilter in Java. The operation retrieves elements connected to entity 'John' where the weight is greater than 0.4.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/user-guide/query/gaffer-syntax/filtering.md#2025-04-23_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n// Define the View to use\nfinal View viewWithFilters = new View.Builder()\n    .edge(\"Created\", new ViewElementDefinition.Builder()\n            .preAggregationFilter(new ElementFilter.Builder()\n                    .select(\"weight\")\n                    .execute(new IsMoreThan(0.4))\n                    .build())\n            .build())\n    .build();\n\n// Create the operation to execute\nfinal GetElements operation = new GetElements.Builder()\n    .input(new EntitySeed(\"John\"))\n    .view(viewWithFilters)\n    .build();\n\ngraph.execute(operation, user);\n```\n\n----------------------------------------\n\nTITLE: Using While Operation within GetWalks in JSON\nDESCRIPTION: JSON representation of a GetWalks operation that uses a While operation to perform three hops through the graph. The While operation runs GetElements with OUTGOING direction up to three times, starting from vertex 1.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/flow.md#2025-04-23_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"GetWalks\",\n  \"input\" : [ {\n    \"class\" : \"EntitySeed\",\n    \"vertex\" : 1\n  } ],\n  \"operations\" : [ {\n    \"class\" : \"OperationChain\",\n    \"operations\" : [ {\n      \"class\" : \"While\",\n      \"operation\" : {\n        \"class\" : \"GetElements\",\n        \"includeIncomingOutGoing\" : \"OUTGOING\"\n      },\n      \"maxRepeats\" : 3,\n      \"condition\" : true\n    } ]\n  } ],\n  \"resultsLimit\" : 1000000\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Input Elements for Join Operation in Gaffer JSON\nDESCRIPTION: Example input elements used to demonstrate Join operations on a directed graph. Contains Entity objects with vertex and count properties.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/join.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[ {\n    \"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n  \"group\" : \"entity\",\n  \"vertex\" : 1,\n  \"properties\" : {\n    \"count\" : 3\n  }\n}, {\n  \"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n  \"group\" : \"entity\",\n  \"vertex\" : 4,\n  \"properties\" : {\n    \"count\" : 1\n  }\n}, {\n  \"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n  \"group\" : \"entity\",\n  \"vertex\" : 5,\n  \"properties\" : {\n    \"count\" : 3\n  }\n}, {\n  \"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n  \"group\" : \"entity\",\n  \"vertex\" : 6,\n  \"properties\" : {\n    \"count\" : 30\n  }\n} ]\n```\n\n----------------------------------------\n\nTITLE: Configuring OperationChainLimiter in GraphHook\nDESCRIPTION: This JSON snippet shows how to configure the OperationChainLimiter GraphHook in the graphConfig.json file. It assigns scores to various operations, sets authorization scores for different user roles, and configures a score resolver for NamedOperation.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/administration-guide/operation-score.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"class\": \"uk.gov.gchq.gaffer.graph.hook.OperationChainLimiter\",\n    \"opScores\": {\n        \"uk.gov.gchq.gaffer.operation.Operation\": 1,\n        \"uk.gov.gchq.gaffer.operation.impl.add.AddElements\": 2,\n        \"uk.gov.gchq.gaffer.operation.impl.get.GetAllElements\": 5,\n        \"uk.gov.gchq.gaffer.operation.impl.generate.GenerateObjects\": 0\n    },\n    \"authScores\": {\n        \"User\": 2,\n        \"SuperUser\": 5\n    },\n    \"scoreResolvers\": {\n        \"uk.gov.gchq.gaffer.named.operation.NamedOperation\": {\n            \"class\": \"uk.gov.gchq.gaffer.store.operation.resolver.named.NamedOperationScoreResolver\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Right Key Outer Join with ElementMatch in Gaffer\nDESCRIPTION: This code demonstrates how to create an OperationChain that performs a right key outer join using ElementMatch to match elements based on the 'count' property. The join type is set to OUTER and the match key to RIGHT.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/join.md#2025-04-23_snippet_57\n\nLANGUAGE: java\nCODE:\n```\nfinal OperationChain<Iterable<? extends MapTuple>> opChain = new OperationChain.Builder()\n        .first(new Join.Builder<>()\n                .input(inputElements)\n                .operation(new GetAllElements())\n                .joinType(JoinType.OUTER)\n                .matchKey(MatchKey.RIGHT)\n                .matchMethod(new ElementMatch(\"count\"))\n                .build())\n        .build();\n```\n\n----------------------------------------\n\nTITLE: Using Builder Pattern for Limit Operation in Gaffer\nDESCRIPTION: An alternative way to create a Limit operation using the Builder pattern, which allows for more readable and expressive code. This example explicitly sets truncate to true, though this is redundant as it's the default value.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/core.md#2025-04-23_snippet_22\n\nLANGUAGE: java\nCODE:\n```\nfinal OperationChain<Iterable<? extends Element>> opChain = new OperationChain.Builder()\n        .first(new GetAllElements())\n        .then(new Limit.Builder<Element>()\n                .resultLimit(3)\n                .truncate(true)\n                .build())\n        .build();\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"OperationChain\",\n  \"operations\" : [ {\n    \"class\" : \"GetAllElements\"\n  }, {\n    \"class\" : \"Limit\",\n    \"resultLimit\" : 3,\n    \"truncate\" : true\n  } ]\n}\n```\n\nLANGUAGE: python\nCODE:\n```\ng.OperationChain(\n  operations=[\n    g.GetAllElements(),\n    g.Limit(\n      result_limit=3,\n      truncate=True\n    )\n  ]\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Query-time Aggregation in Gaffer using JSON\nDESCRIPTION: JSON representation of a Gaffer query that performs query-time aggregation. It configures a GetElements operation targeting the 'Commit' edge group with an empty groupBy array and a Sum aggregator for the 'added' and 'removed' properties.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/user-guide/query/gaffer-syntax/filtering.md#2025-04-23_snippet_18\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"class\": \"GetElements\",\n    \"input\": [\n        {\n            \"class\": \"EntitySeed\",\n            \"vertex\": \"John\"\n        }\n    ],\n    \"view\": {\n        \"edges\": {\n            \"Commit\": {\n                \"groupBy\" : [ ],\n                \"aggregator\" : {\n                    \"operators\" : [\n                        {\n                            \"selection\" : [ \"added\", \"removed\" ],\n                            \"binaryOperator\" : {\n                                \"class\" : \"Sum\"\n                            }\n                        }\n                    ]\n                }\n            }\n\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Federated Store with Java API\nDESCRIPTION: Java code snippet demonstrating how to create a Federated Store graph programmatically. It builds a Graph object with a specified graph ID and library.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/administration-guide/gaffer-stores/federated-store.md#2025-04-23_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nfinal Graph federatedGraph = new Graph.Builder()\n        .config(new GraphConfig.Builder()\n                .graphId(\"federatedGraph\")\n                .library(graphLibrary) // (1)!\n                .build())\n        .storeProperties(new FederatedStoreProperties())\n        .build();\n```\n\n----------------------------------------\n\nTITLE: Executing Inner Join with KeyFunctionMatch and FunctionChain in Gaffer (Java)\nDESCRIPTION: This Java code demonstrates an inner join operation using KeyFunctionMatch with a FunctionChain in Gaffer. It extracts the 'count' property, increments it for the first key function, and matches it with the original 'count' property.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/join.md#2025-04-23_snippet_7\n\nLANGUAGE: java\nCODE:\n```\nfinal OperationChain<Iterable<? extends MapTuple>> opChain = new OperationChain.Builder()\n        .first(new Join.Builder<>()\n                .input(inputElements)\n                .operation(new GetAllElements())\n                .joinType(JoinType.INNER)\n                .matchKey(MatchKey.LEFT)\n                .matchMethod(new KeyFunctionMatch.Builder()\n                    .firstKeyFunction(new FunctionChain(new ExtractProperty(\"count\"), new Increment(1)))\n                    .secondKeyFunction(new ExtractProperty(\"count\"))\n                    .build())\n                .build())\n        .build();\n```\n\n----------------------------------------\n\nTITLE: Generating Elements from Strings using GenerateElements in Java\nDESCRIPTION: This snippet demonstrates how to use the GenerateElements operation to create elements from input strings. It uses an ElementGenerator to convert the input strings into Entity and Edge objects.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/generate.md#2025-04-23_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nfinal GenerateElements<String> operation = new GenerateElements.Builder<String>()\n        .input(\"1,1\", \"1,2,1\")\n        .generator(new ElementGenerator())\n        .build();\n```\n\n----------------------------------------\n\nTITLE: Property Selection and Transformation in Gaffer Queries\nDESCRIPTION: Shows how to select and transform specific properties in query results using concatenation. Combines source vertex and count properties with a separator.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/get.md#2025-04-23_snippet_21\n\nLANGUAGE: java\nCODE:\n```\nfinal Concat concat = new Concat();\nconcat.setSeparator(\"|\");\nfinal GetElements operation = new GetElements.Builder()\n        .input(new EntitySeed(2))\n        .view(new View.Builder()\n                .edge(\"edge\", new ViewElementDefinition.Builder()\n                        .transientProperty(\"vertex|count\", String.class)\n                        .properties(\"vertex|count\")\n                        .transformer(new ElementTransformer.Builder()\n                                .select(IdentifierType.SOURCE.name(), \"count\")\n                                .execute(concat)\n                                .project(\"vertex|count\")\n                                .build())\n                        .build())\n                .build())\n        .build();\n```\n\nLANGUAGE: python\nCODE:\n```\ng.GetElements(\nview=g.View(\n    edges=[\n    g.ElementDefinition(\n        group=\"edge\",\n        transient_properties={'vertex|count': 'java.lang.String'},\n        transform_functions=[\n        g.FunctionContext(\n            selection=[\n            \"SOURCE\",\n            \"count\"\n            ],\n            function=g.Concat(\n            separator=\"|\"\n            ),\n            projection=[\n            \"vertex|count\"\n            ]\n        )\n        ],\n        properties=[\n        \"vertex|count\"\n        ]\n    )\n    ],\n    all_edges=False,\n    all_entities=False\n),\ninput=[\n    g.EntitySeed(\n    vertex=2\n    )\n]\n)\n```\n\n----------------------------------------\n\nTITLE: Filtering Edges in Gaffer Query (Python)\nDESCRIPTION: This Python snippet demonstrates how to create a GetAllElements operation that filters to return only edges using the 'all_edges' flag in the View.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/user-guide/query/gaffer-syntax/filtering.md#2025-04-23_snippet_11\n\nLANGUAGE: python\nCODE:\n```\ng.GetAllElements(\n    view=g.View(\n        all_edges=True\n    )\n)\n```\n\n----------------------------------------\n\nTITLE: Exporting Multiple Results to Cache with JSON Operation Chain\nDESCRIPTION: JSON representation of an OperationChain that exports graph elements to the Gaffer result cache with separate keys for edges and entities. The chain demonstrates fetching all elements, exporting them to cache, and retrieving multiple exports at once.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/export.md#2025-04-23_snippet_23\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"class\" : \"OperationChain\",\n    \"operations\" : [ {\n        \"class\" : \"GetAllElements\"\n    }, {\n        \"class\" : \"ExportToGafferResultCache\",\n        \"key\" : \"edges\"\n    }, {\n        \"class\" : \"DiscardOutput\"\n    }, {\n        \"class\" : \"GetAllElements\"\n    }, {\n        \"class\" : \"ExportToGafferResultCache\",\n        \"key\" : \"entities\"\n    }, {\n        \"class\" : \"DiscardOutput\"\n    }, {\n        \"class\" : \"GetExports\",\n        \"getExports\" : [ {\n            \"class\" : \"GetGafferResultCacheExport\",\n            \"key\" : \"edges\"\n        }, {\n            \"class\" : \"GetGafferResultCacheExport\",\n            \"key\" : \"entities\"\n        } ]\n    } ]\n}\n```\n\n----------------------------------------\n\nTITLE: Using ToSingletonList in an Operation Chain in Python\nDESCRIPTION: Python implementation of a complex operation chain that uses ToSingletonList to process graph adjacency relationships. Demonstrates the pythonic structure of nested Gaffer operations.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/core.md#2025-04-23_snippet_67\n\nLANGUAGE: python\nCODE:\n```\ng.OperationChain(\n  operations=[\n    g.GetAdjacentIds(\n      input=[\n        g.EntitySeed(\n          vertex=1\n        )\n      ]\n    ),\n    g.ForEach(\n      operation=g.OperationChain(\n        operations=[\n          g.ToSingletonList(),\n          g.GetAdjacentIds(),\n          g.ToVertices()\n        ]\n      )\n    )\n  ]\n)\n```\n\n----------------------------------------\n\nTITLE: Accessing Cache Service in Java\nDESCRIPTION: Code snippet showing how to get access to the cache service using CacheServiceLoader. This is the primary way to access short term data storage in Gaffer components.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/development-guide/project-structure/components/cache.md#2025-04-23_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nCacheServiceLoader.getService();\n```\n\n----------------------------------------\n\nTITLE: Fetching Adjacent IDs Along Outbound Edges in Gaffer\nDESCRIPTION: This snippet shows how to get adjacent IDs along outbound edges from vertex 2 using the GetAdjacentIds operation in Gaffer. It includes implementations in Java, JSON, and Python, along with the expected results.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/get.md#2025-04-23_snippet_29\n\nLANGUAGE: java\nCODE:\n```\nfinal GetAdjacentIds operation = new GetAdjacentIds.Builder()\n        .input(new EntitySeed(2))\n        .inOutType(IncludeIncomingOutgoingType.OUTGOING)\n        .build();\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n\"class\" : \"GetAdjacentIds\",\n\"input\" : [ {\n    \"class\" : \"EntitySeed\",\n    \"vertex\" : 2\n} ],\n\"includeIncomingOutGoing\" : \"OUTGOING\"\n}\n```\n\nLANGUAGE: python\nCODE:\n```\ng.GetAdjacentIds(\ninput=[\n    g.EntitySeed(\n    vertex=2\n    )\n],\ninclude_incoming_out_going=\"OUTGOING\"\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Full Left Join with KeyFunctionMatch in Python\nDESCRIPTION: This Python code creates an OperationChain for a full left join using KeyFunctionMatch in Gaffer. It defines a FunctionChain with ExtractProperty and Increment for the first key function.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/join.md#2025-04-23_snippet_33\n\nLANGUAGE: python\nCODE:\n```\ng.OperationChain( \noperations=[ \n    g.Join( \n        operation=g.GetAllElements(), \n        match_method=g.KeyFunctionMatch(\n            first_key_function=g.FunctionChain([\n                g.ExtractProperty(\"count\"),\n                g.Increment(increment=1)\n                ]),\n            second_key_function=g.ExtractProperty(\"count\")\n        ),\n        input=[ \n            g.Entity( \n            group=\"entity\", \n            properties={\"count\": 3}, \n            vertex=1\n            ), \n            g.Entity( \n            group=\"entity\", \n            properties={\"count\": 1}, \n            vertex=4 \n            ), \n            g.Entity( \n            group=\"entity\", \n            properties={\"count\": 3}, \n            vertex=5 \n            ), \n            g.Entity( \n            group=\"entity\", \n            properties={\"count\": 30}, \n            vertex=6 \n            ) \n    ], \n    match_key=\"LEFT\", \n    join_type=\"FULL\" \n    ) \n] \n) \n```\n\n----------------------------------------\n\nTITLE: Retrieving Graph Walks with Additional Operations - JSON\nDESCRIPTION: JSON configuration for getting walks of length 2 starting from vertex 5, including sorting by count property and edge filtering specifications.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/get.md#2025-04-23_snippet_72\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"GetWalks\",\n  \"input\" : [ {\n    \"class\" : \"EntitySeed\",\n    \"vertex\" : 5\n  } ],\n  \"operations\" : [ {\n    \"class\" : \"OperationChain\",\n    \"operations\" : [ {\n      \"class\" : \"GetElements\",\n      \"view\" : {\n        \"edges\" : {\n          \"edge\" : { },\n          \"edge1\" : { }\n        }\n      },\n      \"includeIncomingOutGoing\" : \"INCOMING\"\n    }, {\n      \"class\" : \"Sort\",\n      \"comparators\" : [ {\n        \"class\" : \"ElementPropertyComparator\",\n        \"property\" : \"count\",\n        \"groups\" : [ ],\n        \"reversed\" : false\n      } ],\n      \"deduplicate\" : true\n    } ]\n  }, {\n    \"class\" : \"OperationChain\",\n    \"operations\" : [ {\n      \"class\" : \"GetElements\",\n      \"view\" : {\n        \"edges\" : {\n          \"edge1\" : { }\n        }\n      },\n      \"includeIncomingOutGoing\" : \"INCOMING\"\n    } ]\n  } ],\n  \"resultsLimit\" : 1000000\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Graph Elements with Gaffer in Python\nDESCRIPTION: This snippet shows how to create entities and edges in a graph using Gaffer's Python API. It demonstrates setting properties, vertices, and edge directions.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/join.md#2025-04-23_snippet_65\n\nLANGUAGE: python\nCODE:\n```\nproperties={'count': 1},\nvertex=4\n),\ng.Entity(\ngroup=\"entity\",\nproperties={'count': 3},\nvertex=5\n),\ng.Entity(\ngroup=\"entity\",\nproperties={'count': 30},\nvertex=6\n)\n],\nmatch_key=\"RIGHT\",\njoin_type=\"OUTER\"\n)\n]\n```\n\n----------------------------------------\n\nTITLE: Basic Element Query\nDESCRIPTION: GetElements operation to retrieve entities and edges associated with a specific vertex ID\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/development-guide/example-deployment/using-the-api.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"class\": \"GetElements\",\n    \"input\": [\n        {\n            \"class\": \"EntitySeed\",\n            \"vertex\": \"v1\"\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Results of Using While within GetWalks in JSON (Partial)\nDESCRIPTION: The JSON output from running the GetWalks operation with a While operation showing the detailed walk results including edges and entities. This represents a detailed view of the graph traversal with all properties.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/flow.md#2025-04-23_snippet_19\n\nLANGUAGE: json\nCODE:\n```\n[ {\n  \"edges\" : [ [ {\n    \"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n    \"group\" : \"edge\",\n    \"source\" : 1,\n    \"destination\" : 5,\n    \"directed\" : true,\n    \"matchedVertex\" : \"SOURCE\",\n    \"properties\" : {\n      \"count\" : 6\n    }\n  } ], [ {\n    \"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n    \"group\" : \"edge1\",\n    \"source\" : 5,\n    \"destination\" : 6,\n    \"directed\" : true,\n    \"matchedVertex\" : \"SOURCE\",\n    \"properties\" : {\n      \"count\" : 11\n    }\n  } ], [ {\n    \"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n    \"group\" : \"edge1\",\n    \"source\" : 6,\n    \"destination\" : 3,\n    \"directed\" : true,\n    \"matchedVertex\" : \"SOURCE\",\n    \"properties\" : {\n      \"count\" : 9\n    }\n  } ] ],\n  \"entities\" : [ {\n    \"1\" : [ {\n      \"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n      \"group\" : \"entity1\",\n      \"vertex\" : 1,\n      \"properties\" : {\n        \"count\" : 3\n      }\n    }, {\n      \"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n      \"group\" : \"cardinality\",\n      \"vertex\" : 1,\n      \"properties\" : {\n        \"hllp\" : {\n          \"com.clearspring.analytics.stream.cardinality.HyperLogLogPlus\" : {\n            \"hyperLogLogPlus\" : {\n              \"hyperLogLogPlusSketchBytes\" : \"/////gUFAQH9Fg==\",\n              \"cardinality\" : 1\n            }\n          }\n        },\n        \"count\" : 1,\n        \"edgeGroup\" : {\n          \"java.util.TreeSet\" : [ \"edge\" ]\n        }\n      }\n    }, {\n      \"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n      \"group\" : \"cardinality\",\n      \"vertex\" : 1,\n      \"properties\" : {\n        \"hllp\" : {\n          \"com.clearspring.analytics.stream.cardinality.HyperLogLogPlus\" : {\n            \"hyperLogLogPlus\" : {\n              \"hyperLogLogPlusSketchBytes\" : \"/////gUFAQH7Cw==\",\n              \"cardinality\" : 1\n            }\n          }\n        },\n        \"count\" : 1,\n        \"edgeGroup\" : {\n          \"java.util.TreeSet\" : [ \"edge1\" ]\n        }\n      }\n    } ]\n  }, {\n    \"5\" : [ {\n      \"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n      \"group\" : \"entity1\",\n      \"vertex\" : 5,\n      \"properties\" : {\n        \"count\" : 3\n      }\n    }, {\n      \"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n      \"group\" : \"cardinality\",\n      \"vertex\" : 5,\n      \"properties\" : {\n        \"hllp\" : {\n          \"com.clearspring.analytics.stream.cardinality.HyperLogLogPlus\" : {\n            \"hyperLogLogPlus\" : {\n              \"hyperLogLogPlusSketchBytes\" : \"/////gUFAQH7FA==\",\n              \"cardinality\" : 1\n            }\n          }\n        },\n        \"count\" : 1,\n        \"edgeGroup\" : {\n          \"java.util.TreeSet\" : [ \"edge\" ]\n        }\n      }\n    }, {\n      \"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n      \"group\" : \"cardinality\",\n      \"vertex\" : 5,\n      \"properties\" : {\n        \"hllp\" : {\n          \"com.clearspring.analytics.stream.cardinality.HyperLogLogPlus\" : {\n            \"hyperLogLogPlus\" : {\n              \"hyperLogLogPlusSketchBytes\" : \"/////gUFAQP9A/4HgBI=\",\n              \"cardinality\" : 3\n            }\n          }\n        },\n        \"count\" : 3,\n        \"edgeGroup\" : {\n          \"java.util.TreeSet\" : [ \"edge1\" ]\n        }\n      }\n    } ]\n  }, {\n    \"6\" : [ {\n      \"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n      \"group\" : \"cardinality\",\n      \"vertex\" : 6,\n      \"properties\" : {\n        \"hllp\" : {\n          \"com.clearspring.analytics.stream.cardinality.HyperLogLogPlus\" : {\n            \"hyperLogLogPlus\" : {\n              \"hyperLogLogPlusSketchBytes\" : \"/////gUFAQP9CPoDhgo=\",\n              \"cardinality\" : 3\n            }\n          }\n        },\n        \"count\" : 3,\n        \"edgeGroup\" : {\n          \"java.util.TreeSet\" : [ \"edge1\" ]\n        }\n      }\n    }, {\n      \"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n      \"group\" : \"entity1\",\n      \"vertex\" : 6,\n      \"properties\" : {\n        \"count\" : 3\n      }\n    } ]\n  }, {\n    \"3\" : [ ]\n  } ]\n}, {\n  \"edges\" : [ [ {\n    \"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n    \"group\" : \"edge\",\n    \"source\" : 1,\n    \"destination\" : 5,\n    \"directed\" : true,\n    \"matchedVertex\" : \"SOURCE\",\n    \"properties\" : {\n      \"count\" : 6\n    }\n  } ], [ {\n    \"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n    \"group\" : \"edge1\",\n    \"source\" : 5,\n    \"destination\" : 6,\n    \"directed\" : true,\n    \"matchedVertex\" : \"SOURCE\",\n    \"properties\" : {\n      \"count\" : 11\n    }\n```\n\n----------------------------------------\n\nTITLE: Fetching Entities and Edges by ID in Java\nDESCRIPTION: Demonstrates how to use GetElements to retrieve entities and edges by specifying entity and edge seeds. This example fetches data related to entity ID 2 and edge ID 2 to 3.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/get.md#2025-04-23_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nfinal GetElements operation = new GetElements.Builder()\n        .input(new EntitySeed(2), new EdgeSeed(2, 3, DirectedType.EITHER))\n        .build();\n```\n\n----------------------------------------\n\nTITLE: GetWalks Operation in Python\nDESCRIPTION: This Python code constructs the same GetWalks operation using the Gaffer Python client. It defines the operation with two GetElements steps, each with specific edge groups and directions.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/get.md#2025-04-23_snippet_58\n\nLANGUAGE: python\nCODE:\n```\ng.GetWalks(\n  input=[\n    g.EntitySeed(\n      vertex=1\n    )\n  ],\n  operations=[\n    g.OperationChain(\n      operations=[\n        g.GetElements(\n          view=g.View(\n            edges=[\n              g.ElementDefinition(\n                group=\"edge\"\n              )\n            ],\n            all_edges=False,\n            all_entities=False\n          ),\n          include_incoming_out_going=\"OUTGOING\"\n        )\n      ]\n    ),\n    g.OperationChain(\n      operations=[\n        g.GetElements(\n          view=g.View(\n            edges=[\n              g.ElementDefinition(\n                group=\"edge1\"\n              )\n            ],\n            all_edges=False,\n            all_entities=False\n          ),\n          include_incoming_out_going=\"INCOMING\"\n        )\n      ]\n    )\n  ]\n)\n```\n\n----------------------------------------\n\nTITLE: Using ConcatenateMergeFunction with GetSchema Operation in Gaffer Federated Store\nDESCRIPTION: This example demonstrates how to use the ConcatenateMergeFunction with the GetSchema operation in a Federated Store. It retrieves and concatenates schemas from two graphs (GraphA and GraphB).\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/federated-operation.md#2025-04-23_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"class\": \"uk.gov.gchq.gaffer.federatedstore.operation.FederatedOperation\",\n    \"operation\": {\n        \"class\": \"GetSchema\"\n    },\n    \"graphIds\": [\"GraphA\",\"GraphB\"],\n    \"mergeFunction\": {\n        \"class\": \"uk.gov.gchq.gaffer.federatedstore.util.ConcatenateMergeFunction\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Transformed Results in Gaffer\nDESCRIPTION: Example showing the results of the transformation operation in both Java and JSON formats. The output includes the original properties along with the newly created transient 'minutes' property.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/user-guide/query/gaffer-syntax/filtering.md#2025-04-23_snippet_16\n\nLANGUAGE: java\nCODE:\n```\nEdge[source=\"John\",destination=2,directed=true,matchedVertex=SOURCE,group=Created,properties=Properties[weight=<java.lang.Float>0.6,hours=<java.lang.Integer>800,minutes=<java.lang.Integer>48000]]\nEdge[source=\"John\",destination=1,directed=true,matchedVertex=SOURCE,group=Created,properties=Properties[weight=<java.lang.Float>0.2,hours=<java.lang.Integer>100,minutes=<java.lang.Integer>6000]]\nEntity[vertex=\"John\",group=Person,properties=Properties[age=<java.lang.Integer>34]]\n```\n\nLANGUAGE: json\nCODE:\n```\n[\n    {\n        \"class\": \"uk.gov.gchq.gaffer.data.element.Edge\",\n        \"group\": \"Created\",\n        \"source\": \"John\",\n        \"destination\": \"2\",\n        \"directed\": true,\n        \"matchedVertex\": \"SOURCE\",\n        \"properties\": {\n            \"weight\": 0.2,\n            \"hours\": 800,\n            \"minutes\": 48000\n        }\n    },\n    {\n        \"class\": \"uk.gov.gchq.gaffer.data.element.Edge\",\n        \"group\": \"Created\",\n        \"source\": \"John\",\n        \"destination\": \"1\",\n        \"directed\": true,\n        \"matchedVertex\": \"SOURCE\",\n        \"properties\": {\n            \"weight\": 0.6,\n            \"hours\": 100,\n            \"minutes\": 6000\n        }\n    },\n    {\n        \"class\": \"uk.gov.gchq.gaffer.data.element.Entity\",\n        \"group\": \"Person\",\n        \"vertex\": \"John\",\n        \"properties\": {\n            \"age\": 34\n        }\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Retrieving Elements Between Entity Seeds in Gaffer\nDESCRIPTION: This example demonstrates how to use GetElementsInRanges to retrieve all elements with vertices in the range from entity 1 to entity 4. The operation takes a pair of EntitySeed objects that define the range boundaries.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/accumulo.md#2025-04-23_snippet_18\n\nLANGUAGE: java\nCODE:\n```\nfinal GetElementsInRanges operation = new GetElementsInRanges.Builder()\n        .input(new Pair<>(new EntitySeed(1), new EntitySeed(4)))\n        .build();\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"GetElementsInRanges\",\n  \"input\" : [ {\n    \"class\" : \"Pair\",\n    \"first\" : {\n      \"EntitySeed\" : {\n        \"class\" : \"EntitySeed\",\n        \"vertex\" : 1\n      }\n    },\n    \"second\" : {\n      \"EntitySeed\" : {\n        \"class\" : \"EntitySeed\",\n        \"vertex\" : 4\n      }\n    }\n  } ]\n}\n```\n\nLANGUAGE: python\nCODE:\n```\ng.GetElementsInRanges(\n  input=[\n    g.SeedPair(\n      first=g.EntitySeed(\n        vertex=1\n      ),\n      second=g.EntitySeed(\n        vertex=4\n      )\n    )\n  ]\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Right Key Outer Join with KeyFunctionMatch in Gaffer\nDESCRIPTION: Creates an OperationChain that performs a right key outer join using KeyFunctionMatch with FunctionChain. This example matches elements by comparing the 'count' property of elements from the first side (incremented by 1) with the 'count' property of elements from the second side.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/join.md#2025-04-23_snippet_53\n\nLANGUAGE: java\nCODE:\n```\nfinal OperationChain<Iterable<? extends MapTuple>> opChain = new OperationChain.Builder()\n        .first(new Join.Builder<>()\n                .input(inputElements)\n                .operation(new GetAllElements())\n                .joinType(JoinType.OUTER)\n                .matchKey(MatchKey.RIGHT)\n                .flatten(false)\n                .matchMethod(new KeyFunctionMatch.Builder()\n                    .firstKeyFunction(new FunctionChain(new ExtractProperty(\"count\"), new Increment(1)))\n                    .secondKeyFunction(new ExtractProperty(\"count\"))\n                    .build())\n                .build())\n        .build();\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n\"class\" : \"OperationChain\",\n\"operations\" : [ {\n    \"class\" : \"Join\",\n    \"input\" : [{\n    \"class\" : \"Entity\",\n    \"group\" : \"entity\",\n    \"vertex\" : 1,\n    \"properties\" : {\n        \"count\" : 3\n    }\n    }, {\n    \"class\" : \"Entity\",\n    \"group\" : \"entity\",\n    \"vertex\" : 4,\n    \"properties\" : {\n        \"count\" : 1\n    }\n    }, {\n    \"class\" : \"Entity\",\n    \"group\" : \"entity\",\n    \"vertex\" : 5,\n    \"properties\" : {\n        \"count\" : 3\n    }\n    }, {\n    \"class\" : \"Entity\",\n    \"group\" : \"entity\",\n    \"vertex\" : 6,\n    \"properties\" : {\n        \"count\" : 30\n    }\n    }\n    ],\n    \"operation\" : {\n    \"class\" : \"GetAllElements\"\n    },\n    \"matchMethod\" : {\n    \"class\" : \"KeyFunctionMatch\",\n    \"firstKeyFunction\": {\n    \"class\" : \"FunctionChain\",\n    \"functions\" : [ {\n        \"class\" : \"ExtractProperty\",\n        \"name\": \"count\"\n    }, {\n    \"class\" : \"Increment\",\n    \"increment\" : 1\n    }\n    ]\n    },\n    \"secondKeyFunction\": {\n        \"class\": \"ExtractProperty\",\n        \"name\": \"count\"  \n        }\n    },\n    \"matchKey\": \"RIGHT\",\n    \"flatten\": false,\n    \"joinType\" : \"OUTER\"\n} ]\n}\n```\n\nLANGUAGE: python\nCODE:\n```\ng.OperationChain( \noperations=[ \n    g.Join( \n    operation=g.GetAllElements(), \n    match_method=g.KeyFunctionMatch(\n        first_key_function=g.FunctionChain([\n            g.ExtractProperty(\"count\"),\n            g.Increment(increment=1)\n            ]),\n        second_key_function=g.ExtractProperty(\"count\")\n        ), \n    input=[ \n        g.Entity( \n        group=\"entity\", \n\n```\n\n----------------------------------------\n\nTITLE: Filtering Edges Using Weight Threshold in JSON\nDESCRIPTION: JSON representation of the GetElements operation with View filtering for edges where weight is greater than 0.4.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/user-guide/query/gaffer-syntax/filtering.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"class\": \"GetElements\",\n    \"input\": [\n        {\n            \"class\": \"EntitySeed\",\n            \"vertex\": \"John\"\n        }\n    ],\n    \"view\": {\n        \"edges\": {\n            \"Created\": {\n                \"preAggregationFilterFunctions\": [\n                    {\n                        \"selection\": [\n                            \"weight\"\n                        ],\n                        \"predicate\": {\n                            \"class\": \"IsMoreThan\",\n                            \"orEqualTo\": false,\n                            \"value\": {\n                                \"Float\": 0.4\n                            }\n                        }\n                    }\n                ]\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing While Operation in Python\nDESCRIPTION: This Python code configures a While operation in Gaffer. It sets up conditional logic, defines the operation to get adjacent IDs, and specifies input and maximum repeats.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/flow.md#2025-04-23_snippet_23\n\nLANGUAGE: python\nCODE:\n```\ng.While( \n  max_repeats=20, \n  input=[ \n    g.EntitySeed( \n      vertex=1 \n    ) \n  ], \n  operation=g.GetAdjacentIds( \n    include_incoming_out_going=\"OUTGOING\" \n  ), \n  conditional=g.Conditional( \n    predicate=g.Not( \n      predicate=g.CollectionContains( \n        value=g.EntitySeed( \n          vertex=7 \n        ) \n      ) \n    ), \n    transform=g.ToSet() \n  ) \n)\n```\n\n----------------------------------------\n\nTITLE: Exporting Elements to a Preconfigured Graph in Java\nDESCRIPTION: Operation chain that retrieves all edges with group 'edge' and exports them to a preconfigured Gaffer graph with ID 'graph2'. The graph must already exist in the GraphLibrary, and the user must have the required authorizations.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/export.md#2025-04-23_snippet_30\n\nLANGUAGE: java\nCODE:\n```\nfinal OperationChain<Iterable<? extends Element>> opChain =\n        new OperationChain.Builder()\n                .first(new GetAllElements.Builder()\n                        .view(new View.Builder()\n                                .edge(\"edge\")\n                                .build())\n                        .build())\n                .then(new ExportToOtherAuthorisedGraph.Builder()\n                        .graphId(\"graph2\")\n                        .build())\n                .build();\n```\n\n----------------------------------------\n\nTITLE: Fetching Entities and Edges Related to Vertex in Java\nDESCRIPTION: Demonstrates how to use GetElements to retrieve entities and edges related to a specific vertex. This example fetches all elements connected to vertex 2.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/get.md#2025-04-23_snippet_7\n\nLANGUAGE: java\nCODE:\n```\nfinal GetElements operation = new GetElements.Builder()\n        .input(new EntitySeed(2))\n        .build();\n```\n\n----------------------------------------\n\nTITLE: Filtering Related Edges with Multiple Conditions\nDESCRIPTION: Demonstrates fetching edges related to vertex 2 with complex filtering conditions using Or predicates. Filters edges where source is less than 2 or destination is more than 3.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/get.md#2025-04-23_snippet_20\n\nLANGUAGE: java\nCODE:\n```\nfinal GetElements operation = new GetElements.Builder()\n        .input(new EntitySeed(2))\n        .view(new View.Builder()\n                .edge(\"edge\", new ViewElementDefinition.Builder()\n                        .preAggregationFilter(\n                                new ElementFilter.Builder()\n                                        .select(IdentifierType.SOURCE.name(), IdentifierType.DESTINATION.name())\n                                        .execute(new Or.Builder<>()\n                                                .select(0)\n                                                .execute(new IsLessThan(2))\n                                                .select(1)\n                                                .execute(new IsMoreThan(3))\n                                                .build())\n                                        .build())\n                        .build())\n                .build())\n        .build();\n```\n\nLANGUAGE: python\nCODE:\n```\ng.GetElements(\nview=g.View(\n    edges=[\n    g.ElementDefinition(\n        group=\"edge\",\n        pre_aggregation_filter_functions=[\n        g.PredicateContext(\n            selection=[\n            \"SOURCE\",\n            \"DESTINATION\"\n            ],\n            predicate=g.Or(\n            predicates=[\n                g.NestedPredicate(\n                selection=[\n                    0\n                ],\n                predicate=g.IsLessThan(\n                    value=2,\n                    or_equal_to=False\n                )\n                ),\n                g.NestedPredicate(\n                selection=[\n                    1\n                ],\n                predicate=g.IsMoreThan(\n                    value=3,\n                    or_equal_to=False\n                )\n                )\n            ]\n            )\n        )\n        ]\n    )\n    ],\n    all_edges=False,\n    all_entities=False\n),\ninput=[\n    g.EntitySeed(\n    vertex=2\n    )\n]\n)\n```\n\n----------------------------------------\n\nTITLE: Filtering Vertices by Group and Properties in OpenCypher\nDESCRIPTION: Demonstrates filtering vertices based on group (label) and property conditions with string matching.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/user-guide/query/opencypher.md#2025-04-23_snippet_2\n\nLANGUAGE: cypher\nCODE:\n```\nMATCH (n:person) WHERE n.age > toInteger(25) AND n.`full-name` CONTAINS 'John' RETURN n\n```\n\nLANGUAGE: groovy\nCODE:\n```\ng.V().as('n').hasLabel('person').has('full-name', containing('John')).where(__.constant(25d).map(cypherToInteger()).is(neq('  cypher.null')).as('  GENERATED1').select('n').values('age').where(gt('  GENERATED1'))).select('n').project('n').by(__.choose(neq('  cypher.null'), __.valueMap().with('~tinkerpop.valueMap.tokens'))).toList()\n```\n\n----------------------------------------\n\nTITLE: Exporting and Retrieving Elements using GetSetExport in Python\nDESCRIPTION: This Python code demonstrates how to use GetAllElements, ExportToSet, and GetSetExport operations in Gaffer to export and retrieve graph elements. It exports edges and entities to separate sets, then retrieves them using GetSetExport.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/export.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ng.GetAllElements(),\ng.ExportToSet(\n    key=\"edges\"\n),\ng.DiscardOutput(),\ng.GetAllElements(),\ng.ExportToSet(\n    key=\"entities\"\n),\ng.DiscardOutput(),\ng.GetExports(\n    get_exports=[\n        g.GetSetExport(\n            key=\"edges\",\n            start=0\n        ),\n        g.GetSetExport(\n            key=\"entities\",\n            start=0\n        )\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Full Left Join with ElementMatch in Python\nDESCRIPTION: This Python code shows how to create an OperationChain for a full left join using ElementMatch in Gaffer. It sets up the Join operation with input entities, match method, and join parameters.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/join.md#2025-04-23_snippet_30\n\nLANGUAGE: python\nCODE:\n```\ng.OperationChain( \noperations=[ \n    g.Join( \n    operation=g.GetAllElements(), \n    match_method=g.ElementMatch(), \n    input=[ \n        g.Entity( \n        group=\"entity\", \n        properties={'count': 3}, \n        vertex=1 \n        ), \n        g.Entity( \n        group=\"entity\", \n        properties={'count': 1}, \n        vertex=4 \n        ), \n        g.Entity( \n        group=\"entity\", \n        properties={'count': 3}, \n        vertex=5 \n        ), \n        g.Entity( \n        group=\"entity\", \n        properties={'count': 30}, \n        vertex=6 \n        ) \n    ], \n    match_key=\"LEFT\", \n    join_type=\"FULL\" \n    ) \n] \n)\n```\n\n----------------------------------------\n\nTITLE: Setting a Variable in Gaffer Context\nDESCRIPTION: Example of using the SetVariable operation to store a variable in the Gaffer operation context map. This operation takes a variable name and an input value to store as a key-value pair.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/core.md#2025-04-23_snippet_93\n\nLANGUAGE: java\nCODE:\n```\nfinal SetVariable op = new SetVariable.Builder()\n        .variableName(\"varName\")\n        .input(5)\n        .build();\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"class\" : \"SetVariable\",\n    \"variableName\": \"varName\",\n    \"input\": 5\n}\n```\n\n----------------------------------------\n\nTITLE: Property Transformation and Projection in OpenCypher\nDESCRIPTION: Shows how to transform and project vertex properties using mathematical operations and string functions.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/user-guide/query/opencypher.md#2025-04-23_snippet_3\n\nLANGUAGE: cypher\nCODE:\n```\nMATCH (n) RETURN (n.age * 1000), reverse(n.name)\n```\n\nLANGUAGE: groovy\nCODE:\n```\ng.V().as('n').project('(n.age * 1000)', 'reverse(n.name)').by(__.constant(1000).as('__GENERATED1').select('n').choose(neq('  cypher.null'), __.choose(__.values('age'), __.values('age'), __.constant('  cypher.null'))).choose(__.or(__.is(eq('  cypher.null')), __.select('__GENERATED1').is(eq('  cypher.null'))), __.constant('  cypher.null'), __.math('_ * __GENERATED1'))).by(__.choose(neq('  cypher.null'), __.choose(__.values('name'), __.values('name'), __.constant('  cypher.null'))).map(cypherReverse())).toList()\n```\n\n----------------------------------------\n\nTITLE: Querying Summarized Edges in Gaffer (Java, JSON, Python)\nDESCRIPTION: Demonstrates how to query summarized edges in Gaffer without grouping by any properties, effectively aggregating all John's commits regardless of date.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/user-guide/query/gaffer-syntax/filtering.md#2025-04-23_snippet_22\n\nLANGUAGE: java\nCODE:\n```\nfinal GetElements getEdgesSummarised = new GetElements.Builder()\n    .input(new EntitySeed(\"John\"))\n    .view(new View.Builder()\n            .edge(\"Commit\", new ViewElementDefinition.Builder()\n                    .groupBy()\n                    .build())\n            .build())\n    .build();\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"class\": \"GetElements\",\n    \"input\": [\n        {\n            \"class\": \"EntitySeed\",\n            \"vertex\": \"John\"\n        }\n    ],\n    \"view\": {\n        \"edges\": {\n            \"Commit\": {\n                \"groupBy\" : [],\n            }\n\n        }\n    }\n}\n```\n\nLANGUAGE: python\nCODE:\n```\nelements = gc.execute_operation(\n    operation = g.GetElements(\n        input = [g.EntitySeed(vertex = \"John\")],\n        view = g.View(\n            edges = [\n                g.ElementDefinition(\n                    group = 'Commit',\n                    group_by = []\n                )\n            ]\n        )\n    )\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Graph Types Schema\nDESCRIPTION: JSON schema defining property types, aggregation functions, and validation rules for the graph elements.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/administration-guide/aggregation/ingest-example.md#2025-04-23_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"types\": {\n        \"id.person.string\": {\n            \"description\": \"A basic type to hold the string id of a person entity\",\n            \"class\": \"java.lang.String\"\n        },\n        \"id.repo.string\": {\n            \"description\": \"A basic type to hold the string id of a repository entity\",\n            \"class\": \"java.lang.String\"\n        },\n        \"property.integer.count\": {\n            \"description\": \"A basic type to hold a count property that must be greater than 0\",\n            \"class\": \"java.lang.Integer\",\n            \"aggregateFunction\": {\n                \"class\": \"uk.gov.gchq.koryphe.impl.binaryoperator.Sum\"\n            },\n            \"validateFunctions\": [\n                {\n                    \"class\": \"uk.gov.gchq.koryphe.impl.predicate.IsMoreThan\",\n                    \"orEqualTo\": true,\n                    \"value\": 0\n                }\n            ]\n        },\n        \"property.date.first\": {\n            \"description\": \"A Date type to hold first date property after aggregation\",\n            \"class\": \"java.util.Date\",\n            \"aggregateFunction\": {\n                \"class\": \"uk.gov.gchq.koryphe.impl.binaryoperator.Min\"\n            },\n            \"validateFunctions\": [\n                {\n                    \"class\": \"uk.gov.gchq.koryphe.impl.predicate.Exists\"\n                }\n            ]\n        },\n        \"property.date.latest\": {\n            \"description\": \"A Date type to hold latest date property after aggregation\",\n            \"class\": \"java.util.Date\",\n            \"aggregateFunction\": {\n                \"class\": \"uk.gov.gchq.koryphe.impl.binaryoperator.Max\"\n            },\n            \"validateFunctions\": [\n                {\n                    \"class\": \"uk.gov.gchq.koryphe.impl.predicate.Exists\"\n                }\n            ]\n        },\n        \"true\": {\n            \"description\": \"A simple boolean that must always be true.\",\n            \"class\": \"java.lang.Boolean\",\n            \"validateFunctions\": [\n                {\n                    \"class\": \"uk.gov.gchq.koryphe.impl.predicate.IsTrue\"\n                }\n            ]\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ElementMatch Join Operation in Gaffer\nDESCRIPTION: Demonstrates a right inner join operation using ElementMatch to match elements based on the 'count' property. The operation chain performs a GetAllElements operation and joins the results with input elements.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/join.md#2025-04-23_snippet_22\n\nLANGUAGE: java\nCODE:\n```\nfinal OperationChain<Iterable<? extends MapTuple>> opChain = new OperationChain.Builder()\n        .first(new Join.Builder<>()\n                .input(inputElements)\n                .operation(new GetAllElements())\n                .matchKey(MatchKey.RIGHT)\n                .joinType(JoinType.INNER)\n                .matchMethod(new ElementMatch(\"count\"))\n                .build())\n        .build();\n```\n\nLANGUAGE: python\nCODE:\n```\ng.OperationChain( \noperations=[ \n    g.Join( \n    operation=g.GetAllElements(), \n    match_method=g.ElementMatch(), \n    input=[ \n        g.Entity( \n        group=\"entity\", \n        properties={'count': 3}, \n        vertex=1 \n        ), \n        g.Entity( \n        group=\"entity\", \n        properties={'count': 1}, \n        vertex=4 \n        ), \n        g.Entity( \n        group=\"entity\", \n        properties={'count': 3}, \n        vertex=5 \n        ), \n        g.Entity( \n        group=\"entity\", \n        properties={'count': 30}, \n        vertex=6 \n        ) \n    ], \n    match_key=\"RIGHT\", \n    join_type=\"INNER\" \n    ) \n] \n)\n```\n\n----------------------------------------\n\nTITLE: Converting Elements to Maps using ToMap Operation in Gaffer\nDESCRIPTION: Demonstrates using ToMap operation to convert graph elements into map representations. Uses MapGenerator to specify field mappings for group, vertex, source, and count properties. Returns an Iterable of Maps containing the specified key-value pairs.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/core.md#2025-04-23_snippet_58\n\nLANGUAGE: java\nCODE:\n```\nfinal OperationChain<Iterable<? extends Map<String, Object>>> opChain = new Builder()\n        .first(new GetElements.Builder()\n                .input(new EntitySeed(1), new EntitySeed(2))\n                .build())\n        .then(new ToMap.Builder()\n                .generator(new MapGenerator.Builder()\n                        .group(\"group\")\n                        .vertex(\"vertex\")\n                        .source(\"source\")\n                        .property(\"count\", \"total count\")\n                        .build())\n                .build())\n        .build();\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"OperationChain\",\n  \"operations\" : [ {\n    \"class\" : \"GetElements\",\n    \"input\" : [ {\n      \"class\" : \"EntitySeed\",\n      \"vertex\" : 1\n    }, {\n      \"class\" : \"EntitySeed\",\n      \"vertex\" : 2\n    } ]\n  }, {\n    \"class\" : \"ToMap\",\n    \"elementGenerator\" : {\n      \"class\" : \"MapGenerator\",\n      \"fields\" : {\n        \"GROUP\" : \"group\",\n        \"VERTEX\" : \"vertex\",\n        \"SOURCE\" : \"source\",\n        \"count\" : \"total count\"\n      },\n      \"constants\" : { }\n    }\n  } ]\n}\n```\n\nLANGUAGE: python\nCODE:\n```\ng.OperationChain(\n  operations=[\n    g.GetElements(\n      input=[\n        g.EntitySeed(\n          vertex=1\n        ),\n        g.EntitySeed(\n          vertex=2\n        )\n      ]\n    ),\n    g.ToMap(\n      element_generator=g.MapGenerator(\n        fields={'GROUP': 'group', 'VERTEX': 'vertex', 'SOURCE': 'source', 'count': 'total count'},\n        constants={}\n      )\n    )\n  ]\n)\n```\n\n----------------------------------------\n\nTITLE: Extracting Maximum Element using Max Operation in Python\nDESCRIPTION: This Python snippet demonstrates the use of the Max operation in Gaffer. It creates an OperationChain with GetElements and Max operations to find the maximum element based on the 'count' property for entities and edges.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/core.md#2025-04-23_snippet_29\n\nLANGUAGE: python\nCODE:\n```\ng.OperationChain(\n  operations=[\n    g.GetElements(\n      input=[\n        g.EntitySeed(\n          vertex=1\n        ),\n        g.EntitySeed(\n          vertex=2\n        )\n      ]\n    ),\n    g.Max(\n      comparators=[\n        g.ElementPropertyComparator(\n          groups=[\n            \"entity\",\n            \"edge\"\n          ],\n          property=\"count\",\n          reversed=False\n        )\n      ]\n    )\n  ]\n)\n```\n\n----------------------------------------\n\nTITLE: Supported Basic Java Properties in Gaffer\nDESCRIPTION: List of standard basic Java properties that are built into Gaffer and don't require explicit serialiser specification in the schema.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/properties-guide/basic.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- `String`\n- `Integer`\n- `Long`\n- `Float`\n- `Double`\n- `Byte[]`\n- `Boolean`\n- `Date`\n```\n\n----------------------------------------\n\nTITLE: Retrieving Graph Walks with Additional Operations - Java\nDESCRIPTION: Gets all walks of length 2 starting from vertex 5, with additional sorting operation between GetElements operations. Includes edge filtering and incoming edge traversal.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/get.md#2025-04-23_snippet_71\n\nLANGUAGE: java\nCODE:\n```\nfinal GetWalks getWalks = new GetWalks.Builder()\n        .operations(new OperationChain(new GetElements.Builder()\n                        .view(new View.Builder()\n                                .edges(Lists.newArrayList(\"edge\", \"edge1\"))\n                                .build())\n                        .inOutType(SeededGraphFilters.IncludeIncomingOutgoingType.INCOMING)\n                        .build(),\n                        new Sort.Builder()\n                                .comparators(new ElementPropertyComparator.Builder()\n                                        .property(\"count\")\n                                        .build())\n                                .build()),\n                new GetElements.Builder()\n                        .view(new View.Builder()\n                                .edge(\"edge1\")\n                                .build())\n                        .inOutType(SeededGraphFilters.IncludeIncomingOutgoingType.INCOMING)\n                        .build())\n        .input(new EntitySeed(5))\n        .build();\n```\n\n----------------------------------------\n\nTITLE: Adding a Basic Named Operation in Gaffer\nDESCRIPTION: This example demonstrates how to add a new Named Operation that performs a 2-hop query using GetAdjacentIds operations. It includes setting operation name, description, access roles, and overwrite flag.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/named.md#2025-04-23_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nfinal AddNamedOperation operation = new AddNamedOperation.Builder()\n        .operationChain(new OperationChain.Builder()\n                .first(new GetAdjacentIds.Builder()\n                        .inOutType(SeededGraphFilters.IncludeIncomingOutgoingType.OUTGOING)\n                        .build())\n                .then(new GetAdjacentIds.Builder()\n                        .inOutType(SeededGraphFilters.IncludeIncomingOutgoingType.OUTGOING)\n                        .build())\n                .build())\n        .description(\"2 hop query\")\n        .name(\"2-hop\")\n        .readAccessRoles(\"read-user\")\n        .writeAccessRoles(\"write-user\")\n        .overwrite()\n        .build();\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n\"class\" : \"AddNamedOperation\",\n\"operationName\" : \"2-hop\",\n\"description\" : \"2 hop query\",\n\"operationChain\" : {\n    \"operations\" : [ {\n    \"class\" : \"uk.gov.gchq.gaffer.operation.impl.get.GetAdjacentIds\",\n    \"includeIncomingOutGoing\" : \"OUTGOING\"\n    }, {\n    \"class\" : \"uk.gov.gchq.gaffer.operation.impl.get.GetAdjacentIds\",\n    \"includeIncomingOutGoing\" : \"OUTGOING\"\n    } ]\n},\n\"overwriteFlag\" : true,\n\"readAccessRoles\" : [ \"read-user\" ],\n\"writeAccessRoles\" : [ \"write-user\" ]\n}\n```\n\nLANGUAGE: python\nCODE:\n```\ng.AddNamedOperation( \noperation_chain=g.OperationChainDAO( \n    operations=[ \n    g.GetAdjacentIds( \n        include_incoming_out_going=\"OUTGOING\" \n    ), \n    g.GetAdjacentIds( \n        include_incoming_out_going=\"OUTGOING\" \n    ) \n    ] \n), \noperation_name=\"2-hop\", \ndescription=\"2 hop query\", \nread_access_roles=[ \n    \"read-user\" \n], \nwrite_access_roles=[ \n    \"write-user\" \n], \noverwrite_flag=True \n)\n```\n\n----------------------------------------\n\nTITLE: Basic Operation Structure in JSON\nDESCRIPTION: Shows the basic structure of a Gaffer Operation when using the REST API with JSON format. Demonstrates the required class and input fields.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/user-guide/query/gaffer-syntax/operations.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"class\": \"Operation\",\n    \"input\": \"Input\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using While Operation within GetWalks in Python\nDESCRIPTION: Python implementation of a GetWalks operation that uses a While operation to perform three hops through the graph. The While operation runs GetElements with OUTGOING direction up to three times, starting from vertex 1.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/flow.md#2025-04-23_snippet_17\n\nLANGUAGE: python\nCODE:\n```\ng.GetWalks( \n  input=[ \n    g.EntitySeed( \n      vertex=1 \n    ) \n  ], \n  operations=[ \n    g.OperationChain( \n      operations=[ \n        g.While( \n          max_repeats=3, \n          condition=True, \n          operation=g.GetElements( \n            include_incoming_out_going=\"OUTGOING\" \n          ) \n        ) \n      ] \n    ) \n  ], \n  results_limit=1000000 \n)\n```\n\n----------------------------------------\n\nTITLE: Min Operation with Transient Properties and Multiple Comparators in Gaffer\nDESCRIPTION: This example demonstrates a more complex Min operation that first applies transformations to add a 'score' transient property, then finds the minimum element based on both 'count' and 'score' properties.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/core.md#2025-04-23_snippet_25\n\nLANGUAGE: java\nCODE:\n```\nfinal OperationChain<Element> opChain = new OperationChain.Builder()\n        .first(new GetElements.Builder()\n                .input(new EntitySeed(1), new EntitySeed(2))\n                .view(new View.Builder()\n                        .entity(\"entity\", new ViewElementDefinition.Builder()\n                                .transientProperty(\"score\", Integer.class)\n                                .transformer(new ElementTransformer.Builder()\n                                        .select(\"VERTEX\", \"count\")\n                                        .execute(new ExampleScoreFunction())\n                                        .project(\"score\")\n                                        .build())\n                                .build())\n                        .edge(\"edge\", new ViewElementDefinition.Builder()\n                                .transientProperty(\"score\", Integer.class)\n                                .transformer(new ElementTransformer.Builder()\n                                        .select(\"DESTINATION\", \"count\")\n                                        .execute(new ExampleScoreFunction())\n                                        .project(\"score\")\n                                        .build())\n                                .build())\n                        .build())\n                .build())\n        .then(new Min.Builder()\n                .comparators(\n                        new ElementPropertyComparator.Builder()\n                                .groups(\"entity\", \"edge\")\n                                .property(\"count\")\n                                .reverse(false)\n                                .build(),\n                        new ElementPropertyComparator.Builder()\n                                .groups(\"entity\", \"edge\")\n                                .property(\"score\")\n                                .reverse(false)\n                                .build()\n                )\n                .build())\n        .build();\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"OperationChain\",\n  \"operations\" : [ {\n    \"class\" : \"GetElements\",\n    \"input\" : [ {\n      \"class\" : \"EntitySeed\",\n      \"vertex\" : 1\n    }, {\n      \"class\" : \"EntitySeed\",\n      \"vertex\" : 2\n    } ],\n    \"view\" : {\n      \"edges\" : {\n        \"edge\" : {\n          \"transientProperties\" : {\n            \"score\" : \"Integer\"\n          },\n          \"transformFunctions\" : [ {\n            \"selection\" : [ \"DESTINATION\", \"count\" ],\n            \"function\" : {\n              \"class\" : \"ExampleScoreFunction\"\n            },\n            \"projection\" : [ \"score\" ]\n          } ]\n        }\n      },\n      \"entities\" : {\n        \"entity\" : {\n          \"transientProperties\" : {\n            \"score\" : \"Integer\"\n          },\n          \"transformFunctions\" : [ {\n            \"selection\" : [ \"VERTEX\", \"count\" ],\n            \"function\" : {\n              \"class\" : \"ExampleScoreFunction\"\n            },\n            \"projection\" : [ \"score\" ]\n          } ]\n        }\n      }\n    }\n  }, {\n    \"class\" : \"uk.gov.gchq.gaffer.operation.impl.compare.Min\",\n    \"comparators\" : [ {\n      \"class\" : \"ElementPropertyComparator\",\n      \"property\" : \"count\",\n      \"groups\" : [ \"entity\", \"edge\" ],\n      \"reversed\" : false\n    }, {\n      \"class\" : \"ElementPropertyComparator\",\n      \"property\" : \"score\",\n      \"groups\" : [ \"entity\", \"edge\" ],\n      \"reversed\" : false\n    } ]\n  } ]\n}\n```\n\nLANGUAGE: python\nCODE:\n```\ng.OperationChain(\n  operations=[\n    g.GetElements(\n      view=g.View(\n        entities=[\n          g.ElementDefinition(\n            group=\"entity\",\n            transient_properties={'score': 'java.lang.Integer'},\n            transform_functions=[\n              g.FunctionContext(\n                selection=[\n                  \"VERTEX\",\n                  \"count\"\n                ],\n                function=g.Function(\n                  class_name=\"uk.gov.gchq.gaffer.doc.operation.function.ExampleScoreFunction\",\n                  fields={}\n                ),\n                projection=[\n                  \"score\"\n                ]\n              )\n            ]\n          )\n        ],\n        edges=[\n          g.ElementDefinition(\n            group=\"edge\",\n            transient_properties={'score': 'java.lang.Integer'},\n            transform_functions=[\n              g.FunctionContext(\n                selection=[\n                  \"DESTINATION\",\n                  \"count\"\n                ],\n                function=g.Function(\n                  class_name=\"uk.gov.gchq.gaffer.doc.operation.function.ExampleScoreFunction\",\n                  fields={}\n                ),\n                projection=[\n                  \"score\"\n                ]\n              )\n            ]\n          )\n        ],\n        all_edges=False,\n        all_entities=False\n      ),\n      input=[\n        g.EntitySeed(\n          vertex=1\n        ),\n        g.EntitySeed(\n          vertex=2\n        )\n      ]\n    ),\n    g.Min(\n      comparators=[\n        g.ElementPropertyComparator(\n          groups=[\n            \"entity\",\n            \"edge\"\n          ],\n          property=\"count\",\n          reversed=False\n        ),\n        g.ElementPropertyComparator(\n          groups=[\n            \"entity\",\n            \"edge\"\n          ],\n          property=\"score\",\n          reversed=False\n        )\n      ]\n    )\n  ]\n)\n```\n\n----------------------------------------\n\nTITLE: Checking for a Specific Trait in Gaffer Store\nDESCRIPTION: Example of using the HasTrait operation to check if a store has a specific trait (PRE_AGGREGATION_FILTERING). The currentTraits parameter determines whether to check against default store traits or schema-specific traits.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/core.md#2025-04-23_snippet_98\n\nLANGUAGE: java\nCODE:\n```\nfinal HasTrait operation = new HasTrait.Builder()\n        .currentTraits(false)\n        .trait(PRE_AGGREGATION_FILTERING)\n        .build();\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"class\" : \"HasTrait\",\n    \"currentTraits\" : false,\n    \"trait\": \"PRE_AGGREGATION_FILTERING\"\n}\n```\n\nLANGUAGE: java\nCODE:\n```\ntrue\n```\n\nLANGUAGE: json\nCODE:\n```\ntrue\n```\n\n----------------------------------------\n\nTITLE: Federated Store Configuration for Gaffer\nDESCRIPTION: YAML configuration that sets up a Federated Store for Gaffer, which allows connecting to multiple underlying graphs. Includes the necessary store properties and serialization modules for sketches.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/administration-guide/gaffer-deployment/kubernetes-guide/simple-deployment.md#2025-04-23_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ngraph:\n  storeProperties:\n    gaffer.store.class: uk.gov.gchq.gaffer.federatedstore.FederatedStore\n    gaffer.store.properties.class: uk.gov.gchq.gaffer.federatedstore.FederatedStoreProperties\n    gaffer.serialiser.json.modules: uk.gov.gchq.gaffer.sketches.serialisation.json.SketchesJsonModules\n```\n\n----------------------------------------\n\nTITLE: Implementing IterableFunction with a Single Function in Java\nDESCRIPTION: Creates an IterableFunction that applies a MultiplyBy(2) function to each element in an iterable. Each element in the input iterable is multiplied by 2.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/koryphe-functions.md#2025-04-23_snippet_94\n\nLANGUAGE: java\nCODE:\n```\nfinal IterableFunction<Integer, Integer> function = new IterableFunction<>(new MultiplyBy(2));\n```\n\n----------------------------------------\n\nTITLE: Configuring Proxy Store Properties for Gaffer REST\nDESCRIPTION: This snippet shows an example configuration file (store.properties) for setting up a Proxy Store with Gaffer REST. It specifies the store class, host, port, and context root.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/administration-guide/gaffer-stores/proxy-store.md#2025-04-23_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\ngaffer.store.class=uk.gov.gchq.gaffer.proxystore.ProxyStore\ngaffer.host=example.hostname\ngaffer.port=8080\ngaffer.context-root=/rest/v2\n```\n\n----------------------------------------\n\nTITLE: Retrieving Full Schema in JSON\nDESCRIPTION: This JSON snippet shows the structure of a GetSchema operation to retrieve the full schema. The compact field is explicitly set to false.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/core.md#2025-04-23_snippet_88\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"GetSchema\",\n  \"compact\" : false\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ForEach Operation in Python\nDESCRIPTION: This Python code configures a ForEach operation within an OperationChain in Gaffer. It includes operations for getting adjacent IDs, converting to a singleton list, and extracting vertices.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/flow.md#2025-04-23_snippet_28\n\nLANGUAGE: python\nCODE:\n```\ng.OperationChain( \n  operations=[ \n    g.GetAdjacentIds( \n      input=[ \n        g.EntitySeed( \n          vertex=1 \n        ) \n      ] \n    ), \n    g.ForEach( \n      operation=g.OperationChain( \n        operations=[ \n          g.ToSingletonList(), \n          g.GetAdjacentIds(), \n          g.ToVertices() \n        ] \n      ) \n    ) \n  ] \n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Inner Join with ElementMatch in Gaffer (Python)\nDESCRIPTION: This Python code creates an OperationChain for an inner join operation using ElementMatch in Gaffer. It sets up the input entities, uses GetAllElements as the operation, and specifies ElementMatch as the match method.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/join.md#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ng.OperationChain( \noperations=[ \n    g.Join( \n    operation=g.GetAllElements(), \n    match_method=g.ElementMatch(), \n    input=[ \n        g.Entity( \n        group=\"entity\", \n        properties={'count': 3}, \n        vertex=1 \n        ), \n        g.Entity( \n        group=\"entity\", \n        properties={'count': 1}, \n        vertex=4 \n        ), \n        g.Entity( \n        group=\"entity\", \n        properties={'count': 3}, \n        vertex=5 \n        ), \n        g.Entity( \n        group=\"entity\", \n        properties={'count': 30}, \n        vertex=6 \n        ) \n    ], \n    join_type=\"INNER\" \n    ) \n] \n)\n```\n\n----------------------------------------\n\nTITLE: Executing a Job in Java\nDESCRIPTION: Java code snippet demonstrating how to execute an asynchronous job in Gaffer. It creates an OperationChain, configures a user, and executes the job using the graph object.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/administration-guide/job-tracker.md#2025-04-23_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nfinal User user = new User(\"user01\");\n\nOperationChain<Long> operation = new OperationChain.Builder()\n    .first(new GetElements.Builder().input(new EntitySeed(\"v1\")).build())\n    .then(new Count<>())\n    .build();\n\nfinal Job job = graph.execute(operation, user);\n```\n\n----------------------------------------\n\nTITLE: Getting Walks Implementation in Java\nDESCRIPTION: Java implementation to get all walks of length 2 starting from vertex 1, with outgoing edge traversal restrictions.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/get.md#2025-04-23_snippet_34\n\nLANGUAGE: java\nCODE:\n```\nfinal GetWalks getWalks = new GetWalks.Builder()\n        .operations(new GetElements.Builder()\n                        .inOutType(SeededGraphFilters.IncludeIncomingOutgoingType.OUTGOING)\n                        .build(),\n                new GetElements.Builder()\n                        .inOutType(SeededGraphFilters.IncludeIncomingOutgoingType.OUTGOING)\n                        .build())\n        .input(new EntitySeed(1))\n        .build();\n```\n\n----------------------------------------\n\nTITLE: Adding Elements From File - Java Implementation\nDESCRIPTION: Java implementation for adding elements from a file using AddElementsFromFile operation with configurable parameters for filename, generator, parallelism, validation, and error handling.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/flink.md#2025-04-23_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nfinal AddElementsFromFile op = new AddElementsFromFile.Builder()\n            .filename(\"filename\")\n            .generator(ElementGenerator.class)\n            .parallelism(1)\n            .validate(true)\n            .skipInvalidElements(false)\n            .build();\n```\n\n----------------------------------------\n\nTITLE: Fetching Entities and Edges Related to Edge in Python\nDESCRIPTION: This Python code demonstrates how to query for entities and edges related to an edge between vertices 1 and 2 using the GetElements operation in Gaffer's Python client.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/get.md#2025-04-23_snippet_12\n\nLANGUAGE: python\nCODE:\n```\ng.GetElements(\ninput=[\n    g.EdgeSeed(\n    source=1,\n    destination=2,\n    directed_type=\"EITHER\",\n    matched_vertex=\"SOURCE\"\n    )\n]\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing KeyFunctionMatch with FunctionChain\nDESCRIPTION: Shows a more complex join operation using KeyFunctionMatch with a FunctionChain that extracts the count property and increments it. The operation matches elements based on transformed property values.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/join.md#2025-04-23_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nfinal OperationChain<Iterable<? extends MapTuple>> opChain = new OperationChain.Builder()\n        .first(new Join.Builder<>()\n                .input(inputElements)\n                .operation(new GetAllElements())\n                .joinType(JoinType.INNER)\n                .matchKey(MatchKey.LEFT)\n                .flatten(false)\n                .matchMethod(new KeyFunctionMatch.Builder()\n                    .firstKeyFunction(new FunctionChain(new ExtractProperty(\"count\"), new Increment(1)))\n                    .secondKeyFunction(new ExtractProperty(\"count\"))\n                    .build())\n                .build())\n        .build();\n```\n\nLANGUAGE: python\nCODE:\n```\ng.OperationChain( \noperations=[ \n    g.Join( \n        operation=g.GetAllElements(), \n        match_method=g.KeyFunctionMatch(\n            first_key_function=g.FunctionChain([\n                g.ExtractProperty(\"count\"),\n                g.Increment(increment=1)\n                ]),\n            second_key_function=g.ExtractProperty(\"count\")\n        ),\n        input=[ \n            g.Entity( \n            group=\"entity\", \n            properties={\"count\": 3}, \n            vertex=\"1\" \n            ), \n            g.Entity( \n            group=\"entity\", \n            properties={\"count\": 1}, \n            vertex=\"4\" \n            ), \n            g.Entity( \n            group=\"entity\", \n            properties={\"count\": 3}, \n            vertex=\"5\" \n            ), \n            g.Entity( \n            group=\"entity\", \n            properties={\"count\": 30}, \n            vertex=\"6\" \n            ) \n    ], \n    flatten=False, \n    match_key=\"LEFT\", \n    join_type=\"INNER\" \n    ) \n] \n)\n```\n\n----------------------------------------\n\nTITLE: Implementing IterableFunction with Multiple Chained Functions in Java\nDESCRIPTION: Creates an IterableFunction that chains multiple functions (MultiplyBy(2) then MultiplyBy(4)) to apply to each element in an iterable. Each element is multiplied by 2 and then by 4.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/koryphe-functions.md#2025-04-23_snippet_97\n\nLANGUAGE: java\nCODE:\n```\nfinal IterableFunction<Integer, Integer> function = new IterableFunction.Builder<Integer>()\n        .first(new MultiplyBy(2))\n        .then(new MultiplyBy(4))\n        .build();\n```\n\n----------------------------------------\n\nTITLE: Filtering Elements with Complex Regex on Source/Destination in Java\nDESCRIPTION: Shows how to filter elements using regex on both source and destination vertices when MATCHED_VERTEX trait is not available.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/user-guide/query/gaffer-syntax/faqs.md#2025-04-23_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nGetElements results = new GetElements.Builder()\n    .input(new EntitySeed(\"X\"))\n    .view(new View.Builder()\n        .edge(\"yourEdge\", new ViewElementDefinition.Builder()\n            .preAggregationFilter(\n                new ElementFilter.Builder()\n                    .select(IdentifierType.SOURCE.name(), IdentifierType.DESTINATION.name())\n                    .execute(new Or.Builder<>()\n                            .select(0)\n                            .execute(new Regex(\"[yY]\"))\n                            .select(1)\n                            .execute(new Regex(\"[yY]\"))\n                            .build())\n                    .build())\n            .build())\n        .build())\n    .build();\n```\n\n----------------------------------------\n\nTITLE: Getting Graph Walks with Self Loops - Python Implementation\nDESCRIPTION: Python code demonstrating how to configure and execute a GetWalks operation for retrieving walks of length 3 with outgoing edges only, starting from vertex 8.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/get.md#2025-04-23_snippet_68\n\nLANGUAGE: python\nCODE:\n```\ng.GetWalks(\n  input=[\n    g.EntitySeed(\n      vertex=8\n    )\n  ],\n  operations=[\n    g.OperationChain(\n      operations=[\n        g.GetElements(\n          include_incoming_out_going=\"OUTGOING\"\n        )\n      ]\n    ),\n    g.OperationChain(\n      operations=[\n        g.GetElements(\n          include_incoming_out_going=\"OUTGOING\"\n        )\n      ]\n    ),\n    g.OperationChain(\n      operations=[\n        g.GetElements(\n          include_incoming_out_going=\"OUTGOING\"\n        )\n      ]\n    )\n  ],\n  results_limit=1000000\n)\n```\n\n----------------------------------------\n\nTITLE: Connecting to Gremlin Websocket using Python\nDESCRIPTION: Python code snippet demonstrating how to connect to the Gremlin websocket using gremlinpython library. It sets up a remote connection with GraphSON v3 serialization.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/administration-guide/gaffer-deployment/gremlin.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom gremlin_python.driver.serializer import GraphSONSerializersV3d0\n\ng = traversal().with_remote(DriverRemoteConnection('ws://localhost:8080/gremlin', 'g', message_serializer=GraphSONSerializersV3d0()))\n```\n\n----------------------------------------\n\nTITLE: Configuring Maven Dependency Plugin for Core REST API Customization\nDESCRIPTION: This XML snippet demonstrates how to configure the Maven dependency plugin to download and extract the core Gaffer REST API war file for customization in your project. This allows adding or overriding files in the core war package.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/development-guide/project-structure/components/core-rest.md#2025-04-23_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<build>\n    <sourceDirectory>src/main/java</sourceDirectory>\n    <plugins>\n        <plugin>\n            <groupId>org.apache.maven.plugins</groupId>\n            <artifactId>maven-dependency-plugin</artifactId>\n            <version>3.5</version>\n            <dependencies>\n                <dependency>\n                    <groupId>uk.gov.gchq.gaffer</groupId>\n                    <artifactId>core-rest</artifactId> <!-- Or your chosen store, e.g 'accumulo-rest' -->\n                    <version>${gaffer.version}</version>\n                    <type>war</type>\n                </dependency>\n            </dependencies>\n            <executions>\n                <execution>\n                    <id>unpack</id>\n                    <phase>compile</phase>\n                    <goals>\n                        <goal>unpack</goal>\n                    </goals>\n                    <configuration>\n                        <artifactItems>\n                            <artifactItem>\n                                <groupId>uk.gov.gchq.gaffer</groupId>\n                                <artifactId>core-rest</artifactId> <!-- Or your chosen store, e.g 'accumulo-rest' -->\n                                <version>${gaffer.version}</version>\n                                <type>war</type>\n                                <overWrite>false</overWrite>\n                                <outputDirectory>\n                                    ${project.build.directory}/${project.artifactId}-${project.version}\n                                </outputDirectory>\n                            </artifactItem>\n                        </artifactItems>\n                    </configuration>\n                </execution>\n            </executions>\n        </plugin>\n    </plugins>\n</build>\n```\n\n----------------------------------------\n\nTITLE: Fetching Entities and Edges with Count Filter in Java\nDESCRIPTION: Demonstrates how to use GetElements with a view to filter entities and edges based on a count property. This example retrieves elements with a count greater than 1.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/get.md#2025-04-23_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nfinal GetElements operation = new GetElements.Builder()\n        .input(new EntitySeed(2), new EdgeSeed(2, 3, DirectedType.EITHER))\n        .view(new View.Builder()\n                .entity(\"entity\", new ViewElementDefinition.Builder()\n                        .preAggregationFilter(new ElementFilter.Builder()\n                                .select(\"count\")\n                                .execute(new IsMoreThan(1))\n                                .build())\n                        .build())\n                .edge(\"edge\", new ViewElementDefinition.Builder()\n                        .preAggregationFilter(new ElementFilter.Builder()\n                                .select(\"count\")\n                                .execute(new IsMoreThan(1))\n                                .build())\n                        .build())\n                .build())\n        .build();\n```\n\n----------------------------------------\n\nTITLE: Getting JavaRDD of All Elements in Java\nDESCRIPTION: Example of using GetJavaRDDOfAllElements operation to retrieve all elements as a JavaRDD.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/spark.md#2025-04-23_snippet_7\n\nLANGUAGE: java\nCODE:\n```\nfinal GetJavaRDDOfAllElements operation = new GetJavaRDDOfAllElements();\n```\n\n----------------------------------------\n\nTITLE: Defining While Operation in JSON\nDESCRIPTION: This JSON snippet defines a While operation in Gaffer. It includes a conditional predicate, an operation to get adjacent IDs, and specifies input and maximum repeats.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/flow.md#2025-04-23_snippet_22\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"While\",\n  \"conditional\" : {\n    \"transform\" : {\n      \"class\" : \"uk.gov.gchq.gaffer.operation.impl.output.ToSet\"\n    },\n    \"predicate\" : {\n      \"class\" : \"Not\",\n      \"predicate\" : {\n        \"class\" : \"CollectionContains\",\n        \"value\" : {\n          \"class\" : \"EntitySeed\",\n          \"class\" : \"EntitySeed\",\n          \"vertex\" : 7\n        }\n      }\n    }\n  },\n  \"operation\" : {\n    \"class\" : \"GetAdjacentIds\",\n    \"includeIncomingOutGoing\" : \"OUTGOING\"\n  },\n  \"maxRepeats\" : 20,\n  \"input\" : [ {\n    \"class\" : \"EntitySeed\",\n    \"class\" : \"EntitySeed\",\n    \"vertex\" : 1\n  } ]\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Entities and Edges by ID in JSON\nDESCRIPTION: JSON representation of the GetElements operation to retrieve entities and edges by specifying entity and edge seeds. This example fetches data related to entity ID 2 and edge ID 2 to 3.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/get.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n\"class\" : \"GetElements\",\n\"input\" : [ {\n    \"class\" : \"EntitySeed\",\n    \"vertex\" : 2\n}, {\n    \"class\" : \"EdgeSeed\",\n    \"source\" : 2,\n    \"destination\" : 3,\n    \"matchedVertex\" : \"SOURCE\",\n    \"directedType\" : \"EITHER\"\n} ]\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Empty GroupBy Globally in JSON\nDESCRIPTION: JSON representation of a GetElements operation that applies an empty groupBy to all element groups. This query retrieves and summarizes all elements connected to the entity 'John' by using the globalElements configuration.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/user-guide/query/gaffer-syntax/filtering.md#2025-04-23_snippet_26\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"class\": \"GetElements\",\n    \"input\": [\n        {\n            \"class\": \"EntitySeed\",\n            \"vertex\": \"John\"\n        }\n    ],\n    \"view\": {\n        \"globalElements\": {\n            \"groupBy\" : []\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Entity and Edge Structure in Gaffer Graph Database (JSON)\nDESCRIPTION: JSON structure representing entities and edges in a Gaffer graph database. Entities contain properties like cardinality with HyperLogLogPlus sketches for estimating unique values, while edges define connections between vertices with directional relationships and count properties.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/get.md#2025-04-23_snippet_63\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"edges\": [\n    [\n      {\n        \"class\": \"uk.gov.gchq.gaffer.data.element.Edge\",\n        \"group\": \"edge1\",\n        \"source\": 1,\n        \"destination\": 2,\n        \"directed\": true,\n        \"matchedVertex\": \"SOURCE\",\n        \"properties\": {\n          \"count\": 3\n        }\n      }\n    ],\n    [\n      {\n        \"class\": \"uk.gov.gchq.gaffer.data.element.Edge\",\n        \"group\": \"edge1\",\n        \"source\": 2,\n        \"destination\": 5,\n        \"directed\": true,\n        \"matchedVertex\": \"SOURCE\",\n        \"properties\": {\n          \"count\": 7\n        }\n      }\n    ],\n    [\n      {\n        \"class\": \"uk.gov.gchq.gaffer.data.element.Edge\",\n        \"group\": \"edge1\",\n        \"source\": 5,\n        \"destination\": 6,\n        \"directed\": true,\n        \"matchedVertex\": \"SOURCE\",\n        \"properties\": {\n          \"count\": 11\n        }\n      }\n    ],\n    [\n      {\n        \"class\": \"uk.gov.gchq.gaffer.data.element.Edge\",\n        \"group\": \"edge1\",\n        \"source\": 6,\n        \"destination\": 3,\n        \"directed\": true,\n        \"matchedVertex\": \"SOURCE\",\n        \"properties\": {\n          \"count\": 9\n        }\n      }\n    ],\n    [\n      {\n        \"class\": \"uk.gov.gchq.gaffer.data.element.Edge\",\n        \"group\": \"edge1\",\n        \"source\": 3,\n        \"destination\": 4,\n        \"directed\": true,\n        \"matchedVertex\": \"SOURCE\",\n        \"properties\": {\n          \"count\": 7\n        }\n      }\n    ],\n    [\n      {\n        \"class\": \"uk.gov.gchq.gaffer.data.element.Edge\",\n        \"group\": \"edge1\",\n        \"source\": 4,\n        \"destination\": 7,\n        \"directed\": true,\n        \"matchedVertex\": \"SOURCE\",\n        \"properties\": {\n          \"count\": 11\n        }\n      }\n    ]\n  ],\n  \"entities\": [\n    {\n      \"1\": [\n        {\n          \"class\": \"uk.gov.gchq.gaffer.data.element.Entity\",\n          \"group\": \"cardinality\",\n          \"vertex\": 1,\n          \"properties\": {\n            \"hllp\": {\n              \"com.clearspring.analytics.stream.cardinality.HyperLogLogPlus\": {\n                \"hyperLogLogPlus\": {\n                  \"hyperLogLogPlusSketchBytes\": \"/////gUFAQH9Fg==\",\n                  \"cardinality\": 1\n                }\n              }\n            },\n            \"count\": 1,\n            \"edgeGroup\": {\n              \"java.util.TreeSet\": [\"edge\"]\n            }\n          }\n        }\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Operations via JSON Configuration\nDESCRIPTION: JSON configuration example showing how to register custom operations and their handlers through an operationsDeclarations.json file, providing an alternative to programmatic registration.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/development-guide/extending-gaffer.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"operations\": [\n        {\n            \"operation\": \"uk.gov.gchq.gaffer.operation.impl.output.ToSet\",\n            \"handler\": {\n                \"class\": \"uk.gov.gchq.gaffer.store.operation.handler.output.ToSetHandler\"\n            }\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Adjacent IDs from Specified Vertex in Gaffer\nDESCRIPTION: This snippet demonstrates how to get adjacent IDs from vertex 2 using the GetAdjacentIds operation in Gaffer. It shows implementations in Java, JSON, and Python, along with the expected results.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/get.md#2025-04-23_snippet_28\n\nLANGUAGE: java\nCODE:\n```\nfinal GetAdjacentIds operation = new GetAdjacentIds.Builder()\n        .input(new EntitySeed(2))\n        .build();\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n\"class\" : \"GetAdjacentIds\",\n\"input\" : [ {\n    \"class\" : \"EntitySeed\",\n    \"vertex\" : 2\n} ]\n}\n```\n\nLANGUAGE: python\nCODE:\n```\ng.GetAdjacentIds(\ninput=[\n    g.EntitySeed(\n    vertex=2\n    )\n]\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring ForEach Operation in Java\nDESCRIPTION: This Java code demonstrates how to set up a ForEach operation within an OperationChain in Gaffer. It includes GetAdjacentIds, ToSingletonList, and ToVertices operations.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/flow.md#2025-04-23_snippet_26\n\nLANGUAGE: java\nCODE:\n```\nfinal OperationChain<Iterable<?>> opChain = new OperationChain.Builder()\n        .first(new GetAdjacentIds.Builder()\n                .input(new EntitySeed(1))\n                .build())\n        .then(new ForEach.Builder<>()\n                .operation(new OperationChain.Builder()\n                        .first(new ToSingletonList<EntitySeed>())\n                        .then(new GetAdjacentIds())\n                        .then(new ToVertices())\n                        .build())\n                .build())\n        .build();\n```\n\n----------------------------------------\n\nTITLE: Implementing Logical AND Operation in Java\nDESCRIPTION: Creates an And operator that applies logical AND operation to two boolean values. Returns true only if both inputs are true. If one input is false, it returns false regardless of the other value.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/binary-operators-guide/koryphe-operators.md#2025-04-23_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nfinal And and = new And();\n```\n\n----------------------------------------\n\nTITLE: Exporting Edges to Another Gaffer REST API using ProxyStore in Python\nDESCRIPTION: This Python snippet demonstrates how to export all edges with group 'edge' to another Gaffer REST API using ProxyStore. It creates an OperationChain with GetAllElements and ExportToOtherGraph operations.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/export.md#2025-04-23_snippet_41\n\nLANGUAGE: python\nCODE:\n```\ng.OperationChain( \n    operations=[ \n        g.GetAllElements( \n        view=g.View( \n            edges=[ \n                g.ElementDefinition( \n                    group=\"edge\" \n                ) \n                ], \n                all_edges=False, \n                all_entities=False \n            ) \n        ), \n        g.ExportToOtherGraph( \n            graph_id=\"otherGafferRestApiGraphId\", \n            store_properties={'gaffer.host': 'localhost', 'gaffer.context-root': '/rest/v1', 'gaffer.store.class': 'uk.gov.gchq.gaffer.proxystore.ProxyStore', 'gaffer.port': '8081', 'gaffer.store.properties.class': 'uk.gov.gchq.gaffer.proxystore.ProxyProperties'} \n        ) \n    ] \n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Required Annotation in Gaffer Operations\nDESCRIPTION: Example showing how to implement a new Operation class with the @Since version annotation and @Required field annotation for proper documentation and validation.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/development-guide/project-structure/components/operation.md#2025-04-23_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n@Since(\"1.4.0\")\npublic class NewOperation extends Operation {\n\n    @Required\n    private String requiredField;\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Reduce Operation in Gaffer with JSON\nDESCRIPTION: JSON representation of a Reduce operation within an OperationChain. This configuration demonstrates how to use GetAdjacentIds, ForEach, ToSingletonList, ToVertices and Reduce operations with the Sum aggregation function.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/core.md#2025-04-23_snippet_39\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"OperationChain\",\n  \"operations\" : [ {\n    \"class\" : \"GetAdjacentIds\",\n    \"input\" : [ {\n      \"class\" : \"EntitySeed\",\n      \"vertex\" : 1\n    } ]\n  }, {\n    \"class\" : \"ForEach\",\n    \"operation\" : {\n      \"class\" : \"OperationChain\",\n      \"operations\" : [ {\n        \"class\" : \"ToSingletonList\"\n      }, {\n        \"class\" : \"GetAdjacentIds\"\n      }, {\n        \"class\" : \"ToVertices\"\n      }, {\n        \"class\" : \"Reduce\",\n        \"aggregateFunction\" : {\n          \"class\" : \"Sum\"\n        }\n      } ]\n    }\n  } ]\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a Named Operation with Score in Gaffer\nDESCRIPTION: This example shows how to add a Named Operation with a score. It creates a 1-hop query operation and assigns it a score of 2. The score can be used for operation prioritization or cost calculation.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/named.md#2025-04-23_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nfinal AddNamedOperation operation = new AddNamedOperation.Builder()\n        .operationChain(new OperationChain.Builder()\n                .first(new GetAdjacentIds.Builder()\n                        .inOutType(SeededGraphFilters.IncludeIncomingOutgoingType.OUTGOING)\n                        .build())\n                .build())\n        .description(\"1 hop query\")\n        .name(\"1-hop\")\n        .readAccessRoles(\"read-user\")\n        .writeAccessRoles(\"write-user\")\n        .overwrite()\n        .score(2)\n        .build();\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n\"class\" : \"AddNamedOperation\",\n\"operationName\" : \"1-hop\",\n\"description\" : \"1 hop query\",\n\"score\" : 2,\n\"operationChain\" : {\n    \"operations\" : [ {\n    \"class\" : \"uk.gov.gchq.gaffer.operation.impl.get.GetAdjacentIds\",\n    \"includeIncomingOutGoing\" : \"OUTGOING\"\n    } ]\n},\n\"overwriteFlag\" : true,\n\"readAccessRoles\" : [ \"read-user\" ],\n\"writeAccessRoles\" : [ \"write-user\" ]\n}\n```\n\nLANGUAGE: python\nCODE:\n```\ng.AddNamedOperation( \noperation_chain=g.OperationChainDAO( \n    operations=[ \n    g.GetAdjacentIds( \n        include_incoming_out_going=\"OUTGOING\" \n    ) \n    ] \n), \noperation_name=\"1-hop\", \ndescription=\"1 hop query\", \nread_access_roles=[ \n    \"read-user\" \n], \nwrite_access_roles=[ \n    \"write-user\" \n], \noverwrite_flag=True, \nscore=2 \n)\n```\n\n----------------------------------------\n\nTITLE: Defining Global Property Filter for Elements in Gaffer\nDESCRIPTION: Creates a View that filters all elements (entities and edges) to return only the 'weight' property. This demonstrates how to use globalElements to apply a filter across all element types.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/user-guide/query/gaffer-syntax/filtering.md#2025-04-23_snippet_12\n\nLANGUAGE: java\nCODE:\n```\n// Define the View to use\nfinal View viewWithGlobalFilter = new View.Builder()\n    .globalElements(new GlobalViewElementDefinition.Builder()\n        .properties(\"weight\")\n        .build())\n    .build();\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"view\": {\n        \"globalElements\": [ {\n            \"properties\": [\"weight\"]\n        }]\n    }\n}\n```\n\nLANGUAGE: python\nCODE:\n```\nview_with_global_filter = g.View(\n    global_elements=[\n        g.GlobalElementDefinition(\n            properties=[\"weight\"]\n        ),\n    ],\n    all_edges=False,\n    all_entities=False\n)\n```\n\n----------------------------------------\n\nTITLE: Extracting Maximum Element using Max Operation in Java\nDESCRIPTION: This snippet demonstrates how to use the Max operation in Java to find the maximum element based on the 'count' property for entities and edges. It uses an OperationChain with GetElements and Max operations.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/core.md#2025-04-23_snippet_27\n\nLANGUAGE: java\nCODE:\n```\nfinal OperationChain<Element> opChain = new OperationChain.Builder()\n        .first(new GetElements.Builder()\n                .input(new EntitySeed(1), new EntitySeed(2))\n                .build())\n        .then(new Max.Builder()\n                .comparators(new ElementPropertyComparator.Builder()\n                        .groups(\"entity\", \"edge\")\n                        .property(\"count\")\n                        .build())\n                .build())\n        .build();\n```\n\n----------------------------------------\n\nTITLE: Basic Operation Chain Structure\nDESCRIPTION: Demonstrates the basic structure of chaining two operations together using OperationChain in JSON format.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/user-guide/query/gaffer-syntax/operations.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"class\" : \"OperationChain\",\n    \"operations\" : [\n        {\n            \"class\": \"Operation1\"\n        },\n        {\n            \"class\" : \"Operation2\"\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Access Control in AddGraph Operation\nDESCRIPTION: JSON configuration for adding a graph with access control predicates that require specific read and write authorizations. The configuration implements complex access control logic using combinations of AND conditions for both read and write operations.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/administration-guide/gaffer-stores/federated-store.md#2025-04-23_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"AddGraph\",\n  \"graphId\" : \"AccessControlledResourceSecureGraph\",\n  \"options\" : null,\n  \"parentPropertiesId\" : \"mapStore\",\n  \"parentSchemaIds\" : [ \"exampleId\" ],\n  \"readAccessPredicate\" : {\n    \"class\" : \"uk.gov.gchq.gaffer.access.predicate.AccessPredicate\",\n    \"userPredicate\" : {\n      \"class\" : \"AdaptedPredicate\",\n      \"inputAdapter\" : {\n        \"class\" : \"CallMethod\",\n        \"method\" : \"getOpAuths\"\n      },\n      \"predicate\" : {\n        \"class\" : \"uk.gov.gchq.koryphe.impl.predicate.And\",\n        \"predicates\" : [ {\n          \"class\" : \"CollectionContains\",\n          \"value\" : \"read-access-auth-1\"\n        }, {\n          \"class\" : \"CollectionContains\",\n          \"value\" : \"read-access-auth-2\"\n        } ]\n      }\n    }\n  },\n  \"writeAccessPredicate\" : {\n    \"class\" : \"uk.gov.gchq.gaffer.access.predicate.AccessPredicate\",\n    \"userPredicate\" : {\n      \"class\" : \"AdaptedPredicate\",\n      \"inputAdapter\" : {\n        \"class\" : \"CallMethod\",\n        \"method\" : \"getOpAuths\"\n      },\n      \"predicate\" : {\n        \"class\" : \"uk.gov.gchq.koryphe.impl.predicate.And\",\n        \"predicates\" : [ {\n          \"class\" : \"CollectionContains\",\n          \"value\" : \"write-access-auth-1\"\n        }, {\n          \"class\" : \"CollectionContains\",\n          \"value\" : \"write-access-auth-2\"\n        } ]\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring GraphConfig with Java Builder\nDESCRIPTION: Demonstrates creating a GraphConfig with various options including graph ID, description, view filters, library and hooks.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/development-guide/project-structure/components/graph.md#2025-04-23_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nnew GraphConfig.Builder()\n    .config(new GraphConfig.Builder()\n            .graphId(\"exampleGraphId\")\n            .build())\n    .description(\"Example Graph description\")\n    .view(new View.Builder()\n            .globalElements(new GlobalViewElementDefinition.Builder()\n                    .postAggregationFilter(new ElementFilter.Builder()\n                        .select(\"ExamplePropertyName\")\n                        .execute(new IsLessThan(\"10\"))\n                        .build())\n                    .build())\n            .build())\n    .library(new FileGraphLibrary())\n    .addHook(new Log4jLogger())\n  .build();\n```\n\n----------------------------------------\n\nTITLE: Add Named Operation with If Operation and Parameter in JSON\nDESCRIPTION: This JSON snippet shows the structure of an AddNamedOperation that includes an If operation with a parameter. The parameter allows configuring whether to execute an optional GetElements operation with a filter.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/flow.md#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"AddNamedOperation\",\n  \"operationName\" : \"2-hop-with-optional-filtering\",\n  \"description\" : \"2 hop query with optional filtering by count\",\n  \"score\" : 4,\n  \"operationChain\" : {\n    \"operations\" : [ {\n      \"class\" : \"uk.gov.gchq.gaffer.operation.impl.get.GetAdjacentIds\"\n    }, {\n      \"class\" : \"uk.gov.gchq.gaffer.operation.impl.If\",\n      \"condition\" : \"${enableFiltering}\",\n      \"then\" : {\n        \"class\" : \"uk.gov.gchq.gaffer.operation.impl.get.GetElements\",\n        \"view\" : {\n          \"entities\" : {\n            \"entity\" : {\n              \"preAggregationFilterFunctions\" : [ {\n                \"selection\" : [ \"count\" ],\n                \"predicate\" : {\n                  \"class\" : \"uk.gov.gchq.koryphe.impl.predicate.IsLessThan\",\n                  \"orEqualTo\" : true,\n                  \"value\" : 10\n                }\n              } ]\n            }\n          }\n        }\n      }\n    }, {\n      \"class\" : \"uk.gov.gchq.gaffer.operation.impl.get.GetElements\"\n    } ]\n  },\n  \"overwriteFlag\" : true,\n  \"parameters\" : {\n    \"enableFiltering\" : {\n      \"description\" : \"Flag for enabling filtering\",\n      \"defaultValue\" : true,\n      \"valueClass\" : \"boolean\",\n      \"required\" : false\n    }\n  },\n  \"readAccessRoles\" : [ \"read-user\" ],\n  \"writeAccessRoles\" : [ \"write-user\" ]\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Edges with Property Exclusion in Python\nDESCRIPTION: This Python code uses Gaffer's GetElements operation to retrieve edges, exclude the 'count' property, and apply a transformation to create a 'vertex|count' property using the Concat function.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/get.md#2025-04-23_snippet_24\n\nLANGUAGE: python\nCODE:\n```\ng.GetElements(\nview=g.View(\n    edges=[\n    g.ElementDefinition(\n        group=\"edge\",\n        transient_properties={'vertex|count': 'java.lang.String'},\n        transform_functions=[\n        g.FunctionContext(\n            selection=[\n            \"SOURCE\",\n            \"count\"\n            ],\n            function=g.Concat(\n            separator=\"|\"\n            ),\n            projection=[\n            \"vertex|count\"\n            ]\n        )\n        ],\n        exclude_properties=[\n        \"count\"\n        ]\n    )\n    ],\n    all_edges=False,\n    all_entities=False\n),\ninput=[\n    g.EntitySeed(\n    vertex=2\n    )\n]\n)\n```\n\n----------------------------------------\n\nTITLE: Getting Walks with Entities in Gaffer Graph (Java)\nDESCRIPTION: Demonstrates using GetWalks to retrieve paths of length 2 starting from vertex 1, including all entities attached to vertices along the path. This example shows how to include specific entity types in the query.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/get.md#2025-04-23_snippet_45\n\nLANGUAGE: java\nCODE:\n```\nfinal GetWalks getWalks = new GetWalks.Builder()\n        .operations(new GetElements.Builder()\n                        .view(new View.Builder().edge(\"edge\")\n                                .entities(Lists.newArrayList(\"entity\", \"entity1\"))\n                                .build())\n                        .inOutType(SeededGraphFilters.IncludeIncomingOutgoingType.OUTGOING)\n                        .build(),\n                new GetElements.Builder()\n                        .view(new View.Builder().edge(\"edge1\")\n                                .entity(\"entity1\")\n                                .build())\n                        .inOutType(SeededGraphFilters.IncludeIncomingOutgoingType.INCOMING)\n                        .build(),\n                new GetElements.Builder()\n                        .view(new View.Builder()\n                                .entities(Lists.newArrayList(\"entity\", \"entity1\"))\n                                .build())\n                        .inOutType(SeededGraphFilters.IncludeIncomingOutgoingType.INCOMING)\n                        .build())\n        .input(new EntitySeed(1))\n        .build();\n```\n\n----------------------------------------\n\nTITLE: Configuring Full Right Join with ElementMatch in Gaffer (JSON)\nDESCRIPTION: This JSON configuration sets up a Join operation with ElementMatch as the match method, performing a full right join on entities and edges based on the 'count' property.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/join.md#2025-04-23_snippet_36\n\nLANGUAGE: json\nCODE:\n```\n{\n\"class\" : \"OperationChain\",\n\"operations\" : [ {\n    \"class\" : \"Join\",\n    \"input\" : [ {\n    \"class\" : \"Entity\",\n    \"group\" : \"entity\",\n    \"vertex\" : 1,\n    \"properties\" : {\n        \"count\" : 3\n    }\n    }, {\n    \"class\" : \"Entity\",\n    \"group\" : \"entity\",\n    \"vertex\" : 4,\n    \"properties\" : {\n        \"count\" : 1\n    }\n    }, {\n    \"class\" : \"Entity\",\n    \"group\" : \"entity\",\n    \"vertex\" : 5,\n    \"properties\" : {\n        \"count\" : 3\n    }\n    }, {\n    \"class\" : \"Entity\",\n    \"group\" : \"entity\",\n    \"vertex\" : 6,\n    \"properties\" : {\n        \"count\" : 30\n    }\n    } ],\n    \"operation\" : {\n    \"class\" : \"GetAllElements\"\n    },\n    \"matchMethod\" : {\n    \"class\" : \"ElementMatch\"\n    },\n    \"matchKey\" : \"RIGHT\",\n    \"flatten\" : false,\n    \"joinType\" : \"FULL\"\n} ]\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Entities with Complex Count Filter in Java\nDESCRIPTION: This Java snippet demonstrates querying for entities related to vertex 2, with a complex filter that selects entities with a count less than 2 or more than 5 using the GetElements operation and Or predicate.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/get.md#2025-04-23_snippet_16\n\nLANGUAGE: java\nCODE:\n```\nfinal GetElements operation = new GetElements.Builder()\n        .input(new EntitySeed(2), new EdgeSeed(2, 3, DirectedType.EITHER))\n        .view(new View.Builder()\n                .entity(\"entity\", new ViewElementDefinition.Builder()\n                        .preAggregationFilter(\n                                new ElementFilter.Builder()\n                                        .select(\"count\")\n                                        .execute(new Or<>(new IsLessThan(2), new IsMoreThan(5)))\n                                        .build())\n                        .build())\n                .build())\n        .build();\n```\n\n----------------------------------------\n\nTITLE: Configuring Accumulo Store Properties in Gaffer\nDESCRIPTION: A sample properties file configuration for connecting to an Accumulo cluster. It defines essential properties including the store class, properties class, Accumulo instance name, Zookeeper servers, and authentication credentials.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/administration-guide/gaffer-stores/accumulo-store.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngaffer.store.class=gaffer.accumulostore.AccumuloStore\ngaffer.store.properties.class=uk.gov.gchq.gaffer.accumulostore.AccumuloProperties\naccumulo.instance=myInstance\naccumulo.zookeepers=server1.com:2181,server2.com:2181,server3.com:2181\naccumulo.user=myUser\naccumulo.password=myPassword\n```\n\n----------------------------------------\n\nTITLE: Getting DataFrame of Elements with Entity Group in Java\nDESCRIPTION: Example of using GetDataFrameOfElements operation to retrieve entities from Gaffer.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/spark.md#2025-04-23_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nfinal GetDataFrameOfElements operation = new GetDataFrameOfElements.Builder()\n        .view(new View.Builder()\n                .entity(\"entity\")\n                .build())\n        .build();\n```\n\n----------------------------------------\n\nTITLE: Converting Elements to CSV in Gaffer\nDESCRIPTION: Shows how to convert GetElements results to CSV format with custom field mappings. The operation includes header configuration and custom field naming through CsvGenerator.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/core.md#2025-04-23_snippet_55\n\nLANGUAGE: java\nCODE:\n```\nfinal OperationChain<Iterable<? extends String>> opChain = new Builder()\n        .first(new GetElements.Builder()\n                .input(new EntitySeed(1), new EntitySeed(2))\n                .build())\n        .then(new ToCsv.Builder()\n                .includeHeader(true)\n                .generator(new CsvGenerator.Builder()\n                        .group(\"Edge group\")\n                        .vertex(\"vertex\")\n                        .source(\"source\")\n                        .property(\"count\", \"total count\")\n                        .build())\n                .build())\n        .build();\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"OperationChain\",\n  \"operations\" : [ {\n    \"class\" : \"GetElements\",\n    \"input\" : [ {\n      \"class\" : \"EntitySeed\",\n      \"vertex\" : 1\n    }, {\n      \"class\" : \"EntitySeed\",\n      \"vertex\" : 2\n    } ]\n  }, {\n    \"class\" : \"ToCsv\",\n    \"elementGenerator\" : {\n      \"class\" : \"CsvGenerator\",\n      \"fields\" : {\n        \"GROUP\" : \"Edge group\",\n        \"VERTEX\" : \"vertex\",\n        \"SOURCE\" : \"source\",\n        \"count\" : \"total count\"\n      },\n      \"constants\" : { },\n      \"quoted\" : false,\n      \"commaReplacement\" : \" \"\n    },\n    \"includeHeader\" : true\n  } ]\n}\n```\n\nLANGUAGE: python\nCODE:\n```\ng.OperationChain(\n  operations=[\n    g.GetElements(\n      input=[\n        g.EntitySeed(\n          vertex=1\n        ),\n        g.EntitySeed(\n          vertex=2\n        )\n      ]\n    ),\n    g.ToCsv(\n      element_generator=g.CsvGenerator(\n        fields={'GROUP': 'Edge group', 'VERTEX': 'vertex', 'SOURCE': 'source', 'count': 'total count'},\n        constants={},\n        quoted=False,\n        comma_replacement=\" \"\n      ),\n      include_header=True\n    )\n  ]\n)\n```\n\n----------------------------------------\n\nTITLE: Exporting to Gaffer Result Cache and Retrieving Results in Python\nDESCRIPTION: This Python operation chain exports all graph elements to a Gaffer result cache, discards the output, and then retrieves the exported elements from the cache with key 'ALL'.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/export.md#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\ng.OperationChain( \n    operations=[ \n        g.GetAllElements(), \n        g.ExportToGafferResultCache(), \n        g.DiscardOutput(), \n        g.GetGafferResultCacheExport( \n            key=\"ALL\" \n        ) \n    ] \n    )\n```\n\n----------------------------------------\n\nTITLE: GetElementsWithinSet Operation in Python\nDESCRIPTION: This Python example demonstrates how to use the GetElementsWithinSet operation to retrieve elements within a set of vertices. It creates an operation with input seeds for vertices 1, 2, and 3.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/accumulo.md#2025-04-23_snippet_12\n\nLANGUAGE: python\nCODE:\n```\ng.GetElementsWithinSet(\n  input=[\n    g.EntitySeed(\n      vertex=1\n    ),\n    g.EntitySeed(\n      vertex=2\n    ),\n    g.EntitySeed(\n      vertex=3\n    )\n  ]\n)\n```\n\n----------------------------------------\n\nTITLE: Sorting Elements with Operation Chain in Java\nDESCRIPTION: Creates an operation chain that gets elements and sorts them based on count and score properties. Uses GetElements operation with EntitySeed inputs and applies transformations with custom scoring function.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/core.md#2025-04-23_snippet_35\n\nLANGUAGE: java\nCODE:\n```\nfinal OperationChain<Iterable<? extends Element>> opChain = new OperationChain.Builder()\n        .first(new GetElements.Builder()\n                .input(new EntitySeed(1), new EntitySeed(2))\n                .view(new View.Builder()\n                        .entity(\"entity\", new ViewElementDefinition.Builder()\n                                .transientProperty(\"score\", Integer.class)\n                                .transformer(new ElementTransformer.Builder()\n                                        .select(\"VERTEX\", \"count\")\n                                        .execute(new ExampleScoreFunction())\n                                        .project(\"score\")\n                                        .build())\n                                .build())\n                        .edge(\"edge\", new ViewElementDefinition.Builder()\n                                .transientProperty(\"score\", Integer.class)\n                                .transformer(new ElementTransformer.Builder()\n                                        .select(\"DESTINATION\", \"count\")\n                                        .execute(new ExampleScoreFunction())\n                                        .project(\"score\")\n                                        .build())\n                                .build())\n                        .build())\n                .build())\n        .then(new Sort.Builder()\n                .comparators(\n                        new ElementPropertyComparator.Builder()\n                                .groups(\"entity\", \"edge\")\n                                .property(\"count\")\n                                .reverse(false)\n                                .build(),\n                        new ElementPropertyComparator.Builder()\n                                .groups(\"entity\", \"edge\")\n                                .property(\"score\")\n                                .reverse(false)\n                                .build()\n                )\n                .resultLimit(4)\n                .build())\n        .build();\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom LDAP User Factory in Gaffer\nDESCRIPTION: A code example demonstrating how to create a custom UserFactory implementation that authenticates users against an LDAP server by extracting information from the authorization header and constructing a User object with appropriate authorizations.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/development-guide/project-structure/components/user.md#2025-04-23_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic class LdapUserFactory implements UserFactory {\n\n    @Context\n    private HttpHeaders httpHeaders;\n\n    public User createUser() {\n        final String authHeaderValue = httpHeaders.getHeaderString(HttpHeaders.AUTHORIZATION); // add logic to fetch userId\n        final String userId = null; // extract from authHeaderValue\n        final List<String> opAuths = null; // fetch op auths for userId\n        final List<String> dataAuths = null; // fetch op auths for userId\n        return new User.Builder()\n                .userId(userId)\n                .opAuths(opAuths)\n                .dataAuths(dataAuths)\n                .build();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Base64Decode in Java\nDESCRIPTION: Shows how to create a Base64Decode function in Java. This function decodes a base64 encoded byte array.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/koryphe-functions.md#2025-04-23_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nfinal Base64Decode function = new Base64Decode();\n```\n\n----------------------------------------\n\nTITLE: Implementing Join Operation in JSON with KeyFunctionMatch\nDESCRIPTION: JSON configuration for a Gaffer Join operation with KeyFunctionMatch. The operation takes four Entity inputs and uses function chains to match elements based on the 'count' property. It specifies a FULL join type with RIGHT match key.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/join.md#2025-04-23_snippet_39\n\nLANGUAGE: json\nCODE:\n```\n{\n            \"class\" : \"Join\",\n            \"input\" : [{\n            \"class\" : \"Entity\",\n            \"group\" : \"entity\",\n            \"vertex\" : 1,\n            \"properties\" : {\n                \"count\" : 3\n            }\n            }, {\n            \"class\" : \"Entity\",\n            \"group\" : \"entity\",\n            \"vertex\" : 4,\n            \"properties\" : {\n                \"count\" : 1\n            }\n            }, {\n            \"class\" : \"Entity\",\n            \"group\" : \"entity\",\n            \"vertex\" : 5,\n            \"properties\" : {\n                \"count\" : 3\n            }\n            }, {\n            \"class\" : \"Entity\",\n            \"group\" : \"entity\",\n            \"vertex\" : 6,\n            \"properties\" : {\n                \"count\" : 30\n            }\n            }\n            ],\n            \"operation\" : {\n            \"class\" : \"GetAllElements\"\n            },\n            \"matchMethod\" : {\n            \"class\" : \"KeyFunctionMatch\",\n            \"firstKeyFunction\": {\n            \"class\" : \"FunctionChain\",\n            \"functions\" : [ {\n                \"class\" : \"ExtractProperty\",\n                \"name\": \"count\"\n            }, {\n            \"class\" : \"Increment\",\n            \"increment\" : 1\n            }\n            ]\n            },\n            \"secondKeyFunction\": {\n                \"class\": \"ExtractProperty\",\n                \"name\": \"count\"  \n                }\n            },\n            \"matchKey\": \"RIGHT\",\n            \"flatten\": false,\n            \"joinType\" : \"FULL\"\n        } ]\n        }\n```\n\n----------------------------------------\n\nTITLE: Converting Elements to EntitySeeds using ToEntitySeeds Operation in Gaffer\nDESCRIPTION: Demonstrates using ToEntitySeeds operation in an OperationChain to convert GetElements results into EntitySeeds. The operation takes input EntitySeeds and returns transformed EntitySeed objects containing the element details.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/core.md#2025-04-23_snippet_56\n\nLANGUAGE: java\nCODE:\n```\nfinal OperationChain<Iterable<? extends EntitySeed>> opChain = new OperationChain.Builder()\n        .first(new GetElements.Builder()\n                .input(new EntitySeed(1), new EntitySeed(2))\n                .build())\n        .then(new ToEntitySeeds())\n        .build();\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"OperationChain\",\n  \"operations\" : [ {\n    \"class\" : \"GetElements\",\n    \"input\" : [ {\n      \"class\" : \"EntitySeed\",\n      \"vertex\" : 1\n    }, {\n      \"class\" : \"EntitySeed\",\n      \"vertex\" : 2\n    } ]\n  }, {\n    \"class\" : \"ToEntitySeeds\"\n  } ]\n}\n```\n\nLANGUAGE: python\nCODE:\n```\ng.OperationChain(\n  operations=[\n    g.GetElements(\n      input=[\n        g.EntitySeed(\n          vertex=1\n        ),\n        g.EntitySeed(\n          vertex=2\n        )\n      ]\n    ),\n    g.ToEntitySeeds()\n  ]\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing KeyFunctionMatch with FunctionChain\nDESCRIPTION: Shows how to implement a left outer join using KeyFunctionMatch with a FunctionChain that combines ExtractProperty and Increment functions for matching elements. The operation compares processed count values between elements.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/join.md#2025-04-23_snippet_51\n\nLANGUAGE: java\nCODE:\n```\nfinal OperationChain<Iterable<? extends MapTuple>> opChain = new OperationChain.Builder()\n        .first(new Join.Builder<>()\n                .input(inputElements)\n                .operation(new GetAllElements())\n                .joinType(JoinType.OUTER)\n                .matchKey(MatchKey.LEFT)\n                .matchMethod(new KeyFunctionMatch.Builder()\n                    .firstKeyFunction(new FunctionChain(new ExtractProperty(\"count\"), new Increment(1)))\n                    .secondKeyFunction(new ExtractProperty(\"count\"))\n                    .build())\n                .build())\n        .build();\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n\"class\" : \"OperationChain\",\n\"operations\" : [ {\n    \"class\" : \"Join\",\n    \"input\" : [{\n    \"class\" : \"Entity\",\n    \"group\" : \"entity\",\n    \"vertex\" : 1,\n    \"properties\" : {\n        \"count\" : 3\n    }\n    }, {\n    \"class\" : \"Entity\",\n    \"group\" : \"entity\",\n    \"vertex\" : 4,\n    \"properties\" : {\n        \"count\" : 1\n    }\n    }, {\n    \"class\" : \"Entity\",\n    \"group\" : \"entity\",\n    \"vertex\" : 5,\n    \"properties\" : {\n        \"count\" : 3\n    }\n    }, {\n    \"class\" : \"Entity\",\n    \"group\" : \"entity\",\n    \"vertex\" : 6,\n    \"properties\" : {\n        \"count\" : 30\n    }\n    }\n    ],\n    \"operation\" : {\n    \"class\" : \"GetAllElements\"\n    },\n    \"matchMethod\" : {\n    \"class\" : \"KeyFunctionMatch\",\n    \"firstKeyFunction\": {\n    \"class\" : \"FunctionChain\",\n    \"functions\" : [ {\n        \"class\" : \"ExtractProperty\",\n        \"name\": \"count\"\n    }, {\n    \"class\" : \"Increment\",\n    \"increment\" : 1\n    }\n    ]\n    },\n    \"secondKeyFunction\": {\n        \"class\": \"ExtractProperty\",\n        \"name\": \"count\"  \n        }\n    },\n    \"matchKey\": \"LEFT\",\n    \"joinType\" : \"OUTER\"\n} ]\n}\n```\n\nLANGUAGE: python\nCODE:\n```\ng.OperationChain( \noperations=[ \n    g.Join( \n    operation=g.GetAllElements(), \n    match_method=g.KeyFunctionMatch(\n        first_key_function=g.FunctionChain([\n            g.ExtractProperty(\"count\"),\n            g.Increment(increment=1)\n            ]),\n        second_key_function=g.ExtractProperty(\"count\")\n        ), \n    input=[ \n        g.Entity( \n        group=\"entity\", \n        properties={'count': 3}, \n        vertex=1 \n        ), \n        g.Entity( \n        group=\"entity\", \n        properties={'count': 1}, \n        vertex=4 \n        ), \n        g.Entity( \n        group=\"entity\", \n        properties={'count': 3}, \n        vertex=5 \n        ), \n        g.Entity( \n        group=\"entity\", \n        properties={'count': 30}, \n        vertex=6 \n        ) \n    ], \n    match_key=\"LEFT\", \n    join_type=\"OUTER\" \n    ) \n] \n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Gaffer View and ExportToOtherGraph Operation in Python\nDESCRIPTION: This code creates a Gaffer View that filters for only edge elements with the group 'edge', while excluding all other edges and entities. It then sets up an ExportToOtherGraph operation to export the filtered data to a new graph with specified schema and properties IDs.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/export.md#2025-04-23_snippet_48\n\nLANGUAGE: python\nCODE:\n```\nview=g.View( \n    edges=[ \n        g.ElementDefinition( \n            group=\"edge\" \n        ) \n        ], \n        all_edges=False, \n        all_entities=False \n    ) \n), \ng.ExportToOtherGraph( \n    graph_id=\"newGraphId\", \n    parent_schema_ids=[ \n        \"exportSchemaId\" \n    ], \n    parent_store_properties_id=\"exportStorePropertiesId\" \n) \n] \n)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Full Schema in Java\nDESCRIPTION: This Java code snippet demonstrates how to create a GetSchema operation to retrieve the full schema of a graph. The compact field is set to false by default.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/core.md#2025-04-23_snippet_87\n\nLANGUAGE: java\nCODE:\n```\nfinal GetSchema operation = new GetSchema();\n```\n\n----------------------------------------\n\nTITLE: Querying and Extracting LongsSketch Frequency Estimates in Gaffer\nDESCRIPTION: Java code demonstrating how to query a Gaffer graph for an edge containing a LongsSketch property, and then extract frequency estimates for specific long values from the sketch.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/properties-guide/advanced.md#2025-04-23_snippet_12\n\nLANGUAGE: java\nCODE:\n```\nfinal GetElements query = new GetElements.Builder()\n        .input(new EdgeSeed(\"A\", \"B\", DirectedType.UNDIRECTED))\n        .build();\nfinal Element edge;\ntry (final Iterable<? extends Element> edges = graph.execute(query, user)) {\n    edge = edges.iterator().next();\n}\nfinal LongsSketch longsSketch = (LongsSketch) edge.getProperty(\"longsSketch\");\nfinal String estimates = \"Edge A-B: 1L seen approximately \" + longsSketch.getEstimate(1L)\n        + \" times, 9L seen approximately \" + longsSketch.getEstimate(9L) + \" times.\";\n```\n\n----------------------------------------\n\nTITLE: Loading Data Operation Chain\nDESCRIPTION: JSON operation chain for loading data from a Neo4j CSV file into Gaffer using ImportFromLocalFile, GenerateElements and AddElements operations\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/development-guide/example-deployment/using-the-api.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"class\": \"OperationChain\",\n    \"operations\": [\n        {\n            \"class\": \"ImportFromLocalFile\",\n            \"filePath\": \"/gaffer/data/neo4jExport.csv\"\n        },\n        {\n            \"class\": \"GenerateElements\",\n            \"elementGenerator\": {\n                \"class\": \"Neo4jCsvElementGenerator\"\n            }\n        },\n        {\n            \"class\": \"AddElements\"\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating IsLessThan Predicate in Python\nDESCRIPTION: Python implementation of the IsLessThan predicate using the Gaffer Python client. Configures the predicate to check if the input is less than 5.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/predicates-guide/koryphe-predicates.md#2025-04-23_snippet_75\n\nLANGUAGE: python\nCODE:\n```\ng.IsLessThan(\n  value=5,\n  or_equal_to=False\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Right Key Outer Join with ElementMatch in Gaffer\nDESCRIPTION: Creates an OperationChain that performs a right key outer join using ElementMatch to match elements based on their 'count' property. The join is configured with JoinType.OUTER and MatchKey.RIGHT to ensure all elements from the right side are included in the result.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/join.md#2025-04-23_snippet_52\n\nLANGUAGE: java\nCODE:\n```\nfinal OperationChain<Iterable<? extends MapTuple>> opChain = new OperationChain.Builder()\n        .first(new Join.Builder<>()\n                .input(inputElements)\n                .operation(new GetAllElements())\n                .joinType(JoinType.OUTER)\n                .matchKey(MatchKey.RIGHT)\n                .flatten(false)\n                .matchMethod(new ElementMatch(\"count\"))\n                .build())\n        .build();\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n\"class\" : \"OperationChain\",\n\"operations\" : [ {\n    \"class\" : \"Join\",\n    \"input\" : [ {\n    \"class\" : \"Entity\",\n    \"group\" : \"entity\",\n    \"vertex\" : 1,\n    \"properties\" : {\n        \"count\" : 3\n    }\n    }, {\n    \"class\" : \"Entity\",\n    \"group\" : \"entity\",\n    \"vertex\" : 4,\n    \"properties\" : {\n        \"count\" : 1\n    }\n    }, {\n    \"class\" : \"Entity\",\n    \"group\" : \"entity\",\n    \"vertex\" : 5,\n    \"properties\" : {\n        \"count\" : 3\n    }\n    }, {\n    \"class\" : \"Entity\",\n    \"group\" : \"entity\",\n    \"vertex\" : 6,\n    \"properties\" : {\n        \"count\" : 30\n    }\n    } ],\n    \"operation\" : {\n    \"class\" : \"GetAllElements\"\n    },\n    \"matchMethod\" : {\n    \"class\" : \"ElementMatch\"\n    },\n    \"matchKey\" : \"RIGHT\",\n    \"flatten\" : false,\n    \"joinType\" : \"OUTER\"\n} ]\n}\n```\n\nLANGUAGE: python\nCODE:\n```\ng.OperationChain( \noperations=[ \n    g.Join( \n    operation=g.GetAllElements(), \n    match_method=g.ElementMatch(), \n    input=[ \n        g.Entity( \n        group=\"entity\", \n        properties={'count': 3}, \n        vertex=1 \n        ), \n        g.Entity( \n        group=\"entity\", \n        properties={'count': 1}, \n        vertex=4 \n        ), \n        g.Entity( \n        group=\"entity\", \n        properties={'count': 3}, \n        vertex=5 \n        ), \n        g.Entity( \n        group=\"entity\", \n        properties={'count': 30}, \n        vertex=6 \n        ) \n    ], \n    flatten=False, \n    match_key=\"RIGHT\", \n    join_type=\"OUTER\" \n    ) \n] \n)\n```\n\nLANGUAGE: java\nCODE:\n```\n[ [] --> Edge[source=1,destination=4,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=<java.lang.Integer>1]] ]\n[ [] --> Edge[source=3,destination=4,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=<java.lang.Integer>4]] ]\n[ [] --> Entity[vertex=2,group=entity,properties=Properties[count=<java.lang.Integer>1]] ]\n[ [] --> Edge[source=2,destination=3,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=<java.lang.Integer>2]] ]\n[ [] --> Entity[vertex=3,group=entity,properties=Properties[count=<java.lang.Integer>2]] ]\n[ [] --> Edge[source=2,destination=4,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=<java.lang.Integer>1]] ]\n[ [] --> Edge[source=1,destination=2,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=<java.lang.Integer>3]] ]\n[ [] --> Edge[source=2,destination=5,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=<java.lang.Integer>1]] ]\n```\n\nLANGUAGE: json\nCODE:\n```\n[ {\n\"values\" : {\n    \"LEFT\" : [ ],\n    \"RIGHT\" : {\n    \"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n    \"group\" : \"edge\",\n    \"source\" : 1,\n    \"destination\" : 4,\n    \"directed\" : true,\n    \"matchedVertex\" : \"SOURCE\",\n    \"properties\" : {\n        \"count\" : 1\n    }\n    }\n}\n}, {\n\"values\" : {\n    \"LEFT\" : [ ],\n    \"RIGHT\" : {\n    \"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n    \"group\" : \"edge\",\n    \"source\" : 3,\n    \"destination\" : 4,\n    \"directed\" : true,\n    \"matchedVertex\" : \"SOURCE\",\n    \"properties\" : {\n        \"count\" : 4\n    }\n    }\n}\n}, {\n\"values\" : {\n    \"LEFT\" : [ ],\n    \"RIGHT\" : {\n    \"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n    \"group\" : \"entity\",\n    \"vertex\" : 2,\n    \"properties\" : {\n        \"count\" : 1\n    }\n    }\n}\n}, {\n\"values\" : {\n    \"LEFT\" : [ ],\n    \"RIGHT\" : {\n    \"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n    \"group\" : \"edge\",\n    \"source\" : 2,\n    \"destination\" : 3,\n    \"directed\" : true,\n    \"matchedVertex\" : \"SOURCE\",\n    \"properties\" : {\n        \"count\" : 2\n    }\n    }\n}\n}, {\n\"values\" : {\n    \"LEFT\" : [ ],\n    \"RIGHT\" : {\n    \"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n    \"group\" : \"entity\",\n    \"vertex\" : 3,\n    \"properties\" : {\n        \"count\" : 2\n    }\n    }\n}\n}, {\n\"values\" : {\n    \"LEFT\" : [ ],\n    \"RIGHT\" : {\n    \"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n    \"group\" : \"edge\",\n    \"source\" : 2,\n    \"destination\" : 4,\n    \"directed\" : true,\n    \"matchedVertex\" : \"SOURCE\",\n    \"properties\" : {\n        \"count\" : 1\n    }\n    }\n}\n}, {\n\"values\" : {\n    \"LEFT\" : [ ],\n    \"RIGHT\" : {\n    \"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n    \"group\" : \"edge\",\n    \"source\" : 1,\n    \"destination\" : 2,\n    \"directed\" : true,\n    \"matchedVertex\" : \"SOURCE\",\n    \"properties\" : {\n        \"count\" : 3\n    }\n    }\n}\n}, {\n\"values\" : {\n    \"LEFT\" : [ ],\n    \"RIGHT\" : {\n    \"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n    \"group\" : \"edge\",\n    \"source\" : 2,\n    \"destination\" : 5,\n    \"directed\" : true,\n    \"matchedVertex\" : \"SOURCE\",\n    \"properties\" : {\n        \"count\" : 1\n    }\n    }\n}\n} ]\n```\n\n----------------------------------------\n\nTITLE: Fetching Entities and Edges Related to Vertex in JSON\nDESCRIPTION: JSON representation of the GetElements operation to retrieve entities and edges related to a specific vertex. This example fetches all elements connected to vertex 2.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/get.md#2025-04-23_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n\"class\" : \"GetElements\",\n\"input\" : [ {\n    \"class\" : \"EntitySeed\",\n    \"vertex\" : 2\n} ]\n}\n```\n\n----------------------------------------\n\nTITLE: Conditionally Get Elements or Limit Results using If Operation in Java\nDESCRIPTION: This snippet demonstrates creating an OperationChain with an If operation in Java. It conditionally executes a GetElements operation if the result count is less than 5, otherwise limits the results to 5.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/flow.md#2025-04-23_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nfinal OperationChain<Object> opChain = new OperationChain.Builder()\n        .first(new GetAdjacentIds.Builder()\n                .input(new EntitySeed(2))\n                .build())\n        .then(new If.Builder<>()\n                .conditional(new IsShorterThan(5))\n                .then(new OperationChain.Builder()\n                        .first(new GetElements())\n                        .then(new Limit<>(5))\n                        .build())\n                .otherwise(new Limit<>(5))\n                .build())\n        .build();\n```\n\n----------------------------------------\n\nTITLE: Executing a Named Operation in Python\nDESCRIPTION: Executes the previously defined '2-hop' Named Operation using Python, with an EntitySeed of vertex 1 as input.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/administration-guide/named-operations.md#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ng.NamedOperation( \n    input=[ \n        g.EntitySeed( \n            vertex=1 \n        ) \n    ], \n    operation_name=\"2-hop\" \n)\n```\n\n----------------------------------------\n\nTITLE: Using a Named View in Gaffer GetElements Operation\nDESCRIPTION: Shows how to execute a Named View within a GetElements operation to filter results. Examples are provided in Java, JSON, and Python.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/administration-guide/named-views.md#2025-04-23_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nfinal GetElements operation = new GetElements.Builder()\n    .input(new EntitySeed(\"John\"))\n    .view(new NamedView.Builder()\n        .name(\"exampleNamedView\")\n        .build())\n    .build();\n\ngraph.execute(operation, user)\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"class\": \"GetElements\",\n    \"input\": [\n        {\n            \"class\": \"EntitySeed\",\n            \"vertex\": \"John\"\n        }\n    ],\n    \"view\": {\n        \"class\": \"NamedView\",\n        \"name\": \"exampleNamedView\"\n    }\n}\n```\n\nLANGUAGE: python\nCODE:\n```\ngc.execute_operation(\n    operation = g.GetElements(\n        input = [g.EntitySeed(vertex = \"John\")]\n        view = g.View(\n           g.NamedView(\n                name=\"exampleNamedView\"\n           )\n        )\n    )\n)\n```\n\n----------------------------------------\n\nTITLE: Adding a Named View in Gaffer\nDESCRIPTION: Demonstrates how to add a Named View that filters 'Created' edges with a weight greater than 0.4. The example shows implementation in Java, JSON, and Python.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/administration-guide/named-views.md#2025-04-23_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nfinal AddNamedView view = new AddNamedView.Builder()\n    .name(\"exampleNamedView\")\n    .description(\"Example Named View\")\n    .overwrite(true)\n    .view(new View.Builder()\n        .edge(\"Created\", new ViewElementDefinition.Builder()\n            .preAggregationFilter(new ElementFilter.Builder()\n                .select(\"weight\")\n                .execute(new IsMoreThan(0.4))\n                .build())\n            .build())\n        .build()\n    .build());\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"class\" : \"AddNamedView\",\n    \"name\" : \"exampleNamedView\",\n    \"description\" : \"Example Named View\",\n    \"view\": {\n        \"edges\": {\n            \"Created\": {\n                \"preAggregationFilterFunctions\": [\n                    {\n                        \"selection\": [\n                            \"weight\"\n                        ],\n                        \"predicate\": {\n                            \"class\": \"IsMoreThan\",\n                            \"orEqualTo\": false,\n                            \"value\": {\n                                \"Float\": 0.4\n                            }\n                        }\n                    }\n                ]\n            }\n        }\n    },\n    \"overwriteFlag\" : true\n}\n```\n\nLANGUAGE: python\nCODE:\n```\ng.AddNamedView(\n    view = g.View(\n        edges = [\n            g.ElementDefinition(\n                group = 'Created',\n                pre_aggregation_filter_functions = [\n                    g.PredicateContext(\n                        selection = ['weight'],\n                        predicate = g.IsMoreThan(\n                            value = g.float_(0.4),\n                            or_equal_to = False\n                        )\n                    )\n                ]\n            )\n        ]\n    ),\n    overwrite_flag=True\n)\n```\n\n----------------------------------------\n\nTITLE: Deserializing HllSketchWithValues in Java\nDESCRIPTION: This Java code demonstrates how to deserialize an HllSketchWithValues object from JSON using Gaffer's JSONSerialiser. This is useful when working with HyperLogLog sketches in Java before sending data via REST.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/development-guide/rest-api-sketches.md#2025-04-23_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nfinal HllSketchWithValues hllSketchWithValues = JSONSerialiser.deserialise(treeNode.toString(), HllSketchWithValues.class);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Edges with Property Exclusion in JSON\nDESCRIPTION: This JSON representation of the GetElements operation retrieves edges while excluding the 'count' property and applying a transformation to create a 'vertex|count' property.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/get.md#2025-04-23_snippet_23\n\nLANGUAGE: json\nCODE:\n```\n{\n\"class\" : \"GetElements\",\n\"input\" : [ {\n    \"class\" : \"EntitySeed\",\n    \"vertex\" : 2\n} ],\n\"view\" : {\n    \"edges\" : {\n    \"edge\" : {\n        \"transientProperties\" : {\n        \"vertex|count\" : \"String\"\n        },\n        \"transformFunctions\" : [ {\n        \"selection\" : [ \"SOURCE\", \"count\" ],\n        \"function\" : {\n            \"class\" : \"Concat\",\n            \"separator\" : \"|\"\n        },\n        \"projection\" : [ \"vertex|count\" ]\n        } ],\n        \"excludeProperties\" : [ \"count\" ]\n    }\n    }\n}\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a Parameterized Named Operation in JSON\nDESCRIPTION: Creates a Named Operation with a parameter in JSON that allows setting a result limit. The operation chain includes two GetAdjacentIds operations followed by a Limit operation with a parameterized limit.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/administration-guide/named-operations.md#2025-04-23_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"class\" : \"AddNamedOperation\",\n    \"operationName\" : \"2-hop-with-limit\",\n    \"description\" : \"2 hop query with settable limit\",\n    \"score\" : 3,\n    \"operationChain\" : {\n        \"operations\" : [ {\n            \"class\" : \"uk.gov.gchq.gaffer.operation.impl.get.GetAdjacentIds\",\n            \"includeIncomingOutGoing\" : \"OUTGOING\"\n        }, {\n            \"class\" : \"uk.gov.gchq.gaffer.operation.impl.get.GetAdjacentIds\",\n            \"includeIncomingOutGoing\" : \"OUTGOING\"\n        }, {\n            \"class\" : \"uk.gov.gchq.gaffer.operation.impl.Limit\",\n            \"resultLimit\" : \"${param1}\"\n        } ]\n    },\n    \"overwriteFlag\" : true,\n    \"parameters\" : {\n        \"param1\" : {\n            \"description\" : \"Limit param\",\n            \"defaultValue\" : 1,\n            \"valueClass\" : \"Long\",\n            \"required\" : false\n        }\n    },\n    \"readAccessRoles\" : [ \"read-user\" ],\n    \"writeAccessRoles\" : [ \"write-user\" ]\n}\n```\n\n----------------------------------------\n\nTITLE: Results of GetElementsInRanges Between Entity and Edge Seeds\nDESCRIPTION: The output of the GetElementsInRanges operation between entity 4 and edge 4->5, showing all entities and edges within that range. Results include both the entity properties and relationship details.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/accumulo.md#2025-04-23_snippet_21\n\nLANGUAGE: java\nCODE:\n```\nEntity[vertex=4,group=entity,properties=Properties[count=<java.lang.Integer>1]]\nEdge[source=1,destination=4,directed=true,matchedVertex=DESTINATION,group=edge,properties=Properties[count=<java.lang.Integer>1]]\nEdge[source=2,destination=4,directed=true,matchedVertex=DESTINATION,group=edge,properties=Properties[count=<java.lang.Integer>1]]\nEdge[source=3,destination=4,directed=true,matchedVertex=DESTINATION,group=edge,properties=Properties[count=<java.lang.Integer>4]]\nEntity[vertex=5,group=entity,properties=Properties[count=<java.lang.Integer>3]]\n```\n\n----------------------------------------\n\nTITLE: Continuous Data Loading in Java\nDESCRIPTION: This snippet illustrates how to continuously load data into Gaffer using the AddElements operation. It can handle a never-ending stream of Elements that match the graph's schema.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/administration-guide/gaffer-stores/accumulo-store.md#2025-04-23_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nAddElements addElements = new AddElements.Builder()\n        .elements(elements)\n        .build();\ngraph.execute(addElements, new User());\n```\n\n----------------------------------------\n\nTITLE: Retrieving Job Details in an Operation Chain with GetJobDetails in Gaffer\nDESCRIPTION: This snippet shows how to use GetJobDetails within an OperationChain to retrieve details of a single job. It includes examples in Java, JSON, and Python, along with sample results.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/job.md#2025-04-23_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nfinal OperationChain<JobDetail> opChain = new OperationChain.Builder()\n        .first(new GetAllElements())\n        .then(new DiscardOutput())\n        .then(new GetJobDetails())\n        .build();\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"class\" : \"OperationChain\",\n    \"operations\" : [ {\n        \"class\" : \"GetAllElements\"\n    }, {\n        \"class\" : \"DiscardOutput\"\n    }, {\n        \"class\" : \"GetJobDetails\"\n    } ]\n}\n```\n\nLANGUAGE: python\nCODE:\n```\ng.OperationChain( \n    operations=[ \n        g.GetAllElements(), \n        g.DiscardOutput(), \n        g.GetJobDetails() \n    ] \n)\n```\n\n----------------------------------------\n\nTITLE: Executing OpenCypher Query via Gremlin\nDESCRIPTION: Demonstrates how to execute an OpenCypher query within a Gremlin traversal using the with() step. The query retrieves a node with ID '1'.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/user-guide/apis/opencypher.md#2025-04-23_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\ng.with(\"cypher\", \"MATCH (n) WHERE ID(n) = '1' RETURN n\").call().toList()\n```\n\n----------------------------------------\n\nTITLE: Fetching Entities and Edges with Count Filter in Java\nDESCRIPTION: This Java snippet shows how to get entities and edges related to an edge, applying a filter for elements with a count greater than 1 using the GetElements operation and View builder.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/get.md#2025-04-23_snippet_13\n\nLANGUAGE: java\nCODE:\n```\nfinal GetElements operation = new GetElements.Builder()\n        .input(new EdgeSeed(1, 2, DirectedType.EITHER))\n        .view(new View.Builder()\n                .entity(\"entity\", new ViewElementDefinition.Builder()\n                        .preAggregationFilter(new ElementFilter.Builder()\n                                .select(\"count\")\n                                .execute(new IsMoreThan(1))\n                                .build())\n                        .build())\n                .edge(\"edge\", new ViewElementDefinition.Builder()\n                        .preAggregationFilter(new ElementFilter.Builder()\n                                .select(\"count\")\n                                .execute(new IsMoreThan(1))\n                                .build())\n                        .build())\n                .build())\n        .build();\n```\n\n----------------------------------------\n\nTITLE: Merge Function Configuration for Federated Store\nDESCRIPTION: JSON configuration file that defines custom merge functions for specific operations. This example configures GetElements and GetAllElements operations to use ConcatenateMergeFunction.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/administration-guide/gaffer-stores/federated-store.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"storeConfiguredMergeFunctions\": {\n    \"uk.gov.gchq.gaffer.operation.impl.get.GetElements\": {\n      \"class\": \"uk.gov.gchq.gaffer.federatedstore.util.ConcatenateMergeFunction\"\n    },\n    \"uk.gov.gchq.gaffer.operation.impl.get.GetAllElements\": {\n      \"class\": \"uk.gov.gchq.gaffer.federatedstore.util.ConcatenateMergeFunction\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Job Details with Specific JobId using GetJobDetails in Gaffer\nDESCRIPTION: This snippet demonstrates how to use GetJobDetails to retrieve details of a job with a specific jobId. It includes examples in Java, JSON, and Python, along with sample results.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/job.md#2025-04-23_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nfinal GetJobDetails operation = new GetJobDetails.Builder()\n        .jobId(jobId)\n        .build();\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"class\" : \"GetJobDetails\",\n    \"jobId\" : \"306e1208-62d2-47d5-b2c2-1005d3295011\"\n}\n```\n\nLANGUAGE: python\nCODE:\n```\ng.GetJobDetails( \n    job_id=\"306e1208-62d2-47d5-b2c2-1005d3295011\" \n)\n```\n\n----------------------------------------\n\nTITLE: Add Named Operation with If Operation and Parameter in Java\nDESCRIPTION: This Java snippet demonstrates creating and adding a NamedOperation that includes an If operation with a parameter. The parameter allows configuring whether to execute an optional GetElements operation with a filter.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/flow.md#2025-04-23_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nfinal String opChainString = \"{\"\n        + \"\\\"operations\\\" : [ {\"\n        + \"      \\\"class\\\" : \\\"uk.gov.gchq.gaffer.operation.impl.get.GetAdjacentIds\\\"\"\n        + \"    }, {\"\n        + \"      \\\"class\\\" : \\\"uk.gov.gchq.gaffer.operation.impl.If\\\",\"\n        + \"      \\\"condition\\\" : \\\"${enableFiltering}\\\",\"\n        + \"      \\\"then\\\" : {\"\n        + \"        \\\"class\\\" : \\\"uk.gov.gchq.gaffer.operation.impl.get.GetElements\\\",\"\n        + \"        \\\"view\\\" : {\"\n        + \"          \\\"entities\\\" : {\"\n        + \"            \\\"entity\\\" : {\"\n        + \"              \\\"preAggregationFilterFunctions\\\" : [ {\"\n        + \"                \\\"selection\\\" : [ \\\"count\\\" ],\"\n        + \"                \\\"predicate\\\" : {\"\n        + \"                  \\\"class\\\" : \\\"uk.gov.gchq.koryphe.impl.predicate.IsLessThan\\\",\"\n        + \"                  \\\"orEqualTo\\\" : true,\"\n        + \"                  \\\"value\\\" : 10\"\n        + \"                }\"\n        + \"              } ]\"\n        + \"            }\"\n        + \"          }\"\n        + \"        }\"\n        + \"      }\"\n        + \"    }, {\"\n        + \"      \\\"class\\\" : \\\"uk.gov.gchq.gaffer.operation.impl.get.GetElements\\\"\"\n        + \"    } ]\"\n        + \"}\";\n\nParameterDetail param = new ParameterDetail.Builder()\n        .defaultValue(true)\n        .description(\"Flag for enabling filtering\")\n        .valueClass(boolean.class)\n        .build();\njava.util.Map<String, ParameterDetail> parameterMap = Maps.newHashMap();\nparameterMap.put(\"enableFiltering\", param);\n\nfinal AddNamedOperation operation = new AddNamedOperation.Builder()\n        .operationChain(opChainString)\n        .description(\"2 hop query with optional filtering by count\")\n        .name(\"2-hop-with-optional-filtering\")\n        .readAccessRoles(\"read-user\")\n        .writeAccessRoles(\"write-user\")\n        .parameters(parameterMap)\n        .overwrite()\n        .score(4)\n        .build();\n```\n\n----------------------------------------\n\nTITLE: Executing Full Left Join with KeyFunctionMatch in Java\nDESCRIPTION: This Java code demonstrates a full left join using KeyFunctionMatch with a FunctionChain. It applies an Increment function to the 'count' property for the first key function.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/join.md#2025-04-23_snippet_31\n\nLANGUAGE: java\nCODE:\n```\nfinal OperationChain<Iterable<? extends MapTuple>> opChain = new OperationChain.Builder()\n        .first(new Join.Builder<>()\n                .input(inputElements)\n                .operation(new GetAllElements())\n                .joinType(JoinType.FULL)\n                .matchKey(MatchKey.LEFT)\n                .matchMethod(new KeyFunctionMatch.Builder()\n                    .firstKeyFunction(new FunctionChain(new ExtractProperty(\"count\"), new Increment(1)))\n                    .secondKeyFunction(new ExtractProperty(\"count\"))\n                    .build())\n                .build())\n        .build();\n```\n\n----------------------------------------\n\nTITLE: Fetching Entities and Edges with Count Filter in Python\nDESCRIPTION: This Python code shows how to query for entities and edges related to an edge, applying a filter for elements with a count greater than 1 using the GetElements operation and View in Gaffer's Python client.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/get.md#2025-04-23_snippet_15\n\nLANGUAGE: python\nCODE:\n```\ng.GetElements(\nview=g.View(\n    entities=[\n    g.ElementDefinition(\n        group=\"entity\",\n        pre_aggregation_filter_functions=[\n        g.PredicateContext(\n            selection=[\n            \"count\"\n            ],\n            predicate=g.IsMoreThan(\n            value=1,\n            or_equal_to=False\n            )\n        )\n        ]\n    )\n    ],\n    edges=[\n    g.ElementDefinition(\n        group=\"edge\",\n        pre_aggregation_filter_functions=[\n        g.PredicateContext(\n            selection=[\n            \"count\"\n            ],\n            predicate=g.IsMoreThan(\n            value=1,\n            or_equal_to=False\n            )\n        )\n        ]\n    )\n    ],\n    all_edges=False,\n    all_entities=False\n),\ninput=[\n    g.EdgeSeed(\n    source=1,\n    destination=2,\n    directed_type=\"EITHER\",\n    matched_vertex=\"SOURCE\"\n    )\n]\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Elements From Kafka - Java Implementation\nDESCRIPTION: Java implementation for adding elements from Kafka using AddElementsFromKafka operation with configuration for bootstrap servers, group ID, and topic.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/flink.md#2025-04-23_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nfinal AddElementsFromKafka op = new AddElementsFromKafka.Builder()\n            .bootstrapServers(\"hostname1:8080,hostname2:8080\")\n            .groupId(\"groupId1\")\n            .topic(\"topic1\")\n            .generator(ElementGenerator.class)\n            .parallelism(1)\n            .validate(true)\n            .skipInvalidElements(false)\n            .build();\n```\n\n----------------------------------------\n\nTITLE: Basic Named Operation in Python\nDESCRIPTION: Example of executing a basic Named Operation with parameters in Python using Gaffer's API.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/administration-guide/named-operations.md#2025-04-23_snippet_12\n\nLANGUAGE: python\nCODE:\n```\ng.NamedOperation( \n    input=[ \n        g.EntitySeed( \n            vertex=1 \n        ) \n    ], \n    operation_name=\"2-hop-with-limit\", \n    parameters={'param1': 2} \n)\n```\n\n----------------------------------------\n\nTITLE: Defining Types Schema with RBMBackedTimestampSet\nDESCRIPTION: JSON schema definition for types including RBMBackedTimestampSet configuration with serializer and aggregator specifications.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/properties-guide/map-set.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"types\": {\n    \"vertex.string\": {\n      \"class\": \"java.lang.String\",\n      \"validateFunctions\": [\n        {\n          \"class\": \"uk.gov.gchq.koryphe.impl.predicate.Exists\"\n        }\n      ]\n    },\n    \"timestamp.set\": {\n      \"class\": \"uk.gov.gchq.gaffer.time.RBMBackedTimestampSet\",\n      \"aggregateFunction\": {\n        \"class\": \"uk.gov.gchq.gaffer.time.binaryoperator.RBMBackedTimestampSetAggregator\"\n      },\n      \"serialiser\": {\n        \"class\": \"uk.gov.gchq.gaffer.time.serialisation.RBMBackedTimestampSetSerialiser\"\n      }\n    },\n    \"false\": {\n      \"class\": \"java.lang.Boolean\",\n      \"validateFunctions\": [\n        {\n          \"class\": \"uk.gov.gchq.koryphe.impl.predicate.IsFalse\"\n        }\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Right Key Inner Join with KeyFunctionMatch and FunctionChain in Python\nDESCRIPTION: Python implementation of a Join operation using KeyFunctionMatch with functions to transform properties before matching. The first function chain extracts the 'count' property and increments it by 1, while the second function extracts the 'count' property directly.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/join.md#2025-04-23_snippet_18\n\nLANGUAGE: python\nCODE:\n```\ng.OperationChain( \noperations=[ \n    g.Join( \n    operation=g.GetAllElements(), \n    match_method=g.KeyFunctionMatch(\n        first_key_function=g.FunctionChain([\n            g.ExtractProperty(\"count\"),\n            g.Increment(increment=1)\n            ]),\n        second_key_function=g.ExtractProperty(\"count\")\n        ), \n    input=[ \n        g.Entity( \n        group=\"entity\", \n        properties={'count': 3}, \n        vertex=1 \n        ), \n        g.Entity( \n        group=\"entity\", \n        properties={'count': 1}, \n        vertex=4 \n        ), \n        g.Entity( \n        group=\"entity\", \n        properties={'count': 3}, \n        vertex=5 \n        ), \n        g.Entity( \n        group=\"entity\", \n        properties={'count': 30}, \n        vertex=6 \n        ) \n    ], \n    flatten=False, \n    match_key=\"RIGHT\", \n    join_type=\"INNER\" \n    ) \n] \n)\n```\n\n----------------------------------------\n\nTITLE: Querying Graph Walks with Python in Gaffer\nDESCRIPTION: Example of using the GetWalks operation in Python to retrieve paths through a graph. The query starts from vertex 5 and performs a series of operations including filtering on cardinality entities and retrieving specific entity and edge groups with incoming direction.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/get.md#2025-04-23_snippet_52\n\nLANGUAGE: python\nCODE:\n```\ng.GetWalks(\n  input=[\n    g.EntitySeed(\n      vertex=5\n    )\n  ],\n  operations=[\n    g.OperationChain(\n      operations=[\n        g.GetElements(\n          view=g.View(\n            entities=[\n              g.ElementDefinition(\n                group=\"cardinality\",\n                pre_aggregation_filter_functions=[\n                  g.PredicateContext(\n                    selection=[\n                      \"edgeGroup\"\n                    ],\n                    predicate=g.IsEqual(\n                      value=g.tree_set(['edge'])\n                    )\n                  )\n                ],\n                post_aggregation_filter_functions=[\n                  g.PredicateContext(\n                    selection=[\n                      \"hllp\"\n                    ],\n                    predicate=g.HyperLogLogPlusIsLessThan(\n                      value=2,\n                      or_equal_to=False\n                    )\n                  )\n                ],\n                group_by=[\n                ]\n              )\n            ],\n            all_edges=False,\n            all_entities=False\n          )\n        ),\n        g.GetElements(\n          view=g.View(\n            entities=[\n              g.ElementDefinition(\n                group=\"entity1\"\n              ),\n              g.ElementDefinition(\n                group=\"entity\"\n              )\n            ],\n            edges=[\n              g.ElementDefinition(\n                group=\"edge\"\n              ),\n              g.ElementDefinition(\n                group=\"edge1\"\n              )\n            ],\n            all_edges=False,\n            all_entities=False\n          ),\n          include_incoming_out_going=\"INCOMING\"\n        )\n      ]\n    ),\n    g.OperationChain(\n      operations=[\n        g.GetElements(\n          view=g.View(\n            entities=[\n              g.ElementDefinition(\n                group=\"entity1\"\n              ),\n              g.ElementDefinition(\n                group=\"entity\"\n              )\n            ],\n            edges=[\n              g.ElementDefinition(\n                group=\"edge\"\n              ),\n              g.ElementDefinition(\n                group=\"edge1\"\n              )\n            ],\n            all_edges=False,\n            all_entities=False\n          ),\n          include_incoming_out_going=\"INCOMING\"\n        )\n      ]\n    ),\n    g.OperationChain(\n      operations=[\n        g.GetElements(\n          view=g.View(\n            entities=[\n              g.ElementDefinition(\n                group=\"entity1\"\n              ),\n              g.ElementDefinition(\n                group=\"entity\"\n              )\n            ],\n            all_edges=False,\n            all_entities=False\n          ),\n          include_incoming_out_going=\"INCOMING\"\n        )\n      ]\n    )\n  ],\n  results_limit=1000000\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring InDateRangeDual with exclusive range in Java\nDESCRIPTION: Creates an InDateRangeDual function with exclusive start and end dates. The configured range doesn't include midnight of the start date (2017/03/01) or any part of the end date (2017/08/01).\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/predicates-guide/koryphe-predicates.md#2025-04-23_snippet_39\n\nLANGUAGE: java\nCODE:\n```\nfinal InDateRangeDual function = new InDateRangeDual.Builder()\n        .start(\"2017/03/01\")\n        .end(\"2017/08/01\")\n        .startInclusive(false)\n        .endInclusive(false)\n        .build();\n```\n\n----------------------------------------\n\nTITLE: Implementing Collection Intersection in Python\nDESCRIPTION: Python implementation of the CollectionIntersect operator that returns items common to two collections.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/binary-operators-guide/koryphe-operators.md#2025-04-23_snippet_26\n\nLANGUAGE: python\nCODE:\n```\ng.CollectionIntersect()\n```\n\n----------------------------------------\n\nTITLE: Configuring ReduceRelatedElements with Basic Example in Java\nDESCRIPTION: This Java example creates a ReduceRelatedElements function that combines related vertices. It sets the visibility property name, configures a CollectionConcat aggregator for visibility properties, uses Max as the vertex aggregator, and specifies 'relatesTo' as the related vertex group.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/gaffer-functions.md#2025-04-23_snippet_35\n\nLANGUAGE: java\nCODE:\n```\nfinal List<Element> elements = Arrays.asList(\n        new Edge.Builder()\n                .source(\"1a\")\n                .dest(\"2b\")\n                .group(\"basicEdge\")\n                .property(\"visibility\", Sets.newHashSet(\"public\"))\n                .build(),\n        new Edge.Builder()\n                .source(\"1a\")\n                .dest(\"1b\")\n                .group(\"relatesTo\")\n                .property(\"visibility\", Sets.newHashSet(\"public\"))\n                .build(),\n        new Edge.Builder()\n                .source(\"2a\")\n                .dest(\"2b\")\n                .group(\"relatesTo\")\n                .property(\"visibility\", Sets.newHashSet(\"private\"))\n                .build()\n);\nfinal ReduceRelatedElements function = new ReduceRelatedElements();\nfunction.setVisibilityProperty(\"visibility\");\nfunction.setVisibilityAggregator(new CollectionConcat<>());\nfunction.setVertexAggregator(new Max());\nfunction.setRelatedVertexGroups(Collections.singleton(\"relatesTo\"));\n```\n\n----------------------------------------\n\nTITLE: Implementing OperationChain with GetElements, ToVertices and ToSet in Java\nDESCRIPTION: Creates an operation chain that gets elements starting from seed vertices 1 and 2, transforms them to vertices using the opposite matched vertex, and converts the result to a set. The chain retrieves outgoing edges of group 'edge'.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/core.md#2025-04-23_snippet_77\n\nLANGUAGE: java\nCODE:\n```\n.view(new View.Builder()\n                                .edge(\"edge\")\n                                .build())\n                        .build())\n                .then(new ToVertices.Builder()\n                        .useMatchedVertex(ToVertices.UseMatchedVertex.OPPOSITE)\n                        .build())\n                .then(new ToSet<>())\n                .build();\n```\n\n----------------------------------------\n\nTITLE: Exporting multiple results to Set and retrieving all in Gaffer\nDESCRIPTION: This example demonstrates exporting multiple results to different Set exports using keys, and then retrieving all exports using the GetExports operation with multiple GetSetExport operations.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/export.md#2025-04-23_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nfinal OperationChain<Map<String, Iterable<?>>> opChain = new OperationChain.Builder()\n        .first(new GetAllElements())\n        .then(new ExportToSet.Builder<>()\n                .key(\"edges\")\n                .build())\n        .then(new DiscardOutput())\n        .then(new GetAllElements())\n        .then(new ExportToSet.Builder<>()\n                .key(\"entities\")\n                .build())\n        .then(new DiscardOutput())\n        .then(new GetExports.Builder()\n                .exports(new GetSetExport.Builder()\n                                .key(\"edges\")\n                                .build(),\n                        new GetSetExport.Builder()\n                                .key(\"entities\")\n                                .build())\n                .build())\n        .build();\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"class\" : \"OperationChain\",\n    \"operations\" : [ {\n        \"class\" : \"GetAllElements\"\n    }, {\n        \"class\" : \"ExportToSet\",\n        \"key\" : \"edges\"\n    }, {\n        \"class\" : \"DiscardOutput\"\n    }, {\n        \"class\" : \"GetAllElements\"\n    }, {\n        \"class\" : \"ExportToSet\",\n        \"key\" : \"entities\"\n    }, {\n        \"class\" : \"DiscardOutput\"\n    }, {\n        \"class\" : \"GetExports\",\n        \"getExports\" : [ {\n            \"class\" : \"GetSetExport\",\n            \"start\" : 0,\n            \"key\" : \"edges\"\n        }, {\n            \"class\" : \"GetSetExport\",\n            \"start\" : 0,\n            \"key\" : \"entities\"\n        } ]\n    } ]\n}\n```\n\nLANGUAGE: python\nCODE:\n```\ng.OperationChain( \n    operations=[ \n\n```\n\n----------------------------------------\n\nTITLE: Generating Domain Objects from Elements using GenerateObjects in Java\nDESCRIPTION: This Java snippet shows how to use GenerateObjects to create custom domain objects from input elements. It uses a DomainObjectGenerator to convert Entity and Edge objects into domain-specific objects.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/generate.md#2025-04-23_snippet_9\n\nLANGUAGE: java\nCODE:\n```\nfinal GenerateObjects<Object> operation = new GenerateObjects.Builder<>()\n        .input(new Entity.Builder()\n                        .group(\"entity\")\n                        .vertex(6)\n                        .property(\"count\", 1)\n                        .build(),\n                new Edge.Builder()\n                        .group(\"edge\")\n                        .source(5).dest(6).directed(true)\n                        .property(\"count\", 1)\n                        .build())\n        .generator(new DomainObjectGenerator())\n        .build();\n```\n\n----------------------------------------\n\nTITLE: Conditionally Get Elements or Limit Results using If Operation in JSON\nDESCRIPTION: This JSON snippet shows the structure of an OperationChain with an If operation. It conditionally executes a GetElements operation if the result count is less than 5, otherwise limits the results to 5.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/flow.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"OperationChain\",\n  \"operations\" : [ {\n    \"class\" : \"GetAdjacentIds\",\n    \"input\" : [ {\n      \"class\" : \"EntitySeed\",\n      \"vertex\" : 2\n    } ]\n  }, {\n    \"class\" : \"uk.gov.gchq.gaffer.operation.impl.If\",\n    \"conditional\" : {\n      \"predicate\" : {\n        \"class\" : \"IsShorterThan\",\n        \"maxLength\" : 5,\n        \"orEqualTo\" : false\n      }\n    },\n    \"then\" : {\n      \"class\" : \"OperationChain\",\n      \"operations\" : [ {\n        \"class\" : \"GetElements\"\n      }, {\n        \"class\" : \"Limit\",\n        \"resultLimit\" : 5,\n        \"truncate\" : true\n      } ]\n    },\n    \"otherwise\" : {\n      \"class\" : \"Limit\",\n      \"resultLimit\" : 5,\n      \"truncate\" : true\n    }\n  } ]\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Entity while Preserving Edges in Gaffer Graph\nDESCRIPTION: Shows how to delete entity '5' while leaving all associated edges, resulting in 'dangling' or 'orphan' edges. Uses a filtered GetElements operation before DeleteElements. Examples in Java, JSON, and Python.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/core.md#2025-04-23_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nfinal OperationChain<Void> deleteElementsChain = new OperationChain.Builder()\n        .first(new GetElements.Builder()\n            .input(new EntitySeed(5))\n            .view(new View.Builder().entity(\"person\").build())\n            .build())\n        .then(new DeleteElements())\n        .build();\n\ngraph.execute(deleteElementsChain, new User());\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"class\" : \"OperationChain\",\n    \"operations\" : [{\n        \"class\": \"GetElements\",\n        \"input\": [{\n            \"class\": \"EntitySeed\",\n            \"vertex\": 5,\n        }],\n        \"view\": {\n            \"entities\": {\n                \"entity\": {}\n            }\n        }\n    },\n    {\n        \"class\" : \"DeleteElements\"\n    }]\n}\n```\n\nLANGUAGE: python\nCODE:\n```\ng.OperationChain(\n    operations=[\n        g.GetElements(\n            input=[g.EntitySeed(vertex=5)],\n            view = g.View(\n                entities=[\n                    g.ElementDefinition(\n                        group=\"entity\"\n                    )\n                ]\n            )\n        ),\n        g.DeleteElements()\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Max Operation with Transient Properties in Python\nDESCRIPTION: This Python snippet demonstrates the use of the Max operation with transient properties in Gaffer. It includes a custom View with transformers and multiple comparators in the Max operation.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/core.md#2025-04-23_snippet_32\n\nLANGUAGE: python\nCODE:\n```\ng.OperationChain(\n  operations=[\n    g.GetElements(\n      view=g.View(\n        entities=[\n          g.ElementDefinition(\n            group=\"entity\",\n            transient_properties={'score': 'java.lang.Integer'},\n            transform_functions=[\n              g.FunctionContext(\n                selection=[\n                  \"VERTEX\",\n                  \"count\"\n                ],\n                function=g.Function(\n                  class_name=\"uk.gov.gchq.gaffer.doc.operation.function.ExampleScoreFunction\",\n                  fields={}\n                ),\n                projection=[\n                  \"score\"\n                ]\n              )\n            ]\n          )\n        ],\n        edges=[\n          g.ElementDefinition(\n            group=\"edge\",\n            transient_properties={'score': 'java.lang.Integer'},\n            transform_functions=[\n              g.FunctionContext(\n                selection=[\n                  \"DESTINATION\",\n                  \"count\"\n                ],\n                function=g.Function(\n                  class_name=\"uk.gov.gchq.gaffer.doc.operation.function.ExampleScoreFunction\",\n                  fields={}\n                ),\n                projection=[\n                  \"score\"\n                ]\n              )\n            ]\n          )\n        ],\n        all_edges=False,\n        all_entities=False\n      ),\n      input=[\n        g.EntitySeed(\n          vertex=1\n        ),\n        g.EntitySeed(\n          vertex=2\n        )\n      ]\n    ),\n    g.Max(\n      comparators=[\n        g.ElementPropertyComparator(\n          groups=[\n            \"entity\",\n            \"edge\"\n          ],\n          property=\"count\",\n          reversed=False\n        ),\n        g.ElementPropertyComparator(\n          groups=[\n            \"entity\",\n            \"edge\"\n          ],\n          property=\"score\",\n          reversed=False\n        )\n      ]\n    )\n  ]\n)\n```\n\n----------------------------------------\n\nTITLE: Calculating Cumulative Distribution Function from DoublesSketch in Gaffer\nDESCRIPTION: Java code that queries a Gaffer graph for an edge, retrieves the DoublesSketch property, and calculates the cumulative distribution function (CDF) values at points 0.0, 1.0, and 2.0.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/properties-guide/advanced.md#2025-04-23_snippet_16\n\nLANGUAGE: java\nCODE:\n```\nfinal GetElements query2 = new GetElements.Builder()\n        .input(new EdgeSeed(\"A\", \"B\", DirectedType.UNDIRECTED))\n        .build();\nfinal Element edge2;\ntry (final Iterable<? extends Element> edges2 = graph.execute(query2, user)) {\n    edge2 = edges2.iterator().next();\n}\nfinal DoublesSketch doublesSketch2 = (DoublesSketch) edge2.getProperty(\"doublesSketch\");\nfinal double[] cdf = doublesSketch2.getCDF(new double[]{0.0D, 1.0D, 2.0D});\nfinal String cdfEstimate = \"Edge A-B with CDF values at 0: \" + cdf[0]\n        + \", at 1: \" + cdf[1]\n        + \", at 2: \" + cdf[2];\n```\n\n----------------------------------------\n\nTITLE: Using Gafferpy to Execute Gremlin Queries\nDESCRIPTION: Shows how to use Gafferpy to connect to the Gaffer REST API and execute Gremlin queries.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/user-guide/apis/gremlin-api.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom gafferpy import gaffer_connector\n\ngc = gaffer_connector.GafferConnector(\"http://localhost:8080/rest\")\n\n# Execute and return gremlin\ngremlin_result = gc.execute_gremlin(\"g.V('1').toList()\")\n```\n\n----------------------------------------\n\nTITLE: Converting Elements to Stream with ToStream in Java\nDESCRIPTION: Creates an operation chain that first gets elements from entity seeds and then converts the results to a Java Stream. Note that this operation loads all results into memory and is not recommended for large result sets.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/core.md#2025-04-23_snippet_70\n\nLANGUAGE: java\nCODE:\n```\nfinal OperationChain<Stream<? extends Element>> opChain = new Builder()\n        .first(new GetElements.Builder()\n                .input(new EntitySeed(1), new EntitySeed(2))\n                .build())\n        .then(new ToStream<>())\n        .build();\n```\n\n----------------------------------------\n\nTITLE: Retrieving and Calculating Percentiles from DoublesSketch in Gaffer\nDESCRIPTION: Java code that queries a Gaffer graph for an edge, extracts the DoublesSketch property, and calculates the 25th, 50th, and 75th percentiles of the distribution of double values associated with that edge.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/properties-guide/advanced.md#2025-04-23_snippet_15\n\nLANGUAGE: java\nCODE:\n```\nfinal GetElements query = new GetElements.Builder()\n        .input(new EdgeSeed(\"A\", \"B\", DirectedType.UNDIRECTED))\n        .build();\nfinal Element edge;\ntry (final Iterable<? extends Element> edges = graph.execute(query, user)) {\n    edge = edges.iterator().next();\n}\nfinal DoublesSketch doublesSketch = (DoublesSketch) edge.getProperty(\"doublesSketch\");\nfinal double[] quantiles = doublesSketch.getQuantiles(new double[]{0.25D, 0.5D, 0.75D});\nfinal String quantilesEstimate = \"Edge A-B with percentiles of double property - 25th percentile: \" + quantiles[0]\n        + \", 50th percentile: \" + quantiles[1]\n        + \", 75th percentile: \" + quantiles[2];\n```\n\n----------------------------------------\n\nTITLE: Retrieving Walks with Directional Edges in JSON\nDESCRIPTION: This JSON snippet shows the configuration for the GetWalks operation in Gaffer to retrieve walks of length 2 starting from vertex 1. It specifies outgoing edges for the first hop and incoming edges for the second hop using the includeIncomingOutGoing property.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/get.md#2025-04-23_snippet_38\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"GetWalks\",\n  \"input\" : [ {\n    \"class\" : \"EntitySeed\",\n    \"vertex\" : 1\n  } ],\n  \"operations\" : [ {\n    \"class\" : \"OperationChain\",\n    \"operations\" : [ {\n      \"class\" : \"GetElements\",\n      \"includeIncomingOutGoing\" : \"OUTGOING\"\n    } ]\n  }, {\n    \"class\" : \"OperationChain\",\n    \"operations\" : [ {\n      \"class\" : \"GetElements\",\n      \"includeIncomingOutGoing\" : \"INCOMING\"\n    } ]\n  } ],\n  \"resultsLimit\" : 1000000\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing MapGenerator in Java\nDESCRIPTION: Creates a new MapGenerator function to convert an iterable of elements into an Iterable of Maps. This example configures various fields and constants for the generated maps.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/gaffer-functions.md#2025-04-23_snippet_27\n\nLANGUAGE: java\nCODE:\n```\nfinal MapGenerator function = new MapGenerator.Builder()\n        .group(\"Group Label\")\n        .vertex(\"Vertex Label\")\n        .source(\"Source Label\")\n        .property(\"count\", \"Count Label\")\n        .constant(\"A Constant\", \"Some constant value\")\n        .build();\n```\n\n----------------------------------------\n\nTITLE: Implementing AreEqual Comparison\nDESCRIPTION: AreEqual predicate that checks if two input values are equal. Takes two Object inputs and returns true only if they are exactly equal.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/predicates-guide/koryphe-predicates.md#2025-04-23_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nfinal AreEqual function = new AreEqual();\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"AreEqual\"\n}\n```\n\nLANGUAGE: python\nCODE:\n```\ng.AreEqual()\n```\n\n----------------------------------------\n\nTITLE: Implementing Right Key Inner Join with KeyFunctionMatch and FunctionChain in JSON\nDESCRIPTION: JSON representation of a Join operation using KeyFunctionMatch with a FunctionChain. Uses two key functions where the first extracts and increments the 'count' property and the second simply extracts the 'count' property, enabling matching elements with related but not identical properties.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/join.md#2025-04-23_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n{\n\"class\" : \"OperationChain\",\n\"operations\" : [ {\n    \"class\" : \"Join\",\n    \"input\" : [{\n    \"class\" : \"Entity\",\n    \"group\" : \"entity\",\n    \"vertex\" : 1,\n    \"properties\" : {\n        \"count\" : 3\n    }\n    }, {\n    \"class\" : \"Entity\",\n    \"group\" : \"entity\",\n    \"vertex\" : 4,\n    \"properties\" : {\n        \"count\" : 1\n    }\n    }, {\n    \"class\" : \"Entity\",\n    \"group\" : \"entity\",\n    \"vertex\" : 5,\n    \"properties\" : {\n        \"count\" : 3\n    }\n    }, {\n    \"class\" : \"Entity\",\n    \"group\" : \"entity\",\n    \"vertex\" : 6,\n    \"properties\" : {\n        \"count\" : 30\n    }\n    }\n    ],\n    \"operation\" : {\n    \"class\" : \"GetAllElements\"\n    },\n    \"matchMethod\" : {\n    \"class\" : \"KeyFunctionMatch\",\n    \"firstKeyFunction\": {\n    \"class\" : \"FunctionChain\",\n    \"functions\" : [ {\n        \"class\" : \"ExtractProperty\",\n        \"name\": \"count\"\n    }, {\n    \"class\" : \"Increment\",\n    \"increment\" : 1\n    }\n    ]\n    },\n    \"secondKeyFunction\": {\n        \"class\": \"ExtractProperty\",\n        \"name\": \"count\"  \n        }\n    },\n    \"matchKey\": \"RIGHT\",\n    \"flatten\": false,\n    \"joinType\" : \"INNER\"\n} ]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing FunctionChain with Tuple Adapted Functions in Java\nDESCRIPTION: Creates a FunctionChain that applies ToUpperCase and ToSet functions consecutively using tuple adaptation. This chain converts a string to uppercase and then to a set.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/koryphe-functions.md#2025-04-23_snippet_55\n\nLANGUAGE: java\nCODE:\n```\nfinal FunctionChain function = new FunctionChain.Builder<>()\n        .execute(new Integer[]{0}, new ToUpperCase(), new Integer[]{1})\n        .execute(new Integer[]{1}, new ToSet(), new Integer[]{2})\n        .build();\n```\n\n----------------------------------------\n\nTITLE: Filtering Elements with Count Greater Than 2 using JSON\nDESCRIPTION: This JSON configuration demonstrates filtering elements that have a 'count' property greater than 2. It defines an OperationChain with a NamedOperation (1-hop) followed by a Filter operation with an IsMoreThan predicate.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/core.md#2025-04-23_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"OperationChain\",\n  \"operations\" : [ {\n    \"class\" : \"NamedOperation\",\n    \"input\" : [ {\n      \"class\" : \"EntitySeed\",\n      \"class\" : \"EntitySeed\",\n      \"vertex\" : 1\n    } ],\n    \"operationName\" : \"1-hop\"\n  }, {\n    \"class\" : \"Filter\",\n    \"globalElements\" : {\n      \"predicates\" : [ {\n        \"selection\" : [ \"count\" ],\n        \"predicate\" : {\n          \"class\" : \"IsMoreThan\",\n          \"orEqualTo\" : false,\n          \"value\" : 2\n        }\n      } ]\n    }\n  } ]\n}\n```\n\n----------------------------------------\n\nTITLE: Executing a Named Operation in Java\nDESCRIPTION: Executes the previously defined '2-hop' Named Operation using Java, with an EntitySeed of vertex 1 as input.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/administration-guide/named-operations.md#2025-04-23_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nfinal NamedOperation<EntityId, Iterable<EntityId>> operation =\nnew NamedOperation.Builder<EntityId, Iterable<EntityId>>()\n        .name(\"2-hop\")\n        .input(new EntitySeed(1))\n        .build();\n```\n\n----------------------------------------\n\nTITLE: Graph B Data Elements\nDESCRIPTION: JSON data adding elements (edges and entities) to Graph B, defining relationships between people, vehicles, and manufacturers.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/federated-operation.md#2025-04-23_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n        \"class\": \"AddElements\",\n        \"input\": [\n            {\n            \"class\": \"Edge\",\n            \"group\": \"Drives\",\n            \"source\": \"1\",\n            \"destination\": \"4\",\n            \"directed\": true\n            },\n            {\n            \"class\": \"Edge\",\n            \"group\": \"MakeModel\",\n            \"source\": \"4\",\n            \"destination\": \"5\",\n            \"directed\": true\n            },\n            {\n            \"class\": \"Entity\",\n            \"group\": \"Person\",\n            \"vertex\": \"1\",\n            \"properties\": {\n                \"name\": \"Bob\",\n                \"count\": 1\n            }\n            },\n            {\n            \"class\": \"Entity\",\n            \"group\": \"Vehicle\",\n            \"vertex\": \"4\",\n            \"properties\": {\n                \"type\": \"Digger\"\n            }\n            },\n            {\n            \"class\": \"Entity\",\n            \"group\": \"Manufacturer\",\n            \"vertex\": \"5\",\n            \"properties\": {\n                \"name\": \"JCB\"\n            }\n            }\n        ],\n        \"options\": {\n            \"gaffer.federatedstore.operation.graphIds\": \"GraphB\"\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Performing Full Right Join with KeyFunctionMatch in Gaffer (Java)\nDESCRIPTION: This snippet shows how to create an OperationChain with a Join operation using KeyFunctionMatch. It uses a FunctionChain to transform the 'count' property for matching.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/join.md#2025-04-23_snippet_38\n\nLANGUAGE: java\nCODE:\n```\nfinal OperationChain<Iterable<? extends MapTuple>> opChain = new OperationChain.Builder()\n        .first(new Join.Builder<>()\n                .input(inputElements)\n                .operation(new GetAllElements())\n                .joinType(JoinType.FULL)\n                .matchKey(MatchKey.RIGHT)\n                .flatten(false)\n                .matchMethod(new KeyFunctionMatch.Builder()\n                    .firstKeyFunction(new FunctionChain(new ExtractProperty(\"count\"), new Increment(1)))\n                    .secondKeyFunction(new ExtractProperty(\"count\"))\n                    .build())\n                .build())\n        .build();\n```\n\n----------------------------------------\n\nTITLE: Exporting Edges to Existing Graph using GraphLibrary in JSON\nDESCRIPTION: This JSON snippet demonstrates the configuration for exporting all edges with group 'edge' to an existing graph 'exportGraphId' using a GraphLibrary. It defines an OperationChain with GetAllElements and ExportToOtherGraph operations.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/export.md#2025-04-23_snippet_43\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"class\" : \"OperationChain\",\n    \"operations\" : [ {\n        \"class\" : \"GetAllElements\",\n        \"view\" : {\n        \"edges\" : {\n            \"edge\" : { }\n        }\n        }\n    }, {\n        \"class\" : \"ExportToOtherGraph\",\n        \"graphId\" : \"exportGraphId\"\n    } ]\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Basic Named View - Multiple Languages\nDESCRIPTION: Creates a new NamedView called 'isMoreThan10' that filters edges with count greater than 10. Includes basic view configuration with pre-aggregation filtering.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/named.md#2025-04-23_snippet_7\n\nLANGUAGE: java\nCODE:\n```\nfinal AddNamedView op = new AddNamedView.Builder()\n        .name(\"isMoreThan10\")\n        .description(\"example test NamedView\")\n        .overwrite(true)\n        .view(new View.Builder()\n                .edge(\"testEdge\", new ViewElementDefinition.Builder()\n                        .preAggregationFilter(new ElementFilter.Builder()\n                                .select(\"count\")\n                                .execute(new IsMoreThan(10))\n                                .build())\n                        .build())\n                .build())\n        .build();\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"class\" : \"AddNamedView\",\n    \"name\" : \"isMoreThan10\",\n    \"description\" : \"example test NamedView\",\n    \"view\" : {\n        \"edges\" : {\n        \"testEdge\" : {\n            \"preAggregationFilterFunctions\" : [ {\n                \"selection\" : [ \"count\" ],\n                \"predicate\" : {\n                    \"class\" : \"uk.gov.gchq.koryphe.impl.predicate.IsMoreThan\",\n                    \"orEqualTo\" : false,\n                    \"value\" : 10\n                }\n            } ]\n        }\n        }\n    },\n    \"overwriteFlag\" : true\n}\n```\n\nLANGUAGE: python\nCODE:\n```\ng.AddNamedView( \n    view=g.View( \n        edges=[ \n            g.ElementDefinition( \n                group=\"testEdge\", \n                pre_aggregation_filter_functions=[ \n                    g.PredicateContext( \n                        selection=[ \n                            \"count\" \n                        ], \n                        predicate=g.IsMoreThan( \n                            value=10, \n                            or_equal_to=False \n                        ) \n                    ) \n                ] \n            ) \n        ], \n        all_edges=False, \n        all_entities=False \n    ), \n    name=\"isMoreThan10\", \n    description=\"example test NamedView\", \n    overwrite_flag=True \n)\n```\n\n----------------------------------------\n\nTITLE: Using ConcatenateMergeFunction with GetAllElements Operation in Gaffer Federated Store\nDESCRIPTION: This example illustrates the use of ConcatenateMergeFunction with the GetAllElements operation in a Federated Store. It retrieves and concatenates all elements from two graphs (GraphA and GraphB).\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/federated-operation.md#2025-04-23_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"class\": \"uk.gov.gchq.gaffer.federatedstore.operation.FederatedOperation\",\n    \"operation\": {\n        \"class\": \"GetAllElements\"\n    },\n    \"graphIds\": [\"GraphA\",\"GraphB\"],\n        \"mergeFunction\": {\n            \"class\": \"uk.gov.gchq.gaffer.federatedstore.util.ConcatenateMergeFunction\"\n        }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing exclusive date range in Java\nDESCRIPTION: Creates an InDateRange predicate with exclusive boundaries, meaning dates exactly matching the start or end will return false. The range is from January 1, 2017 to February 1, 2017, non-inclusive.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/predicates-guide/koryphe-predicates.md#2025-04-23_snippet_21\n\nLANGUAGE: java\nCODE:\n```\nfinal InDateRange function = new InDateRange.Builder()\n        .start(\"2017/01/01\")\n        .end(\"2017/02/01\")\n        .startInclusive(false)\n        .endInclusive(false)\n        .build();\n```\n\n----------------------------------------\n\nTITLE: Exporting Elements to a New Graph with Existing Schema and Properties in Python\nDESCRIPTION: Python implementation of an operation chain that retrieves all edges with group 'edge' and exports them to a new Gaffer graph with ID 'newGraphId', using existing schema and store properties from the GraphLibrary.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/export.md#2025-04-23_snippet_35\n\nLANGUAGE: python\nCODE:\n```\ng.OperationChain( \n    operations=[ \n        g.GetAllElements( \n        view=g.View( \n            edges=[ \n                g.ElementDefinition( \n                    group=\"edge\" \n                ) \n            ], \n            all_edges=False, \n            all_entities=False \n            ) \n        ), \n        g.ExportToOtherAuthorisedGraph( \n            graph_id=\"newGraphId\", \n            parent_schema_ids=[ \n                \"schemaId1\" \n            ], \n            parent_store_properties_id=\"storePropsId1\" \n        ) \n    ] \n)\n```\n\n----------------------------------------\n\nTITLE: Generating Strings from Elements using GenerateObjects in Python\nDESCRIPTION: This Python snippet demonstrates how to use the GenerateObjects operation in Gaffer's Python client to create strings from input elements. It specifies the ObjectGenerator and the input Entity and Edge objects.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/generate.md#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ng.GenerateObjects( \nelement_generator=g.ElementGenerator( \n    class_name=\"uk.gov.gchq.gaffer.doc.operation.generator.ObjectGenerator\", \n    fields={'class': 'uk.gov.gchq.gaffer.doc.operation.generator.ObjectGenerator'} \n), \ninput=[ \n    g.Entity( \n    group=\"entity\", \n    properties={'count': 1}, \n    vertex=6 \n    ), \n    g.Edge( \n    group=\"edge\", \n    properties={'count': 1}, \n    source=5, \n    destination=6, \n    directed=True \n    ) \n] \n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Full Join with KeyFunctionMatch and FunctionChain in Gaffer\nDESCRIPTION: Creates an OperationChain with a Join operation using KeyFunctionMatch with a FunctionChain to match elements. The first key function extracts the count property and increments it by 1, while the second key function simply extracts the count property.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/join.md#2025-04-23_snippet_45\n\nLANGUAGE: java\nCODE:\n```\nfinal OperationChain<Iterable<? extends MapTuple>> opChain = new OperationChain.Builder()\n        .first(new Join.Builder<>()\n                .input(inputElements)\n                .operation(new GetAllElements())\n                .joinType(JoinType.FULL)\n                .matchKey(MatchKey.RIGHT)\n                .matchMethod(new KeyFunctionMatch.Builder()\n                    .firstKeyFunction(new FunctionChain(new ExtractProperty(\"count\"), new Increment(1)))\n                    .secondKeyFunction(new ExtractProperty(\"count\"))\n                    .build())\n                .build())\n        .build();\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n\"class\" : \"OperationChain\",\n\"operations\" : [ {\n    \"class\" : \"Join\",\n    \"input\" : [{\n    \"class\" : \"Entity\",\n    \"group\" : \"entity\",\n    \"vertex\" : 1,\n```\n\n----------------------------------------\n\nTITLE: Retrieving Edges with Property Exclusion in Java\nDESCRIPTION: This snippet demonstrates how to use GetElements operation to retrieve edges while excluding specific properties and applying transformations. It uses a Concat function to combine source and count properties.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/get.md#2025-04-23_snippet_22\n\nLANGUAGE: java\nCODE:\n```\nfinal Concat concat = new Concat();\nconcat.setSeparator(\"|\");\nfinal GetElements operation = new GetElements.Builder()\n        .input(new EntitySeed(2))\n        .view(new View.Builder()\n                .edge(\"edge\", new ViewElementDefinition.Builder()\n                        .transientProperty(\"vertex|count\", String.class)\n                        .excludeProperties(\"count\")\n                        .transformer(new ElementTransformer.Builder()\n                                .select(IdentifierType.SOURCE.name(), \"count\")\n                                .execute(concat)\n                                .project(\"vertex|count\")\n                                .build())\n                        .build())\n                .build())\n        .build();\n```\n\n----------------------------------------\n\nTITLE: Extracting Edges from Walks with Map Operation in Python\nDESCRIPTION: Python implementation for extracting edges from walks using Map operation with IterableFunction, ExtractWalkEdgesFromHop, and FirstItem. Shows how to construct the complete operation chain including view filtering.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/core.md#2025-04-23_snippet_50\n\nLANGUAGE: python\nCODE:\n```\ng.OperationChain(\n  operations=[\n    g.GetWalks(\n      input=[\n        g.EntitySeed(\n          vertex=1\n        ),\n        g.EntitySeed(\n          vertex=2\n        )\n      ],\n      operations=[\n        g.OperationChain(\n          operations=[\n            g.GetElements(\n              view=g.View(\n                edges=[\n                  g.ElementDefinition(\n                    group=\"edge\"\n                  )\n                ],\n                all_edges=False,\n                all_entities=False\n              )\n            )\n          ]\n        )\n      ],\n      results_limit=100\n    ),\n    g.Map(\n      functions=[\n        g.IterableFunction(\n          functions=[\n            g.ExtractWalkEdgesFromHop(\n              hop=0\n            ),\n            g.FirstItem()\n          ]\n        )\n      ]\n    ),\n    g.ToVertices(\n      edge_vertices=\"SOURCE\"\n    ),\n    g.ToSet()\n  ]\n)\n```\n\n----------------------------------------\n\nTITLE: Fetching Adjacent IDs with Count Filter in Gaffer\nDESCRIPTION: This snippet demonstrates how to get adjacent IDs along outbound edges from vertex 2 with a count greater than 1 using the GetAdjacentIds operation in Gaffer. It includes implementations in Java, JSON, and Python, along with the expected results.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/get.md#2025-04-23_snippet_30\n\nLANGUAGE: java\nCODE:\n```\nfinal GetAdjacentIds operation = new GetAdjacentIds.Builder()\n        .input(new EntitySeed(2))\n        .inOutType(IncludeIncomingOutgoingType.OUTGOING)\n        .view(new View.Builder()\n                .edge(\"edge\", new ViewElementDefinition.Builder()\n                        .preAggregationFilter(new ElementFilter.Builder()\n                                .select(\"count\")\n                                .execute(new IsMoreThan(1))\n                                .build())\n                        .build())\n                .build())\n        .build();\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n\"class\" : \"GetAdjacentIds\",\n\"input\" : [ {\n    \"class\" : \"EntitySeed\",\n    \"vertex\" : 2\n} ],\n\"view\" : {\n    \"edges\" : {\n    \"edge\" : {\n        \"preAggregationFilterFunctions\" : [ {\n        \"selection\" : [ \"count\" ],\n        \"predicate\" : {\n            \"class\" : \"IsMoreThan\",\n            \"orEqualTo\" : false,\n            \"value\" : 1\n        }\n        } ]\n    }\n    }\n},\n\"includeIncomingOutGoing\" : \"OUTGOING\"\n}\n```\n\nLANGUAGE: python\nCODE:\n```\ng.GetAdjacentIds(\nview=g.View(\n    edges=[\n    g.ElementDefinition(\n        group=\"edge\",\n        pre_aggregation_filter_functions=[\n        g.PredicateContext(\n            selection=[\n            \"count\"\n            ],\n            predicate=g.IsMoreThan(\n            value=1,\n            or_equal_to=False\n            )\n        )\n        ]\n    )\n    ],\n    all_edges=False,\n    all_entities=False\n),\ninput=[\n    g.EntitySeed(\n    vertex=2\n    )\n],\ninclude_incoming_out_going=\"OUTGOING\"\n)\n```\n\n----------------------------------------\n\nTITLE: Fetching Entities with Complex Count Filter in JSON\nDESCRIPTION: This JSON snippet shows the structure for querying entities related to vertex 2, with a filter that selects entities having a count less than 2 or more than 5 using the GetElements operation.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/get.md#2025-04-23_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n{\n\"class\" : \"GetElements\",\n\"input\" : [ {\n    \"class\" : \"EntitySeed\",\n    \"vertex\" : 2\n}, {\n    \"class\" : \"EdgeSeed\",\n    \"source\" : 2,\n    \"destination\" : 3,\n    \"matchedVertex\" : \"SOURCE\",\n    \"directedType\" : \"EITHER\"\n} ],\n\"view\" : {\n    \"entities\" : {\n    \"entity\" : {\n        \"preAggregationFilterFunctions\" : [ {\n        \"selection\" : [ \"count\" ],\n        \"predicate\" : {\n            \"class\" : \"uk.gov.gchq.koryphe.impl.predicate.Or\",\n            \"predicates\" : [ {\n            \"class\" : \"IsLessThan\",\n            \"orEqualTo\" : false,\n            \"value\" : 2\n            }, {\n            \"class\" : \"IsMoreThan\",\n            \"orEqualTo\" : false,\n            \"value\" : 5\n            } ]\n        }\n        } ]\n    }\n    }\n}\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a ProxyStore using Java Builder Pattern\nDESCRIPTION: This Java code snippet demonstrates how to create a ProxyStore using the Builder pattern. It sets up a Graph object with a ProxyStore, specifying the graph ID, host, port, and context root.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/administration-guide/gaffer-stores/proxy-store.md#2025-04-23_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nGraph graph = new Graph.Builder()\n    .store(new ProxyStore.Builder()\n            .graphId(uniqueNameOfYourGraph)\n            .host(\"localhost\")\n            .port(8080)\n            .contextRoot(\"rest/v1\")\n            .build())\n    .build();\n```\n\n----------------------------------------\n\nTITLE: Adding Elements From Socket - Java Implementation\nDESCRIPTION: Java implementation for adding elements from a Socket using AddElementsFromSocket operation with hostname, port, and delimiter configuration.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/flink.md#2025-04-23_snippet_7\n\nLANGUAGE: java\nCODE:\n```\nfinal AddElementsFromSocket op = new AddElementsFromSocket.Builder()\n            .hostname(\"localhost\")\n            .port(8080)\n            .delimiter(\",\")\n            .generator(ElementGenerator.class)\n            .parallelism(1)\n            .validate(true)\n            .skipInvalidElements(false)\n            .build();\n```\n\n----------------------------------------\n\nTITLE: Implementing Maximum Value Selection in Python\nDESCRIPTION: Python implementation of the Max operator that returns the maximum value between two comparable inputs.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/binary-operators-guide/koryphe-operators.md#2025-04-23_snippet_14\n\nLANGUAGE: python\nCODE:\n```\ng.Max()\n```\n\n----------------------------------------\n\nTITLE: Implementing FunctionMap to Multiply Map Values in Python\nDESCRIPTION: Python implementation of a FunctionMap that applies a MultiplyBy function to all values in a map, multiplying each value by 10. This function operates on a dictionary and returns a new dictionary with modified values.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/koryphe-functions.md#2025-04-23_snippet_63\n\nLANGUAGE: python\nCODE:\n```\ng.FunctionMap( \n  function=g.MultiplyBy( \n    by=10 \n  ) \n)\n```\n\n----------------------------------------\n\nTITLE: Sorting Elements with Operation Chain in Python\nDESCRIPTION: Python implementation of the operation chain using Gaffer's Python client. Configures element definitions, transform functions, and sorting parameters similar to Java and JSON versions.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/core.md#2025-04-23_snippet_37\n\nLANGUAGE: python\nCODE:\n```\ng.OperationChain(\n  operations=[\n    g.GetElements(\n      view=g.View(\n        entities=[\n          g.ElementDefinition(\n            group=\"entity\",\n            transient_properties={'score': 'java.lang.Integer'},\n            transform_functions=[\n              g.FunctionContext(\n                selection=[\n                  \"VERTEX\",\n                  \"count\"\n                ],\n                function=g.Function(\n                  class_name=\"uk.gov.gchq.gaffer.doc.operation.function.ExampleScoreFunction\",\n                  fields={}\n                ),\n                projection=[\n                  \"score\"\n                ]\n              )\n            ]\n          )\n        ],\n        edges=[\n          g.ElementDefinition(\n            group=\"edge\",\n            transient_properties={'score': 'java.lang.Integer'},\n            transform_functions=[\n              g.FunctionContext(\n                selection=[\n                  \"DESTINATION\",\n                  \"count\"\n                ],\n                function=g.Function(\n                  class_name=\"uk.gov.gchq.gaffer.doc.operation.function.ExampleScoreFunction\",\n                  fields={}\n                ),\n                projection=[\n                  \"score\"\n                ]\n              )\n            ]\n          )\n        ],\n        all_edges=False,\n        all_entities=False\n      ),\n      input=[\n        g.EntitySeed(\n          vertex=1\n        ),\n        g.EntitySeed(\n          vertex=2\n        )\n      ]\n    ),\n    g.Sort(\n      comparators=[\n        g.ElementPropertyComparator(\n          groups=[\n            \"entity\",\n            \"edge\"\n          ],\n          property=\"count\",\n          reversed=False\n        ),\n        g.ElementPropertyComparator(\n          groups=[\n            \"entity\",\n            \"edge\"\n          ],\n          property=\"score\",\n          reversed=False\n        )\n      ],\n      result_limit=4,\n      deduplicate=True\n    )\n  ]\n)\n```\n\n----------------------------------------\n\nTITLE: Filtering Entities in Gaffer Query (Java)\nDESCRIPTION: This Java snippet shows how to create a GetAllElements operation that filters to return only entities using the 'allEntities' flag in the View.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/user-guide/query/gaffer-syntax/filtering.md#2025-04-23_snippet_6\n\nLANGUAGE: java\nCODE:\n```\nfinal GetAllElements operation = new GetAllElements()\n        .view(new View.Builder()\n            .allEntities(true)\n            .build())\n        .build();\n```\n\n----------------------------------------\n\nTITLE: Generating Strings from Elements using GenerateObjects in Java\nDESCRIPTION: This Java snippet demonstrates how to use the GenerateObjects operation to create strings from input elements. It uses an ObjectGenerator to convert Entity and Edge objects into strings.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/generate.md#2025-04-23_snippet_6\n\nLANGUAGE: java\nCODE:\n```\nfinal GenerateObjects<String> operation = new GenerateObjects.Builder<String>()\n        .input(new Entity.Builder()\n                        .group(\"entity\")\n                        .vertex(6)\n                        .property(\"count\", 1)\n                        .build(),\n                new Edge.Builder()\n                        .group(\"edge\")\n                        .source(5).dest(6).directed(true)\n                        .property(\"count\", 1)\n                        .build())\n        .generator(new ObjectGenerator())\n        .build();\n```\n\n----------------------------------------\n\nTITLE: Fetching Entities and Edges Related to Edge in Java\nDESCRIPTION: This snippet demonstrates how to get all entities and edges related to an edge between vertices 1 and 2 using the GetElements operation in Java.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/get.md#2025-04-23_snippet_10\n\nLANGUAGE: java\nCODE:\n```\nfinal GetElements operation = new GetElements.Builder()\n        .input(new EdgeSeed(1, 2, DirectedType.EITHER))\n        .build();\n```\n\n----------------------------------------\n\nTITLE: Displaying Gaffer Walks in JSON Format\nDESCRIPTION: Detailed JSON representation of two graph walks in Gaffer. Each walk includes edge definitions with properties like direction and count, as well as entity references. The JSON format provides complete information about the edges connecting vertices 5, 2, 1, and 3.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/get.md#2025-04-23_snippet_75\n\nLANGUAGE: json\nCODE:\n```\n[ {\n  \"edges\" : [ [ {\n    \"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n    \"group\" : \"edge1\",\n    \"source\" : 2,\n    \"destination\" : 5,\n    \"directed\" : true,\n    \"matchedVertex\" : \"DESTINATION\",\n    \"properties\" : {\n      \"count\" : 7\n    }\n  } ], [ {\n    \"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n    \"group\" : \"edge1\",\n    \"source\" : 1,\n    \"destination\" : 2,\n    \"directed\" : true,\n    \"matchedVertex\" : \"DESTINATION\",\n    \"properties\" : {\n      \"count\" : 3\n    }\n  } ] ],\n  \"entities\" : [ {\n    \"5\" : [ ]\n  }, {\n    \"2\" : [ ]\n  }, {\n    \"1\" : [ ]\n  } ]\n}, {\n  \"edges\" : [ [ {\n    \"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n    \"group\" : \"edge1\",\n    \"source\" : 2,\n    \"destination\" : 5,\n    \"directed\" : true,\n    \"matchedVertex\" : \"DESTINATION\",\n    \"properties\" : {\n      \"count\" : 7\n    }\n  } ], [ {\n    \"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n    \"group\" : \"edge1\",\n    \"source\" : 3,\n    \"destination\" : 2,\n    \"directed\" : true,\n    \"matchedVertex\" : \"DESTINATION\",\n    \"properties\" : {\n      \"count\" : 5\n    }\n  } ] ],\n  \"entities\" : [ {\n    \"5\" : [ ]\n  }, {\n    \"2\" : [ ]\n  }, {\n    \"3\" : [ ]\n  } ]\n} ]\n```\n\n----------------------------------------\n\nTITLE: Executing Named Operation with Parameters in Java\nDESCRIPTION: Demonstrates how to execute a previously defined named operation in Gaffer using Java. It shows setting up parameter values and building the NamedOperation object with an input EntitySeed.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/flow.md#2025-04-23_snippet_7\n\nLANGUAGE: java\nCODE:\n```\nfinal java.util.Map<String, Object> parameterValues = Maps.newHashMap();\nparameterValues.put(\"enableFiltering\", true);\n\nfinal NamedOperation<EntityId, Iterable<? extends Element>> namedOp =\n        new NamedOperation.Builder<EntityId, Iterable<? extends Element>>()\n                .name(\"2-hop-with-optional-filtering\")\n                .input(new EntitySeed(6))\n                .parameters(parameterValues)\n                .build();\n```\n\n----------------------------------------\n\nTITLE: Initializing CsvGenerator in Java\nDESCRIPTION: Creates a CsvGenerator instance to generate CSV strings from Elements. It configures labels for group, vertex, source, and count properties, adds a constant value, and sets quoting to false.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/gaffer-functions.md#2025-04-23_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nfinal CsvGenerator function = new CsvGenerator.Builder()\n        .group(\"Group Label\")\n        .vertex(\"Vertex Label\")\n        .source(\"Source Label\")\n        .property(\"count\", \"Count Label\")\n        .constant(\"A Constant\", \"Some constant value\")\n        .quoted(false)\n        .build();\n```\n\n----------------------------------------\n\nTITLE: Retrieving Cardinality Using Python in Gaffer\nDESCRIPTION: Demonstrates the Python implementation for querying entity cardinality. Shows the simple query syntax and the structured response containing the HllSketch cardinality data.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/user-guide/gaffer-basics/what-is-cardinality.md#2025-04-23_snippet_11\n\nLANGUAGE: python\nCODE:\n```\ng.GetElements(g.EntitySeed(\"A\"))\n```\n\nLANGUAGE: python\nCODE:\n```\n[{\n    'class': 'uk.gov.gchq.gaffer.data.element.Entity',\n    'group': 'BasicEntity',\n    'vertex': 'A',\n    'properties': {\n        'approxCardinality': {\n            'org.apache.datasketches.hll.HllSketch': {\n                'bytes': 'AgEHCgMIAQBejtgF',\n                'cardinality': 1.0\n            }\n        }\n    }\n}]\n```\n\n----------------------------------------\n\nTITLE: Converting Elements to List using ToList Operation in Gaffer\nDESCRIPTION: Shows usage of ToList operation to convert GetElements results into an ArrayList. Note that this operation loads all results into memory, so it should be used cautiously with large result sets.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/core.md#2025-04-23_snippet_57\n\nLANGUAGE: java\nCODE:\n```\nfinal OperationChain<List<? extends Element>> opChain = new OperationChain.Builder()\n        .first(new GetElements.Builder()\n                .input(new EntitySeed(1), new EntitySeed(2))\n                .build())\n        .then(new ToList<>())\n        .build();\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"OperationChain\",\n  \"operations\" : [ {\n    \"class\" : \"GetElements\",\n    \"input\" : [ {\n      \"class\" : \"EntitySeed\",\n      \"vertex\" : 1\n    }, {\n      \"class\" : \"EntitySeed\",\n      \"vertex\" : 2\n    } ]\n  }, {\n    \"class\" : \"uk.gov.gchq.gaffer.operation.impl.output.ToList\"\n  } ]\n}\n```\n\nLANGUAGE: python\nCODE:\n```\ng.OperationChain(\n  operations=[\n    g.GetElements(\n      input=[\n        g.EntitySeed(\n          vertex=1\n        ),\n        g.EntitySeed(\n          vertex=2\n        )\n      ]\n    ),\n    g.ToList()\n  ]\n)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Cardinality Using JSON in Gaffer\nDESCRIPTION: Shows the JSON request and response format for querying entity cardinality. The request specifies a GetElements operation with an EntitySeed, and the response includes the HllSketch cardinality information.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/user-guide/gaffer-basics/what-is-cardinality.md#2025-04-23_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"class\": \"GetElements\",\n    \"input\": [\n        {\n            \"class\": \"EntitySeed\",\n            \"vertex\": \"A\"\n        }\n    ]\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n[{\n    \"class\": \"Entity\",\n    \"group\": \"cardinality\",\n    \"vertex\": \"A\",\n    \"properties\": {\n        \"approxCardinality\": {\n            \"org.apache.datasketches.hll.HllSketch\": {\n                \"bytes\": \"AgEHCgMIAQBejtgF\", \"cardinality\": 1.0\n            }\n        }\n    }\n}]\n```\n\n----------------------------------------\n\nTITLE: Querying Edges with a Public User Authorization in Gaffer\nDESCRIPTION: Java code that creates a user with 'public' data authorization and executes a query to retrieve edges. This demonstrates how to set up user contexts with specific authorization levels for visibility filtering.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/administration-guide/security/security-guide.md#2025-04-23_snippet_5\n\nLANGUAGE: java\nCODE:\n```\nfinal User publicUser = new User.Builder()\n        .userId(\"publicUser\")\n        .dataAuth(\"public\")\n        .build();\n\nfinal GetElements getPublicRelatedEdges = new GetElements.Builder()\n        .input(new EntitySeed(\"10\"), new EntitySeed(\"23\"))\n        .view(new View.Builder()\n                .edge(\"RoadUse\")\n                .build())\n        .build();\n\nfinal CloseableIterable<? extends Element> publicResults = graph.execute(getPublicRelatedEdges, publicUser);\n```\n\n----------------------------------------\n\nTITLE: GetWalks Operation in JSON Format\nDESCRIPTION: This JSON representation defines the same GetWalks operation as the Java code. It specifies two OperationChain objects, each containing a GetElements operation with different edge groups and directions.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/get.md#2025-04-23_snippet_57\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"GetWalks\",\n  \"input\" : [ {\n    \"class\" : \"EntitySeed\",\n    \"vertex\" : 1\n  } ],\n  \"operations\" : [ {\n    \"class\" : \"OperationChain\",\n    \"operations\" : [ {\n      \"class\" : \"GetElements\",\n      \"view\" : {\n        \"edges\" : {\n          \"edge\" : { }\n        }\n      },\n      \"includeIncomingOutGoing\" : \"OUTGOING\"\n    } ]\n  }, {\n    \"class\" : \"OperationChain\",\n    \"operations\" : [ {\n\n```\n\n----------------------------------------\n\nTITLE: Initializing MapContainsPredicate with Regex in Java\nDESCRIPTION: Creates a MapContainsPredicate that checks if a map contains any key matching the regex pattern 'a.*'. This allows for more flexible key checking than simple equality.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/predicates-guide/koryphe-predicates.md#2025-04-23_snippet_109\n\nLANGUAGE: java\nCODE:\n```\nfinal MapContainsPredicate function = new MapContainsPredicate(new Regex(\"a.*\"));\n```\n\n----------------------------------------\n\nTITLE: Executing Full Left Join with ElementMatch in Java\nDESCRIPTION: This snippet shows how to perform a full left join using ElementMatch in Java. It creates an OperationChain with a Join operation, using GetAllElements as the inner operation and ElementMatch as the match method.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/join.md#2025-04-23_snippet_28\n\nLANGUAGE: java\nCODE:\n```\nfinal OperationChain<Iterable<? extends MapTuple>> opChain = new OperationChain.Builder()\n        .first(new Join.Builder<>()\n                .input(inputElements)\n                .operation(new GetAllElements())\n                .joinType(JoinType.FULL)\n                .matchKey(MatchKey.LEFT)\n                .matchMethod(new ElementMatch(\"count\"))\n                .build())\n        .build();\n```\n\n----------------------------------------\n\nTITLE: Implementing Left Key Full Join with ElementMatch in Gaffer\nDESCRIPTION: This snippet demonstrates how to create an OperationChain with a Join operation using ElementMatch to match entities based on their 'count' property. The join uses LEFT match key and FULL join type with flatten set to false.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/join.md#2025-04-23_snippet_25\n\nLANGUAGE: java\nCODE:\n```\nfinal OperationChain<Iterable<? extends MapTuple>> opChain = new OperationChain.Builder()\n        .first(new Join.Builder<>()\n                .input(inputElements)\n                .operation(new GetAllElements())\n                .joinType(JoinType.FULL)\n                .matchKey(MatchKey.LEFT)\n                .flatten(false)\n                .matchMethod(new ElementMatch(\"count\"))\n                .build())\n        .build();\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n\"class\" : \"OperationChain\",\n\"operations\" : [ {\n    \"class\" : \"Join\",\n    \"input\" : [ {\n    \"class\" : \"Entity\",\n    \"group\" : \"entity\",\n    \"vertex\" : 1,\n    \"properties\" : {\n        \"count\" : 3\n    }\n    }, {\n    \"class\" : \"Entity\",\n    \"group\" : \"entity\",\n    \"vertex\" : 4,\n    \"properties\" : {\n        \"count\" : 1\n    }\n    }, {\n    \"class\" : \"Entity\",\n    \"group\" : \"entity\",\n    \"vertex\" : 5,\n    \"properties\" : {\n        \"count\" : 3\n    }\n    }, {\n    \"class\" : \"Entity\",\n    \"group\" : \"entity\",\n    \"vertex\" : 6,\n    \"properties\" : {\n        \"count\" : 30\n    }\n    } ],\n    \"operation\" : {\n    \"class\" : \"GetAllElements\"\n    },\n    \"matchMethod\" : {\n    \"class\" : \"ElementMatch\"\n    },\n    \"matchKey\" : \"LEFT\",\n    \"flatten\" : false,\n    \"joinType\" : \"FULL\"\n} ]\n}\n```\n\nLANGUAGE: python\nCODE:\n```\ng.OperationChain( \noperations=[ \n    g.Join( \n    operation=g.GetAllElements(), \n    match_method=g.ElementMatch(), \n    input=[ \n        g.Entity( \n        group=\"entity\", \n        properties={'count': 3}, \n        vertex=1 \n        ), \n        g.Entity( \n        group=\"entity\", \n        properties={'count': 1}, \n        vertex=4 \n        ), \n        g.Entity( \n        group=\"entity\", \n        properties={'count': 3}, \n        vertex=5 \n        ), \n        g.Entity( \n        group=\"entity\", \n        properties={'count': 30}, \n        vertex=6 \n        ) \n    ], \n    flatten=False, \n    match_key=\"LEFT\", \n    join_type=\"FULL\" \n    ) \n] \n)\n```\n\nLANGUAGE: java\nCODE:\n```\n[ Entity[vertex=1,group=entity,properties=Properties[count=<java.lang.Integer>3]] --> [Entity[vertex=1,group=entity,properties=Properties[count=<java.lang.Integer>3]]] ]\n[ Entity[vertex=4,group=entity,properties=Properties[count=<java.lang.Integer>1]] --> [Entity[vertex=4,group=entity,properties=Properties[count=<java.lang.Integer>1]]] ]\n[ Entity[vertex=5,group=entity,properties=Properties[count=<java.lang.Integer>3]] --> [Entity[vertex=5,group=entity,properties=Properties[count=<java.lang.Integer>3]]] ]\n[ Entity[vertex=6,group=entity,properties=Properties[count=<java.lang.Integer>30]] --> [] ]\n```\n\nLANGUAGE: json\nCODE:\n```\n[ {\n\"values\" : {\n    \"LEFT\" : {\n    \"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n    \"group\" : \"entity\",\n    \"vertex\" : 1,\n    \"properties\" : {\n        \"count\" : 3\n    }\n    },\n    \"RIGHT\" : [ {\n    \"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n    \"group\" : \"entity\",\n    \"vertex\" : 1,\n    \"properties\" : {\n        \"count\" : 3\n    }\n    } ]\n}\n}, {\n\"values\" : {\n    \"LEFT\" : {\n    \"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n    \"group\" : \"entity\",\n    \"vertex\" : 4,\n    \"properties\" : {\n        \"count\" : 1\n    }\n    },\n    \"RIGHT\" : [ {\n    \"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n    \"group\" : \"entity\",\n    \"vertex\" : 4,\n    \"properties\" : {\n        \"count\" : 1\n    }\n    } ]\n}\n}, {\n\"values\" : {\n    \"LEFT\" : {\n    \"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n    \"group\" : \"entity\",\n    \"vertex\" : 5,\n    \"properties\" : {\n        \"count\" : 3\n    }\n    },\n    \"RIGHT\" : [ {\n    \"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n    \"group\" : \"entity\",\n    \"vertex\" : 5,\n    \"properties\" : {\n        \"count\" : 3\n    }\n    } ]\n}\n}, {\n\"values\" : {\n    \"LEFT\" : {\n    \"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n    \"group\" : \"entity\",\n    \"vertex\" : 6,\n    \"properties\" : {\n        \"count\" : 30\n    }\n    },\n    \"RIGHT\" : [ ]\n}\n} ]\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Named Operations in Gaffer\nDESCRIPTION: Gets all NamedOperations associated with a Graph using GetAllNamedOperations class. Returns operation details including input types, creator IDs, access roles and operation configurations.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/named.md#2025-04-23_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nfinal GetAllNamedOperations operation = new GetAllNamedOperations();\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n\"class\" : \"uk.gov.gchq.gaffer.named.operation.GetAllNamedOperations\"\n}\n```\n\nLANGUAGE: python\nCODE:\n```\ng.GetAllNamedOperations()\n```\n\n----------------------------------------\n\nTITLE: Filtered GetElementsWithinSet Operation in Java\nDESCRIPTION: This Java example demonstrates a more complex use of the GetElementsWithinSet operation, including a view that filters elements based on their 'count' property. It retrieves elements within vertices 1, 2, and 3, but only if their count is greater than 2.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/accumulo.md#2025-04-23_snippet_14\n\nLANGUAGE: java\nCODE:\n```\nfinal GetElementsWithinSet operation = new GetElementsWithinSet.Builder()\n        .input(new EntitySeed(1), new EntitySeed(2), new EntitySeed(3))\n        .view(new View.Builder()\n                .entity(\"entity\", new ViewElementDefinition.Builder()\n                        .preAggregationFilter(new ElementFilter.Builder()\n                                .select(\"count\")\n                                .execute(new IsMoreThan(2))\n                                .build())\n                        .build())\n                .edge(\"edge\", new ViewElementDefinition.Builder()\n                        .preAggregationFilter(new ElementFilter.Builder()\n                                .select(\"count\")\n                                .execute(new IsMoreThan(2))\n                                .build())\n                        .build())\n                .build())\n        .build();\n```\n\n----------------------------------------\n\nTITLE: Filtering Entities in Gaffer Query (JSON)\nDESCRIPTION: This JSON snippet demonstrates the structure of a GetAllElements operation that filters to return only entities using the 'allEntities' flag in the View.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/user-guide/query/gaffer-syntax/filtering.md#2025-04-23_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"GetAllElements\",\n  \"view\": {\n    \"allEntities\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Single Edge from Gaffer Graph\nDESCRIPTION: Demonstrates how to delete a single edge (between vertices 2 and 5) while preserving associated entities. Uses filtering in GetElements operation before DeleteElements. Shown in Java, JSON, and Python.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/core.md#2025-04-23_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nfinal OperationChain<Void> deleteElementsChain = new OperationChain.Builder()\n        .first(new GetElements.Builder()\n            .input(new EdgeSeed(2, 5, DirectedType.EITHER))\n            .view(new View.Builder().edge(\"edge\").build())\n            .build())\n        .then(new DeleteElements())\n        .build();\n\ngraph.execute(deleteElementsChain, new User());\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"class\" : \"OperationChain\",\n    \"operations\" : [{\n        \"class\": \"GetElements\",\n        \"input\": [{\n            \"class\": \"EdgeSeed\",\n            \"source\": 2,\n            \"destination\": 5,\n            \"directedType\": \"EITHER\"\n        }],\n        \"view\": {\n            \"edges\": {\n                \"edge\": {}\n            }\n        }\n    },\n    {\n        \"class\" : \"DeleteElements\"\n    }]\n}\n```\n\nLANGUAGE: python\nCODE:\n```\ng.OperationChain(\n    operations=[\n        g.GetElements(input=[g.EdgeSeed(source=2, destination=5, directedType=\"EITHER\")],\n        view = g.View(\n            edges=[\n                g.ElementDefinition(group=\"edge\")\n            ]\n        )),\n        g.DeleteElements()\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Graph to Federated Store - Java Implementation\nDESCRIPTION: Demonstrates how to add a new graph to a federated store using the AddGraph operation in Java. The operation requires a graph ID, graph configuration, schema, and properties.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/administration-guide/gaffer-stores/simple-federated/configuration.md#2025-04-23_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n// Choose a graph ID for your graph\nfinal String graphId = \"myGraph\";\n\n// Replace the graph config, schema and properties for your use case\nfinal AddGraph operation = new AddGraph.Builder()\n    .graphConfig(new GraphConfig(graphId))\n    .schema(new Schema())\n    .properties(new Properties())\n    .build();\n```\n\n----------------------------------------\n\nTITLE: Executing Gremlin Query via cURL\nDESCRIPTION: Demonstrates how to submit a Gremlin query using a cURL POST request to the REST API endpoint.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/user-guide/apis/gremlin-api.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X 'POST' \\\n  'http://localhost:8080/rest/gremlin/execute' \\\n  -H 'accept: application/x-ndjson' \\\n  -H 'Content-Type: text/plain' \\\n  -d 'g.V().hasLabel('\\''something'\\').toList()'\n```\n\n----------------------------------------\n\nTITLE: Retrieving Edges Between Entity Sets using GetElementsBetweenSetsPairs in Java\nDESCRIPTION: This example demonstrates how to use the GetElementsBetweenSetsPairs operation in Java to retrieve edges between two sets of entities. It creates two input sets, one containing node 1 and another containing nodes 2 and 4, then builds the operation using these sets wrapped in a Pair object.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/accumulo.md#2025-04-23_snippet_6\n\nLANGUAGE: java\nCODE:\n```\n// Create and populate first input set\nfinal Set inputSet1 = new HashSet();\ninputSet1.add(new EntitySeed(1));\n\n// Create and populate second input set\nfinal Set inputSet2 = new HashSet();\ninputSet2.add(new EntitySeed(2));\ninputSet2.add(new EntitySeed(4));\n\n// Create operation using the Sets wrapped in a Pair object\nfinal GetElementsBetweenSetsPairs operation = new GetElementsBetweenSetsPairs.Builder()\n        .input(new Pair(inputSet1, inputSet2))\n        .build();\n```\n\n----------------------------------------\n\nTITLE: Implementing Increment Function with Double in JSON\nDESCRIPTION: JSON representation of an Increment function that adds a fixed double value (3.0) to numeric inputs.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/koryphe-functions.md#2025-04-23_snippet_77\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"Increment\",\n  \"increment\" : 3.0\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Gaffer Graph Elements in JSON\nDESCRIPTION: This snippet demonstrates the structure of entities and edges in a Gaffer graph. It includes multiple entities with vertex and count properties, as well as an edge with source, destination, and count properties.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/join.md#2025-04-23_snippet_21\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"vertex\": 1,\n    \"properties\": {\n        \"count\": 3\n    }\n},\n{\n    \"class\": \"uk.gov.gchq.gaffer.data.element.Entity\",\n    \"group\": \"entity\",\n    \"vertex\": 5,\n    \"properties\": {\n        \"count\": 3\n    }\n},\n{\n    \"class\": \"uk.gov.gchq.gaffer.data.element.Edge\",\n    \"group\": \"edge\",\n    \"source\": 2,\n    \"destination\": 3,\n    \"directed\": true,\n    \"properties\": {\n        \"count\": 2\n    }\n},\n{\n    \"class\": \"uk.gov.gchq.gaffer.data.element.Entity\",\n    \"group\": \"entity\",\n    \"vertex\": 1,\n    \"properties\": {\n        \"count\": 3\n    }\n},\n{\n    \"class\": \"uk.gov.gchq.gaffer.data.element.Entity\",\n    \"group\": \"entity\",\n    \"vertex\": 5,\n    \"properties\": {\n        \"count\": 3\n    }\n},\n{\n    \"class\": \"uk.gov.gchq.gaffer.data.element.Entity\",\n    \"group\": \"entity\",\n    \"vertex\": 3,\n    \"properties\": {\n    \"count\": 2\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting Edges to New Graph using GraphLibrary Configuration in Java\nDESCRIPTION: This Java snippet demonstrates exporting all edges with group 'edge' to a new graph using a GraphLibrary. It sets up the GraphLibrary with a schema and store properties, then constructs an OperationChain for the export.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/export.md#2025-04-23_snippet_45\n\nLANGUAGE: java\nCODE:\n```\n// Setup the graphLibrary with a schema and store properties for exporting\nfinal GraphLibrary graphLibrary = new FileGraphLibrary(\"target/graphLibrary\");\n\nfinal AccumuloProperties exportStoreProperties = new AccumuloProperties();\n// set other store property config here.\ngraphLibrary.addProperties(\"exportStorePropertiesId\", exportStoreProperties);\n\nfinal Schema exportSchema = new Schema.Builder()\n        .edge(\"edge\", new SchemaEdgeDefinition.Builder()\n                .source(\"int\")\n                .destination(\"int\")\n                .directed(\"true\")\n                .property(\"count\", \"int\")\n                .aggregate(false)\n                .build())\n        .type(\"int\", Integer.class)\n        .type(\"true\", new TypeDefinition.Builder()\n                .clazz(Boolean.class)\n                .validateFunctions(new IsTrue())\n                .build())\n        .build();\ngraphLibrary.addSchema(\"exportSchemaId\", exportSchema);\n\nfinal Graph graph = new Graph.Builder()\n        .config(StreamUtil.openStream(getClass(), \"graphConfigWithLibrary.json\"))\n        .addSchemas(StreamUtil.openStreams(getClass(), \"operations/schema\"))\n        .storeProperties(new MapStoreProperties())\n        .build();\n\nfinal OperationChain<Iterable<? extends Element>> opChain =\n        new OperationChain.Builder()\n                .first(new GetAllElements.Builder()\n                        .view(new View.Builder()\n                                .edge(\"edge\")\n                                .build())\n                        .build())\n                .then(new ExportToOtherGraph.Builder()\n                        .graphId(\"newGraphId\")\n                        .parentSchemaIds(\"exportSchemaId\")\n                        .parentStorePropertiesId(\"exportStorePropertiesId\")\n                        .build())\n                .build();\n```\n\n----------------------------------------\n\nTITLE: Defining Gaffer Graph Elements in JSON\nDESCRIPTION: JSON representation of Gaffer graph elements including Edges and Entities. The elements contain properties such as source, destination, vertex, and count values that represent a simple graph structure with directed edges between vertices.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/export.md#2025-04-23_snippet_21\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n    \"group\" : \"edge\",\n    \"source\" : 1,\n    \"destination\" : 4,\n    \"directed\" : true,\n    \"matchedVertex\" : \"SOURCE\",\n    \"properties\" : {\n        \"count\" : 1\n    }\n}, {\n    \"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n    \"group\" : \"edge\",\n    \"source\" : 2,\n    \"destination\" : 4,\n    \"directed\" : true,\n    \"matchedVertex\" : \"SOURCE\",\n    \"properties\" : {\n        \"count\" : 1\n    }\n}, {\n    \"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n    \"group\" : \"edge\",\n    \"source\" : 2,\n    \"destination\" : 5,\n    \"directed\" : true,\n    \"matchedVertex\" : \"SOURCE\",\n    \"properties\" : {\n        \"count\" : 1\n    }\n}, {\n    \"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n    \"group\" : \"entity\",\n    \"vertex\" : 5,\n    \"properties\" : {\n        \"count\" : 3\n    }\n}, {\n    \"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n    \"group\" : \"edge\",\n    \"source\" : 1,\n    \"destination\" : 2,\n    \"directed\" : true,\n    \"matchedVertex\" : \"SOURCE\",\n    \"properties\" : {\n        \"count\" : 3\n    }\n}, {\n    \"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n    \"group\" : \"entity\",\n    \"vertex\" : 4,\n    \"properties\" : {\n        \"count\" : 1\n    }\n}, {\n    \"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n    \"group\" : \"edge\",\n    \"source\" : 2,\n    \"destination\" : 3,\n    \"directed\" : true,\n    \"matchedVertex\" : \"SOURCE\",\n    \"properties\" : {\n        \"count\" : 2\n    }\n}, {\n    \"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n    \"group\" : \"edge\",\n    \"source\" : 3,\n    \"destination\" : 4,\n    \"directed\" : true,\n    \"matchedVertex\" : \"SOURCE\",\n    \"properties\" : {\n        \"count\" : 4\n    }\n}, {\n    \"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n    \"group\" : \"entity\",\n    \"vertex\" : 2,\n    \"properties\" : {\n        \"count\" : 1\n    }\n}, {\n    \"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n    \"group\" : \"entity\",\n    \"vertex\" : 1,\n    \"properties\" : {\n        \"count\" : 3\n    }\n}, {\n    \"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n    \"group\" : \"entity\",\n    \"vertex\" : 3,\n    \"properties\" : {\n        \"count\" : 2\n    }\n} ]\n```\n\n----------------------------------------\n\nTITLE: Initializing StringTrim Function in Java\nDESCRIPTION: Creates a StringTrim function that removes whitespace from both ends of a string. This function takes a String as input and returns the same string with leading and trailing whitespace removed.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/koryphe-functions.md#2025-04-23_snippet_161\n\nLANGUAGE: java\nCODE:\n```\nfinal StringTrim function = new StringTrim();\n```\n\n----------------------------------------\n\nTITLE: Configuring InDateRangeDual with fully contained exclusive range in JSON\nDESCRIPTION: JSON configuration for InDateRangeDual that requires input ranges to be fully contained within an exclusive date range. Only accepts date ranges that start after 2017/03/01 00:00:00 and end before 2017/08/01 00:00:00.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/predicates-guide/koryphe-predicates.md#2025-04-23_snippet_43\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"InDateRangeDual\",\n  \"start\" : \"2017/03/01\",\n  \"end\" : \"2017/08/01\",\n  \"endFullyContained\" : true,\n  \"startFullyContained\" : true,\n  \"endInclusive\" : false,\n  \"startInclusive\" : false\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Parameterized Named View - Multiple Languages\nDESCRIPTION: Creates a Named View with a parameterized count threshold. Includes parameter configuration, default values, and access roles.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/named.md#2025-04-23_snippet_8\n\nLANGUAGE: java\nCODE:\n```\nfinal String viewJson = \"{\\\"edges\\\" : {\\n\" +\n        \"  \\\"testEdge\\\" : {\\n\" +\n        \"    \\\"preAggregationFilterFunctions\\\" : [ {\\n\" +\n        \"      \\\"selection\\\" : [ \\\"count\\\" ],\\n\" +\n        \"      \\\"predicate\\\" : {\\n\" +\n        \"        \\\"class\\\" : \\\"uk.gov.gchq.koryphe.impl.predicate.IsMoreThan\\\",\\n\" +\n        \"        \\\"orEqualTo\\\" : false,\\n\" +\n        \"        \\\"value\\\" : \\\"${countThreshold}\\\"\\n\" +\n        \"      }\\n\" +\n        \"    } ]\\n\" +\n        \"  }\\n\" +\n        \"}}\";      \nfinal ViewParameterDetail param = new ViewParameterDetail.Builder()\n        .defaultValue(1L)\n        .description(\"count threshold\")\n        .valueClass(Long.class)\n        .build();\nfinal Map<String, ViewParameterDetail> paramMap = Maps.newHashMap();\nparamMap.put(\"countThreshold\", param);\n\nfinal AddNamedView op = new AddNamedView.Builder()\n        .name(\"isMoreThan\")\n        .description(\"example test NamedView\")\n        .overwrite(true)\n        .view(viewJson)\n        .parameters(paramMap)\n        .writeAccessRoles(\"auth1\")\n        .build();\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"class\" : \"AddNamedView\",\n    \"name\" : \"isMoreThan\",\n    \"description\" : \"example test NamedView\",\n    \"view\" : {\n        \"edges\" : {\n            \"testEdge\" : {\n                \"preAggregationFilterFunctions\" : [ {\n                    \"selection\" : [ \"count\" ],\n                    \"predicate\" : {\n                        \"class\" : \"uk.gov.gchq.koryphe.impl.predicate.IsMoreThan\",\n                        \"orEqualTo\" : false,\n                        \"value\" : \"${countThreshold}\"\n                    }\n                } ]\n            }\n        }\n    },\n    \"overwriteFlag\" : true,\n    \"parameters\" : {\n        \"countThreshold\" : {\n        \"description\" : \"count threshold\",\n        \"defaultValue\" : 1,\n        \"valueClass\" : \"Long\",\n        \"required\" : false\n        }\n    },\n    \"writeAccessRoles\" : [ \"auth1\" ]\n}\n```\n\nLANGUAGE: python\nCODE:\n```\ng.AddNamedView( \n    view=g.View( \n        edges=[ \n            g.ElementDefinition( \n                group=\"testEdge\", \n                pre_aggregation_filter_functions=[ \n                    g.PredicateContext( \n                        selection=[ \n                            \"count\" \n                        ], \n                        predicate=g.IsMoreThan( \n                            value=\"${countThreshold}\", \n                            or_equal_to=False \n                        ) \n                    ) \n                ] \n            ) \n        ], \n        all_edges=False, \n        all_entities=False \n    ), \n    name=\"isMoreThan\", \n    description=\"example test NamedView\", \n    overwrite_flag=True, \n    write_access_roles=[ \n        \"auth1\" \n    ], \n    parameters=[ \n        g.NamedViewParameter( \n            name=\"countThreshold\", \n            value_class=\"java.lang.Long\", \n            description=\"count threshold\", \n            default_value=1, \n            required=False \n        ) \n    ] \n)\n```\n\n----------------------------------------\n\nTITLE: Implementing HyperLogLogPlusIsLessThan Strict Comparison\nDESCRIPTION: Creates a HyperLogLogPlusIsLessThan predicate that tests if a cardinality is strictly less than 2. The orEqualTo parameter is set to false for strict comparison.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/predicates-guide/gaffer-predicates.md#2025-04-23_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nfinal HyperLogLogPlusIsLessThan function = new HyperLogLogPlusIsLessThan(2);\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"HyperLogLogPlusIsLessThan\",\n  \"orEqualTo\" : false,\n  \"value\" : 2\n}\n```\n\nLANGUAGE: python\nCODE:\n```\ng.HyperLogLogPlusIsLessThan( \n  value=2, \n  or_equal_to=False \n)\n```\n\n----------------------------------------\n\nTITLE: Filtering Entities in Gaffer Query (Python)\nDESCRIPTION: This Python snippet shows how to create a GetAllElements operation that filters to return only entities using the 'all_entities' flag in the View.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/user-guide/query/gaffer-syntax/filtering.md#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ng.GetAllElements(\n    view=g.View(\n        all_entities=True\n    )\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing Simple Federated Store Configuration\nDESCRIPTION: Basic store class and properties configuration required to set up a Simple Federated Store in Gaffer.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/administration-guide/gaffer-stores/simple-federated/configuration.md#2025-04-23_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\ngaffer.store.class=uk.gov.gchq.gaffer.federated.simple.FederatedStore\ngaffer.store.properties.class=uk.gov.gchq.gaffer.federated.simple.FederatedStoreProperties\n```\n\n----------------------------------------\n\nTITLE: Fetching Entities and Edges Related to Edge in JSON\nDESCRIPTION: This JSON snippet shows the structure for querying entities and edges related to an edge between vertices 1 and 2 using the GetElements operation.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/get.md#2025-04-23_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n\"class\" : \"GetElements\",\n\"input\" : [ {\n    \"class\" : \"EdgeSeed\",\n    \"source\" : 1,\n    \"destination\" : 2,\n    \"matchedVertex\" : \"SOURCE\",\n    \"directedType\" : \"EITHER\"\n} ]\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Walks Implementation in JSON\nDESCRIPTION: JSON configuration for getting walks of length 2 starting from vertex 1, with outgoing edge traversal restrictions.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/get.md#2025-04-23_snippet_35\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"GetWalks\",\n  \"input\" : [ {\n    \"class\" : \"EntitySeed\",\n    \"vertex\" : 1\n  } ],\n  \"operations\" : [ {\n    \"class\" : \"OperationChain\",\n    \"operations\" : [ {\n      \"class\" : \"GetElements\",\n      \"includeIncomingOutGoing\" : \"OUTGOING\"\n    } ]\n  }, {\n    \"class\" : \"OperationChain\",\n    \"operations\" : [ {\n      \"class\" : \"GetElements\",\n      \"includeIncomingOutGoing\" : \"OUTGOING\"\n    } ]\n  } ],\n  \"resultsLimit\" : 1000000\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Elements Between Sets in Gaffer (Java)\nDESCRIPTION: Demonstrates using GetElementsBetweenSets operation with a view to filter elements based on a count property. This example retrieves elements between vertex 1 and vertices 2 and 4, where the count is greater than 2.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/accumulo.md#2025-04-23_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nfinal GetElementsBetweenSets operation = new GetElementsBetweenSets.Builder()\n        .input(new EntitySeed(1))\n        .inputB(new EntitySeed(2), new EntitySeed(4))\n        .view(new View.Builder()\n                .entity(\"entity\", new ViewElementDefinition.Builder()\n                        .preAggregationFilter(new ElementFilter.Builder()\n                                .select(\"count\")\n                                .execute(new IsMoreThan(2))\n                                .build())\n                        .build())\n                .edge(\"edge\", new ViewElementDefinition.Builder()\n                        .preAggregationFilter(new ElementFilter.Builder()\n                                .select(\"count\")\n                                .execute(new IsMoreThan(2))\n                                .build())\n                        .build())\n                .build())\n        .build();\n```\n\n----------------------------------------\n\nTITLE: Configuring ReduceRelatedElements with Basic Example in Python\nDESCRIPTION: This Python example shows how to create a ReduceRelatedElements function using the Gaffer Python client. It configures the visibility aggregator, vertex aggregator, related vertex groups, and visibility property name.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/gaffer-functions.md#2025-04-23_snippet_37\n\nLANGUAGE: python\nCODE:\n```\ng.ReduceRelatedElements( \n  visibility_aggregator=g.CollectionConcat(), \n  vertex_aggregator=g.Max(), \n  related_vertex_groups=[ \n    \"relatesTo\" \n  ], \n  visibility_property=\"visibility\" \n)\n```\n\n----------------------------------------\n\nTITLE: Exporting Elements to a New Graph with Existing Schema and Properties in Java\nDESCRIPTION: Java operation chain that retrieves all edges with group 'edge' and exports them to a new Gaffer graph with ID 'newGraphId', using existing schema and store properties from the GraphLibrary. User authorization is required for each referenced ID.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/export.md#2025-04-23_snippet_33\n\nLANGUAGE: java\nCODE:\n```\nfinal OperationChain<Iterable<? extends Element>> opChain =\n        new OperationChain.Builder()\n                .first(new GetAllElements.Builder()\n                        .view(new View.Builder()\n                                .edge(\"edge\")\n                                .build())\n                        .build())\n                .then(new ExportToOtherAuthorisedGraph.Builder()\n                        .graphId(\"newGraphId\")\n                        .parentStorePropertiesId(\"storePropsId1\")\n                        .parentSchemaIds(\"schemaId1\")\n                        .build())\n                .build();\n```\n\n----------------------------------------\n\nTITLE: Implementing Logical OR Operation in Python\nDESCRIPTION: Python implementation of the Or operator for applying logical OR operation to two boolean values.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/binary-operators-guide/koryphe-operators.md#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ng.bop.Or()\n```\n\n----------------------------------------\n\nTITLE: Running Spring REST API with Java Executable JAR\nDESCRIPTION: Command to run the Spring REST API directly using Java with the executable JAR file. The command includes system properties for configuring Gaffer schemas, store properties, and graph configuration.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/development-guide/project-structure/components/spring-rest.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\njava \\\n-Dgaffer.schemas=/path/to/schemas \\\n-Dgaffer.storeProperties=/path/to/store.properties \\\n-Dgaffer.graph.config=/path/to/graphConfig.json \\\n-jar spring-rest-2.0.0-exec.jar\n```\n\n----------------------------------------\n\nTITLE: Python Implementation of Right Key Outer Join with KeyFunctionMatch and FunctionChain\nDESCRIPTION: Python code showing how to create an OperationChain for a right key outer join using KeyFunctionMatch with FunctionChain. It configures the key functions to extract and transform the count property for matching elements.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/join.md#2025-04-23_snippet_64\n\nLANGUAGE: python\nCODE:\n```\ng.OperationChain( \noperations=[ \n    g.Join( \n    operation=g.GetAllElements(), \n    match_method=g.KeyFunctionMatch(\n        first_key_function=g.FunctionChain([\n            g.ExtractProperty(\"count\"),\n            g.Increment(increment=1)\n            ]),\n        second_key_function=g.ExtractProperty(\"count\")\n        ), \n    input=[ \n        g.Entity( \n        group=\"entity\", \n        properties={'count': 3}, \n        vertex=1 \n        ), \n        g.Entity( \n        group=\"entity\", \n```\n\n----------------------------------------\n\nTITLE: Combining Global and Group-Specific Filters in Gaffer\nDESCRIPTION: Creates a View that applies a global filter for the 'weight' property to all elements, while also specifying a filter for the 'age' property on 'Person' entities. This demonstrates how to combine global and specific element definitions.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/user-guide/query/gaffer-syntax/filtering.md#2025-04-23_snippet_14\n\nLANGUAGE: java\nCODE:\n```\n// Define the View to use\nfinal View globalAndSpecificFilter = new View.Builder()\n        .globalElements(new GlobalViewElementDefinition.Builder()\n            .properties(\"weight\")\n            .build())\n        .edge(\"Commit\")\n        .entity(\"Person\", new ViewElementDefinition.Builder()\n            .properties(\"age\")\n            .build())\n    .build();\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"view\": {\n        \"edges\" : {\n            \"Commit\" : { }\n        },\n        \"entities\" : {\n            \"Person\" : {\n                \"properties\" : [ \"age\" ]\n            }\n        },\n        \"globalElements\" : [ {\n            \"properties\" : [ \"weight\" ]\n        } ]\n    }\n}\n```\n\nLANGUAGE: python\nCODE:\n```\nglobal_and_specific_filter = g.View(\n    entities=[\n        g.ElementDefinition(\n            group=\"Person\",\n            properties=[\"age\"]\n        )\n    ],\n    edges=[\n        g.ElementDefinition(\n            group=\"Commit\"\n        )\n    ],\n    global_elements=[\n        g.GlobalElementDefinition(\n            properties=[\"weight\"]\n        )\n    ],\n    all_edges=False,\n    all_entities=False\n)\n```\n\n----------------------------------------\n\nTITLE: Generating Elements from Domain Objects using GenerateElements in Python\nDESCRIPTION: This Python snippet shows how to use the GenerateElements operation with custom domain objects in Gaffer's Python client. It specifies the DomainObjectGenerator and the input objects to generate elements.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/generate.md#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ng.GenerateElements( \nelement_generator=g.ElementGenerator( \n    class_name=\"uk.gov.gchq.gaffer.doc.operation.GenerateElementsExample$DomainObjectGenerator\", \n    fields={'class': 'uk.gov.gchq.gaffer.doc.operation.GenerateElementsExample$DomainObjectGenerator'} \n), \ninput=[ \n    {'class': 'uk.gov.gchq.gaffer.doc.operation.GenerateElementsExample$DomainObject1', 'a': 1, 'c': 1}, \n    {'class': 'uk.gov.gchq.gaffer.doc.operation.GenerateElementsExample$DomainObject2', 'a': 1, 'b': 2, 'c': 1} \n] \n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Reduce Operation in Gaffer with Python\nDESCRIPTION: Python implementation of a Reduce operation within an OperationChain. Shows how to construct an operation chain with GetAdjacentIds, ForEach, ToSingletonList, ToVertices and Reduce operations using Sum aggregation.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/core.md#2025-04-23_snippet_40\n\nLANGUAGE: python\nCODE:\n```\ng.OperationChain(\n  operations=[\n    g.GetAdjacentIds(\n      input=[\n        g.EntitySeed(\n          vertex=1\n        )\n      ]\n    ),\n    g.ForEach(\n      operation=g.OperationChain(\n        operations=[\n          g.ToSingletonList(),\n          g.GetAdjacentIds(),\n          g.ToVertices(),\n          g.Reduce(\n            aggregate_function=g.Sum()\n          )\n        ]\n      )\n    )\n  ]\n)\n```\n\n----------------------------------------\n\nTITLE: Query Result Example\nDESCRIPTION: Example response showing returned entity and edge data from a GetElements query\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/development-guide/example-deployment/using-the-api.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n[\n    {\n        \"class\": \"uk.gov.gchq.gaffer.data.element.Entity\",\n        \"group\": \"Person\",\n        \"vertex\": \"v1\",\n        \"properties\": {\n        \"name\": \"marko\",\n        \"age\": 29\n        }\n    },\n    {\n        \"class\": \"uk.gov.gchq.gaffer.data.element.Edge\",\n        \"group\": \"Created\",\n        \"source\": \"v1\",\n        \"destination\": \"v2\",\n        \"directed\": true,\n        \"matchedVertex\": \"SOURCE\",\n        \"properties\": {\n        \"weight\": {\n            \"java.lang.Float\": 0.4\n        }\n        }\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Filtering Elements with Regex Using MatchedVertex in Java\nDESCRIPTION: Demonstrates filtering query results using regex on the adjacent matched vertex when the store implements the MATCHED_VERTEX trait.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/user-guide/query/gaffer-syntax/faqs.md#2025-04-23_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nGetElements results = new GetElements.Builder()\n    .input(new EntitySeed(\"X\"))\n    .view(new View.Builder()\n        .edge(\"yourEdge\", new ViewElementDefinition.Builder()\n            .preAggregationFilter(\n                new ElementFilter.Builder()\n                    .select(IdentifierType.ADJACENT_MATCHED_VERTEX.name())\n                    .execute(new Regex(\"[yY]\"))\n                    .build())\n            .build())\n        .build())\n    .build();\n```\n\n----------------------------------------\n\nTITLE: Converting Date Strings to Timestamps with Custom Format in JSON\nDESCRIPTION: JSON configuration for a function that parses date strings with a custom format into timestamp values. This configuration specifies both the format pattern and time unit.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/koryphe-functions.md#2025-04-23_snippet_126\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"ParseTime\",\n  \"format\" : \"yyyy-MM hh:mm\",\n  \"timeUnit\" : \"MILLISECOND\"\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Current Schema Traits in Gaffer\nDESCRIPTION: Example of using the GetTraits operation with currentTraits=true to get only the traits that are applicable to the current schema in the Gaffer store.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/core.md#2025-04-23_snippet_97\n\nLANGUAGE: java\nCODE:\n```\nfinal GetTraits operation = new GetTraits.Builder()\n        .currentTraits(true)\n        .build();\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"GetTraits\",\n  \"currentTraits\" : true\n}\n```\n\nLANGUAGE: python\nCODE:\n```\ng.GetTraits(\n  current_traits=True\n)\n```\n\nLANGUAGE: java\nCODE:\n```\nQUERY_AGGREGATION\nMATCHED_VERTEX\nTRANSFORMATION\nINGEST_AGGREGATION\nPRE_AGGREGATION_FILTERING\nPOST_TRANSFORMATION_FILTERING\nPOST_AGGREGATION_FILTERING\n```\n\nLANGUAGE: json\nCODE:\n```\n[ \"QUERY_AGGREGATION\", \"MATCHED_VERTEX\", \"TRANSFORMATION\", \"INGEST_AGGREGATION\", \"PRE_AGGREGATION_FILTERING\", \"POST_TRANSFORMATION_FILTERING\", \"POST_AGGREGATION_FILTERING\" ]\n```\n\n----------------------------------------\n\nTITLE: Setting Has Step Filter Stage in Gremlin Query\nDESCRIPTION: Shows how to control the phase at which filtering from a Gremlin has() step is applied to the results. This example sets the filter stage to PRE_AGGREGATION for all has() steps in the query.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/gremlin-guide/gaffer-options.md#2025-04-23_snippet_3\n\nLANGUAGE: groovy\nCODE:\n```\ng.with(\"hasStepFilterStage\", \"PRE_AGGREGATION\").V().has(\"count\" P.gt(1)).toList()\n```\n\n----------------------------------------\n\nTITLE: Configuring FunctionChain with Standard Functions in JSON\nDESCRIPTION: JSON configuration for a FunctionChain that applies ToLowerCase, ToTypeSubTypeValue, and ToEntityId functions consecutively. This chain converts a string to lowercase, then to a TypeSubTypeValue, and finally to an EntityId.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/koryphe-functions.md#2025-04-23_snippet_59\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"FunctionChain\",\n  \"functions\" : [ {\n    \"class\" : \"ToLowerCase\"\n  }, {\n    \"class\" : \"ToTypeSubTypeValue\"\n  }, {\n    \"class\" : \"ToEntityId\"\n  } ]\n}\n```\n\n----------------------------------------\n\nTITLE: Executing a Parameterized Named Operation in JSON\nDESCRIPTION: Executes the '2-hop-with-limit' Named Operation in JSON, providing a value of 2 for the 'param1' parameter to limit results to 2 entities.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/administration-guide/named-operations.md#2025-04-23_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"class\" : \"NamedOperation\",\n    \"input\" : [ {\n        \"class\" : \"EntitySeed\",\n        \"class\" : \"EntitySeed\",\n        \"vertex\" : 1\n    } ],\n    \"operationName\" : \"2-hop-with-limit\",\n    \"parameters\" : {\n        \"param1\" : 2\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Elements from Strings using GenerateElements in JSON\nDESCRIPTION: This JSON snippet shows the structure of a GenerateElements operation for creating elements from input strings. It specifies the input strings and the ElementGenerator class to be used.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/generate.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n\"class\" : \"GenerateElements\",\n\"input\" : [ \"1,1\", \"1,2,1\" ],\n\"elementGenerator\" : {\n    \"class\" : \"ElementGenerator\"\n}\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing InDateRangeDual with fully contained range in Java\nDESCRIPTION: Creates an InDateRangeDual function that requires both start and end dates to be fully contained within the configured range. Only accepts date ranges that fall completely within 2017/03/01 to 2017/08/01 inclusive.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/predicates-guide/koryphe-predicates.md#2025-04-23_snippet_36\n\nLANGUAGE: java\nCODE:\n```\nfinal InDateRangeDual function = new InDateRangeDual.Builder()\n        .start(\"2017/03/01\")\n        .end(\"2017/08/01\")\n        .startFullyContained(true)\n        .endFullyContained(true)\n        .build();\n```\n\n----------------------------------------\n\nTITLE: Retrieving Walks with Directional Edges in Java\nDESCRIPTION: This Java code snippet demonstrates how to use the GetWalks operation in Gaffer to retrieve walks of length 2 starting from vertex 1. It specifies outgoing edges for the first hop and incoming edges for the second hop using the IncludeIncomingOutgoingType flag.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/get.md#2025-04-23_snippet_37\n\nLANGUAGE: java\nCODE:\n```\nfinal GetWalks getWalks = new GetWalks.Builder()\n        .operations(new GetElements.Builder()\n                        .inOutType(SeededGraphFilters.IncludeIncomingOutgoingType.OUTGOING)\n                        .build(),\n                new GetElements.Builder()\n                        .inOutType(SeededGraphFilters.IncludeIncomingOutgoingType.INCOMING)\n                        .build())\n        .input(new EntitySeed(1))\n        .build();\n```\n\n----------------------------------------\n\nTITLE: Configuring ToTypeSubTypeValue Function in JSON\nDESCRIPTION: JSON configuration for the ToTypeSubTypeValue function. This can be used to instantiate the function in a Gaffer JSON operation chain.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/gaffer-functions.md#2025-04-23_snippet_48\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"ToTypeSubTypeValue\"\n}\n```\n\n----------------------------------------\n\nTITLE: Representing Graph Structure with Edges and Entities in Gaffer JSON Format\nDESCRIPTION: This JSON structure represents a graph in Gaffer format with edges connecting vertices and entities describing vertex properties. It includes special cardinality entities with HyperLogLogPlus sketch data structures for efficient cardinality estimation across vertices.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/get.md#2025-04-23_snippet_70\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"edges\" : [ [ {\n    \"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n    \"group\" : \"edge1\",\n    \"source\" : 8,\n    \"destination\" : 5,\n    \"directed\" : true,\n    \"matchedVertex\" : \"SOURCE\",\n    \"properties\" : {\n      \"count\" : 13\n    }\n  } ], [ {\n    \"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n    \"group\" : \"edge1\",\n    \"source\" : 5,\n    \"destination\" : 6,\n    \"directed\" : true,\n    \"matchedVertex\" : \"SOURCE\",\n    \"properties\" : {\n      \"count\" : 11\n    }\n  } ] ],\n  \"entities\" : [ {\n    \"8\" : [ {\n      \"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n      \"group\" : \"entity1\",\n      \"vertex\" : 8,\n      \"properties\" : {\n        \"count\" : 1\n      }\n    }, {\n      \"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n      \"group\" : \"cardinality\",\n      \"vertex\" : 8,\n      \"properties\" : {\n        \"hllp\" : {\n          \"com.clearspring.analytics.stream.cardinality.HyperLogLogPlus\" : {\n            \"hyperLogLogPlus\" : {\n              \"hyperLogLogPlusSketchBytes\" : \"/////gUFAQH7HQ==\",\n              \"cardinality\" : 1\n            }\n          }\n        },\n        \"count\" : 2,\n        \"edgeGroup\" : {\n          \"java.util.TreeSet\" : [ \"edge\" ]\n        }\n      }\n    }, {\n      \"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n      \"group\" : \"cardinality\",\n      \"vertex\" : 8,\n      \"properties\" : {\n        \"hllp\" : {\n          \"com.clearspring.analytics.stream.cardinality.HyperLogLogPlus\" : {\n            \"hyperLogLogPlus\" : {\n              \"hyperLogLogPlusSketchBytes\" : \"/////gUFAQH9Fg==\",\n              \"cardinality\" : 1\n            }\n          }\n        },\n        \"count\" : 1,\n        \"edgeGroup\" : {\n          \"java.util.TreeSet\" : [ \"edge1\" ]\n        }\n      }\n    } ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Elements to Graph\nDESCRIPTION: JSON operation to add Person and Repository entities along with Commit edges containing timestamp data.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/administration-guide/aggregation/ingest-example.md#2025-04-23_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"class\": \"AddElements\",\n    \"input\": [\n        {\n            \"class\": \"Edge\",\n            \"group\": \"Commit\",\n            \"source\": \"Dave\",\n            \"destination\": \"r1\",\n            \"directed\": true,\n            \"properties\": {\n                \"first\": {\n                    \"java.util.Date\": 1451044800146\n                },\n                \"latest\": {\n                    \"java.util.Date\": 1451044800146\n                },\n                \"count\": 1\n            }\n        },\n        {\n            \"class\": \"Edge\",\n            \"group\": \"Commit\",\n            \"source\": \"Dave\",\n            \"destination\": \"r1\",\n            \"directed\": true,\n            \"properties\": {\n                \"first\": {\n                    \"java.util.Date\": 1514808000146\n                },\n                \"latest\": {\n                    \"java.util.Date\": 1514808000146\n                },\n                \"count\": 1\n            }\n        },\n        {\n            \"class\": \"Edge\",\n            \"group\": \"Commit\",\n            \"source\": \"Dave\",\n            \"destination\": \"r1\",\n            \"directed\": true,\n            \"properties\": {\n                \"first\": {\n                    \"java.util.Date\": 1672574400146\n                },\n                \"latest\": {\n                    \"java.util.Date\": 1672574400146\n                },\n                \"count\": 1\n            }\n        },\n        {\n            \"class\": \"Entity\",\n            \"group\": \"Person\",\n            \"vertex\": \"Dave\"\n        },\n        {\n            \"class\": \"Entity\",\n            \"group\": \"Repository\",\n            \"vertex\": \"r1\"\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Inner Join with ElementMatch in Gaffer (JSON)\nDESCRIPTION: This JSON configuration sets up an inner join operation using ElementMatch in Gaffer. It defines the input entities, specifies GetAllElements as the operation, and uses ElementMatch as the match method.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/join.md#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n\"class\" : \"OperationChain\",\n\"operations\" : [ {\n    \"class\" : \"Join\",\n    \"input\" : [ {\n    \"class\" : \"Entity\",\n    \"group\" : \"entity\",\n    \"vertex\" : 1,\n    \"properties\" : {\n        \"count\" : 3\n    }\n    }, {\n    \"class\" : \"Entity\",\n    \"group\" : \"entity\",\n    \"vertex\" : 4,\n    \"properties\" : {\n        \"count\" : 1\n    }\n    }, {\n    \"class\" : \"Entity\",\n    \"group\" : \"entity\",\n    \"vertex\" : 5,\n    \"properties\" : {\n        \"count\" : 3\n    }\n    }, {\n    \"class\" : \"Entity\",\n    \"group\" : \"entity\",\n    \"vertex\" : 6,\n    \"properties\" : {\n        \"count\" : 30\n    }\n    } ],\n    \"operation\" : {\n    \"class\" : \"GetAllElements\"\n    },\n    \"matchMethod\" : {\n    \"class\" : \"ElementMatch\"\n    },\n    \"joinType\" : \"INNER\"\n} ]\n}\n```\n\n----------------------------------------\n\nTITLE: Getting DataFrame of Elements with Edge Group in Java\nDESCRIPTION: Example of using GetDataFrameOfElements operation to retrieve edges from Gaffer.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/spark.md#2025-04-23_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nfinal GetDataFrameOfElements operation = new GetDataFrameOfElements.Builder()\n        .view(new View.Builder()\n                .edge(\"edge\")\n                .build())\n        .build();\n```\n\n----------------------------------------\n\nTITLE: Implementing Increment Function with Float in Python\nDESCRIPTION: Python implementation of an Increment function that adds a fixed float value (3.0) to numeric inputs.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/koryphe-functions.md#2025-04-23_snippet_81\n\nLANGUAGE: python\nCODE:\n```\ng.Increment( \n  increment={'java.lang.Float': 3.0} \n)\n```\n\n----------------------------------------\n\nTITLE: Initializing ExtractKeys in Java\nDESCRIPTION: Creates an ExtractKeys function that returns the Set of keys from a provided Java Map. Type parameters specify the key and value types.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/koryphe-functions.md#2025-04-23_snippet_37\n\nLANGUAGE: java\nCODE:\n```\nfinal ExtractKeys<String, Integer> function = new ExtractKeys<>();\n```\n\n----------------------------------------\n\nTITLE: Exporting Edges to Another Gaffer REST API using ProxyStore in Java\nDESCRIPTION: This snippet demonstrates how to export all edges with group 'edge' to another Gaffer REST API using ProxyStore. It sets up ProxyProperties and constructs an OperationChain to perform the export.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/export.md#2025-04-23_snippet_39\n\nLANGUAGE: java\nCODE:\n```\nfinal ProxyProperties proxyProperties = new ProxyProperties();\nproxyProperties.setStoreClass(ProxyStore.class);\nproxyProperties.setStorePropertiesClass(ProxyProperties.class);\nproxyProperties.setGafferHost(\"localhost\");\nproxyProperties.setGafferPort(8081);\nproxyProperties.setGafferContextRoot(\"/rest/v1\");\n\nfinal OperationChain<Iterable<? extends Element>> opChain =\n        new OperationChain.Builder()\n                .first(new GetAllElements.Builder()\n                        .view(new View.Builder()\n                                .edge(\"edge\")\n                                .build())\n                        .build())\n                .then(new ExportToOtherGraph.Builder()\n                        .graphId(\"otherGafferRestApiGraphId\")\n                        .storeProperties(proxyProperties)\n                        .build())\n                .build();\n```\n\n----------------------------------------\n\nTITLE: Applying Global Conditional Filter in Gaffer\nDESCRIPTION: Creates a View that filters all elements to return only those with a 'weight' property value greater than 0.4. This shows how to use postAggregationFilter with globalElements to apply a conditional filter.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/user-guide/query/gaffer-syntax/filtering.md#2025-04-23_snippet_13\n\nLANGUAGE: java\nCODE:\n```\n// Define the View to use\nfinal View viewWithGlobalFilter = new View.Builder()\n    .globalElements(new GlobalViewElementDefinition.Builder()\n        .postAggregationFilter(new ElementsFilter.Builder()\n            .select(\"weight\")\n            .execute(new IsMoreThan(0.4))\n            .build())\n        .build())\n    .build();\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"view\": {\n        \"globalElements\" : [ {\n            \"postAggregationFilterFunctions\" : [ {\n                \"selection\" : [ \"weight\" ],\n                \"predicate\" : {\n                    \"class\" : \"IsMoreThan\",\n                    \"orEqualTo\" : false,\n                    \"value\" : {\n                        \"Float\" : 0.4\n                    }\n                }\n            } ]\n        } ]\n    }\n}\n```\n\nLANGUAGE: python\nCODE:\n```\nview_with_global_filter = g.View(\n    global_elements=[\n        g.GlobalElementDefinition(\n            post_aggregation_filter_functions=[\n                g.PredicateContext(\n                    selection=[\"weight\"],\n                    predicate=g.IsMoreThan(\n                        value={'java.lang.Float': 0.4},\n                        or_equal_to=False\n                    )\n                )\n            ]\n        )\n    ],\n    all_edges=False,\n    all_entities=False\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Logical AND Operation in Python\nDESCRIPTION: Python implementation of the And operator for applying logical AND operation to two boolean values.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/binary-operators-guide/koryphe-operators.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ng.bop.And()\n```\n\n----------------------------------------\n\nTITLE: Defining ForEach Operation in JSON\nDESCRIPTION: This JSON snippet defines a ForEach operation within an OperationChain in Gaffer. It includes operations for getting adjacent IDs, converting to a singleton list, and extracting vertices.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/flow.md#2025-04-23_snippet_27\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"OperationChain\",\n  \"operations\" : [ {\n    \"class\" : \"GetAdjacentIds\",\n    \"input\" : [ {\n      \"class\" : \"EntitySeed\",\n      \"vertex\" : 1\n    } ]\n  }, {\n    \"class\" : \"ForEach\",\n    \"operation\" : {\n      \"class\" : \"OperationChain\",\n      \"operations\" : [ {\n        \"class\" : \"ToSingletonList\"\n      }, {\n        \"class\" : \"GetAdjacentIds\"\n      }, {\n        \"class\" : \"ToVertices\"\n      } ]\n    }\n  } ]\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Walks with Directional Edges in Python\nDESCRIPTION: This Python code snippet demonstrates how to use the GetWalks operation in Gaffer to retrieve walks of length 2 starting from vertex 1. It specifies outgoing edges for the first hop and incoming edges for the second hop using the include_incoming_out_going parameter.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/get.md#2025-04-23_snippet_39\n\nLANGUAGE: python\nCODE:\n```\ng.GetWalks(\n  input=[\n    g.EntitySeed(\n      vertex=1\n    )\n  ],\n  operations=[\n    g.OperationChain(\n      operations=[\n        g.GetElements(\n          include_incoming_out_going=\"OUTGOING\"\n        )\n      ]\n    ),\n    g.OperationChain(\n      operations=[\n        g.GetElements(\n          include_incoming_out_going=\"INCOMING\"\n        )\n      ]\n    )\n  ],\n  results_limit=1000000\n)\n```\n\n----------------------------------------\n\nTITLE: Executing Inner Join with ElementMatch in Gaffer (Java)\nDESCRIPTION: This snippet demonstrates how to perform an inner join operation using ElementMatch in Gaffer. It creates an OperationChain with a Join operation that uses GetAllElements and matches elements based on the 'count' property.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/join.md#2025-04-23_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nfinal OperationChain<Iterable<? extends MapTuple>> opChain = new OperationChain.Builder()\n        .first(new Join.Builder<>()\n                .input(inputElements)\n                .operation(new GetAllElements())\n                .joinType(JoinType.INNER)\n                .matchMethod(new ElementMatch(\"count\"))\n                .build())\n        .build();\n```\n\n----------------------------------------\n\nTITLE: Filtering Edges Using Weight Threshold in Python\nDESCRIPTION: Python implementation of the GetElements operation with View filtering for edges where weight is greater than 0.4.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/user-guide/query/gaffer-syntax/filtering.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nelements = gc.execute_operation(\n    operation = g.GetElements(\n        input = [g.EntitySeed(vertex = \"John\")]\n        view = g.View(\n            edges = [\n                g.ElementDefinition(\n                    group = 'Created',\n                    pre_aggregation_filter_functions = [\n                        g.PredicateContext(\n                            selection = ['weight'],\n                            predicate = g.IsMoreThan(\n                                value = g.float_(0.4),\n                                or_equal_to = False\n                            )\n                        )\n                    ]\n                )\n            ]\n        )\n    )\n)\n```\n\n----------------------------------------\n\nTITLE: Generating Elements from Strings using GenerateElements in Python\nDESCRIPTION: This Python snippet demonstrates how to use the GenerateElements operation in Gaffer's Python client. It specifies the ElementGenerator and the input strings to generate elements.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/generate.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ng.GenerateElements( \nelement_generator=g.ElementGenerator( \n    class_name=\"uk.gov.gchq.gaffer.doc.operation.generator.ElementGenerator\", \n    fields={'class': 'uk.gov.gchq.gaffer.doc.operation.generator.ElementGenerator'} \n), \ninput=[ \n    \"1,1\", \n    \"1,2,1\" \n] \n)\n```\n\n----------------------------------------\n\nTITLE: Graph B Schema Configuration\nDESCRIPTION: JSON configuration defining Graph B's schema including entity definitions, edge relationships, and data types for a person-vehicle-manufacturer network.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/federated-operation.md#2025-04-23_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n        \"class\": \"AddGraph\",\n        \"graphId\": \"GraphB\",\n        \"schema\": {\n            \"edges\": {\n            \"Drives\": {\n                \"source\": \"id.person.string\",\n                \"destination\": \"id.vehicle.string\",\n                \"directed\": \"true\"\n            },\n            \"MakeModel\": {\n                \"source\": \"id.vehicle.string\",\n                \"destination\": \"id.manufacturer.string\",\n                \"directed\": \"true\"\n            }\n            },\n            \"entities\": {\n            \"Person\": {\n                \"description\": \"Entity representing a person vertex\",\n                \"vertex\": \"id.person.string\",\n                \"aggregate\": \"true\",\n                \"properties\": {\n                \"name\": \"property.string\",\n                \"count\": \"count.integer\"\n                }\n            },\n            \"Vehicle\": {\n                \"description\": \"Entity representing a vehicle vertex\",\n                \"vertex\": \"id.vehicle.string\",\n                \"aggregate\": \"false\",\n                \"properties\": {\n                \"type\": \"property.string\"\n                }\n            },\n            \"Manufacturer\": {\n                \"description\": \"Entity representing a manufacturer vertex\",\n                \"vertex\": \"id.manufacturer.string\",\n                \"aggregate\": \"false\",\n                \"properties\": {\n                \"name\": \"property.string\"\n                }\n            }\n            },\n            \"types\": {\n            \"id.person.string\": {\n                \"description\": \"A basic type to hold the string id of a person entity\",\n                \"class\": \"java.lang.String\"\n            },\n            \"id.manufacturer.string\": {\n                \"description\": \"A basic type to hold the string id of a manufacturer entity\",\n                \"class\": \"java.lang.String\"\n            },\n            \"id.vehicle.string\": {\n                \"description\": \"A basic type to hold the string id of a vehicle entity\",\n                \"class\": \"java.lang.String\"\n            },\n            \"property.string\": {\n                \"description\": \"A type to hold string properties of entities\",\n                \"class\": \"java.lang.String\",\n                \"aggregateFunction\": {\n                \"class\": \"uk.gov.gchq.koryphe.impl.binaryoperator.First\"\n                }\n            },\n            \"count.integer\": {\n                \"description\": \"A long count that must be greater than or equal to 0.\",\n                \"class\": \"java.lang.Integer\",\n                \"validateFunctions\": [\n                {\n                    \"class\": \"uk.gov.gchq.koryphe.impl.predicate.IsMoreThan\",\n                    \"orEqualTo\": true,\n                    \"value\": {\n                    \"java.lang.Integer\": 0\n                    }\n                }\n                ],\n                \"aggregateFunction\": {\n                \"class\": \"uk.gov.gchq.koryphe.impl.binaryoperator.Sum\"\n                }\n            },\n            \"true\": {\n                \"class\": \"java.lang.Boolean\",\n                \"validateFunctions\": [\n                {\n                    \"class\": \"uk.gov.gchq.koryphe.impl.predicate.IsTrue\"\n                }\n                ]\n            }\n            }\n        },\n        \"storeProperties\": {\n            \"gaffer.store.class\": \"uk.gov.gchq.gaffer.mapstore.MapStore\"\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Configuring FunctionMap to Multiply Map Values in JSON\nDESCRIPTION: JSON configuration for a FunctionMap that applies a MultiplyBy function to all values in a map, multiplying each value by 10. This function operates on a Map<String, Integer> and returns a new map with modified values.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/koryphe-functions.md#2025-04-23_snippet_62\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"FunctionMap\",\n  \"function\" : {\n    \"class\" : \"MultiplyBy\",\n    \"by\" : 10\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Edge Samples with ReservoirItemsSketch\nDESCRIPTION: Java code demonstrating how to query and extract samples from a ReservoirItemsSketch stored on an edge property.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/properties-guide/advanced.md#2025-04-23_snippet_19\n\nLANGUAGE: java\nCODE:\n```\nfinal GetElements query = new GetElements.Builder()\n        .input(new EdgeSeed(\"A\", \"B\", DirectedType.UNDIRECTED))\n        .build();\nfinal Element edge;\ntry (final Iterable<? extends Element> edges = graph.execute(query, user)) {\n    edge = edges.iterator().next();\n}\nfinal ReservoirItemsSketch<String> stringsSketch = ((ReservoirItemsSketch<String>) edge.getProperty(\"stringsSample\"));\nfinal String[] samples = stringsSketch.getSamples();\nfinal StringBuilder sb = new StringBuilder(\"10 samples: \");\nfor (int i = 0; i < 10 && i < samples.length; i++) {\n    if (i > 0) {\n        sb.append(\", \");\n    }\n    sb.append(samples[i]);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing AgeOff Time Check in Java/JSON/Python\nDESCRIPTION: AgeOff predicate checks if a timestamp is recent based on a provided age off time. Takes a Long input value and compares against a configured timeout value in milliseconds.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/predicates-guide/koryphe-predicates.md#2025-04-23_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nfinal AgeOff function = new AgeOff(100000L);\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"AgeOff\",\n  \"ageOffTime\" : 100000\n}\n```\n\nLANGUAGE: python\nCODE:\n```\ng.AgeOff(\n  age_off_time=100000\n)\n```\n\n----------------------------------------\n\nTITLE: Fetching Entities and Edges with Count Filter in JSON\nDESCRIPTION: This JSON snippet demonstrates the structure for querying entities and edges related to an edge, with a filter for elements having a count greater than 1 using the GetElements operation.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/get.md#2025-04-23_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n\"class\" : \"GetElements\",\n\"input\" : [ {\n    \"class\" : \"EdgeSeed\",\n    \"source\" : 1,\n    \"destination\" : 2,\n    \"matchedVertex\" : \"SOURCE\",\n    \"directedType\" : \"EITHER\"\n} ],\n\"view\" : {\n    \"edges\" : {\n    \"edge\" : {\n        \"preAggregationFilterFunctions\" : [ {\n        \"selection\" : [ \"count\" ],\n        \"predicate\" : {\n            \"class\" : \"IsMoreThan\",\n            \"orEqualTo\" : false,\n            \"value\" : 1\n        }\n        } ]\n    }\n    },\n    \"entities\" : {\n    \"entity\" : {\n        \"preAggregationFilterFunctions\" : [ {\n        \"selection\" : [ \"count\" ],\n        \"predicate\" : {\n            \"class\" : \"IsMoreThan\",\n            \"orEqualTo\" : false,\n            \"value\" : 1\n        }\n        } ]\n    }\n    }\n}\n}\n```\n\n----------------------------------------\n\nTITLE: Getting JavaRDD of Elements with Seeds\nDESCRIPTION: Demonstrates basic usage of GetJavaRDDOfElements operation to retrieve elements using EdgeSeeds. Returns both entities and edges matching the provided seeds.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/spark.md#2025-04-23_snippet_11\n\nLANGUAGE: java\nCODE:\n```\nfinal GetJavaRDDOfElements operation = new GetJavaRDDOfElements.Builder()\n        .input(new EdgeSeed(1, 2, true), new EdgeSeed(2, 3, true))\n        .build();\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"GetJavaRDDOfElements\",\n  \"input\" : [ {\n    \"class\" : \"EdgeSeed\",\n    \"source\" : 1,\n    \"destination\" : 2,\n    \"matchedVertex\" : \"SOURCE\",\n    \"directedType\" : \"DIRECTED\"\n  }, {\n    \"class\" : \"EdgeSeed\",\n    \"source\" : 2,\n    \"destination\" : 3,\n    \"matchedVertex\" : \"SOURCE\",\n    \"directedType\" : \"DIRECTED\"\n  } ]\n}\n```\n\n----------------------------------------\n\nTITLE: Executing a Named Operation in JSON\nDESCRIPTION: Executes the previously defined '2-hop' Named Operation using JSON, with an EntitySeed of vertex 1 as input.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/administration-guide/named-operations.md#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"class\" : \"NamedOperation\",\n    \"input\" : [ {\n        \"class\" : \"EntitySeed\",\n        \"vertex\" : 1\n    } ],\n    \"operationName\" : \"2-hop\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Numeric Product Calculation in Java\nDESCRIPTION: Creates a Product operator that calculates the product of two numbers. Handles various numeric types including Integer, Long, Double, and Short, retaining the original type in the result.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/binary-operators-guide/koryphe-operators.md#2025-04-23_snippet_15\n\nLANGUAGE: java\nCODE:\n```\nfinal Product product = new Product();\n```\n\n----------------------------------------\n\nTITLE: Implementing Regex Pattern Matching\nDESCRIPTION: Demonstrates how to use the Regex predicate to match strings against a regular expression pattern. Accepts java.lang.String input type.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/predicates-guide/koryphe-predicates.md#2025-04-23_snippet_123\n\nLANGUAGE: java\nCODE:\n```\nfinal Regex function = new Regex(\"[a-d0-4]\");\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"Regex\",\n  \"value\" : {\n    \"java.util.regex.Pattern\" : \"[a-d0-4]\"\n  }\n}\n```\n\nLANGUAGE: python\nCODE:\n```\ng.Regex(\n  value={'java.util.regex.Pattern': '[a-d0-4]'}\n)\n```\n\n----------------------------------------\n\nTITLE: Filtering Walks with Conditional Operations in Java\nDESCRIPTION: Java implementation for filtering walks based on count property. This snippet configures a GetWalks operation that retrieves paths of length 2 starting from vertex 5, filtered by a condition that the total edge count property must be less than 11.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/get.md#2025-04-23_snippet_55\n\nLANGUAGE: java\nCODE:\n```\nfinal GetWalks getWalks = new GetWalks.Builder()\n        .operations(new GetElements.Builder()\n                        .view(new View.Builder()\n                                .edges(Lists.newArrayList(\"edge\", \"edge1\"))\n                                .entities(Lists.newArrayList(\"entity\", \"entity1\"))\n                                .build())\n                        .inOutType(SeededGraphFilters.IncludeIncomingOutgoingType.INCOMING)\n                        .build(),\n                new GetElements.Builder()\n                        .view(new View.Builder()\n                                .edges(Lists.newArrayList(\"edge\", \"edge1\"))\n                                .entities(Lists.newArrayList(\"entity\", \"entity1\"))\n                                .build())\n                        .inOutType(SeededGraphFilters.IncludeIncomingOutgoingType.INCOMING)\n                        .build(),\n                new GetElements.Builder()\n                        .view(new View.Builder()\n                                .entities(Lists.newArrayList(\"entity\", \"entity1\"))\n                                .build())\n                        .inOutType(SeededGraphFilters.IncludeIncomingOutgoingType.INCOMING)\n                        .build())\n        .conditional(new Conditional(\n                new IsLessThan(11),\n                new OperationChain.Builder()\n                        .first(new Map.Builder<>()\n                                .first(new ExtractWalkEdges())\n```\n\n----------------------------------------\n\nTITLE: Configuring ToTypeValue Function in JSON\nDESCRIPTION: JSON configuration for the ToTypeValue function. This can be used to instantiate the function in a Gaffer JSON operation chain.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/gaffer-functions.md#2025-04-23_snippet_45\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"ToTypeValue\"\n}\n```\n\n----------------------------------------\n\nTITLE: Gaffer Graph Operation Results in JSON Format\nDESCRIPTION: The JSON representation of the graph operation results, showing the same entities and edges as in the Java format. Each result contains LEFT (empty) and RIGHT (with graph elements) values, reflecting the outer join operation.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/join.md#2025-04-23_snippet_56\n\nLANGUAGE: json\nCODE:\n```\n[\n    {\n        \"values\": {\n            \"LEFT\": [],\n            \"RIGHT\": {\n                \"class\": \"uk.gov.gchq.gaffer.data.element.Entity\",\n                \"group\": \"entity\",\n                \"vertex\": 1,\n                \"properties\": {\n                \"count\": 3\n                }\n            }\n        }\n    },\n    {\n        \"values\": {\n            \"LEFT\": [],\n            \"RIGHT\": {\n                \"class\": \"uk.gov.gchq.gaffer.data.element.Edge\",\n                \"group\": \"edge\",\n                \"source\": 1,\n                \"destination\": 2,\n                \"directed\": true,\n                \"properties\": {\n                \"count\": 3\n                }\n            }\n        }\n    },\n    {\n        \"values\": {\n            \"LEFT\": [],\n            \"RIGHT\": {\n                \"class\": \"uk.gov.gchq.gaffer.data.element.Edge\",\n                \"group\": \"edge\",\n                \"source\": 1,\n                \"destination\": 4,\n                \"directed\": true,\n                \"properties\": {\n                \"count\": 1\n                }\n            }\n        }\n    },\n    {\n        \"values\": {\n            \"LEFT\": [],\n            \"RIGHT\": {\n                \"class\": \"uk.gov.gchq.gaffer.data.element.Entity\",\n                \"group\": \"entity\",\n                \"vertex\": 2,\n                \"properties\": {\n                \"count\": 1\n                }\n            }\n        }\n    },\n    {\n        \"values\": {\n            \"LEFT\": [],\n            \"RIGHT\": {\n                \"class\": \"uk.gov.gchq.gaffer.data.element.Edge\",\n                \"group\": \"edge\",\n                \"source\": 2,\n                \"destination\": 4,\n                \"directed\": true,\n                \"properties\": {\n                \"count\": 1\n                }\n            }\n        }\n    },\n    {\n        \"values\": {\n            \"LEFT\": [],\n            \"RIGHT\": {\n                \"class\": \"uk.gov.gchq.gaffer.data.element.Edge\",\n                \"group\": \"edge\",\n                \"source\": 2,\n                \"destination\": 5,\n                \"directed\": true,\n                \"properties\": {\n                \"count\": 1\n                }\n            }\n        }\n    },\n    {\n        \"values\": {\n            \"LEFT\": [],\n            \"RIGHT\": {\n                \"class\": \"uk.gov.gchq.gaffer.data.element.Edge\",\n                \"group\": \"edge\",\n                \"source\": 3,\n                \"destination\": 4,\n                \"directed\": true,\n                \"properties\": {\n                \"count\": 4\n                }\n            }\n        }\n    },\n    {\n        \"values\": {\n            \"LEFT\": [],\n            \"RIGHT\": {\n                \"class\": \"uk.gov.gchq.gaffer.data.element.Entity\",\n                \"group\": \"entity\",\n                \"vertex\": 4,\n                \"properties\": {\n                \"count\": 1\n                }\n            }\n        }\n    },\n    {\n        \"values\": {\n            \"LEFT\": [],\n            \"RIGHT\": {\n                \"class\": \"uk.gov.gchq.gaffer.data.element.Entity\",\n                \"group\": \"entity\",\n                \"vertex\": 5,\n                \"properties\": {\n                \"count\": 3\n                }\n            }\n        }\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Defining Types Schema for HyperLogLogPlus in Gaffer\nDESCRIPTION: JSON schema definition for HyperLogLogPlus type, including its class, aggregator, and serializer for use in Gaffer graphs.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/properties-guide/advanced.md#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"types\": {\n    \"vertex.string\": {\n      \"class\": \"java.lang.String\",\n      \"validateFunctions\": [\n        {\n          \"class\": \"uk.gov.gchq.koryphe.impl.predicate.Exists\"\n        }\n      ]\n    },\n    \"hyperLogLogPlus\": {\n      \"class\": \"com.clearspring.analytics.stream.cardinality.HyperLogLogPlus\",\n      \"aggregateFunction\": {\n        \"class\": \"uk.gov.gchq.gaffer.sketches.clearspring.cardinality.binaryoperator.HyperLogLogPlusAggregator\"\n      },\n      \"serialiser\": {\n        \"class\": \"uk.gov.gchq.gaffer.sketches.clearspring.cardinality.serialisation.HyperLogLogPlusSerialiser\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Right Key Inner Join with ElementMatch in Python\nDESCRIPTION: Python implementation of an OperationChain with a Join operation using ElementMatch. Creates four Entity objects as input with different vertex values and count properties, performing an inner join with RIGHT match key.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/join.md#2025-04-23_snippet_13\n\nLANGUAGE: python\nCODE:\n```\ng.OperationChain( \noperations=[ \n    g.Join( \n    operation=g.GetAllElements(), \n    match_method=g.ElementMatch(), \n    input=[ \n        g.Entity( \n        group=\"entity\", \n        properties={'count': 3}, \n        vertex=1 \n        ), \n        g.Entity( \n        group=\"entity\", \n        properties={'count': 1}, \n        vertex=4 \n        ), \n        g.Entity( \n        group=\"entity\", \n        properties={'count': 3}, \n        vertex=5 \n        ), \n        g.Entity( \n        group=\"entity\", \n        properties={'count': 30}, \n        vertex=6 \n        ) \n    ], \n    flatten=False, \n    match_key=\"RIGHT\", \n    join_type=\"INNER\" \n    ) \n] \n)\n```\n\n----------------------------------------\n\nTITLE: Java Graph Operation Results\nDESCRIPTION: Shows the results of the graph operation displaying Entity and Edge relationships with their properties. Each result includes vertex information and count properties.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/join.md#2025-04-23_snippet_47\n\nLANGUAGE: java\nCODE:\n```\n[ null --> [Entity[vertex=1,group=entity,properties=Properties[count=<java.lang.Integer>3]]] ]\n[ null --> [Edge[group=edge,source=1,destination=2,directed=true,properties=Properties[count=<java.lang.Integer>3]]] ]\n[ null --> [Edge[group=edge,source=1,destination=4,directed=true,properties=Properties[count=<java.lang.Integer>1]]] ]\n[ null --> [Entity[vertex=2,group=entity,properties=Properties[count=<java.lang.Integer>1]]] ]\n[ Entity[vertex=1,group=entity,properties=Properties[count=<java.lang.Integer>3]] --> [Edge[group=edge,source=2,destination=3,directed=true,properties=Properties[count=<java.lang.Integer>2]]] ]\n[ Entity[vertex=5,group=entity,properties=Properties[count=<java.lang.Integer>3]] --> [Edge[group=edge,source=2,destination=3,directed=true,properties=Properties[count=<java.lang.Integer>2]]] ]\n[ null --> [Edge[group=edge,source=2,destination=4,directed=true,properties=Properties[count=<java.lang.Integer>1]]] ]\n[ null --> [Edge[group=edge,source=2,destination=5,directed=true,properties=Properties[count=<java.lang.Integer>1]]] ]\n[ Entity[vertex=1,group=entity,properties=Properties[count=<java.lang.Integer>3]] --> [Entity[vertex=3,group=entity,properties=Properties[count=<java.lang.Integer>2]]] ]\n[ Entity[vertex=5,group=entity,properties=Properties[count=<java.lang.Integer>3]] --> [Entity[vertex=3,group=entity,properties=Properties[count=<java.lang.Integer>2]]] ]\n[ null --> [Edge[group=edge,source=3,destination=4,directed=true,properties=Properties[count=<java.lang.Integer>4]]] ]\n[ null --> [Entity[vertex=4,group=entity,properties=Properties[count=<java.lang.Integer>1]]] ]\n[ null --> [Entity[vertex=5,group=entity,properties=Properties[count=<java.lang.Integer>3]]] ]\n```\n\n----------------------------------------\n\nTITLE: GetWalks with Cardinality Filtering in JSON\nDESCRIPTION: JSON configuration for GetWalks with cardinality filtering, showing how to define filters and operation chains for traversing a graph starting from vertex 5. Includes pre-aggregation and post-aggregation filters using HyperLogLogPlus.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/get.md#2025-04-23_snippet_51\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"GetWalks\",\n  \"input\" : [ {\n    \"class\" : \"EntitySeed\",\n    \"vertex\" : 5\n  } ],\n  \"operations\" : [ {\n    \"class\" : \"OperationChain\",\n    \"operations\" : [ {\n      \"class\" : \"GetElements\",\n      \"view\" : {\n        \"entities\" : {\n          \"cardinality\" : {\n            \"preAggregationFilterFunctions\" : [ {\n              \"selection\" : [ \"edgeGroup\" ],\n              \"predicate\" : {\n                \"class\" : \"IsEqual\",\n                \"value\" : {\n                  \"TreeSet\" : [ \"edge\" ]\n                }\n              }\n            } ],\n            \"groupBy\" : [ ],\n            \"postAggregationFilterFunctions\" : [ {\n              \"selection\" : [ \"hllp\" ],\n              \"predicate\" : {\n                \"class\" : \"HyperLogLogPlusIsLessThan\",\n                \"orEqualTo\" : false,\n                \"value\" : 2\n              }\n            } ]\n          }\n        }\n      }\n    }, {\n      \"class\" : \"GetElements\",\n      \"view\" : {\n        \"edges\" : {\n          \"edge\" : { },\n          \"edge1\" : { }\n        },\n        \"entities\" : {\n          \"entity1\" : { },\n\n```\n\n----------------------------------------\n\nTITLE: Implementing InDateRange with second precision in Java\nDESCRIPTION: Creates an InDateRange predicate that checks if a Date falls between 01:30:10 and 01:30:50 on January 1, 2017 (inclusive). This demonstrates time precision down to the second level.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/predicates-guide/koryphe-predicates.md#2025-04-23_snippet_15\n\nLANGUAGE: java\nCODE:\n```\nfinal InDateRange function = new InDateRange.Builder()\n        .start(\"2017/01/01 01:30:10\")\n        .end(\"2017/01/01 01:30:50\")\n        .build();\n```\n\n----------------------------------------\n\nTITLE: Implementing FunctionMap to Multiply Map Values in Java\nDESCRIPTION: Creates a FunctionMap that applies a MultiplyBy function to all values in a map, multiplying each value by 10. This function operates on a Map<String, Integer> and returns a new map with modified values.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/koryphe-functions.md#2025-04-23_snippet_61\n\nLANGUAGE: java\nCODE:\n```\nfinal FunctionMap<String, Integer, Integer> function = new FunctionMap<>(new MultiplyBy(10));\n```\n\n----------------------------------------\n\nTITLE: Implementing Maximum Value Selection in Java\nDESCRIPTION: Creates a Max operator that returns the maximum value between two comparable inputs. Works with any objects that implement the Comparable interface, such as numbers or strings.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/binary-operators-guide/koryphe-operators.md#2025-04-23_snippet_12\n\nLANGUAGE: java\nCODE:\n```\nfinal Max function = new Max();\n```\n\n----------------------------------------\n\nTITLE: Migrating SeedMatching with EdgeSeeds in Python\nDESCRIPTION: Example of migrating from SeedMatching.EQUAL to using a View for filtering Edges with EdgeSeeds in Python. This replaces the deprecated seed_matching parameter with a View specifying the relevant edge group.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/change-notes/migrating-from-v1-to-v2/deprecations.md#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ng.GetElements(\n    input=[\n        g.EdgeSeed(\n            source=\"source\",\n            destination=\"dest\",\n            directed_type=\"DIRECTED\",\n            matched_vertex=\"SOURCE\"\n        )\n    ],\n    seed_matching=\"EQUAL\"\n)\n```\n\nLANGUAGE: python\nCODE:\n```\ng.GetElements(\n    input=[\n        g.EdgeSeed(\n            source=\"source\",\n            destination=\"dest\",\n            directed_type=\"DIRECTED\",\n            matched_vertex=\"SOURCE\"\n        )\n    ],\n    view=g.View(\n        edges=[g.ElementDefinition(group=\"relevantEdgeGroup\")]\n    )\n)\n```\n\n----------------------------------------\n\nTITLE: Getting Filtered Walks in Gaffer Graph (JSON)\nDESCRIPTION: JSON representation of the GetWalks operation to retrieve paths of length 2 with pre-aggregation filters on edge properties. This configuration filters edges based on the 'count' property.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/get.md#2025-04-23_snippet_43\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"GetWalks\",\n  \"input\" : [ {\n    \"class\" : \"EntitySeed\",\n    \"vertex\" : 1\n  } ],\n  \"operations\" : [ {\n    \"class\" : \"OperationChain\",\n    \"operations\" : [ {\n      \"class\" : \"GetElements\",\n      \"view\" : {\n        \"edges\" : {\n          \"edge\" : {\n            \"preAggregationFilterFunctions\" : [ {\n              \"selection\" : [ \"count\" ],\n              \"predicate\" : {\n                \"class\" : \"IsMoreThan\",\n                \"orEqualTo\" : false,\n                \"value\" : 3\n              }\n            } ]\n          }\n        }\n      },\n      \"includeIncomingOutGoing\" : \"OUTGOING\"\n    } ]\n  }, {\n    \"class\" : \"OperationChain\",\n    \"operations\" : [ {\n      \"class\" : \"GetElements\",\n      \"view\" : {\n        \"edges\" : {\n          \"edge1\" : {\n            \"preAggregationFilterFunctions\" : [ {\n              \"selection\" : [ \"count\" ],\n              \"predicate\" : {\n                \"class\" : \"IsMoreThan\",\n                \"orEqualTo\" : false,\n                \"value\" : 8\n              }\n            } ]\n          }\n        }\n      },\n      \"includeIncomingOutGoing\" : \"INCOMING\"\n    } ]\n  } ],\n  \"resultsLimit\" : 1000000\n}\n```\n\n----------------------------------------\n\nTITLE: Extracting Elements with Map Operation in Java\nDESCRIPTION: Example showing how to use Map operation with FirstItem function to extract the first element from a collection of entities returned by GetElements. This demonstrates filtering elements by group and then applying a Map operation.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/core.md#2025-04-23_snippet_43\n\nLANGUAGE: java\nCODE:\n```\nfinal OperationChain<?> operationChain = new OperationChain.Builder()\n        .first(new GetElements.Builder()\n                .input(new EntitySeed(1), new EntitySeed(2))\n                .view(new View.Builder()\n                        .entity(\"entity\")\n                        .build())\n                .build())\n        .then(new Map.Builder<Iterable<? extends Element>>()\n                .first(new FirstItem<>())\n                .build())\n        .build();\n```\n\n----------------------------------------\n\nTITLE: Fetching Entities and Edges by ID in Python\nDESCRIPTION: Python implementation of the GetElements operation to retrieve entities and edges by specifying entity and edge seeds. This example fetches data related to entity ID 2 and edge ID 2 to 3.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/get.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ng.GetElements(\ninput=[\n    g.EntitySeed(\n    vertex=2\n    ),\n    g.EdgeSeed(\n    source=2,\n    destination=3,\n    directed_type=\"EITHER\",\n    matched_vertex=\"SOURCE\"\n    )\n]\n)\n```\n\n----------------------------------------\n\nTITLE: Filtered Edge Query in Gaffer JSON\nDESCRIPTION: Demonstrates the equivalent filtered edge query in Gaffer JSON format, using preAggregationFilterFunctions to filter on the weight property.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/user-guide/query/gremlin/gremlin.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"class\": \"GetElements\",\n    \"input\": [\n        {\n            \"class\": \"EntitySeed\",\n            \"vertex\": \"John\"\n        }\n    ],\n    \"view\": {\n        \"edges\": {\n            \"Created\": {\n                \"preAggregationFilterFunctions\": [\n                    {\n                        \"selection\": [\n                            \"weight\"\n                        ],\n                        \"predicate\": {\n                            \"class\": \"IsMoreThan\",\n                            \"orEqualTo\": false,\n                            \"value\": {\n                                \"Float\": 0.4\n                            }\n                        }\n                    }\n                ]\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Conditional Function (If) in Java\nDESCRIPTION: Creates an If function that conditionally applies either ToUpperCase or ToLowerCase based on whether the input contains 'upper'. This function takes a String as input and returns a modified String.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/koryphe-functions.md#2025-04-23_snippet_70\n\nLANGUAGE: java\nCODE:\n```\nfinal If<String, String> predicate = new If<String, String>()\n        .predicate(new StringContains(\"upper\"))\n        .then(new ToUpperCase())\n        .otherwise(new ToLowerCase());\n```\n\n----------------------------------------\n\nTITLE: Named Operation Security Configuration - Java\nDESCRIPTION: Java implementation showing security configuration for Named Operations using read/write access roles and predicates.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/administration-guide/named-operations.md#2025-04-23_snippet_17\n\nLANGUAGE: java\nCODE:\n```\nfinal AddNamedOperation addOperation = new AddNamedOperation.Builder()\n        .operationChain(new OperationChain.Builder()\n                .first(new GetAdjacentIds.Builder()\n                        .inOutType(SeededGraphFilters.IncludeIncomingOutgoingType.OUTGOING)\n                        .build())\n                .then(new GetAdjacentIds.Builder()\n                        .inOutType(SeededGraphFilters.IncludeIncomingOutgoingType.OUTGOING)\n                        .build())\n                .build())\n        .description(\"2 hop query\")\n        .name(\"2-hop\")\n        .readAccessRoles(\"read-user\")\n        .writeAccessRoles(\"write-user\")\n        .overwrite()\n        .build();\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Job Details with GetAllJobDetails in Gaffer\nDESCRIPTION: This snippet demonstrates how to use the GetAllJobDetails operation to retrieve all running and historic job details for the graph. It includes examples in Java, JSON, and Python, along with sample results.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/job.md#2025-04-23_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nfinal GetAllJobDetails operation = new GetAllJobDetails();\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"class\" : \"GetAllJobDetails\"\n}\n```\n\nLANGUAGE: python\nCODE:\n```\ng.GetAllJobDetails()\n```\n\n----------------------------------------\n\nTITLE: Implementing Gunzip Function in Python\nDESCRIPTION: Python implementation of a Gunzip function to decompress gzipped data. This function takes a byte array of compressed data as input and returns a byte array of decompressed data.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/koryphe-functions.md#2025-04-23_snippet_66\n\nLANGUAGE: python\nCODE:\n```\ng.Gunzip()\n```\n\n----------------------------------------\n\nTITLE: Max Operation with Transient Properties in Java\nDESCRIPTION: This Java snippet demonstrates a more complex use of the Max operation, including transient properties and custom transformers. It uses GetElements with a custom View and Max with multiple comparators.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/core.md#2025-04-23_snippet_30\n\nLANGUAGE: java\nCODE:\n```\nfinal OperationChain<Element> opChain = new OperationChain.Builder()\n        .first(new GetElements.Builder()\n                .input(new EntitySeed(1), new EntitySeed(2))\n                .view(new View.Builder()\n                        .entity(\"entity\", new ViewElementDefinition.Builder()\n                                .transientProperty(\"score\", Integer.class)\n                                .transformer(new ElementTransformer.Builder()\n                                        .select(\"VERTEX\", \"count\")\n                                        .execute(new ExampleScoreFunction())\n                                        .project(\"score\")\n                                        .build())\n                                .build())\n                        .edge(\"edge\", new ViewElementDefinition.Builder()\n                                .transientProperty(\"score\", Integer.class)\n                                .transformer(new ElementTransformer.Builder()\n                                        .select(\"DESTINATION\", \"count\")\n                                        .execute(new ExampleScoreFunction())\n                                        .project(\"score\")\n                                        .build())\n                                .build())\n                        .build())\n                .build())\n        .then(new Max.Builder()\n                .comparators(\n                        new ElementPropertyComparator.Builder()\n                                .groups(\"entity\", \"edge\")\n                                .property(\"count\")\n                                .reverse(false)\n                                .build(),\n                        new ElementPropertyComparator.Builder()\n                                .groups(\"entity\", \"edge\")\n                                .property(\"score\")\n                                .reverse(false)\n                                .build()\n                )\n                .build())\n        .build();\n```\n\n----------------------------------------\n\nTITLE: Extracting Elements with Map Operation in JSON\nDESCRIPTION: JSON configuration for using Map operation with FirstItem function to extract the first element from a collection of entities. Shows how to configure GetElements with entity filters and apply Map operation.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/core.md#2025-04-23_snippet_44\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"OperationChain\",\n  \"operations\" : [ {\n    \"class\" : \"GetElements\",\n    \"input\" : [ {\n      \"class\" : \"EntitySeed\",\n      \"vertex\" : 1\n    }, {\n      \"class\" : \"EntitySeed\",\n      \"vertex\" : 2\n    } ],\n    \"view\" : {\n      \"entities\" : {\n        \"entity\" : { }\n      }\n    }\n  }, {\n    \"class\" : \"Map\",\n    \"functions\" : [ {\n      \"class\" : \"FirstItem\"\n    } ]\n  } ]\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Elements with Count Greater Than 2 using Python\nDESCRIPTION: This Python code snippet demonstrates filtering elements that have a 'count' property greater than 2. It creates an OperationChain with a NamedOperation (1-hop) and a Filter with an IsMoreThan predicate to select elements based on count.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/core.md#2025-04-23_snippet_11\n\nLANGUAGE: python\nCODE:\n```\ng.OperationChain(\n  operations=[\n    g.NamedOperation(\n      input=[\n        g.EntitySeed(\n          vertex=1\n        )\n      ],\n      operation_name=\"1-hop\"\n    ),\n    g.Filter(\n      global_elements=g.GlobalElementFilterDefinition(\n        predicates=[\n          g.PredicateContext(\n            selection=[\n              \"count\"\n            ],\n            predicate=g.IsMoreThan(\n              value=2,\n              or_equal_to=False\n            )\n          )\n        ]\n      )\n    )\n  ]\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing IsXLessThanY Predicate in Python\nDESCRIPTION: Python implementation of an IsXLessThanY predicate that checks if the first comparable is less than the second comparable. This predicate requires no additional parameters.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/predicates-guide/koryphe-predicates.md#2025-04-23_snippet_102\n\nLANGUAGE: python\nCODE:\n```\ng.IsXLessThanY()\n```\n\n----------------------------------------\n\nTITLE: Implementing StringContains Predicate in Multiple Languages\nDESCRIPTION: Demonstrates how to use StringContains predicate to check if a string contains a specific value. The default implementation is case-sensitive.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/predicates-guide/koryphe-predicates.md#2025-04-23_snippet_121\n\nLANGUAGE: java\nCODE:\n```\nfinal StringContains function = new StringContains(\"test\");\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"StringContains\",\n  \"value\" : \"test\",\n  \"ignoreCase\" : false\n}\n```\n\nLANGUAGE: python\nCODE:\n```\ng.StringContains(\n  value=\"test\",\n  ignore_case=False\n)\n```\n\n----------------------------------------\n\nTITLE: Deploying Gaffer REST API Container\nDESCRIPTION: Docker command to deploy the Gaffer REST API container that provides the front-end interface for the Gaffer graph database, including configuration for the graph schema and properties.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/administration-guide/gaffer-deployment/gaffer-docker/how-to-run.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ndocker run \\\n       --detach \\\n       --name gaffer-rest \\\n       --net gaffer-example \\\n       --publish 8080:8080 \\\n       --volume /custom/configs/application.properties:/gaffer/config/application.properties \\\n       --volume /custom/configs/graph:/gaffer/graph \\\n       --volume /custom/configs/schema:/gaffer/schema \\\n       --volume /custom/configs/store:/gaffer/store \\\n       gchq/gaffer-rest:2.0.0-accumulo-2.0.1 monitor\n```\n\n----------------------------------------\n\nTITLE: Using TypeSubTypeValueToTuple Function in Python\nDESCRIPTION: Python code to create a TypeSubTypeValueToTuple function using the Gaffer Python client. This function converts TypeSubTypeValue objects to Tuples.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/gaffer-functions.md#2025-04-23_snippet_58\n\nLANGUAGE: python\nCODE:\n```\ng.TypeSubTypeValueToTuple()\n```\n\n----------------------------------------\n\nTITLE: Representing Gaffer Graph Elements in JSON\nDESCRIPTION: This JSON snippet shows an array of Gaffer graph elements, including Entities and Edges. Each element is represented as an object with 'LEFT' and 'RIGHT' values, containing details such as class, group, vertex/source/destination, and properties.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/join.md#2025-04-23_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n[\n    {\n        \"values\": {\n            \"LEFT\": {\n                \"class\": \"uk.gov.gchq.gaffer.data.element.Entity\",\n                \"group\": \"entity\",\n                \"vertex\": 1,\n                \"properties\": {\n                    \"count\": 3\n                }\n            },\n            \"RIGHT\": {\n                \"class\": \"uk.gov.gchq.gaffer.data.element.Edge\",\n                \"group\": \"edge\",\n                \"source\": 3,\n                \"destination\": 4,\n                \"directed\": true,\n                \"properties\": {\n                    \"count\": 4\n                }\n            }\n        }\n    },\n    {\n        \"values\": {\n            \"LEFT\": {\n                \"class\": \"uk.gov.gchq.gaffer.data.element.Entity\",\n                \"group\": \"entity\",\n                \"vertex\": 4,\n                \"properties\": {\n                    \"count\": 1\n                }\n            },\n            \"RIGHT\": {\n                \"class\": \"uk.gov.gchq.gaffer.data.element.Edge\",\n                \"group\": \"edge\",\n                \"source\": 2,\n                \"destination\": 3,\n                \"directed\": true,\n                \"properties\": {\n                    \"count\": 2\n                }\n            }\n        }\n    },\n    {\n        \"values\": {\n            \"LEFT\": {\n                \"class\": \"uk.gov.gchq.gaffer.data.element.Entity\",\n                \"group\": \"entity\",\n                \"vertex\": 4,\n                \"properties\": {\n                    \"count\": 1\n                }\n            },\n            \"RIGHT\": {\n                \"class\": \"uk.gov.gchq.gaffer.data.element.Entity\",\n                \"group\": \"entity\",\n                \"vertex\": 3,\n                \"properties\": {\n                    \"count\": 2\n                }\n            }\n        }\n    },\n    {\n        \"values\": {\n            \"LEFT\": {\n                \"class\": \"uk.gov.gchq.gaffer.data.element.Entity\",\n                \"group\": \"entity\",\n                \"vertex\": 5,\n                \"properties\": {\n                    \"count\": 3\n                }\n            },\n            \"RIGHT\": {\n                \"class\": \"uk.gov.gchq.gaffer.data.element.Edge\",\n                \"group\": \"edge\",\n                \"source\": 3,\n                \"destination\": 4,\n                \"directed\": true,\n                \"properties\": {\n                    \"count\": 4\n                }\n            }\n        }\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Defining Types Schema with Visibility Property in Gaffer\nDESCRIPTION: JSON schema that defines the data types for the graph including the visibility property. It specifies validation functions, serializers, and aggregators for each property type, with special handling for the visibility property.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/administration-guide/security/security-guide.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"types\": {\n    \"junction\": {\n      \"description\": \"A road junction represented by a String.\",\n      \"class\": \"java.lang.String\"\n    },\n    \"road\": {\n      \"description\": \"A road represented by a String.\",\n      \"class\": \"java.lang.String\"\n    },\n    \"count.long\": {\n      \"description\": \"A long count that must be greater than or equal to 0.\",\n      \"class\": \"java.lang.Long\",\n      \"validateFunctions\": [\n        {\n          \"class\": \"uk.gov.gchq.koryphe.impl.predicate.IsMoreThan\",\n          \"orEqualTo\": true,\n          \"value\": {\n            \"java.lang.Long\": 0\n          }\n        }\n      ],\n      \"aggregateFunction\": {\n        \"class\": \"uk.gov.gchq.koryphe.impl.binaryoperator.Sum\"\n      }\n    },\n    \"true\": {\n      \"description\": \"A simple boolean that must always be true.\",\n      \"class\": \"java.lang.Boolean\",\n      \"validateFunctions\": [\n        {\n          \"class\": \"uk.gov.gchq.koryphe.impl.predicate.IsTrue\"\n        }\n      ]\n    },\n    \"visibility\": {\n      \"description\": \"A visibility string, either 'public' or 'private'. When a public and private visibility is aggregated together it will result in a private visibility.\",\n      \"class\": \"java.lang.String\",\n      \"validateFunctions\": [\n        {\n          \"class\": \"uk.gov.gchq.koryphe.impl.predicate.Exists\"\n        }\n      ],\n      \"serialiser\": {\n        \"class\": \"uk.gov.gchq.gaffer.doc.dev.serialiser.VisibilitySerialiser\"\n      },\n      \"aggregateFunction\": {\n        \"class\": \"uk.gov.gchq.gaffer.doc.dev.aggregator.VisibilityAggregator\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying and Estimating Vertex Degree with HllSketch in Gaffer\nDESCRIPTION: Java code to query a Gaffer graph for an entity with a HllSketch property and estimate its degree.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/properties-guide/advanced.md#2025-04-23_snippet_9\n\nLANGUAGE: java\nCODE:\n```\nfinal GetElements query = new GetElements.Builder()\n        .input(new EntitySeed(\"A\"))\n        .build();\nfinal Element element;\ntry (final Iterable<? extends Element> elements = graph.execute(query, user)) {\n    element = elements.iterator().next();\n}\nfinal HllSketch hllSketch = (HllSketch) element.getProperty(\"approxCardinality\");\nfinal double approxDegree = hllSketch.getEstimate();\nfinal String degreeEstimate = \"Entity A has approximate degree \" + approxDegree;\n```\n\n----------------------------------------\n\nTITLE: Querying Elements Between Sets in Gaffer (Java)\nDESCRIPTION: Demonstrates using GetElementsBetweenSets operation to retrieve edges between two sets of vertices and entities in the first set. This example queries elements between vertex 1 and vertices 2 and 4.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/accumulo.md#2025-04-23_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nfinal GetElementsBetweenSets operation = new GetElementsBetweenSets.Builder()\n        .input(new EntitySeed(1))\n        .inputB(new EntitySeed(2), new EntitySeed(4))\n        .build();\n```\n\n----------------------------------------\n\nTITLE: Creating StringTrim Function in Python\nDESCRIPTION: Python implementation of a StringTrim function. This function removes whitespace from both ends of the input string.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/koryphe-functions.md#2025-04-23_snippet_163\n\nLANGUAGE: python\nCODE:\n```\ng.StringTrim()\n```\n\n----------------------------------------\n\nTITLE: Retrieving Cardinality Using Java in Gaffer\nDESCRIPTION: Demonstrates querying an entity's approximate cardinality using Java. The code creates a GetElements query, executes it against the graph, and extracts the HllSketch cardinality estimate from the result.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/user-guide/gaffer-basics/what-is-cardinality.md#2025-04-23_snippet_9\n\nLANGUAGE: java\nCODE:\n```\nfinal GetElements query = new GetElements.Builder()\n        .input(new EntitySeed(\"A\"))\n        .build();\n\nfinal Element element;\ntry (final Iterable<? extends Element> elements = graph.execute(query, user)) {\n    element = elements.iterator().next();\n}\n\nfinal HllSketch hllSketch = (HllSketch) element.getProperty(\"approxCardinality\");\nfinal double approxCardinality = hllSketch.getEstimate();\nfinal String cardinalityEstimate = \"Entity A has approximate cardinality \" + approxCardinality;\n```\n\nLANGUAGE: txt\nCODE:\n```\nEntity A has approximate cardinality 1.0\n```\n\n----------------------------------------\n\nTITLE: Implementing KeyFunctionMatch Join Operation in Gaffer\nDESCRIPTION: Shows a right inner join operation using KeyFunctionMatch with a FunctionChain that combines ExtractProperty and Increment operations for matching elements. The operation extracts the count property, increments it, and matches against other elements.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/join.md#2025-04-23_snippet_23\n\nLANGUAGE: java\nCODE:\n```\nfinal OperationChain<Iterable<? extends MapTuple>> opChain = new OperationChain.Builder()\n        .first(new Join.Builder<>()\n                .input(inputElements)\n                .operation(new GetAllElements())\n                .joinType(JoinType.INNER)\n                .matchKey(MatchKey.RIGHT)\n                .matchMethod(new KeyFunctionMatch.Builder()\n                    .firstKeyFunction(new FunctionChain(new ExtractProperty(\"count\"), new Increment(1)))\n                    .secondKeyFunction(new ExtractProperty(\"count\"))\n                    .build())\n                .build())\n        .build();\n```\n\nLANGUAGE: python\nCODE:\n```\ng.OperationChain( \noperations=[ \n    g.Join( \n    operation=g.GetAllElements(), \n    match_method=g.KeyFunctionMatch(\n        first_key_function=g.FunctionChain([\n            g.ExtractProperty(\"count\"),\n            g.Increment(increment=1)\n            ]),\n        second_key_function=g.ExtractProperty(\"count\")\n        ), \n    input=[ \n        g.Entity( \n        group=\"entity\", \n        properties={'count': 3}, \n        vertex=1 \n        ), \n        g.Entity( \n        group=\"entity\", \n        properties={'count': 1}, \n        vertex=4 \n        ), \n        g.Entity( \n        group=\"entity\", \n        properties={'count': 3}, \n        vertex=5 \n        ), \n        g.Entity( \n        group=\"entity\", \n        properties={'count': 30}, \n        vertex=6 \n        ) \n    ], \n    match_key=\"RIGHT\", \n    join_type=\"INNER\" \n    ) \n] \n)\n```\n\n----------------------------------------\n\nTITLE: Transforming Edge Count Property in Gaffer\nDESCRIPTION: Example showing how to transform a count property into a string property specifically for edges of type 'edge'. The operation uses ElementTransformer to select the count property, convert it to string, and project it as 'countString'.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/core.md#2025-04-23_snippet_53\n\nLANGUAGE: java\nCODE:\n```\nfinal Transform transform = new Transform.Builder()\n        .edge(\"edge\", new ElementTransformer.Builder()\n                .select(\"count\")\n                .execute(new ToString())\n                .project(\"countString\")\n                .build())\n        .build();\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"Transform\",\n  \"edges\" : {\n    \"edge\" : {\n      \"functions\" : [ {\n        \"selection\" : [ \"count\" ],\n        \"function\" : {\n          \"class\" : \"ToString\"\n        },\n        \"projection\" : [ \"countString\" ]\n      } ]\n    }\n  }\n}\n```\n\nLANGUAGE: python\nCODE:\n```\ng.Transform(\n  edges=[\n    g.ElementTransformDefinition(\n      group=\"edge\",\n      functions=[\n        g.FunctionContext(\n          selection=[\n            \"count\"\n          ],\n          function=g.ToString(),\n          projection=[\n            \"countString\"\n          ]\n        )\n      ]\n    )\n  ]\n)\n```\n\n----------------------------------------\n\nTITLE: Creating InRange Function for Long Values in Python\nDESCRIPTION: Python code to create an InRange function for Long values between 5 and 10 (inclusive). This is used in Gaffer's Python client for range checks on numeric values.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/predicates-guide/koryphe-predicates.md#2025-04-23_snippet_50\n\nLANGUAGE: python\nCODE:\n```\ng.InRange(\n  start=g.long(5),\n  end=g.long(10)\n)\n```\n\n----------------------------------------\n\nTITLE: Using DivideBy in Python\nDESCRIPTION: Python implementation of the DivideBy function with a fixed divisor parameter of 2.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/koryphe-functions.md#2025-04-23_snippet_36\n\nLANGUAGE: python\nCODE:\n```\ng.DivideBy( \n  by=2 \n)\n```\n\n----------------------------------------\n\nTITLE: Executing Parameterized Named Operation in Gaffer\nDESCRIPTION: Executes a Named Operation with additional parameters. This example runs '2-hop-with-limit' operation with a limit parameter set to 2.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/named.md#2025-04-23_snippet_5\n\nLANGUAGE: java\nCODE:\n```\nMap<String, Object> paramMap = Maps.newHashMap();\nparamMap.put(\"param1\", 2L);\n\nfinal NamedOperation<EntityId, Iterable<EntityId>> operation =\n        new NamedOperation.Builder<EntityId, Iterable<EntityId>>()\n                .name(\"2-hop-with-limit\")\n                .input(new EntitySeed(1))\n                .parameters(paramMap)\n                .build();\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"class\" : \"NamedOperation\",\n    \"input\" : [ {\n        \"class\" : \"EntitySeed\",\n        \"class\" : \"EntitySeed\",\n        \"vertex\" : 1\n    } ],\n    \"operationName\" : \"2-hop-with-limit\",\n    \"parameters\" : {\n        \"param1\" : 2\n    }\n}\n```\n\nLANGUAGE: python\nCODE:\n```\ng.NamedOperation( \n    input=[ \n        g.EntitySeed( \n            vertex=1 \n        ) \n    ], \n    operation_name=\"2-hop-with-limit\", \n    parameters={'param1': 2} \n)\n```\n\n----------------------------------------\n\nTITLE: Querying Entity Results in Gaffer\nDESCRIPTION: Example showing basic entity query results from Gaffer in different formats. Returns an entity with vertex 2 and count property of 1.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/get.md#2025-04-23_snippet_19\n\nLANGUAGE: java\nCODE:\n```\nEntity[vertex=2,group=entity,properties=Properties[count=<java.lang.Integer>1]]\n```\n\nLANGUAGE: json\nCODE:\n```\n[ {\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n\"group\" : \"entity\",\n\"vertex\" : 2,\n\"properties\" : {\n    \"count\" : 1\n} } ]\n```\n\n----------------------------------------\n\nTITLE: Retrieving Exported Elements using GetSetExport in Java\nDESCRIPTION: This Java code snippet shows the result of using GetSetExport to retrieve previously exported edges and entities from the Set cache in Gaffer. It displays the structure of Edge and Entity objects with their properties.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/export.md#2025-04-23_snippet_5\n\nLANGUAGE: java\nCODE:\n```\nuk.gov.gchq.gaffer.operation.impl.export.set.GetSetExport: edges:\n    Edge[source=1,destination=4,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=<java.lang.Integer>1]]\n    Entity[vertex=5,group=entity,properties=Properties[count=<java.lang.Integer>3]]\n    Edge[source=3,destination=4,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=<java.lang.Integer>4]]\n    Entity[vertex=2,group=entity,properties=Properties[count=<java.lang.Integer>1]]\n    Entity[vertex=1,group=entity,properties=Properties[count=<java.lang.Integer>3]]\n    Entity[vertex=4,group=entity,properties=Properties[count=<java.lang.Integer>1]]\n    Edge[source=2,destination=3,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=<java.lang.Integer>2]]\n    Entity[vertex=3,group=entity,properties=Properties[count=<java.lang.Integer>2]]\n    Edge[source=2,destination=4,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=<java.lang.Integer>1]]\n    Edge[source=1,destination=2,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=<java.lang.Integer>3]]\n    Edge[source=2,destination=5,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=<java.lang.Integer>1]]\nuk.gov.gchq.gaffer.operation.impl.export.set.GetSetExport: entities:\n    Edge[source=1,destination=4,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=<java.lang.Integer>1]]\n    Entity[vertex=5,group=entity,properties=Properties[count=<java.lang.Integer>3]]\n    Edge[source=3,destination=4,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=<java.lang.Integer>4]]\n    Entity[vertex=2,group=entity,properties=Properties[count=<java.lang.Integer>1]]\n    Entity[vertex=1,group=entity,properties=Properties[count=<java.lang.Integer>3]]\n    Entity[vertex=4,group=entity,properties=Properties[count=<java.lang.Integer>1]]\n    Edge[source=2,destination=3,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=<java.lang.Integer>2]]\n    Entity[vertex=3,group=entity,properties=Properties[count=<java.lang.Integer>2]]\n    Edge[source=2,destination=4,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=<java.lang.Integer>1]]\n    Edge[source=1,destination=2,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=<java.lang.Integer>3]]\n    Edge[source=2,destination=5,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=<java.lang.Integer>1]]\n```\n\n----------------------------------------\n\nTITLE: Java Implementation of Access Controlled AddGraph\nDESCRIPTION: Java code demonstrating how to programmatically create and execute an AddGraph operation with access control predicates. It shows the builder pattern implementation with the same access control logic as the JSON version.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/administration-guide/gaffer-stores/federated-store.md#2025-04-23_snippet_13\n\nLANGUAGE: java\nCODE:\n```\nAddGraph addAccessControlledResourceSecureGraph = new AddGraph.Builder()\n        .graphId(\"AccessControlledResourceSecureGraph\")\n        .parentSchemaIds(Lists.newArrayList(\"ExampleId\"))\n        .parentPropertiesId(\"mapStore\")\n        .readAccessPredicate(\n                new AccessPredicate(\n                        new AdaptedPredicate(\n                                new CallMethod(\"getOpAuths\"),\n                                new And(\n                                        new CollectionContains(\"read-access-auth-1\"),\n                                        new CollectionContains(\"read-access-auth-2\")))))\n        .writeAccessPredicate(\n                new AccessPredicate(\n                        new AdaptedPredicate(\n                                new CallMethod(\"getOpAuths\"),\n                                new And(\n                                        new CollectionContains(\"write-access-auth-1\"),\n                                        new CollectionContains(\"write-access-auth-2\")))))\n        .build();\nfederatedGraph.execute(addAccessControlledResourceSecureGraph, user);\n```\n\n----------------------------------------\n\nTITLE: Configuring MapFilter with Value Predicate\nDESCRIPTION: MapFilter implementation that filters map entries based on values greater than 10.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/koryphe-functions.md#2025-04-23_snippet_105\n\nLANGUAGE: java\nCODE:\n```\nfinal MapFilter valueFilter = new MapFilter().valuePredicate(\n        new IsMoreThan(10)\n);\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"MapFilter\",\n  \"valuePredicate\" : {\n    \"class\" : \"IsMoreThan\",\n    \"orEqualTo\" : false,\n    \"value\" : 10\n  }\n}\n```\n\nLANGUAGE: python\nCODE:\n```\ng.MapFilter( \n  value_predicate=g.IsMoreThan( \n    value=10, \n    or_equal_to=False \n  ) \n)\n```\n\n----------------------------------------\n\nTITLE: Converting Elements to Stream with ToStream in Python\nDESCRIPTION: Python implementation of an operation chain that gets elements from entity seeds and converts the results to a Stream. Uses Gaffer's Python client library to construct the operations.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/core.md#2025-04-23_snippet_72\n\nLANGUAGE: python\nCODE:\n```\ng.OperationChain(\n  operations=[\n    g.GetElements(\n      input=[\n        g.EntitySeed(\n          vertex=1\n        ),\n        g.EntitySeed(\n          vertex=2\n        )\n      ]\n    ),\n    g.ToStream()\n  ]\n)\n```\n\n----------------------------------------\n\nTITLE: GetElementsWithinSet Operation Results in Java\nDESCRIPTION: This Java code snippet shows the expected results from executing the GetElementsWithinSet operation. It returns Entities for nodes 1, 2, and 3, as well as Edges connecting these nodes.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/accumulo.md#2025-04-23_snippet_13\n\nLANGUAGE: java\nCODE:\n```\nEntity[vertex=1,group=entity,properties=Properties[count=<java.lang.Integer>3]]\nEdge[source=1,destination=2,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=<java.lang.Integer>3]]\nEntity[vertex=2,group=entity,properties=Properties[count=<java.lang.Integer>1]]\nEdge[source=2,destination=3,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=<java.lang.Integer>2]]\nEntity[vertex=3,group=entity,properties=Properties[count=<java.lang.Integer>2]]\n```\n\n----------------------------------------\n\nTITLE: Generating Elements from Domain Objects using GenerateElements in JSON\nDESCRIPTION: This JSON snippet demonstrates the structure of a GenerateElements operation for creating elements from custom domain objects. It specifies the input objects and the DomainObjectGenerator class.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/generate.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n\"class\" : \"GenerateElements\",\n\"input\" : [ {\n    \"class\" : \"uk.gov.gchq.gaffer.doc.operation.GenerateElementsExample$DomainObject1\",\n    \"a\" : 1,\n    \"c\" : 1\n}, {\n    \"class\" : \"uk.gov.gchq.gaffer.doc.operation.GenerateElementsExample$DomainObject2\",\n    \"a\" : 1,\n    \"b\" : 2,\n    \"c\" : 1\n} ],\n\"elementGenerator\" : {\n    \"class\" : \"uk.gov.gchq.gaffer.doc.operation.GenerateElementsExample$DomainObjectGenerator\"\n}\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring While Operation in Java\nDESCRIPTION: This snippet demonstrates how to configure a While operation in Java using Gaffer. It sets up a conditional loop with a maximum of 20 repeats, querying for outgoing adjacent IDs and using a Not predicate with CollectionContains.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/flow.md#2025-04-23_snippet_21\n\nLANGUAGE: java\nCODE:\n```\n.conditional(new Not<>(new CollectionContains(new EntitySeed(7))), new ToSet<>())\n.maxRepeats(20)\n.operation(new GetAdjacentIds.Builder()\n        .inOutType(IncludeIncomingOutgoingType.OUTGOING)\n        .build())\n.build();\n```\n\n----------------------------------------\n\nTITLE: GetGafferResultCacheExport JSON Output Structure\nDESCRIPTION: Shows the output structure of the GetGafferResultCacheExport operation in Gaffer, which retrieves graph elements from a result cache. The operation returns a collection of Edge and Entity objects that represent relationships and properties in the graph.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/export.md#2025-04-23_snippet_28\n\nLANGUAGE: json\nCODE:\n```\n\"uk.gov.gchq.gaffer.operation.impl.export.resultcache.GetGafferResultCacheExport: entities\" : [ {\n    \"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n    \"group\" : \"edge\",\n    \"source\" : 2,\n    \"destination\" : 5,\n    \"directed\" : true,\n    \"matchedVertex\" : \"SOURCE\",\n    \"properties\" : {\n        \"count\" : 1\n    }\n}, {\n    \"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n    \"group\" : \"edge\",\n    \"source\" : 3,\n    \"destination\" : 4,\n    \"directed\" : true,\n    \"matchedVertex\" : \"SOURCE\",\n    \"properties\" : {\n        \"count\" : 4\n    }\n}, {\n    \"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n    \"group\" : \"edge\",\n    \"source\" : 2,\n    \"destination\" : 4,\n    \"directed\" : true,\n    \"matchedVertex\" : \"SOURCE\",\n    \"properties\" : {\n        \"count\" : 1\n    }\n}, {\n    \"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n    \"group\" : \"entity\",\n    \"vertex\" : 4,\n    \"properties\" : {\n        \"count\" : 1\n    }\n}, {\n    \"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n    \"group\" : \"entity\",\n    \"vertex\" : 2,\n    \"properties\" : {\n        \"count\" : 1\n    }\n}, {\n    \"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n    \"group\" : \"edge\",\n    \"source\" : 2,\n    \"destination\" : 3,\n    \"directed\" : true,\n    \"matchedVertex\" : \"SOURCE\",\n    \"properties\" : {\n        \"count\" : 2\n    }\n}, {\n    \"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n    \"group\" : \"entity\",\n    \"vertex\" : 3,\n    \"properties\" : {\n        \"count\" : 2\n    }\n}, {\n    \"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n    \"group\" : \"edge\",\n    \"source\" : 1,\n    \"destination\" : 2,\n    \"directed\" : true,\n    \"matchedVertex\" : \"SOURCE\",\n    \"properties\" : {\n        \"count\" : 3\n    }\n}, {\n    \"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n    \"group\" : \"edge\",\n    \"source\" : 1,\n    \"destination\" : 4,\n    \"directed\" : true,\n    \"matchedVertex\" : \"SOURCE\",\n    \"properties\" : {\n        \"count\" : 1\n    }\n}, {\n    \"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n    \"group\" : \"entity\",\n    \"vertex\" : 5,\n    \"properties\" : {\n        \"count\" : 3\n    }\n}, {\n    \"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n    \"group\" : \"entity\",\n    \"vertex\" : 1,\n    \"properties\" : {\n        \"count\" : 3\n    }\n} ]\n```\n\n----------------------------------------\n\nTITLE: Implementing Logical OR Operation in Java\nDESCRIPTION: Creates an Or operator that applies logical OR operation to two boolean values. Returns true if either input is true. Returns false only if both inputs are false.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/binary-operators-guide/koryphe-operators.md#2025-04-23_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nfinal Or or = new Or();\n```\n\n----------------------------------------\n\nTITLE: Parsing Date Strings with TimeZone (GMT+4) in Python\nDESCRIPTION: Python implementation of a date parser that converts date strings to Date objects. This function is configured with a specific format pattern and the GMT+4 timezone.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/koryphe-functions.md#2025-04-23_snippet_118\n\nLANGUAGE: python\nCODE:\n```\ng.ParseDate( \n  time_zone=\"Etc/GMT+4\", \n  format=\"yyyy-MM-dd HH:mm:ss.SSS\", \n  microseconds=False \n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Federated Store with graphConfig.json\nDESCRIPTION: JSON configuration file for initializing a Federated Store using the REST API. It defines the graph ID and specifies the graph library implementation.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/administration-guide/gaffer-stores/federated-store.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"graphId\": \"federatedGraph\",\n  \"library\": {\n    \"class\": \"uk.gov.gchq.gaffer.store.library.HashMapGraphLibrary\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating UnwrapEntityId in Python\nDESCRIPTION: Instantiates the UnwrapEntityId function using the Gaffer Python client. This function can be used to extract vertex values from EntityId objects in Python scripts.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/gaffer-functions.md#2025-04-23_snippet_64\n\nLANGUAGE: python\nCODE:\n```\ng.UnwrapEntityId()\n```\n\n----------------------------------------\n\nTITLE: Graph A Schema Configuration\nDESCRIPTION: JSON configuration defining Graph A's schema including entity definitions, edge relationships, and data types for a person-job-place network.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/federated-operation.md#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n        \"class\": \"AddGraph\",\n        \"graphId\": \"GraphA\",\n        \"schema\": {\n            \"edges\": {\n            \"WorksAs\": {\n                \"source\": \"id.person.string\",\n                \"destination\": \"id.job.string\",\n                \"directed\": \"true\"\n            },\n            \"LivesIn\": {\n                \"source\": \"id.person.string\",\n                \"destination\": \"id.place.string\",\n                \"directed\": \"true\"\n            }\n            },\n            \"entities\": {\n            \"Person\": {\n                \"description\": \"Entity representing a person vertex\",\n                \"vertex\": \"id.person.string\",\n                \"aggregate\": \"true\",\n                \"properties\": {\n                \"name\": \"property.string\",\n                \"count\": \"count.integer\"\n                }\n            },\n            \"Job\": {\n                \"description\": \"Entity representing a job vertex\",\n                \"vertex\": \"id.job.string\",\n                \"aggregate\": \"false\",\n                \"properties\": {\n                \"type\": \"property.string\"\n                }\n            },\n            \"Place\": {\n                \"description\": \"Entity representing a place vertex\",\n                \"vertex\": \"id.place.string\",\n                \"aggregate\": \"false\",\n                \"properties\": {\n                \"name\": \"property.string\"\n                }\n            }\n            },\n            \"types\": {\n            \"id.person.string\": {\n                \"description\": \"A basic type to hold the string id of a person entity\",\n                \"class\": \"java.lang.String\"\n            },\n            \"id.place.string\": {\n                \"description\": \"A basic type to hold the string id of a place entity\",\n                \"class\": \"java.lang.String\"\n            },\n            \"id.job.string\": {\n                \"description\": \"A basic type to hold the string id of a job entity\",\n                \"class\": \"java.lang.String\"\n            },\n            \"property.string\": {\n                \"description\": \"A type to hold string properties of entities\",\n                \"class\": \"java.lang.String\",\n                \"aggregateFunction\": {\n                \"class\": \"uk.gov.gchq.koryphe.impl.binaryoperator.First\"\n                }\n            },\n            \"count.integer\": {\n                \"description\": \"A long count that must be greater than or equal to 0.\",\n                \"class\": \"java.lang.Integer\",\n                \"validateFunctions\": [\n                {\n                    \"class\": \"uk.gov.gchq.koryphe.impl.predicate.IsMoreThan\",\n                    \"orEqualTo\": true,\n                    \"value\": {\n                    \"java.lang.Integer\": 0\n                    }\n                }\n                ],\n                \"aggregateFunction\": {\n                \"class\": \"uk.gov.gchq.koryphe.impl.binaryoperator.Sum\"\n                }\n            },\n            \"true\": {\n                \"class\": \"java.lang.Boolean\",\n                \"validateFunctions\": [\n                {\n                    \"class\": \"uk.gov.gchq.koryphe.impl.predicate.IsTrue\"\n                }\n                ]\n            }\n            }\n        },\n        \"storeProperties\": {\n            \"gaffer.store.class\": \"uk.gov.gchq.gaffer.mapstore.MapStore\"\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Using ToTrailingWildcardPair Function with Custom End of Range in Python\nDESCRIPTION: Python code to create a ToTrailingWildcardPair function with a custom end of range string using the Gaffer Python client. This function converts string inputs to pairs of EntityIds with a custom range end.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/gaffer-functions.md#2025-04-23_snippet_55\n\nLANGUAGE: python\nCODE:\n```\ng.ToTrailingWildcardPair( \n  end_of_range=\"custom\" \n)\n```\n\n----------------------------------------\n\nTITLE: Sorting Elements by Count Property without Deduplication\nDESCRIPTION: Example of sorting graph elements by their count property with deduplication explicitly disabled. Uses the same OperationChain structure but sets deduplicate=false.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/core.md#2025-04-23_snippet_34\n\nLANGUAGE: java\nCODE:\n```\nfinal OperationChain<Iterable<? extends Element>> opChain = new OperationChain.Builder()\n        .first(new GetElements.Builder()\n                .input(new EntitySeed(1), new EntitySeed(2))\n                .build())\n        .then(new Sort.Builder()\n                .comparators(new ElementPropertyComparator.Builder()\n                        .groups(\"entity\", \"edge\")\n                        .property(\"count\")\n                        .reverse(false)\n                        .build())\n                .resultLimit(10)\n                .deduplicate(false)\n                .build())\n        .build();\n```\n\nLANGUAGE: python\nCODE:\n```\ng.OperationChain(\n  operations=[\n    g.GetElements(\n      input=[\n        g.EntitySeed(\n          vertex=1\n        ),\n        g.EntitySeed(\n          vertex=2\n        )\n      ]\n    ),\n    g.Sort(\n      comparators=[\n        g.ElementPropertyComparator(\n          groups=[\n            \"entity\",\n            \"edge\"\n          ],\n          property=\"count\",\n          reversed=False\n        )\n      ],\n      result_limit=10,\n      deduplicate=False\n    )\n  ]\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing IsShorterThan Predicate in Python\nDESCRIPTION: Python implementation of an IsShorterThan predicate that checks if the length of an input is less than 4. The max_length parameter sets the comparison value.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/predicates-guide/koryphe-predicates.md#2025-04-23_snippet_99\n\nLANGUAGE: python\nCODE:\n```\ng.IsShorterThan(\n  max_length=4,\n  or_equal_to=False\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing InDateRange with day precision in Java\nDESCRIPTION: Creates an InDateRange predicate that checks if a Date falls between January 1, 2017 and February 1, 2017 (inclusive). The predicate will return true for any date within this range.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/predicates-guide/koryphe-predicates.md#2025-04-23_snippet_12\n\nLANGUAGE: java\nCODE:\n```\nfinal InDateRange function = new InDateRange.Builder()\n        .start(\"2017/01/01\")\n        .end(\"2017/02/01\")\n        .build();\n```\n\n----------------------------------------\n\nTITLE: Implementing AreIn Set Membership Check\nDESCRIPTION: AreIn predicate that checks if a collection contains all provided values. Verifies set membership for multiple values.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/predicates-guide/koryphe-predicates.md#2025-04-23_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nfinal AreIn function = new AreIn(1, 2, 3);\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"AreIn\",\n  \"values\" : [ 1, 2, 3 ]\n}\n```\n\nLANGUAGE: python\nCODE:\n```\ng.AreIn(\n  values=[\n    1,\n    2,\n    3\n  ]\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Numeric Sum Calculation in Python\nDESCRIPTION: Python implementation of the Sum operator for calculating the sum of two numbers.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/binary-operators-guide/koryphe-operators.md#2025-04-23_snippet_20\n\nLANGUAGE: python\nCODE:\n```\ng.Sum()\n```\n\n----------------------------------------\n\nTITLE: Implementing IsEqual Value Comparison\nDESCRIPTION: Creates an IsEqual predicate that checks if an input value exactly matches a specified value, maintaining strict type equality.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/predicates-guide/koryphe-predicates.md#2025-04-23_snippet_63\n\nLANGUAGE: java\nCODE:\n```\nfinal IsEqual function = new IsEqual(5);\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"uk.gov.gchq.koryphe.impl.predicate.IsEqual\",\n  \"value\" : 5\n}\n```\n\nLANGUAGE: python\nCODE:\n```\ng.IsEqual(\n  value=5\n)\n```\n\n----------------------------------------\n\nTITLE: Using DictionaryLookup in Python\nDESCRIPTION: Python implementation of the DictionaryLookup function with a dictionary parameter mapping keys to values.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/koryphe-functions.md#2025-04-23_snippet_30\n\nLANGUAGE: python\nCODE:\n```\ng.DictionaryLookup( \n  dictionary={'1': 'one', '2': 'two', '3': 'three'} \n)\n```\n\n----------------------------------------\n\nTITLE: Filtered GetElementsWithinSet Operation in JSON\nDESCRIPTION: This JSON representation of the GetElementsWithinSet operation includes a view that filters elements based on their 'count' property. It retrieves elements within vertices 1, 2, and 3, but only if their count is greater than 2.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/accumulo.md#2025-04-23_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"GetElementsWithinSet\",\n  \"input\" : [ {\n    \"class\" : \"EntitySeed\",\n    \"vertex\" : 1\n  }, {\n    \"class\" : \"EntitySeed\",\n    \"vertex\" : 2\n  }, {\n    \"class\" : \"EntitySeed\",\n    \"vertex\" : 3\n  } ],\n  \"view\" : {\n    \"edges\" : {\n      \"edge\" : {\n        \"preAggregationFilterFunctions\" : [ {\n          \"selection\" : [ \"count\" ],\n          \"predicate\" : {\n            \"class\" : \"IsMoreThan\",\n            \"orEqualTo\" : false,\n            \"value\" : 2\n          }\n        } ]\n      }\n    },\n    \"entities\" : {\n      \"entity\" : {\n        \"preAggregationFilterFunctions\" : [ {\n          \"selection\" : [ \"count\" ],\n          \"predicate\" : {\n            \"class\" : \"IsMoreThan\",\n            \"orEqualTo\" : false,\n            \"value\" : 2\n          }\n        } ]\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Named Operation in Gaffer\nDESCRIPTION: Runs a pre-configured Named Operation with specified input parameters. This example executes a '2-hop' operation with an EntitySeed input.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/named.md#2025-04-23_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nfinal NamedOperation<EntityId, Iterable<EntityId>> operation =\n        new NamedOperation.Builder<EntityId, Iterable<EntityId>>()\n                .name(\"2-hop\")\n                .input(new EntitySeed(1))\n                .build();\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"class\" : \"NamedOperation\",\n    \"input\" : [ {\n        \"class\" : \"EntitySeed\",\n        \"class\" : \"EntitySeed\",\n        \"vertex\" : 1\n    } ],\n    \"operationName\" : \"2-hop\"\n}\n```\n\nLANGUAGE: python\nCODE:\n```\ng.NamedOperation( \n    input=[ \n        g.EntitySeed( \n            vertex=1 \n        ) \n    ], \n    operation_name=\"2-hop\" \n)\n```\n\n----------------------------------------\n\nTITLE: Exporting Elements to a Preconfigured Graph in Python\nDESCRIPTION: Python implementation of an operation chain that retrieves all edges with group 'edge' and exports them to a preconfigured Gaffer graph with ID 'graph2'. The graph must already exist in the GraphLibrary.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/export.md#2025-04-23_snippet_32\n\nLANGUAGE: python\nCODE:\n```\ng.OperationChain( \n    operations=[ \n        g.GetAllElements( \n        view=g.View( \n            edges=[ \n                g.ElementDefinition( \n                    group=\"edge\" \n                ) \n            ], \n            all_edges=False, \n            all_entities=False \n            ) \n        ), \n        g.ExportToOtherAuthorisedGraph( \n        graph_id=\"graph2\" \n        ) \n    ] \n)\n```\n\n----------------------------------------\n\nTITLE: JSON Results from Join Operation Execution\nDESCRIPTION: JSON output showing the detailed results of the Join operation execution. Each result object contains 'values' with LEFT and RIGHT sides of the join, displaying the full entity and edge data with their properties.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/join.md#2025-04-23_snippet_42\n\nLANGUAGE: json\nCODE:\n```\n[\n    {\n        \"values\": {\n        \"LEFT\": [],\n        \"RIGHT\": {\n            \"class\": \"uk.gov.gchq.gaffer.data.element.Entity\",\n            \"group\": \"entity\",\n            \"vertex\": 1,\n            \"properties\": {\n            \"count\": 3\n            }\n        }\n        }\n    },\n    {\n        \"values\": {\n        \"LEFT\": [],\n        \"RIGHT\": {\n            \"class\": \"uk.gov.gchq.gaffer.data.element.Edge\",\n            \"group\": \"edge\",\n            \"source\": 1,\n            \"destination\": 2,\n            \"directed\": true,\n            \"properties\": {\n            \"count\": 3\n            }\n        }\n        }\n    },\n    {\n        \"values\": {\n        \"LEFT\": [],\n        \"RIGHT\": {\n            \"class\": \"uk.gov.gchq.gaffer.data.element.Edge\",\n            \"group\": \"edge\",\n            \"source\": \"1\",\n            \"destination\": 4,\n            \"directed\": true,\n            \"properties\": {\n            \"count\": 1\n            }\n        }\n        }\n    },\n    {\n        \"values\": {\n        \"LEFT\": [],\n        \"RIGHT\": {\n            \"class\": \"uk.gov.gchq.gaffer.data.element.Entity\",\n            \"group\": \"entity\",\n            \"vertex\": 2,\n            \"properties\": {\n            \"count\": 1\n            }\n        }\n        }\n    },\n    {\n        \"values\": {\n        \"LEFT\": [\n            {\n            \"class\": \"uk.gov.gchq.gaffer.data.element.Entity\",\n            \"group\": \"entity\",\n            \"vertex\": 1,\n            \"properties\": {\n                \"count\": 3\n            }\n            },\n            {\n            \"class\": \"uk.gov.gchq.gaffer.data.element.Entity\",\n            \"group\": \"entity\",\n            \"vertex\": 5,\n            \"properties\": {\n                \"count\": 3\n            }\n            }\n        ],\n        \"RIGHT\": {\n            \"class\": \"uk.gov.gchq.gaffer.data.element.Edge\",\n            \"group\": \"edge\",\n            \"source\": 2,\n            \"destination\": 3,\n            \"directed\": true,\n            \"properties\": {\n            \"count\": 2\n            }\n        }\n        }\n    },\n    {\n        \"values\": {\n        \"LEFT\": [],\n        \"RIGHT\": {\n            \"class\": \"uk.gov.gchq.gaffer.data.element.Edge\",\n            \"group\": \"edge\",\n            \"source\": 2,\n            \"destination\": 4,\n            \"directed\": true,\n            \"properties\": {\n            \"count\": 1\n            }\n        }\n        }\n    },\n    {\n        \"values\": {\n        \"LEFT\": [],\n        \"RIGHT\": {\n            \"class\": \"uk.gov.gchq.gaffer.data.element.Edge\",\n            \"group\": \"edge\",\n            \"source\": 2,\n            \"destination\": 5,\n            \"directed\": true,\n            \"properties\": {\n            \"count\": 1\n            }\n        }\n        }\n    },\n    {\n        \"values\": {\n        \"LEFT\": [\n            {\n            \"class\": \"uk.gov.gchq.gaffer.data.element.Entity\",\n            \"group\": \"entity\",\n            \"vertex\": 1,\n            \"properties\": {\n                \"count\": 3\n            }\n            },\n            {\n            \"class\": \"uk.gov.gchq.gaffer.data.element.Entity\",\n            \"group\": \"entity\",\n            \"vertex\": 5,\n            \"properties\": {\n                \"count\": 3\n            }\n            }\n        ],\n        \"RIGHT\": {\n            \"class\": \"uk.gov.gchq.gaffer.data.element.Entity\",\n            \"group\": \"entity\",\n            \"vertex\": 3,\n            \"properties\": {\n            \"count\": 2\n            }\n        }\n        }\n    },\n    {\n        \"values\": {\n        \"LEFT\": [],\n        \"RIGHT\": {\n            \"class\": \"uk.gov.gchq.gaffer.data.element.Edge\",\n            \"group\": \"edge\",\n            \"source\": 3,\n            \"destination\": 4,\n            \"directed\": true,\n            \"properties\": {\n            \"count\": 4\n            }\n        }\n        }\n    },\n    {\n        \"values\": {\n        \"LEFT\": [],\n        \"RIGHT\": {\n            \"class\": \"uk.gov.gchq.gaffer.data.element.Entity\",\n            \"group\": \"entity\",\n            \"vertex\": 4,\n            \"properties\": {\n            \"count\": 1\n            }\n        }\n        }\n    },\n    {\n        \"values\": {\n        \"LEFT\": [],\n        \"RIGHT\": {\n```\n\n----------------------------------------\n\nTITLE: Extracting Elements from Iterables with NthItem in Java\nDESCRIPTION: Creates a function that extracts the item at a specific index from an Iterable. This function takes a selection parameter that determines which index to extract from the input collection.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/koryphe-functions.md#2025-04-23_snippet_113\n\nLANGUAGE: java\nCODE:\n```\nfinal NthItem<Integer> function = new NthItem<>(2);\n```\n\n----------------------------------------\n\nTITLE: Java Results from GetWalks Operation\nDESCRIPTION: The result of executing a GetWalks operation in Gaffer, showing two paths through the graph from vertex 5. Each walk represents a distinct path through the graph data structure.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/get.md#2025-04-23_snippet_53\n\nLANGUAGE: java\nCODE:\n```\nuk.gov.gchq.gaffer.data.graph.Walk[ 5 --> 2 --> 1 ]\nuk.gov.gchq.gaffer.data.graph.Walk[ 5 --> 2 --> 3 ]\n```\n\n----------------------------------------\n\nTITLE: Python Implementation of Right Key Outer Join with ElementMatch in Gaffer\nDESCRIPTION: Python code showing how to create an OperationChain for a right key outer join using ElementMatch. The example defines input entities with different count properties and configures the join operation.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/join.md#2025-04-23_snippet_59\n\nLANGUAGE: python\nCODE:\n```\ng.OperationChain( \noperations=[ \n    g.Join( \n    operation=g.GetAllElements(), \n    match_method=g.ElementMatch(), \n    input=[ \n        g.Entity( \n        group=\"entity\", \n        properties={'count': 3}, \n        vertex=1 \n        ), \n        g.Entity( \n        group=\"entity\", \n        properties={'count': 1}, \n        vertex=4 \n        ), \n        g.Entity( \n        group=\"entity\", \n        properties={'count': 3}, \n        vertex=5 \n        ), \n        g.Entity( \n        group=\"entity\", \n        properties={'count': 30}, \n        vertex=6 \n        ) \n    ], \n    match_key=\"RIGHT\", \n    join_type=\"OUTER\" \n    ) \n] \n)\n```\n\n----------------------------------------\n\nTITLE: Results of Filtering Elements with Count Greater Than 2 in Java\nDESCRIPTION: Results showing the elements that passed the filter condition (count > 2) in Java format. The output includes one Entity with vertex 1 and one Edge from vertex 1 to vertex 2, both with count = 3.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/core.md#2025-04-23_snippet_12\n\nLANGUAGE: java\nCODE:\n```\nEntity[vertex=1,group=entity,properties=Properties[count=<java.lang.Integer>3]]\nEdge[source=1,destination=2,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=<java.lang.Integer>3]]\n```\n\n----------------------------------------\n\nTITLE: Exporting to Gaffer Result Cache and Getting Job Details in JSON\nDESCRIPTION: This JSON operation chain exports all elements to a Gaffer result cache, discards the output, and then retrieves the job details.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/export.md#2025-04-23_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"class\" : \"OperationChain\",\n    \"operations\" : [ {\n        \"class\" : \"GetAllElements\"\n    }, {\n        \"class\" : \"ExportToGafferResultCache\"\n    }, {\n        \"class\" : \"DiscardOutput\"\n    }, {\n        \"class\" : \"GetJobDetails\"\n    } ]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Collection Intersection in Java\nDESCRIPTION: Creates a CollectionIntersect operator that returns items common to two collections. Preserves the original collection type (ArrayList, HashSet, etc.) and handles null values gracefully.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/binary-operators-guide/koryphe-operators.md#2025-04-23_snippet_24\n\nLANGUAGE: java\nCODE:\n```\nfinal CollectionIntersect collectionIntersect = new CollectionIntersect();\n```\n\n----------------------------------------\n\nTITLE: Retrieving Scheduled Job Details in Python\nDESCRIPTION: This snippet illustrates how to create an OperationChain to retrieve details of a scheduled job using the GetJobDetails operation in Python.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/job.md#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ng.OperationChain( \n    operations=[ \n        g.GetJobDetails( \n        job_id=\"35c1bd84-1cd3-4609-8892-710e9d3c2d3f\" \n        ) \n    ] \n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Case-Insensitive StringContains Predicate\nDESCRIPTION: Shows how to configure StringContains predicate with case-insensitive matching enabled.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/predicates-guide/koryphe-predicates.md#2025-04-23_snippet_122\n\nLANGUAGE: java\nCODE:\n```\nfinal StringContains function = new StringContains(\"test\", true);\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"StringContains\",\n  \"value\" : \"test\",\n  \"ignoreCase\" : true\n}\n```\n\nLANGUAGE: python\nCODE:\n```\ng.StringContains(\n  value=\"test\",\n  ignore_case=True\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing MultiplyBy Function\nDESCRIPTION: Function that multiplies an input integer by a specified constant value.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/koryphe-functions.md#2025-04-23_snippet_109\n\nLANGUAGE: java\nCODE:\n```\nfinal MultiplyBy function = new MultiplyBy(2);\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"MultiplyBy\",\n  \"by\" : 2\n}\n```\n\nLANGUAGE: python\nCODE:\n```\ng.MultiplyBy( \n  by=2 \n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Right Key Outer Join with KeyFunctionMatch and FunctionChain in Gaffer\nDESCRIPTION: This code demonstrates creating an OperationChain with a right key outer join using KeyFunctionMatch with FunctionChain. It uses two key functions: one with ExtractProperty and Increment, and another with just ExtractProperty to match elements based on their count properties.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/join.md#2025-04-23_snippet_62\n\nLANGUAGE: java\nCODE:\n```\nfinal OperationChain<Iterable<? extends MapTuple>> opChain = new OperationChain.Builder()\n        .first(new Join.Builder<>()\n                .input(inputElements)\n                .operation(new GetAllElements())\n                .joinType(JoinType.OUTER)\n                .matchKey(MatchKey.RIGHT)\n                .matchMethod(new KeyFunctionMatch.Builder()\n                    .firstKeyFunction(new FunctionChain(new ExtractProperty(\"count\"), new Increment(1)))\n                    .secondKeyFunction(new ExtractProperty(\"count\"))\n                    .build())\n                .build())\n        .build();\n```\n\n----------------------------------------\n\nTITLE: Configuring ToTrailingWildcardPair Function with Default End of Range in JSON\nDESCRIPTION: JSON configuration for the ToTrailingWildcardPair function with the default end of range character. This can be used to instantiate the function in a Gaffer JSON operation chain.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/gaffer-functions.md#2025-04-23_snippet_51\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"ToTrailingWildcardPair\",\n  \"endOfRange\" : \"~\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Edge Schema with BoundedTimestampSet in Gaffer (JSON)\nDESCRIPTION: This JSON snippet defines the schema for an edge with a 'boundedTimestampSet' property that stores a BoundedTimestampSet object. The edge is of type 'red' and connects two string vertices.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/properties-guide/map-set.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"edges\": {\n    \"red\": {\n      \"source\": \"vertex.string\",\n      \"destination\": \"vertex.string\",\n      \"directed\": \"false\",\n      \"properties\": {\n        \"boundedTimestampSet\": \"bounded.timestamp.set\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring ToTrailingWildcardPair Function with Custom End of Range in JSON\nDESCRIPTION: JSON configuration for the ToTrailingWildcardPair function with a custom end of range string. This can be used to instantiate the function in a Gaffer JSON operation chain.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/gaffer-functions.md#2025-04-23_snippet_54\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"ToTrailingWildcardPair\",\n  \"endOfRange\" : \"custom\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using MapGenerator in Python\nDESCRIPTION: Python code to create a MapGenerator function. This function converts an iterable of elements into an Iterable of Maps with specified fields and constants.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/gaffer-functions.md#2025-04-23_snippet_29\n\nLANGUAGE: python\nCODE:\n```\ng.MapGenerator( \n  fields={'GROUP': 'Group Label', 'VERTEX': 'Vertex Label', 'SOURCE': 'Source Label', 'count': 'Count Label'}, \n  constants={'A Constant': 'Some constant value'} \n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Full Join with ElementMatch in Gaffer\nDESCRIPTION: Creates an OperationChain with a Join operation using ElementMatch to match elements by their 'count' property. The join uses a FULL join type with RIGHT match key to combine input elements with the results of GetAllElements.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/join.md#2025-04-23_snippet_44\n\nLANGUAGE: java\nCODE:\n```\nfinal OperationChain<Iterable<? extends MapTuple>> opChain = new OperationChain.Builder()\n        .first(new Join.Builder<>()\n                .input(inputElements)\n                .operation(new GetAllElements())\n                .joinType(JoinType.FULL)\n                .matchKey(MatchKey.RIGHT)\n                .matchMethod(new ElementMatch(\"count\"))\n                .build())\n        .build();\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n\"class\" : \"OperationChain\",\n\"operations\" : [ {\n    \"class\" : \"Join\",\n    \"input\" : [ {\n    \"class\" : \"Entity\",\n    \"group\" : \"entity\",\n    \"vertex\" : 1,\n    \"properties\" : {\n        \"count\" : 3\n    }\n    }, {\n    \"class\" : \"Entity\",\n    \"group\" : \"entity\",\n    \"vertex\" : 4,\n    \"properties\" : {\n        \"count\" : 1\n    }\n    }, {\n    \"class\" : \"Entity\",\n    \"group\" : \"entity\",\n    \"vertex\" : 5,\n    \"properties\" : {\n        \"count\" : 3\n    }\n    }, {\n    \"class\" : \"Entity\",\n    \"group\" : \"entity\",\n    \"vertex\" : 6,\n    \"properties\" : {\n        \"count\" : 30\n    }\n    } ],\n    \"operation\" : {\n    \"class\" : \"GetAllElements\"\n    },\n    \"matchMethod\" : {\n    \"class\" : \"ElementMatch\"\n    },\n    \"matchKey\" : \"RIGHT\",\n    \"joinType\" : \"FULL\"\n} ]\n}\n```\n\nLANGUAGE: python\nCODE:\n```\ng.OperationChain( \noperations=[ \n    g.Join( \n    operation=g.GetAllElements(), \n    match_method=g.ElementMatch(), \n    input=[ \n        g.Entity( \n        group=\"entity\", \n        properties={'count': 3}, \n        vertex=1 \n        ), \n        g.Entity( \n        group=\"entity\", \n        properties={'count': 1}, \n        vertex=4 \n        ), \n        g.Entity( \n        group=\"entity\", \n        properties={'count': 3}, \n        vertex=5 \n        ), \n        g.Entity( \n        group=\"entity\", \n        properties={'count': 30}, \n        vertex=6 \n        ) \n    ], \n    match_key=\"RIGHT\", \n    join_type=\"FULL\" \n    ) \n] \n)\n```\n\nLANGUAGE: java\nCODE:\n```\n[ null --> Edge[source=1,destination=4,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=<java.lang.Integer>1]] ]\n[ Entity[vertex=5,group=entity,properties=Properties[count=<java.lang.Integer>3]] --> Entity[vertex=5,group=entity,properties=Properties[count=<java.lang.Integer>3]] ]\n[ null --> Edge[source=3,destination=4,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=<java.lang.Integer>4]] ]\n[ null --> Entity[vertex=2,group=entity,properties=Properties[count=<java.lang.Integer>1]] ]\n[ Entity[vertex=1,group=entity,properties=Properties[count=<java.lang.Integer>3]] --> Entity[vertex=1,group=entity,properties=Properties[count=<java.lang.Integer>3]] ]\n[ Entity[vertex=4,group=entity,properties=Properties[count=<java.lang.Integer>1]] --> Entity[vertex=4,group=entity,properties=Properties[count=<java.lang.Integer>1]] ]\n[ null --> Edge[source=2,destination=3,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=<java.lang.Integer>2]] ]\n[ null --> Entity[vertex=3,group=entity,properties=Properties[count=<java.lang.Integer>2]] ]\n[ null --> Edge[source=2,destination=4,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=<java.lang.Integer>1]] ]\n[ null --> Edge[source=1,destination=2,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=<java.lang.Integer>3]] ]\n[ null --> Edge[source=2,destination=5,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=<java.lang.Integer>1]] ]\n```\n\nLANGUAGE: json\nCODE:\n```\n[ {\n\"values\" : {\n    \"LEFT\" : null,\n    \"RIGHT\" : {\n    \"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n    \"group\" : \"edge\",\n    \"source\" : 1,\n    \"destination\" : 4,\n    \"directed\" : true,\n    \"matchedVertex\" : \"SOURCE\",\n    \"properties\" : {\n        \"count\" : 1\n    }\n    }\n}\n}, {\n\"values\" : {\n    \"LEFT\" : {\n    \"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n    \"group\" : \"entity\",\n    \"vertex\" : 5,\n    \"properties\" : {\n        \"count\" : 3\n    }\n    },\n    \"RIGHT\" : {\n    \"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n    \"group\" : \"entity\",\n    \"vertex\" : 5,\n    \"properties\" : {\n        \"count\" : 3\n    }\n    }\n}\n}, {\n\"values\" : {\n    \"LEFT\" : null,\n    \"RIGHT\" : {\n    \"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n    \"group\" : \"edge\",\n    \"source\" : 3,\n    \"destination\" : 4,\n    \"directed\" : true,\n    \"matchedVertex\" : \"SOURCE\",\n    \"properties\" : {\n        \"count\" : 4\n    }\n    }\n}\n}, {\n\"values\" : {\n    \"LEFT\" : null,\n    \"RIGHT\" : {\n    \"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n    \"group\" : \"entity\",\n    \"vertex\" : 2,\n    \"properties\" : {\n        \"count\" : 1\n    }\n    }\n}\n}, {\n\"values\" : {\n    \"LEFT\" : {\n    \"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n    \"group\" : \"entity\",\n    \"vertex\" : 1,\n    \"properties\" : {\n        \"count\" : 3\n    }\n    },\n    \"RIGHT\" : {\n    \"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n    \"group\" : \"entity\",\n    \"vertex\" : 1,\n    \"properties\" : {\n        \"count\" : 3\n    }\n    }\n}\n}, {\n\"values\" : {\n    \"LEFT\" : {\n    \"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n    \"group\" : \"entity\",\n    \"vertex\" : 4,\n    \"properties\" : {\n        \"count\" : 1\n    }\n    },\n    \"RIGHT\" : {\n    \"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n    \"group\" : \"entity\",\n    \"vertex\" : 4,\n    \"properties\" : {\n        \"count\" : 1\n    }\n    }\n}\n}, {\n\"values\" : {\n    \"LEFT\" : null,\n    \"RIGHT\" : {\n    \"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n    \"group\" : \"edge\",\n    \"source\" : 2,\n    \"destination\" : 3,\n    \"directed\" : true,\n    \"matchedVertex\" : \"SOURCE\",\n    \"properties\" : {\n        \"count\" : 2\n    }\n    }\n}\n}, {\n\"values\" : {\n    \"LEFT\" : null,\n    \"RIGHT\" : {\n    \"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n    \"group\" : \"entity\",\n    \"vertex\" : 3,\n    \"properties\" : {\n        \"count\" : 2\n    }\n    }\n}\n}, {\n\"values\" : {\n    \"LEFT\" : null,\n    \"RIGHT\" : {\n    \"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n    \"group\" : \"edge\",\n    \"source\" : 2,\n    \"destination\" : 4,\n    \"directed\" : true,\n    \"matchedVertex\" : \"SOURCE\",\n    \"properties\" : {\n        \"count\" : 1\n    }\n    }\n}\n}, {\n\"values\" : {\n    \"LEFT\" : null,\n    \"RIGHT\" : {\n    \"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n    \"group\" : \"edge\",\n    \"source\" : 1,\n    \"destination\" : 2,\n    \"directed\" : true,\n    \"matchedVertex\" : \"SOURCE\",\n    \"properties\" : {\n        \"count\" : 3\n    }\n    }\n}\n}, {\n\"values\" : {\n    \"LEFT\" : null,\n    \"RIGHT\" : {\n    \"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n    \"group\" : \"edge\",\n    \"source\" : 2,\n    \"destination\" : 5,\n    \"directed\" : true,\n    \"matchedVertex\" : \"SOURCE\",\n    \"properties\" : {\n        \"count\" : 1\n    }\n    }\n}\n} ]\n```\n\n----------------------------------------\n\nTITLE: Result of the Operation Chain with ToSingletonList in Java\nDESCRIPTION: Java output showing the result of the complex operation chain. The result is a list of paths through the graph, with each path represented as a sequence of vertex IDs.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/core.md#2025-04-23_snippet_68\n\nLANGUAGE: java\nCODE:\n```\n[ 2 --> 3 --> 1 ]\n[ 3 --> 4 --> 5 --> 1 ]\n```\n\n----------------------------------------\n\nTITLE: CountGroups Operation with Limit\nDESCRIPTION: Implementation of CountGroups operation with a specified limit of 5 within an OperationChain.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/core.md#2025-04-23_snippet_8\n\nLANGUAGE: java\nCODE:\n```\nfinal OperationChain<GroupCounts> opChain = new OperationChain.Builder()\n        .first(new GetAllElements())\n        .then(new CountGroups(5))\n        .build();\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"OperationChain\",\n  \"operations\" : [ {\n    \"class\" : \"GetAllElements\"\n  }, {\n    \"class\" : \"CountGroups\",\n    \"limit\" : 5\n  } ]\n}\n```\n\nLANGUAGE: python\nCODE:\n```\ng.OperationChain(\n  operations=[\n    g.GetAllElements(),\n    g.CountGroups(\n      limit=5\n    )\n  ]\n)\n```\n\n----------------------------------------\n\nTITLE: Limiting Elements Without Truncation in Gaffer\nDESCRIPTION: This example sets truncate to false, which causes the operation to throw a LimitExceededException instead of truncating the results when the number of elements exceeds the limit. This provides a way to enforce limits rather than silently reducing the result set.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/core.md#2025-04-23_snippet_21\n\nLANGUAGE: java\nCODE:\n```\nfinal OperationChain<Iterable<? extends Element>> opChain = new OperationChain.Builder()\n        .first(new GetAllElements())\n        .then(new Limit<>(3, false))\n        .build();\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"OperationChain\",\n  \"operations\" : [ {\n    \"class\" : \"GetAllElements\"\n  }, {\n    \"class\" : \"Limit\",\n    \"resultLimit\" : 3,\n    \"truncate\" : false\n  } ]\n}\n```\n\nLANGUAGE: python\nCODE:\n```\ng.OperationChain(\n  operations=[\n    g.GetAllElements(),\n    g.Limit(\n      result_limit=3,\n      truncate=False\n    )\n  ]\n)\n```\n\n----------------------------------------\n\nTITLE: Extracting Destination Vertices with ToVertices Operation\nDESCRIPTION: Shows how to extract destination vertices from edges using ToVertices operation. Uses GetElements with OUTGOING direction filter and DESTINATION edge vertices option.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/core.md#2025-04-23_snippet_76\n\nLANGUAGE: java\nCODE:\n```\nfinal OperationChain<Set<?>> opChain = new Builder()\n        .first(new GetElements.Builder()\n                .input(new EntitySeed(1), new EntitySeed(2))\n                .inOutType(SeededGraphFilters.IncludeIncomingOutgoingType.OUTGOING)\n                .view(new View.Builder()\n                        .edge(\"edge\")\n                        .build())\n                .build())\n        .then(new ToVertices.Builder()\n                .edgeVertices(ToVertices.EdgeVertices.DESTINATION)\n                .build())\n        .then(new ToSet<>())\n        .build();\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"OperationChain\",\n  \"operations\" : [ {\n    \"class\" : \"GetElements\",\n    \"input\" : [ {\n      \"class\" : \"EntitySeed\",\n      \"vertex\" : 1\n    }, {\n      \"class\" : \"EntitySeed\",\n      \"vertex\" : 2\n    } ],\n    \"view\" : {\n      \"edges\" : {\n        \"edge\" : { }\n      }\n    },\n    \"includeIncomingOutGoing\" : \"OUTGOING\"\n  }, {\n    \"class\" : \"ToVertices\",\n    \"edgeVertices\" : \"DESTINATION\"\n  }, {\n    \"class\" : \"uk.gov.gchq.gaffer.operation.impl.output.ToSet\"\n  } ]\n}\n```\n\nLANGUAGE: python\nCODE:\n```\ng.OperationChain(\n  operations=[\n    g.GetElements(\n      view=g.View(\n        edges=[\n          g.ElementDefinition(\n            group=\"edge\"\n          )\n        ],\n        all_edges=False,\n        all_entities=False\n      ),\n      input=[\n        g.EntitySeed(\n          vertex=1\n        ),\n        g.EntitySeed(\n          vertex=2\n        )\n      ],\n      include_incoming_out_going=\"OUTGOING\"\n    ),\n    g.ToVertices(\n      edge_vertices=\"DESTINATION\"\n    ),\n    g.ToSet()\n  ]\n)\n```\n\n----------------------------------------\n\nTITLE: Creating IsIn Predicate in Python\nDESCRIPTION: Python implementation of the IsIn predicate using the Gaffer Python client. Configures the predicate to check if the input is one of the values: 5, 5L, \"5\", or '5'.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/predicates-guide/koryphe-predicates.md#2025-04-23_snippet_72\n\nLANGUAGE: python\nCODE:\n```\ng.IsIn(\n  values=[\n    5,\n    g.long(5),\n    \"5\",\n    {'java.lang.Character': '5'}\n  ]\n)\n```\n\n----------------------------------------\n\nTITLE: Converting Date Strings to Timestamps with Format and TimeZone in Python\nDESCRIPTION: Python implementation of a function that parses date strings with format, timezone, and time unit specification. This function uses a date-only format and GMT timezone.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/koryphe-functions.md#2025-04-23_snippet_130\n\nLANGUAGE: python\nCODE:\n```\ng.ParseTime( \n  time_zone=\"GMT\", \n  format=\"yyyy-MM-dd\", \n  time_unit=\"SECOND\" \n)\n```\n\n----------------------------------------\n\nTITLE: Appending a Suffix to Strings in Java\nDESCRIPTION: Creates a function that appends a specified suffix to an input string. This function takes a String input and returns a new String with the suffix attached.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/koryphe-functions.md#2025-04-23_snippet_137\n\nLANGUAGE: java\nCODE:\n```\nfinal StringAppend function = new StringAppend(\"mySuffix\");\n```\n\n----------------------------------------\n\nTITLE: Implementing And Predicate with Simple Comparison\nDESCRIPTION: And predicate that checks if a value is both less than 3 and more than 0. Combines multiple predicates into a single logical AND operation.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/predicates-guide/koryphe-predicates.md#2025-04-23_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nfinal And function = new And<>(\n        new IsLessThan(3),\n        new IsMoreThan(0)\n);\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"uk.gov.gchq.koryphe.impl.predicate.And\",\n  \"predicates\" : [ {\n    \"class\" : \"IsLessThan\",\n    \"orEqualTo\" : false,\n    \"value\" : 3\n  }, {\n    \"class\" : \"IsMoreThan\",\n    \"orEqualTo\" : false,\n    \"value\" : 0\n  } ]\n}\n```\n\nLANGUAGE: python\nCODE:\n```\ng.And(\n  predicates=[\n    g.IsLessThan(\n      value=3,\n      or_equal_to=False\n    ),\n    g.IsMoreThan(\n      value=0,\n      or_equal_to=False\n    )\n  ]\n)\n```\n\n----------------------------------------\n\nTITLE: Exporting Elements to a New Graph with Existing Schema and Properties in JSON\nDESCRIPTION: JSON representation of an operation chain that retrieves all edges with group 'edge' and exports them to a new Gaffer graph with ID 'newGraphId', using existing schema and store properties from the GraphLibrary.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/export.md#2025-04-23_snippet_34\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"class\" : \"OperationChain\",\n    \"operations\" : [ {\n        \"class\" : \"GetAllElements\",\n        \"view\" : {\n        \"edges\" : {\n            \"edge\" : { }\n        }\n        }\n    }, {\n        \"class\" : \"ExportToOtherAuthorisedGraph\",\n        \"graphId\" : \"newGraphId\",\n        \"parentSchemaIds\" : [ \"schemaId1\" ],\n        \"parentStorePropertiesId\" : \"storePropsId1\"\n    } ]\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Graph to Federated Store - JSON Configuration\nDESCRIPTION: JSON configuration for adding a new graph to a federated store, specifying the graph ID, schema structure, and store properties including Accumulo store configurations.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/administration-guide/gaffer-stores/simple-federated/configuration.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"class\": \"uk.gov.gchq.gaffer.federated.simple.operation.AddGraph\",\n    \"graphConfig\": {\n        \"graphId\": \"myGraph\"\n    },\n    \"schema\": {\n        \"entities\": {},\n        \"edges\": {},\n        \"types\": {}\n    },\n    \"properties\": {\n        \"gaffer.store.class\": \"uk.gov.gchq.gaffer.accumulostore.AccumuloStore\",\n        \"gaffer.store.properties.class\": \"uk.gov.gchq.gaffer.accumulostore.AccumuloProperties\",\n        \"gaffer.cache.service.class\": \"uk.gov.gchq.gaffer.cache.impl.HashMapCacheService\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing PredicateMap for FreqMap Comparison with Equality in Java\nDESCRIPTION: Creates a PredicateMap that extracts the 'key1' value from a map and checks if it's greater than or equal to 2. The orEqualTo parameter enables inclusive comparison.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/predicates-guide/koryphe-predicates.md#2025-04-23_snippet_115\n\nLANGUAGE: java\nCODE:\n```\nfinal PredicateMap function = new PredicateMap(\"key1\", new IsMoreThan(2L, true));\n```\n\n----------------------------------------\n\nTITLE: Displaying ForEach Operation Results in Java\nDESCRIPTION: This Java code snippet shows the results of a ForEach operation in Gaffer, displaying lists of connected vertices.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/flow.md#2025-04-23_snippet_29\n\nLANGUAGE: java\nCODE:\n```\n[ 2 --> 3 --> 1 ]\n[ 3 --> 4 --> 5 --> 1 ]\n```\n\n----------------------------------------\n\nTITLE: Implementing IsXMoreThanY Predicate in Python\nDESCRIPTION: Python implementation of an IsXMoreThanY predicate that checks if the first comparable is greater than the second comparable. This predicate requires no additional parameters.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/predicates-guide/koryphe-predicates.md#2025-04-23_snippet_105\n\nLANGUAGE: python\nCODE:\n```\ng.IsXMoreThanY()\n```\n\n----------------------------------------\n\nTITLE: Filtering Edges in Gaffer Query (Java)\nDESCRIPTION: This Java snippet demonstrates how to create a GetAllElements operation that filters to return only edges using the 'allEdges' flag in the View.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/user-guide/query/gaffer-syntax/filtering.md#2025-04-23_snippet_9\n\nLANGUAGE: java\nCODE:\n```\nfinal GetAllElements operation = new GetAllElements()\n        .view(new View.Builder()\n            .allEdges(true)\n            .build())\n        .build();\n```\n\n----------------------------------------\n\nTITLE: Querying Elements with Mixed Seed Types in Gaffer\nDESCRIPTION: This JSON query demonstrates how to retrieve elements using a mix of EdgeSeed and EntitySeed in Gaffer. It includes an EdgeSeed for the edge 1->2 and an EntitySeed for vertex 4.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/administration-guide/gaffer-stores/accumulo-store.md#2025-04-23_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\": \"GetElements\",\n  \"input\": [\n    {\n      \"class\": \"EdgeSeed\",\n      \"source\": \"1\",\n      \"destination\": \"2\"\n    },\n    {\n      \"class\": \"EntitySeed\",\n      \"vertex\": \"4\"\n    },\n  ],\n  \"view\": {\n    \"allEdges\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Scheduled Job Details in JSON\nDESCRIPTION: This snippet shows the JSON representation of an OperationChain to retrieve details of a scheduled job using the GetJobDetails operation.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/job.md#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"class\" : \"OperationChain\",\n    \"operations\" : [ {\n        \"class\" : \"GetJobDetails\",\n        \"jobId\" : \"35c1bd84-1cd3-4609-8892-710e9d3c2d3f\"\n    } ]\n}\n```\n\n----------------------------------------\n\nTITLE: Using FirstItem in Python\nDESCRIPTION: Python implementation of the FirstItem function that returns the first element from a collection.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/koryphe-functions.md#2025-04-23_snippet_48\n\nLANGUAGE: python\nCODE:\n```\ng.FirstItem()\n```\n\n----------------------------------------\n\nTITLE: Implementing IterableFunction with Multiple Chained Functions in Python\nDESCRIPTION: Python implementation of an IterableFunction that chains multiple functions (MultiplyBy(2) then MultiplyBy(4)) to apply to each element in an iterable.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/koryphe-functions.md#2025-04-23_snippet_99\n\nLANGUAGE: python\nCODE:\n```\ng.IterableFunction( \n  functions=[ \n    g.MultiplyBy( \n      by=2 \n    ), \n    g.MultiplyBy( \n      by=4 \n    ) \n  ] \n)\n```\n\n----------------------------------------\n\nTITLE: Exporting to Gaffer Result Cache and Retrieving Results in Java\nDESCRIPTION: This Java operation chain exports all graph elements to a Gaffer result cache, discards the output, and then retrieves the exported elements from the cache.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/export.md#2025-04-23_snippet_7\n\nLANGUAGE: java\nCODE:\n```\nfinal OperationChain<Iterable<?>> opChain = new OperationChain.Builder()\n        .first(new GetAllElements())\n        .then(new ExportToGafferResultCache<>())\n        .then(new DiscardOutput())\n        .then(new GetGafferResultCacheExport())\n        .build();\n```\n\n----------------------------------------\n\nTITLE: Creating InRange Function with Unbounded Start in Python\nDESCRIPTION: Python code to create an InRange function for Long values less than 10 (exclusive). Used in Gaffer's Python client for range checks with an unbounded start.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/predicates-guide/koryphe-predicates.md#2025-04-23_snippet_56\n\nLANGUAGE: python\nCODE:\n```\ng.InRange(\n  end=g.long(10),\n  end_inclusive=False\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Elements Schema for HllSketch Cardinality Estimation in Gaffer\nDESCRIPTION: JSON schema definition for an entity type 'cardinality' with a HllSketch property 'approxCardinality' to store vertex degree estimates.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/properties-guide/advanced.md#2025-04-23_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"entities\": {\n    \"cardinality\": {\n      \"vertex\": \"vertex.string\",\n      \"properties\": {\n        \"approxCardinality\": \"hllSketch\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Results of Using While within GetWalks in Java\nDESCRIPTION: The output from running the GetWalks operation with a While operation in Java. Results show the walks through the graph following three hops from the starting vertex, displaying the paths taken through connected vertices.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/flow.md#2025-04-23_snippet_18\n\nLANGUAGE: java\nCODE:\n```\nuk.gov.gchq.gaffer.data.graph.Walk[ 1 --> 5 --> 6 --> 3 ]\nuk.gov.gchq.gaffer.data.graph.Walk[ 1 --> 5 --> 6 --> 7 ]\nuk.gov.gchq.gaffer.data.graph.Walk[ 1 --> 2 --> 5 --> 6 ]\n```\n\n----------------------------------------\n\nTITLE: Configuring Full Left Join with ElementMatch in JSON\nDESCRIPTION: This JSON configuration demonstrates how to set up a full left join using ElementMatch in Gaffer. It specifies the input entities, join type, match key, and match method.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/join.md#2025-04-23_snippet_29\n\nLANGUAGE: json\nCODE:\n```\n{\n\"class\" : \"OperationChain\",\n\"operations\" : [ {\n    \"class\" : \"Join\",\n    \"input\" : [ {\n    \"class\" : \"Entity\",\n    \"group\" : \"entity\",\n    \"vertex\" : 1,\n    \"properties\" : {\n        \"count\" : 3\n    }\n    }, {\n    \"class\" : \"Entity\",\n    \"group\" : \"entity\",\n    \"vertex\" : 4,\n    \"properties\" : {\n        \"count\" : 1\n    }\n    }, {\n    \"class\" : \"Entity\",\n    \"group\" : \"entity\",\n    \"vertex\" : 5,\n    \"properties\" : {\n        \"count\" : 3\n    }\n    }, {\n    \"class\" : \"Entity\",\n    \"group\" : \"entity\",\n    \"vertex\" : 6,\n    \"properties\" : {\n        \"count\" : 30\n    }\n    } ],\n    \"operation\" : {\n    \"class\" : \"GetAllElements\"\n    },\n    \"matchMethod\" : {\n    \"class\" : \"ElementMatch\"\n    },\n    \"matchKey\" : \"LEFT\",\n    \"joinType\" : \"FULL\"\n} ]\n}\n```\n\n----------------------------------------\n\nTITLE: Masking Timestamps without Start or End Date\nDESCRIPTION: Creates a timestamp mask without any time constraints. This will not filter any timestamps and return the original set.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/gaffer-functions.md#2025-04-23_snippet_33\n\nLANGUAGE: java\nCODE:\n```\nMaskTimestampSetByTimeRange function = new MaskTimestampSetByTimeRange();\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"MaskTimestampSetByTimeRange\",\n  \"timeUnit\" : \"MILLISECOND\"\n}\n```\n\nLANGUAGE: python\nCODE:\n```\ng.MaskTimestampSetByTimeRange( \n  time_unit=\"MILLISECOND\" \n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Full Left Join with KeyFunctionMatch in JSON\nDESCRIPTION: This JSON configuration sets up a full left join using KeyFunctionMatch in Gaffer. It defines a FunctionChain for the first key function and a simple ExtractProperty for the second key function.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/join.md#2025-04-23_snippet_32\n\nLANGUAGE: json\nCODE:\n```\n{\n\"class\" : \"OperationChain\",\n\"operations\" : [ {\n    \"class\" : \"Join\",\n    \"input\" : [{\n    \"class\" : \"Entity\",\n    \"group\" : \"entity\",\n    \"vertex\" : 1,\n    \"properties\" : {\n        \"count\" : 3\n    }\n    }, {\n    \"class\" : \"Entity\",\n    \"group\" : \"entity\",\n    \"vertex\" : 4,\n    \"properties\" : {\n        \"count\" : 1\n    }\n    }, {\n    \"class\" : \"Entity\",\n    \"group\" : \"entity\",\n    \"vertex\" : 5,\n    \"properties\" : {\n        \"count\" : 3\n    }\n    }, {\n    \"class\" : \"Entity\",\n    \"group\" : \"entity\",\n    \"vertex\" : 6,\n    \"properties\" : {\n        \"count\" : 30\n    }\n    }\n    ],\n    \"operation\" : {\n    \"class\" : \"GetAllElements\"\n    },\n    \"matchMethod\" : {\n    \"class\" : \"KeyFunctionMatch\",\n    \"firstKeyFunction\": {\n    \"class\" : \"FunctionChain\",\n    \"functions\" : [ {\n        \"class\" : \"ExtractProperty\",\n        \"name\": \"count\"\n    }, {\n    \"class\" : \"Increment\",\n    \"increment\" : 1\n    }\n    ]\n    },\n    \"secondKeyFunction\": {\n        \"class\": \"ExtractProperty\",\n        \"name\": \"count\"  \n        }\n    },\n    \"matchKey\": \"LEFT\",\n    \"joinType\" : \"FULL\"\n} ]\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Elements from Gaffer Result Cache Using Job ID in Python\nDESCRIPTION: This Python operation chain retrieves elements from the Gaffer result cache using a specific job ID and the 'ALL' key.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/export.md#2025-04-23_snippet_19\n\nLANGUAGE: python\nCODE:\n```\ng.OperationChain( \n    operations=[ \n        g.GetGafferResultCacheExport( \n            job_id=\"af0a2efe-5f3c-458d-8fa2-93d0f28cbd82\", \n            key=\"ALL\" \n        ) \n    ] \n)\n```\n\n----------------------------------------\n\nTITLE: Retrieving and Processing ThetaSketch Estimates in Gaffer\nDESCRIPTION: Demonstrates how to retrieve and process ThetaSketch estimates from entities, including calculating intersection sizes between different time periods.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/properties-guide/advanced.md#2025-04-23_snippet_23\n\nLANGUAGE: java\nCODE:\n```\nfinal GetAllElements getAllEntities2 = new GetAllElements.Builder()\n        .view(new View.Builder()\n                .entity(\"size\")\n                .build())\n        .build();\nfinal Iterable<? extends Element> allEntities2 = graph.execute(getAllEntities2, user);\nfinal Iterable<? extends Element> it = allEntities2.iterator();\nfinal Element entityDay1 = it.next();\nfinal Sketch sketchDay1 = ((Sketch) entityDay1.getProperty(\"size\"));\nfinal Element entityDay2 = it.next();\nfinal Sketch sketchDay2 = ((Sketch) entityDay2.getProperty(\"size\"));\nfinal double estimateDay1 = sketchDay1.getEstimate();\nfinal double estimateDay2 = sketchDay2.getEstimate();\n```\n\n----------------------------------------\n\nTITLE: Defining IsTrue Predicate in JSON\nDESCRIPTION: JSON representation of the IsTrue predicate that checks if an input boolean is true. Can be used in Gaffer schema or operation definitions.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/predicates-guide/koryphe-predicates.md#2025-04-23_snippet_68\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"IsTrue\"\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Result Format from Gaffer Result Cache Export\nDESCRIPTION: The JSON result format when retrieving elements from the Gaffer result cache. Shows the Edge and Entity objects with their properties in JSON structure.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/export.md#2025-04-23_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n[ {\n    \"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n    \"group\" : \"edge\",\n    \"source\" : 1,\n    \"destination\" : 4,\n    \"directed\" : true,\n    \"matchedVertex\" : \"SOURCE\",\n    \"properties\" : {\n        \"count\" : 1\n    }\n}, {\n    \"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n    \"group\" : \"entity\",\n    \"vertex\" : 4,\n    \"properties\" : {\n        \"count\" : 1\n    }\n}, {\n    \"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n    \"group\" : \"edge\",\n    \"source\" : 1,\n    \"destination\" : 2,\n    \"directed\" : true,\n    \"matchedVertex\" : \"SOURCE\",\n    \"properties\" : {\n        \"count\" : 3\n    }\n}, {\n    \"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n    \"group\" : \"entity\",\n    \"vertex\" : 1,\n    \"properties\" : {\n        \"count\" : 3\n    }\n}, {\n    \"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n    \"group\" : \"edge\",\n    \"source\" : 2,\n    \"destination\" : 5,\n    \"directed\" : true,\n    \"matchedVertex\" : \"SOURCE\",\n    \"properties\" : {\n        \"count\" : 1\n    }\n}, {\n    \"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n    \"group\" : \"edge\",\n    \"source\" : 3,\n    \"destination\" : 4,\n    \"directed\" : true,\n    \"matchedVertex\" : \"SOURCE\",\n    \"properties\" : {\n        \"count\" : 4\n    }\n}, {\n    \"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n    \"group\" : \"edge\",\n    \"source\" : 2,\n    \"destination\" : 3,\n    \"directed\" : true,\n    \"matchedVertex\" : \"SOURCE\",\n    \"properties\" : {\n        \"count\" : 2\n    }\n}, {\n    \"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n    \"group\" : \"entity\",\n    \"vertex\" : 2,\n    \"properties\" : {\n        \"count\" : 1\n    }\n}, {\n    \"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n    \"group\" : \"entity\",\n    \"vertex\" : 3,\n    \"properties\" : {\n        \"count\" : 2\n    }\n}, {\n    \"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n    \"group\" : \"edge\",\n    \"source\" : 2,\n    \"destination\" : 4,\n    \"directed\" : true,\n    \"matchedVertex\" : \"SOURCE\",\n    \"properties\" : {\n        \"count\" : 1\n    }\n}, {\n    \"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n    \"group\" : \"entity\",\n    \"vertex\" : 5,\n    \"properties\" : {\n        \"count\" : 3\n    }\n} ]\n```\n\n----------------------------------------\n\nTITLE: Querying Elements Between Sets in Gaffer (JSON)\nDESCRIPTION: JSON representation of the GetElementsBetweenSets operation to retrieve edges between two sets of vertices and entities in the first set. This example queries elements between vertex 1 and vertices 2 and 4.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/accumulo.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"GetElementsBetweenSets\",\n  \"input\" : [ {\n    \"class\" : \"EntitySeed\",\n    \"vertex\" : 1\n  } ],\n  \"inputB\" : [ {\n    \"class\" : \"EntitySeed\",\n    \"vertex\" : 2\n  }, {\n    \"class\" : \"EntitySeed\",\n    \"vertex\" : 4\n  } ]\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Named Operation with Parameters in JSON\nDESCRIPTION: Shows the JSON representation of executing a named operation in Gaffer. It includes the operation name, input EntitySeed, and parameters for enabling filtering.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/flow.md#2025-04-23_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"NamedOperation\",\n  \"input\" : [ {\n    \"class\" : \"EntitySeed\",\n    \"class\" : \"EntitySeed\",\n    \"vertex\" : 6\n  } ],\n  \"operationName\" : \"2-hop-with-optional-filtering\",\n  \"parameters\" : {\n    \"enableFiltering\" : true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Graph Export\nDESCRIPTION: Example demonstrating how to export edges to a new Gaffer graph with custom schema and store properties. The schema must maintain compatibility with the exported edge groups.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/export.md#2025-04-23_snippet_38\n\nLANGUAGE: java\nCODE:\n```\nfinal Schema schema = Schema.fromJson(StreamUtil.openStreams(getClass(), \"operations/schema\"));\nfinal StoreProperties storeProperties = new AccumuloProperties();\nfinal OperationChain<Iterable<? extends Element>> opChain =\n        new OperationChain.Builder()\n                .first(new GetAllElements.Builder()\n                        .view(new View.Builder()\n                                .edge(\"edge\")\n                                .build())\n                        .build())\n                .then(new ExportToOtherGraph.Builder()\n                        .graphId(\"newGraphId\")\n                        .schema(schema)\n                        .storeProperties(storeProperties)\n                        .build())\n                .build();\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"class\" : \"OperationChain\",\n    \"operations\" : [ {\n        \"class\" : \"GetAllElements\",\n        \"view\" : {\n        \"edges\" : {\n            \"edge\" : { }\n        }\n        }\n    }, {\n        \"class\" : \"ExportToOtherGraph\",\n        \"graphId\" : \"newGraphId\",\n        \"schema\" : {\n        \"edges\" : {\n            \"edge\" : {\n            \"description\" : \"test edge\",\n            \"source\" : \"int\",\n            \"destination\" : \"int\",\n            \"directed\" : \"true\",\n            \"properties\" : {\n                \"count\" : \"count\"\n            }\n            },\n            \"edge1\" : {\n            \"source\" : \"int\",\n            \"destination\" : \"int\",\n            \"directed\" : \"true\",\n            \"properties\" : {\n                \"count\" : \"count\"\n            }\n            }\n        },\n        \"entities\" : {\n            \"entity1\" : {\n            \"vertex\" : \"int\",\n            \"properties\" : {\n                \"count\" : \"count\"\n            }\n            },\n            \"entity\" : {\n            \"description\" : \"test entity\",\n            \"vertex\" : \"int\",\n            \"properties\" : {\n                \"count\" : \"count\"\n            }\n            },\n            \"cardinality\" : {\n            \"description\" : \"An entity that is added to every vertex representing the connectivity of the vertex.\",\n            \"vertex\" : \"int\",\n            \"properties\" : {\n                \"edgeGroup\" : \"set\",\n                \"hllp\" : \"hllp\",\n                \"count\" : \"count\"\n            },\n            \"groupBy\" : [ \"edgeGroup\" ]\n            }\n        },\n        \"types\" : {\n            \"int\" : {\n            \"class\" : \"Integer\",\n            \"aggregateFunction\" : {\n                \"class\" : \"Sum\"\n            }\n            },\n            \"true\" : {\n            \"class\" : \"Boolean\",\n            \"validateFunctions\" : [ {\n                \"class\" : \"IsTrue\"\n            } ]\n            },\n            \"count\" : {\n            \"class\" : \"Integer\",\n            \"aggregateFunction\" : {\n                \"class\" : \"Sum\"\n            }\n            },\n            \"set\" : {\n            \"class\" : \"TreeSet\",\n            \"aggregateFunction\" : {\n                \"class\" : \"CollectionConcat\"\n            }\n            },\n            \"hllp\" : {\n            \"class\" : \"com.clearspring.analytics.stream.cardinality.HyperLogLogPlus\",\n            \"aggregateFunction\" : {\n                \"class\" : \"HyperLogLogPlusAggregator\"\n            },\n            \"serialiser\" : {\n                \"class\" : \"HyperLogLogPlusSerialiser\"\n            }\n            }\n        }\n        },\n        \"storeProperties\" : {\n        \"gaffer.store.class\" : \"uk.gov.gchq.gaffer.accumulostore.AccumuloStore\",\n        \"gaffer.store.properties.class\" : \"uk.gov.gchq.gaffer.accumulostore.AccumuloProperties\"\n        }\n    } ]\n}\n```\n\nLANGUAGE: python\nCODE:\n```\ng.OperationChain( \n    operations=[ \n        g.GetAllElements( \n        view=g.View( \n            edges=[ \n                g.ElementDefinition( \n                    group=\"edge\" \n                ) \n                ], \n                all_edges=False, \n                all_entities=False \n            ) \n        ), \n        g.ExportToOtherGraph( \n        graph_id=\"newGraphId\", \n        schema={'edges': {'edge': {'description': 'test edge', 'source': 'int', 'destination': 'int', 'directed': 'true', 'properties': {'count': 'count'}}, 'edge1': {'source': 'int', 'destination': 'int', 'directed': 'true', 'properties': {'count': 'count'}}}, 'entities': {'entity1': {'vertex': 'int', 'properties': {'count': 'count'}}, 'entity': {'description': 'test entity', 'vertex': 'int', 'properties': {'count': 'count'}}, 'cardinality': {'description': 'An entity that is added to every vertex representing the connectivity of the vertex.', 'vertex': 'int', 'properties': {'edgeGroup': 'set', 'hllp': 'hllp', 'count': 'count'}, 'groupBy': ['edgeGroup']}}, 'types': {'int': {'class': 'java.lang.Integer', 'aggregateFunction': {\"class\": \"uk.gov.gchq.koryphe.impl.binaryoperator.Sum\"}}, 'true': {'class': 'java.lang.Boolean', 'validateFunctions': [{\"class\": \"uk.gov.gchq.koryphe.impl.predicate.IsTrue\"}]}, 'count': {'class': 'java.lang.Integer', 'aggregateFunction': {\"class\": \"uk.gov.gchq.koryphe.impl.binaryoperator.Sum\"}}, 'set': {'class': 'java.util.TreeSet', 'aggregateFunction': {\"class\": \"uk.gov.gchq.koryphe.impl.binaryoperator.CollectionConcat\"}}, 'hllp': {'class': 'com.clearspring.analytics.stream.cardinality.HyperLogLogPlus', 'aggregateFunction': {'class': 'uk.gov.gchq.gaffer.sketches.clearspring.cardinality.binaryoperator.HyperLogLogPlusAggregator'}, 'serialiser': {'class': 'uk.gov.gchq.gaffer.sketches.clearspring.cardinality.serialisation.HyperLogLogPlusSerialiser'}}}}, \n        store_properties={'gaffer.store.class': 'uk.gov.gchq.gaffer.accumulostore.AccumuloStore', 'gaffer.store.properties.class': 'uk.gov.gchq.gaffer.accumulostore.AccumuloProperties'} \n        ) \n    ] \n)\n```\n\n----------------------------------------\n\nTITLE: Exporting Multiple Results to Cache with Java Operation Chain\nDESCRIPTION: Java implementation of an OperationChain that exports graph elements to the Gaffer result cache with separate keys for edges and entities, and then retrieves them. The chain demonstrates fetching all elements, exporting them to cache, and retrieving multiple exports at once.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/export.md#2025-04-23_snippet_22\n\nLANGUAGE: java\nCODE:\n```\nfinal OperationChain<Map<String, Iterable<?>>> opChain = new OperationChain.Builder()\n        .first(new GetAllElements())\n        .then(new ExportToGafferResultCache.Builder<>()\n                .key(\"edges\")\n                .build())\n        .then(new DiscardOutput())\n        .then(new GetAllElements())\n        .then(new ExportToGafferResultCache.Builder<>()\n                .key(\"entities\")\n                .build())\n        .then(new DiscardOutput())\n        .then(new GetExports.Builder()\n                .exports(new GetGafferResultCacheExport.Builder()\n                                .key(\"edges\")\n                                .build(),\n                        new GetGafferResultCacheExport.Builder()\n                                .key(\"entities\")\n                                .build())\n                .build())\n        .build();\n```\n\n----------------------------------------\n\nTITLE: Converting Date Strings to Timestamps in Java\nDESCRIPTION: Creates a function that parses date strings into timestamp values (milliseconds since epoch). This default configuration uses the system default format and timezone.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/koryphe-functions.md#2025-04-23_snippet_122\n\nLANGUAGE: java\nCODE:\n```\nfinal ParseTime parseTime = new ParseTime();\n```\n\n----------------------------------------\n\nTITLE: Displaying Graph Elements in Java\nDESCRIPTION: This Java code snippet shows the string representation of graph elements (entities and edges) created using Gaffer. It includes details such as vertices, edge directions, and count properties.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/join.md#2025-04-23_snippet_66\n\nLANGUAGE: java\nCODE:\n```\n[ null --> [Entity[vertex=1,group=entity,properties=Properties[count=<java.lang.Integer>3]]] ]\n[ null --> [Edge[group=edge,source=1,destination=2,directed=true,properties=Properties[count=<java.lang.Integer>3]]] ]\n[ null --> [Edge[group=edge,source=1,destination=4,directed=true,properties=Properties[count=<java.lang.Integer>1]]] ]\n[ null --> [Entity[vertex=2,group=entity,properties=Properties[count=<java.lang.Integer>1]]] ]\n[ null --> [Edge[group=edge,source=2,destination=4,directed=true,properties=Properties[count=<java.lang.Integer>1]]] ]\n[ null --> [Edge[group=edge,source=2,destination=5,directed=true,properties=Properties[count=<java.lang.Integer>1]]] ]\n[ null --> [Edge[group=edge,source=3,destination=4,directed=true,properties=Properties[count=<java.lang.Integer>4]]] ]\n[ null --> [Entity[vertex=4,group=entity,properties=Properties[count=<java.lang.Integer>1]]] ]\n[ null --> [Entity[vertex=5,group=entity,properties=Properties[count=<java.lang.Integer>3]]] ]\n```\n\n----------------------------------------\n\nTITLE: Viewing Result Cache Export Output in JSON\nDESCRIPTION: JSON output showing the partial results of retrieving elements from the Gaffer result cache. The output displays a portion of the edges and entities that were previously exported to the cache with their respective properties.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/export.md#2025-04-23_snippet_26\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"uk.gov.gchq.gaffer.operation.impl.export.resultcache.GetGafferResultCacheExport: edges\" : [ {\n        \"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n        \"group\" : \"entity\",\n        \"vertex\" : 3,\n        \"properties\" : {\n            \"count\" : 2\n        }\n    }, {\n        \"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n        \"group\" : \"edge\",\n        \"source\" : 2,\n        \"destination\" : 4,\n        \"directed\" : true,\n        \"matchedVertex\" : \"SOURCE\",\n        \"properties\" : {\n            \"count\" : 1\n        }\n    }, {\n        \"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n        \"group\" : \"edge\",\n        \"source\" : 2,\n        \"destination\" : 3,\n        \"directed\" : true,\n        \"matchedVertex\" : \"SOURCE\",\n        \"properties\" : {\n            \"count\" : 2\n        }\n    }, {\n        \"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n        \"group\" : \"edge\",\n        \"source\" : 1,\n        \"destination\" : 2,\n        \"directed\" : true,\n        \"matchedVertex\" : \"SOURCE\",\n        \"properties\" : {\n            \"count\" : 3\n        }\n    }, {\n```\n\n----------------------------------------\n\nTITLE: Reversing String Characters in Python\nDESCRIPTION: Python implementation of a function that reverses the characters in a given string. This function takes a String input and returns the reversed String.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/koryphe-functions.md#2025-04-23_snippet_133\n\nLANGUAGE: python\nCODE:\n```\ng.ReverseString()\n```\n\n----------------------------------------\n\nTITLE: Generating Domain Objects from Elements using GenerateObjects in Python\nDESCRIPTION: This Python snippet shows how to use the GenerateObjects operation with custom domain objects in Gaffer's Python client. It specifies the DomainObjectGenerator and the input Entity and Edge objects to generate domain-specific objects.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/generate.md#2025-04-23_snippet_11\n\nLANGUAGE: python\nCODE:\n```\ng.GenerateObjects( \nelement_generator=g.ElementGenerator( \n    class_name=\"uk.gov.gchq.gaffer.doc.operation.GenerateObjectsExample$DomainObjectGenerator\", \n    fields={'class': 'uk.gov.gchq.gaffer.doc.operation.GenerateObjectsExample$DomainObjectGenerator'} \n), \ninput=[ \n    g.Entity( \n    group=\"entity\", \n    properties={'count': 1}, \n    vertex=6 \n    ), \n    g.Edge( \n    group=\"edge\", \n    properties={'count': 1}, \n    source=5, \n    destination=6, \n    directed=True \n    ) \n] \n)\n```\n\n----------------------------------------\n\nTITLE: Querying Entity Neighbor Samples with ReservoirItemsSketch\nDESCRIPTION: Java code showing how to query and extract neighbor samples from a ReservoirItemsSketch stored on an entity property.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/properties-guide/advanced.md#2025-04-23_snippet_20\n\nLANGUAGE: java\nCODE:\n```\nfinal GetElements query2 = new GetElements.Builder()\n        .input(new EntitySeed(\"X\"))\n        .view(new View.Builder()\n                .entity(\"blueEntity\")\n                .build())\n        .build();\nfinal Element entity;\ntry (final Iterable<? extends Element> entities = graph.execute(query2, user)) {\n    entity = entities.iterator().next();\n}\nfinal ReservoirItemsSketch<String> neighboursSketch = ((ReservoirItemsSketch<String>) entity.getProperty(\"neighboursSample\"));\nfinal String[] neighboursSample = neighboursSketch.getSamples();\nsb.setLength(0);\nsb.append(\"10 samples: \");\nfor (int i = 0; i < 10 && i < neighboursSample.length; i++) {\n    if (i > 0) {\n        sb.append(\", \");\n    }\n    sb.append(neighboursSample[i]);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing GetProxyUrl Operation\nDESCRIPTION: Examples of implementing the GetProxyUrl operation to retrieve the REST API URL across different languages.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/proxy.md#2025-04-23_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nfinal GetProxyUrl getProxyUrl = new GetProxyUrl.Builder()\n        .build();\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n\"class\" : \"GetProxyUrl\"\n}\n```\n\nLANGUAGE: python\nCODE:\n```\ng.GetProxyUrl()\n```\n\n----------------------------------------\n\nTITLE: Initializing ExtractValue in Java\nDESCRIPTION: Creates an ExtractValue function that retrieves a specific value from a Map using the specified key. Requires a key to be provided.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/koryphe-functions.md#2025-04-23_snippet_40\n\nLANGUAGE: java\nCODE:\n```\nfinal ExtractValue<String, Integer> function = new ExtractValue<>(\"blueKey\");\n```\n\n----------------------------------------\n\nTITLE: Implementing IterableFunction with a Single Function in JSON\nDESCRIPTION: JSON representation of an IterableFunction that applies a MultiplyBy(2) function to each element in an iterable.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/koryphe-functions.md#2025-04-23_snippet_95\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"IterableFunction\",\n  \"functions\" : [ {\n    \"class\" : \"MultiplyBy\",\n    \"by\" : 2\n  } ]\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Elements From File - Python Implementation\nDESCRIPTION: Python implementation for adding elements from a file using AddElementsFromFile operation.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/flink.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ng.AddElementsFromFile( \nfilename=\"filename\", \nelement_generator=\"uk.gov.gchq.gaffer.doc.operation.generator.ElementGenerator\", \nparallelism=1, \nvalidate=True, \nskip_invalid_elements=False \n)\n```\n\n----------------------------------------\n\nTITLE: Initializing InDateRangeDual Function in Java\nDESCRIPTION: Creates an InDateRangeDual function with an end date of August 1, 2017. This function checks if a given date range overlaps with the period before the specified end date.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/predicates-guide/koryphe-predicates.md#2025-04-23_snippet_45\n\nLANGUAGE: java\nCODE:\n```\nfinal InDateRangeDual function = new InDateRangeDual.Builder()\n        .end(\"2017/08/01\")\n        .build();\n```\n\n----------------------------------------\n\nTITLE: Filtering Elements Between Sets in Gaffer (Python)\nDESCRIPTION: Python implementation of the GetElementsBetweenSets operation with a view to filter elements based on a count property. This example retrieves elements between vertex 1 and vertices 2 and 4, where the count is greater than 2.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/accumulo.md#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ng.GetElementsBetweenSets(\n  view=g.View(\n    entities=[\n      g.ElementDefinition(\n        group=\"entity\",\n        pre_aggregation_filter_functions=[\n          g.PredicateContext(\n            selection=[\n              \"count\"\n            ],\n            predicate=g.IsMoreThan(\n              value=2,\n              or_equal_to=False\n            )\n          )\n        ]\n      )\n    ],\n    edges=[\n      g.ElementDefinition(\n        group=\"edge\",\n        pre_aggregation_filter_functions=[\n          g.PredicateContext(\n            selection=[\n              \"count\"\n            ],\n            predicate=g.IsMoreThan(\n              value=2,\n              or_equal_to=False\n            )\n          )\n        ]\n      )\n    ],\n    all_edges=False,\n    all_entities=False\n  ),\n  input=[\n    g.EntitySeed(\n      vertex=1\n    )\n  ],\n  input_b=[\n    g.EntitySeed(\n      vertex=2\n    ),\n    g.EntitySeed(\n      vertex=4\n    )\n  ]\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring ToFreqMap Function in JSON\nDESCRIPTION: JSON configuration for the ToFreqMap function. This can be used to instantiate the function in a Gaffer JSON operation chain.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/gaffer-functions.md#2025-04-23_snippet_42\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"ToFreqMap\"\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing ExtractProperty in Java\nDESCRIPTION: Creates an ExtractProperty instance to extract a specific property ('prop1') from an Element. If the property is not present, it returns null.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/gaffer-functions.md#2025-04-23_snippet_9\n\nLANGUAGE: java\nCODE:\n```\nfinal ExtractProperty function = new ExtractProperty(\"prop1\");\n```\n\n----------------------------------------\n\nTITLE: Exporting and retrieving paginated results using ExportToSet in Gaffer\nDESCRIPTION: This example shows how to export all elements to a Set export and then retrieve a specific range of results using pagination with start and end parameters in the GetSetExport operation.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/export.md#2025-04-23_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nfinal OperationChain<Iterable<?>> opChain = new OperationChain.Builder()\n        .first(new GetAllElements())\n        .then(new ExportToSet<>())\n        .then(new DiscardOutput())\n        .then(new GetSetExport.Builder()\n                .start(2)\n                .end(4)\n                .build())\n        .build();\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"class\" : \"OperationChain\",\n    \"operations\" : [ {\n        \"class\" : \"GetAllElements\"\n    }, {\n        \"class\" : \"ExportToSet\"\n    }, {\n        \"class\" : \"DiscardOutput\"\n    }, {\n        \"class\" : \"GetSetExport\",\n        \"start\" : 2,\n        \"end\" : 4\n    } ]\n}\n```\n\nLANGUAGE: python\nCODE:\n```\ng.OperationChain( \n    operations=[ \n        g.GetAllElements(), \n        g.ExportToSet(), \n        g.DiscardOutput(), \n        g.GetSetExport( \n            start=2, \n            end=4 \n        ) \n    ] \n)\n```\n\n----------------------------------------\n\nTITLE: Initializing ToTuple Function in Java\nDESCRIPTION: Creates a new instance of the ToTuple function, which converts an Object into a Tuple. It's useful for creating structured data from various input types.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/koryphe-functions.md#2025-04-23_snippet_183\n\nLANGUAGE: java\nCODE:\n```\nfinal ToTuple function = new ToTuple();\n```\n\n----------------------------------------\n\nTITLE: Exporting Edges to Existing Graph using GraphLibrary in Java\nDESCRIPTION: This Java snippet shows how to export all edges with group 'edge' to an existing graph 'exportGraphId' using a GraphLibrary. It sets up the GraphLibrary with an export graph and constructs an OperationChain for the export.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/export.md#2025-04-23_snippet_42\n\nLANGUAGE: java\nCODE:\n```\n// Setup the graphLibrary with an export graph\nfinal GraphLibrary graphLibrary = new FileGraphLibrary(\"target/graphLibrary\");\n\nfinal AccumuloProperties exportStoreProperties = new AccumuloProperties();\n// set other store property config here.\n\nfinal Schema exportSchema = new Schema.Builder()\n        .edge(\"edge\", new SchemaEdgeDefinition.Builder()\n                .source(\"int\")\n                .destination(\"int\")\n                .directed(\"true\")\n                .property(\"count\", \"int\")\n                .aggregate(false)\n                .build())\n        .type(\"int\", Integer.class)\n        .type(\"true\", new TypeDefinition.Builder()\n                .clazz(Boolean.class)\n                .validateFunctions(new IsTrue())\n                .build())\n        .build();\n\ngraphLibrary.addOrUpdate(\"exportGraphId\", exportSchema, exportStoreProperties);\n\nfinal Graph graph = new Graph.Builder()\n        .config(StreamUtil.openStream(getClass(), \"graphConfigWithLibrary.json\"))\n        .addSchemas(StreamUtil.openStreams(getClass(), \"operations/schema\"))\n        .storeProperties(new MapStoreProperties())\n        .build();\n\nfinal OperationChain<Iterable<? extends Element>> opChain =\n        new OperationChain.Builder()\n                .first(new GetAllElements.Builder()\n                        .view(new View.Builder()\n                                .edge(\"edge\")\n                                .build())\n                        .build())\n                .then(new ExportToOtherGraph.Builder()\n                        .graphId(\"exportGraphId\")\n                        .build())\n                .build();\n```\n\n----------------------------------------\n\nTITLE: Exporting to Gaffer Result Cache and Getting Job Details in Python\nDESCRIPTION: This Python operation chain exports all elements to a Gaffer result cache, discards the output, and then retrieves the job details.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/export.md#2025-04-23_snippet_14\n\nLANGUAGE: python\nCODE:\n```\ng.OperationChain( \n    operations=[ \n        g.GetAllElements(), \n        g.ExportToGafferResultCache(), \n        g.DiscardOutput(), \n        g.GetJobDetails() \n    ] \n)\n```\n\n----------------------------------------\n\nTITLE: Using ToSingletonList in an Operation Chain in Java\nDESCRIPTION: A complex operation chain that uses ToSingletonList as part of a ForEach operation to process adjacency relationships in a graph. It gets adjacent IDs, converts each to a singleton list, gets more adjacent IDs, and finally converts to vertices.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/core.md#2025-04-23_snippet_65\n\nLANGUAGE: java\nCODE:\n```\nfinal OperationChain<Iterable<?>> opChain = new OperationChain.Builder()\n        .first(new GetAdjacentIds.Builder()\n                .input(new EntitySeed(1))\n                .build())\n        .then(new ForEach.Builder<>()\n                .operation(new OperationChain.Builder()\n                        .first(new ToSingletonList<EntitySeed>())\n                        .then(new GetAdjacentIds())\n                        .then(new ToVertices())\n                        .build())\n                .build())\n        .build();\n```\n\n----------------------------------------\n\nTITLE: Initializing ExtractValues in Java\nDESCRIPTION: Creates an ExtractValues function that returns a Collection of all values from a provided Java Map.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/koryphe-functions.md#2025-04-23_snippet_43\n\nLANGUAGE: java\nCODE:\n```\nfinal ExtractValues<String, Integer> function = new ExtractValues<>();\n```\n\n----------------------------------------\n\nTITLE: Using ToFreqMap Function in Python\nDESCRIPTION: Python code to create a ToFreqMap function using the Gaffer Python client. This function converts input objects to FreqMap instances.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/gaffer-functions.md#2025-04-23_snippet_43\n\nLANGUAGE: python\nCODE:\n```\ng.ToFreqMap()\n```\n\n----------------------------------------\n\nTITLE: Configuring PredicateMap for FreqMap Comparison with Equality in JSON\nDESCRIPTION: JSON configuration for a PredicateMap that extracts the 'key1' value from a map and checks if it's greater than or equal to 2. The orEqualTo parameter is set to true for inclusive comparison.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/predicates-guide/koryphe-predicates.md#2025-04-23_snippet_116\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"PredicateMap\",\n  \"predicate\" : {\n    \"class\" : \"IsMoreThan\",\n    \"orEqualTo\" : true,\n    \"value\" : {\n      \"Long\" : 2\n    }\n  },\n  \"key\" : \"key1\"\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Libraries to Gaffer Accumulo Docker Image\nDESCRIPTION: Dockerfile example demonstrating how to add custom JAR libraries to the Gaffer Accumulo image to enable new iterators.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/administration-guide/gaffer-deployment/gaffer-docker/gaffer-images.md#2025-04-23_snippet_4\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM gchq/gaffer:latest\nCOPY ./my-library-1.0-SNAPSHOT.jar /opt/accumulo/lib/ext\n```\n\n----------------------------------------\n\nTITLE: Filtered Query with View\nDESCRIPTION: GetElements operation with a View filter to return only edges with weight greater than 0.3\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/development-guide/example-deployment/using-the-api.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"class\": \"GetElements\",\n    \"input\": [\n        {\n            \"class\": \"EntitySeed\",\n            \"vertex\": \"v1\"\n        }\n    ],\n    \"view\": {\n        \"edges\": {\n            \"Created\": {\n                \"preAggregationFilterFunctions\": [\n                    {\n                        \"selection\": [\n                            \"weight\"\n                        ],\n                        \"predicate\": {\n                            \"class\": \"IsMoreThan\",\n                            \"orEqualTo\": false,\n                            \"value\": {\n                                \"Float\": 0.3\n                            }\n                        }\n                    }\n                ]\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting Elements to a Preconfigured Graph in JSON\nDESCRIPTION: JSON representation of an operation chain that retrieves all edges with group 'edge' and exports them to a preconfigured Gaffer graph with ID 'graph2'. The graph must already exist in the GraphLibrary.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/export.md#2025-04-23_snippet_31\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"class\" : \"OperationChain\",\n    \"operations\" : [ {\n        \"class\" : \"GetAllElements\",\n        \"view\" : {\n        \"edges\" : {\n            \"edge\" : { }\n        }\n        }\n    }, {\n        \"class\" : \"ExportToOtherAuthorisedGraph\",\n        \"graphId\" : \"graph2\"\n    } ]\n}\n```\n\n----------------------------------------\n\nTITLE: Constructing ViewElementDefinition using Builder in Java\nDESCRIPTION: Demonstrates how to create a ViewElementDefinition using the Builder pattern instead of the removed setAggregator method.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/change-notes/migrating-from-v1-to-v2/deprecations.md#2025-04-23_snippet_8\n\nLANGUAGE: java\nCODE:\n```\nfinal ViewElementDefinition elementDef = new ViewElementDefinition.Builder()\n        .aggregator(myElementAggregator)\n        .build();\n```\n\n----------------------------------------\n\nTITLE: List Type Conversion\nDESCRIPTION: Function to convert objects into ArrayList. Handles various input types including arrays and collections.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/koryphe-functions.md#2025-04-23_snippet_169\n\nLANGUAGE: java\nCODE:\n```\nfinal ToList function = new ToList();\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"uk.gov.gchq.koryphe.impl.function.ToList\"\n}\n```\n\nLANGUAGE: python\nCODE:\n```\ng.ToList()\n```\n\n----------------------------------------\n\nTITLE: Extracting Properties with cypherProperties\nDESCRIPTION: Shows how to extract properties from vertices using cypherProperties().\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/gremlin-guide/custom-functions.md#2025-04-23_snippet_5\n\nLANGUAGE: groovy\nCODE:\n```\ng.V().map(cypherProperties())\n```\n\n----------------------------------------\n\nTITLE: Implementing IterableFilter Function with IsMoreThan Predicate in Python\nDESCRIPTION: Python implementation of an IterableFilter function that filters an iterable by applying the IsMoreThan predicate to each element.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/koryphe-functions.md#2025-04-23_snippet_87\n\nLANGUAGE: python\nCODE:\n```\ng.IterableFilter( \n  predicate=g.IsMoreThan( \n    value=5, \n    or_equal_to=False \n  ) \n)\n```\n\n----------------------------------------\n\nTITLE: Using ToSingletonList in an Operation Chain in JSON\nDESCRIPTION: JSON representation of a complex operation chain using ToSingletonList. The chain starts with GetAdjacentIds, then uses ForEach to apply a sub-chain that includes ToSingletonList, GetAdjacentIds, and ToVertices operations.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/core.md#2025-04-23_snippet_66\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"OperationChain\",\n  \"operations\" : [ {\n    \"class\" : \"GetAdjacentIds\",\n    \"input\" : [ {\n      \"class\" : \"EntitySeed\",\n      \"vertex\" : 1\n    } ]\n  }, {\n    \"class\" : \"ForEach\",\n    \"operation\" : {\n      \"class\" : \"OperationChain\",\n      \"operations\" : [ {\n        \"class\" : \"ToSingletonList\"\n      }, {\n        \"class\" : \"GetAdjacentIds\"\n      }, {\n        \"class\" : \"ToVertices\"\n      } ]\n    }\n  } ]\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting Multiple Results to Cache with Python Operation Chain\nDESCRIPTION: Python implementation of an OperationChain that exports graph elements to the Gaffer result cache with separate keys for edges and entities. The chain demonstrates fetching all elements, exporting them to cache, and retrieving multiple exports at once.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/export.md#2025-04-23_snippet_24\n\nLANGUAGE: python\nCODE:\n```\ng.OperationChain( \n    operations=[ \n        g.GetAllElements(), \n        g.ExportToGafferResultCache( \n            key=\"edges\" \n        ), \n        g.DiscardOutput(), \n        g.GetAllElements(), \n        g.ExportToGafferResultCache( \n            key=\"entities\" \n        ), \n        g.DiscardOutput(), \n        g.GetExports( \n            get_exports=[ \n                g.GetGafferResultCacheExport( \n                    key=\"edges\" \n                ), \n                g.GetGafferResultCacheExport( \n                    key=\"entities\" \n                ) \n            ] \n        ) \n    ] \n)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Elements from Gaffer Result Cache Using Job ID in Java\nDESCRIPTION: This Java operation chain retrieves elements from the Gaffer result cache using a specific job ID obtained from a previous job detail.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/export.md#2025-04-23_snippet_17\n\nLANGUAGE: java\nCODE:\n```\nfinal OperationChain<Iterable<?>> opChain = new OperationChain.Builder()\n        .first(new GetGafferResultCacheExport.Builder()\n                .jobId(jobDetail.getJobId())\n                .build())\n        .build();\n```\n\n----------------------------------------\n\nTITLE: Implementing StringConcat with Custom Separator\nDESCRIPTION: Creates a StringConcat operator that concatenates two strings with a specified separator. Handles null inputs gracefully.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/binary-operators-guide/koryphe-operators.md#2025-04-23_snippet_28\n\nLANGUAGE: java\nCODE:\n```\nfinal StringConcat stringConcat = new StringConcat();\nstringConcat.setSeparator(\" \");\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"uk.gov.gchq.koryphe.impl.binaryoperator.StringConcat\",\n  \"separator\" : \" \"\n}\n```\n\nLANGUAGE: python\nCODE:\n```\ng.StringConcat(\n    separator=\" \"\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing IterableFilter Function with IsMoreThan Predicate in Java\nDESCRIPTION: Creates an IterableFilter function that filters an iterable by applying the IsMoreThan predicate to each element, keeping only values greater than 5.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/koryphe-functions.md#2025-04-23_snippet_85\n\nLANGUAGE: java\nCODE:\n```\nfinal IterableFilter<Integer> function = new IterableFilter<>(new IsMoreThan(5));\n```\n\n----------------------------------------\n\nTITLE: Getting JavaRDD of Elements with Edge-Only View\nDESCRIPTION: Demonstrates retrieving only edge elements by applying a view filter to the GetJavaRDDOfElements operation. Excludes entity elements from the results.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/spark.md#2025-04-23_snippet_13\n\nLANGUAGE: java\nCODE:\n```\nfinal GetJavaRDDOfElements operation = new GetJavaRDDOfElements.Builder()\n        .input(new EdgeSeed(1, 2, true), new EdgeSeed(2, 3, true))\n        .view(new View.Builder()\n                .edge(\"edge\")\n                .build())\n        .build();\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"GetJavaRDDOfElements\",\n  \"input\" : [ {\n    \"class\" : \"EdgeSeed\",\n    \"source\" : 1,\n    \"destination\" : 2,\n    \"matchedVertex\" : \"SOURCE\",\n    \"directedType\" : \"DIRECTED\"\n  }, {\n    \"class\" : \"EdgeSeed\",\n    \"source\" : 2,\n    \"destination\" : 3,\n    \"matchedVertex\" : \"SOURCE\",\n    \"directedType\" : \"DIRECTED\"\n  } ],\n  \"view\" : {\n    \"edges\" : {\n      \"edge\" : { }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing IsXLessThanY Predicate in Java\nDESCRIPTION: Creates an IsXLessThanY predicate that checks if the first comparable is less than the second comparable. This predicate works on pairs of comparable objects of the same type.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/predicates-guide/koryphe-predicates.md#2025-04-23_snippet_100\n\nLANGUAGE: java\nCODE:\n```\nfinal IsXLessThanY function = new IsXLessThanY();\n```\n\n----------------------------------------\n\nTITLE: Results of Extracting Edges from Walks in Java\nDESCRIPTION: Java results from extracting edge source vertices from walks, showing the unique source vertices (1 and 2) after extraction and conversion to a set.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/core.md#2025-04-23_snippet_51\n\nLANGUAGE: java\nCODE:\n```\n1\n2\n```\n\n----------------------------------------\n\nTITLE: Setting up InDateRangeDual with fully contained range in Python\nDESCRIPTION: Python implementation of InDateRangeDual that requires both start and end dates to be fully contained within the configured range. Only accepts date ranges completely within 2017/03/01 to 2017/08/01.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/predicates-guide/koryphe-predicates.md#2025-04-23_snippet_38\n\nLANGUAGE: python\nCODE:\n```\ng.InDateRangeDual(\n  start=\"2017/03/01\",\n  end=\"2017/08/01\",\n  start_fully_contained=True,\n  end_fully_contained=True\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing IsIn Predicate in Java\nDESCRIPTION: Creates an IsIn predicate that checks if an input value is contained in a set of allowed values. The example creates a function that checks if the input is one of the values: 5, 5L, \"5\", or '5'.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/predicates-guide/koryphe-predicates.md#2025-04-23_snippet_70\n\nLANGUAGE: java\nCODE:\n```\nfinal IsIn function = new IsIn(5, 5L, \"5\", '5');\n```\n\n----------------------------------------\n\nTITLE: GetElementsBetweenSetsPairs Operation Results in JSON\nDESCRIPTION: This JSON snippet demonstrates the expected results from executing the GetElementsBetweenSetsPairs operation. It returns an Entity for node 1 and two Edges connecting node 1 to nodes 2 and 4, with their respective properties.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/accumulo.md#2025-04-23_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n[\n    {\n        \"class\": \"uk.gov.gchq.gaffer.data.element.Entity\",\n        \"group\": \"entity\",\n        \"vertex\": 1,\n        \"properties\": {\n            \"count\": 3\n        }\n    },\n    {\n        \"class\": \"uk.gov.gchq.gaffer.data.element.Edge\",\n        \"group\": \"edge\",\n        \"source\": 1,\n        \"destination\": 2,\n        \"directed\": true,\n        \"matchedVertex\": \"SOURCE\",\n        \"properties\": {\n            \"count\": 3\n        }\n    },\n    {\n        \"class\": \"uk.gov.gchq.gaffer.data.element.Edge\",\n        \"group\": \"edge\",\n        \"source\": 1,\n        \"destination\": 4,\n        \"directed\": true,\n        \"matchedVertex\": \"SOURCE\",\n        \"properties\": {\n            \"count\": 1\n        }\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Using ExtractKeys in Python\nDESCRIPTION: Python implementation of the ExtractKeys function that returns all keys from an input dictionary.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/koryphe-functions.md#2025-04-23_snippet_39\n\nLANGUAGE: python\nCODE:\n```\ng.ExtractKeys()\n```\n\n----------------------------------------\n\nTITLE: Implementing IsLessThan Predicate in Java\nDESCRIPTION: Creates an IsLessThan predicate that checks if a comparable input is less than 5. Takes a java.lang.Comparable as input and returns true if the input is less than the specified value.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/predicates-guide/koryphe-predicates.md#2025-04-23_snippet_73\n\nLANGUAGE: java\nCODE:\n```\nfinal IsLessThan function = new IsLessThan(5);\n```\n\n----------------------------------------\n\nTITLE: Implementing IterableFlatten Function with Max Binary Operator in Python\nDESCRIPTION: Python implementation of an IterableFlatten function with a Max binary operator that finds the maximum value in an iterable.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/koryphe-functions.md#2025-04-23_snippet_93\n\nLANGUAGE: python\nCODE:\n```\ng.IterableFlatten( \n  operator=g.Max() \n)\n```\n\n----------------------------------------\n\nTITLE: Configuring ApplyBiFunction with Sum in JSON\nDESCRIPTION: Shows the JSON configuration for ApplyBiFunction using a Sum operation. This can be used to set up the function in a Gaffer graph configuration.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/koryphe-functions.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"ApplyBiFunction\",\n  \"function\" : {\n    \"class\" : \"Sum\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Elements Schema JSON for Timestamp Property\nDESCRIPTION: Example of updating the Elements schema JSON to specify the timestamp property under the new 'config' section instead of at the top level.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/change-notes/migrating-from-v1-to-v2/deprecations.md#2025-04-23_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"entities\": {\n    ...\n  },\n  \"edges\": {\n    ...\n  },\n  \"timestampProperty\": \"timestamp\"\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"entities\": {\n    ...\n  },\n  \"edges\": {\n    ...\n  },\n  \"config\": {\n    \"timestampProperty\": \"timestamp\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting Edges to Another Gaffer REST API using ProxyStore in JSON\nDESCRIPTION: This JSON snippet shows the configuration for exporting all edges with group 'edge' to another Gaffer REST API using ProxyStore. It defines an OperationChain with GetAllElements and ExportToOtherGraph operations.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/export.md#2025-04-23_snippet_40\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"class\" : \"OperationChain\",\n    \"operations\" : [ {\n        \"class\" : \"GetAllElements\",\n        \"view\" : {\n        \"edges\" : {\n            \"edge\" : { }\n        }\n        }\n    }, {\n        \"class\" : \"ExportToOtherGraph\",\n        \"graphId\" : \"otherGafferRestApiGraphId\",\n        \"storeProperties\" : {\n        \"gaffer.host\" : \"localhost\",\n        \"gaffer.context-root\" : \"/rest/v1\",\n        \"gaffer.store.class\" : \"uk.gov.gchq.gaffer.proxystore.ProxyStore\",\n        \"gaffer.port\" : \"8081\",\n        \"gaffer.store.properties.class\" : \"uk.gov.gchq.gaffer.proxystore.ProxyProperties\"\n        }\n    } ]\n    }\n```\n\n----------------------------------------\n\nTITLE: Manual Cardinality Addition in Python\nDESCRIPTION: Python code showing how to manually add cardinality entities using AddElements.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/user-guide/gaffer-basics/what-is-cardinality.md#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ng.AddElements(\n    input=[\n        g.Entity(\n            vertex=\"A\",\n            group=\"cardinality\",\n            properties={\n                \"hll\": g.hll_sketch([\"B\"])\n            }\n        )\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Join Operation in Python with KeyFunctionMatch\nDESCRIPTION: Python implementation of a Gaffer Join operation using KeyFunctionMatch. It configures an operation chain with the same Entity inputs as the JSON example, using function chains for property matching with the same join configuration.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/join.md#2025-04-23_snippet_40\n\nLANGUAGE: python\nCODE:\n```\ng.OperationChain( \noperations=[ \n    g.Join( \n    operation=g.GetAllElements(), \n    match_method=g.KeyFunctionMatch(\n            first_key_function=g.FunctionChain([\n                g.ExtractProperty(\"count\"),\n                g.Increment(increment=1)\n                ]),\n            second_key_function=g.ExtractProperty(\"count\")\n        ),            input=[ \n        g.Entity( \n        group=\"entity\", \n        properties={'count': 3}, \n        vertex=1 \n        ), \n        g.Entity( \n        group=\"entity\", \n        properties={'count': 1}, \n        vertex=4 \n        ), \n        g.Entity( \n        group=\"entity\", \n        properties={'count': 3}, \n        vertex=5 \n        ), \n        g.Entity( \n        group=\"entity\", \n        properties={'count': 30}, \n        vertex=6 \n        ) \n    ], \n    flatten=False, \n    match_key=\"RIGHT\", \n    join_type=\"FULL\" \n    ) \n] \n)\n```\n\n----------------------------------------\n\nTITLE: Initializing CsvLinesToMaps Function\nDESCRIPTION: Creates a function to parse CSV lines into Maps using specified headers and delimiter. Handles multi-line CSV data with customizable column headers and row parsing.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/koryphe-functions.md#2025-04-23_snippet_18\n\nLANGUAGE: java\nCODE:\n```\nfinal CsvLinesToMaps function = new CsvLinesToMaps()\n        .header(\"header1\", \"header2\", \"header3\")\n        .firstRow(1)\n        .delimiter('|');\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"CsvLinesToMaps\",\n  \"header\" : [ \"header1\", \"header2\", \"header3\" ],\n  \"firstRow\" : 1,\n  \"delimiter\" : \"|\"\n}\n```\n\nLANGUAGE: python\nCODE:\n```\ng.CsvLinesToMaps( \n  delimiter=\"|\", \n  header=[ \n    \"header1\", \n    \"header2\", \n    \"header3\" \n  ], \n  first_row=1 \n)\n```\n\n----------------------------------------\n\nTITLE: Implementing relative date range with startOffset in Java\nDESCRIPTION: Creates an InDateRange predicate using time offsets instead of fixed dates. This example checks if a date is within the last 7 days, with no upper bound.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/predicates-guide/koryphe-predicates.md#2025-04-23_snippet_24\n\nLANGUAGE: java\nCODE:\n```\nfinal InDateRange function = new InDateRange.Builder()\n        .startOffset(-7L)\n        // end is not set - it is unbounded\n        .offsetUnit(TimeUnit.DAY)\n        .build();\n```\n\n----------------------------------------\n\nTITLE: String Truncation Implementation\nDESCRIPTION: Function to truncate strings with optional ellipsis. Takes parameters for length and whether to append ellipsis.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/koryphe-functions.md#2025-04-23_snippet_164\n\nLANGUAGE: java\nCODE:\n```\nfinal StringTruncate function = new StringTruncate(5, false);\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"StringTruncate\",\n  \"length\" : 5,\n  \"ellipses\" : false\n}\n```\n\nLANGUAGE: python\nCODE:\n```\ng.StringTruncate(\n  length=5, \n  ellipses=False \n)\n```\n\n----------------------------------------\n\nTITLE: Executing Cypher Query in Gremlin\nDESCRIPTION: Demonstrates how to translate and execute a Cypher query within a Gremlin context. This allows for combining Cypher queries with other Gremlin steps.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/gremlin-guide/gaffer-options.md#2025-04-23_snippet_4\n\nLANGUAGE: groovy\nCODE:\n```\ng.with(\"cypher\", \"MATCH (p:person) RETURN p\").call().toList()\n```\n\n----------------------------------------\n\nTITLE: Implementing IsTrue Predicate in Java\nDESCRIPTION: Creates an IsTrue predicate function that checks if an input boolean is true. Takes a java.lang.Boolean as input and returns true if the input is true.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/predicates-guide/koryphe-predicates.md#2025-04-23_snippet_67\n\nLANGUAGE: java\nCODE:\n```\nfinal IsTrue function = new IsTrue();\n```\n\n----------------------------------------\n\nTITLE: Initializing ToString Function in Java\nDESCRIPTION: Creates a new instance of the ToString function, which calls toString on each input. If the input is null, null is returned. It's useful for string conversions.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/koryphe-functions.md#2025-04-23_snippet_180\n\nLANGUAGE: java\nCODE:\n```\nfinal ToString function = new ToString();\n```\n\n----------------------------------------\n\nTITLE: Initializing ToTypeSubTypeValue Function in Java\nDESCRIPTION: Creates a new ToTypeSubTypeValue function that converts input objects into TypeSubTypeValue instances. This function is used to create TypeSubTypeValue objects from various input types.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/gaffer-functions.md#2025-04-23_snippet_47\n\nLANGUAGE: java\nCODE:\n```\nFunction toTypeSubTypeValue = new ToTypeSubTypeValue();\n```\n\n----------------------------------------\n\nTITLE: Configuring Types Schema for ReservoirItemsSketch\nDESCRIPTION: JSON schema defining the ReservoirItemsSketch type including its aggregator and serializer configurations.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/properties-guide/advanced.md#2025-04-23_snippet_18\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"types\": {\n    \"vertex.string\": {\n      \"class\": \"java.lang.String\",\n      \"validateFunctions\": [\n        {\n          \"class\": \"uk.gov.gchq.koryphe.impl.predicate.Exists\"\n        }\n      ]\n    },\n    \"reservoir.strings.sketch\": {\n      \"class\": \"org.apache.datasketches.sampling.ReservoirItemsSketch\",\n      \"aggregateFunction\": {\n        \"class\": \"uk.gov.gchq.gaffer.sketches.datasketches.sampling.binaryoperator.ReservoirItemsSketchAggregator\"\n      },\n      \"serialiser\": {\n        \"class\": \"uk.gov.gchq.gaffer.sketches.datasketches.sampling.serialisation.ReservoirStringsSketchSerialiser\"\n      }\n    },\n    \"false\": {\n      \"class\": \"java.lang.Boolean\",\n      \"validateFunctions\": [\n        {\n          \"class\": \"uk.gov.gchq.koryphe.impl.predicate.IsFalse\"\n        }\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Domain Objects from Elements using GenerateObjects in JSON\nDESCRIPTION: This JSON snippet demonstrates the structure of a GenerateObjects operation for creating custom domain objects from input elements. It specifies the input Entity and Edge objects and the DomainObjectGenerator class.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/generate.md#2025-04-23_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n\"class\" : \"GenerateObjects\",\n\"input\" : [ {\n    \"class\" : \"Entity\",\n    \"group\" : \"entity\",\n    \"vertex\" : 6,\n    \"properties\" : {\n    \"count\" : 1\n    }\n}, {\n    \"class\" : \"Edge\",\n    \"group\" : \"edge\",\n    \"source\" : 5,\n    \"destination\" : 6,\n    \"directed\" : true,\n    \"properties\" : {\n    \"count\" : 1\n    }\n} ],\n\"elementGenerator\" : {\n    \"class\" : \"uk.gov.gchq.gaffer.doc.operation.GenerateObjectsExample$DomainObjectGenerator\"\n}\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Exclusive InRange Function in Java\nDESCRIPTION: Creates an InRange function for Long values between 5 and 10 (exclusive). This function demonstrates how to configure range checks with exclusive boundaries.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/predicates-guide/koryphe-predicates.md#2025-04-23_snippet_51\n\nLANGUAGE: java\nCODE:\n```\nfinal InRange function = new InRange.Builder<Long>()\n        .start(5L)\n        .end(10L)\n        .startInclusive(false)\n        .endInclusive(false)\n        .build();\n```\n\n----------------------------------------\n\nTITLE: Implementing Numeric Product Calculation in Python\nDESCRIPTION: Python implementation of the Product operator for calculating the product of two numbers.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/binary-operators-guide/koryphe-operators.md#2025-04-23_snippet_17\n\nLANGUAGE: python\nCODE:\n```\ng.Product()\n```\n\n----------------------------------------\n\nTITLE: Extracting Maximum Element using Max Operation in JSON\nDESCRIPTION: This JSON snippet shows the configuration for finding the maximum element using the Max operation. It includes GetElements and Max operations, with a comparator for the 'count' property on entities and edges.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/core.md#2025-04-23_snippet_28\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"OperationChain\",\n  \"operations\" : [ {\n    \"class\" : \"GetElements\",\n    \"input\" : [ {\n      \"class\" : \"EntitySeed\",\n      \"vertex\" : 1\n    }, {\n      \"class\" : \"EntitySeed\",\n      \"vertex\" : 2\n    } ]\n  }, {\n    \"class\" : \"uk.gov.gchq.gaffer.operation.impl.compare.Max\",\n    \"comparators\" : [ {\n      \"class\" : \"ElementPropertyComparator\",\n      \"property\" : \"count\",\n      \"groups\" : [ \"entity\", \"edge\" ],\n      \"reversed\" : false\n    } ]\n  } ]\n}\n```\n\n----------------------------------------\n\nTITLE: Not Predicate with AreEqual Check\nDESCRIPTION: Implementation of Not predicate that inverts the result of an AreEqual check. Returns true if values are not equal, false if they are equal.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/predicates-guide/koryphe-predicates.md#2025-04-23_snippet_11\n\nLANGUAGE: java\nCODE:\n```\nfinal Not function = new Not<>(new AreEqual());\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"Not\",\n  \"predicate\" : {\n    \"class\" : \"AreEqual\"\n  }\n}\n```\n\nLANGUAGE: python\nCODE:\n```\ng.Not(\n  predicate=g.AreEqual()\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing PredicateMap with Date Key and Exists Predicate in Python\nDESCRIPTION: Python implementation of a PredicateMap that checks if a map contains a specific date key (epoch time 0) with a non-null value using the Exists predicate. The key parameter is configured as a date object.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/predicates-guide/koryphe-predicates.md#2025-04-23_snippet_120\n\nLANGUAGE: python\nCODE:\n```\ng.PredicateMap(\n  key=g.date(0),\n  predicate=g.Exists()\n)\n```\n\n----------------------------------------\n\nTITLE: Using CallMethod with toString in Python\nDESCRIPTION: Illustrates how to use CallMethod with the toString method in Python. This is typically used in Gaffer's Python client to convert objects to strings.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/koryphe-functions.md#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ng.CallMethod( \n  method=\"toString\" \n)\n```\n\n----------------------------------------\n\nTITLE: Implementing IsMoreThan with String in Java\nDESCRIPTION: Creates an IsMoreThan predicate that checks if a string input is lexicographically greater than \"B\". Demonstrates using IsMoreThan with string values rather than numbers.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/predicates-guide/koryphe-predicates.md#2025-04-23_snippet_88\n\nLANGUAGE: java\nCODE:\n```\nfinal IsMoreThan function = new IsMoreThan(\"B\");\n```\n\n----------------------------------------\n\nTITLE: Running GetAdjacentIds Operation Multiple Times with While in Java\nDESCRIPTION: Constructs a While operation that runs GetAdjacentIds three times with OUTGOING direction. The input is an EntitySeed with vertex value 1, and the condition is set to true to allow execution for the specified number of repeats.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/flow.md#2025-04-23_snippet_10\n\nLANGUAGE: java\nCODE:\n```\nfinal While<Iterable<EntityId>, Iterable<? extends EntityId>> operation = new While.Builder<Iterable<EntityId>, Iterable<? extends EntityId>>()\n        .input(Lists.newArrayList(new EntitySeed(1)))\n        .condition(true)\n        .maxRepeats(3)\n        .operation(new GetAdjacentIds.Builder()\n                .inOutType(IncludeIncomingOutgoingType.OUTGOING)\n                .build())\n        .build();\n```\n\n----------------------------------------\n\nTITLE: Configuring ExtractWalkVertex in JSON\nDESCRIPTION: JSON configuration for the ExtractWalkVertex function. This configuration specifies the class name for the function.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/gaffer-functions.md#2025-04-23_snippet_22\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"ExtractWalkVertex\"\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Graph Walks with Self Loops - JSON Configuration\nDESCRIPTION: JSON configuration for retrieving walks of length 3 with outgoing edges, starting from vertex 8. Includes operation chain setup and result limit configuration.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/get.md#2025-04-23_snippet_67\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"GetWalks\",\n  \"input\" : [ {\n    \"class\" : \"EntitySeed\",\n    \"vertex\" : 8\n  } ],\n  \"operations\" : [ {\n    \"class\" : \"OperationChain\",\n    \"operations\" : [ {\n      \"class\" : \"GetElements\",\n      \"includeIncomingOutGoing\" : \"OUTGOING\"\n    } ]\n  }, {\n    \"class\" : \"OperationChain\",\n    \"operations\" : [ {\n      \"class\" : \"GetElements\",\n      \"includeIncomingOutGoing\" : \"OUTGOING\"\n    } ]\n  }, {\n    \"class\" : \"OperationChain\",\n    \"operations\" : [ {\n      \"class\" : \"GetElements\",\n      \"includeIncomingOutGoing\" : \"OUTGOING\"\n    } ]\n  } ],\n  \"resultsLimit\" : 1000000\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring StringJoin Function with Delimiter in JSON\nDESCRIPTION: JSON configuration for a StringJoin function with a hyphen delimiter. This configuration will join strings in an iterable with a hyphen between each element.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/koryphe-functions.md#2025-04-23_snippet_144\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"StringJoin\",\n  \"delimiter\" : \"-\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing InDateRange with day precision in Python\nDESCRIPTION: Python code to create an InDateRange predicate that checks if a Date falls between January 1, 2017 and February 1, 2017 (inclusive).\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/predicates-guide/koryphe-predicates.md#2025-04-23_snippet_14\n\nLANGUAGE: python\nCODE:\n```\ng.InDateRange(\n  start=\"2017/01/01\",\n  end=\"2017/02/01\"\n)\n```\n\n----------------------------------------\n\nTITLE: Using FreqMapExtractor in Python\nDESCRIPTION: Python code to create a FreqMapExtractor function. This function extracts a count from a frequency map for a given key.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/gaffer-functions.md#2025-04-23_snippet_26\n\nLANGUAGE: python\nCODE:\n```\ng.FreqMapExtractor( \n  key=\"key1\" \n)\n```\n\n----------------------------------------\n\nTITLE: Creating StringJoin Function with Delimiter in Python\nDESCRIPTION: Python implementation of a StringJoin function with a hyphen delimiter. This function will concatenate all strings in an iterable with a hyphen between each element.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/koryphe-functions.md#2025-04-23_snippet_145\n\nLANGUAGE: python\nCODE:\n```\ng.StringJoin( \n  delimiter=\"-\" \n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Maximum Value Selection in JSON\nDESCRIPTION: JSON representation of the Max operator that returns the maximum value between two comparable inputs.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/binary-operators-guide/koryphe-operators.md#2025-04-23_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"uk.gov.gchq.koryphe.impl.binaryoperator.Max\"\n}\n```\n\n----------------------------------------\n\nTITLE: Getting JavaRDD of All Edges in Java\nDESCRIPTION: Example of using GetJavaRDDOfAllElements operation to retrieve only edges as a JavaRDD.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/spark.md#2025-04-23_snippet_9\n\nLANGUAGE: java\nCODE:\n```\nfinal GetJavaRDDOfAllElements operation = new GetJavaRDDOfAllElements.Builder()\n        .view(new View.Builder()\n                .edge(\"edge\")\n                .build())\n        .build();\n```\n\n----------------------------------------\n\nTITLE: Getting GraphFrame of Elements in Java\nDESCRIPTION: Example of using GetGraphFrameOfElements operation to retrieve both entities and edges as a GraphFrame.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/spark.md#2025-04-23_snippet_5\n\nLANGUAGE: java\nCODE:\n```\nfinal GetGraphFrameOfElements operation = new GetGraphFrameOfElements.Builder()\n        .view(new View.Builder()\n                .entity(\"entity\")\n                .edge(\"edge\")\n                .build())\n        .build();\n```\n\n----------------------------------------\n\nTITLE: Initializing StringRegexReplace Function in Java\nDESCRIPTION: Creates a StringRegexReplace function that replaces text matching a regular expression pattern. This function replaces occurrences of '[tT]ea' with 'cake' in the input string.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/koryphe-functions.md#2025-04-23_snippet_149\n\nLANGUAGE: java\nCODE:\n```\nfinal StringRegexReplace function = new StringRegexReplace(\"[tT]ea\", \"cake\");\n```\n\n----------------------------------------\n\nTITLE: Accumulo Store Configuration for Gaffer\nDESCRIPTION: YAML configuration that enables the Accumulo Store for Gaffer, which provides persistent storage. This is the minimal configuration needed to use Accumulo with Gaffer on Kubernetes.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/administration-guide/gaffer-deployment/kubernetes-guide/simple-deployment.md#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\naccumulo:\n  enabled: true\n```\n\n----------------------------------------\n\nTITLE: Parsing Date Strings with TimeZone (GMT+0) in Java\nDESCRIPTION: Creates a date parser that converts date strings to Date objects using GMT+0 timezone. This configuration specifies a different format pattern without seconds or milliseconds.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/koryphe-functions.md#2025-04-23_snippet_119\n\nLANGUAGE: java\nCODE:\n```\nfinal ParseDate parseDate = new ParseDate();\nparseDate.setFormat(\"yyyy-MM-dd HH:mm\");\nparseDate.setTimeZone(\"Etc/GMT+0\");\n```\n\n----------------------------------------\n\nTITLE: Executing NamedOperation in Java\nDESCRIPTION: This snippet shows how to execute the 'CountAllElements' NamedOperation using Java.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/user-guide/query/gremlin/custom-features.md#2025-04-23_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nMap<String, String> params = Collections.singletonMap(\"execute\", \"CountAllElements\")\ng.call(\"namedoperation\", params).toList();\n```\n\n----------------------------------------\n\nTITLE: Visualizing Directed Graph for Get Operations Examples in Mermaid\nDESCRIPTION: This mermaid diagram illustrates a directed graph used as an example for Get Operations in Gaffer. It shows nodes with counts and edges representing connections between nodes, including edge counts.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/get.md#2025-04-23_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph TD\n  1(1, count=3) -- count=3 --> 2\n  1 -- count=1 --> 4\n  2(2, count=1) -- count=2 --> 3\n  2 -- count=1 --> 4(4, count=1)\n  2 -- count=1 --> 5(5, count=3)\n  3(3, count=2) -- count=4 --> 4\n```\n\n----------------------------------------\n\nTITLE: Configuring ReduceRelatedElements with Basic Example in JSON\nDESCRIPTION: This JSON representation configures a ReduceRelatedElements function with Max vertex aggregator, CollectionConcat visibility aggregator, and 'relatesTo' as the related vertex group. It specifies 'visibility' as the property to use for visibility information.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/gaffer-functions.md#2025-04-23_snippet_36\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"ReduceRelatedElements\",\n  \"vertexAggregator\" : {\n    \"class\" : \"uk.gov.gchq.koryphe.impl.binaryoperator.Max\"\n  },\n  \"visibilityAggregator\" : {\n    \"class\" : \"CollectionConcat\"\n  },\n  \"visibilityProperty\" : \"visibility\",\n  \"relatedVertexGroups\" : [ \"relatesTo\" ]\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Split Points from Iterable in Java\nDESCRIPTION: This code demonstrates how to apply split points to an Accumulo table using the SplitStoreFromIterable operation. It takes an Iterable of Base64 encoded strings representing the split points.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/administration-guide/gaffer-stores/accumulo-store.md#2025-04-23_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nSplitStoreFromIterable splitStore = new SplitStoreFromIterable.Builder()\n        .input(splits) // Base64 encoded strings\n        .build();\ngraph.execute(splitStore, new User());\n```\n\n----------------------------------------\n\nTITLE: Setting Operation Options in Gremlin Query (Groovy)\nDESCRIPTION: Demonstrates how to set operation options for all operations in a Gremlin query using the operationOptions key. This example sets a graph ID for a federated store operation.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/gremlin-guide/gaffer-options.md#2025-04-23_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\ng.with(\"operationOptions\", [\"gaffer.federatedstore.operation.graphIds:graphA\"]).V().toList()\n```\n\n----------------------------------------\n\nTITLE: Implementing Named Operation for Vehicle Traffic Analysis in Python\nDESCRIPTION: Python implementation of the same Gaffer Named Operation for analyzing vehicle traffic patterns. This code creates an operation chain that traverses from regions to locations to roads to junctions, filtering for vehicle usage data in the year 2000.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/administration-guide/named-operations.md#2025-04-23_snippet_22\n\nLANGUAGE: python\nCODE:\n```\ng.AddNamedOperation( \n    operation_chain=g.OperationChainDAO( \n        operations=[ \n            g.GetAdjacentIds( \n                view=g.View( \n                    edges=[ \n                        g.ElementDefinition( \n                            group=\"RegionContainsLocation\" \n                        ) \n                    ], \n                    all_edges=False, \n                    all_entities=False \n                ) \n            ), \n            g.GetAdjacentIds( \n                view=g.View( \n                    edges=[ \n                        g.ElementDefinition( \n                            group=\"LocationContainsRoad\" \n                        ) \n                    ], \n                    all_edges=False, \n                    all_entities=False \n                ) \n            ), \n            g.ToSet(), \n            g.GetAdjacentIds( \n                view=g.View( \n                    edges=[ \n                        g.ElementDefinition( \n                            group=\"RoadHasJunction\" \n                        ) \n                    ], \n                    all_edges=False, \n                    all_entities=False \n                ) \n            ), \n            g.GetElements( \n                view=g.View( \n                    entities=[ \n                        g.ElementDefinition( \n                            group=\"JunctionUse\", \n                            transient_properties={'${vehicle}': 'Long'}, \n                            pre_aggregation_filter_functions=[ \n                                g.PredicateContext( \n                                    selection=[ \n                                        \"startDate\", \n                                        \"endDate\" \n                                    ], \n                                    predicate=g.InDateRangeDual( \n                                        start=\"2000/01/01\", \n                                        end=\"2001/01/01\" \n                                    ) \n                                ) \n                            ], \n                            transform_functions=[ \n                                g.FunctionContext( \n```\n\n----------------------------------------\n\nTITLE: Configuring Types Schema with DoublesSketch in Gaffer\nDESCRIPTION: JSON schema definition that sets up the DoublesSketch type with appropriate aggregation function and serializer, enabling automatic aggregation of sketches as new edges are added to the graph.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/properties-guide/advanced.md#2025-04-23_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"types\": {\n    \"vertex.string\": {\n      \"class\": \"java.lang.String\",\n      \"validateFunctions\": [\n        {\n          \"class\": \"uk.gov.gchq.koryphe.impl.predicate.Exists\"\n        }\n      ]\n    },\n    \"doubles.sketch\": {\n      \"class\": \"org.apache.datasketches.quantiles.DoublesSketch\",\n      \"aggregateFunction\": {\n        \"class\": \"uk.gov.gchq.gaffer.sketches.datasketches.quantiles.binaryoperator.DoublesSketchAggregator\"\n      },\n      \"serialiser\": {\n        \"class\": \"uk.gov.gchq.gaffer.sketches.datasketches.quantiles.serialisation.DoublesSketchSerialiser\"\n      }\n    },\n    \"false\": {\n      \"class\": \"java.lang.Boolean\",\n      \"validateFunctions\": [\n        {\n          \"class\": \"uk.gov.gchq.koryphe.impl.predicate.IsFalse\"\n        }\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Increment Function with Integer in Java\nDESCRIPTION: Creates an Increment function that adds a fixed integer value (3) to numeric inputs. Returns result in the same type as the input.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/koryphe-functions.md#2025-04-23_snippet_73\n\nLANGUAGE: java\nCODE:\n```\nfinal Increment increment = new Increment(3);\n```\n\n----------------------------------------\n\nTITLE: Creating IsLessThan-OrEqual Predicate in Python\nDESCRIPTION: Python implementation of the IsLessThan predicate using the Gaffer Python client. Configures the predicate to check if the input is less than or equal to 5.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/predicates-guide/koryphe-predicates.md#2025-04-23_snippet_78\n\nLANGUAGE: python\nCODE:\n```\ng.IsLessThan(\n  value=5,\n  or_equal_to=True\n)\n```\n\n----------------------------------------\n\nTITLE: Defining IsLessThan Predicate in JSON\nDESCRIPTION: JSON representation of the IsLessThan predicate with value 5 and orEqualTo flag set to false. Can be used in Gaffer schema or operation definitions.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/predicates-guide/koryphe-predicates.md#2025-04-23_snippet_74\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"IsLessThan\",\n  \"orEqualTo\" : false,\n  \"value\" : 5\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing CallMethod with toString in Java\nDESCRIPTION: Demonstrates how to use CallMethod to invoke the toString method on an object in Java. This function allows calling any public no-argument method on an object.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/koryphe-functions.md#2025-04-23_snippet_6\n\nLANGUAGE: java\nCODE:\n```\nfinal CallMethod function = new CallMethod(\"toString\");\n```\n\n----------------------------------------\n\nTITLE: Initializing InRange Function for String Values in Java\nDESCRIPTION: Creates an InRange function to check if a String value is between 'B' and 'D' (inclusive). This function demonstrates range checks for String values.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/predicates-guide/koryphe-predicates.md#2025-04-23_snippet_57\n\nLANGUAGE: java\nCODE:\n```\nfinal InRange function = new InRange.Builder<String>()\n        .start(\"B\")\n        .end(\"D\")\n        .build();\n```\n\n----------------------------------------\n\nTITLE: Getting JavaRDD of All Elements in JSON\nDESCRIPTION: JSON representation of GetJavaRDDOfAllElements operation for retrieving all elements.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/spark.md#2025-04-23_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"GetJavaRDDOfAllElements\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Minimum Value Selection in Java\nDESCRIPTION: Creates a Min operator that returns the minimum value between two comparable inputs. Works with any objects that implement the Comparable interface, such as numbers or strings.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/binary-operators-guide/koryphe-operators.md#2025-04-23_snippet_9\n\nLANGUAGE: java\nCODE:\n```\nfinal Min function = new Min();\n```\n\n----------------------------------------\n\nTITLE: Initializing ExtractWalkEntitiesFromHop in Java\nDESCRIPTION: Creates a new ExtractWalkEntitiesFromHop function to extract the set of entities from a single hop in a Walk. The hop parameter specifies which hop to extract entities from.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/gaffer-functions.md#2025-04-23_snippet_18\n\nLANGUAGE: java\nCODE:\n```\nfinal ExtractWalkEntitiesFromHop function = new ExtractWalkEntitiesFromHop(1);\n```\n\n----------------------------------------\n\nTITLE: Implementing IterableMerge in Multiple Languages\nDESCRIPTION: Creates an IterableMerge operator that combines two Iterables into a single ChainedIterable. Used for merging collections like ArrayList and HashSet.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/binary-operators-guide/koryphe-operators.md#2025-04-23_snippet_27\n\nLANGUAGE: java\nCODE:\n```\nfinal IterableMerge iterableMerge = new IterableMerge();\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"uk.gov.gchq.koryphe.impl.binaryoperator.IterableMerge\"\n}\n```\n\nLANGUAGE: python\nCODE:\n```\ng.IterableMerge()\n```\n\n----------------------------------------\n\nTITLE: Querying and Estimating Vertex Degree with HyperLogLogPlus in Gaffer\nDESCRIPTION: Java code to query a Gaffer graph for an entity with a HyperLogLogPlus property and estimate its degree.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/properties-guide/advanced.md#2025-04-23_snippet_6\n\nLANGUAGE: java\nCODE:\n```\nfinal GetElements query = new GetElements.Builder()\n        .input(new EntitySeed(\"A\"))\n        .build();\nfinal Element element;\ntry (final Iterable<? extends Element> elements = graph.execute(query, user)) {\n    element = elements.iterator().next();\n}\nfinal HyperLogLogPlus hyperLogLogPlus = (HyperLogLogPlus) element.getProperty(\"approxCardinality\");\nfinal double approxDegree = hyperLogLogPlus.cardinality();\nfinal String degreeEstimate = \"Entity A has approximate degree \" + approxDegree;\n```\n\n----------------------------------------\n\nTITLE: Configuring ExtractValues in JSON\nDESCRIPTION: JSON configuration for the ExtractValues function that extracts all values from input Maps.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/koryphe-functions.md#2025-04-23_snippet_44\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"ExtractValues\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Full Right Join with ElementMatch in Gaffer (Python)\nDESCRIPTION: This Python code creates an OperationChain with a Join operation using ElementMatch. It performs a full right join on entities based on the 'count' property.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/join.md#2025-04-23_snippet_37\n\nLANGUAGE: python\nCODE:\n```\ng.OperationChain( \noperations=[ \n    g.Join( \n    operation=g.GetAllElements(), \n    match_method=g.ElementMatch(), \n    input=[ \n        g.Entity( \n        group=\"entity\", \n        properties={'count': 3}, \n        vertex=1 \n        ), \n        g.Entity( \n        group=\"entity\", \n        properties={'count': 1}, \n        vertex=4 \n        ), \n        g.Entity( \n        group=\"entity\", \n        properties={'count': 3}, \n        vertex=5 \n        ), \n        g.Entity( \n        group=\"entity\", \n        properties={'count': 30}, \n        vertex=6 \n        ) \n    ], \n    flatten=False, \n    match_key=\"RIGHT\", \n    join_type=\"FULL\" \n    ) \n] \n)\n```\n\n----------------------------------------\n\nTITLE: Reversing String Characters in Java\nDESCRIPTION: Creates a function that reverses the characters in a given string. This function takes a String input and returns the reversed string as output.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/koryphe-functions.md#2025-04-23_snippet_131\n\nLANGUAGE: java\nCODE:\n```\nfinal ReverseString function = new ReverseString();\n```\n\n----------------------------------------\n\nTITLE: Using CollectionIntersect with GetTraits in Gaffer FederatedStore\nDESCRIPTION: This example shows how to use the CollectionIntersect merge function with the GetTraits operation. This function returns the intersection of common store traits from the subgraphs in the federated store.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/federated-operation.md#2025-04-23_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"class\": \"uk.gov.gchq.gaffer.federatedstore.operation.FederatedOperation\",\n    \"operation\": {\n        \"class\": \"GetTraits\"\n    },\n    \"graphIds\": [\"GraphA\",\"GraphB\"],\n    \"mergeFunction\": {\n        \"class\": \"CollectionIntersect\"\n    }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n[\n    \"MATCHED_VERTEX\",\n    \"POST_TRANSFORMATION_FILTERING\",\n    \"INGEST_AGGREGATION\",\n    \"PRE_AGGREGATION_FILTERING\",\n    \"TRANSFORMATION\",\n    \"POST_AGGREGATION_FILTERING\"\n]\n```\n\n----------------------------------------\n\nTITLE: Initializing FirstItem in Java\nDESCRIPTION: Creates a FirstItem function that extracts the first item from a given Iterable. Type parameter specifies the element type.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/koryphe-functions.md#2025-04-23_snippet_46\n\nLANGUAGE: java\nCODE:\n```\nfinal FirstItem<Integer> function = new FirstItem<>();\n```\n\n----------------------------------------\n\nTITLE: Implementing Conditional Function (If) in Python\nDESCRIPTION: Python implementation of an If function that conditionally applies either ToUpperCase or ToLowerCase based on whether the input contains 'upper'. This function takes a String as input and returns a modified String.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/koryphe-functions.md#2025-04-23_snippet_72\n\nLANGUAGE: python\nCODE:\n```\ng.If( \n  predicate=g.StringContains( \n    value=\"upper\", \n    ignore_case=False \n  ), \n  then=g.ToUpperCase(), \n  otherwise=g.ToLowerCase() \n)\n```\n\n----------------------------------------\n\nTITLE: Multiplying Long Values with MultiplyLongBy in JSON\nDESCRIPTION: JSON configuration for a function that multiplies an input Long value by a specified constant. This defines the function class and the multiplication factor.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/koryphe-functions.md#2025-04-23_snippet_111\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"MultiplyLongBy\",\n  \"by\" : 2\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Full Schema in Python\nDESCRIPTION: This Python code demonstrates how to use the GetSchema operation in Gaffer's Python client to retrieve the full schema. The compact parameter is set to False.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/core.md#2025-04-23_snippet_89\n\nLANGUAGE: python\nCODE:\n```\ng.GetSchema(\n  compact=False\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring GafferPop Properties (Properties)\nDESCRIPTION: Example of a gafferpop.properties file content. It sets default values for operation modifiers like element retrieval limit and has step filter stage.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/administration-guide/gaffer-deployment/gremlin.md#2025-04-23_snippet_2\n\nLANGUAGE: properties\nCODE:\n```\n# Some default GafferPop configuration\ngaffer.elements.getlimit=20000\ngaffer.elements.hasstepfilterstage=PRE_AGGREGATION\n```\n\n----------------------------------------\n\nTITLE: Representing Graph Elements in JSON\nDESCRIPTION: This JSON snippet represents the same graph elements (entities and edges) as in the Java example, but in a structured JSON format. It includes details about vertices, edge directions, and count properties.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/join.md#2025-04-23_snippet_67\n\nLANGUAGE: json\nCODE:\n```\n[\n    {\n        \"values\": {\n            \"RIGHT\": {\n                \"class\": \"uk.gov.gchq.gaffer.data.element.Entity\",\n                \"group\": \"entity\",\n                \"vertex\": 1,\n                \"properties\": {\n                \"count\": 3\n                }\n            }\n        }\n    },\n    {\n        \"values\": {\n            \"RIGHT\": {\n                \"class\": \"uk.gov.gchq.gaffer.data.element.Edge\",\n                \"group\": \"edge\",\n                \"source\": 1,\n                \"destination\": 2,\n                \"directed\": true,\n                \"properties\": {\n                \"count\": 3\n                }\n            }\n        }\n    },\n    {\n        \"values\": {\n            \"RIGHT\": {\n                \"class\": \"uk.gov.gchq.gaffer.data.element.Edge\",\n                \"group\": \"edge\",\n                \"source\": 1,\n                \"destination\": 4,\n                \"directed\": true,\n                \"properties\": {\n                \"count\": 1\n                }\n            }\n        }\n    },\n    {\n        \"values\": {\n            \"RIGHT\": {\n                \"class\": \"uk.gov.gchq.gaffer.data.element.Entity\",\n                \"group\": \"entity\",\n                \"vertex\": 2,\n                \"properties\": {\n                \"count\": 1\n                }\n            }\n        }\n    },\n    {\n        \"values\": {\n            \"RIGHT\": {\n                \"class\": \"uk.gov.gchq.gaffer.data.element.Edge\",\n                \"group\": \"edge\",\n                \"source\": 2,\n                \"destination\": 4,\n                \"directed\": true,\n                \"properties\": {\n                \"count\": 1\n                }\n            }\n        }\n    },\n    {\n        \"values\": {\n            \"RIGHT\": {\n                \"class\": \"uk.gov.gchq.gaffer.data.element.Edge\",\n                \"group\": \"edge\",\n                \"source\": 2,\n                \"destination\": 5,\n                \"directed\": true,\n                \"properties\": {\n                \"count\": 1\n                }\n            }\n        }\n    },\n    {\n        \"values\": {\n            \"RIGHT\": {\n                \"class\": \"uk.gov.gchq.gaffer.data.element.Edge\",\n                \"group\": \"edge\",\n                \"source\": 3,\n                \"destination\": 4,\n                \"directed\": true,\n                \"properties\": {\n                \"count\": 4\n                }\n            }\n        }\n    },\n    {\n        \"values\": {\n            \"RIGHT\": {\n                \"class\": \"uk.gov.gchq.gaffer.data.element.Entity\",\n                \"group\": \"entity\",\n                \"vertex\": 4,\n                \"properties\": {\n                \"count\": 1\n                }\n            }\n        }\n    },\n    {\n        \"values\": {\n            \"RIGHT\": {\n                \"class\": \"uk.gov.gchq.gaffer.data.element.Entity\",\n                \"group\": \"entity\",\n                \"vertex\": 5,\n                \"properties\": {\n                \"count\": 3\n                }\n            }\n        }\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Implementing HyperLogLogPlusIsLessThan with Equal To Comparison\nDESCRIPTION: Creates a HyperLogLogPlusIsLessThan predicate that tests if a cardinality is less than or equal to 2. The orEqualTo parameter is set to true to include equality in the comparison.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/predicates-guide/gaffer-predicates.md#2025-04-23_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nfinal HyperLogLogPlusIsLessThan function = new HyperLogLogPlusIsLessThan(2, true);\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"HyperLogLogPlusIsLessThan\",\n  \"orEqualTo\" : true,\n  \"value\" : 2\n}\n```\n\nLANGUAGE: python\nCODE:\n```\ng.HyperLogLogPlusIsLessThan( \n  value=2, \n  or_equal_to=True\n)\n```\n\n----------------------------------------\n\nTITLE: Sample Results of GetWalks Operation in Java\nDESCRIPTION: This Java code snippet shows the sample results of the GetWalks operation, displaying the walks of length 2 starting from vertex 1. Each line represents a different walk, showing the vertices traversed in the walk.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/get.md#2025-04-23_snippet_40\n\nLANGUAGE: java\nCODE:\n```\nuk.gov.gchq.gaffer.data.graph.Walk[ 1 --> 5 --> 8 ]\nuk.gov.gchq.gaffer.data.graph.Walk[ 1 --> 5 --> 1 ]\nuk.gov.gchq.gaffer.data.graph.Walk[ 1 --> 5 --> 2 ]\nuk.gov.gchq.gaffer.data.graph.Walk[ 1 --> 2 --> 1 ]\nuk.gov.gchq.gaffer.data.graph.Walk[ 1 --> 2 --> 3 ]\n```\n\n----------------------------------------\n\nTITLE: Initializing ExtractWalkEdges in Java\nDESCRIPTION: Creates a new ExtractWalkEdges function to extract all sets of edges from a given Walk. This function takes no parameters and returns a List of ALL Sets of Edges.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/gaffer-functions.md#2025-04-23_snippet_12\n\nLANGUAGE: java\nCODE:\n```\nfinal ExtractWalkEdges function = new ExtractWalkEdges();\n```\n\n----------------------------------------\n\nTITLE: Defining IsIn Predicate in JSON\nDESCRIPTION: JSON representation of the IsIn predicate with a set of allowed values (5, 5L, \"5\", '5'). Can be used in Gaffer schema or operation definitions.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/predicates-guide/koryphe-predicates.md#2025-04-23_snippet_71\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"IsIn\",\n  \"values\" : [ 5, {\n    \"Long\" : 5\n  }, \"5\", {\n    \"Character\" : \"5\"\n  } ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Types Schema for LongsSketch Integration in Gaffer\nDESCRIPTION: JSON configuration for types schema defining the 'longs.sketch' type, which uses the Apache Datasketches LongsSketch class along with appropriate serializer and aggregator functions.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/properties-guide/advanced.md#2025-04-23_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"types\": {\n    \"vertex.string\": {\n      \"class\": \"java.lang.String\",\n      \"validateFunctions\": [\n        {\n          \"class\": \"uk.gov.gchq.koryphe.impl.predicate.Exists\"\n        }\n      ]\n    },\n    \"longs.sketch\": {\n      \"class\": \"org.apache.datasketches.frequencies.LongsSketch\",\n      \"aggregateFunction\": {\n        \"class\": \"uk.gov.gchq.gaffer.sketches.datasketches.frequencies.binaryoperator.LongsSketchAggregator\"\n      },\n      \"serialiser\": {\n        \"class\": \"uk.gov.gchq.gaffer.sketches.datasketches.frequencies.serialisation.LongsSketchSerialiser\"\n      }\n    },\n    \"false\": {\n      \"class\": \"java.lang.Boolean\",\n      \"validateFunctions\": [\n        {\n          \"class\": \"uk.gov.gchq.koryphe.impl.predicate.IsFalse\"\n        }\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Increment Function with Integer in JSON\nDESCRIPTION: JSON representation of an Increment function that adds a fixed integer value (3) to numeric inputs.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/koryphe-functions.md#2025-04-23_snippet_74\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"Increment\",\n  \"increment\" : 3\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing FirstValid with Predicate in Java\nDESCRIPTION: Creates a FirstValid function with a predicate that returns the first item in an Iterable that passes the predicate test. Uses StringContains as the predicate.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/koryphe-functions.md#2025-04-23_snippet_49\n\nLANGUAGE: java\nCODE:\n```\nfinal FirstValid function = new FirstValid(new StringContains(\"my\"));\n```\n\n----------------------------------------\n\nTITLE: Implementing IsLessThan with String in Java\nDESCRIPTION: Creates an IsLessThan predicate that checks if a string input is lexicographically less than \"B\". Demonstrates using IsLessThan with string values rather than numbers.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/predicates-guide/koryphe-predicates.md#2025-04-23_snippet_79\n\nLANGUAGE: java\nCODE:\n```\nfinal IsLessThan function = new IsLessThan(\"B\");\n```\n\n----------------------------------------\n\nTITLE: Implementing IsLongerThan-OrEqual Predicate in Java\nDESCRIPTION: Creates an IsLongerThan predicate that checks if the length of an input object is greater than or equal to 5. The second parameter (true) enables the inclusive comparison.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/predicates-guide/koryphe-predicates.md#2025-04-23_snippet_94\n\nLANGUAGE: java\nCODE:\n```\nfinal IsLongerThan predicate = new IsLongerThan(5, true);\n```\n\n----------------------------------------\n\nTITLE: Initializing InRange Function with Unbounded Start in Java\nDESCRIPTION: Creates an InRange function for Long values less than 10 (exclusive). This demonstrates how to create a range check with an unbounded start.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/predicates-guide/koryphe-predicates.md#2025-04-23_snippet_54\n\nLANGUAGE: java\nCODE:\n```\nfinal InRange function = new InRange.Builder<Long>()\n        .end(10L)\n        .endInclusive(false)\n        .build();\n```\n\n----------------------------------------\n\nTITLE: Sorting Elements by Count Property with Deduplication\nDESCRIPTION: Example of sorting graph elements by their count property with default deduplication enabled. Uses an OperationChain combining GetElements and Sort operations with a result limit of 10.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/core.md#2025-04-23_snippet_33\n\nLANGUAGE: java\nCODE:\n```\nfinal OperationChain<Iterable<? extends Element>> opChain = new OperationChain.Builder()\n        .first(new GetElements.Builder()\n                .input(new EntitySeed(1), new EntitySeed(2))\n                .build())\n        .then(new Sort.Builder()\n                .comparators(new ElementPropertyComparator.Builder()\n                        .groups(\"entity\", \"edge\")\n                        .property(\"count\")\n                        .reverse(false)\n                        .build())\n                .resultLimit(10)\n                .build())\n        .build();\n```\n\nLANGUAGE: python\nCODE:\n```\ng.OperationChain(\n  operations=[\n    g.GetElements(\n      input=[\n        g.EntitySeed(\n          vertex=1\n        ),\n        g.EntitySeed(\n          vertex=2\n        )\n      ]\n    ),\n    g.Sort(\n      comparators=[\n        g.ElementPropertyComparator(\n          groups=[\n            \"entity\",\n            \"edge\"\n          ],\n          property=\"count\",\n          reversed=False\n        )\n      ],\n      result_limit=10,\n      deduplicate=True\n    )\n  ]\n)\n```\n\n----------------------------------------\n\nTITLE: Converting Single Input to List with ToSingletonList in JSON\nDESCRIPTION: JSON representation of the ToSingletonList operation that converts a single integer input (4) to a List. The operation class name and input are specified as JSON properties.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/core.md#2025-04-23_snippet_61\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"ToSingletonList\",\n  \"input\" : 4\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing StringJoin Function with Delimiter in Java\nDESCRIPTION: Creates a StringJoin function with a hyphen delimiter that joins strings in an iterable collection. Takes an Iterable as input and returns a String with all elements joined with the specified delimiter.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/koryphe-functions.md#2025-04-23_snippet_143\n\nLANGUAGE: java\nCODE:\n```\nfinal StringJoin function = new StringJoin(\"-\");\n```\n\n----------------------------------------\n\nTITLE: Implementing Numeric Sum Calculation in JSON\nDESCRIPTION: JSON representation of the Sum operator that calculates the sum of two numbers.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/binary-operators-guide/koryphe-operators.md#2025-04-23_snippet_19\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"uk.gov.gchq.koryphe.impl.binaryoperator.Sum\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Local File Operations in Gaffer JSON\nDESCRIPTION: JSON configuration to enable ImportFromLocalFile and ExportToLocalFile operations in Gaffer. This configuration specifies the operations and their handlers.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/user-guide/query/gaffer-syntax/import-export/csv.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"operations\": [\n        {\n            \"operation\": \"uk.gov.gchq.gaffer.operation.impl.export.localfile.ImportFromLocalFile\",\n            \"handler\": {\n                \"class\": \"uk.gov.gchq.gaffer.store.operation.handler.export.localfile.ImportFromLocalFileHandler\"\n            }\n        },\n        {\n            \"operation\": \"uk.gov.gchq.gaffer.operation.impl.export.localfile.ExportToLocalFile\",\n            \"handler\": {\n                \"class\": \"uk.gov.gchq.gaffer.store.operation.handler.export.localfile.ExportToLocalFileHandler\"\n            }\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Types Schema for BoundedTimestampSet in Gaffer (JSON)\nDESCRIPTION: This JSON snippet defines the types schema, including the 'bounded.timestamp.set' type which uses the BoundedTimestampSet class. It specifies the aggregator and serializer for the BoundedTimestampSet, limiting the set to 25 timestamps before sampling.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/properties-guide/map-set.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"types\": {\n    \"vertex.string\": {\n      \"class\": \"java.lang.String\",\n      \"validateFunctions\": [\n        {\n          \"class\": \"uk.gov.gchq.koryphe.impl.predicate.Exists\"\n        }\n      ]\n    },\n    \"bounded.timestamp.set\": {\n      \"class\": \"uk.gov.gchq.gaffer.time.BoundedTimestampSet\",\n      \"aggregateFunction\": {\n        \"class\": \"uk.gov.gchq.gaffer.time.binaryoperator.BoundedTimestampSetAggregator\"\n      },\n      \"serialiser\": {\n        \"class\": \"uk.gov.gchq.gaffer.time.serialisation.BoundedTimestampSetSerialiser\"\n      }\n    },\n    \"false\": {\n      \"class\": \"java.lang.Boolean\",\n      \"validateFunctions\": [\n        {\n          \"class\": \"uk.gov.gchq.koryphe.impl.predicate.IsFalse\"\n        }\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Base64Decode in JSON\nDESCRIPTION: Demonstrates the JSON configuration for a Base64Decode function. This can be used in Gaffer's graph configuration files.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/koryphe-functions.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"Base64Decode\"\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing FreqMapExtractor in Java\nDESCRIPTION: Creates a new FreqMapExtractor function to extract a count from a frequency map for a given key. The key parameter specifies which key to extract the count for.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/gaffer-functions.md#2025-04-23_snippet_24\n\nLANGUAGE: java\nCODE:\n```\nfinal FreqMapExtractor function = new FreqMapExtractor(\"key1\");\n```\n\n----------------------------------------\n\nTITLE: Implementing ElementMatch Join Operation\nDESCRIPTION: Demonstrates a left outer join operation using ElementMatch to compare elements based on the 'count' property. Shows how to construct an OperationChain with Join operation using ElementMatch as the matching method.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/join.md#2025-04-23_snippet_50\n\nLANGUAGE: java\nCODE:\n```\nfinal OperationChain<Iterable<? extends MapTuple>> opChain = new OperationChain.Builder()\n        .first(new Join.Builder<>()\n                .input(inputElements)\n                .operation(new GetAllElements())\n                .joinType(JoinType.OUTER)\n                .matchKey(MatchKey.LEFT)\n                .matchMethod(new ElementMatch(\"count\"))\n                .build())\n        .build();\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n\"class\" : \"OperationChain\",\n\"operations\" : [ {\n    \"class\" : \"Join\",\n    \"input\" : [ {\n    \"class\" : \"Entity\",\n    \"group\" : \"entity\",\n    \"vertex\" : 1,\n    \"properties\" : {\n        \"count\" : 3\n    }\n    }, {\n    \"class\" : \"Entity\",\n    \"group\" : \"entity\",\n    \"vertex\" : 4,\n    \"properties\" : {\n        \"count\" : 1\n    }\n    }, {\n    \"class\" : \"Entity\",\n    \"group\" : \"entity\",\n    \"vertex\" : 5,\n    \"properties\" : {\n        \"count\" : 3\n    }\n    }, {\n    \"class\" : \"Entity\",\n    \"group\" : \"entity\",\n    \"vertex\" : 6,\n    \"properties\" : {\n        \"count\" : 30\n    }\n    } ],\n    \"operation\" : {\n    \"class\" : \"GetAllElements\"\n    },\n    \"matchMethod\" : {\n    \"class\" : \"ElementMatch\"\n    },\n    \"matchKey\" : \"LEFT\",\n    \"joinType\" : \"OUTER\"\n} ]\n}\n```\n\nLANGUAGE: python\nCODE:\n```\ng.OperationChain( \noperations=[ \n    g.Join( \n    operation=g.GetAllElements(), \n    match_method=g.ElementMatch(), \n    input=[ \n        g.Entity( \n        group=\"entity\", \n        properties={'count': 3}, \n        vertex=1 \n        ), \n        g.Entity( \n        group=\"entity\", \n        properties={'count': 1}, \n        vertex=4 \n        ), \n        g.Entity( \n        group=\"entity\", \n        properties={'count': 3}, \n        vertex=5 \n        ), \n        g.Entity( \n        group=\"entity\", \n        properties={'count': 30}, \n        vertex=6 \n        ) \n    ], \n    match_key=\"LEFT\", \n    join_type=\"OUTER\" \n    ) \n] \n)\n```\n\n----------------------------------------\n\nTITLE: Automatic Cardinality Generation in Python\nDESCRIPTION: Python implementation of automatic cardinality entity generation using OperationChain.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/user-guide/gaffer-basics/what-is-cardinality.md#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ng.OperationChain([\n    g.GenerateElements(\n        input=[g.Edge(\"edgeGroup1\", \"A\", \"B\", True)],\n        element_generator=g.HllSketchEntityGenerator(\n            cardinality_property_name=\"approxCardinality\",\n            group=\"cardinality\",\n            edge_group_property=\"edgeGroup\"\n        )\n    ),\n    g.AddElements()\n])\n```\n\n----------------------------------------\n\nTITLE: Implementing StringConcat with Default Separator\nDESCRIPTION: Creates a StringConcat operator that concatenates two strings using the default comma separator. Handles null inputs gracefully.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/binary-operators-guide/koryphe-operators.md#2025-04-23_snippet_29\n\nLANGUAGE: java\nCODE:\n```\nfinal StringConcat stringConcat = new StringConcat();\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"uk.gov.gchq.koryphe.impl.binaryoperator.StringConcat\",\n  \"separator\" : \",\"\n}\n```\n\nLANGUAGE: python\nCODE:\n```\ng.StringConcat()\n```\n\n----------------------------------------\n\nTITLE: Implementing IsA Type Check\nDESCRIPTION: Creates an IsA predicate that checks if an input object is an instance of a specified class type.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/predicates-guide/koryphe-predicates.md#2025-04-23_snippet_62\n\nLANGUAGE: java\nCODE:\n```\nfinal IsA function = new IsA(String.class);\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"IsA\",\n  \"type\" : \"java.lang.String\"\n}\n```\n\nLANGUAGE: python\nCODE:\n```\ng.IsA(\n  type=\"java.lang.String\"\n)\n```\n\n----------------------------------------\n\nTITLE: Creating InDateRangeDual with fully contained exclusive range in Java\nDESCRIPTION: Configures an InDateRangeDual function requiring input ranges to be fully contained within an exclusive date range. Accepts only date ranges that fall completely between just after 2017/03/01 00:00:00 and just before 2017/08/01 00:00:00.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/predicates-guide/koryphe-predicates.md#2025-04-23_snippet_42\n\nLANGUAGE: java\nCODE:\n```\nfinal InDateRangeDual function = new InDateRangeDual.Builder()\n        .start(\"2017/03/01\")\n        .end(\"2017/08/01\")\n        .startFullyContained(true)\n        .endFullyContained(true)\n        .startInclusive(false)\n        .endInclusive(false)\n        .build();\n```\n\n----------------------------------------\n\nTITLE: Removing Graph using RemoveGraph Operation\nDESCRIPTION: Operation to remove a graph from a Federated Store by its ID. This only removes the graph from store scope without deleting data.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/administration-guide/gaffer-stores/federated-store.md#2025-04-23_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"RemoveGraph\",\n  \"graphId\" : \"AnotherGraph\"\n}\n```\n\nLANGUAGE: java\nCODE:\n```\nRemoveGraph removeGraph = new RemoveGraph.Builder()\n        .graphId(\"AnotherGraph\")\n        .build();\nfederatedGraph.execute(removeGraph, user);\n```\n\n----------------------------------------\n\nTITLE: Result of ToStream in JSON\nDESCRIPTION: JSON representation of the result from the ToStream operation, showing a Stream object with the parallel flag set to false, indicating a sequential stream.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/core.md#2025-04-23_snippet_74\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"parallel\" : false\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Exclusive InRange Function in Python\nDESCRIPTION: Python code to create an InRange function with exclusive boundaries for Long values between 5 and 10. Used in Gaffer's Python client for precise range checks.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/predicates-guide/koryphe-predicates.md#2025-04-23_snippet_53\n\nLANGUAGE: python\nCODE:\n```\ng.InRange(\n  start=g.long(5),\n  end=g.long(10),\n  start_inclusive=False,\n  end_inclusive=False\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing ToLowerCase Function in Java\nDESCRIPTION: Creates a new instance of the ToLowerCase function, which converts input to lowercase. It accepts various input types and returns a String result.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/koryphe-functions.md#2025-04-23_snippet_171\n\nLANGUAGE: java\nCODE:\n```\nfinal ToLowerCase function = new ToLowerCase();\n```\n\n----------------------------------------\n\nTITLE: Deploying Accumulo Garbage Collector Node\nDESCRIPTION: Docker command to deploy the Accumulo garbage collector node that handles cleanup operations in the Accumulo cluster.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/administration-guide/gaffer-deployment/gaffer-docker/how-to-run.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ndocker run \\\n       --detach \\\n       --name accumulo-gc \\\n       --hostname accumulo-gc \\\n       --net gaffer-example \\\n       --env ACCUMULO_CONF_DIR=\"/etc/accumulo/conf\" \\\n       --env HADOOP_USER_NAME=\"hadoop\" \\\n       --volume /custom/configs/accumulo:/etc/accumulo/conf \\\n       --volume /var/log/accumulo \\\n       gchq/gaffer:2.0.0-accumulo-2.0.1 gc\n```\n\n----------------------------------------\n\nTITLE: Defining IsMoreThan Predicate in JSON\nDESCRIPTION: JSON representation of the IsMoreThan predicate with value 5 and orEqualTo flag set to false. Can be used in Gaffer schema or operation definitions.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/predicates-guide/koryphe-predicates.md#2025-04-23_snippet_83\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"IsMoreThan\",\n  \"orEqualTo\" : false,\n  \"value\" : 5\n}\n```\n\n----------------------------------------\n\nTITLE: Sampling Data for Split Points in Java\nDESCRIPTION: This code snippet demonstrates how to use the SampleDataForSplitPoints operation to generate split points for an Accumulo table. It samples a percentage of data from HDFS and produces a file of split points.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/administration-guide/gaffer-stores/accumulo-store.md#2025-04-23_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nSampleDataForSplitPoints sample = new SampleDataForSplitPoints.Builder()\n        .addInputPath(inputPath)\n        .splitsFile(splitsFilePath)\n        .outputPath(outputPath)\n        .jobInitialiser(jobInitialiser)\n        .validate(true)\n        .proportionToSample(0.01F)\n        .mapperGenerator(myMapperGeneratorClass)\n        .build();\ngraph.execute(sample, new User());\n```\n\n----------------------------------------\n\nTITLE: Implementing Increment Function with Integer in Python\nDESCRIPTION: Python implementation of an Increment function that adds a fixed integer value (3) to numeric inputs.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/koryphe-functions.md#2025-04-23_snippet_75\n\nLANGUAGE: python\nCODE:\n```\ng.Increment( \n  increment=3 \n)\n```\n\n----------------------------------------\n\nTITLE: Configuring CallMethod with toString in JSON\nDESCRIPTION: Shows the JSON configuration for CallMethod using the toString method. This can be used in Gaffer's graph configuration to set up the function.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/koryphe-functions.md#2025-04-23_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"CallMethod\",\n  \"method\" : \"toString\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring MapContainsPredicate with Regex in JSON\nDESCRIPTION: JSON configuration for a MapContainsPredicate that checks if a map contains any key matching the regex pattern 'a.*'. The keyPredicate parameter contains the nested Regex predicate.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/predicates-guide/koryphe-predicates.md#2025-04-23_snippet_110\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"MapContainsPredicate\",\n  \"keyPredicate\" : {\n    \"class\" : \"Regex\",\n    \"value\" : {\n      \"java.util.regex.Pattern\" : \"a.*\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Nested Named Operations Example - JSON Configuration\nDESCRIPTION: JSON configuration for nested Named Operations showing two operations with one referencing the other.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/administration-guide/named-operations.md#2025-04-23_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"class\": \"AddNamedOperation\",\n    \"operationName\": \"namedOp1\",\n    \"description\": \"Simple named operation\",\n    \"operationChain\": {\n        \"operations\": [{\n            \"class\": \"GetElements\",\n            \"input\": [\n                {\n                    \"class\": \"EntitySeed\",\n                    \"vertex\": 1\n                }]\n        }]\n    },\n    \"overwriteFlag\": true\n}\n\n{\n    \"class\": \"AddNamedOperation\",\n    \"operationName\": \"namedOp2\",\n    \"description\": \"A nested named operation\",\n    \"operationChain\": {\n        \"operations\": [{\n            \"class\": \"NamedOperation\",\n            \"operationName\": \"namedOp1\"\n        }]\n    },\n    \"overwriteFlag\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing IterableLongest Function\nDESCRIPTION: Function that returns the longest item from an iterable collection. Works with arrays, strings and other iterable types.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/koryphe-functions.md#2025-04-23_snippet_100\n\nLANGUAGE: java\nCODE:\n```\nfinal IterableLongest function = new IterableLongest();\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"IterableLongest\"\n}\n```\n\nLANGUAGE: python\nCODE:\n```\ng.IterableLongest()\n```\n\n----------------------------------------\n\nTITLE: Manual Cardinality Addition in JSON\nDESCRIPTION: JSON example showing how to manually add cardinality entities using AddElements operation.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/user-guide/gaffer-basics/what-is-cardinality.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"class\": \"AddElements\",\n    \"input\": [{\n        \"class\": \"Entity\",\n        \"vertex\": \"A\",\n        \"group\": \"cardinality\",\n        \"properties\": {\n            \"approxCardinality\": {\n                \"org.apache.datasketches.hll.HllSketch\": {\n                    \"values\": [\"B\"]\n                }\n            }\n        }\n    }]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating IsMoreThan Predicate in Python\nDESCRIPTION: Python implementation of the IsMoreThan predicate using the Gaffer Python client. Configures the predicate to check if the input is greater than 5.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/predicates-guide/koryphe-predicates.md#2025-04-23_snippet_84\n\nLANGUAGE: python\nCODE:\n```\ng.IsMoreThan(\n  value=5,\n  or_equal_to=False\n)\n```\n\n----------------------------------------\n\nTITLE: String to Bytes Conversion\nDESCRIPTION: Function to convert strings to byte arrays using specified character encoding. Takes charset as a parameter.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/koryphe-functions.md#2025-04-23_snippet_166\n\nLANGUAGE: java\nCODE:\n```\nfinal ToBytes toBytes = new ToBytes(StandardCharsets.UTF_16);\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"ToBytes\",\n  \"charset\" : \"UTF-16\"\n}\n```\n\nLANGUAGE: python\nCODE:\n```\ng.ToBytes( \n  charset=\"UTF-16\" \n)\n```\n\n----------------------------------------\n\nTITLE: Implementing FunctionChain with Standard Functions in Python\nDESCRIPTION: Python implementation of a FunctionChain that applies ToLowerCase, ToTypeSubTypeValue, and ToEntityId functions consecutively. This chain converts a string to lowercase, then to a TypeSubTypeValue, and finally to an EntityId.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/koryphe-functions.md#2025-04-23_snippet_60\n\nLANGUAGE: python\nCODE:\n```\ng.FunctionChain( \n  functions=[ \n    g.ToLowerCase(), \n    g.ToTypeSubTypeValue(), \n    g.ToEntityId() \n  ] \n)\n```\n\n----------------------------------------\n\nTITLE: Gaffer Application Properties Configuration\nDESCRIPTION: Basic configuration for Gaffer REST endpoint specifying locations of schema, store properties and graph config files.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/administration-guide/gaffer-config/config.md#2025-04-23_snippet_1\n\nLANGUAGE: properties\nCODE:\n```\ngaffer.schemas=/gaffer/schema\ngaffer.storeProperties=/gaffer/store/store.properties\ngaffer.graph.config=/gaffer/graph/graphConfig.json\n```\n\n----------------------------------------\n\nTITLE: Configuring ExtractWalkEdgesFromHop in JSON\nDESCRIPTION: JSON configuration for the ExtractWalkEdgesFromHop function. This configuration specifies the class name and the hop parameter.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/gaffer-functions.md#2025-04-23_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"ExtractWalkEdgesFromHop\",\n  \"hop\" : 1\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing exclusive date range in Python\nDESCRIPTION: Python code to create an InDateRange predicate with exclusive boundaries (non-inclusive). The range is from January 1, 2017 to February 1, 2017.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/predicates-guide/koryphe-predicates.md#2025-04-23_snippet_23\n\nLANGUAGE: python\nCODE:\n```\ng.InDateRange(\n  start=\"2017/01/01\",\n  end=\"2017/02/01\",\n  start_inclusive=False,\n  end_inclusive=False\n)\n```\n\n----------------------------------------\n\nTITLE: Single Operation to One Subgraph\nDESCRIPTION: Example showing how to send a single GetAllElements operation to one specific subgraph in the Federated Store.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/federated-operation.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"class\": \"uk.gov.gchq.gaffer.federatedstore.operation.FederatedOperation\",\n    \"operation\": {\n        \"class\": \"uk.gov.gchq.gaffer.operation.impl.get.GetAllElements\"\n    },\n    \"graphIds\": [ \"GraphA\" ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Conditional Function (If) in JSON\nDESCRIPTION: JSON configuration for an If function that conditionally applies either ToUpperCase or ToLowerCase based on whether the input contains 'upper'. This function takes a String as input and returns a modified String.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/koryphe-functions.md#2025-04-23_snippet_71\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"uk.gov.gchq.koryphe.impl.function.If\",\n  \"predicate\" : {\n    \"class\" : \"StringContains\",\n    \"value\" : \"upper\",\n    \"ignoreCase\" : false\n  },\n  \"then\" : {\n    \"class\" : \"ToUpperCase\"\n  },\n  \"otherwise\" : {\n    \"class\" : \"ToLowerCase\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing ToTypeValue Function in Java\nDESCRIPTION: Creates a new ToTypeValue function that converts input objects into TypeValue instances. This function is used to create TypeValue objects from various input types.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/gaffer-functions.md#2025-04-23_snippet_44\n\nLANGUAGE: java\nCODE:\n```\nFunction toTypeValue = new ToTypeValue();\n```\n\n----------------------------------------\n\nTITLE: Configuring Gunzip Function in JSON\nDESCRIPTION: JSON configuration for a Gunzip function to decompress gzipped data. This function takes a byte array of compressed data as input and returns a byte array of decompressed data.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/koryphe-functions.md#2025-04-23_snippet_65\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"Gunzip\"\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing LastItem Function\nDESCRIPTION: Function to extract the last item from an Iterable. Takes a generic type parameter to specify the type of elements in the collection.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/koryphe-functions.md#2025-04-23_snippet_101\n\nLANGUAGE: java\nCODE:\n```\nfinal LastItem<Integer> function = new LastItem<>();\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"LastItem\"\n}\n```\n\nLANGUAGE: python\nCODE:\n```\ng.LastItem()\n```\n\n----------------------------------------\n\nTITLE: Retrieving Scheduled Job Details in Java\nDESCRIPTION: This snippet demonstrates how to create an OperationChain to retrieve details of a scheduled job using the GetJobDetails operation in Java.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/job.md#2025-04-23_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nfinal OperationChain<JobDetail> operationChain = new OperationChain.Builder()\n        .first(new GetJobDetails.Builder().jobId(jobId).build())\n        .build();\n```\n\n----------------------------------------\n\nTITLE: Multiplying Long Values with MultiplyLongBy in Python\nDESCRIPTION: Python implementation of a function that multiplies an input Long value by a specified constant. Takes a Long input and returns a Long result.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/koryphe-functions.md#2025-04-23_snippet_112\n\nLANGUAGE: python\nCODE:\n```\ng.MultiplyLongBy( \n  by=2 \n)\n```\n\n----------------------------------------\n\nTITLE: Converting Values to String with cypherToString\nDESCRIPTION: Demonstrates using cypherToString() to convert vertex age values to string type.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/gremlin-guide/custom-functions.md#2025-04-23_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\ng.V().values('age').map(cypherToString())\n```\n\n----------------------------------------\n\nTITLE: Initializing DivideBy in Java\nDESCRIPTION: Creates a DivideBy function that divides an input integer by a fixed divisor and returns a Tuple2 with quotient and remainder.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/koryphe-functions.md#2025-04-23_snippet_34\n\nLANGUAGE: java\nCODE:\n```\nfinal DivideBy function = new DivideBy(2);\n```\n\n----------------------------------------\n\nTITLE: Using ExtractWalkEdges in Python\nDESCRIPTION: Python code to create an ExtractWalkEdges function. This function extracts all sets of edges from a given Walk.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/gaffer-functions.md#2025-04-23_snippet_14\n\nLANGUAGE: python\nCODE:\n```\ng.ExtractWalkEdges()\n```\n\n----------------------------------------\n\nTITLE: Deploying ZooKeeper Container for Accumulo\nDESCRIPTION: Docker command to run a ZooKeeper container for distributed synchronization, configuring hostname, ports, and volumes for data storage.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/administration-guide/gaffer-deployment/gaffer-docker/how-to-run.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker run \\\n       --detach \\\n       --name zookeeper \\\n       --hostname zookeeper \\\n       --net gaffer-example \\\n       --env ZOO_SERVERS=\"server.1=zookeeper:2888:3888;2181\" \\\n       --env ZOO_4LW_COMMANDS_WHITELIST=\"*\" \\\n       --volume /data \\\n       --volume /datalog \\\n       zookeeper:3.7.1\n```\n\n----------------------------------------\n\nTITLE: Filtered GetElementsWithinSet Operation in Python\nDESCRIPTION: This Python example demonstrates a complex use of the GetElementsWithinSet operation, including a view that filters elements based on their 'count' property. It retrieves elements within vertices 1, 2, and 3, but only if their count is greater than 2.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/accumulo.md#2025-04-23_snippet_16\n\nLANGUAGE: python\nCODE:\n```\ng.GetElementsWithinSet(\n  view=g.View(\n    entities=[\n      g.ElementDefinition(\n        group=\"entity\",\n        pre_aggregation_filter_functions=[\n          g.PredicateContext(\n            selection=[\n              \"count\"\n            ],\n            predicate=g.IsMoreThan(\n              value=2,\n              or_equal_to=False\n            )\n          )\n        ]\n      )\n    ],\n    edges=[\n      g.ElementDefinition(\n        group=\"edge\",\n        pre_aggregation_filter_functions=[\n          g.PredicateContext(\n            selection=[\n              \"count\"\n            ],\n            predicate=g.IsMoreThan(\n              value=2,\n              or_equal_to=False\n            )\n          )\n        ]\n      )\n    ],\n    all_edges=False,\n    all_entities=False\n  ),\n  input=[\n    g.EntitySeed(\n      vertex=1\n    ),\n    g.EntitySeed(\n      vertex=2\n    ),\n    g.EntitySeed(\n      vertex=3\n    )\n  ]\n)\n```\n\n----------------------------------------\n\nTITLE: Deploying an Accumulo Store Graph with Helm\nDESCRIPTION: Command to install a Gaffer graph with an Accumulo Store for persistent storage, using the accumulo.yaml configuration file created earlier.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/administration-guide/gaffer-deployment/kubernetes-guide/simple-deployment.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nhelm install my-graph gaffer-docker/gaffer -f accumulo.yaml\n```\n\n----------------------------------------\n\nTITLE: Implementing Increment Function with Double in Java\nDESCRIPTION: Creates an Increment function that adds a fixed double value (3.0) to numeric inputs. Returns double results regardless of input type.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/koryphe-functions.md#2025-04-23_snippet_76\n\nLANGUAGE: java\nCODE:\n```\nfinal Increment increment = new Increment(3.0);\n```\n\n----------------------------------------\n\nTITLE: Using ToString Function in Python\nDESCRIPTION: Python code to create a ToString function instance using the Gaffer Python client library.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/koryphe-functions.md#2025-04-23_snippet_182\n\nLANGUAGE: python\nCODE:\n```\ng.ToString()\n```\n\n----------------------------------------\n\nTITLE: Appending a Suffix to Strings in JSON\nDESCRIPTION: JSON configuration for a function that appends a specified suffix to an input string. This configuration defines the function class and the suffix to append.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/koryphe-functions.md#2025-04-23_snippet_138\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"StringAppend\",\n  \"suffix\" : \"mySuffix\"\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing DictionaryLookup in Java\nDESCRIPTION: Creates a DictionaryLookup function that looks up values in a provided map. Requires a map to be passed to the constructor.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/koryphe-functions.md#2025-04-23_snippet_28\n\nLANGUAGE: java\nCODE:\n```\nfinal DictionaryLookup<Integer, String> dictionaryLookup = new DictionaryLookup<>(map);\n```\n\n----------------------------------------\n\nTITLE: Automatic Cardinality Generation in Java\nDESCRIPTION: Java implementation of automatic cardinality entity generation using HllSketchEntityGenerator.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/user-guide/gaffer-basics/what-is-cardinality.md#2025-04-23_snippet_6\n\nLANGUAGE: java\nCODE:\n```\nnew OperationChain.Builder()\n        .first(new GenerateElements.Builder<Element>()\n                .input(new Edge(\"edgeGroup1\", \"A\", \"B\", true))\n                .generator(new HllSketchEntityGenerator()\n                    .cardinalityPropertyName(\"approxCardinality\")\n                    .group(\"cardinality\")\n                    .edgeGroupProperty(\"edgeGroup\")\n                    .propertiesToCopy(...))\n                .build())\n        .then(new AddElements())\n        .build();\n```\n\n----------------------------------------\n\nTITLE: Gaffer Store Properties Configuration\nDESCRIPTION: Store properties configuration for an Accumulo store, including basic store class settings and Accumulo-specific connection details.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/administration-guide/gaffer-config/config.md#2025-04-23_snippet_3\n\nLANGUAGE: properties\nCODE:\n```\n# Default properties\ngaffer.store.class=uk.gov.gchq.gaffer.accumulostore.AccumuloStore\ngaffer.store.properties.class=uk.gov.gchq.gaffer.accumulostore.AccumuloProperties\n\n# Accumulo specific config\naccumulo.instance=accumulo\naccumulo.zookeepers=zookeeper\naccumulo.user=root\naccumulo.password=secret\n```\n\n----------------------------------------\n\nTITLE: Adding Elements From Socket - JSON Configuration\nDESCRIPTION: JSON configuration for AddElementsFromSocket operation specifying socket connection and processing parameters.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/flink.md#2025-04-23_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n\"class\" : \"AddElementsFromSocket\",\n\"hostname\" : \"localhost\",\n\"port\" : 8080,\n\"elementGenerator\" : \"ElementGenerator\",\n\"delimiter\" : \",\",\n\"parallelism\" : 1,\n\"skipInvalidElements\" : false,\n\"validate\" : true\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Elements Between Sets in Gaffer (JSON)\nDESCRIPTION: JSON representation of the GetElementsBetweenSets operation with a view to filter elements based on a count property. This example retrieves elements between vertex 1 and vertices 2 and 4, where the count is greater than 2.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/accumulo.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"GetElementsBetweenSets\",\n  \"input\" : [ {\n    \"class\" : \"EntitySeed\",\n    \"vertex\" : 1\n  } ],\n  \"inputB\" : [ {\n    \"class\" : \"EntitySeed\",\n    \"vertex\" : 2\n  }, {\n    \"class\" : \"EntitySeed\",\n    \"vertex\" : 4\n  } ],\n  \"view\" : {\n    \"edges\" : {\n      \"edge\" : {\n        \"preAggregationFilterFunctions\" : [ {\n          \"selection\" : [ \"count\" ],\n          \"predicate\" : {\n            \"class\" : \"IsMoreThan\",\n            \"orEqualTo\" : false,\n            \"value\" : 2\n          }\n        } ]\n      }\n    },\n    \"entities\" : {\n      \"entity\" : {\n        \"preAggregationFilterFunctions\" : [ {\n          \"selection\" : [ \"count\" ],\n          \"predicate\" : {\n            \"class\" : \"IsMoreThan\",\n            \"orEqualTo\" : false,\n            \"value\" : 2\n          }\n        } ]\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Results of Filtering Elements with Count Greater Than 2 in JSON\nDESCRIPTION: Results showing the elements that passed the filter condition (count > 2) in JSON format. The output includes one Entity with vertex 1 and one Edge from vertex 1 to vertex 2, both with count = 3.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/core.md#2025-04-23_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n[ {\n  \"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n  \"group\" : \"entity\",\n  \"vertex\" : 1,\n  \"properties\" : {\n    \"count\" : 3\n  }\n}, {\n  \"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n  \"group\" : \"edge\",\n  \"source\" : 1,\n  \"destination\" : 2,\n  \"directed\" : true,\n  \"matchedVertex\" : \"SOURCE\",\n  \"properties\" : {\n    \"count\" : 3\n  }\n} ]\n```\n\n----------------------------------------\n\nTITLE: Implementing First Non-Null Value Selection in Java\nDESCRIPTION: Creates a First operator that returns the first non-null value from two inputs. This is useful for selecting default values or for prioritizing one value over another.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/binary-operators-guide/koryphe-operators.md#2025-04-23_snippet_6\n\nLANGUAGE: java\nCODE:\n```\nfinal First first = new First();\n```\n\n----------------------------------------\n\nTITLE: Implementing GetGraphCreatedTime in Python with Gaffer\nDESCRIPTION: Python implementation of the GetGraphCreatedTime operation. This simple operation retrieves the creation timestamp of the current graph without requiring any parameters.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/core.md#2025-04-23_snippet_84\n\nLANGUAGE: python\nCODE:\n```\ng.GetGraphCreatedTime()\n```\n\n----------------------------------------\n\nTITLE: Configuring Function Authoriser Hook in JSON\nDESCRIPTION: Example of configuring an empty FunctionAuthoriser hook to disable the default function authorization behavior.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/development-guide/project-structure/components/graph.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"graphId\": \"example\",\n    \"hooks\": [\n        {\n            \"class\": \"uk.gov.gchq.gaffer.graph.hook.FunctionAuthoriser\"\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Elements Between Entity and Edge Seeds in Gaffer\nDESCRIPTION: This example shows how to retrieve elements between entity 4 and an edge from vertex 4 to vertex 5. The operation uses an EntitySeed and an EdgeSeed with the directedType parameter set to EITHER to define the range.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/accumulo.md#2025-04-23_snippet_20\n\nLANGUAGE: java\nCODE:\n```\nfinal GetElementsInRanges operation = new GetElementsInRanges.Builder()\n        .input(new Pair<>(new EntitySeed(4), new EdgeSeed(4, 5, DirectedType.EITHER)))\n        .build();\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"GetElementsInRanges\",\n  \"input\" : [ {\n    \"class\" : \"Pair\",\n    \"first\" : {\n      \"EntitySeed\" : {\n        \"class\" : \"EntitySeed\",\n        \"vertex\" : 4\n      }\n    },\n    \"second\" : {\n      \"EdgeSeed\" : {\n        \"class\" : \"EdgeSeed\",\n        \"source\" : 4,\n        \"destination\" : 5,\n        \"matchedVertex\" : \"SOURCE\",\n        \"directedType\" : \"EITHER\"\n      }\n    }\n  } ]\n}\n```\n\nLANGUAGE: python\nCODE:\n```\ng.GetElementsInRanges(\n  input=[\n    g.SeedPair(\n      first=g.EntitySeed(\n        vertex=4\n      ),\n      second=g.EdgeSeed(\n        source=4,\n        destination=5,\n        directed_type=\"EITHER\",\n        matched_vertex=\"SOURCE\"\n      )\n    )\n  ]\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Cast Function in Java\nDESCRIPTION: Shows how to create a Cast function in Java to cast input to a specified class. In this example, it casts to String class.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/koryphe-functions.md#2025-04-23_snippet_9\n\nLANGUAGE: java\nCODE:\n```\nfinal Cast function = new Cast(String.class);\n```\n\n----------------------------------------\n\nTITLE: Viewing Result Cache Export Output in Java\nDESCRIPTION: Java output showing the results of retrieving elements from the Gaffer result cache. The output displays the edges and entities that were previously exported to the cache with their respective properties and structure.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/export.md#2025-04-23_snippet_25\n\nLANGUAGE: java\nCODE:\n```\nuk.gov.gchq.gaffer.operation.impl.export.resultcache.GetGafferResultCacheExport: edges:\n    Entity[vertex=3,group=entity,properties=Properties[count=<java.lang.Integer>2]]\n    Edge[source=2,destination=4,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=<java.lang.Integer>1]]\n    Edge[source=2,destination=3,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=<java.lang.Integer>2]]\n    Edge[source=1,destination=2,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=<java.lang.Integer>3]]\n    Edge[source=2,destination=5,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=<java.lang.Integer>1]]\n    Edge[source=1,destination=4,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=<java.lang.Integer>1]]\n    Entity[vertex=5,group=entity,properties=Properties[count=<java.lang.Integer>3]]\n    Entity[vertex=1,group=entity,properties=Properties[count=<java.lang.Integer>3]]\n    Edge[source=3,destination=4,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=<java.lang.Integer>4]]\n    Entity[vertex=2,group=entity,properties=Properties[count=<java.lang.Integer>1]]\n    Entity[vertex=4,group=entity,properties=Properties[count=<java.lang.Integer>1]]\nuk.gov.gchq.gaffer.operation.impl.export.resultcache.GetGafferResultCacheExport: entities:\n    Edge[source=2,destination=5,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=<java.lang.Integer>1]]\n    Edge[source=3,destination=4,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=<java.lang.Integer>4]]\n    Edge[source=2,destination=4,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=<java.lang.Integer>1]]\n    Entity[vertex=4,group=entity,properties=Properties[count=<java.lang.Integer>1]]\n    Entity[vertex=2,group=entity,properties=Properties[count=<java.lang.Integer>1]]\n    Edge[source=2,destination=3,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=<java.lang.Integer>2]]\n    Entity[vertex=3,group=entity,properties=Properties[count=<java.lang.Integer>2]]\n    Edge[source=1,destination=2,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=<java.lang.Integer>3]]\n    Edge[source=1,destination=4,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=<java.lang.Integer>1]]\n    Entity[vertex=5,group=entity,properties=Properties[count=<java.lang.Integer>3]]\n    Entity[vertex=1,group=entity,properties=Properties[count=<java.lang.Integer>3]]\n```\n\n----------------------------------------\n\nTITLE: Using TypeValueToTuple Function in Python\nDESCRIPTION: Python code to create a TypeValueToTuple function using the Gaffer Python client. This function converts TypeValue objects to Tuples.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/gaffer-functions.md#2025-04-23_snippet_61\n\nLANGUAGE: python\nCODE:\n```\ng.TypeValueToTuple()\n```\n\n----------------------------------------\n\nTITLE: Java Result Format When Retrieving Elements from Result Cache by Job ID\nDESCRIPTION: The Java result format when retrieving elements from the Gaffer result cache using a specific job ID. Shows Edge and Entity objects with their properties.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/export.md#2025-04-23_snippet_20\n\nLANGUAGE: java\nCODE:\n```\nEdge[source=1,destination=4,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=<java.lang.Integer>1]]\nEdge[source=2,destination=4,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=<java.lang.Integer>1]]\nEdge[source=2,destination=5,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=<java.lang.Integer>1]]\nEntity[vertex=5,group=entity,properties=Properties[count=<java.lang.Integer>3]]\nEdge[source=1,destination=2,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=<java.lang.Integer>3]]\nEntity[vertex=4,group=entity,properties=Properties[count=<java.lang.Integer>1]]\nEdge[source=2,destination=3,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=<java.lang.Integer>2]]\nEdge[source=3,destination=4,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=<java.lang.Integer>4]]\nEntity[vertex=2,group=entity,properties=Properties[count=<java.lang.Integer>1]]\nEntity[vertex=1,group=entity,properties=Properties[count=<java.lang.Integer>3]]\nEntity[vertex=3,group=entity,properties=Properties[count=<java.lang.Integer>2]]\n```\n\n----------------------------------------\n\nTITLE: Creating IsMoreThan-OrEqual Predicate in Python\nDESCRIPTION: Python implementation of the IsMoreThan predicate using the Gaffer Python client. Configures the predicate to check if the input is greater than or equal to 5.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/predicates-guide/koryphe-predicates.md#2025-04-23_snippet_87\n\nLANGUAGE: python\nCODE:\n```\ng.IsMoreThan(\n  value=5,\n  or_equal_to=True\n)\n```\n\n----------------------------------------\n\nTITLE: Cancelling a Scheduled Job in Python\nDESCRIPTION: This snippet illustrates how to create an OperationChain to cancel a scheduled job using the CancelScheduledJob operation in Python.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/job.md#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\ng.OperationChain( \n    operations=[ \n        g.CancelScheduledJob( \n        job_id=\"35c1bd84-1cd3-4609-8892-710e9d3c2d3f\" \n        ) \n    ] \n)\n```\n\n----------------------------------------\n\nTITLE: Implementing PredicateMap for FreqMap Comparison in Python\nDESCRIPTION: Python implementation of a PredicateMap that extracts the 'key1' value from a map and checks if it's greater than 2. The predicate parameter contains the nested IsMoreThan predicate.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/predicates-guide/koryphe-predicates.md#2025-04-23_snippet_114\n\nLANGUAGE: python\nCODE:\n```\ng.PredicateMap(\n  key=\"key1\",\n  predicate=g.IsMoreThan(\n    value=g.long(2),\n    or_equal_to=False\n  )\n)\n```\n\n----------------------------------------\n\nTITLE: Defining IsLessThan-OrEqual Predicate in JSON\nDESCRIPTION: JSON representation of the IsLessThan predicate with value 5 and orEqualTo flag set to true for inclusive comparison. Can be used in Gaffer schema or operation definitions.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/predicates-guide/koryphe-predicates.md#2025-04-23_snippet_77\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"IsLessThan\",\n  \"orEqualTo\" : true,\n  \"value\" : 5\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing MultiRegex Pattern Matching\nDESCRIPTION: Shows how to use MultiRegex predicate to match strings against multiple regular expression patterns. Returns true if any pattern matches.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/predicates-guide/koryphe-predicates.md#2025-04-23_snippet_124\n\nLANGUAGE: java\nCODE:\n```\nfinal MultiRegex function = new MultiRegex(new Pattern[]{Pattern.compile(\"[a-d]\"), Pattern.compile(\"[0-4]\")});\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"MultiRegex\",\n  \"value\" : [ {\n    \"java.util.regex.Pattern\" : \"[a-d]\"\n  }, {\n    \"java.util.regex.Pattern\" : \"[0-4]\"\n  } ]\n}\n```\n\nLANGUAGE: python\nCODE:\n```\ng.MultiRegex(\n  value=[\n    {'java.util.regex.Pattern': '[a-d]'},\n    {'java.util.regex.Pattern': '[0-4]'}\n  ]\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Gaffer Application Properties\nDESCRIPTION: A properties file that specifies the locations of schema, store properties, and graph configuration files within the Gaffer container.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/development-guide/example-deployment/project-setup.md#2025-04-23_snippet_2\n\nLANGUAGE: properties\nCODE:\n```\ngaffer.schemas=/gaffer/schema\ngaffer.storeProperties=/gaffer/store/store.properties\ngaffer.graph.config=/gaffer/graph/graphConfig.json\n```\n\n----------------------------------------\n\nTITLE: Creating Graph Elements in Gaffer Python API\nDESCRIPTION: Python code defining Gaffer entities and edges with various vertices and properties. The operation uses a join with RIGHT match key and OUTER join type, with flatten set to false.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/join.md#2025-04-23_snippet_54\n\nLANGUAGE: python\nCODE:\n```\nproperties={'count': 3}, \nvertex=1 \n), \ng.Entity( \ngroup=\"entity\", \nproperties={'count': 1}, \nvertex=4 \n), \ng.Entity( \ngroup=\"entity\", \nproperties={'count': 3}, \nvertex=5 \n), \ng.Entity( \ngroup=\"entity\", \nproperties={'count': 30}, \nvertex=6 \n) \n], \nflatten=False, \nmatch_key=\"RIGHT\", \njoin_type=\"OUTER\" \n) \n] \n)\n```\n\n----------------------------------------\n\nTITLE: Removing Graph from Federated Store - JSON Configuration\nDESCRIPTION: JSON configuration for removing a graph from a federated store, showing both simple removal and removal with data deletion options.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/administration-guide/gaffer-stores/simple-federated/configuration.md#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"class\": \"uk.gov.gchq.gaffer.federated.simple.operation.RemoveGraph\",\n    \"graphId\": \"myGraph\"\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"class\": \"uk.gov.gchq.gaffer.federated.simple.operation.RemoveGraph\",\n    \"graphId\": \"myGraph\",\n    \"deleteAllData\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Increment Function with Float in JSON\nDESCRIPTION: JSON representation of an Increment function that adds a fixed float value (3.0) to numeric inputs.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/koryphe-functions.md#2025-04-23_snippet_80\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"Increment\",\n  \"increment\" : {\n    \"Float\" : 3.0\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Divide in Java\nDESCRIPTION: Creates a Divide function that divides two integers and returns a Tuple2 containing the quotient and remainder.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/koryphe-functions.md#2025-04-23_snippet_31\n\nLANGUAGE: java\nCODE:\n```\nfinal Divide function = new Divide();\n```\n\n----------------------------------------\n\nTITLE: Implementing Increment Function with Float in Java\nDESCRIPTION: Creates an Increment function that adds a fixed float value (3.0f) to numeric inputs. Returns float results regardless of input type.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/koryphe-functions.md#2025-04-23_snippet_79\n\nLANGUAGE: java\nCODE:\n```\nfinal Increment increment = new Increment(3.0f);\n```\n\n----------------------------------------\n\nTITLE: Replacing CloseableIterable with Iterable in Java\nDESCRIPTION: Example showing how to update code after the removal of CloseableIterable class, replacing it with standard Iterable. The functionality remains the same as the results still implement Closeable.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/change-notes/changelist/v2-changes.md#2025-04-23_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nfinal CloseableIterable<? extends Element> results = graph.execute(new GetAllElements(), USER);\n```\n\nLANGUAGE: java\nCODE:\n```\nfinal Iterable<? extends Element> results = graph.execute(new GetAllElements(), USER);\n```\n\n----------------------------------------\n\nTITLE: Getting JavaRDD of Elements with Hadoop Configuration\nDESCRIPTION: Shows how to include Hadoop configuration when retrieving elements using GetJavaRDDOfElements. Demonstrates encoding and passing Hadoop configuration options.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/spark.md#2025-04-23_snippet_12\n\nLANGUAGE: java\nCODE:\n```\nfinal Configuration conf = new Configuration();\nconf.set(\"AN_OPTION\", \"A_VALUE\");\n\nfinal String encodedConf;\ntry {\n    encodedConf = AbstractGetRDDHandler.convertConfigurationToString(conf);\n} catch (final IOException e) {\n    throw new RuntimeException(\"Unable to convert conf to string\", e);\n}\n\nfinal GetJavaRDDOfElements operation = new GetJavaRDDOfElements.Builder()\n        .input(new EdgeSeed(1, 2, true), new EdgeSeed(2, 3, true))\n        .option(AbstractGetRDDHandler.HADOOP_CONFIGURATION_KEY, encodedConf)\n        .build();\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"GetJavaRDDOfElements\",\n  \"input\" : [ {\n    \"class\" : \"EdgeSeed\",\n    \"source\" : 1,\n    \"destination\" : 2,\n    \"matchedVertex\" : \"SOURCE\",\n    \"directedType\" : \"DIRECTED\"\n  }, {\n    \"class\" : \"EdgeSeed\",\n    \"source\" : 2,\n    \"destination\" : 3,\n    \"matchedVertex\" : \"SOURCE\",\n    \"directedType\" : \"DIRECTED\"\n  } ],\n  \"options\" : {\n    \"Hadoop_Configuration_Key\" : \"config removed for readability\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Cache Service Maven Dependency\nDESCRIPTION: Maven dependency configuration for including an external cache service (JCS cache service) in a Gaffer project. Required when using components that utilize the CacheServiceLoader.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/development-guide/project-structure/components/cache.md#2025-04-23_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n   <groupId>uk.gov.gchq.gaffer</groupId>\n   <artifactId>jcs-cache-service</artifactId>\n   <version>${gaffer.version}</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Results of KeyFunctionMatch Join in Java\nDESCRIPTION: The results of the KeyFunctionMatch join operation in Java format. Shows entities with count=3 matching to elements with count=2, demonstrating how the function chain increments the left side's count value by 1 before matching.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/join.md#2025-04-23_snippet_19\n\nLANGUAGE: java\nCODE:\n```\n[ Entity[vertex=1,group=entity,properties=Properties[count=<java.lang.Integer>3], Entity[vertex=5,group=entity,properties=Properties[count=<java.lang.Integer>3]]] --> [Edge[roup=edge,source=2,destination=3,directed=true,properties=Properties[count=<java.lang.Integer>2]]] ]\n[ Entity[vertex=1,group=entity,properties=Properties[count=<java.lang.Integer>3], Entity[vertex=5,group=entity,properties=Properties[count=<java.lang.Integer>3]]] --> [Entity[vertex=3,group=entity,properties=Properties[count=<java.lang.Integer>2]]] ]\n```\n\n----------------------------------------\n\nTITLE: Creating IsMoreThan with String in Python\nDESCRIPTION: Python implementation of the IsMoreThan predicate using the Gaffer Python client. Configures the predicate to check if the input string is lexicographically greater than \"B\".\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/predicates-guide/koryphe-predicates.md#2025-04-23_snippet_90\n\nLANGUAGE: python\nCODE:\n```\ng.IsMoreThan(\n  value=\"B\",\n  or_equal_to=False\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Complex And Predicate with Tuple Selection\nDESCRIPTION: Advanced And predicate that checks if first item is less than 2 and second item is more than 5. Uses tuple selection to apply different predicates to different elements.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/predicates-guide/koryphe-predicates.md#2025-04-23_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nfinal And function = new And.Builder()\n        .select(0)\n        .execute(new IsLessThan(2))\n        .select(1)\n        .execute(new IsMoreThan(5))\n        .build();\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"uk.gov.gchq.koryphe.impl.predicate.And\",\n  \"predicates\" : [ {\n    \"class\" : \"IntegerTupleAdaptedPredicate\",\n    \"selection\" : [ 0 ],\n    \"predicate\" : {\n      \"class\" : \"IsLessThan\",\n      \"orEqualTo\" : false,\n      \"value\" : 2\n    }\n  }, {\n    \"class\" : \"IntegerTupleAdaptedPredicate\",\n    \"selection\" : [ 1 ],\n    \"predicate\" : {\n      \"class\" : \"IsMoreThan\",\n      \"orEqualTo\" : false,\n      \"value\" : 5\n    }\n  } ]\n}\n```\n\nLANGUAGE: python\nCODE:\n```\ng.And(\n  predicates=[\n    g.NestedPredicate(\n      selection=[\n        0\n      ],\n      predicate=g.IsLessThan(\n        value=2,\n        or_equal_to=False\n      )\n    ),\n    g.NestedPredicate(\n      selection=[\n        1\n      ],\n      predicate=g.IsMoreThan(\n        value=5,\n        or_equal_to=False\n      )\n    )\n  ]\n)\n```\n\n----------------------------------------\n\nTITLE: OperationChain with GetElements in JSON Format\nDESCRIPTION: The JSON representation of an operation chain that gets elements and transforms them to vertices. It includes settings for input entity seeds, view configuration for edges, and subsequent operations to transform the results.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/core.md#2025-04-23_snippet_78\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"OperationChain\",\n  \"operations\" : [ {\n    \"class\" : \"GetElements\",\n    \"input\" : [ {\n      \"class\" : \"EntitySeed\",\n      \"vertex\" : 1\n    }, {\n      \"class\" : \"EntitySeed\",\n      \"vertex\" : 2\n    } ],\n    \"view\" : {\n      \"edges\" : {\n        \"edge\" : { }\n      }\n    },\n    \"includeIncomingOutGoing\" : \"OUTGOING\"\n  }, {\n    \"class\" : \"ToVertices\",\n    \"useMatchedVertex\" : \"OPPOSITE\"\n  }, {\n    \"class\" : \"uk.gov.gchq.gaffer.operation.impl.output.ToSet\"\n  } ]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Collection Concatenation in JSON\nDESCRIPTION: JSON representation of the CollectionConcat operator that concatenates two collections together.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/binary-operators-guide/koryphe-operators.md#2025-04-23_snippet_22\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"uk.gov.gchq.koryphe.impl.binaryoperator.CollectionConcat\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing IterableFunction with Multiple Chained Functions in JSON\nDESCRIPTION: JSON representation of an IterableFunction that chains multiple functions (MultiplyBy(2) then MultiplyBy(4)) to apply to each element in an iterable.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/koryphe-functions.md#2025-04-23_snippet_98\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"IterableFunction\",\n  \"functions\" : [ {\n    \"class\" : \"MultiplyBy\",\n    \"by\" : 2\n  }, {\n    \"class\" : \"MultiplyBy\",\n    \"by\" : 4\n  } ]\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Elements Between Sets in Gaffer (Python)\nDESCRIPTION: Python implementation of the GetElementsBetweenSets operation to retrieve edges between two sets of vertices and entities in the first set. This example queries elements between vertex 1 and vertices 2 and 4.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/accumulo.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ng.GetElementsBetweenSets(\n  input=[\n    g.EntitySeed(\n      vertex=1\n    )\n  ],\n  input_b=[\n    g.EntitySeed(\n      vertex=2\n    ),\n    g.EntitySeed(\n      vertex=4\n    )\n  ]\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing IsMoreThan Predicate in Java\nDESCRIPTION: Creates an IsMoreThan predicate that checks if a comparable input is greater than 5. Takes a java.lang.Comparable as input and returns true if the input is greater than the specified value.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/predicates-guide/koryphe-predicates.md#2025-04-23_snippet_82\n\nLANGUAGE: java\nCODE:\n```\nfinal IsMoreThan function = new IsMoreThan(5);\n```\n\n----------------------------------------\n\nTITLE: Setting Fixed Value Regardless of Input in Java\nDESCRIPTION: Creates a function that returns a fixed value regardless of the input provided. This example returns the integer value 5 for any input received.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/koryphe-functions.md#2025-04-23_snippet_134\n\nLANGUAGE: java\nCODE:\n```\nfinal SetValue function = new SetValue(5);\n```\n\n----------------------------------------\n\nTITLE: Creating IsLessThan with String in Python\nDESCRIPTION: Python implementation of the IsLessThan predicate using the Gaffer Python client. Configures the predicate to check if the input string is lexicographically less than \"B\".\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/predicates-guide/koryphe-predicates.md#2025-04-23_snippet_81\n\nLANGUAGE: python\nCODE:\n```\ng.IsLessThan(\n  value=\"B\",\n  or_equal_to=False\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Identity Function in Python\nDESCRIPTION: Python implementation of an Identity function that simply returns the input without modification. This function can be used with any input type and returns the same type as the input.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/koryphe-functions.md#2025-04-23_snippet_69\n\nLANGUAGE: python\nCODE:\n```\ng.Identity()\n```\n\n----------------------------------------\n\nTITLE: GetWalks JSON Results Format\nDESCRIPTION: Detailed JSON response from a GetWalks operation showing the complete structure of two walks through the graph, including edges, entities, their properties, and the relationships between vertices.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/get.md#2025-04-23_snippet_49\n\nLANGUAGE: json\nCODE:\n```\n[ {\n  \"edges\" : [ [ {\n    \"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n    \"group\" : \"edge\",\n    \"source\" : 1,\n    \"destination\" : 5,\n    \"directed\" : true,\n    \"matchedVertex\" : \"SOURCE\",\n    \"properties\" : {\n      \"count\" : 6\n    }\n  } ], [ {\n    \"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n    \"group\" : \"edge1\",\n    \"source\" : 8,\n    \"destination\" : 5,\n    \"directed\" : true,\n    \"matchedVertex\" : \"DESTINATION\",\n    \"properties\" : {\n      \"count\" : 13\n    }\n  } ] ],\n  \"entities\" : [ {\n    \"1\" : [ {\n      \"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n      \"group\" : \"entity1\",\n      \"vertex\" : 1,\n      \"properties\" : {\n        \"count\" : 3\n      }\n    } ]\n  }, {\n    \"5\" : [ {\n      \"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n      \"group\" : \"entity1\",\n      \"vertex\" : 5,\n      \"properties\" : {\n        \"count\" : 3\n      }\n    } ]\n  }, {\n    \"8\" : [ {\n      \"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n      \"group\" : \"entity1\",\n      \"vertex\" : 8,\n      \"properties\" : {\n        \"count\" : 1\n      }\n    } ]\n  } ]\n}, {\n  \"edges\" : [ [ {\n    \"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n    \"group\" : \"edge\",\n    \"source\" : 1,\n    \"destination\" : 5,\n    \"directed\" : true,\n    \"matchedVertex\" : \"SOURCE\",\n    \"properties\" : {\n      \"count\" : 6\n    }\n  } ], [ {\n    \"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n    \"group\" : \"edge1\",\n    \"source\" : 2,\n    \"destination\" : 5,\n    \"directed\" : true,\n    \"matchedVertex\" : \"DESTINATION\",\n    \"properties\" : {\n      \"count\" : 7\n    }\n  } ] ],\n  \"entities\" : [ {\n    \"1\" : [ {\n      \"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n      \"group\" : \"entity1\",\n      \"vertex\" : 1,\n      \"properties\" : {\n        \"count\" : 3\n      }\n    } ]\n  }, {\n    \"5\" : [ {\n      \"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n      \"group\" : \"entity1\",\n      \"vertex\" : 5,\n      \"properties\" : {\n        \"count\" : 3\n      }\n    } ]\n  }, {\n    \"2\" : [ {\n      \"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n      \"group\" : \"entity1\",\n      \"vertex\" : 2,\n      \"properties\" : {\n        \"count\" : 1\n      }\n    } ]\n  } ]\n} ]\n```\n\n----------------------------------------\n\nTITLE: Initializing Length Function\nDESCRIPTION: Function that returns the length of various object types including collections, strings, and arrays.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/koryphe-functions.md#2025-04-23_snippet_102\n\nLANGUAGE: java\nCODE:\n```\nfinal Length function = new Length();\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"Length\"\n}\n```\n\nLANGUAGE: python\nCODE:\n```\ng.Length()\n```\n\n----------------------------------------\n\nTITLE: Migrating from GetElementsBetweenSets to GetElementsBetweenSetsPairs in JSON\nDESCRIPTION: Example showing how to update from the deprecated GetElementsBetweenSets operation to the new GetElementsBetweenSetsPairs operation which works within NamedOperations.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/change-notes/changelist/v2-changes.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"class\": \"GetElementsBetweenSets\",\n    \"input\": [\n        {\n            \"class\": \"EntitySeed\",\n            \"vertex\": \"firstInput\"\n        }\n    ],\n    \"inputB\": [\n        {\n            \"class\": \"EntitySeed\",\n            \"vertex\": \"secondInput\"\n        }\n    ]\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"class\": \"GetElementsBetweenSetsPairs\",\n    \"input\": {\n        \"class\": \"Pair\",\n        \"first\": {\n            \"ArrayList\" : [\n                {\n                    \"class\": \"EntitySeed\",\n                    \"vertex\": \"firstInput\"\n                }\n            ]\n        },\n        \"second\": {\n            \"ArrayList\" : [\n                {\n                    \"class\": \"EntitySeed\",\n                    \"vertex\": \"secondInput\"\n                }\n            ]\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Limiting Elements in Gremlin Query\nDESCRIPTION: Demonstrates how to limit the number of elements returned by GetElements or GetAllElements operations in a Gremlin query. This applies a Gaffer Limit operation to the translated operation chain.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/gremlin-guide/gaffer-options.md#2025-04-23_snippet_2\n\nLANGUAGE: groovy\nCODE:\n```\ng.with(\"getElementsLimit\", 100).V().toList()\n```\n\n----------------------------------------\n\nTITLE: Initializing StringRegexSplit Function in Java\nDESCRIPTION: Creates a StringRegexSplit function that splits a string using a regular expression pattern. This function splits input strings on spaces or tabs, handling multiple consecutive delimiters appropriately.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/koryphe-functions.md#2025-04-23_snippet_152\n\nLANGUAGE: java\nCODE:\n```\nfinal StringRegexSplit function = new StringRegexSplit(\"[ \\\\t]+\");\n```\n\n----------------------------------------\n\nTITLE: Configuring StringSplit Function in JSON\nDESCRIPTION: JSON configuration for a StringSplit function. This configuration specifies a space character as the delimiter for splitting input strings.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/koryphe-functions.md#2025-04-23_snippet_159\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"StringSplit\",\n  \"delimiter\" : \" \"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring IsXMoreThanY Predicate in JSON\nDESCRIPTION: JSON configuration for an IsXMoreThanY predicate that checks if the first comparable is greater than the second comparable. This predicate requires no additional parameters.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/predicates-guide/koryphe-predicates.md#2025-04-23_snippet_104\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"IsXMoreThanY\"\n}\n```\n\n----------------------------------------\n\nTITLE: Scheduling a Job in JSON\nDESCRIPTION: JSON representation of scheduling an asynchronous job in Gaffer. It specifies the repeat configuration and the operation to be executed. This JSON is used with the /graph/jobs/schedule endpoint.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/administration-guide/job-tracker.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"repeat\": {\n        \"initialDelay\": 20,\n        \"repeatPeriod\": 30,\n        \"timeUnit\": \"SECONDS\"\n    },\n    \"operation\":{\n        \"class\": \"uk.gov.gchq.gaffer.operation.impl.get.GetAllElements\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Collection Concatenation in Python\nDESCRIPTION: Python implementation of the CollectionConcat operator for concatenating two collections together.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/binary-operators-guide/koryphe-operators.md#2025-04-23_snippet_23\n\nLANGUAGE: python\nCODE:\n```\ng.CollectionConcat()\n```\n\n----------------------------------------\n\nTITLE: Implementing Collection Concatenation in Java\nDESCRIPTION: Creates a CollectionConcat operator that concatenates two collections together. Preserves the original collection type (ArrayList, HashSet, etc.) and handles null values gracefully.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/binary-operators-guide/koryphe-operators.md#2025-04-23_snippet_21\n\nLANGUAGE: java\nCODE:\n```\nfinal CollectionConcat collectionConcat = new CollectionConcat();\n```\n\n----------------------------------------\n\nTITLE: Configuring FunctionChain with Tuple Adapted Functions in JSON\nDESCRIPTION: JSON configuration for a FunctionChain that applies ToUpperCase and ToSet functions consecutively using tuple adaptation. This chain converts a string to uppercase and then to a set.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/koryphe-functions.md#2025-04-23_snippet_56\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"FunctionChain\",\n  \"functions\" : [ {\n    \"class\" : \"TupleAdaptedFunction\",\n    \"selection\" : [ 0 ],\n    \"function\" : {\n      \"class\" : \"ToUpperCase\"\n    },\n    \"projection\" : [ 1 ]\n  }, {\n    \"class\" : \"TupleAdaptedFunction\",\n    \"selection\" : [ 1 ],\n    \"function\" : {\n      \"class\" : \"uk.gov.gchq.koryphe.impl.function.ToSet\"\n    },\n    \"projection\" : [ 2 ]\n  } ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Graph Data in CSV Format with Neo4j Syntax\nDESCRIPTION: A CSV file in Neo4j export syntax format that represents the example graph. It includes three rows: two for entities (Person and Software) and one for the edge (Created) between them.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/development-guide/example-deployment/project-setup.md#2025-04-23_snippet_1\n\nLANGUAGE: csv\nCODE:\n```\n_id,name:String,age:Int,lang:String,_labels,_start,_end,_type,weight:Float\nv1,marko,29,,Person,,,,\nv2,lop,,java,Software,,,,\ne1,,,,,v1,v2,Created,0.4\n```\n\n----------------------------------------\n\nTITLE: Retrieving Job Results with GetJobResults in Gaffer\nDESCRIPTION: This snippet shows how to use the GetJobResults operation to retrieve the results of a job with a specific jobId. It includes examples in Java, JSON, and Python, along with sample results.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/job.md#2025-04-23_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nfinal GetJobResults operation = new GetJobResults.Builder()\n        .jobId(jobId)\n        .build();\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"class\" : \"GetJobResults\",\n    \"jobId\" : \"60d667eb-a20d-44c2-963f-fc1b6c9b3868\"\n}\n```\n\nLANGUAGE: python\nCODE:\n```\ng.GetJobResults( \n    job_id=\"60d667eb-a20d-44c2-963f-fc1b6c9b3868\" \n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Gaffer store.properties for Kerberos Authentication in Accumulo Store\nDESCRIPTION: This snippet shows the additional properties required in the Gaffer store.properties file to enable Kerberos authentication for the Accumulo Store. It specifies the Kerberos principal and keytab file location.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/administration-guide/security/accumulo-kerberos.md#2025-04-23_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\naccumulo.kerberos.enable=true\naccumulo.kerberos.principal=gaffer/host.domain@REALM.NAME\naccumulo.kerberos.keytab=/gaffer/config/gaffer.keytab\n```\n\n----------------------------------------\n\nTITLE: Specifying Operations Declarations File in Gaffer Properties\nDESCRIPTION: Property configuration to specify the location of the operations declarations JSON file in Gaffer.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/user-guide/query/gaffer-syntax/import-export/csv.md#2025-04-23_snippet_1\n\nLANGUAGE: properties\nCODE:\n```\ngaffer.store.operation.declarations=/gaffer/store/operationsDeclarations.json\n```\n\n----------------------------------------\n\nTITLE: Implementing MapContainsPredicate with Regex in Python\nDESCRIPTION: Python implementation of a MapContainsPredicate that checks if a map contains any key matching the regex pattern 'a.*'. The key_predicate parameter contains the nested Regex predicate.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/predicates-guide/koryphe-predicates.md#2025-04-23_snippet_111\n\nLANGUAGE: python\nCODE:\n```\ng.MapContainsPredicate(\n  key_predicate=g.Regex(\n    value={\"java.util.regex.Pattern\": \"a.*\"}\n  )\n)\n```\n\n----------------------------------------\n\nTITLE: Results of Map Operation with FirstItem in Java\nDESCRIPTION: The Java result of applying the Map operation with FirstItem function, showing the entity with vertex 2 that was extracted from the collection.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/core.md#2025-04-23_snippet_46\n\nLANGUAGE: java\nCODE:\n```\nEntity[vertex=2,group=entity,properties=Properties[count=<java.lang.Integer>1]]\n```\n\n----------------------------------------\n\nTITLE: Creating IsLongerThan-OrEqual Predicate in Python\nDESCRIPTION: Python implementation of the IsLongerThan predicate using the Gaffer Python client. Configures the predicate to check if the length/size of the input is greater than or equal to 5.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/predicates-guide/koryphe-predicates.md#2025-04-23_snippet_96\n\nLANGUAGE: python\nCODE:\n```\ng.IsLongerThan(\n  min_length=5,\n  or_equal_to=True\n)\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Supported Store Traits in Gaffer\nDESCRIPTION: Example of using the GetTraits operation with currentTraits=false to get all supported traits from the Gaffer store.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/core.md#2025-04-23_snippet_96\n\nLANGUAGE: java\nCODE:\n```\nfinal GetTraits operation = new GetTraits.Builder()\n        .currentTraits(false)\n        .build();\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"GetTraits\",\n  \"currentTraits\" : false\n}\n```\n\nLANGUAGE: python\nCODE:\n```\ng.GetTraits(\n  current_traits=False\n)\n```\n\nLANGUAGE: java\nCODE:\n```\nQUERY_AGGREGATION\nVISIBILITY\nMATCHED_VERTEX\nTRANSFORMATION\nINGEST_AGGREGATION\nPRE_AGGREGATION_FILTERING\nPOST_TRANSFORMATION_FILTERING\nPOST_AGGREGATION_FILTERING\n```\n\nLANGUAGE: json\nCODE:\n```\n[ \"QUERY_AGGREGATION\", \"VISIBILITY\", \"MATCHED_VERTEX\", \"TRANSFORMATION\", \"INGEST_AGGREGATION\", \"PRE_AGGREGATION_FILTERING\", \"POST_TRANSFORMATION_FILTERING\", \"POST_AGGREGATION_FILTERING\" ]\n```\n\n----------------------------------------\n\nTITLE: Implementing Logical AND Operation in JSON\nDESCRIPTION: JSON representation of the And operator that applies logical AND operation to two boolean values.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/binary-operators-guide/koryphe-operators.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"uk.gov.gchq.koryphe.impl.binaryoperator.And\"\n}\n```\n\n----------------------------------------\n\nTITLE: Getting All Named Views - Multiple Languages\nDESCRIPTION: Retrieves all Named Views associated with a Graph.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/named.md#2025-04-23_snippet_10\n\nLANGUAGE: java\nCODE:\n```\nfinal GetAllNamedViews op = new GetAllNamedViews();\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"class\" : \"GetAllNamedViews\"\n}\n```\n\nLANGUAGE: python\nCODE:\n```\ng.GetAllNamedViews()\n```\n\n----------------------------------------\n\nTITLE: Or Predicate with Multiple Selected Values\nDESCRIPTION: Shows how to use Or.Builder to create predicates that operate on multiple selected values from an input array. Demonstrates selection of specific positions for comparison.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/predicates-guide/koryphe-predicates.md#2025-04-23_snippet_9\n\nLANGUAGE: java\nCODE:\n```\nfinal Or function = new Or.Builder()\n        .select(0)\n        .execute(new IsLessThan(2))\n        .select(1)\n        .execute(new IsMoreThan(10))\n        .build();\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"uk.gov.gchq.koryphe.impl.predicate.Or\",\n  \"predicates\" : [ {\n    \"class\" : \"IntegerTupleAdaptedPredicate\",\n    \"selection\" : [ 0 ],\n    \"predicate\" : {\n      \"class\" : \"IsLessThan\",\n      \"orEqualTo\" : false,\n      \"value\" : 2\n    }\n  }, {\n    \"class\" : \"IntegerTupleAdaptedPredicate\",\n    \"selection\" : [ 1 ],\n    \"predicate\" : {\n      \"class\" : \"IsMoreThan\",\n      \"orEqualTo\" : false,\n      \"value\" : 10\n    }\n  } ]\n}\n```\n\nLANGUAGE: python\nCODE:\n```\ng.Or(\n  predicates=[\n    g.NestedPredicate(\n      selection=[\n        0\n      ],\n      predicate=g.IsLessThan(\n        value=2,\n        or_equal_to=False\n      )\n    ),\n    g.NestedPredicate(\n      selection=[\n        1\n      ],\n      predicate=g.IsMoreThan(\n        value=10,\n        or_equal_to=False\n      )\n    )\n  ]\n)\n```\n\n----------------------------------------\n\nTITLE: Deleting Graph Data using RemoveGraphAndDeleteAllData Operation\nDESCRIPTION: Operation to remove a graph and delete its underlying data. Requires the Gaffer Store to support DeleteAllData operation.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/administration-guide/gaffer-stores/federated-store.md#2025-04-23_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"RemoveGraphAndDeleteAllData\",\n  \"graphId\" : \"AnotherGraph\"\n}\n```\n\nLANGUAGE: java\nCODE:\n```\nRemoveGraph removeGraphAndDeleteAllData = new RemoveGraphAndDeleteAllData.Builder()\n        .graphId(\"AnotherGraph\")\n        .build();\nfederatedGraph.execute(removeGraphAndDeleteAllData, user);\n```\n\n----------------------------------------\n\nTITLE: Using ExtractValues in Python\nDESCRIPTION: Python implementation of the ExtractValues function that returns all values from input dictionaries.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/koryphe-functions.md#2025-04-23_snippet_45\n\nLANGUAGE: python\nCODE:\n```\ng.ExtractValues()\n```\n\n----------------------------------------\n\nTITLE: Implementing IterableFunction with a Single Function in Python\nDESCRIPTION: Python implementation of an IterableFunction that applies a MultiplyBy(2) function to each element in an iterable.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/koryphe-functions.md#2025-04-23_snippet_96\n\nLANGUAGE: python\nCODE:\n```\ng.IterableFunction( \n  functions=[ \n    g.MultiplyBy( \n      by=2 \n    ) \n  ] \n)\n```\n\n----------------------------------------\n\nTITLE: Using RemoveGraph Builder with graphId method in Java\nDESCRIPTION: Shows how to use the graphId method of the RemoveGraph.Builder instead of the removed setGraphId method.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/change-notes/migrating-from-v1-to-v2/deprecations.md#2025-04-23_snippet_9\n\nLANGUAGE: java\nCODE:\n```\nfinal RemoveGraph removeGraphOp = new RemoveGraph.Builder()\n        .graphId(\"myGraph\")\n        .build();\n```\n\n----------------------------------------\n\nTITLE: GetElementsBetweenSetsPairs Operation Results in Java\nDESCRIPTION: This code snippet shows the expected results from executing the GetElementsBetweenSetsPairs operation in Java. It returns an Entity for node 1 and two Edges connecting node 1 to nodes 2 and 4.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/accumulo.md#2025-04-23_snippet_8\n\nLANGUAGE: java\nCODE:\n```\nEntity[vertex=1,group=entity,properties=Properties[count=<java.lang.Integer>3]]\nEdge[source=1,destination=2,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=<java.lang.Integer>3]]\nEdge[source=1,destination=4,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=<java.lang.Integer>1]]\n```\n\n----------------------------------------\n\nTITLE: Using Custom Functions in Gremlin (Python)\nDESCRIPTION: This snippet shows how to use custom functions (like cypherToString) in a Gremlin query using Python. The query is submitted as a Groovy script due to lack of Python bindings for custom functions.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/user-guide/query/gremlin/custom-features.md#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom gremlin_python.driver import client\nfrom gremlin_python.driver.serializer import GraphSONSerializersV3d0\nfrom gremlin_python.driver.driver_remote_connection import DriverRemoteConnection\n\n# Establish client connection\nclient = client.Client('ws://localhost:8080/gremlin', 'g', message_serializer=GraphSONSerializersV3d0())\n\nresults = client.submit(\"g.V().values('count').map(cypherToString()).toList()\")\nresults.all().result()\n```\n\n----------------------------------------\n\nTITLE: Defining UnwrapEntityId in JSON\nDESCRIPTION: JSON representation of the UnwrapEntityId function. This can be used in Gaffer operations or configurations that accept JSON input.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/gaffer-functions.md#2025-04-23_snippet_63\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"UnwrapEntityId\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using ExtractWalkEdgesFromHop in Python\nDESCRIPTION: Python code to create an ExtractWalkEdgesFromHop function. This function extracts the Set of Edges at a specific hop from a provided Walk.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/gaffer-functions.md#2025-04-23_snippet_17\n\nLANGUAGE: python\nCODE:\n```\ng.ExtractWalkEdgesFromHop( \n  hop=1 \n)\n```\n\n----------------------------------------\n\nTITLE: Appending a Suffix to Strings in Python\nDESCRIPTION: Python implementation of a function that appends a specified suffix to an input string. This function takes a String and returns it with the suffix attached.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/koryphe-functions.md#2025-04-23_snippet_139\n\nLANGUAGE: python\nCODE:\n```\ng.StringAppend( \n  suffix=\"mySuffix\" \n)\n```\n\n----------------------------------------\n\nTITLE: Using FirstValid with Predicate in Python\nDESCRIPTION: Python implementation of the FirstValid function with a StringContains predicate to filter the input collection.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/koryphe-functions.md#2025-04-23_snippet_51\n\nLANGUAGE: python\nCODE:\n```\ng.FirstValid( \n  predicate=g.StringContains( \n    value=\"my\", \n    ignore_case=False \n  ) \n)\n```\n\n----------------------------------------\n\nTITLE: Scoring Operation Chains with Custom Named Score in Gaffer\nDESCRIPTION: Shows an example of ScoreOperationChain with a custom named score. It includes a NamedOperation with a custom score and uses a NamedOperationScoreResolver.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/misc.md#2025-04-23_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nfinal ScoreOperationChain scoreOperationChain = new ScoreOperationChain.Builder()\n        .operationChain(new OperationChain.Builder()\n                .first(new NamedOperation.Builder<EntitySeed, Iterable<? extends Element>>()\n                        .name(\"1-hop\")\n                        .input(new EntitySeed(1))\n                        .build())\n                .then(new Limit<>(3))\n                .build())\n        .build();\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n\"class\" : \"ScoreOperationChain\",\n\"operationChain\" : {\n    \"class\" : \"OperationChain\",\n    \"operations\" : [ {\n    \"class\" : \"NamedOperation\",\n    \"input\" : [ {\n        \"class\" : \"EntitySeed\",\n        \"class\" : \"EntitySeed\",\n        \"vertex\" : 1\n    } ],\n    \"operationName\" : \"1-hop\"\n    }, {\n    \"class\" : \"Limit\",\n    \"resultLimit\" : 3,\n    \"truncate\" : true\n    } ]\n}\n}\n```\n\nLANGUAGE: python\nCODE:\n```\ng.ScoreOperationChain(\noperation_chain=g.OperationChain(\n    operations=[\n    g.NamedOperation(\n        input=[\n        g.EntitySeed(\n            vertex=1\n        )\n        ],\n        operation_name=\"1-hop\"\n    ),\n    g.Limit(\n        result_limit=3,\n        truncate=True\n    )\n    ]\n)\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing IsLessThan-OrEqual Predicate in Java\nDESCRIPTION: Creates an IsLessThan predicate that checks if a comparable input is less than or equal to 5. The second parameter (true) enables the inclusive comparison.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/predicates-guide/koryphe-predicates.md#2025-04-23_snippet_76\n\nLANGUAGE: java\nCODE:\n```\nfinal IsLessThan function = new IsLessThan(5, true);\n```\n\n----------------------------------------\n\nTITLE: Using ConcatenateMergeFunction with GetTraits Operation in Gaffer Federated Store\nDESCRIPTION: This example shows how to use the ConcatenateMergeFunction with the GetTraits operation in a Federated Store. It retrieves and concatenates traits from two graphs (GraphA and GraphB), potentially resulting in duplicate traits.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/federated-operation.md#2025-04-23_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"class\": \"uk.gov.gchq.gaffer.federatedstore.operation.FederatedOperation\",\n    \"operation\": {\n        \"class\": \"GetTraits\"\n    },\n    \"graphIds\": [\"GraphA\",\"GraphB\"],\n        \"mergeFunction\": {\n            \"class\": \"uk.gov.gchq.gaffer.federatedstore.util.ConcatenateMergeFunction\"\n        }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Gunzip Function in Java\nDESCRIPTION: Creates a Gunzip function to decompress gzipped data. This function takes a byte array of compressed data as input and returns a byte array of decompressed data.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/koryphe-functions.md#2025-04-23_snippet_64\n\nLANGUAGE: java\nCODE:\n```\nfinal Gunzip gunzip = new Gunzip();\n```\n\n----------------------------------------\n\nTITLE: GetProxyProperties Results Example\nDESCRIPTION: Example results from executing the GetProxyProperties operation showing various proxy configuration settings.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/proxy.md#2025-04-23_snippet_4\n\nLANGUAGE: java\nCODE:\n```\n{\n    \"gaffer.context-root\": \"/rest\",\n    \"gaffer.host\": \"gaffer-rest\",\n    \"gaffer.port\": \"8080\",\n    \"URL_inferred\": \"http://gaffer-rest:8080/rest\",\n    \"gaffer.read-timeout\": \"10000\",\n    \"gaffer.connect-timeout\": \"10000\"\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"gaffer.context-root\": \"/rest\",\n    \"gaffer.host\": \"gaffer-rest\",\n    \"gaffer.port\": \"8080\",\n    \"URL_inferred\": \"http://gaffer-rest:8080/rest\",\n    \"gaffer.read-timeout\": \"10000\",\n    \"gaffer.connect-timeout\": \"10000\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring InDateRangeDual with fully contained range in JSON\nDESCRIPTION: JSON configuration for InDateRangeDual that requires both the start and end dates to be fully contained within the configured range. Only date ranges completely within 2017/03/01 to 2017/08/01 will be accepted.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/predicates-guide/koryphe-predicates.md#2025-04-23_snippet_37\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"InDateRangeDual\",\n  \"start\" : \"2017/03/01\",\n  \"end\" : \"2017/08/01\",\n  \"endFullyContained\" : true,\n  \"startFullyContained\" : true\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Public Access with AddGraph Operation\nDESCRIPTION: Example of adding a graph with public access enabled, allowing all users to access it regardless of authorizations.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/administration-guide/gaffer-stores/federated-store.md#2025-04-23_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"AddGraph\",\n  \"graphId\" : \"publicGraph\",\n  \"graphAuths\" : [ \"Auth1\" ],\n  \"isPublic\" : true,\n  \"options\" : null,\n  \"parentPropertiesId\" : \"mapStore\",\n  \"parentSchemaIds\" : [ \"exampleId\" ]\n}\n```\n\nLANGUAGE: java\nCODE:\n```\nAddGraph publicGraph = new AddGraph.Builder()\n        .graphId(\"publicGraph\")\n        .parentSchemaIds(Lists.newArrayList(\"exampleId\"))\n        .parentPropertiesId(\"mapStore\")\n        .isPublic(true)\n        .graphAuths(\"Auth1\")\n        .build();\nfederatedGraph.execute(addAnotherGraph, user);\n```\n\n----------------------------------------\n\nTITLE: Using FederatedOperation with GetAllElements and Custom Merge Function in JSON\nDESCRIPTION: Example of the new FederatedOperation structure that specifies an operation to federate to subgraphs, the target graph IDs, and a custom merge function for combining results.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/change-notes/migrating-from-v1-to-v2/federation-changes.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"class\": \"uk.gov.gchq.gaffer.federatedstore.operation.FederatedOperation\",\n    \"operation\": {\n        \"class\": \"uk.gov.gchq.gaffer.operation.impl.get.GetAllElements\"\n    },\n    \"graphIds\": [ \"graphA\", \"graphB\" ],\n    \"mergeFunction\": {\n        \"class\": \"uk.gov.gchq.gaffer.federatedstore.util.ConcatenateMergeFunction\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring DivideBy in JSON\nDESCRIPTION: JSON configuration for the DivideBy function with a divisor of 2, which will divide input integers by 2.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/koryphe-functions.md#2025-04-23_snippet_35\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"DivideBy\",\n  \"by\" : 2\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Numeric Sum Calculation in Java\nDESCRIPTION: Creates a Sum operator that calculates the sum of two numbers. Handles various numeric types including Integer, Long, Double, and Short, retaining the original type in the result.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/binary-operators-guide/koryphe-operators.md#2025-04-23_snippet_18\n\nLANGUAGE: java\nCODE:\n```\nfinal Sum sum = new Sum();\n```\n\n----------------------------------------\n\nTITLE: Results of Reduce Operation in Java\nDESCRIPTION: The results returned from executing the Reduce operation in Java, showing the aggregated values (6 and 13) produced by the Sum function.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/core.md#2025-04-23_snippet_41\n\nLANGUAGE: java\nCODE:\n```\n6\n13\n```\n\n----------------------------------------\n\nTITLE: Using ToSet Function in Python\nDESCRIPTION: Python code to create a ToSet function instance using the Gaffer Python client library.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/koryphe-functions.md#2025-04-23_snippet_179\n\nLANGUAGE: python\nCODE:\n```\ng.ToSet()\n```\n\n----------------------------------------\n\nTITLE: Nested Named Operations Example - Python Implementation\nDESCRIPTION: Python implementation of nested Named Operations showing creation of two operations with one referencing the other.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/administration-guide/named-operations.md#2025-04-23_snippet_16\n\nLANGUAGE: python\nCODE:\n```\ng.AddNamedOperation( \n    operation_chain=g.OperationChainDAO( \n        operations=[ \n            g.GetElements(\n                input=[\n                    g.EntitySeed(vertex=1)\n                ]\n            ) \n        ] \n    ), \n    operation_name=\"namedOp1\", \n    description=\"Simple Named Operation\", \n    overwrite_flag=True \n)\n\ng.AddNamedOperation( \n    operation_chain=g.OperationChainDAO( \n        operations=[ \n            g.NamedOperation(\n                operation_name=\"namedOp1\"\n            ) \n        ] \n    ), \n    operation_name=\"namedOp2\", \n    description=\"Nested Named Operation\", \n    overwrite_flag=True \n)\n```\n\n----------------------------------------\n\nTITLE: Running GetAdjacentIds Operation Multiple Times with While in Python\nDESCRIPTION: Python implementation of a While operation that runs GetAdjacentIds three times with OUTGOING direction. The input is an EntitySeed with vertex value 1, and the condition is set to true to allow execution for the specified number of repeats.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/flow.md#2025-04-23_snippet_12\n\nLANGUAGE: python\nCODE:\n```\ng.While( \n  max_repeats=3, \n  input=[ \n    g.EntitySeed( \n      vertex=1 \n    ) \n  ], \n  condition=True, \n  operation=g.GetAdjacentIds( \n    include_incoming_out_going=\"OUTGOING\" \n  ) \n)\n```\n\n----------------------------------------\n\nTITLE: Implementing FunctionChain with Standard Functions in Java\nDESCRIPTION: Creates a FunctionChain that applies ToLowerCase, ToTypeSubTypeValue, and ToEntityId functions consecutively. This chain converts a string to lowercase, then to a TypeSubTypeValue, and finally to an EntityId.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/koryphe-functions.md#2025-04-23_snippet_58\n\nLANGUAGE: java\nCODE:\n```\nfinal FunctionChain function = new FunctionChain.Builder<>()\n        .execute(new ToLowerCase())\n        .execute(new ToTypeSubTypeValue())\n        .execute(new ToEntityId())\n        .build();\n```\n\n----------------------------------------\n\nTITLE: Configuring ExtractValue in JSON\nDESCRIPTION: JSON configuration for the ExtractValue function with a specified key to extract from input Maps.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/koryphe-functions.md#2025-04-23_snippet_41\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"ExtractValue\",\n  \"key\" : \"blueKey\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing IsMoreThan-OrEqual Predicate in Java\nDESCRIPTION: Creates an IsMoreThan predicate that checks if a comparable input is greater than or equal to 5. The second parameter (true) enables the inclusive comparison.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/predicates-guide/koryphe-predicates.md#2025-04-23_snippet_85\n\nLANGUAGE: java\nCODE:\n```\nfinal IsMoreThan function = new IsMoreThan(5, true);\n```\n\n----------------------------------------\n\nTITLE: Converting Date Strings to Timestamps with Custom Format in Python\nDESCRIPTION: Python implementation of a function that parses date strings with a custom format into timestamp values. This function uses a year-month and hour-minute format.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/koryphe-functions.md#2025-04-23_snippet_127\n\nLANGUAGE: python\nCODE:\n```\ng.ParseTime( \n  format=\"yyyy-MM hh:mm\", \n  time_unit=\"MILLISECOND\" \n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Gaffer REST API Docker Image\nDESCRIPTION: Dockerfile example for creating a custom Gaffer REST API image that includes custom store configurations by extending the base image.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/administration-guide/gaffer-deployment/gaffer-docker/gaffer-images.md#2025-04-23_snippet_1\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM gchq/gaffer-rest:latest\n\n# Copy over the existing directory with store configs in\nCOPY ./custom/configs/gaffer/store /gaffer/store\n```\n\n----------------------------------------\n\nTITLE: Implementing IterableFlatten Function without Binary Operator in JSON\nDESCRIPTION: JSON representation of an IterableFlatten function with no binary operator specified.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/koryphe-functions.md#2025-04-23_snippet_89\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"IterableFlatten\"\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Named Operation to the Federated Store Cache\nDESCRIPTION: Java example demonstrating how to add a Named Operation to the federated store's cache (making it available to all sub-graphs) by omitting the graph IDs option.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/administration-guide/gaffer-stores/simple-federated/additional-info.md#2025-04-23_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nfinal AddNamedOperation addNamedOp = new AddNamedOperation.Builder()\n    .name(\"NamedOperation\")\n    .operationChain(new OperationChain.Builder()\n            .first(new GetAllElements())\n            .build())\n    .build();\n```\n\n----------------------------------------\n\nTITLE: Showing ForEach Operation Results in JSON\nDESCRIPTION: This JSON snippet presents the results of a ForEach operation in Gaffer, showing arrays of connected vertices.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/flow.md#2025-04-23_snippet_30\n\nLANGUAGE: json\nCODE:\n```\n[ [ 2, 3, 1 ], [ 3, 4, 5, 1 ] ]\n```\n\n----------------------------------------\n\nTITLE: Implementing InDateRange with second precision in Python\nDESCRIPTION: Python code to create an InDateRange predicate that checks if a Date falls between 01:30:10 and 01:30:50 on January 1, 2017 (inclusive).\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/predicates-guide/koryphe-predicates.md#2025-04-23_snippet_17\n\nLANGUAGE: python\nCODE:\n```\ng.InDateRange(\n  start=\"2017/01/01 01:30:10\",\n  end=\"2017/01/01 01:30:50\"\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring ExtractKeys in JSON\nDESCRIPTION: JSON configuration for the ExtractKeys function that extracts all keys from an input Map.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/koryphe-functions.md#2025-04-23_snippet_38\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"ExtractKeys\"\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Duplicate Edges in Corner Cases using Java\nDESCRIPTION: This example demonstrates a corner case where duplicate edges can be returned when using both EntitySeed and EdgeSeed in the input. It highlights a potential issue with the Accumulo store implementation.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/get.md#2025-04-23_snippet_25\n\nLANGUAGE: java\nCODE:\n```\nfinal GetElements operation = new GetElements.Builder()\n        .input(new EntitySeed(3), new EdgeSeed(2, 3, DirectedType.EITHER))\n        .build();\n```\n\n----------------------------------------\n\nTITLE: Java JobDetail Result Format\nDESCRIPTION: The Java result format when retrieving job details. Shows a JobDetail object with job ID, user information, status, start time, and operation chain details.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/export.md#2025-04-23_snippet_15\n\nLANGUAGE: java\nCODE:\n```\nJobDetail[jobId=af0a2efe-5f3c-458d-8fa2-93d0f28cbd82,user=User[userId=user01,dataAuths=[],opAuths=[]],status=RUNNING,startTime=1667818800114,opChain=OperationChain[GetAllElements->ExportToGafferResultCache->DiscardOutput->GetJobDetails]]\n```\n\n----------------------------------------\n\nTITLE: Implementing InDateRangeDual with exclusive range in Python\nDESCRIPTION: Python implementation of InDateRangeDual with exclusive start and end dates. The function will test for overlaps with a range that starts just after midnight on 2017/03/01 and ends just before midnight on 2017/08/01.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/predicates-guide/koryphe-predicates.md#2025-04-23_snippet_41\n\nLANGUAGE: python\nCODE:\n```\ng.InDateRangeDual(\n  start=\"2017/03/01\",\n  end=\"2017/08/01\",\n  start_inclusive=False,\n  end_inclusive=False\n)\n```\n\n----------------------------------------\n\nTITLE: Using MergeSchema with GetSchema in Gaffer FederatedStore\nDESCRIPTION: This example demonstrates how to use the MergeSchema function with the GetSchema operation. This merge function returns an aggregated schema from subgraphs unless there is a conflict, in which case ConcatenateMergeFunction might be preferred.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/federated-operation.md#2025-04-23_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"class\": \"uk.gov.gchq.gaffer.federatedstore.operation.FederatedOperation\",\n    \"operation\": {\n        \"class\": \"GetSchema\"\n    },\n    \"graphIds\": [\"GraphA\",\"GraphB\"],\n    \"mergeFunction\": {\n        \"class\": \"uk.gov.gchq.gaffer.federatedstore.util.MergeSchema\"\n    }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"edges\": {\n        \"LivesIn\": {\n        \"source\": \"id.person.string\",\n        \"destination\": \"id.place.string\",\n        \"directed\": \"true\"\n        },\n        \"Drives\": {\n        \"source\": \"id.person.string\",\n        \"destination\": \"id.vehicle.string\",\n        \"directed\": \"true\"\n        },\n        \"WorksAs\": {\n        \"source\": \"id.person.string\",\n        \"destination\": \"id.job.string\",\n        \"directed\": \"true\"\n        },\n        \"MakeModel\": {\n        \"source\": \"id.vehicle.string\",\n        \"destination\": \"id.manufacturer.string\",\n        \"directed\": \"true\"\n        }\n    },\n    \"entities\": {\n        \"Vehicle\": {\n        \"description\": \"Entity representing a vehicle vertex\",\n        \"vertex\": \"id.vehicle.string\",\n        \"properties\": {\n            \"type\": \"property.string\"\n        },\n        \"aggregate\": false\n        },\n        \"Manufacturer\": {\n        \"description\": \"Entity representing a manufacturer vertex\",\n        \"vertex\": \"id.manufacturer.string\",\n        \"properties\": {\n            \"name\": \"property.string\"\n        },\n        \"aggregate\": false\n        },\n        \"Job\": {\n        \"description\": \"Entity representing a job vertex\",\n        \"vertex\": \"id.job.string\",\n        \"properties\": {\n            \"type\": \"property.string\"\n        },\n        \"aggregate\": false\n        },\n        \"Person\": {\n        \"description\": \"Entity representing a person vertex\",\n        \"vertex\": \"id.person.string\",\n        \"properties\": {\n            \"name\": \"property.string\",\n            \"count\": \"count.integer\"\n        }\n        },\n        \"Place\": {\n        \"description\": \"Entity representing a place vertex\",\n        \"vertex\": \"id.place.string\",\n        \"properties\": {\n            \"name\": \"property.string\"\n        },\n        \"aggregate\": false\n        }\n    },\n    \"types\": {\n        \"id.person.string\": {\n        \"description\": \"A basic type to hold the string id of a person entity\",\n        \"class\": \"java.lang.String\"\n        },\n        \"id.place.string\": {\n        \"description\": \"A basic type to hold the string id of a place entity\",\n        \"class\": \"java.lang.String\"\n        },\n        \"id.job.string\": {\n        \"description\": \"A basic type to hold the string id of a job entity\",\n        \"class\": \"java.lang.String\"\n        },\n        \"property.string\": {\n        \"description\": \"A type to hold string properties of entities\",\n        \"class\": \"java.lang.String\",\n        \"aggregateFunction\": {\n            \"class\": \"uk.gov.gchq.koryphe.impl.binaryoperator.First\"\n        }\n        },\n        \"count.integer\": {\n        \"description\": \"A long count that must be greater than or equal to 0.\",\n        \"class\": \"java.lang.Integer\",\n        \"aggregateFunction\": {\n            \"class\": \"uk.gov.gchq.koryphe.impl.binaryoperator.Sum\"\n        },\n        \"validateFunctions\": [\n            {\n            \"class\": \"uk.gov.gchq.koryphe.impl.predicate.IsMoreThan\",\n            \"orEqualTo\": true,\n            \"value\": 0\n            }\n        ]\n        },\n        \"true\": {\n        \"class\": \"java.lang.Boolean\",\n        \"validateFunctions\": [\n            {\n            \"class\": \"uk.gov.gchq.koryphe.impl.predicate.IsTrue\"\n            }\n        ]\n        },\n        \"id.manufacturer.string\": {\n        \"description\": \"A basic type to hold the string id of a manufacturer entity\",\n        \"class\": \"java.lang.String\"\n        },\n        \"id.vehicle.string\": {\n        \"description\": \"A basic type to hold the string id of a vehicle entity\",\n        \"class\": \"java.lang.String\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Identity Function in Java\nDESCRIPTION: Creates an Identity function that simply returns the input without modification. This function can be used with any input type and returns the same type as the input.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/koryphe-functions.md#2025-04-23_snippet_67\n\nLANGUAGE: java\nCODE:\n```\nfinal Identity function = new Identity();\n```\n\n----------------------------------------\n\nTITLE: Example Neo4j CSV Format\nDESCRIPTION: Example of Neo4j CSV format used for import and export in Gaffer, showing both tabular and CSV representations of the data.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/user-guide/query/gaffer-syntax/import-export/csv.md#2025-04-23_snippet_6\n\nLANGUAGE: csv\nCODE:\n```\n_id,name:String,age:Int,lang:String,_labels,_start,_end,_type,weight:Float\nv1,marko,29,,Person,,,,\nv2,lop,,java,Software,,,,\ne1,,,,,v1,v2,Created,0.4\n```\n\n----------------------------------------\n\nTITLE: Creating InDateRangeDual Function in Python\nDESCRIPTION: Python code to create an InDateRangeDual function with an end date of August 1, 2017. This function is used in Gaffer's Python client to perform date range checks.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/predicates-guide/koryphe-predicates.md#2025-04-23_snippet_47\n\nLANGUAGE: python\nCODE:\n```\ng.InDateRangeDual(\n  end=\"2017/08/01\"\n)\n```\n\n----------------------------------------\n\nTITLE: Exporting Edges to Existing Graph using GraphLibrary in Python\nDESCRIPTION: This Python snippet shows how to export all edges with group 'edge' to an existing graph 'exportGraphId' using a GraphLibrary. It creates an OperationChain with GetAllElements and ExportToOtherGraph operations.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/export.md#2025-04-23_snippet_44\n\nLANGUAGE: python\nCODE:\n```\ng.OperationChain( \n    operations=[ \n        g.GetAllElements( \n        view=g.View( \n            edges=[ \n                g.ElementDefinition( \n                    group=\"edge\" \n                ) \n                ], \n                all_edges=False, \n                all_entities=False \n            ) \n        ), \n        g.ExportToOtherGraph( \n            graph_id=\"exportGraphId\" \n        ) \n    ] \n)\n```\n\n----------------------------------------\n\nTITLE: Comparing Gremlin vs GafferPop Query Results\nDESCRIPTION: Demonstrates the difference in query results between standard Gremlin and GafferPop due to input seed deduplication. Shows how GafferPop returns unique vertices while standard Gremlin preserves duplicates.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/user-guide/query/gremlin/gremlin-limits.md#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n(Gremlin)   g.V().out() = [v2, v3, v3, v3, v4, v5]\n(GafferPop) g.V().out() = [v2, v3, v4, v5]\n```\n\n----------------------------------------\n\nTITLE: Adding Elements From Kafka - JSON Configuration\nDESCRIPTION: JSON configuration for AddElementsFromKafka operation with Kafka connection and processing parameters.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/flink.md#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n\"class\" : \"AddElementsFromKafka\",\n\"topic\" : \"topic1\",\n\"groupId\" : \"groupId1\",\n\"bootstrapServers\" : [ \"hostname1:8080,hostname2:8080\" ],\n\"elementGenerator\" : \"ElementGenerator\",\n\"parallelism\" : 1\n}\n```\n\n----------------------------------------\n\nTITLE: Masking Timestamps with Start and End Date\nDESCRIPTION: Creates a timestamp mask with both start time (10000ms) and end time (20000ms). This will filter timestamps to only those within the specified range.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/gaffer-functions.md#2025-04-23_snippet_32\n\nLANGUAGE: java\nCODE:\n```\nMaskTimestampSetByTimeRange function = new MaskTimestampSetByTimeRange(10000L, 20000L);\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"MaskTimestampSetByTimeRange\",\n  \"startTime\" : 10000,\n  \"endTime\" : 20000,\n  \"timeUnit\" : \"MILLISECOND\"\n}\n```\n\nLANGUAGE: python\nCODE:\n```\ng.MaskTimestampSetByTimeRange( \n  start_time=10000, \n  end_time=20000, \n  time_unit=\"MILLISECOND\" \n)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Multiple Variables from Gaffer Context\nDESCRIPTION: Example of using the GetVariables operation to retrieve multiple variables from the Gaffer operation context map. This operation takes a list of variable names as input.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/core.md#2025-04-23_snippet_95\n\nLANGUAGE: java\nCODE:\n```\nfinal List<String> variableNames = Arrays.asList(\"varName\");\nfinal GetVariables op = new GetVariables.Builder()\n        .variableNames(variableNames)\n        .build();\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"class\" : \"GetVariables\",\n    \"variableNames\": [\"varName\"]\n}\n```\n\nLANGUAGE: java\nCODE:\n```\n5\n```\n\nLANGUAGE: json\nCODE:\n```\n5\n```\n\n----------------------------------------\n\nTITLE: Retrieving Elements Within a Set using GetElementsWithinSet in Java\nDESCRIPTION: This Java example demonstrates how to use the GetElementsWithinSet operation to retrieve elements (entities and edges) within a set of vertices. It creates an operation with input seeds for vertices 1, 2, and 3.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/accumulo.md#2025-04-23_snippet_10\n\nLANGUAGE: java\nCODE:\n```\nfinal GetElementsWithinSet operation = new GetElementsWithinSet.Builder()\n        .input(new EntitySeed(1), new EntitySeed(2), new EntitySeed(3))\n        .build();\n```\n\n----------------------------------------\n\nTITLE: Configuring ToString Function in JSON\nDESCRIPTION: JSON configuration for the ToString function. This can be used in Gaffer graph configurations or other JSON-based setups.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/koryphe-functions.md#2025-04-23_snippet_181\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"ToString\"\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting to CSV in Gaffer JSON\nDESCRIPTION: JSON operation chain for exporting data to CSV in Gaffer. It includes getting all elements, converting them to CSV format, and exporting to a local file.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/user-guide/query/gaffer-syntax/import-export/csv.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"class\": \"OperationChain\",\n    \"operations\": [\n        {\n            \"class\": \"GetAllElements\"\n        },\n        {\n            \"class\": \"ToCsv\",\n            \"csvGenerator\": \"Neo4jCsvGenerator\"\n        },\n        {\n            \"class\": \"ExportToLocalFile\",\n            \"filePath\": \"output.csv\"\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing StringJoin Function in Java\nDESCRIPTION: Creates a StringJoin function without a delimiter that concatenates strings in an iterable collection. Takes an Iterable as input and returns a String with all elements joined without any separator.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/koryphe-functions.md#2025-04-23_snippet_140\n\nLANGUAGE: java\nCODE:\n```\nfinal StringJoin function = new StringJoin();\n```\n\n----------------------------------------\n\nTITLE: Getting DataFrame of Elements with Entity Group in JSON\nDESCRIPTION: JSON representation of GetDataFrameOfElements operation for retrieving entities.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/spark.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"GetDataFrameOfElements\",\n  \"view\" : {\n    \"entities\" : {\n      \"entity\" : { }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing ExtractId for Edge in Java\nDESCRIPTION: Creates an ExtractId instance to extract the SOURCE identifier from an Edge element. This function can be used with different IdentifierTypes.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/gaffer-functions.md#2025-04-23_snippet_6\n\nLANGUAGE: java\nCODE:\n```\nfinal ExtractId function = new ExtractId(IdentifierType.SOURCE);\n```\n\n----------------------------------------\n\nTITLE: Implementing Minimum Value Selection in Python\nDESCRIPTION: Python implementation of the Min operator that returns the minimum value between two comparable inputs.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/binary-operators-guide/koryphe-operators.md#2025-04-23_snippet_11\n\nLANGUAGE: python\nCODE:\n```\ng.Min()\n```\n\n----------------------------------------\n\nTITLE: Converting Single Input to List with ToSingletonList in Python\nDESCRIPTION: Python implementation of the ToSingletonList operation that converts a single integer input (4) to a List. Uses Gaffer's Python client library.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/core.md#2025-04-23_snippet_62\n\nLANGUAGE: python\nCODE:\n```\ng.ToSingletonList(\n  input=4\n)\n```\n\n----------------------------------------\n\nTITLE: Data Flow Diagram in Mermaid\nDESCRIPTION: Flowchart showing the data loading process from raw data through element generation to adding elements in Gaffer\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/development-guide/example-deployment/using-the-api.md#2025-04-23_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart LR\n    A(Raw Data) --> B(GenerateElements)\n    B --> C(AddElements)\n```\n\n----------------------------------------\n\nTITLE: Executing HDFS Job with Hadoop\nDESCRIPTION: Basic command for executing a custom shaded jar containing HDFS operations using Hadoop.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/hdfs.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhadoop jar custom-shaded-jar.jar\n```\n\n----------------------------------------\n\nTITLE: Applying Graph Metadata with Helm\nDESCRIPTION: Helm command to upgrade deployment with new graph metadata configuration.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/administration-guide/gaffer-deployment/kubernetes-guide/helm-configuration.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nhelm upgrade my-graph gaffer-docker/gaffer -f graph-metadata.yaml --reuse-values\n```\n\n----------------------------------------\n\nTITLE: Implementing precise time window with startOffset and endOffset in Java\nDESCRIPTION: Creates an InDateRange predicate for a specific hour window. This example checks if a date is exactly 7 hours ago (but not 6 hours ago), using hour precision.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/predicates-guide/koryphe-predicates.md#2025-04-23_snippet_27\n\nLANGUAGE: java\nCODE:\n```\nfinal InDateRange function = new InDateRange.Builder()\n        .startOffset(-7L)\n        .endOffset(-6L)\n        .endInclusive(false)\n        .offsetUnit(TimeUnit.HOUR)\n        .build();\n```\n\n----------------------------------------\n\nTITLE: Initializing DefaultIfEmpty Function\nDESCRIPTION: Function to provide default value when input is empty. Checks if input is empty and returns default value if true.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/koryphe-functions.md#2025-04-23_snippet_22\n\nLANGUAGE: java\nCODE:\n```\nfinal DefaultIfEmpty function = new DefaultIfEmpty();\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"DefaultIfEmpty\"\n}\n```\n\nLANGUAGE: python\nCODE:\n```\ng.DefaultIfEmpty()\n```\n\n----------------------------------------\n\nTITLE: Configuring ReduceRelatedElements with Complex Example in Python\nDESCRIPTION: This Python example configures ReduceRelatedElements for the complex example case. It uses the same configuration as the basic example, showing how the same function specification can be applied to more complex graph structures.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/gaffer-functions.md#2025-04-23_snippet_40\n\nLANGUAGE: python\nCODE:\n```\ng.ReduceRelatedElements( \n  visibility_aggregator=g.CollectionConcat(), \n  vertex_aggregator=g.Max(), \n  related_vertex_groups=[ \n    \"relatesTo\" \n  ], \n  visibility_property=\"visibility\" \n)\n```\n\n----------------------------------------\n\nTITLE: Adding Gaffer Spark-Accumulo Library Dependency\nDESCRIPTION: Maven dependency configuration required for using Spark with Accumulo in Gaffer.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/development-guide/project-structure/components/libraries/spark.md#2025-04-23_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n  <groupId>uk.gov.gchq.gaffer</groupId>\n  <artifactId>spark-accumulo-library</artifactId>\n  <version>${gaffer.version}</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: GetWalks Java Results Format\nDESCRIPTION: Shows the Java format of results returned from a GetWalks operation, displaying two walks through the graph from vertex 1, through vertex 5, to vertices 8 and 2.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/get.md#2025-04-23_snippet_48\n\nLANGUAGE: java\nCODE:\n```\nuk.gov.gchq.gaffer.data.graph.Walk[ 1 --> 5 --> 8 ]\nuk.gov.gchq.gaffer.data.graph.Walk[ 1 --> 5 --> 2 ]\n```\n\n----------------------------------------\n\nTITLE: Results of ElementMatch Join in Java\nDESCRIPTION: The results of the ElementMatch join operation in Java format. Shows matched entities from both sides of the join where the 'count' property matches, returning three tuples with entities from vertices 5, 1, and 4.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/join.md#2025-04-23_snippet_14\n\nLANGUAGE: java\nCODE:\n```\n[ [Entity[vertex=5,group=entity,properties=Properties[count=<java.lang.Integer>3]]] --> Entity[vertex=5,group=entity,properties=Properties[count=<java.lang.Integer>3]] ]\n[ [Entity[vertex=1,group=entity,properties=Properties[count=<java.lang.Integer>3]]] --> Entity[vertex=1,group=entity,properties=Properties[count=<java.lang.Integer>3]] ]\n[ [Entity[vertex=4,group=entity,properties=Properties[count=<java.lang.Integer>1]]] --> Entity[vertex=4,group=entity,properties=Properties[count=<java.lang.Integer>1]] ]\n```\n\n----------------------------------------\n\nTITLE: Implementing IterableFilter Function with IsMoreThan Predicate in JSON\nDESCRIPTION: JSON representation of an IterableFilter function that filters an iterable by applying the IsMoreThan predicate to each element.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/koryphe-functions.md#2025-04-23_snippet_86\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"IterableFilter\",\n  \"predicate\" : {\n    \"class\" : \"IsMoreThan\",\n    \"orEqualTo\" : false,\n    \"value\" : 5\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using ToLowerCase Function in Python\nDESCRIPTION: Python code to create a ToLowerCase function instance using the Gaffer Python client library.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/koryphe-functions.md#2025-04-23_snippet_173\n\nLANGUAGE: python\nCODE:\n```\ng.ToLowerCase()\n```\n\n----------------------------------------\n\nTITLE: Using ToTuple Function in Python\nDESCRIPTION: Python code to create a ToTuple function instance using the Gaffer Python client library.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/koryphe-functions.md#2025-04-23_snippet_185\n\nLANGUAGE: python\nCODE:\n```\ng.ToTuple()\n```\n\n----------------------------------------\n\nTITLE: Filtering Elements with Global View in JSON\nDESCRIPTION: Demonstrates how to configure a View that summarizes all results by setting an empty groupBy array for all element groups in the Schema.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/user-guide/query/gaffer-syntax/faqs.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"view\": {\n    \"globalElements\" : [{\n        \"groupBy\" : []\n    }]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Concat Function in Java\nDESCRIPTION: Shows how to create a Concat function in Java to concatenate objects using a specified separator. In this example, it uses a comma as the separator.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/koryphe-functions.md#2025-04-23_snippet_12\n\nLANGUAGE: java\nCODE:\n```\nfinal Concat function = new Concat(\",\");\n```\n\n----------------------------------------\n\nTITLE: Masking Timestamps with End Date Only\nDESCRIPTION: Creates a timestamp mask with only an end time of 20000 milliseconds. This will filter out any timestamps after 20000ms.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/gaffer-functions.md#2025-04-23_snippet_31\n\nLANGUAGE: java\nCODE:\n```\nMaskTimestampSetByTimeRange function = new MaskTimestampSetByTimeRange(null, 20000L);\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"MaskTimestampSetByTimeRange\",\n  \"endTime\" : 20000,\n  \"timeUnit\" : \"MILLISECOND\"\n}\n```\n\nLANGUAGE: python\nCODE:\n```\ng.MaskTimestampSetByTimeRange( \n  end_time=20000, \n  time_unit=\"MILLISECOND\" \n)\n```\n\n----------------------------------------\n\nTITLE: Creating StringReplace Function in Python\nDESCRIPTION: Python implementation of a StringReplace function. This function replaces all occurrences of the search string '[tea' with 'cake' without using regular expressions.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/koryphe-functions.md#2025-04-23_snippet_157\n\nLANGUAGE: python\nCODE:\n```\ng.StringReplace( \n  search_string=\"[tea\", \n  replacement=\"cake\" \n)\n```\n\n----------------------------------------\n\nTITLE: GetElementsWithinSet Operation in JSON\nDESCRIPTION: This JSON representation of the GetElementsWithinSet operation specifies input seeds for vertices 1, 2, and 3. It demonstrates how to structure the operation for use in a Gaffer graph query.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/accumulo.md#2025-04-23_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"GetElementsWithinSet\",\n  \"input\" : [ {\n    \"class\" : \"EntitySeed\",\n    \"vertex\" : 1\n  }, {\n    \"class\" : \"EntitySeed\",\n    \"vertex\" : 2\n  }, {\n    \"class\" : \"EntitySeed\",\n    \"vertex\" : 3\n  } ]\n}\n```\n\n----------------------------------------\n\nTITLE: Using ToUpperCase Function in Python\nDESCRIPTION: Python code to create a ToUpperCase function instance using the Gaffer Python client library.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/koryphe-functions.md#2025-04-23_snippet_188\n\nLANGUAGE: python\nCODE:\n```\ng.ToUpperCase()\n```\n\n----------------------------------------\n\nTITLE: Configuring StringPrepend Function in JSON\nDESCRIPTION: JSON configuration for a StringPrepend function. This configuration specifies a prefix that will be added to the beginning of any input string.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/koryphe-functions.md#2025-04-23_snippet_147\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"StringPrepend\",\n  \"prefix\" : \"myPrefix\"\n}\n```\n\n----------------------------------------\n\nTITLE: GetWalks with Loops in Python\nDESCRIPTION: This Python snippet demonstrates the use of GetWalks to retrieve walks of length 6 starting from vertex 1. It includes multiple OperationChain objects, each containing a GetElements operation with OUTGOING direction filter.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/get.md#2025-04-23_snippet_62\n\nLANGUAGE: python\nCODE:\n```\ng.GetWalks(\n  input=[\n    g.EntitySeed(\n      vertex=1\n    )\n  ],\n  operations=[\n    g.OperationChain(\n      operations=[\n        g.GetElements(\n          include_incoming_out_going=\"OUTGOING\"\n        )\n      ]\n    ),\n    g.OperationChain(\n      operations=[\n        g.GetElements(\n          include_incoming_out_going=\"OUTGOING\"\n        )\n      ]\n    ),\n    g.OperationChain(\n      operations=[\n        g.GetElements(\n          include_incoming_out_going=\"OUTGOING\"\n        )\n      ]\n    ),\n    g.OperationChain(\n      operations=[\n        g.GetElements(\n          include_incoming_out_going=\"OUTGOING\"\n        )\n      ]\n    ),\n    g.OperationChain(\n      operations=[\n        g.GetElements(\n          include_incoming_out_going=\"OUTGOING\"\n        )\n      ]\n    ),\n    g.OperationChain(\n      operations=[\n        g.GetElements(\n          include_incoming_out_going=\"OUTGOING\"\n        )\n      ]\n    )\n  ],\n  results_limit=1000000\n)\n```\n\n----------------------------------------\n\nTITLE: Converting Elements to Array in Gaffer\nDESCRIPTION: Demonstrates conversion of GetElements operation results into an array format. The operation chain gets elements for EntitySeeds 1 and 2, then converts the results to an array. Note that this operation is memory-intensive for large result sets.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/core.md#2025-04-23_snippet_54\n\nLANGUAGE: java\nCODE:\n```\nfinal OperationChain<? extends Element[]> opChain = new OperationChain.Builder()\n        .first(new GetElements.Builder()\n                .input(new EntitySeed(1), new EntitySeed(2))\n                .build())\n        .then(new ToArray<>())\n        .build();\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"OperationChain\",\n  \"operations\" : [ {\n    \"class\" : \"GetElements\",\n    \"input\" : [ {\n      \"class\" : \"EntitySeed\",\n      \"vertex\" : 1\n    }, {\n      \"class\" : \"EntitySeed\",\n      \"vertex\" : 2\n    } ]\n  }, {\n    \"class\" : \"uk.gov.gchq.gaffer.operation.impl.output.ToArray\"\n  } ]\n}\n```\n\nLANGUAGE: python\nCODE:\n```\ng.OperationChain(\n  operations=[\n    g.GetElements(\n      input=[\n        g.EntitySeed(\n          vertex=1\n        ),\n        g.EntitySeed(\n          vertex=2\n        )\n      ]\n    ),\n    g.ToArray()\n  ]\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing DefaultIfNull Function\nDESCRIPTION: Function to provide default value when input is null. Returns specified default value if input is null.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/koryphe-functions.md#2025-04-23_snippet_23\n\nLANGUAGE: java\nCODE:\n```\nfinal DefaultIfNull function = new DefaultIfNull(\"DEFAULT\");\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"DefaultIfNull\",\n  \"defaultValue\" : \"DEFAULT\"\n}\n```\n\nLANGUAGE: python\nCODE:\n```\ng.DefaultIfNull( \n  default_value=\"DEFAULT\" \n)\n```\n\n----------------------------------------\n\nTITLE: Defining Gaffer Graph Elements in JSON\nDESCRIPTION: JSON representation of various elements in a Gaffer graph, including edges (WorksAs) and entities (Job, Place). The snippet shows how vertex relationships and properties are structured within the Gaffer database framework.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/federated-operation.md#2025-04-23_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n        {\n            \"group\": \"WorksAs\",\n            \"source\": \"1\",\n            \"destination\": \"3\",\n            \"directed\": true,\n            \"matchedVertex\": \"SOURCE\",\n            \"properties\": {}\n        },\n        {\n            \"class\": \"uk.gov.gchq.gaffer.data.element.Entity\",\n            \"group\": \"Job\",\n            \"vertex\": \"2\",\n            \"properties\": {\n            \"type\": \"Builder\"\n            }\n        },\n        {\n            \"class\": \"uk.gov.gchq.gaffer.data.element.Entity\",\n            \"group\": \"Place\",\n            \"vertex\": \"3\",\n            \"properties\": {\n            \"name\": \"Bobsville\"\n            }\n        }\n    ]\n    ```\n```\n\n----------------------------------------\n\nTITLE: Configuring relative date range with startOffset in JSON\nDESCRIPTION: JSON configuration for an InDateRange predicate that checks if a date is within the last 7 days, with no upper bound.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/predicates-guide/koryphe-predicates.md#2025-04-23_snippet_25\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"InDateRange\",\n  \"startOffset\" : -7,\n  \"offsetUnit\" : \"DAY\"\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Edges to Gaffer Schema JSON\nDESCRIPTION: This snippet expands the schema to include edge definitions. It adds a 'Created' edge type connecting Person to Software entities, demonstrating how to specify source, destination, and directionality.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/development-guide/example-deployment/writing-the-schema.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"edges\": {\n        \"Created\": {\n            \"source\": \"id.person.string\",\n            \"destination\": \"id.software.string\",\n            \"directed\": \"true\"\n        }\n    },\n    \"entities\": {\n        \"Person\": {\n            \"description\": \"Entity representing a person vertex\",\n            \"vertex\": \"id.person.string\"\n        },\n        \"Software\": {\n            \"description\": \"Entity representing a software vertex\",\n            \"vertex\": \"id.software.string\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Increment Function with Double in Python\nDESCRIPTION: Python implementation of an Increment function that adds a fixed double value (3.0) to numeric inputs.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/koryphe-functions.md#2025-04-23_snippet_78\n\nLANGUAGE: python\nCODE:\n```\ng.Increment( \n  increment=3.0 \n)\n```\n\n----------------------------------------\n\nTITLE: Markdown Documentation Links\nDESCRIPTION: Link references to different sections of the properties documentation including basic Java properties, type properties, advanced properties, and collections.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/properties-guide/properties.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n[Standard basic Java properties](basic.md)\n[Type properties](type.md)\n[Advanced properties](advanced.md)\n[Sets and Maps](map-set.md)\n```\n\n----------------------------------------\n\nTITLE: Configuring Aggregation Functions in Python\nDESCRIPTION: Partial Python code snippet showing configuration of aggregation functions within a Gaffer query. It demonstrates the use of Min() binary operator for the 'added' property during aggregation.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/user-guide/query/gaffer-syntax/filtering.md#2025-04-23_snippet_28\n\nLANGUAGE: python\nCODE:\n```\naggregate_functions = [\n    g.BinaryOperatorContext(\n        selection=[\"added\"],\n        binary_operator = g.Min()\n    )\n]\n```\n\n----------------------------------------\n\nTITLE: Initializing ToUpperCase Function in Java\nDESCRIPTION: Creates a new instance of the ToUpperCase function, which calls toString followed by toUpperCase on each input. If the input is null, null is returned.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/koryphe-functions.md#2025-04-23_snippet_186\n\nLANGUAGE: java\nCODE:\n```\nfinal ToUpperCase function = new ToUpperCase();\n```\n\n----------------------------------------\n\nTITLE: Configuring Cast Function in JSON\nDESCRIPTION: Demonstrates the JSON configuration for a Cast function to cast input to String. This can be used in Gaffer's graph configuration files.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/koryphe-functions.md#2025-04-23_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"Cast\",\n  \"outputClass\" : \"String\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing precise time window with startOffset and endOffset in Python\nDESCRIPTION: Python code to create an InDateRange predicate that checks if a date is exactly 7 hours ago (but not 6 hours ago).\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/predicates-guide/koryphe-predicates.md#2025-04-23_snippet_29\n\nLANGUAGE: python\nCODE:\n```\ng.InDateRange(\n  start_offset=-7,\n  end_offset=-6,\n  offset_unit=\"HOUR\",\n  end_inclusive=False\n)\n```\n\n----------------------------------------\n\nTITLE: Including Gaffer Time Library Dependency in Maven Project\nDESCRIPTION: XML snippet showing how to include the time-library module as a dependency in a Maven project. This dependency provides access to efficient timestamp handling classes like RBMBackedTimestampSet.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/development-guide/project-structure/components/libraries/time.md#2025-04-23_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n  <groupId>uk.gov.gchq.gaffer</groupId>\n  <artifactId>time-library</artifactId>\n  <version>${gaffer.version}</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Graph Walks with Loops using GetWalks in Java\nDESCRIPTION: This Java snippet shows how to use GetWalks to retrieve walks of length 6 starting from vertex 1, with the constraint that all edges must be traversed using the source as the matched vertex. It demonstrates the behavior when previously traversed edges are encountered again.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/get.md#2025-04-23_snippet_60\n\nLANGUAGE: java\nCODE:\n```\nfinal GetWalks getWalks = new GetWalks.Builder()\n        .operations(new GetElements.Builder()\n                        .inOutType(SeededGraphFilters.IncludeIncomingOutgoingType.OUTGOING)\n                        .build(),\n                new GetElements.Builder()\n                        .inOutType(SeededGraphFilters.IncludeIncomingOutgoingType.OUTGOING)\n                        .build(),\n                new GetElements.Builder()\n                        .inOutType(SeededGraphFilters.IncludeIncomingOutgoingType.OUTGOING)\n                        .build(),\n                new GetElements.Builder()\n                        .inOutType(SeededGraphFilters.IncludeIncomingOutgoingType.OUTGOING)\n                        .build(),\n                new GetElements.Builder()\n                        .inOutType(SeededGraphFilters.IncludeIncomingOutgoingType.OUTGOING)\n                        .build(),\n                new GetElements.Builder()\n                        .inOutType(SeededGraphFilters.IncludeIncomingOutgoingType.OUTGOING)\n                        .build())\n        .input(new EntitySeed(1))\n        .build();\n```\n\n----------------------------------------\n\nTITLE: Extracting Substrings with cypherSubstring\nDESCRIPTION: Shows how to extract substrings using cypherSubstring() with project steps.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/gremlin-guide/custom-functions.md#2025-04-23_snippet_9\n\nLANGUAGE: groovy\nCODE:\n```\ng.V().hasLabel('person')\\n    .project('result')\\n        .by(__.project('a', 'b')\\n            .by(__.values('name'))\\n            .by(__.constant(2))\\n            .select(values)\\n            .map(cypherSubstring()))\n```\n\n----------------------------------------\n\nTITLE: Implementing IterableFlatten Function with Max Binary Operator in Java\nDESCRIPTION: Creates an IterableFlatten function with a Max binary operator that combines elements in an iterable by finding the maximum value.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/koryphe-functions.md#2025-04-23_snippet_91\n\nLANGUAGE: java\nCODE:\n```\nfinal IterableFlatten function = new IterableFlatten<>(new Max());\n```\n\n----------------------------------------\n\nTITLE: Using Cast Function in Python\nDESCRIPTION: Illustrates how to use the Cast function in Python to cast input to String class. This is typically used in Gaffer's Python client for type conversion.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/koryphe-functions.md#2025-04-23_snippet_11\n\nLANGUAGE: python\nCODE:\n```\ng.Cast( \n  output_class=\"java.lang.String\" \n)\n```\n\n----------------------------------------\n\nTITLE: Implementing IsFalse Predicate in Java\nDESCRIPTION: Creates an IsFalse predicate function that checks if an input boolean is false. Takes a java.lang.Boolean as input and returns true if the input is false.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/predicates-guide/koryphe-predicates.md#2025-04-23_snippet_64\n\nLANGUAGE: java\nCODE:\n```\nfinal IsFalse function = new IsFalse();\n```\n\n----------------------------------------\n\nTITLE: Equivalent Vertex Traversal in Gaffer JSON\nDESCRIPTION: Shows the equivalent Gaffer JSON operation chain for traversing from a vertex through specific edges. Includes GetAdjacentIds and GetElements operations with view filtering.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/user-guide/query/gremlin/gremlin.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"class\": \"OperationChain\",\n    \"operations\": [\n        {\n            \"class\": \"GetAdjacentIds\",\n            \"input\": [\n                {\n                    \"class\": \"EntitySeed\",\n                    \"vertex\": \"John\"\n                }\n            ],\n            \"view\": {\n                \"edges\": {\n                    \"Created\": {}\n                }\n            }\n        },\n        {\n            \"class\": \"GetElements\",\n            \"view\": {\n                \"entities\": {\n                    \"Software\": {}\n                }\n            }\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Class List Table in Markdown\nDESCRIPTION: Table showing the mapping between property names and their full class paths for sketch implementations.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/properties-guide/advanced.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nProperty | Full Class\n-------- | ----------\n`HyperLogLogPlus` | `com.clearspring.analytics.stream.cardinality.HyperLogLogPlus`\n`HllSketch` | `org.apache.datasketches.hll.HllSketch`\n`LongsSketch` | `org.apache.datasketches.frequencies.LongsSketch`\n`DoublesSketch` | `org.apache.datasketches.quantiles.DoublesSketch`\n`ReservoirItemsSketch` | `org.apache.datasketches.sampling.ReservoirItemsSketch`\n`ThetaSketch` | `org.apache.datasketches.theta.Sketch`\n```\n\n----------------------------------------\n\nTITLE: Initializing TypeSubTypeValueToTuple Function in Java\nDESCRIPTION: Creates a new TypeSubTypeValueToTuple function that converts TypeSubTypeValue objects into Tuples. This function is used to transform TypeSubTypeValue instances into tuple representations.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/gaffer-functions.md#2025-04-23_snippet_56\n\nLANGUAGE: java\nCODE:\n```\nfinal TypeSubTypeValueToTuple function = new TypeSubTypeValueToTuple();\n```\n\n----------------------------------------\n\nTITLE: Configuring Concat Function in JSON\nDESCRIPTION: Demonstrates the JSON configuration for a Concat function with a comma separator. This can be used in Gaffer's graph configuration files.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/koryphe-functions.md#2025-04-23_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"Concat\",\n  \"separator\" : \",\"\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating SeedMatching with EdgeSeeds in Java\nDESCRIPTION: Example of migrating from SeedMatching.EQUAL to using a View for filtering Edges with EdgeSeeds in Java. This replaces the deprecated seedMatching parameter with a View specifying the relevant edge group.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/change-notes/migrating-from-v1-to-v2/deprecations.md#2025-04-23_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nfinal GetElements getEdgesWithSeedMatching = new GetElements.Builder()\n        .input(new EdgeSeed(\"source\", \"dest\", true))\n        .seedMatching(SeedMatching.SeedMatchingType.EQUAL)\n        .build();\n```\n\nLANGUAGE: java\nCODE:\n```\nfinal GetElements getEdgesWithoutSeedMatching = new GetElements.Builder()\n        .input(new EdgeSeed(\"source\", \"dest\", true))\n        .view(new View.Builder()\n                .edge(\"relevantEdgeGroup\")\n                .build())\n        .build();\n```\n\n----------------------------------------\n\nTITLE: Results of GetElementsInRanges Between Entity Seeds\nDESCRIPTION: The output of the GetElementsInRanges operation showing all entities and edges that have vertices in the range from entity 1 to entity 4. Results include properties and relationship information.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/accumulo.md#2025-04-23_snippet_19\n\nLANGUAGE: java\nCODE:\n```\nEntity[vertex=1,group=entity,properties=Properties[count=<java.lang.Integer>3]]\nEdge[source=1,destination=2,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=<java.lang.Integer>3]]\nEdge[source=1,destination=4,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=<java.lang.Integer>1]]\nEntity[vertex=2,group=entity,properties=Properties[count=<java.lang.Integer>1]]\nEdge[source=2,destination=3,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=<java.lang.Integer>2]]\nEdge[source=2,destination=4,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=<java.lang.Integer>1]]\nEdge[source=2,destination=5,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=<java.lang.Integer>1]]\nEdge[source=1,destination=2,directed=true,matchedVertex=DESTINATION,group=edge,properties=Properties[count=<java.lang.Integer>3]]\nEntity[vertex=3,group=entity,properties=Properties[count=<java.lang.Integer>2]]\nEdge[source=3,destination=4,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=<java.lang.Integer>4]]\nEdge[source=2,destination=3,directed=true,matchedVertex=DESTINATION,group=edge,properties=Properties[count=<java.lang.Integer>2]]\nEntity[vertex=4,group=entity,properties=Properties[count=<java.lang.Integer>1]]\nEdge[source=1,destination=4,directed=true,matchedVertex=DESTINATION,group=edge,properties=Properties[count=<java.lang.Integer>1]]\nEdge[source=2,destination=4,directed=true,matchedVertex=DESTINATION,group=edge,properties=Properties[count=<java.lang.Integer>1]]\nEdge[source=3,destination=4,directed=true,matchedVertex=DESTINATION,group=edge,properties=Properties[count=<java.lang.Integer>4]]\n```\n\n----------------------------------------\n\nTITLE: Getting Current Time in Milliseconds\nDESCRIPTION: Function to get current system time in milliseconds. Ignores input and returns current timestamp.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/koryphe-functions.md#2025-04-23_snippet_21\n\nLANGUAGE: java\nCODE:\n```\nfinal CurrentTime currentTime = new CurrentTime();\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"CurrentTime\"\n}\n```\n\nLANGUAGE: python\nCODE:\n```\ng.CurrentTime()\n```\n\n----------------------------------------\n\nTITLE: Adding Graph with Access Controls in Java\nDESCRIPTION: This snippet demonstrates how to add a graph to a federated store with full access restrictions using Java. It sets the graph owner, public status, and read/write predicates using the AddGraph.Builder class.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/administration-guide/gaffer-stores/simple-federated/access-control.md#2025-04-23_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nfinal String graphOwner = \"graphOwner\";\n\nfinal AddGraph operation = new AddGraph.Builder()\n    .graphConfig(new GraphConfig(graphId))\n    .schema(new Schema())\n    .properties(new Properties())\n    .owner(graphOwner)\n    .isPublic(true)\n    .readPredicate(new AccessPredicate(\n        new DefaultUserPredicate(graphOwner, Arrays.asList(\"readAuth1\", \"readAuth2\"))))\n    .writePredicate(new AccessPredicate(\n        new DefaultUserPredicate(graphOwner, Arrays.asList(\"writeAuth1\", \"writeAuth2\"))))\n    .build();\n```\n\n----------------------------------------\n\nTITLE: Initializing InRange Function for Long Values in Java\nDESCRIPTION: Creates an InRange function to check if a Long value is between 5 and 10 (inclusive). This function is used to filter or validate numeric values within a specific range.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/predicates-guide/koryphe-predicates.md#2025-04-23_snippet_48\n\nLANGUAGE: java\nCODE:\n```\nfinal InRange function = new InRange.Builder<Long>()\n        .start(5L)\n        .end(10L)\n        .build();\n```\n\n----------------------------------------\n\nTITLE: Converting Date Strings to Timestamps with Format and TimeZone in Java\nDESCRIPTION: Creates a function that parses date strings using a specific format, timezone, and time unit. This configuration uses a date-only format, GMT timezone, and returns seconds.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/koryphe-functions.md#2025-04-23_snippet_128\n\nLANGUAGE: java\nCODE:\n```\nfinal ParseTime parseTime = new ParseTime()\n        .format(\"yyyy-MM-dd\")\n        .timeUnit(\"SECOND\")\n        .timeZone(\"GMT\");\n```\n\n----------------------------------------\n\nTITLE: Initializing ToTrailingWildcardPair Function with Default End of Range in Java\nDESCRIPTION: Creates a new ToTrailingWildcardPair function with the default end of range character. This function converts string inputs into pairs of EntityIds representing a range.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/gaffer-functions.md#2025-04-23_snippet_50\n\nLANGUAGE: java\nCODE:\n```\nfinal ToTrailingWildcardPair function = new ToTrailingWildcardPair();\n```\n\n----------------------------------------\n\nTITLE: Implementing CollectionContains Membership Check\nDESCRIPTION: CollectionContains predicate that checks if a collection contains a specific value. Tests for single value membership in a collection.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/predicates-guide/koryphe-predicates.md#2025-04-23_snippet_5\n\nLANGUAGE: java\nCODE:\n```\nfinal CollectionContains function = new CollectionContains(1);\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"uk.gov.gchq.koryphe.impl.predicate.CollectionContains\",\n  \"value\" : 1\n}\n```\n\nLANGUAGE: python\nCODE:\n```\ng.CollectionContains(\n  value=1\n)\n```\n\n----------------------------------------\n\nTITLE: Long Type Conversion\nDESCRIPTION: Function to convert various input types to Long. Handles numeric strings and other number types.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/koryphe-functions.md#2025-04-23_snippet_170\n\nLANGUAGE: java\nCODE:\n```\nfinal ToLong function = new ToLong();\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"ToLong\"\n}\n```\n\nLANGUAGE: python\nCODE:\n```\ng.ToLong()\n```\n\n----------------------------------------\n\nTITLE: New FederatedOperation with GraphIds on Single Operation in JSON\nDESCRIPTION: Example of the recommended approach using FederatedOperation with the graphIds parameter to specify which graphs to target with an operation.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/change-notes/migrating-from-v1-to-v2/federation-changes.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"class\": \"uk.gov.gchq.gaffer.federatedstore.operation.FederatedOperation\",\n    \"operation\": {\n        \"class\": \"uk.gov.gchq.gaffer.operation.impl.get.GetAllElements\"\n    },\n    \"graphIds\": [ \"graphA\" ]\n}\n```\n\n----------------------------------------\n\nTITLE: Running Gaffer REST with Custom Schema\nDESCRIPTION: Command to run the Gaffer REST Docker container with a custom schema mounted from the host machine.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/administration-guide/gaffer-deployment/quickstart.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -p 8080:8080 -v /path/to/your/schema:/gaffer/schema gchq/gaffer-rest:2.0.0\n```\n\n----------------------------------------\n\nTITLE: Configuring StringJoin Function in JSON\nDESCRIPTION: JSON configuration for a StringJoin function without a delimiter. This configuration will join strings in an iterable without any separator between them.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/koryphe-functions.md#2025-04-23_snippet_141\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"StringJoin\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing StringDeduplicateConcat with Custom Separator\nDESCRIPTION: Creates a StringDeduplicateConcat operator that concatenates two strings while removing duplicates, using a specified separator.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/binary-operators-guide/koryphe-operators.md#2025-04-23_snippet_30\n\nLANGUAGE: java\nCODE:\n```\nfinal StringDeduplicateConcat stringDeduplicateConcat = new StringDeduplicateConcat();\nstringDeduplicateConcat.setSeparator(\" \");\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"uk.gov.gchq.koryphe.impl.binaryoperator.StringDeduplicateConcat\",\n  \"separator\" : \" \"\n}\n```\n\nLANGUAGE: python\nCODE:\n```\ng.StringDeduplicateConcat(\n    separator=\" \"\n)\n```\n\n----------------------------------------\n\nTITLE: Using Base64Decode in Python\nDESCRIPTION: Shows how to use the Base64Decode function in Python. This is typically used in Gaffer's Python client for decoding base64 encoded data.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/koryphe-functions.md#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ng.Base64Decode()\n```\n\n----------------------------------------\n\nTITLE: Implementing InDateRange with timestamp values in Python\nDESCRIPTION: Python code to create an InDateRange predicate using Unix timestamps for the range boundaries instead of formatted date strings.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/predicates-guide/koryphe-predicates.md#2025-04-23_snippet_20\n\nLANGUAGE: python\nCODE:\n```\ng.InDateRange(\n  start=\"1483315200\",\n  end=\"1485907200\"\n)\n```\n\n----------------------------------------\n\nTITLE: Registering BitmapJsonModules in Gaffer\nDESCRIPTION: Shows how to register the BitmapJsonModules using the store or system property. This property accepts a CSV list of class names for JSON modules.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/development-guide/project-structure/components/libraries/bitmap.md#2025-04-23_snippet_1\n\nLANGUAGE: properties\nCODE:\n```\ngaffer.serialiser.json.modules=uk.gov.gchq.gaffer.bitmap.serialisation.json.BitmapJsonModules\n```\n\n----------------------------------------\n\nTITLE: Extracting Edges from Walks with Map Operation in JSON\nDESCRIPTION: JSON configuration for extracting edges from walks using Map operation with IterableFunction, ExtractWalkEdgesFromHop, and FirstItem. Shows the complete operation chain including GetWalks, Map, ToVertices, and ToSet.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/core.md#2025-04-23_snippet_49\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"OperationChain\",\n  \"operations\" : [ {\n    \"class\" : \"GetWalks\",\n    \"input\" : [ {\n      \"class\" : \"EntitySeed\",\n      \"vertex\" : 1\n    }, {\n      \"class\" : \"EntitySeed\",\n      \"vertex\" : 2\n    } ],\n    \"operations\" : [ {\n      \"class\" : \"OperationChain\",\n      \"operations\" : [ {\n        \"class\" : \"GetElements\",\n        \"view\" : {\n          \"edges\" : {\n            \"edge\" : { }\n          }\n        }\n      } ]\n    } ],\n    \"resultsLimit\" : 100\n  }, {\n    \"class\" : \"Map\",\n    \"functions\" : [ {\n      \"class\" : \"IterableFunction\",\n      \"functions\" : [ {\n        \"class\" : \"ExtractWalkEdgesFromHop\",\n        \"hop\" : 0\n      }, {\n        \"class\" : \"FirstItem\"\n      } ]\n    } ]\n  }, {\n    \"class\" : \"ToVertices\",\n    \"edgeVertices\" : \"SOURCE\"\n  }, {\n    \"class\" : \"uk.gov.gchq.gaffer.operation.impl.output.ToSet\"\n  } ]\n}\n```\n\n----------------------------------------\n\nTITLE: Executing a Parameterized Named Operation in Java\nDESCRIPTION: Executes the '2-hop-with-limit' Named Operation in Java, providing a value of 2 for the 'param1' parameter to limit results to 2 entities.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/administration-guide/named-operations.md#2025-04-23_snippet_10\n\nLANGUAGE: java\nCODE:\n```\nMap<String, Object> paramMap = Maps.newHashMap();\nparamMap.put(\"param1\", 2L);\n\nfinal NamedOperation<EntityId, Iterable<EntityId>> operation =\n    new NamedOperation.Builder<EntityId, Iterable<EntityId>>()\n        .name(\"2-hop-with-limit\")\n        .input(new EntitySeed(1))\n        .parameters(paramMap)\n        .build();\n```\n\n----------------------------------------\n\nTITLE: Parsing Date Strings with TimeZone (GMT+4) in Java\nDESCRIPTION: Creates a date parser that converts date strings to Date objects using a specified format and timezone. This example configures the parser with a format pattern and GMT+4 timezone.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/koryphe-functions.md#2025-04-23_snippet_116\n\nLANGUAGE: java\nCODE:\n```\nfinal ParseDate parseDate = new ParseDate();\nparseDate.setFormat(\"yyyy-MM-dd HH:mm:ss.SSS\");\nparseDate.setTimeZone(\"Etc/GMT+4\");\n```\n\n----------------------------------------\n\nTITLE: Including Sketches Library Dependency in Maven\nDESCRIPTION: Maven dependency configuration required to include the Gaffer sketches library in your project. This library provides various sketches implementations for data analysis in Gaffer.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/development-guide/project-structure/components/libraries/sketches.md#2025-04-23_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n  <groupId>uk.gov.gchq.gaffer</groupId>\n  <artifactId>sketches-library</artifactId>\n  <version>${gaffer.version}</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Initializing ExtractGroup in Java\nDESCRIPTION: Creates an ExtractGroup instance to extract the group from a given Element. This function is simple and requires no additional configuration.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/gaffer-functions.md#2025-04-23_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nfinal ExtractGroup function = new ExtractGroup();\n```\n\n----------------------------------------\n\nTITLE: Creating Markdown Table for Gaffer Glossary\nDESCRIPTION: This snippet defines a markdown table that lists and describes important terms used in the Gaffer graph database system. It includes concepts related to graph structure, data manipulation, and associated technologies.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/glossary.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Term              | Description                          |\n| :---------------- | :----------------------------------- |\n| Entity            | An entity represents a point in a graph |\n| Edge              | An edge is a connection between two vertices |\n| Vertex            | In Gaffer, a vertex is the id of an entity. Note that a vertex can exist on an edge without an associated entity. Any querying will only show these vertices on their associated edges |\n| Node              | A node is what Gaffer calls an entity |\n| Properties        | A property is a key/value pair that stores data on both edges and entities |\n| Element           | The word is used to describe edges or entities |\n| Stores            | A Gaffer store represents the backing database responsible for storing or facilitating access to a graph |\n| Operations        | An operation is an instruction / function that you send to the API to manipulate and query a graph |\n| View              | Used in Gaffer like a filter it lets you view the data differently in a query, often used to filter the data you get back from a given operation |\n| Matched vertex    | `matchedVertex` is a field added to Edges which are returned by Gaffer queries, stating whether your seeds matched the source or destination |\n| Python            | A programming language that is used to build applications. Gaffer uses Python to interact with the API |\n| Java              | A object oriented programming language used to build software. Gaffer is primarily built in Java |\n| Database          | A database is a collection of organised structured information or data typically stored in a computer system |\n| API               | Application Programming Interface. An API is for one or more services / systems to communicate with each other |\n| JSON              | JavaScript Object Notation is a text based format for representing structure data based on JavaScript object syntax |\n| GafferPop         | The library used to translate Gremlin queries to Gaffer operations using the TinkerPop framework |\n| Orphaned Vertices | Vertices on an edge without any associated entity in the Graph |\n```\n\n----------------------------------------\n\nTITLE: Implementing First Non-Null Value Selection in Python\nDESCRIPTION: Python implementation of the First operator that returns the first non-null value from two inputs.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/binary-operators-guide/koryphe-operators.md#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ng.First()\n```\n\n----------------------------------------\n\nTITLE: Initializing MapContains Predicate in Java\nDESCRIPTION: Creates a MapContains predicate that checks if a map contains a specific key 'a'. This predicate works on Map objects.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/predicates-guide/koryphe-predicates.md#2025-04-23_snippet_106\n\nLANGUAGE: java\nCODE:\n```\nfinal MapContains function = new MapContains(\"a\");\n```\n\n----------------------------------------\n\nTITLE: Defining Gaffer Graph Elements in JSON\nDESCRIPTION: This JSON structure defines various elements of a Gaffer graph, including entities and edges. Each element has properties like class, group, vertex (for entities), source and destination (for edges), and additional properties like count. The structure allows for representing complex graph relationships.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/join.md#2025-04-23_snippet_34\n\nLANGUAGE: json\nCODE:\n```\n[\n    {\n        \"values\": {\n            \"LEFT\": {\n                \"class\": \"uk.gov.gchq.gaffer.data.element.Entity\",\n                \"group\": \"entity\",\n                \"vertex\": 1,\n                \"properties\": {\n                    \"count\": 3\n                }\n            },\n            \"RIGHT\": {\n                \"class\": \"uk.gov.gchq.gaffer.data.element.Edge\",\n                \"group\": \"edge\",\n                \"source\": 3,\n                \"destination\": 4,\n                \"directed\": true,\n                \"properties\": {\n                    \"count\": 4\n                }\n            }\n        }\n    },\n    {\n        \"values\": {\n            \"LEFT\": {\n                \"class\": \"uk.gov.gchq.gaffer.data.element.Entity\",\n                \"group\": \"entity\",\n                \"vertex\": 4,\n                \"properties\": {\n                    \"count\": 1\n                }\n            },\n            \"RIGHT\": {\n                \"class\": \"uk.gov.gchq.gaffer.data.element.Edge\",\n                \"group\": \"edge\",\n                \"source\": 2,\n                \"destination\": 3,\n                \"directed\": true,\n                \"properties\": {\n                    \"count\": 2\n                }\n            }\n        }\n    },\n    {\n        \"values\": {\n            \"LEFT\": {\n                \"class\": \"uk.gov.gchq.gaffer.data.element.Entity\",\n                \"group\": \"entity\",\n                \"vertex\": 4,\n                \"properties\": {\n                    \"count\": 1\n                }\n            },\n            \"RIGHT\": {\n                \"class\": \"uk.gov.gchq.gaffer.data.element.Entity\",\n                \"group\": \"entity\",\n                \"vertex\": 3,\n                \"properties\": {\n                \"   count\": 2\n                }\n            }\n        }\n    },\n    {\n        \"values\": {\n            \"LEFT\": {\n                \"class\": \"uk.gov.gchq.gaffer.data.element.Entity\",\n                \"group\": \"entity\",\n                \"vertex\": 5,\n                \"properties\": {\n                    \"count\": 3\n                }\n            },\n            \"RIGHT\": {\n                \"class\": \"uk.gov.gchq.gaffer.data.element.Edge\",\n                \"group\": \"edge\",\n                \"source\": 3,\n                \"destination\": 4,\n                \"directed\": true,\n                \"properties\": {\n                    \"count\": 4\n                }\n            }\n        }\n    },\n    {\n        \"values\": {\n            \"LEFT\": {\n                \"class\": \"uk.gov.gchq.gaffer.data.element.Entity\",\n                \"group\": \"entity\",\n                \"vertex\": 6,\n                \"properties\": {\n                    \"count\": 30\n                }\n            }\n        }\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: GetWalks Configuration in JSON\nDESCRIPTION: This JSON snippet shows the configuration for a GetWalks operation to retrieve walks of length 6 starting from vertex 1. It includes multiple OperationChain objects, each containing a GetElements operation with OUTGOING direction filter.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/get.md#2025-04-23_snippet_61\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"GetWalks\",\n  \"input\" : [ {\n    \"class\" : \"EntitySeed\",\n    \"vertex\" : 1\n  } ],\n  \"operations\" : [ {\n    \"class\" : \"OperationChain\",\n    \"operations\" : [ {\n      \"class\" : \"GetElements\",\n      \"includeIncomingOutGoing\" : \"OUTGOING\"\n    } ]\n  }, {\n    \"class\" : \"OperationChain\",\n    \"operations\" : [ {\n      \"class\" : \"GetElements\",\n      \"includeIncomingOutGoing\" : \"OUTGOING\"\n    } ]\n  }, {\n    \"class\" : \"OperationChain\",\n    \"operations\" : [ {\n      \"class\" : \"GetElements\",\n      \"includeIncomingOutGoing\" : \"OUTGOING\"\n    } ]\n  }, {\n    \"class\" : \"OperationChain\",\n    \"operations\" : [ {\n      \"class\" : \"GetElements\",\n      \"includeIncomingOutGoing\" : \"OUTGOING\"\n    } ]\n  }, {\n    \"class\" : \"OperationChain\",\n    \"operations\" : [ {\n      \"class\" : \"GetElements\",\n      \"includeIncomingOutGoing\" : \"OUTGOING\"\n    } ]\n  }, {\n    \"class\" : \"OperationChain\",\n    \"operations\" : [ {\n      \"class\" : \"GetElements\",\n      \"includeIncomingOutGoing\" : \"OUTGOING\"\n    } ]\n  } ],\n  \"resultsLimit\" : 1000000\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring MapContains Predicate in JSON\nDESCRIPTION: JSON configuration for a MapContains predicate that checks if a map contains a specific key 'a'. The key parameter specifies the key to check for.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/predicates-guide/koryphe-predicates.md#2025-04-23_snippet_107\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"MapContains\",\n  \"key\" : \"a\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Compose for Gaffer Deployment\nDESCRIPTION: A complete docker-compose.yaml configuration that sets up a Gaffer cluster with Zookeeper, HDFS (Namenode and Datanode), Accumulo (Master, Monitor, GC, and tServer), and Gaffer REST API. The configuration includes health checks, volume mounts, and network configurations.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/development-guide/example-deployment/running-the-deployment.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nversion: \"3.7\"\n\nservices:\n\n  zookeeper:\n    image: zookeeper:${ZOOKEEPER_VERSION}\n    healthcheck:\n      test: echo ruok | nc 127.0.0.1 2181 | grep imok\n      interval: 30s\n      timeout: 5s\n      retries: 3\n    container_name: zookeeper\n    hostname: zookeeper\n    environment:\n    - ZOO_SERVERS=server.1=zookeeper:2888:3888;2181\n    - ZOO_4LW_COMMANDS_WHITELIST=*\n    volumes:\n    - /data\n    - /datalog\n\n  hdfs-namenode:\n    image: gchq/hdfs:${HADOOP_VERSION}\n    depends_on:\n      zookeeper:\n        condition: service_healthy\n    healthcheck:\n      test: curl -f http://localhost:9870 || exit 1\n      interval: 30s\n      timeout: 10s\n      retries: 3\n    command: namenode\n    container_name: hdfs-namenode\n    hostname: hdfs-namenode\n    environment:\n    - HADOOP_CONF_DIR=${HADOOP_CONF_DIR}\n    ports:\n    - 9870:9870\n    volumes:\n    - ./configs/hdfs:${HADOOP_CONF_DIR}:ro\n    - /var/log/hadoop\n    - /data1\n    - /data2\n\n  hdfs-datanode:\n    image: gchq/hdfs:${HADOOP_VERSION}\n    depends_on:\n      hdfs-namenode:\n        condition: service_healthy\n    command: datanode\n    container_name: hdfs-datanode\n    hostname: hdfs-datanode\n    environment:\n    - HADOOP_CONF_DIR=${HADOOP_CONF_DIR}\n    volumes:\n    - ./configs/hdfs:${HADOOP_CONF_DIR}:ro\n    - /var/log/hadoop\n    - /data1\n    - /data2\n\n  accumulo-master:\n    image: gchq/gaffer:${GAFFER_VERSION}-accumulo-${ACCUMULO_VERSION}\n    depends_on:\n      hdfs-namenode:\n        condition: service_healthy\n    healthcheck:\n      test: cat /proc/net/tcp | grep 270F\n      interval: 30s\n      timeout: 5s\n      retries: 3\n      start_period: 10s\n    build:\n      context: .\n      args:\n        GAFFER_VERSION: ${GAFFER_VERSION}\n        BASE_IMAGE_NAME: gchq/accumulo\n        BASE_IMAGE_TAG: ${ACCUMULO_VERSION}\n    command: master\n    container_name: accumulo-master\n    hostname: accumulo-master\n    environment:\n    - ACCUMULO_CONF_DIR=${ACCUMULO_CONF_DIR}\n    - HADOOP_USER_NAME=hadoop\n    volumes:\n    - ./configs/accumulo:${ACCUMULO_CONF_DIR}:ro\n    - /var/log/accumulo\n\n  accumulo-tserver:\n    image: gchq/gaffer:${GAFFER_VERSION}-accumulo-${ACCUMULO_VERSION}\n    depends_on:\n      accumulo-master:\n        condition: service_healthy\n    healthcheck:\n      test: cat /proc/net/tcp | grep 270D\n      interval: 30s\n      timeout: 5s\n      retries: 3\n    command: tserver\n    container_name: accumulo-tserver\n    hostname: accumulo-tserver\n    environment:\n    - ACCUMULO_CONF_DIR=${ACCUMULO_CONF_DIR}\n    - HADOOP_USER_NAME=hadoop\n    volumes:\n    - ./configs/accumulo:${ACCUMULO_CONF_DIR}:ro\n    - /var/log/accumulo\n\n  accumulo-monitor:\n    image: gchq/gaffer:${GAFFER_VERSION}-accumulo-${ACCUMULO_VERSION}\n    depends_on:\n      accumulo-master:\n        condition: service_healthy\n    command: monitor\n    container_name: accumulo-monitor\n    hostname: accumulo-monitor\n    environment:\n    - ACCUMULO_CONF_DIR=${ACCUMULO_CONF_DIR}\n    - HADOOP_USER_NAME=hadoop\n    ports:\n    - 9995:9995\n    volumes:\n    - ./configs/accumulo:${ACCUMULO_CONF_DIR}:ro\n    - /var/log/accumulo\n\n  accumulo-gc:\n    image: gchq/gaffer:${GAFFER_VERSION}-accumulo-${ACCUMULO_VERSION}\n    depends_on:\n      accumulo-master:\n        condition: service_healthy\n    command: gc\n    container_name: accumulo-gc\n    hostname: accumulo-gc\n    environment:\n    - ACCUMULO_CONF_DIR=${ACCUMULO_CONF_DIR}\n    - HADOOP_USER_NAME=hadoop\n    volumes:\n    - ./configs/accumulo:${ACCUMULO_CONF_DIR}:ro\n    - /var/log/accumulo\n\n  gaffer-rest:\n    image: gchq/gaffer-rest:${GAFFER_VERSION}-accumulo-${ACCUMULO_VERSION}\n    depends_on:\n      accumulo-tserver:\n        condition: service_healthy\n    ports:\n    - 8080:8080\n    volumes:\n    - ./configs/gaffer/application.properties:/gaffer/config/application.properties:ro\n    - ./configs/gaffer/data:/gaffer/data:ro\n    - ./configs/gaffer/graph:/gaffer/graph:ro\n    - ./configs/gaffer/schema:/gaffer/schema:ro\n    - ./configs/gaffer/store:/gaffer/store:ro\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Vertex Type with JSON Annotations in Java\nDESCRIPTION: Example implementation of a user-defined vertex type that includes required JSON type information annotation and toString override. The class implements Comparable and Serializable interfaces for proper integration with Gaffer.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/development-guide/rest-api-sketches.md#2025-04-23_snippet_4\n\nLANGUAGE: java\nCODE:\n```\n@JsonTypeInfo(use = JsonTypeInfo.Id.CLASS, property = \"class\")\npublic class ExampleType implements Comparable<ExampleType>, Serializable {\n   \n   private String value...;\n   \n   // getters and setters\n   \n   @Override\n   public String toString() {\n       return ...;\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing First Non-Null Value Selection in JSON\nDESCRIPTION: JSON representation of the First operator that returns the first non-null value from two inputs.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/binary-operators-guide/koryphe-operators.md#2025-04-23_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"uk.gov.gchq.koryphe.impl.binaryoperator.First\"\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Date Strings to Timestamps in Python\nDESCRIPTION: Python implementation of a function that parses date strings into timestamp values. This function uses the default date format and converts to milliseconds since epoch.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/koryphe-functions.md#2025-04-23_snippet_124\n\nLANGUAGE: python\nCODE:\n```\ng.ParseTime( \n  time_unit=\"MILLISECOND\" \n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Gaffer REST API with Custom Configs using Docker\nDESCRIPTION: Example showing how to run the Gaffer REST API container with custom configurations by mounting volumes from the host system into the container.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/administration-guide/gaffer-deployment/gaffer-docker/gaffer-images.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker run \\\n       -p 8080:8080 \\\n       -v /custom/configs/gaffer/graph:/gaffer/graph \\\n       -v /custom/configs/gaffer/schema:/gaffer/schema \\\n       -v /custom/configs/gaffer/store:/gaffer/store \\\n       gchq/gaffer-rest:2.0.0\n```\n\n----------------------------------------\n\nTITLE: Configuring Edge Schema with LongsSketch Property in Gaffer\nDESCRIPTION: JSON configuration for elements schema defining an edge type 'red' with a 'longsSketch' property that will store frequency estimates of Long values.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/properties-guide/advanced.md#2025-04-23_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"edges\": {\n    \"red\": {\n      \"source\": \"vertex.string\",\n      \"destination\": \"vertex.string\",\n      \"directed\": \"false\",\n      \"properties\": {\n        \"longsSketch\": \"longs.sketch\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Including Orphaned Vertices in Gremlin Query\nDESCRIPTION: Shows how to include orphaned vertices in the query results. Orphaned vertices are those on an edge without an associated Gaffer entity. This option may impact query performance.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/gremlin-guide/gaffer-options.md#2025-04-23_snippet_5\n\nLANGUAGE: groovy\nCODE:\n```\ng.with(\"includeOrphanedVertices\", \"true\").V().toList()\n```\n\n----------------------------------------\n\nTITLE: Using ExtractValue in Python\nDESCRIPTION: Python implementation of the ExtractValue function that extracts a value for a specific key from input dictionaries.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/koryphe-functions.md#2025-04-23_snippet_42\n\nLANGUAGE: python\nCODE:\n```\ng.ExtractValue( \n  key=\"blueKey\" \n)\n```\n\n----------------------------------------\n\nTITLE: Creating IsTrue Predicate in Python\nDESCRIPTION: Python implementation of the IsTrue predicate using the Gaffer Python client. Checks if an input boolean is true.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/predicates-guide/koryphe-predicates.md#2025-04-23_snippet_69\n\nLANGUAGE: python\nCODE:\n```\ng.IsTrue()\n```\n\n----------------------------------------\n\nTITLE: Filtering Edges of Type 'edge' with Count Greater Than 2 using Python\nDESCRIPTION: This Python code snippet demonstrates filtering specifically for edges of group 'edge' that have a 'count' property greater than 2. It creates an OperationChain with a NamedOperation and a Filter targeting edges.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/core.md#2025-04-23_snippet_16\n\nLANGUAGE: python\nCODE:\n```\ng.OperationChain(\n  operations=[\n    g.NamedOperation(\n      input=[\n        g.EntitySeed(\n          vertex=1\n        )\n      ],\n      operation_name=\"1-hop\"\n    ),\n    g.Filter(\n      edges=[\n        g.ElementFilterDefinition(\n          group=\"edge\",\n          predicates=[\n            g.PredicateContext(\n              selection=[\n                \"count\"\n              ],\n              predicate=g.IsMoreThan(\n                value=2,\n                or_equal_to=False\n              )\n            )\n          ]\n        )\n      ]\n    )\n  ]\n)\n```\n\n----------------------------------------\n\nTITLE: Displaying While Operation Results in Java\nDESCRIPTION: This Java code snippet shows the results of a While operation in Gaffer, displaying EntitySeed objects with their respective vertices.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/flow.md#2025-04-23_snippet_24\n\nLANGUAGE: java\nCODE:\n```\nEntitySeed[vertex=6]\nEntitySeed[vertex=3]\nEntitySeed[vertex=7]\n```\n\n----------------------------------------\n\nTITLE: Applying BiFunction with Sum in Java\nDESCRIPTION: Demonstrates how to use ApplyBiFunction with a Sum operation in Java. This function takes two numbers as input and returns their sum.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/koryphe-functions.md#2025-04-23_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nfinal ApplyBiFunction<Number, Number, Number> function = new ApplyBiFunction<>(new Sum());\n```\n\n----------------------------------------\n\nTITLE: Mixed Operations Chain to Multiple Subgraphs\nDESCRIPTION: Complex example showing how to send an operation chain to one subgraph and a single operation to another subgraph.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/federated-operation.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"class\": \"uk.gov.gchq.gaffer.operation.OperationChain\",\n    \"operations\": [\n        {\n            \"class\": \"uk.gov.gchq.gaffer.federatedstore.operation.FederatedOperation\",\n            \"operation\": {\n                \"class\": \"uk.gov.gchq.gaffer.operation.OperationChain\",\n                \"operations\": {\n                    [\n                        \"class\": \"ExampleOperation1\",\n                        \"class\": \"ExampleOperation2\"\n                    ]\n                }\n            },\n            \"graphIds\": [ \"GraphA\" ]\n        },\n        {\n            \"class\": \"uk.gov.gchq.gaffer.federatedstore.operation.FederatedOperation\",\n            \"operation\": {\n                \"class\": \"ExampleOperation3\"\n            },\n            \"graphIds\": [ \"GraphB\" ]\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Trimming Strings with cypherTrim\nDESCRIPTION: Demonstrates trimming whitespace from strings using cypherTrim().\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/gremlin-guide/custom-functions.md#2025-04-23_snippet_10\n\nLANGUAGE: groovy\nCODE:\n```\ng.V().values('name').map(cypherTrim())\n```\n\n----------------------------------------\n\nTITLE: Result of ToStream in Java\nDESCRIPTION: Java output showing the elements retrieved and converted to a Stream. The output displays Edge and Entity objects with their properties and relationships.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/core.md#2025-04-23_snippet_73\n\nLANGUAGE: java\nCODE:\n```\nEdge[source=1,destination=4,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=<java.lang.Integer>1]]\nEntity[vertex=2,group=entity,properties=Properties[count=<java.lang.Integer>1]]\nEntity[vertex=1,group=entity,properties=Properties[count=<java.lang.Integer>3]]\nEdge[source=2,destination=3,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=<java.lang.Integer>2]]\nEdge[source=2,destination=4,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=<java.lang.Integer>1]]\nEdge[source=1,destination=2,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=<java.lang.Integer>3]]\nEdge[source=2,destination=5,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=<java.lang.Integer>1]]\n```\n\n----------------------------------------\n\nTITLE: Querying Graph Elements\nDESCRIPTION: JSON query to retrieve elements connected to the 'Dave' vertex and its corresponding aggregated result.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/administration-guide/aggregation/ingest-example.md#2025-04-23_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"class\": \"GetElements\",\n    \"input\": [\n        {\n            \"class\": \"EntitySeed\",\n            \"vertex\": \"Dave\"\n        }\n    ]\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n[\n    {\n        \"class\": \"uk.gov.gchq.gaffer.data.element.Entity\",\n        \"group\": \"Person\",\n        \"vertex\": \"Dave\",\n        \"properties\": {}\n    },\n    {\n        \"class\": \"uk.gov.gchq.gaffer.data.element.Edge\",\n        \"group\": \"Commit\",\n        \"source\": \"Dave\",\n        \"destination\": \"r1\",\n        \"directed\": true,\n        \"matchedVertex\": \"SOURCE\",\n        \"properties\": {\n            \"count\": 3,\n            \"first\": {\n                \"java.util.Date\": 1451044800146\n            },\n            \"latest\": {\n                \"java.util.Date\": 1672574400146\n            }\n        }\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring StringRegexSplit Function in JSON\nDESCRIPTION: JSON configuration for a StringRegexSplit function. This configuration specifies a regex pattern for splitting strings on one or more spaces or tabs.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/koryphe-functions.md#2025-04-23_snippet_153\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"StringRegexSplit\",\n  \"regex\" : \"[ \\\\t]+\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using ApplyBiFunction with Sum in Python\nDESCRIPTION: Illustrates how to use ApplyBiFunction with a Sum operation in Python. This is typically used in Gaffer's Python client.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/koryphe-functions.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ng.ApplyBiFunction( \n  function=g.Sum() \n)\n```\n\n----------------------------------------\n\nTITLE: Configuring ExtractProperty in JSON\nDESCRIPTION: JSON configuration for ExtractProperty to extract the 'prop1' property. This configuration specifies the class and the name of the property to extract.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/gaffer-functions.md#2025-04-23_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"ExtractProperty\",\n  \"name\" : \"prop1\"\n}\n```\n\n----------------------------------------\n\nTITLE: Cardinality Schema Configuration JSON\nDESCRIPTION: JSON schema configuration for adding cardinality tracking to entities with edge group property tracking.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/user-guide/gaffer-basics/what-is-cardinality.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"entities\": {\n    \"cardinality\": {\n      \"vertex\": \"vertex.string\",\n      \"properties\": {\n        \"approxCardinality\": \"hll\",\n        \"edgeGroup\": \"set\"\n      },\n      \"groupBy\": [\n        \"edgeGroup\"\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Results of Filtering Edges of Type 'edge' with Count Greater Than 2 in Java\nDESCRIPTION: Results showing the edges that passed the filter condition (group = 'edge' and count > 2) in Java format. The output includes only one Edge from vertex 1 to vertex 2 with count = 3.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/core.md#2025-04-23_snippet_17\n\nLANGUAGE: java\nCODE:\n```\nEdge[source=1,destination=2,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=<java.lang.Integer>3]]\n```\n\n----------------------------------------\n\nTITLE: Setting OperationDeclarations during AddGraph in JSON\nDESCRIPTION: Example demonstrating how to set custom operation declarations when adding a graph to a FederatedStore. This uses the 'gaffer.store.operation.declarations.json' property to define operations.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/change-notes/changelist/v2-changes.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"class\": \"AddGraph\",\n    \"graphId\": \"myGraph\",\n    \"schema\": {}, // (1)!\n    \"storeProperties\": {\n        \"gaffer.store.class\": \"MapStore\",\n        \"gaffer.store.operation.declarations.json\": {\n            \"operations\": [\n                {\n                    \"operation\": \"ImportFromLocalFile\", // (2)!\n                    \"handler\": {\n                        \"class\": \"ImportFromLocalFileHandler\"\n                    }\n                }\n            ]\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Right Key Inner Join with ElementMatch in JSON\nDESCRIPTION: JSON representation of an OperationChain with a Join operation using ElementMatch. The input consists of four Entity objects with different vertex values and count properties. Performs an inner join with RIGHT match key.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/join.md#2025-04-23_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n\"class\" : \"OperationChain\",\n\"operations\" : [ {\n    \"class\" : \"Join\",\n    \"input\" : [ {\n    \"class\" : \"Entity\",\n    \"group\" : \"entity\",\n    \"vertex\" : 1,\n    \"properties\" : {\n        \"count\" : 3\n    }\n    }, {\n    \"class\" : \"Entity\",\n    \"group\" : \"entity\",\n    \"vertex\" : 4,\n    \"properties\" : {\n        \"count\" : 1\n    }\n    }, {\n    \"class\" : \"Entity\",\n    \"group\" : \"entity\",\n    \"vertex\" : 5,\n    \"properties\" : {\n        \"count\" : 3\n    }\n    }, {\n    \"class\" : \"Entity\",\n    \"group\" : \"entity\",\n    \"vertex\" : 6,\n    \"properties\" : {\n        \"count\" : 30\n    }\n    } ],\n    \"operation\" : {\n    \"class\" : \"GetAllElements\"\n    },\n    \"matchMethod\" : {\n    \"class\" : \"ElementMatch\"\n    },\n    \"matchKey\" : \"RIGHT\",\n    \"flatten\" : false,\n    \"joinType\" : \"INNER\"\n} ]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Inner Join with KeyFunctionMatch and FunctionChain in Gaffer (Python)\nDESCRIPTION: This Python code creates an OperationChain for an inner join operation using KeyFunctionMatch with a FunctionChain in Gaffer. It sets up the input entities, uses GetAllElements as the operation, and specifies KeyFunctionMatch with property extraction and increment functions.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/join.md#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\ng.OperationChain( \noperations=[ \n    g.Join( \n        operation=g.GetAllElements(), \n        match_method=g.KeyFunctionMatch(\n            first_key_function=g.FunctionChain([\n                g.ExtractProperty(\"count\"),\n                g.Increment(increment=1)\n                ]),\n            second_key_function=g.ExtractProperty(\"count\")\n        ),\n        input=[ \n            g.Entity( \n            group=\"entity\", \n            properties={\"count\": 3}, \n            vertex=1 \n            ), \n            g.Entity( \n            group=\"entity\", \n            properties={\"count\": 1}, \n            vertex=4 \n            ), \n            g.Entity( \n            group=\"entity\", \n            properties={\"count\": 3}, \n            vertex=5 \n            ), \n            g.Entity( \n            group=\"entity\", \n            properties={\"count\": 30}, \n            vertex=6 \n            ) \n    ], \n    match_key=\"LEFT\", \n    join_type=\"INNER\" \n    ) \n] \n)\n```\n\n----------------------------------------\n\nTITLE: Using CreateObject for String in Python\nDESCRIPTION: Illustrates how to use CreateObject to create String objects in Python. This is typically used in Gaffer's Python client for object creation.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/koryphe-functions.md#2025-04-23_snippet_17\n\nLANGUAGE: python\nCODE:\n```\ng.CreateObject( \n  object_class=\"java.lang.String\" \n)\n```\n\n----------------------------------------\n\nTITLE: Extracting Elements from Iterables with NthItem in JSON\nDESCRIPTION: JSON configuration for a function that extracts the item at a specific index from an Iterable. The selection parameter determines which index to extract from the input collection.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/koryphe-functions.md#2025-04-23_snippet_114\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"NthItem\",\n  \"selection\" : 2\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing IterableConcat Function in Python\nDESCRIPTION: Python implementation of an IterableConcat function that flattens nested iterables into a single iterable.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/koryphe-functions.md#2025-04-23_snippet_84\n\nLANGUAGE: python\nCODE:\n```\ng.IterableConcat()\n```\n\n----------------------------------------\n\nTITLE: Deploying Accumulo TabletServer Node\nDESCRIPTION: Docker command to deploy an Accumulo tablet server node that handles data operations and storage in the Accumulo cluster.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/administration-guide/gaffer-deployment/gaffer-docker/how-to-run.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ndocker run \\\n       --detach \\\n       --name accumulo-tserver \\\n       --hostname accumulo-tserver \\\n       --net gaffer-example \\\n       --env ACCUMULO_CONF_DIR=\"/etc/accumulo/conf\" \\\n       --env HADOOP_USER_NAME=\"hadoop\" \\\n       --volume /custom/configs/accumulo:/etc/accumulo/conf \\\n       --volume /var/log/accumulo \\\n       gchq/gaffer:2.0.0-accumulo-2.0.1 tserver\n```\n\n----------------------------------------\n\nTITLE: Initializing StringReplace Function in Java\nDESCRIPTION: Creates a StringReplace function that replaces all occurrences of a substring in the input string. This function replaces '[tea' with 'cake' without using regular expressions.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/koryphe-functions.md#2025-04-23_snippet_155\n\nLANGUAGE: java\nCODE:\n```\nfinal StringReplace function = new StringReplace(\"[tea\", \"cake\");\n```\n\n----------------------------------------\n\nTITLE: Converting Values to Boolean with cypherToBoolean\nDESCRIPTION: Shows how to convert vertex name values to boolean type using cypherToBoolean().\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/gremlin-guide/custom-functions.md#2025-04-23_snippet_1\n\nLANGUAGE: groovy\nCODE:\n```\ng.V().values('name').map(cypherToBoolean())\n```\n\n----------------------------------------\n\nTITLE: Implementing CreateObject for String in Java\nDESCRIPTION: Shows how to use CreateObject to create a new String object in Java. This function creates a new object of a given type.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/koryphe-functions.md#2025-04-23_snippet_15\n\nLANGUAGE: java\nCODE:\n```\nfinal CreateObject createObject = new CreateObject(String.class);\n```\n\n----------------------------------------\n\nTITLE: Adding NamedOperation in Java\nDESCRIPTION: This snippet shows how to add the same 'CountAllElements' NamedOperation using Java. It creates an AddNamedOperation object with an OperationChain containing GetAllElements and Count operations, then adds it using the 'namedoperation' call.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/user-guide/query/gremlin/custom-features.md#2025-04-23_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nfinal AddNamedOperation operation = new AddNamedOperation.Builder()\n    .operationChain(new OperationChain.Builder()\n        .first(new GetAllElements()\n                .then(new Count<>())\n                .build())\n        .build())\n    .name(\"CountAllElements\")\n    .build();\n\nMap<String, String> addParams = new HashMap<>();\naddParams.put(\"name\", \"CountAllElements\");\naddParams.put(\"opChain\", operation.getOperationChainAsString());\nMap<String, Map <String, String>> params = Collections.singletonMap(\"add\", addParams);\n\ng.call(\"namedoperation\", params);\n```\n\n----------------------------------------\n\nTITLE: Manual Cardinality Addition in Java\nDESCRIPTION: Java code demonstrating how to manually add cardinality entities using AddElements with HllSketch.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/user-guide/gaffer-basics/what-is-cardinality.md#2025-04-23_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nfinal HllSketch hll = new HllSketch(10);\nhll.update(\"B\");\nnew AddElements.Builder()\n            .input(new Entity.Builder()\n                            .group(\"cardinality\")\n                            .vertex(\"A\")\n                            .property(\"approxCardinality\", hll)\n                            .build())\n            .build();\n```\n\n----------------------------------------\n\nTITLE: Configuring MapFilter with Key-Value Predicate\nDESCRIPTION: MapFilter implementation that filters map entries where keys and values are equal.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/koryphe-functions.md#2025-04-23_snippet_106\n\nLANGUAGE: java\nCODE:\n```\nfinal MapFilter keyValueFilter = new MapFilter()\n        .keyValuePredicate(new AreEqual());\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"MapFilter\",\n  \"keyValuePredicate\" : {\n    \"class\" : \"AreEqual\"\n  }\n}\n```\n\nLANGUAGE: python\nCODE:\n```\ng.MapFilter( \n  key_value_predicate=g.AreEqual() \n)\n```\n\n----------------------------------------\n\nTITLE: Using ToTrailingWildcardPair Function with Default End of Range in Python\nDESCRIPTION: Python code to create a ToTrailingWildcardPair function with the default end of range character using the Gaffer Python client. This function converts string inputs to pairs of EntityIds.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/gaffer-functions.md#2025-04-23_snippet_52\n\nLANGUAGE: python\nCODE:\n```\ng.ToTrailingWildcardPair( \n  end_of_range=\"~\" \n)\n```\n\n----------------------------------------\n\nTITLE: Implementing relative date range with startOffset in Python\nDESCRIPTION: Python code to create an InDateRange predicate that checks if a date is within the last 7 days, with no upper bound.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/predicates-guide/koryphe-predicates.md#2025-04-23_snippet_26\n\nLANGUAGE: python\nCODE:\n```\ng.InDateRange(\n  start_offset=-7,\n  offset_unit=\"DAY\"\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Values with cypherPlus\nDESCRIPTION: Shows how to add values using cypherPlus() with project steps.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/gremlin-guide/custom-functions.md#2025-04-23_snippet_7\n\nLANGUAGE: groovy\nCODE:\n```\ng.V().hasLabel('person')\\n    .project('result')\\n        .by(__.project('a', 'b')\\n            .by(__.values('age'))\\n            .by(__.constant(1))\\n            .select(values)\\n            .map(cypherPlus()))\n```\n\n----------------------------------------\n\nTITLE: OperationChain Result in JSON Format\nDESCRIPTION: The JSON result of the operation chain, showing the vertices returned as an array. The result contains the integers 4, 3, 2, and 5, representing the connected vertices found through the graph traversal.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/core.md#2025-04-23_snippet_81\n\nLANGUAGE: json\nCODE:\n```\n[ 4, 3, 2, 5 ]\n```\n\n----------------------------------------\n\nTITLE: Aggregating ThetaSketch Estimates\nDESCRIPTION: Demonstrates how to aggregate ThetaSketch properties across all entities to get total estimates.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/properties-guide/advanced.md#2025-04-23_snippet_25\n\nLANGUAGE: java\nCODE:\n```\nfinal GetAllElements getAllEntities = new GetAllElements.Builder()\n        .view(new View.Builder()\n                .entity(\"size\", new ViewElementDefinition.Builder()\n                        .groupBy() // set the group by properties to 'none'\n                        .build())\n                .build())\n        .build();\nfinal Element entity;\ntry (final Iterable<? extends Element> allEntities = graph.execute(getAllEntities, user)) {\n    entity = allEntities.iterator().next();\n}\nfinal double unionSizeEstimate = ((Sketch) entity.getProperty(\"size\")).getEstimate();\n```\n\n----------------------------------------\n\nTITLE: Array Conversion Implementation\nDESCRIPTION: Function to convert any object into an array. Handles various input types including strings, numbers, and collections.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/koryphe-functions.md#2025-04-23_snippet_165\n\nLANGUAGE: java\nCODE:\n```\nfinal ToArray function = new ToArray();\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"uk.gov.gchq.koryphe.impl.function.ToArray\"\n}\n```\n\nLANGUAGE: python\nCODE:\n```\ng.ToArray()\n```\n\n----------------------------------------\n\nTITLE: Initializing StringSplit Function in Java\nDESCRIPTION: Creates a StringSplit function that splits a string using a specified delimiter. This function splits input strings on spaces, returning an ArrayList of the resulting substrings.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/koryphe-functions.md#2025-04-23_snippet_158\n\nLANGUAGE: java\nCODE:\n```\nfinal StringSplit function = new StringSplit(\" \");\n```\n\n----------------------------------------\n\nTITLE: Results of Map Operation with FirstItem in JSON\nDESCRIPTION: JSON representation of the result from applying the Map operation with FirstItem function, showing the entity details including group, vertex, and properties.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/core.md#2025-04-23_snippet_47\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n  \"group\" : \"entity\",\n  \"vertex\" : 2,\n  \"properties\" : {\n    \"count\" : 1\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing ToSet Function in Java\nDESCRIPTION: Creates a new instance of the ToSet function, which converts an Object to a Set. It's useful for removing duplicates and creating unique collections.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/koryphe-functions.md#2025-04-23_snippet_177\n\nLANGUAGE: java\nCODE:\n```\nfinal ToSet function = new ToSet();\n```\n\n----------------------------------------\n\nTITLE: Configuring FirstItem in JSON\nDESCRIPTION: JSON configuration for the FirstItem function that extracts the first element from an Iterable.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/koryphe-functions.md#2025-04-23_snippet_47\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"FirstItem\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Right Key Inner Join with KeyFunctionMatch and FunctionChain in Java\nDESCRIPTION: Creates a Join operation using KeyFunctionMatch with a FunctionChain. The first key function extracts the 'count' property and increments it by 1, while the second key function extracts the 'count' property directly, allowing for more complex matching conditions.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/join.md#2025-04-23_snippet_16\n\nLANGUAGE: java\nCODE:\n```\nfinal OperationChain<Iterable<? extends MapTuple>> opChain = new OperationChain.Builder()\n        .first(new Join.Builder<>()\n                .input(inputElements)\n                .operation(new GetAllElements())\n                .joinType(JoinType.INNER)\n                .matchKey(MatchKey.RIGHT)\n                .flatten(false)\n                .matchMethod(new KeyFunctionMatch.Builder()\n                    .firstKeyFunction(new FunctionChain(new ExtractProperty(\"count\"), new Increment(1)))\n                    .secondKeyFunction(new ExtractProperty(\"count\"))\n                    .build())\n                .build())\n        .build();\n```\n\n----------------------------------------\n\nTITLE: Converting to Lowercase with cypherToLower\nDESCRIPTION: Demonstrates converting strings to lowercase using cypherToLower().\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/gremlin-guide/custom-functions.md#2025-04-23_snippet_12\n\nLANGUAGE: groovy\nCODE:\n```\ng.V().values('name').map(cypherToLower())\n```\n\n----------------------------------------\n\nTITLE: Defining Elements Schema for HyperLogLogPlus Cardinality Estimation in Gaffer\nDESCRIPTION: JSON schema definition for an entity type 'cardinality' with a HyperLogLogPlus property 'approxCardinality' to store vertex degree estimates.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/properties-guide/advanced.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"entities\": {\n    \"cardinality\": {\n      \"vertex\": \"vertex.string\",\n      \"properties\": {\n        \"approxCardinality\": \"hyperLogLogPlus\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding HyperLogLogPlus Property with TypeSubTypeValue in Python\nDESCRIPTION: This Python code example shows how to add a HyperLogLogPlus property with a TypeSubTypeValue offer to an Entity in Gaffer. It demonstrates the correct JSON structure for non-primitive types when using sketches.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/development-guide/rest-api-sketches.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ng.AddElements(\n            input=[\n                g.Entity(\n                    vertex=\"A\",\n                    group=\"cardinality\",\n                    properties={\n                        \"hllp\": g.hyper_log_log_plus([\n                            {\n                                \"class\" : \"uk.gov.gchq.gaffer.types.TypeSubTypeValue\",\n                                \"type\" : \"t\",\n                                \"subType\" : \"st\",\n                                \"value\" : \"B\"\n                            }\n                        ])\n                    }\n                )\n            ]\n        )\n```\n\n----------------------------------------\n\nTITLE: Implementing Numeric Product Calculation in JSON\nDESCRIPTION: JSON representation of the Product operator that calculates the product of two numbers.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/binary-operators-guide/koryphe-operators.md#2025-04-23_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"uk.gov.gchq.koryphe.impl.binaryoperator.Product\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring core-site.xml for Hadoop Secure Mode with Kerberos\nDESCRIPTION: This XML snippet shows the properties that need to be set in the core-site.xml file to enable Kerberos authentication for Hadoop Secure Mode. It enables Kerberos authentication and authorization.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/administration-guide/security/accumulo-kerberos.md#2025-04-23_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<!--Properties in core-site.xml-->\n<property>\n\t<name>hadoop.security.authentication</name>\n\t<value>kerberos</value>\n</property>\n<property>\n\t<name>hadoop.security.authorization</name>\n\t<value>true</value>\n</property>\n```\n\n----------------------------------------\n\nTITLE: Deploying a Map Store Graph with Helm\nDESCRIPTION: Command to install a Gaffer graph with a Map Store (in-memory store) which is suitable for demos or small-scale short-term usage. This uses the default configuration without any additional settings.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/administration-guide/gaffer-deployment/kubernetes-guide/simple-deployment.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nhelm install my-graph gaffer-docker/gaffer\n```\n\n----------------------------------------\n\nTITLE: Converting Date Strings to Timestamps in JSON\nDESCRIPTION: JSON configuration for a function that parses date strings into timestamp values. This configuration specifies milliseconds as the time unit and uses the system default format.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/koryphe-functions.md#2025-04-23_snippet_123\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"ParseTime\",\n  \"timeUnit\" : \"MILLISECOND\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using ToTypeValue Function in Python\nDESCRIPTION: Python code to create a ToTypeValue function using the Gaffer Python client. This function converts input objects to TypeValue instances.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/gaffer-functions.md#2025-04-23_snippet_46\n\nLANGUAGE: python\nCODE:\n```\ng.ToTypeValue()\n```\n\n----------------------------------------\n\nTITLE: Configuring Accumulo Properties Table in Markdown\nDESCRIPTION: Markdown table showing the configuration properties for Accumulo passwords and instance secret, including property names and their default values.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/administration-guide/gaffer-config/change-accumulo-passwords.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name                 | value                           | default value |\n| -------------------- | ------------------------------- | ------------- |\n| Instance Secret      | `instance.secret`               | \"DEFAULT\"     |\n| Tracer user          | `trace.user`                    | \"root\"        |\n| Tracer user password | `trace.token.property.password` | \"secret\"      |\n```\n\n----------------------------------------\n\nTITLE: Creating IsLongerThan Predicate in Python\nDESCRIPTION: Python implementation of the IsLongerThan predicate using the Gaffer Python client. Configures the predicate to check if the length/size of the input is greater than 5.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/predicates-guide/koryphe-predicates.md#2025-04-23_snippet_93\n\nLANGUAGE: python\nCODE:\n```\ng.IsLongerThan(\n  min_length=5,\n  or_equal_to=False\n)\n```\n\n----------------------------------------\n\nTITLE: Masking Timestamps with Start Date Only\nDESCRIPTION: Creates a timestamp mask with only a start time of 10000 milliseconds. This will filter out any timestamps before 10000ms.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/gaffer-functions.md#2025-04-23_snippet_30\n\nLANGUAGE: java\nCODE:\n```\nMaskTimestampSetByTimeRange function = new MaskTimestampSetByTimeRange(10000L, null);\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"MaskTimestampSetByTimeRange\",\n  \"startTime\" : 10000,\n  \"timeUnit\" : \"MILLISECOND\"\n}\n```\n\nLANGUAGE: python\nCODE:\n```\ng.MaskTimestampSetByTimeRange( \n  start_time=10000, \n  time_unit=\"MILLISECOND\" \n)\n```\n\n----------------------------------------\n\nTITLE: Configuring MapGenerator in JSON\nDESCRIPTION: JSON configuration for the MapGenerator function. This configuration specifies the class name, fields, and constants for the generated maps.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/gaffer-functions.md#2025-04-23_snippet_28\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"MapGenerator\",\n  \"fields\" : {\n    \"GROUP\" : \"Group Label\",\n    \"VERTEX\" : \"Vertex Label\",\n    \"SOURCE\" : \"Source Label\",\n    \"count\" : \"Count Label\"\n  },\n  \"constants\" : {\n    \"A Constant\" : \"Some constant value\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing StringDeduplicateConcat with Default Separator\nDESCRIPTION: Creates a StringDeduplicateConcat operator that concatenates two strings while removing duplicates, using the default comma separator.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/binary-operators-guide/koryphe-operators.md#2025-04-23_snippet_31\n\nLANGUAGE: java\nCODE:\n```\nfinal StringDeduplicateConcat stringDeduplicateConcat = new StringDeduplicateConcat();\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"uk.gov.gchq.koryphe.impl.binaryoperator.StringDeduplicateConcat\",\n  \"separator\" : \",\"\n}\n```\n\nLANGUAGE: python\nCODE:\n```\ng.StringDeduplicateConcat()\n```\n\n----------------------------------------\n\nTITLE: Defining IsMoreThan-OrEqual Predicate in JSON\nDESCRIPTION: JSON representation of the IsMoreThan predicate with value 5 and orEqualTo flag set to true for inclusive comparison. Can be used in Gaffer schema or operation definitions.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/predicates-guide/koryphe-predicates.md#2025-04-23_snippet_86\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"IsMoreThan\",\n  \"orEqualTo\" : true,\n  \"value\" : 5\n}\n```\n\n----------------------------------------\n\nTITLE: Java Results from Join Operation Execution\nDESCRIPTION: Java output showing the results of executing the Join operation. The results display matched entities and edges with their properties, showing the LEFT and RIGHT sides of the join with entity and edge data.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/join.md#2025-04-23_snippet_41\n\nLANGUAGE: java\nCODE:\n```\n[ [] --> [Entity[vertex=1,group=entity,properties=Properties[count=<java.lang.Integer>3]]] ]\n[ [] --> [Edge[group=edge,source=1,destination=2,directed=true,properties=Properties[count=<java.lang.Integer>3]]] ]\n[ [] --> [Edge[group=edge,source=1,destination=4,directed=true,properties=Properties[count=<java.lang.Integer>1]]] ]\n[ [] --> [Entity[vertex=2,group=entity,properties=Properties[count=<java.lang.Integer>1]]] ]\n[ Entity[vertex=1,group=entity,properties=Properties[count=<java.lang.Integer>3]],Entity[vertex=5,group=entity,properties=Properties[count=<java.lang.Integer>3]] --> [Edge[group=edge,source=2,destination=3,directed=true,properties=Properties[count=<java.lang.Integer>2]]] ]\n[ [] --> [Edge[group=edge,source=2,destination=4,directed=true,properties=Properties[count=<java.lang.Integer>1]]] ]\n[ [] --> [Edge[group=edge,source=2,destination=5,directed=true,properties=Properties[count=<java.lang.Integer>1]]] ]\n[ Entity[vertex=1,group=entity,properties=Properties[count=<java.lang.Integer>3]],Entity[vertex=5,group=entity,properties=Properties[count=<java.lang.Integer>3]] --> [Entity[vertex=3,group=entity,properties=Properties[count=<java.lang.Integer>2]]] ]\n[ [] --> [Edge[group=edge,source=3,destination=4,directed=true,properties=Properties[count=<java.lang.Integer>4]]] ]\n[ [] --> [Entity[vertex=4,group=entity,properties=Properties[count=<java.lang.Integer>1]]] ]\n[ [] --> [Entity[vertex=5,group=entity,properties=Properties[count=<java.lang.Integer>3]]] ]\n```\n\n----------------------------------------\n\nTITLE: Adding HllSketch Property with TypeSubTypeValue in Python\nDESCRIPTION: This Python code example demonstrates how to add an HllSketch property with a TypeSubTypeValue offer to an Entity in Gaffer. It shows the correct JSON structure for non-primitive types when using the HllSketch.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/development-guide/rest-api-sketches.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ng.AddElements(\n            input=[\n                g.Entity(\n                    vertex=\"A\",\n                    group=\"cardinality\",\n                    properties={\n                        \"hllSketch\": g.hll_sketch([\n                            {\n                                \"class\" : \"uk.gov.gchq.gaffer.types.TypeSubTypeValue\",\n                                \"type\" : \"t\",\n                                \"subType\" : \"st\",\n                                \"value\" : \"B\"\n                            }\n                        ])\n                    }\n                )\n            ]\n        )\n```\n\n----------------------------------------\n\nTITLE: Creating CsvGenerator in Python\nDESCRIPTION: Python code to create a CsvGenerator with specified field mappings, constants, and configuration options. This example matches the Java and JSON configurations.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/gaffer-functions.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ng.CsvGenerator( \n  fields={'GROUP': 'Group Label', 'VERTEX': 'Vertex Label', 'SOURCE': 'Source Label', 'count': 'Count Label'}, \n  constants={'A Constant': 'Some constant value'}, \n  quoted=False, \n  comma_replacement=\" \" \n)\n```\n\n----------------------------------------\n\nTITLE: Automatic Cardinality Generation in JSON\nDESCRIPTION: JSON configuration for automatic cardinality entity generation using OperationChain.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/user-guide/gaffer-basics/what-is-cardinality.md#2025-04-23_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"class\": \"OperationChain\",\n    \"operations\": [\n        {\n            \"class\": \"GenerateElements\",\n            \"input\": [{\n                \"class\": \"Edge\",\n                \"group\": \"edgeGroup1\",\n                \"source\": \"A\",\n                \"destination\": \"B\",\n                \"directed\": true\n            }],\n            \"elementGenerator\": {\n                \"class\": \"HllSketchEntityGenerator\",\n                \"cardinalityPropertyName\": \"approxCardinality\",\n                \"edgeGroupProperty\": \"edgeGroup\",\n                \"group\": \"cardinality\"\n            }\n        },\n        {\n            \"class\": \"AddElements\"\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Cancelling a Scheduled Job in JSON\nDESCRIPTION: This snippet shows the JSON representation of an OperationChain to cancel a scheduled job using the CancelScheduledJob operation.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/job.md#2025-04-23_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"class\" : \"OperationChain\",\n    \"operations\" : [ {\n        \"class\" : \"CancelScheduledJob\",\n        \"jobId\" : \"35c1bd84-1cd3-4609-8892-710e9d3c2d3f\"\n    } ]\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting and retrieving all results using ExportToSet in Gaffer\nDESCRIPTION: This example demonstrates exporting all elements to a Set export and then retrieving them using an OperationChain with GetAllElements, ExportToSet, DiscardOutput, and GetSetExport operations.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/export.md#2025-04-23_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nfinal OperationChain<Iterable<?>> opChain = new OperationChain.Builder()\n        .first(new GetAllElements())\n        .then(new ExportToSet<>())\n        .then(new DiscardOutput())\n        .then(new GetSetExport())\n        .build();\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"class\" : \"OperationChain\",\n    \"operations\" : [ {\n        \"class\" : \"GetAllElements\"\n    }, {\n        \"class\" : \"ExportToSet\"\n    }, {\n        \"class\" : \"DiscardOutput\"\n    }, {\n        \"class\" : \"GetSetExport\",\n        \"start\" : 0\n    } ]\n}\n```\n\nLANGUAGE: python\nCODE:\n```\ng.OperationChain( \n    operations=[ \n        g.GetAllElements(), \n        g.ExportToSet(), \n        g.DiscardOutput(), \n        g.GetSetExport( \n            start=0 \n        ) \n    ] \n)\n```\n\n----------------------------------------\n\nTITLE: Initializing CsvToMaps Function\nDESCRIPTION: Function to parse CSV strings into Maps with specified column headers. Takes a single CSV string input and converts it to mapped data structures.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/koryphe-functions.md#2025-04-23_snippet_19\n\nLANGUAGE: java\nCODE:\n```\nfinal CsvToMaps function = new CsvToMaps().header(\"header1\", \"header2\", \"header3\").firstRow(1);\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"CsvToMaps\",\n  \"header\" : [ \"header1\", \"header2\", \"header3\" ],\n  \"firstRow\" : 1\n}\n```\n\nLANGUAGE: python\nCODE:\n```\ng.CsvToMaps( \n  header=[ \n    \"header1\", \n    \"header2\", \n    \"header3\" \n  ], \n  first_row=1 \n)\n```\n\n----------------------------------------\n\nTITLE: Implementing GetGraphCreatedTime in Java\nDESCRIPTION: Creates an operation to retrieve the creation time of the current graph. The operation requires no configuration parameters and returns the graph's creation timestamp.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/core.md#2025-04-23_snippet_82\n\nLANGUAGE: java\nCODE:\n```\nfinal GetGraphCreatedTime operation = new GetGraphCreatedTime();\n```\n\n----------------------------------------\n\nTITLE: Defining Edge Schema with DoublesSketch Property in Gaffer\nDESCRIPTION: JSON schema configuration for edges that includes a 'doublesSketch' property for storing DoublesSketch objects that track quantiles of double values.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/properties-guide/advanced.md#2025-04-23_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"edges\": {\n    \"red\": {\n      \"source\": \"vertex.string\",\n      \"destination\": \"vertex.string\",\n      \"directed\": \"false\",\n      \"properties\": {\n        \"doublesSketch\": \"doubles.sketch\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Deduplicating Results with OperationChain in Java\nDESCRIPTION: Shows how to create an operation chain that gets all elements, limits the results, and deduplicates them using ToSet operation.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/user-guide/query/gaffer-syntax/faqs.md#2025-04-23_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nnew OperationChain.Builder()\n    .first(new GetAllElements())\n    .then(new Limit<>(1000000))\n    .then(new ToSet<>())\n    .build();\n```\n\n----------------------------------------\n\nTITLE: Initializing ToFreqMap Function in Java\nDESCRIPTION: Creates a new ToFreqMap function that converts input objects into FreqMap instances. This function is used to create frequency maps from various input types.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/gaffer-functions.md#2025-04-23_snippet_41\n\nLANGUAGE: java\nCODE:\n```\nFunction toFreqMap = new ToFreqMap();\n```\n\n----------------------------------------\n\nTITLE: Configuring MapFilter with Key Predicate\nDESCRIPTION: MapFilter implementation that filters map entries based on a predicate applied to keys containing 'a'.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/koryphe-functions.md#2025-04-23_snippet_104\n\nLANGUAGE: java\nCODE:\n```\nfinal MapFilter keyFilter = new MapFilter().keyPredicate(\n        new StringContains(\"a\")\n);\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"MapFilter\",\n  \"keyPredicate\" : {\n    \"class\" : \"StringContains\",\n    \"value\" : \"a\",\n    \"ignoreCase\" : false\n  }\n}\n```\n\nLANGUAGE: python\nCODE:\n```\ng.MapFilter(\n  key_predicate=g.StringContains( \n    value=\"a\", \n    ignore_case=False \n  ) \n)\n```\n\n----------------------------------------\n\nTITLE: Exporting Edges to New Graph using GraphLibrary Configuration in JSON\nDESCRIPTION: This JSON snippet shows the configuration for exporting all edges with group 'edge' to a new graph using a GraphLibrary. It defines an OperationChain with GetAllElements and ExportToOtherGraph operations, specifying schema and store properties IDs.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/export.md#2025-04-23_snippet_46\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"class\" : \"OperationChain\",\n    \"operations\" : [ {\n        \"class\" : \"GetAllElements\",\n        \"view\" : {\n        \"edges\" : {\n            \"edge\" : { }\n        }\n        }\n    }, {\n        \"class\" : \"ExportToOtherGraph\",\n        \"graphId\" : \"newGraphId\",\n        \"parentSchemaIds\" : [ \"exportSchemaId\" ],\n        \"parentStorePropertiesId\" : \"exportStorePropertiesId\"\n    } ]\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Named Operation in Gaffer\nDESCRIPTION: Removes an existing Named Operation from the Graph using DeleteNamedOperation class. This example removes the '2-hop' operation.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/named.md#2025-04-23_snippet_6\n\nLANGUAGE: java\nCODE:\n```\nfinal DeleteNamedOperation operation = new DeleteNamedOperation.Builder()\n        .name(\"2-hop\")\n        .build();\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"class\" : \"DeleteNamedOperation\",\n    \"operationName\" : \"2-hop\"\n}\n```\n\nLANGUAGE: python\nCODE:\n```\ng.DeleteNamedOperation( \n    operation_name=\"2-hop\" \n)\n```\n\n----------------------------------------\n\nTITLE: Default Graph IDs Configuration for Federated Store\nDESCRIPTION: JSON configuration file that specifies which graph IDs should be queried by default when a Federated Operation is not used. This example configures GraphA and GraphB as defaults.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/administration-guide/gaffer-stores/federated-store.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n[\n  \"GraphA\", \"GraphB\"\n]\n```\n\n----------------------------------------\n\nTITLE: Serialiser Support Table in Markdown\nDESCRIPTION: Table showing specialized serializers available for different sketch property types.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/properties-guide/advanced.md#2025-04-23_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\nProperty | Serialiser\n-------- | ---------------\n`HyperLogLogPlus` | [`uk.gov.gchq.gaffer.sketches.clearspring.cardinality.serialisation.HyperLogLogPlusSerialiser`]\n`HllSketch` | [`uk.gov.gchq.gaffer.sketches.datasketches.cardinality.serialisation.HllSketchSerialiser`]\n`LongsSketch` | [`uk.gov.gchq.gaffer.sketches.datasketches.frequencies.serialisation.LongsSketchSerialiser`]\n`DoublesSketch` | [`uk.gov.gchq.gaffer.sketches.datasketches.quantiles.serialisation.DoublesSketchSerialiser`]\n`ReservoirItemsSketch` | [`uk.gov.gchq.gaffer.sketches.datasketches.sampling.serialisation.ReservoirNumbersSketchSerialiser`]\n`ReservoirItemsSketch` | [`uk.gov.gchq.gaffer.sketches.datasketches.sampling.serialisation.ReservoirStringsSketchSerialiser`]\n`ThetaSketch` | [`uk.gov.gchq.gaffer.sketches.datasketches.theta.serialisation.SketchSerialiser`]\n```\n\n----------------------------------------\n\nTITLE: Initializing ToNull Function in Java\nDESCRIPTION: Creates a new instance of the ToNull function, which returns null for any input object. It's useful for nullifying specific fields or values.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/koryphe-functions.md#2025-04-23_snippet_174\n\nLANGUAGE: java\nCODE:\n```\nfinal ToNull function = new ToNull();\n```\n\n----------------------------------------\n\nTITLE: Creating ExtractId for Edge in Python\nDESCRIPTION: Python code to create an ExtractId instance for extracting the SOURCE identifier from an Edge element.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/gaffer-functions.md#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ng.ExtractId( \n  id=\"SOURCE\" \n)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Graph Configuration in JSON\nDESCRIPTION: A JSON configuration file that defines the basic graph properties including its ID and description for the example Gaffer deployment.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/development-guide/example-deployment/project-setup.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"graphId\": \"ExampleGraph\",\n    \"description\": \"An example graph\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using Divide in Python\nDESCRIPTION: Python implementation of the Divide function which takes a pair of integers and returns their quotient and remainder.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/koryphe-functions.md#2025-04-23_snippet_33\n\nLANGUAGE: python\nCODE:\n```\ng.Divide()\n```\n\n----------------------------------------\n\nTITLE: Showing While Operation Results in JSON\nDESCRIPTION: This JSON snippet presents the results of a While operation in Gaffer, showing an array of EntitySeed objects with their corresponding vertices.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/flow.md#2025-04-23_snippet_25\n\nLANGUAGE: json\nCODE:\n```\n[ {\n  \"class\" : \"uk.gov.gchq.gaffer.operation.data.EntitySeed\",\n  \"vertex\" : 6\n}, {\n  \"class\" : \"uk.gov.gchq.gaffer.operation.data.EntitySeed\",\n  \"vertex\" : 3\n}, {\n  \"class\" : \"uk.gov.gchq.gaffer.operation.data.EntitySeed\",\n  \"vertex\" : 7\n} ]\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Or Predicate in Multiple Languages\nDESCRIPTION: Demonstrates using Or predicate to check if a value is less than 2, equal to 5, or more than 10. The predicate combines multiple conditions using logical OR.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/predicates-guide/koryphe-predicates.md#2025-04-23_snippet_8\n\nLANGUAGE: java\nCODE:\n```\nfinal Or function = new Or<>(\n        new IsLessThan(2),\n        new IsEqual(5),\n        new IsMoreThan(10)\n);\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"uk.gov.gchq.koryphe.impl.predicate.Or\",\n  \"predicates\" : [ {\n    \"class\" : \"IsLessThan\",\n    \"orEqualTo\" : false,\n    \"value\" : 2\n  }, {\n    \"class\" : \"IsEqual\",\n    \"value\" : 5\n  }, {\n    \"class\" : \"IsMoreThan\",\n    \"orEqualTo\" : false,\n    \"value\" : 10\n  } ]\n}\n```\n\nLANGUAGE: python\nCODE:\n```\ng.Or(\n  predicates=[\n    g.IsLessThan(\n      value=2,\n      or_equal_to=False\n    ),\n    g.IsEqual(\n      value=5\n    ),\n    g.IsMoreThan(\n      value=10,\n      or_equal_to=False\n    )\n  ]\n)\n```\n\n----------------------------------------\n\nTITLE: GetElementsBetweenSetsPairs Operation in JSON\nDESCRIPTION: This JSON representation of the GetElementsBetweenSetsPairs operation specifies two input sets: one containing node 1, and another containing nodes 2 and 4. It demonstrates how to structure the operation for use in a Gaffer graph query.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/accumulo.md#2025-04-23_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"class\" : \"GetElementsBetweenSetsPairs\",\n    \"input\" : {\n        \"class\" : \"Pair\",\n        \"first\" : {\n            \"Iterable\": [\n                {\n                    \"class\" : \"EntitySeed\",\n                    \"vertex\" : 1\n                }\n            ]\n        },\n        \"second\" : {\n            \"Iterable\": [\n                {\n                    \"class\" : \"EntitySeed\",\n                    \"vertex\" : 2\n                },\n                {\n                    \"class\" : \"EntitySeed\",\n                    \"vertex\" : 4\n                }\n            ]\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing InTimeRange with Microsecond Precision\nDESCRIPTION: Creates an InTimeRange predicate that checks if a Long timestamp falls within a specified date range using microsecond precision.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/predicates-guide/koryphe-predicates.md#2025-04-23_snippet_61\n\nLANGUAGE: java\nCODE:\n```\nfinal InTimeRange function = new InTimeRange.Builder()\n        .start(\"2017/01/01 01:30:10\")\n        .end(\"2017/01/01 01:30:50\")\n        .timeUnit(TimeUnit.MICROSECOND)\n        .build();\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"InTimeRange\",\n  \"start\" : \"2017/01/01 01:30:10\",\n  \"end\" : \"2017/01/01 01:30:50\",\n  \"timeUnit\" : \"MICROSECOND\"\n}\n```\n\nLANGUAGE: python\nCODE:\n```\ng.InTimeRange(\n  start=\"2017/01/01 01:30:10\",\n  end=\"2017/01/01 01:30:50\",\n  time_unit=\"MICROSECOND\"\n)\n```\n\n----------------------------------------\n\nTITLE: Exporting to Gaffer Result Cache and Getting Job Details in Java\nDESCRIPTION: This Java operation chain exports all elements to a Gaffer result cache, discards the output, and then retrieves the job details, returning a JobDetail object.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/export.md#2025-04-23_snippet_12\n\nLANGUAGE: java\nCODE:\n```\nfinal OperationChain<JobDetail> exportOpChain = new OperationChain.Builder()\n        .first(new GetAllElements())\n        .then(new ExportToGafferResultCache<>())\n        .then(new DiscardOutput())\n        .then(new GetJobDetails())\n        .build();\n```\n\n----------------------------------------\n\nTITLE: JSON Representation of Gaffer Graph Data\nDESCRIPTION: A JSON structure representing graph data in the Gaffer framework. It contains edges between vertices, entity definitions, and specialized cardinality metrics using HyperLogLogPlus for graph analytics.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/get.md#2025-04-23_snippet_41\n\nLANGUAGE: json\nCODE:\n```\n\"cardinality\" : 1\n                    }\n                  }\n                },\n                \"count\" : 1,\n                \"edgeGroup\" : {\n                  \"java.util.TreeSet\" : [ \"edge\" ]\n                }\n              }\n            } ]\n          }, {\n            \"1\" : [ ]\n          } ]\n        }, {\n          \"edges\" : [ [ {\n            \"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n            \"group\" : \"edge\",\n            \"source\" : 1,\n            \"destination\" : 5,\n            \"directed\" : true,\n            \"matchedVertex\" : \"SOURCE\",\n            \"properties\" : {\n              \"count\" : 6\n            }\n          } ], [ {\n            \"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n            \"group\" : \"edge1\",\n            \"source\" : 2,\n            \"destination\" : 5,\n            \"directed\" : true,\n            \"matchedVertex\" : \"DESTINATION\",\n            \"properties\" : {\n              \"count\" : 7\n            }\n          } ] ],\n          \"entities\" : [ {\n            \"1\" : [ {\n              \"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n              \"group\" : \"entity1\",\n              \"vertex\" : 1,\n              \"properties\" : {\n                \"count\" : 3\n              }\n            }, {\n              \"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n              \"group\" : \"cardinality\",\n              \"vertex\" : 1,\n              \"properties\" : {\n                \"hllp\" : {\n                  \"com.clearspring.analytics.stream.cardinality.HyperLogLogPlus\" : {\n                    \"hyperLogLogPlus\" : {\n                      \"hyperLogLogPlusSketchBytes\" : \"/////gUFAQH9Fg==\",\n                      \"cardinality\" : 1\n                    }\n                  }\n                },\n                \"count\" : 1,\n                \"edgeGroup\" : {\n                  \"java.util.TreeSet\" : [ \"edge\" ]\n                }\n              }\n            }, {\n              \"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n              \"group\" : \"cardinality\",\n              \"vertex\" : 1,\n              \"properties\" : {\n                \"hllp\" : {\n                  \"com.clearspring.analytics.stream.cardinality.HyperLogLogPlus\" : {\n                    \"hyperLogLogPlus\" : {\n                      \"hyperLogLogPlusSketchBytes\" : \"/////gUFAQH7Cw==\",\n                      \"cardinality\" : 1\n                    }\n                  }\n                },\n                \"count\" : 1,\n                \"edgeGroup\" : {\n                  \"java.util.TreeSet\" : [ \"edge1\" ]\n                }\n              }\n            } ]\n          }, {\n            \"5\" : [ {\n              \"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n              \"group\" : \"entity1\",\n              \"vertex\" : 5,\n              \"properties\" : {\n                \"count\" : 3\n              }\n            }, {\n              \"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n              \"group\" : \"cardinality\",\n              \"vertex\" : 5,\n              \"properties\" : {\n                \"hllp\" : {\n                  \"com.clearspring.analytics.stream.cardinality.HyperLogLogPlus\" : {\n                    \"hyperLogLogPlus\" : {\n                      \"hyperLogLogPlusSketchBytes\" : \"/////gUFAQP9A/4HgBI=\",\n                      \"cardinality\" : 3\n                    }\n                  }\n                },\n                \"count\" : 3,\n                \"edgeGroup\" : {\n                  \"java.util.TreeSet\" : [ \"edge1\" ]\n                }\n              }\n            }, {\n              \"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n              \"group\" : \"cardinality\",\n              \"vertex\" : 5,\n              \"properties\" : {\n                \"hllp\" : {\n                  \"com.clearspring.analytics.stream.cardinality.HyperLogLogPlus\" : {\n                    \"hyperLogLogPlus\" : {\n                      \"hyperLogLogPlusSketchBytes\" : \"/////gUFAQH7FA==\",\n                      \"cardinality\" : 1\n                    }\n                  }\n                },\n                \"count\" : 1,\n                \"edgeGroup\" : {\n                  \"java.util.TreeSet\" : [ \"edge\" ]\n                }\n              }\n            } ]\n          }, {\n            \"2\" : [ ]\n          } ]\n        }, {\n          \"edges\" : [ [ {\n            \"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n            \"group\" : \"edge1\",\n            \"source\" : 1,\n            \"destination\" : 2,\n            \"directed\" : true,\n            \"matchedVertex\" : \"SOURCE\",\n            \"properties\" : {\n              \"count\" : 3\n            }\n          } ], [ {\n            \"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n            \"group\" : \"edge1\",\n            \"source\" : 1,\n            \"destination\" : 2,\n            \"directed\" : true,\n            \"matchedVertex\" : \"DESTINATION\",\n            \"properties\" : {\n              \"count\" : 3\n            }\n          } ] ],\n          \"entities\" : [ {\n            \"1\" : [ {\n              \"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n              \"group\" : \"entity1\",\n              \"vertex\" : 1,\n              \"properties\" : {\n                \"count\" : 3\n              }\n            }, {\n              \"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n              \"group\" : \"cardinality\",\n              \"vertex\" : 1,\n              \"properties\" : {\n                \"hllp\" : {\n                  \"com.clearspring.analytics.stream.cardinality.HyperLogLogPlus\" : {\n                    \"hyperLogLogPlus\" : {\n                      \"hyperLogLogPlusSketchBytes\" : \"/////gUFAQH9Fg==\",\n                      \"cardinality\" : 1\n                    }\n                  }\n                },\n                \"count\" : 1,\n                \"edgeGroup\" : {\n                  \"java.util.TreeSet\" : [ \"edge\" ]\n                }\n              }\n            }, {\n              \"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n              \"group\" : \"cardinality\",\n              \"vertex\" : 1,\n              \"properties\" : {\n                \"hllp\" : {\n                  \"com.clearspring.analytics.stream.cardinality.HyperLogLogPlus\" : {\n                    \"hyperLogLogPlus\" : {\n                      \"hyperLogLogPlusSketchBytes\" : \"/////gUFAQH7Cw==\",\n                      \"cardinality\" : 1\n                    }\n                  }\n                },\n                \"count\" : 1,\n                \"edgeGroup\" : {\n                  \"java.util.TreeSet\" : [ \"edge1\" ]\n                }\n              }\n            } ]\n          }, {\n            \"2\" : [ {\n              \"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n              \"group\" : \"entity1\",\n              \"vertex\" : 2,\n              \"properties\" : {\n                \"count\" : 1\n              }\n            }, {\n              \"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n              \"group\" : \"cardinality\",\n              \"vertex\" : 2,\n              \"properties\" : {\n                \"hllp\" : {\n                  \"com.clearspring.analytics.stream.cardinality.HyperLogLogPlus\" : {\n                    \"hyperLogLogPlus\" : {\n                      \"hyperLogLogPlusSketchBytes\" : \"/////gUFAQP3DIQIggI=\",\n                      \"cardinality\" : 3\n                    }\n                  }\n                },\n                \"count\" : 3,\n                \"edgeGroup\" : {\n                  \"java.util.TreeSet\" : [ \"edge1\" ]\n                }\n              }\n            } ]\n          }, {\n            \"1\" : [ ]\n          } ]\n        }, {\n          \"edges\" : [ [ {\n            \"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n            \"group\" : \"edge1\",\n            \"source\" : 1,\n            \"destination\" : 2,\n            \"directed\" : true,\n            \"matchedVertex\" : \"SOURCE\",\n            \"properties\" : {\n              \"count\" : 3\n            }\n          } ], [ {\n            \"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n            \"group\" : \"edge1\",\n            \"source\" : 3,\n            \"destination\" : 2,\n            \"directed\" : true,\n            \"matchedVertex\" : \"DESTINATION\",\n            \"properties\" : {\n              \"count\" : 5\n            }\n          } ] ],\n          \"entities\" : [ {\n            \"1\" : [ {\n              \"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n              \"group\" : \"entity1\",\n              \"vertex\" : 1,\n              \"properties\" : {\n                \"count\" : 3\n              }\n            }, {\n              \"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n              \"group\" : \"cardinality\",\n              \"vertex\" : 1,\n              \"properties\" : {\n                \"hllp\" : {\n                  \"com.clearspring.analytics.stream.cardinality.HyperLogLogPlus\" : {\n                    \"hyperLogLogPlus\" : {\n                      \"hyperLogLogPlusSketchBytes\" : \"/////gUFAQH9Fg==\",\n                      \"cardinality\" : 1\n                    }\n                  }\n                },\n                \"count\" : 1,\n                \"edgeGroup\" : {\n                  \"java.util.TreeSet\" : [ \"edge\" ]\n                }\n              }\n            }, {\n              \"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n              \"group\" : \"cardinality\",\n              \"vertex\" : 1,\n              \"properties\" : {\n                \"hllp\" : {\n                  \"com.clearspring.analytics.stream.cardinality.HyperLogLogPlus\" : {\n                    \"hyperLogLogPlus\" : {\n                      \"hyperLogLogPlusSketchBytes\" : \"/////gUFAQH7Cw==\",\n                      \"cardinality\" : 1\n                    }\n                  }\n                },\n                \"count\" : 1,\n                \"edgeGroup\" : {\n                  \"java.util.TreeSet\" : [ \"edge1\" ]\n                }\n              }\n            } ]\n          }, {\n            \"2\" : [ {\n              \"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n              \"group\" : \"entity1\",\n              \"vertex\" : 2,\n              \"properties\" : {\n                \"count\" : 1\n              }\n            }, {\n              \"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n              \"group\" : \"cardinality\",\n```\n\n----------------------------------------\n\nTITLE: Data Import Flow in Gaffer Mermaid Diagram\nDESCRIPTION: Mermaid flowchart showing the stages of data import in Gaffer: from raw data, through element generation, to adding elements.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/user-guide/query/gaffer-syntax/import-export/csv.md#2025-04-23_snippet_2\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart LR\n    A(Raw Data) --> B(GenerateElements)\n    B --> C(AddElements)\n```\n\n----------------------------------------\n\nTITLE: Schema Definition Changes\nDESCRIPTION: Removal of direct serializer class access methods in favor of using getSerialiser().getClass() pattern. Schema ID and timestamp property configurations moved to JSON.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/change-notes/migrating-from-v1-to-v2/deprecations.md#2025-04-23_snippet_16\n\n\n\n----------------------------------------\n\nTITLE: Results of ElementMatch Join in JSON\nDESCRIPTION: JSON representation of the ElementMatch join results. Each result contains a LEFT and RIGHT value, showing the matched entities with identical 'count' properties from vertices 5, 1, and 4.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/join.md#2025-04-23_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n[ \n    {\n    \"values\" : {\n        \"LEFT\" : [\n            {\n            \"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n            \"group\" : \"entity\",\n            \"vertex\" : 5,\n            \"properties\" : {\n                \"count\" : 3\n                }\n            } \n        ],\n        \"RIGHT\" : {\n            \"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n            \"group\" : \"entity\",\n            \"vertex\" : 5,\n            \"properties\" : {\n                \"count\" : 3\n            }\n        }\n    }\n}, {\n\"values\" : {\n    \"LEFT\" : [ \n        {\n        \"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n        \"group\" : \"entity\",\n        \"vertex\" : 1,\n        \"properties\" : {\n            \"count\" : 3\n            }\n        }\n    ],\n    \"RIGHT\" : {\n        \"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n        \"group\" : \"entity\",\n        \"vertex\" : 1,\n        \"properties\" : {\n            \"count\" : 3\n        }\n    }\n}\n}, {\n    \"values\" : {\n        \"LEFT\" : [\n            {\n            \"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n            \"group\" : \"entity\",\n            \"vertex\" : 4,\n            \"properties\" : {\n                \"count\" : 1\n                }\n            }\n        ],\n        \"RIGHT\" : {\n            \"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n            \"group\" : \"entity\",\n            \"vertex\" : 4,\n            \"properties\" : {\n                \"count\" : 1\n            }\n        }\n    }\n} \n]\n```\n\n----------------------------------------\n\nTITLE: Defining IsLongerThan-OrEqual Predicate in JSON\nDESCRIPTION: JSON representation of the IsLongerThan predicate with minLength 5 and orEqualTo flag set to true for inclusive comparison. Used to check if object length/size is greater than or equal to the specified value.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/predicates-guide/koryphe-predicates.md#2025-04-23_snippet_95\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"IsLongerThan\",\n  \"minLength\" : 5,\n  \"orEqualTo\" : true\n}\n```\n\n----------------------------------------\n\nTITLE: Results of ElementMatch Right Key Outer Join in JSON Format\nDESCRIPTION: The JSON representation of results from a right key outer join with ElementMatch. Each result is a MapTuple with a LEFT value of null and a RIGHT value containing either an Edge or Entity object with various properties.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/join.md#2025-04-23_snippet_61\n\nLANGUAGE: json\nCODE:\n```\n[ {\n\"values\" : {\n    \"LEFT\" : null,\n    \"RIGHT\" : {\n    \"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n    \"group\" : \"edge\",\n    \"source\" : 1,\n    \"destination\" : 4,\n    \"directed\" : true,\n    \"matchedVertex\" : \"SOURCE\",\n    \"properties\" : {\n        \"count\" : 1\n    }\n    }\n}\n}, {\n\"values\" : {\n    \"LEFT\" : null,\n    \"RIGHT\" : {\n    \"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n    \"group\" : \"edge\",\n    \"source\" : 3,\n    \"destination\" : 4,\n    \"directed\" : true,\n    \"matchedVertex\" : \"SOURCE\",\n    \"properties\" : {\n        \"count\" : 4\n    }\n    }\n}\n}, {\n\"values\" : {\n    \"LEFT\" : null,\n    \"RIGHT\" : {\n    \"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n    \"group\" : \"entity\",\n    \"vertex\" : 2,\n    \"properties\" : {\n        \"count\" : 1\n    }\n    }\n}\n}, {\n\"values\" : {\n    \"LEFT\" : null,\n    \"RIGHT\" : {\n    \"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n    \"group\" : \"edge\",\n    \"source\" : 2,\n    \"destination\" : 3,\n    \"directed\" : true,\n    \"matchedVertex\" : \"SOURCE\",\n    \"properties\" : {\n        \"count\" : 2\n    }\n    }\n}\n}, {\n\"values\" : {\n    \"LEFT\" : null,\n    \"RIGHT\" : {\n    \"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n    \"group\" : \"entity\",\n    \"vertex\" : 3,\n    \"properties\" : {\n        \"count\" : 2\n    }\n    }\n}\n}, {\n\"values\" : {\n    \"LEFT\" : null,\n    \"RIGHT\" : {\n    \"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n    \"group\" : \"edge\",\n    \"source\" : 2,\n    \"destination\" : 4,\n    \"directed\" : true,\n    \"matchedVertex\" : \"SOURCE\",\n    \"properties\" : {\n        \"count\" : 1\n    }\n    }\n}\n}, {\n\"values\" : {\n    \"LEFT\" : null,\n    \"RIGHT\" : {\n    \"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n    \"group\" : \"edge\",\n    \"source\" : 1,\n    \"destination\" : 2,\n    \"directed\" : true,\n    \"matchedVertex\" : \"SOURCE\",\n    \"properties\" : {\n        \"count\" : 3\n    }\n    }\n}\n}, {\n\"values\" : {\n    \"LEFT\" : null,\n    \"RIGHT\" : {\n    \"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n    \"group\" : \"edge\",\n    \"source\" : 2,\n    \"destination\" : 5,\n    \"directed\" : true,\n    \"matchedVertex\" : \"SOURCE\",\n    \"properties\" : {\n        \"count\" : 1\n    }\n    }\n}\n} ]\n```\n\n----------------------------------------\n\nTITLE: Deleting Named View - Multiple Languages\nDESCRIPTION: Removes a Named View from the Graph by specifying its name.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/named.md#2025-04-23_snippet_9\n\nLANGUAGE: java\nCODE:\n```\nfinal DeleteNamedView op = new DeleteNamedView.Builder()\n        .name(\"testNamedView\")\n        .build();\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"class\" : \"DeleteNamedView\",\n    \"name\" : \"testNamedView\"\n}\n```\n\nLANGUAGE: python\nCODE:\n```\ng.DeleteNamedView( \n    name=\"testNamedView\" \n)\n```\n\n----------------------------------------\n\nTITLE: Initializing TypeValueToTuple Function in Java\nDESCRIPTION: Creates a new TypeValueToTuple function that converts TypeValue objects into Tuples. This function is used to transform TypeValue instances into tuple representations.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/gaffer-functions.md#2025-04-23_snippet_59\n\nLANGUAGE: java\nCODE:\n```\nfinal TypeValueToTuple function = new TypeValueToTuple();\n```\n\n----------------------------------------\n\nTITLE: Basic Entity ID Types Schema in Gaffer\nDESCRIPTION: Initial types schema defining basic string types for Person and Software entity IDs using Java String class.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/development-guide/example-deployment/writing-the-schema.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"types\": {\n        \"id.person.string\": {\n            \"description\": \"A basic type to hold the string id of a person entity\",\n            \"class\": \"java.lang.String\"\n        },\n        \"id.software.string\": {\n            \"description\": \"A basic type to hold the string id of a person entity\",\n            \"class\": \"java.lang.String\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Nested Named Operations Example - Java Implementation\nDESCRIPTION: Java implementation of nested Named Operations, demonstrating how to create and chain multiple operations together.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/administration-guide/named-operations.md#2025-04-23_snippet_14\n\nLANGUAGE: java\nCODE:\n```\nfinal AddNamedOperation namedOp1 = new AddNamedOperation.Builder()\n    .operationChain(new OperationChain.Builder()\n            .first(new GetElements.Builder()\n                    .input(new EntitySeed(1))\n                    .build())\n            .build())\n    .description(\"Simple named operation\")\n    .name(\"namedOp1\")\n    .overwrite()\n    .build();\n\nfinal AddNamedOperation namedOp2 = new AddNamedOperation.Builder()\n    .operationChain(new OperationChain.Builder()\n            .first(new NamedOperation.Builder<>()\n                    .input(namedOp1)\n                    .build())\n            .build())\n    .description(\"Nested named operation\")\n    .name(\"namedOp2\")\n    .overwrite()\n    .build();\n```\n\n----------------------------------------\n\nTITLE: Implementing MapContains Predicate in Python\nDESCRIPTION: Python implementation of a MapContains predicate that checks if a map contains a specific key 'a'. The key parameter specifies the key to check for.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/predicates-guide/koryphe-predicates.md#2025-04-23_snippet_108\n\nLANGUAGE: python\nCODE:\n```\ng.MapContains(\n  key=\"a\"\n)\n```\n\n----------------------------------------\n\nTITLE: Maven Build Command for Legacy Profile\nDESCRIPTION: Example Maven command to build Gaffer with Accumulo 1.9.3 and Hadoop 2.6.5 using the legacy profile. This command enables coverage testing and the legacy profile flag.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/change-notes/migrating-from-v1-to-v2/accumulo-migration.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmvn clean install -Pcoverage -Dlegacy=true\n```\n\n----------------------------------------\n\nTITLE: Federated Store Architecture Diagram\nDESCRIPTION: Mermaid diagram showing the relationship between Federated Store, Gaffer Graphs, and Accumulo cluster in a typical setup.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/administration-guide/gaffer-stores/simple-federated/configuration.md#2025-04-23_snippet_1\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph LR\n    A([\"Federated Store\"])-->B([\"Gaffer Graph 1\"])\n    A-->C([\"Gaffer Graph 2\"])\n    B-->D([\"Accumulo\"])\n    C-->D\n```\n\n----------------------------------------\n\nTITLE: Fetching Entities with Complex Count Filter in Python\nDESCRIPTION: This Python code demonstrates how to query for entities related to vertex 2, applying a complex filter for entities with a count less than 2 or more than 5 using the GetElements operation and Or predicate in Gaffer's Python client.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/get.md#2025-04-23_snippet_18\n\nLANGUAGE: python\nCODE:\n```\ng.GetElements(\nview=g.View(\n    entities=[\n    g.ElementDefinition(\n        group=\"entity\",\n        pre_aggregation_filter_functions=[\n        g.PredicateContext(\n            selection=[\n            \"count\"\n            ],\n            predicate=g.Or(\n            predicates=[\n                g.IsLessThan(\n                value=2,\n                or_equal_to=False\n                ),\n                g.IsMoreThan(\n                value=5,\n```\n\n----------------------------------------\n\nTITLE: Getting Current Date\nDESCRIPTION: Function to retrieve current date and time. Ignores input and returns current system date.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/koryphe-functions.md#2025-04-23_snippet_20\n\nLANGUAGE: java\nCODE:\n```\nfinal CurrentDate currentDate = new CurrentDate();\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"CurrentDate\"\n}\n```\n\nLANGUAGE: python\nCODE:\n```\ng.CurrentDate()\n```\n\n----------------------------------------\n\nTITLE: Configuring InRange Function for Long Values in JSON\nDESCRIPTION: JSON configuration for an InRange function checking Long values between 5 and 10 (inclusive). This can be used for serialization or configuration of the function.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/predicates-guide/koryphe-predicates.md#2025-04-23_snippet_49\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"InRange\",\n  \"start\" : {\n    \"Long\" : 5\n  },\n  \"end\" : {\n    \"Long\" : 10\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Edges with a Private User Authorization in Gaffer\nDESCRIPTION: Java code that creates a user with 'private' data authorization and executes a query to retrieve edges. Users with 'private' authorization can access both private and public data, demonstrating hierarchical visibility control.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/administration-guide/security/security-guide.md#2025-04-23_snippet_6\n\nLANGUAGE: java\nCODE:\n```\nfinal User privateUser = new User.Builder()\n        .userId(\"privateUser\")\n        .dataAuth(\"private\")\n        .build();\n\nfinal GetElements getPrivateRelatedEdges = new GetElements.Builder()\n        .input(new EntitySeed(\"10\"), new EntitySeed(\"23\"))\n        .view(new View.Builder()\n                .edge(\"RoadUse\")\n                .build())\n        .build();\n\nfinal CloseableIterable<? extends Element> privateResults = graph.execute(getPrivateRelatedEdges, privateUser);\n```\n\n----------------------------------------\n\nTITLE: Result of Min Operation with Multiple Comparators in Gaffer\nDESCRIPTION: The result of the Min operation using both 'count' and 'score' transient properties as comparators, returning an Entity with the minimum values.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/core.md#2025-04-23_snippet_26\n\nLANGUAGE: java\nCODE:\n```\nEntity[vertex=2,group=entity,properties=Properties[score=<java.lang.Integer>2,count=<java.lang.Integer>1]]\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n  \"group\" : \"entity\",\n  \"vertex\" : 2,\n  \"properties\" : {\n    \"score\" : 2,\n    \"count\" : 1\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Getting DataFrame of Elements with Edge Group in JSON\nDESCRIPTION: JSON representation of GetDataFrameOfElements operation for retrieving edges.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/spark.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"GetDataFrameOfElements\",\n  \"view\" : {\n    \"edges\" : {\n      \"edge\" : { }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring ToSet Function in JSON\nDESCRIPTION: JSON configuration for the ToSet function. This can be used in Gaffer graph configurations or other JSON-based setups.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/koryphe-functions.md#2025-04-23_snippet_178\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"uk.gov.gchq.koryphe.impl.function.ToSet\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Exclusive InRange Function in JSON\nDESCRIPTION: JSON configuration for an InRange function with exclusive boundaries for Long values between 5 and 10. This showcases how to serialize exclusive range checks.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/predicates-guide/koryphe-predicates.md#2025-04-23_snippet_52\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"InRange\",\n  \"start\" : {\n    \"Long\" : 5\n  },\n  \"end\" : {\n    \"Long\" : 10\n  },\n  \"startInclusive\" : false,\n  \"endInclusive\" : false\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Graph Export\nDESCRIPTION: Example showing how to export all edges with group 'edge' to a new Gaffer graph with ID 'newGraphId'. The new graph uses the same schema and store properties as the source graph.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/export.md#2025-04-23_snippet_37\n\nLANGUAGE: java\nCODE:\n```\nfinal OperationChain<Iterable<? extends Element>> opChain =\n        new OperationChain.Builder()\n                .first(new GetAllElements.Builder()\n                        .view(new View.Builder()\n                                .edge(\"edge\")\n                                .build())\n                        .build())\n                .then(new ExportToOtherGraph.Builder()\n                        .graphId(\"newGraphId\")\n                        .build())\n                .build();\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"class\" : \"OperationChain\",\n    \"operations\" : [ {\n        \"class\" : \"GetAllElements\",\n        \"view\" : {\n        \"edges\" : {\n            \"edge\" : { }\n        }\n        }\n    }, {\n        \"class\" : \"ExportToOtherGraph\",\n        \"graphId\" : \"newGraphId\"\n    } ]\n}\n```\n\nLANGUAGE: python\nCODE:\n```\ng.OperationChain( \n    operations=[ \n        g.GetAllElements( \n        view=g.View( \n            edges=[ \n                g.ElementDefinition( \n                    group=\"edge\" \n                ) \n            ], \n            all_edges=False, \n            all_entities=False \n            ) \n        ), \n        g.ExportToOtherGraph( \n            graph_id=\"newGraphId\" \n        ) \n    ] \n)\n```\n\n----------------------------------------\n\nTITLE: Representing Graph Elements in Gaffer JSON Format\nDESCRIPTION: Shows the JSON structure of Gaffer's Edge and Entity data elements. Edges represent connections between vertices with properties and directionality, while Entities represent properties of individual vertices. Each element has a class identifier, group designation, and property values.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/export.md#2025-04-23_snippet_27\n\nLANGUAGE: json\nCODE:\n```\n\"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n\"group\" : \"edge\",\n\"source\" : 2,\n\"destination\" : 5,\n\"directed\" : true,\n\"matchedVertex\" : \"SOURCE\",\n\"properties\" : {\n    \"count\" : 1\n}\n```\n\n----------------------------------------\n\nTITLE: Custom CSV Export Format in Gaffer JSON\nDESCRIPTION: JSON configuration for a ToCsv operation using a custom CsvGenerator to create a custom export format with specified fields and constants.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/user-guide/query/gaffer-syntax/import-export/csv.md#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"class\": \"ToCsv\",\n    \"csvGenerator\": {\n        \"class\": \"CsvGenerator\",\n        \"fields\": [\"prop1\", \"SOURCE\", \"DESTINATION\", \"prop2\", \"GROUP\"],\n        \"constants\": [\"constant1\", \"constant2\"]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Reversing Strings with cypherReverse\nDESCRIPTION: Demonstrates reversing vertex name strings using cypherReverse().\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/gremlin-guide/custom-functions.md#2025-04-23_snippet_8\n\nLANGUAGE: groovy\nCODE:\n```\ng.V().values('name').map(cypherReverse())\n```\n\n----------------------------------------\n\nTITLE: JSON Configuration for Right Key Outer Join with KeyFunctionMatch in Gaffer\nDESCRIPTION: JSON representation of an OperationChain that performs a right key outer join with KeyFunctionMatch and FunctionChain. It includes configuration for the key functions that extract and transform the count property for matching.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/join.md#2025-04-23_snippet_63\n\nLANGUAGE: json\nCODE:\n```\n{\n\"class\" : \"OperationChain\",\n\"operations\" : [ {\n    \"class\" : \"Join\",\n    \"input\" : [{\n    \"class\" : \"Entity\",\n    \"group\" : \"entity\",\n    \"vertex\" : 1,\n    \"properties\" : {\n        \"count\" : 3\n    }\n    }, {\n    \"class\" : \"Entity\",\n    \"group\" : \"entity\",\n    \"vertex\" : 4,\n    \"properties\" : {\n        \"count\" : 1\n    }\n    }, {\n    \"class\" : \"Entity\",\n    \"group\" : \"entity\",\n    \"vertex\" : 5,\n    \"properties\" : {\n        \"count\" : 3\n    }\n    }, {\n    \"class\" : \"Entity\",\n    \"group\" : \"entity\",\n    \"vertex\" : 6,\n    \"properties\" : {\n        \"count\" : 30\n    }\n    }\n    ],\n    \"operation\" : {\n    \"class\" : \"GetAllElements\"\n    },\n    \"matchMethod\" : {\n    \"class\" : \"KeyFunctionMatch\",\n    \"firstKeyFunction\": {\n    \"class\" : \"FunctionChain\",\n    \"functions\" : [ {\n        \"class\" : \"ExtractProperty\",\n        \"name\": \"count\"\n    }, {\n    \"class\" : \"Increment\",\n    \"increment\" : 1\n    }\n    ]\n    },\n    \"secondKeyFunction\": {\n        \"class\": \"ExtractProperty\",\n        \"name\": \"count\"  \n        }\n    },\n    \"matchKey\": \"RIGHT\",\n    \"joinType\" : \"OUTER\"\n} ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Additional Operations in Gaffer (JSON)\nDESCRIPTION: This JSON configuration enables ImportFromLocalFile and ExportToLocalFile operations in Gaffer. It specifies the operation classes and their corresponding handlers, allowing for local file import and export functionality.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/development-guide/example-deployment/project-setup.md#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"operations\": [\n        {\n            \"operation\": \"uk.gov.gchq.gaffer.operation.impl.export.localfile.ImportFromLocalFile\",\n            \"handler\": {\n                \"class\": \"uk.gov.gchq.gaffer.store.operation.handler.export.localfile.ImportFromLocalFileHandler\"\n            }\n        },\n        {\n            \"operation\": \"uk.gov.gchq.gaffer.operation.impl.export.localfile.ExportToLocalFile\",\n            \"handler\": {\n                \"class\": \"uk.gov.gchq.gaffer.store.operation.handler.export.localfile.ExportToLocalFileHandler\"\n            }\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Entity Definition with HyperLogLogPlus Cardinality Estimation (JSON)\nDESCRIPTION: JSON representation of Gaffer entities with cardinality estimation using HyperLogLogPlus. The structure defines vertices with properties including count and sketch-based cardinality estimation for edge groups.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/get.md#2025-04-23_snippet_64\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\": \"uk.gov.gchq.gaffer.data.element.Entity\",\n  \"group\": \"cardinality\",\n  \"vertex\": 1,\n  \"properties\": {\n    \"hllp\": {\n      \"com.clearspring.analytics.stream.cardinality.HyperLogLogPlus\": {\n        \"hyperLogLogPlus\": {\n          \"hyperLogLogPlusSketchBytes\": \"/////gUFAQH7Cw==\",\n          \"cardinality\": 1\n        }\n      }\n    },\n    \"count\": 1,\n    \"edgeGroup\": {\n      \"java.util.TreeSet\": [\"edge1\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Representing Graph Elements in Gaffer JSON Format\nDESCRIPTION: JSON structure representing various graph elements in Gaffer framework. The snippet shows a collection of entity-entity and entity-edge comparisons with properties such as vertex values, counts, sources and destinations for edges, and directed flags.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/join.md#2025-04-23_snippet_24\n\nLANGUAGE: json\nCODE:\n```\n\"count\": 2\n                        }\n                    }\n                }\n            },\n            {\n                \"values\": {\n                    \"LEFT\": {\n                        \"class\": \"uk.gov.gchq.gaffer.data.element.Entity\",\n                        \"group\": \"entity\",\n                        \"vertex\": 5,\n                        \"properties\": {\n                            \"count\": 3\n                        }\n                    },\n                    \"RIGHT\": {\n                        \"class\": \"uk.gov.gchq.gaffer.data.element.Edge\",\n                        \"group\": \"edge\",\n                        \"source\": 2,\n                        \"destination\": 3,\n                        \"directed\": true,\n                        \"properties\": {\n                        \"count\": 2\n                        }\n                    }\n                }\n            },\n            {\n                \"values\": {\n                    \"LEFT\": {\n                        \"class\": \"uk.gov.gchq.gaffer.data.element.Entity\",\n                        \"group\": \"entity\",\n                        \"vertex\": 1,\n                        \"properties\": {\n                            \"count\": 3\n                        }\n                    },\n                    \"RIGHT\": {\n                        \"class\": \"uk.gov.gchq.gaffer.data.element.Entity\",\n                        \"group\": \"entity\",\n                        \"vertex\": 3,\n                        \"properties\": {\n                            \"count\": 2\n                        }\n                    },\n                }\n            },\n            {\n                \"values\": {\n                    \"LEFT\": {\n                        \"class\": \"uk.gov.gchq.gaffer.data.element.Entity\",\n                        \"group\": \"entity\",\n                        \"vertex\": 5,\n                        \"properties\": {\n                            \"count\": 3\n                        }\n                    },\n                    \"RIGHT\": {\n                        \"class\": \"uk.gov.gchq.gaffer.data.element.Entity\",\n                        \"group\": \"entity\",\n                        \"vertex\": 3,\n                        \"properties\": {\n                            \"count\": 2\n                        }\n                    },\n                }\n            }\n        ]\n```\n\n----------------------------------------\n\nTITLE: Configuring ExtractId for Edge in JSON\nDESCRIPTION: JSON configuration for ExtractId to extract the SOURCE identifier. This configuration specifies the class and the id to extract.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/gaffer-functions.md#2025-04-23_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"ExtractId\",\n  \"id\" : \"SOURCE\"\n}\n```\n\n----------------------------------------\n\nTITLE: Gaffer Elements Schema Definition\nDESCRIPTION: JSON schema defining the structure of edges and entities in the graph, including Commit edges with integer properties and Person/Repository entities.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/administration-guide/aggregation/ingest-example.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"edges\": {\n        \"Commit\": {\n            \"source\": \"id.person.string\",\n            \"destination\": \"id.repo.string\",\n            \"directed\": \"true\",\n            \"properties\": {\n                \"added\": \"property.integer\",\n                \"removed\": \"property.integer\"\n            }\n        }\n    },\n    \"entities\": {\n        \"Person\": {\n            \"description\": \"Entity representing a person vertex\",\n            \"vertex\": \"id.person.string\"\n        },\n        \"Repository\": {\n            \"description\": \"Entity representing a repository vertex\",\n            \"vertex\": \"id.repo.string\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing UnwrapEntityId in Java\nDESCRIPTION: Creates a new instance of the UnwrapEntityId function in Java. This function unwraps the vertex value from EntityId objects.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/gaffer-functions.md#2025-04-23_snippet_62\n\nLANGUAGE: java\nCODE:\n```\nfinal UnwrapEntityId function = new UnwrapEntityId();\n```\n\n----------------------------------------\n\nTITLE: Configuring InRange Function for String Values in JSON\nDESCRIPTION: JSON configuration for an InRange function checking String values between 'B' and 'D' (inclusive). This shows how to serialize range checks for String values.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/predicates-guide/koryphe-predicates.md#2025-04-23_snippet_58\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"InRange\",\n  \"start\" : \"B\",\n  \"end\" : \"D\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating StringJoin Function in Python\nDESCRIPTION: Python implementation of a StringJoin function without a delimiter. This function will concatenate all strings in an iterable without any separator between them.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/koryphe-functions.md#2025-04-23_snippet_142\n\nLANGUAGE: python\nCODE:\n```\ng.StringJoin()\n```\n\n----------------------------------------\n\nTITLE: Extracting Elements from Iterables with NthItem in Python\nDESCRIPTION: Python implementation of a function that extracts the item at a specific index from an Iterable. Takes a selection parameter to determine which index to extract.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/koryphe-functions.md#2025-04-23_snippet_115\n\nLANGUAGE: python\nCODE:\n```\ng.NthItem( \n  selection=2 \n)\n```\n\n----------------------------------------\n\nTITLE: Federated Store Merge Functions Property Rename\nDESCRIPTION: JSON property rename for Federated Store Merge Functions configuration. Changed from 'configuredMergeFunctions' to 'storeConfiguredMergeFunctions'.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/change-notes/changelist/v2.1.0-changes.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"configuredMergeFunctions\" -> \"storeConfiguredMergeFunctions\"\n```\n\n----------------------------------------\n\nTITLE: JSON Representation of GetSetExport Results in Gaffer\nDESCRIPTION: This JSON snippet shows the structure of the data returned by GetSetExport operation in Gaffer. It includes two sets of data: 'edges' and 'entities', each containing a list of Edge and Entity objects with their properties.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/export.md#2025-04-23_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n\"uk.gov.gchq.gaffer.operation.impl.export.set.GetSetExport: edges\" : [ {\n    \"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n    \"group\" : \"edge\",\n    \"source\" : 1,\n    \"destination\" : 4,\n    \"directed\" : true,\n    \"matchedVertex\" : \"SOURCE\",\n    \"properties\" : {\n        \"count\" : 1\n    }\n}, {\n    \"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n    \"group\" : \"entity\",\n    \"vertex\" : 5,\n    \"properties\" : {\n        \"count\" : 3\n    }\n}, {\n    \"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n    \"group\" : \"edge\",\n    \"source\" : 3,\n    \"destination\" : 4,\n    \"directed\" : true,\n    \"matchedVertex\" : \"SOURCE\",\n    \"properties\" : {\n        \"count\" : 4\n    }\n}, {\n    \"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n    \"group\" : \"entity\",\n    \"vertex\" : 2,\n    \"properties\" : {\n        \"count\" : 1\n    }\n}, {\n    \"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n    \"group\" : \"entity\",\n    \"vertex\" : 1,\n    \"properties\" : {\n        \"count\" : 3\n    }\n}, {\n    \"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n    \"group\" : \"entity\",\n    \"vertex\" : 4,\n    \"properties\" : {\n        \"count\" : 1\n    }\n}, {\n    \"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n    \"group\" : \"edge\",\n    \"source\" : 2,\n    \"destination\" : 3,\n    \"directed\" : true,\n    \"matchedVertex\" : \"SOURCE\",\n    \"properties\" : {\n        \"count\" : 2\n    }\n}, {\n    \"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n    \"group\" : \"entity\",\n    \"vertex\" : 3,\n    \"properties\" : {\n        \"count\" : 2\n    }\n}, {\n    \"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n    \"group\" : \"edge\",\n    \"source\" : 2,\n    \"destination\" : 4,\n    \"directed\" : true,\n    \"matchedVertex\" : \"SOURCE\",\n    \"properties\" : {\n        \"count\" : 1\n    }\n}, {\n    \"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n    \"group\" : \"edge\",\n    \"source\" : 1,\n    \"destination\" : 2,\n    \"directed\" : true,\n    \"matchedVertex\" : \"SOURCE\",\n    \"properties\" : {\n        \"count\" : 3\n    }\n}, {\n    \"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n    \"group\" : \"edge\",\n    \"source\" : 2,\n    \"destination\" : 5,\n    \"directed\" : true,\n    \"matchedVertex\" : \"SOURCE\",\n    \"properties\" : {\n        \"count\" : 1\n    }\n} ],\n\"uk.gov.gchq.gaffer.operation.impl.export.set.GetSetExport: entities\" : [ {\n    \"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n    \"group\" : \"edge\",\n    \"source\" : 1,\n    \"destination\" : 4,\n    \"directed\" : true,\n    \"matchedVertex\" : \"SOURCE\",\n    \"properties\" : {\n        \"count\" : 1\n    }\n}, {\n    \"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n    \"group\" : \"entity\",\n    \"vertex\" : 5,\n    \"properties\" : {\n        \"count\" : 3\n    }\n}, {\n    \"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n    \"group\" : \"edge\",\n    \"source\" : 3,\n    \"destination\" : 4,\n    \"directed\" : true,\n    \"matchedVertex\" : \"SOURCE\",\n    \"properties\" : {\n        \"count\" : 4\n    }\n}, {\n    \"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n    \"group\" : \"entity\",\n    \"vertex\" : 2,\n    \"properties\" : {\n        \"count\" : 1\n    }\n}, {\n    \"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n    \"group\" : \"entity\",\n    \"vertex\" : 1,\n    \"properties\" : {\n        \"count\" : 3\n    }\n}, {\n    \"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n    \"group\" : \"entity\",\n    \"vertex\" : 4,\n    \"properties\" : {\n        \"count\" : 1\n    }\n}, {\n    \"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n    \"group\" : \"edge\",\n    \"source\" : 2,\n    \"destination\" : 3,\n    \"directed\" : true,\n    \"matchedVertex\" : \"SOURCE\",\n    \"properties\" : {\n        \"count\" : 2\n    }\n}, {\n    \"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n    \"group\" : \"entity\",\n    \"vertex\" : 3,\n    \"properties\" : {\n        \"count\" : 2\n    }\n}, {\n    \"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n    \"group\" : \"edge\",\n    \"source\" : 2,\n    \"destination\" : 4,\n    \"directed\" : true,\n    \"matchedVertex\" : \"SOURCE\",\n    \"properties\" : {\n        \"count\" : 1\n    }\n}, {\n    \"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n    \"group\" : \"edge\",\n    \"source\" : 1,\n    \"destination\" : 2,\n    \"directed\" : true,\n    \"matchedVertex\" : \"SOURCE\",\n    \"properties\" : {\n        \"count\" : 3\n    }\n}, {\n    \"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n    \"group\" : \"edge\",\n    \"source\" : 2,\n    \"destination\" : 5,\n    \"directed\" : true,\n    \"matchedVertex\" : \"SOURCE\",\n    \"properties\" : {\n        \"count\" : 1\n    }\n} ]\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Variable from Gaffer Context\nDESCRIPTION: Example of using the GetVariable operation to retrieve a variable from the Gaffer operation context map. This operation takes the variable name as input and returns its value.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/core.md#2025-04-23_snippet_94\n\nLANGUAGE: java\nCODE:\n```\nfinal GetVariable op = new GetVariable.Builder()\n        .variableName(\"varName\")\n        .build();\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"class\" : \"GetVariable\",\n    \"variableName\": \"varName\"\n}\n```\n\nLANGUAGE: java\nCODE:\n```\n5\n```\n\nLANGUAGE: json\nCODE:\n```\n5\n```\n\n----------------------------------------\n\nTITLE: Configuring CreateObject for String in JSON\nDESCRIPTION: Demonstrates the JSON configuration for CreateObject to create String objects. This can be used in Gaffer's graph configuration files.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/koryphe-functions.md#2025-04-23_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"CreateObject\",\n  \"objectClass\" : \"String\"\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a Basic Named Operation in JSON\nDESCRIPTION: Creates a Named Operation called '2-hop' using JSON, which performs two GetAdjacentIds operations in sequence to traverse two hops in a graph.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/administration-guide/named-operations.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n\"class\" : \"AddNamedOperation\",\n\"operationName\" : \"2-hop\",\n\"description\" : \"2 hop query\",\n\"operationChain\" : {\n    \"operations\" : [ {\n        \"class\" : \"uk.gov.gchq.gaffer.operation.impl.get.GetAdjacentIds\",\n        \"includeIncomingOutGoing\" : \"OUTGOING\"\n    }, {\n        \"class\" : \"uk.gov.gchq.gaffer.operation.impl.get.GetAdjacentIds\",\n        \"includeIncomingOutGoing\" : \"OUTGOING\"\n    } ]\n},\n\"overwriteFlag\" : true,\n\"readAccessRoles\" : [ \"read-user\" ],\n\"writeAccessRoles\" : [ \"write-user\" ]\n}\n```\n\n----------------------------------------\n\nTITLE: Java Results from Query-time Aggregation in Gaffer\nDESCRIPTION: Java output from executing the query-time aggregation operation, showing the aggregated Edge with summed 'added' and 'removed' properties (13 and 8 respectively), along with the Person entity.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/user-guide/query/gaffer-syntax/filtering.md#2025-04-23_snippet_20\n\nLANGUAGE: java\nCODE:\n```\nEdge[source=\"John\",destination=1,directed=true,matchedVertex=SOURCE,group=Commit,properties=Properties[added=<java.lang.Integer>13,removed=<java.lang.Integer>8]]\nEntity[vertex=\"John\",group=Person,properties=Properties[]]\n```\n\n----------------------------------------\n\nTITLE: Parsing Date Strings with TimeZone (GMT+4) in JSON\nDESCRIPTION: JSON configuration for a date parser that converts date strings to Date objects. This configuration specifies the format pattern, timezone (GMT+4), and microseconds handling.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/koryphe-functions.md#2025-04-23_snippet_117\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"ParseDate\",\n  \"format\" : \"yyyy-MM-dd HH:mm:ss.SSS\",\n  \"timeZone\" : \"Etc/GMT+4\",\n  \"microseconds\" : false\n}\n```\n\n----------------------------------------\n\nTITLE: GetGraphCreatedTime Result in JSON Format\nDESCRIPTION: The JSON result of the GetGraphCreatedTime operation, showing the graph creation timestamp. The result is returned as a JSON object with the graphId field containing the timestamp in ISO format.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/core.md#2025-04-23_snippet_86\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"graphId\": \"2024-08-22T12:37:53.498\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring InDateRange with day precision in JSON\nDESCRIPTION: JSON configuration for an InDateRange predicate that checks if a Date falls between January 1, 2017 and February 1, 2017 (inclusive).\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/predicates-guide/koryphe-predicates.md#2025-04-23_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"InDateRange\",\n  \"start\" : \"2017/01/01\",\n  \"end\" : \"2017/02/01\"\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing IsShorterThan Predicate in Java\nDESCRIPTION: Creates an IsShorterThan predicate that checks if the length of an input is less than 4. This predicate works on strings, arrays, lists, and maps.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/predicates-guide/koryphe-predicates.md#2025-04-23_snippet_97\n\nLANGUAGE: java\nCODE:\n```\nfinal IsShorterThan function = new IsShorterThan(4);\n```\n\n----------------------------------------\n\nTITLE: Using FirstValid without Predicate in Python\nDESCRIPTION: Python implementation of the FirstValid function without a predicate, which will always return null.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/koryphe-functions.md#2025-04-23_snippet_54\n\nLANGUAGE: python\nCODE:\n```\ng.FirstValid()\n```\n\n----------------------------------------\n\nTITLE: Representing Graph Elements with LEFT-RIGHT Structure in JSON for Gaffer\nDESCRIPTION: This JSON structure represents graph data in Gaffer with a LEFT-RIGHT format. Each object contains an entity on the LEFT side and its associated edges or entities on the RIGHT side. The elements include properties like 'count' and connection information between vertices.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/join.md#2025-04-23_snippet_27\n\nLANGUAGE: json\nCODE:\n```\n[\n    {\n        \"values\": {\n            \"LEFT\": {\n                \"class\": \"uk.gov.gchq.gaffer.data.element.Entity\",\n                \"group\": \"entity\",\n                \"vertex\": 1,\n                \"properties\": {\n                    \"count\": 3\n                }\n            },\n            \"RIGHT\": [\n                {\n                \"class\": \"uk.gov.gchq.gaffer.data.element.Edge\",\n                \"group\": \"edge\",\n                \"source\": \"4\",\n                \"destination\": 4,\n                \"directed\": true,\n                \"properties\": {\n                    \"count\": 4\n                }\n                }\n            ]\n        }\n    },\n    {\n        \"values\": {\n            \"LEFT\": {\n                \"class\": \"uk.gov.gchq.gaffer.data.element.Entity\",\n                \"group\": \"entity\",\n                \"vertex\": 4,\n                \"properties\": {\n                    \"count\": 1\n                }\n            },\n            \"RIGHT\": [\n                {\n                \"class\": \"uk.gov.gchq.gaffer.data.element.Edge\",\n                \"group\": \"edge\",\n                \"source\": 2,\n                \"destination\": 3,\n                \"directed\": true,\n                \"properties\": {\n                    \"count\": 2\n                }\n                },\n                {\n                \"class\": \"uk.gov.gchq.gaffer.data.element.Entity\",\n                \"group\": \"entity\",\n                \"vertex\": 3,\n                \"properties\": {\n                    \"count\": 2\n                }\n            }\n            ]\n        }\n    },\n    {\n        \"values\": {\n            \"LEFT\": {\n                \"class\": \"uk.gov.gchq.gaffer.data.element.Entity\",\n                \"group\": \"entity\",\n                \"vertex\": 5,\n                \"properties\": {\n                    \"count\": 3\n                }\n            },\n            \"RIGHT\": [\n                {\n                \"class\": \"uk.gov.gchq.gaffer.data.element.Edge\",\n                \"group\": \"edge\",\n                \"source\": 3,\n                \"destination\": 4,\n                \"directed\": true,\n                \"properties\": {\n                    \"count\": 4\n                }\n                }\n            ]\n        }\n    },\n    {\n        \"values\": {\n            \"LEFT\": {\n                \"class\": \"uk.gov.gchq.gaffer.data.element.Entity\",\n                \"group\": \"entity\",\n                \"vertex\": 6,\n                \"properties\": {\n                    \"count\": 30\n                }\n            },\n            \"RIGHT\": []\n        }\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Creating Utility JAR with Maven Shade Plugin for Accumulo Store\nDESCRIPTION: XML configuration for Maven Shade Plugin to create a utility JAR with dependencies for Accumulo Store migrations. This JAR includes Accumulo Store classes and custom classes.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/administration-guide/gaffer-stores/accumulo-store.md#2025-04-23_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<build>\n    <plugins>\n        <plugin>\n            <artifactId>maven-shade-plugin</artifactId>\n            <version>${shade.plugin.version}</version>\n            <executions>\n                <execution>\n                    <id>utility</id>\n                    <phase>package</phase>\n                    <goals>\n                        <goal>shade</goal>\n                    </goals>\n                    <configuration>\n                        <shadedArtifactAttached>true\n                        </shadedArtifactAttached>\n                        <shadedClassifierName>utility\n                        </shadedClassifierName>\n                    </configuration>\n                </execution>\n            </executions>\n        </plugin>\n    </plugins>\n</build>\n```\n\n----------------------------------------\n\nTITLE: Binary Operator Support Table in Markdown\nDESCRIPTION: Table showing specialized binary operators/aggregators for different sketch property types.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/properties-guide/advanced.md#2025-04-23_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\nProperty | Binary Operator\n-------- | ---------------\n`HyperLogLogPlus` | [`uk.gov.gchq.gaffer.sketches.clearspring.cardinality.binaryoperator.HyperLogLogPlusAggregator`]\n`HllSketch` | [`uk.gov.gchq.gaffer.sketches.datasketches.cardinality.binaryoperator.HllSketchAggregator`]\n`LongsSketch` | [`uk.gov.gchq.gaffer.sketches.datasketches.frequencies.binaryoperator.LongsSketchAggregator`]\n`DoublesSketch` | [`uk.gov.gchq.gaffer.sketches.datasketches.quantiles.binaryoperator.DoublesSketchAggregator`]\n`ReservoirItemsSketch` | [`uk.gov.gchq.gaffer.sketches.datasketches.sampling.binaryoperator.ReservoirItemsSketchAggregator`]\n`ThetaSketch` | [`uk.gov.gchq.gaffer.sketches.datasketches.theta.binaryoperator.SketchAggregator`]\n```\n\n----------------------------------------\n\nTITLE: Defining an Entity Object in Gaffer JSON Format\nDESCRIPTION: This snippet shows the structure of a Gaffer Entity object in JSON format. It defines an entity of group 'entity' with vertex value 5 and a count property of 3. This is likely part of a larger configuration for data modeling in Gaffer.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/join.md#2025-04-23_snippet_43\n\nLANGUAGE: json\nCODE:\n```\n                    \"class\": \"uk.gov.gchq.gaffer.data.element.Entity\",\n                    \"group\": \"entity\",\n                    \"vertex\": 5,\n                    \"properties\": {\n                    \"count\": 3\n                    }\n                }\n                }\n            }\n        ]\n        \n```\n\n----------------------------------------\n\nTITLE: Defining IsMoreThan with String in JSON\nDESCRIPTION: JSON representation of the IsMoreThan predicate with string value \"B\" and orEqualTo flag set to false. Used for lexicographical comparison in Gaffer operations.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/predicates-guide/koryphe-predicates.md#2025-04-23_snippet_89\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"IsMoreThan\",\n  \"orEqualTo\" : false,\n  \"value\" : \"B\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring ScoreOperationChain in OperationDeclarations.json\nDESCRIPTION: This JSON snippet demonstrates how to register and configure the ScoreOperationChain operation in Gaffer. It includes settings for operation scores, authorization scores for different user roles, and score resolvers for specific operations like NamedOperation.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/administration-guide/operation-score.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"operations\": [\n        {\n            \"operation\": \"uk.gov.gchq.gaffer.operation.impl.ScoreOperationChain\",\n            \"handler\": {\n                \"class\": \"uk.gov.gchq.gaffer.store.operation.handler.ScoreOperationChainHandler\",\n                \"opScores\": {\n                    \"uk.gov.gchq.gaffer.operation.Operation\": 2,\n                    \"uk.gov.gchq.gaffer.operation.impl.generate.GenerateObjects\": 0\n                },\n                \"authScores\": {\n                    \"User\": 4,\n                    \"EnhancedUser\": 10\n                },\n                \"scoreResolvers\": {\n                    \"uk.gov.gchq.gaffer.named.operation.NamedOperation\": {\n                        \"class\": \"uk.gov.gchq.gaffer.store.operation.resolver.named.NamedOperationScoreResolver\"\n                    }\n                }\n            }\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Results of Reduce Operation in JSON\nDESCRIPTION: JSON representation of the results from the Reduce operation, showing the aggregated values [6, 13] produced by the Sum function.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/core.md#2025-04-23_snippet_42\n\nLANGUAGE: json\nCODE:\n```\n[ 6, 13 ]\n```\n\n----------------------------------------\n\nTITLE: Adding Elements to Gaffer Graph\nDESCRIPTION: JSON operation to add elements to the graph including Commit edges and Person/Repository entities.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/administration-guide/aggregation/ingest-example.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"class\": \"AddElements\",\n    \"input\": [\n        {\n            \"class\": \"Edge\",\n            \"group\": \"Commit\",\n            \"source\": \"Dave\",\n            \"destination\": \"r1\",\n            \"directed\": true,\n            \"properties\": {\n                \"added\": 6,\n                \"removed\": 8\n            }\n        },\n        {\n            \"class\": \"Edge\",\n            \"group\": \"Commit\",\n            \"source\": \"Dave\",\n            \"destination\": \"r1\",\n            \"directed\": true,\n            \"properties\": {\n                \"added\": 35,\n                \"removed\": 10\n            }\n        },\n        {\n            \"class\": \"Entity\",\n            \"group\": \"Person\",\n            \"vertex\": \"Dave\"\n        },\n        {\n            \"class\": \"Entity\",\n            \"group\": \"Repository\",\n            \"vertex\": \"r1\"\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Min Operation Result Example in Gaffer\nDESCRIPTION: The result of the Min operation based on the 'count' property, returning an Edge element with the minimum count value of 1.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/core.md#2025-04-23_snippet_24\n\nLANGUAGE: java\nCODE:\n```\nEdge[source=1,destination=4,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=<java.lang.Integer>1]]\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n  \"group\" : \"edge\",\n  \"source\" : 1,\n  \"destination\" : 4,\n  \"directed\" : true,\n  \"matchedVertex\" : \"SOURCE\",\n  \"properties\" : {\n    \"count\" : 1\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing InDateRange with timestamp values in Java\nDESCRIPTION: Creates an InDateRange predicate using Unix timestamps (milliseconds since epoch) for the range boundaries instead of formatted date strings.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/predicates-guide/koryphe-predicates.md#2025-04-23_snippet_18\n\nLANGUAGE: java\nCODE:\n```\nfinal InDateRange function = new InDateRange.Builder()\n        .start(\"1483315200\")\n        .end(\"1485907200\")\n        .build();\n```\n\n----------------------------------------\n\nTITLE: Creating a Docker Network for Gaffer\nDESCRIPTION: Command to create a Docker network named 'gaffer-example' to enable communication between all Gaffer-related containers.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/administration-guide/gaffer-deployment/gaffer-docker/how-to-run.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker network create gaffer-example\n```\n\n----------------------------------------\n\nTITLE: Configuring CsvGenerator in JSON\nDESCRIPTION: JSON configuration for CsvGenerator with field mappings, constants, and quoting settings. This configuration corresponds to the Java builder example.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/gaffer-functions.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"CsvGenerator\",\n  \"fields\" : {\n    \"GROUP\" : \"Group Label\",\n    \"VERTEX\" : \"Vertex Label\",\n    \"SOURCE\" : \"Source Label\",\n    \"count\" : \"Count Label\"\n  },\n  \"constants\" : {\n    \"A Constant\" : \"Some constant value\"\n  },\n  \"quoted\" : false,\n  \"commaReplacement\" : \" \"\n}\n```\n\n----------------------------------------\n\nTITLE: Replacing IntegerSerialiser's String Deserialization\nDESCRIPTION: When migrating from the deprecated integer serialisers, you'll need to replace any calls to .deserialiseString(String) with manual integer parsing.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/change-notes/migrating-from-v1-to-v2/deprecations.md#2025-04-23_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nInteger.parseInt(String)\n```\n\n----------------------------------------\n\nTITLE: Configuring InDateRangeDual with contained start range in Java\nDESCRIPTION: Creates an InDateRangeDual function that requires the start date to be fully contained within the configured range, while the end date can extend beyond it. Only accepts date ranges where the start date is on or after 2017/03/01.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/predicates-guide/koryphe-predicates.md#2025-04-23_snippet_33\n\nLANGUAGE: java\nCODE:\n```\nfinal InDateRangeDual function = new InDateRangeDual.Builder()\n        .start(\"2017/03/01\")\n        .end(\"2017/08/01\")\n        .startFullyContained(true)\n        .endFullyContained(false) // Doesn't need to be specified as it is the default\n        .build();\n```\n\n----------------------------------------\n\nTITLE: JSON Configuration for Right Key Outer Join with ElementMatch in Gaffer\nDESCRIPTION: JSON representation of an OperationChain that performs a right key outer join with ElementMatch. The input consists of several Entity objects, and the operation uses GetAllElements to retrieve elements to join with.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/join.md#2025-04-23_snippet_58\n\nLANGUAGE: json\nCODE:\n```\n{\n\"class\" : \"OperationChain\",\n\"operations\" : [ {\n    \"class\" : \"Join\",\n    \"input\" : [ {\n    \"class\" : \"Entity\",\n    \"group\" : \"entity\",\n    \"vertex\" : 1,\n    \"properties\" : {\n        \"count\" : 3\n    }\n    }, {\n    \"class\" : \"Entity\",\n    \"group\" : \"entity\",\n    \"vertex\" : 4,\n    \"properties\" : {\n        \"count\" : 1\n    }\n    }, {\n    \"class\" : \"Entity\",\n    \"group\" : \"entity\",\n    \"vertex\" : 5,\n    \"properties\" : {\n        \"count\" : 3\n    }\n    }, {\n    \"class\" : \"Entity\",\n    \"group\" : \"entity\",\n    \"vertex\" : 6,\n    \"properties\" : {\n        \"count\" : 30\n    }\n    } ],\n    \"operation\" : {\n    \"class\" : \"GetAllElements\"\n    },\n    \"matchMethod\" : {\n    \"class\" : \"ElementMatch\"\n    },\n    \"matchKey\" : \"RIGHT\",\n    \"joinType\" : \"OUTER\"\n} ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring IsXLessThanY Predicate in JSON\nDESCRIPTION: JSON configuration for an IsXLessThanY predicate that checks if the first comparable is less than the second comparable. This predicate requires no additional parameters.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/predicates-guide/koryphe-predicates.md#2025-04-23_snippet_101\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"IsXLessThanY\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing InDateRangeDual with default overlap detection in Python\nDESCRIPTION: Python implementation of InDateRangeDual function with the default configuration that checks for any overlap between date ranges. Accepts date ranges that have any overlap with 2017/03/01 to 2017/08/01.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/predicates-guide/koryphe-predicates.md#2025-04-23_snippet_32\n\nLANGUAGE: python\nCODE:\n```\ng.InDateRangeDual(\n  start=\"2017/03/01\",\n  end=\"2017/08/01\",\n  start_fully_contained=False,\n  end_fully_contained=False\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring exclusive date range in JSON\nDESCRIPTION: JSON configuration for an InDateRange predicate with exclusive boundaries (non-inclusive). The range is from January 1, 2017 to February 1, 2017.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/predicates-guide/koryphe-predicates.md#2025-04-23_snippet_22\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"InDateRange\",\n  \"start\" : \"2017/01/01\",\n  \"end\" : \"2017/02/01\",\n  \"startInclusive\" : false,\n  \"endInclusive\" : false\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing InDateRangeDual with fully contained exclusive range in Python\nDESCRIPTION: Python implementation of InDateRangeDual requiring input ranges to be fully contained within an exclusive date range. Accepts only date ranges entirely between just after 2017/03/01 00:00:00 and just before 2017/08/01 00:00:00.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/predicates-guide/koryphe-predicates.md#2025-04-23_snippet_44\n\nLANGUAGE: python\nCODE:\n```\ng.InDateRangeDual(\n  start=\"2017/03/01\",\n  end=\"2017/08/01\",\n  start_fully_contained=True,\n  end_fully_contained=True,\n  start_inclusive=False,\n  end_inclusive=False\n)\n```\n\n----------------------------------------\n\nTITLE: Query Results Showing Unexpected MatchedVertex in Gaffer\nDESCRIPTION: This JSON result set demonstrates the unexpected inclusion of MatchedVertex on edges. Note that the edge 1->2 has MatchedVertex=SOURCE even though it wasn't matched by an EntitySeed, illustrating the peculiarity of the Accumulo store.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/administration-guide/gaffer-stores/accumulo-store.md#2025-04-23_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"class\": \"uk.gov.gchq.gaffer.data.element.Edge\",\n    \"group\": \"example\",\n    \"source\": \"3\",\n    \"destination\": \"4\",\n    \"directed\": true,\n    \"matchedVertex\": \"DESTINATION\",\n    \"properties\": {}\n  },\n  {\n    \"class\": \"uk.gov.gchq.gaffer.data.element.Edge\",\n    \"group\": \"example\",\n    \"source\": \"1\",\n    \"destination\": \"2\",\n    \"directed\": true,\n    \"matchedVertex\": \"SOURCE\",\n    \"properties\": {}\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring InDateRange with second precision in JSON\nDESCRIPTION: JSON configuration for an InDateRange predicate that checks if a Date falls between 01:30:10 and 01:30:50 on January 1, 2017 (inclusive).\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/predicates-guide/koryphe-predicates.md#2025-04-23_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"InDateRange\",\n  \"start\" : \"2017/01/01 01:30:10\",\n  \"end\" : \"2017/01/01 01:30:50\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring ToUpperCase Function in JSON\nDESCRIPTION: JSON configuration for the ToUpperCase function. This can be used in Gaffer graph configurations or other JSON-based setups.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/koryphe-functions.md#2025-04-23_snippet_187\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"ToUpperCase\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing FunctionChain with Tuple Adapted Functions in Python\nDESCRIPTION: Python implementation of a FunctionChain that applies ToUpperCase and ToSet functions consecutively using tuple adaptation. This chain converts a string to uppercase and then to a set.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/koryphe-functions.md#2025-04-23_snippet_57\n\nLANGUAGE: python\nCODE:\n```\ng.FunctionChain( \n  functions=[ \n    g.TupleAdaptedFunction( \n      selection=[ \n        0 \n      ], \n      function=g.ToUpperCase(), \n      projection=[ \n        1 \n      ] \n    ), \n    g.TupleAdaptedFunction( \n      selection=[ \n        1 \n      ], \n      function=g.ToSet(), \n      projection=[ \n        2 \n      ] \n    ) \n  ] \n)\n```\n\n----------------------------------------\n\nTITLE: Adding Flink Library Dependency in Maven XML\nDESCRIPTION: This XML snippet shows how to include the flink-library as a dependency in a Maven project. It specifies the groupId, artifactId, and version for the Gaffer flink-library module.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/development-guide/project-structure/components/libraries/flink.md#2025-04-23_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n  <groupId>uk.gov.gchq.gaffer</groupId>\n  <artifactId>flink-library</artifactId>\n  <version>${gaffer.version}</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Setting Accumulo Scan Authorizations\nDESCRIPTION: Shell command to set required scan authorizations for the Accumulo user to run integration tests. Sets visibility permissions needed by various test classes.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/development-guide/project-structure/components/accumulo-store.md#2025-04-23_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nroot@instance> setauths -u root -s vis1,vis2,publicVisibility,privateVisibility,public,private\n```\n\n----------------------------------------\n\nTITLE: Setting up InDateRangeDual with contained start range in JSON\nDESCRIPTION: JSON configuration for InDateRangeDual that requires the start date to be fully contained in the configured range. This ensures the input date range doesn't start before the configured start date of 2017/03/01.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/predicates-guide/koryphe-predicates.md#2025-04-23_snippet_34\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"InDateRangeDual\",\n  \"start\" : \"2017/03/01\",\n  \"end\" : \"2017/08/01\",\n  \"endFullyContained\" : false,\n  \"startFullyContained\" : true\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Elements Schema with ThetaSketch in Gaffer\nDESCRIPTION: Defines the elements schema with vertex properties including startDate, endDate and size (ThetaSketch), with groupBy configurations for aggregation.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/properties-guide/advanced.md#2025-04-23_snippet_21\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"entities\": {\n    \"size\": {\n      \"vertex\": \"vertex.string\",\n      \"properties\": {\n        \"startDate\": \"date.earliest\",\n        \"endDate\": \"date.latest\",\n        \"size\": \"thetasketch\"\n      },\n      \"groupBy\": [\n        \"startDate\",\n        \"endDate\"\n      ]\n    }\n  },\n  \"edges\": {\n    \"red\": {\n      \"source\": \"vertex.string\",\n      \"destination\": \"vertex.string\",\n      \"directed\": \"false\",\n      \"properties\": {\n        \"startDate\": \"date.earliest\",\n        \"endDate\": \"date.latest\",\n        \"count\": \"long.count\"\n      },\n      \"groupBy\": [\n        \"startDate\",\n        \"endDate\"\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Strings from Elements using GenerateObjects in JSON\nDESCRIPTION: This JSON snippet shows the structure of a GenerateObjects operation for creating strings from input elements. It specifies the input Entity and Edge objects and the ObjectGenerator class to be used.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/generate.md#2025-04-23_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n\"class\" : \"GenerateObjects\",\n\"input\" : [ {\n    \"class\" : \"Entity\",\n    \"group\" : \"entity\",\n    \"vertex\" : 6,\n    \"properties\" : {\n    \"count\" : 1\n    }\n}, {\n    \"class\" : \"Edge\",\n    \"group\" : \"edge\",\n    \"source\" : 5,\n    \"destination\" : 6,\n    \"directed\" : true,\n    \"properties\" : {\n    \"count\" : 1\n    }\n} ],\n\"elementGenerator\" : {\n    \"class\" : \"ObjectGenerator\"\n}\n}\n```\n\n----------------------------------------\n\nTITLE: Results of Limiting Elements in Gaffer\nDESCRIPTION: The output from executing the Limit operation that restricts results to 3 elements. It returns one Edge from source 1 to destination 4, one Entity with vertex 5, and another Edge from source 3 to destination 4.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/core.md#2025-04-23_snippet_20\n\nLANGUAGE: java\nCODE:\n```\nEdge[source=1,destination=4,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=<java.lang.Integer>1]]\nEntity[vertex=5,group=entity,properties=Properties[count=<java.lang.Integer>3]]\nEdge[source=3,destination=4,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=<java.lang.Integer>4]]\n```\n\nLANGUAGE: json\nCODE:\n```\n[ {\n  \"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n  \"group\" : \"edge\",\n  \"source\" : 1,\n  \"destination\" : 4,\n  \"directed\" : true,\n  \"matchedVertex\" : \"SOURCE\",\n  \"properties\" : {\n    \"count\" : 1\n  }\n}, {\n  \"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n  \"group\" : \"entity\",\n  \"vertex\" : 5,\n  \"properties\" : {\n    \"count\" : 3\n  }\n}, {\n  \"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n  \"group\" : \"edge\",\n  \"source\" : 3,\n  \"destination\" : 4,\n  \"directed\" : true,\n  \"matchedVertex\" : \"SOURCE\",\n  \"properties\" : {\n    \"count\" : 4\n  }\n} ]\n```\n\n----------------------------------------\n\nTITLE: Getting JavaRDD of All Edges in JSON\nDESCRIPTION: JSON representation of GetJavaRDDOfAllElements operation for retrieving only edges.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/spark.md#2025-04-23_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"GetJavaRDDOfAllElements\",\n  \"view\" : {\n    \"edges\" : {\n      \"edge\" : { }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Exists Check\nDESCRIPTION: Exists predicate that checks if an input value exists (is not null). Simple null check predicate.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/predicates-guide/koryphe-predicates.md#2025-04-23_snippet_6\n\nLANGUAGE: java\nCODE:\n```\nfinal Exists function = new Exists();\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"Exists\"\n}\n```\n\nLANGUAGE: python\nCODE:\n```\ng.Exists()\n```\n\n----------------------------------------\n\nTITLE: Defining Named Operation for Vehicle Traffic Analysis in JSON (Partial)\nDESCRIPTION: Partial JSON configuration for a Gaffer Named Operation that analyzes vehicle frequency at junctions. This fragment shows parameter definitions and conditional CSV output formatting.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/administration-guide/named-operations.md#2025-04-23_snippet_20\n\nLANGUAGE: json\nCODE:\n```\n                    } ],\n                    \"deduplicate\" : true,\n                    \"resultLimit\" : \"${result-limit}\"\n                }, {\n                    \"class\" : \"uk.gov.gchq.gaffer.operation.impl.If\",\n                    \"condition\" : \"${to-csv}\",\n                    \"then\" : {\n                        \"class\" : \"uk.gov.gchq.gaffer.operation.impl.output.ToCsv\",\n                        \"elementGenerator\" : {\n                            \"class\" : \"uk.gov.gchq.gaffer.data.generator.CsvGenerator\",\n                            \"fields\" : {\n                                \"VERTEX\" : \"Junction\",\n                                \"${vehicle}\" : \"${vehicle}\"\n                            },\n                            \"constants\" : { },\n                            \"quoted\" : false,\n                            \"commaReplacement\" : \" \"\n                            },\n                        \"includeHeader\" : true\n                    }\n                } ]\n            },\n            \"overwriteFlag\" : true,\n            \"parameters\" : {\n                \"to-csv\" : {\n                    \"description\" : \"Enable this parameter to convert the results to a simple CSV in the format: Junction, Count\",\n                    \"defaultValue\" : false,\n                    \"valueClass\" : \"Boolean\",\n                    \"required\" : false\n                },\n                \"result-limit\" : {\n                    \"description\" : \"The maximum number of junctions to return\",\n                    \"defaultValue\" : 2,\n                    \"valueClass\" : \"Integer\",\n                    \"required\" : false\n                },\n                \"vehicle\" : {\n                    \"description\" : \"The type of vehicle: HGVR3, BUS, HGVR4, AMV, HGVR2, HGVA3, PC, HGVA3, PC, HGCA5, HGVA6, CAR, HGV, WM2, LGV\",\n                    \"defaultValue\" : \"BUS\",\n                    \"valueClass\" : \"String\",\n                    \"required\" : false\n                }\n            }\n        }\n```\n\n----------------------------------------\n\nTITLE: Deleting All Data in Gaffer Store\nDESCRIPTION: Example of using the DeleteAllData operation to delete all retained data including the graph from a Gaffer store. This operation does not return any response.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/core.md#2025-04-23_snippet_100\n\nLANGUAGE: java\nCODE:\n```\nfinal DeleteAllData operation = new DeleteAllData()\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"DeleteAllData\"\n}\n```\n\nLANGUAGE: python\nCODE:\n```\ng.DeleteAllData()\n```\n\n----------------------------------------\n\nTITLE: Configuring ExtractWalkEntitiesFromHop in JSON\nDESCRIPTION: JSON configuration for the ExtractWalkEntitiesFromHop function. This configuration specifies the class name and the hop parameter.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/gaffer-functions.md#2025-04-23_snippet_19\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"ExtractWalkEntitiesFromHop\",\n  \"hop\" : 1\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Multiply Function\nDESCRIPTION: Function that multiplies two integer inputs together.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/koryphe-functions.md#2025-04-23_snippet_108\n\nLANGUAGE: java\nCODE:\n```\nfinal Multiply function = new Multiply();\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"Multiply\"\n}\n```\n\nLANGUAGE: python\nCODE:\n```\ng.Multiply()\n```\n\n----------------------------------------\n\nTITLE: Creating ExtractProperty in Python\nDESCRIPTION: Python code to create an ExtractProperty instance for extracting the 'prop1' property from an Element.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/gaffer-functions.md#2025-04-23_snippet_11\n\nLANGUAGE: python\nCODE:\n```\ng.ExtractProperty( \n  name=\"prop1\" \n)\n```\n\n----------------------------------------\n\nTITLE: Graph Structure Visualization using Mermaid\nDESCRIPTION: Mermaid diagram showing the graph structure with Person and Repository entities connected by Commit edges with added/removed properties.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/administration-guide/aggregation/ingest-example.md#2025-04-23_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph LR\n    A([\"Person\n\n        ID: Dave\"])\n    --\n    \"Commit\n     added: 6\n     removed: 8\"\n    -->\n    B([\"Repository\n\n        ID: r1\"])\n    A\n    --\n    \"Commit\n     added: 35\n     removed: 10\"\n    -->\n    B\n```\n\n----------------------------------------\n\nTITLE: Implementing IterableFlatten Function without Binary Operator in Java\nDESCRIPTION: Creates an IterableFlatten function with no binary operator. Without an operator, the function returns null for all inputs.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/koryphe-functions.md#2025-04-23_snippet_88\n\nLANGUAGE: java\nCODE:\n```\nfinal IterableFlatten function = new IterableFlatten(null);\n```\n\n----------------------------------------\n\nTITLE: Adding Named Operation to a Specific Sub-graph in Federated Store\nDESCRIPTION: Java example showing how to add a Named Operation specifically to a sub-graph by using the FederatedOperationHandler.OPT_GRAPH_IDS option to target 'subGraph'.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/administration-guide/gaffer-stores/simple-federated/additional-info.md#2025-04-23_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nfinal AddNamedOperation addNamedOp = new AddNamedOperation.Builder()\n    .option(FederatedOperationHandler.OPT_GRAPH_IDS, \"subGraph\")\n    .name(\"NamedOperation\")\n    .operationChain(new OperationChain.Builder()\n            .first(new GetAllElements())\n            .build())\n    .build();\n```\n\n----------------------------------------\n\nTITLE: Implementing IsLongerThan Predicate in Java\nDESCRIPTION: Creates an IsLongerThan predicate that checks if the length of an input object is greater than 5. Works with strings, arrays, collections, and other objects with a size or length property.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/predicates-guide/koryphe-predicates.md#2025-04-23_snippet_91\n\nLANGUAGE: java\nCODE:\n```\nfinal IsLongerThan predicate = new IsLongerThan(5);\n```\n\n----------------------------------------\n\nTITLE: Left Outer Join with KeyFunctionMatch and FunctionChain\nDESCRIPTION: Implements a left outer join using KeyFunctionMatch with a FunctionChain that combines ExtractProperty and Increment functions. Matches elements by comparing count property after applying transformation functions.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/join.md#2025-04-23_snippet_49\n\nLANGUAGE: java\nCODE:\n```\nfinal OperationChain<Iterable<? extends MapTuple>> opChain = new OperationChain.Builder()\n        .first(new Join.Builder<>()\n                .input(inputElements)\n                .operation(new GetAllElements())\n                .joinType(JoinType.OUTER)\n                .matchKey(MatchKey.LEFT)\n                .flatten(false)\n                .matchMethod(new KeyFunctionMatch.Builder()\n                    .firstKeyFunction(new FunctionChain(new ExtractProperty(\"count\"), new Increment(1)))\n                    .secondKeyFunction(new ExtractProperty(\"count\"))\n                    .build())\n                .build())\n        .build();\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n\"class\" : \"OperationChain\",\n\"operations\" : [ {\n    \"class\" : \"Join\",\n    \"input\" : [{\n    \"class\" : \"Entity\",\n    \"group\" : \"entity\",\n    \"vertex\" : 1,\n    \"properties\" : {\n        \"count\" : 3\n    }\n    }, {\n    \"class\" : \"Entity\",\n    \"group\" : \"entity\",\n    \"vertex\" : 4,\n    \"properties\" : {\n        \"count\" : 1\n    }\n    }, {\n    \"class\" : \"Entity\",\n    \"group\" : \"entity\",\n    \"vertex\" : 5,\n    \"properties\" : {\n        \"count\" : 3\n    }\n    }, {\n    \"class\" : \"Entity\",\n    \"group\" : \"entity\",\n    \"vertex\" : 6,\n    \"properties\" : {\n        \"count\" : 30\n    }\n    }\n    ],\n    \"operation\" : {\n    \"class\" : \"GetAllElements\"\n    },\n    \"matchMethod\" : {\n    \"class\" : \"KeyFunctionMatch\",\n    \"firstKeyFunction\": {\n    \"class\" : \"FunctionChain\",\n    \"functions\" : [ {\n        \"class\" : \"ExtractProperty\",\n        \"name\": \"count\"\n    }, {\n    \"class\" : \"Increment\",\n    \"increment\" : 1\n    }\n    ]\n    },\n    \"secondKeyFunction\": {\n        \"class\": \"ExtractProperty\",\n        \"name\": \"count\"  \n        }\n    },\n    \"matchKey\": \"LEFT\",\n    \"flatten\": false,\n    \"joinType\" : \"OUTER\"\n} ]\n}\n```\n\nLANGUAGE: python\nCODE:\n```\ng.OperationChain( \noperations=[ \n    g.Join( \n    operation=g.GetAllElements(), \n    match_method=g.KeyFunctionMatch(\n        first_key_function=g.FunctionChain([\n            g.ExtractProperty(\"count\"),\n            g.Increment(increment=1)\n            ]),\n        second_key_function=g.ExtractProperty(\"count\")\n        ),\n    input=[ \n        g.Entity( \n        group=\"entity\", \n        properties={'count': 3}, \n        vertex=1 \n        ), \n        g.Entity( \n        group=\"entity\", \n        properties={'count': 1}, \n        vertex=4 \n        ), \n        g.Entity( \n        group=\"entity\", \n        properties={'count': 3}, \n        vertex=5 \n        ), \n        g.Entity( \n        group=\"entity\", \n        properties={'count': 30}, \n        vertex=6 \n        ) \n    ], \n    flatten=False, \n    match_key=\"LEFT\", \n    join_type=\"OUTER\" \n    ) \n] \n)\n```\n\n----------------------------------------\n\nTITLE: Implementing a HyperLogLogPlus Aggregator\nDESCRIPTION: Java implementation of a specialized aggregator for HyperLogLogPlus objects, demonstrating a store-specific extension that merges cardinality estimators.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/development-guide/extending-gaffer.md#2025-04-23_snippet_4\n\nLANGUAGE: java\nCODE:\n```\n@Since(\"1.0.0\")\n@Summary(\"Aggregates HyperLogLogPlus objects\")\n@Deprecated\npublic class HyperLogLogPlusAggregator extends KorypheBinaryOperator<HyperLogLogPlus> {\n    @Override\n    protected HyperLogLogPlus _apply(final HyperLogLogPlus a, final HyperLogLogPlus b) {\n        try {\n            a.addAll(b);\n        } catch (final CardinalityMergeException exception) {\n            throw new RuntimeException(\"An Exception occurred when trying to aggregate the HyperLogLogPlus objects\", exception);\n        }\n        return a;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Reversing String Characters in JSON\nDESCRIPTION: JSON configuration for a function that reverses the characters in a given string. This simple configuration requires only the class name as there are no customizable parameters.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/koryphe-functions.md#2025-04-23_snippet_132\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"ReverseString\"\n}\n```\n\n----------------------------------------\n\nTITLE: Skipping Failed Execution Configuration\nDESCRIPTION: Example showing how to configure an operation to skip failed executions and continue with remaining graphs using the skipFailedFederatedStoreExecute option.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/administration-guide/gaffer-stores/federated-store.md#2025-04-23_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"GetAllElements\",\n  \"options\" : {\n    \"gaffer.federatedstore.operation.skipFailedFederatedStoreExecute\" : \"true\"\n  }\n}\n```\n\nLANGUAGE: java\nCODE:\n```\nGetAllElements skipFailedExecution = new GetAllElements.Builder()\n        .option(FederatedStoreConstants.KEY_SKIP_FAILED_FEDERATED_STORE_EXECUTE, \"true\")\n        .build();\n```\n\n----------------------------------------\n\nTITLE: Configuring ToTuple Function in JSON\nDESCRIPTION: JSON configuration for the ToTuple function. This can be used in Gaffer graph configurations or other JSON-based setups.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/koryphe-functions.md#2025-04-23_snippet_184\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"ToTuple\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring StringReplace Function in JSON\nDESCRIPTION: JSON configuration for a StringReplace function. This configuration specifies a search string '[tea' and a replacement string 'cake' for direct string replacement.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/koryphe-functions.md#2025-04-23_snippet_156\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"StringReplace\",\n  \"replacement\" : \"cake\",\n  \"searchString\" : \"[tea\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Swagger UI Properties for Gaffer REST API\nDESCRIPTION: This snippet shows system properties that can be used to customize the Swagger UI in the Gaffer REST API. These properties allow setting the application title, description, banner details, and logo.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/development-guide/project-structure/components/core-rest.md#2025-04-23_snippet_1\n\nLANGUAGE: properties\nCODE:\n```\ngaffer.properties.app.title=Road Traffic Example\ngaffer.properties.app.description=Example using road traffic data\ngaffer.properties.app.banner.description=DEMO\ngaffer.properties.app.banner.colour=#1b75bb\ngaffer.properties.app.logo.link=https://github.com/gchq/Gaffer\ngaffer.properties.app.logo.src=images/iconCircle.png\n```\n\n----------------------------------------\n\nTITLE: Configuring Accumulo Store Properties for Gaffer\nDESCRIPTION: A properties file that configures the Accumulo data store for Gaffer, including connection details for Accumulo and Zookeeper, along with general store configuration settings.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/development-guide/example-deployment/project-setup.md#2025-04-23_snippet_4\n\nLANGUAGE: properties\nCODE:\n```\ngaffer.store.class=uk.gov.gchq.gaffer.accumulostore.AccumuloStore\ngaffer.store.properties.class=uk.gov.gchq.gaffer.accumulostore.AccumuloProperties\n\n# Accumulo specific config\naccumulo.instance=accumulo\naccumulo.zookeepers=zookeeper\naccumulo.user=root\naccumulo.password=secret\n\n# General store config\ngaffer.cache.service.default.class=uk.gov.gchq.gaffer.cache.impl.HashMapCacheService\ngaffer.store.job.tracker.enabled=true\ngaffer.store.operation.declarations=/gaffer/store/operationsDeclarations.json\n```\n\n----------------------------------------\n\nTITLE: Visualizing Directed Graph with Mermaid for Export Operation Examples\nDESCRIPTION: This Mermaid diagram represents a directed graph used in all examples on the page. It shows nodes with counts and edges connecting them, demonstrating the structure of data that might be exported.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/export.md#2025-04-23_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph TD\n  1(1, count=3) -- count=3 --> 2\n  1 -- count=1 --> 4\n  2(2, count=1) -- count=2 --> 3\n  2 -- count=1 --> 4(4, count=1)\n  2 -- count=1 --> 5(5, count=3)\n  3(3, count=2) -- count=4 --> 4\n```\n\n----------------------------------------\n\nTITLE: Defining Types Schema for ThetaSketch Integration\nDESCRIPTION: Configures the types schema including ThetaSketch serialization and aggregation settings, along with other required data types.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/properties-guide/advanced.md#2025-04-23_snippet_22\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"types\": {\n    \"vertex.string\": {\n      \"class\": \"java.lang.String\",\n      \"validateFunctions\": [\n        {\n          \"class\": \"uk.gov.gchq.koryphe.impl.predicate.Exists\"\n        }\n      ]\n    },\n    \"date.earliest\": {\n      \"class\": \"java.util.Date\",\n      \"validateFunctions\": [\n        {\n          \"class\": \"uk.gov.gchq.koryphe.impl.predicate.Exists\"\n        }\n      ],\n      \"aggregateFunction\": {\n        \"class\": \"uk.gov.gchq.koryphe.impl.binaryoperator.Min\"\n      }\n    },\n    \"date.latest\": {\n      \"class\": \"java.util.Date\",\n      \"validateFunctions\": [\n        {\n          \"class\": \"uk.gov.gchq.koryphe.impl.predicate.Exists\"\n        }\n      ],\n      \"aggregateFunction\": {\n        \"class\": \"uk.gov.gchq.koryphe.impl.binaryoperator.Max\"\n      }\n    },\n    \"long.count\": {\n      \"class\": \"java.lang.Long\",\n      \"aggregateFunction\": {\n        \"class\": \"uk.gov.gchq.koryphe.impl.binaryoperator.Sum\"\n      }\n    },\n    \"thetasketch\": {\n      \"class\": \"org.apache.datasketches.theta.Sketch\",\n      \"aggregateFunction\": {\n        \"class\": \"uk.gov.gchq.gaffer.sketches.datasketches.theta.binaryoperator.SketchAggregator\"\n      },\n      \"serialiser\": {\n        \"class\": \"uk.gov.gchq.gaffer.sketches.datasketches.theta.serialisation.SketchSerialiser\"\n      }\n    },\n    \"false\": {\n      \"class\": \"java.lang.Boolean\",\n      \"validateFunctions\": [\n        {\n          \"class\": \"uk.gov.gchq.koryphe.impl.predicate.IsFalse\"\n        }\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring StringTrim Function in JSON\nDESCRIPTION: JSON configuration for a StringTrim function. This configuration creates a function that will remove leading and trailing whitespace from input strings.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/koryphe-functions.md#2025-04-23_snippet_162\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"StringTrim\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring FreqMapExtractor in JSON\nDESCRIPTION: JSON configuration for the FreqMapExtractor function. This configuration specifies the class name and the key parameter.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/gaffer-functions.md#2025-04-23_snippet_25\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"FreqMapExtractor\",\n  \"key\" : \"key1\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing IterableFlatten Function without Binary Operator in Python\nDESCRIPTION: Python implementation of an IterableFlatten function with no binary operator specified.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/koryphe-functions.md#2025-04-23_snippet_90\n\nLANGUAGE: python\nCODE:\n```\ng.IterableFlatten()\n```\n\n----------------------------------------\n\nTITLE: Configuring ReduceRelatedElements with Complex Example in JSON\nDESCRIPTION: This JSON configuration for the complex ReduceRelatedElements example is identical to the basic example, demonstrating that the same function configuration can be applied to different data structures with varying complexity.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/gaffer-functions.md#2025-04-23_snippet_39\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"ReduceRelatedElements\",\n  \"vertexAggregator\" : {\n    \"class\" : \"uk.gov.gchq.koryphe.impl.binaryoperator.Max\"\n  },\n  \"visibilityAggregator\" : {\n    \"class\" : \"CollectionConcat\"\n  },\n  \"visibilityProperty\" : \"visibility\",\n  \"relatedVertexGroups\" : [ \"relatesTo\" ]\n}\n```\n\n----------------------------------------\n\nTITLE: Adding JsonType Annotation for Java 8 Interface Implementation\nDESCRIPTION: This code snippet demonstrates how to add the necessary JsonType annotation when directly implementing Java 8 interfaces for Element processing in Gaffer. This annotation is required for proper JSON serialization and deserialization.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/development-guide/project-structure/components/data.md#2025-04-23_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n@JsonTypeInfo(use = JsonTypeInfo.Id.CLASS, include = JsonTypeInfo.As.PROPERTY, property = \"class\")\n```\n\n----------------------------------------\n\nTITLE: Parsing Date Strings with TimeZone (GMT+0) in JSON\nDESCRIPTION: JSON configuration for a date parser that converts date strings to Date objects with GMT+0 timezone. This configuration uses a simpler format pattern without seconds.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/koryphe-functions.md#2025-04-23_snippet_120\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"ParseDate\",\n  \"format\" : \"yyyy-MM-dd HH:mm\",\n  \"timeZone\" : \"Etc/GMT+0\",\n  \"microseconds\" : false\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting a Named View in Gaffer\nDESCRIPTION: Demonstrates how to remove a Named View from the cache. This operation is shown in Java, JSON, and Python implementations.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/administration-guide/named-views.md#2025-04-23_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nfinal DeleteNamedView view = new DeleteNamedView.Builder()\n    .name(\"exampleNamedView\")\n    .build();\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"class\": \"DeleteNamedView\",\n    \"name\": \"exampleNamedView\"\n}\n```\n\nLANGUAGE: python\nCODE:\n```\ng.DeleteNamedView(\n    name=\"exampleNamedView\"\n)\n```\n\n----------------------------------------\n\nTITLE: Creating StringSplit Function in Python\nDESCRIPTION: Python implementation of a StringSplit function. This function splits input strings using a space character as the delimiter.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/koryphe-functions.md#2025-04-23_snippet_160\n\nLANGUAGE: python\nCODE:\n```\ng.StringSplit( \n  delimiter=\" \" \n)\n```\n\n----------------------------------------\n\nTITLE: Using Concat Function in Python\nDESCRIPTION: Illustrates how to use the Concat function in Python with a comma separator. This is typically used in Gaffer's Python client for string concatenation.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/koryphe-functions.md#2025-04-23_snippet_14\n\nLANGUAGE: python\nCODE:\n```\ng.Concat( \n  separator=\",\" \n)\n```\n\n----------------------------------------\n\nTITLE: Running Spring REST API with Maven\nDESCRIPTION: Command to run the Spring REST API using Maven from the root of the project with the demo profile.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/development-guide/project-structure/components/spring-rest.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmvn spring-boot:run -pl :spring-rest -Pdemo\n```\n\n----------------------------------------\n\nTITLE: Configuring InRange Function with Unbounded Start in JSON\nDESCRIPTION: JSON configuration for an InRange function checking Long values less than 10 (exclusive). This shows how to serialize a range check with an unbounded start.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/predicates-guide/koryphe-predicates.md#2025-04-23_snippet_55\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"InRange\",\n  \"end\" : {\n    \"Long\" : 10\n  },\n  \"endInclusive\" : false\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring InDateRange with timestamp values in JSON\nDESCRIPTION: JSON configuration for an InDateRange predicate using Unix timestamps for the range boundaries instead of formatted date strings.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/predicates-guide/koryphe-predicates.md#2025-04-23_snippet_19\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"InDateRange\",\n  \"start\" : \"1483315200\",\n  \"end\" : \"1485907200\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing IterableConcat Function in Java\nDESCRIPTION: Creates an IterableConcat function that flattens nested iterables into a single iterable by concatenating each of the inner iterables together.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/koryphe-functions.md#2025-04-23_snippet_82\n\nLANGUAGE: java\nCODE:\n```\nfinal IterableConcat<Integer> function = new IterableConcat<>();\n```\n\n----------------------------------------\n\nTITLE: Setting Fixed Value Regardless of Input in Python\nDESCRIPTION: Python implementation of a function that returns a fixed value regardless of input. This function returns the value 5 for any input provided.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/koryphe-functions.md#2025-04-23_snippet_136\n\nLANGUAGE: python\nCODE:\n```\ng.SetValue(\n  value=5 \n)\n```\n\n----------------------------------------\n\nTITLE: Illustrating Conflicting Property Type Definitions in Gaffer Schema JSON\nDESCRIPTION: These snippets demonstrate two schemas with the same entity group and property name, but conflicting type definitions. The conflict involves different class, serialiser, validation, and aggregation settings for the same property type.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/administration-guide/gaffer-stores/federated-store.md#2025-04-23_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"entities\": {\n        \"group1\": {\n            \"vertex\": \"string\",\n            \"properties\": {\n                \"property1\": \"type1\"\n            }\n        }\n    },\n    \"types\": {\n        \"type1\": {\n            \"class\": \"java.lang.String\",\n            \"serialiser\": {\n                \"class\": \"uk.gov.gchq.gaffer.serialisation.implementation.StringSerialiser\"\n            },\n            \"validateFunctions\": [\n                {\n                    \"class\": \"uk.gov.gchq.koryphe.impl.predicate.Exists\"\n                }\n            ],\n            \"aggregateFunction\": {\n                \"class\": \"uk.gov.gchq.koryphe.impl.binaryoperator.StringConcat\"\n            }\n        }\n    }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"entities\": {\n        \"group1\": {\n            \"vertex\": \"string\",\n            \"properties\": {\n                \"property1\": \"type1\"\n            }\n        }\n    },\n    \"types\": {\n        \"type1\": {\n            \"class\": \"java.lang.Long\",\n            \"serialiser\": {\n                \"class\": \"uk.gov.gchq.gaffer.serialisation.implementation.raw.CompactRawLongSerialiser\"\n            },\n            \"validateFunctions\": [\n                {\n                    \"class\": \"uk.gov.gchq.koryphe.impl.predicate.IsMoreThan\",\n                    \"value\": {\n                        \"java.lang.Long\": 0\n                    }\n                }\n            ],\n            \"aggregateFunction\": {\n                \"class\": \"uk.gov.gchq.koryphe.impl.binaryoperator.Sum\"\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Documentation Info Block in Markdown\nDESCRIPTION: An information block using markdown admonition syntax to indicate additional documentation resources available through Javadocs.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/intro.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n!!! info\n\n    In general, this documentation covers the most common use cases, it doesn't cover everything. The Javadocs for [Gaffer](https://gchq.github.io/Gaffer/overview-summary.html) and [Koryphe](https://gchq.github.io/koryphe/) have more specialised information.\n```\n\n----------------------------------------\n\nTITLE: CountGroups Operation Implementation\nDESCRIPTION: Implementation of CountGroups operation to count different element groups within an OperationChain.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/core.md#2025-04-23_snippet_7\n\nLANGUAGE: java\nCODE:\n```\nfinal OperationChain<GroupCounts> opChain = new OperationChain.Builder()\n        .first(new GetAllElements())\n        .then(new CountGroups())\n        .build();\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"OperationChain\",\n  \"operations\" : [ {\n    \"class\" : \"GetAllElements\"\n  }, {\n    \"class\" : \"CountGroups\"\n  } ]\n}\n```\n\nLANGUAGE: python\nCODE:\n```\ng.OperationChain(\n  operations=[\n    g.GetAllElements(),\n    g.CountGroups()\n  ]\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring ToLowerCase Function in JSON\nDESCRIPTION: JSON configuration for the ToLowerCase function. This can be used in Gaffer graph configurations or other JSON-based setups.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/koryphe-functions.md#2025-04-23_snippet_172\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"ToLowerCase\"\n}\n```\n\n----------------------------------------\n\nTITLE: Common Predicate Support for Basic Properties\nDESCRIPTION: List of predicates that are universally supported across all basic property types in Gaffer.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/properties-guide/basic.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n- `And`\n- `Or`\n- `Not`\n- `If`\n- `Exists`\n- `IsA`\n- `IsIn`\n- `IsEqual`\n- `PropertiesFilter`\n```\n\n----------------------------------------\n\nTITLE: Configuring MiniAccumuloStore Properties in Java\nDESCRIPTION: Example of additional properties that can be set for a MiniAccumuloStore, including the directory path, root password, and visibilities. These properties are optional and allow customization of the MiniAccumuloCluster used for testing.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/development-guide/project-structure/components/accumulo-store.md#2025-04-23_snippet_4\n\nLANGUAGE: java\nCODE:\n```\naccumulo.mini.directory=/path/to/directory\naccumulo.mini.root.password=password\naccumulo.mini.visibilities=vis1,vis2,publicVisibility,privateVisibility,public,private\n```\n\n----------------------------------------\n\nTITLE: Upgrading Gaffer Deployment with Custom Images\nDESCRIPTION: Helm command to upgrade an existing Gaffer deployment to use custom images specified in a configuration file while preserving other deployment values.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/administration-guide/gaffer-deployment/kubernetes-guide/running-on-kubernetes.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nhelm upgrade my-graph gaffer-docker/gaffer -f custom-images.yaml --reuse-values\n```\n\n----------------------------------------\n\nTITLE: Configuring Elements Schema for ReservoirItemsSketch\nDESCRIPTION: JSON schema defining entity and edge properties that use ReservoirItemsSketch. Includes configuration for blueEntity with neighboursSample property and red edge with stringsSample property.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/properties-guide/advanced.md#2025-04-23_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"entities\": {\n    \"blueEntity\": {\n      \"vertex\": \"vertex.string\",\n      \"properties\": {\n        \"neighboursSample\": \"reservoir.strings.sketch\"\n      }\n    }\n  },\n  \"edges\": {\n    \"red\": {\n      \"source\": \"vertex.string\",\n      \"destination\": \"vertex.string\",\n      \"directed\": \"false\",\n      \"properties\": {\n        \"stringsSample\": \"reservoir.strings.sketch\"\n      }\n    },\n    \"blue\": {\n      \"source\": \"vertex.string\",\n      \"destination\": \"vertex.string\",\n      \"directed\": \"false\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Edges in Gaffer Query (JSON)\nDESCRIPTION: This JSON snippet shows the structure of a GetAllElements operation that filters to return only edges using the 'allEdges' flag in the View.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/user-guide/query/gaffer-syntax/filtering.md#2025-04-23_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"GetAllElements\",\n  \"view\": {\n    \"allEdges\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Elements to Sets using ToSet Operation in Gaffer\nDESCRIPTION: Demonstrates using ToSet operation to convert graph elements into a Set collection. Uses LinkedHashSet internally for maintaining element order. Note that this operation is not recommended for large result sets due to in-memory processing.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/core.md#2025-04-23_snippet_59\n\nLANGUAGE: java\nCODE:\n```\nfinal OperationChain<Set<? extends Element>> opChain = new OperationChain.Builder()\n        .first(new GetElements.Builder()\n                .input(new EntitySeed(1), new EntitySeed(2))\n                .build())\n        .then(new ToSet<>())\n        .build();\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"OperationChain\",\n  \"operations\" : [ {\n    \"class\" : \"GetElements\",\n    \"input\" : [ {\n      \"class\" : \"EntitySeed\",\n      \"vertex\" : 1\n    }, {\n      \"class\" : \"EntitySeed\",\n      \"vertex\" : 2\n    } ]\n  }, {\n    \"class\" : \"uk.gov.gchq.gaffer.operation.impl.output.ToSet\"\n  } ]\n}\n```\n\nLANGUAGE: python\nCODE:\n```\ng.OperationChain(\n  operations=[\n    g.GetElements(\n      input=[\n        g.EntitySeed(\n          vertex=1\n        ),\n        g.EntitySeed(\n          vertex=2\n        )\n      ]\n    ),\n    g.ToSet()\n  ]\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Edge Schema with RBMBackedTimestampSet\nDESCRIPTION: JSON schema definition for edges with a timestamp set property that stores timestamps at minute-level accuracy using RBMBackedTimestampSet.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/properties-guide/map-set.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"edges\": {\n    \"red\": {\n      \"source\": \"vertex.string\",\n      \"destination\": \"vertex.string\",\n      \"directed\": \"false\",\n      \"properties\": {\n        \"timestampSet\": \"timestamp.set\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeSubTypeValueToTuple Function in JSON\nDESCRIPTION: JSON configuration for the TypeSubTypeValueToTuple function. This can be used to instantiate the function in a Gaffer JSON operation chain.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/gaffer-functions.md#2025-04-23_snippet_57\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"TypeSubTypeValueToTuple\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing IterableFlatten Function with Max Binary Operator in JSON\nDESCRIPTION: JSON representation of an IterableFlatten function with a Max binary operator that finds the maximum value in an iterable.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/koryphe-functions.md#2025-04-23_snippet_92\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"IterableFlatten\",\n  \"operator\" : {\n    \"class\" : \"uk.gov.gchq.koryphe.impl.binaryoperator.Max\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using ToTypeSubTypeValue Function in Python\nDESCRIPTION: Python code to create a ToTypeSubTypeValue function using the Gaffer Python client. This function converts input objects to TypeSubTypeValue instances.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/gaffer-functions.md#2025-04-23_snippet_49\n\nLANGUAGE: python\nCODE:\n```\ng.ToTypeSubTypeValue()\n```\n\n----------------------------------------\n\nTITLE: Including Bitmap Library Dependency in Maven\nDESCRIPTION: XML snippet showing how to include the bitmap library as a dependency in a Maven project. The dependency requires the gaffer.version property to be defined elsewhere in the pom file.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/development-guide/project-structure/components/libraries/bitmap.md#2025-04-23_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n <dependency>\n  <groupId>uk.gov.gchq.gaffer</groupId>\n  <artifactId>bitmap-library</artifactId>\n  <version>${gaffer.version}</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Cypher Explain Query\nDESCRIPTION: This snippet shows an example Cypher query that can be submitted to the '/rest/gremlin/cypher/explain' endpoint for explanation of how it maps to Gaffer operation chains and its equivalent Gremlin translation.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/user-guide/query/gremlin/custom-features.md#2025-04-23_snippet_7\n\nLANGUAGE: cypher\nCODE:\n```\nMATCH (p:person) WHERE ID(p) = '1' RETURN p\n```\n\n----------------------------------------\n\nTITLE: Retrieving Compact Schema in Java\nDESCRIPTION: This Java code snippet shows how to create a GetSchema operation to retrieve the compact schema of a graph. The compact field is explicitly set to true using a builder pattern.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/core.md#2025-04-23_snippet_90\n\nLANGUAGE: java\nCODE:\n```\nfinal GetSchema operation = new GetSchema.Builder()\n        .compact(true)\n        .build();\n```\n\n----------------------------------------\n\nTITLE: Gaffer Graph Configuration in JSON\nDESCRIPTION: Example graph configuration showing graph ID, description, telemetry settings, view filters, hooks and library configuration.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/administration-guide/gaffer-config/config.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"graphId\": \"ExampleGraph\",\n    \"description\": \"An example graph\",\n    \"otelActive\": true,\n    \"view\": {\n        \"globalElements\": [\n        {\n            \"postAggregationFilterFunctions\": [\n            {\n                \"predicate\": {\n                \"class\": \"uk.gov.gchq.koryphe.impl.predicate.IsLessThan\",\n                \"orEqualTo\": false,\n                \"value\": \"10\"\n                },\n                \"selection\": [\"ExamplePropertyName\"]\n            }\n            ]\n        }\n        ]\n    },\n    \"hooks\": [\n        {\n            \"class\": \"uk.gov.gchq.gaffer.graph.hook.FunctionAuthoriser\"\n        }\n    ],\n    \"library\": {\n    \"class\": \"uk.gov.gchq.gaffer.store.library.FileGraphLibrary\"\n}\n}\n```\n\n----------------------------------------\n\nTITLE: Results of Running GetAdjacentIds with While in JSON\nDESCRIPTION: The JSON output from running the While operation with GetAdjacentIds three times, showing the EntitySeeds returned after traversing the graph multiple times from the starting vertex.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/flow.md#2025-04-23_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n[ {\n  \"class\" : \"uk.gov.gchq.gaffer.operation.data.EntitySeed\",\n  \"vertex\" : 6\n}, {\n  \"class\" : \"uk.gov.gchq.gaffer.operation.data.EntitySeed\",\n  \"vertex\" : 3\n}, {\n  \"class\" : \"uk.gov.gchq.gaffer.operation.data.EntitySeed\",\n  \"vertex\" : 7\n} ]\n```\n\n----------------------------------------\n\nTITLE: Converting Single Input to List with ToSingletonList in Java\nDESCRIPTION: Creates a ToSingletonList operation that converts a single integer input (4) to a List. This operation is useful when you need to ensure an input is contained within a List structure.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/core.md#2025-04-23_snippet_60\n\nLANGUAGE: java\nCODE:\n```\nfinal ToSingletonList<Integer> opChain = new ToSingletonList.Builder<Integer>()\n        .input(4)\n        .build();\n```\n\n----------------------------------------\n\nTITLE: OperationChain Result in Java Format\nDESCRIPTION: The Java result of the operation chain, showing the vertices returned after executing the chain. The result contains integers 4, 3, 2, and 5, which represent the connected vertices found through the graph traversal.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/core.md#2025-04-23_snippet_80\n\nLANGUAGE: java\nCODE:\n```\n4\n3\n2\n5\n```\n\n----------------------------------------\n\nTITLE: Configuring IsShorterThan Predicate in JSON\nDESCRIPTION: JSON configuration for an IsShorterThan predicate that checks if the length of an input is less than 4. The maxLength parameter sets the comparison value.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/predicates-guide/koryphe-predicates.md#2025-04-23_snippet_98\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"IsShorterThan\",\n  \"maxLength\" : 4,\n  \"orEqualTo\" : false\n}\n```\n\n----------------------------------------\n\nTITLE: Filtered GetElementsWithinSet Operation Results in Java\nDESCRIPTION: This Java code snippet shows the expected results from executing the filtered GetElementsWithinSet operation. It returns only the Entity and Edge with count greater than 2.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/accumulo.md#2025-04-23_snippet_17\n\nLANGUAGE: java\nCODE:\n```\nEntity[vertex=1,group=entity,properties=Properties[count=<java.lang.Integer>3]]\nEdge[source=1,destination=2,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=<java.lang.Integer>3]]\n```\n\n----------------------------------------\n\nTITLE: Initializing DeserialiseJson Function\nDESCRIPTION: Function to parse JSON strings into Java objects. Converts JSON formatted strings into appropriate Java data structures.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/koryphe-functions.md#2025-04-23_snippet_24\n\nLANGUAGE: java\nCODE:\n```\nfinal DeserialiseJson function = new DeserialiseJson();\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"DeserialiseJson\"\n}\n```\n\nLANGUAGE: python\nCODE:\n```\ng.DeserialiseJson()\n```\n\n----------------------------------------\n\nTITLE: Setting Empty GroupBy Globally in Java\nDESCRIPTION: Java example demonstrating how to create a GetElements query that applies an empty groupBy to all element groups using the globalElements section of a View. This effectively summarizes all edges connected to the vertex 'John'.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/user-guide/query/gaffer-syntax/filtering.md#2025-04-23_snippet_25\n\nLANGUAGE: java\nCODE:\n```\nfinal GetElements getEdgesSummarised = new GetElements.Builder()\n    .input(new EntitySeed(\"John\"))\n    .view(new View.Builder()\n            .globalElements(new GlobalViewElementDefinition.Builder()\n                    .groupBy()\n                    .build())\n            .build())\n    .build();\n```\n\n----------------------------------------\n\nTITLE: Running Autopep8 for Python Code Style Formatting\nDESCRIPTION: Command for running autopep8 to automatically format Python code according to the project's style guidelines, with project-specific exceptions for maximum line length and import placement.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/development-guide/ways-of-working.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nautopep8 --exit-code -r -i -a -a --max-line-length 100 --ignore E402 .\n```\n\n----------------------------------------\n\nTITLE: Getting GraphFrame of Elements in JSON\nDESCRIPTION: JSON representation of GetGraphFrameOfElements operation for retrieving both entities and edges.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/spark.md#2025-04-23_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"GetGraphFrameOfElements\",\n  \"view\" : {\n    \"edges\" : {\n      \"edge\" : { }\n    },\n    \"entities\" : {\n      \"entity\" : { }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating StringRegexSplit Function in Python\nDESCRIPTION: Python implementation of a StringRegexSplit function. This function splits input strings using a regular expression that matches one or more spaces or tabs.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/koryphe-functions.md#2025-04-23_snippet_154\n\nLANGUAGE: python\nCODE:\n```\ng.StringRegexSplit( \n  regex=\"[ \\t]+\" \n)\n```\n\n----------------------------------------\n\nTITLE: Scheduling a Job in Java\nDESCRIPTION: Java code example showing how to schedule an asynchronous job in Gaffer. It creates a Job object with a Repeat configuration and a GetAllElements operation.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/administration-guide/job-tracker.md#2025-04-23_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nfinal Job job = new Job(new Repeat(20L, 30L, TimeUnit.SECONDS), new GetAllElements());\n```\n\n----------------------------------------\n\nTITLE: Configuring hdfs-site.xml for Hadoop Secure Mode with Kerberos\nDESCRIPTION: This XML snippet shows the property that needs to be set in the hdfs-site.xml file for Hadoop Secure Mode with Kerberos. It specifies the YARN ResourceManager principal, which should match the Gaffer Store properties.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/administration-guide/security/accumulo-kerberos.md#2025-04-23_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<!--Properties in hdfs-site.xml-->\n<property>\n    <name>yarn.resourcemanager.principal</name>\n    <value>primary/instance@realm</value>\n</property>\n```\n\n----------------------------------------\n\nTITLE: Adding GafferPop Dependency in Maven (XML)\nDESCRIPTION: XML snippet for including the GafferPop library as a Maven dependency in a project. This allows use of Gremlin queries via the Java API.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/administration-guide/gaffer-deployment/gremlin.md#2025-04-23_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>uk.gov.gchq.gaffer</groupId>\n    <artifactId>tinkerpop</artifactId>\n    <version>${gaffer.version}</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Configuring Flink Operations Store Properties\nDESCRIPTION: Configuration required to enable Flink operations by registering them with the store.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/flink.md#2025-04-23_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\ngaffer.store.operation.declarations=FlinkOperationDeclarations.json\n```\n\n----------------------------------------\n\nTITLE: Using Custom Types in Gremlin Query\nDESCRIPTION: This snippet demonstrates how to use a custom Gaffer type (TypeSubTypeValue) in a Gremlin query. The type is represented as a string in the query.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/user-guide/query/gremlin/custom-features.md#2025-04-23_snippet_4\n\nLANGUAGE: gremlin\nCODE:\n```\ng.V(\"[type=thetype,subType=thesubtype,value=thevalue]\")\n```\n\n----------------------------------------\n\nTITLE: Configuring DeserialiseXml in JSON\nDESCRIPTION: JSON configuration for the DeserialiseXml function that parses XML into Maps.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/koryphe-functions.md#2025-04-23_snippet_26\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"DeserialiseXml\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining IsFalse Predicate in JSON\nDESCRIPTION: JSON representation of the IsFalse predicate that checks if an input boolean is false. Can be used in Gaffer schema or operation definitions.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/predicates-guide/koryphe-predicates.md#2025-04-23_snippet_65\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"IsFalse\"\n}\n```\n\n----------------------------------------\n\nTITLE: Result of ToSingletonList in Java\nDESCRIPTION: The result of executing the ToSingletonList operation in Java, showing the single integer value 4 that is now contained in a List.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/core.md#2025-04-23_snippet_63\n\nLANGUAGE: java\nCODE:\n```\n4\n```\n\n----------------------------------------\n\nTITLE: Creating InDateRangeDual with contained start range in Python\nDESCRIPTION: Python implementation of InDateRangeDual that requires the start date to be fully contained within the configured range. The function will only accept date ranges starting on or after 2017/03/01.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/predicates-guide/koryphe-predicates.md#2025-04-23_snippet_35\n\nLANGUAGE: python\nCODE:\n```\ng.InDateRangeDual(\n  start=\"2017/03/01\",\n  end=\"2017/08/01\",\n  start_fully_contained=True,\n  end_fully_contained=False\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Gaffer Dependency in Maven\nDESCRIPTION: XML configuration for adding a Gaffer component as a dependency in a Maven project, allowing access to Gaffer classes for extension.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/development-guide/extending-gaffer.md#2025-04-23_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>uk.gov.gchq.gaffer</groupId>\n    <artifactId>${gaffer.component}</artifactId>\n    <version>${gaffer.version}</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Configuring DeleteAllData Operation Handler in Gaffer\nDESCRIPTION: Example of configuring the DeleteAllData operation handler in an Accumulo store through operationsDeclarations.json configuration.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/core.md#2025-04-23_snippet_99\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"operations\": [\n        {\n            \"operation\": \"uk.gov.gchq.gaffer.store.operation.DeleteAllData\",\n            \"handler\": {\n                \"class\": \"uk.gov.gchq.gaffer.accumulostore.operation.handler.DeleteAllDataHandler\"\n            }\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing PredicateMap for FreqMap Comparison with Equality in Python\nDESCRIPTION: Python implementation of a PredicateMap that extracts the 'key1' value from a map and checks if it's greater than or equal to 2. The or_equal_to parameter is set to True for inclusive comparison.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/predicates-guide/koryphe-predicates.md#2025-04-23_snippet_117\n\nLANGUAGE: python\nCODE:\n```\ng.PredicateMap(\n  key=\"key1\",\n  predicate=g.IsMoreThan(\n    value=g.long(2),\n    or_equal_to=True\n  )\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing ExtractWalkEdgesFromHop in Java\nDESCRIPTION: Creates a new ExtractWalkEdgesFromHop function to extract the Set of Edges at a specific hop from a provided Walk. The hop parameter specifies which hop to extract edges from.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/gaffer-functions.md#2025-04-23_snippet_15\n\nLANGUAGE: java\nCODE:\n```\nfinal ExtractWalkEdgesFromHop function = new ExtractWalkEdgesFromHop(1);\n```\n\n----------------------------------------\n\nTITLE: Results of Running GetAdjacentIds with While in Java\nDESCRIPTION: The output from running the While operation with GetAdjacentIds three times in Java, showing the EntitySeeds returned after traversing the graph multiple times from the starting vertex.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/flow.md#2025-04-23_snippet_13\n\nLANGUAGE: java\nCODE:\n```\nEntitySeed[vertex=6]\nEntitySeed[vertex=3]\nEntitySeed[vertex=7]\n```\n\n----------------------------------------\n\nTITLE: Multiplying Long Values with MultiplyLongBy in Java\nDESCRIPTION: Creates a function that multiplies an input Long value by a specified constant. This function takes a Long input and returns a Long result after multiplication.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/koryphe-functions.md#2025-04-23_snippet_110\n\nLANGUAGE: java\nCODE:\n```\nfinal MultiplyLongBy function = new MultiplyLongBy(2L);\n```\n\n----------------------------------------\n\nTITLE: Querying Vertices by ID in OpenCypher\nDESCRIPTION: Demonstrates how to query vertices using string IDs in openCypher and its equivalent Gremlin translation.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/user-guide/query/opencypher.md#2025-04-23_snippet_0\n\nLANGUAGE: cypher\nCODE:\n```\nMATCH (n) WHERE ID(n) IN ['0', '1', '2', '3'] RETURN n\n```\n\nLANGUAGE: groovy\nCODE:\n```\ng.V().has('~id', within('0', '1', '2', '3')).project('n').by(__.valueMap().with('~tinkerpop.valueMap.tokens')).toList()\n```\n\n----------------------------------------\n\nTITLE: Defining IsLessThan with String in JSON\nDESCRIPTION: JSON representation of the IsLessThan predicate with string value \"B\" and orEqualTo flag set to false. Used for lexicographical comparison in Gaffer operations.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/predicates-guide/koryphe-predicates.md#2025-04-23_snippet_80\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"IsLessThan\",\n  \"orEqualTo\" : false,\n  \"value\" : \"B\"\n}\n```\n\n----------------------------------------\n\nTITLE: SystemProperty Configuration Changes\nDESCRIPTION: Removal of individual graph configuration properties in favor of consolidated graphConfig JSON approach using GRAPH_CONFIG_PATH.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/change-notes/migrating-from-v1-to-v2/deprecations.md#2025-04-23_snippet_14\n\n\n\n----------------------------------------\n\nTITLE: Using DeserialiseXml in Python\nDESCRIPTION: Python implementation of the DeserialiseXml function that converts XML strings to Maps.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/koryphe-functions.md#2025-04-23_snippet_27\n\nLANGUAGE: python\nCODE:\n```\ng.DeserialiseXml()\n```\n\n----------------------------------------\n\nTITLE: Java Result Format from Gaffer Result Cache Export\nDESCRIPTION: The Java result format when retrieving elements from the Gaffer result cache. Shows the Edge and Entity objects with their properties.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/export.md#2025-04-23_snippet_10\n\nLANGUAGE: java\nCODE:\n```\nEdge[source=1,destination=4,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=<java.lang.Integer>1]]\nEntity[vertex=4,group=entity,properties=Properties[count=<java.lang.Integer>1]]\nEdge[source=1,destination=2,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=<java.lang.Integer>3]]\nEntity[vertex=1,group=entity,properties=Properties[count=<java.lang.Integer>3]]\nEdge[source=2,destination=5,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=<java.lang.Integer>1]]\nEdge[source=3,destination=4,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=<java.lang.Integer>4]]\nEdge[source=2,destination=3,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=<java.lang.Integer>2]]\nEntity[vertex=2,group=entity,properties=Properties[count=<java.lang.Integer>1]]\nEntity[vertex=3,group=entity,properties=Properties[count=<java.lang.Integer>2]]\nEdge[source=2,destination=4,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=<java.lang.Integer>1]]\nEntity[vertex=5,group=entity,properties=Properties[count=<java.lang.Integer>3]]\n```\n\n----------------------------------------\n\nTITLE: Maven SLF4J Binding Dependency Reference\nDESCRIPTION: The Maven coordinate for the SLF4J Reload4j binding used by Gaffer for logging implementation.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/change-notes/migrating-from-v1-to-v2/log4j.md#2025-04-23_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\norg.slf4j:slf4j-reload4j:jar:1.7.36\n```\n\n----------------------------------------\n\nTITLE: New FederatedOperation with Nested OperationChain in JSON\nDESCRIPTION: Example of the new approach using FederatedOperation with a nested OperationChain to efficiently send multiple operations to the same subgraph, replacing the removed FederatedOperationChain.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/change-notes/migrating-from-v1-to-v2/federation-changes.md#2025-04-23_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"class\": \"uk.gov.gchq.gaffer.operation.OperationChain\",\n    \"operations\": [\n        {\n            \"class\": \"uk.gov.gchq.gaffer.federatedstore.operation.FederatedOperation\",\n            \"operation\": {\n                \"class\": \"uk.gov.gchq.gaffer.operation.OperationChain\",\n                \"operations\": {\n                    [\n                        \"class\": \"ExampleOperation1\",\n                        \"class\": \"ExampleOperation2\"\n                    ]\n                }\n            },\n            \"graphIds\": [ \"graphA\" ]\n        },\n        {\n            \"class\": \"uk.gov.gchq.gaffer.federatedstore.operation.FederatedOperation\",\n            \"operation\": {\n                \"class\": \"ExampleOperation3\"\n            },\n            \"graphIds\": [ \"graphB\" ]\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating StringRegexReplace Function in Python\nDESCRIPTION: Python implementation of a StringRegexReplace function. This function replaces all occurrences of text matching the regex pattern '[tT]ea' with 'cake'.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/koryphe-functions.md#2025-04-23_snippet_151\n\nLANGUAGE: python\nCODE:\n```\ng.StringRegexReplace( \n  regex=\"[tT]ea\", \n  replacement=\"cake\" \n)\n```\n\n----------------------------------------\n\nTITLE: Running AddUpdateTableIterator Utility for Accumulo Store Migration\nDESCRIPTION: Bash command to execute the AddUpdateTableIterator utility for updating Accumulo Store tables during migration. This utility requires the graph ID, schema, and store properties.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/administration-guide/gaffer-stores/accumulo-store.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\njava -cp [path to your jar-with-dependencies].jar uk.gov.gchq.gaffer.accumulostore.utils.AddUpdateTableIterator\n```\n\n----------------------------------------\n\nTITLE: Embedding Gaffer Javadoc in HTML iframe\nDESCRIPTION: This HTML snippet embeds the Gaffer Javadoc documentation within an iframe on the page. It provides a 700-pixel tall window that displays the Javadoc overview summary, allowing users to browse the documentation without leaving the current page.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/javadoc.md#2025-04-23_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<iframe src=\"https://gchq.github.io/Gaffer/overview-summary.html\"\n        height=\"700\"\n        style=\"display: flex; width: 100%; border: none;\"></iframe>\n```\n\n----------------------------------------\n\nTITLE: Configuring Operations for Job Tracker in JSON\nDESCRIPTION: JSON configuration for adding ExportToGafferResultCache and GetGafferResultCacheExport operations to the Operations Declarations file. This setup enables storing and retrieving results in a separate Gaffer graph used as a cache.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/administration-guide/job-tracker.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"operations\": [\n        {\n            \"operation\": \"uk.gov.gchq.gaffer.operation.impl.export.resultcache.ExportToGafferResultCache\",\n            \"handler\": {\n                \"class\": \"uk.gov.gchq.gaffer.operation.export.resultcache.handler.ExportToGafferResultCacheHandler\",\n                \"graphId\": \"resultCacheGraph\",\n                \"timeToLive\": 86400000,\n                \"storePropertiesPath\": \"cache-store.properties\"\n            }\n        },\n        {\n            \"operation\": \"uk.gov.gchq.gaffer.operation.impl.export.resultcache.GetGafferResultCacheExport\",\n            \"handler\": {\n                \"class\": \"uk.gov.gchq.gaffer.operation.export.resultcache.handler.GetGafferResultCacheExportHandler\",\n                \"graphId\": \"resultCacheGraph\",\n                \"timeToLive\": 86400000,\n                \"storePropertiesPath\": \"cache-store.properties\"\n            }\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring StringRegexReplace Function in JSON\nDESCRIPTION: JSON configuration for a StringRegexReplace function. This configuration specifies a regex pattern '[tT]ea' and a replacement 'cake' that will be applied to the input string.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/koryphe-functions.md#2025-04-23_snippet_150\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"StringRegexReplace\",\n  \"regex\" : \"[tT]ea\",\n  \"replacement\" : \"cake\"\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Gremlin Python Libraries\nDESCRIPTION: Imports the necessary libraries from gremlin_python to set up a connection and perform queries.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/user-guide/apis/gremlin-api.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom gremlin_python.process.anonymous_traversal import traversal\nfrom gremlin_python.driver.driver_remote_connection import DriverRemoteConnection\nfrom gremlin_python.driver.serializer import GraphSONSerializersV3d0\nfrom gremlin_python.process.graph_traversal import __\n```\n\n----------------------------------------\n\nTITLE: Defining Types Schema for HllSketch in Gaffer\nDESCRIPTION: JSON schema definition for HllSketch type, including its class, aggregator, and serializer for use in Gaffer graphs.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/properties-guide/advanced.md#2025-04-23_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"types\": {\n    \"vertex.string\": {\n      \"class\": \"java.lang.String\",\n      \"validateFunctions\": [\n        {\n          \"class\": \"uk.gov.gchq.koryphe.impl.predicate.Exists\"\n        }\n      ]\n    },\n    \"hllSketch\": {\n      \"class\": \"org.apache.datasketches.hll.HllSketch\",\n      \"aggregateFunction\": {\n        \"class\": \"uk.gov.gchq.gaffer.sketches.datasketches.cardinality.binaryoperator.HllSketchAggregator\"\n      },\n      \"serialiser\": {\n        \"class\": \"uk.gov.gchq.gaffer.sketches.datasketches.cardinality.serialisation.HllSketchSerialiser\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Age-Off Validation in JSON\nDESCRIPTION: This JSON configuration snippet shows how to set up age-off validation for a Long property in the Gaffer schema. It uses the AgeOff function to remove data older than 100 days.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/administration-guide/gaffer-stores/accumulo-store.md#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n\"long\": {\n    \"class\": \"java.lang.Long\",\n    \"validateFunctions\": [\n        {\n            \"function\": {\n                \"class\": \"gaffer.function.simple.filter.AgeOff\",\n                \"ageOffDays\": \"100\"\n              }\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Graph A Data Elements\nDESCRIPTION: JSON data adding elements (edges and entities) to Graph A, defining relationships between people, jobs, and places.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/federated-operation.md#2025-04-23_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n        \"class\": \"AddElements\",\n        \"input\": [\n            {\n            \"class\": \"Edge\",\n            \"group\": \"WorksAs\",\n            \"source\": \"1\",\n            \"destination\": \"3\",\n            \"directed\": true\n            },\n            {\n            \"class\": \"Edge\",\n            \"group\": \"LivesIn\",\n            \"source\": \"1\",\n            \"destination\": \"3\",\n            \"directed\": true\n            },\n            {\n            \"class\": \"Entity\",\n            \"group\": \"Person\",\n            \"vertex\": \"1\",\n            \"properties\": {\n                \"name\": \"Bob\",\n                \"count\": 1\n            }\n            },\n            {\n            \"class\": \"Entity\",\n            \"group\": \"Job\",\n            \"vertex\": \"2\",\n            \"properties\": {\n                \"type\": \"Builder\"\n            }\n            },\n            {\n            \"class\": \"Entity\",\n            \"group\": \"Place\",\n            \"vertex\": \"3\",\n            \"properties\": {\n                \"name\": \"Bobsville\"\n            }\n            }\n        ],\n        \"options\": {\n            \"gaffer.federatedstore.operation.graphIds\": \"GraphA\"\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Configuring ExtractWalkEdges in JSON\nDESCRIPTION: JSON configuration for the ExtractWalkEdges function. This configuration specifies the class name for the function.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/gaffer-functions.md#2025-04-23_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"ExtractWalkEdges\"\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up InDateRangeDual with exclusive range in JSON\nDESCRIPTION: JSON configuration for InDateRangeDual with exclusive start and end dates. Date comparisons will exclude midnight of the start date and the entire end date, creating a range from just after 2017/03/01 00:00:00 to just before 2017/08/01 00:00:00.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/predicates-guide/koryphe-predicates.md#2025-04-23_snippet_40\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"InDateRangeDual\",\n  \"start\" : \"2017/03/01\",\n  \"end\" : \"2017/08/01\",\n  \"endInclusive\" : false,\n  \"startInclusive\" : false\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Accumulo Passwords\nDESCRIPTION: YAML configuration for setting various Accumulo passwords and instance secret.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/administration-guide/gaffer-deployment/kubernetes-guide/helm-configuration.md#2025-04-23_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\naccumulo:\n  enabled: true\n  config:\n    accumuloSite:\n      instance.secret: \"changeme\"\n    userManagement:\n      rootPassword: \"changeme\"\n      users:\n        tracer:\n          password: \"changme\"\n        gaffer:\n          password: \"changeme\"\n```\n\n----------------------------------------\n\nTITLE: Defining Graph Elements in Gaffer JSON Format\nDESCRIPTION: JSON structure defining graph elements including edges and entities with their associated properties. Each element has a class definition, group identifier, and properties like count. Edges contain source and destination vertices with directed property, while entities contain single vertex definitions.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/join.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n\"RIGHT\": [\n    {\n        \"class\": \"uk.gov.gchq.gaffer.data.element.Edge\",\n        \"group\": \"edge\",\n        \"source\": 3,\n        \"destination\": 4,\n        \"directed\": true,\n        \"properties\": {\n            \"count\": 4\n        }\n    }\n],\n\"LEFT\": {\n    \"class\": \"uk.gov.gchq.gaffer.data.element.Entity\",\n    \"group\": \"entity\",\n    \"vertex\": 4,\n    \"properties\": {\n        \"count\": 1\n    }\n},\n\"values\": {\n    \"LEFT\": {\n        \"class\": \"uk.gov.gchq.gaffer.data.element.Entity\",\n        \"group\": \"entity\",\n        \"vertex\": 5,\n        \"properties\": {\n            \"count\": 3\n        }\n    },\n    \"RIGHT\": [\n        {\n            \"class\": \"uk.gov.gchq.gaffer.data.element.Edge\",\n            \"group\": \"edge\",\n            \"source\": 3,\n            \"destination\": 4,\n            \"directed\": true,\n            \"properties\": {\n                \"count\": 4\n            }\n        },\n        {\n            \"class\": \"uk.gov.gchq.gaffer.data.element.Entity\",\n            \"group\": \"entity\",\n            \"vertex\": 3,\n            \"properties\": {\n                \"count\": 2\n            }\n        }\n    ]\n}\n}\n```\n\n----------------------------------------\n\nTITLE: Sorting Elements with Operation Chain in JSON\nDESCRIPTION: JSON representation of the operation chain for getting and sorting elements. Defines the same functionality as the Java version with element definitions and sorting parameters.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/core.md#2025-04-23_snippet_36\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"OperationChain\",\n  \"operations\" : [ {\n    \"class\" : \"GetElements\",\n    \"input\" : [ {\n      \"class\" : \"EntitySeed\",\n      \"vertex\" : 1\n    }, {\n      \"class\" : \"EntitySeed\",\n      \"vertex\" : 2\n    } ],\n    \"view\" : {\n      \"edges\" : {\n        \"edge\" : {\n          \"transientProperties\" : {\n            \"score\" : \"Integer\"\n          },\n          \"transformFunctions\" : [ {\n            \"selection\" : [ \"DESTINATION\", \"count\" ],\n            \"function\" : {\n              \"class\" : \"ExampleScoreFunction\"\n            },\n            \"projection\" : [ \"score\" ]\n          } ]\n        }\n      },\n      \"entities\" : {\n        \"entity\" : {\n          \"transientProperties\" : {\n            \"score\" : \"Integer\"\n          },\n          \"transformFunctions\" : [ {\n            \"selection\" : [ \"VERTEX\", \"count\" ],\n            \"function\" : {\n              \"class\" : \"ExampleScoreFunction\"\n            },\n            \"projection\" : [ \"score\" ]\n          } ]\n        }\n      }\n    }\n  }, {\n    \"class\" : \"Sort\",\n    \"comparators\" : [ {\n      \"class\" : \"ElementPropertyComparator\",\n      \"property\" : \"count\",\n      \"groups\" : [ \"entity\", \"edge\" ],\n      \"reversed\" : false\n    }, {\n      \"class\" : \"ElementPropertyComparator\",\n      \"property\" : \"score\",\n      \"groups\" : [ \"entity\", \"edge\" ],\n      \"reversed\" : false\n    } ],\n    \"deduplicate\" : true,\n    \"resultLimit\" : 4\n  } ]\n}\n```\n\n----------------------------------------\n\nTITLE: ByteEntity Key Package Schema for Edge Storage\nDESCRIPTION: Illustrates the Accumulo key-value pair structure for storing Edge objects using the ByteEntityKeyPackage implementation.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/development-guide/project-structure/components/accumulo-store.md#2025-04-23_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n| Row ID                                                         | Column Family | Column Qualifier    | Visibility          | Timestamp | Value                |\n| -------------------------------------------------------------- | ------------- | ------------------- | ------------------- | --------- | -------------------- |\n| (serialised_source_vertex)0x0(serialised_destination_vertex)0x | group         | group by properties | visibility property | timestamp | all other properties |\n| (serialised_destination_vertex)0y0(serialised_source_vertex)0y | group         | group by properties | visibility property | timestamp | all other properties |\n```\n\n----------------------------------------\n\nTITLE: Retrieving Elements from Gaffer Result Cache Using Job ID in JSON\nDESCRIPTION: This JSON operation chain retrieves elements from the Gaffer result cache using a specific job ID and the 'ALL' key.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/export.md#2025-04-23_snippet_18\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"class\" : \"OperationChain\",\n    \"operations\" : [ {\n        \"class\" : \"GetGafferResultCacheExport\",\n        \"jobId\" : \"af0a2efe-5f3c-458d-8fa2-93d0f28cbd82\",\n        \"key\" : \"ALL\"\n    } ]\n}\n```\n\n----------------------------------------\n\nTITLE: StoreProperties Changes\nDESCRIPTION: Removal of store properties ID handling from StoreProperties class. ID management moved to GraphLibrary.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/change-notes/migrating-from-v1-to-v2/deprecations.md#2025-04-23_snippet_15\n\n\n\n----------------------------------------\n\nTITLE: Gaffer Graph Operation Results in Java Format\nDESCRIPTION: The Java representation of the graph operation results showing entities and edges with their properties. Each result is displayed as a list pair with an empty left side and graph elements on the right side.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/join.md#2025-04-23_snippet_55\n\nLANGUAGE: java\nCODE:\n```\n[ [] --> [Entity[vertex=1,group=entity,properties=Properties[count=<java.lang.Integer>3]]] ]\n[ [] --> [Edge[group=edge,source=1,destination=2,directed=true,properties=Properties[count=<java.lang.Integer>3]]] ]\n[ [] --> [Edge[group=edge,source=1,destination=4,directed=true,properties=Properties[count=<java.lang.Integer>1]]] ]\n[ [] --> [Entity[vertex=2,group=entity,properties=Properties[count=<java.lang.Integer>1]]] ]\n[ [] --> [Edge[group=edge,source=2,destination=4,directed=true,properties=Properties[count=<java.lang.Integer>1]]] ]\n[ [] --> [Edge[group=edge,source=2,destination=5,directed=true,properties=Properties[count=<java.lang.Integer>1]]] ]\n[ [] --> [Edge[group=edge,source=3,destination=4,directed=true,properties=Properties[count=<java.lang.Integer>4]]] ]\n[ [] --> [Entity[vertex=4,group=entity,properties=Properties[count=<java.lang.Integer>1]]] ]\n[ [] --> [Entity[vertex=5,group=entity,properties=Properties[count=<java.lang.Integer>3]]] ]\n```\n\n----------------------------------------\n\nTITLE: Defining IsLongerThan Predicate in JSON\nDESCRIPTION: JSON representation of the IsLongerThan predicate with minLength 5 and orEqualTo flag set to false. Used to check if object length/size is greater than the specified value.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/predicates-guide/koryphe-predicates.md#2025-04-23_snippet_92\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"IsLongerThan\",\n  \"minLength\" : 5,\n  \"orEqualTo\" : false\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Graph IDs using GetAllGraphIds Operation\nDESCRIPTION: Operation to get a list of all sub-graphs within a Federated Store.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/administration-guide/gaffer-stores/federated-store.md#2025-04-23_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"GetAllGraphIds\"\n}\n```\n\nLANGUAGE: java\nCODE:\n```\nfinal GetAllGraphIds getAllGraphIDs = new GetAllGraphIds();\nIterable<? extends String> graphIds = federatedGraph.execute(getAllGraphIDs, user);\n```\n\n----------------------------------------\n\nTITLE: Setting Fixed Value Regardless of Input in JSON\nDESCRIPTION: JSON configuration for a function that returns a fixed value regardless of input. This configuration specifies the function class and the fixed value to return.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/koryphe-functions.md#2025-04-23_snippet_135\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"SetValue\",\n  \"value\" : 5\n}\n```\n\n----------------------------------------\n\nTITLE: Scoring Operation Chains using ScoreOperationChain in Gaffer\nDESCRIPTION: Illustrates the use of ScoreOperationChain to determine a score for an OperationChain. This operation is used for permission management and requires specific Store configuration.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/misc.md#2025-04-23_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nfinal ScoreOperationChain scoreOpChain = new ScoreOperationChain.Builder()\n        .operationChain(new OperationChain.Builder()\n                .first(new GetElements())\n                .then(new NamedOperation.Builder<Element, Iterable<? extends Element>>()\n                        .name(\"namedOp\")\n                        .build())\n                .then(new Limit<>(3))\n                .build())\n        .build();\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n\"class\" : \"ScoreOperationChain\",\n\"operationChain\" : {\n    \"class\" : \"OperationChain\",\n    \"operations\" : [ {\n    \"class\" : \"GetElements\"\n    }, {\n    \"class\" : \"NamedOperation\",\n    \"operationName\" : \"namedOp\"\n    }, {\n    \"class\" : \"Limit\",\n    \"resultLimit\" : 3,\n    \"truncate\" : true\n    } ]\n}\n}\n```\n\nLANGUAGE: python\nCODE:\n```\ng.ScoreOperationChain(\noperation_chain=g.OperationChain(\n    operations=[\n    g.GetElements(),\n    g.NamedOperation(\n        operation_name=\"namedOp\"\n    ),\n    g.Limit(\n        result_limit=3,\n        truncate=True\n    )\n    ]\n)\n)\n```\n\n----------------------------------------\n\nTITLE: Removed FederatedOperationChain Example in JSON\nDESCRIPTION: Example of the now-removed FederatedOperationChain that was previously used to send multiple operations to the same subgraph efficiently.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/change-notes/migrating-from-v1-to-v2/federation-changes.md#2025-04-23_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"class\": \"uk.gov.gchq.gaffer.operation.OperationChain\",\n    \"operations\": [\n        {\n            \"class\": \"uk.gov.gchq.gaffer.federatedstore.operation.FederatedOperationChain\",\n            \"operations\": {\n                [\n                    \"class\": \"ExampleOperation1\",\n                    \"class\": \"ExampleOperation2\"\n                ]\n            },\n            \"options\": {\n                \"gaffer.federatedstore.operation.graphIds\": \"graphA\"\n            }\n        },\n        {\n            \"class\": \"ExampleOperation3\",\n            \"options\": {\n                \"gaffer.federatedstore.operation.graphIds\": \"graphB\"\n            }\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Pulling Gaffer REST Docker Image\nDESCRIPTION: Command to pull the Gaffer REST Docker image version 2.0.0 from the GCHQ repository.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/administration-guide/gaffer-deployment/quickstart.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker pull gchq/gaffer-rest:2.0.0\n```\n\n----------------------------------------\n\nTITLE: Configuring PredicateMap with Date Key and Exists Predicate in JSON\nDESCRIPTION: JSON configuration for a PredicateMap that checks if a map contains a specific date key (epoch time 0) with a non-null value using the Exists predicate. The key parameter is configured as a Date object.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/predicates-guide/koryphe-predicates.md#2025-04-23_snippet_119\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"PredicateMap\",\n  \"predicate\" : {\n    \"class\" : \"Exists\"\n  },\n  \"key\" : {\n    \"Date\" : 0\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Split Points to Accumulo Table in Java\nDESCRIPTION: This snippet shows how to apply pre-computed split points to an Accumulo table using the SplitStoreFromFile operation. It reads split points from a file in HDFS and applies them to the table.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/administration-guide/gaffer-stores/accumulo-store.md#2025-04-23_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nSplitStoreFromFile splitStore = new SplitStoreFromFile.Builder()\n        .inputPath(splitsFilePath)\n        .build();\ngraph.execute(splitStore, new User());\n```\n\n----------------------------------------\n\nTITLE: Updating Types Schema JSON for Serialiser Specification\nDESCRIPTION: Example of updating the Types schema JSON to specify the serialiser class using the 'class' field under 'serialiser' instead of the deprecated 'serialiserClass' field.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/change-notes/migrating-from-v1-to-v2/deprecations.md#2025-04-23_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"types\": {\n    \"example.map\": {\n      \"description\": \"Map type description\",\n      \"class\": \"java.util.LinkedHashMap\",\n      \"serialiserClass\": \"uk.gov.gchq.gaffer.serialisation.implementation.MapSerialiser\"\n    }\n  }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"types\": {\n    \"example.map\": {\n      \"description\": \"Map type description\",\n      \"class\": \"java.util.LinkedHashMap\",\n      \"serialiser\": {\n        \"class\": \"uk.gov.gchq.gaffer.serialisation.implementation.MapSerialiser\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating JSON Structure and Data Types in JSON\nDESCRIPTION: This snippet showcases a JSON object with various data types including strings, numbers, arrays, nested objects, booleans, and null values. It illustrates the basic structure and syntax of JSON.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/user-guide/gaffer-basics/what-is-json.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"name\": \"example name\",\n    \"team\": \"example team\",\n    \"interests\": [\"stuff\", \"more stuff\"],\n    \"pets\": 2,\n    \"location\": {\n        \"country\": \"GB\",\n        \"region\": \"somewhere\"\n    },\n    \"present\": true,\n    \"appendices\": null\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Federated Store Properties\nDESCRIPTION: Properties file for setting up a Federated Store using the REST API. It specifies the store class and properties class required for Federated Store functionality.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/administration-guide/gaffer-stores/federated-store.md#2025-04-23_snippet_1\n\nLANGUAGE: properties\nCODE:\n```\ngaffer.store.class=uk.gov.gchq.gaffer.federatedstore.FederatedStore\ngaffer.store.properties.class=uk.gov.gchq.gaffer.federatedstore.FederatedStoreProperties\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Entity Schema with No Shared Properties in JSON\nDESCRIPTION: This snippet shows two JSON schemas for entities with the same group name but different properties, which cannot be merged due to lack of common properties.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/administration-guide/gaffer-stores/federated-store.md#2025-04-23_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"entities\": {\n        \"group1\": {\n            \"vertex\": \"string\",\n            \"properties\": {\n                \"property1\": \"string\"\n            }\n        }\n    }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"entities\": {\n        \"group1\": {\n            \"vertex\": \"string\",\n            \"properties\": {\n                \"property2\": \"string\"\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Spark Operations in Gaffer Store Properties\nDESCRIPTION: Configuration to enable Spark operations in the Gaffer store properties file.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/spark.md#2025-04-23_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\ngaffer.store.operation.declarations=sparkAccumuloOperationsDeclarations.json\n```\n\n----------------------------------------\n\nTITLE: Result of ToSingletonList in JSON\nDESCRIPTION: The JSON representation of the result from executing the ToSingletonList operation, showing the integer 4 as an element in a JSON array.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/core.md#2025-04-23_snippet_64\n\nLANGUAGE: json\nCODE:\n```\n[ 4 ]\n```\n\n----------------------------------------\n\nTITLE: Configuring InDateRangeDual Function in JSON\nDESCRIPTION: JSON configuration for an InDateRangeDual function with an end date of August 1, 2017. This can be used to serialize or deserialize the function configuration.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/predicates-guide/koryphe-predicates.md#2025-04-23_snippet_46\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"InDateRangeDual\",\n  \"end\" : \"2017/08/01\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring MkDocs Page Properties for Gaffer Documentation Home Page\nDESCRIPTION: YAML front matter that configures the home page for the Gaffer documentation. It hides the navigation sidebar and applies a custom home.html template.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/index.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nhide:\n  - navigation\ntemplate: home.html\n---\n```\n\n----------------------------------------\n\nTITLE: Querying Elements from Gaffer Graph\nDESCRIPTION: JSON query to retrieve elements from the graph using an EntitySeed.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/administration-guide/aggregation/ingest-example.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"class\": \"GetElements\",\n    \"input\": [\n        {\n            \"class\": \"EntitySeed\",\n            \"vertex\": \"Dave\"\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Python Graph Join Operation with KeyFunctionMatch\nDESCRIPTION: Demonstrates creating an operation chain with Join operation using KeyFunctionMatch. The operation includes entity definitions with count properties and custom key functions for matching.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/join.md#2025-04-23_snippet_46\n\nLANGUAGE: python\nCODE:\n```\ng.OperationChain( \noperations=[ \n    g.Join( \n    operation=g.GetAllElements(), \n    match_method=g.KeyFunctionMatch(\n        first_key_function=g.FunctionChain([\n            g.ExtractProperty(\"count\"),\n            g.Increment(increment=1)\n            ]),\n        second_key_function=g.ExtractProperty(\"count\")\n    ),\n    input=[ \n        g.Entity( \n        group=\"entity\", \n        properties={'count': 3}, \n        vertex=1 \n        ), \n        g.Entity( \n        group=\"entity\", \n        properties={'count': 1}, \n        vertex=4 \n        ), \n        g.Entity( \n        group=\"entity\", \n        properties={'count': 3}, \n        vertex=5 \n        ), \n        g.Entity( \n        group=\"entity\", \n        properties={'count': 30}, \n        vertex=6 \n        ) \n    ], \n    match_key=\"RIGHT\", \n    join_type=\"FULL\" \n    ) \n] \n)\n```\n\n----------------------------------------\n\nTITLE: Initializing Longest Function\nDESCRIPTION: Function that compares two objects and returns the longest one. Can compare strings, collections and other objects with a length concept.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/koryphe-functions.md#2025-04-23_snippet_103\n\nLANGUAGE: java\nCODE:\n```\nfinal Longest function = new Longest();\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"Longest\"\n}\n```\n\nLANGUAGE: python\nCODE:\n```\ng.Longest()\n```\n\n----------------------------------------\n\nTITLE: Visualizing a Directed Graph with Mermaid\nDESCRIPTION: Mermaid diagram showing a directed graph with vertices and edges that will be used in the Named Operations examples.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/administration-guide/named-operations.md#2025-04-23_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph TD\n  1(1, count=3) -- count=3 --> 2\n  1 -- count=1 --> 4\n  2(2, count=1) -- count=2 --> 3\n  2 -- count=1 --> 4(4, count=1)\n  2 -- count=1 --> 5(5, count=3)\n  3(3, count=2) -- count=4 --> 4\n```\n\n----------------------------------------\n\nTITLE: Initializing PredicateMap for FreqMap Comparison in Java\nDESCRIPTION: Creates a PredicateMap that extracts the 'key1' value from a map and checks if it's greater than 2. This allows applying predicates to specific map values.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/predicates-guide/koryphe-predicates.md#2025-04-23_snippet_112\n\nLANGUAGE: java\nCODE:\n```\nfinal PredicateMap function = new PredicateMap(\"key1\", new IsMoreThan(2L));\n```\n\n----------------------------------------\n\nTITLE: Initializing StringPrepend Function in Java\nDESCRIPTION: Creates a StringPrepend function that prepends a specified prefix to a string. This function takes a String as input and returns a new String with the prefix added at the beginning.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/koryphe-functions.md#2025-04-23_snippet_146\n\nLANGUAGE: java\nCODE:\n```\nfinal StringPrepend function = new StringPrepend(\"myPrefix\");\n```\n\n----------------------------------------\n\nTITLE: Configuring precise time window with startOffset and endOffset in JSON\nDESCRIPTION: JSON configuration for an InDateRange predicate that checks if a date is exactly 7 hours ago (but not 6 hours ago).\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/predicates-guide/koryphe-predicates.md#2025-04-23_snippet_28\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"InDateRange\",\n  \"startOffset\" : -7,\n  \"endOffset\" : -6,\n  \"endInclusive\" : false,\n  \"offsetUnit\" : \"HOUR\"\n}\n```\n\n----------------------------------------\n\nTITLE: Migration Steps Documentation Template for Breaking Changes\nDESCRIPTION: Template for documenting migration steps when a code change requires existing Gaffer users to make changes in their implementations. This should be added as a comment to issues labeled 'migration-required'.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/development-guide/ways-of-working.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### Migration Steps\n\n[Description of what needs to be done to adopt the code change with examples]\n```\n\n----------------------------------------\n\nTITLE: Specifying Cache Configuration File Location in store.properties\nDESCRIPTION: Code snippet demonstrating how to specify the location of cache configuration files in the store.properties file using the gaffer.cache.config.file property.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/administration-guide/gaffer-stores/store-guide.md#2025-04-23_snippet_1\n\nLANGUAGE: properties\nCODE:\n```\ngaffer.cache.config.file=/path/to/file\n```\n\n----------------------------------------\n\nTITLE: Creating a Graph Visualization with Mermaid\nDESCRIPTION: A Mermaid diagram showing a basic graph with a Person entity connected to a Software entity via a Created edge. The diagram includes properties for each entity and the relationship.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/development-guide/example-deployment/project-setup.md#2025-04-23_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph LR\n    A([\"Person\n\n        name: marko\n        age: 29\"])\n    --\n    \"Created\n     weight: 0.4\"\n    -->\n    B([\"Software\n\n        name: lop\n        lang: java\"])\n```\n\n----------------------------------------\n\nTITLE: GetWalks Builder Changes\nDESCRIPTION: Builder.operation method removed in favor of Builder.addOperations vararg method.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/change-notes/migrating-from-v1-to-v2/deprecations.md#2025-04-23_snippet_12\n\n\n\n----------------------------------------\n\nTITLE: Loading Schema Updates with Helm\nDESCRIPTION: Helm command to upgrade deployment with new schema configuration using file contents.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/administration-guide/gaffer-deployment/kubernetes-guide/helm-configuration.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nhelm upgrade my-graph gaffer-docker/gaffer --set-file graph.schema.\"schema\\.json\"=./schema.json --reuse-values\n```\n\n----------------------------------------\n\nTITLE: Python Package Requirements List\nDESCRIPTION: Detailed list of Python package dependencies with exact version numbers for documentation tools including MkDocs, Material theme, and related plugins. The versions are frozen to maintain build consistency and prevent breaking changes.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nBabel==2.12.1\ncertifi==2024.7.4\ncharset-normalizer==3.1.0\nclick==8.1.3\ncolorama==0.4.6\nghp-import==2.1.0\ngitdb==4.0.10\nGitPython~=3.1.35\nidna==3.7\nimportlib-metadata==6.6.0\nJinja2~=3.1.3\nMarkdown==3.3.7\nMarkupSafe==2.1.2\nmergedeep==1.3.4\nmike==1.1.2\nmkdocs==1.6\nmkdocs-redirects==1.2.1\nmkdocs-git-revision-date-localized-plugin==1.2.0\nmkdocs-material==9.5.25\nmkdocs-material-extensions==1.3\npackaging==23.1\nPygments==2.16\npymdown-extensions==10.2\npython-dateutil==2.8.2\npytz==2023.3\nPyYAML==6.0\npyyaml_env_tag==0.1\nregex==2023.5.5\nrequests~=2.32.0\nsix==1.16.0\nsmmap==5.0.0\nurllib3~=2.0.7\nverspec==0.1.0\nwatchdog==3.0.0\nzipp==3.19.1\n```\n\n----------------------------------------\n\nTITLE: Annotating JSON Type Info in Java\nDESCRIPTION: This Java code snippet shows how to annotate a field to include class information in JSON serialization. This is crucial for proper deserialization of non-primitive types when using sketches with the REST API.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/development-guide/rest-api-sketches.md#2025-04-23_snippet_0\n\nLANGUAGE: java\nCODE:\n```\n@JsonTypeInfo(use = JsonTypeInfo.Id.CLASS, property = \"class\")\n```\n\n----------------------------------------\n\nTITLE: Visualizing Potential Relationships in an Extended Graph using Mermaid\nDESCRIPTION: This Mermaid flowchart expands on the previous example by adding a third person, Steve, and demonstrating a potential relationship between Steve and Dave through their mutual friend Chris.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/user-guide/gaffer-basics/what-is-a-graph.md#2025-04-23_snippet_1\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart TD\n    subgraph Relationship\n        E((Person - Dave))\n        -- FRIENDS -->\n        F((Person - Chris)) \n        -- FRIENDS -->\n        B((Person - Steve)) \n        B-. POTENTIAL RELATIONSHIP .->E;\n    end\n```\n\n----------------------------------------\n\nTITLE: Deploying Accumulo Master Node\nDESCRIPTION: Docker command to deploy the Accumulo master node, the primary coordinator for the Accumulo cluster that must be running before other Accumulo nodes.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/administration-guide/gaffer-deployment/gaffer-docker/how-to-run.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndocker run \\\n       --detach \\\n       --name accumulo-master \\\n       --hostname accumulo-master \\\n       --net gaffer-example \\\n       --env ACCUMULO_CONF_DIR=\"/etc/accumulo/conf\" \\\n       --env HADOOP_USER_NAME=\"hadoop\" \\\n       --volume /custom/configs/accumulo:/etc/accumulo/conf \\\n       --volume /var/log/accumulo \\\n       gchq/gaffer:2.0.0-accumulo-2.0.1 master\n```\n\n----------------------------------------\n\nTITLE: Configuring ImportFromLocalFile Operation in Gaffer\nDESCRIPTION: JSON configuration to enable the ImportFromLocalFile operation in Gaffer. This snippet shows how to declare the operation class and its corresponding handler in the operationsDeclarations.json file.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/administration-guide/gaffer-config/config.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"operations\": [\n        {\n            \"operation\": \"uk.gov.gchq.gaffer.operation.impl.export.localfile.ImportFromLocalFile\",\n            \"handler\": {\n                \"class\": \"uk.gov.gchq.gaffer.store.operation.handler.export.localfile.ImportFromLocalFileHandler\"\n            }\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Executing NamedOperation in Gremlin (Python)\nDESCRIPTION: This snippet demonstrates how to execute a previously added NamedOperation called 'CountAllElements' using Gremlin in Python.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/user-guide/query/gremlin/custom-features.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ng.call(\"namedoperation\", {\"execute\": \"CountAllElements\"}).to_list()\n```\n\n----------------------------------------\n\nTITLE: Configuring Proxy Operations Declarations in JSON\nDESCRIPTION: JSON configuration file to enable Proxy Store operations including GetProxyUrl and GetProxyProperties handlers.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/proxy.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"operations\": [\n        {\n            \"operation\": \"uk.gov.gchq.gaffer.proxystore.operation.GetProxyUrl\",\n            \"handler\": {\n                \"class\": \"uk.gov.gchq.gaffer.proxystore.operation.handler.GetProxyUrlHandler\"\n            }\n        },\n        {\n            \"operation\": \"uk.gov.gchq.gaffer.proxystore.operation.GetProxyProperties\",\n            \"handler\": {\n                \"class\": \"uk.gov.gchq.gaffer.proxystore.operation.handler.GetProxyPropertiesHandler\"\n            }\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Store Configuration\nDESCRIPTION: Configuration required in store properties to enable the ExportToOtherGraph operation\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/export.md#2025-04-23_snippet_36\n\nLANGUAGE: properties\nCODE:\n```\ngaffer.store.operation.declarations=ExportToOtherGraphOperationDeclarations.json\n```\n\n----------------------------------------\n\nTITLE: Visualizing Gaffer Maven Module Structure with Mermaid Diagram\nDESCRIPTION: A Mermaid diagram showing the complete Gaffer project structure with 47 modules. It visually differentiates between Parent/Aggregator modules (green), JAR modules (blue), and WAR/Demo modules (red), illustrating the hierarchical relationships between all components.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/development-guide/project-structure/components/components.md#2025-04-23_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph LR\n    PP{uk.gov.gchq.gaffer:gaffer2} --> C{core}\n    PP --> I[integration-test]:::JAR\n    PP --> SI{store-implementation}\n    PP --> RI{rest-api}\n    PP --> L{library}\n    PP --> E{example}\n    C --> operation:::JAR\n    C --> cache:::JAR\n    C --> access:::JAR\n    C --> G[graph]:::JAR\n    C --> type:::JAR\n    C --> data:::JAR\n    C --> exception:::JAR\n    C --> store:::JAR\n    C --> common-util:::JAR\n    C --> serialisation:::JAR\n    SI --> accumulo-store:::JAR\n    SI --> map-store:::JAR\n    SI --> proxy-store:::JAR\n    SI --> federated-store:::JAR\n    RI --> spring-rest:::JAR\n    RI --> common-rest:::JAR\n    RI --> map-rest:::WarDemo\n    RI --> accumulo-rest:::WarDemo\n    RI --> core-rest:::JAR\n    L --> tinkerpop:::JAR\n    L --> sketches-library:::JAR\n    L --> CL{cache-library}\n    L --> hdfs-library:::JAR\n    L --> bitmap-library:::JAR\n    L --> time-library:::JAR\n    L --> flink-library:::JAR\n    L --> S{spark}\n    CL --> hazelcast-cache-service:::JAR\n    CL --> jcs-cache-service:::JAR\n    S --> spark-accumulo-library:::JAR\n    S --> spark-library:::JAR\n    E --> RT{road-traffic}\n    E --> B{basic}\n    E --> federated-demo:::JAR\n    RT --> road-traffic-model:::JAR\n    RT --> road-traffic-demo:::JAR\n    RT --> road-traffic-generators:::JAR\n    B --> basic-model:::JAR\n    B --> basic-rest:::WarDemo\n\n    classDef parentPOM fill:lightgreen;\n    classDef JAR fill:lightblue;\n    classDef WarDemo fill:lightcoral;\n    \n    class PP,C,SI,RI,L,E,CL,S,RT,B parentPOM\n```\n\n----------------------------------------\n\nTITLE: Implementing InRangeDual with Long Overlapping Range\nDESCRIPTION: Creates an InRangeDual predicate that checks if two Long values fall within the range 5-10, without requiring full containment of either boundary.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/predicates-guide/koryphe-predicates.md#2025-04-23_snippet_60\n\nLANGUAGE: java\nCODE:\n```\nfinal InRangeDual function = new InRangeDual.Builder<Long>()\n        .start(5L)\n        .end(10L)\n        .startFullyContained(false)\n        .endFullyContained(false)\n        .build();\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"InRangeDual\",\n  \"start\" : {\n    \"Long\" : 5\n  },\n  \"end\" : {\n    \"Long\" : 10\n  },\n  \"endFullyContained\" : false,\n  \"startFullyContained\" : false\n}\n```\n\nLANGUAGE: python\nCODE:\n```\ng.InRangeDual(\n    start=g.long(5),\n    end=g.long(10),\n    start_fully_contained=False,\n    end_fully_contained=False\n)\n```\n\n----------------------------------------\n\nTITLE: Building and Serving the Documentation Locally\nDESCRIPTION: Builds the documentation and serves it locally on port 8000, with automatic refresh when changes are detected. This is the recommended method for development as it allows immediate preview of changes.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmkdocs serve\n```\n\n----------------------------------------\n\nTITLE: Representing Graph Elements with Gaffer JSON Format\nDESCRIPTION: A comprehensive JSON structure representing a graph in Gaffer with entities and edges. The data includes vertex information, cardinality calculations using HyperLogLogPlus sketches, and edge relationships between vertices. Each element contains metadata about its group, properties, and relationships.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/get.md#2025-04-23_snippet_65\n\nLANGUAGE: json\nCODE:\n```\n\"count\" : 1,\n\"edgeGroup\" : {\n  \"java.util.TreeSet\" : [ \"edge\" ]\n}\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n}, {\n  \"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n  \"group\" : \"cardinality\",\n  \"vertex\" : 1,\n  \"properties\" : {\n    \"hllp\" : {\n      \"com.clearspring.analytics.stream.cardinality.HyperLogLogPlus\" : {\n        \"hyperLogLogPlus\" : {\n          \"hyperLogLogPlusSketchBytes\" : \"/////gUFAQH7Cw==\",\n          \"cardinality\" : 1\n        }\n      }\n    },\n    \"count\" : 1,\n    \"edgeGroup\" : {\n      \"java.util.TreeSet\" : [ \"edge1\" ]\n    }\n  }\n}, {\n  \"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n  \"group\" : \"entity1\",\n  \"vertex\" : 1,\n  \"properties\" : {\n    \"count\" : 3\n  }\n} ]\n```\n\nLANGUAGE: json\nCODE:\n```\n}, {\n\"2\" : [ {\n  \"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n  \"group\" : \"cardinality\",\n  \"vertex\" : 2,\n  \"properties\" : {\n    \"hllp\" : {\n      \"com.clearspring.analytics.stream.cardinality.HyperLogLogPlus\" : {\n        \"hyperLogLogPlus\" : {\n          \"hyperLogLogPlusSketchBytes\" : \"/////gUFAQP3DIQIggI=\",\n          \"cardinality\" : 3\n        }\n      }\n    },\n    \"count\" : 3,\n    \"edgeGroup\" : {\n      \"java.util.TreeSet\" : [ \"edge1\" ]\n    }\n  }\n}, {\n  \"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n  \"group\" : \"entity1\",\n  \"vertex\" : 2,\n  \"properties\" : {\n    \"count\" : 1\n  }\n} ]\n```\n\nLANGUAGE: json\nCODE:\n```\n}, {\n\"5\" : [ {\n  \"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n  \"group\" : \"entity1\",\n  \"vertex\" : 5,\n  \"properties\" : {\n    \"count\" : 3\n  }\n}, {\n  \"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n  \"group\" : \"cardinality\",\n  \"vertex\" : 5,\n  \"properties\" : {\n    \"hllp\" : {\n      \"com.clearspring.analytics.stream.cardinality.HyperLogLogPlus\" : {\n        \"hyperLogLogPlus\" : {\n          \"hyperLogLogPlusSketchBytes\" : \"/////gUFAQH7FA==\",\n          \"cardinality\" : 1\n        }\n      }\n    },\n    \"count\" : 1,\n    \"edgeGroup\" : {\n      \"java.util.TreeSet\" : [ \"edge\" ]\n    }\n  }\n}, {\n  \"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n  \"group\" : \"cardinality\",\n  \"vertex\" : 5,\n  \"properties\" : {\n    \"hllp\" : {\n      \"com.clearspring.analytics.stream.cardinality.HyperLogLogPlus\" : {\n        \"hyperLogLogPlus\" : {\n          \"hyperLogLogPlusSketchBytes\" : \"/////gUFAQP9A/4HgBI=\",\n          \"cardinality\" : 3\n        }\n      }\n    },\n    \"count\" : 3,\n    \"edgeGroup\" : {\n      \"java.util.TreeSet\" : [ \"edge1\" ]\n    }\n  }\n} ]\n```\n\nLANGUAGE: json\nCODE:\n```\n}, {\n\"6\" : [ {\n  \"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n  \"group\" : \"cardinality\",\n  \"vertex\" : 6,\n  \"properties\" : {\n    \"hllp\" : {\n      \"com.clearspring.analytics.stream.cardinality.HyperLogLogPlus\" : {\n        \"hyperLogLogPlus\" : {\n          \"hyperLogLogPlusSketchBytes\" : \"/////gUFAQP9CPoDhgo=\",\n          \"cardinality\" : 3\n        }\n      }\n    },\n    \"count\" : 3,\n    \"edgeGroup\" : {\n      \"java.util.TreeSet\" : [ \"edge1\" ]\n    }\n  }\n}, {\n  \"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n  \"group\" : \"entity1\",\n  \"vertex\" : 6,\n  \"properties\" : {\n    \"count\" : 3\n  }\n} ]\n```\n\nLANGUAGE: json\nCODE:\n```\n}, {\n\"3\" : [ {\n  \"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n  \"group\" : \"entity\",\n  \"vertex\" : 3,\n  \"properties\" : {\n    \"count\" : 2\n  }\n}, {\n  \"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n  \"group\" : \"cardinality\",\n  \"vertex\" : 3,\n  \"properties\" : {\n    \"hllp\" : {\n      \"com.clearspring.analytics.stream.cardinality.HyperLogLogPlus\" : {\n        \"hyperLogLogPlus\" : {\n          \"hyperLogLogPlusSketchBytes\" : \"/////gUFAQP9A/4H/BE=\",\n          \"cardinality\" : 3\n        }\n      }\n    },\n    \"count\" : 3,\n    \"edgeGroup\" : {\n      \"java.util.TreeSet\" : [ \"edge1\" ]\n    }\n  }\n} ]\n```\n\nLANGUAGE: json\nCODE:\n```\n}, {\n\"4\" : [ {\n  \"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n  \"group\" : \"entity1\",\n  \"vertex\" : 4,\n  \"properties\" : {\n    \"count\" : 1\n  }\n}, {\n  \"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n  \"group\" : \"cardinality\",\n  \"vertex\" : 4,\n  \"properties\" : {\n    \"hllp\" : {\n      \"com.clearspring.analytics.stream.cardinality.HyperLogLogPlus\" : {\n        \"hyperLogLogPlus\" : {\n          \"hyperLogLogPlusSketchBytes\" : \"/////gUFAQL9CPoD\",\n          \"cardinality\" : 2\n        }\n      }\n    },\n    \"count\" : 2,\n    \"edgeGroup\" : {\n      \"java.util.TreeSet\" : [ \"edge1\" ]\n    }\n  }\n} ]\n```\n\nLANGUAGE: json\nCODE:\n```\n}, {\n\"7\" : [ ]\n} ]\n```\n\nLANGUAGE: json\nCODE:\n```\n}, {\n\"edges\" : [ [ {\n  \"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n  \"group\" : \"edge1\",\n  \"source\" : 1,\n  \"destination\" : 2,\n  \"directed\" : true,\n  \"matchedVertex\" : \"SOURCE\",\n  \"properties\" : {\n    \"count\" : 3\n  }\n} ], [ {\n  \"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n  \"group\" : \"edge1\",\n  \"source\" : 2,\n  \"destination\" : 5,\n  \"directed\" : true,\n  \"matchedVertex\" : \"SOURCE\",\n  \"properties\" : {\n    \"count\" : 7\n  }\n} ], [ {\n  \"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n  \"group\" : \"edge1\",\n  \"source\" : 5,\n  \"destination\" : 6,\n  \"directed\" : true,\n  \"matchedVertex\" : \"SOURCE\",\n  \"properties\" : {\n    \"count\" : 11\n  }\n} ], [ {\n  \"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n  \"group\" : \"edge1\",\n  \"source\" : 6,\n  \"destination\" : 3,\n  \"directed\" : true,\n  \"matchedVertex\" : \"SOURCE\",\n  \"properties\" : {\n    \"count\" : 9\n  }\n} ], [ {\n  \"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n  \"group\" : \"edge1\",\n  \"source\" : 3,\n  \"destination\" : 2,\n  \"directed\" : true,\n  \"matchedVertex\" : \"SOURCE\",\n  \"properties\" : {\n    \"count\" : 5\n  }\n} ], [ {\n  \"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n  \"group\" : \"edge1\",\n  \"source\" : 2,\n  \"destination\" : 5,\n  \"directed\" : true,\n  \"matchedVertex\" : \"SOURCE\",\n  \"properties\" : {\n    \"count\" : 7\n  }\n} ] ],\n```\n\nLANGUAGE: json\nCODE:\n```\n\"entities\" : [ {\n  \"1\" : [ {\n    \"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n    \"group\" : \"cardinality\",\n    \"vertex\" : 1,\n    \"properties\" : {\n      \"hllp\" : {\n        \"com.clearspring.analytics.stream.cardinality.HyperLogLogPlus\" : {\n          \"hyperLogLogPlus\" : {\n            \"hyperLogLogPlusSketchBytes\" : \"/////gUFAQH9Fg==\",\n            \"cardinality\" : 1\n          }\n        }\n      },\n      \"count\" : 1,\n      \"edgeGroup\" : {\n        \"java.util.TreeSet\" : [ \"edge\" ]\n      }\n    }\n  }, {\n    \"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n    \"group\" : \"cardinality\",\n    \"vertex\" : 1,\n    \"properties\" : {\n      \"hllp\" : {\n        \"com.clearspring.analytics.stream.cardinality.HyperLogLogPlus\" : {\n          \"hyperLogLogPlus\" : {\n            \"hyperLogLogPlusSketchBytes\" : \"/////gUFAQH7Cw==\",\n            \"cardinality\" : 1\n          }\n        }\n      },\n      \"count\" : 1,\n      \"edgeGroup\" : {\n        \"java.util.TreeSet\" : [ \"edge1\" ]\n      }\n    }\n  }, {\n    \"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n    \"group\" : \"entity1\",\n    \"vertex\" : 1,\n    \"properties\" : {\n      \"count\" : 3\n    }\n  } ]\n```\n\nLANGUAGE: json\nCODE:\n```\n}, {\n  \"2\" : [ {\n    \"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n    \"group\" : \"cardinality\",\n    \"vertex\" : 2,\n    \"properties\" : {\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeValueToTuple Function in JSON\nDESCRIPTION: JSON configuration for the TypeValueToTuple function. This can be used to instantiate the function in a Gaffer JSON operation chain.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/gaffer-functions.md#2025-04-23_snippet_60\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"TypeValueToTuple\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing GetProxyProperties Operation\nDESCRIPTION: Examples of implementing the GetProxyProperties operation to retrieve proxy-specific configuration.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/proxy.md#2025-04-23_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nfinal GetProxyProperties getProxyProperties = new GetProxyProperties.Builder()\n        .build();\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n\"class\" : \"GetProxyProperties\"\n}\n```\n\nLANGUAGE: python\nCODE:\n```\ng.GetProxyProperties()\n```\n\n----------------------------------------\n\nTITLE: Implementing Collection Intersection in JSON\nDESCRIPTION: JSON representation of the CollectionIntersect operator that returns items common to two collections.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/binary-operators-guide/koryphe-operators.md#2025-04-23_snippet_25\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"uk.gov.gchq.koryphe.impl.binaryoperator.CollectionIntersect\"\n}\n```\n\n----------------------------------------\n\nTITLE: Visualizing Graph Before Aggregation using Mermaid\nDESCRIPTION: This Mermaid flowchart demonstrates a simple graph before aggregation, showing multiple edges with separate properties between nodes A and B.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/user-guide/gaffer-basics/what-is-aggregation.md#2025-04-23_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart LR\n    A(A)\n    --\n    \"Edge\n    prop: 1\"\n    --> B(B)\n    A(A)\n    --\n    \"Edge\n    prop: 1\"\n    --> B(B)\n```\n\n----------------------------------------\n\nTITLE: Building a Custom Gaffer Docker Image\nDESCRIPTION: Command for building a custom Docker image from a Dockerfile in the current directory.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/administration-guide/gaffer-deployment/gaffer-docker/gaffer-images.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker build -t my-gaffer-rest .\n```\n\n----------------------------------------\n\nTITLE: Example Neptune CSV Format\nDESCRIPTION: Example of Neptune CSV format used for import and export in Gaffer, showing both tabular and CSV representations of the data.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/user-guide/query/gaffer-syntax/import-export/csv.md#2025-04-23_snippet_7\n\nLANGUAGE: csv\nCODE:\n```\n:ID,name:String,age:Int,lang:String,:LABEL,:START_ID,:END_ID,:TYPE,weight:Double\nv1,marko,29,,person,,,,\nv2,lop,,java,software,,,,\ne1,,,,,v1,v2,created,0.4\n```\n\n----------------------------------------\n\nTITLE: Store Cache Property Rename in Gaffer 2.1.0\nDESCRIPTION: Configuration property rename for cache service entries suffix. Changed from 'gaffer.cache.service.name.suffix' to 'gaffer.cache.service.default.suffix'.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/change-notes/changelist/v2.1.0-changes.md#2025-04-23_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\ngaffer.cache.service.name.suffix -> gaffer.cache.service.default.suffix\n```\n\n----------------------------------------\n\nTITLE: Classic Key Package Schema for Entity Storage\nDESCRIPTION: Demonstrates the Accumulo key-value pair structure for storing Entity objects using the ClassicKeyPackage implementation.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/development-guide/project-structure/components/accumulo-store.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Row ID              | Column Family | Column Qualifier    | Visibility          | Timestamp | Value                |\n| ------------------- | ------------- | ------------------- | ------------------- | --------- | -------------------- |\n| (serialised_vertex) | group         | group by properties | visibility property | timestamp | all other properties |\n```\n\n----------------------------------------\n\nTITLE: Querying Edges by ID in OpenCypher\nDESCRIPTION: Shows how to query edges using string IDs in openCypher and its equivalent Gremlin translation.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/user-guide/query/opencypher.md#2025-04-23_snippet_1\n\nLANGUAGE: cypher\nCODE:\n```\nMATCH (s)-[r]->(d) WHERE ID(r) IN ['[0, 1]', '[2, 3]'] RETURN r\n```\n\nLANGUAGE: groovy\nCODE:\n```\ng.E().has('~id', within('[0, 1]', '[2, 3]')).project('r').by(__.project('  cypher.element', '  cypher.inv', '  cypher.outv').by(__.valueMap().with('~tinkerpop.valueMap.tokens')).by(__.inV().id()).by(__.outV().id())).toList()\n```\n\n----------------------------------------\n\nTITLE: ByteEntity Key Package Schema for Entity Storage\nDESCRIPTION: Details the Accumulo key-value pair structure for storing Entity objects using the ByteEntityKeyPackage implementation.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/development-guide/project-structure/components/accumulo-store.md#2025-04-23_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n| Row ID                | Column Family | Column Qualifier    | Visibility          | Timestamp | Value                |\n| -------------------   | ------------- | ------------------- | ------------------- | --------- | -------------------- |\n| (serialised_vertex)01 | group         | group by properties | visibility property | timestamp | all other properties |\n```\n\n----------------------------------------\n\nTITLE: Visualizing Directed Graph with Mermaid\nDESCRIPTION: Mermaid diagram showing a directed graph with interconnected nodes used as reference for control flow operation examples. The graph demonstrates node relationships with directed edges between nodes 1-8.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/flow.md#2025-04-23_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph LR\n  1 --> 2\n  1 --> 5\n  2 --> 5\n  3 --> 2\n  3 --> 4\n  4 --> 7\n  5 --> 6\n  6 --> 3\n  6 --> 7\n  8 --> 5\n  8 --> 8\n```\n\n----------------------------------------\n\nTITLE: Using ToNull Function in Python\nDESCRIPTION: Python code to create a ToNull function instance using the Gaffer Python client library.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/koryphe-functions.md#2025-04-23_snippet_176\n\nLANGUAGE: python\nCODE:\n```\ng.ToNull()\n```\n\n----------------------------------------\n\nTITLE: Configuring Graph Metadata in YAML\nDESCRIPTION: YAML configuration for setting basic graph metadata like description and ID.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/administration-guide/gaffer-deployment/kubernetes-guide/helm-configuration.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ngraph:\n  config:\n    description: \"My graph description\"\n```\n\n----------------------------------------\n\nTITLE: Visualizing Graph After Aggregation using Mermaid\nDESCRIPTION: This Mermaid flowchart shows the same graph after aggregation, where the multiple edges between nodes A and B are combined into a single edge with summed properties.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/user-guide/gaffer-basics/what-is-aggregation.md#2025-04-23_snippet_1\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart LR\n    A(A)\n    --\n    \"Edge\n    prop: 2\"\n    --> B(B)\n```\n\n----------------------------------------\n\nTITLE: Visualizing Federated Store Graph Structure\nDESCRIPTION: Mermaid diagram showing the structure of two subgraphs (Graph A and Graph B) within a Federated Store, including entities and their relationships.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/federated-operation.md#2025-04-23_snippet_4\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph LR\n    subgraph Federated Store\n        subgraph Graph A\n            direction TB\n            A((Person<br>id: 1<br>name: bob<br>count: 1)) --works as--> B((Job<br>id: 2<br>title: builder))\n            A --lives in--> C((Place<br>id: 3<br>name: bobsville))\n        end\n            subgraph Graph B\n            direction TB\n            D((Person<br>id: 1<br>name: bob<br>count: 1)) --drives--> E((Vehicle<br>id: 4<br>type: digger))\n            E --make/model--> F((Manufacturer<br>id: 5<br>name: JCB))\n        end\n    end\n```\n\n----------------------------------------\n\nTITLE: Graph Visualization with Mermaid\nDESCRIPTION: A graph visualization showing the connections between vertices used in the GetWalks examples.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/get.md#2025-04-23_snippet_33\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph LR\n  1 --> 2\n  1 --> 5\n  2 --> 5\n  3 --> 2\n  3 --> 4\n  4 --> 7\n  5 --> 6\n  6 --> 3\n  6 --> 7\n  8 --> 5\n  8 --> 8\n```\n\n----------------------------------------\n\nTITLE: Configuring PredicateMap for FreqMap Comparison in JSON\nDESCRIPTION: JSON configuration for a PredicateMap that extracts the 'key1' value from a map and checks if it's greater than 2. The predicate parameter contains the nested IsMoreThan predicate.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/predicates-guide/koryphe-predicates.md#2025-04-23_snippet_113\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"PredicateMap\",\n  \"predicate\" : {\n    \"class\" : \"IsMoreThan\",\n    \"orEqualTo\" : false,\n    \"value\" : {\n      \"Long\" : 2\n    }\n  },\n  \"key\" : \"key1\"\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Results from GetWalks Operation in Gaffer\nDESCRIPTION: Detailed JSON representation of the GetWalks operation results, showing the complete structure of graph walks including edges and entities at each step. The response includes complete entity and edge properties for each vertex in the walks.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/get.md#2025-04-23_snippet_54\n\nLANGUAGE: json\nCODE:\n```\n[ {\n  \"edges\" : [ [ {\n    \"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n    \"group\" : \"edge1\",\n    \"source\" : 2,\n    \"destination\" : 5,\n    \"directed\" : true,\n    \"matchedVertex\" : \"DESTINATION\",\n    \"properties\" : {\n      \"count\" : 7\n    }\n  } ], [ {\n    \"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n    \"group\" : \"edge1\",\n    \"source\" : 1,\n    \"destination\" : 2,\n    \"directed\" : true,\n    \"matchedVertex\" : \"DESTINATION\",\n    \"properties\" : {\n      \"count\" : 3\n    }\n  } ] ],\n  \"entities\" : [ {\n    \"5\" : [ {\n      \"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n      \"group\" : \"entity1\",\n      \"vertex\" : 5,\n      \"properties\" : {\n        \"count\" : 3\n      }\n    } ]\n  }, {\n    \"2\" : [ {\n      \"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n      \"group\" : \"entity1\",\n      \"vertex\" : 2,\n      \"properties\" : {\n        \"count\" : 1\n      }\n    } ]\n  }, {\n    \"1\" : [ {\n      \"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n      \"group\" : \"entity1\",\n      \"vertex\" : 1,\n      \"properties\" : {\n        \"count\" : 3\n      }\n    } ]\n  } ]\n}, {\n  \"edges\" : [ [ {\n    \"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n    \"group\" : \"edge1\",\n    \"source\" : 2,\n    \"destination\" : 5,\n    \"directed\" : true,\n    \"matchedVertex\" : \"DESTINATION\",\n    \"properties\" : {\n      \"count\" : 7\n    }\n  } ], [ {\n    \"class\" : \"uk.gov.gchq.gaffer.data.element.Edge\",\n    \"group\" : \"edge1\",\n    \"source\" : 3,\n    \"destination\" : 2,\n    \"directed\" : true,\n    \"matchedVertex\" : \"DESTINATION\",\n    \"properties\" : {\n      \"count\" : 5\n    }\n  } ] ],\n  \"entities\" : [ {\n    \"5\" : [ {\n      \"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n      \"group\" : \"entity1\",\n      \"vertex\" : 5,\n      \"properties\" : {\n        \"count\" : 3\n      }\n    } ]\n  }, {\n    \"2\" : [ {\n      \"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n      \"group\" : \"entity1\",\n      \"vertex\" : 2,\n      \"properties\" : {\n        \"count\" : 1\n      }\n    } ]\n  }, {\n    \"3\" : [ {\n      \"class\" : \"uk.gov.gchq.gaffer.data.element.Entity\",\n      \"group\" : \"entity\",\n      \"vertex\" : 3,\n      \"properties\" : {\n        \"count\" : 2\n      }\n    } ]\n  } ]\n} ]\n```\n\n----------------------------------------\n\nTITLE: Configuring DictionaryLookup in JSON\nDESCRIPTION: JSON configuration for the DictionaryLookup function with a dictionary mapping integers to strings.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/koryphe-functions.md#2025-04-23_snippet_29\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"DictionaryLookup\",\n  \"dictionary\" : {\n    \"1\" : \"one\",\n    \"2\" : \"two\",\n    \"3\" : \"three\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing ExtractWalkVertex in Java\nDESCRIPTION: Creates a new ExtractWalkVertex function to extract the source vertex from a Walk. This function takes no parameters and returns the source vertex.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/gaffer-functions.md#2025-04-23_snippet_21\n\nLANGUAGE: java\nCODE:\n```\nfinal ExtractWalkVertex function = new ExtractWalkVertex();\n```\n\n----------------------------------------\n\nTITLE: Converting Values to Integer with cypherToInteger\nDESCRIPTION: Demonstrates converting edge weight values to integer type using cypherToInteger().\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/gremlin-guide/custom-functions.md#2025-04-23_snippet_2\n\nLANGUAGE: groovy\nCODE:\n```\ng.E().values('weight').map(cypherToInteger())\n```\n\n----------------------------------------\n\nTITLE: GetProxyUrl Results Example\nDESCRIPTION: Example results from executing the GetProxyUrl operation showing the REST API endpoint.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/proxy.md#2025-04-23_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n\"http://gaffer-rest:8080/rest\"\n```\n\n----------------------------------------\n\nTITLE: Filtered Edge Query in Gremlin Python\nDESCRIPTION: Shows how to query edges with a weight property filter using Gremlin. Retrieves 'Created' edges from vertex 'John' with weight greater than 0.4.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/user-guide/query/gremlin/gremlin.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ng.V(\"John\").outE(\"Created\").has(\"weight\", P.gt(0.4)).to_list()\n```\n\n----------------------------------------\n\nTITLE: Adding Gaffer Helm Repository\nDESCRIPTION: Command to add the Gaffer Docker repository to Helm, which provides access to all Gaffer-related Helm charts including the main Gaffer application, Accumulo, HDFS, JupyterHub integrations, and example data.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/administration-guide/gaffer-deployment/kubernetes-guide/running-on-kubernetes.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo add gaffer-docker https://gchq.github.io/gaffer-docker\n```\n\n----------------------------------------\n\nTITLE: Configuring ExportToOtherAuthorisedGraph Operation in Gaffer\nDESCRIPTION: Example property setting that specifies the path to the ExportToOtherAuthorisedGraphOperationDeclarations.json file. This configuration is required to enable the ExportToOtherAuthorisedGraph operation in a Gaffer graph.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/export.md#2025-04-23_snippet_29\n\nLANGUAGE: plaintext\nCODE:\n```\ngaffer.store.operation.declarations=/path/to/ExportToOtherAuthorisedGraphOperationDeclarations.json\n```\n\n----------------------------------------\n\nTITLE: Predicate Support Table in Markdown\nDESCRIPTION: Table showing specialized predicates supported by different sketch property types.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/properties-guide/advanced.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nProperty | Predicate\n-------- | ---------\n`HyperLogLogPlus` | [`uk.gov.gchq.gaffer.sketches.clearspring.cardinality.predicate.HyperLogLogPlusIsLessThan`](../predicates-guide/gaffer-predicates.md#hyperloglogplusislessthan)\n`HllSketch` | [`uk.gov.gchq.gaffer.sketches.datasketches.cardinality.predicate.HllSketchIsLessThan`]\n```\n\n----------------------------------------\n\nTITLE: Results of KeyFunctionMatch Join in JSON (Partial)\nDESCRIPTION: Partial JSON representation of the KeyFunctionMatch join results. The snippet shows the beginning of the result structure which would contain matches where the incremented LEFT count property matches the RIGHT count property.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/join.md#2025-04-23_snippet_20\n\nLANGUAGE: json\nCODE:\n```\n[\n    {\n        \"values\": {\n            \"LEFT\": [\n                {\n                    \"class\": \"uk.gov.gchq.gaffer.data.element.Entity\",\n                    \"group\": \"entity\",\n```\n\n----------------------------------------\n\nTITLE: Initializing PredicateMap with Date Key and Exists Predicate in Java\nDESCRIPTION: Creates a PredicateMap that checks if a map contains a specific date key (epoch time 0) with a non-null value using the Exists predicate. This allows checking for the existence of time-based entries.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/predicates-guide/koryphe-predicates.md#2025-04-23_snippet_118\n\nLANGUAGE: java\nCODE:\n```\nfinal PredicateMap function = new PredicateMap(new Date(0L), new Exists());\n```\n\n----------------------------------------\n\nTITLE: Displaying Gaffer Walks in Java Format\nDESCRIPTION: Java representation of two graph walks in Gaffer. Each walk shows a path through connected vertices in the graph, with the first walk going from vertex 5 to 2 to 1, and the second from vertex 5 to 2 to 3.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/get.md#2025-04-23_snippet_74\n\nLANGUAGE: java\nCODE:\n```\nuk.gov.gchq.gaffer.data.graph.Walk[ 5 --> 2 --> 1 ]\nuk.gov.gchq.gaffer.data.graph.Walk[ 5 --> 2 --> 3 ]\n```\n\n----------------------------------------\n\nTITLE: Gremlin Explain Query\nDESCRIPTION: This snippet shows an example Gremlin query that can be submitted to the '/rest/gremlin/explain' endpoint for explanation of how it maps to Gaffer operation chains.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/user-guide/query/gremlin/custom-features.md#2025-04-23_snippet_6\n\nLANGUAGE: groovy\nCODE:\n```\ng.V().hasLabel('person').toList()\n```\n\n----------------------------------------\n\nTITLE: Using ExtractWalkVertex in Python\nDESCRIPTION: Python code to create an ExtractWalkVertex function. This function extracts the source vertex from a Walk.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/gaffer-functions.md#2025-04-23_snippet_23\n\nLANGUAGE: python\nCODE:\n```\ng.ExtractWalkVertex()\n```\n\n----------------------------------------\n\nTITLE: Using ExtractWalkEntitiesFromHop in Python\nDESCRIPTION: Python code to create an ExtractWalkEntitiesFromHop function. This function extracts the set of entities from a single hop in a Walk.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/gaffer-functions.md#2025-04-23_snippet_20\n\nLANGUAGE: python\nCODE:\n```\ng.ExtractWalkEntitiesFromHop( \n  hop=1 \n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Divide in JSON\nDESCRIPTION: JSON configuration for the Divide function which takes a pair of integers and returns their quotient and remainder.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/koryphe-functions.md#2025-04-23_snippet_32\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"Divide\"\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Elements From Kafka - Python Implementation\nDESCRIPTION: Python implementation for adding elements from Kafka using AddElementsFromKafka operation.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/flink.md#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ng.AddElementsFromKafka( \ntopic=\"topic1\", \ngroup_id=\"groupId1\", \nbootstrap_servers=[ \n    \"hostname1:8080,hostname2:8080\" \n], \nelement_generator=\"uk.gov.gchq.gaffer.doc.operation.generator.ElementGenerator\", \nparallelism=1 \n)\n```\n\n----------------------------------------\n\nTITLE: Running Integration Tests\nDESCRIPTION: Maven command to execute the integration test suite after configuring the Accumulo store properties and permissions.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/development-guide/project-structure/components/accumulo-store.md#2025-04-23_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nmvn verify\n```\n\n----------------------------------------\n\nTITLE: Classic Key Package Schema for Edge Storage\nDESCRIPTION: Shows the Accumulo key-value pair structure for storing Edge objects using the ClassicKeyPackage implementation.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/development-guide/project-structure/components/accumulo-store.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Row ID                                                       | Column Family | Column Qualifier    | Visibility          | Timestamp | Value                |\n| ------------------------------------------------------------ | ------------- | ------------------- | ------------------- | --------- | -------------------- |\n| (serialised_source_vertex)0(serialised_destination_vertex)0x | group         | group by properties | visibility property | timestamp | all other properties |\n| (serialised_destination_vertex)0(serialised_source_vertex)0y | group         | group by properties | visibility property | timestamp | all other properties |\n```\n\n----------------------------------------\n\nTITLE: Deploying Accumulo Monitor Node\nDESCRIPTION: Docker command to deploy the Accumulo monitor node that provides a web interface for monitoring the Accumulo cluster's status.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/administration-guide/gaffer-deployment/gaffer-docker/how-to-run.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ndocker run \\\n       --detach \\\n       --name accumulo-monitor \\\n       --hostname accumulo-monitor \\\n       --net gaffer-example \\\n       --publish 9995:9995 \\\n       --env ACCUMULO_CONF_DIR=\"/etc/accumulo/conf\" \\\n       --env HADOOP_USER_NAME=\"hadoop\" \\\n       --volume /custom/configs/accumulo:/etc/accumulo/conf \\\n       --volume /var/log/accumulo \\\n       gchq/gaffer:2.0.0-accumulo-2.0.1 monitor\n```\n\n----------------------------------------\n\nTITLE: Results of ElementMatch Right Key Outer Join in Java Format\nDESCRIPTION: The Java representation of results from a right key outer join using ElementMatch. The results show multiple map tuples where the LEFT value is null and the RIGHT value contains various Edge and Entity objects.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/join.md#2025-04-23_snippet_60\n\nLANGUAGE: java\nCODE:\n```\n[ null --> Edge[source=1,destination=4,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=<java.lang.Integer>1]] ]\n[ null --> Edge[source=3,destination=4,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=<java.lang.Integer>4]] ]\n[ null --> Entity[vertex=2,group=entity,properties=Properties[count=<java.lang.Integer>1]] ]\n[ null --> Edge[source=2,destination=3,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=<java.lang.Integer>2]] ]\n[ null --> Entity[vertex=3,group=entity,properties=Properties[count=<java.lang.Integer>2]] ]\n[ null --> Edge[source=2,destination=4,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=<java.lang.Integer>1]] ]\n[ null --> Edge[source=1,destination=2,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=<java.lang.Integer>3]] ]\n[ null --> Edge[source=2,destination=5,directed=true,matchedVertex=SOURCE,group=edge,properties=Properties[count=<java.lang.Integer>1]] ]\n```\n\n----------------------------------------\n\nTITLE: Splitting Strings with cypherSplit\nDESCRIPTION: Shows how to split strings using cypherSplit() with project steps.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/gremlin-guide/custom-functions.md#2025-04-23_snippet_13\n\nLANGUAGE: groovy\nCODE:\n```\ng.V().hasLabel('person')\\n    .project('result')\\n        .by(__.project('a', 'b')\\n            .by(__.values('name'))\\n            .by(__.constant('e'))\\n            .select(values)\\n            .map(cypherSplit()))\n```\n\n----------------------------------------\n\nTITLE: Migrating SeedMatching with EdgeSeeds in JSON\nDESCRIPTION: Example of migrating from SeedMatching.EQUAL to using a View for filtering Edges with EdgeSeeds in JSON. This replaces the deprecated seedMatching field with a view specifying the relevant edge group.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/change-notes/migrating-from-v1-to-v2/deprecations.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"class\" : \"GetElements\",\n    \"input\" : [ {\n        \"class\" : \"EdgeSeed\",\n        \"source\" : \"source\",\n        \"destination\" : \"dest\",\n        \"matchedVertex\" : \"SOURCE\",\n        \"directedType\" : \"DIRECTED\"\n    } ],\n    \"seedMatching\" : \"EQUAL\"\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"class\" : \"GetElements\",\n    \"input\" : [ {\n        \"class\" : \"EdgeSeed\",\n        \"source\" : \"source\",\n        \"destination\" : \"dest\",\n        \"matchedVertex\" : \"SOURCE\",\n        \"directedType\" : \"DIRECTED\"\n    } ],\n    \"view\" : {\n        \"edges\" : {\n            \"relevantEdgeGroup\" : { }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Running GetAdjacentIds Operation Multiple Times with While in JSON\nDESCRIPTION: JSON representation of a While operation that runs GetAdjacentIds three times with OUTGOING direction. The input is an EntitySeed with vertex value 1, and the condition is set to true to allow execution for the specified number of repeats.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/flow.md#2025-04-23_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"While\",\n  \"operation\" : {\n    \"class\" : \"GetAdjacentIds\",\n    \"includeIncomingOutGoing\" : \"OUTGOING\"\n  },\n  \"maxRepeats\" : 3,\n  \"condition\" : true,\n  \"input\" : [ {\n    \"class\" : \"EntitySeed\",\n    \"class\" : \"EntitySeed\",\n    \"vertex\" : 1\n  } ]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Minimum Value Selection in JSON\nDESCRIPTION: JSON representation of the Min operator that returns the minimum value between two comparable inputs.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/binary-operators-guide/koryphe-operators.md#2025-04-23_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"uk.gov.gchq.koryphe.impl.binaryoperator.Min\"\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying a Federated Store Graph with Helm\nDESCRIPTION: Command to install a Gaffer graph with a Federated Store using the federated.yaml configuration file created earlier. This enables connecting to multiple graphs through a single endpoint.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/administration-guide/gaffer-deployment/kubernetes-guide/simple-deployment.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nhelm install federated gaffer-docker/gaffer -f federated.yaml\n```\n\n----------------------------------------\n\nTITLE: Exporting to Gaffer Result Cache and Retrieving Results in JSON\nDESCRIPTION: This JSON operation chain exports all graph elements to a Gaffer result cache, discards the output, and then retrieves the exported elements from the cache with key 'ALL'.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/export.md#2025-04-23_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"class\" : \"OperationChain\",\n    \"operations\" : [ {\n        \"class\" : \"GetAllElements\"\n    }, {\n        \"class\" : \"ExportToGafferResultCache\"\n    }, {\n        \"class\" : \"DiscardOutput\"\n    }, {\n        \"class\" : \"GetGafferResultCacheExport\",\n        \"key\" : \"ALL\"\n    } ]\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Results from Query-time Aggregation in Gaffer\nDESCRIPTION: JSON output from the query-time aggregation operation, showing the aggregated Edge with summed 'added' and 'removed' properties (13 and 8), along with the Person entity.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/user-guide/query/gaffer-syntax/filtering.md#2025-04-23_snippet_21\n\nLANGUAGE: json\nCODE:\n```\n[\n    {\n        \"class\": \"uk.gov.gchq.gaffer.data.element.Edge\",\n        \"group\": \"Commit\",\n        \"source\": \"John\",\n        \"destination\": \"1\",\n        \"directed\": true,\n        \"matchedVertex\": \"SOURCE\",\n        \"properties\": {\n            \"added\": 13,\n            \"removed\": 8\n        }\n    },\n    {\n        \"class\": \"uk.gov.gchq.gaffer.data.element.Entity\",\n        \"group\": \"Person\",\n        \"vertex\": \"John\",\n        \"properties\": {}\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Integer Type Conversion\nDESCRIPTION: Function to convert various input types to Integer. Handles numeric strings and other number types.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/koryphe-functions.md#2025-04-23_snippet_168\n\nLANGUAGE: java\nCODE:\n```\nfinal ToInteger function = new ToInteger();\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"uk.gov.gchq.koryphe.impl.function.ToInteger\"\n}\n```\n\nLANGUAGE: python\nCODE:\n```\ng.ToInteger()\n```\n\n----------------------------------------\n\nTITLE: Graph Visualization with Mermaid\nDESCRIPTION: Mermaid diagram showing the structure of a graph with a Person vertex connected to a Repository vertex via a Commit edge with aggregated properties.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/administration-guide/aggregation/ingest-example.md#2025-04-23_snippet_6\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph LR\n    A([\"Person\n\n        ID: Dave\"])\n    --\n    \"Commit\n     first: 2015-12-25\n     latest: 2023-01-01\n     count: 3\"\n    -->\n    B([\"Repository\n\n        ID: r1\"])\n```\n\n----------------------------------------\n\nTITLE: Getting Collection Size with cypherSize\nDESCRIPTION: Demonstrates getting the size of a collection using cypherSize().\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/gremlin-guide/custom-functions.md#2025-04-23_snippet_6\n\nLANGUAGE: groovy\nCODE:\n```\ng.E().values('weight').fold().map(cypherSize())\n```\n\n----------------------------------------\n\nTITLE: Adding Elements From File - JSON Configuration\nDESCRIPTION: JSON configuration for AddElementsFromFile operation specifying the required parameters.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/flink.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n\"class\" : \"AddElementsFromFile\",\n\"filename\" : \"filename\",\n\"elementGenerator\" : \"ElementGenerator\",\n\"parallelism\" : 1,\n\"skipInvalidElements\" : false,\n\"validate\" : true\n}\n```\n\n----------------------------------------\n\nTITLE: Rounding Numbers with cypherRound\nDESCRIPTION: Demonstrates rounding of edge weight values using cypherRound().\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/gremlin-guide/custom-functions.md#2025-04-23_snippet_4\n\nLANGUAGE: groovy\nCODE:\n```\ng.E().values('weight').map(cypherRound())\n```\n\n----------------------------------------\n\nTITLE: Defining Complete Named Operation for Vehicle Traffic Analysis in JSON\nDESCRIPTION: Complete JSON configuration for a Gaffer Named Operation that finds junctions in a region with the most occurrences of a specific vehicle type. Includes operation chain definitions, view filters, and parameter configurations.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/administration-guide/named-operations.md#2025-04-23_snippet_21\n\nLANGUAGE: json\nCODE:\n```\n{\n            \"class\" : \"uk.gov.gchq.gaffer.named.operation.AddNamedOperation\",\n            \"operationName\" : \"frequent-vehicles-in-region\",\n            \"description\" : \"Finds the junctions in a region with the most of an individual vehicle (e.g BUS, CAR) in the year 2000. The input is the region.\",\n            \"operationChain\" : {\n                \"operations\" : [ {\n                    \"class\" : \"uk.gov.gchq.gaffer.operation.impl.get.GetAdjacentIds\",\n                    \"view\" : {\n                        \"edges\" : {\n                            \"RegionContainsLocation\" : { }\n                        }\n                    }\n                }, {\n                    \"class\" : \"uk.gov.gchq.gaffer.operation.impl.get.GetAdjacentIds\",\n                    \"view\" : {\n                        \"edges\" : {\n                            \"LocationContainsRoad\" : { }\n                        }\n                    }       \n                }, {\n                    \"class\" : \"uk.gov.gchq.gaffer.operation.impl.output.ToSet\"\n                }, {\n                    \"class\" : \"uk.gov.gchq.gaffer.operation.impl.get.GetAdjacentIds\",\n                    \"view\" : {\n                        \"edges\" : {\n                            \"RoadHasJunction\" : { }\n                        }       \n                    }\n                }, {\n                    \"class\" : \"uk.gov.gchq.gaffer.operation.impl.get.GetElements\",\n                    \"view\" : {\n                        \"entities\" : {\n                            \"JunctionUse\" : {\n                                \"properties\" : [ \"${vehicle}\" ],\n                                \"preAggregationFilterFunctions\" : [ {\n                                    \"selection\" : [ \"startDate\", \"endDate\" ],\n                                    \"predicate\" : {\n                                        \"class\" : \"uk.gov.gchq.koryphe.impl.predicate.range.InDateRangeDual\",\n                                        \"start\" : \"2000/01/01\",\n                                        \"end\" : \"2001/01/01\"\n                                    }\n                                } ],\n                                \"transientProperties\" : {\n                                    \"${vehicle}\" : \"Long\"\n                                },\n                                \"transformFunctions\" : [ {\n                                    \"selection\" : [ \"countByVehicleType\" ],\n                                    \"function\" : {\n                                        \"class\" : \"uk.gov.gchq.gaffer.types.function.FreqMapExtractor\",\n                                        \"key\" : \"${vehicle}\"\n                                    },\n                                    \"projection\" : [ \"${vehicle}\" ]\n                                } ]\n                            }\n                        },\n                        \"globalElements\" : [ {\n                            \"groupBy\" : [ ]\n                        } ]\n                    },\n                    \"includeIncomingOutGoing\" : \"OUTGOING\"\n                }, {\n                    \"class\" : \"uk.gov.gchq.gaffer.operation.impl.compare.Sort\",\n                    \"comparators\" : [ {\n                        \"class\" : \"uk.gov.gchq.gaffer.data.element.comparison.ElementPropertyComparator\",\n                        \"property\" : \"${vehicle}\",\n                        \"groups\" : [ \"JunctionUse\" ],\n                        \"reversed\" : true\n                    } ],\n                \"deduplicate\" : true,\n                \"resultLimit\" : \"${result-limit}\"\n                }, {\n                    \"class\" : \"uk.gov.gchq.gaffer.operation.impl.If\",\n                    \"condition\" : \"${to-csv}\",\n                    \"then\" : {\n                        \"class\" : \"uk.gov.gchq.gaffer.operation.impl.output.ToCsv\",\n                        \"elementGenerator\" : {\n                        \"class\" : \"uk.gov.gchq.gaffer.data.generator.CsvGenerator\",\n                        \"fields\" : {\n                            \"VERTEX\" : \"Junction\",\n                            \"${vehicle}\" : \"${vehicle}\"\n                    },\n                        \"constants\" : { },\n                        \"quoted\" : false,\n                        \"commaReplacement\" : \" \"\n                    },\n                        \"includeHeader\" : true\n                    }\n                } ]\n            },\n            \"overwriteFlag\" : true,\n            \"parameters\" : {\n                \"to-csv\" : {\n                    \"description\" : \"Enable this parameter to convert the results to a simple CSV in the format: Junction, Count\",\n                    \"defaultValue\" : false,\n                    \"valueClass\" : \"java.lang.Boolean\",\n                    \"required\" : false\n                },\n                \"result-limit\" : {\n                    \"description\" : \"The maximum number of junctions to return\",\n                    \"defaultValue\" : 2,\n                    \"valueClass\" : \"java.lang.Integer\",\n                    \"required\" : false\n                },\n                \"vehicle\" : {\n                    \"description\" : \"The type of vehicle: HGVR3, BUS, HGVR4, AMV, HGVR2, HGVA3, PC, HGVA3, PC, HGCA5, HGVA6, CAR, HGV, WM2, LGV\",\n                    \"defaultValue\" : \"BUS\",\n                    \"valueClass\" : \"java.lang.String\",\n                    \"required\" : false\n                }\n            }\n        }\n```\n\n----------------------------------------\n\nTITLE: Initializing InDateRangeDual with default overlap detection in Java\nDESCRIPTION: Creates an InDateRangeDual function with default settings where only an overlap between ranges is required. The configured range includes dates from 2017/03/01 to 2017/08/01 inclusive.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/predicates-guide/koryphe-predicates.md#2025-04-23_snippet_30\n\nLANGUAGE: java\nCODE:\n```\nfinal InDateRangeDual function = new InDateRangeDual.Builder()\n        .start(\"2017/03/01\")\n        .end(\"2017/08/01\")\n        .startFullyContained(false) // Doesn't need to be specified as it is the default\n        .endFullyContained(false) // Doesn't need to be specified as it is the default\n        .build();\n```\n\n----------------------------------------\n\nTITLE: Custom Gaffer Images Configuration\nDESCRIPTION: YAML configuration file for specifying custom Gaffer and Accumulo images in a Helm deployment. This allows users to deploy Kubernetes pods with customized images that include additional libraries or configuration.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/administration-guide/gaffer-deployment/kubernetes-guide/running-on-kubernetes.md#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# Add custom REST API image\napi:\n  image:\n    repository: custom-rest\n    tag: latest\n\n# Add custom Accumulo image\naccumulo:\n  image:\n    repository: custom-gaffer-accumulo\n    tag: latest\n```\n\n----------------------------------------\n\nTITLE: Query Result Example\nDESCRIPTION: Example JSON response showing aggregated results from the graph query.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/administration-guide/aggregation/ingest-example.md#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n[\n    {\n        \"class\": \"uk.gov.gchq.gaffer.data.element.Entity\",\n        \"group\": \"Person\",\n        \"vertex\": \"Dave\",\n        \"properties\": {}\n    },\n    {\n        \"class\": \"uk.gov.gchq.gaffer.data.element.Edge\",\n        \"group\": \"Commit\",\n        \"source\": \"Dave\",\n        \"destination\": \"r1\",\n        \"directed\": true,\n        \"matchedVertex\": \"SOURCE\",\n        \"properties\": {\n            \"removed\": 18,\n            \"added\": 41\n        }\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring Accumulo Graph ID and Permissions\nDESCRIPTION: YAML configuration for updating Graph ID and setting Accumulo user permissions.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/administration-guide/gaffer-deployment/kubernetes-guide/helm-configuration.md#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ngraph:\n    config:\n    graphId: \"MyGraph\"\n    description: \"My Graph description\"\n\naccumulo:\n    config:\n    userManagement:\n        users:\n        gaffer:\n            permissions:\n            table:\n                MyGraph:\n                - READ\n                - WRITE\n                - BULK_IMPORT\n                - ALTER_TABLE\n```\n\n----------------------------------------\n\nTITLE: Creating ExtractGroup in Python\nDESCRIPTION: Python code to create an ExtractGroup instance. This simple function requires no additional parameters.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/gaffer-functions.md#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ng.ExtractGroup()\n```\n\n----------------------------------------\n\nTITLE: Converting to Uppercase with cypherToUpper\nDESCRIPTION: Shows converting strings to uppercase using cypherToUpper().\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/gremlin-guide/custom-functions.md#2025-04-23_snippet_11\n\nLANGUAGE: groovy\nCODE:\n```\ng.V().values('name').map(cypherToUpper())\n```\n\n----------------------------------------\n\nTITLE: Adding Gaffer Docker Helm Repository\nDESCRIPTION: Command to add the Gaffer Docker repository to Helm repos, which provides access to Gaffer Helm charts without needing to clone the Git repository.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/administration-guide/gaffer-deployment/kubernetes-guide/simple-deployment.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo add gaffer-docker https://gchq.github.io/gaffer-docker\n```\n\n----------------------------------------\n\nTITLE: JSON JobDetail Result Format\nDESCRIPTION: The JSON result format when retrieving job details. Shows a JobDetail object with job ID, user information, status, start time, and operation chain details in JSON structure.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/export.md#2025-04-23_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"jobId\" : \"af0a2efe-5f3c-458d-8fa2-93d0f28cbd82\",\n    \"user\" : {\n        \"userId\" : \"user01\",\n        \"dataAuths\" : [ ],\n        \"opAuths\" : [ ]\n    },\n    \"status\" : \"RUNNING\",\n    \"startTime\" : 1667818800114,\n    \"opChain\" : \"OperationChain[GetAllElements->ExportToGafferResultCache->DiscardOutput->GetJobDetails]\"\n}\n```\n\n----------------------------------------\n\nTITLE: Result of the Operation Chain with ToSingletonList in JSON\nDESCRIPTION: JSON representation of the result from executing the complex operation chain. Shows a nested array structure representing paths through the graph.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/core.md#2025-04-23_snippet_69\n\nLANGUAGE: json\nCODE:\n```\n[ [ 2, 3, 1 ], [ 3, 4, 5, 1 ] ]\n```\n\n----------------------------------------\n\nTITLE: Configuring Identity Function in JSON\nDESCRIPTION: JSON configuration for an Identity function that simply returns the input without modification. This function can be used with any input type and returns the same type as the input.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/koryphe-functions.md#2025-04-23_snippet_68\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"Identity\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Gaffer with Custom Accumulo Passwords\nDESCRIPTION: Helm command to install Gaffer with custom Accumulo password configuration.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/administration-guide/gaffer-deployment/kubernetes-guide/helm-configuration.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nhelm install my-graph gaffer-docker/gaffer -f accumulo-passwords.yaml\n```\n\n----------------------------------------\n\nTITLE: Retrieving Data from Endpoint using GetFromEndpoint in Gaffer\nDESCRIPTION: Demonstrates how to use the GetFromEndpoint operation to retrieve data from a specified endpoint. This operation is used to fetch data from external sources.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/misc.md#2025-04-23_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nfinal GetFromEndpoint get = new GetFromEndpoint.Builder()\n        .endpoint(\"https://mydata.io:8443/mydata\")\n        .build();\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n\"class\" : \"GetFromEndpoint\",\n\"endpoint\" : \"https://mydata.io:8443/mydata\"\n}\n```\n\nLANGUAGE: python\nCODE:\n```\ng.GetFromEndpoint(\nendpoint=\"https://mydata.io:8443/mydata\"\n)\n```\n\n----------------------------------------\n\nTITLE: Masking Timestamps with Custom Time Unit\nDESCRIPTION: Creates a timestamp mask using seconds as the time unit instead of milliseconds. Filters timestamps between 10 and 25 seconds.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/gaffer-functions.md#2025-04-23_snippet_34\n\nLANGUAGE: java\nCODE:\n```\nMaskTimestampSetByTimeRange function = new MaskTimestampSetByTimeRange(10L, 25L, TimeUnit.SECOND);\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"MaskTimestampSetByTimeRange\",\n  \"startTime\" : 10,\n  \"endTime\" : 25,\n  \"timeUnit\" : \"SECOND\"\n}\n```\n\nLANGUAGE: python\nCODE:\n```\ng.MaskTimestampSetByTimeRange( \n  start_time=10, \n  end_time=25, \n  time_unit=\"SECOND\" \n)\n```\n\n----------------------------------------\n\nTITLE: Installing MkDocs Dependencies from Requirements File\nDESCRIPTION: Installs the required Python dependencies for building the Gaffer documentation, including MkDocs and the Material theme, using the versions specified in the requirements.txt file.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install -r requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Named View Cache Changes\nDESCRIPTION: Updated cache access methods to require User parameter for authorization.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/change-notes/migrating-from-v1-to-v2/deprecations.md#2025-04-23_snippet_18\n\n\n\n----------------------------------------\n\nTITLE: Deploying Hadoop Datanode Container\nDESCRIPTION: Docker command to deploy an HDFS datanode container that stores the distributed data, configuring networking and volumes for data storage.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/administration-guide/gaffer-deployment/gaffer-docker/how-to-run.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndocker run \\\n       --detach \\\n       --name hdfs-datanode1 \\\n       --hostname hdfs-datanode1 \\\n       --net gaffer-example \\\n       --env HADOOP_CONF_DIR=\"/etc/hadoop/conf\" \\\n       --volume /custom/configs/hdfs:/etc/hadoop/conf \\\n       --volume /var/log/hadoop \\\n       --volume /data1 \\\n       --volume /data2 \\\n       gchq/hdfs:3.3.3 datanode\n```\n\n----------------------------------------\n\nTITLE: Results of Extracting Edges from Walks in JSON\nDESCRIPTION: JSON representation of the results from extracting edge source vertices from walks, showing the array of unique source vertices [1, 2] after conversion to a set.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/core.md#2025-04-23_snippet_52\n\nLANGUAGE: json\nCODE:\n```\n[ 1, 2 ]\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables for Gaffer Deployment\nDESCRIPTION: Environment variables setup for the Gaffer deployment. These variables define the versions of Zookeeper, Gaffer, Accumulo, and Hadoop to use, as well as configuration directories. These can be saved in a .env file and sourced before running docker-compose.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/development-guide/example-deployment/running-the-deployment.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nZOOKEEPER_VERSION=\"3.7.1\"\nGAFFER_VERSION=\"2.0.0\"\nACCUMULO_VERSION=\"2.0.1\"\nHADOOP_VERSION=\"3.3.3\"\nACCUMULO_CONF_DIR=\"/etc/accumulo/conf\"\nHADOOP_CONF_DIR=\"/etc/hadoop/conf\"\n```\n\n----------------------------------------\n\nTITLE: Configuring InDateRangeDual with default overlap detection in JSON\nDESCRIPTION: JSON configuration for an InDateRangeDual function that tests for overlap between date ranges. This allows ranges that have any overlap with the configured range from 2017/03/01 to 2017/08/01.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/predicates-guide/koryphe-predicates.md#2025-04-23_snippet_31\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"InDateRangeDual\",\n  \"start\" : \"2017/03/01\",\n  \"end\" : \"2017/08/01\",\n  \"endFullyContained\" : false,\n  \"startFullyContained\" : false\n}\n```\n\n----------------------------------------\n\nTITLE: Named Operation Configuration in JSON\nDESCRIPTION: JSON configuration for NamedOperationResolver graph hook showing depth limit configuration.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/administration-guide/named-operations.md#2025-04-23_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"hooks\": [\n        {\n            \"class\": \"uk.gov.gchq.gaffer.graph.hook.NamedOperationResolver\",\n            \"suffixNamedOperationCacheName\": \"suffix\",\n            \"depthLimit\": 5\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Visualizing Graph Structure with Mermaid\nDESCRIPTION: This Mermaid diagram illustrates a simple graph structure with four nodes connected by directed edges.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/administration-guide/gaffer-stores/accumulo-store.md#2025-04-23_snippet_10\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph TD\n1 --> 2\n2 --> 3\n3 --> 4\n```\n\n----------------------------------------\n\nTITLE: New FederatedOperation with GraphIds Inside an OperationChain in JSON\nDESCRIPTION: Example of the recommended approach using multiple FederatedOperations within an OperationChain to target different graphs for each operation.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/change-notes/migrating-from-v1-to-v2/federation-changes.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"class\": \"uk.gov.gchq.gaffer.operation.OperationChain\",\n    \"operations\": [\n        {\n            \"class\": \"uk.gov.gchq.gaffer.federatedstore.operation.FederatedOperation\",\n            \"operation\": {\n                \"class\": \"ExampleOperation1\"\n            },\n            \"graphIds\": [ \"graphA\" ]\n        },\n        {\n            \"class\": \"uk.gov.gchq.gaffer.federatedstore.operation.FederatedOperation\",\n            \"operation\": {\n                \"class\": \"ExampleOperation2\"\n            },\n            \"graphIds\": [ \"graphB\" ]\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Date Strings to Timestamps with Format and TimeZone in JSON\nDESCRIPTION: JSON configuration for a function that parses date strings with format, timezone, and time unit specification. This configuration returns seconds since epoch in GMT timezone.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/koryphe-functions.md#2025-04-23_snippet_129\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"ParseTime\",\n  \"format\" : \"yyyy-MM-dd\",\n  \"timeZone\" : \"GMT\",\n  \"timeUnit\" : \"SECOND\"\n}\n```\n\n----------------------------------------\n\nTITLE: Store Properties Configuration\nDESCRIPTION: Properties file configuration for adding SketchesJsonModules to custom data stores.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/user-guide/gaffer-basics/what-is-cardinality.md#2025-04-23_snippet_1\n\nLANGUAGE: properties\nCODE:\n```\ngaffer.serialiser.json.modules=uk.gov.gchq.gaffer.sketches.serialisation.json.SketchesJsonModules\n```\n\n----------------------------------------\n\nTITLE: Operation Chain Validation Changes\nDESCRIPTION: Updated validation methods to include User parameter in method signatures.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/change-notes/migrating-from-v1-to-v2/deprecations.md#2025-04-23_snippet_17\n\n\n\n----------------------------------------\n\nTITLE: Individual FederatedOperations in an OperationChain in JSON\nDESCRIPTION: Example showing multiple FederatedOperations in a chain, where some operations are sent to the same subgraph. This approach works but may not be efficient when sending sequences to the same graph.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/change-notes/migrating-from-v1-to-v2/federation-changes.md#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"class\": \"uk.gov.gchq.gaffer.operation.OperationChain\",\n    \"operations\": [\n        {\n            \"class\": \"uk.gov.gchq.gaffer.federatedstore.operation.FederatedOperation\",\n            \"operation\": {\n                \"class\": \"ExampleOperation1\"\n            },\n            \"graphIds\": [ \"graphA\" ]\n        },\n        {\n            \"class\": \"uk.gov.gchq.gaffer.federatedstore.operation.FederatedOperation\",\n            \"operation\": {\n                \"class\": \"ExampleOperation2\"\n            },\n            \"graphIds\": [ \"graphA\" ]\n        },\n        {\n            \"class\": \"uk.gov.gchq.gaffer.federatedstore.operation.FederatedOperation\",\n            \"operation\": {\n                \"class\": \"ExampleOperation3\"\n            },\n            \"graphIds\": [ \"graphB\" ]\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Visualizing a Simple Friendship Relationship in Mermaid\nDESCRIPTION: This Mermaid flowchart demonstrates a basic graph relationship between two people, Dave and Chris, connected by a 'FRIENDS' edge.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/user-guide/gaffer-basics/what-is-a-graph.md#2025-04-23_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart TD\n    subgraph Relationship\n        E((Person - Dave))\n        -- FRIENDS -->\n        F((Person - Chris))  \n    end\n```\n\n----------------------------------------\n\nTITLE: Deploying Hadoop Namenode Container\nDESCRIPTION: Docker command to deploy the HDFS namenode container that acts as the master node for the Hadoop cluster, configuring networking, ports, and volumes.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/administration-guide/gaffer-deployment/gaffer-docker/how-to-run.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker run \\\n       --detach \\\n       --name hdfs-namenode \\\n       --hostname hdfs-namenode \\\n       --net gaffer-example \\\n       --publish 9870:9870 \\\n       --env HADOOP_CONF_DIR=\"/etc/hadoop/conf\" \\\n       --volume /custom/configs/hdfs:/etc/hadoop/conf \\\n       --volume /var/log/hadoop \\\n       --volume /data1 \\\n       --volume /data2 \\\n       gchq/hdfs:3.3.3 namenode\n```\n\n----------------------------------------\n\nTITLE: Adding Gaffer Spark Library Dependency\nDESCRIPTION: Maven dependency configuration required to include the core Spark library for Gaffer integration.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/development-guide/project-structure/components/libraries/spark.md#2025-04-23_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n  <groupId>uk.gov.gchq.gaffer</groupId>\n  <artifactId>spark-library</artifactId>\n  <version>${gaffer.version}</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Converting Date Strings to Timestamps with Custom Format in Java\nDESCRIPTION: Creates a function that parses date strings with a specific format into timestamp values. This configuration specifies a year-month and hour-minute format pattern.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/koryphe-functions.md#2025-04-23_snippet_125\n\nLANGUAGE: java\nCODE:\n```\nfinal ParseTime parseTime = new ParseTime().format(\"yyyy-MM hh:mm\");\n```\n\n----------------------------------------\n\nTITLE: Configuring Graph using GraphConfig.Builder in Java\nDESCRIPTION: Illustrates how to configure a Graph using the GraphConfig.Builder instead of individual methods that have been removed from Graph.Builder.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/change-notes/migrating-from-v1-to-v2/deprecations.md#2025-04-23_snippet_10\n\nLANGUAGE: java\nCODE:\n```\nfinal Graph myGraph = new Graph.Builder()\n        .config(new GraphConfig.Builder()\n                .graphId(\"myGraph\")\n                .library(myGraphLibrary)\n                .view(myView)\n                .addHook(customHook)\n                .build())\n        .addSchema(mySchema)\n        .storeProperties(storeProperties)\n        .build();\n```\n\n----------------------------------------\n\nTITLE: Setting Default Cache Service Implementation in store.properties\nDESCRIPTION: Code snippet showing how to configure the default cache service implementation in the store.properties file by setting the gaffer.cache.service.default.class property.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/administration-guide/gaffer-stores/store-guide.md#2025-04-23_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\ngaffer.cache.service.default.class=uk.gov.gchq.gaffer.cache.impl.HashMapCacheService\n```\n\n----------------------------------------\n\nTITLE: Maven Dependency Configuration\nDESCRIPTION: XML configuration for adding the sketches-library dependency to a custom store or REST API.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/user-guide/gaffer-basics/what-is-cardinality.md#2025-04-23_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>uk.gov.gchq.gaffer</groupId>\n    <artifactId>sketches-library</artifactId>\n    <version>${gaffer.version}</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Adding Edges with Visibility Properties in Gaffer (JSON)\nDESCRIPTION: JSON representation of the AddElements operation that adds two edges with different visibility properties. This demonstrates how to specify visibility in JSON operations for Gaffer's REST API.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/administration-guide/security/security-guide.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"AddElements\",\n  \"input\" : [ {\n    \"class\" : \"Edge\",\n    \"group\" : \"RoadHasJunction\",\n    \"source\" : \"1\",\n    \"destination\" : \"2\",\n    \"directed\" : true,\n    \"properties\" : {\n      \"count\" : 1,\n      \"visibility\": \"private\"\n    }\n  },\n  {\n    \"class\" : \"Edge\",\n    \"group\" : \"RoadHasJunction\",\n    \"source\" : \"1\",\n    \"destination\" : \"2\",\n    \"directed\" : true,\n    \"properties\" : {\n      \"count\" : 2,\n      \"visibility\": \"public\"\n    }\n  } ],\n  \"skipInvalidElements\" : false,\n  \"validate\" : true\n}\n```\n\n----------------------------------------\n\nTITLE: Parsing Date Strings with TimeZone (GMT+0) in Python\nDESCRIPTION: Python implementation of a date parser that converts date strings to Date objects using GMT+0 timezone. This parser uses a simpler format without seconds or milliseconds.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/koryphe-functions.md#2025-04-23_snippet_121\n\nLANGUAGE: python\nCODE:\n```\ng.ParseDate( \n  time_zone=\"Etc/GMT+0\", \n  format=\"yyyy-MM-dd HH:mm\", \n  microseconds=False \n)\n```\n\n----------------------------------------\n\nTITLE: Creating IsFalse Predicate in Python\nDESCRIPTION: Python implementation of the IsFalse predicate using the Gaffer Python client. Checks if an input boolean is false.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/predicates-guide/koryphe-predicates.md#2025-04-23_snippet_66\n\nLANGUAGE: python\nCODE:\n```\ng.IsFalse()\n```\n\n----------------------------------------\n\nTITLE: Markdown Link to HyperLogLog Documentation\nDESCRIPTION: Reference link in markdown format pointing to advanced documentation section about HyperLogLog sketches.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/properties-guide/properties.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[`HyperLogLog`](advanced.md)\n```\n\n----------------------------------------\n\nTITLE: Replacing RawDateSerialiser and DateSerialiser with String Parsing\nDESCRIPTION: When migrating from the deprecated date serialisers, you'll need to replace any calls to .deserialiseString(String) with manual date parsing from a long value.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/change-notes/migrating-from-v1-to-v2/deprecations.md#2025-04-23_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nnew Date(Long.parseLong(String))\n```\n\n----------------------------------------\n\nTITLE: Initializing ToTrailingWildcardPair Function with Custom End of Range in Java\nDESCRIPTION: Creates a new ToTrailingWildcardPair function with a custom end of range string. This function converts string inputs into pairs of EntityIds representing a range with a custom end.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/gaffer-functions.md#2025-04-23_snippet_53\n\nLANGUAGE: java\nCODE:\n```\nfinal ToTrailingWildcardPair function = new ToTrailingWildcardPair();\nfunction.setEndOfRange(\"custom\");\n```\n\n----------------------------------------\n\nTITLE: Binary Operators Table Structure in Markdown\nDESCRIPTION: Markdown table listing all available Binary Operators with their origin libraries (Koryphe or Gaffer). Each operator is listed with its full package path and source library.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/binary-operators-guide/binary-operators.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nBinary Operator | Origin\\n------------- | -------------\\n`binaryoperator.AdaptedBinaryOperator` | Koryphe\\n`binaryoperator.BinaryOperatorComposite` | Koryphe\\n`binaryoperator.BinaryOperatorMap` | Koryphe\\n[`impl.binaryoperator.And`](koryphe-operators.md#and) | Koryphe\n```\n\n----------------------------------------\n\nTITLE: Creating InRange Function for String Values in Python\nDESCRIPTION: Python code to create an InRange function for String values between 'B' and 'D' (inclusive). Used in Gaffer's Python client for range checks on String values.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/predicates-guide/koryphe-predicates.md#2025-04-23_snippet_59\n\nLANGUAGE: python\nCODE:\n```\ng.InRange(\n  start=\"B\",\n  end=\"D\"\n)\n```\n\n----------------------------------------\n\nTITLE: GetGraphCreatedTime in JSON Format\nDESCRIPTION: The JSON representation of an operation to retrieve the graph creation time. The operation specifies the fully qualified class name for the GetGraphCreatedTime operation.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/core.md#2025-04-23_snippet_83\n\nLANGUAGE: json\nCODE:\n```\n{\n        \"class\": \"uk.gov.gchq.gaffer.operation.impl.get.GetGraphCreatedTime\"\n}\n```\n\n----------------------------------------\n\nTITLE: Date to String Conversion\nDESCRIPTION: Function to format dates as strings with configurable format patterns. Supports various date format patterns.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/koryphe-functions.md#2025-04-23_snippet_167\n\nLANGUAGE: java\nCODE:\n```\nfinal ToDateString function = new ToDateString(\"yyyy-MM-dd HH:mm:ss.SSS\");\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"ToDateString\",\n  \"format\" : \"yyyy-MM-dd HH:mm:ss.SSS\"\n}\n```\n\nLANGUAGE: python\nCODE:\n```\ng.ToDateString( \n  format=\"yyyy-MM-dd HH:mm:ss.SSS\" \n)\n```\n\n----------------------------------------\n\nTITLE: Accumulo Shell Commands for Table Backup and Migration\nDESCRIPTION: Bash commands for the Accumulo shell to clone a table, perform upgrades, and manage table states during migration. These steps ensure data safety and allow for easy rollback if needed.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/administration-guide/gaffer-stores/accumulo-store.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n> offline -t table1\n> clone table table1 table1-backup\n> offline -t table1-backup\n\n# Do your upgrades\n#   - deploy new gaffer jars to Accumulo's class path on each node in your cluster\n#   - run the AddUpdateTableIterator class to update table1\n\n> online -t table1\n\n# Check table1 is still healthy:\n#   - run a query and check the iterators are successfully aggregating and filtering elements correctly.\n\n> droptable -t table1-backup\n```\n\n----------------------------------------\n\nTITLE: Gaffer Types Schema Definition\nDESCRIPTION: JSON schema defining the data types used in the graph, including aggregation functions and validation rules.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/administration-guide/aggregation/ingest-example.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"types\": {\n        \"id.person.string\": {\n            \"description\": \"A basic type to hold the string id of a person entity\",\n            \"class\": \"java.lang.String\"\n        },\n        \"id.repo.string\": {\n            \"description\": \"A basic type to hold the string id of a repository entity\",\n            \"class\": \"java.lang.String\"\n        },\n        \"property.integer\": {\n            \"description\": \"A basic type to hold integer properties of elements\",\n            \"class\": \"java.lang.Integer\",\n            \"aggregateFunction\": {\n                \"class\": \"uk.gov.gchq.koryphe.impl.binaryoperator.Sum\"\n            }\n        },\n        \"true\": {\n            \"description\": \"A simple boolean that must always be true.\",\n            \"class\": \"java.lang.Boolean\",\n            \"validateFunctions\": [\n                {\n                    \"class\": \"uk.gov.gchq.koryphe.impl.predicate.IsTrue\"\n                }\n            ]\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating StringPrepend Function in Python\nDESCRIPTION: Python implementation of a StringPrepend function. This function will add the specified prefix to the beginning of any input string.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/koryphe-functions.md#2025-04-23_snippet_148\n\nLANGUAGE: python\nCODE:\n```\ng.StringPrepend( \n  prefix=\"myPrefix\" \n)\n```\n\n----------------------------------------\n\nTITLE: Deprecated GraphIds Option Inside an OperationChain in JSON\nDESCRIPTION: Example of the deprecated approach using gaffer.federatedstore.operation.graphIds within operations in an OperationChain to target different graphs for each operation.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/change-notes/migrating-from-v1-to-v2/federation-changes.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"class\": \"uk.gov.gchq.gaffer.operation.OperationChain\",\n    \"operations\": [\n        {\n            \"class\": \"ExampleOperation1\",\n            \"options\": {\n                \"gaffer.federatedstore.operation.graphIds\": \"graphA\"\n            }\n        },\n        {\n            \"class\": \"ExampleOperation2\",\n            \"options\": {\n                \"gaffer.federatedstore.operation.graphIds\": \"graphB\"\n            }\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Right Key Inner Join with ElementMatch in Java\nDESCRIPTION: Creates an OperationChain with a Join operation using ElementMatch to match elements based on the 'count' property. This example performs an inner join with RIGHT match key without flattening the results.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/join.md#2025-04-23_snippet_11\n\nLANGUAGE: java\nCODE:\n```\nfinal OperationChain<Iterable<? extends MapTuple>> opChain = new OperationChain.Builder()\n        .first(new Join.Builder<>()\n                .input(inputElements)\n                .operation(new GetAllElements())\n                .joinType(JoinType.INNER)\n                .matchKey(MatchKey.RIGHT)\n                .flatten(false)\n                .matchMethod(new ElementMatch(\"count\"))\n                .build())\n        .build();\n```\n\n----------------------------------------\n\nTITLE: Initializing MapToTuple Function\nDESCRIPTION: Function that converts a Map to a Tuple structure, preserving the map values in tuple form.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/koryphe-functions.md#2025-04-23_snippet_107\n\nLANGUAGE: java\nCODE:\n```\nfinal MapToTuple<String> function = new MapToTuple<>();\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"MapToTuple\"\n}\n```\n\nLANGUAGE: python\nCODE:\n```\ng.MapToTuple()\n```\n\n----------------------------------------\n\nTITLE: Deprecated GraphIds Option on Single Operation in JSON\nDESCRIPTION: Example of the deprecated approach using the gaffer.federatedstore.operation.graphIds option to specify which graphs to target with an operation.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/change-notes/migrating-from-v1-to-v2/federation-changes.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"class\": \"uk.gov.gchq.gaffer.operation.impl.get.GetAllElements\",\n    \"options\": {\n        \"gaffer.federatedstore.operation.graphIds\": \"graphA\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Gaffer Schema using Python API\nDESCRIPTION: Demonstrates how to establish a connection to Gaffer's REST API and retrieve the current schema using gafferpy. The example shows connection setup, schema retrieval, and basic output handling.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/user-guide/gaffer-basics/what-is-python.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom gafferpy import gaffer as g\nfrom gafferpy import gaffer_connector\n\n# Establish connection\ngc = gaffer_connector.GafferConnector(\"http://localhost:8080/rest/latest\")\n\n# Get Schema\nschema = gc.execute_get(g.GetSchema())\n\n# Print Schema\nprint(\"Schema:\\n{0}\\n\".format(schema))\n```\n\n----------------------------------------\n\nTITLE: Not Predicate with Exists Check\nDESCRIPTION: Implementation of Not predicate that inverts the result of an Exists check. Returns true if the value doesn't exist, false if it does.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/predicates-guide/koryphe-predicates.md#2025-04-23_snippet_10\n\nLANGUAGE: java\nCODE:\n```\nfinal Not function = new Not<>(new Exists());\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"Not\",\n  \"predicate\" : {\n    \"class\" : \"Exists\"\n  }\n}\n```\n\nLANGUAGE: python\nCODE:\n```\ng.Not(\n  predicate=g.Exists()\n)\n```\n\n----------------------------------------\n\nTITLE: Adding a Graph to Federated Store with Java API\nDESCRIPTION: Java code snippet showing how to add a new graph to a Federated Store. It builds an AddGraph operation with a graph ID, schema, and store properties, then executes it against the federated graph.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/administration-guide/gaffer-stores/federated-store.md#2025-04-23_snippet_6\n\nLANGUAGE: java\nCODE:\n```\nAddGraph addAnotherGraph = new AddGraph.Builder()\n        .graphId(\"AnotherGraph\")\n        .schema(mySchema)\n        .storeProperties(myStoreProperties)\n        .build();\nfederatedGraph.execute(addAnotherGraph, user);\n```\n\n----------------------------------------\n\nTITLE: Join Operation Changes\nDESCRIPTION: Removal of unimplemented join method from JoinFunction interface.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/change-notes/migrating-from-v1-to-v2/deprecations.md#2025-04-23_snippet_13\n\n\n\n----------------------------------------\n\nTITLE: Gaffer Project Directory Structure in YAML\nDESCRIPTION: Example file structure for a stand-alone Gaffer deployment using docker, showing key configuration files and their locations.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/administration-guide/gaffer-config/config.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n├── config\n│   ├── gaffer\n│       ├── application.properties\n│       ├── data\n│       │   ├── neo4jExport.csv\n│       ├── graph\n│       │   └── graphConfig.json\n│       ├── schema\n│       │   ├── elements.json\n│       │   └── types.json\n│       └── store\n│           ├── operationsDeclarations.json\n│           └── store.properties\n│\n└── docker-compose.yaml\n```\n\n----------------------------------------\n\nTITLE: Implementing Conditional If Predicate\nDESCRIPTION: If predicate that conditionally applies different predicates based on a condition. Tests input type and applies different predicates accordingly.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/predicates-guide/koryphe-predicates.md#2025-04-23_snippet_7\n\nLANGUAGE: java\nCODE:\n```\nfinal If<Comparable> predicate = new If<>(new IsA(Integer.class), new IsMoreThan(3), new Not<>(new IsA(String.class)));\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"uk.gov.gchq.koryphe.impl.predicate.If\",\n  \"predicate\" : {\n    \"class\" : \"IsA\",\n    \"type\" : \"java.lang.Integer\"\n  },\n  \"then\" : {\n    \"class\" : \"IsMoreThan\",\n    \"orEqualTo\" : false,\n    \"value\" : 3\n  },\n  \"otherwise\" : {\n    \"class\" : \"Not\",\n    \"predicate\" : {\n      \"class\" : \"IsA\",\n      \"type\" : \"java.lang.String\"\n    }\n  }\n}\n```\n\nLANGUAGE: python\nCODE:\n```\ng.If(\n  predicate=g.IsA(\n    type=\"java.lang.Integer\"\n  ),\n  then=g.IsMoreThan(\n    value=3,\n    or_equal_to=False\n  ),\n  otherwise=g.Not(\n    predicate=g.IsA(\n      type=\"java.lang.String\"\n    )\n  )\n)\n```\n\n----------------------------------------\n\nTITLE: Replacing DoubleSerialiser's String Deserialization\nDESCRIPTION: When migrating from the deprecated double serialisers, you'll need to replace any calls to .deserialiseString(String) with manual double parsing.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/change-notes/migrating-from-v1-to-v2/deprecations.md#2025-04-23_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nDouble.parseDouble(String)\n```\n\n----------------------------------------\n\nTITLE: AddGraph Operation in JSON Format\nDESCRIPTION: JSON operation for adding a new graph to a Federated Store. This operation requires a graph ID and either schema and store properties directly or references to these in a graph library.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/administration-guide/gaffer-stores/federated-store.md#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"AddGraph\",\n  \"graphId\" : \"AnotherGraph\",\n  \"schema\" : {\n    ... Schema in JSON format\n  },\n  \"storeProperties\" : {\n    ... Store Properties in JSON format\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Walks Implementation in Python\nDESCRIPTION: Python implementation to get walks of length 2 starting from vertex 1, with outgoing edge traversal restrictions.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/get.md#2025-04-23_snippet_36\n\nLANGUAGE: python\nCODE:\n```\ng.GetWalks(\n  input=[\n    g.EntitySeed(\n      vertex=1\n    )\n  ],\n  operations=[\n    g.OperationChain(\n      operations=[\n        g.GetElements(\n          include_incoming_out_going=\"OUTGOING\"\n        )\n      ]\n    ),\n    g.OperationChain(\n      operations=[\n        g.GetElements(\n          include_incoming_out_going=\"OUTGOING\"\n        )\n      ]\n    )\n  ],\n  results_limit=1000000\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing FirstValid without Predicate in Java\nDESCRIPTION: Creates a FirstValid function without a predicate, which will always return null regardless of input. Not useful in practical applications.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/koryphe-functions.md#2025-04-23_snippet_52\n\nLANGUAGE: java\nCODE:\n```\nfinal FirstValid function = new FirstValid(null);\n```\n\n----------------------------------------\n\nTITLE: Calculating ThetaSketch Intersection\nDESCRIPTION: Shows how to calculate the intersection between two ThetaSketches to estimate common elements between different time periods.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/properties-guide/advanced.md#2025-04-23_snippet_24\n\nLANGUAGE: java\nCODE:\n```\nfinal Intersection intersection = Sketches.setOperationBuilder().buildIntersection();\nintersection.update(sketchDay1);\nintersection.update(sketchDay2);\nfinal double intersectionSizeEstimate = intersection.getResult().getEstimate();\n```\n\n----------------------------------------\n\nTITLE: Running Docker Compose for Gaffer Deployment\nDESCRIPTION: Simple command to start the Gaffer cluster using Docker Compose. This will start Zookeeper, HDFS, Accumulo, and the Gaffer REST API as configured in the docker-compose.yaml file.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/development-guide/example-deployment/running-the-deployment.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose up\n```\n\n----------------------------------------\n\nTITLE: Removing Graph from Federated Store - Java Implementation\nDESCRIPTION: Shows how to remove a graph from a federated store using RemoveGraph operation in Java, with options to either preserve or delete the underlying data.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/administration-guide/gaffer-stores/simple-federated/configuration.md#2025-04-23_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nfinal RemoveGraph removeGraph = new RemoveGraph.Builder()\n    .graphId(graphId)\n    .build();\n```\n\nLANGUAGE: java\nCODE:\n```\nfinal RemoveGraph removeGraph = new RemoveGraph.Builder()\n    .graphId(graphId)\n    .deleteAllData(true)\n    .build();\n```\n\n----------------------------------------\n\nTITLE: Building the Gaffer Documentation\nDESCRIPTION: Generates static documentation files using MkDocs and places them in the default 'site' directory. This creates a static version of the documentation that can be deployed to a web server.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmkdocs build\n```\n\n----------------------------------------\n\nTITLE: Setting Accumulo User Scan Authorizations for Integration Tests\nDESCRIPTION: Accumulo shell command to set the required scan authorizations for the 'root' user to run integration tests. This resolves the BAD_AUTHORIZATIONS error in integration tests.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/administration-guide/gaffer-stores/accumulo-store.md#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nsetauths -u root -s vis1,vis2,publicVisibility,privateVisibility,public,private\n```\n\n----------------------------------------\n\nTITLE: Initializing IsXMoreThanY Predicate in Java\nDESCRIPTION: Creates an IsXMoreThanY predicate that checks if the first comparable is greater than the second comparable. This predicate works on pairs of comparable objects of the same type.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/predicates-guide/koryphe-predicates.md#2025-04-23_snippet_103\n\nLANGUAGE: java\nCODE:\n```\nfinal IsXMoreThanY function = new IsXMoreThanY();\n```\n\n----------------------------------------\n\nTITLE: Configuring FirstValid with Predicate in JSON\nDESCRIPTION: JSON configuration for the FirstValid function with a StringContains predicate to find strings containing 'my'.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/koryphe-functions.md#2025-04-23_snippet_50\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"FirstValid\",\n  \"predicate\" : {\n    \"class\" : \"StringContains\",\n    \"value\" : \"my\",\n    \"ignoreCase\" : false\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing DeserialiseXml in Java\nDESCRIPTION: Creates a new DeserialiseXml function instance that parses an XML document into multiple Maps.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/koryphe-functions.md#2025-04-23_snippet_25\n\nLANGUAGE: java\nCODE:\n```\nfinal DeserialiseXml function = new DeserialiseXml();\n```\n\n----------------------------------------\n\nTITLE: Configuring ExtractGroup in JSON\nDESCRIPTION: JSON configuration for ExtractGroup. This simple configuration just specifies the class name as no additional parameters are required.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/gaffer-functions.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"ExtractGroup\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring FirstValid without Predicate in JSON\nDESCRIPTION: JSON configuration for the FirstValid function without a predicate. Without a predicate, this function will always return null.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/koryphe-functions.md#2025-04-23_snippet_53\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"FirstValid\"\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Elements From Socket - Python Implementation\nDESCRIPTION: Python implementation for adding elements from a Socket using AddElementsFromSocket operation.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/flink.md#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\ng.AddElementsFromSocket( \nhostname=\"localhost\", \nport=8080, \nelement_generator=\"uk.gov.gchq.gaffer.doc.operation.generator.ElementGenerator\", \nparallelism=1, \nvalidate=True, \nskip_invalid_elements=False, \ndelimiter=\",\" \n)\n```\n\n----------------------------------------\n\nTITLE: Configuring ToNull Function in JSON\nDESCRIPTION: JSON configuration for the ToNull function. This can be used in Gaffer graph configurations or other JSON-based setups.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/koryphe-functions.md#2025-04-23_snippet_175\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"ToNull\"\n}\n```\n\n----------------------------------------\n\nTITLE: Operation Interface Changes\nDESCRIPTION: Removal of asOperationChain method from Operation interface with guidance to use OperationChain.wrap instead.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/change-notes/migrating-from-v1-to-v2/deprecations.md#2025-04-23_snippet_11\n\n\n\n----------------------------------------\n\nTITLE: Implementing IterableConcat Function in JSON\nDESCRIPTION: JSON representation of an IterableConcat function that flattens nested iterables into a single iterable.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/functions-guide/koryphe-functions.md#2025-04-23_snippet_83\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"IterableConcat\"\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Compact Schema in Python\nDESCRIPTION: This Python code shows how to use the GetSchema operation in Gaffer's Python client to retrieve the compact schema. The compact parameter is set to True.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/core.md#2025-04-23_snippet_92\n\nLANGUAGE: python\nCODE:\n```\ng.GetSchema(\n  compact=True\n)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Compact Schema in JSON\nDESCRIPTION: This JSON snippet demonstrates the structure of a GetSchema operation to retrieve the compact schema. The compact field is set to true.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/core.md#2025-04-23_snippet_91\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"GetSchema\",\n  \"compact\" : true\n}\n```\n\n----------------------------------------\n\nTITLE: GetGraphCreatedTime Result in Java Format\nDESCRIPTION: The Java result of the GetGraphCreatedTime operation, showing the graph creation timestamp. The result is returned as a map with the graphId field containing the timestamp.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/core.md#2025-04-23_snippet_85\n\nLANGUAGE: java\nCODE:\n```\n{graphId=2024-08-22T12:37:53.498}\n```\n\n----------------------------------------\n\nTITLE: Cancelling a Scheduled Job in Java\nDESCRIPTION: This snippet demonstrates how to create an OperationChain to cancel a scheduled job using the CancelScheduledJob operation in Java.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/job.md#2025-04-23_snippet_7\n\nLANGUAGE: java\nCODE:\n```\nfinal OperationChain chain = new OperationChain.Builder()\n        .first(new CancelScheduledJob.Builder()\n                .jobId(jobId)\n                .build())\n        .build();\n```\n\n----------------------------------------\n\nTITLE: Simple Aggregate Operation Implementation\nDESCRIPTION: Basic implementation of the Aggregate operation that can be used in an Operation Chain to aggregate results of previous operations.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/operations-guide/core.md#2025-04-23_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nfinal Aggregate aggregate = new Aggregate();\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"Aggregate\"\n}\n```\n\nLANGUAGE: python\nCODE:\n```\ng.Aggregate()\n```\n\n----------------------------------------\n\nTITLE: Converting Values to Float with cypherToFloat\nDESCRIPTION: Shows conversion of vertex age values to float type using cypherToFloat().\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/gremlin-guide/custom-functions.md#2025-04-23_snippet_3\n\nLANGUAGE: groovy\nCODE:\n```\ng.V().values('age').map(cypherToFloat())\n```\n\n----------------------------------------\n\nTITLE: Implementing Logical OR Operation in JSON\nDESCRIPTION: JSON representation of the Or operator that applies logical OR operation to two boolean values.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/reference/binary-operators-guide/koryphe-operators.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"class\" : \"uk.gov.gchq.koryphe.impl.binaryoperator.Or\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Accumulo Store Properties for Integration Tests\nDESCRIPTION: Example configuration file for local Accumulo cluster testing. Defines store class, instance details, and cache settings for Gaffer's Accumulo integration tests.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/development-guide/project-structure/components/accumulo-store.md#2025-04-23_snippet_5\n\nLANGUAGE: text\nCODE:\n```\ngaffer.store.class=uk.gov.gchq.gaffer.accumulostore.SingleUseAccumuloStore\ngaffer.store.properties.class=uk.gov.gchq.gaffer.accumulostore.AccumuloProperties\naccumulo.instance=instance\naccumulo.user=root\naccumulo.password=password\naccumulo.zookeepers=localhost:58630\n\ngaffer.cache.service.default.class=uk.gov.gchq.gaffer.cache.impl.HashMapCacheService\ngaffer.store.job.tracker.enabled=true\ngaffer.store.operation.declarations=ExportToOtherAuthorisedGraphOperationDeclarations.json,ExportToOtherGraphOperationDeclarations.json,ResultCacheExportOperations.json\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Libraries to Gaffer REST API Docker Image\nDESCRIPTION: Dockerfile example showing how to add custom JAR libraries to the Gaffer REST API image by placing them in the correct directory.\nSOURCE: https://github.com/gchq/gaffer-doc/blob/v2docs/docs/administration-guide/gaffer-deployment/gaffer-docker/gaffer-images.md#2025-04-23_snippet_3\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM gchq/gaffer-rest:latest\nCOPY ./custom-lib:1.0-SNAPSHOT.jar /gaffer/jars/lib/\n```"
  }
]