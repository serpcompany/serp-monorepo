[
  {
    "owner": "apache",
    "repo": "couchdb",
    "content": "TITLE: Using $all operator with primary index in CouchDB\nDESCRIPTION: This snippet demonstrates the use of the ``$all`` operator in a CouchDB query using the primary index (``_all_docs``). The query selects documents where the ``genre`` array field contains both \"Comedy\" and \"Short\". It requires that the 'genre' field exists and is an array.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/ddocs/mango.rst#2025-04-21_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"_id\": {\n        \"$gt\": null\n    },\n    \"genre\": {\n        \"$all\": [\"Comedy\",\"Short\"]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Counting Tag Frequencies in JavaScript Map and Reduce\nDESCRIPTION: This snippet includes a map and reduce implementation to calculate tag frequencies. The map function emits each tag with a value of 1. The reduce function sums these emitted values to determine the count of each tag, leveraging CouchDBâ€™s data processing capabilities.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/ddocs/views/nosql.rst#2025-04-21_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nfunction(doc) {\n    if(doc.name && doc.tags) {\n        doc.tags.forEach(function(tag) {\n            emit(tag, 1);\n        });\n    }\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfunction(keys, values) {\n    return sum(values);\n}\n```\n\n----------------------------------------\n\nTITLE: CouchDB Map Function Example\nDESCRIPTION: Example of a map function that emits key/value pairs for document tags. The function processes documents of type 'post' and emits each tag as a key with value 1.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/ddocs/ddocs.rst#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction (doc) {\n  if (doc.type === 'post' && doc.tags && Array.isArray(doc.tags)) {\n    doc.tags.forEach(function (tag) {\n      emit(tag.toLowerCase(), 1);\n    });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Multiple Documents in Bulk using CouchDB\nDESCRIPTION: This snippet demonstrates how to fetch multiple documents in bulk using the /{db}/_bulk_get endpoint. It allows specifying document IDs and optionally revisions to retrieve multiple documents in a single request.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/database/bulk-api.rst#2025-04-21_snippet_9\n\nLANGUAGE: http\nCODE:\n```\nPOST /db/_bulk_get HTTP/1.1\nAccept: application/json\n```\n\n----------------------------------------\n\nTITLE: Configuring Replication Document in CouchDB\nDESCRIPTION: This JavaScript snippet illustrates a replication configuration document for the CouchDB '_replicator' database. The document defines source and target databases and enables continuous replication. Dependencies include a valid CouchDB setup and access to specified URLs.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/replication/replicator.rst#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"_id\": \"my_rep\",\n    \"source\": \"http://user:password@myserver.com/foo\",\n    \"target\": {\n        \"url\": \"http://localhost:5984/bar\",\n        \"auth\": {\n            \"basic\": {\n                \"username\": \"adm\",\n                \"password\": \"pass\"\n            }\n        }\n    },\n    \"create_target\": true,\n    \"continuous\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving a document from CouchDB\nDESCRIPTION: This command retrieves a document from the CouchDB database using the GET method. It returns the entire document, including system-generated fields.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/intro/api.rst#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\ncurl -X GET http://admin:password@127.0.0.1:5984/albums/6e1295ed6c29495e54cc05947f18c8af\n```\n\n----------------------------------------\n\nTITLE: Proxy Authentication Request\nDESCRIPTION: HTTP request example for proxy authentication with custom headers including username, roles, and token\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/server/authn.rst#2025-04-21_snippet_5\n\nLANGUAGE: http\nCODE:\n```\nGET /_session HTTP/1.1\nHost: localhost:5984\nAccept: application/json\nContent-Type: application/json; charset=utf-8\nX-Auth-CouchDB-Roles: users,blogger\nX-Auth-CouchDB-UserName: foo\nX-Auth-CouchDB-Token: 3f0786e96b20b0102b77f1a49c041be6977cfb3bf78c41a12adc121cd9b4e68a\n```\n\n----------------------------------------\n\nTITLE: Viewing Hashed Admin Passwords\nDESCRIPTION: Example showing how CouchDB stores hashed passwords in the configuration file\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/intro/security.rst#2025-04-21_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[admins]\nadmin = -pbkdf2-71c01cb429088ac1a1e95f3482202622dc1e53fe,226701bece4ae0fc9a373a5e02bf5d07,10\nanna = -pbkdf2-2d86831c82b440b8887169bd2eebb356821d621b,5e11b9a9228414ab92541beeeacbf125,10\n```\n\n----------------------------------------\n\nTITLE: Design Document Structure in CouchDB\nDESCRIPTION: Example structure of a CouchDB design document showing views, updates, filters and validate_doc_update functions.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/ddocs/ddocs.rst#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"_id\": \"_design/example\",\n    \"views\": {\n        \"view-number-one\": {\n            \"map\": \"function (doc) {/* function code here - see below */}\"\n        },\n        \"view-number-two\": {\n            \"map\": \"function (doc) {/* function code here - see below */}\",\n            \"reduce\": \"function (keys, values, rereduce) {/* function code here - see below */}\"\n        }\n    },\n    \"updates\": {\n        \"updatefun1\": \"function(doc,req) {/* function code here - see below */}\",\n        \"updatefun2\": \"function(doc,req) {/* function code here - see below */}\"\n    },\n    \"filters\": {\n        \"filterfunction1\": \"function(doc, req){ /* function code here - see below */ }\"\n    },\n    \"validate_doc_update\": \"function(newDoc, oldDoc, userCtx, secObj) { /* function code here - see below */ }\",\n    \"language\": \"javascript\"\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Cluster Setup Status with GET /_cluster_setup\nDESCRIPTION: Makes a GET request to /_cluster_setup to check the current status of cluster setup. Returns the cluster state which can be one of several values indicating configuration status.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/server/common.rst#2025-04-21_snippet_6\n\nLANGUAGE: http\nCODE:\n```\nGET /_cluster_setup HTTP/1.1\nAccept: application/json\nHost: localhost:5984\n```\n\n----------------------------------------\n\nTITLE: Filtered Changes Feed Request Example\nDESCRIPTION: Example of requesting filtered changes using a selector\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/database/changes.rst#2025-04-21_snippet_9\n\nLANGUAGE: http\nCODE:\n```\nPOST /recipes/_changes?filter=_selector HTTP/1.1\nContent-Type: application/json\nHost: localhost:5984\n\n{\n    \"selector\": { \"_id\": { \"$regex\": \"^_design/\" } }\n}\n```\n\n----------------------------------------\n\nTITLE: Getting CouchDB Server Information with curl\nDESCRIPTION: A basic HTTP GET request to the CouchDB server that returns server information including the version number, git SHA, UUID, and enabled features.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/intro/tour.rst#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"couchdb\": \"Welcome\",\n  \"version\": \"3.0.0\",\n  \"git_sha\": \"83bdcf693\",\n  \"uuid\": \"56f16e7c93ff4a2dc20eb6acc7000b71\",\n  \"features\": [\n    \"access-ready\",\n    \"partitioned\",\n    \"pluggable-storage-engines\",\n    \"reshard\",\n    \"scheduler\"\n  ],\n  \"vendor\": {\n    \"name\": \"The Apache Software Foundation\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Listing All CouchDB Databases\nDESCRIPTION: Sends a GET request to the /_all_dbs endpoint to retrieve a list of all databases in the CouchDB instance. The response contains a JSON array of database names.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/server/common.rst#2025-04-21_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nGET /_all_dbs HTTP/1.1\nAccept: application/json\nHost: localhost:5984\n```\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200 OK\nCache-Control: must-revalidate\nContent-Length: 52\nContent-Type: application/json\nDate: Sat, 10 Aug 2013 06:57:48 GMT\nServer: CouchDB (Erlang/OTP)\n\n[\n   \"_users\",\n   \"contacts\",\n   \"docs\",\n   \"invoices\",\n   \"locations\"\n]\n```\n\n----------------------------------------\n\nTITLE: Querying a Range of Years with Mango in CouchDB\nDESCRIPTION: This Mango query in JavaScript selects documents with 'year' fields between 1980 and 1990, by using '$lt' and '$gte', demonstrating advanced querying capabilities in CouchDB. It assists in obtaining all movie documents from the 1980s, while allowing future data extensibility.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/intro/tour.rst#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n{\n   \"selector\": {\n      \"year\": {\n         \"$lt\": 1990,\n         \"$gte\": 1980\n      }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking CouchDB Server Health in HTTP API\nDESCRIPTION: Makes a GET request to the /_up endpoint to check if the CouchDB server is up and ready to respond to requests. Returns a JSON object with status information.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/server/common.rst#2025-04-21_snippet_37\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200 OK\nCache-Control: must-revalidate\nContent-Length: 16\nContent-Type: application/json\nDate: Sat, 17 Mar 2018 04:46:26 GMT\nServer: CouchDB/2.2.0-f999071ec (Erlang OTP/19)\nX-Couch-Request-ID: c57a3b2787\nX-CouchDB-Body-Time: 0\n\n{\"status\":\"ok\"}\n```\n\n----------------------------------------\n\nTITLE: Creating a New Database with PUT Request in CouchDB\nDESCRIPTION: This snippet demonstrates how to create a new database in CouchDB using a PUT request. The database name must follow specific naming rules as outlined in the documentation.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/database/common.rst#2025-04-21_snippet_4\n\nLANGUAGE: http\nCODE:\n```\nPUT /db HTTP/1.1\nAccept: application/json\nHost: localhost:5984\n```\n\n----------------------------------------\n\nTITLE: Continuous Changes Feed HTTP Request Example\nDESCRIPTION: Example of making a continuous feed request to the CouchDB _changes endpoint\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/database/changes.rst#2025-04-21_snippet_5\n\nLANGUAGE: http\nCODE:\n```\nGET /somedatabase/_changes?feed=continuous HTTP/1.1\n```\n\n----------------------------------------\n\nTITLE: Specifying Field Type for Text Search Sorting in CouchDB Find API (JavaScript)\nDESCRIPTION: Example of explicitly specifying the field type for sorting in a text search query. This syntax is necessary when CouchDB cannot automatically determine the field type.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/database/find.rst#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"<fieldname>:string\": \"asc\"\n}\n```\n\n----------------------------------------\n\nTITLE: Reduce Function for Summing Rereduce Values\nDESCRIPTION: Demonstrates a simple reduce function that calculates the sum of values during a rereduce operation with the rereduce parameter set to true\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/ddocs/views/intro.rst#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nfunction(null, [3, 1], true) {\n    return sum([3, 1]);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating CouchDB Database with Replicas and Shards\nDESCRIPTION: Creates a new database in CouchDB cluster with specified number of replicas (n) and shards (q). Default values are 3 replicas and 8 shards if not specified.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/cluster/databases.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X PUT \"http://xxx.xxx.xxx.xxx:5984/database-name?n=3&q=8\" --user admin-user\n```\n\n----------------------------------------\n\nTITLE: CouchDB User Document Validation Function\nDESCRIPTION: A comprehensive validation function for the _users database that enforces complex security and data integrity rules for user document updates and creations\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/ddocs/ddocs.rst#2025-04-21_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nfunction(newDoc, oldDoc, userCtx, secObj) {\n    // Validation logic for user document updates\n    // Includes checks for deletion, document type, name, roles, and admin permissions\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting a Database with DELETE Request in CouchDB\nDESCRIPTION: This snippet shows how to delete a CouchDB database and all its contents using a DELETE request. This operation requires administrator privileges.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/database/common.rst#2025-04-21_snippet_9\n\nLANGUAGE: http\nCODE:\n```\nDELETE /db HTTP/1.1\nAccept: application/json\nHost: localhost:5984\n```\n\n----------------------------------------\n\nTITLE: Requesting Missing Revisions in CouchDB Replication (HTTP)\nDESCRIPTION: HTTP request to the _revs_diff endpoint to identify missing revisions during CouchDB replication. The request body contains document IDs and their revisions, while the response indicates which revisions are missing on the target.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/replication/protocol.rst#2025-04-21_snippet_16\n\nLANGUAGE: http\nCODE:\n```\nPOST /target/_revs_diff HTTP/1.1\nAccept: application/json\nContent-Length: 160\nContent-Type: application/json\nHost: localhost:5984\nUser-Agent: CouchDB\n\n{\n    \"foo\": [\n        \"3-6a540f3d701ac518d3b9733d673c5484\"\n    ],\n    \"bar\": [\n        \"1-967a00dff5e02add41819138abb3284d\"\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Authentication Handlers in CouchDB\nDESCRIPTION: Configures the list of authentication handlers used by CouchDB for various auth methods including cookie and default authentication.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/config/http.rst#2025-04-21_snippet_3\n\nLANGUAGE: ini\nCODE:\n```\n[chttpd]\nauthentication_handlers = {chttpd_auth, cookie_authentication_handler}, {chttpd_auth, default_authentication_handler}\n```\n\n----------------------------------------\n\nTITLE: Custom Validation Error in Bulk Document Operation\nDESCRIPTION: Illustrates how custom validation errors can be thrown and returned during a bulk document operation, providing specific reasons for document submission failures\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/database/bulk-api.rst#2025-04-21_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nthrow({forbidden: 'invalid recipe ingredient'});\n```\n\n----------------------------------------\n\nTITLE: Replicating Databases in CouchDB\nDESCRIPTION: This command demonstrates how to replicate documents from the source database to the target database in CouchDB. It uses a POST request and requires valid URLs for both, alongside appropriate headers. The command returns a session history of the replication.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/intro/api.rst#2025-04-21_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST http://admin:password@127.0.0.1:5984/_replicate \\\n     -d '{\"source\":\"http://admin:password@127.0.0.1:5984/albums\",\"target\":\"http://admin:password@127.0.0.1:5984/albums-replica\"}' \\\n     -H \"Content-Type: application/json\"\n```\n\n----------------------------------------\n\nTITLE: Finishing CouchDB Cluster Setup via API\nDESCRIPTION: This snippet demonstrates how to finalize the CouchDB cluster setup using the `_cluster_setup` API. This action adds the system databases to the cluster and completes the configuration process.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/setup/cluster.rst#2025-04-21_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST -H \"Content-Type: application/json\" http://admin:password@<setup-coordination-node>:5984/_cluster_setup -d '{\"action\": \"finish_cluster\"}'\n```\n\n----------------------------------------\n\nTITLE: Purging documents using POST request to /{db}/_purge in CouchDB\nDESCRIPTION: Example HTTP request and response for purging document revisions from a CouchDB database. The request specifies document IDs and revisions to be completely removed, and the response contains successfully purged revisions.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/database/misc.rst#2025-04-21_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST /db/_purge HTTP/1.1\nAccept: application/json\nContent-Length: 76\nContent-Type: application/json\nHost: localhost:5984\n\n{\n    \"c6114c65e295552ab1019e2b046b10e\": [\n        \"3-b06fcd1c1c9e0ec7c480ee8aa467bf3b\",\n        \"3-c50a32451890a3f1c3e423334cc92745\"\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a CouchDB Map Function for Tags\nDESCRIPTION: This JavaScript function emits tags from documents that contain tags, allowing users to retrieve documents based on their tags. It demonstrates conditionals within a map function and how to emit multiple keys from a single document.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/ddocs/views/intro.rst#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nfunction(doc) {\n    if(doc.tags.length > 0) {\n        for(var idx in doc.tags) {\n            emit(doc.tags[idx], null);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Counting Rows with Reduce Function Considering Rereduce\nDESCRIPTION: This JavaScript function modifies how counting is done based on whether it is a first-time reduce or a rereduce operation, allowing for flexibility in how data is aggregated based on the context.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/ddocs/views/intro.rst#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nfunction(keys, values, rereduce) {\n    if (rereduce) {\n        return sum(values);\n    } else {\n        return values.length;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: JavaScript: User Document Schema for CouchDB\nDESCRIPTION: Example of a complete user document with different password scheme configurations in CouchDB\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/intro/security.rst#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"type\": \"user\",\n  \"name\": \"user1\",\n  \"password_scheme\": \"simple+pbkdf2\",\n  \"derived_key\": \"result from above\",\n  \"pbkdf2_prf\": \"sha256\",\n  \"iterations\": 600000,\n  \"salt\": \"salthere\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Document with Specified ID in CouchDB\nDESCRIPTION: This snippet shows how to create a document in CouchDB with a specified document ID by including the '_id' field in the JSON payload. The request and response demonstrate the process and the returned document information.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/database/common.rst#2025-04-21_snippet_12\n\nLANGUAGE: http\nCODE:\n```\nPOST /db HTTP/1.1\nAccept: application/json\nContent-Length: 98\nContent-Type: application/json\n\n{\n    \"_id\": \"FishStew\",\n    \"servings\": 4,\n    \"subtitle\": \"Delicious with fresh bread\",\n    \"title\": \"Fish Stew\"\n}\n```\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 201 Created\nCache-Control: must-revalidate\nContent-Length: 71\nContent-Type: application/json\nDate: Tue, 13 Aug 2013 15:19:25 GMT\nETag: \"1-9c65296036141e575d32ba9c034dd3ee\"\nLocation: http://localhost:5984/db/FishStew\nServer: CouchDB (Erlang/OTP)\n\n{\n    \"id\": \"FishStew\",\n    \"ok\": true,\n    \"rev\": \"1-9c65296036141e575d32ba9c034dd3ee\"\n}\n```\n\n----------------------------------------\n\nTITLE: Bulk Document Insertion Request in CouchDB\nDESCRIPTION: HTTP request for inserting multiple documents with mixed ID assignment strategies, including predefined and auto-generated document IDs\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/database/bulk-api.rst#2025-04-21_snippet_12\n\nLANGUAGE: http\nCODE:\n```\nPOST /source/_bulk_docs HTTP/1.1\nAccept: application/json\nContent-Length: 323\nContent-Type: application/json\nHost: localhost:5984\n\n{\n    \"docs\": [\n        {\n            \"_id\": \"FishStew\",\n            \"servings\": 4,\n            \"subtitle\": \"Delicious with freshly baked bread\",\n            \"title\": \"FishStew\"\n        },\n        {\n            \"_id\": \"LambStew\",\n            \"servings\": 6,\n            \"subtitle\": \"Serve with a whole meal scone topping\",\n            \"title\": \"LambStew\"\n        },\n        {\n            \"servings\": 8,\n            \"subtitle\": \"Hand-made dumplings make a great accompaniment\",\n            \"title\": \"BeefStew\"\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Joining Node to CouchDB Cluster via API\nDESCRIPTION: This snippet shows how to join a node to an existing CouchDB cluster using the `_cluster_setup` API. It includes parameters for specifying the remote node's IP address, port, username, and password, along with the credentials for the setup coordination node.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/setup/cluster.rst#2025-04-21_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST -H \"Content-Type: application/json\" http://admin:password@<setup-coordination-node>:5984/_cluster_setup -d '{\"action\": \"enable_cluster\", \"bind_address\":\"0.0.0.0\", \"username\": \"admin\", \"password\":\"password\", \"port\": 5984, \"node_count\": \"3\", \"remote_node\": \"<remote-node-ip>\", \"remote_current_user\": \"<remote-node-username>\", \"remote_current_password\": \"<remote-node-password>\" }'\n```\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST -H \"Content-Type: application/json\" http://admin:password@<setup-coordination-node>:5984/_cluster_setup -d '{\"action\": \"add_node\", \"host\":\"<remote-node-ip>\", \"port\": <remote-node-port>, \"username\": \"admin\", \"password\":\"password\"}'\n```\n\n----------------------------------------\n\nTITLE: Retrieving Active Tasks from CouchDB\nDESCRIPTION: Sends a GET request to the /_active_tasks endpoint to retrieve information about currently running tasks on the CouchDB server. The response contains a JSON array of task objects with details like type, progress, and status.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/server/common.rst#2025-04-21_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nGET /_active_tasks HTTP/1.1\nAccept: application/json\nHost: localhost:5984\n```\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200 OK\nCache-Control: must-revalidate\nContent-Length: 1690\nContent-Type: application/json\nDate: Sat, 10 Aug 2013 06:37:31 GMT\nServer: CouchDB (Erlang/OTP)\n\n[\n    {\n        \"changes_done\": 64438,\n        \"database\": \"mailbox\",\n        \"pid\": \"<0.12986.1>\",\n        \"progress\": 84,\n        \"started_on\": 1376116576,\n        \"total_changes\": 76215,\n        \"type\": \"database_compaction\",\n        \"updated_on\": 1376116619\n    },\n    {\n        \"changes_done\": 14443,\n        \"database\": \"mailbox\",\n        \"design_document\": \"c9753817b3ba7c674d92361f24f59b9f\",\n        \"pid\": \"<0.10461.3>\",\n        \"progress\": 18,\n        \"started_on\": 1376116621,\n        \"total_changes\": 76215,\n        \"type\": \"indexer\",\n        \"updated_on\": 1376116650\n    },\n    {\n        \"changes_done\": 5454,\n        \"database\": \"mailbox\",\n        \"design_document\": \"_design/meta\",\n        \"pid\": \"<0.6838.4>\",\n        \"progress\": 7,\n        \"started_on\": 1376116632,\n        \"total_changes\": 76215,\n        \"type\": \"indexer\",\n        \"updated_on\": 1376116651\n    },\n    {\n        \"checkpointed_source_seq\": 68585,\n        \"continuous\": false,\n        \"doc_id\": null,\n        \"doc_write_failures\": 0,\n        \"bulk_get_attempts\": 4524,\n        \"bulk_get_docs\": 4524,\n        \"docs_read\": 4524,\n        \"docs_written\": 4524,\n        \"missing_revisions_found\": 4524,\n        \"pid\": \"<0.1538.5>\",\n        \"progress\": 44,\n        \"replication_id\": \"9bc1727d74d49d9e157e260bb8bbd1d5\",\n        \"revisions_checked\": 4524,\n        \"source\": \"mailbox\",\n        \"source_seq\": 154419,\n        \"started_on\": 1376116644,\n        \"target\": \"http://mailsrv:5984/mailbox\",\n        \"type\": \"replication\",\n        \"updated_on\": 1376116651\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: SSL Configuration\nDESCRIPTION: Basic SSL configuration to enable HTTPS and set certificate paths.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/config/http.rst#2025-04-21_snippet_11\n\nLANGUAGE: ini\nCODE:\n```\n[ssl]\nenable = true\ncert_file = /etc/couchdb/cert/couchdb.pem\nkey_file = /etc/couchdb/cert/privkey.pem\n```\n\n----------------------------------------\n\nTITLE: Demonstration of JSON Parser Vulnerability in CouchDB\nDESCRIPTION: Example showing how duplicate 'roles' keys in JSON can be exploited to gain admin privileges. The vulnerability occurs because the second roles key is used for document write authorization while the first roles key is used for subsequent user authorization.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/cve/2017-12635.rst#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"roles\": [\"_admin\"],\n  \"roles\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Database Information with GET Request in CouchDB\nDESCRIPTION: This snippet shows how to retrieve detailed information about a CouchDB database using a GET request. It specifies the Accept header to request JSON response format.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/database/common.rst#2025-04-21_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nGET /receipts HTTP/1.1\nAccept: application/json\nHost: localhost:5984\n```\n\n----------------------------------------\n\nTITLE: Querying CouchDB View with limit (HTTP)\nDESCRIPTION: This HTTP request demonstrates the usage of the `limit` parameter to restrict the number of returned rows to 5. The `Accept` header specifies that the expected response format is JSON. The endpoint is for retrieving recipes by title.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/ddoc/views.rst#2025-04-21_snippet_13\n\nLANGUAGE: http\nCODE:\n```\n\"GET /recipes/_design/recipes/_view/by_title?limit=5 HTTP/1.1\nAccept: application/json\nHost: localhost:5984\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Document in CouchDB Using cURL\nDESCRIPTION: This cURL command creates a new document in CouchDB with specific properties like title, artist, and year. It connects to the CouchDB instance and requires authentication credentials. The command returns a response that includes the document's unique ID and revision number.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/intro/api.rst#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ncurl -vX PUT http://admin:password@127.0.0.1:5984/albums/70b50bfa0a4b3aed1f8aff9e92dc16a0 \\\n     -d '{\"title\":\"Blackened Sky\",\"artist\":\"Biffy Clyro\",\"year\":2002}'\n```\n\n----------------------------------------\n\nTITLE: PUT Request to Create/Update CouchDB Document\nDESCRIPTION: Example of a PUT request to create or update a document in CouchDB, including the full document content in JSON format.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/document/common.rst#2025-04-21_snippet_4\n\nLANGUAGE: http\nCODE:\n```\nPUT /recipes/SpaghettiWithMeatballs HTTP/1.1\nAccept: application/json\nContent-Length: 196\nContent-Type: application/json\nHost: localhost:5984\n\n{\n    \"description\": \"An Italian-American dish that usually consists of spaghetti, tomato sauce and meatballs.\",\n    \"ingredients\": [\n        \"spaghetti\",\n        \"tomato sauce\",\n        \"meatballs\"\n    ],\n    \"name\": \"Spaghetti with meatballs\"\n}\n```\n\n----------------------------------------\n\nTITLE: Mango Query Selector Example - JavaScript\nDESCRIPTION: Example of a basic Mango query selector to find documents by Actor_name with specific fields returned.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/database/find.rst#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"selector\": { \"Actor_name\": \"Robert De Niro\" },\n    \"fields\": [\"Actor_name\", \"Movie_year\", \"_id\", \"_rev\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Blog Post Document Structure in CouchDB\nDESCRIPTION: Example document structures showing the format of blog posts stored in CouchDB, including document ID, revision, title, body and date fields.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/ddocs/views/intro.rst#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"_id\":\"biking\",\n    \"_rev\":\"AE19EBC7654\",\n\n    \"title\":\"Biking\",\n    \"body\":\"My biggest hobby is mountainbiking. The other day...\",\n    \"date\":\"2009/01/30 18:04:11\"\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"_id\":\"bought-a-cat\",\n    \"_rev\":\"4A3BBEE711\",\n\n    \"title\":\"Bought a Cat\",\n    \"body\":\"I went to the pet store earlier and brought home a little kitty...\",\n    \"date\":\"2009/02/17 21:13:39\"\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"_id\":\"hello-world\",\n    \"_rev\":\"43FBA4E7AB\",\n\n    \"title\":\"Hello World\",\n    \"body\":\"Well hello and welcome to my new blog...\",\n    \"date\":\"2009/01/15 15:52:20\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing CouchDB Update Function for Form Handling\nDESCRIPTION: This JavaScript function handles the form data submitted to CouchDB. It checks for existing documents, validates the form data, creates a new document with a unique ID, and returns a JSON response.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/best-practices/forms.rst#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction(doc, req) {\n\n    if (doc) {\n        return [doc, toJSON({\"error\": \"request already filed\"})]\n    }\n\n    if !(req.form && req.form.email) {\n        return [null, toJSON({\"error\": \"incomplete form\"})]\n    }\n\n    var date = new Date()\n    var newdoc = req.form\n    newdoc._id = req.form.email + \"_\" + date.toISOString()\n\n    return [newdoc, toJSON({\"success\":\"ok\"})]\n}\n```\n\n----------------------------------------\n\nTITLE: Running CouchDB locally for development\nDESCRIPTION: Commands to run CouchDB in development mode. Several options are provided including running a basic three-node cluster, running with a haproxy caching layer, and running with admin credentials.\nSOURCE: https://github.com/apache/couchdb/blob/main/README.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./dev/run\n./dev/run --admin=admin:admin\n./dev/run --with-admin-party-please\n./dev/run --with-haproxy --haproxy=/path/to/haproxy\n```\n\n----------------------------------------\n\nTITLE: Basic Mango Selector - Single Field Query\nDESCRIPTION: Simple selector that matches documents where the director field equals a specific value.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/ddocs/mango.rst#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"director\": \"Lars von Trier\"\n}\n```\n\n----------------------------------------\n\nTITLE: HTTP POST Request for Bulk Document Upload in CouchDB Replication\nDESCRIPTION: HTTP POST request to upload multiple documents to the target database in a single operation using the _bulk_docs endpoint. The request includes the complete documents with their revision histories, and sets new_edits=false to preserve the original revision IDs.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/replication/protocol.rst#2025-04-21_snippet_22\n\nLANGUAGE: http\nCODE:\n```\nPOST /target/_bulk_docs HTTP/1.1\nAccept: application/json\nContent-Length: 826\nContent-Type:application/json\nHost: localhost:5984\nUser-Agent: CouchDB\nX-Couch-Full-Commit: false\n\n{\n    \"docs\": [\n        {\n            \"_id\": \"SpaghettiWithMeatballs\",\n            \"_rev\": \"1-917fa2381192822767f010b95b45325b\",\n            \"_revisions\": {\n                \"ids\": [\n                    \"917fa2381192822767f010b95b45325b\"\n                ],\n                \"start\": 1\n            },\n            \"description\": \"An Italian-American delicious dish\",\n            \"ingredients\": [\n                \"spaghetti\",\n                \"tomato sauce\",\n                \"meatballs\"\n            ],\n            \"name\": \"Spaghetti with meatballs\"\n        },\n        {\n            \"_id\": \"LambStew\",\n            \"_rev\": \"1-34c318924a8f327223eed702ddfdc66d\",\n            \"_revisions\": {\n                \"ids\": [\n                    \"34c318924a8f327223eed702ddfdc66d\"\n                ],\n                \"start\": 1\n            },\n            \"servings\": 6,\n\n```\n\n----------------------------------------\n\nTITLE: GET Response with Database Information in CouchDB\nDESCRIPTION: This is the response to a GET request for database information, containing details like document count, size metrics, cluster configuration, and other database properties in JSON format.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/database/common.rst#2025-04-21_snippet_3\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200 OK\nCache-Control: must-revalidate\nContent-Length: 258\nContent-Type: application/json\nDate: Mon, 12 Aug 2013 01:38:57 GMT\nServer: CouchDB (Erlang/OTP)\n\n{\n    \"cluster\": {\n        \"n\": 3,\n        \"q\": 8,\n        \"r\": 2,\n        \"w\": 2\n    },\n    \"compact_running\": false,\n    \"db_name\": \"receipts\",\n    \"disk_format_version\": 6,\n    \"doc_count\": 6146,\n    \"doc_del_count\": 64637,\n    \"instance_start_time\": \"0\",\n    \"props\": {},\n    \"purge_seq\": 0,\n    \"sizes\": {\n        \"active\": 65031503,\n        \"external\": 66982448,\n        \"file\": 137433211\n    },\n    \"update_seq\": \"292786-g1AAAAF...\"\n}\n```\n\n----------------------------------------\n\nTITLE: Simple Query with Sorting in CouchDB Find API (JavaScript)\nDESCRIPTION: Complete example of a Find API query that includes both selector criteria and multi-field sorting. This query finds documents for a specific actor and sorts results by actor name and movie runtime.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/database/find.rst#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"selector\": {\"Actor_name\": \"Robert De Niro\"},\n    \"sort\": [{\"Actor_name\": \"asc\"}, {\"Movie_runtime\": \"asc\"}]\n}\n```\n\n----------------------------------------\n\nTITLE: POST Request for CouchDB View\nDESCRIPTION: Example of querying a CouchDB view using POST method with specific keys in the request body to filter results.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/ddoc/views.rst#2025-04-21_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nPOST /recipes/_design/ingredients/_view/by_name HTTP/1.1\nAccept: application/json\nContent-Length: 37\nHost: localhost:5984\n\n{\n    \"keys\": [\n        \"meatballs\",\n        \"spaghetti\"\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring CouchDB Cluster Parameters\nDESCRIPTION: Basic cluster configuration in default.ini showing the essential parameters for sharding (q) and replication (n). These parameters control how many shards a database is split into and how many copies of each document are maintained.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/cluster/theory.rst#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n[cluster]\nq=2\nn=3\n```\n\n----------------------------------------\n\nTITLE: Basic Reduce Function for Summation in CouchDB\nDESCRIPTION: A simple reduce function that sums all the values passed to it from the map phase. This demonstrates the basic structure of reduce functions for aggregation in CouchDB.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/ddocs/views/nosql.rst#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nfunction(keys, values) {\n    var sum = 0;\n    for(var idx in values) {\n        sum = sum + values[idx];\n    }\n    return sum;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Target Database with Replication - HTTP\nDESCRIPTION: This snippet shows how to include the 'create_target' field in a replication request to create the target database if it does not exist. It follows the same HTTP request format as standard replication requests.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/server/common.rst#2025-04-21_snippet_16\n\nLANGUAGE: http\nCODE:\n```\nPOST http://couchdb:5984/_replicate HTTP/1.1\nContent-Type: application/json\nAccept: application/json\n\n{\n    \"create_target\" : true,\n    \"source\" : \"recipes\",\n    \"target\" : \"http://couchdb-remote:5984/recipes\"\n}\n```\n\n----------------------------------------\n\nTITLE: Updating an Existing Document with _rev Parameter in CouchDB via HTTP\nDESCRIPTION: Shows how to update a document by including the current revision ID in the _rev field of the request body. This is required for CouchDB's optimistic concurrency control.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/document/common.rst#2025-04-21_snippet_17\n\nLANGUAGE: http\nCODE:\n```\nPUT /recipes/SpaghettiWithMeatballs HTTP/1.1\nAccept: application/json\nContent-Length: 258\nContent-Type: application/json\nHost: localhost:5984\n\n{\n    \"_rev\": \"1-917fa2381192822767f010b95b45325b\",\n    \"description\": \"An Italian-American dish that usually consists of spaghetti, tomato sauce and meatballs.\",\n    \"ingredients\": [\n        \"spaghetti\",\n        \"tomato sauce\",\n        \"meatballs\"\n    ],\n    \"name\": \"Spaghetti with meatballs\",\n    \"serving\": \"hot\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring CouchDB's Compaction Channels\nDESCRIPTION: This configuration section details how to set up compaction channels in CouchDB, specifying their type and priority for database and view compactions. It defines the default channels and their minimum priority settings, allowing for efficient management of storage reduction tasks.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/maintenance/compaction.rst#2025-04-21_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[smoosh]\ndb_channels = upgrade_dbs,ratio_dbs,slack_dbs\nview_channels = upgrade_views,ratio_views,slack_views\ncleanup_channels = index_cleanup\n\n[smoosh.ratio_dbs]\npriority = ratio\nmin_priority = 2.0\n\n[smoosh.ratio_views]\npriority = ratio\nmin_priority = 2.0\n\n[smoosh.slack_dbs]\npriority = slack\nmin_priority = 536870912\n\n[smoosh.slack_views]\npriority = slack\nmin_priority = 536870912\n```\n\n----------------------------------------\n\nTITLE: Tracking Compaction Progress in CouchDB\nDESCRIPTION: This snippet demonstrates how to track the progress of a compaction task using the _active_tasks endpoint. It provides detailed information about the ongoing compaction process.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/maintenance/compaction.rst#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncurl http://adm:pass@localhost:5984/_active_tasks\n```\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200 OK\nCache-Control: must-revalidate\nContent-Length: 175\nContent-Type: application/json\nDate: Wed, 19 Jun 2013 16:27:23 GMT\nServer: CouchDB (Erlang/OTP)\n\n[\n    {\n        \"changes_done\": 44461,\n        \"database\": \"my_db\",\n        \"pid\": \"<0.218.0>\",\n        \"progress\": 58,\n        \"started_on\": 1371659228,\n        \"total_changes\": 76215,\n        \"type\": \"database_compaction\",\n        \"updated_on\": 1371659241\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Performing Bulk Document Insert in CouchDB\nDESCRIPTION: Demonstrates how to insert multiple documents in a single HTTP request using the _bulk_docs endpoint with specified document IDs and revisions\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/database/bulk-api.rst#2025-04-21_snippet_13\n\nLANGUAGE: http\nCODE:\n```\nPOST /recipes/_bulk_docs HTTP/1.1\nAccept: application/json\nContent-Length: 464\nContent-Type: application/json\nHost: localhost:5984\n\n{\n    \"docs\": [\n        {\n            \"_id\": \"FishStew\",\n            \"_rev\": \"1-6a466d5dfda05e613ba97bd737829d67\",\n            \"servings\": 4,\n            \"subtitle\": \"Delicious with freshly baked bread\",\n            \"title\": \"FishStew\"\n        },\n        {\n            \"_id\": \"LambStew\",\n            \"_rev\": \"1-648f1b989d52b8e43f05aa877092cc7c\",\n            \"servings\": 6,\n            \"subtitle\": \"Serve with a whole meal scone topping\",\n            \"title\": \"LambStew\"\n        },\n        {\n            \"_id\": \"BeefStew\",\n            \"_rev\": \"1-e4602845fc4c99674f50b1d5a804fdfa\",\n            \"servings\": 8,\n            \"subtitle\": \"Hand-made dumplings make a great accompaniment\",\n            \"title\": \"BeefStew\"\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Cluster Membership Information with HTTP GET Request in CouchDB\nDESCRIPTION: Example HTTP GET request to the _membership endpoint which returns information about nodes in the CouchDB cluster. This endpoint is useful when setting up or monitoring a cluster.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/server/common.rst#2025-04-21_snippet_10\n\nLANGUAGE: http\nCODE:\n```\nGET /_membership HTTP/1.1\nAccept: application/json\nHost: localhost:5984\n```\n\n----------------------------------------\n\nTITLE: Creating Index POST Request - HTTP\nDESCRIPTION: HTTP POST request example for creating a new index on a field called 'foo' in CouchDB.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/database/find.rst#2025-04-21_snippet_7\n\nLANGUAGE: http\nCODE:\n```\nPOST /db/_index HTTP/1.1\nContent-Type: application/json\nContent-Length: 116\nHost: localhost:5984\n\n{\n    \"index\": {\n        \"fields\": [\"foo\"]\n    },\n    \"name\" : \"foo-index\",\n    \"type\" : \"json\"\n}\n```\n\n----------------------------------------\n\nTITLE: GET Response from CouchDB View\nDESCRIPTION: Response from CouchDB showing view results including offset, rows with document IDs, keys, and values, plus total row count. Contains example data for a recipe with ingredients.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/ddoc/views.rst#2025-04-21_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200 OK\nCache-Control: must-revalidate\nContent-Type: application/json\nDate: Wed, 21 Aug 2013 09:12:06 GMT\nETag: \"2FOLSBSW4O6WB798XU4AQYA9B\"\nServer: CouchDB (Erlang/OTP)\nTransfer-Encoding: chunked\n\n{\n    \"offset\": 0,\n    \"rows\": [\n        {\n            \"id\": \"SpaghettiWithMeatballs\",\n            \"key\": \"meatballs\",\n            \"value\": 1\n        },\n        {\n            \"id\": \"SpaghettiWithMeatballs\",\n            \"key\": \"spaghetti\",\n            \"value\": 1\n        },\n        {\n            \"id\": \"SpaghettiWithMeatballs\",\n            \"key\": \"tomato sauce\",\n            \"value\": 1\n        }\n    ],\n    \"total_rows\": 3\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Document in CouchDB with HTTP POST\nDESCRIPTION: This snippet demonstrates how to create a new document in CouchDB using an HTTP POST request. It includes the request headers, JSON payload, and the expected response with the assigned document ID and revision.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/database/common.rst#2025-04-21_snippet_11\n\nLANGUAGE: http\nCODE:\n```\nPOST /db HTTP/1.1\nAccept: application/json\nContent-Length: 81\nContent-Type: application/json\n\n{\n    \"servings\": 4,\n    \"subtitle\": \"Delicious with fresh bread\",\n    \"title\": \"Fish Stew\"\n}\n```\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 201 Created\nCache-Control: must-revalidate\nContent-Length: 95\nContent-Type: application/json\nDate: Tue, 13 Aug 2013 15:19:25 GMT\nLocation: http://localhost:5984/db/ab39fe0993049b84cfa81acd6ebad09d\nServer: CouchDB (Erlang/OTP)\n\n{\n    \"id\": \"ab39fe0993049b84cfa81acd6ebad09d\",\n    \"ok\": true,\n    \"rev\": \"1-9c65296036141e575d32ba9c034dd3ee\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using $or operator with index in CouchDB\nDESCRIPTION: This snippet demonstrates the use of the ``$or`` operator in a CouchDB query, assuming an index on the ``year`` field. The query selects documents where the year is 1977 and either the director is \"George Lucas\" or the director is \"Steven Spielberg\". This effectively retrieves documents matching the year and at least one of the director conditions.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/ddocs/mango.rst#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"year\": 1977,\n    \"$or\": [\n        { \"director\": \"George Lucas\" },\n        { \"director\": \"Steven Spielberg\" }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Mango Index in CouchDB with JavaScript\nDESCRIPTION: This JSON content creates a Mango Index in CouchDB on the 'year' field, using Fauxton's interface in JavaScript. The index named 'year-json-index' helps in efficiently querying documents based on the release year of movies. This index is vital for performance in data querying tasks.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/intro/tour.rst#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n{\n   \"index\": {\n      \"fields\": [\n         \"year\"\n      ]\n   },\n   \"name\": \"year-json-index\",\n   \"type\": \"json\"\n}\n```\n\n----------------------------------------\n\nTITLE: Triggering Manual View Compaction in CouchDB\nDESCRIPTION: This snippet demonstrates how to manually trigger view compaction for a specific design document using a POST request to the _compact endpoint.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/maintenance/compaction.rst#2025-04-21_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ncurl -H \"Content-Type: application/json\" -X POST http://adm:pass@localhost:5984/dbname/_compact/ddoc-name\n```\n\nLANGUAGE: javascript\nCODE:\n```\n{\"ok\":true}\n```\n\n----------------------------------------\n\nTITLE: Defining Sensor Reading Document Structure in JavaScript\nDESCRIPTION: This JavaScript snippet illustrates the structure of a sensor reading document typically used in a partitioned database. It includes an ID, revision, sensor ID, location coordinates, field name, and an array of readings with timestamps.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/partitioned-dbs/index.rst#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"_id\": \"sensor-reading-ca33c748-2d2c-4ed1-8abf-1bca4d9d03cf\",\n    \"_rev\":\"1-14e8f3262b42498dbd5c672c9d461ff0\",\n    \"sensor_id\": \"sensor-260\",\n    \"location\": [41.6171031, -93.7705674],\n    \"field_name\": \"Bob's Corn Field #5\",\n    \"readings\": [\n        [\"2019-01-21T00:00:00\", 0.15],\n        [\"2019-01-21T06:00:00\", 0.14],\n        [\"2019-01-21T12:00:00\", 0.16],\n        [\"2019-01-21T18:00:00\", 0.11]\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Second Comment Document Example in CouchDB\nDESCRIPTION: Another example of a comment document structure with post reference in the separate comments approach.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/ddocs/views/joins.rst#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"_id\": \"DEFABC\",\n    \"_rev\": \"123456\",\n    \"type\": \"comment\",\n    \"post\": \"myslug\",\n    \"author\": \"jane\",\n    \"content\": \"â€¦\"\n}\n```\n\n----------------------------------------\n\nTITLE: Map Function for Retrieving Comments by Post ID in CouchDB\nDESCRIPTION: View function that emits comments keyed by their associated post ID, enabling retrieval of all comments for a specific blog post.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/ddocs/views/joins.rst#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nfunction(doc) {\n    if (doc.type == \"comment\") {\n        emit(doc.post, {author: doc.author, content: doc.content});\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling CORS in CouchDB Configuration\nDESCRIPTION: Basic configuration to enable Cross-Origin Resource Sharing (CORS) support in CouchDB's HTTP server. This is required for any CORS functionality to work.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/config/http.rst#2025-04-21_snippet_13\n\nLANGUAGE: ini\nCODE:\n```\n[chttpd]\nenable_cors = true\n```\n\n----------------------------------------\n\nTITLE: Using Predefined Sum Function in JavaScript Reduce\nDESCRIPTION: A straightforward reduce function leveraging CouchDB's predefined 'sum' function to aggregate values. Inputs 'keys' and 'values' focus on totaling all values, streamlining the data processing by utilizing a built-in function.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/ddocs/views/nosql.rst#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nfunction(keys, values) {\n    return sum(values);\n}\n```\n\n----------------------------------------\n\nTITLE: Updating CouchDB Configuration via HTTP API\nDESCRIPTION: Example of updating CouchDB configuration parameters using the HTTP API, showing how to change the UUID algorithm setting.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/config/intro.rst#2025-04-21_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ncurl -X PUT http://adm:pass@localhost:5984/_node/<name@host>/_config/uuids/algorithm -d '\"random\"'\n```\n\n----------------------------------------\n\nTITLE: Conflict Avoidance Example\nDESCRIPTION: This code block demonstrates how CouchDB avoids creating conflicting revisions on a single node by returning a 409 Conflict error. It shows a scenario where two users concurrently fetch and update the same document, leading to a conflict when the second user attempts to save their changes with an outdated revision.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/replication/conflicts.rst#2025-04-21_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n    USER1    ----------->  GET /db/bob\n             <-----------  {\"_rev\":\"1-aaa\", ...}\n\n    USER2    ----------->  GET /db/bob\n             <-----------  {\"_rev\":\"1-aaa\", ...}\n\n    USER1    ----------->  PUT /db/bob?rev=1-aaa\n             <-----------  {\"_rev\":\"2-bbb\", ...}\n\n    USER2    ----------->  PUT /db/bob?rev=1-aaa\n             <-----------  409 Conflict  (not saved)\n```\n\n----------------------------------------\n\nTITLE: Querying CouchDB Root Endpoint\nDESCRIPTION: Sends a GET request to the CouchDB root endpoint to retrieve server information including version and enabled features. The response contains a JSON object with server details.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/server/common.rst#2025-04-21_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nGET / HTTP/1.1\nAccept: application/json\nHost: localhost:5984\n```\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200 OK\nContent-Length: 247\nContent-Type: application/json\nDate: Mon, 21 Oct 2024 21:53:51 GMT\nServer: CouchDB/3.4.2 (Erlang OTP/25)\n\n{\n    \"couchdb\": \"Welcome\",\n    \"features\": [\n        \"access-ready\",\n        \"partitioned\",\n        \"pluggable-storage-engines\",\n        \"reshard\",\n        \"scheduler\"\n    ],\n    \"git_sha\": \"6e5ad2a5c\",\n    \"uuid\": \"9ddf59457dbb8772316cf06fc5e5a2e4\",\n    \"vendor\": {\n        \"name\": \"The Apache Software Foundation\"\n    },\n    \"version\": \"3.4.2\"\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving CouchDB Database Information\nDESCRIPTION: Sends a GET request to the /_dbs_info endpoint to retrieve detailed information about all databases in the CouchDB instance. The response contains a JSON array of database info objects.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/server/common.rst#2025-04-21_snippet_3\n\nLANGUAGE: http\nCODE:\n```\nGET /_dbs_info HTTP/1.1\nAccept: application/json\nHost: localhost:5984\n```\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200 OK\nCache-Control: must-revalidate\nContent-Type: application/json\nDate: Thu, 18 Nov 2021 14:37:35 GMT\nServer: CouchDB (Erlang OTP/23)\n\n[\n  {\n    \"key\": \"animals\",\n    \"info\": {\n      \"db_name\": \"animals\",\n      \"update_seq\": \"52232\",\n      \"sizes\": {\n        \"file\": 1178613587,\n        \"external\": 1713103872,\n        \"active\": 1162451555\n      },\n      \"purge_seq\": 0,\n      \"doc_del_count\": 0,\n      \"doc_count\": 52224,\n      \"disk_format_version\": 6,\n      \"compact_running\": false,\n      \"cluster\": {\n\n\n```\n\n----------------------------------------\n\nTITLE: Getting Source Database Information with GET in CouchDB\nDESCRIPTION: This snippet shows a GET request to retrieve information about the source database. The response includes details like `update_seq`, `instance_start_time`, `doc_count`, and `sizes`. The `update_seq` is crucial for defining a temporary upper bound for the changes feed during replication.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/replication/protocol.rst#2025-04-21_snippet_6\n\nLANGUAGE: http\nCODE:\n```\nGET /source HTTP/1.1\nAccept: application/json\nHost: localhost:5984\nUser-Agent: CouchDB\n```\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200 OK\nCache-Control: must-revalidate\nContent-Length: 256\nContent-Type: application/json\nDate: Tue, 08 Oct 2013 07:53:08 GMT\nServer: CouchDB (Erlang OTP)\n\n{\n    \"committed_update_seq\": 61772,\n    \"compact_running\": false,\n    \"db_name\": \"source\",\n    \"disk_format_version\": 6,\n    \"doc_count\": 41961,\n    \"doc_del_count\": 3807,\n    \"instance_start_time\": \"0\",\n    \"purge_seq\": 0,\n    \"sizes\": {\n      \"active\": 70781613961,\n      \"disk\": 79132913799,\n      \"external\": 72345632950\n    },\n    \"update_seq\": 61772\n}\n```\n\n----------------------------------------\n\nTITLE: Pre-computing Pagination Keys in CouchDB\nDESCRIPTION: Technique for efficiently handling pagination of large document sets by pre-computing startkey and startkey_docid values for multiple pages. Helps optimize performance when dealing with result sets potentially containing tens of thousands of rows.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/ddocs/views/pagination.rst#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// Pre-compute startkey and startkey_docid for pagination\nconst startkey = '...'\nconst startkey_docid = '...'\n```\n\n----------------------------------------\n\nTITLE: SSL Certificate Generation Commands\nDESCRIPTION: Shell commands to generate self-signed SSL certificates for CouchDB HTTPS setup.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/config/http.rst#2025-04-21_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nmkdir /etc/couchdb/cert\ncd /etc/couchdb/cert\nopenssl genrsa > privkey.pem\nopenssl req -new -x509 -key privkey.pem -out couchdb.pem -days 1095\nchmod 600 privkey.pem couchdb.pem\nchown couchdb privkey.pem couchdb.pem\n```\n\n----------------------------------------\n\nTITLE: Enabling CouchDB Cluster via API\nDESCRIPTION: This snippet demonstrates enabling a CouchDB cluster using the `_cluster_setup` API endpoint with `curl`. It includes parameters for enabling the cluster, setting the bind address, username, password, and the number of nodes.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/setup/cluster.rst#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST -H \"Content-Type: application/json\" http://admin:password@127.0.0.1:5984/_cluster_setup -d '{\"action\": \"enable_cluster\", \"bind_address\":\"0.0.0.0\", \"username\": \"admin\", \"password\":\"password\", \"node_count\":\"3\"}'\n```\n\n----------------------------------------\n\nTITLE: Define a CouchDB Reduce Function to Count Comments\nDESCRIPTION: This reduce function in JavaScript defines how to sum values passed in from a map function, allowing for the counting of occurrences effectively. The function can also handle a 'rereduce' parameter to accommodate different views on the data.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/ddocs/views/intro.rst#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nfunction(keys, values, rereduce) {\n    return sum(values);\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Git Repository for CouchDB Contribution as a New Contributor\nDESCRIPTION: Commands to fork, clone, and configure Git remotes for the CouchDB repository. This process allows new contributors to create a local development environment properly linked to both their fork and the upstream repository.\nSOURCE: https://github.com/apache/couchdb/blob/main/CONTRIBUTING.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Clone your fork of the repo into the current directory\ngit clone https://github.com/<your-username>/<repo-name>\n# Navigate to the newly cloned directory\ncd <repo-name>\n# Assign the original repo to a remote called \"upstream\"\ngit remote add upstream https://github.com/apache/<repo-name>\n```\n\n----------------------------------------\n\nTITLE: Greater Than Operator Query\nDESCRIPTION: Selector using the $gt operator to match documents with year greater than 2010.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/ddocs/mango.rst#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"year\": {\n        \"$gt\": 2010\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Map Function for Linked Document Retrieval in CouchDB\nDESCRIPTION: Map function that emits both the document and its ancestors, allowing retrieval of a complete hierarchy with include_docs=true.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/ddocs/views/joins.rst#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction(doc) {\n    if (doc.value) {\n        emit([doc.value, 0], null);\n        if (doc.ancestors) {\n            for (var i in doc.ancestors) {\n                emit([doc.value, Number(i)+1], {_id: doc.ancestors[i]});\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Authenticating User with Correct Credentials in CouchDB (Bash/cURL)\nDESCRIPTION: This cURL command demonstrates how to authenticate a user named 'jan' with the correct password 'orange' using the CouchDB _session endpoint. It sends a POST request with the username and password as form data.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/intro/security.rst#2025-04-21_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST http://localhost:5984/_session -d 'name=jan&password=orange'\n```\n\n----------------------------------------\n\nTITLE: Document Creation Response Example\nDESCRIPTION: Example HTTP response showing successful document creation with returned document ID and revision.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/document/common.rst#2025-04-21_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": \"SpaghettiWithMeatballs\",\n    \"ok\": true,\n    \"rev\": \"1-917fa2381192822767f010b95b45325b\"\n}\n```\n\n----------------------------------------\n\nTITLE: PUT Database Security Object Request\nDESCRIPTION: HTTP request to update the security object for a CouchDB database with new admin and member configurations.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/database/security.rst#2025-04-21_snippet_3\n\nLANGUAGE: http\nCODE:\n```\nPUT /db/_security HTTP/1.1\nAccept: application/json\nContent-Length: 121\nContent-Type: application/json\nHost: localhost:5984\n\n{\n    \"admins\": {\n        \"names\": [\n            \"superuser\"\n        ],\n        \"roles\": [\n            \"admins\"\n        ]\n    },\n    \"members\": {\n        \"names\": [\n            \"user1\",\n            \"user2\"\n        ],\n        \"roles\": [\n            \"developers\"\n        ]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Multiple Views in a CouchDB Design Document\nDESCRIPTION: Example of a design document containing multiple view definitions. Each view has its own map and reduce functions for different query purposes.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/ddocs/views/nosql.rst#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"_id\": \"_design/application\",\n    \"_rev\": \"1-C1687D17\",\n    \"views\": {\n        \"viewname\": {\n            \"map\": \"function(doc) { ... }\",\n            \"reduce\": \"function(keys, values) { ... }\"\n        },\n        \"anotherview\": {\n            \"map\": \"function(doc) { ... }\",\n            \"reduce\": \"function(keys, values) { ... }\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying CouchDB Cluster Membership\nDESCRIPTION: This snippet shows the JSON response from the `_membership` endpoint, which provides information about the nodes in the CouchDB cluster. It displays both the expected cluster nodes (`cluster_nodes`) and the actually connected nodes (`all_nodes`).\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/setup/cluster.rst#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"all_nodes\": [\n    \"couchdb@server1.test.com\",\n    \"couchdb@server2.test.com\",\n    \"couchdb@server3.test.com\"\n  ],\n  \"cluster_nodes\": [\n    \"couchdb@server1.test.com\",\n    \"couchdb@server2.test.com\",\n    \"couchdb@server3.test.com\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a CouchDB Database with cURL\nDESCRIPTION: Using cURL with the PUT method to create a new database in CouchDB. This example includes authentication credentials and shows the success response.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/intro/curl.rst#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nshell> curl -X PUT http://adm:pass@127.0.0.1:5984/demo\n{\"ok\":true}\n```\n\n----------------------------------------\n\nTITLE: Setting Database Security in CouchDB (Bash/cURL)\nDESCRIPTION: This cURL command demonstrates how to set the security document for a CouchDB database. It specifies admin and member permissions, allowing user 'jan' as a member. The request requires server admin credentials.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/intro/security.rst#2025-04-21_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X PUT http://localhost:5984/mydatabase/_security \\\n     -u anna:secret \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\"admins\": { \"names\": [], \"roles\": [] }, \"members\": { \"names\": [\"jan\"], \"roles\": [] } }'\n```\n\n----------------------------------------\n\nTITLE: Replication Completion Response in CouchDB (HTTP/JSON)\nDESCRIPTION: HTTP response with JSON body containing statistics about the completed replication process. It includes details such as documents read/written, timestamps, and sequence numbers.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/replication/protocol.rst#2025-04-21_snippet_18\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200 OK\nCache-Control: must-revalidate\nContent-Length: 414\nContent-Type: application/json\nDate: Fri, 09 May 2014 15:14:19 GMT\nServer: CouchDB (Erlang OTP)\n\n{\n    \"history\": [\n        {\n            \"doc_write_failures\": 2,\n            \"docs_read\": 2,\n            \"docs_written\": 0,\n            \"end_last_seq\": 2939,\n            \"end_time\": \"Fri, 09 May 2014 15:14:19 GMT\",\n            \"missing_checked\": 1835,\n            \"missing_found\": 2,\n            \"recorded_seq\": 2939,\n            \"session_id\": \"05918159f64842f1fe73e9e2157b2112\",\n            \"start_last_seq\": 0,\n            \"start_time\": \"Fri, 09 May 2014 15:14:18 GMT\"\n        }\n    ],\n    \"ok\": true,\n    \"replication_id_version\": 3,\n    \"session_id\": \"05918159f64842f1fe73e9e2157b2112\",\n    \"source_last_seq\": 2939\n}\n```\n\n----------------------------------------\n\nTITLE: Ensuring Full Commit in CouchDB (HTTP/JSON)\nDESCRIPTION: Shows how to ensure that all changes are committed to disk using the _ensure_full_commit endpoint in CouchDB. The response includes the instance start time and success status.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/replication/protocol.rst#2025-04-21_snippet_24\n\nLANGUAGE: http\nCODE:\n```\nPOST /target/_ensure_full_commit HTTP/1.1\nAccept: application/json\nContent-Type: application/json\nHost: localhost:5984\n```\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 201 Created\nCache-Control: must-revalidate\nContent-Length: 53\nContent-Type: application/json\nDate: Web, 06 Nov 2013 18:20:43 GMT\nServer: CouchDB (Erlang/OTP)\n\n{\n    \"instance_start_time\": \"0\",\n    \"ok\": true\n}\n```\n\n----------------------------------------\n\nTITLE: HAProxy Configuration for CouchDB Cluster\nDESCRIPTION: Sample HAProxy configuration for a 3-node CouchDB cluster with health checks, stats, and load balancing settings. Includes timeout configurations and round-robin balancing.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/best-practices/reverse-proxies.rst#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nglobal\n    maxconn 512\n    spread-checks 5\n\ndefaults\n    mode http\n    log global\n    monitor-uri /_haproxy_health_check\n    option log-health-checks\n    option httplog\n    balance roundrobin\n    option forwardfor\n    option redispatch\n    retries 4\n    option http-server-close\n    timeout client 150000\n    timeout server 3600000\n    timeout connect 500\n\n    stats enable\n    stats uri /_haproxy_stats\n    # stats auth admin:admin # Uncomment for basic auth\n\nfrontend http-in\n     # This requires HAProxy 1.5.x\n     # bind *:$HAPROXY_PORT\n     bind *:5984\n     default_backend couchdbs\n\nbackend couchdbs\n    option httpchk GET /_up\n    http-check disable-on-404\n    server couchdb1 x.x.x.x:5984 check inter 5s\n    server couchdb2 x.x.x.x:5984 check inter 5s\n    server couchdb3 x.x.x.x:5984 check inter 5s\n```\n\n----------------------------------------\n\nTITLE: Using $not operator with index in CouchDB\nDESCRIPTION: This snippet demonstrates the use of the ``$not`` operator in a CouchDB query with an index on the ``year`` field. The query selects documents where the year is between 1900 and 1903, but not 1901.  The ``$not`` operator negates the specified condition.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/ddocs/mango.rst#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"year\": {\n        \"$gte\": 1900,\n        \"$lte\": 1903\n    },\n    \"$not\": {\n        \"year\": 1901\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sorting by Multiple Fields in CouchDB Find API (JavaScript)\nDESCRIPTION: Example JSON syntax for sorting by multiple fields with explicit directions. This shows how to define a sort order when querying documents with the CouchDB Find API.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/database/find.rst#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n[{\"fieldName1\": \"desc\"}, {\"fieldName2\": \"desc\"}]\n```\n\n----------------------------------------\n\nTITLE: Creating Admin User via HTTP Request\nDESCRIPTION: This command uses `curl` to create an administrator user in CouchDB. It uses the PUT method to update the `admins` configuration. The password is included in the request body. The CouchDB instance must be running and accessible via HTTP. The server IP or FQDN must be specified.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/setup/cluster.rst#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X PUT http://<server-IP|FQDN>:5984/_node/_local/_config/admins/admin -d '\"password\"'\n```\n\n----------------------------------------\n\nTITLE: Guarding Document Access in CouchDB JavaScript\nDESCRIPTION: Shows how to safely access document fields and subfields to avoid exceptions when they are missing. This is a crucial practice in CouchDB JavaScript development.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/best-practices/jsdevel.rst#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nif (doc && doc.myarray && doc.myarray.length)...\n```\n\n----------------------------------------\n\nTITLE: Requesting Database Changes in CouchDB using HTTP GET\nDESCRIPTION: This snippet demonstrates how to make an HTTP GET request to the CouchDB /{db}/_changes endpoint to retrieve database changes. It includes the 'style' query parameter set to 'all_docs' to retrieve all document revisions.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/database/changes.rst#2025-04-21_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nGET /db/_changes?style=all_docs HTTP/1.1\nAccept: application/json\nHost: localhost:5984\n```\n\n----------------------------------------\n\nTITLE: HEAD Response for Database Existence Check in CouchDB\nDESCRIPTION: This is the successful response to a HEAD request checking for database existence. The 200 OK status indicates the database exists.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/database/common.rst#2025-04-21_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200 OK\nCache-Control: must-revalidate\nContent-Type: application/json\nDate: Mon, 12 Aug 2013 01:27:41 GMT\nServer: CouchDB (Erlang/OTP)\n```\n\n----------------------------------------\n\nTITLE: Remote Replication with CouchDB\nDESCRIPTION: This `curl` command showcases a remote replication task, where changes are replicated between two remote CouchDB instances. It requires the `curl` command-line tool and access to both the source and target CouchDB instances. Replace placeholders with the actual addresses and credentials.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/intro/api.rst#2025-04-21_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\n\"curl -X POST http://admin:password@127.0.0.1:5984/_replicate \\\n         -d '{\\\"source\\\":\\\"http://user:password@example.org:5984/albums\\\",\\\"target\\\":\\\"http://user:password@example.org:5984/albums-replica\\\"}' \\\n         -H \\\"Content-Type: application/json\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Update Function in JavaScript for CouchDB\nDESCRIPTION: An update function that adds a new ingredient to a document's ingredients array. If no document is provided, it returns an error with a 400 status code.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/ddoc/render.rst#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nfunction(doc, req) {\n    if (!doc){\n      return [null, {'code': 400,\n                     'json': {'error': 'missed',\n                              'reason': 'no document to update'}}]\n    } else {\n        doc.ingredients.push(req.body);\n        return [doc, {'json': {'status': 'ok'}}];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Posting a JSON Document to CouchDB with cURL\nDESCRIPTION: Example of creating a document in CouchDB using POST with JSON data. The request includes content type setting and authentication, and shows the server response with document ID and revision.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/intro/curl.rst#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nshell> curl -H 'Content-Type: application/json' \\\n                -X POST http://adm:pass@127.0.0.1:5984/demo \\\n                -d '{\"company\": \"Example, Inc.\"}'\n{\"ok\":true,\"id\":\"8843faaf0b831d364278331bc3001bd8\",\n \"rev\":\"1-33b9fbce46930280dab37d672bbc8bb9\"}\n```\n\n----------------------------------------\n\nTITLE: Configuring Logging Verbosity Level in CouchDB\nDESCRIPTION: Sets the logging level to control the verbosity and detail of CouchDB logs. Available levels range from debug to emergency, including a 'none' option to disable logging.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/config/logging.rst#2025-04-21_snippet_4\n\nLANGUAGE: ini\nCODE:\n```\n[log]\nlevel = info\n```\n\n----------------------------------------\n\nTITLE: Executing Multiple Queries on All Documents in CouchDB\nDESCRIPTION: This snippet demonstrates how to execute multiple queries on all documents in a CouchDB database using the /{db}/_all_docs/queries endpoint. It allows specifying multiple query objects in a single request.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/database/bulk-api.rst#2025-04-21_snippet_5\n\nLANGUAGE: http\nCODE:\n```\nPOST /db/_all_docs/queries HTTP/1.1\nContent-Type: application/json\nAccept: application/json\nHost: localhost:5984\n\n{\n    \"queries\": [\n        {\n            \"keys\": [\n                \"meatballs\",\n                \"spaghetti\"\n            ]\n        },\n        {\n            \"limit\": 3,\n            \"skip\": 2\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Using $and operator with primary index in CouchDB\nDESCRIPTION: This snippet shows how to use the ``$and`` operator with the primary index (``_all_docs``) in CouchDB. The query selects documents where ``_id`` is not null and the year is either 2014 or 2015. This effectively retrieves all documents within the specified year range.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/ddocs/mango.rst#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"$and\": [\n        {\n            \"_id\": { \"$gt\": null }\n        },\n        {\n            \"year\": {\n                \"$in\": [2014, 2015]\n            }\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Uploading Documents with Attachments in CouchDB (HTTP/JSON)\nDESCRIPTION: Demonstrates how to upload a document with attachments using a multipart/related request in CouchDB. The request includes the document JSON and an attached text file.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/replication/protocol.rst#2025-04-21_snippet_23\n\nLANGUAGE: http\nCODE:\n```\nPUT /target/SpaghettiWithMeatballs?new_edits=false HTTP/1.1\nAccept: application/json\nContent-Length: 1030\nContent-Type: multipart/related; boundary=\"864d690aeb91f25d469dec6851fb57f2\"\nHost: localhost:5984\nUser-Agent: CouchDB\n\n--2fa48cba80d0cdba7829931fe8acce9d\nContent-Type: application/json\n\n{\n    \"_attachments\": {\n        \"recipe.txt\": {\n            \"content_type\": \"text/plain\",\n            \"digest\": \"md5-R5CrCb6fX10Y46AqtNn0oQ==\",\n            \"follows\": true,\n            \"length\": 87,\n            \"revpos\": 7\n        }\n    },\n    \"_id\": \"SpaghettiWithMeatballs\",\n    \"_rev\": \"7-474f12eb068c717243487a9505f6123b\",\n    \"_revisions\": {\n        \"ids\": [\n            \"474f12eb068c717243487a9505f6123b\",\n            \"5949cfcd437e3ee22d2d98a26d1a83bf\",\n            \"00ecbbc54e2a171156ec345b77dfdf59\",\n            \"fc997b62794a6268f2636a4a176efcd6\",\n            \"3552c87351aadc1e4bea2461a1e8113a\",\n            \"404838bc2862ce76c6ebed046f9eb542\",\n            \"5defd9d813628cea6e98196eb0ee8594\"\n        ],\n        \"start\": 7\n    },\n    \"description\": \"An Italian-American delicious dish\",\n    \"ingredients\": [\n        \"spaghetti\",\n        \"tomato sauce\",\n        \"meatballs\",\n        \"love\"\n    ],\n    \"name\": \"Spaghetti with meatballs\"\n}\n--2fa48cba80d0cdba7829931fe8acce9d\nContent-Disposition: attachment; filename=\"recipe.txt\"\nContent-Type: text/plain\nContent-Length: 87\n\n1. Cook spaghetti\n2. Cook meetballs\n3. Mix them\n4. Add tomato sauce\n5. ...\n6. PROFIT!\n\n--2fa48cba80d0cdba7829931fe8acce9d--\n```\n\n----------------------------------------\n\nTITLE: Executing HTTP PUT Requests to Create System Databases in shell\nDESCRIPTION: This snippet demonstrates how to manually create system databases in a CouchDB single-node setup using curl commands. Users must replace 'adm' and 'pass' with their admin username and password. This action establishes the '_users', '_replicator', and optionally the '_global_changes' databases if the global changes feed is not needed.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/setup/single-node.rst#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncurl -X PUT http://adm:pass@127.0.0.1:5984/_users\n\n    curl -X PUT http://adm:pass@127.0.0.1:5984/_replicator\n\n    curl -X PUT http://adm:pass@127.0.0.1:5984/_global_changes\n```\n\n----------------------------------------\n\nTITLE: GET Section Configuration Request - CouchDB HTTP\nDESCRIPTION: HTTP request to retrieve configuration for a specific section. Returns all configuration values within the specified section.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/server/configuration.rst#2025-04-21_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nGET /_node/nonode@nohost/_config/httpd HTTP/1.1\nAccept: application/json\nHost: localhost:5984\n```\n\n----------------------------------------\n\nTITLE: Faceted Search Index Definition\nDESCRIPTION: Example of defining a search index with faceting enabled for specific fields.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/ddocs/search.rst#2025-04-21_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nfunction(doc) {\n    index(\"type\", doc.type, {\"facet\": true});\n    index(\"price\", doc.price, {\"facet\": true});\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Database Existence with HEAD Request in CouchDB\nDESCRIPTION: This snippet demonstrates how to use the HEAD HTTP method to check if a database exists in CouchDB. The HEAD method is lightweight as it returns only headers without any response body.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/database/common.rst#2025-04-21_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nHEAD /test HTTP/1.1\nHost: localhost:5984\n```\n\n----------------------------------------\n\nTITLE: Emitting key-value pairs in CouchDB map function\nDESCRIPTION: This code snippet demonstrates how to use the `emit` function within a CouchDB map function to generate key-value pairs. It takes a document as input and emits the document's ID as the key and its revision as the value.  This is a standard use case for indexing data in CouchDB views.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/query-server/javascript.rst#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n \"function(doc){\n            emit(doc._id, doc._rev);\n        }\"\n```\n\n----------------------------------------\n\nTITLE: Emitting key-value pairs in Erlang for CouchDB view indexing\nDESCRIPTION: The Emit function emits key-value pairs to the view indexer process in CouchDB. This example shows how to extract the document revision and ID and use them as the key and value respectively. It requires the `proplists` module.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/query-server/erlang.rst#2025-04-21_snippet_0\n\nLANGUAGE: erlang\nCODE:\n```\nfun({Doc}) ->\n    <<K,_/binary>> = proplists:get_value(<<\"_rev\">>, Doc, null),\n    V = proplists:get_value(<<\"_id\">>, Doc, null),\n    Emit(<<K>>, V)\nend.\n```\n\n----------------------------------------\n\nTITLE: Querying CouchDB View with startkey and endkey (HTTP)\nDESCRIPTION: This code snippet demonstrates querying a CouchDB view using `startkey` and `endkey` to filter results between two specific values. The Accept header specifies that the expected response format is JSON.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/ddoc/views.rst#2025-04-21_snippet_7\n\nLANGUAGE: http\nCODE:\n```\n\"GET http://couchdb:5984/recipes/_design/recipes/_view/by_ingredient?startkey=\\\"carrots\\\"&endkey=\\\"egg\\\" HTTP/1.1\nAccept: application/json\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Admin User in CouchDB\nDESCRIPTION: Example of adding an admin user to CouchDB's configuration file\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/intro/security.rst#2025-04-21_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[admins]\nadmin = password\n```\n\n----------------------------------------\n\nTITLE: CouchDB Built-in Stats Reduce Function Implementation\nDESCRIPTION: JavaScript implementation of CouchDB's built-in _stats reduce function that computes statistical metrics for numeric values.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/ddocs/ddocs.rst#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// could be replaced by _stats\nfunction(keys, values, rereduce) {\n    if (rereduce) {\n        return {\n            'sum': values.reduce(function(a, b) { return a + b.sum }, 0),\n            'min': values.reduce(function(a, b) { return Math.min(a, b.min) }, Infinity),\n            'max': values.reduce(function(a, b) { return Math.max(a, b.max) }, -Infinity),\n            'count': values.reduce(function(a, b) { return a + b.count }, 0),\n            'sumsqr': values.reduce(function(a, b) { return a + b.sumsqr }, 0)\n        }\n    } else {\n        return {\n            'sum': sum(values),\n            'min': Math.min.apply(null, values),\n            'max': Math.max.apply(null, values),\n            'count': values.length,\n            'sumsqr': (function() {\n            var sumsqr = 0;\n\n            values.forEach(function (value) {\n                sumsqr += value * value;\n            });\n\n            return sumsqr;\n            })(),\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Bulk inserting documents and creating a view with reduce function (Bash)\nDESCRIPTION: This bash snippet first inserts multiple documents into a CouchDB database using the `_bulk_docs` endpoint. Then it creates a design document with a view named 'reduce' that contains a map and a reduce function to sum the 'value' fields.  Authentication is done using `adm:pass`.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/ddoc/views.rst#2025-04-21_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n\"$ curl -X POST http://adm:pass@127.0.0.1:5984/db/_bulk_docs \\\n           -H 'Content-Type: application/json' \\\n           -d '{\\\"docs\\\":[{\\\"_id\\\":\\\"a\\\",\\\"key\\\":\\\"a\\\",\\\"value\\\":1},{\\\"_id\\\":\\\"b\\\",\\\"key\\\":\\\"b\\\",\\\"value\\\":2},{\\\"_id\\\":\\\"c\\\",\\\"key\\\":\\\"c\\\",\\\"value\\\":3}]}'\n$ curl -X POST http://adm:pass@127.0.0.1:5984/db \\\n           -H 'Content-Type: application/json' \\\n           -d '{\\\"_id\\\":\\\"_design/ddoc\\\",\\\"views\\\":{\\\"reduce\\\":{\\\"map\\\":\\\"function(doc) { emit(doc.key, doc.value) }\\\",\\\"reduce\\\":\\\"_sum\\\"}}}'\"\n```\n\n----------------------------------------\n\nTITLE: Search Query Examples\nDESCRIPTION: Various examples of search query syntax including basic queries, wildcards, ranges, and logical operators.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/ddocs/search.rst#2025-04-21_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\n// Birds\nclass:bird\n```\n\n----------------------------------------\n\nTITLE: Retrieving Specific Documents from CouchDB Database using POST\nDESCRIPTION: Sends a POST request to /{db}/_all_docs to retrieve specific documents from a CouchDB database. The request body includes an array of document keys to fetch.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/database/bulk-api.rst#2025-04-21_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nPOST /db/_all_docs HTTP/1.1\nAccept: application/json\nContent-Length: 70\nContent-Type: application/json\nHost: localhost:5984\n\n{\n    \"keys\" : [\n        \"Zingylemontart\",\n        \"Yogurtraita\"\n    ]\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"total_rows\" : 2666,\n    \"rows\" : [\n        {\n            \"value\" : {\n                \"rev\" : \"1-a3544d296de19e6f5b932ea77d886942\"\n            },\n            \"id\" : \"Zingylemontart\",\n            \"key\" : \"Zingylemontart\"\n        },\n        {\n            \"value\" : {\n                \"rev\" : \"1-91635098bfe7d40197a1b98d7ee085fc\"\n            },\n            \"id\" : \"Yogurtraita\",\n            \"key\" : \"Yogurtraita\"\n        }\n    ],\n    \"offset\" : 0\n}\n```\n\n----------------------------------------\n\nTITLE: Finding Documents Using an Index with CouchDB Find API (HTTP Request)\nDESCRIPTION: HTTP POST request to the /{db}/_find endpoint to query documents with specific criteria. This example filters for movies after 2010, includes specific fields, sorts by year, and requests execution statistics.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/database/find.rst#2025-04-21_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST /movies/_find HTTP/1.1\nAccept: application/json\nContent-Type: application/json\nContent-Length: 168\nHost: localhost:5984\n\n{\n    \"selector\": {\n        \"year\": {\"$gt\": 2010}\n    },\n    \"fields\": [\"_id\", \"_rev\", \"year\", \"title\"],\n    \"sort\": [{\"year\": \"asc\"}],\n    \"limit\": 2,\n    \"skip\": 0,\n    \"execution_stats\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Complex Index Creation Request - HTTP\nDESCRIPTION: HTTP POST request showing index creation with partial filter selector, multiple fields, and additional parameters.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/database/find.rst#2025-04-21_snippet_8\n\nLANGUAGE: http\nCODE:\n```\nPOST /db/_index HTTP/1.1\nContent-Type: application/json\nContent-Length: 396\nHost: localhost:5984\n\n{\n    \"index\": {\n        \"partial_filter_selector\": {\n            \"year\": {\n                \"$gt\": 2010\n            },\n            \"limit\": 10,\n            \"skip\": 0\n        },\n        \"fields\": [\n            \"_id\",\n            \"_rev\",\n            \"year\",\n            \"title\"\n        ]\n    },\n    \"ddoc\": \"example-ddoc\",\n    \"name\": \"example-index\",\n    \"type\": \"json\",\n    \"partitioned\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Design Documents from CouchDB Database using GET\nDESCRIPTION: Sends a GET request to /{db}/_design_docs to retrieve all design documents from a CouchDB database. The response includes design document IDs, revision numbers, and other metadata.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/database/bulk-api.rst#2025-04-21_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nGET /db/_design_docs HTTP/1.1\nAccept: application/json\nHost: localhost:5984\n```\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200 OK\nCache-Control: must-revalidate\nContent-Type: application/json\nDate: Sat, 23 Dec 2017 16:22:56 GMT\nETag: \"1W2DJUZFZSZD9K78UFA3GZWB4\"\nServer: CouchDB (Erlang/OTP)\nTransfer-Encoding: chunked\n\n{\n    \"offset\": 0,\n    \"rows\": [\n        {\n            \"id\": \"_design/ddoc01\",\n            \"key\": \"_design/ddoc01\",\n            \"value\": {\n                \"rev\": \"1-7407569d54af5bc94c266e70cbf8a180\"\n            }\n        },\n        {\n            \"id\": \"_design/ddoc02\",\n            \"key\": \"_design/ddoc02\",\n            \"value\": {\n                \"rev\": \"1-d942f0ce01647aa0f46518b213b5628e\"\n            }\n        },\n        {\n            \"id\": \"_design/ddoc03\",\n            \"key\": \"_design/ddoc03\",\n            \"value\": {\n                \"rev\": \"1-721fead6e6c8d811a225d5a62d08dfd0\"\n            }\n        },\n        {\n            \"id\": \"_design/ddoc04\",\n            \"key\": \"_design/ddoc04\",\n            \"value\": {\n                \"rev\": \"1-32c76b46ca61351c75a84fbcbceece2f\"\n            }\n        },\n        {\n            \"id\": \"_design/ddoc05\",\n            \"key\": \"_design/ddoc05\",\n            \"value\": {\n                \"rev\": \"1-af856babf9cf746b48ae999645f9541e\"\n            }\n        }\n    ],\n    \"total_rows\": 5\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Maximum Open Databases\nDESCRIPTION: This snippet demonstrates how to set the maximum number of databases that can be opened simultaneously using the CouchDB configuration file. This setting is crucial for deployments that require multiple databases to be open at once during replication or other operations.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/maintenance/performance.rst#2025-04-21_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[couchdb]\nmax_dbs_open = 100\n```\n\n----------------------------------------\n\nTITLE: Bulk Deleting CouchDB Indexes - HTTP Request/Response\nDESCRIPTION: Example of deleting multiple indexes in bulk using POST request. Shows request with array of index IDs and response with success/failure results for each index.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/database/find.rst#2025-04-21_snippet_11\n\nLANGUAGE: http\nCODE:\n```\nPOST /db/_index/_bulk_delete HTTP/1.1\nAccept: application/json\nContent-Type: application/json\nHost: localhost:5984\n\n{\n    \"docids\": [\n        \"_design/example-ddoc\",\n        \"foo-index\",\n        \"nonexistent-index\"\n    ]\n}\n```\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200 OK\nCache-Control: must-revalidate\nContent-Length: 94\nContent-Type: application/json\nDate: Thu, 01 Sep 2016 19:26:59 GMT\nServer: CouchDB (Erlang OTP/18)\n\n{\n    \"success\": [\n        {\n            \"id\": \"_design/example-ddoc\",\n            \"ok\": true\n        },\n        {\n            \"id\": \"foo-index\",\n            \"ok\": true\n        }\n    ],\n    \"fail\": [\n        {\n            \"id\": \"nonexistent-index\",\n            \"error\": \"not_found\"\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Summing Values in JavaScript Reduce Function\nDESCRIPTION: This snippet defines a custom reduce function for calculating the sum of a list of values in CouchDB. The function takes 'keys' and 'values' as input but only processes 'values' to compute and return their sum. The reduce function is essential for aggregating data within a CouchDB view.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/ddocs/views/nosql.rst#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nfunction(keys, values) {\n    var sum = 0;\n    values.forEach(function(element) {\n        sum = sum + element;\n    });\n    return sum;\n}\n```\n\n----------------------------------------\n\nTITLE: Indexing with Guard Clauses\nDESCRIPTION: This code snippet illustrates how to implement guard clauses within an index function to avoid runtime errors. It shows correct practices for checking the existence of document properties before attempting to access them or index them.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/ddocs/nouveau.rst#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nif (doc.foo && typeof(doc.foo) == 'object' && typeof(doc.foo.bar == 'string')) {\n    index(\"string\", \"bar\", doc.foo.bar, {\"store\": true});\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Document with Attachments\nDESCRIPTION: HTTP request/response example showing how to retrieve a document with its attachments included using the attachments=true parameter.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/document/common.rst#2025-04-21_snippet_9\n\nLANGUAGE: http\nCODE:\n```\nGET /db/pixel?attachments=true HTTP/1.1\nAccept: application/json\nHost: localhost:5984\n```\n\n----------------------------------------\n\nTITLE: Using _view Filter in CouchDB - HTTP\nDESCRIPTION: This request and response example demonstrates the usage of the _view filter in CouchDB. It allows integration of a map function as a filter to streamline the amount of duplicate code and effectively filter changes, including design documents, within a database.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/database/changes.rst#2025-04-21_snippet_14\n\nLANGUAGE: http\nCODE:\n```\nGET /recipes/_changes?filter=_view&view=ingredients/by_recipe HTTP/1.1\nAccept: application/json\nHost: localhost:5984\n```\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200 OK\nCache-Control: must-revalidate\nContent-Type: application/json\nDate: Tue, 06 Sep 2016 12:57:56 GMT\nETag: \"ARIHFWL3I7PIS0SPVTFU6TLR2\"\nServer: CouchDB (Erlang OTP)\nTransfer-Encoding: chunked\n\n{\n    \"last_seq\": \"11-g1AAAAIreJyVkEEKwjAQRUOrqCuPoCeQZGIaXdmbaNIk1FLjyrXeRG-iN9Gb1LQRaimFlsAEJnkP_s8RQtM0VGhuz0qTmABfYXdI7h4CgeSiKIosDUVwcotJIpQSOmp_71TIpZty97OgymJAU8G5QrOLVdocrVbdfFzy-wYvcbLVEvrxh5K_NlJggIhSNiCFHbmJbu5yonttMoneYD6kD296eNOzzoRNBNqse2Xyjpd3vP96AcYNTQY4Pt5RdTOuHIwCY5S0qewLwY6OaA\",\n    \"results\": [\n        {\n            \"changes\": [\n                {\n                    \"rev\": \"13-bcb9d6388b60fd1e960d9ec4e8e3f29e\"\n                }\n            ],\n            \"id\": \"SpaghettiWithMeatballs\",\n            \"seq\": \"11-g1AAAAIReJyVkE0OgjAQRiegUVceQU9g-mOpruQm2tI2SLCuXOtN9CZ6E70JFmpCCCFCmkyTdt6bfJMDwDQNFcztWWkcY8JXyB2cu49AgFwURZGloQhO7mGSCKWEjtrtnQq5dFXufhaoLIZoKjhXMLtYpc3RatXNxyW_b_ASJVstST_-UPLXRgpESEQpG5DCjlyFm7uc6F6bTKI3iA_Zhzc9vOlZZ0ImItqse2Xyjpd3vDMBfzo_vrPawLiaxihhjOI2lX0BirqHbg\"\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Database with Custom Sharding - Bash\nDESCRIPTION: Creates a new CouchDB database with custom sharding parameters. Specifies 4 shards (q=4) and 2 replicas (n=2) resulting in 8 total shard replicas distributed across the cluster.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/cluster/sharding.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X PUT \"$COUCH_URL:5984/database-name?q=4&n=2\"\n```\n\n----------------------------------------\n\nTITLE: Deleting a CouchDB database\nDESCRIPTION: This command removes a specified CouchDB database using HTTP DELETE method. There is no confirmation, making it essential to use with caution.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/intro/api.rst#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ncurl -vX DELETE http://admin:password@127.0.0.1:5984/albums-backup\n```\n\n----------------------------------------\n\nTITLE: Creating a CouchDB View for Blog Posts and Comments\nDESCRIPTION: This view function emits both blog posts and comments, using complex keys to collate them. The key is an array where the first element is the post ID, and the second is 0 for posts and 1 for comments, ensuring posts are sorted before their comments.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/ddocs/views/joins.rst#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nfunction(doc) {\n    if (doc.type == \"post\") {\n        emit([doc._id, 0], null);\n    } else if (doc.type == \"comment\") {\n        emit([doc.post, 1], null);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Update Validation JavaScript Function Example\nDESCRIPTION: A JavaScript validation function that implements an \"author only\" update model, checking if the user is listed in an author field of the existing document\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/intro/overview.rst#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction(newDoc, oldDoc, userCtx) {\n    if (oldDoc && oldDoc.author !== userCtx.name) {\n        throw({forbidden: 'Only the document author can update'});\n    }\n    return true;\n}\n```\n\n----------------------------------------\n\nTITLE: Updating a document in CouchDB with revision\nDESCRIPTION: This command updates an existing document in CouchDB by including the current revision number. It ensures no data conflicts occur during the update.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/intro/api.rst#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\ncurl -X PUT http://admin:password@127.0.0.1:5984/albums/6e1295ed6c29495e54cc05947f18c8af -d '{\"_rev\":\"1-2902191555\",\"title\":\"There is Nothing Left to Lose\",\"artist\":\"Foo Fighters\",\"year\":\"1997\"}'\n```\n\n----------------------------------------\n\nTITLE: Creating Movie Documents in CouchDB with JavaScript\nDESCRIPTION: The code snippets include sample JSON structures to create movie documents in CouchDB, designed to be used with the Fauxton interface. The documents capture movie details such as title, year, director, and rating, with CouchDB generating unique _id and _rev fields automatically. This setup is essential for managing movie-related data using CouchDB.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/intro/tour.rst#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"_id\": \"00a271787f89c0ef2e10e88a0c0001f4\",\n    \"type\": \"movie\",\n    \"title\": \"My Neighbour Totoro\",\n    \"year\": 1988,\n    \"director\": \"miyazaki\",\n    \"rating\": 8.2\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"_id\": \"00a271787f89c0ef2e10e88a0c0003f0\",\n    \"type\": \"movie\",\n    \"title\": \"Kikis Delivery Service\",\n    \"year\": 1989,\n    \"director\": \"miyazaki\",\n    \"rating\": 7.8\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"_id\": \"00a271787f89c0ef2e10e88a0c00048b\",\n    \"type\": \"movie\",\n    \"title\": \"Princess Mononoke\",\n    \"year\": 1997,\n    \"director\": \"miyazaki\",\n    \"rating\": 8.4\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Continuous Changes Feed in CouchDB\nDESCRIPTION: HTTP request and response for fetching changes in continuous feed mode. Shows the streaming format of change notifications with sequence IDs and revision information.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/replication/protocol.rst#2025-04-21_snippet_14\n\nLANGUAGE: http\nCODE:\n```\nGET /source/_changes?feed=continuous&style=all_docs&heartbeat=10000 HTTP/1.1\nAccept: application/json\nHost: localhost:5984\nUser-Agent: CouchDB\n```\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200 OK\nCache-Control: must-revalidate\nContent-Type: application/json\nDate: Fri, 09 May 2014 16:22:22 GMT\nServer: CouchDB (Erlang OTP)\nTransfer-Encoding: chunked\n\n{\"seq\":14,\"id\":\"f957f41e\",\"changes\":[{\"rev\":\"3-46a3\"}],\"deleted\":true}\n...\n```\n\n----------------------------------------\n\nTITLE: Representing Nested Bookmarks Structure in JavaScript\nDESCRIPTION: This snippet demonstrates a nested structure for representing bookmarks, including names, URLs, and sub-folders. It shows how to organize hierarchical data that could be stored in a CouchDB document.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/best-practices/documents.rst#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n[\n  {\"name\":\"Weather\", \"url\":\"http://www.bbc.co.uk/weather\"},\n  {\"name\":\"News\", \"url\":\"http://news.bbc.co.uk/\"},\n  {\"name\":\"Tech\", \"bookmarks\": [\n    {\"name\":\"Register\", \"url\":\"http://www.theregister.co.uk/\"},\n    {\"name\":\"CouchDB\", \"url\":\"http://couchdb.apache.org/\"}\n  ]}\n]\n```\n\n----------------------------------------\n\nTITLE: Querying Global Index with HTTP GET\nDESCRIPTION: Example of querying a global search index using HTTP GET request with include_docs and query parameters.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/ddocs/search.rst#2025-04-21_snippet_14\n\nLANGUAGE: http\nCODE:\n```\nGET /$DATABASE/_design/$DDOC/_search/$INDEX_NAME?include_docs=true&query=\"*:*\"&limit=1 HTTP/1.1\nContent-Type: application/json\n```\n\n----------------------------------------\n\nTITLE: CouchDB Built-in Count Reduce Function Implementation\nDESCRIPTION: JavaScript implementation of CouchDB's built-in _count reduce function that counts the number of values for each key.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/ddocs/ddocs.rst#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// could be replaced by _count\nfunction(keys, values, rereduce) {\n    if (rereduce) {\n        return sum(values);\n    } else {\n        return values.length;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Explaining CouchDB Query Execution Plan - HTTP Request/Response\nDESCRIPTION: Example of using _explain endpoint to understand how a query will be executed, including index selection and query options. Shows detailed query plan information.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/database/find.rst#2025-04-21_snippet_12\n\nLANGUAGE: http\nCODE:\n```\nPOST /movies/_explain HTTP/1.1\nAccept: application/json\nContent-Type: application/json\nContent-Length: 168\nHost: localhost:5984\n\n{\n    \"selector\": {\n        \"year\": {\"$gt\": 2010}\n    },\n    \"fields\": [\"_id\", \"_rev\", \"year\", \"title\"],\n    \"sort\": [{\"year\": \"asc\"}],\n    \"limit\": 2,\n    \"skip\": 0\n}\n```\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200 OK\nCache-Control: must-revalidate\nContent-Type: application/json\nDate: Thu, 01 Sep 2016 15:41:53 GMT\nServer: CouchDB (Erlang OTP)\nTransfer-Encoding: chunked\n\n{\n    \"dbname\": \"movies\",\n    \"index\": {\n        \"ddoc\": \"_design/0d61d9177426b1e2aa8d0fe732ec6e506f5d443c\",\n        \"name\": \"0d61d9177426b1e2aa8d0fe732ec6e506f5d443c\",\n        \"type\": \"json\",\n        \"partitioned\": false,\n        \"def\": {\n            \"fields\": [\n                {\n                    \"year\": \"asc\"\n                }\n            ]\n        }\n    },\n    \"partitioned\": false,\n    \"selector\": {\n        \"year\": {\n            \"$gt\": 2010\n        }\n    },\n    \"opts\": {\n        \"use_index\": [],\n        \"bookmark\": \"nil\",\n        \"limit\": 2,\n        \"skip\": 0,\n        \"sort\": {},\n        \"fields\": [\n            \"_id\",\n            \"_rev\",\n            \"year\",\n            \"title\"\n        ],\n        \"partition\": \"\",\n        \"r\": 1,\n        \"conflicts\": false,\n        \"stale\": false,\n        \"update\": true,\n        \"stable\": false,\n        \"execution_stats\": false,\n        \"allow_fallback\": true\n    },\n    \"limit\": 2,\n    \"skip\": 0,\n    \"fields\": [\n        \"_id\",\n        \"_rev\",\n        \"year\",\n        \"title\"\n    ],\n    \"mrargs\": {\n        \"include_docs\": true,\n        \"view_type\": \"map\",\n        \"reduce\": false,\n        \"partition\": null,\n        \"start_key\": [\n            2010\n        ],\n        \"end_key\": [\n            \"<MAX>\"\n        ],\n        \"direction\": \"fwd\",\n        \"stable\": false,\n        \"update\": true,\n        \"conflicts\": \"undefined\"\n    },\n    \"covering\": false,\n    \"index_candidates\": [\n        {\n            \"index\": {\n                \"ddoc\": null,\n                \"name\": \"_all_docs\",\n                \"type\": \"special\",\n                \"def\": {\n                    \"fields\": [\n                        {\n                            \"_id\": \"asc\"\n                        }\n                    ]\n                }\n            },\n            \"analysis\": {\n                \"usable\": true,\n                \"reasons\": [\n                    {\n                        \"name\": \"unfavored_type\"\n                    }\n                ],\n                \"ranking\": 1,\n                \"covering\": null\n            }\n        }\n    ],\n    \"selector_hints\": [\n        {\n            \"type\": \"json\",\n            \"indexable_fields\": [\n                \"year\"\n            ],\n            \"unindexable_fields\": []\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Simple Selector Example in Mango Query Language\nDESCRIPTION: Demonstrates basic document selection by ID and location using JSON selector syntax\nSOURCE: https://github.com/apache/couchdb/blob/main/src/mango/README.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\"_id\": \"Paul\"}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\"_id\": \"Paul\", \"location\": \"Boston\"}\n```\n\n----------------------------------------\n\nTITLE: Sending HTTP PUT Request to CouchDB Update Function\nDESCRIPTION: This HTTP request demonstrates how to call a CouchDB update function. It sends a PUT request to update the 'SpaghettiWithMeatballs' document using the 'ingredients' update function in the 'recipe' design document.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/ddoc/render.rst#2025-04-21_snippet_14\n\nLANGUAGE: http\nCODE:\n```\nPUT /recipes/_design/recipe/_update/ingredients/SpaghettiWithMeatballs HTTP/1.1\nAccept: application/json\nContent-Length: 5\nContent-Type: application/json\nHost: localhost:5984\n\n\"love\"\n```\n\n----------------------------------------\n\nTITLE: Result of Linked Document Query in CouchDB\nDESCRIPTION: Example result set when querying a view with linked documents using include_docs=true, showing how ancestor documents are included alongside the original documents.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/ddocs/views/joins.rst#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"total_rows\": 5,\n    \"offset\": 0,\n    \"rows\": [\n        {\n            \"id\": \"22222\",\n            \"key\": [\n                \"hello\",\n                0\n            ],\n            \"value\": null,\n            \"doc\": {\n                \"_id\": \"22222\",\n                \"_rev\": \"1-0eee81fecb5aa4f51e285c621271ff02\",\n                \"ancestors\": [\n                    \"11111\"\n                ],\n                \"value\": \"hello\"\n            }\n        },\n        {\n            \"id\": \"22222\",\n            \"key\": [\n                \"hello\",\n                1\n            ],\n            \"value\": {\n                \"_id\": \"11111\"\n            },\n            \"doc\": {\n                \"_id\": \"11111\",\n                \"_rev\": \"1-967a00dff5e02add41819138abb3284d\"\n            }\n        },\n        {\n            \"id\": \"33333\",\n            \"key\": [\n                \"world\",\n                0\n            ],\n            \"value\": null,\n            \"doc\": {\n                \"_id\": \"33333\",\n                \"_rev\": \"1-11e42b44fdb3d3784602eca7c0332a43\",\n                \"ancestors\": [\n                    \"22222\",\n                    \"11111\"\n                ],\n                \"value\": \"world\"\n            }\n        },\n        {\n            \"id\": \"33333\",\n            \"key\": [\n                \"world\",\n                1\n            ],\n            \"value\": {\n                \"_id\": \"22222\"\n            },\n            \"doc\": {\n                \"_id\": \"22222\",\n                \"_rev\": \"1-0eee81fecb5aa4f51e285c621271ff02\",\n                \"ancestors\": [\n                    \"11111\"\n                ],\n                \"value\": \"hello\"\n            }\n        },\n        {\n            \"id\": \"33333\",\n            \"key\": [\n                \"world\",\n                2\n            ],\n            \"value\": {\n                \"_id\": \"11111\"\n            },\n            \"doc\": {\n                \"_id\": \"11111\",\n                \"_rev\": \"1-967a00dff5e02add41819138abb3284d\"\n            }\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Initiating Cookie Auth Session in CouchDB\nDESCRIPTION: Example of initiating a new cookie authentication session with CouchDB. The request sends username and password as form data. The response includes a Set-Cookie header with the auth token.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/server/authn.rst#2025-04-21_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nPOST /_session HTTP/1.1\nAccept: application/json\nContent-Length: 24\nContent-Type: application/x-www-form-urlencoded\nHost: localhost:5984\n\nname=root&password=relax\n```\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200 OK\nCache-Control: must-revalidate\nContent-Length: 43\nContent-Type: application/json\nDate: Mon, 03 Dec 2012 01:23:14 GMT\nServer: CouchDB (Erlang/OTP)\nSet-Cookie: AuthSession=cm9vdDo1MEJCRkYwMjq0LO0ylOIwShrgt8y-UkhI-c6BGw; Version=1; Path=/; HttpOnly\n\n{\"ok\":true,\"name\":\"root\",\"roles\":[\"_admin\"]}\n```\n\n----------------------------------------\n\nTITLE: Configuring Winning Revisions Only Replication in CouchDB\nDESCRIPTION: HTTP request to set up replication that only transfers winning document revisions between CouchDB databases. This option helps reduce conflicts and can be combined with other replication parameters.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/replication/replicator.rst#2025-04-21_snippet_15\n\nLANGUAGE: http\nCODE:\n```\nPOST http://couchdb:5984/_replicate HTTP/1.1\nAccept: application/json\nContent-Type: application/json\n\n{\n    \"winning_revs_only\" : true\n    \"source\" : \"http://source:5984/recipes\",\n    \"target\" : \"http://target:5984/recipes\",\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Key CouchDB Dependencies in Erlang Shell\nDESCRIPTION: Erlang commands to test if key dependencies like SSL support, Snappy compression, and JSON encoding are working properly. These tests verify the core functionality required by CouchDB.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/install/troubleshooting.rst#2025-04-21_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n%% test SSL support. If this fails, ensure you have the OTP erlang-crypto library installed\ncrypto:md5_init().\n\n%% test Snappy compression. If this fails, check your CouchDB configure script output or alternatively\n%% if your distro comes with erlang-snappy make sure you're using only the CouchDB supplied version\nsnappy:compress(\"gogogogogogogogogogogogogogo\").\n\n%% test the CouchDB JSON encoder. CouchDB uses different encoders in each release, this one matches\n%% what is used in 2.0.x.\njiffy:decode(jiffy:encode(<<\"[1,2,3,4,5]\">>)).\n\n%% this is how you quit the erlang shell.\nq().\n```\n\n----------------------------------------\n\nTITLE: Fetching a Document with Attachments in CouchDB\nDESCRIPTION: This cURL command retrieves a document from CouchDB, showing the structure of the document along with its attachments. The response includes metadata about the attachments and the document's current revision.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/intro/api.rst#2025-04-21_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ncurl http://admin:password@127.0.0.1:5984/albums/6e1295ed6c29495e54cc05947f18c8af\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies on Mac OS X with Homebrew\nDESCRIPTION: Command to install the necessary dependencies for building CouchDB on Mac OS X using Homebrew. This includes build tools, Erlang, ICU, and SpiderMonkey.\nSOURCE: https://github.com/apache/couchdb/blob/main/INSTALL.Unix.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nbrew install autoconf autoconf-archive automake libtool \\\n    erlang icu4c spidermonkey pkg-config\n```\n\n----------------------------------------\n\nTITLE: Installing CouchDB on Debian/Ubuntu\nDESCRIPTION: Commands to install Apache CouchDB on Debian or Ubuntu systems after the repository has been set up. Debian/Ubuntu installations can be pre-configured for single node or clustered setups.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/install/unix.rst#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt update\nsudo apt install -y couchdb\n```\n\n----------------------------------------\n\nTITLE: Defining Replication Operation - JSON Configuration\nDESCRIPTION: This snippet outlines a common JSON configuration for initiating a replication task in CouchDB, specifying source, target, and options like continuous replication. It requires the CouchDB environment with appropriate access credentials.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/replication/replicator.rst#2025-04-21_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"_id\": \"my_rep_dup\",\n    \"source\": \"http://user:password@myserver.com/foo\",\n    \"target\": \"http://adm:pass@localhost:5984/bar\",\n    \"create_target\": true,\n    \"continuous\": true\n}\n```\n\n----------------------------------------\n\nTITLE: HTTP Response from CouchDB Update Function\nDESCRIPTION: This HTTP response shows the result of a successful update function execution. It includes headers indicating the updated document's ID and new revision, as well as a JSON body with a status message.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/ddoc/render.rst#2025-04-21_snippet_15\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 201 Created\nCache-Control: must-revalidate\nContent-Length: 16\nContent-Type: application/json\nDate: Wed, 21 Aug 2013 14:11:34 GMT\nServer: CouchDB (Erlang/OTP)\nX-Couch-Id: SpaghettiWithMeatballs\nX-Couch-Update-NewRev: 12-a5e099df5720988dae90c8b664496baf\n\n{\n    \"status\": \"ok\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Tree Structure View in CouchDB using JavaScript\nDESCRIPTION: Map-reduce functions for building a tree structure of files in CouchDB. The map function emits compound keys based on file paths, while using _sum as the reduce function. This allows querying hierarchical file structures using startkey and endkey parameters.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/best-practices/documents.rst#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// map function\nfunction(doc) {\n  if (doc.type === \"file\") {\n    if (doc.path.substr(-1) === \"/\") {\n      var raw_path = doc.path.slice(0, -1);\n    } else {\n      var raw_path = doc.path;\n    }\n    emit (raw_path.split('/'), 1);\n  }\n}\n\n// reduce\n_sum\n```\n\n----------------------------------------\n\nTITLE: Creating a Nouveau Index Example\nDESCRIPTION: This code snippet defines a design document with a nouveau index that utilizes a JavaScript function for indexing. It showcases the structure required for the design document, specifying the 'nouveau' field along with the animals index definition.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/ddocs/nouveau.rst#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"_id\": \"_design/nouveau_example\",\n    \"nouveau\": {\n        \"animals\": {\n            \"index\": \"function(doc){ ... }\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Conflicted Documents with Mango in CouchDB\nDESCRIPTION: This snippet demonstrates how to use CouchDB's Mango system to find all conflicted documents in a database. It includes the curl command to execute the query and the expected JSON response format.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/replication/conflicts.rst#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$ curl -X POST http://adm:pass@127.0.0.1:5984/dbname/_find \\\n    -d '{\"selector\": {\"_conflicts\": { \"$exists\": true}}, \"conflicts\": true}' \\\n    -Hcontent-type:application/json\n```\n\nLANGUAGE: javascript\nCODE:\n```\n{\"docs\": [\n{\"_id\":\"doc\",\"_rev\":\"1-3975759ccff3842adf690a5c10caee42\",\"a\":2,\"_conflicts\":[\"1-23202479633c2b380f79507a776743d5\"]}\n],\n\"bookmark\": \"g1AAAABheJzLYWBgYMpgSmHgKy5JLCrJTq2MT8lPzkzJBYozA1kgKQ6YVA5QkBFMgKSVDHWNjI0MjEzMLc2MjZONkowtDNLMLU0NzBPNzc3MTYxTTLOysgCY2ReV\"}\n```\n\n----------------------------------------\n\nTITLE: Deleting CouchDB Database\nDESCRIPTION: Removes an existing database from the CouchDB cluster using an authenticated DELETE request.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/cluster/databases.rst#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X DELETE \"http://xxx.xxx.xxx.xxx:5984/database-name --user admin-user\n```\n\n----------------------------------------\n\nTITLE: Logging Out of Cookie Auth Session in CouchDB\nDESCRIPTION: Example of logging out of a cookie authentication session in CouchDB. The request is a DELETE to /_session with the auth cookie. The response clears the auth cookie.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/server/authn.rst#2025-04-21_snippet_3\n\nLANGUAGE: http\nCODE:\n```\nDELETE /_session HTTP/1.1\nAccept: application/json\nCookie: AuthSession=cm9vdDo1MjA1NEVGMDo1QXNQkqC_0Qmgrk8Fw61_AzDeXw\nHost: localhost:5984\n```\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200 OK\nCache-Control: must-revalidate\nContent-Length: 12\nContent-Type: application/json\nDate: Fri, 09 Aug 2013 20:30:12 GMT\nServer: CouchDB (Erlang/OTP)\nSet-Cookie: AuthSession=; Version=1; Path=/; HttpOnly\n\n{\n    \"ok\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Creating HTML Form for CouchDB Document Submission\nDESCRIPTION: This HTML snippet demonstrates a simple 'Contact Us' form that submits data to a CouchDB update function. It includes fields for name, email, and message.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/best-practices/forms.rst#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<form action=\"/dbname/_design/ddocname/_update/contactform\" method=\"post\">\n    <div>\n        <label for=\"name\">Name:</label>\n        <input type=\"text\" id=\"name\" name=\"name\" />\n    </div>\n    <div>\n        <label for=\"mail\">Email:</label>\n        <input type=\"text\" id=\"mail\" name=\"email\" />\n    </div>\n    <div>\n        <label for=\"msg\">Message:</label>\n        <textarea id=\"msg\" name=\"message\"></textarea>\n    </div>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Mango Query with Field Selection\nDESCRIPTION: Query that specifies both a selector for matching documents and the fields to return in the result.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/ddocs/mango.rst#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n\"selector\": {\n    \"title\": \"Live And Let Die\"\n},\n\"fields\": [\n    \"title\",\n    \"cast\"\n]\n```\n\n----------------------------------------\n\nTITLE: Reduce Function for Removing Duplicate Labels\nDESCRIPTION: Implements a reduce function that removes duplicate labels from a list of values by using an object to track unique entries\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/ddocs/views/intro.rst#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nfunction(keys, values, rereduce) {\n    var unique_labels = {};\n    values.forEach(function(label) {\n        if(!unique_labels[label]) {\n            unique_labels[label] = true;\n        }\n    });\n\n    return unique_labels;\n}\n```\n\n----------------------------------------\n\nTITLE: HTTP GET Request for Fetching Changed Documents in CouchDB Replication\nDESCRIPTION: HTTP GET request to fetch missing document revisions from the source database. The request includes query parameters for retrieving revision history (revs=true), specific leaf revisions (open_revs), and ensuring the latest version (latest=true). The Accept header requests multipart/mixed response format.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/replication/protocol.rst#2025-04-21_snippet_20\n\nLANGUAGE: http\nCODE:\n```\nGET /source/SpaghettiWithMeatballs?revs=true&open_revs=[%225-00ecbbc%22,%221-917fa23%22,%223-6bcedf1%22]&latest=true HTTP/1.1\nAccept: multipart/mixed\nHost: localhost:5984\nUser-Agent: CouchDB\n```\n\n----------------------------------------\n\nTITLE: Querying Global View Across Partitions in CouchDB\nDESCRIPTION: Example of querying a global view that returns data across all partitions, showing the response format for field-based sensor queries.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/partitioned-dbs/index.rst#2025-04-21_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nshell> curl -u adm:pass http://adm:pass@127.0.0.1:15984/my_new_db/_design/all_sensors/_view/by_field\n{\"total_rows\":1,\"offset\":0,\"rows\":[\n{\"id\":\"sensor-260:sensor-reading-ca33c748-2d2c-4ed1-8abf-1bca4d9d03cf\",\"key\":\"Bob's Corn Field #5\",\"value\":\"sensor-260\"}\n]}\n```\n\n----------------------------------------\n\nTITLE: Creating a Sensor Readings Index in JavaScript\nDESCRIPTION: This JavaScript function defines a MapReduce index to emit sensor readings based on sensor ID and timestamp, allowing efficient querying of sensor data within a partitioned database.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/partitioned-dbs/index.rst#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction(doc) {\n    if(doc._id.indexOf(\"sensor-reading-\") != 0) {\n        return;\n    }\n    for(var r in doc.readings) {\n        emit([doc.sensor_id, r[0]], r[1])\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Hierarchically-linked Document Structure Example in CouchDB\nDESCRIPTION: Example of hierarchically-linked documents in CouchDB where documents reference their ancestors through array references.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/ddocs/views/joins.rst#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n[\n    { \"_id\": \"11111\" },\n    { \"_id\": \"22222\", \"ancestors\": [\"11111\"], \"value\": \"hello\" },\n    { \"_id\": \"33333\", \"ancestors\": [\"22222\",\"11111\"], \"value\": \"world\" }\n]\n```\n\n----------------------------------------\n\nTITLE: Defining an Analyzer Document for CouchDB\nDESCRIPTION: This snippet illustrates how to define an analyzer document for CouchDB to specify the analysis to use for indexing text data. It includes a sample design document with an index function and an analyzer reference.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/ddocs/search.rst#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"_id\": \"_design/analyzer_example\",\n    \"indexes\": {\n        \"INDEX_NAME\": {\n            \"index\": \"function (doc) { ... }\",\n            \"analyzer\": \"$ANALYZER_NAME\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Search Index Metadata in CouchDB via HTTP GET\nDESCRIPTION: A complete HTTP request and response example for retrieving metadata about a specific search index. The request targets the _search_info endpoint with a design document and index name, and returns information such as pending sequences, document counts, and disk size.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/ddoc/search.rst#2025-04-21_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nGET /recipes/_design/cookbook/_search_info/ingredients HTTP/1.1\nAccept: application/json\nHost: localhost:5984\n```\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200 OK\nContent-Type: application/json\n\n{\n    \"name\": \"_design/cookbook/ingredients\",\n    \"search_index\": {\n        \"pending_seq\": 7125496,\n        \"doc_del_count\": 129180,\n        \"doc_count\": 1066173,\n        \"disk_size\": 728305827,\n        \"committed_seq\": 7125496\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Ruby Script for Conflict Resolution in CouchDB\nDESCRIPTION: This Ruby script demonstrates a complete workflow for writing documents, creating conflicts, detecting conflicts, and resolving them in CouchDB using the RestClient library.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/replication/conflicts.rst#2025-04-21_snippet_13\n\nLANGUAGE: ruby\nCODE:\n```\nrequire \"rubygems\"\nrequire \"rest_client\"\nrequire \"json\"\n\nDB = \"http://adm:pass@127.0.0.1:5984/db\"\n\n# Write multiple documents\ndef writem(docs, new_edits)\n  JSON.parse(\n    RestClient.post(\n      \"#{DB}/_bulk_docs\",\n      {:docs => docs, :new_edits => new_edits}.to_json,\n      {content_type: :json, accept: :json}\n    )\n  )\nend\n\n# Write one document, return the rev\ndef write1(doc, id = nil, rev = nil)\n  doc[\"_id\"] = id if id\n  doc[\"_rev\"] = rev if rev\n\n  if rev\n    writem([doc], false)\n  else\n    writem([doc], true).first[\"rev\"]\n  end\nend\n\n# Read a document, return *all* revs\ndef read1(id)\n  retries = 0\n  loop do\n    # FIXME: escape id\n    res = [JSON.parse(RestClient.get(\"#{DB}/#{id}?conflicts=true\"))]\n\n    if revs = res.first.delete(\"_conflicts\")\n      begin\n        revs.each do |rev|\n          res << JSON.parse(RestClient.get(\"#{DB}/#{id}?rev=#{rev}\"))\n        end\n\n      rescue\n        retries += 1\n        raise if retries >= 5\n        next\n      end\n    end\n\n    return res\n  end\nend\n\n# Create DB\nRestClient.delete(DB) rescue nil\nRestClient.put(DB, {}.to_json)\n\n# Write a document\nrev1 = write1({\"hello\" => \"xxx\"}, \"test\")\np(read1(\"test\"))\n\n# Make three conflicting versions\n(1..3).each do |num|\n  write1({\"hello\" => \"foo\"}, \"test\", rev1 + num.to_s)\n  write1({\"hello\" => \"bar\"}, \"test\", rev1 + num.to_s)\n  write1({\"hello\" => \"baz\"}, \"test\", rev1 + num.to_s)\nend\n\nres = read1(\"test\")\np(res)\n\n# Now let's replace these three with one\nres.first[\"hello\"] = \"foo+bar+baz\"\nres.each_with_index do |r, i|\n  unless i == 0\n    r.replace({\"_id\" => r[\"_id\"], \"_rev\" => r[\"_rev\"], \"_deleted\" => true})\n  end\nend\n\nwritem(res, true)\np(read1(\"test\"))\n```\n\n----------------------------------------\n\nTITLE: Querying Specific Year Data with Mango in CouchDB\nDESCRIPTION: This JavaScript-based Mango query selects documents where the 'year' field equals 1988, showcasing simple data retrieval functionality from CouchDB. This is executed within the Fauxton interface and returns documents matching the specified criteria, employing the '$eq' operator for equality.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/intro/tour.rst#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n{\n   \"selector\": {\n      \"year\": {\n         \"$eq\": 1988\n      }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Bulk Document Update Conflicts\nDESCRIPTION: Demonstrates the error response structure when document updates result in conflicts, showing how CouchDB reports errors for individual documents\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/database/bulk-api.rst#2025-04-21_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\n[\n    {\n        \"id\" : \"FishStew\",\n        \"error\" : \"conflict\",\n        \"reason\" : \"Document update conflict.\"\n    },\n    {\n        \"id\" : \"LambStew\",\n        \"error\" : \"conflict\",\n        \"reason\" : \"Document update conflict.\"\n    },\n    {\n        \"id\" : \"BeefStew\",\n        \"error\" : \"conflict\",\n        \"reason\" : \"Document update conflict.\"\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Multipart Document Creation\nDESCRIPTION: Example of creating a document with multiple attachments using multipart/related format to avoid base64 encoding.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/document/common.rst#2025-04-21_snippet_12\n\nLANGUAGE: text\nCODE:\n```\nPUT /temp/somedoc HTTP/1.1\nAccept: application/json\nContent-Length: 372\nContent-Type: multipart/related;boundary=\"abc123\"\nHost: localhost:5984\nUser-Agent: HTTPie/0.6.0\n\n--abc123\nContent-Type: application/json\n\n{\n    \"body\": \"This is a body.\",\n    \"_attachments\": {\n        \"foo.txt\": {\n            \"follows\": true,\n            \"content_type\": \"text/plain\",\n            \"length\": 21\n        },\n        \"bar.txt\": {\n            \"follows\": true,\n            \"content_type\": \"text/plain\",\n            \"length\": 20\n        }\n    }\n}\n\n--abc123\n\nthis is 21 chars long\n--abc123\n\nthis is 20 chars lon\n--abc123--\n```\n\n----------------------------------------\n\nTITLE: CouchDB Data Directory Configuration\nDESCRIPTION: Configuration snippet for the CouchDB local.ini file that shows how to set up the database and view index directories. This is crucial for ensuring CouchDB can find and store data files correctly.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/install/snap.rst#2025-04-21_snippet_6\n\nLANGUAGE: ini\nCODE:\n```\n[couchdb]\n;max_document_size = 4294967296 ; bytes\n;os_process_timeout = 5000\ndatabase_dir = /var/snap/couchdb/common/data\nview_index_dir = /var/snap/couchdb/common/data\n```\n\n----------------------------------------\n\nTITLE: Querying CouchDB Admins via HTTP API\nDESCRIPTION: HTTP request and response for retrieving the list of server administrators using the CouchDB HTTP API.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/config/auth.rst#2025-04-21_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nGET /_node/nonode@nohost/_config/admins HTTP/1.1\nAccept: application/json\nHost: localhost:5984\n```\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200 OK\nCache-Control: must-revalidate\nContent-Length: 196\nContent-Type: application/json\nDate: Fri, 30 Nov 2012 11:37:18 GMT\nServer: CouchDB (Erlang/OTP)\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"admin\": \"-hashed-6d3c30241ba0aaa4e16c6ea99224f915687ed8cd,7f4a3e05e0cbc6f48a0035e3508eef90\",\n    \"architect\": \"-pbkdf2-43ecbd256a70a3a2f7de40d2374b6c3002918834,921a12f74df0c1052b3e562a23cd227f,10000\"\n}\n```\n\n----------------------------------------\n\nTITLE: Querying CouchDB View with descending, startkey, and endkey (HTTP - Corrected)\nDESCRIPTION: This example shows the correct way to use `descending` with `startkey` and `endkey` by reversing the values to match the descending sorting order. It aims to retrieve results in reverse order between \"egg\" and \"carrots\".\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/ddoc/views.rst#2025-04-21_snippet_9\n\nLANGUAGE: http\nCODE:\n```\n\"GET /recipes/_design/recipes/_view/by_ingredient?descending=true&startkey=\\\"egg\\\"&endkey=\\\"carrots\\\" HTTP/1.1\nAccept: application/json\nHost: localhost:5984\"\n```\n\n----------------------------------------\n\nTITLE: Initiating Database Replication with HTTP POST Request in CouchDB\nDESCRIPTION: Example HTTP POST request to the _replicate endpoint to trigger replication between two CouchDB databases. This request specifies both source and target databases using fully qualified URLs with authentication credentials.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/server/common.rst#2025-04-21_snippet_12\n\nLANGUAGE: http\nCODE:\n```\nPOST /_replicate HTTP/1.1\nAccept: application/json\nContent-Length: 80\nContent-Type: application/json\nHost: localhost:5984\n\n{\n    \"source\": \"http://adm:pass@127.0.0.1:5984/db_a\",\n    \"target\": \"http://adm:pass@127.0.0.1:5984/db_b\"\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Credentials Support for CORS in CouchDB\nDESCRIPTION: Configuration to enable credentials support for CORS requests, allowing authentication headers and cookies to be included in requests and responses.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/config/http.rst#2025-04-21_snippet_14\n\nLANGUAGE: ini\nCODE:\n```\n[cors]\ncredentials = true\n```\n\n----------------------------------------\n\nTITLE: GET Configuration Request - CouchDB HTTP\nDESCRIPTION: HTTP request to retrieve the entire CouchDB server configuration as a JSON structure. Returns configuration organized by different sections.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/server/configuration.rst#2025-04-21_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nGET /_node/nonode@nohost/_config HTTP/1.1\nAccept: application/json\nHost: localhost:5984\n```\n\n----------------------------------------\n\nTITLE: Using _design Filter in CouchDB - HTTP\nDESCRIPTION: Example of using the _design filter in a GET request to retrieve changes related to any design document in CouchDB. The response represents the structure of data returned for such a filter, highlighting data specifics for design documents.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/database/changes.rst#2025-04-21_snippet_13\n\nLANGUAGE: http\nCODE:\n```\nGET /recipes/_changes?filter=_design HTTP/1.1\nAccept: application/json\nHost: localhost:5984\n```\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200 OK\nCache-Control: must-revalidate\nContent-Type: application/json\nDate: Tue, 06 Sep 2016 12:55:12 GMT\nETag: \"ARIHFWL3I7PIS0SPVTFU6TLR2\"\nServer: CouchDB (Erlang OTP)\nTransfer-Encoding: chunked\n\n{\n    \"last_seq\": \"11-g1AAAAIreJyVkEEKwjAQRUOrqCuPoCeQZGIaXdmbaNIk1FLjyrXeRG-iN9Gb1LQRaimFlsAEJnkP_s8RQtM0VGhuz0qTmABfYXdI7h4CgeSiKIosDUVwcotJIpQSOmp_71TIpZty97OgymJAU8G5QrOLVdocrVbdfFzy-wYvcbLVEvrxh5K_NlJggIhSNiCFHbmJbu5yonttMoneYD6kD296eNOzzoRNBNqse2Xyjpd3vP96AcYNTQY4Pt5RdTOuHIwCY5S0qewLwY6OaA\",\n    \"pending\": 0,\n    \"results\": [\n        {\n            \"changes\": [\n                {\n                    \"rev\": \"10-304cae84fd862832ea9814f02920d4b2\"\n                }\n            ],\n            \"id\": \"_design/ingredients\",\n            \"seq\": \"8-g1AAAAHxeJzLYWBg4MhgTmHgz8tPSTV0MDQy1zMAQsMcoARTIkOS_P___7MymBOZcoEC7MmJKSmJqWaYynEakaQAJJPsoaYwgE1JM0o1TjQ3T2HgLM1LSU3LzEtNwa3fAaQ_HkV_kkGyZWqSEXH6E0D666H6GcH6DYyMzIyNTUnwRR4LkGRoAFJAg-ZnJTIQULkAonI_ws0GaWZGqWkmRLkZYsYBiBn3Cdv2AKIS7ENWsG2mxkampsaGmLqyAOYpgEo\"\n        },\n        {\n            \"changes\": [\n                {\n                    \"rev\": \"123-6f7c1b7c97a9e4f0d22bdf130e8fd817\"\n                }\n            ],\n            \"deleted\": true,\n            \"id\": \"_design/cookbook\",\n            \"seq\": \"9-g1AAAAHxeJzLYWBg4MhgTmHgz8tPSTV0MDQy1zMAQsMcoARTIkOS_P___7MymBOZcoEC7MmJKSmJqWaYynEakaQAJJPsoaYwgE1JM0o1TjQ3T2HgLM1LSU3LzEtNwa3fAaQ_HkV_kkGyZWqSEXH6E0D661F8YWBkZGZsbEqCL_JYgCRDA5ACGjQ_K5GBgMoFEJX7EW42SDMzSk0zIcrNEDMOQMy4T9i2BxCVYB-ygm0zNTYyNTU2xNSVBQDnK4BL\"\n        },\n        {\n            \"changes\": [\n                {\n                    \"rev\": \"6-5b8a52c22580e922e792047cff3618f3\"\n                }\n            ],\n            \"deleted\": true,\n            \"id\": \"_design/meta\",\n            \"seq\": \"11-g1AAAAIReJyVkE0OgjAQRiegUVceQU9g-mOpruQm2tI2SLCuXOtN9CZ6E70JFmpCCCFCmkyTdt6bfJMDwDQNFcztWWkcY8JXyB2cu49AgFwURZGloQhO7mGSCKWEjtrtnQq5dFXufhaoLIZoKjhXMLtYpc3RatXNxyW_b_ASJVstST_-UPLXRgpESEQpG5DCjlyFm7uc6F6bTKI3iA_Zhzc9vOlZZ0ImItqse2Xyjpd3vDMBfzo_vrPawLiaxihhjOI2lX0BirqHbg\"\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Querying System Statistics in CouchDB HTTP API\nDESCRIPTION: Makes a GET request to the /_node/_local/_system endpoint to retrieve system-level statistics for the running CouchDB server. Returns a JSON object with various statistics.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/server/common.rst#2025-04-21_snippet_33\n\nLANGUAGE: http\nCODE:\n```\nGET /_node/_local/_system HTTP/1.1\nAccept: application/json\nHost: localhost:5984\n```\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200 OK\nCache-Control: must-revalidate\nContent-Length: 187\nContent-Type: application/json\nDate: Sat, 10 Aug 2013 11:41:11 GMT\nServer: CouchDB (Erlang/OTP)\n\n{\n  \"uptime\": 259,\n  \"memory\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Using Built-in Reduce Function for Comments Count\nDESCRIPTION: This snippet shows the use of CouchDB's built-in '_sum' function to count the number of rows between specified start and end keys effectively, highlighting the efficiency of using built-in functions over manually defined ones.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/ddocs/views/intro.rst#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n_sum\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic CouchDB Design Document with View\nDESCRIPTION: Example of creating a design document for defining views in CouchDB. The document contains a single view definition with map and reduce functions.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/ddocs/views/nosql.rst#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"_id\": \"_design/application\",\n    \"_rev\": \"1-C1687D17\",\n    \"views\": {\n        \"viewname\": {\n            \"map\": \"function(doc) { ... }\",\n            \"reduce\": \"function(keys, values) { ... }\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Range Query for Faceted Search\nDESCRIPTION: Example of a query using ranges for faceted search, demonstrating how to specify price ranges with labels 'cheap' and 'expensive'.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/ddocs/nouveau.rst#2025-04-21_snippet_22\n\nLANGUAGE: text\nCODE:\n```\n?q=*:*&ranges={\"price\":[{\"label\":\"cheap\",\"min\":0,\"max\":\"100\",\"max_inclusive\":false},{\"label\":\"expensive\",\"min\":100}]}\n```\n\n----------------------------------------\n\nTITLE: Single Database Replication Request - HTTP\nDESCRIPTION: This snippet demonstrates how to perform a one-time replication request to synchronize documents between two local databases using a single POST HTTP request. It highlights the request structure with 'source' and 'target' fields.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/server/common.rst#2025-04-21_snippet_17\n\nLANGUAGE: http\nCODE:\n```\nPOST http://couchdb:5984/_replicate HTTP/1.1\nAccept: application/json\nContent-Type: application/json\n\n{\n    \"source\" : \"recipes\",\n    \"target\" : \"recipes-snapshot\"\n}\n```\n\n----------------------------------------\n\nTITLE: Triggering View Cleanup in CouchDB\nDESCRIPTION: This snippet shows how to trigger a cleanup of outdated view indexes using a POST request to the _view_cleanup endpoint. This removes files for views that no longer exist.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/maintenance/compaction.rst#2025-04-21_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ncurl -H \"Content-Type: application/json\" -X POST http://adm:pass@localhost:5984/dbname/_view_cleanup\n```\n\nLANGUAGE: javascript\nCODE:\n```\n{\"ok\":true}\n```\n\n----------------------------------------\n\nTITLE: Creating a document in CouchDB\nDESCRIPTION: This command creates a new document in the specified CouchDB database. It uses a UUID as its ID and JSON format to define its contents.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/intro/api.rst#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ncurl -X PUT http://admin:password@127.0.0.1:5984/albums/6e1295ed6c29495e54cc05947f18c8af -d '{\"title\":\"There is Nothing Left to Lose\",\"artist\":\"Foo Fighters\"}'\n```\n\n----------------------------------------\n\nTITLE: Triggering Manual Database Compaction in CouchDB\nDESCRIPTION: This snippet shows how to manually trigger database compaction using a POST request to the _compact endpoint. It requires specifying the Content-Type header as application/json.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/maintenance/compaction.rst#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl -H \"Content-Type: application/json\" -X POST http://adm:pass@localhost:5984/my_db/_compact\n```\n\n----------------------------------------\n\nTITLE: Storing Nested JSON Object in FoundationDB\nDESCRIPTION: Example showing how a nested JSON object is decomposed into key-value pairs using tuple encoding\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/rfcs/004-document-storage.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"foo\": {\n        \"bar\": {\n            \"baz\": 123\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Multiple Local Documents in CouchDB\nDESCRIPTION: Example of querying multiple local documents using POST request to /_local_docs/queries endpoint. The request includes an array of queries with specified keys to fetch multiple local documents in a single request.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/local.rst#2025-04-21_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nPOST /db/_local_docs/queries HTTP/1.1\nContent-Type: application/json\nAccept: application/json\nHost: localhost:5984\n\n{\n    \"queries\": [\n        {\n            \"keys\": [\n                \"_local/localdoc05\",\n                \"_local/not-exist\",\n                \"_design/recipe\",\n                \"spaghetti\"\n            ]\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Standard Map Index in CouchDB Design Document (JSON)\nDESCRIPTION: Example of a design document containing a basic map function for creating a secondary index via a background job, which is the default way map indexes are built in CouchDB.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/rfcs/008-map-indexes.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"_id\": \"_design/design-doc-id\",\n  \"_rev\": \"1-8d361a23b4cb8e213f0868ea3d2742c2\",\n  \"views\": {\n    \"map-view\": {\n      \"map\": \"function (doc) {\\n  emit(doc._id, 1);\\n}\"\n    }\n  },\n  \"language\": \"javascript\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing CouchDB using Helm on Kubernetes\nDESCRIPTION: Commands to add the CouchDB Helm repository, update local repositories, and install CouchDB using Helm. The installation creates a release named 'my-release' using the official CouchDB Helm chart.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/install/kubernetes.rst#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nhelm repo add couchdb https://apache.github.io/couchdb-helm\n\nhelm repo update\n\nhelm install --name my-release couchdb/couchdb\n```\n\n----------------------------------------\n\nTITLE: Configuring Pull Replication from Server A\nDESCRIPTION: Example replication document showing pull replication configuration with authentication credentials and continuous sync enabled.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/replication/replicator.rst#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"_id\": \"rep_from_A\",\n    \"source\": \"http://user:password@aserver.com:5984/foo\",\n    \"target\": {\n        \"url\": \"http://localhost:5984/foo_a\",\n        \"auth\": {\n            \"basic\": {\n                \"username\": \"adm\",\n                \"password\": \"pass\"\n            }\n        }\n    },\n    \"continuous\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Viewing Active Smoosh Channels in CouchDB\nDESCRIPTION: This code snippet shows how to view the currently active database and view channels for Smoosh in CouchDB using the CouchDB shell.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/smoosh/operator_guide.md#2025-04-21_snippet_1\n\nLANGUAGE: erlang\nCODE:\n```\n(couchdb@db3.foo.bar)3> rpc:multicall(config, get, [\"smoosh\", \"db_channels\"]).\n{[\"ratio_dbs,big_dbs\",\"ratio_dbs,big_dbs\",\"ratio_dbs,big_dbs\"],[]}\n(couchdb@db3.foo.bar)4> rpc:multicall(config, get, [\"smoosh\", \"view_channels\"]).\n{[\"ratio_views\",\"ratio_views\",\"ratio_views\"],[]}\n```\n\n----------------------------------------\n\nTITLE: Configuring Fair Share Allocation for CouchDB Replicator Databases\nDESCRIPTION: Sets share values for different replicator databases to control their relative priority. Higher share values (1-1000) give databases a better chance of having their jobs run, with 100 being the default.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/config/replicator.rst#2025-04-21_snippet_29\n\nLANGUAGE: ini\nCODE:\n```\n[replicator.shares]\n_replicator = 50\nfoo/_replicator = 25\nbar/_replicator = 25\n```\n\n----------------------------------------\n\nTITLE: HTTP Response from CouchDB _membership Endpoint\nDESCRIPTION: Example HTTP response from the _membership endpoint showing cluster_nodes (nodes that are part of the cluster) and all_nodes (all nodes this node knows about). This information is crucial for cluster administration.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/server/common.rst#2025-04-21_snippet_11\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200 OK\nCache-Control: must-revalidate\nContent-Type: application/json\nDate: Sat, 11 Jul 2015 07:02:41 GMT\nServer: CouchDB (Erlang/OTP)\nContent-Length: 142\n\n{\n    \"all_nodes\": [\n        \"node1@127.0.0.1\",\n        \"node2@127.0.0.1\",\n        \"node3@127.0.0.1\"\n    ],\n    \"cluster_nodes\": [\n        \"node1@127.0.0.1\",\n        \"node2@127.0.0.1\",\n        \"node3@127.0.0.1\"\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching a Single Document with Conflicts in CouchDB\nDESCRIPTION: This snippet shows how to fetch a single document with its conflict information in CouchDB using a direct GET request.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/replication/conflicts.rst#2025-04-21_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n$ curl 'http://adm:pass@127.0.0.1:5984/conflict_test/test?conflicts=true'\n```\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"_id\":\"test\",\n    \"_rev\":\"2-b91bb807b4685080c6a651115ff558f5\",\n    \"hello\":\"bar\",\n    \"_conflicts\":[\n        \"2-65db2a11b5172bf928e3bcf59f728970\",\n        \"2-5bc3c6319edf62d4c624277fdd0ae191\"\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Uploading an Attachment to a Document in CouchDB\nDESCRIPTION: This cURL command uploads an image file as an attachment to an existing CouchDB document. It specifies the document revision and uses the --data-binary option to read the file's contents for the HTTP request body. The Content-Type header indicates the file type.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/intro/api.rst#2025-04-21_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ncurl -vX PUT http://admin:password@127.0.0.1:5984/albums/6e1295ed6c29495e54cc05947f18c8af/artwork.jpg?rev=2-2739352689 \\\n     --data-binary @artwork.jpg -H \"Content-Type:image/jpg\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Nouveau Search Index in CouchDB (JavaScript)\nDESCRIPTION: Example of creating a Nouveau search index in a CouchDB design document. It demonstrates how to set up an index with a default analyzer.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/ddocs/nouveau.rst#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"_id\": \"_design/analyzer_example\",\n    \"nouveau\": {\n        \"INDEX_NAME\": {\n            \"index\": \"function (doc) { ... }\",\n            \"default_analyzer\": \"$ANALYZER_NAME\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Starting CouchDB Server\nDESCRIPTION: Command to start the CouchDB server as the couchdb user. This runs CouchDB with the appropriate permissions in foreground mode.\nSOURCE: https://github.com/apache/couchdb/blob/main/INSTALL.Unix.md#2025-04-21_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nsudo -i -u couchdb couchdb/bin/couchdb\n```\n\n----------------------------------------\n\nTITLE: PUT Database Security Object with cURL\nDESCRIPTION: cURL command to set the security object for a CouchDB database with specified admin and member permissions.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/database/security.rst#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl http://adm:pass@localhost:5984/pineapple/_security -X PUT -H 'content-type: application/json' -H 'accept: application/json' -d '{\"admins\":{\"names\":[\"superuser\"],\"roles\":[\"admins\"]},\"members\":{\"names\": [\"user1\",\"user2\"],\"roles\": [\"developers\"]}}'\n```\n\n----------------------------------------\n\nTITLE: Using CommonJS module in CouchDB validate_doc_update\nDESCRIPTION: This code snippet shows how to require and use a CommonJS module within a CouchDB `validate_doc_update` function. It requires the `security` module and then calls the `user_context` function to determine if the user is an admin.  This demonstrates how to utilize modular code within the document validation process.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/query-server/javascript.rst#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n \"{\n        \"views\": {\n            \"lib\": {\n                \"security\": \"function user_context(userctx, secobj) { ... }\"\n            }\n        },\n        \"validate_doc_update\": \"function(newdoc, olddoc, userctx, secobj) {\n            user = require('views/lib/security').user_context(userctx, secobj);\n            return user.is_admin();\n        }\"\n        \"_id\": \"_design/test\"\n    }\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving Document Shard Location in CouchDB using HTTP\nDESCRIPTION: HTTP request and response examples for finding which specific shard contains a given document ID. Returns the shard range and the list of nodes that host replicas of that shard.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/database/shard.rst#2025-04-21_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nGET /db/_shards/docid HTTP/1.1\nAccept: */*\nHost: localhost:5984\n```\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200 OK\nCache-Control: must-revalidate\nContent-Length: 94\nContent-Type: application/json\nDate: Fri, 18 Jan 2019 20:26:33 GMT\nServer: CouchDB/2.3.0-9d4cb03c2 (Erlang OTP/19)\n\n{\n  \"range\": \"e0000000-ffffffff\",\n  \"nodes\": [\n    \"node1@127.0.0.1\",\n    \"node2@127.0.0.1\",\n    \"node3@127.0.0.1\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Bulk Document Deletion Request in CouchDB\nDESCRIPTION: HTTP request for deleting multiple documents in a single batch operation, demonstrating document deletion with specified IDs and revision information\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/database/bulk-api.rst#2025-04-21_snippet_11\n\nLANGUAGE: http\nCODE:\n```\nPOST /db/_bulk_docs HTTP/1.1\nAccept: application/json\nContent-Length: 109\nContent-Type:application/json\nHost: localhost:5984\n\n{\n    \"docs\": [\n        {\n            \"_id\": \"FishStew\"\n        },\n        {\n            \"_id\": \"LambStew\",\n            \"_rev\": \"2-0786321986194c92dd3b57dfbfc741ce\",\n            \"_deleted\": true\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Querying CouchDB View with limit and skip (HTTP)\nDESCRIPTION: This HTTP request demonstrates the usage of the `limit` and `skip` parameters to implement pagination. It requests a maximum of 3 rows, skipping the first 2 rows. The `Accept` header specifies JSON as the expected response format.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/ddoc/views.rst#2025-04-21_snippet_15\n\nLANGUAGE: http\nCODE:\n```\n\"GET /recipes/_design/recipes/_view/by_title?limit=3&skip=2 HTTP/1.1\nAccept: application/json\nHost: localhost:5984\"\n```\n\n----------------------------------------\n\nTITLE: Basic CouchDB Map Function for Name and Age\nDESCRIPTION: A map function that emits document names as keys and ages as values. It includes a validation check to ensure the required fields exist in the document.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/ddocs/views/nosql.rst#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nfunction(doc) {\n    if(doc.name && doc.age) {\n        emit(doc.name, doc.age);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Continuous Replication Setup - HTTP\nDESCRIPTION: This snippet sets up continuous replication, which keeps the target database in sync with changes in the source database indefinitely. It specifies the 'continuous' option within the JSON object of the request.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/server/common.rst#2025-04-21_snippet_18\n\nLANGUAGE: http\nCODE:\n```\nPOST http://couchdb:5984/_replicate HTTP/1.1\nAccept: application/json\nContent-Type: application/json\n\n{\n    \"continuous\" : true,\n    \"source\" : \"recipes\",\n    \"target\" : \"http://couchdb-remote:5984/recipes\"\n}\n```\n\n----------------------------------------\n\nTITLE: HEAD Request for Document Attachment in CouchDB\nDESCRIPTION: HTTP HEAD request to retrieve metadata about a document attachment without downloading the actual content. Returns headers with attachment size, encoding and MD5 hash.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/document/attachments.rst#2025-04-21_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nHEAD /recipes/SpaghettiWithMeatballs/recipe.txt HTTP/1.1\nHost: localhost:5984\n```\n\n----------------------------------------\n\nTITLE: GET Response with JSON Document\nDESCRIPTION: Example response showing a successful document retrieval including the full JSON document content with metadata and actual document fields.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/document/common.rst#2025-04-21_snippet_3\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200 OK\nCache-Control: must-revalidate\nContent-Length: 660\nContent-Type: application/json\nDate: Tue, 13 Aug 2013 21:35:37 GMT\nETag: \"1-917fa2381192822767f010b95b45325b\"\nServer: CouchDB (Erlang/OTP)\n\n{\n    \"_id\": \"SpaghettiWithMeatballs\",\n    \"_rev\": \"1-917fa2381192822767f010b95b45325b\",\n    \"description\": \"An Italian-American dish that usually consists of spaghetti, tomato sauce and meatballs.\",\n    \"ingredients\": [\n        \"spaghetti\",\n        \"tomato sauce\",\n        \"meatballs\"\n    ],\n    \"name\": \"Spaghetti with meatballs\"\n}\n```\n\n----------------------------------------\n\nTITLE: HEAD Request for CouchDB Document\nDESCRIPTION: Example of a HEAD request to retrieve document metadata without the full document content. Returns headers with document size and revision information.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/document/common.rst#2025-04-21_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nHEAD /db/SpaghettiWithMeatballs HTTP/1.1\nAccept: application/json\nHost: localhost:5984\n```\n\n----------------------------------------\n\nTITLE: Configuring X-Frame-Options in CouchDB\nDESCRIPTION: Configuration for the X-Frame-Options security header to control whether CouchDB responses can be embedded in frames, iframes, or objects. Helps prevent clickjacking attacks.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/config/http.rst#2025-04-21_snippet_23\n\nLANGUAGE: ini\nCODE:\n```\n[x_frame_options]\n; Settings same-origin will return X-Frame-Options: SAMEORIGIN.\n; If same origin is set, it will ignore the hosts setting\n; same_origin = true\n; Settings hosts will\n; return X-Frame-Options: ALLOW-FROM https://example.com/\n; List of hosts separated by a comma. * means accept all\n; hosts =\n```\n\n----------------------------------------\n\nTITLE: Defining Per-Field Analyzers in CouchDB\nDESCRIPTION: This JavaScript snippet demonstrates how to configure different analyzers for different fields within a CouchDB design document. It uses the \"perfield\" analyzer, specifying a default analyzer and mapping specific fields to different language-specific analyzers like \"spanish\" and \"german\".\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/ddocs/search.rst#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"_id\": \"_design/analyzer_example\",\n    \"indexes\": {\n        \"INDEX_NAME\": {\n            \"analyzer\": {\n                \"name\": \"perfield\",\n                \"default\": \"english\",\n                \"fields\": {\n                    \"spanish\": \"spanish\",\n                    \"german\": \"german\"\n                }\n            },\n            \"index\": \"function (doc) { ... }\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating UUIDs in CouchDB HTTP API\nDESCRIPTION: Makes a GET request to the /_uuids endpoint to generate one or more Universally Unique Identifiers (UUIDs). The 'count' query parameter specifies the number of UUIDs to return (default is 1).\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/server/common.rst#2025-04-21_snippet_38\n\nLANGUAGE: http\nCODE:\n```\nGET /_uuids?count=10 HTTP/1.1\nAccept: application/json\nHost: localhost:5984\n```\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200 OK\nContent-Length: 362\nContent-Type: application/json\n```\n\n----------------------------------------\n\nTITLE: POST Changes Feed with Doc IDs Filter\nDESCRIPTION: Example of filtering changes feed by specific document IDs using POST request\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/database/changes.rst#2025-04-21_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nPOST /recipes/_changes?filter=_doc_ids HTTP/1.1\nAccept: application/json\nContent-Length: 40\nContent-Type: application/json\nHost: localhost:5984\n\n{\n    \"doc_ids\": [\n        \"SpaghettiWithMeatballs\"\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Copying CouchDB Design Documents Using cURL\nDESCRIPTION: Command for copying a CouchDB design document using the HTTP COPY verb, useful for zero-downtime view deployments. This allows creating backup copies or staging new versions of design documents.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/best-practices/views.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X COPY <URL of source design document> -H \"Destination: <ID of destination design document>\"\n```\n\n----------------------------------------\n\nTITLE: CouchDB Changes API Response Format\nDESCRIPTION: This snippet shows the HTTP response format for a successful request to the /{db}/_changes endpoint. It includes headers and a JSON body with last_seq, pending, and results fields containing change information.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/database/changes.rst#2025-04-21_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200 OK\nCache-Control: must-revalidate\nContent-Type: application/json\nDate: Mon, 12 Aug 2013 00:54:58 GMT\nETag: \"6ASLEKEMSRABT0O5XY9UPO9Z\"\nServer: CouchDB (Erlang/OTP)\nTransfer-Encoding: chunked\n\n{\n    \"last_seq\": \"5-g1AAAAIreJyVkEsKwjAURZ-toI5cgq5A0sQ0OrI70XyppcaRY92J7kR3ojupaSPUUgotgRd4yTlwbw4A0zRUMLdnpaMkwmyF3Ily9xBwEIuiKLI05KOTW0wkV4rruP29UyGWbordzwKVxWBNOGMKZhertDlarbr5pOT3DV4gudUC9-MPJX9tpEAYx4TQASns2E24ucuJ7rXJSL1BbEgf3vTwpmedCZkYa7Pulck7Xt7x_usFU2aIHOD4eEfVTVA5KMGUkqhNZV-8_o5i\",\n    \"pending\": 0,\n    \"results\": [\n        {\n            \"changes\": [\n                {\n                    \"rev\": \"2-7051cbe5c8faecd085a3fa619e6e6337\"\n                }\n            ],\n            \"id\": \"6478c2ae800dfc387396d14e1fc39626\"\n\n\n```\n\n----------------------------------------\n\nTITLE: HTTP: Creating a New User in CouchDB\nDESCRIPTION: Shows the HTTP request and response for creating a new user in the CouchDB authentication database\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/intro/security.rst#2025-04-21_snippet_6\n\nLANGUAGE: http\nCODE:\n```\nPUT /_users/org.couchdb.user:jan HTTP/1.1\nAccept: application/json\nContent-Length: 62\nContent-Type: application/json\nHost: localhost:5984\nUser-Agent: curl/7.31.0\n```\n\n----------------------------------------\n\nTITLE: Getting Smoosh Channel Configuration in CouchDB\nDESCRIPTION: This code demonstrates how to retrieve a specific configuration setting for a Smoosh channel in CouchDB using the CouchDB shell.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/smoosh/operator_guide.md#2025-04-21_snippet_3\n\nLANGUAGE: erlang\nCODE:\n```\n(couchdb@db1.foo.bar)1> rpc:multicall(config, get, [\"smoosh.big_dbs\", \"concurrency\"]).\n{[\"2\",\"2\",\"2\"],[]}\n```\n\n----------------------------------------\n\nTITLE: POST Search Request with cURL\nDESCRIPTION: Example of sending a search query using cURL POST command.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/ddocs/search.rst#2025-04-21_snippet_18\n\nLANGUAGE: sh\nCODE:\n```\ncurl 'https://$HOST:5984/db/_design/ddoc/_search/searchname' -X POST -H 'Content-Type: application/json' -d @search.json\n```\n\n----------------------------------------\n\nTITLE: Configuring Database and Document Skip Patterns\nDESCRIPTION: Configuration for skipping specific databases and documents based on regex patterns.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/config/scanner.rst#2025-04-21_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[{plugin}.skip_dbs]\nregex1 = a|b\nregex2 = bar(.*)baz\n\n[{plugin}.skip_ddocs]\nregex1 = x|y|z\nregex2 = c(d|e)f\n\n[{plugin}.skip_docs]\nregex1 = k|l\nregex2 = mno$\n```\n\n----------------------------------------\n\nTITLE: Querying Nouveau Index with Facets\nDESCRIPTION: This curl command demonstrates how to query a Nouveau index with facet support, including counts of string fields and ranges for numeric fields.\nSOURCE: https://github.com/apache/couchdb/blob/main/nouveau/README.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncurl 'foo:bar@localhost:15984/foo/_design/foo/_nouveau/bar?q=*:*&limit=1&ranges={\"bar\":[{\"label\":\"cheap\",\"min\":0,\"max\":100}]}&counts=[\"foo\"]' -g\n```\n\n----------------------------------------\n\nTITLE: Access Restriction Using CouchDB Rewrite Function\nDESCRIPTION: JavaScript function that restricts write access to the finance database based on user roles. Demonstrates how to implement custom authorization logic in rewrite rules.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/ddoc/rewrites.rst#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction(req2) {\n  var path = req2.path.slice(4),\n    isWrite = /^(put|post|delete)$/i.test(req2.method),\n    isFinance = req2.userCtx.roles.indexOf(\"finance\") > -1;\n  if (path[0] == \"finance\" && isWrite && !isFinance) {\n    // Deny writes to  DB \"finance\" for users\n    // having no \"finance\" role\n    return {\n      code: 403,\n      body: JSON.stringify({\n        error: \"forbidden\".\n        reason: \"You are not allowed to modify docs in this DB\"\n      })\n    };\n  }\n  // Pass through all other requests\n  return { path: \"../../../\" + path.join(\"/\") };\n}\n```\n\n----------------------------------------\n\nTITLE: Basic List Function in JavaScript\nDESCRIPTION: This JavaScript code defines a basic list function that formats a view as a simple HTML table. It sets the Content-Type header to 'text/html'. The function takes a view head (head) and a request object (req) as input and outputs an HTML table representation of the view data.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/ddocs/ddocs.rst#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n\"function(head, req){\n    start({\n        'headers': {\n            'Content-Type': 'text/html'\n        }\n    });\n    send('<html><body><table>');\n    send('<tr><th>ID</th><th>Key</th><th>Value</th></tr>');\n    while(row = getRow()){\n        send(''.concat(\n            '<tr>',\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Nouveau Index in CouchDB\nDESCRIPTION: Example of defining a Nouveau index in CouchDB. This index is created on multiple fields with different types and a default analyzer.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/ddocs/mango.rst#2025-04-21_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"type\": \"nouveau\",\n    \"index\": {\n        \"fields\": [\n            {\"name\": \"foo\", \"type\": \"string\"},\n            {\"name\": \"bar\", \"type\": \"number\"},\n            {\"name\": \"baz\", \"type\": \"string\"},\n        ],\n        \"default_analyzer\": \"keyword\",\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Extended Revision Information in CouchDB via HTTP\nDESCRIPTION: Shows how to fetch a document with its revision history using the revs_info query parameter. The response includes details about each revision including its status (available, missing, or deleted).\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/document/common.rst#2025-04-21_snippet_13\n\nLANGUAGE: http\nCODE:\n```\nGET /recipes/SpaghettiWithMeatballs?revs_info=true  HTTP/1.1\nAccept: application/json\nHost: localhost:5984\n```\n\n----------------------------------------\n\nTITLE: Requesting a List Function with Another Design Document's View in CouchDB\nDESCRIPTION: HTTP GET request to execute a list function against a view from a different design document, filtering by a specific key.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/ddoc/render.rst#2025-04-21_snippet_8\n\nLANGUAGE: http\nCODE:\n```\nGET /recipes/_design/ingredient/_list/ingredients/recipe/by_ingredient?key=\"spaghetti\" HTTP/1.1\nAccept: text/plain\nHost: localhost:5984\n```\n\n----------------------------------------\n\nTITLE: Map Function for Retrieving Comments by Author in CouchDB\nDESCRIPTION: View function that emits comments keyed by author, including the post reference, for the separate documents approach.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/ddocs/views/joins.rst#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nfunction(doc) {\n    if (doc.type == \"comment\") {\n        emit(doc.author, {post: doc.post, content: doc.content});\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying a Global Index in CouchDB Nouveau Search (Shell)\nDESCRIPTION: Example of using curl to query a global index in CouchDB Nouveau search. It shows how to construct the URL and include query parameters from the command line.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/ddocs/nouveau.rst#2025-04-21_snippet_14\n\nLANGUAGE: sh\nCODE:\n```\ncurl https://$HOST:5984/$DATABASE/_design/$DDOC/_nouveau/$INDEX_NAME?\ninclude_docs=true\\&q=*:*\\&limit=1 \\\n```\n\n----------------------------------------\n\nTITLE: Configuring Write Quorum - Bash\nDESCRIPTION: Makes a write request specifying a quorum of 2 nodes must acknowledge the write before receiving confirmation.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/cluster/sharding.rst#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X PUT \"$COUCH_URL:5984/{db}/{doc}?w=2\" -d '{...}'\n```\n\n----------------------------------------\n\nTITLE: Creating a Partitioned Database using Curl Commands in Bash\nDESCRIPTION: This Bash command demonstrates how to create a new partitioned database in CouchDB using a PUT request with a query parameter to enable partitioning.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/partitioned-dbs/index.rst#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X PUT 'http://adm:pass@127.0.0.1:5984/my_new_db?partitioned=true'\n{\"ok\":true}\n```\n\n----------------------------------------\n\nTITLE: Implementing List Function in JavaScript for CouchDB\nDESCRIPTION: A list function that formats view results as a comma-separated string. It gets each row from the view result and concatenates their keys with commas.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/ddoc/render.rst#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nfunction(head, req) {\n    var row = getRow();\n    if (!row){\n        return 'no ingredients'\n    }\n    send(row.key);\n    while(row=getRow()){\n        send(', ' + row.key);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Cluster Seedlist for Node Discovery\nDESCRIPTION: Specifies a comma-separated list of nodes to contact for joining a cluster. Required for cluster initialization.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/config/cluster.rst#2025-04-21_snippet_3\n\nLANGUAGE: ini\nCODE:\n```\n[cluster]\nseedlist = couchdb@node1.example.com,couchdb@node2.example.com\n```\n\n----------------------------------------\n\nTITLE: Querying a Partitioned Index in CouchDB Nouveau Search (HTTP)\nDESCRIPTION: Example of using HTTP GET to query a partitioned index in CouchDB Nouveau search. It demonstrates how to construct the URL and include query parameters.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/ddocs/nouveau.rst#2025-04-21_snippet_11\n\nLANGUAGE: http\nCODE:\n```\nGET /$DATABASE/_partition/$PARTITION_KEY/_design/$DDOC/_nouveau/$INDEX_NAME?include_docs=true&q=*:*&limit=1 HTTP/1.1\nContent-Type: application/json\n```\n\n----------------------------------------\n\nTITLE: Retrieving Attachments Since Revision\nDESCRIPTION: Example of retrieving document attachments modified since a specific revision using the atts_since parameter.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/document/common.rst#2025-04-21_snippet_10\n\nLANGUAGE: http\nCODE:\n```\nGET /recipes/SpaghettiWithMeatballs?atts_since=[%224-874985bc28906155ba0e2e0538f67b05%22] HTTP/1.1\nAccept: application/json\nHost: localhost:5984\n```\n\n----------------------------------------\n\nTITLE: Verifying CouchDB Cluster Setup State via API\nDESCRIPTION: This snippet illustrates how to verify the status of the CouchDB cluster setup using the `_cluster_setup` endpoint. The expected response indicates that the cluster setup is finished.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/setup/cluster.rst#2025-04-21_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ncurl http://admin:password@<setup-coordination-node>:5984/_cluster_setup\n```\n\nLANGUAGE: bash\nCODE:\n```\n{\"state\":\"cluster_finished\"}\n```\n\n----------------------------------------\n\nTITLE: Docker Compose for CouchDB with Nouveau\nDESCRIPTION: Docker Compose configuration for setting up a minimal CouchDB cluster with Nouveau integration, including volume mounts and configuration injection.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/install/nouveau.rst#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  couchdb:\n    image: couchdb:3\n    environment:\n      COUCHDB_USER: admin\n      COUCHDB_PASSWORD: admin\n    volumes:\n      - couchdb:/opt/couchdb/data\n    ports:\n      - 5984:5984\n    configs:\n      - source: nouveau.ini\n        target: /opt/couchdb/etc/local.d/nouveau.ini\n\n  nouveau:\n    image: couchdb:3-nouveau\n\nvolumes:\n  couchdb:\n\nconfigs:\n  nouveau.ini:\n    content: |\n      [couchdb]\n      single_node=true\n      [nouveau]\n      enable = true\n      url = http://nouveau:5987\n```\n\n----------------------------------------\n\nTITLE: Verifying Document Fields for Faceted Search in JavaScript\nDESCRIPTION: Example showing how to verify that required fields exist in documents before indexing them for faceted search. This checks if both 'town' and 'name' fields are strings.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/ddocs/nouveau.rst#2025-04-21_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nif (typeof doc.town == \"string\" && typeof doc.name == \"string\") {\n    index(\"string\", \"town\", doc.town);\n    index(\"string\", \"name\", doc.name);\n   }\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Documents from CouchDB Database using GET\nDESCRIPTION: Sends a GET request to /{db}/_all_docs to retrieve all documents from a CouchDB database. The response includes document IDs, revision numbers, and other metadata.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/database/bulk-api.rst#2025-04-21_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nGET /db/_all_docs HTTP/1.1\nAccept: application/json\nHost: localhost:5984\n```\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200 OK\nCache-Control: must-revalidate\nContent-Type: application/json\nDate: Sat, 10 Aug 2013 16:22:56 GMT\nETag: \"1W2DJUZFZSZD9K78UFA3GZWB4\"\nServer: CouchDB (Erlang/OTP)\nTransfer-Encoding: chunked\n\n{\n    \"offset\": 0,\n    \"rows\": [\n        {\n            \"id\": \"16e458537602f5ef2a710089dffd9453\",\n            \"key\": \"16e458537602f5ef2a710089dffd9453\",\n            \"value\": {\n                \"rev\": \"1-967a00dff5e02add41819138abb3284d\"\n            }\n        },\n        {\n            \"id\": \"a4c51cdfa2069f3e905c431114001aff\",\n            \"key\": \"a4c51cdfa2069f3e905c431114001aff\",\n            \"value\": {\n                \"rev\": \"1-967a00dff5e02add41819138abb3284d\"\n            }\n        },\n        {\n            \"id\": \"a4c51cdfa2069f3e905c4311140034aa\",\n            \"key\": \"a4c51cdfa2069f3e905c4311140034aa\",\n            \"value\": {\n                \"rev\": \"5-6182c9c954200ab5e3c6bd5e76a1549f\"\n            }\n        },\n        {\n            \"id\": \"a4c51cdfa2069f3e905c431114003597\",\n            \"key\": \"a4c51cdfa2069f3e905c431114003597\",\n            \"value\": {\n                \"rev\": \"2-7051cbe5c8faecd085a3fa619e6e6337\"\n            }\n        },\n        {\n            \"id\": \"f4ca7773ddea715afebc4b4b15d4f0b3\",\n            \"key\": \"f4ca7773ddea715afebc4b4b15d4f0b3\",\n            \"value\": {\n                \"rev\": \"2-7051cbe5c8faecd085a3fa619e6e6337\"\n            }\n        }\n    ],\n    \"total_rows\": 5\n}\n```\n\n----------------------------------------\n\nTITLE: GET Request for CouchDB Document\nDESCRIPTION: Example of a GET request to retrieve a full document from CouchDB with JSON content.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/document/common.rst#2025-04-21_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nGET /recipes/SpaghettiWithMeatballs HTTP/1.1\nAccept: application/json\nHost: localhost:5984\n```\n\n----------------------------------------\n\nTITLE: Getting Target Database Information with GET in CouchDB\nDESCRIPTION: This snippet illustrates a GET request to retrieve information about the target database. Similar to the source database, the response includes details like `update_seq`, `instance_start_time`, `doc_count`, and `sizes`. The `update_seq` is used for setting a temporary upper bound for the replication changes feed.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/replication/protocol.rst#2025-04-21_snippet_7\n\nLANGUAGE: http\nCODE:\n```\nGET /target/ HTTP/1.1\nAccept: application/json\nHost: localhost:5984\nUser-Agent: CouchDB\n```\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200 OK\nContent-Length: 363\nContent-Type: application/json\nDate: Tue, 08 Oct 2013 12:37:01 GMT\nServer: CouchDB (Erlang/OTP)\n\n{\n    \"compact_running\": false,\n    \"db_name\": \"target\",\n    \"disk_format_version\": 5,\n    \"doc_count\": 1832,\n    \"doc_del_count\": 1,\n    \"instance_start_time\": \"0\",\n    \"purge_seq\": 0,\n    \"sizes\": {\n      \"active\": 50829452,\n      \"disk\": 77001455,\n      \"external\": 60326450\n    },\n    \"update_seq\": \"1841-g1AAAADveJzLYWBgYMlgTmGQT0lKzi9KdUhJMtbLSs1LLUst0k\"\n}\n```\n\n----------------------------------------\n\nTITLE: Bulk Document Retrieval Request in CouchDB\nDESCRIPTION: HTTP request for retrieving multiple documents from a CouchDB database using the _bulk_get endpoint, with multiple document IDs in the request payload\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/database/bulk-api.rst#2025-04-21_snippet_10\n\nLANGUAGE: http\nCODE:\n```\nPOST /db/_bulk_get HTTP/1.1\nAccept: application/json\nContent-Type:application/json\nHost: localhost:5984\n\n{\n    \"docs\": [\n        {\n            \"id\": \"foo\"\n        },\n        {\n            \"id\": \"foo\"\n        },\n        {\n            \"id\": \"bar\"}\n        {\n            \"id\": \"baz\"\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Querying a Partitioned Index in CouchDB Nouveau Search (Shell)\nDESCRIPTION: Example of using curl to query a partitioned index in CouchDB Nouveau search. It demonstrates how to construct the URL and include query parameters from the command line.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/ddocs/nouveau.rst#2025-04-21_snippet_13\n\nLANGUAGE: sh\nCODE:\n```\ncurl https://$HOST:5984/$DATABASE/_partition/$PARTITION_KEY/_design/$DDOC/\n_nouveau/$INDEX_NAME?include_docs=true\\&q=*:*\\&limit=1 \\\n```\n\n----------------------------------------\n\nTITLE: Additional CouchDB HTTP Server Options\nDESCRIPTION: Various other HTTP server configurations including JSONP support, CORS, secure rewrites, and request size limits.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/config/http.rst#2025-04-21_snippet_4\n\nLANGUAGE: ini\nCODE:\n```\n[chttpd]\nallow_jsonp = false\nchanges_timeout = 60000\nenable_cors = false\nsecure_rewrites = true\nmax_http_request_size = 4294967296\nbulk_get_use_batches = true\nadmin_only_all_dbs = true\n```\n\n----------------------------------------\n\nTITLE: Configuring Clouseau Service for CouchDB Search\nDESCRIPTION: Configuration file for the Clouseau search service specifying node name, cookie, index storage location, and maximum open indexes.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/install/search.rst#2025-04-21_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[clouseau]\n\n; the name of the Erlang node created by the service, leave this unchanged\nname=clouseau@127.0.0.1\n\n; set this to the same distributed Erlang cookie used by the CouchDB nodes\ncookie=brumbrum\n\n; the path where you would like to store the search index files\ndir=/path/to/index/storage\n\n; the number of search indexes that can be open simultaneously\nmax_indexes_open=500\n```\n\n----------------------------------------\n\nTITLE: POST Changes Feed with Selector Filter\nDESCRIPTION: Example of filtering changes feed using a selector query\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/database/changes.rst#2025-04-21_snippet_3\n\nLANGUAGE: http\nCODE:\n```\nPOST /db/_changes?filter=_selector HTTP/1.1\nAccept: application/json\nAccept-Encoding: gzip, deflate\nContent-Length: 25\nContent-Type: application/json\nHost: 127.0.0.1:5984\n\n{\n    \"selector\": {\n        \"data\": 1\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying CouchDB View with key and keys parameters (Bash)\nDESCRIPTION: This section provides several curl commands demonstrating how to query a CouchDB view using the `key` and `keys` parameters.  It also illustrates the behavior and errors that occur when using `keys` with reduce views and when `keys` is used with `group=true` without the correct `keys` usage.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/ddoc/views.rst#2025-04-21_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n\"$ curl http://adm:pass@127.0.0.1:5984/db/_design/ddoc/_view/reduce'?key=\\\"a\\\"'\n{\\\"rows\\\":[{\\\"key\\\":null,\\\"value\\\":1}]}\n\n$ curl http://adm:pass@127.0.0.1:5984/db/_design/ddoc/_view/reduce'?keys=\"[\\\"a\\\"]\"'\n{\\\"rows\\\":[{\\\"key\\\":null,\\\"value\\\":1}]}\n\n$ curl http://adm:pass@127.0.0.1:5984/db/_design/ddoc/_view/reduce'?keys=\\[\\\"a\\\",\\\"b\\\\]'\n{\\\"error\\\":\\\"query_parse_error\\\",\\\"reason\\\":\\\"Multi-key fetches for reduce views must use `group=true`\\\"}\n\n$ curl http://adm:pass@127.0.0.1:5984/db/_design/ddoc/_view/reduce'?keys=\\[\\\"a\\\",\\\"c\\\\]&group=true'\n{\\\"rows\\\":[{\\\"key\\\":\\\"a\\\",\\\"value\\\":1},{\\\"key\\\":\\\"c\\\",\\\"value\\\":3}]}\"\n```\n\n----------------------------------------\n\nTITLE: Creating and Querying Partitioned View in CouchDB\nDESCRIPTION: Example of creating a design document for sensor readings and querying it using curl commands. Shows the document structure and response format for partitioned queries.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/partitioned-dbs/index.rst#2025-04-21_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nshell> cat ddoc.json\n{\n    \"_id\": \"_design/sensor-readings\",\n    \"views\": {\n        \"by_sensor\": {\n            \"map\": \"function(doc) { ... }\"\n        }\n    }\n}\nshell> $ curl -X POST -H \"Content-Type: application/json\" http://adm:pass@127.0.0.1:5984/my_new_db -d @ddoc.json\n{\n    \"ok\": true,\n    \"id\": \"_design/sensor-readings\",\n    \"rev\": \"1-13859808da293bd72fde3b31be97372a\"\n}\nshell> curl http://adm:pass@127.0.0.1:5984/my_new_db/_partition/sensor-260/_design/sensor-readings/_view/by_sensor\n{\"total_rows\":4,\"offset\":0,\"rows\":[\n{\"id\":\"sensor-260:sensor-reading-ca33c748-2d2c-4ed1-8abf-1bca4d9d03cf\",\"key\":[\"sensor-260\",\"0\"],\"value\":null},\n{\"id\":\"sensor-260:sensor-reading-ca33c748-2d2c-4ed1-8abf-1bca4d9d03cf\",\"key\":[\"sensor-260\",\"1\"],\"value\":null},\n{\"id\":\"sensor-260:sensor-reading-ca33c748-2d2c-4ed1-8abf-1bca4d9d03cf\",\"key\":[\"sensor-260\",\"2\"],\"value\":null},\n{\"id\":\"sensor-260:sensor-reading-ca33c748-2d2c-4ed1-8abf-1bca4d9d03cf\",\"key\":[\"sensor-260\",\"3\"],\"value\":null}\n]}\n```\n\n----------------------------------------\n\nTITLE: Creating a CommonJS module in CouchDB\nDESCRIPTION: This code snippet defines a CommonJS module that checks user permissions within CouchDB.  It exports a function `user_context` which returns an object containing a function `is_admin`. This illustrates how to create reusable modules within CouchDB design documents.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/query-server/javascript.rst#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n \"function user_context(userctx, secobj) {\n        var is_admin = function() {\n            return userctx.indexOf('_admin') != -1;\n        }\n        return {'is_admin': is_admin}\n    }\n\n    exports['user'] = user_context\"\n```\n\n----------------------------------------\n\nTITLE: Querying Multiple Design Documents in CouchDB\nDESCRIPTION: This snippet demonstrates how to query multiple design documents using the /{db}/_design_docs/queries endpoint. It allows specifying keys for the desired design documents and combines them with other query parameters.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/database/bulk-api.rst#2025-04-21_snippet_7\n\nLANGUAGE: http\nCODE:\n```\nPOST /db/_design_docs/queries HTTP/1.1\nContent-Type: application/json\nAccept: application/json\nHost: localhost:5984\n\n{\n    \"queries\": [\n        {\n            \"keys\": [\n                \"_design/recipe\",\n                \"_design/not-exist\",\n                \"spaghetti\"\n            ]\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Response from List Function with Another Design Document's View in CouchDB\nDESCRIPTION: HTTP response from a list function execution using a view from another design document, returning filtered results.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/ddoc/render.rst#2025-04-21_snippet_9\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200 OK\nContent-Type: text/plain; charset=utf-8\nDate: Wed, 21 Aug 2013 12:49:15 GMT\nEtag: \"5L0975X493R0FB5Z3043POZHD\"\nServer: CouchDB (Erlang/OTP)\nTransfer-Encoding: chunked\nVary: Accept\n\nspaghetti\n```\n\n----------------------------------------\n\nTITLE: Extracting rows from related view results in CouchDB list function\nDESCRIPTION: This code snippet illustrates how to use the `getRow` function within a CouchDB list function to extract rows from a related view result. It constructs a JSON array containing the view results.  The `toJSON` function is used to serialize each row into a JSON string.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/query-server/javascript.rst#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n \"function(head, req){\n            send('[');\n            row = getRow();\n            if (row){\n                send(toJSON(row));\n                while(row = getRow()){\n                    send(',');\n                    send(toJSON(row));\n                }\n            }\n            return ']';\n        }\"\n```\n\n----------------------------------------\n\nTITLE: Creating Target Database with PUT in CouchDB\nDESCRIPTION: This snippet shows a PUT request to create a target database. A successful creation returns a 201 Created status with a JSON response indicating success, while insufficient privileges can result in 401 or 403 errors.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/replication/protocol.rst#2025-04-21_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nPUT /target HTTP/1.1\nAccept: application/json\nHost: localhost:5984\nUser-Agent: CouchDB\n```\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 201 Created\nContent-Length: 12\nContent-Type: application/json\nDate: Sat, 05 Oct 2013 08:58:41 GMT\nServer: CouchDB (Erlang/OTP)\n\n{\n    \"ok\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Socket Options for Improved TCP Performance\nDESCRIPTION: Adjust this configuration to enable TCP socket options to prevent delays in data transmission by changing the nodelay setting. This can optimize application performance for small document writes.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/maintenance/performance.rst#2025-04-21_snippet_3\n\nLANGUAGE: ini\nCODE:\n```\n[httpd]\nsocket_options = [{nodelay, true}]\n```\n\n----------------------------------------\n\nTITLE: Implementing Show Function in JavaScript for CouchDB\nDESCRIPTION: A simple show function that returns different content based on whether a document exists. If no document is provided, it returns 'no doc', otherwise it returns the document's description field.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/ddoc/render.rst#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction(doc, req) {\n    if (!doc) {\n        return {body: \"no doc\"}\n    } else {\n        return {body: doc.description}\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Erlang Ports in vm.args for CouchDB\nDESCRIPTION: This code snippet demonstrates how to configure the Erlang port range in the `vm.args` file. This is crucial for allowing communication between nodes in a CouchDB cluster, particularly when firewalls are involved. It sets the minimum and maximum ports that Erlang can use for inter-node communication. The dependencies include write access to the `vm.args` file.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/setup/cluster.rst#2025-04-21_snippet_0\n\nLANGUAGE: erlang\nCODE:\n```\n\"-name ...\n-setcookie ...\n...\n-kernel inet_dist_listen_min 9100\n-kernel inet_dist_listen_max 9200\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Deleted Document's Tombstone in CouchDB via HTTP\nDESCRIPTION: Demonstrates how to retrieve a tombstone of a deleted document by specifying its revision ID. The response includes minimal information with a _deleted flag set to true.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/document/common.rst#2025-04-21_snippet_16\n\nLANGUAGE: http\nCODE:\n```\nGET /recipes/FishStew?rev=2-056f5f44046ecafc08a2bc2b9c229e20  HTTP/1.1\nAccept: application/json\nHost: localhost:5984\n```\n\n----------------------------------------\n\nTITLE: Compacting Design Document Views via HTTP POST\nDESCRIPTION: This request compacts the view indexes associated with a specific design document. It's useful when specific view indexes have been affected by database changes and need optimization.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/database/compact.rst#2025-04-21_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nPOST /db/_compact/ddoc HTTP/1.1\nAccept: application/json\nContent-Type: application/json\nHost: localhost:5984\n```\n\n----------------------------------------\n\nTITLE: Enabling Nouveau Server Integration in CouchDB\nDESCRIPTION: Configuration settings to enable the new Apache Lucene integration (Nouveau Server) in CouchDB. Requires running the Java service separately.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/experimental.rst#2025-04-21_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[nouveau]\nenable = true\n```\n\n----------------------------------------\n\nTITLE: Basic Show Function in JavaScript\nDESCRIPTION: This JavaScript code defines a basic show function in CouchDB. It returns a personalized greeting based on the document's existence. The function takes a document (doc) and a request object (req) as input, and returns a simple string as output.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/ddocs/ddocs.rst#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n\"function(doc, req){\n    if (doc) {\n        return \\\"Hello from \\\" + doc._id + \\\"!\\\";\n    } else {\n        return \\\"Hello, world!\\\";\n    }\n}\"\n```\n\n----------------------------------------\n\nTITLE: Using $and operator with CouchDB\nDESCRIPTION: This snippet demonstrates the use of the ``$and`` operator in a CouchDB query. The query selects documents where both conditions (title is \"Total Recall\" and year is either 1984 or 1991) are met.  It specifies which fields to return in the result.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/ddocs/mango.rst#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"selector\": {\n    \"$and\": [\n      {\n        \"title\": \"Total Recall\"\n      },\n      {\n        \"year\": {\n          \"$in\": [1984, 1991]\n        }\n      }\n    ]\n  },\n  \"fields\": [\n      \"year\",\n      \"title\",\n      \"cast\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Nouveau Index Function Examples\nDESCRIPTION: This table showcases various index function arguments and their effects in Nouveau, including indexing text, strings, doubles, and stored values.\nSOURCE: https://github.com/apache/couchdb/blob/main/nouveau/README.md#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\nindex(\"text\", \"foo\", \"bar\", {\"store\": true});\nindex(\"string\", \"foo\", \"bar\", {\"store\": true});\nindex(\"double\", \"foo\", 12.0, {\"store\": true});\nindex(\"stored\", \"foo\", \"bar\");\nindex(\"stored\", \"foo\", 12.0);\n```\n\n----------------------------------------\n\nTITLE: JSON Response Data Structure\nDESCRIPTION: Example JSON response showing the structure of replication document information including status, progress metrics, and configuration details.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/server/common.rst#2025-04-21_snippet_24\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"docs\": [\n        {\n            \"database\": \"_replicator\",\n            \"doc_id\": \"cdyno-0000001-0000002\",\n            \"error_count\": 0,\n            \"id\": \"e327d79214831ca4c11550b4a453c9ba+continuous\",\n            \"info\": {\n                \"changes_pending\": 15,\n                \"checkpointed_source_seq\": \"60-g1AAAACTeJzLYWBgYMpgTmHgz8tPSTV0MDQy1zMAQsMckEQiQ1L9____szKYEyVygQLsBsZm5pZJJpjKcRqRxwIkGRqA1H-oSSpgk4yMkhITjS0wdWUBAENCJEg\",\n                \"doc_write_failures\": 0,\n                \"docs_read\": 67,\n                \"bulk_get_attempts\": 67,\n                \"bulk_get_docs\": 67,\n                \"docs_written\": 67,\n                \"missing_revisions_found\": 67,\n                \"revisions_checked\": 67,\n                \"source_seq\": \"67-g1AAAACTeJzLYWBgYMpgTmHgz8tPSTV0MDQy1zMAQsMckEQiQ1L9____szKYE2VygQLsBsZm5pZJJpjKcRqRxwIkGRqA1H-oSepgk4yMkhITjS0wdWUBAEVKJE8\",\n                \"through_seq\": \"67-g1AAAACTeJzLYWBgYMpgTmHgz8tPSTV0MDQy1zMAQsMckEQiQ1L9____szKYE2VygQLsBsZm5pZJJpjKcRqRxwIkGRqA1H-oSepgk4yMkhITjS0wdWUBAEVKJE8\"\n            },\n            \"last_updated\": \"2017-04-29T05:01:37Z\",\n            \"node\": \"node2@127.0.0.1\",\n            \"source_proxy\": null,\n            \"target_proxy\": null,\n            \"source\": \"http://myserver.com/foo\",\n            \"start_time\": \"2017-04-29T05:01:37Z\",\n            \"state\": \"running\",\n            \"target\": \"http://adm:*****@localhost:15984/cdyno-0000002/\"\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Compacting a CouchDB Database via HTTP POST\nDESCRIPTION: This request initiates compaction of a CouchDB database to optimize storage by removing unused sections and old revisions. The process runs in the background and requires administrator privileges.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/database/compact.rst#2025-04-21_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST /db/_compact HTTP/1.1\nAccept: application/json\nContent-Type: application/json\nHost: localhost:5984\n```\n\n----------------------------------------\n\nTITLE: Setting Admin Roles in CouchDB Database Security (Bash/cURL)\nDESCRIPTION: This cURL command updates the security document to add an admin role 'mydatabase_admin'. It demonstrates how to assign admin privileges based on roles rather than individual usernames, which is more manageable for larger systems.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/intro/security.rst#2025-04-21_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X PUT http://localhost:5984/mydatabase/_security \\\n     -u anna:secret \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\"admins\": { \"names\": [], \"roles\": [\"mydatabase_admin\"] }, \"members\": { \"names\": [], \"roles\": [] } }'\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Authentication in CouchDB Replication Using Headers\nDESCRIPTION: Example of specifying credentials in a replication request using the Authorization header with Base64 encoded username and password. This method requires the additional step of Base64 encoding credentials.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/replication/replicator.rst#2025-04-21_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"target\": {\n        \"url\": \"http://someurl.com/mydb\",\n            \"headers\": {\n                \"Authorization\": \"Basic dXNlcjpwYXNz\"\n            }\n        },\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Response from /_dbs_info Request\nDESCRIPTION: Response showing database information including sizes, document counts, cluster configuration and other metadata for multiple databases.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/server/common.rst#2025-04-21_snippet_5\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200 OK\nCache-Control: must-revalidate\nContent-Type: application/json\nDate: Sat, 20 Dec 2017 06:57:48 GMT\nServer: CouchDB (Erlang/OTP)\n\n[\n  {\n    \"key\": \"animals\",\n    \"info\": {\n      \"db_name\": \"animals\",\n      \"update_seq\": \"52232\",\n      \"sizes\": {\n        \"file\": 1178613587,\n        \"external\": 1713103872,\n        \"active\": 1162451555\n      },\n      \"purge_seq\": 0,\n      \"doc_del_count\": 0,\n      \"doc_count\": 52224,\n      \"disk_format_version\": 6,\n      \"compact_running\": false,\n      \"cluster\": {\n        \"q\": 8,\n        \"n\": 3,\n        \"w\": 2,\n        \"r\": 2\n      },\n      \"instance_start_time\": \"0\"\n    }\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Changing Database Channels Configuration Across Cluster in Erlang\nDESCRIPTION: This snippet shows how to change the set of database channels for Smoosh on all live nodes in the cluster using rpc:multicall in Erlang. It sets the 'db_channels' option to a comma-separated list of channel names.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/smoosh/README.md#2025-04-21_snippet_1\n\nLANGUAGE: erlang\nCODE:\n```\nrpc:multicall(config, set, [\"smoosh\", \"db_channels\", \"small_dbs,medium_dbs,large_dbs\"]).\n```\n\n----------------------------------------\n\nTITLE: Querying Multiple Design Documents in CouchDB using POST\nDESCRIPTION: This snippet demonstrates how to query multiple design documents using a POST request to the /{db}/_design_docs endpoint. It allows specifying keys for the desired design documents in the request body.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/database/bulk-api.rst#2025-04-21_snippet_3\n\nLANGUAGE: http\nCODE:\n```\nPOST /db/_design_docs HTTP/1.1\nAccept: application/json\nContent-Length: 70\nContent-Type: application/json\nHost: localhost:5984\n\n{\n    \"keys\" : [\n        \"_design/ddoc02\",\n        \"_design/ddoc05\"\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Uploading File Attachment to CouchDB\nDESCRIPTION: Creates a new document with file attachment using curl PUT request and octet-stream content type\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/document/attachments.rst#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nshell> curl -X PUT http://adm:pass@127.0.0.1:5984/test/doc/file.txt \\\n                -H \"Content-Type: application/octet-stream\" -d@file.txt\n{\"ok\":true,\"id\":\"doc\",\"rev\":\"1-287a28fa680ae0c7fb4729bf0c6e0cf2\"}\n```\n\n----------------------------------------\n\nTITLE: CouchDB Server Information Query\nDESCRIPTION: Basic server information response showing CouchDB version, features, and vendor details. Used for health checks and version verification.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/intro/api.rst#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"couchdb\": \"Welcome\",\n  \"version\": \"3.0.0\",\n  \"git_sha\": \"83bdcf693\",\n  \"uuid\": \"56f16e7c93ff4a2dc20eb6acc7000b71\",\n  \"features\": [\n    \"access-ready\",\n    \"partitioned\",\n    \"pluggable-storage-engines\",\n    \"reshard\",\n    \"scheduler\"\n  ],\n  \"vendor\": {\n    \"name\": \"The Apache Software Foundation\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Basic List Function in CouchDB JavaScript\nDESCRIPTION: This snippet shows a basic list function that generates an HTML table from view results. It demonstrates using the start(), send(), and getRow() functions to output formatted data.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/ddocs/ddocs.rst#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nfunction(head, req) {\n    start({\n        'headers': {\n            'Content-Type': 'text/html'\n        }\n    });\n    send('<html><body><table>');\n    send('<tr><th>ID</th><th>Key</th><th>Value</th></tr>');\n    while (row = getRow()) {\n        send((\n            '<tr>',\n            '<td>' + toJSON(row.id) + '</td>',\n            '<td>' + toJSON(row.key) + '</td>',\n            '<td>' + toJSON(row.value) + '</td>',\n            '</tr>'\n        ));\n    }\n    send('</table></body></html>');\n}\n```\n\n----------------------------------------\n\nTITLE: Continuous Changes Feed Response Example\nDESCRIPTION: Example response from a continuous changes feed showing document updates and deletions\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/database/changes.rst#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n{\"seq\":\"1-g1AAAAF9eJzLYWBg4MhgTmHgz8tPSTV0MDQy1zMAQsMcoARTIkOS_P___7MSGXAqSVIAkkn2IFUZzIkMuUAee5pRqnGiuXkKA2dpXkpqWmZeagpu_Q4g_fGEbEkAqaqH2sIItsXAyMjM2NgUUwdOU_JYgCRDA5ACGjQfn30QlQsgKvcTVnkAovI-YZUPICpBvs0CAN1eY_c\",\"id\":\"fresh\",\"changes\":[{\"rev\":\"5-g1AAAAHxeJzLYWBg4MhgTmHgz8tPSTV0MDQy1zMAQsMcoARTIkOS_P___7MymBOZcoEC7MmJKSmJqWaYynEakaQAJJPsoaYwgE1JM0o1TjQ3T2HgLM1LSU3LzEtNwa3fAaQ_HkV_kkGyZWqSEXH6E0D666H6GcH6DYyMzIyNTUnwRR4LkGRoAFJAg-YjwiMtOdXCwJyU8ICYtABi0n6EnwzSzIxS00yI8hPEjAMQM-5nJTIQUPkAovI_UGUWAA0SgOI\",\"id\":\"updated\",\"changes\":[{\"rev\":\"2-7051cbe5c8faecd085a3fa619e6e6337\"}]}\n```\n\n----------------------------------------\n\nTITLE: Adding Node to CouchDB Cluster\nDESCRIPTION: Demonstrates how to add a new node to the CouchDB cluster using the _nodes endpoint.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/cluster/nodes.rst#2025-04-21_snippet_1\n\nLANGUAGE: text\nCODE:\n```\ncurl -X PUT \"http://xxx.xxx.xxx.xxx/_node/_local/_nodes/node2@yyy.yyy.yyy.yyy\" -d {}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"all_nodes\":[\n        \"node1@xxx.xxx.xxx.xxx\",\n        \"node2@yyy.yyy.yyy.yyy\"\n    ],\n    \"cluster_nodes\":[\n        \"node1@xxx.xxx.xxx.xxx\",\n        \"node2@yyy.yyy.yyy.yyy\"\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Document in CouchDB using Batch Mode\nDESCRIPTION: This snippet illustrates how to use batch mode for writing documents to CouchDB. It shows the HTTP request with the 'batch=ok' query parameter and the immediate response with a 202 Accepted status, indicating that the write operation is queued.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/database/common.rst#2025-04-21_snippet_13\n\nLANGUAGE: http\nCODE:\n```\nPOST /db?batch=ok HTTP/1.1\nAccept: application/json\nContent-Length: 98\nContent-Type: application/json\n\n{\n    \"_id\": \"FishStew\",\n    \"servings\": 4,\n    \"subtitle\": \"Delicious with fresh bread\",\n    \"title\": \"Fish Stew\"\n}\n```\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 202 Accepted\nCache-Control: must-revalidate\nContent-Length: 28\nContent-Type: application/json\nDate: Tue, 13 Aug 2013 15:19:25 GMT\nLocation: http://localhost:5984/db/FishStew\nServer: CouchDB (Erlang/OTP)\n\n{\n    \"id\": \"FishStew\",\n    \"ok\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Source Existence using HTTP HEAD\nDESCRIPTION: This snippet shows the HTTP request and response for checking the existence of the source database. The Replicator MUST ensure that the Source exists by using :head:`/{db}` requests. It uses a `HEAD` request to the `/source` endpoint to check for the existence of the source database.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/replication/protocol.rst#2025-04-21_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nHEAD /source HTTP/1.1\nHost: localhost:5984\nUser-Agent: CouchDB\n```\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200 OK\nCache-Control: must-revalidate\nContent-Type: application/json\nDate: Sat, 05 Oct 2013 08:50:39 GMT\nServer: CouchDB (Erlang/OTP)\n```\n\n----------------------------------------\n\nTITLE: GET Database Security Object Response\nDESCRIPTION: HTTP response containing the security object with defined admins and members, including their names and roles.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/database/security.rst#2025-04-21_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200 OK\nCache-Control: must-revalidate\nContent-Length: 109\nContent-Type: application/json\nDate: Mon, 12 Aug 2013 19:05:29 GMT\nServer: CouchDB (Erlang/OTP)\n\n{\n    \"admins\": {\n        \"names\": [\n            \"superuser\"\n        ],\n        \"roles\": [\n            \"admins\"\n        ]\n    },\n    \"members\": {\n        \"names\": [\n            \"user1\",\n            \"user2\"\n        ],\n        \"roles\": [\n            \"developers\"\n        ]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using $text operator in CouchDB\nDESCRIPTION: This snippet demonstrates the use of the ``$text`` operator in a CouchDB query. The query selects documents using a text search index and searches for documents where the text field contains \"director:George\".  Requires that a text index or nouveau index is present.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/ddocs/mango.rst#2025-04-21_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"_id\": { \"$gt\": null },\n    \"$text\": \"director:George\"\n}\n```\n\n----------------------------------------\n\nTITLE: EventSource Changes Feed Implementation\nDESCRIPTION: Example JavaScript code showing how to consume the EventSource changes feed in a browser\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/database/changes.rst#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nif (window.EventSource) {\n\n    var source = new EventSource(\"/somedatabase/_changes?feed=eventsource\");\n    source.onerror = function(e) {\n        alert('EventSource failed.');\n    };\n\n    var results = [];\n    var sourceListener = function(e) {\n        var data = JSON.parse(e.data);\n        results.push(data);\n    };\n\n    // start listening for events\n    source.addEventListener('message', sourceListener, false);\n\n    // stop listening for events\n    source.removeEventListener('message', sourceListener, false);\n\n}\n```\n\n----------------------------------------\n\nTITLE: Sorting View Results Request in CouchDB\nDESCRIPTION: HTTP GET request to retrieve sorted view results from CouchDB with response showing default UTF-8 sorting order\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/ddoc/views.rst#2025-04-21_snippet_5\n\nLANGUAGE: http\nCODE:\n```\nGET /db/_design/test/_view/sorting HTTP/1.1\nAccept: application/json\nHost: localhost:5984\n```\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200 OK\nCache-Control: must-revalidate\nContent-Type: application/json\nDate: Wed, 21 Aug 2013 10:09:25 GMT\nETag: \"8LA1LZPQ37B6R9U8BK9BGQH27\"\nServer: CouchDB (Erlang/OTP)\nTransfer-Encoding: chunked\n\n{\n    \"offset\": 0,\n    \"rows\": [\n        {\n            \"id\": \"dummy-doc\",\n            \"key\": null,\n            \"value\": null\n        },\n        {\n            \"id\": \"dummy-doc\",\n            \"key\": false,\n            \"value\": null\n        },\n        {\n            \"id\": \"dummy-doc\",\n            \"key\": true,\n            \"value\": null\n        },\n        {\n            \"id\": \"dummy-doc\",\n            \"key\": 0,\n            \"value\": null\n        },\n        {\n            \"id\": \"dummy-doc\",\n            \"key\": 1,\n            \"value\": null\n        },\n        {\n            \"id\": \"dummy-doc\",\n            \"key\": 10,\n            \"value\": null\n        },\n        {\n            \"id\": \"dummy-doc\",\n            \"key\": 42,\n            \"value\": null\n        },\n        {\n            \"id\": \"dummy-doc\",\n            \"key\": \"10\",\n            \"value\": null\n        },\n        {\n            \"id\": \"dummy-doc\",\n            \"key\": \"hello\",\n            \"value\": null\n        },\n        {\n            \"id\": \"dummy-doc\",\n            \"key\": \"Hello\",\n            \"value\": null\n        },\n        {\n            \"id\": \"dummy-doc\",\n            \"key\": \"\\u043f\\u0440\\u0438\\u0432\\u0435\\u0442\",\n            \"value\": null\n        },\n        {\n            \"id\": \"dummy-doc\",\n            \"key\": [],\n            \"value\": null\n        },\n        {\n            \"id\": \"dummy-doc\",\n            \"key\": [\n                1,\n                2,\n                3\n            ],\n            \"value\": null\n        },\n        {\n            \"id\": \"dummy-doc\",\n            \"key\": [\n                2,\n                3\n            ],\n            \"value\": null\n        },\n        {\n            \"id\": \"dummy-doc\",\n            \"key\": [\n                3\n            ],\n            \"value\": null\n        },\n        {\n            \"id\": \"dummy-doc\",\n            \"key\": {},\n            \"value\": null\n        },\n        {\n            \"id\": \"dummy-doc\",\n            \"key\": {\n                \"foo\": \"bar\"\n            },\n            \"value\": null\n        }\n    ],\n    \"total_rows\": 17\n}\n```\n\n----------------------------------------\n\nTITLE: Successful Response to Database Compaction Request in CouchDB\nDESCRIPTION: This snippet shows the HTTP response for a successful database compaction request. It returns a 202 Accepted status code and a JSON response indicating success.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/maintenance/compaction.rst#2025-04-21_snippet_4\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 202 Accepted\nCache-Control: must-revalidate\nContent-Length: 12\nContent-Type: text/plain; charset=utf-8\nDate: Wed, 19 Jun 2013 09:43:52 GMT\nServer: CouchDB (Erlang/OTP)\n```\n\nLANGUAGE: javascript\nCODE:\n```\n{\"ok\":true}\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Document from CouchDB by ID\nDESCRIPTION: Example of using cURL to retrieve a document by its ID from a CouchDB database. The response shows the document with its metadata including ID and revision number.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/intro/curl.rst#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nshell> curl -X GET http://adm:pass@127.0.0.1:5984/demo/8843faaf0b831d364278331bc3001bd8\n{\"_id\":\"8843faaf0b831d364278331bc3001bd8\",\n \"_rev\":\"1-33b9fbce46930280dab37d672bbc8bb9\",\n \"company\":\"Example, Inc.\"}\n```\n\n----------------------------------------\n\nTITLE: Querying a Global Index in CouchDB Nouveau Search (HTTP)\nDESCRIPTION: Example of using HTTP GET to query a global index in CouchDB Nouveau search. It shows how to construct the URL and include query parameters.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/ddocs/nouveau.rst#2025-04-21_snippet_12\n\nLANGUAGE: http\nCODE:\n```\nGET /$DATABASE/_design/$DDOC/_nouveau/$INDEX_NAME?include_docs=true&q=*:*&limit=1 HTTP/1.1\nContent-Type: application/json\n```\n\n----------------------------------------\n\nTITLE: Sample Response for Jobs Retrieval - HTTP\nDESCRIPTION: This snippet provides an example response structure when successfully retrieving replication job information from CouchDB. It includes details about the jobs, their status, and associated metadata.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/server/common.rst#2025-04-21_snippet_21\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200 OK\nCache-Control: must-revalidate\nContent-Length: 1690\nContent-Type: application/json\nDate: Sat, 29 Apr 2017 05:05:16 GMT\nServer: CouchDB (Erlang/OTP)\n\n{\n    \"jobs\": [\n        {\n            \"id\": \"some-id\",\n            \"database\": \"some-database\",\n            \"doc_id\": \"some-doc-id\",\n            \"history\": [],\n            \"pid\": \"some-pid\",\n            \"node\": \"some-node\",\n            \"source\": \"source-db\",\n            \"target\": \"target-db\",\n            \"start_time\": \"start-time\"\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Analyzing Nouveau Search Text in CouchDB HTTP API\nDESCRIPTION: Makes a POST request to the /_nouveau_analyze endpoint to test Lucene analyzer tokenization on sample text. Requires a running nouveau server. Returns a JSON object with tokenized results.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/server/common.rst#2025-04-21_snippet_36\n\nLANGUAGE: http\nCODE:\n```\nPOST /_nouveau_analyze HTTP/1.1\nHost: localhost:5984\nContent-Type: application/json\n\n{\"analyzer\":\"english\", \"text\":\"running\"}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"tokens\": [\n        \"run\"\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Prometheus Bind Address in CouchDB\nDESCRIPTION: Configures the IP address that the Prometheus endpoint will bind to. This option was introduced in CouchDB 3.2.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/config/misc.rst#2025-04-21_snippet_11\n\nLANGUAGE: ini\nCODE:\n```\n[prometheus]\nbind_address = 127.0.0.1\n```\n\n----------------------------------------\n\nTITLE: DELETE Request for Document Attachment in CouchDB\nDESCRIPTION: HTTP DELETE request to remove an attachment from a document. Requires document revision parameter or If-Match header for concurrency control.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/document/attachments.rst#2025-04-21_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nDELETE /recipes/SpaghettiWithMeatballs?rev=6-440b2dd39c20413045748b42c6aba6e2 HTTP/1.1\nAccept: application/json\nHost: localhost:5984\n```\n\nLANGUAGE: http\nCODE:\n```\nDELETE /recipes/SpaghettiWithMeatballs HTTP/1.1\nAccept: application/json\nIf-Match: 6-440b2dd39c20413045748b42c6aba6e2\nHost: localhost:5984\n```\n\n----------------------------------------\n\nTITLE: Setting Mango Default Query Limit in CouchDB\nDESCRIPTION: Configuration for setting the default number of results returned in Mango _find queries.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/config/query-servers.rst#2025-04-21_snippet_4\n\nLANGUAGE: ini\nCODE:\n```\n[mango]\ndefault_limit = 25\n```\n\n----------------------------------------\n\nTITLE: Configuring Server Administrators in CouchDB INI File\nDESCRIPTION: Example of how to define server administrators in the CouchDB configuration file. Passwords can be stored in plaintext or hashed formats.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/config/auth.rst#2025-04-21_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[admins]\n;admin = mysecretpassword\nadmin = -hashed-6d3c30241ba0aaa4e16c6ea99224f915687ed8cd,7f4a3e05e0cbc6f48a0035e3508eef90\narchitect = -pbkdf2-43ecbd256a70a3a2f7de40d2374b6c3002918834,921a12f74df0c1052b3e562a23cd227f,10000\n```\n\n----------------------------------------\n\nTITLE: Defining a Search Index in CouchDB\nDESCRIPTION: This code snippet illustrates how to define a search index within a CouchDB design document. The index utilizes a JavaScript function that will be invoked to process documents in the database for the specified index.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/ddocs/search.rst#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"_id\": \"_design/search_example\",\n    \"indexes\": {\n        \"animals\": {\n            \"index\": \"function(doc){ ... }\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Prometheus Metrics Request/Response\nDESCRIPTION: Example of requesting metrics in Prometheus format from CouchDB's /_node/_local/_prometheus endpoint, showing the plain text response format.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/server/common.rst#2025-04-21_snippet_29\n\nLANGUAGE: http\nCODE:\n```\nGET /_node/_local/_prometheus HTTP/1.1\nAccept: text/plain\nHost: localhost:5984\n```\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200 OK\nCache-Control: must-revalidate\nContent-Length: 187\nContent-Type: text/plain; version=2.0\nDate: Sat, 10 May 2020 11:41:11 GMT\nServer: CouchDB (Erlang/OTP)\n\n# TYPE couchdb_couch_log_requests_total counter\ncouchdb_couch_log_requests_total{level=\"alert\"} 0\ncouchdb_couch_log_requests_total{level=\"critical\"} 0\ncouchdb_couch_log_requests_total{level=\"debug\"} 0\ncouchdb_couch_log_requests_total{level=\"emergency\"} 0\ncouchdb_couch_log_requests_total{level=\"error\"} 0\ncouchdb_couch_log_requests_total{level=\"info\"} 8\ncouchdb_couch_log_requests_total{level=\"notice\"} 51\ncouchdb_couch_log_requests_total{level=\"warning\"} 0\n# TYPE couchdb_couch_replicator_changes_manager_deaths_total counter\ncouchdb_couch_replicator_changes_manager_deaths_total 0\n# TYPE couchdb_couch_replicator_changes_queue_deaths_total counter\ncouchdb_couch_replicator_changes_queue_deaths_total 0\n# TYPE couchdb_couch_replicator_changes_read_failures_total counter\ncouchdb_couch_replicator_changes_read_failures_total 0\n# TYPE couchdb_couch_replicator_changes_reader_deaths_total counter\ncouchdb_couch_replicator_changes_reader_deaths_total 0\n```\n\n----------------------------------------\n\nTITLE: Implementing Guard Clauses for Indexing\nDESCRIPTION: This code demonstrates the use of guard clauses in JavaScript to safely check for the existence and type of data fields before indexing them in a CouchDB search index, thereby preventing runtime errors.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/ddocs/search.rst#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nif (typeof(doc.min_length) === 'number') {\n    index(\"min_length\", doc.min_length, {\"store\": true});\n}\n```\n\n----------------------------------------\n\nTITLE: Setting HTTP Connection Limits in CouchDB\nDESCRIPTION: Defines the maximum number of HTTP connections allowed per replication.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/config/replicator.rst#2025-04-21_snippet_7\n\nLANGUAGE: ini\nCODE:\n```\n[replicator]\nhttp_connections = 20\n```\n\n----------------------------------------\n\nTITLE: Implementing a Dynamic Filter Function in CouchDB JavaScript\nDESCRIPTION: This dynamic filter function uses the request object to allow filtering based on a query parameter. It checks if the document is of type 'mail' and matches the requested status.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/ddocs/ddocs.rst#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nfunction(doc, req){\n    // we need only `mail` documents\n    if (doc.type != 'mail'){\n        return false;\n    }\n    // we're interested only in requested status\n    if (doc.status != req.query.status){\n        return false;\n    }\n    return true; // passed!\n}\n```\n\n----------------------------------------\n\nTITLE: Map Function for SQL-like WHERE Clause in CouchDB\nDESCRIPTION: A map function that emits values to support lookup by a specific field value, similar to a SQL WHERE clause. This enables key-based lookups in CouchDB views.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/ddocs/views/nosql.rst#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nfunction(doc) {\n    if(doc.value) {\n        emit(doc.value, null);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Multipart Response for Changed Document Fetch in CouchDB\nDESCRIPTION: HTTP response with multipart/mixed content containing multiple document revisions. The response includes both JSON documents and their attachments, with proper boundaries and content types. It demonstrates how CouchDB returns document revisions, including one that is missing (3-6bcedf1).\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/replication/protocol.rst#2025-04-21_snippet_21\n\nLANGUAGE: text\nCODE:\n```\nHTTP/1.1 200 OK\nContent-Type: multipart/mixed; boundary=\"7b1596fc4940bc1be725ad67f11ec1c4\"\nDate: Thu, 07 Nov 2013 15:10:16 GMT\nServer: CouchDB (Erlang OTP)\nTransfer-Encoding: chunked\n\n--7b1596fc4940bc1be725ad67f11ec1c4\nContent-Type: application/json\n\n{\n    \"_id\": \"SpaghettiWithMeatballs\",\n    \"_rev\": \"1-917fa23\",\n    \"_revisions\": {\n        \"ids\": [\n            \"917fa23\"\n        ],\n        \"start\": 1\n    },\n    \"description\": \"An Italian-American delicious dish\",\n    \"ingredients\": [\n        \"spaghetti\",\n        \"tomato sauce\",\n        \"meatballs\"\n    ],\n    \"name\": \"Spaghetti with meatballs\"\n}\n--7b1596fc4940bc1be725ad67f11ec1c4\nContent-Type: multipart/related; boundary=\"a81a77b0ca68389dda3243a43ca946f2\"\n\n--a81a77b0ca68389dda3243a43ca946f2\nContent-Type: application/json\n\n{\n    \"_attachments\": {\n      \"recipe.txt\": {\n          \"content_type\": \"text/plain\",\n          \"digest\": \"md5-R5CrCb6fX10Y46AqtNn0oQ==\",\n          \"follows\": true,\n          \"length\": 87,\n          \"revpos\": 7\n      }\n    },\n    \"_id\": \"SpaghettiWithMeatballs\",\n    \"_rev\": \"7-474f12e\",\n    \"_revisions\": {\n        \"ids\": [\n            \"474f12e\",\n            \"5949cfc\",\n            \"00ecbbc\",\n            \"fc997b6\",\n            \"3552c87\",\n            \"404838b\",\n            \"5defd9d\",\n            \"dc1e4be\"\n        ],\n        \"start\": 7\n    },\n    \"description\": \"An Italian-American delicious dish\",\n    \"ingredients\": [\n        \"spaghetti\",\n        \"tomato sauce\",\n        \"meatballs\",\n        \"love\"\n    ],\n    \"name\": \"Spaghetti with meatballs\"\n}\n--a81a77b0ca68389dda3243a43ca946f2\nContent-Disposition: attachment; filename=\"recipe.txt\"\nContent-Type: text/plain\nContent-Length: 87\n\n1. Cook spaghetti\n2. Cook meetballs\n3. Mix them\n4. Add tomato sauce\n5. ...\n6. PROFIT!\n\n--a81a77b0ca68389dda3243a43ca946f2--\n--7b1596fc4940bc1be725ad67f11ec1c4\nContent-Type: application/json; error=\"true\"\n\n{\"missing\":\"3-6bcedf1\"}\n--7b1596fc4940bc1be725ad67f11ec1c4--\n```\n\n----------------------------------------\n\nTITLE: Hybrid Pagination Approach for Full Document Range\nDESCRIPTION: Alternative pagination strategy using an integer value index when needing to jump across the full range of documents. Provides flexibility for applications requiring non-sequential page access.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/ddocs/views/pagination.rst#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// Hybrid pagination approach\nconst integerValueIndex = '...'\n```\n\n----------------------------------------\n\nTITLE: Updating an Existing Document with If-Match Header in CouchDB via HTTP\nDESCRIPTION: Demonstrates an alternative way to update a document by specifying the current revision ID in the If-Match HTTP header instead of the request body.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/document/common.rst#2025-04-21_snippet_18\n\nLANGUAGE: http\nCODE:\n```\nPUT /recipes/SpaghettiWithMeatballs HTTP/1.1\nAccept: application/json\nContent-Length: 258\nContent-Type: application/json\nIf-Match: 1-917fa2381192822767f010b95b45325b\nHost: localhost:5984\n\n{\n    \"description\": \"An Italian-American dish that usually consists of spaghetti, tomato sauce and meatballs.\",\n    \"ingredients\": [\n        \"spaghetti\",\n        \"tomato sauce\",\n        \"meatballs\"\n    ],\n    \"name\": \"Spaghetti with meatballs\",\n    \"serving\": \"hot\"\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Partial File Attachment\nDESCRIPTION: Demonstrates byte range request to retrieve partial content from file attachment using curl\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/document/attachments.rst#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nshell> curl -X GET http://adm:pass@127.0.0.1:5984/test/doc/file.txt \\\n                -H \"Range: bytes=0-12\"\nMy hovercraft\n```\n\n----------------------------------------\n\nTITLE: CouchDB Drilldown Query Examples\nDESCRIPTION: Examples of using drilldown parameters to filter search results by specific dimensions and labels.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/ddocs/search.rst#2025-04-21_snippet_24\n\nLANGUAGE: http\nCODE:\n```\nGET /things/_design/inventory/_search/fruits?q=*:*&drilldown=[\"state\",\"old\"]&drilldown=[\"item\",\"apple\"]&include_docs=true HTTP/1.1\n```\n\nLANGUAGE: http\nCODE:\n```\nGET /things/_design/inventory/_search/fruits?q=*:*&drilldown=[[\"state\",\"old\"],[\"item\",\"apple\"]]&include_docs=true HTTP/1.1\n```\n\n----------------------------------------\n\nTITLE: HTTP Request to Test Keyword Analyzer\nDESCRIPTION: This HTTP request demonstrates how to use the `_search_analyze` endpoint to test the keyword analyzer in CouchDB. The request specifies the analyzer as \"keyword\" and provides a sample text to be analyzed, \"ablanks@renovations.com\". The Content-Type header is set to application/json.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/ddocs/search.rst#2025-04-21_snippet_7\n\nLANGUAGE: http\nCODE:\n```\nPOST /_search_analyze HTTP/1.1\nContent-Type: application/json\n{\"analyzer\":\"keyword\", \"text\":\"ablanks@renovations.com\"}\n```\n\n----------------------------------------\n\nTITLE: Basic Changes Feed Response\nDESCRIPTION: Example response showing the structure of changes feed results including sequence IDs, document changes, and deletion status\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/database/changes.rst#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n{\"results\":[\n{\"seq\":\"1-g1AAAAF9eJzLYWBg4MhgTmHgz8tPSTV0MDQy1zMAQsMcoARTIkOS_P__7MSGXAqSVIAkkn2IFUZzIkMuUAee5pRqnGiuXkKA2dpXkpqWmZeagpu_Q4g_fGEbEkAqaqH2sIItsXAyMjM2NgUUwdOU_JYgCRDA5ACGjQfn30QlQsgKvcTVnkAovI-YZUPICpBvs0CAN1eY_c\",\"id\":\"fresh\",\"changes\":[{\"rev\":\"1-967a00dff5e02add41819138abb3284d\"}]},\n{\"seq\":\"3-g1AAAAG3eJzLYWBg4MhgTmHgz8tPSTV0MDQy1zMAQsMcoARTIkOS_P___7MSGXAqSVIAkkn2IFUZzIkMuUAee5pRqnGiuXkKA2dpXkpqWmZeagpu_Q4g_fGEbEkAqaqH2sIItsXAyMjM2NgUUwdOU_JYgCRDA5ACGjQfn30QlQsgKvcjfGaQZmaUmmZClM8gZhyAmHGfsG0PICrBPmQC22ZqbGRqamyIqSsLAAArcXo\",\"id\":\"updated\",\"changes\":[{\"rev\":\"2-7051cbe5c8faecd085a3fa619e6e6337\"}]}\n],\n\"last_seq\":\"5-g1AAAAIreJyVkEsKwjAURZ-toI5cgq5A0sQ0OrI70XyppcaRY92J7kR3ojupaSPUUgotgRd4yTlwbw4A0zRUMLdnpaMkwmyF3Ily9xBwEIuiKLI05KOTW0wkV4rruP29UyGWbordzwKVxWBNOGMKZhertDlarbr5pOT3DV4gudUC9-MPJX9tpEAYx4TQASns2E24ucuJ7rXJSL1BbEgf3vTwpmedCZkYa7Pulck7Xt7x_usFU2aIHOD4eEfVTVA5KMGUkqhNZV-8_o5i\",\n\"pending\": 0}\n```\n\n----------------------------------------\n\nTITLE: Configuring Virtual Hosts in CouchDB\nDESCRIPTION: Examples of virtual host configurations that map different domain names to specific databases or paths within CouchDB. This enables hosting multiple applications on a single CouchDB instance.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/config/http.rst#2025-04-21_snippet_21\n\nLANGUAGE: ini\nCODE:\n```\n[vhosts]\ncouchdb.local:5984 = /example\n*.couchdb.local:5984 = /example\n```\n\n----------------------------------------\n\nTITLE: Implementing Map Function for Blog Post View\nDESCRIPTION: JavaScript map function that emits document dates as keys and titles as values, used to create a sorted view of blog posts.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/ddocs/views/intro.rst#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction(doc) {\n    if(doc.date && doc.title) {\n        emit(doc.date, doc.title);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: PUT Database Security Object Response\nDESCRIPTION: HTTP response confirming successful update of the database security object.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/database/security.rst#2025-04-21_snippet_4\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200 OK\nCache-Control: must-revalidate\nContent-Length: 12\nContent-Type: application/json\nDate: Tue, 13 Aug 2013 11:26:28 GMT\nServer: CouchDB (Erlang/OTP)\n\n{\n    \"ok\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Canceling Continuous Replication - HTTP\nDESCRIPTION: This snippet shows how to cancel an ongoing continuous replication by sending a JSON request with the 'cancel' field set to true. The request must match the original request's structure for it to be honored.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/server/common.rst#2025-04-21_snippet_19\n\nLANGUAGE: http\nCODE:\n```\nPOST http://couchdb:5984/_replicate HTTP/1.1\nAccept: application/json\nContent-Type: application/json\n\n{\n    \"cancel\" : true,\n    \"continuous\" : true,\n    \"create_target\" : true,\n    \"source\" : \"recipes\",\n    \"target\" : \"http://couchdb-remote:5984/recipes\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Maximum Replication Jobs in CouchDB\nDESCRIPTION: Sets the maximum number of actively running replications that can occur simultaneously. This value acts as a threshold for the automatic replication scheduler.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/config/replicator.rst#2025-04-21_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[replicator]\nmax_jobs = 500\n```\n\n----------------------------------------\n\nTITLE: Configuring Secure HTTPS for Nouveau Server\nDESCRIPTION: YAML configuration for enabling secure HTTPS connections in Nouveau server with mutual TLS authentication to validate client certificates.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/install/nouveau.rst#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nserver:\n  applicationConnectors:\n    - type: https\n      port: 5987\n      keyStorePath: <path to keystore>\n      keyStorePassword: <password to keystore>\n      needClientAuth: true\n      validateCerts: true\n      validatePeers: true\n```\n\n----------------------------------------\n\nTITLE: Defining and Configuring a New Smoosh Channel in CouchDB\nDESCRIPTION: This snippet demonstrates how to define a new 'big_dbs' channel for Smoosh, set its configuration options, and add it to the active db_channels set using the CouchDB shell.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/smoosh/operator_guide.md#2025-04-21_snippet_0\n\nLANGUAGE: erlang\nCODE:\n```\n# Define the new channel\n(couchdb@db1.foo.bar)3> rpc:multicall(config, set, [\"smoosh.big_dbs\", \"min_size\", \"20000000000\"]).\n{[ok,ok,ok],[]}\n(couchdb@db1.foo.bar)3> rpc:multicall(config, set, [\"smoosh.big_dbs\", \"concurrency\", \"2\"]).\n{[ok,ok,ok],[]}\n\n# Add the channel to the db_channels set -- note we need to get the original\n# value first so we can add the new one to the existing list!\n(couchdb@db1.foo.bar)5> rpc:multicall(config, get, [\"smoosh\", \"db_channels\"]).\n{[\"ratio_dbs\",\"ratio_dbs\",\"ratio_dbs\"],[]}\n(couchdb@db1.foo.bar)6> rpc:multicall(config, set, [\"smoosh\", \"db_channels\", \"ratio_dbs,big_dbs\"]).\n{[ok,ok,ok],[]}\n```\n\n----------------------------------------\n\nTITLE: Embedding Comments in Blog Post Document Structure\nDESCRIPTION: Approach #1 for modeling blog posts with comments: embedding comments directly within the blog post document.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/ddocs/views/joins.rst#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"_id\": \"myslug\",\n    \"_rev\": \"123456\",\n    \"author\": \"john\",\n    \"title\": \"My blog post\",\n    \"content\": \"Bla bla bla â€¦\",\n    \"comments\": [\n        {\"author\": \"jack\", \"content\": \"â€¦\"},\n        {\"author\": \"jane\", \"content\": \"â€¦\"}\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: GET Configuration Key Request - CouchDB HTTP\nDESCRIPTION: HTTP request to retrieve a single configuration value from a specific section and key.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/server/configuration.rst#2025-04-21_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nGET /_node/nonode@nohost/_config/log/level HTTP/1.1\nAccept: application/json\nHost: localhost:5984\n```\n\n----------------------------------------\n\nTITLE: Response with Replication Status\nDESCRIPTION: HTTP response containing detailed information about replication documents including their states, progress metrics, and timing information.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/server/common.rst#2025-04-21_snippet_26\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200 OK\nContent-Type: application/json\nDate: Sat, 29 Apr 2017 05:10:08 GMT\nServer: Server: CouchDB (Erlang/OTP)\nTransfer-Encoding: chunked\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"docs\": [\n        {\n            \"database\": \"other/_replicator\",\n            \"doc_id\": \"cdyno-0000001-0000002\",\n            \"error_count\": 0,\n            \"id\": \"e327d79214831ca4c11550b4a453c9ba+continuous\",\n            \"info\": {\n                \"changes_pending\": 0,\n                \"checkpointed_source_seq\": \"60-g1AAAACTeJzLYWBgYMpgTmHgz8tPSTV0MDQy1zMAQsMckEQiQ1L9____szKYEyVygQLsBsZm5pZJJpjKcRqRxwIkGRqA1H-oSSpgk4yMkhITjS0wdWUBAENCJEg\",\n                \"doc_write_failures\": 0,\n                \"docs_read\": 67,\n                \"bulk_get_attempts\": 67,\n                \"bulk_get_docs\": 67,\n                \"docs_written\": 67,\n                \"missing_revisions_found\": 67,\n                \"revisions_checked\": 67,\n                \"source_seq\": \"67-g1AAAACTeJzLYWBgYMpgTmHgz8tPSTV0MDQy1zMAQsMckEQiQ1L9____szKYE2VygQLsBsZm5pZJJpjKcRqRxwIkGRqA1H-oSepgk4yMkhITjS0wdWUBAEVKJE8\",\n                \"through_seq\": \"67-g1AAAACTeJzLYWBgYMpgTmHgz8tPSTV0MDQy1zMAQsMckEQiQ1L9____szKYE2VygQLsBsZm5pZJJpjKcRqRxwIkGRqA1H-oSepgk4yMkhITjS0wdWUBAEVKJE8\"\n            },\n            \"last_updated\": \"2017-04-29T05:01:37Z\",\n            \"node\": \"node2@127.0.0.1\",\n            \"source_proxy\": null,\n            \"target_proxy\": null,\n            \"source\": \"http://myserver.com/foo\",\n            \"start_time\": \"2017-04-29T05:01:37Z\",\n            \"state\": \"running\",\n            \"target\": \"http://adm:*****@localhost:15984/cdyno-0000002/\"\n        }\n    ],\n    \"offset\": 0,\n    \"total_rows\": 1\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Database Shard Map Layout in CouchDB using HTTP\nDESCRIPTION: HTTP request and response examples for retrieving the complete shard map layout of a CouchDB database. The response contains a mapping of shard ranges to node replicas that store those ranges.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/database/shard.rst#2025-04-21_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nGET /db/_shards HTTP/1.1\nAccept: */*\nHost: localhost:5984\n```\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200 OK\nCache-Control: must-revalidate\nContent-Length: 621\nContent-Type: application/json\nDate: Fri, 18 Jan 2019 19:55:14 GMT\nServer: CouchDB/2.4.0 (Erlang OTP/19)\n\n{\n  \"shards\": {\n    \"00000000-1fffffff\": [\n      \"couchdb@node1.example.com\",\n      \"couchdb@node2.example.com\",\n      \"couchdb@node3.example.com\"\n    ],\n    \"20000000-3fffffff\": [\n      \"couchdb@node1.example.com\",\n      \"couchdb@node2.example.com\",\n      \"couchdb@node3.example.com\"\n    ],\n    \"40000000-5fffffff\": [\n      \"couchdb@node1.example.com\",\n      \"couchdb@node2.example.com\",\n      \"couchdb@node3.example.com\"\n    ],\n    \"60000000-7fffffff\": [\n      \"couchdb@node1.example.com\",\n      \"couchdb@node2.example.com\",\n      \"couchdb@node3.example.com\"\n    ],\n    \"80000000-9fffffff\": [\n      \"couchdb@node1.example.com\",\n      \"couchdb@node2.example.com\",\n      \"couchdb@node3.example.com\"\n    ],\n    \"a0000000-bfffffff\": [\n      \"couchdb@node1.example.com\",\n      \"couchdb@node2.example.com\",\n      \"couchdb@node3.example.com\"\n    ],\n    \"c0000000-dfffffff\": [\n      \"couchdb@node1.example.com\",\n      \"couchdb@node2.example.com\",\n      \"couchdb@node3.example.com\"\n    ],\n    \"e0000000-ffffffff\": [\n      \"couchdb@node1.example.com\",\n      \"couchdb@node2.example.com\",\n      \"couchdb@node3.example.com\"\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a JavaScript Index Function\nDESCRIPTION: This snippet demonstrates a JavaScript function used for indexing documents in a CouchDB search index. It extracts various fields from the document and indexes them with specific parameters, ensuring the storage of relevant data in search results.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/ddocs/search.rst#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction(doc) {\n    index(\"default\", doc._id);\n    if (doc.min_length) {\n        index(\"min_length\", doc.min_length, {\"store\": true});\n    }\n    if (doc.diet) {\n        index(\"diet\", doc.diet, {\"store\": true});\n    }\n    if (doc.latin_name) {\n        index(\"latin_name\", doc.latin_name, {\"store\": true});\n    }\n    if (doc.class) {\n        index(\"class\", doc.class, {\"store\": true});\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Design Document for View Compaction in CouchDB\nDESCRIPTION: This snippet shows an example of a design document with a view definition. This is used to demonstrate the structure needed for view compaction.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/maintenance/compaction.rst#2025-04-21_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"_id\": \"_design/ddoc-name\",\n    \"views\": {\n        \"view-name\": {\n            \"map\": \"function(doc) { emit(doc.key, doc.value) }\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Get Reshard Status JSON Response\nDESCRIPTION: Example JSON response for the GET /_reshard endpoint, showing the summary of resharding jobs including completed, failed, running, and total counts.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/rfcs/002-shard-splitting.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"completed\": 3,\n    \"failed\": 4,\n    \"running\": 0,\n    \"state\": \"stopped\",\n    \"state_reason\": \"Manual rebalancing\",\n    \"stopped\": 0,\n    \"total\": 7\n}\n```\n\n----------------------------------------\n\nTITLE: Get Reshard Jobs JSON Response\nDESCRIPTION: Example JSON response for the GET /_reshard/jobs endpoint, showing detailed information about resharding jobs including their history and current state.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/rfcs/002-shard-splitting.md#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"jobs\": [\n        {\n            \"history\": [\n                {\n                    \"detail\": null,\n                    \"timestamp\": \"2019-02-06T22:28:06Z\",\n                    \"type\": \"new\"\n                },\n                {\n                    \"detail\": null,\n                    \"timestamp\": \"2019-02-06T22:28:10Z\",\n                    \"type\": \"completed\"\n                }\n            ],\n            \"id\": \"001-0a308ef9f7bd24bd4887d6e619682a6d3bb3d0fd94625866c5216ec1167b4e23\",\n            \"job_state\": \"completed\",\n            \"node\": \"node1@127.0.0.1\",\n            \"source\": \"shards/00000000-ffffffff/db1.1549492084\",\n            \"split_state\": \"completed\",\n            \"start_time\": \"2019-02-06T22:28:06Z\",\n            \"state_info\": {},\n            \"target\": [\n                \"shards/00000000-7fffffff/db1.1549492084\",\n                \"shards/80000000-ffffffff/db1.1549492084\"\n            ],\n            \"type\": \"split\",\n            \"update_time\": \"2019-02-06T22:28:10Z\"\n        }\n   ],\n   \"offset\": 0,\n   \"total_rows\": 7\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring SSL Certificate Validation in CouchDB Replicator\nDESCRIPTION: Controls whether peer certificates should be validated during replication. Setting to false disables certificate validation.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/config/replicator.rst#2025-04-21_snippet_23\n\nLANGUAGE: ini\nCODE:\n```\n[replicator]\nverify_ssl_certificates = false\n```\n\n----------------------------------------\n\nTITLE: Retrieving UUIDs from CouchDB\nDESCRIPTION: This snippet shows the response format when requesting UUIDs from CouchDB. It includes an array of generated UUIDs.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/server/common.rst#2025-04-21_snippet_39\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"uuids\": [\n        \"75480ca477454894678e22eec6002413\",\n        \"75480ca477454894678e22eec600250b\",\n        \"75480ca477454894678e22eec6002c41\",\n        \"75480ca477454894678e22eec6003b90\",\n        \"75480ca477454894678e22eec6003fca\",\n        \"75480ca477454894678e22eec6004bef\",\n        \"75480ca477454894678e22eec600528f\",\n        \"75480ca477454894678e22eec6005e0b\",\n        \"75480ca477454894678e22eec6006158\",\n        \"75480ca477454894678e22eec6006161\"\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Silent Install of CouchDB with Service and Admin Credentials\nDESCRIPTION: Command to silently install CouchDB, configuring it to run as a Windows service with specified admin credentials. The INSTALLSERVICE=1 parameter enables service installation.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/install/windows.rst#2025-04-21_snippet_1\n\nLANGUAGE: batch\nCODE:\n```\nmsiexec /i apache-couchdb-3.0.0.msi /quiet INSTALLSERVICE=1 ADMINUSER=admin ADMINPASSWORD=hunter2 /norestart\n```\n\n----------------------------------------\n\nTITLE: Bulk Document Insert Response Handling\nDESCRIPTION: Illustrates the successful response structure for a bulk document insert operation, showing document IDs, status, and new revision information\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/database/bulk-api.rst#2025-04-21_snippet_14\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 201 Created\nCache-Control: must-revalidate\nContent-Length: 215\nContent-Type: application/json\nDate: Sat, 26 Oct 2013 00:10:39 GMT\nServer: CouchDB (Erlang OTP)\n\n[\n    {\n        \"id\": \"FishStew\",\n        \"ok\": true,\n        \"rev\": \"2-2bff94179917f1dec7cd7f0209066fb8\"\n    },\n    {\n        \"id\": \"LambStew\",\n        \"ok\": true,\n        \"rev\": \"2-6a7aae7ac481aa98a2042718d09843c4\"\n    },\n    {\n        \"id\": \"BeefStew\",\n        \"ok\": true,\n        \"rev\": \"2-9801936a42f06a16f16c30027980d96f\"\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Specific Document Revision in CouchDB via HTTP\nDESCRIPTION: Demonstrates how to fetch a specific revision of a document using the rev query parameter. This allows access to previous versions of a document by specifying the full revision ID.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/document/common.rst#2025-04-21_snippet_14\n\nLANGUAGE: http\nCODE:\n```\nGET /recipes/SpaghettiWithMeatballs?rev=6-136813b440a00a24834f5cb1ddf5b1f1  HTTP/1.1\nAccept: application/json\nHost: localhost:5984\n```\n\n----------------------------------------\n\nTITLE: Implementing a Basic Filter Function in CouchDB JavaScript\nDESCRIPTION: This filter function checks if a document is of type 'mail' and has a 'new' status. It's used to filter the changes feed to only emit documents matching these criteria.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/ddocs/ddocs.rst#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nfunction(doc, req){\n    // we need only `mail` documents\n    if (doc.type != 'mail'){\n        return false;\n    }\n    // we're interested only in `new` ones\n    if (doc.status != 'new'){\n        return false;\n    }\n    return true; // passed!\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Keyword Analyzer via Command Line\nDESCRIPTION: This shell command uses `curl` to send a request to the `_search_analyze` endpoint in CouchDB to test the keyword analyzer. It sets the Content-Type to application/json and provides the analyzer and text data as a JSON payload. The command includes placeholder `$HOST` for the CouchDB host.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/ddocs/search.rst#2025-04-21_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\ncurl 'https://$HOST:5984/_search_analyze' -H 'Content-Type: application/json'\n    -d '{\"analyzer\":\"keyword\", \"text\":\"ablanks@renovations.com\"}'\n```\n\n----------------------------------------\n\nTITLE: Basic Customer View with Sorted LastName\nDESCRIPTION: Demonstrates a basic view function that emits customer documents sorted by last name\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/ddocs/views/collation.rst#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction(doc) {\n    if (doc.Type == \"customer\") {\n        emit(doc.LastName, {FirstName: doc.FirstName, Address: doc.Address});\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Analyzing Search Text in CouchDB HTTP API\nDESCRIPTION: Makes a POST request to the /_search_analyze endpoint to test Lucene analyzer tokenization on sample text. Requires a running search plugin. Returns a JSON object with tokenized results.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/server/common.rst#2025-04-21_snippet_35\n\nLANGUAGE: http\nCODE:\n```\nPOST /_search_analyze HTTP/1.1\nHost: localhost:5984\nContent-Type: application/json\n\n{\"analyzer\":\"english\", \"text\":\"running\"}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"tokens\": [\n        \"run\"\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Counts Query for Faceted Search\nDESCRIPTION: Example of a query using the counts facet syntax to get counts of unique values for the 'type' field.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/ddocs/nouveau.rst#2025-04-21_snippet_20\n\nLANGUAGE: text\nCODE:\n```\n?q=*:*&counts=[\"type\"]\n```\n\n----------------------------------------\n\nTITLE: Example MapReduce Result in CouchDB\nDESCRIPTION: Sample JSON output from a MapReduce view query showing the structure of results including total rows, offset, and individual result rows with id, key, and value properties.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/ddocs/views/nosql.rst#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n{\"total_rows\":3,\"offset\":0,\"rows\":[\n{\"id\":\"fc2636bf50556346f1ce46b4bc01fe30\",\"key\":\"Lena\",\"value\":5},\n{\"id\":\"1fb2449f9b9d4e466dbfa47ebe675063\",\"key\":\"Lisa\",\"value\":4},\n{\"id\":\"8ede09f6f6aeb35d948485624b28f149\",\"key\":\"Sarah\",\"value\":6}\n]}\n```\n\n----------------------------------------\n\nTITLE: PUT Request to Create Document Attachment in CouchDB\nDESCRIPTION: HTTP PUT request to upload and store a text file attachment for a document. Includes the attachment content and required headers like Content-Type and If-Match for revision checking.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/document/attachments.rst#2025-04-21_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nPUT /recipes/SpaghettiWithMeatballs/recipe.txt HTTP/1.1\nAccept: application/json\nContent-Length: 86\nContent-Type: text/plain\nHost: localhost:5984\nIf-Match: 1-917fa2381192822767f010b95b45325b\n\n1. Cook spaghetti\n2. Cook meatballs\n3. Mix them\n4. Add tomato sauce\n5. ...\n6. PROFIT!\n```\n\n----------------------------------------\n\nTITLE: List Indexes GET Request - HTTP\nDESCRIPTION: HTTP GET request example for retrieving all indexes in a database with sample response showing index definitions.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/database/find.rst#2025-04-21_snippet_9\n\nLANGUAGE: http\nCODE:\n```\nGET /db/_index HTTP/1.1\nAccept: application/json\nHost: localhost:5984\n```\n\n----------------------------------------\n\nTITLE: Adding a CouchDB Admin with Raw Encrypted Password via HTTP API\nDESCRIPTION: HTTP request and response for adding a new server administrator using a pre-hashed password string.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/config/auth.rst#2025-04-21_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nPUT /_node/nonode@nohost/_config/admins/architect?raw=true HTTP/1.1\nAccept: application/json\nContent-Type: application/json\nContent-Length: 89\nHost: localhost:5984\n\n\"-pbkdf2-43ecbd256a70a3a2f7de40d2374b6c3002918834,921a12f74df0c1052b3e562a23cd227f,10000\"\n```\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200 OK\nCache-Control: must-revalidate\nContent-Length: 89\nContent-Type: application/json\nDate: Fri, 30 Nov 2012 11:39:18 GMT\nServer: CouchDB (Erlang/OTP)\n\n\"-pbkdf2-43ecbd256a70a3a2f7de40d2374b6c3002918834,921a12f74df0c1052b3e562a23cd227f,10000\"\n```\n\n----------------------------------------\n\nTITLE: CouchDB Local Documents Query Response\nDESCRIPTION: Example response from a local documents query showing the structure of returned data. The response includes results array with document information and handling of non-existent documents with error messages.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/local.rst#2025-04-21_snippet_3\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200 OK\nCache-Control: must-revalidate\nContent-Type: application/json\nDate: Thu, 20 Jul 2023 21:45:37 GMT\nServer: CouchDB (Erlang/OTP)\nTransfer-Encoding: chunked\n\n{\n    \"results\": [\n        {\n            \"total_rows\": null,\n            \"offset\": null,\n            \"rows\": [\n                {\n                    \"id\": \"_local/localdoc05\",\n                    \"key\": \"_local/localdoc05\",\n                    \"value\": {\n                      \"rev\": \"0-1\"\n                    }\n                },\n                {\n                    \"key\": \"_local/not-exist\",\n                    \"error\": \"not_found\"\n                }\n            ]\n        },\n        {\n            \"total_rows\": null,\n            \"offset\": null,\n            \"rows\": [\n                {\n                  \"id\": \"_local/localdoc04\",\n                  \"key\": \"_local/localdoc04\",\n                  \"value\": {\n                      \"rev\": \"0-1\"\n                    }\n                }\n            ]\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Nginx Reverse Proxy Configuration\nDESCRIPTION: Basic Nginx configuration to proxy requests from domain to local CouchDB instance. Includes essential headers and disables proxy buffering for continuous replication.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/best-practices/reverse-proxies.rst#2025-04-21_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nlocation / {\n    proxy_pass http://localhost:5984;\n    proxy_redirect off;\n    proxy_buffering off;\n    proxy_set_header Host $host;\n    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving purge history with GET request to /{db}/_purged_infos in CouchDB\nDESCRIPTION: Example HTTP request for retrieving the history of purged document IDs and revisions from a CouchDB database. This endpoint returns information about previously purged documents.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/database/misc.rst#2025-04-21_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nGET /db/_purged_infos HTTP/1.1\nAccept: application/json\nHost: localhost:5984\n```\n\n----------------------------------------\n\nTITLE: Querying CouchDB Smoosh Status API\nDESCRIPTION: Example of how to query the CouchDB Smoosh status API using an HTTP GET request. This API returns metrics about CouchDB's auto-compaction daemon, including channel states and job counts.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/server/common.rst#2025-04-21_snippet_31\n\nLANGUAGE: http\nCODE:\n```\nGET /_node/_local/_smoosh/status HTTP/1.1\nHost: 127.0.0.1:5984\nAccept: */*\n```\n\n----------------------------------------\n\nTITLE: Setting CouchDB Configuration via Environment Variables\nDESCRIPTION: Example of setting custom configuration file paths using the ERL_FLAGS environment variable for CouchDB initialization.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/config/intro.rst#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nexport ERL_FLAGS=\"-couch_ini /path/to/my/default.ini /path/to/my/local.ini\"\n```\n\n----------------------------------------\n\nTITLE: Deleting Individual CouchDB Index - HTTP Request/Response\nDESCRIPTION: Example of deleting a single index from a CouchDB database using DELETE request. Shows both request and success response format.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/database/find.rst#2025-04-21_snippet_10\n\nLANGUAGE: http\nCODE:\n```\nDELETE /db/_index/_design/a5f4711fc9448864a13c81dc71e660b524d7410c/json/foo-index HTTP/1.1\nAccept: */*\nHost: localhost:5984\n```\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200 OK\nCache-Control: must-revalidate\nContent-Length: 12\nContent-Type: application/json\nDate: Thu, 01 Sep 2016 19:21:40 GMT\nServer: CouchDB (Erlang OTP/18)\n\n{\n    \"ok\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Changing Resharding Job State in CouchDB (HTTP PUT)\nDESCRIPTION: This snippet demonstrates how to change the state of a resharding job using an HTTP PUT request. The state can be changed between 'stopped' and 'running', with an optional reason provided. The response confirms if the state change was successful.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/server/common.rst#2025-04-21_snippet_50\n\nLANGUAGE: http\nCODE:\n```\nPUT /_reshard/state/001-b3da04f969bbd682faaab5a6c373705cbcca23f732c386bb1a608cfbcfe9faff/state HTTP/1.1\nAccept: application/json\nHost: localhost:5984\n\n{\n    \"state\": \"stopped\",\n    \"reason\": \"Rebalancing in progress\"\n}\n```\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200 OK\nContent-Type: application/json\n\n{\n     \"ok\": true\n}\n```\n\n----------------------------------------\n\nTITLE: CouchDB Find API Response Example (HTTP Response)\nDESCRIPTION: HTTP response from the CouchDB Find API showing matching documents and execution statistics. The response includes the requested fields for each matching document along with performance metrics.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/database/find.rst#2025-04-21_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200 OK\nCache-Control: must-revalidate\nContent-Type: application/json\nDate: Thu, 01 Sep 2016 15:41:53 GMT\nServer: CouchDB (Erlang OTP)\nTransfer-Encoding: chunked\n\n{\n    \"docs\": [\n        {\n            \"_id\": \"176694\",\n            \"_rev\": \"1-54f8e950cc338d2385d9b0cda2fd918e\",\n            \"year\": 2011,\n            \"title\": \"The Tragedy of Man\"\n        },\n        {\n            \"_id\": \"780504\",\n            \"_rev\": \"1-5f14bab1a1e9ac3ebdf85905f47fb084\",\n            \"year\": 2011,\n            \"title\": \"Drive\"\n        }\n    ],\n    \"execution_stats\": {\n        \"total_keys_examined\": 200,\n        \"total_docs_examined\": 200,\n        \"total_quorum_docs_examined\": 0,\n        \"results_returned\": 2,\n        \"execution_time_ms\": 5.52\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Comparing Document Revisions in CouchDB\nDESCRIPTION: HTTP POST request to _revs_diff endpoint to find differences between given revisions and those in the database. Used primarily by the replicator for optimization.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/database/misc.rst#2025-04-21_snippet_8\n\nLANGUAGE: http\nCODE:\n```\nPOST /db/_revs_diff HTTP/1.1\nAccept: application/json\nContent-Length: 113\nContent-Type: application/json\nHost: localhost:5984\n\n{\n    \"190f721ca3411be7aa9477db5f948bbb\": [\n        \"3-bb72a7682290f94a985f7afac8b27137\",\n        \"4-10265e5a26d807a3cfa459cf1a82ef2e\",\n        \"5-067a00dff5e02add41819138abb3284d\"\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Running Specific WeatherReport Diagnostic Check in Bash\nDESCRIPTION: Shows how to run a specific diagnostic check (nodes_connected) using WeatherReport, which checks the connectivity of cluster nodes.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/weatherreport/README.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ ./weatherreport --etc /path/to/etc nodes_connected\n[warning] Cluster member node3@127.0.0.1 is not connected to this node. Please check whether it is down.\n```\n\n----------------------------------------\n\nTITLE: Configuring Valid Endpoint Protocols in CouchDB\nDESCRIPTION: Specifies the allowed protocols for replication endpoints.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/config/replicator.rst#2025-04-21_snippet_14\n\nLANGUAGE: ini\nCODE:\n```\n[replicator]\nvalid_endpoint_protocols = http,https\n```\n\n----------------------------------------\n\nTITLE: Retrieving Resharding Summary in CouchDB\nDESCRIPTION: This HTTP request and response demonstrate how to retrieve summary information about resharding on the CouchDB cluster.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/server/common.rst#2025-04-21_snippet_42\n\nLANGUAGE: http\nCODE:\n```\nGET /_reshard HTTP/1.1\nAccept: application/json\nHost: localhost:5984\n```\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200 OK\nContent-Type: application/json\n\n{\n    \"completed\": 21,\n    \"failed\": 0,\n    \"running\": 3,\n    \"state\": \"running\",\n    \"state_reason\": null,\n    \"stopped\": 0,\n    \"total\": 24\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Database Information for Partitions using Curl in Bash\nDESCRIPTION: This Bash command retrieves the database information for a previously created partitioned database, showing properties such as document count and partition status.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/partitioned-dbs/index.rst#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncurl http://adm:pass@127.0.0.1:5984/my_new_db\n{\n  \"cluster\": {\n    \"n\": 3,\n    \"q\": 8,\n    \"r\": 2,\n    \"w\": 2\n  },\n  \"compact_running\": false,\n  \"db_name\": \"my_new_db\",\n  \"disk_format_version\": 7,\n  \"doc_count\": 0,\n  \"doc_del_count\": 0,\n  \"instance_start_time\": \"0\",\n  \"props\": {\n    \"partitioned\": true\n  },\n  \"purge_seq\": \"0-g1AAAAFDeJzLYWBg4M...\",\n  \"sizes\": {\n    \"active\": 0,\n    \"external\": 0,\n    \"file\": 66784\n  },\n  \"update_seq\": \"0-g1AAAAFDeJzLYWBg4M...\"\n}\n```\n\n----------------------------------------\n\nTITLE: Calculating Revision Differences in CouchDB\nDESCRIPTION: HTTP request and response for comparing document revisions between source and target databases using the _revs_diff endpoint.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/replication/protocol.rst#2025-04-21_snippet_15\n\nLANGUAGE: http\nCODE:\n```\nPOST /target/_revs_diff HTTP/1.1\nAccept: application/json\nContent-Length: 287\nContent-Type: application/json\nHost: localhost:5984\nUser-Agent: CouchDB\n\n{\n    \"baz\": [\n        \"2-7051cbe5c8faecd085a3fa619e6e6337\"\n    ],\n    \"foo\": [\n        \"3-6a540f3d701ac518d3b9733d673c5484\"\n    ],\n    \"bar\": [\n        \"1-d4e501ab47de6b2000fc8a02f84a0c77\",\n        \"1-967a00dff5e02add41819138abb3284d\"\n    ]\n}\n```\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200 OK\nCache-Control: must-revalidate\nContent-Length: 88\nContent-Type: application/json\nDate: Fri, 25 Oct 2013 14:44:41 GMT\nServer: CouchDB (Erlang/OTP)\n\n{\n    \"baz\": {\n```\n\n----------------------------------------\n\nTITLE: Sending multiple queries to a view (HTTP)\nDESCRIPTION: This code snippet showcases an HTTP POST request to the `/queries` endpoint of a CouchDB view, designed for executing multiple queries in a single request. The `Content-Type` header is set to `application/json`, indicating that the request body contains a JSON payload with an array of query objects.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/ddoc/views.rst#2025-04-21_snippet_17\n\nLANGUAGE: http\nCODE:\n```\n\"POST /recipes/_design/recipes/_view/by_title/queries HTTP/1.1\nContent-Type: application/json\"\n```\n\n----------------------------------------\n\nTITLE: Checking Missing Document Revisions in CouchDB\nDESCRIPTION: HTTP POST request to find document revisions that don't exist in the database. Takes a mapping of document IDs to revision lists and returns missing revisions.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/database/misc.rst#2025-04-21_snippet_7\n\nLANGUAGE: http\nCODE:\n```\nPOST /db/_missing_revs HTTP/1.1\nAccept: application/json\nContent-Length: 76\nContent-Type: application/json\nHost: localhost:5984\n\n{\n    \"c6114c65e295552ab1019e2b046b10e\": [\n        \"3-b06fcd1c1c9e0ec7c480ee8aa467bf3b\",\n        \"3-0e871ef78849b0c206091f1a7af6ec41\"\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Database Information During Compaction in CouchDB\nDESCRIPTION: This snippet shows how to retrieve database information during the compaction process. The response includes a 'compact_running' field indicating the compaction status.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/maintenance/compaction.rst#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncurl http://adm:pass@localhost:5984/my_db\n```\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200 OK\nCache-Control: must-revalidate\nContent-Length: 246\nContent-Type: application/json\nDate: Wed, 19 Jun 2013 16:51:20 GMT\nServer: CouchDB (Erlang/OTP)\n\n{\n    \"committed_update_seq\": 76215,\n    \"compact_running\": true,\n    \"db_name\": \"my_db\",\n    \"disk_format_version\": 6,\n    \"doc_count\": 5091,\n    \"doc_del_count\": 0,\n    \"instance_start_time\": \"0\",\n    \"purge_seq\": 0,\n    \"sizes\": {\n      \"active\": 3787996,\n      \"disk\": 17703025,\n      \"external\": 4763321\n    },\n    \"update_seq\": 76215\n}\n```\n\n----------------------------------------\n\nTITLE: Performing Large Queries and Benchmarks in CouchDB - JavaScript\nDESCRIPTION: The 'largeQueries' function performs extensive scans on the CouchDB skip list, measuring the performance of different querying techniques. It compares results from a full range scan with those retrieved from level 0 to ensure consistency.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/rfcs/012-fdb-reduce.md#2025-04-21_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nconst largeQueries = async () => {\n    let result;\n    const [startkey, endkey] = await db.doTransaction(async tn => {\n        const start = await getKeyAfter(tn, '0', 0);\n        const end = await getPrevious(tn, END, 0);\n\n        return [start.key, end.key];\n    });\n\n    for (let i = 0; i < 10; i++) {\n        const opts = {\n            group_level: 1,\n            startkey,\n            endkey\n        };\n        console.log('range', startkey, endkey);\n        console.time('query');\n        result = await query(opts);\n        console.timeEnd('query');\n\n        console.time('level0');\n        const level1Result = await queryLevel0(opts);\n        console.timeEnd('level0');\n        assert.deepEqual(result, level1Result);\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Demonstrating CouchDB Form Submission with Curl Commands\nDESCRIPTION: This bash script shows how to use curl commands to create a design document with an update function, submit form data to CouchDB, and retrieve the created document.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/best-practices/forms.rst#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ curl -X PUT adm:pass@localhost:5984/testdb/_design/myddoc -d '{ \"updates\": { \"contactform\": \"function(doc, req) { ... }\" } }'\n{\"ok\":true,\"id\":\"_design/myddoc\",\"rev\":\"1-2a2b0951fcaf7287817573b03bba02ed\"}\n\n$ curl --data \"name=Lin&email=lin@example.com&message=I Love CouchDB\" http://adm:pass@localhost:5984/testdb/_design/myddoc/_update/contactform\n*   Trying 127.0.0.1...\n* TCP_NODELAY set\n* Connected to localhost (127.0.0.1) port 5984 (#1)\n> POST /testdb/_design/myddoc/_update/contactform HTTP/1.1\n> Host: localhost:5984\n> User-Agent: curl/7.59.0\n> Accept: */*\n> Content-Length: 53\n> Content-Type: application/x-www-form-urlencoded\n>\n* upload completely sent off: 53 out of 53 bytes\n< HTTP/1.1 201 Created\n< Content-Length: 16\n< Content-Type: text/html; charset=utf-8\n< Date: Thu, 05 Apr 2018 19:56:42 GMT\n< Server: CouchDB/2.2.0-948a1311c (Erlang OTP/19)\n< X-Couch-Id: lin%40example.com_2018-04-05T19:51:22.278Z\n< X-Couch-Request-ID: 03a5f4fbe0\n< X-Couch-Update-NewRev: 1-34483732407fcc6cfc5b60ace48b9da9\n< X-CouchDB-Body-Time: 0\n<\n* Connection #1 to host localhost left intact\n{\"success\":\"ok\"}\n\n$ curl http://adm:pass@localhost:5984/testdb/lin\\@example.com_2018-04-05T19:51:22.278Z\n{\"_id\":\"lin@example.com_2018-04-05T19:51:22.278Z\",\"_rev\":\"1-34483732407fcc6cfc5b60ace48b9da9\",\"name\":\"Lin\",\"email\":\"lin@example.com\",\"message\":\"I Love CouchDB\"}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Version Information in CouchDB HTTP API\nDESCRIPTION: Makes a GET request to the /_node/_local/_versions endpoint to retrieve system-level version information for the running CouchDB server. Returns a JSON object with various version details.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/server/common.rst#2025-04-21_snippet_34\n\nLANGUAGE: http\nCODE:\n```\nGET /_node/_local/_versions HTTP/1.1\nAccept: application/json\nHost: localhost:5984\n```\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200 OK\nCache-Control: must-revalidate\nContent-Length: 368\nContent-Type: application/json\nDate: Sat, 03 Sep 2022 08:12:12 GMT\nServer: CouchDB/3.2.2-ea382cf (Erlang OTP/25)\n\n{\n    \"javascript_engine\": {\n        \"version\": \"91\",\n        \"name\": \"spidermonkey\"\n    },\n    \"erlang\": {\n        \"version\": \"25.0.4\",\n        \"supported_hashes\": [\n            \"sha\",\n            \"sha224\",\n            \"sha256\"\n        ]\n    },\n    \"clouseau\": {\n        \"version\": \"2.24.0\"\n    },\n    \"collation_driver\": {\n        \"name\": \"libicu\",\n        \"library_version\": \"70.1\",\n        \"collator_version\": \"153.112\",\n        \"collation_algorithm_version\": \"14\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: HTTP Response from CouchDB _db_updates Endpoint\nDESCRIPTION: Example HTTP response from the _db_updates endpoint showing database creation and deletion events. The response includes a results array with database events and a last_seq field for tracking the sequence position.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/server/common.rst#2025-04-21_snippet_9\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200 OK\nCache-Control: must-revalidate\nContent-Type: application/json\nDate: Sat, 18 Mar 2017 19:01:35 GMT\nEtag: \"C1KU98Y6H0LGM7EQQYL6VSL07\"\nServer: CouchDB/2.0.0 (Erlang OTP/17)\nTransfer-Encoding: chunked\nX-Couch-Request-ID: ad87efc7ff\nX-CouchDB-Body-Time: 0\n\n{\n    \"results\":[\n        {\"db_name\":\"mailbox\",\"type\":\"created\",\"seq\":\"1-g1AAAAFReJzLYWBg4MhgTmHgzcvPy09JdcjLz8gvLskBCjMlMiTJ____PyuDOZExFyjAnmJhkWaeaIquGIf2JAUgmWQPMiGRAZcaB5CaePxqEkBq6vGqyWMBkgwNQAqobD4h\"},\n        {\"db_name\":\"mailbox\",\"type\":\"deleted\",\"seq\":\"2-g1AAAAFReJzLYWBg4MhgTmHgzcvPy09JdcjLz8gvLskBCjMlMiTJ____PyuDOZEpFyjAnmJhkWaeaIquGIf2JAUgmWQPMiGRAZcaB5CaePxqEkBq6vGqyWMBkgwNQAqobD4hdQsg6vYTUncAou4-IXUPIOpA7ssCAIFHa60\"}\n    ],\n    \"last_seq\": \"2-g1AAAAFReJzLYWBg4MhgTmHgzcvPy09JdcjLz8gvLskBCjMlMiTJ____PyuDOZEpFyjAnmJhkWaeaIquGIf2JAUgmWQPMiGRAZcaB5CaePxqEkBq6vGqyWMBkgwNQAqobD4hdQsg6vYTUncAou4-IXUPIOpA7ssCAIFHa60\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Field Name Index in JavaScript\nDESCRIPTION: This JavaScript function defines an index to emit sensor IDs based on their field names, facilitating the querying of sensors by field within a partitioned database.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/partitioned-dbs/index.rst#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfunction(doc) {\n    if(doc._id.indexOf(\"sensor-reading-\") != 0) {\n        return;\n    }\n    emit(doc.field_name, doc.sensor_id)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing CouchDB Update Function in JavaScript\nDESCRIPTION: This JavaScript function is an example of a CouchDB update function. It checks if a document exists, adds a new ingredient to the document if it does, and returns appropriate responses.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/ddoc/render.rst#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nfunction(doc, req) {\n    if (!doc){\n        return [null, {'code': 400,\n                       'json': {'error': 'missed',\n                                'reason': 'no document to update'}}]\n    } else {\n        doc.ingredients.push(req.body);\n        return [doc, {'json': {'status': 'ok'}}];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Crashing Replications in CouchDB\nDESCRIPTION: This JavaScript snippet describes a scenario where a replication process crashes due to a missing source database in CouchDB. It showcases automatic retries and the logging of crash history, enabling users to troubleshoot and resolve issues causing failures.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/replication/replicator.rst#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"_id\": \"my_rep_crashing\",\n    \"source\": \"http://user:password@myserver.com/missing\",\n    \"target\": {\n        \"url\": \"http://localhost:5984/bar\",\n        \"auth\": {\n            \"basic\": {\n                \"username\": \"adm\",\n                \"password\": \"pass\"\n            }\n        }\n    },\n    \"create_target\": true,\n    \"continuous\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Sorting with Default Direction in CouchDB Find API (JavaScript)\nDESCRIPTION: Simplified JSON syntax for sorting by multiple fields using the default ascending direction. When direction is omitted, CouchDB Find API defaults to ascending order.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/database/find.rst#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n[\"fieldNameA\", \"fieldNameB\"]\n```\n\n----------------------------------------\n\nTITLE: Copying to an Existing Document with Revision Specification in CouchDB via HTTP\nDESCRIPTION: Demonstrates how to copy a document to an existing target document by specifying revisions for both the source and destination documents using rev parameters.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/document/common.rst#2025-04-21_snippet_20\n\nLANGUAGE: http\nCODE:\n```\nCOPY /recipes/SpaghettiWithMeatballs?rev=8-6f5ad8db0f34af24a6e0984cd1a6cfb9 HTTP/1.1\nAccept: application/json\nDestination: SpaghettiWithMeatballs_Original?rev=1-917fa2381192822767f010b95b45325b\nHost: localhost:5984\n```\n\n----------------------------------------\n\nTITLE: CouchDB Smoosh Status API Response\nDESCRIPTION: Example response from the CouchDB Smoosh status API, showing the state of compaction channels, including active and waiting jobs with their priorities.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/server/common.rst#2025-04-21_snippet_32\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200 OK\nContent-Type: application/json\n\n{\n    \"channels\": {\n        \"slack_dbs\": {\n            \"starting\": 0,\n            \"waiting\": {\n                \"size\": 0,\n                \"min\": 0,\n                \"max\": 0\n            },\n            \"active\": 0\n        },\n        \"ratio_dbs\": {\n            \"starting\": 0,\n            \"waiting\": {\n                \"size\": 56,\n                \"min\": 1.125,\n                \"max\": 11.0625\n            },\n            \"active\": 0\n        },\n        \"ratio_views\": {\n            \"starting\": 0,\n            \"waiting\": {\n\n```\n\n----------------------------------------\n\nTITLE: Setting Up CouchDB Repository on RedHat/CentOS (versions below 9)\nDESCRIPTION: Commands to set up the Apache CouchDB package repository on RedHat or CentOS systems prior to version 9. This includes installing the yum-utils package and adding the CouchDB repository.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/install/unix.rst#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo yum install -y yum-utils\nsudo yum-config-manager --add-repo https://couchdb.apache.org/repo/couchdb.repo\n```\n\n----------------------------------------\n\nTITLE: Pull Replication with CouchDB\nDESCRIPTION: This `curl` command demonstrates a pull replication, where a local CouchDB database pulls changes from a remote source. It requires the `curl` command-line tool and access to both the source and target CouchDB instances. Replace placeholders with the actual addresses and credentials.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/intro/api.rst#2025-04-21_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\n\"curl -X POST http://admin:password@127.0.0.1:5984/_replicate \\\n         -d '{\\\"source\\\":\\\"http://user:password@example.org:5984/albums-replica\\\",\\\"target\\\":\\\"http://admin:password@127.0.0.1:5984/albums\\\"}' \\\n         -H \\\"Content-Type:application/json\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Testing Standard Analyzer via Command Line\nDESCRIPTION: This shell command uses `curl` to send a request to the `_search_analyze` endpoint in CouchDB to test the standard analyzer. It sets the Content-Type to application/json and provides the analyzer and text data as a JSON payload. The command includes placeholder `$HOST` for the CouchDB host and port.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/ddocs/search.rst#2025-04-21_snippet_11\n\nLANGUAGE: sh\nCODE:\n```\ncurl 'https://$HOST:5984/_search_analyze' -H 'Content-Type: application/json'\n    -d '{\"analyzer\":\"standard\", \"text\":\"ablanks@renovations.com\"}'\n```\n\n----------------------------------------\n\nTITLE: JWT Authentication Configuration\nDESCRIPTION: INI configuration for enabling JWT authentication handler in CouchDB\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/server/authn.rst#2025-04-21_snippet_7\n\nLANGUAGE: ini\nCODE:\n```\n[chttpd]\nauthentication_handlers = {chttpd_auth, cookie_authentication_handler}, {chttpd_auth, jwt_authentication_handler}, {chttpd_auth, default_authentication_handler}\n```\n\n----------------------------------------\n\nTITLE: Search Query JSON Body in CouchDB Nouveau Search (JavaScript)\nDESCRIPTION: Example of a JSON document containing a search request for CouchDB Nouveau search. It demonstrates how to structure the query parameters in JSON format.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/ddocs/nouveau.rst#2025-04-21_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"q\": \"index:my query\",\n    \"sort\": \"foo\",\n    \"limit\": 3\n}\n```\n\n----------------------------------------\n\nTITLE: Pagination Flow Control Pseudo-code\nDESCRIPTION: Pseudo-JavaScript code showing the basic logic flow for implementing pagination controls including previous and next page links.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/ddocs/views/pagination.rst#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar result = new Result();\nvar page = result.getPage();\n\npage.display();\n\nif(result.hasPrev()) {\n    page.display_link('prev');\n}\n\nif(result.hasNext()) {\n    page.display_link('next');\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Checkpoints in CouchDB\nDESCRIPTION: Controls whether CouchDB creates checkpoints during and after replication for efficient resumption.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/config/replicator.rst#2025-04-21_snippet_19\n\nLANGUAGE: ini\nCODE:\n```\n[replicator]\nuse_checkpoints = true\n```\n\n----------------------------------------\n\nTITLE: Setting Node Zones for CouchDB Placement Using Bash\nDESCRIPTION: This command updates the nodeâ€™s document in the special '/_nodes' database to define its zone attribute. This configuration is crucial for specifying placement rules for shard replicas during database creation.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/cluster/sharding.rst#2025-04-21_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n$ curl -X PUT http://adm:pass@localhost:5984/_node/_local/_nodes/{node-name} \\\n    -d '{ \\\n        \"_id\": \"{node-name}\",\\\n        \"_rev\": \"{rev}\",\\\n        \"zone\": \"{zone-name}\"\\\n        }'\n```\n\n----------------------------------------\n\nTITLE: Requesting a Show Function With a Document in CouchDB\nDESCRIPTION: HTTP GET request to execute a show function for a specific document (SpaghettiWithMeatballs), which will return the document's description field.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/ddoc/render.rst#2025-04-21_snippet_3\n\nLANGUAGE: http\nCODE:\n```\nGET /recipes/_design/recipe/_show/description/SpaghettiWithMeatballs HTTP/1.1\nAccept: application/json\nHost: localhost:5984\n```\n\n----------------------------------------\n\nTITLE: Show Function Returning a Base64 Encoded Image in JavaScript\nDESCRIPTION: This JavaScript code defines a show function that returns a base64 encoded PNG image. It sets the Content-Type header to 'image/png'. The function takes a document (doc) and a request object (req) as input, and outputs an object with headers and a base64 encoded body for the image.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/ddocs/ddocs.rst#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n\"function(doc, req){\n    return {\n        'headers': {\n            'Content-Type' : 'image/png',\n        },\n        'base64': ''.concat(\n            'iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAMAAAAoLQ9TAAAAsV',\n            'BMVEUAAAD////////////////////////5ur3rEBn////////////////wDBL/',\n            'AADuBAe9EB3IEBz/7+//X1/qBQn2AgP/f3/ilpzsDxfpChDtDhXeCA76AQH/v7',\n            '/84eLyWV/uc3bJPEf/Dw/uw8bRWmP1h4zxSlD6YGHuQ0f6g4XyQkXvCA36MDH6',\n            'wMH/z8/yAwX64ODeh47BHiv/Ly/20dLQLTj98PDXWmP/Pz//39/wGyJ7Iy9JAA',\n            'AADHRSTlMAbw8vf08/bz+Pv19jK/W3AAAAg0lEQVR4Xp3LRQ4DQRBD0QqTm4Y5',\n            'zMxw/4OleiJlHeUtv2X6RbNO1Uqj9g0RMCuQO0vBIg4vMFeOpCWIWmDOw82fZx',\n            'vaND1c8OG4vrdOqD8YwgpDYDxRgkSm5rwu0nQVBJuMg++pLXZyr5jnc1BaH4GT',\n            'LvEliY253nA3pVhQqdPt0f/erJkMGMB8xucAAAAASUVORK5CYII=')\n    }\n}\"\n```\n\n----------------------------------------\n\nTITLE: Revision Tree Visualization\nDESCRIPTION: This code block visualizes a revision tree in CouchDB, illustrating how conflicting updates create branches in the document's history. It shows how revisions are linked and how conflicts arise when multiple branches exist.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/replication/conflicts.rst#2025-04-21_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n      ,--> r2a\n    r1 --> r2b\n      `--> r2c\n```\n\n----------------------------------------\n\nTITLE: Testing Standard Analyzer in CouchDB Nouveau Search (HTTP)\nDESCRIPTION: Example of using HTTP POST to test the standard analyzer in CouchDB Nouveau search. It demonstrates how to send a request to the _nouveau_analyze endpoint.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/ddocs/nouveau.rst#2025-04-21_snippet_8\n\nLANGUAGE: http\nCODE:\n```\nPOST /_nouveau_analyze HTTP/1.1\nContent-Type: application/json\n{\"analyzer\":\"standard\", \"text\":\"ablanks@renovations.com\"}\n```\n\n----------------------------------------\n\nTITLE: Defining Stop Words in CouchDB Analyzer\nDESCRIPTION: This JavaScript example illustrates how to define stop words for a CouchDB analyzer within a design document.  It configures the \"portuguese\" analyzer and specifies a list of stop words (\"foo\", \"bar\", \"baz\") that will not be indexed. This allows filtering out common or irrelevant words from the search index.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/ddocs/search.rst#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"_id\": \"_design/stop_words_example\",\n    \"indexes\": {\n        \"INDEX_NAME\": {\n            \"analyzer\": {\n                \"name\": \"portuguese\",\n                \"stopwords\": [\n                    \"foo\",\n                    \"bar\",\n                    \"baz\"\n                ]\n            },\n            \"index\": \"function (doc) { ... }\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: FoundationDB Data Model for CouchDB Background Jobs\nDESCRIPTION: Defines the key-value structure for storing job data in FoundationDB. The model includes storage for job data, pending jobs, watches, activity timeouts, and activity sequences to support the job management system.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/rfcs/007-background-jobs.md#2025-04-21_snippet_1\n\nLANGUAGE: erlang\nCODE:\n```\n * `(\"couch_jobs\", \"data\", Type, JobId) = (Sequence, JobLock, ScheduledTime, Resubmit, JobData)`\n * `(\"couch_jobs\", \"pending\", Type, ScheduledTime, JobId) = \"\"`\n * `(\"couch_jobs\", \"watches_pending\", Type) = Sequence`\n * `(\"couch_jobs\", \"watches_activity\", Type) = Sequence`\n * `(\"couch_jobs\", \"activity_timeout\", Type) = ActivityTimeout`\n * `(\"couch_jobs\", \"activity\", Type, Sequence) = JobId`\n```\n\n----------------------------------------\n\nTITLE: Implementing a Basic Update Function in CouchDB JavaScript\nDESCRIPTION: This update function demonstrates handling document creation, updating, and returning appropriate responses. It uses the request context and document state to determine the action and response.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/ddocs/ddocs.rst#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nfunction(doc, req){\n    if (!doc){\n        if ('id' in req && req['id']){\n            // create new document\n            return [{'_id': req['id']}, 'New World']\n        }\n        // change nothing in database\n        return [null, 'Empty World']\n    }\n    doc['world'] = 'hello';\n    doc['edited_by'] = req['userCtx']['name']\n    return [doc, 'Edited World!']\n}\n```\n\n----------------------------------------\n\nTITLE: Error Handling for Invalid JSON Object - JSON\nDESCRIPTION: This code snippet demonstrates an error message format returned when the selector object is not a well-formed JSON. The error prompts users to ensure their JSON objects are correctly structured to proceed with change feeds.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/database/changes.rst#2025-04-21_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"error\": \"bad request\",\n  \"reason\": \"Selector error: expected a JSON object\"\n}\n```\n\n----------------------------------------\n\nTITLE: Map Function for Querying Embedded Comments by Author\nDESCRIPTION: View function that emits comments embedded within blog post documents, keyed by comment author for easy retrieval.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/ddocs/views/joins.rst#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nfunction(doc) {\n    for (var i in doc.comments) {\n        emit(doc.comments[i].author, doc.comments[i].content);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Partitioned Index with cURL\nDESCRIPTION: Example of querying a partitioned search index using cURL command with include_docs and query parameters.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/ddocs/search.rst#2025-04-21_snippet_15\n\nLANGUAGE: sh\nCODE:\n```\ncurl https://$HOST:5984/$DATABASE/_partition/$PARTITION_KEY/_design/$DDOC/_search/$INDEX_NAME?include_docs=true\\&query=\"*:*\"\\&limit=1 \\\n```\n\n----------------------------------------\n\nTITLE: Retrieving Local Documents with GET Request in HTTP\nDESCRIPTION: Sends a GET request to retrieve a list of all local documents in a CouchDB database. The response includes document IDs, revisions, and optionally full document contents.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/local.rst#2025-04-21_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nGET /db/_local_docs HTTP/1.1\nAccept: application/json\nHost: localhost:5984\n```\n\n----------------------------------------\n\nTITLE: Retrieving Resharding Job State in CouchDB (HTTP GET)\nDESCRIPTION: This snippet shows how to retrieve the state of a single resharding job using an HTTP GET request. The response includes the current state and any associated reason for that state.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/server/common.rst#2025-04-21_snippet_49\n\nLANGUAGE: http\nCODE:\n```\nGET /_reshard/jobs/001-b3da04f969bbd682faaab5a6c373705cbcca23f732c386bb1a608cfbcfe9faff/state HTTP/1.1\nAccept: application/json\nHost: localhost:5984\n```\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200 OK\nContent-Type: application/json\n\n{\n    \"reason\": null,\n    \"state\": \"running\"\n}\n```\n\n----------------------------------------\n\nTITLE: CouchDB Lockout Threshold Configuration\nDESCRIPTION: Configuration setting for the number of failed authentication attempts before lockout is triggered.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/config/auth.rst#2025-04-21_snippet_11\n\nLANGUAGE: ini\nCODE:\n```\n[chttpd_auth_lockout]\nthreshold = 5\n```\n\n----------------------------------------\n\nTITLE: Setting File Compression Method in CouchDB\nDESCRIPTION: Specifies the compression method for database and view index files. Options include 'none', 'snappy', and 'deflate_N' (where N is the compression level).\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/config/couchdb.rst#2025-04-21_snippet_4\n\nLANGUAGE: ini\nCODE:\n```\n[couchdb]\nfile_compression = snappy\n```\n\n----------------------------------------\n\nTITLE: HTTP Response from CouchDB _replicate Endpoint\nDESCRIPTION: Partial example HTTP response from the _replicate endpoint showing the beginning of a successful replication operation. The response includes history with statistics about the replication such as docs read, written, and bulk_get operations.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/server/common.rst#2025-04-21_snippet_13\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200 OK\nCache-Control: must-revalidate\nContent-Length: 692\nContent-Type: application/json\nDate: Sun, 11 Aug 2013 20:38:50 GMT\nServer: CouchDB (Erlang/OTP)\n\n{\n    \"history\": [\n        {\n            \"doc_write_failures\": 0,\n            \"docs_read\": 10,\n            \"bulk_get_attempts\": 10,\n            \"bulk_get_docs\": 10,\n\n\n```\n\n----------------------------------------\n\nTITLE: Using $elemMatch operator with primary index in CouchDB\nDESCRIPTION: This snippet demonstrates the use of the ``$elemMatch`` operator in a CouchDB query with the primary index (``_all_docs``). The query selects documents where the ``genre`` field is an array and contains at least one element equal to \"Horror\".  The `_id` must be greater than null.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/ddocs/mango.rst#2025-04-21_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"_id\": { \"$gt\": null },\n    \"genre\": {\n        \"$elemMatch\": {\n            \"$eq\": \"Horror\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Partitioned Index with HTTP GET\nDESCRIPTION: Example of querying a partitioned search index using HTTP GET request with include_docs and query parameters.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/ddocs/search.rst#2025-04-21_snippet_13\n\nLANGUAGE: http\nCODE:\n```\nGET /$DATABASE/_partition/$PARTITION_KEY/_design/$DDOC/_search/$INDEX_NAME?include_docs=true&query=\"*:*\"&limit=1 HTTP/1.1\nContent-Type: application/json\n```\n\n----------------------------------------\n\nTITLE: Configuring XXHash Checksums in CouchDB\nDESCRIPTION: Configuration setting to disable XXHash checksums for write operations. This can improve performance, particularly when dealing with larger document sizes.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/config/couchdb.rst#2025-04-21_snippet_15\n\nLANGUAGE: ini\nCODE:\n```\n[couchdb]\nwrite_xxhash_checksums = false\n```\n\n----------------------------------------\n\nTITLE: Creating CouchDB View Using cURL\nDESCRIPTION: Console command demonstrating how to create a design document containing a view using cURL.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/ddocs/views/intro.rst#2025-04-21_snippet_2\n\nLANGUAGE: console\nCODE:\n```\ncurl -X PUT http://admin:password@127.0.0.1:5984/db/_design/my_ddoc\n     -d '{\"views\":{\"my_filter\":{\"map\":\n         \"function(doc) { if(doc.date && doc.title) { emit(doc.date, doc.title); }}\"}}}'\n```\n\n----------------------------------------\n\nTITLE: Faceted Search Index Function in CouchDB Nouveau Search (JavaScript)\nDESCRIPTION: Example of a search index function for faceted searching in CouchDB Nouveau search. It demonstrates how to index multiple fields for faceted queries.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/ddocs/nouveau.rst#2025-04-21_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nfunction(doc) {\n    index(\"string\", \"type\", doc.type);\n    index(\"double\", \"price\", doc.price);\n}\n```\n\n----------------------------------------\n\nTITLE: Nginx Subdirectory Proxy Configuration\nDESCRIPTION: Nginx configuration for serving CouchDB under a subdirectory path. Includes URL rewriting rules and session handling for replication support.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/best-practices/reverse-proxies.rst#2025-04-21_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nlocation /couchdb {\n    rewrite ^ $request_uri;\n    rewrite ^/couchdb/(.*) /$1 break;\n    proxy_pass http://localhost:5984$uri;\n    proxy_redirect off;\n    proxy_buffering off;\n    proxy_set_header Host $host;\n    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Caddy 2 Configuration\nDESCRIPTION: Basic Caddy 2 configuration for proxying requests to CouchDB with automatic HTTPS support.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/best-practices/reverse-proxies.rst#2025-04-21_snippet_6\n\nLANGUAGE: text\nCODE:\n```\ndomain.com {\n\n   reverse_proxy localhost:5984\n\n}\n```\n\n----------------------------------------\n\nTITLE: Nginx Session Configuration\nDESCRIPTION: Nginx configuration for handling CouchDB session endpoints, required for session-based replication since CouchDB 2.3.0.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/best-practices/reverse-proxies.rst#2025-04-21_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nlocation /_session {\n    proxy_pass http://localhost:5984/_session;\n    proxy_redirect off;\n    proxy_buffering off;\n    proxy_set_header Host $host;\n    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Checkpoint Interval in CouchDB\nDESCRIPTION: Sets the interval in milliseconds between replication checkpoints.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/config/replicator.rst#2025-04-21_snippet_18\n\nLANGUAGE: ini\nCODE:\n```\n[replicator]\ncheckpoint_interval = 5000\n```\n\n----------------------------------------\n\nTITLE: Fetching Statistics with couch_stats in Erlang\nDESCRIPTION: This code snippet demonstrates how to fetch current statistics values from the couch_stats module, which returns current values of all counters, gauges, and histogram statistics for the last 10 seconds.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/couch_stats/README.md#2025-04-21_snippet_0\n\nLANGUAGE: erlang\nCODE:\n```\ncouch_stats:fetch()\n```\n\n----------------------------------------\n\nTITLE: Setting JavaScript Engine in CouchDB Configuration\nDESCRIPTION: This snippet shows how to specify the JavaScript engine (SpiderMonkey or QuickJS) in the CouchDB configuration file. It uses the `js_engine` option under the `[couchdb]` section.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/whatsnew/3.4.rst#2025-04-21_snippet_1\n\nLANGUAGE: None\nCODE:\n```\n\t\t[couchdb]\n\t\tjs_engine = spidermonkey | quickjs\n```\n\n----------------------------------------\n\nTITLE: Handling Incorrect Password in CouchDB Authentication (JavaScript)\nDESCRIPTION: This snippet shows the JSON response from CouchDB when an incorrect password is provided during authentication. It includes an error message indicating unauthorized access due to incorrect credentials.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/intro/security.rst#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n{\"error\":\"unauthorized\",\"reason\":\"Name or password is incorrect.\"}\n```\n\n----------------------------------------\n\nTITLE: Updating CouchDB Configuration via HTTP PUT\nDESCRIPTION: This snippet demonstrates how to update CouchDB configuration settings using HTTP PUT requests with `curl`. It shows how to set the bind address, UUID, and shared HTTP secret for cookie creation.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/setup/cluster.rst#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X PUT http://<server-IP|FQDN>:5984/_node/_local/_config/chttpd/bind_address -d '\"0.0.0.0\"'\n```\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X PUT http://<server-IP|FQDN>:5984/_node/_local/_config/couchdb/uuid -d '\"FIRST-UUID-GOES-HERE\"'\n```\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X PUT http://<server-IP|FQDN>:5984/_node/_local/_config/chttpd_auth/secret -d '\"SECOND-UUID-GOES-HERE\"'\n```\n\n----------------------------------------\n\nTITLE: Using $allMatch operator with primary index in CouchDB\nDESCRIPTION: This snippet demonstrates the use of the ``$allMatch`` operator in a CouchDB query with the primary index (``_all_docs``). The query selects documents where the ``genre`` field is an array and all elements within that array are equal to \"Horror\". The `_id` must be greater than null.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/ddocs/mango.rst#2025-04-21_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"_id\": { \"$gt\": null },\n    \"genre\": {\n        \"$allMatch\": {\n            \"$eq\": \"Horror\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving CouchDB Database Information\nDESCRIPTION: Using cURL with the GET method to retrieve information about a specific database. The response includes details like document count and size metrics.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/intro/curl.rst#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nshell> curl -X GET http://adm:pass@127.0.0.1:5984/demo\n{\n    \"compact_running\" : false,\n    \"doc_count\" : 0,\n    \"db_name\" : \"demo\",\n    \"purge_seq\" : 0,\n    \"committed_update_seq\" : 0,\n    \"doc_del_count\" : 0,\n    \"disk_format_version\" : 5,\n    \"update_seq\" : 0,\n    \"instance_start_time\" : \"0\",\n    \"disk_size\" : 79\n}\n```\n\n----------------------------------------\n\nTITLE: Date Sorting View Examples\nDESCRIPTION: Two approaches for sorting documents by date: using timestamp conversion and lexicographical string format\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/ddocs/views/collation.rst#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nemit(Date.parse(doc.created_at).getTime(), null);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nemit(doc.created_at, null);\n```\n\n----------------------------------------\n\nTITLE: Querying Replication Document States in CouchDB\nDESCRIPTION: The _scheduler/docs endpoint shows the state of all replications started from documents in the _replicator database, including failed and completed jobs. This improves upon having to read replication documents directly.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/whatsnew/2.1.rst#2025-04-21_snippet_4\n\nLANGUAGE: erlang\nCODE:\n```\n_scheduler/docs\n```\n\n----------------------------------------\n\nTITLE: Adding or Removing CouchDB Cluster Nodes via API\nDESCRIPTION: These snippets demonstrate how to add or remove nodes from a CouchDB cluster using PUT and DELETE requests to the `_node/_local/_nodes` endpoint. This can be useful if the `all_nodes` and `cluster_nodes` lists don't match after enabling clustering.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/setup/cluster.rst#2025-04-21_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nPUT ``/_node/_local/_nodes/couchdb@<reachable-ip-address|fully-qualified-domain-name>``\n```\n\nLANGUAGE: bash\nCODE:\n```\nDELETE ``/_node/_local/_nodes/couchdb@<reachable-ip-address|fully-qualified-domain-name>``\n```\n\n----------------------------------------\n\nTITLE: Statistics Retrieval Request/Response\nDESCRIPTION: Example of requesting statistics from CouchDB's /_node/_local/_stats endpoint, showing how to fetch specific metrics with their detailed statistical breakdown.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/server/common.rst#2025-04-21_snippet_28\n\nLANGUAGE: http\nCODE:\n```\nGET /_node/_local/_stats/couchdb/request_time HTTP/1.1\nAccept: application/json\nHost: localhost:5984\n```\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200 OK\nCache-Control: must-revalidate\nContent-Length: 187\nContent-Type: application/json\nDate: Sat, 10 Aug 2013 11:41:11 GMT\nServer: CouchDB (Erlang/OTP)\n\n{\n  \"value\": {\n    \"min\": 0,\n    \"max\": 0,\n    \"arithmetic_mean\": 0,\n    \"geometric_mean\": 0,\n    \"harmonic_mean\": 0,\n    \"median\": 0,\n    \"variance\": 0,\n    \"standard_deviation\": 0,\n    \"skewness\": 0,\n    \"kurtosis\": 0,\n    \"percentile\": [\n      [\n        50,\n        0\n      ],\n      [\n        75,\n        0\n      ],\n      [\n        90,\n        0\n      ],\n      [\n        95,\n        0\n      ],\n      [\n        99,\n        0\n      ],\n      [\n        999,\n        0\n      ]\n    ],\n    \"histogram\": [\n      [\n        0,\n        0\n      ]\n    ],\n    \"n\": 0\n  },\n  \"type\": \"histogram\",\n  \"desc\": \"length of a request inside CouchDB without MochiWeb\"\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Normal Changes Feed in CouchDB\nDESCRIPTION: HTTP request and response for fetching changes in normal feed mode with all_docs style and heartbeat. The response includes a batch of changes with sequence IDs, document IDs, and revision information.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/replication/protocol.rst#2025-04-21_snippet_13\n\nLANGUAGE: http\nCODE:\n```\nGET /source/_changes?feed=normal&style=all_docs&heartbeat=10000 HTTP/1.1\nAccept: application/json\nHost: localhost:5984\nUser-Agent: CouchDB\n```\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200 OK\nCache-Control: must-revalidate\nContent-Type: application/json\nDate: Fri, 09 May 2014 16:20:41 GMT\nServer: CouchDB (Erlang OTP)\nTransfer-Encoding: chunked\n\n{\"results\":[\n{\"seq\":14,\"id\":\"f957f41e\",\"changes\":[{\"rev\":\"3-46a3\"}],\"deleted\":true}\n{\"seq\":29,\"id\":\"ddf339dd\",\"changes\":[{\"rev\":\"10-304b\"}]}\n...]}\n```\n\n----------------------------------------\n\nTITLE: Executing Partitioned View Query - GET Request\nDESCRIPTION: Makes a GET request to execute a view query scoped to a specific partition.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/partitioned-dbs.rst#2025-04-21_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nGET /db/_partition/sensor-260/_design/sensor-readings/_view/by_sensor HTTP/1.1\nAccept: application/json\nHost: localhost:5984\n```\n\n----------------------------------------\n\nTITLE: JWT Authentication Response\nDESCRIPTION: HTTP response showing successful JWT authentication with user context and authentication info\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/server/authn.rst#2025-04-21_snippet_9\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200 OK\nCache-Control: must-revalidate\nContent-Length: 188\nContent-Type: application/json\nDate: Sun, 19 Apr 2020 08:29:15 GMT\nServer: CouchDB (Erlang/OTP)\n\n{\n    \"info\": {\n        \"authenticated\": \"jwt\",\n        \"authentication_db\": \"_users\",\n        \"authentication_handlers\": [\n            \"cookie\",\n            \"proxy\",\n            \"default\"\n        ]\n    },\n    \"ok\": true,\n    \"userCtx\": {\n        \"name\": \"foo\",\n        \"roles\": [\n            \"users\",\n            \"blogger\"\n        ]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Database Compaction Checkpoint Trigger in CouchDB (INI)\nDESCRIPTION: Configures the checkpoint trigger for database compaction. A checkpoint is triggered after the specified number of bytes have been successfully copied to the compacted database.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/config/compaction.rst#2025-04-21_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[database_compaction]\ncheckpoint_after = 5242880\n```\n\n----------------------------------------\n\nTITLE: Documenting Error Details for Crashed Replications\nDESCRIPTION: This JSON snippet shows a summary of the crashing state of a replication in CouchDB, enumerating error counts and last known error details. These insights are critical for diagnosing the state and planning remediation actions.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/replication/replicator.rst#2025-04-21_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"database\": \"_replicator\",\n    \"doc_id\": \"my_rep_crashing\",\n    \"error_count\": 6,\n    \"id\": \"cb78391640ed34e9578e638d9bb00e44+create_target\",\n    \"info\": {\n         \"error\": \"db_not_found: could not open http://myserver.com/missing/\"\n    },\n    \"last_updated\": \"2017-04-05T20:55:10Z\",\n    \"node\": \"node1@127.0.0.1\",\n    \"source_proxy\": null,\n    \"target_proxy\": null,\n    \"source\": \"http://myserver.com/missing/\",\n    \"start_time\": \"2017-04-05T20:38:34Z\",\n    \"state\": \"crashing\",\n    \"target\": \"http://localhost:5984/bar/\"\n}\n```\n\n----------------------------------------\n\nTITLE: HTTP GET Request to /_scheduler/docs\nDESCRIPTION: Example HTTP GET request to retrieve information about replication documents from the _replicator database.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/server/common.rst#2025-04-21_snippet_22\n\nLANGUAGE: http\nCODE:\n```\nGET /_scheduler/docs HTTP/1.1\nAccept: application/json\nHost: localhost:5984\n```\n\n----------------------------------------\n\nTITLE: Example CouchDB View Result for Blog Posts and Comments\nDESCRIPTION: This snippet shows an example of the view result structure when querying for blog posts and comments. It demonstrates how the complex keys are used to organize the documents, with posts appearing before their associated comments.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/ddocs/views/joins.rst#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"total_rows\": 5, \"offset\": 0, \"rows\": [{\n            \"id\": \"myslug\",\n            \"key\": [\"myslug\", 0],\n            \"value\": null\n        }, {\n            \"id\": \"ABCDEF\",\n            \"key\": [\"myslug\", 1],\n            \"value\": null\n        }, {\n            \"id\": \"DEFABC\",\n            \"key\": [\"myslug\", 1],\n            \"value\": null\n        }, {\n            \"id\": \"other_slug\",\n            \"key\": [\"other_slug\", 0],\n            \"value\": null\n        }, {\n            \"id\": \"CDEFAB\",\n            \"key\": [\"other_slug\", 1],\n            \"value\": null\n        },\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Password Requirements RegExp\nDESCRIPTION: Configures password validation rules using regular expressions with custom error messages.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/config/auth.rst#2025-04-21_snippet_5\n\nLANGUAGE: ini\nCODE:\n```\n[couch_httpd_auth]\npassword_regexp = [{\".{10,}\", \"Min length is 10 chars.\"}, \"[A-Z]+\", \"[a-z]+\", \"\\\\d+\"]\n```\n\n----------------------------------------\n\nTITLE: Using Bookmarks with Multi-Query Endpoints\nDESCRIPTION: JSON request format showing how bookmarks can be included in requests to the multi-query endpoints, allowing pagination of multiple separate queries in a single request.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/rfcs/014-pagination.md#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\"queries\": [\n  {\"bookmark\": \"bookmarkForQuery1PageL\"},\n  {\"bookmark\": \"bookmarkForQuery2PageM\"},\n  {\"bookmark\": \"bookmarkForQuery3PageN\"}\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Erlang Node Connectivity via CLI\nDESCRIPTION: These commands use the Erlang shell (`erl`) to establish communication between two servers. They define the node name, cookie, and port range used for Erlang distribution. `erl` must be installed on both servers. Successful execution allows the CouchDB nodes on these servers to communicate.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/setup/cluster.rst#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nerl -name car@192.168.0.2 -setcookie 'brumbrum' -kernel inet_dist_listen_min 9100 -kernel inet_dist_listen_max 9200\n```\n\n----------------------------------------\n\nTITLE: Creating Shard Splitting Jobs in CouchDB Using Bash\nDESCRIPTION: This command initiates a shard splitting job in CouchDB by specifying the database and the shard range to be split. It returns information about the created jobs, including their IDs and associated nodes.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/cluster/sharding.rst#2025-04-21_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n$ curl -s -H \"Content-type: application/json\" -XPOST $COUCH_URL:5984/_reshard/jobs \\\n  -d '{\"type\": \"split\", \"db\":\"db1\", \"range\":\"00000000-7fffffff\"}' | jq '.'\n```\n\n----------------------------------------\n\nTITLE: Querying CouchDB View with key, endkey and keys parameters (Bash)\nDESCRIPTION: This section demonstrates the precedence of query parameters `key`, `endkey` and `keys` in CouchDB view queries using curl commands. The examples showcase how different combinations and orders of these parameters affect the query results. Special attention is given to scenarios where `keys` is used alongside other key-related parameters, which is generally incompatible.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/ddoc/views.rst#2025-04-21_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n\"# start_key=a and end_key=b\n$ curl http://adm:pass@127.0.0.1:5984/db/_design/ddoc/_view/reduce'?key=\\\"a\\\"&endkey=\\\"b\\\"'\n{\\\"rows\\\":[{\\\"key\\\":null,\\\"value\\\":3}]}\n\n# start_key=a and end_key=a\n$ curl http://adm:pass@127.0.0.1:5984/db/_design/ddoc/_view/reduce'?endkey=\\\"b\\\"&key=\\\"a\\\"'\n{\\\"rows\\\":[{\\\"key\\\":null,\\\"value\\\":1}]}\n\n# start_key=a and end_key=a\n$ curl http://adm:pass@127.0.0.1:5984/db/_design/ddoc/_view/reduce'?endkey=\\\"b\\\"&keys=\\[\\\"a\\\"]'\n{\\\"rows\\\":[{\\\"key\\\":null,\\\"value\\\":1}]}\n\n$ curl http://adm:pass@127.0.0.1:5984/db/_design/ddoc/_view/reduce'?endkey=\\\"b\\\"&keys=\\[\\\"a\\\",\\\"b\\\\]'\n{\\\"error\\\":\\\"query_parse_error\\\",\\\"reason\\\":\\\"Multi-key fetches for reduce views must use `group=true`\\\"}\n\n$ curl http://adm:pass@127.0.0.1:5984/db/_design/ddoc/_view/reduce'?endkey=\\\"b\\\"&keys=\\[\\\"a\\\",\\\"b\\\\]&group=true'\n{\\\"error\\\":\\\"query_parse_error\\\",\\\"reason\\\":\\\"`keys` is incompatible with `key`, `start_key` and `end_key`\\\"}\"\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies on RedHat-based Systems\nDESCRIPTION: Command to install the necessary dependencies for building Apache CouchDB from source on RedHat-based systems such as Fedora, CentOS, and RHEL. This includes build tools, Erlang, and development libraries.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/install/unix.rst#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nsudo yum install autoconf autoconf-archive automake \\\n    erlang-asn1 erlang-erts erlang-eunit gcc-c++ \\\n    erlang-os_mon erlang-xmerl erlang-erl_interface help2man \\\n    libicu-devel libtool perl-Test-Harness\n```\n\n----------------------------------------\n\nTITLE: Defining Field-Specific Analyzers in CouchDB Nouveau Search (JavaScript)\nDESCRIPTION: Example of defining different analyzers for specific fields in a CouchDB Nouveau search index. It shows how to set a default analyzer and field-specific analyzers.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/ddocs/nouveau.rst#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"_id\": \"_design/analyzer_example\",\n    \"nouveau\": {\n        \"INDEX_NAME\": {\n            \"default_analyzer\": \"english\",\n            \"field_analyzers\": {\n                \"spanish\": \"spanish\",\n                \"german\": \"german\"\n            },\n            \"index\": \"function (doc) { ... }\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: View Map Function for Detecting Conflicts in CouchDB\nDESCRIPTION: This JavaScript function can be used as a view map function in CouchDB to emit documents that have conflicts, along with their conflicting revision IDs.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/replication/conflicts.rst#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nfunction(doc) {\n    if (doc._conflicts) {\n        emit(null, [doc._rev].concat(doc._conflicts));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Encoding and Decoding JSON Numbers in Erlang\nDESCRIPTION: Shows how Erlang's ejson library handles encoding and decoding of floating-point numbers, demonstrating precision behavior.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/basics.rst#2025-04-21_snippet_10\n\nLANGUAGE: erlang\nCODE:\n```\nejson:encode(ejson:decode(<<\"1.1\">>)).\n<<\"1.1000000000000000888\">>\n```\n\n----------------------------------------\n\nTITLE: Removing Node from CouchDB Cluster\nDESCRIPTION: Shows the two-step process of removing a node: first retrieving the node document revision, then deleting the node using that revision.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/cluster/nodes.rst#2025-04-21_snippet_2\n\nLANGUAGE: text\nCODE:\n```\ncurl \"http://xxx.xxx.xxx.xxx/_node/_local/_nodes/node2@yyy.yyy.yyy.yyy\"\n```\n\nLANGUAGE: text\nCODE:\n```\ncurl -X DELETE \"http://xxx.xxx.xxx.xxx/_node/_local/_nodes/node2@yyy.yyy.yyy.yyy?rev=1-967a00dff5e02add41820138abb3284d\"\n```\n\n----------------------------------------\n\nTITLE: Example CouchDB Database Metadata Structure\nDESCRIPTION: JSON structure showing the metadata for a sharded database, including node assignments and changelog.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/cluster/sharding.rst#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"_id\": \"{name}\",\n  \"_rev\": \"1-e13fb7e79af3b3107ed62925058bfa3a\",\n  \"shard_suffix\": [46, 49, 53, 51, 48, 50, 51, 50, 53, 50, 54],\n  \"changelog\": [\n    [\"add\", \"00000000-1fffffff\", \"node1@xxx.xxx.xxx.xxx\"],\n    [\"add\", \"00000000-1fffffff\", \"node2@xxx.xxx.xxx.xxx\"],\n    [\"add\", \"00000000-1fffffff\", \"node3@xxx.xxx.xxx.xxx\"],\n    [\"add\", \"00000000-1fffffff\", \"node4@xxx.xxx.xxx.xxx\"]\n  ],\n  \"by_node\": {\n    \"node1@xxx.xxx.xxx.xxx\": [\n      \"00000000-1fffffff\"\n    ],\n    \"node4@xxx.xxx.xxx.xxx\": [\n      \"00000000-1fffffff\"\n    ]\n  },\n  \"by_range\": {\n    \"00000000-1fffffff\": [\n      \"node1@xxx.xxx.xxx.xxx\",\n      \"node2@xxx.xxx.xxx.xxx\",\n      \"node3@xxx.xxx.xxx.xxx\",\n      \"node4@xxx.xxx.xxx.xxx\"\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: CouchDB View Response with limit (HTTP)\nDESCRIPTION: This HTTP response shows the structure of a CouchDB view result when the `limit` parameter is used. The response includes `offset`, `rows` (limited to 5 entries in this case), and `total_rows` indicating the total number of rows in the view.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/ddoc/views.rst#2025-04-21_snippet_14\n\nLANGUAGE: http\nCODE:\n```\n\"HTTP/1.1 200 OK\nCache-Control: must-revalidate\nContent-Type: application/json\nDate: Wed, 21 Aug 2013 09:14:13 GMT\nETag: \\\"9Q6Q2GZKPH8D5F8L7PB6DBSS9\\\"\nServer: CouchDB (Erlang/OTP)\nTransfer-Encoding: chunked\n\n{\n    \\\"offset\\\" : 0,\n    \\\"rows\\\" : [\n        {\n            \\\"id\\\" : \\\"3-tiersalmonspinachandavocadoterrine\\\",\n            \\\"key\\\" : \\\"3-tier salmon, spinach and avocado terrine\\\",\n            \\\"value\\\" : [\n                null,\n                \\\"3-tier salmon, spinach and avocado terrine\\\"\n            ]\n        },\n        {\n            \\\"id\\\" : \\\"Aberffrawcake\\\",\n            \\\"key\\\" : \\\"Aberffraw cake\\\",\n            \\\"value\\\" : [\n                null,\n                \\\"Aberffraw cake\\\"\n            ]\n        },\n        {\n            \\\"id\\\" : \\\"Adukiandorangecasserole-microwave\\\",\n            \\\"key\\\" : \\\"Aduki and orange casserole - microwave\\\",\n            \\\"value\\\" : [\n                null,\n                \\\"Aduki and orange casserole - microwave\\\"\n            ]\n        },\n        {\n            \\\"id\\\" : \\\"Aioli-garlicmayonnaise\\\",\n            \\\"key\\\" : \\\"Aioli - garlic mayonnaise\\\",\n            \\\"value\\\" : [\n                null,\n                \\\"Aioli - garlic mayonnaise\\\"\n            ]\n        },\n        {\n            \\\"id\\\" : \\\"Alabamapeanutchicken\\\",\n            \\\"key\\\" : \\\"Alabama peanut chicken\\\",\n            \\\"value\\\" : [\n                null,\n                \\\"Alabama peanut chicken\\\"\n            ]\n        }\n    ],\n    \\\"total_rows\\\" : 2667\n}\"\n```\n\n----------------------------------------\n\nTITLE: Nested Object Selector\nDESCRIPTION: Query selector using nested object notation to match subfield values.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/ddocs/mango.rst#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"imdb\": {\n        \"rating\": 8\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Replication Jobs in CouchDB Scheduler\nDESCRIPTION: The _scheduler/jobs endpoint shows active replication jobs managed by the scheduler, including running, waiting, and backed-off jobs. This is similar to _active_tasks but focuses only on replications.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/whatsnew/2.1.rst#2025-04-21_snippet_3\n\nLANGUAGE: erlang\nCODE:\n```\n_scheduler/jobs\n```\n\n----------------------------------------\n\nTITLE: Retrieving Resharding Job Details in CouchDB (HTTP GET)\nDESCRIPTION: This snippet demonstrates how to retrieve details of a specific resharding job using an HTTP GET request. It includes the request format and an example JSON response containing job information such as ID, state, node, source, target, and history.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/server/common.rst#2025-04-21_snippet_46\n\nLANGUAGE: http\nCODE:\n```\nGET /_reshard/jobs/001-171d1211418996ff47bd610b1d1257fc4ca2628868def4a05e63e8f8fe50694a HTTP/1.1\nAccept: application/json\n```\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200 OK\nContent-Type: application/json\n\n{\n    \"id\": \"001-171d1211418996ff47bd610b1d1257fc4ca2628868def4a05e63e8f8fe50694a\",\n    \"job_state\": \"completed\",\n    \"node\": \"node1@127.0.0.1\",\n    \"source\": \"shards/00000000-1fffffff/d1.1553786862\",\n    \"split_state\": \"completed\",\n    \"start_time\": \"2019-03-28T15:28:02Z\",\n    \"state_info\": {},\n    \"target\": [\n        \"shards/00000000-0fffffff/d1.1553786862\",\n        \"shards/10000000-1fffffff/d1.1553786862\"\n    ],\n    \"type\": \"split\",\n    \"update_time\": \"2019-03-28T15:28:08Z\",\n    \"history\": [\n        {\n            \"detail\": null,\n            \"timestamp\": \"2019-03-28T15:28:02Z\",\n            \"type\": \"new\"\n        },\n        {\n            \"detail\": \"initial_copy\",\n            \"timestamp\": \"2019-03-28T15:28:02Z\",\n            \"type\": \"running\"\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Triggering Shard Synchronization in CouchDB using HTTP\nDESCRIPTION: HTTP request and response examples for forcing synchronization of all shard replicas in a database. This operation requires administrator privileges and is typically used during cluster maintenance.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/database/shard.rst#2025-04-21_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nPOST /db/_sync_shards HTTP/1.1\nHost: localhost:5984\nAccept: */*\n```\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 202 Accepted\nCache-Control: must-revalidate\nContent-Length: 12\nContent-Type: application/json\nDate: Fri, 18 Jan 2019 20:19:23 GMT\nServer: CouchDB/2.3.0-9d4cb03c2 (Erlang OTP/19)\nX-Couch-Request-ID: 14f0b8d252\nX-CouchDB-Body-Time: 0\n\n{\n    \"ok\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Summation Logic with JavaScript\nDESCRIPTION: This JavaScript function calculates the sum of values. It serves as an example illustrating the basic logic behind the ``_sum`` reduce function in CouchDB. The function takes an array of numbers as input and returns their sum.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/ddocs/ddocs.rst#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n\"// could be replaced by _sum\nfunction(keys, values) {\n    return sum(values);\n}\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving Partition Documents - GET Request\nDESCRIPTION: Makes a GET request to retrieve all documents within a specific partition.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/partitioned-dbs.rst#2025-04-21_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nGET /db/_partition/sensor-260/_all_docs HTTP/1.1\nAccept: application/json\nHost: localhost:5984\n```\n\n----------------------------------------\n\nTITLE: Stopping Resharding Jobs in CouchDB Using Bash\nDESCRIPTION: This command issues a PUT request to the '/_reshard/state' endpoint to stop all resharding jobs in CouchDB. It allows for the provision of a reason for stopping the jobs, which can be helpful for documentation.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/cluster/sharding.rst#2025-04-21_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\n$ curl -s -H \"Content-type: application/json\" \\\n  -XPUT $COUCH_URL:5984/_reshard/state \\\n  -d '{\"state\": \"stopped\", \"reason\":\"Moving some shards\"}'\n```\n\n----------------------------------------\n\nTITLE: Setting External Process Timeout in CouchDB\nDESCRIPTION: Defines the time limit for external processes to return results before being terminated.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/config/couchdb.rst#2025-04-21_snippet_8\n\nLANGUAGE: ini\nCODE:\n```\n[couchdb]\nos_process_timeout = 5000 ; 5 sec\n```\n\n----------------------------------------\n\nTITLE: Condition Operator Example\nDESCRIPTION: Shows how to use comparison operators in Mango query selectors\nSOURCE: https://github.com/apache/couchdb/blob/main/src/mango/README.md#2025-04-21_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\"age\": {\"$gt\": 21}}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Resharding Jobs in CouchDB\nDESCRIPTION: This HTTP request and response show how to get information about all resharding jobs on the CouchDB cluster.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/server/common.rst#2025-04-21_snippet_45\n\nLANGUAGE: http\nCODE:\n```\nGET /_reshard/jobs HTTP/1.1\nAccept: application/json\n```\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200 OK\nContent-Type: application/json\n\n{\n    \"jobs\": [\n        {\n            \"history\": [\n                {\n                    \"detail\": null,\n                    \"timestamp\": \"2019-03-28T15:28:02Z\",\n                    \"type\": \"new\"\n                },\n                {\n                    \"detail\": \"initial_copy\",\n                    \"timestamp\": \"2019-03-28T15:28:02Z\",\n                    \"type\": \"running\"\n                }\n            ],\n            \"id\": \"001-171d1211418996ff47bd610b1d1257fc4ca2628868def4a05e63e8f8fe50694a\",\n            \"job_state\": \"completed\",\n            \"node\": \"node1@127.0.0.1\",\n            \"source\": \"shards/00000000-1fffffff/d1.1553786862\",\n            \"split_state\": \"completed\",\n            \"start_time\": \"2019-03-28T15:28:02Z\",\n            \"state_info\": {},\n            \"target\": [\n                \"shards/00000000-0fffffff/d1.1553786862\",\n                \"shards/10000000-1fffffff/d1.1553786862\"\n            ],\n            \"type\": \"split\",\n            \"update_time\": \"2019-03-28T15:28:08Z\"\n        }\n    ],\n    \"offset\": 0,\n    \"total_rows\": 24\n}\n```\n\n----------------------------------------\n\nTITLE: Using $keyMapMatch operator with primary index in CouchDB\nDESCRIPTION: This snippet demonstrates the use of the ``$keyMapMatch`` operator in a CouchDB query with the primary index (``_all_docs``). The query selects documents where the ``cameras`` field is a map (object) and contains at least one key that matches the condition ``$eq: \"secondary\"``. The `_id` must be greater than null.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/ddocs/mango.rst#2025-04-21_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"_id\": { \"$gt\": null },\n    \"cameras\": {\n        \"$keyMapMatch\": {\n            \"$eq\": \"secondary\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Allowed Origins for CORS in CouchDB\nDESCRIPTION: Configuration to specify which origins are allowed to make CORS requests to CouchDB. The wildcard (*) allows all origins, but can't be used with credentials=true.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/config/http.rst#2025-04-21_snippet_15\n\nLANGUAGE: ini\nCODE:\n```\n[cors]\norigins = *\n```\n\n----------------------------------------\n\nTITLE: Authorized Database Information Request in CouchDB (Bash/cURL)\nDESCRIPTION: This cURL command demonstrates how an authorized user (jan) can access the database information. It includes the user's credentials in the request.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/intro/security.rst#2025-04-21_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\ncurl -u jan:orange http://localhost:5984/mydatabase/\n```\n\n----------------------------------------\n\nTITLE: Configuring Read Quorum - Bash\nDESCRIPTION: Makes a read request specifying a quorum of 2 nodes must respond before receiving results.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/cluster/sharding.rst#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl \"$COUCH_URL:5984/{db}/{doc}?r=2\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving Design Document Information with GET Request\nDESCRIPTION: HTTP request example for retrieving information about a design document named 'recipe' from a database called 'recipes'. The request specifies JSON as the accepted format.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/ddoc/common.rst#2025-04-21_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nGET /recipes/_design/recipe/_info HTTP/1.1\nAccept: application/json\nHost: localhost:5984\n```\n\n----------------------------------------\n\nTITLE: HTTP Request to Test Standard Analyzer\nDESCRIPTION: This HTTP request demonstrates how to use the `_search_analyze` endpoint to test the standard analyzer in CouchDB.  It sets the analyzer to \"standard\" and provides the text \"ablanks@renovations.com\". The Content-Type header is set to application/json to indicate the request body is JSON.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/ddocs/search.rst#2025-04-21_snippet_10\n\nLANGUAGE: http\nCODE:\n```\nPOST /_search_analyze HTTP/1.1\nContent-Type: application/json\n{\"analyzer\":\"standard\", \"text\":\"ablanks@renovations.com\"}\n```\n\n----------------------------------------\n\nTITLE: Setting Valid Socket Options in CouchDB\nDESCRIPTION: Defines the list of allowed socket options that can be configured in the replicator.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/config/replicator.rst#2025-04-21_snippet_11\n\nLANGUAGE: ini\nCODE:\n```\n[replicator]\nvalid_socket_options = buffer,keepalive,nodelay,priority,recbuf,sndbuf\n```\n\n----------------------------------------\n\nTITLE: CouchDB Response with Design Document Information\nDESCRIPTION: HTTP response returning information about a design document, including its name and view index details. The response includes metadata about the view's state, size, update status, and other properties.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/ddoc/common.rst#2025-04-21_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200 OK\nCache-Control: must-revalidate\nContent-Length: 263\nContent-Type: application/json\nDate: Sat, 17 Aug 2013 12:54:17 GMT\nServer: CouchDB (Erlang/OTP)\n\n{\n    \"name\": \"recipe\",\n    \"view_index\": {\n        \"compact_running\": false,\n        \"language\": \"python\",\n        \"purge_seq\": 0,\n        \"signature\": \"a59a1bb13fdf8a8a584bc477919c97ac\",\n        \"sizes\": {\n          \"active\": 926691,\n          \"disk\": 1982704,\n          \"external\": 1535701\n        },\n        \"update_seq\": 12397,\n        \"updater_running\": false,\n        \"waiting_clients\": 0,\n        \"waiting_commit\": false\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: JavaScript Username-Database Name Conversion Functions\nDESCRIPTION: Utility functions for converting between CouchDB user names and their corresponding database names using hex encoding.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/config/couch-peruser.rst#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction dbNameToUsername(prefixedHexName) {\n  return Buffer.from(prefixedHexName.replace('userdb-', ''), 'hex').toString('utf8');\n}\n\nfunction usernameToDbName(name) {\n  return 'userdb-' + Buffer.from(name).toString('hex');\n}\n```\n\n----------------------------------------\n\nTITLE: Recording Replication Checkpoint on Source in CouchDB (HTTP/JSON)\nDESCRIPTION: Demonstrates how to update the replication log on the source database in CouchDB. This records the current state of replication, including details like documents read and written.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/replication/protocol.rst#2025-04-21_snippet_25\n\nLANGUAGE: http\nCODE:\n```\nPUT /source/_local/afa899a9e59589c3d4ce5668e3218aef HTTP/1.1\nAccept: application/json\nContent-Length: 591\nContent-Type: application/json\nHost: localhost:5984\nUser-Agent: CouchDB\n\n{\n    \"_id\": \"_local/afa899a9e59589c3d4ce5668e3218aef\",\n    \"_rev\": \"0-1\",\n    \"_revisions\": {\n        \"ids\": [\n            \"31f36e40158e717fbe9842e227b389df\"\n        ],\n        \"start\": 1\n    },\n    \"history\": [\n        {\n            \"doc_write_failures\": 0,\n            \"docs_read\": 6,\n            \"docs_written\": 6,\n            \"end_last_seq\": 26,\n            \"end_time\": \"Thu, 07 Nov 2013 09:42:17 GMT\",\n            \"missing_checked\": 6,\n            \"missing_found\": 6,\n            \"recorded_seq\": 26,\n            \"session_id\": \"04bf15bf1d9fa8ac1abc67d0c3e04f07\",\n            \"start_last_seq\": 0,\n            \"start_time\": \"Thu, 07 Nov 2013 09:41:43 GMT\"\n        }\n    ],\n    \"replication_id_version\": 3,\n    \"session_id\": \"04bf15bf1d9fa8ac1abc67d0c3e04f07\",\n    \"source_last_seq\": 26\n}\n```\n\n----------------------------------------\n\nTITLE: Document Deletion Request Examples\nDESCRIPTION: HTTP DELETE request examples showing two ways to delete a document - using rev query parameter or If-Match header.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/document/common.rst#2025-04-21_snippet_6\n\nLANGUAGE: http\nCODE:\n```\nDELETE /recipes/FishStew?rev=1-9c65296036141e575d32ba9c034dd3ee HTTP/1.1\nAccept: application/json\nHost: localhost:5984\n```\n\nLANGUAGE: http\nCODE:\n```\nDELETE /recipes/FishStew HTTP/1.1\nAccept: application/json\nIf-Match: 1-9c65296036141e575d32ba9c034dd3ee\nHost: localhost:5984\n```\n\n----------------------------------------\n\nTITLE: Example Search Index Function\nDESCRIPTION: This snippet presents a JavaScript function intended for use within a nouveau index configuration. It includes type checks to ensure that the document's fields contain the expected data types before indexing, thus preventing runtime errors.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/ddocs/nouveau.rst#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction(doc) {\n    if (typeof(doc.min_length) == 'number') {\n        index(\"double\", \"min_length\", doc.min_length, {\"store\": true});\n    }\n    if (typeof(doc.diet) == 'string') {\n        index(\"string\", \"diet\", doc.diet, {\"store\": true});\n    }\n    if (typeof(doc.latin_name) == 'string') {\n        index(\"string\", \"latin_name\", doc.latin_name, {\"store\": true});\n    }\n    if (typeof(doc.class) == 'string') {\n        index(\"string\", \"class\", doc.class, {\"store\": true});\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Stale View in CouchDB\nDESCRIPTION: Shows how to query a stale view named 'by_recipe' in the recipes design document using HTTP GET request\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/ddoc/views.rst#2025-04-21_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nhttp://localhost:5984/recipes/_design/recipes/_view/by_recipe?stale=ok\n```\n\n----------------------------------------\n\nTITLE: Testing Simple Queries on CouchDB - JavaScript\nDESCRIPTION: The 'simpleQueries' function executes a series of predefined queries against the CouchDB database, validating the results with assertions to ensure accuracy and correctness of the queries.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/rfcs/012-fdb-reduce.md#2025-04-21_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nconst simpleQueries = async () => {\n    let result = {};\n    result = await query({group_level: 0});\n    assert.deepEqual(result, {\n        rows: [{\n            key: null,\n            value: 68\n        }]\n    });\n\n    result = await query({group_level:0, startkey: [2018, 3, 2]});\n    assert.deepEqual(result, {\n        rows: [{\n            key: null,\n            value: 31\n        }]\n    });\n\n    result = await query({\n        group_level:0,\n        startkey: [2018, 3, 2],\n        endkey: [2019, 5, 1]\n    });\n    assert.deepEqual(result, {\n        rows: [{\n            key: null,\n            value: 31\n        }]\n    });\n\n    result = await query({\n        group_level: 0,\n        startkey: [2018, 03, 2],\n        endkey: [2019, 03, 2],\n    })\n\n    assert.deepEqual(result, {\n        rows: [{\n            key: null,\n            value: 18\n        }]\n    });\n\n    result = await query({\n        group_level: 1,\n        startkey: [2017, 4, 1],\n        endkey: [2018, 3, 1],\n    })\n\n    assert.deepEqual(result, {\n        rows: [\n        {\n            key: [2017],\n            value: 22\n        },\n        {\n            key: [2018],\n            value: 6\n        }\n    ]\n    });\n\n    result = await query({\n        group_level: 1,\n        startkey: [2017, 4, 1],\n        endkey: [2019, 03, 2],\n    })\n\n    assert.deepEqual(result, {\n        rows: [\n        {\n            key: [2017],\n            value: 22\n        },\n        {\n            key: [2018],\n            value: 20\n        },\n        {\n            key: [2019],\n            value: 4\n        }\n    ]\n    });\n\n    result = await query({\n        group_level: 1,\n        startkey: [2017, 4, 1],\n        endkey: [2019, 05, 1],\n    })\n\n    assert.deepEqual(result, {\n        rows: [\n        {\n            key: [2017],\n            value: 22\n        },\n        {\n            key: [2018],\n            value: 20\n        },\n        {\n            key: [2019],\n            value: 17\n        }\n    ]\n    });\n\n    result = await query({\n        group: true,\n        startkey: [2018, 5, 1],\n        endkey: [2019, 4, 1],\n    });\n\n    assert.deepEqual(result, {rows: [\n        {key: [2018,5,1], value: 7},\n        {key: [2019,3,1], value: 4},\n        {key: [2019,4,1], value: 6}\n    ]})\n    log('SIMPLE DONE');\n};\n```\n\n----------------------------------------\n\nTITLE: Unauthorized Access Response in CouchDB (JavaScript)\nDESCRIPTION: This JSON response shows the error message returned by CouchDB when an unauthorized user attempts to access a secured database. It indicates that the user doesn't have the necessary permissions.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/intro/security.rst#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\n{\"error\":\"unauthorized\",\"reason\":\"You are not authorized to access this db.\"}\n```\n\n----------------------------------------\n\nTITLE: Setting CouchDB Directory Permissions\nDESCRIPTION: Commands to set appropriate ownership and permissions for CouchDB directories and configuration files.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/install/unix.rst#2025-04-21_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\ncp -R /path/to/couchdb/rel/couchdb /home/couchdb\n```\n\nLANGUAGE: bash\nCODE:\n```\nchown -R couchdb:couchdb /home/couchdb\n```\n\nLANGUAGE: bash\nCODE:\n```\nfind /home/couchdb -type d -exec chmod 0770 {} \\;\n```\n\nLANGUAGE: bash\nCODE:\n```\nchmod 0644 /home/couchdb/etc/*\n```\n\n----------------------------------------\n\nTITLE: CouchDB View Response with limit and skip (HTTP)\nDESCRIPTION: This HTTP response illustrates the structure of a CouchDB view result when using `limit` and `skip`. The response includes `offset` (indicating the skipped rows), `rows` (containing the limited entries), and `total_rows` showing the total number of rows in the view.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/ddoc/views.rst#2025-04-21_snippet_16\n\nLANGUAGE: http\nCODE:\n```\n\"HTTP/1.1 200 OK\nCache-Control: must-revalidate\nContent-Type: application/json\nDate: Wed, 21 Aug 2013 09:14:13 GMT\nETag: \\\"H3G7YZSNIVRRHO5FXPE16NJHN\\\"\nServer: CouchDB (Erlang/OTP)\nTransfer-Encoding: chunked\n\n{\n    \\\"offset\\\" : 2,\n    \\\"rows\\\" : [\n        {\n            \\\"id\\\" : \\\"Adukiandorangecasserole-microwave\\\",\n            \\\"key\\\" : \\\"Aduki and orange casserole - microwave\\\",\n            \\\"value\\\" : [\n                null,\n                \\\"Aduki and orange casserole - microwave\\\"\n            ]\n        },\n        {\n            \\\"id\\\" : \\\"Aioli-garlicmayonnaise\\\",\n            \\\"key\\\" : \\\"Aioli - garlic mayonnaise\\\",\n            \\\"value\\\" : [\n                null,\n                \\\"Aioli - garlic mayonnaise\\\"\n            ]\n        },\n        {\n            \\\"id\\\" : \\\"Alabamapeanutchicken\\\",\n            \\\"key\\\" : \\\"Alabama peanut chicken\\\",\n            \\\"value\\\" : [\n                null,\n                \\\"Alabama peanut chicken\\\"\n            ]\n        }\n    ],\n    \\\"total_rows\\\" : 2667\n}\"\n```\n\n----------------------------------------\n\nTITLE: Cookie Authentication Example\nDESCRIPTION: Example showing how to authenticate using cookies in CouchDB\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/intro/security.rst#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nHOST=\"http://127.0.0.1:5984\"\ncurl -vX POST $HOST/_session \\\n       -H 'Content-Type:application/x-www-form-urlencoded' \\\n       -d 'name=anna&password=secret'\n\ncurl -vX PUT $HOST/mydatabase\n```\n\n----------------------------------------\n\nTITLE: Querying Global Index with cURL\nDESCRIPTION: Example of querying a global search index using cURL command with include_docs and query parameters.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/ddocs/search.rst#2025-04-21_snippet_16\n\nLANGUAGE: sh\nCODE:\n```\ncurl https://$HOST:5984/$DATABASE/_design/$DDOC/_search/$INDEX_NAME?include_docs=true\\&query=\"*:*\"\\&limit=1 \\\n```\n\n----------------------------------------\n\nTITLE: DELETE Configuration Key Request - CouchDB HTTP\nDESCRIPTION: HTTP request to delete a configuration value. Returns the value that was deleted.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/server/configuration.rst#2025-04-21_snippet_4\n\nLANGUAGE: http\nCODE:\n```\nDELETE /_node/nonode@nohost/_config/log/level HTTP/1.1\nAccept: application/json\nHost: localhost:5984\n```\n\n----------------------------------------\n\nTITLE: Configuring CouchDB Per-User Database Settings\nDESCRIPTION: Basic configuration settings for enabling per-user databases and database deletion in CouchDB.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/config/couch-peruser.rst#2025-04-21_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[couch_peruser]\nenable = false\n```\n\n----------------------------------------\n\nTITLE: Requesting a List Function in CouchDB\nDESCRIPTION: HTTP GET request to execute a list function against a view from the same design document, formatting the view results according to the list function.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/ddoc/render.rst#2025-04-21_snippet_6\n\nLANGUAGE: http\nCODE:\n```\nGET /recipes/_design/recipe/_list/ingredients/by_name HTTP/1.1\nAccept: text/plain\nHost: localhost:5984\n```\n\n----------------------------------------\n\nTITLE: CouchDB Multi-Query API Response\nDESCRIPTION: This snippet demonstrates the HTTP response from CouchDB for a multi-query request. It includes headers and a JSON body with results for each query.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/ddoc/views.rst#2025-04-21_snippet_19\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200 OK\nCache-Control: must-revalidate\nContent-Type: application/json\nDate: Wed, 20 Dec 2016 11:17:07 GMT\nETag: \"1H8RGBCK3ABY6ACDM7ZSC30QK\"\nServer: CouchDB (Erlang/OTP)\nTransfer-Encoding: chunked\n\n{\n    \"results\" : [\n        {\n            \"offset\": 0,\n            \"rows\": [\n                {\n                    \"id\": \"SpaghettiWithMeatballs\",\n                    \"key\": \"meatballs\",\n                    \"value\": 1\n                },\n                {\n                    \"id\": \"SpaghettiWithMeatballs\",\n                    \"key\": \"spaghetti\",\n                    \"value\": 1\n                },\n                {\n                    \"id\": \"SpaghettiWithMeatballs\",\n                    \"key\": \"tomato sauce\",\n                    \"value\": 1\n                }\n            ],\n            \"total_rows\": 3\n        },\n        {\n            \"offset\" : 2,\n            \"rows\" : [\n                {\n                    \"id\" : \"Adukiandorangecasserole-microwave\",\n                    \"key\" : \"Aduki and orange casserole - microwave\",\n                    \"value\" : [\n                        null,\n                        \"Aduki and orange casserole - microwave\"\n                    ]\n                },\n                {\n                    \"id\" : \"Aioli-garlicmayonnaise\",\n                    \"key\" : \"Aioli - garlic mayonnaise\",\n                    \"value\" : [\n                        null,\n                        \"Aioli - garlic mayonnaise\"\n                    ]\n                },\n                {\n                    \"id\" : \"Alabamapeanutchicken\",\n                    \"key\" : \"Alabama peanut chicken\",\n                    \"value\" : [\n                        null,\n                        \"Alabama peanut chicken\"\n                    ]\n                }\n            ],\n            \"total_rows\" : 2667\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Setting CouchDB Directory Ownership\nDESCRIPTION: Command to set the correct ownership of CouchDB directories to the couchdb user and group, ensuring proper access permissions.\nSOURCE: https://github.com/apache/couchdb/blob/main/INSTALL.Unix.md#2025-04-21_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nchown -R couchdb:couchdb /opt/couchdb\n```\n\n----------------------------------------\n\nTITLE: Converting Mango Index to Map Index Format\nDESCRIPTION: Demonstrates how a Mango index definition is converted into an equivalent map index with query language specification and configuration options.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/rfcs/006-mango-fdb.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"_id\": \"_design/ddoc\",\n  \"language\": \"query\",\n  \"views\": {\n    \"view-name\": {\n      \"map\": {\n        \"fields\": [{ \"fieldA\": \"asc\" }, { \"fieldB\": \"asc\" }],\n        \"selector\": {}\n      }\n    }\n  },\n  \"options\": [{ \"autoupdate\": false }, { \"interactive\": true }]\n}\n```\n\n----------------------------------------\n\nTITLE: HEAD Response from CouchDB Document Request\nDESCRIPTION: Example response headers from a HEAD request showing document metadata including content length, ETag (revision token), and other standard headers.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/document/common.rst#2025-04-21_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200 OK\nCache-Control: must-revalidate\nContent-Length: 660\nContent-Type: application/json\nDate: Tue, 13 Aug 2013 21:35:37 GMT\nETag: \"12-151bb8678d45aaa949ec3698ef1c7e78\"\nServer: CouchDB (Erlang/OTP)\n```\n\n----------------------------------------\n\nTITLE: Successful response from CouchDB purge operation\nDESCRIPTION: HTTP response showing the result of a successful document purge operation. The response includes the purge sequence number and a mapping of document IDs to the revisions that were successfully purged.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/database/misc.rst#2025-04-21_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 201 Created\nCache-Control: must-revalidate\nContent-Length: 107\nContent-Type: application/json\nDate: Fri, 02 Jun 2017 18:55:54 GMT\nServer: CouchDB/2.0.0-2ccd4bf (Erlang OTP/18)\n\n{\n  \"purge_seq\": null,\n  \"purged\": {\n    \"c6114c65e295552ab1019e2b046b10e\": [\n        \"3-c50a32451890a3f1c3e423334cc92745\"\n      ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example View Result JSON Structure\nDESCRIPTION: Sample JSON response showing the structure of view query results, including total rows, offset, and individual row data with keys, IDs, and values.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/ddocs/views/intro.rst#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"total_rows\": 3,\n    \"offset\": 0,\n    \"rows\": [\n        {\n            \"key\": \"2009/01/15 15:52:20\",\n            \"id\": \"hello-world\",\n            \"value\": \"Hello World\"\n        },\n\n        {\n            \"key\": \"2009/01/30 18:04:11\",\n            \"id\": \"biking\",\n            \"value\": \"Biking\"\n        },\n\n        {\n            \"key\": \"2009/02/17 21:13:39\",\n            \"id\": \"bought-a-cat\",\n            \"value\": \"Bought a Cat\"\n        }\n\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Conflict Error Response in CouchDB\nDESCRIPTION: This snippet demonstrates the JSON structure for a conflict error response in CouchDB. It includes the error type and a reason explaining that there was a document update conflict.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/replication/protocol.rst#2025-04-21_snippet_33\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"error\": \"conflict\",\n    \"reason\": \"document update conflict\"\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Priority Coefficient for CouchDB Replicator Scheduling\nDESCRIPTION: Controls how job priorities decay to move towards the front of the run queue. Default value of 0.98 ensures jobs retain priority for approximately 7 hours if not executed.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/config/replicator.rst#2025-04-21_snippet_28\n\nLANGUAGE: ini\nCODE:\n```\n[replicator]\npriority_coeff = 0.98\n```\n\n----------------------------------------\n\nTITLE: Creating a Mango Secondary Index for Conflict Queries in CouchDB\nDESCRIPTION: This snippet shows how to create a Mango secondary index to speed up queries for conflicted documents in CouchDB.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/replication/conflicts.rst#2025-04-21_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n$ curl -X POST http://adm:pass@127.0.0.1:5984/dbname/_index \\\n    -d '{\"index\":{\"fields\": [\"_conflicts\"]}}' \\\n    -Hcontent-type:application/json\n```\n\n----------------------------------------\n\nTITLE: Installing CouchDB via Homebrew on macOS\nDESCRIPTION: Commands to install CouchDB using the Homebrew package manager on macOS. First updates Homebrew to get the latest formulae, then installs CouchDB.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/install/mac.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbrew update\nbrew install couchdb\n```\n\n----------------------------------------\n\nTITLE: Retrieving Replication Log Response\nDESCRIPTION: HTTP response containing replication history with checkpoint sequences, session IDs, and statistics.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/replication/protocol.rst#2025-04-21_snippet_10\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200 OK\nCache-Control: must-revalidate\nContent-Length: 1019\nContent-Type: application/json\nDate: Thu, 10 Oct 2013 06:18:56 GMT\nETag: \"0-8\"\nServer: CouchDB (Erlang OTP)\n\n{\n    \"_id\": \"_local/b3e44b920ee2951cb2e123b63044427a\",\n    \"_rev\": \"0-8\",\n    \"history\": [\n        {\n            \"doc_write_failures\": 0,\n            \"docs_read\": 2,\n            \"docs_written\": 2,\n            \"end_last_seq\": 5,\n            \"end_time\": \"Thu, 10 Oct 2013 05:56:38 GMT\",\n            \"missing_checked\": 2,\n            \"missing_found\": 2,\n            \"recorded_seq\": 5,\n            \"session_id\": \"d5a34cbbdafa70e0db5cb57d02a6b955\",\n            \"start_last_seq\": 3,\n            \"start_time\": \"Thu, 10 Oct 2013 05:56:38 GMT\"\n        },\n        {\n            \"doc_write_failures\": 0,\n            \"docs_read\": 1,\n            \"docs_written\": 1,\n            \"end_last_seq\": 3,\n            \"end_time\": \"Thu, 10 Oct 2013 05:56:12 GMT\",\n            \"missing_checked\": 1,\n            \"missing_found\": 1,\n            \"recorded_seq\": 3,\n            \"session_id\": \"11a79cdae1719c362e9857cd1ddff09d\",\n            \"start_last_seq\": 2,\n            \"start_time\": \"Thu, 10 Oct 2013 05:56:12 GMT\"\n        },\n        {\n            \"doc_write_failures\": 0,\n            \"docs_read\": 2,\n            \"docs_written\": 2,\n            \"end_last_seq\": 2,\n            \"end_time\": \"Thu, 10 Oct 2013 05:56:04 GMT\",\n            \"missing_checked\": 2,\n            \"missing_found\": 2,\n            \"recorded_seq\": 2,\n            \"session_id\": \"77cdf93cde05f15fcb710f320c37c155\",\n            \"start_last_seq\": 0,\n            \"start_time\": \"Thu, 10 Oct 2013 05:56:04 GMT\"\n        }\n    ],\n    \"replication_id_version\": 3,\n    \"session_id\": \"d5a34cbbdafa70e0db5cb57d02a6b955\",\n    \"source_last_seq\": 5\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Zone-Based Replica Placement in CouchDB\nDESCRIPTION: Defines the cluster-wide replica placement policy using zone names and replica counts. Overrides the 'n' parameter for replica cardinality.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/config/cluster.rst#2025-04-21_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[cluster]\nplacement = metro-dc-a:2,metro-dc-b:1\n```\n\n----------------------------------------\n\nTITLE: Enabling Separate Prometheus Port in CouchDB\nDESCRIPTION: Enables a separate, non-authenticated port for Prometheus monitoring data. Default is false. This option was introduced in CouchDB 3.2.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/config/misc.rst#2025-04-21_snippet_10\n\nLANGUAGE: ini\nCODE:\n```\n[prometheus]\nadditional_port = true\n```\n\n----------------------------------------\n\nTITLE: Nouveau Index Info Response - HTTP Response\nDESCRIPTION: HTTP response containing metadata about the Nouveau index, including index name, document count, update sequence, and disk size.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/ddoc/nouveau.rst#2025-04-21_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200 OK\nContent-Type: application/json\n\n{\n    \"name\": \"_design/cookbook/ingredients\",\n    \"search_index\": {\n        \"num_docs\": 1000,\n        \"update_seq\": 5000,\n        \"disk_size\": 1048576\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying CouchDB Cluster Membership\nDESCRIPTION: Shows how to query the _membership endpoint to view all nodes in the cluster and their connection status.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/cluster/nodes.rst#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\ncurl -X GET \"http://xxx.xxx.xxx.xxx:5984/_membership\" --user admin-user\n```\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"all_nodes\":[\n        \"node1@xxx.xxx.xxx.xxx\"],\n    \"cluster_nodes\":[\n        \"node1@xxx.xxx.xxx.xxx\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Partial Index in CouchDB\nDESCRIPTION: Example of creating a partial index in CouchDB. This index filters documents where the 'status' field is not equal to 'archived' and indexes the 'type' field.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/ddocs/mango.rst#2025-04-21_snippet_21\n\nLANGUAGE: http\nCODE:\n```\nPOST /db/_index HTTP/1.1\nContent-Type: application/json\nContent-Length: 144\nHost: localhost:5984\n\n{\n  \"index\": {\n    \"partial_filter_selector\": {\n      \"status\": {\n        \"$ne\": \"archived\"\n      }\n    },\n    \"fields\": [\"type\"]\n  },\n  \"ddoc\" : \"type-not-archived\",\n  \"type\" : \"json\"\n}\n```\n\n----------------------------------------\n\nTITLE: Optimizing CouchDB Reduce Function with Erlang\nDESCRIPTION: This JavaScript snippet shows an optimized version of a CouchDB view, where the reduce function is replaced by CouchDB's built-in '_sum'. Utilizing native Erlang implementations for simple operations like summing reduces I/O overhead and significantly speeds up view responses.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/maintenance/performance.rst#2025-04-21_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n    \"_id\": \"_design/foo\",\n    \"views\": {\n        \"bar\": {\n            \"map\": \"function (doc) { emit(doc.author, 1); }\",\n            \"reduce\": \"_sum\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Resharding Jobs in CouchDB (HTTP POST)\nDESCRIPTION: This snippet shows how to create one or more resharding jobs using an HTTP POST request. It includes the request format with JSON payload and an example response. The API allows specifying the database, range, and type of job to be created.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/server/common.rst#2025-04-21_snippet_47\n\nLANGUAGE: http\nCODE:\n```\nPOST /_reshard/jobs HTTP/1.1\nAccept: application/json\nContent-Type: application/json\n\n{\n   \"db\": \"db3\",\n   \"range\": \"80000000-ffffffff\",\n   \"type\": \"split\"\n}\n```\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 201 Created\nContent-Type: application/json\n\n[\n    {\n        \"id\": \"001-30d7848a6feeb826d5e3ea5bb7773d672af226fd34fd84a8fb1ca736285df557\",\n        \"node\": \"node1@127.0.0.1\",\n        \"ok\": true,\n        \"shard\": \"shards/80000000-ffffffff/db3.1554148353\"\n    },\n    {\n        \"id\": \"001-c2d734360b4cb3ff8b3feaccb2d787bf81ce2e773489eddd985ddd01d9de8e01\",\n        \"node\": \"node2@127.0.0.1\",\n        \"ok\": true,\n        \"shard\": \"shards/80000000-ffffffff/db3.1554148353\"\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Geographic Search Index and Query Examples\nDESCRIPTION: Examples showing how to index and query geographical data in CouchDB using Lucene's geospatial capabilities.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/ddocs/search.rst#2025-04-21_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"name\":\"Aberdeen, Scotland\",\n    \"lat\":57.15,\n    \"lon\":-2.15,\n    \"type\":\"city\"\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfunction(doc) {\n    if (doc.type && doc.type == 'city') {\n        index('city', doc.name, {'store': true});\n        index('lat', doc.lat, {'store': true});\n        index('lon', doc.lon, {'store': true});\n    }\n}\n```\n\nLANGUAGE: http\nCODE:\n```\nGET /examples/_design/cities-designdoc/_search/cities?q=lat:[0+TO+90]&sort=\"<distance,lon,lat,-74.0059,40.7127,km>\" HTTP/1.1\n```\n\nLANGUAGE: sh\nCODE:\n```\ncurl 'https://$HOST:5984/examples/_design/cities-designdoc/_search/cities?q=lat:[0+TO+90]&sort=\"<distance,lon,lat,-74.0059,40.7127,km>\"'\n```\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"total_rows\": 205,\n    \"bookmark\": \"g1A...XIU\",\n    \"rows\": [\n        {\n            \"id\": \"city180\",\n            \"order\": [\n                8.530665755719783,\n                18\n            ],\n            \"fields\": {\n                \"city\": \"New York, N.Y.\",\n                \"lat\": 40.78333333333333,\n                \"lon\": -73.96666666666667\n            }\n        },\n        {\n            \"id\": \"city177\",\n            \"order\": [\n                13.756343205985946,\n                17\n            ],\n            \"fields\": {\n                \"city\": \"Newark, N.J.\",\n                \"lat\": 40.733333333333334,\n                \"lon\": -74.16666666666667\n            }\n        },\n        {\n            \"id\": \"city178\",\n            \"order\": [\n                113.53603438866077,\n                26\n            ],\n            \"fields\": {\n                \"city\": \"New Haven, Conn.\",\n                \"lat\": 41.31666666666667,\n                \"lon\": -72.91666666666667\n            }\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Document Validation Command - CouchDB Protocol\nDESCRIPTION: Sample validation command sent from CouchDB with document data, user context and security objects.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/query-server/protocol.rst#2025-04-21_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n[\n    \"ddoc\",\n    \"_design/id\",\n    [\"validate_doc_update\"],\n    [\n        {\n            \"_id\": \"docid\",\n            \"_rev\": \"2-e0165f450f6c89dc6b071c075dde3c4d\",\n            \"score\": 10\n        },\n        {\n            \"_id\": \"docid\",\n            \"_rev\": \"1-9f798c6ad72a406afdbf470b9eea8375\",\n            \"score\": 4\n        },\n        {\n            \"name\": \"Mike\",\n            \"roles\": [\"player\"]\n        },\n        {\n            \"admins\": {},\n            \"members\": []\n        }\n    ]\n]\n```\n\n----------------------------------------\n\nTITLE: Setting Log Writer in CouchDB Configuration\nDESCRIPTION: Configures the log writer to use for CouchDB logging. Options include stderr, file, syslog, and journald.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/config/logging.rst#2025-04-21_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[log]\nwriter = stderr\n```\n\n----------------------------------------\n\nTITLE: Setting Request Retry Limits in CouchDB\nDESCRIPTION: Configures the number of times a failed request will be retried, with exponential backoff starting at 0.25 seconds.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/config/replicator.rst#2025-04-21_snippet_9\n\nLANGUAGE: ini\nCODE:\n```\n[replicator]\nretries_per_request = 5\n```\n\n----------------------------------------\n\nTITLE: Cleaning Nouveau Search Indexes - HTTP Request/Response\nDESCRIPTION: HTTP request and response for cleaning up unreachable Nouveau search indexes. The endpoint accepts POST requests and returns a 202 Accepted status with a JSON response indicating success.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/database/cleanup.rst#2025-04-21_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nPOST /db/_nouveau_cleanup HTTP/1.1\nAccept: application/json\nContent-Type: application/json\nHost: localhost:5984\n```\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 202 Accepted\nCache-Control: must-revalidate\nContent-Length: 12\nContent-Type: application/json\nServer: CouchDB (Erlang/OTP)\n\n{\n    \"ok\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring PBKDF2 Password Iterations\nDESCRIPTION: Sets minimum and maximum allowed iterations for PBKDF2 password hashing algorithm.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/config/auth.rst#2025-04-21_snippet_4\n\nLANGUAGE: ini\nCODE:\n```\n[chttpd_auth]\nmin_iterations = 100\nmax_iterations = 100000\n```\n\n----------------------------------------\n\nTITLE: Installing CouchDB Repository on Debian/Ubuntu\nDESCRIPTION: Commands to set up the Apache CouchDB package repository on Debian or Ubuntu systems. This includes installing required dependencies, adding the GPG key for package verification, and configuring the repository source.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/install/unix.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt update && sudo apt install -y curl apt-transport-https gnupg\ncurl https://couchdb.apache.org/repo/keys.asc | gpg --dearmor | sudo tee /usr/share/keyrings/couchdb-archive-keyring.gpg >/dev/null 2>&1\nsource /etc/os-release\necho \"deb [signed-by=/usr/share/keyrings/couchdb-archive-keyring.gpg] https://apache.jfrog.io/artifactory/couchdb-deb/ ${VERSION_CODENAME} main\" \\\n    | sudo tee /etc/apt/sources.list.d/couchdb.list >/dev/null\n```\n\n----------------------------------------\n\nTITLE: Apache HTTP Server Basic Configuration\nDESCRIPTION: Basic Apache HTTP Server configuration for reverse proxying CouchDB requests. Includes virtual host setup and proxy settings.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/best-practices/reverse-proxies.rst#2025-04-21_snippet_10\n\nLANGUAGE: apacheconf\nCODE:\n```\n<VirtualHost *:80>\n   ServerAdmin webmaster@dummy-host.example.com\n   DocumentRoot \"/opt/websites/web/www/dummy\"\n   ServerName couchdb.localhost\n   AllowEncodedSlashes On\n   ProxyRequests Off\n   KeepAlive Off\n   <Proxy *>\n      Order deny,allow\n```\n\n----------------------------------------\n\nTITLE: Explicit AND Operator Query\nDESCRIPTION: Complex query using explicit $and operator with multiple conditions.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/ddocs/mango.rst#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"$and\": [\n        {\n            \"director\": {\n                \"$eq\": \"Lars von Trier\"\n            }\n        },\n        {\n            \"year\": {\n                \"$eq\": 2003\n            }\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Mango $allMatch Operator in CouchDB\nDESCRIPTION: The Mango _find endpoint now supports a new $allMatch operator, which matches documents containing an array field where all elements match the specified query criteria.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/whatsnew/2.1.rst#2025-04-21_snippet_2\n\nLANGUAGE: erlang\nCODE:\n```\n_find\n```\n\n----------------------------------------\n\nTITLE: Configuring CouchDB Server Header\nDESCRIPTION: Configuration option to control whether CouchDB and Erlang/OTP versions are included in server response headers.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/config/http.rst#2025-04-21_snippet_5\n\nLANGUAGE: ini\nCODE:\n```\n[chttpd]\nserver_header_versions = true\n```\n\n----------------------------------------\n\nTITLE: Setting Maximum Certificate Depth for CouchDB Replicator\nDESCRIPTION: Configures the maximum peer certificate verification depth. This must be set even if certificate validation is disabled.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/config/replicator.rst#2025-04-21_snippet_25\n\nLANGUAGE: ini\nCODE:\n```\n[replicator]\nssl_certificate_max_depth = 3\n```\n\n----------------------------------------\n\nTITLE: Configuring Private Key File Path for CouchDB Replicator\nDESCRIPTION: Defines the path to a PEM encoded private key file used by the replicator. This setting tells CouchDB where to find the user's private key for authentication.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/config/replicator.rst#2025-04-21_snippet_21\n\nLANGUAGE: ini\nCODE:\n```\n[replicator]\nkey_file = /full/path/to/server_key.pem\n```\n\n----------------------------------------\n\nTITLE: Delegated Replication Configuration\nDESCRIPTION: Example of a replication document with user context delegation for specific user roles and permissions.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/replication/replicator.rst#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"_id\": \"my_rep\",\n    \"source\": \"http://user:password@bserver.com:5984/foo\",\n    \"target\": \"http://adm:pass@localhost:5984/bar\",\n    \"continuous\": true,\n    \"user_ctx\": {\n        \"name\": \"joe\",\n        \"roles\": [\"erlanger\", \"researcher\"]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Indexed Field Query with Sort\nDESCRIPTION: Complete query object with selector, sort, and field specifications for an indexed field.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/ddocs/mango.rst#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"selector\": {\n    \"year\": {\n      \"$eq\": 2001\n    }\n  },\n  \"sort\": [\n    \"year\"\n  ],\n  \"fields\": [\n    \"year\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Memory Usage Check in Erlang for CouchDB Weatherreport\nDESCRIPTION: Defines the check/0 function which performs the actual memory usage check. It retrieves the process ID, runs a system command to get memory usage, and returns info and critical messages based on the results.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/weatherreport/how_to_add_a_check.md#2025-04-21_snippet_3\n\nLANGUAGE: erlang\nCODE:\n```\n-spec check() -> [{atom(), term()}].\ncheck() ->\n    Pid = weatherreport_node:pid(),\n    Output = weatherreport_util:run_command(\"ps -o pmem,rss -p \" ++ Pid),\n    [_,_,Percent, RealSize| _] = string:tokens(Output, \"/n \\n\"),\n    Messages = [{info, {process_usage, Percent, RealSize}}],\n    case weatherreport_util:binary_to_float(list_to_binary(Percent)) >= 90 of\n        false ->\n            Messages;\n        true ->\n            [{critical, {high_memory, Percent}} | Messages]\n    end.\n```\n\n----------------------------------------\n\nTITLE: Retrieve Information About Replication Jobs - HTTP GET\nDESCRIPTION: This snippet demonstrates how to retrieve information about ongoing replication jobs via the CouchDB API. The request is made to the '/_scheduler/jobs' endpoint with the required headers.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/server/common.rst#2025-04-21_snippet_20\n\nLANGUAGE: http\nCODE:\n```\nGET /_scheduler/jobs HTTP/1.1\nAccept: application/json\nHost: localhost:5984\n```\n\n----------------------------------------\n\nTITLE: Database Request Example in CouchDB\nDESCRIPTION: Shows the basic format for making a GET request to retrieve database information, using 'recipes' as an example database name.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/database/index.rst#2025-04-21_snippet_0\n\nLANGUAGE: none\nCODE:\n```\nGET /recipes\n```\n\n----------------------------------------\n\nTITLE: Recording Replication Checkpoint on Target in CouchDB (HTTP/JSON)\nDESCRIPTION: Shows how to update the replication log on the target database in CouchDB. This is similar to the source update but performed on the target to maintain consistency.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/replication/protocol.rst#2025-04-21_snippet_26\n\nLANGUAGE: http\nCODE:\n```\nPUT /target/_local/afa899a9e59589c3d4ce5668e3218aef HTTP/1.1\nAccept: application/json\nContent-Length: 591\nContent-Type: application/json\nHost: localhost:5984\nUser-Agent: CouchDB\n\n{\n    \"_id\": \"_local/afa899a9e59589c3d4ce5668e3218aef\",\n    \"_rev\": \"1-31f36e40158e717fbe9842e227b389df\",\n    \"_revisions\": {\n        \"ids\": [\n            \"31f36e40158e717fbe9842e227b389df\"\n        ],\n        \"start\": 1\n    },\n    \"history\": [\n        {\n            \"doc_write_failures\": 0,\n            \"docs_read\": 6,\n```\n\n----------------------------------------\n\nTITLE: Retrieving Database Updates with HTTP GET Request in CouchDB\nDESCRIPTION: Example HTTP GET request to the _db_updates endpoint which returns a list of database events (created, updated, deleted). This endpoint allows clients to monitor changes to databases on the server.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/server/common.rst#2025-04-21_snippet_8\n\nLANGUAGE: http\nCODE:\n```\nGET /_db_updates HTTP/1.1\nAccept: application/json\nHost: localhost:5984\n```\n\n----------------------------------------\n\nTITLE: PUT Response for Invalid Database Name in CouchDB\nDESCRIPTION: This is the response when attempting to create a database with an invalid name. It returns a 400 Bad Request status with a detailed error message about naming rules.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/database/common.rst#2025-04-21_snippet_8\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 400 Bad Request\nCache-Control: must-revalidate\nContent-Length: 194\nContent-Type: application/json\nDate: Mon, 12 Aug 2013 08:02:10 GMT\nServer: CouchDB (Erlang/OTP)\n\n{\n    \"error\": \"illegal_database_name\",\n    \"reason\": \"Name: '_db'. Only lowercase characters (a-z), digits (0-9), and any of the characters _, $, (, ), +, -, and / are allowed. Must begin with a letter.\"\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Documents to a Partitioned Database using Curl in Bash\nDESCRIPTION: This Bash command uploads a new sensor reading document into the partitioned database, demonstrating the required format for partitioned document IDs.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/partitioned-dbs/index.rst#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncat doc.json\n{\n    \"_id\": \"sensor-260:sensor-reading-ca33c748-2d2c-4ed1-8abf-1bca4d9d03cf\",\n    \"sensor_id\": \"sensor-260\",\n    \"location\": [41.6171031, -93.7705674],\n    \"field_name\": \"Bob's Corn Field #5\",\n    \"readings\": [\n        [\"2019-01-21T00:00:00\", 0.15],\n        [\"2019-01-21T06:00:00\", 0.14],\n        [\"2019-01-21T12:00:00\", 0.16],\n        [\"2019-01-21T18:00:00\", 0.11]\n    ]\n}\n$ curl -X POST -H \"Content-Type: application/json\" \\\n            http://adm:pass@127.0.0.1:5984/my_new_db -d @doc.json\n{\n    \"ok\": true,\n    \"id\": \"sensor-260:sensor-reading-ca33c748-2d2c-4ed1-8abf-1bca4d9d03cf\",\n    \"rev\": \"1-05ed6f7abf84250e213fcb847387f6f5\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Cluster Placement Rules\nDESCRIPTION: Configuration example for defining cluster-wide placement rules in local.ini or default.ini, specifying replica distribution across different zones.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/cluster/databases.rst#2025-04-21_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n[cluster]\nplacement = metro-dc-a:2,metro-dc-b:1\n```\n\n----------------------------------------\n\nTITLE: POSTing a Search Query in CouchDB Nouveau Search (HTTP)\nDESCRIPTION: Example of using HTTP POST to send a search query in CouchDB Nouveau search. It demonstrates how to structure the request with a JSON body.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/ddocs/nouveau.rst#2025-04-21_snippet_15\n\nLANGUAGE: http\nCODE:\n```\nPOST /db/_design/ddoc/_nouveau/searchname HTTP/1.1\nContent-Type: application/json\n```\n\n----------------------------------------\n\nTITLE: Get Specific Reshard Job JSON Response\nDESCRIPTION: Example JSON response for the GET /_reshard/jobs/$jobid endpoint, showing detailed information about a specific resharding job.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/rfcs/002-shard-splitting.md#2025-04-21_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"history\": [\n        {\n            \"detail\": null,\n            \"timestamp\": \"2019-02-12T16:55:41Z\",\n            \"type\": \"new\"\n        },\n        {\n            \"detail\": \"Shard splitting disabled\",\n            \"timestamp\": \"2019-02-12T16:55:41Z\",\n            \"type\": \"stopped\"\n        }\n    ],\n    \"id\": \"001-d457a4ea82877a26abbcbcc0e01c4b0070027e72b5bf0c4ff9c89eec2da9e790\",\n    \"job_state\": \"stopped\",\n    \"node\": \"node1@127.0.0.1\",\n    \"source\": \"shards/80000000-bfffffff/db1.1549986514\",\n    \"split_state\": \"new\",\n    \"start_time\": \"1970-01-01T00:00:00Z\",\n    \"state_info\": {\n        \"reason\": \"Shard splitting disabled\"\n    },\n    \"target\": [\n        \"shards/80000000-9fffffff/db1.1549986514\",\n        \"shards/a0000000-bfffffff/db1.1549986514\"\n    ],\n    \"type\": \"split\",\n    \"update_time\": \"2019-02-12T16:55:41Z\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring CouchDB Background Indexing Blocklist\nDESCRIPTION: Example configuration showing how to block specific database shard files from auto-indexing by adding them to the ken.ignore section. The key must be the exact shard name without the .couch suffix.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/config/indexbuilds.rst#2025-04-21_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[ken.ignore]\nshards/00000000-1fffffff/mydb.1567719095 = true\n```\n\n----------------------------------------\n\nTITLE: Listing All Documents in a Partition using Curl in Bash\nDESCRIPTION: This Bash command lists all documents within a specific partition in the partitioned database, illustrating how to access and query individual partitions effectively.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/partitioned-dbs/index.rst#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncurl http://adm:pass@127.0.0.1:5984/my_new_db/_partition/sensor-260/_all_docs\n{\"total_rows\": 1, \"offset\": 0, \"rows\":[\n    {\n        \"id\":\"sensor-260:sensor-reading-ca33c748-2d2c-4ed1-8abf-1bca4d9d03cf\",\n        \"key\":\"sensor-260:sensor-reading-ca33c748-2d2c-4ed1-8abf-1bca4d9d03cf\",\n        \"value\": {\"rev\": \"1-05ed6f7abf84250e213fcb847387f6f5\"}\n    }\n]}\n```\n\n----------------------------------------\n\nTITLE: Generating UUIDs via HTTP Request\nDESCRIPTION: This command uses `curl` to retrieve two UUIDs from a CouchDB instance. These UUIDs are used to configure the cluster UUID and shared HTTP secret, ensuring consistency across all nodes in the cluster. The CouchDB instance must be running and accessible via HTTP.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/setup/cluster.rst#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncurl http://<server-IP|FQDN>:5984/_uuids?count=2\n```\n\n----------------------------------------\n\nTITLE: Setting Usage Coefficient Decay for CouchDB Replicator Scheduling\nDESCRIPTION: Configures how quickly the historic fair share usage decays. Value must be between 0.0 and 1.0, with lower values causing faster decay of historic usage.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/config/replicator.rst#2025-04-21_snippet_27\n\nLANGUAGE: ini\nCODE:\n```\n[replicator]\nusage_coeff = 0.5\n```\n\n----------------------------------------\n\nTITLE: Configuring Authentication Plugins for CouchDB Replicator\nDESCRIPTION: Defines the list of authentication plugins for the replicator. Plugins are tried in order with the first successful one being used. Includes session authentication and basic authentication plugins.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/config/replicator.rst#2025-04-21_snippet_26\n\nLANGUAGE: ini\nCODE:\n```\n[replicator]\nauth_plugins = couch_replicator_auth_session,couch_replicator_auth_noop\n```\n\n----------------------------------------\n\nTITLE: Setting Interactive View Indexing Threshold in CouchDB\nDESCRIPTION: Defines the disk usage threshold percentage above which CouchDB stops updating stale view indexes on query. Affects view_index_dir directory.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/config/disk-monitor.rst#2025-04-21_snippet_3\n\nLANGUAGE: ini\nCODE:\n```\n[disk_monitor]\ninteractive_view_indexing_threshold = 90\n```\n\n----------------------------------------\n\nTITLE: Connecting Erlang Nodes\nDESCRIPTION: This command connects two Erlang nodes. The `net_kernel:connect_node` function attempts to establish a connection to the specified node. A return value of `true` indicates a successful connection, while `false` or no response suggests a firewall, DNS, or configuration issue. The Erlang shell must be running.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/setup/cluster.rst#2025-04-21_snippet_3\n\nLANGUAGE: erlang\nCODE:\n```\nnet_kernel:connect_node('car@192.168.0.2').\n```\n\n----------------------------------------\n\nTITLE: Changing Resharding State in CouchDB\nDESCRIPTION: This HTTP request and response demonstrate how to change the resharding state on the CouchDB cluster to 'stopped'.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/server/common.rst#2025-04-21_snippet_44\n\nLANGUAGE: http\nCODE:\n```\nPUT /_reshard/state HTTP/1.1\nAccept: application/json\nHost: localhost:5984\n\n{\n    \"state\": \"stopped\",\n    \"reason\": \"Rebalancing in progress\"\n}\n```\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200 OK\nContent-Type: application/json\n\n{\n    \"ok\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Prometheus Port in CouchDB\nDESCRIPTION: Sets the port on which clients can query the Prometheus endpoint data without authentication. This option was introduced in CouchDB 3.2.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/config/misc.rst#2025-04-21_snippet_12\n\nLANGUAGE: ini\nCODE:\n```\n[prometheus]\nport = 17986\n```\n\n----------------------------------------\n\nTITLE: Querying Local Documents with POST Request in HTTP\nDESCRIPTION: Sends a POST request to query specific local documents in a CouchDB database by providing an array of document keys in the request body.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/local.rst#2025-04-21_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nPOST /db/_local_docs HTTP/1.1\nAccept: application/json\nContent-Length: 70\nContent-Type: application/json\nHost: localhost:5984\n\n{\n    \"keys\" : [\n        \"_local/localdoc02\",\n        \"_local/localdoc05\"\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Scheduling Windows for Compaction\nDESCRIPTION: This snippet provides an example of how to define scheduling windows for a compaction channel in CouchDB. It specifies the time range during which compaction operations can occur, along with the strictness of this schedule.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/maintenance/compaction.rst#2025-04-21_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[smoosh.overnight_channel]\nfrom = 20:00\nto = 06:00\nstrict_window = true\n```\n\n----------------------------------------\n\nTITLE: Querying JavaScript Engine Version in CouchDB\nDESCRIPTION: Demonstrates how to use the node-local _versions API endpoint to retrieve the current JavaScript engine type and version in CouchDB 3.4 and later.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/best-practices/jsdevel.rst#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n% http http://adm:pass@localhost:5984/_node/_local/_versions | jq '.javascript_engine'\n{\n  \"version\": \"1.8.5\",\n  \"name\": \"spidermonkey\"\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving CouchDB Server Information with cURL\nDESCRIPTION: A simple GET request to retrieve basic information about the CouchDB server. This returns version information, UUID, and available features.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/intro/curl.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nshell> curl http://127.0.0.1:5984\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"couchdb\": \"Welcome\",\n  \"version\": \"3.0.0\",\n  \"git_sha\": \"83bdcf693\",\n  \"uuid\": \"56f16e7c93ff4a2dc20eb6acc7000b71\",\n  \"features\": [\n    \"access-ready\",\n    \"partitioned\",\n    \"pluggable-storage-engines\",\n    \"reshard\",\n    \"scheduler\"\n  ],\n  \"vendor\": {\n    \"name\": \"The Apache Software Foundation\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Partition Information - GET Request\nDESCRIPTION: Makes a GET request to retrieve information about a specific partition, including document counts and size metrics.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/partitioned-dbs.rst#2025-04-21_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nGET /db/_partition/sensor-260 HTTP/1.1\nAccept: application/json\nHost: localhost:5984\n```\n\n----------------------------------------\n\nTITLE: Response containing purge history from CouchDB\nDESCRIPTION: HTTP response showing the history of purged document IDs and their revisions. The response includes a list of purged documents with their IDs and the specific revisions that were purged.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/database/misc.rst#2025-04-21_snippet_3\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200 OK\nCache-Control: must-revalidate\nContent-Length: 75\nContent-Type: application/json\nDate: Thu, 24 Aug 2023 20:56:06 GMT\nServer: CouchDB (Erlang/OTP)\n\n{\n  \"purged_infos\": [\n    {\n      \"id\": \"doc_id\",\n      \"revs\": [\n        \"1-85cfcb946ba8fea03ba81ec38a7a9998\",\n        \"2-c6548393a891f2cec9c7755832ff9d6f\"\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Partition Information using Curl in Bash\nDESCRIPTION: This Bash command retrieves information about a specific partition, including document counts and sizes, demonstrating how to monitor partition data effectively.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/partitioned-dbs/index.rst#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncurl http://adm:pass@127.0.0.1:5984/my_new_db/_partition/sensor-260\n{\n  \"db_name\": \"my_new_db\",\n  \"doc_count\": 1,\n  \"doc_del_count\": 0,\n  \"partition\": \"sensor-260\",\n  \"sizes\": {\n    \"active\": 244,\n    \"external\": 347\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Monitoring Jobs in CouchDB Scheduler\nDESCRIPTION: This JSON snippet provides detailed information about replication jobs in the CouchDB scheduler. It includes job history and states, used for tracking job progress and identifying issues during replication tasks.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/replication/replicator.rst#2025-04-21_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"jobs\": [\n        {\n            \"database\": \"_replicator\",\n            \"doc_id\": \"my_rep\",\n            \"history\": [\n                {\n                    \"timestamp\": \"2017-04-05T19:18:15Z\",\n                    \"type\": \"started\"\n                },\n                {\n                    \"timestamp\": \"2017-04-05T19:18:15Z\",\n                    \"type\": \"added\"\n                }\n            ],\n            \"id\": \"a81a78e822837e66df423d54279c15fe+continuous+create_target\",\n            \"info\": {\n                \"changes_pending\": 0,\n                \"checkpointed_source_seq\": \"113-g1AAAACTeJzLYWBgYMpgTmHgz8tPSTV0MDQy1zMAQsMckEQiQ1L9____szKYE01ygQLsZsYGqcamiZjKcRqRxwIkGRqA1H-oSbZgk1KMLCzTDE0wdWUBAF6HJIQ\",\n                \"doc_write_failures\": 0,\n                \"docs_read\": 113,\n                \"docs_written\": 113,\n                \"missing_revisions_found\": 113,\n                \"revisions_checked\": 113,\n                \"source_seq\": \"113-g1AAAACTeJzLYWBgYMpgTmHgz8tPSTV0MDQy1zMAQsMckEQiQ1L9____szKYE01ygQLsZsYGqcamiZjKcRqRxwIkGRqA1H-oSbZgk1KMLCzTDE0wdWUBAF6HJIQ\",\n                \"through_seq\": \"113-g1AAAACTeJzLYWBgYMpgTmHgz8tPSTV0MDQy1zMAQsMckEQiQ1L9____szKYE01ygQLsZsYGqcamiZjKcRqRxwIkGRqA1H-oSbZgk1KMLCzTDE0wdWUBAF6HJIQ\"\n            },\n            \"node\": \"node1@127.0.0.1\",\n            \"pid\": \"<0.1174.0>\",\n            \"source\": \"http://myserver.com/foo/\",\n            \"start_time\": \"2017-04-05T19:18:15Z\",\n            \"target\": \"http://localhost:5984/bar/\",\n            \"user\": null\n        }\n    ],\n    \"offset\": 0,\n    \"total_rows\": 1\n}\n```\n\n----------------------------------------\n\nTITLE: JavaScript Reduce Function for Tag Uniqueness\nDESCRIPTION: A reduce function that enables unique tag listing within CouchDB views. It works in conjunction with a special query parameter, emphasizing how to handle data duplication efficiently.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/ddocs/views/nosql.rst#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nfunction(keys, values) {\n    return true;\n}\n```\n\n----------------------------------------\n\nTITLE: Storing and Retrieving a Number in CouchDB JSON\nDESCRIPTION: Demonstrates how a number stored in CouchDB JSON may be returned with additional precision due to floating-point representation.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/basics.rst#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"_id\":\"30b3b38cdbd9e3a587de9b8122000cff\",\n    \"number\": 1.1\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"_id\":\"30b3b38cdbd9e3a587de9b8122000cff\",\n    \"_rev\":\"1-f065cee7c3fd93aa50f6c97acde93030\",\n    \"number\":1.1000000000000000888\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Non-Partitioned Design Document in CouchDB\nDESCRIPTION: Example of creating a global (non-partitioned) design document for cross-partition queries, including the required partitioned:false option.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/partitioned-dbs/index.rst#2025-04-21_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nshell> cat ddoc2.json\n{\n  \"_id\": \"_design/all_sensors\",\n  \"options\": {\n    \"partitioned\": false\n  },\n  \"views\": {\n    \"by_field\": {\n      \"map\": \"function(doc) { ... }\"\n    }\n  }\n}\nshell> $ curl -X POST -H \"Content-Type: application/json\" http://adm:pass@127.0.0.1:5984/my_new_db -d @ddoc2.json\n{\n    \"ok\": true,\n    \"id\": \"_design/all_sensors\",\n    \"rev\": \"1-4a8188d80fab277fccf57bdd7154dec1\"\n}\n```\n\n----------------------------------------\n\nTITLE: Descending Sort View Results Request in CouchDB\nDESCRIPTION: HTTP GET request to retrieve reverse sorted view results using descending=true parameter with corresponding response\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/ddoc/views.rst#2025-04-21_snippet_6\n\nLANGUAGE: http\nCODE:\n```\nGET /db/_design/test/_view/sorting?descending=true HTTP/1.1\nAccept: application/json\nHost: localhost:5984\n```\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200 OK\nCache-Control: must-revalidate\nContent-Type: application/json\nDate: Wed, 21 Aug 2013 10:09:25 GMT\nETag: \"Z4N468R15JBT98OM0AMNSR8U\"\nServer: CouchDB (Erlang/OTP)\nTransfer-Encoding: chunked\n\n{\n    \"offset\": 0,\n    \"rows\": [\n        {\n            \"id\": \"dummy-doc\",\n            \"key\": {\n                \"foo\": \"bar\"\n            },\n            \"value\": null\n        },\n        {\n            \"id\": \"dummy-doc\",\n            \"key\": {},\n            \"value\": null\n        },\n        {\n            \"id\": \"dummy-doc\",\n            \"key\": [\n                3\n            ],\n            \"value\": null\n        },\n        {\n            \"id\": \"dummy-doc\",\n            \"key\": [\n                2,\n                3\n            ],\n            \"value\": null\n        },\n        {\n            \"id\": \"dummy-doc\",\n            \"key\": [\n                1,\n                2,\n                3\n            ],\n            \"value\": null\n        },\n        {\n            \"id\": \"dummy-doc\",\n            \"key\": [],\n            \"value\": null\n        },\n        {\n            \"id\": \"dummy-doc\",\n            \"key\": \"\\u043f\\u0440\\u0438\\u0432\\u0435\\u0442\",\n            \"value\": null\n        },\n        {\n            \"id\": \"dummy-doc\",\n            \"key\": \"Hello\",\n            \"value\": null\n        },\n        {\n            \"id\": \"dummy-doc\",\n            \"key\": \"hello\",\n            \"value\": null\n        },\n        {\n            \"id\": \"dummy-doc\",\n            \"key\": \"10\",\n            \"value\": null\n        },\n        {\n            \"id\": \"dummy-doc\",\n            \"key\": 42,\n            \"value\": null\n        },\n        {\n            \"id\": \"dummy-doc\",\n            \"key\": 10,\n            \"value\": null\n        },\n        {\n            \"id\": \"dummy-doc\",\n            \"key\": 1,\n            \"value\": null\n        },\n        {\n            \"id\": \"dummy-doc\",\n            \"key\": 0,\n            \"value\": null\n        },\n        {\n            \"id\": \"dummy-doc\",\n            \"key\": true,\n            \"value\": null\n        },\n        {\n            \"id\": \"dummy-doc\",\n            \"key\": false,\n            \"value\": null\n        },\n        {\n            \"id\": \"dummy-doc\",\n            \"key\": null,\n            \"value\": null\n        }\n    ],\n    \"total_rows\": 17\n}\n```\n\n----------------------------------------\n\nTITLE: Complex Map Function with Multiple Emits in CouchDB Design Document (JSON/JavaScript)\nDESCRIPTION: An example of a design document with a map function that emits multiple key/value pairs for each document, demonstrating the implementation of interactive views and showing how multiple values are indexed.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/rfcs/008-map-indexes.md#2025-04-21_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n{\n  \"_id\": \"_design/design-doc-id\",\n  \"_rev\": \"1-8d361a23b4cb8e213f0868ea3d2742c2\",\n  \"views\": {\n    \"map-view\": {\n      \"map\": \"function (doc) {\\n          emit(doc._id, doc.location);\\n          emit([doc._id, doc.value], doc.name);\\n        }\",\n    }\n  },\n  \"language\": \"javascript\",\n  \"options\": [{\"interactive\":  true}]\n}\n```\n\n----------------------------------------\n\nTITLE: Memory-Limited JavaScript Query Server Configuration\nDESCRIPTION: Configuration for JavaScript query server with increased memory limit of 512 MiB.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/config/query-servers.rst#2025-04-21_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\nCOUCHDB_QUERY_SERVER_JAVASCRIPT=\"/usr/bin/couchjs -S 536870912 /usr/share/server/main.js\"\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenTracing Filters in CouchDB\nDESCRIPTION: Example of how OpenTracing filters would be configured in CouchDB's configuration file. The filters use a custom DSL to define tracing behavior.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/rfcs/011-opentracing.md#2025-04-21_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[tracing.filters]\n\n<name> = ([<condition>]) -> <action>.\n```\n\n----------------------------------------\n\nTITLE: CouchDB Not Found Error Response Example\nDESCRIPTION: Example of a JSON error response returned by CouchDB when a requested resource is not found (404). The response includes an error type and reason message.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/basics.rst#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n{\"error\":\"not_found\",\"reason\":\"no_db_file\"}\n```\n\n----------------------------------------\n\nTITLE: JWT Token Payload Example\nDESCRIPTION: Example of JWT token payload structure with nested roles and access permissions.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/config/auth.rst#2025-04-21_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"resource_access\": {\n        \"security.settings\": {\n            \"account\": {\n                \"roles\": [\n                    \"manage-account\",\n                    \"view-profile\"\n                ]\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Response showing the purged_infos_limit from CouchDB\nDESCRIPTION: HTTP response showing the current purged_infos_limit value. This setting defines how many historical purges (purged document IDs with their revisions) can be stored in the database.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/database/misc.rst#2025-04-21_snippet_5\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200 OK\nCache-Control: must-revalidate\nContent-Length: 5\nContent-Type: application/json\nDate: Wed, 14 Jun 2017 14:43:42 GMT\nServer: CouchDB (Erlang/OTP)\n\n1000\n```\n\n----------------------------------------\n\nTITLE: Activating Query on a CouchDB Cluster\nDESCRIPTION: This snippet shows how to enable the Query feature on a CouchDB cluster by setting a specific configuration using the rpc:multicall function.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/mango/README.md#2025-04-21_snippet_0\n\nLANGUAGE: erlang\nCODE:\n```\nrpc:multicall(config, set, [\"native_query_servers\", \"query\", \"{mango_native_proc, start_link, []}\"]).\n```\n\n----------------------------------------\n\nTITLE: Configuring Mango Index Options in CouchDB\nDESCRIPTION: Configuration snippet for Mango query engine settings, including index_all_disabled flag to prevent memory issues with nested arrays.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/config/query-servers.rst#2025-04-21_snippet_3\n\nLANGUAGE: ini\nCODE:\n```\n[mango]\nindex_all_disabled = false\n```\n\n----------------------------------------\n\nTITLE: Generating TLS Certificates for Erlang Distribution\nDESCRIPTION: Shell commands for generating self-signed certificates using elixir-certs tool, including root CA and server certificates.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/cluster/tls_erlang_distribution.rst#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ git clone https://github.com/rnewson/elixir-certs\n$ cd elixir-certs\n$ ./certs self-signed \\\n    --out-cert ca-cert.pem --out-key ca-key.pem \\\n    --template root-ca \\\n    --subject \"/CN=CouchDB Root CA\"\n$./certs create-cert \\\n    --issuer-cert ca-cert.pem --issuer-key ca-key.pem \\\n    --out-cert cert.pem --out-key key.pem \\\n    --template server \\\n    --subject \"/CN=<hostname>\"\n$ cat key.pem cert.pem >erlserver.pem\n```\n\n----------------------------------------\n\nTITLE: Map Function for Cross-Partition Sensor Field Query\nDESCRIPTION: JavaScript map function that emits sensor IDs by field name, used for querying across multiple partitions. Includes document ID filtering.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/partitioned-dbs/index.rst#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nfunction(doc) {\n    if(doc._id.indexOf(\":sensor-reading-\") < 0) {\n        return;\n    }\n    emit(doc.field_name, doc.sensor_id)\n}\n```\n\n----------------------------------------\n\nTITLE: HTTP Response Headers with JSON Content Type\nDESCRIPTION: Example of CouchDB response headers when application/json is specified in the Accept header. The content type in the response matches the requested format.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/basics.rst#2025-04-21_snippet_4\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200 OK\nServer: CouchDB (Erlang/OTP)\nDate: Thu, 13 Jan 2013 13:40:11 GMT\nContent-Type: application/json\nContent-Length: 227\nCache-Control: must-revalidate\n```\n\n----------------------------------------\n\nTITLE: Setting Erlang Port Limit in vm.args\nDESCRIPTION: Configuration line to add to CouchDB's vm.args file to increase the maximum number of Erlang ports, necessary when the default limit is insufficient.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/install/troubleshooting.rst#2025-04-21_snippet_15\n\nLANGUAGE: text\nCODE:\n```\n+Q 102400\n```\n\n----------------------------------------\n\nTITLE: Generating User Database Name in CouchDB\nDESCRIPTION: This snippet demonstrates the naming convention for user-specific databases. It shows how a username is hex-encoded to create a unique and valid database name.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/couch_peruser/README.md#2025-04-21_snippet_0\n\nLANGUAGE: erlang\nCODE:\n```\nuserdb-{hex encoded username}\n```\n\n----------------------------------------\n\nTITLE: Setting Replication Check Interval in CouchDB\nDESCRIPTION: Defines the scheduling interval in milliseconds for checking replication jobs. During each cycle, the scheduler can start or stop jobs up to the max_churn limit.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/config/replicator.rst#2025-04-21_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[replicator]\ninterval = 60000\n```\n\n----------------------------------------\n\nTITLE: Configuring Content-Security-Policy for CouchDB Fauxton\nDESCRIPTION: Configuration snippet to enable Content-Security-Policy (CSP) header support for the Fauxton interface in CouchDB. This feature adds security headers to all requests in the /_utils path.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/experimental.rst#2025-04-21_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[csp]\nenable = true\n```\n\n----------------------------------------\n\nTITLE: Requesting Replication Between Databases - HTTP\nDESCRIPTION: This snippet illustrates how to request replication between a source and a target database using HTTP POST method. It is necessary to specify the source as a local database and the target as a remote CouchDB database, providing the correct JSON structure for authentication if needed.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/server/common.rst#2025-04-21_snippet_14\n\nLANGUAGE: http\nCODE:\n```\nPOST http://couchdb:5984/_replicate HTTP/1.1\nContent-Type: application/json\nAccept: application/json\n\n{\n    \"source\" : \"recipes\",\n    \"target\" : \"http://coucdb-remote:5984/recipes\"\n}\n```\n\n----------------------------------------\n\nTITLE: Sync CouchDB Shards Command\nDESCRIPTION: cURL command to trigger synchronization of all shards in a database.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/cluster/sharding.rst#2025-04-21_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n$ curl -X POST $COUCH_URL:5984/{db}/_sync_shards\n{\"ok\":true}\n```\n\n----------------------------------------\n\nTITLE: Requesting a Show Function Without a Document in CouchDB\nDESCRIPTION: HTTP GET request to execute a show function without providing a specific document, which will trigger the 'no doc' response from the show function.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/ddoc/render.rst#2025-04-21_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nGET /recipes/_design/recipe/_show/description HTTP/1.1\nAccept: application/json\nHost: localhost:5984\n```\n\n----------------------------------------\n\nTITLE: Retrieving Session Info in CouchDB\nDESCRIPTION: Example of retrieving information about the current authenticated session in CouchDB. The request includes the auth cookie. The response includes user context and authentication configuration details.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/server/authn.rst#2025-04-21_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nGET /_session HTTP/1.1\nHost: localhost:5984\nAccept: application/json\nCookie: AuthSession=cm9vdDo1MEJDMDQxRDpqb-Ta9QfP9hpdPjHLxNTKg_Hf9w\n```\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200 OK\nCache-Control: must-revalidate\nContent-Length: 175\nContent-Type: application/json\nDate: Fri, 09 Aug 2013 20:27:45 GMT\nServer: CouchDB (Erlang/OTP)\nSet-Cookie: AuthSession=cm9vdDo1MjA1NTBDMTqmX2qKt1KDR--GUC80DQ6-Ew_XIw; Version=1; Path=/; HttpOnly\n\n{\n    \"info\": {\n        \"authenticated\": \"cookie\",\n        \"authentication_db\": \"_users\",\n        \"authentication_handlers\": [\n            \"cookie\",\n            \"default\"\n        ]\n    },\n    \"ok\": true,\n    \"userCtx\": {\n        \"name\": \"root\",\n        \"roles\": [\n            \"_admin\"\n        ]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Guarded Map Function for Missing Fields\nDESCRIPTION: Improved JavaScript map function that uses guards to check if the required fields exist before accessing them, preventing the 'Cannot encode undefined value as JSON' error.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/install/troubleshooting.rst#2025-04-21_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nfunction(doc) {\n  if(doc.name && doc.address) {\n    emit(doc.name, doc.address);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Limiting Maximum Document Size in CouchDB\nDESCRIPTION: Sets the maximum size for document bodies, calculated based on the serialized Erlang representation of the JSON document.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/config/couchdb.rst#2025-04-21_snippet_7\n\nLANGUAGE: ini\nCODE:\n```\n[couchdb]\nmax_document_size = 8000000 ; bytes\n```\n\n----------------------------------------\n\nTITLE: Creating CouchDB System User\nDESCRIPTION: Command to create a dedicated system user for running CouchDB. This improves security by providing proper isolation for the CouchDB process.\nSOURCE: https://github.com/apache/couchdb/blob/main/INSTALL.Unix.md#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nadduser --system \\\n        --home /opt/couchdb \\\n        --no-create-home \\\n        --shell /bin/bash \\\n        --group --gecos \\\n        \"CouchDB Administrator\" couchdb\n```\n\n----------------------------------------\n\nTITLE: POSTing a Search Query in CouchDB Nouveau Search (Shell)\nDESCRIPTION: Example of using curl to send a POST search query in CouchDB Nouveau search. It shows how to structure the request with a JSON body from the command line.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/ddocs/nouveau.rst#2025-04-21_snippet_16\n\nLANGUAGE: sh\nCODE:\n```\ncurl 'https://$HOST:5984/db/_design/ddoc/_nouveau/searchname' -X POST -H 'Content-Type: application/json' -d @search.json\n```\n\n----------------------------------------\n\nTITLE: Checking Target Existence using HTTP HEAD\nDESCRIPTION: This snippet shows the HTTP request and response for checking the existence of the target database. The Replicator MUST ensure that the Target exists by using :head:`/{db}` requests. It uses a `HEAD` request to the `/target` endpoint to check for the existence of the target database.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/replication/protocol.rst#2025-04-21_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nHEAD /target HTTP/1.1\nHost: localhost:5984\nUser-Agent: CouchDB\n```\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200 OK\nCache-Control: must-revalidate\nContent-Type: application/json\nDate: Sat, 05 Oct 2013 08:51:11 GMT\nServer: CouchDB (Erlang/OTP)\n```\n\n----------------------------------------\n\nTITLE: Response from Show Function Without a Document in CouchDB\nDESCRIPTION: HTTP response when executing a show function without a document, returning 'no doc' as specified in the function implementation.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/ddoc/render.rst#2025-04-21_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200 OK\nContent-Length: 6\nContent-Type: text/html; charset=utf-8\nDate: Wed, 21 Aug 2013 12:34:07 GMT\nEtag: \"7Z2TO7FPEMZ0F4GH0RJCRIOAU\"\nServer: CouchDB (Erlang/OTP)\nVary: Accept\n\nno doc\n```\n\n----------------------------------------\n\nTITLE: Reusable Setup Function for CouchDB Tests\nDESCRIPTION: Elixir code defining a reusable setup function for CouchDB tests, demonstrating how to create a shared setup chain.\nSOURCE: https://github.com/apache/couchdb/blob/main/test/elixir/README.md#2025-04-21_snippet_4\n\nLANGUAGE: elixir\nCODE:\n```\ndefmodule Foo do\n  alias Couch.Test.Setup.Step\n\n  def httpd_with_admin(setup) do\n    setup\n      |> Step.Start.new(:start, extra_apps: [:chttpd])\n      |> Step.User.new(:admin, roles: [:server_admin])\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Adding Node to CouchDB Cluster via HTTP Request\nDESCRIPTION: JSON payload for adding a node to a CouchDB cluster through the /_cluster_setup endpoint.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/setup/README.md#2025-04-21_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"action\":\"add_node\",\n  \"username\":\"username\",\n  \"password\":\"password\",\n  \"host\":\"192.168.1.100\",\n  [\"port\": 5984],\n  \"name\": \"node1\"  // as in \"node1@hostname\", same as in vm.args\n}\n```\n\n----------------------------------------\n\nTITLE: Tracking Crashing State Details in CouchDB Scheduler\nDESCRIPTION: This JSON snippet provides insights into the crash history of a replication job in CouchDB. It includes timestamps and reasons for each crash, helping users understand and troubleshoot the underlying issues leading to replication failures.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/replication/replicator.rst#2025-04-21_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n[\n    {\n        \"reason\": \"db_not_found: could not open http://adm:*****@localhost:5984/missing/\",\n        \"timestamp\": \"2017-04-05T20:55:10Z\",\n        \"type\": \"crashed\"\n    },\n    {\n        \"timestamp\": \"2017-04-05T20:55:10Z\",\n        \"type\": \"started\"\n    },\n    {\n        \"reason\": \"db_not_found: could not open http://adm:*****@localhost:5984/missing/\",\n        \"timestamp\": \"2017-04-05T20:47:10Z\",\n        \"type\": \"crashed\"\n    },\n    {\n        \"timestamp\": \"2017-04-05T20:47:10Z\",\n        \"type\": \"started\"\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Blog Post Document Structure for Separate Comments Approach\nDESCRIPTION: Approach #2 for modeling blog posts with comments: separate documents for posts with type identification.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/ddocs/views/joins.rst#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"_id\": \"myslug\",\n    \"_rev\": \"123456\",\n    \"type\": \"post\",\n    \"author\": \"john\",\n    \"title\": \"My blog post\",\n    \"content\": \"Bla bla bla â€¦\"\n}\n```\n\n----------------------------------------\n\nTITLE: Setting File Descriptor Limits for CouchDB\nDESCRIPTION: This snippet provides instructions to set higher file descriptor limits for the CouchDB service on a systemd-based Linux system. It is necessary for deployments with many databases or views to avoid hitting file descriptor limits.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/maintenance/performance.rst#2025-04-21_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[Service]\nLimitNOFILE=65536\n```\n\n----------------------------------------\n\nTITLE: Flowchart for Finding Common Ancestry in CouchDB Replication\nDESCRIPTION: This text-based flowchart illustrates the process of finding a common ancestry between source and target databases during CouchDB replication. It involves getting target information, generating a replication ID, and retrieving replication logs from both source and target databases using GET requests to `/_local/replication-id`.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/replication/protocol.rst#2025-04-21_snippet_8\n\nLANGUAGE: text\nCODE:\n```\n+ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - +\n' Get Peers Information:                                                    '\n'                                                                           '\n'                             +-------------------------------------------+ '\n'                             |           Get Target Information          | '\n'                             +-------------------------------------------+ '\n'                               |                                           '\n+ - - - - - - - - - - - - - - - | - - - - - - - - - - - - - - - - - - - - - +\n                                    |\n+ - - - - - - - - - - - - - - - | - - - - - - - - - - - - - - - - - - - - - +\n' Find Common Ancestry:         v                                           '\n'                             +-------------------------------------------+ '\n'                             |          Generate Replication ID          | '\n'                             +-------------------------------------------+ '\n'                               |                                           '\n'                               |                                           '\n'                               v                                           '\n'                             +-------------------------------------------+ '\n'                             |      Get Replication Log from Source      | '\n'                             +-------------------------------------------+ '\n'                             |     GET /source/_local/replication-id     | '\n'                             +-------------------------------------------+ '\n'                               |                                           '\n'                               | 200 OK                                    '\n'                               | 404 Not Found                             '\n'                               v                                           '\n'                             +-------------------------------------------+ '\n'                             |      Get Replication Log from Target      | '\n'                             +-------------------------------------------+ '\n'                             |     GET /target/_local/replication-id     | '\n'                             +-------------------------------------------+ '\n'                               |                                           '\n'                               | 200 OK                                    '\n'                               | 404 Not Found                             '\n'                               v                                           '\n'                             +-------------------------------------------+ '\n```\n\n----------------------------------------\n\nTITLE: HTTP Response from /_scheduler/docs\nDESCRIPTION: Example HTTP response showing replication document states including progress information, timestamps, and replication statistics.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/server/common.rst#2025-04-21_snippet_23\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200 OK\nContent-Type: application/json\nDate: Sat, 29 Apr 2017 05:10:08 GMT\nServer: Server: CouchDB (Erlang/OTP)\nTransfer-Encoding: chunked\n```\n\n----------------------------------------\n\nTITLE: Error Response Format in CouchDB API\nDESCRIPTION: Example of a JSON error response returned by CouchDB when an unsupported HTTP method is used. The response includes an error type and descriptive reason.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/basics.rst#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"error\":\"method_not_allowed\",\n    \"reason\":\"Only GET,HEAD allowed\"\n}\n```\n\n----------------------------------------\n\nTITLE: MochiWeb Server Options Configuration\nDESCRIPTION: Server options for the MochiWeb component including backlog and acceptor pool size settings.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/config/http.rst#2025-04-21_snippet_8\n\nLANGUAGE: ini\nCODE:\n```\n[httpd]\nserver_options = [{backlog, 128}, {acceptor_pool_size, 16}]\n```\n\n----------------------------------------\n\nTITLE: Setting Maximum Job History in CouchDB\nDESCRIPTION: Configures the maximum number of events recorded for each replication job, affecting the backoff factor for job restarts after failures.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/config/replicator.rst#2025-04-21_snippet_3\n\nLANGUAGE: ini\nCODE:\n```\n[replicator]\nmax_history = 20\n```\n\n----------------------------------------\n\nTITLE: Advanced Virtual Host Path Rewriting in CouchDB\nDESCRIPTION: Examples of more complex virtual host configurations using variables to dynamically map hosts to database paths. This enables flexible URL structures for applications.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/config/http.rst#2025-04-21_snippet_22\n\nLANGUAGE: ini\nCODE:\n```\n[vhosts]\n*.couchdb.local = /*\n:dbname. = /:dbname\n:ddocname.:dbname.example.com = /:dbname/_design/:ddocname/_rewrite\n```\n\n----------------------------------------\n\nTITLE: Specifying Database Directory in CouchDB Config\nDESCRIPTION: Sets the location for CouchDB database files. This directory should be writable and readable for the CouchDB service user.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/config/couchdb.rst#2025-04-21_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[couchdb]\ndatabase_dir = /var/lib/couchdb\n```\n\n----------------------------------------\n\nTITLE: Replication with Server X Configuration\nDESCRIPTION: Example replication document for pulling data from server X with basic authentication.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/replication/replicator.rst#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"_id\": \"rep_from_X\",\n    \"source\": \"http://user:password@xserver.com:5984/foo\",\n    \"target\": \"http://adm:pass@localhost:5984/foo_x\",\n    \"continuous\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Design Document Example for Reduce Index in CouchDB\nDESCRIPTION: Example design document that defines a map/reduce view that counts documents based on date components. The map function emits arrays containing year, month, and day as keys with a value of 1, and uses the built-in _count reduce function.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/rfcs/012-fdb-reduce.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n    {\n        \"_id\": \"_design/reduce-example\"\n        \"views: {\n            \"example\": {\n                \"map\": function (doc) {\n                    emit([doc.year, doc.month, doc.day], 1);\n                },\n\n                \"reduce\": \"_count\"\n            }\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Configuring Socket Options in CouchDB\nDESCRIPTION: Sets Erlang socket options for performance optimization, including keepalive and nodelay settings.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/config/replicator.rst#2025-04-21_snippet_10\n\nLANGUAGE: ini\nCODE:\n```\n[replicator]\nsocket_options = [{keepalive, true}, {nodelay, false}]\n```\n\n----------------------------------------\n\nTITLE: Successful DELETE Response for Database Removal in CouchDB\nDESCRIPTION: This is the successful response to a database deletion request with a 200 OK status. The operation has been completed successfully with quorum met.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/database/common.rst#2025-04-21_snippet_10\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200 OK\nCache-Control: must-revalidate\nContent-Length: 12\nContent-Type: application/json\nDate: Mon, 12 Aug 2013 08:54:00 GMT\nServer: CouchDB (Erlang/OTP)\n\n{\n    \"ok\": true\n}\n```\n\n----------------------------------------\n\nTITLE: GET Database Security Object Request\nDESCRIPTION: HTTP request to retrieve the current security object for a CouchDB database, which contains admin and member access configurations.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/database/security.rst#2025-04-21_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nGET /db/_security HTTP/1.1\nAccept: application/json\nHost: localhost:5984\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Leaf Revisions with open_revs=all\nDESCRIPTION: This JavaScript code snippet shows how to retrieve all leaf revisions of a document's revision tree using the `open_revs=all` parameter. The response is an array of objects, each containing either the document's data under the `ok` key or an error if the revision is missing.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/replication/conflicts.rst#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n    [\n        {\"ok\":{\"_id\":\"test\",\"_rev\":\"2-5bc3c6319edf62d4c624277fdd0ae191\",\"hello\":\"foo\"}},\n        {\"ok\":{\"_id\":\"test\",\"_rev\":\"2-65db2a11b5172bf928e3bcf59f728970\",\"hello\":\"baz\"}},\n        {\"ok\":{\"_id\":\"test\",\"_rev\":\"2-b91bb807b4685080c6a651115ff558f5\",\"hello\":\"bar\"}}\n    ]\n```\n\n----------------------------------------\n\nTITLE: Installing CouchDB on RedHat/CentOS (versions below 9)\nDESCRIPTION: Command to install Apache CouchDB on RedHat or CentOS systems prior to version 9 after the repository has been set up.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/install/unix.rst#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsudo yum install -y couchdb\n```\n\n----------------------------------------\n\nTITLE: EventSource Heartbeat Listener Example\nDESCRIPTION: Example of adding a heartbeat event listener to an EventSource connection\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/database/changes.rst#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nsource.addEventListener('heartbeat', function () {}, false);\n```\n\n----------------------------------------\n\nTITLE: Basic Date Parsing Map Function in CouchDB\nDESCRIPTION: A map function that creates a Date object from an ISO formatted document ID and emits the day and widget as keys. Used for grouping and aggregating documents by date.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/best-practices/iso-date.rst#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction(doc) {\n  var dt = new Date(doc._id);\n  emit([dt.getDate(), doc.widget], 1);\n}\n```\n\n----------------------------------------\n\nTITLE: Viewing CouchDB Snap Logs\nDESCRIPTION: Command to access the CouchDB logs through the snap logging system. The -f flag follows the log in real-time, showing new entries as they occur.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/install/snap.rst#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n$ sudo snap logs couchdb -f\n```\n\n----------------------------------------\n\nTITLE: Using Reusable Setup in CouchDB Test Module\nDESCRIPTION: Elixir code showing how to use a reusable setup function in a CouchDB test module, including context setup and test definition.\nSOURCE: https://github.com/apache/couchdb/blob/main/test/elixir/README.md#2025-04-21_snippet_5\n\nLANGUAGE: elixir\nCODE:\n```\ndefmodule Couch.Test.CRUD do\n  use Couch.Test.ExUnit.Case\n  alias Couch.Test.Utils\n\n  alias Couch.Test.Setup\n\n  alias Couch.Test.Setup.Step\n\n  def with_db(context, setup) do\n    setup =\n      setup\n      |> Setup.Common.httpd_with_db()\n      |> Setup.run()\n\n    context =\n      Map.merge(context, %{\n        db_name: setup |> Setup.get(:db) |> Step.Create.DB.name(),\n        base_url: setup |> Setup.get(:start) |> Step.Start.clustered_url(),\n        user: setup |> Setup.get(:admin) |> Step.User.name()\n      })\n\n    {context, setup}\n  end\n\n  describe \"Database CRUD using Fabric API\" do\n    @describetag setup: &__MODULE__.with_db/2\n    test \"Create DB\", ctx do\n      IO.puts(\"base_url: #{ctx.base_url}\")\n      IO.puts(\"admin: #{ctx.user}\")\n      IO.puts(\"db_name: #{ctx.db_name}\")\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Local Node via HTTP API\nDESCRIPTION: Example of using the '_local' shorthand to configure the local CouchDB node through the HTTP API.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/config/intro.rst#2025-04-21_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\ncurl -X PUT http://adm:pass@localhost:5984/_node/_local/_config/uuids/algorithm -d '\"random\"'\n```\n\n----------------------------------------\n\nTITLE: Configuring CouchDB Admin Password and Cookie\nDESCRIPTION: Commands to set up an admin password and authentication cookie for CouchDB after installation, followed by restarting the service to apply changes.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/install/snap.rst#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n$ sudo snap set couchdb admin=[your-password] setcookie=[your-cookie]\n$ sudo snap restart couchdb\n```\n\n----------------------------------------\n\nTITLE: Representing Boolean Values in JSON for CouchDB\nDESCRIPTION: Demonstrates how to represent a boolean true value in JSON format for use with CouchDB.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/basics.rst#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n{ \"value\": true}\n```\n\n----------------------------------------\n\nTITLE: Setting Maximum Document IDs for Purge Requests in CouchDB\nDESCRIPTION: Configures the maximum number of documents allowed in a single purge request. This option was introduced in CouchDB 3.0.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/config/misc.rst#2025-04-21_snippet_7\n\nLANGUAGE: ini\nCODE:\n```\n[purge]\nmax_document_id_number = 100\n```\n\n----------------------------------------\n\nTITLE: Map Function for Prefix Matching in CouchDB\nDESCRIPTION: Map function that uses regular expressions to extract and emit the prefix portion of a MIME type, enabling prefix-based queries similar to SQL's LIKE operator.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/ddocs/views/nosql.rst#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nfunction(doc) {\n    if(doc[\"mime-type\"]) {\n        // from the start (^) match everything that is not a slash ([^/]+) until\n        // we find a slash (/). Slashes needs to be escaped with a backslash (/)\n        var prefix = doc[\"mime-type\"].match(/^[^\\/]+\\//);\n        if(prefix) {\n          emit(prefix, null);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: POST Response from CouchDB View\nDESCRIPTION: Response from CouchDB showing filtered view results based on the requested keys, including only matching documents.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/ddoc/views.rst#2025-04-21_snippet_3\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200 OK\nCache-Control: must-revalidate\nContent-Type: application/json\nDate: Wed, 21 Aug 2013 09:14:13 GMT\nETag: \"6R5NM8E872JIJF796VF7WI3FZ\"\nServer: CouchDB (Erlang/OTP)\nTransfer-Encoding: chunked\n\n{\n    \"offset\": 0,\n    \"rows\": [\n        {\n            \"id\": \"SpaghettiWithMeatballs\",\n            \"key\": \"meatballs\",\n            \"value\": 1\n        },\n        {\n            \"id\": \"SpaghettiWithMeatballs\",\n            \"key\": \"spaghetti\",\n            \"value\": 1\n        }\n    ],\n    \"total_rows\": 3\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Debug Level Logging in CouchDB\nDESCRIPTION: This snippet shows how to enable debug level logging in CouchDB by modifying the configuration file. This is particularly useful for diagnosing startup issues after compiling from source.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/install/troubleshooting.rst#2025-04-21_snippet_22\n\nLANGUAGE: ini\nCODE:\n```\n[log]\\nlevel = debug\\n\n```\n\n----------------------------------------\n\nTITLE: Setting Custom VM Args and System Config Paths\nDESCRIPTION: Example of specifying custom locations for vm.args and sys.config files using environment variables.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/config/intro.rst#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nexport COUCHDB_ARGS_FILE=\"/path/to/my/vm.args\"\nexport COUCHDB_SYSCONFIG_FILE=\"/path/to/my/sys.config\"\n```\n\n----------------------------------------\n\nTITLE: Configuring CouchDB URL Encoding Behavior\nDESCRIPTION: Sets an option to stop encoding the plus sign in non-query parts of URLs. This is an opt-in setting for complying with original CouchDB standards.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/whatsnew/3.2.rst#2025-04-21_snippet_3\n\nLANGUAGE: erlang\nCODE:\n```\n[chttpd]\ndecode_plus_to_space = true\n```\n\n----------------------------------------\n\nTITLE: Fetching Multiple Documents with _all_docs in CouchDB\nDESCRIPTION: This snippet demonstrates how to fetch multiple documents at once using the _all_docs endpoint in CouchDB, including the document content but without conflict information.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/replication/conflicts.rst#2025-04-21_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n$ curl 'http://adm:pass@127.0.0.1:5984/conflict_test/_all_docs?include_docs=true&conflicts=true'\n```\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"total_rows\":1,\n    \"offset\":0,\n    \"rows\":[\n        {\n            \"id\":\"test\",\n            \"key\":\"test\",\n            \"value\":{\"rev\":\"2-b91bb807b4685080c6a651115ff558f5\"},\n            \"doc\":{\n                \"_id\":\"test\",\n                \"_rev\":\"2-b91bb807b4685080c6a651115ff558f5\",\n                \"hello\":\"bar\"\n            }\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Logging messages from CouchDB map function\nDESCRIPTION: This code snippet demonstrates how to use the `log` function within a CouchDB map function to log messages to the CouchDB log.  This is useful for debugging and monitoring the execution of map functions. The example shows logging the document ID during processing.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/query-server/javascript.rst#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n \"function(doc){\n            log('Procesing doc ' + doc['_id']);\n            emit(doc['_id'], null);\n        }\"\n```\n\n----------------------------------------\n\nTITLE: Setting Trusted Certificates File for CouchDB Replicator\nDESCRIPTION: Specifies the file containing trusted peer certificates in PEM format. This setting defines which certificate authorities are trusted during SSL verification.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/config/replicator.rst#2025-04-21_snippet_24\n\nLANGUAGE: ini\nCODE:\n```\n[replicator]\nssl_trusted_certificates_file = /etc/ssl/certs/ca-certificates.crt\n```\n\n----------------------------------------\n\nTITLE: Querying Nouveau Index Info - HTTP Request\nDESCRIPTION: HTTP GET request to retrieve metadata about a specific Nouveau search index, including the number of documents, update sequence, and disk size.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/ddoc/nouveau.rst#2025-04-21_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nGET /recipes/_design/cookbook/_nouveau_info/ingredients HTTP/1.1\nAccept: application/json\nHost: localhost:5984\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Git Commit Message Format for CouchDB Contributions\nDESCRIPTION: A template showing the proper format for Git commit messages when contributing to CouchDB. It demonstrates the proper structure with a capitalized summary, detailed explanation, and guidelines for writing in imperative mood.\nSOURCE: https://github.com/apache/couchdb/blob/main/CONTRIBUTING.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nCapitalized, short (50 chars or less) summary\n\nMore detailed explanatory text, if necessary.  Wrap it to about 72\ncharacters or so.  In some contexts, the first line is treated as the\nsubject of an email and the rest of the text as the body.  The blank\nline separating the summary from the body is critical (unless you omit\nthe body entirely); tools like rebase can get confused if you run the\ntwo together.\n\nWrite your commit message in the imperative: \"Fix bug\" and not \"Fixed bug\"\nor \"Fixes bug.\"  This convention matches up with commit messages generated\nby commands like git merge and git revert.\n\nFurther paragraphs come after blank lines.\n\n- Bullet points are okay, too\n\n- Typically a hyphen or asterisk is used for the bullet, followed by a\n  single space, with blank lines in between, but conventions vary here\n\n- Use a hanging indent\n```\n\n----------------------------------------\n\nTITLE: Creating CouchDB Database\nDESCRIPTION: Creates a new database in CouchDB using curl PUT request\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/document/attachments.rst#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nshell> curl -X PUT http://adm:pass@127.0.0.1:5984/test\n{\"ok\":true}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Document with Conflict Information\nDESCRIPTION: This JavaScript code snippet demonstrates how to retrieve a document with conflict information from CouchDB by using the `conflicts=true` parameter. The response includes the document's ID, revision, data, and a `_conflicts` array containing the revisions of conflicting documents.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/replication/conflicts.rst#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n    {\n        \"_id\":\"test\",\n        \"_rev\":\"2-b91bb807b4685080c6a651115ff558f5\",\n        \"hello\":\"bar\",\n        \"_conflicts\":[\n            \"2-65db2a11b5172bf928e3bcf59f728970\",\n            \"2-5bc3c6319edf62d4c624277fdd0ae191\"\n        ]\n    }\n```\n\n----------------------------------------\n\nTITLE: Starting a chunked response from CouchDB list function\nDESCRIPTION: This code snippet demonstrates how to use the `start` function within a CouchDB list function to initiate a chunked response and customize the HTTP response. It sets the HTTP code to 302 and includes a Location header for redirection.  The `start` function allows control over the HTTP response before sending data.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/query-server/javascript.rst#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n \"function(head, req){\n            start({\n                \"code\": 302,\n                \"headers\": {\n                    \"Location\": \"http://couchdb.apache.org\"\n                }\n            });\n            return \"Relax!\";\n        }\"\n```\n\n----------------------------------------\n\nTITLE: Error Handling for Non-Existent Database - JSON Structure\nDESCRIPTION: This snippet depicts the JSON response structure when an error occurs due to a non-existent database during replication requests. It provides feedback on the error type and the reason for the failure.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/server/common.rst#2025-04-21_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"error\" : \"db_not_found\",\n    \"reason\" : \"could not open http://couchdb-remote:5984/ol1ka/\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a JSON Object in CouchDB\nDESCRIPTION: Shows the structure of a JSON object representing a recipe document in CouchDB, including various data types like numbers and strings.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/basics.rst#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"servings\" : 4,\n    \"subtitle\" : \"Easy to make in advance, and then cook when ready\",\n    \"cooktime\" : 60,\n    \"title\" : \"Chicken Coriander\"\n}\n```\n\n----------------------------------------\n\nTITLE: Error Logging for Failed Replication - JSON Preview\nDESCRIPTION: This snippet logs the error state of a replication job that has failed due to a conflict with an existing job. Dependencies include the CouchDB environment and access to the CouchDB scheduler logs.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/replication/replicator.rst#2025-04-21_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"database\": \"_replicator\",\n    \"doc_id\": \"my_rep_dup\",\n    \"error_count\": 1,\n    \"id\": null,\n    \"info\": {\n        \"error\": \"Replication `a81a78e822837e66df423d54279c15fe+continuous+create_target` specified by document `my_rep_dup` already started, triggered by document `my_rep` from db `_replicator`\"\n    },\n    \"last_updated\": \"2017-04-05T21:41:51Z\",\n    \"source\": \"http://myserver.com/foo/\",\n    \"start_time\": \"2017-04-05T21:41:51Z\",\n    \"state\": \"failed\",\n    \"target\": \"http://user:****@localhost:5984/bar\"\n}\n```\n\n----------------------------------------\n\nTITLE: Executing View Filter Response - CouchDB Protocol\nDESCRIPTION: Example of Query Server response for view filtering showing boolean results for matched documents.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/query-server/protocol.rst#2025-04-21_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n[\n    true,\n    [\n        true,\n        false\n    ]\n]\n```\n\n----------------------------------------\n\nTITLE: Storing Bookmarks as a Single CouchDB Document\nDESCRIPTION: This snippet demonstrates how the entire bookmarks structure could be stored as a single CouchDB document. This approach simplifies storage but can lead to conflicts during replication.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/best-practices/documents.rst#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"bookmarks\":\n  // ... same as above\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Array Example in CouchDB\nDESCRIPTION: Example of a JSON array structure as used in CouchDB requests and responses. JSON arrays are ordered lists of values enclosed in square brackets.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/basics.rst#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n[\"one\", \"two\", \"three\"]\n```\n\n----------------------------------------\n\nTITLE: Installing Fauxton via npm\nDESCRIPTION: Commands to install the latest version of Fauxton globally using npm and launch it.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/fauxton/install.rst#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install -g fauxton\n$ fauxton\n```\n\n----------------------------------------\n\nTITLE: Setting Log Write Delay in CouchDB Configuration\nDESCRIPTION: Specifies the wait time in milliseconds before committing logs to disk for delayed log writes when using the 'file' writer.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/config/logging.rst#2025-04-21_snippet_3\n\nLANGUAGE: ini\nCODE:\n```\n[log]\nwrite_delay = 0\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies on Debian-based Systems\nDESCRIPTION: Command to install the necessary dependencies for building CouchDB on Debian-based systems using apt-get. This includes build tools, Erlang, ICU, SpiderMonkey, and Python.\nSOURCE: https://github.com/apache/couchdb/blob/main/INSTALL.Unix.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get --no-install-recommends -y install \\\n    build-essential pkg-config erlang erlang-reltool \\\n    libicu-dev libmozjs-60-dev python3\n```\n\n----------------------------------------\n\nTITLE: Map Function for Sensor Readings in CouchDB View\nDESCRIPTION: A JavaScript map function that processes sensor reading documents and emits key-value pairs for sensor readings. It filters documents based on ID pattern and processes reading values.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/partitioned-dbs/index.rst#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nfunction(doc) {\n    if(doc._id.indexOf(\":sensor-reading-\") < 0) {\n        return;\n    }\n    for(var r in doc.readings) {\n        emit([doc.sensor_id, r[0]], r[1])\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Response JSON for Multiple Design Documents Query in CouchDB\nDESCRIPTION: This snippet shows the JSON response structure for a multiple design documents query. It includes an array of results, each containing the total rows, offset, and details for each requested design document.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/database/bulk-api.rst#2025-04-21_snippet_8\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200 OK\nCache-Control: must-revalidate\nContent-Type: application/json\nDate: Thu, 20 Jul 2023 20:06:44 GMT\nServer: CouchDB (Erlang/OTP)\nTransfer-Encoding: chunked\n\n{\n    \"results\": [\n        {\n            \"total_rows\": 1,\n            \"offset\": null,\n            \"rows\": [\n                {\n                    \"id\": \"_design/recipe\",\n                    \"key\": \"_design/recipe\",\n                    \"value\": {\n                        \"rev\": \"1-ad0e29fe6b473658514742a7c2317766\"\n                    }\n                },\n                {\n                    \"key\": \"_design/not-exist\",\n                    \"error\": \"not_found\"\n                }\n            ]\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Grouped Customer and Order View\nDESCRIPTION: Shows how to emit both customer and order documents with a compound key for grouped sorting\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/ddocs/views/collation.rst#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction(doc) {\n    if (doc.Type == \"customer\") {\n        emit([doc._id, 0], null);\n    } else if (doc.Type == \"order\") {\n        emit([doc.customer_id, 1], null);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Usage for Replicator Databases in Erlang\nDESCRIPTION: This snippet demonstrates the algorithm for updating usage statistics for each _replicator database. It applies a decay coefficient to historical usage and adds the accumulated usage for the current period.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/rfcs/017-fair-share-scheduling.md#2025-04-21_snippet_0\n\nLANGUAGE: erlang\nCODE:\n```\nDecayCoeff = get_usage_decay_coefficient(0.5),\nAccumulatedUsage = get_accumulated_usage(Db),\nupdate_usage(Db, usage(Db) * DecayCoeff + AccumulatedUsage),\nreset_accumulated_usage(Db)\n```\n\n----------------------------------------\n\nTITLE: Generating ExUnit Tests for Parameter Permutations\nDESCRIPTION: Elixir code to generate test cases for all possible combinations of parameters using the couch_tests_combinatorics module.\nSOURCE: https://github.com/apache/couchdb/blob/main/test/elixir/README.md#2025-04-21_snippet_3\n\nLANGUAGE: elixir\nCODE:\n```\ndefmodule Permutations do\n  use ExUnit.Case\n  pairs = :couch_tests_combinatorics.product([\n    [:remote, :local], [:remote, :local]\n  ])\n  for [source, dest] <- pairs do\n    @source source\n    @dest dest\n    test \"Replication #{source} -> #{dest}\" do\n     assert :ok == :ok\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Cleaning Up Unused View Files via HTTP POST\nDESCRIPTION: This request initiates cleanup of view index files that are no longer required by CouchDB due to changes in design documents. It removes old view files that consume storage space but are no longer referenced.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/database/compact.rst#2025-04-21_snippet_6\n\nLANGUAGE: http\nCODE:\n```\nPOST /db/_view_cleanup HTTP/1.1\nAccept: application/json\nContent-Type: application/json\nHost: localhost:5984\n```\n\n----------------------------------------\n\nTITLE: Configuring Accepted Headers for CORS in CouchDB\nDESCRIPTION: Configuration to specify which headers are accepted in CORS requests to CouchDB. Headers are specified as a comma-separated list.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/config/http.rst#2025-04-21_snippet_17\n\nLANGUAGE: ini\nCODE:\n```\n[cors]\nheaders = X-Couch-Id, X-Couch-Rev\n```\n\n----------------------------------------\n\nTITLE: Setting Password for Protected Key File in CouchDB Replicator\nDESCRIPTION: Configures the password for a protected private key file. Only required if the private key file is password-protected.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/config/replicator.rst#2025-04-21_snippet_22\n\nLANGUAGE: ini\nCODE:\n```\n[replicator]\npassword = somepassword\n```\n\n----------------------------------------\n\nTITLE: Pagination Navigation Helper Functions\nDESCRIPTION: JavaScript functions to determine if previous and next page navigation should be displayed based on current page position and total results.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/ddocs/views/pagination.rst#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfunction hasPrev()\n{\n    return page > 1;\n}\n\nfunction hasNext()\n{\n    var last_page = Math.floor(total_rows / rows_per_page) +\n        (total_rows % rows_per_page);\n    return page != last_page;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring IP Address Binding in CouchDB\nDESCRIPTION: Demonstrates different IP address binding configurations for CouchDB's clustered HTTP server, including localhost, any IP, and IPv6 options.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/config/http.rst#2025-04-21_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[chttpd]\nbind_address = 127.0.0.1\n```\n\nLANGUAGE: ini\nCODE:\n```\n[chttpd]\nbind_address = 0.0.0.0\n```\n\nLANGUAGE: ini\nCODE:\n```\n[chttpd]\nbind_address = ::1\n```\n\nLANGUAGE: ini\nCODE:\n```\n[chttpd]\nbind_address = ::\n```\n\n----------------------------------------\n\nTITLE: Generating Precondition Failed Error Response in CouchDB\nDESCRIPTION: This snippet shows the JSON structure for a precondition failed error response in CouchDB. It includes the error type and a reason explaining that the database already exists.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/replication/protocol.rst#2025-04-21_snippet_34\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"error\": \"db_exists\",\n    \"reason\": \"database \\\"target\\\" exists\"\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Multi-Query Request to CouchDB\nDESCRIPTION: This snippet shows the structure of a multi-query request to CouchDB. It includes two queries: one searching for specific keys and another with limit and skip parameters.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/ddoc/views.rst#2025-04-21_snippet_18\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"queries\": [\n        {\n            \"keys\": [\n                \"meatballs\",\n                \"spaghetti\"\n            ]\n        },\n        {\n            \"limit\": 3,\n            \"skip\": 2\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Response JSON for Design Documents Query in CouchDB\nDESCRIPTION: This snippet shows the JSON response structure for a design documents query. It includes the total number of rows, an offset, and details for each requested design document including its ID, key, and revision.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/database/bulk-api.rst#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"total_rows\" : 5,\n    \"rows\" : [\n        {\n            \"value\" : {\n                \"rev\" : \"1-d942f0ce01647aa0f46518b213b5628e\"\n            },\n            \"id\" : \"_design/ddoc02\",\n            \"key\" : \"_design/ddoc02\"\n        },\n        {\n            \"value\" : {\n                \"rev\" : \"1-af856babf9cf746b48ae999645f9541e\"\n            },\n            \"id\" : \"_design/ddoc05\",\n            \"key\" : \"_design/ddoc05\"\n        }\n    ],\n    \"offset\" : 0\n}\n```\n\n----------------------------------------\n\nTITLE: Sending chunks in response from CouchDB list function\nDESCRIPTION: This code snippet demonstrates how to use the `send` function within a CouchDB list function to send string chunks in response. It sends a simple \"Hello, Couch\" message as a response. The `send` function is essential for streaming data from CouchDB.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/query-server/javascript.rst#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n \"function(head, req){\n            send('Hello,');\n            send(' ');\n            send('Couch');\n            return ;\n        }\"\n```\n\n----------------------------------------\n\nTITLE: Querying CouchDB Prometheus Metrics Endpoint\nDESCRIPTION: Example of how to query the CouchDB Prometheus metrics endpoint using an HTTP GET request. This endpoint returns various CouchDB metrics in Prometheus format.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/server/common.rst#2025-04-21_snippet_30\n\nLANGUAGE: http\nCODE:\n```\nGET /_node/_local/_prometheus HTTP/1.1\nAccept: text/plain\nHost: localhost:17986\n```\n\n----------------------------------------\n\nTITLE: Using POST for CouchDB View Queries\nDESCRIPTION: Example of using POST to query a CouchDB view, passing parameters in the request body as a JSON object instead of in the URL.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/whatsnew/3.0.rst#2025-04-21_snippet_4\n\nLANGUAGE: json\nCODE:\n```\nPOST /{db}/_design/{ddoc}/_view/{view}\n\n{\n  \"keys\": [\"key1\", \"key2\"],\n  \"limit\": 10,\n  \"skip\": 0\n}\n```\n\n----------------------------------------\n\nTITLE: Map Function for Key-based Lookup of Ages\nDESCRIPTION: A map function that indexes documents by age with names as values, allowing queries to find all documents with a specific age value.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/ddocs/views/nosql.rst#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nfunction(doc) {\n    if(doc.age && doc.name) {\n        emit(doc.age, doc.name);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Resetting Query Server State in CouchDB\nDESCRIPTION: Resets the Query Server state and optionally configures new state parameters. Allows garbage collection and state initialization.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/query-server/protocol.rst#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[\"reset\"]\n```\n\nLANGUAGE: json\nCODE:\n```\n[\"reset\", {\"reduce_limit\": true, \"timeout\": 5000}]\n```\n\n----------------------------------------\n\nTITLE: Logging Output in CouchDB JavaScript Environment\nDESCRIPTION: Demonstrates how to use the log() function to output information to CouchDB's log file or stream. It can log strings, objects, and arrays directly without JSON conversion.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/best-practices/jsdevel.rst#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nlog()\n```\n\n----------------------------------------\n\nTITLE: Setting Users Database Suffix in CouchDB\nDESCRIPTION: Defines the suffix for the system database storing CouchDB users.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/config/couchdb.rst#2025-04-21_snippet_10\n\nLANGUAGE: ini\nCODE:\n```\n[couchdb]\nusers_db_suffix = _users\n```\n\n----------------------------------------\n\nTITLE: Configuring Background View Indexing Threshold in CouchDB\nDESCRIPTION: Sets the disk usage threshold percentage above which CouchDB stops background view indexing jobs. This setting monitors the view_index_dir directory.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/config/disk-monitor.rst#2025-04-21_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[disk_monitor]\nbackground_view_indexing_threshold = 80\n```\n\n----------------------------------------\n\nTITLE: Response JSON for Multiple Queries on All Documents in CouchDB\nDESCRIPTION: This snippet shows the JSON response structure for multiple queries on all documents. It includes an array of results, each containing the rows and total rows for the respective query.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/database/bulk-api.rst#2025-04-21_snippet_6\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200 OK\nCache-Control: must-revalidate\nContent-Type: application/json\nDate: Wed, 20 Dec 2017 11:17:07 GMT\nETag: \"1H8RGBCK3ABY6ACDM7ZSC30QK\"\nServer: CouchDB (Erlang/OTP)\nTransfer-Encoding: chunked\n\n{\n    \"results\" : [\n        {\n            \"rows\": [\n                {\n                    \"id\": \"meatballs\",\n                    \"key\": \"meatballs\",\n                    \"value\": 1\n                },\n                {\n                    \"id\": \"spaghetti\",\n                    \"key\": \"spaghetti\",\n                    \"value\": 1\n                }\n            ],\n            \"total_rows\": 3\n        },\n        {\n            \"offset\" : 2,\n            \"rows\" : [\n                {\n                    \"id\" : \"Adukiandorangecasserole-microwave\",\n                    \"key\" : \"Aduki and orange casserole - microwave\",\n                    \"value\" : [\n                        null,\n                        \"Aduki and orange casserole - microwave\"\n                    ]\n                },\n                {\n                    \"id\" : \"Aioli-garlicmayonnaise\",\n                    \"key\" : \"Aioli - garlic mayonnaise\",\n                    \"value\" : [\n                        null,\n                        \"Aioli - garlic mayonnaise\"\n                    ]\n                },\n                {\n                    \"id\" : \"Alabamapeanutchicken\",\n                    \"key\" : \"Alabama peanut chicken\",\n                    \"value\" : [\n                        null,\n                        \"Alabama peanut chicken\"\n                    ]\n                }\n            ],\n            \"total_rows\" : 2667\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Server Options in MochiWeb\nDESCRIPTION: This snippet configures MochiWeb settings to modify maximum connections for CouchDB. Adjusting these parameters can help in scaling applications that experience higher load and require more connections.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/maintenance/performance.rst#2025-04-21_snippet_4\n\nLANGUAGE: ini\nCODE:\n```\n[chttpd]\nserver_options = [{backlog, 128}, {acceptor_pool_size, 32}, {max, 262144}]\n```\n\n----------------------------------------\n\nTITLE: Defining Replicator Job States in CouchDB 4.x\nDESCRIPTION: This code snippet defines the set of replication job states in the new CouchDB 4.x replicator design. It includes pending, running, crashing, completed, and failed states, along with their descriptions and conditions.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/rfcs/016-fdb-replicator.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n * `pending` : A job is marked as `pending` in these cases:\n    - As soon as a job is created from an `api_frontend` node\n    - When it stopped to let other replication jobs run\n    - When a filtered replication's `replication_id` changes\n\n * `running` : Set when a job is accepted by the `couch_jobs:accept/2`\n   call. This generally means the job is actually running on a node,\n   however, in cases when a node crashes, the job may show as\n   `running` on that node until `couch_jobs` activity monitor\n   re-enqueues the job, and it starts running on another node.\n\n * `crashing` : The job was running, but then crashed with an intermittent\n   error. Job's data has an error count which is incremented, and then a\n   backoff penalty is computed and the job is rescheduled to try again at some\n   point in the future.\n\n * `completed` : One-Shot replications which have completed\n\n * `failed` : This can happen when:\n    - A replication job could not be parsed from a replication document. For\n      example, if the user has not specified a `\"source\"` field.\n    - A transient replication job crashes. Transient jobs don't get rescheduled\n      to run again after they crash.\n    - There already is another persistent replication job running or pending\n      with the same `replication_id`.\n```\n\n----------------------------------------\n\nTITLE: Querying Replication State in CouchDB\nDESCRIPTION: This JSON snippet shows the state of a running replication job in CouchDB. It includes the job's ID, document ID, and various metrics like documents read and written, and source and target URIs. This data is used for tracking and auditing replication jobs.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/replication/replicator.rst#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"database\": \"_replicator\",\n    \"doc_id\": \"my_rep\",\n    \"error_count\": 0,\n    \"id\": \"a81a78e822837e66df423d54279c15fe+continuous+create_target\",\n    \"info\": {\n        \"revisions_checked\": 113,\n        \"missing_revisions_found\": 113,\n        \"docs_read\": 113,\n        \"docs_written\": 113,\n        \"changes_pending\": 0,\n        \"doc_write_failures\": 0,\n        \"checkpointed_source_seq\": \"113-g1AAAACTeJzLYWBgYMpgTmHgz8tPSTV0MDQy1zMAQsMckEQiQ1L9____szKYE01ygQLsZsYGqcamiZjKcRqRxwIkGRqA1H-oSbZgk1KMLCzTDE0wdWUBAF6HJIQ\",\n        \"source_seq\": \"113-g1AAAACTeJzLYWBgYMpgTmHgz8tPSTV0MDQy1zMAQsMckEQiQ1L9____szKYE01ygQLsZsYGqcamiZjKcRqRxwIkGRqA1H-oSbZgk1KMLCzTDE0wdWUBAF6HJIQ\",\n        \"through_seq\": \"113-g1AAAACTeJzLYWBgYMpgTmHgz8tPSTV0MDQy1zMAQsMckEQiQ1L9____szKYE01ygQLsZsYGqcamiZjKcRqRxwIkGRqA1H-oSbZgk1KMLCzTDE0wdWUBAF6HJIQ\"\n    },\n    \"last_updated\": \"2017-04-05T19:18:15Z\",\n    \"node\": \"node1@127.0.0.1\",\n    \"source_proxy\": null,\n    \"target_proxy\": null,\n    \"source\": \"http://myserver.com/foo/\",\n    \"start_time\": \"2017-04-05T19:18:15Z\",\n    \"state\": \"running\",\n    \"target\": \"http://localhost:5984/bar/\"\n}\n```\n\n----------------------------------------\n\nTITLE: JavaScript Map Function for Emitting Tags\nDESCRIPTION: A map function designed to iterate through document tags. It emits each tag as a key with a null value, aiming to list all tags from documents, including duplicates. This setup is crucial for initial data extraction before reducing it for uniqueness.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/ddocs/views/nosql.rst#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nfunction(doc) {\n    if(doc.name && doc.tags) {\n        doc.tags.forEach(function(tag) {\n            emit(tag, null);\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of b64url Module in Erlang\nDESCRIPTION: Demonstrates how to encode and decode strings using the b64url Erlang module. The example shows encoding a string to a URL-safe Base64 representation and then decoding it back to the original value.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/b64url/README.md#2025-04-21_snippet_0\n\nLANGUAGE: erlang\nCODE:\n```\n1> Thing = b64url:encode(\"Hello, CouchDB!\").\n<<\"SGVsbG8sIENvdWNoREIh\">>\n2> b64url:decode(Thing).\n<<\"Hello, CouchDB!\">>\n```\n\n----------------------------------------\n\nTITLE: Cleaning Dangling Erlang Chunk Links on Fedora 36\nDESCRIPTION: Command to clean up dangling links to Erlang chunk files that can cause compiler failures on Fedora 36. This finds and removes any broken symbolic links to chunk files in the Erlang installation.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/install/unix.rst#2025-04-21_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nfind -L /usr/lib64/erlang/lib/ -type l -name chunks | xargs rm -f\n```\n\n----------------------------------------\n\nTITLE: Mapping Document in Query Server\nDESCRIPTION: Processes a single document through previously stored map functions and returns key-value pairs for view indexing.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/query-server/protocol.rst#2025-04-21_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n[\"map_doc\", {\"_id\": \"8877AFF9789988EE\", \"_rev\": \"3-235256484\", \"name\": \"John Smith\", \"score\": 60}]\n```\n\n----------------------------------------\n\nTITLE: Patching CouchDB loop.js for Header Scrubbing\nDESCRIPTION: Diff patch that adds header scrubbing functionality to loop.js to prevent exposure of sensitive headers in design document functions. The patch removes authorization and cookie headers from request objects passed to the query server execution environment.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/cve/2023-45725.rst#2025-04-21_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\ndiff --git a/share/server/loop.js b/share/server/loop.js\n--- a/share/server/loop.js\n+++ b/share/server/loop.js\n@@ -49,6 +49,20 @@ function create_nouveau_sandbox() {\n   return sandbox;\n }\n \n+function scrubReq(args) {\n+  var req = args.pop()\n+  if (req.method && req.headers && req.peer && req.userCtx) {\n+    delete req.cookie\n+    for (var p in req.headers) {\n+      if (req.headers.hasOwnProperty(p) && [\"authorization\", \"cookie\"].indexOf(p.toLowerCase()) !== -1) {\n+        delete req.headers[p]\n+      }\n+    }\n+  }\n+  args.push(req)\n+  return args\n+}\n+\n // Commands are in the form of json arrays:\n // [\"commandname\",..optional args...]\\n\n //\n@@ -85,7 +99,7 @@ var DDoc = (function() {\n         var funPath = args.shift();\n         var cmd = funPath[0];\n         // the first member of the fun path determines the type of operation\n-        var funArgs = args.shift();\n+        var funArgs = scrubReq(args.shift());\n         if (ddoc_dispatch[cmd]) {\n           // get the function, call the command with it\n           var point = ddoc;\n```\n\n----------------------------------------\n\nTITLE: Configuring Certificate File Path for CouchDB Replicator\nDESCRIPTION: Specifies the path to a PEM certificate file for the replicator. This setting defines where CouchDB should look for the user's certificate for authentication during replication.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/config/replicator.rst#2025-04-21_snippet_20\n\nLANGUAGE: ini\nCODE:\n```\n[replicator]\ncert_file = /full/path/to/server_cert.pem\n```\n\n----------------------------------------\n\nTITLE: Configuring Accepted Methods for CORS in CouchDB\nDESCRIPTION: Configuration to specify which HTTP methods are accepted in CORS requests to CouchDB. Methods are specified as a comma-separated list.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/config/http.rst#2025-04-21_snippet_18\n\nLANGUAGE: ini\nCODE:\n```\n[cors]\nmethods = GET,POST\n```\n\n----------------------------------------\n\nTITLE: Socket Options Configuration\nDESCRIPTION: TCP/IP socket options for the listening socket in CouchDB.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/config/http.rst#2025-04-21_snippet_9\n\nLANGUAGE: ini\nCODE:\n```\n[httpd]\nsocket_options = [{sndbuf, 262144}]\n```\n\n----------------------------------------\n\nTITLE: Configuring CouchDB Compaction Daemon Settings\nDESCRIPTION: Adjusts the snooze period and check interval for the CouchDB compaction daemon to optimize performance in setups with many databases or design documents.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/whatsnew/2.2.rst#2025-04-21_snippet_5\n\nLANGUAGE: ini\nCODE:\n```\n[compaction_daemon]\nsnooze_period = 3\ncheck_interval = 3600\n```\n\n----------------------------------------\n\nTITLE: GET Request for CouchDB View\nDESCRIPTION: Example of querying a CouchDB view 'by_name' in the 'ingredients' design document of 'recipes' database using GET method. Returns a list of ingredients with their document IDs and values.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/ddoc/views.rst#2025-04-21_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nGET /recipes/_design/ingredients/_view/by_name HTTP/1.1\nAccept: application/json\nHost: localhost:5984\n```\n\n----------------------------------------\n\nTITLE: Show Function Returning JSON in JavaScript\nDESCRIPTION: This JavaScript code defines a show function that returns a JSON object. It includes the document's ID and revision. The function accepts a document (doc) and a request object (req) as input, and outputs a JSON object containing the document's ID and revision.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/ddocs/ddocs.rst#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n\"function(doc, req){\n    return {\n        'json': {\n            'id': doc['_id'],\n            'rev': doc['_rev']\n        }\n    }\n}\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Apache Virtual Host for CouchDB\nDESCRIPTION: Apache virtual host configuration that sets up a proxy to CouchDB running on localhost:5984. Includes access control, proxy settings, and logging configuration.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/best-practices/reverse-proxies.rst#2025-04-21_snippet_11\n\nLANGUAGE: apache\nCODE:\n```\n          Deny from all\n          Allow from 127.0.0.1\n       </Proxy>\n       ProxyPass / http://localhost:5984 nocanon\n       ProxyPassReverse / http://localhost:5984\n       ProxyPreserveHost On\n       ErrorLog \"logs/couchdb.localhost-error_log\"\n       CustomLog \"logs/couchdb.localhost-access_log\" common\n    </VirtualHost>\n```\n\n----------------------------------------\n\nTITLE: HTTP Response for JWT Authentication in CouchDB\nDESCRIPTION: Example of a successful HTTP response for JWT authentication showing 200 OK status and content type.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/config/auth.rst#2025-04-21_snippet_8\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200 OK\nContent-Type: application/json\n```\n\n----------------------------------------\n\nTITLE: Accessing Node-Local Endpoints in CouchDB 3.0\nDESCRIPTION: Examples of accessing node-local endpoints that were previously on port 5986 but are now available on the main clustered interface (default port 5984) in CouchDB 3.0.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/whatsnew/3.0.rst#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nGET /_node/{nodename}/_stats\nGET /_node/{nodename}/_system\nGET /_node/{nodename}/_all_dbs\nGET /_node/{nodename}/_uuids\nGET /_node/{nodename}/_config\nGET /_node/{nodename}/_config/couchdb/uuid\nPOST /_node/{nodename}_config/_reload\nGET /_node/{nodename}/_nodes/_changes?include_docs=true\nPUT /_node/{nodename}/_dbs/{dbname}\nPOST /_node/{nodename}/_restart\nGET /_node/{nodename}/{db-shard}\nGET /_node/{nodename}/{db-shard}/{doc}\nGET /_node/{nodename}/{db-shard}/{ddoc}/_info\n```\n\n----------------------------------------\n\nTITLE: Querying Level 0 KVS in CouchDB - JavaScript\nDESCRIPTION: The 'queryLevel0' function retrieves key-value pairs from level 0 of the CouchDB database using a specified range defined by start and end keys. It processes results by potentially grouping based on the input options.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/rfcs/012-fdb-reduce.md#2025-04-21_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nconst queryLevel0 = async (opts) => {\n    return await db.doTransaction(async tn => {\n        let endkey = {key: END, value: 0};\n        let startkey = {key: '0', value: 0};\n\n        if (opts.startkey) {\n            startkey = await getKeyOrNearest(tn, opts.startkey, 0);\n        }\n\n        if (opts.endkey) {\n            endkey = await getKeyOrFirstBefore(tn, opts.endkey, 0);\n        }\n        const results = await getRangeInclusive(tn, startkey.key, endkey.key, 0);\n        const acc1 = collateRereduce(results, opts.group_level); \n        return formatResult(acc1);\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Querying CouchDB with Async Transaction Handling - JavaScript\nDESCRIPTION: The 'query' function handles complex queries on the CouchDB database, supporting optional start and end keys for filtering results. It utilizes transactions to ensure data consistency and can group results based on the specified level.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/rfcs/012-fdb-reduce.md#2025-04-21_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nconst query = async (opts) => {\n    resetStats();\n    return await db.doTransaction(async tn => {\n        let endkey = {key: END, value: 0};\n        let startkey = {key: '0', value: 0};\n\n        if (opts.startkey) {\n            startkey = await getKeyOrNearest(tn, opts.startkey, 0);\n            if (!startkey) {\n                return false; //startkey out of range;\n            }\n            log('startkey', opts.startkey, startkey);\n        }\n\n        if (opts.endkey) {\n            endkey = await getKeyOrFirstBefore(tn, opts.endkey, 0);\n            log('endkey', opts.endkey, endkey);\n        }\n\n        if (opts.group) {\n            const results = await getRangeInclusive(tn, startkey.key, endkey.key, 0);\n            return formatResult(results);\n        }\n\n        if (opts.group_level === 0 && !opts.startkey && !opts.endkey) {\n                const results = await getRange(tn, '0', END, MAX_LEVELS);\n                if (results.length > 1) {\n                    const vals = results.map(kv => kv.value);\n                    const total = rereduce(vals);\n                    return formatResult([{key: null, value: total}]);\n                }\n\n                return formatResult([{key: null, value: results[0].value}]);\n        }\n\n        const results = await traverse(tn, 0, 0, startkey, endkey, opts.group_level, []);\n        console.log('query stats', util.inspect(stats, {depth: null}));\n        return formatResult(results);\n    });\n};\n```\n\n----------------------------------------\n\nTITLE: Age Query Result Example in CouchDB\nDESCRIPTION: Example JSON response from querying a view with a specific age key. Shows the structure of the response with total rows, offset, and matching document data.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/ddocs/views/nosql.rst#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n{\"total_rows\":3,\"offset\":1,\"rows\":[\n{\"id\":\"fc2636bf50556346f1ce46b4bc01fe30\",\"key\":5,\"value\":\"Lena\"}\n]}\n```\n\n----------------------------------------\n\nTITLE: Setting CouchDB Cluster UUID\nDESCRIPTION: Defines a unique identifier for the CouchDB cluster.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/config/couchdb.rst#2025-04-21_snippet_12\n\nLANGUAGE: ini\nCODE:\n```\n[couchdb]\nuuid = 0a959b9b8227188afc2ac26ccdf345a6\n```\n\n----------------------------------------\n\nTITLE: Setting Interactive Database Writes Threshold in CouchDB\nDESCRIPTION: Configures the disk usage threshold percentage above which CouchDB stops allowing interactive document updates. Only affects the database_dir directory.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/config/disk-monitor.rst#2025-04-21_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[disk_monitor]\ninteractive_database_writes_threshold = 90\n```\n\n----------------------------------------\n\nTITLE: Comment Document Structure with Post Reference in CouchDB\nDESCRIPTION: Document structure for comments when stored separately from blog posts, including a reference to the parent post.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/ddocs/views/joins.rst#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"_id\": \"ABCDEF\",\n    \"_rev\": \"123456\",\n    \"type\": \"comment\",\n    \"post\": \"myslug\",\n    \"author\": \"jack\",\n    \"content\": \"â€¦\"\n}\n```\n\n----------------------------------------\n\nTITLE: Problematic Map Function without Guards\nDESCRIPTION: JavaScript map function that will cause errors when documents are missing the referenced fields (name and address), resulting in undefined values that cannot be encoded as JSON.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/install/troubleshooting.rst#2025-04-21_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nfunction(doc) {\n  emit(doc.name, doc.address);\n}\n```\n\n----------------------------------------\n\nTITLE: Error Response for Invalid Content-Type in CouchDB Compaction Request\nDESCRIPTION: This snippet demonstrates the error response when an invalid Content-Type is provided for a compaction request. It returns a 415 Unsupported Media Type status code.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/maintenance/compaction.rst#2025-04-21_snippet_5\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 415 Unsupported Media Type\nCache-Control: must-revalidate\nContent-Length: 78\nContent-Type: application/json\nDate: Wed, 19 Jun 2013 09:43:44 GMT\nServer: CouchDB (Erlang/OTP)\n\n{\"error\":\"bad_content_type\",\"reason\":\"Content-Type must be application/json\"}\n```\n\n----------------------------------------\n\nTITLE: Examining Database Shards - Bash\nDESCRIPTION: Queries the database API endpoints to examine shard configuration and placement across the cluster.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/cluster/sharding.rst#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncurl -s $COUCH_URL:5984/db | jq .\ncurl -s $COUCH_URL:5984/mydb/_shards | jq .\ncurl -s $COUCH_URL:5984/mydb/_shards/joan | jq .\ncurl -s $COUCH_URL:5984/mydb/_shards/robert | jq .\n```\n\n----------------------------------------\n\nTITLE: Migration Guide for Compaction Daemon Configuration\nDESCRIPTION: This configuration snippet describes how to migrate settings from an older compaction daemon in CouchDB to the new system. It details the changes required for parameters such as min_file_size, db_fragmentation, and view_fragmentation.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/maintenance/compaction.rst#2025-04-21_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[compaction_daemon]\nmin_file_size = 131072\ncheck_interval = 3600\nsnooze_period_ms = 3000\n\n[compactions]\nmydb = [{db_fragmentation, \"70%\"}, {view_fragmentation, \"60%\"}, {parallel_view_compaction, true}]\n_default = [{db_fragmentation, \"50%\"}, {view_fragmentation, \"55%\"}, {from, \"20:00\"}, {to, \"06:00\"}, {strict_window, true}]\n```\n\n----------------------------------------\n\nTITLE: Defining Job Record Structure in Erlang for CouchDB Resharding\nDESCRIPTION: This code snippet defines the structure of a #job{} record used throughout the resharding process. It includes fields for job identification, type, state, source and target shards, and execution history.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/mem3/README_reshard.md#2025-04-21_snippet_0\n\nLANGUAGE: erlang\nCODE:\n```\n#job{\n - id Uniquely identifies a job in a cluster. It is derived from the source shard name, node and a version (currently = 1).\n - type Currently the only type supported is `split` but `merge` or `rebalance` might be added in the future.\n - job_state The running state of the job. Indicates if the job is `running`, `stopped`, `completed` or `failed`.\n - split_state Once the job is running this indicates how far along it got in the splitting process.\n - source Source shard file. If/when merge is implemented this will be a list.\n - target List of target shard files. This is expected to be a list of 2 items currently.\n - history A time-line of state transitions represented as a list of tuples.\n - pid When job is running this will be set to the pid of the process.\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up Fauxton Development Environment\nDESCRIPTION: Commands to clone the Fauxton repository and set up a development server. This is useful for developers who want to contribute to Fauxton.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/fauxton/install.rst#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ git clone https://github.com/apache/couchdb-fauxton.git\n$ npm install && npm run dev\n```\n\n----------------------------------------\n\nTITLE: GET Request for Replication Documents\nDESCRIPTION: HTTP GET request to retrieve replication documents from a specific replicator database. Returns a list of replication documents with their status and progress information.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/server/common.rst#2025-04-21_snippet_25\n\nLANGUAGE: http\nCODE:\n```\nGET /_scheduler/docs/other/_replicator HTTP/1.1\nAccept: application/json\nHost: localhost:5984\n```\n\n----------------------------------------\n\nTITLE: Statistics Interval Configuration in CouchDB\nDESCRIPTION: Sets the interval for gathering statistics in seconds.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/config/misc.rst#2025-04-21_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[stats]\ninterval = 10\n```\n\n----------------------------------------\n\nTITLE: Configuring SSL Certificate Validation Logging in CouchDB\nDESCRIPTION: Controls logging of TLS certificate validation issues when SSL verification is not enabled.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/config/replicator.rst#2025-04-21_snippet_16\n\nLANGUAGE: ini\nCODE:\n```\n[replicator]\nverify_ssl_certificates_log = true\n```\n\n----------------------------------------\n\nTITLE: Restricting CORS Access by Protocol, Host and Port\nDESCRIPTION: Configuration to restrict CORS access to specific origins by protocol, host and optionally port. Multiple origins can be specified as a comma-separated list.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/config/http.rst#2025-04-21_snippet_16\n\nLANGUAGE: ini\nCODE:\n```\n[cors]\norigins = http://localhost, https://localhost, http://couch.mydev.name:8080\n```\n\n----------------------------------------\n\nTITLE: Sequential UUID Generation Example in CouchDB\nDESCRIPTION: Example output of sequential UUID generation showing monotonically increasing IDs with random increments.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/config/misc.rst#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"uuids\": [\n        \"4e17c12963f4bee0e6ec90da54804894\",\n        \"4e17c12963f4bee0e6ec90da5480512f\",\n        \"4e17c12963f4bee0e6ec90da54805c25\",\n        \"4e17c12963f4bee0e6ec90da54806ba1\",\n        \"4e17c12963f4bee0e6ec90da548072b3\",\n        \"4e17c12963f4bee0e6ec90da54807609\",\n        \"4e17c12963f4bee0e6ec90da54807718\",\n        \"4e17c12963f4bee0e6ec90da54807754\",\n        \"4e17c12963f4bee0e6ec90da54807e5d\",\n        \"4e17c12963f4bee0e6ec90da54808d28\"\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Cookie to CouchDB Node via HTTP Request\nDESCRIPTION: JSON payload for sending an Erlang cookie to a CouchDB node during cluster setup.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/setup/README.md#2025-04-21_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"action\": \"receive_cookie\",\n  \"cookie\": \"<secretcookie>\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Find Plugin Regex Patterns\nDESCRIPTION: Configuration for the Find plugin's regex pattern matching functionality.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/config/scanner.rst#2025-04-21_snippet_3\n\nLANGUAGE: ini\nCODE:\n```\n[couch_scanner_plugin_find.regexes]\nregex1 = s3cret(1|2|3)\nregex2 = n33dl3\n```\n\n----------------------------------------\n\nTITLE: Fields Selection Syntax\nDESCRIPTION: Example of specifying which document fields to return in a query\nSOURCE: https://github.com/apache/couchdb/blob/main/src/mango/README.md#2025-04-21_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n[\"foo\", \"bar\", \"baz\"]\n```\n\n----------------------------------------\n\nTITLE: Increasing Erlang Connection Limit\nDESCRIPTION: This configuration increases the default limit of Erlang connections, allowing CouchDB to handle more concurrent connections. This modification is essential for high-traffic environments where the default limit may be inadequate.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/maintenance/performance.rst#2025-04-21_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n+Q 102400\n```\n\n----------------------------------------\n\nTITLE: Copying CouchDB Shard Files Command\nDESCRIPTION: Shell commands for copying shard files between nodes using scp, including both database and view files.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/cluster/sharding.rst#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n# one one machine\n$ mkdir -p data/.shards/{range}\n$ mkdir -p data/shards/{range}\n# on the other\n$ scp {couch-dir}/data/.shards/{range}/{database}.{datecode}* \\\n  {node}:{couch-dir}/data/.shards/{range}/\n$ scp {couch-dir}/data/shards/{range}/{database}.{datecode}.couch \\\n  {node}:{couch-dir}/data/shards/{range}/\n```\n\n----------------------------------------\n\nTITLE: Generating HTTP 201 Created Response in CouchDB\nDESCRIPTION: This snippet demonstrates the HTTP response format for a successful replication checkpoint creation in CouchDB. It includes headers and a JSON body with the document ID, status, and revision.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/replication/protocol.rst#2025-04-21_snippet_27\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 201 Created\nCache-Control: must-revalidate\nContent-Length: 106\nContent-Type: application/json\nDate: Thu, 07 Nov 2013 09:42:17 GMT\nServer: CouchDB (Erlang/OTP)\n\n{\n    \"id\": \"_local/afa899a9e59589c3d4ce5668e3218aef\",\n    \"ok\": true,\n    \"rev\": \"2-9b5d1e36bed6ae08611466e30af1259a\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Test Database and Documents - Bash\nDESCRIPTION: Creates a test database and populates it with sample documents to demonstrate shard examination.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/cluster/sharding.rst#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X PUT $COUCH_URL:5984/mydb\ncurl -X PUT $COUCH_URL:5984/mydb/joan -d '{\"loves\":\"cats\"}'\ncurl -X PUT $COUCH_URL:5984/mydb/robert -d '{\"loves\":\"dogs\"}'\n```\n\n----------------------------------------\n\nTITLE: Reducing Latency in JavaScript View Generation\nDESCRIPTION: This JavaScript snippet shows a view definition in CouchDB's design document, performing a map operation on documents to emit a key-value pair and a reduce operation to sum up the values. The reduce function uses JavaScript to iterate and sum up the values of documents with the same key.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/maintenance/performance.rst#2025-04-21_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n    \"_id\": \"_design/foo\",\n    \"views\": {\n        \"bar\": {\n            \"map\": \"function (doc) { emit(doc.author, 1); }\",\n            \"reduce\": \"function (keys, values, rereduce) { return sum(values); }\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Document with MIME Type in CouchDB\nDESCRIPTION: Example document structure including a MIME type field that will be used for prefix-based searches in a view function.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/ddocs/views/nosql.rst#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"_id\": \"Hugh Laurie\",\n    \"_rev\": \"1-9fded7deef52ac373119d05435581edf\",\n    \"mime-type\": \"image/jpg\",\n    \"description\": \"some dude\"\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Maximum Retry Attempts for Resharding\nDESCRIPTION: Configures the maximum number of retry attempts for failed resharding operations.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/config/resharding.rst#2025-04-21_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[reshard]\nmax_retries = 1\n```\n\n----------------------------------------\n\nTITLE: Enabling Database Recovery in CouchDB Config\nDESCRIPTION: When enabled, databases are 'soft-deleted' and renamed with a timestamp suffix, allowing for manual recovery later.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/config/couchdb.rst#2025-04-21_snippet_3\n\nLANGUAGE: ini\nCODE:\n```\n[couchdb]\nenable_database_recovery = false\n```\n\n----------------------------------------\n\nTITLE: Retrieving Resharding State in CouchDB\nDESCRIPTION: This HTTP request and response show how to get the current resharding state on the CouchDB cluster.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/server/common.rst#2025-04-21_snippet_43\n\nLANGUAGE: http\nCODE:\n```\nGET /_reshard/state HTTP/1.1\nAccept: application/json\nHost: localhost:5984\n```\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200 OK\nContent-Type: application/json\n\n{\n    \"reason\": null,\n    \"state\": \"running\"\n}\n```\n\n----------------------------------------\n\nTITLE: SpiderMonkey Version Comparison: Object Key Order\nDESCRIPTION: Illustrates how object key order can change between SpiderMonkey versions, potentially affecting views that rely on this order.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/best-practices/jsdevel.rst#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nr={}; [\"Xyz\", \"abc\", 1].forEach(function(v) {r[v]=v;}); Object.keys(r)\n```\n\n----------------------------------------\n\nTITLE: Configuring View Compaction Buffer Size in CouchDB (INI)\nDESCRIPTION: Sets the maximum size of the copy buffer used during view compaction in bytes. This parameter affects the amount of data processed in each compaction iteration for views.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/config/compaction.rst#2025-04-21_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[view_compaction]\nkeyvalue_buffer_size = 2097152\n```\n\n----------------------------------------\n\nTITLE: Response from Update Function Without a Document in CouchDB\nDESCRIPTION: HTTP response when executing an update function without a document, returning a 404 error as specified in the function implementation.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/ddoc/render.rst#2025-04-21_snippet_12\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 404 Object Not Found\nCache-Control: must-revalidate\nContent-Length: 52\nContent-Type: application/json\nDate: Wed, 21 Aug 2013 14:00:58 GMT\nServer: CouchDB (Erlang/OTP)\n\n{\n    \"error\": \"missed\",\n    \"reason\": \"no document to update\"\n}\n```\n\n----------------------------------------\n\nTITLE: Database Information Response in CouchDB (JavaScript)\nDESCRIPTION: This JSON response provides detailed information about the CouchDB database, including document count, update sequence, and various metadata. It's returned when an authorized user requests database information.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/intro/security.rst#2025-04-21_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\n{\"db_name\":\"mydatabase\",\"doc_count\":1,\"doc_del_count\":0,\"update_seq\":3,\"purge_seq\":0,\n\"compact_running\":false,\"sizes\":{\"active\":272,\"disk\":12376,\"external\":350},\n\"instance_start_time\":\"0\",\"disk_format_version\":6,\"committed_update_seq\":3}\n```\n\n----------------------------------------\n\nTITLE: Faceted Search Field Verification\nDESCRIPTION: Example of verifying required fields exist before indexing for faceted search.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/ddocs/search.rst#2025-04-21_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nif (typeof doc.town == \"string\" && typeof doc.name == \"string\") {\n    index(\"town\", doc.town, {facet: true});\n    index(\"name\", doc.name, {facet: true});\n}\n```\n\n----------------------------------------\n\nTITLE: Sending a JSON response\nDESCRIPTION: This snippet demonstrates a simple JSON response from CouchDB indicating successful processing. The response signifies that the operation was completed successfully.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/intro/api.rst#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n{\"ok\":true}\n```\n\n----------------------------------------\n\nTITLE: Node Name Verification Request/Response\nDESCRIPTION: Example of requesting node name verification from CouchDB's /_node/_local endpoint, demonstrating both the request format and JSON response containing the node name.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/server/common.rst#2025-04-21_snippet_27\n\nLANGUAGE: http\nCODE:\n```\nGET /_node/_local HTTP/1.1\nAccept: application/json\nHost: localhost:5984\n```\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200 OK\nCache-Control: must-revalidate\nContent-Length: 27\nContent-Type: application/json\nDate: Tue, 28 Jan 2020 19:25:51 GMT\nServer: CouchDB (Erlang OTP)\nX-Couch-Request-ID: 5b8db6c677\nX-CouchDB-Body-Time: 0\n\n{\"name\":\"node1@127.0.0.1\"}\n```\n\n----------------------------------------\n\nTITLE: Authenticating cURL Requests for CouchDB\nDESCRIPTION: Example of using cURL with inline authentication for CouchDB HTTP requests.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/setup/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X PUT \"http://admin:password@127.0.0.1:5984/mydb\"\n```\n\n----------------------------------------\n\nTITLE: Configuring IBrowse Options in CouchDB\nDESCRIPTION: Sets IBrowse-specific options, particularly for IPv6 support in replication endpoints.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/config/replicator.rst#2025-04-21_snippet_12\n\nLANGUAGE: ini\nCODE:\n```\n[replicator]\nibrowse_options = [{prefer_ipv6, true}]\n```\n\n----------------------------------------\n\nTITLE: Document with Attachments Response Example\nDESCRIPTION: Example response showing a document with multiple attachments, including attachment metadata but not content.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/document/common.rst#2025-04-21_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"_attachments\": {\n        \"grandma_recipe.txt\": {\n            \"content_type\": \"text/plain\",\n            \"digest\": \"md5-Ids41vtv725jyrN7iUvMcQ==\",\n            \"length\": 1872,\n            \"revpos\": 4,\n            \"stub\": true\n        },\n        \"my_recipe.txt\": {\n            \"content_type\": \"text/plain\",\n            \"digest\": \"md5-198BPPNiT5fqlLxoYYbjBA==\",\n            \"length\": 85,\n            \"revpos\": 5,\n            \"stub\": true\n        },\n        \"photo.jpg\": {\n            \"content_type\": \"image/jpeg\",\n            \"digest\": \"md5-7Pv4HW2822WY1r/3WDbPug==\",\n            \"length\": 165504,\n            \"revpos\": 2,\n            \"stub\": true\n        }\n    },\n    \"_id\": \"SpaghettiWithMeatballs\",\n    \"_rev\": \"5-fd96acb3256302bf0dd2f32713161f2a\",\n    \"description\": \"An Italian-American dish that usually consists of spaghetti, tomato sauce and meatballs.\",\n    \"ingredients\": [\n        \"spaghetti\",\n        \"tomato sauce\",\n        \"meatballs\"\n    ],\n    \"name\": \"Spaghetti with meatballs\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Scanner Core Settings in CouchDB\nDESCRIPTION: Core configuration options for the CouchDB scanner, including interval and penalty settings.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/config/scanner.rst#2025-04-21_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[couch_scanner]\ninterval_sec = 5\nmin_penalty_sec = 30\nmin_penalty_sec = 28800\nheal_threshold_sec = 300\ndb_rate_limit = 25\ndb_shard_limit = 50\ndoc_rate_limit = 1000\n```\n\n----------------------------------------\n\nTITLE: Caddy 2 Subdirectory Configuration\nDESCRIPTION: Caddy 2 configuration for serving CouchDB under a subdirectory path with automatic HTTPS.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/best-practices/reverse-proxies.rst#2025-04-21_snippet_7\n\nLANGUAGE: text\nCODE:\n```\ndomain.com {\n\n    reverse_proxy /couchdb/* localhost:5984\n\n}\n```\n\n----------------------------------------\n\nTITLE: Response to View Cleanup Request\nDESCRIPTION: The server response confirms that the view cleanup request has been accepted. It returns a 202 Accepted status with a JSON object indicating successful operation initiation.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/database/compact.rst#2025-04-21_snippet_7\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 202 Accepted\nCache-Control: must-revalidate\nContent-Length: 12\nContent-Type: application/json\nDate: Mon, 12 Aug 2013 09:27:43 GMT\nServer: CouchDB (Erlang/OTP)\n\n{\n    \"ok\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Sort Syntax Example\nDESCRIPTION: Demonstrates the syntax for specifying sort order in Mango queries\nSOURCE: https://github.com/apache/couchdb/blob/main/src/mango/README.md#2025-04-21_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n[{\"field1\": \"dir1\"}]\n```\n\n----------------------------------------\n\nTITLE: Revision Tree After Conflict Resolution\nDESCRIPTION: This code block illustrates the revision tree after conflict resolution, showing how leaf nodes along other branches are deleted when a merged document is created. It shows the resulting tree with the resolved conflict and the deleted documents marked as such.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/replication/conflicts.rst#2025-04-21_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n      ,--> r2a -> r3a -> r4a -> r5a\n    r1 --> r2b -> r3b -> (r4b deleted)\n      `--> r2c -> r3c -> (r4c deleted)\n```\n\n----------------------------------------\n\nTITLE: Iterating over rows using FoldRows in Erlang for CouchDB\nDESCRIPTION: The FoldRows function is a helper for iterating over rows in a list function within CouchDB. It takes a function object and an accumulator, applying the function to each row and updating the accumulator. This example shows how to print the previous and current document IDs.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/query-server/erlang.rst#2025-04-21_snippet_1\n\nLANGUAGE: erlang\nCODE:\n```\nfun(Head, {Req}) ->\n    Fun = fun({Row}, Acc) ->\n        Id = couch_util:get_value(<<\"id\">>, Row),\n        Send(list_to_binary(io_lib:format(\"Previous doc id: ~p~n\", [Acc]))),\n        Send(list_to_binary(io_lib:format(\"Current  doc id: ~p~n\", [Id]))),\n        {ok, Id}\n    end,\n    FoldRows(Fun, nil),\n    \"\"\nend.\n```\n\n----------------------------------------\n\nTITLE: Retrieving Replication Log Request\nDESCRIPTION: HTTP GET request to retrieve replication log from source database using local document ID.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/replication/protocol.rst#2025-04-21_snippet_9\n\nLANGUAGE: http\nCODE:\n```\nGET /source/_local/b3e44b920ee2951cb2e123b63044427a HTTP/1.1\nAccept: application/json\nHost: localhost:5984\nUser-Agent: CouchDB\n```\n\n----------------------------------------\n\nTITLE: Fetching Multiple Database Info with POST /_dbs_info\nDESCRIPTION: Makes a POST request to /_dbs_info to retrieve information about multiple databases. Returns details like database name, size, update sequence, and cluster configuration for each requested database.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/server/common.rst#2025-04-21_snippet_4\n\nLANGUAGE: http\nCODE:\n```\nPOST /_dbs_info HTTP/1.1\nAccept: application/json\nHost: localhost:5984\nContent-Type: application/json\n\n{\n    \"keys\": [\n        \"animals\",\n        \"plants\"\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring CouchDB Scanner Plugin in INI\nDESCRIPTION: Configuration example showing how to enable the couch_scanner_ddoc_features plugin in CouchDB's configuration system.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/couch_scanner/README.md#2025-04-21_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[couch_scanner_plugins]\ncouch_scanner_plugin_ddoc_features = true\n```\n\n----------------------------------------\n\nTITLE: JSON Search Request Body\nDESCRIPTION: Example JSON document containing search query parameters.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/ddocs/search.rst#2025-04-21_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"q\": \"index:my query\",\n    \"sort\": \"foo\",\n    \"limit\": 3\n}\n```\n\n----------------------------------------\n\nTITLE: Reverting to Previous CouchDB Snap Version\nDESCRIPTION: Command to revert the CouchDB snap to a previously installed version, which can be useful if an update causes issues.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/install/snap.rst#2025-04-21_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n$ sudo snap revert couchdb\n```\n\n----------------------------------------\n\nTITLE: CouchDB Lockout Duration Configuration\nDESCRIPTION: Configuration setting for the maximum duration of the lockout period in milliseconds.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/config/auth.rst#2025-04-21_snippet_13\n\nLANGUAGE: ini\nCODE:\n```\n[chttpd_auth_lockout]\nmax_lifetime = 300000\n```\n\n----------------------------------------\n\nTITLE: Handling FIPS Mode with MD5 Workaround in CouchDB\nDESCRIPTION: This snippet explains how to configure CouchDB to substitute OpenSSL's MD5 function with Erlang's built-in MD5 due to limitations in FIPS mode. It highlights the need to compile with the --erlang-md5 flag and notes the potential performance impact.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/install/troubleshooting.rst#2025-04-21_snippet_21\n\nLANGUAGE: text\nCODE:\n```\nmd5_dgst.c(82): OpenSSL internal error, assertion failed: Digest MD5 forbidden in FIPS mode!\\n[os_mon] memory supervisor port (memsup): Erlang has closed\\n[os_mon] cpu supervisor port (cpu_sup): Erlang has closed\\nAborted\\n\n```\n\n----------------------------------------\n\nTITLE: PUT Response for Duplicate Database Creation in CouchDB\nDESCRIPTION: This is the response when attempting to create a database that already exists. It returns a 412 Precondition Failed status with an error message.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/database/common.rst#2025-04-21_snippet_6\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 412 Precondition Failed\nCache-Control: must-revalidate\nContent-Length: 95\nContent-Type: application/json\nDate: Mon, 12 Aug 2013 08:01:16 GMT\nServer: CouchDB (Erlang/OTP)\n\n{\n    \"error\": \"file_exists\",\n    \"reason\": \"The database could not be created, the file already exists.\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Map Function for Band Names View in CouchDB\nDESCRIPTION: A map function that creates an alphabetically sorted view of band names, removing 'A' and 'The' prefixes from band names for proper sorting.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/ddocs/views/pagination.rst#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction(doc) {\n    if(doc.name) {\n        var name = doc.name.replace(/^(A|The) /, \"\");\n        emit(name, null);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Connection Timeout in CouchDB\nDESCRIPTION: Sets the HTTP connection timeout value per replication in milliseconds. This value is divided by three for changes feed requests.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/config/replicator.rst#2025-04-21_snippet_8\n\nLANGUAGE: ini\nCODE:\n```\n[replicator]\nconnection_timeout = 30000\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Security in CouchDB\nDESCRIPTION: Sets the default security object for databases. Options include 'everyone', 'admin_only', and 'admin_local', affecting read and write permissions.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/config/couchdb.rst#2025-04-21_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[couchdb]\ndefault_security = admin_only\n```\n\n----------------------------------------\n\nTITLE: Generating Server Error Response in CouchDB\nDESCRIPTION: This snippet demonstrates the JSON structure for a server error response in CouchDB. It includes the error type and a reason describing the fatal error that occurred.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/replication/protocol.rst#2025-04-21_snippet_35\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"error\": \"worker_died\",\n    \"reason\": \"kaboom!\"\n}\n```\n\n----------------------------------------\n\nTITLE: CouchDB Database Creation Error Response\nDESCRIPTION: Error response when attempting to create a database that already exists, demonstrating CouchDB's error handling format.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/intro/api.rst#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\"error\":\"file_exists\",\"reason\":\"The database could not be created, the file already exists.\"}\n```\n\n----------------------------------------\n\nTITLE: Using $nor operator with index in CouchDB\nDESCRIPTION: This snippet demonstrates the use of the ``$nor`` operator in a CouchDB query. The query selects documents where the year is between 1900 and 1910, and the year is not 1901, 1905, or 1907. The ``$nor`` operator matches if none of the conditions are true.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/ddocs/mango.rst#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"year\": {\n        \"$gte\": 1900,\n        \"$lte\": 1910\n    },\n    \"$nor\": [\n        { \"year\": 1901 },\n        { \"year\": 1905 },\n        { \"year\": 1907 }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Complete File Attachment\nDESCRIPTION: Retrieves the entire file attachment using curl GET request\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/document/attachments.rst#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nshell> curl -X GET http://adm:pass@127.0.0.1:5984/test/doc/file.txt\nMy hovercraft is full of eels!\n```\n\n----------------------------------------\n\nTITLE: Configuring Job Churn Rate in CouchDB\nDESCRIPTION: Sets the maximum number of replication jobs that can be started or stopped during rescheduling. Works in conjunction with the interval setting to control job replacement rate.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/config/replicator.rst#2025-04-21_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[replicator]\nmax_churn = 20\n```\n\n----------------------------------------\n\nTITLE: Testing Standard Analyzer in CouchDB Nouveau Search (Shell)\nDESCRIPTION: Example of using curl to test the standard analyzer in CouchDB Nouveau search. It shows how to send a POST request to the _nouveau_analyze endpoint from the command line.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/ddocs/nouveau.rst#2025-04-21_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\ncurl 'https://$HOST:5984/_nouveau_analyze' -H 'Content-Type: application/json'\n    -d '{\"analyzer\":\"standard\", \"text\":\"ablanks@renovations.com\"}'\n```\n\n----------------------------------------\n\nTITLE: Configuring Minimal Headers in CouchDB\nDESCRIPTION: Defines the minimal set of headers to be sent when a request includes 'Prefer: return=minimal' header.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/config/http.rst#2025-04-21_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[chttpd]\nprefer_minimal = Cache-Control, Content-Length, Content-Range, Content-Type, ETag, Server, Transfer-Encoding, Vary\n```\n\n----------------------------------------\n\nTITLE: Retrieving Design Document Index Information\nDESCRIPTION: Converts a design document into an index record, extracting key metadata like analyzer, definition, and signature for index management\nSOURCE: https://github.com/apache/couchdb/blob/main/src/dreyfus/README.md#2025-04-21_snippet_1\n\nLANGUAGE: Erlang\nCODE:\n```\ndreyfus_index:design_doc_to_index(DDoc, IndexName)\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Query Server in CouchDB\nDESCRIPTION: Shows how to configure a custom query server in CouchDB using environment variables. This allows adding new query servers or overriding defaults without modifying .ini files.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/whatsnew/2.3.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport COUCHDB_QUERY_SERVER_PYTHON=\"/path/to/python/query/server.py with args\"\ncouchdb\n```\n\n----------------------------------------\n\nTITLE: Result of Testing Standard Analyzer\nDESCRIPTION: This JavaScript object shows the expected result from testing the standard analyzer with the text \"ablanks@renovations.com\". The `tokens` array contains two tokens: \"ablanks\" and \"renovations.com\", as the standard analyzer splits the input text based on word boundaries and punctuation.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/ddocs/search.rst#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"tokens\": [\n        \"ablanks\",\n        \"renovations.com\"\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Keyword Analyzer in CouchDB Nouveau Search (Shell)\nDESCRIPTION: Example of using curl to test the keyword analyzer in CouchDB Nouveau search. It shows how to send a POST request to the _nouveau_analyze endpoint from the command line.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/ddocs/nouveau.rst#2025-04-21_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\ncurl 'https://$HOST:5984/_nouveau_analyze' -H 'Content-Type: application/json'\n    -d '{\"analyzer\":\"keyword\", \"text\":\"ablanks@renovations.com\"}'\n```\n\n----------------------------------------\n\nTITLE: Logging messages in Erlang within CouchDB query server\nDESCRIPTION: The Log function logs a message at the INFO level in CouchDB. This example shows how to format a message including the document ID and log it. It also emits the document revision and ID as key-value pairs. It depends on the `lists` and `io_lib` modules.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/query-server/erlang.rst#2025-04-21_snippet_3\n\nLANGUAGE: erlang\nCODE:\n```\nfun({Doc}) ->\n    <<K,_/binary>> = proplists:get_value(<<\"_rev\">>, Doc, null),\n    V = proplists:get_value(<<\"_id\">>, Doc, null),\n    Log(lists:flatten(io_lib:format(\"Hello from ~s doc!\", [V]))),\n    Emit(<<K>>, V)\nend.\n```\n\n----------------------------------------\n\nTITLE: Specifying HTTP Request ID in CouchDB Client Requests\nDESCRIPTION: Allows clients to specify a custom HTTP request ID, including UUIDs, for better request tracking and debugging.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/whatsnew/3.5.rst#2025-04-21_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nX-Request-ID: custom-request-id-or-uuid\n```\n\n----------------------------------------\n\nTITLE: Configuring Database Compaction Buffer Size in CouchDB (INI)\nDESCRIPTION: Sets the maximum size of the copy buffer for database compaction in bytes. This setting affects how much data is processed in each compaction iteration.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/config/compaction.rst#2025-04-21_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[database_compaction]\ndoc_buffer_size = 524288\n```\n\n----------------------------------------\n\nTITLE: Configuring Mango Index Scan Warning Threshold in CouchDB\nDESCRIPTION: Configuration for setting the ratio threshold that triggers index scan warnings in Mango query responses.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/config/query-servers.rst#2025-04-21_snippet_5\n\nLANGUAGE: ini\nCODE:\n```\n[mango]\nindex_scan_warning_threshold = 10\n```\n\n----------------------------------------\n\nTITLE: Flowchart for Peer Verification and Information Retrieval\nDESCRIPTION: This text-based flowchart outlines the steps involved in verifying peers and retrieving information during CouchDB replication. It visually represents the process of checking target existence, getting source and target information via GET requests, and generating a replication ID.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/replication/protocol.rst#2025-04-21_snippet_5\n\nLANGUAGE: text\nCODE:\n```\n+ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -+\n' Verify Peers:                                                    '\n'                         +------------------------+               '\n'                         | Check Target Existence |               '\n'                         +------------------------+               '\n'                                     |                            '\n'                                     | 200 OK                     '\n'                                     |                            '\n+ - - - - - - - - - - - - - - - - - - | - - - - - - - - - - - - - -+\n                                          |\n+ - - - - - - - - - - - - - - - - - - | - - - - - - - - - - - - - -+\n' Get Peers Information:              |                            '\n'                                     v                            '\n'                         +------------------------+               '\n'                         | Get Source Information |               '\n'                         +------------------------+               '\n'                         |      GET /source       |               '\n'                         +------------------------+               '\n'                                     |                            '\n'                                     | 200 OK                     '\n'                                     v                            '\n'                         +------------------------+               '\n'                         | Get Target Information |               '\n'                         +------------------------+               '\n'                         |      GET /target       |               '\n'                         +------------------------+               '\n'                                     |                            '\n'                                     | 200 OK                     '\n'                                     |                            '\n+ - - - - - - - - - - - - - - - - - - | - - - - - - - - - - - - - -+\n                                          |\n+ - - - - - - - - - - - - - - - - - - | - - - - - - - - - - - - - -+\n' Find Common Ancestry:               |                            '\n'                                     |                            '\n'                                     v                            '\n'                         +-------------------------+              '\n'                         | Generate Replication ID |              '\n'                         +-------------------------+              '\n'                                                                  '\n+ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -+\n```\n\n----------------------------------------\n\nTITLE: Counts Response Format in CouchDB\nDESCRIPTION: Example response showing the format of results when using the counts facet syntax, including total rows, bookmark, and counts by type.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/ddocs/nouveau.rst#2025-04-21_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"total_rows\":100000,\n    \"bookmark\":\"g...\",\n    \"rows\":[...],\n    \"counts\":{\n        \"type\":{\n            \"sofa\": 10,\n            \"chair\": 100,\n            \"lamp\": 97\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Python: Converting Simple to Simple+PBKDF2 Password Hash\nDESCRIPTION: Demonstrates how to convert a simple password hash to a PBKDF2 derived key using Python's hashlib library\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/intro/security.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport hashlib\n\ndoc = fetch_user_doc(username)\nhashlib.pbkdf2_hmac('sha256', doc['password_sha'], doc['salt'], 600000).hex()\n```\n\n----------------------------------------\n\nTITLE: Example Document for Map Function Error\nDESCRIPTION: Example document that would cause a 'Cannot encode undefined value as JSON' error when used with a map function that references undefined fields.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/install/troubleshooting.rst#2025-04-21_snippet_16\n\nLANGUAGE: text\nCODE:\n```\n{\n  \"_id\":\"XYZ123\",\n  \"_rev\":\"1BB2BB\",\n  \"field\":\"value\"\n}\n```\n\n----------------------------------------\n\nTITLE: SpiderMonkey 1.8.5: Ignoring Invalid Expressions After Function Definition\nDESCRIPTION: Demonstrates how SpiderMonkey 1.8.5 ignores invalid expressions after a function definition, while later versions throw a compilation error. This affects view definitions in CouchDB.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/best-practices/jsdevel.rst#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nfunction(doc){emit(1,2);} if(x) a\n```\n\n----------------------------------------\n\nTITLE: Accessing CouchDB Web Interface\nDESCRIPTION: URL to access the CouchDB web interface (Fauxton) after installation. This allows for managing and interacting with the database through a browser.\nSOURCE: https://github.com/apache/couchdb/blob/main/INSTALL.Unix.md#2025-04-21_snippet_14\n\nLANGUAGE: http\nCODE:\n```\nhttp://127.0.0.1:5984/_utils/\n```\n\n----------------------------------------\n\nTITLE: Configuring Maximum Revisions for Purge Requests in CouchDB\nDESCRIPTION: Sets the maximum number of accumulated revisions allowed in a single purge request. This option was introduced in CouchDB 3.0.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/config/misc.rst#2025-04-21_snippet_8\n\nLANGUAGE: ini\nCODE:\n```\n[purge]\nmax_revisions_number = 1000\n```\n\n----------------------------------------\n\nTITLE: Setting Maximum Resharding Jobs Configuration in CouchDB\nDESCRIPTION: Configures the maximum number of resharding jobs allowed per cluster node.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/config/resharding.rst#2025-04-21_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[reshard]\nmax_jobs = 48\n```\n\n----------------------------------------\n\nTITLE: Defining Skip List Data Model Structure in Erlang\nDESCRIPTION: Erlang tuple structure defining the data model for skip list implementation in FoundationDB. The structure includes database namespace, views namespace, signature, reduce namespace, view ID, skip level, and reduce key components. The skip level ranges from 0 to MAX_SKIP_LEVEL.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/rfcs/012-fdb-reduce.md#2025-04-21_snippet_2\n\nLANGUAGE: erlang\nCODE:\n```\n{<database>, ?DB_VIEWS, Sig, ?VIEW_REDUCE_SK_RANGE, ViewId, SkipLevel, ReduceKey} = {UnEncodedKey, Value}\n\nSkipLevel = 0..?MAX_SKIP_LEVEL\n\n```\n\n----------------------------------------\n\nTITLE: Failed Replication Log Response\nDESCRIPTION: HTTP 404 response indicating no existing replication log was found.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/replication/protocol.rst#2025-04-21_snippet_12\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 404 Object Not Found\nCache-Control: must-revalidate\nContent-Length: 41\nContent-Type: application/json\nDate: Tue, 08 Oct 2013 13:31:10 GMT\nServer: CouchDB (Erlang OTP)\n\n{\n    \"error\": \"not_found\",\n    \"reason\": \"missing\"\n}\n```\n\n----------------------------------------\n\nTITLE: Removing a Resharding Job in CouchDB (HTTP DELETE)\nDESCRIPTION: This snippet demonstrates how to remove a resharding job using an HTTP DELETE request. If the job is running, it will be stopped before removal. The response indicates whether the job was successfully removed.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/server/common.rst#2025-04-21_snippet_48\n\nLANGUAGE: http\nCODE:\n```\nDELETE /_reshard/jobs/001-171d1211418996ff47bd610b1d1257fc4ca2628868def4a05e63e8f8fe50694a HTTP/1.1\n```\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200 OK\nContent-Type: application/json\n\n{\n    \"ok\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Cleaning Clouseau Search Indexes - HTTP Request/Response\nDESCRIPTION: HTTP request and response for cleaning up unreachable Clouseau search indexes. The endpoint accepts POST requests and returns a 202 Accepted status with a JSON response indicating success.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/database/cleanup.rst#2025-04-21_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST /db/_search_cleanup HTTP/1.1\nAccept: application/json\nContent-Type: application/json\nHost: localhost:5984\n```\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 202 Accepted\nCache-Control: must-revalidate\nContent-Length: 12\nContent-Type: application/json\nServer: CouchDB (Erlang/OTP)\n\n{\n    \"ok\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Design Doc Features Plugin\nDESCRIPTION: Configuration options for the Design Doc Features plugin, including feature reporting settings.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/config/scanner.rst#2025-04-21_snippet_4\n\nLANGUAGE: ini\nCODE:\n```\n[couch_scanner_plugin_ddoc_features]\nupdates = true\nshows = true\nrewrites = true\nfilters = false\nreduce = false\nvalidate_doc_update = false\nrun_on_first_node = true\nddoc_report = false\n```\n\n----------------------------------------\n\nTITLE: Testing Erlang Node Connectivity via CLI\nDESCRIPTION: These commands use the Erlang shell (`erl`) to establish communication between two servers. They define the node name, cookie, and port range used for Erlang distribution. `erl` must be installed on both servers. Successful execution allows the CouchDB nodes on these servers to communicate.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/setup/cluster.rst#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nerl -name bus@192.168.0.1 -setcookie 'brumbrum' -kernel inet_dist_listen_min 9100 -kernel inet_dist_listen_max 9200\n```\n\n----------------------------------------\n\nTITLE: Representing Strings in JSON for CouchDB\nDESCRIPTION: Illustrates how to properly format a string value in JSON for use with CouchDB, using double quotes.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/basics.rst#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n\"A String\"\n```\n\n----------------------------------------\n\nTITLE: Basic Authentication Commands\nDESCRIPTION: Examples demonstrating basic authentication with CouchDB using curl commands\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/intro/security.rst#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nHOST=\"http://127.0.0.1:5984\"\ncurl -X PUT $HOST/somedatabase\n\nHOST=\"http://anna:secret@127.0.0.1:5984\"\ncurl -X PUT $HOST/somedatabase\n```\n\n----------------------------------------\n\nTITLE: Bash/Curl: User Creation Command\nDESCRIPTION: Command-line example for creating a new user in CouchDB using curl\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/intro/security.rst#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X PUT http://admin:password@localhost:5984/_users/org.couchdb.user:jan \\\n     -H \"Accept: application/json\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\"name\": \"jan\", \"password\": \"apple\", \"roles\": [], \"type\": \"user\"}'\n```\n\n----------------------------------------\n\nTITLE: Range Query Response Format\nDESCRIPTION: Example response showing the format of results when using range-based faceted search, including counts for each defined range.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/ddocs/nouveau.rst#2025-04-21_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"total_rows\":100000,\n    \"bookmark\":\"g...\",\n    \"rows\":[...],\n    \"ranges\": {\n        \"price\": {\n            \"expensive\": 278682,\n            \"cheap\": 257023\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Keyword Analyzer in CouchDB Nouveau Search (HTTP)\nDESCRIPTION: Example of using HTTP POST to test the keyword analyzer in CouchDB Nouveau search. It demonstrates how to send a request to the _nouveau_analyze endpoint.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/ddocs/nouveau.rst#2025-04-21_snippet_5\n\nLANGUAGE: http\nCODE:\n```\nPOST /_nouveau_analyze HTTP/1.1\nContent-Type: application/json\n{\"analyzer\":\"keyword\", \"text\":\"ablanks@renovations.com\"}\n```\n\n----------------------------------------\n\nTITLE: Adjusting Running Job Priorities in Erlang\nDESCRIPTION: This snippet illustrates how to adjust the priority of running jobs based on the usage and shares of their respective _replicator databases. It ensures fair distribution of resources among different databases.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/rfcs/017-fair-share-scheduling.md#2025-04-21_snippet_2\n\nLANGUAGE: erlang\nCODE:\n```\nDb = Job#job.db,\nSharesSq = shares(Db) * shares(Db),\nJob#job.priority = Job#job.priority + (usage(Db) * pending(Db)) / SharesSq\n```\n\n----------------------------------------\n\nTITLE: Example HTTPS Connection Test\nDESCRIPTION: Console commands demonstrating HTTPS connection testing with curl.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/config/http.rst#2025-04-21_snippet_12\n\nLANGUAGE: console\nCODE:\n```\nshell> curl -k https://127.0.0.1:6984/\n{\"couchdb\":\"Welcome\",\"version\":\"1.5.0\"}\n```\n\n----------------------------------------\n\nTITLE: HTTP Request with JSON Accept Header\nDESCRIPTION: Example of an HTTP GET request to CouchDB explicitly requesting JSON format in the response using the Accept header.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/basics.rst#2025-04-21_snippet_3\n\nLANGUAGE: http\nCODE:\n```\nGET /recipes HTTP/1.1\nHost: couchdb:5984\nAccept: application/json\n```\n\n----------------------------------------\n\nTITLE: Accessing Individual Metrics in Erlang\nDESCRIPTION: This code snippet shows how to access individual metrics using the sample function. This can be used for metrics that haven't been added to a description file, though they won't be available via HTTP _stats requests.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/couch_stats/README.md#2025-04-21_snippet_1\n\nLANGUAGE: erlang\nCODE:\n```\ncouch_stats:sample/1\n```\n\n----------------------------------------\n\nTITLE: Creating Additional Replicator Database\nDESCRIPTION: cURL command to create a new replicator database with escaped forward slash in the name.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/replication/replicator.rst#2025-04-21_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n$ curl -X PUT http://adm:pass@localhost:5984/another%2F_replicator/\n{\"ok\":true}\n```\n\n----------------------------------------\n\nTITLE: Handling Non-Existent Database in CouchDB\nDESCRIPTION: This snippet shows an error response when the source or target database does not exist. The server returns a 500 Internal Server Error with a JSON payload indicating a \"db_not_found\" error and the reason why the database could not be opened.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/replication/protocol.rst#2025-04-21_snippet_4\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 500 Internal Server Error\nCache-Control: must-revalidate\nContent-Length: 56\nContent-Type: application/json\nDate: Sat, 05 Oct 2013 08:55:29 GMT\nServer: CouchDB (Erlang OTP)\n\n{\n    \"error\": \"db_not_found\",\n    \"reason\": \"could not open source\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Per-User Database Deletion\nDESCRIPTION: Configuration setting for enabling automatic deletion of user databases when the corresponding user is deleted.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/config/couch-peruser.rst#2025-04-21_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[couch_peruser]\ndelete_dbs = false\n```\n\n----------------------------------------\n\nTITLE: Correct Reduce Function with Return\nDESCRIPTION: Fixed JavaScript reduce function that properly returns the result of the sum operation, preventing the 'Cannot encode undefined value as JSON' error.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/install/troubleshooting.rst#2025-04-21_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nfunction(key, values) {\n  return sum(values);\n}\n```\n\n----------------------------------------\n\nTITLE: SpiderMonkey Version Comparison: toLocaleString() Function\nDESCRIPTION: Shows how the behavior of toLocaleString() differs between SpiderMonkey 1.8.5 and later versions, with 1.8.5 ignoring locale strings and later versions returning the correct format.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/best-practices/jsdevel.rst#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n(new Date(\"2019-01-15T19:32:52.915Z\")).toLocaleString('en-US')\n```\n\n----------------------------------------\n\nTITLE: Retrieving the next row from view result in Erlang\nDESCRIPTION: The GetRow function retrieves the next row from a related view result in CouchDB.  This example shows the background implementation of the `foldrows` function, handling cases where `GetRow()` returns `nil` or a valid `Row`.  It also uses `catch` to handle potential errors within the `ProcRow` function.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/query-server/erlang.rst#2025-04-21_snippet_2\n\nLANGUAGE: erlang\nCODE:\n```\n%% FoldRows background implementation.\n%% https://git-wip-us.apache.org/repos/asf?p=couchdb.git;a=blob;f=src/couchdb/couch_native_process.erl;hb=HEAD#l368\n%%\nfoldrows(GetRow, ProcRow, Acc) ->\n    case GetRow() of\n        nil ->\n            {ok, Acc};\n        Row ->\n            case (catch ProcRow(Row, Acc)) of\n                {ok, Acc2} ->\n                    foldrows(GetRow, ProcRow, Acc2);\n                {stop, Acc2} ->\n                    {ok, Acc2}\n            end\n    end.\n```\n\n----------------------------------------\n\nTITLE: Copying from a Specific Document Revision in CouchDB via HTTP\nDESCRIPTION: Shows how to copy from a specific version of a document using the COPY HTTP method with If-Match header to specify the source revision.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/document/common.rst#2025-04-21_snippet_19\n\nLANGUAGE: http\nCODE:\n```\nCOPY /recipes/SpaghettiWithMeatballs HTTP/1.1\nAccept: application/json\nDestination: SpaghettiWithMeatballs_Original\nIf-Match: 1-917fa2381192822767f010b95b45325b\nHost: localhost:5984\n```\n\n----------------------------------------\n\nTITLE: Setting Document Replica Count in CouchDB Cluster\nDESCRIPTION: Configures the number of replicas (n) for each document in the cluster. Recommended not to exceed 3 replicas.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/config/cluster.rst#2025-04-21_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[cluster]\nn = 3\n```\n\n----------------------------------------\n\nTITLE: Configuring CouchDB Build\nDESCRIPTION: Command to configure the CouchDB build process before compilation. This sets up the build environment based on system capabilities.\nSOURCE: https://github.com/apache/couchdb/blob/main/INSTALL.Unix.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n./configure\n```\n\n----------------------------------------\n\nTITLE: CouchDB Documentation Directory Structure\nDESCRIPTION: Directory listing showing the main components of the CouchDB documentation source tree.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/contributing.rst#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nebin/\next/\n.git/\n.gitignore\nimages/\nLICENSE\nmake.bat\nMakefile\nNOTICE\nrebar.config\nsrc/\nstatic/\ntemplates/\nthemes/\n.travis.yml\n```\n\n----------------------------------------\n\nTITLE: Response to Design Document View Compaction Request\nDESCRIPTION: The server response confirms that the design document view compaction request has been accepted. It returns a 202 Accepted status with a JSON object indicating successful operation initiation.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/database/compact.rst#2025-04-21_snippet_3\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 202 Accepted\nCache-Control: must-revalidate\nContent-Length: 12\nContent-Type: application/json\nDate: Mon, 12 Aug 2013 09:36:44 GMT\nServer: CouchDB (Erlang/OTP)\n\n{\n    \"ok\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Nginx SSL Configuration\nDESCRIPTION: Nginx SSL configuration for secure HTTPS access to CouchDB, including certificate settings and forwarded SSL header.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/best-practices/reverse-proxies.rst#2025-04-21_snippet_5\n\nLANGUAGE: text\nCODE:\n```\nssl on;\nssl_certificate PATH_TO_YOUR_PUBLIC_KEY.pem;\nssl_certificate_key PATH_TO_YOUR_PRIVATE_KEY.key;\nssl_protocols SSLv3;\nssl_session_cache shared:SSL:1m;\n\nlocation / {\n    proxy_pass http://localhost:5984;\n    proxy_redirect off;\n    proxy_set_header Host $host;\n    proxy_buffering off;\n    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n    proxy_set_header X-Forwarded-Ssl on;\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Scanner Plugins in CouchDB\nDESCRIPTION: Configuration to enable or disable specific scanner plugins in CouchDB.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/config/scanner.rst#2025-04-21_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[couch_scanner_plugins]\ncouch_scanner_plugin_ddoc_features = false\ncouch_scanner_plugin_find = false\ncouch_quickjs_scanner_plugin = false\n```\n\n----------------------------------------\n\nTITLE: Design Document Initialization in Query Server\nDESCRIPTION: Registers a design document with the Query Server, enabling execution of various design functions like shows, lists, and updates.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/query-server/protocol.rst#2025-04-21_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n[\"ddoc\", \"new\", \"_design/temp\", {\"_id\": \"_design/temp\", \"_rev\": \"8-d7379de23a751dc2a19e5638a7bbc5cc\", \"language\": \"javascript\", \"shows\": {\"request\": \"function(doc,req){ return {json: req}; }\", \"hello\": \"function(doc,req){ return {body: 'Hello, ' + (doc || {})._id + '!'}; }\"}}]\n```\n\n----------------------------------------\n\nTITLE: Creating a JSON Index in CouchDB\nDESCRIPTION: Example of defining a JSON index in CouchDB. This index is created on the 'foo' field.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/ddocs/mango.rst#2025-04-21_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"type\" : \"json\",\n    \"index\": {\n        \"fields\": [\"foo\"]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Unauthorized Document Update Error Handling in CouchDB\nDESCRIPTION: Demonstrates two methods for throwing validation errors during document updates, preventing unauthorized or invalid modifications\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/ddocs/ddocs.rst#2025-04-21_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\n// user is not authorized to make the change but may re-authenticate\nthrow({ unauthorized: 'Error message here.' });\n\n// change is not allowed\nthrow({ forbidden: 'Error message here.' });\n```\n\n----------------------------------------\n\nTITLE: Verifying UUID Algorithm Change in CouchDB\nDESCRIPTION: This JavaScript snippet shows the response format when requesting UUIDs after changing the UUID algorithm to 'random'.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/server/common.rst#2025-04-21_snippet_41\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"uuids\" : [\n        \"031aad7b469956cf2826fcb2a9260492\",\n        \"6ec875e15e6b385120938df18ee8e496\",\n        \"cff9e881516483911aa2f0e98949092d\",\n        \"b89d37509d39dd712546f9510d4a9271\",\n        \"2e0dbf7f6c4ad716f21938a016e4e59f\"\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Reduce Function in Query Server\nDESCRIPTION: Applies a reduce function to map results, aggregating values across multiple documents in a view.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/query-server/protocol.rst#2025-04-21_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n[\"reduce\", [\"function(k, v) { return sum(v); }\"], [[[1, \"699b524273605d5d3e9d4fd0ff2cb272\"], 10], [[2, \"c081d0f69c13d2ce2050d684c7ba2843\"], 20], [[null, \"foobar\"], 3]]]\n```\n\n----------------------------------------\n\nTITLE: Response to Ensure Full Commit Request\nDESCRIPTION: The server response to an ensure full commit request returns a 201 Created status with a JSON object containing an instance_start_time value (always \"0\") and confirmation of successful operation.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/database/compact.rst#2025-04-21_snippet_5\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 201 Created\nCache-Control: must-revalidate\nContent-Length: 53\nContent-Type: application/json\nDate: Mon, 12 Aug 2013 10:22:19 GMT\nServer: CouchDB (Erlang/OTP)\n\n{\n    \"instance_start_time\": \"0\",\n    \"ok\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Running Database Operations Sequentially - JavaScript\nDESCRIPTION: The 'run' function orchestrates a sequence of database operations including clearing the database, creating documents, printing information, executing simple queries, and performing large queries for thorough testing.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/rfcs/012-fdb-reduce.md#2025-04-21_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nconst run = async () => {\n    await clear();\n    await create();\n    await print();\n    await simpleQueries();\n    await createLots();\n    await print();\n    await largeQueries();\n};\n\nrun();\n```\n\n----------------------------------------\n\nTITLE: Error Handling for Missing Selector - JSON\nDESCRIPTION: This snippet indicates the structure of an error message returned by CouchDB when a selector object is missing from the request body. It highlights the importance of including a selector in HTTP requests to filter changes feeds effectively.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/database/changes.rst#2025-04-21_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"error\": \"bad request\",\n  \"reason\": \"Selector must be specified in POST payload\"\n}\n```\n\n----------------------------------------\n\nTITLE: Querying CouchDB View with descending, startkey, and endkey (HTTP - Error)\nDESCRIPTION: This snippet illustrates an incorrect usage of the `descending` parameter with `startkey` and `endkey` when the keys are not reversed, resulting in a 400 Bad Request error.  The `Accept` header requests a JSON response, and the response body provides details about the query parsing error.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/ddoc/views.rst#2025-04-21_snippet_8\n\nLANGUAGE: http\nCODE:\n```\n\"GET /recipes/_design/recipes/_view/by_ingredient?descending=true&startkey=\\\"carrots\\\"&endkey=\\\"egg\\\" HTTP/1.1\nAccept: application/json\nHost: localhost:5984\n\n{\n    \\\"error\\\": \\\"query_parse_error\\\",\n    \\\"reason\\\": \\\"No rows can match your key range, reverse your start_key and end_key or set descending=false\\\",\n    \\\"ref\\\": 3986383855\n}\"\n```\n\n----------------------------------------\n\nTITLE: Configuring CouchDB to prevent non-admin access to _all_dbs (Erlang)\nDESCRIPTION: Sets the 'admin_only_all_dbs' option to true in the CouchDB configuration to restrict access to the _all_dbs endpoint to administrators only.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/whatsnew/2.2.rst#2025-04-21_snippet_6\n\nLANGUAGE: erlang\nCODE:\n```\n[chttpd]\nadmin_only_all_dbs = true\n```\n\n----------------------------------------\n\nTITLE: CouchDB-style Result Formatter for Skip List Queries\nDESCRIPTION: Simple formatter that mimics CouchDB's response structure for query results, wrapping the results in a 'rows' property.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/rfcs/012-fdb-reduce.md#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nconst formatResult = (results) => {\n    return {\n        rows: results\n    };\n};\n```\n\n----------------------------------------\n\nTITLE: Specifying Utility Driver Directory in CouchDB\nDESCRIPTION: Sets the location of binary drivers (icu, ejson, etc.) for CouchDB. This directory should be readable by the CouchDB service user.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/config/couchdb.rst#2025-04-21_snippet_11\n\nLANGUAGE: ini\nCODE:\n```\n[couchdb]\nutil_driver_dir = /usr/lib/couchdb/erlang/lib/couch-1.5.0/priv/lib\n```\n\n----------------------------------------\n\nTITLE: Changing UUID Algorithm Configuration in CouchDB\nDESCRIPTION: This HTTP request demonstrates how to change the UUID algorithm configuration in CouchDB to 'random' using the Configuration API.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/server/common.rst#2025-04-21_snippet_40\n\nLANGUAGE: http\nCODE:\n```\nPUT http://couchdb:5984/_node/nonode@nohost/_config/uuids/algorithm HTTP/1.1\nContent-Type: application/json\nAccept: */*\n\n\"random\"\n```\n\n----------------------------------------\n\nTITLE: Successful PUT Response for Database Creation in CouchDB\nDESCRIPTION: This is the successful response to a database creation request with a 201 Created status. It includes the Location header pointing to the new database URI.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/database/common.rst#2025-04-21_snippet_5\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 201 Created\nCache-Control: must-revalidate\nContent-Length: 12\nContent-Type: application/json\nDate: Mon, 12 Aug 2013 08:01:45 GMT\nLocation: http://localhost:5984/db\nServer: CouchDB (Erlang/OTP)\n\n{\n    \"ok\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Nginx Authentication Configuration\nDESCRIPTION: Nginx configuration with basic authentication enabled for CouchDB access through a subdirectory.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/best-practices/reverse-proxies.rst#2025-04-21_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nlocation /couchdb {\n    auth_basic \"Restricted\";\n    auth_basic_user_file htpasswd;\n    rewrite /couchdb/(.*) /$1 break;\n    proxy_pass http://localhost:5984;\n    proxy_redirect off;\n    proxy_buffering off;\n    proxy_set_header Host $host;\n    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n    proxy_set_header Authorization \"\";\n}\n```\n\n----------------------------------------\n\nTITLE: HTTP Request Without Explicit Accept Header\nDESCRIPTION: Example of an HTTP GET request to CouchDB without specifying content type in the Accept header, using the wildcard accept value.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/basics.rst#2025-04-21_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nGET /recipes HTTP/1.1\nHost: couchdb:5984\nAccept: */*\n```\n\n----------------------------------------\n\nTITLE: Attempting to Retrieve a Deleted Document in CouchDB via HTTP\nDESCRIPTION: Shows the response when attempting to retrieve a deleted document without specifying a revision. CouchDB returns a 404 status with information that the document was deleted.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/document/common.rst#2025-04-21_snippet_15\n\nLANGUAGE: http\nCODE:\n```\nGET /recipes/FishStew  HTTP/1.1\nAccept: application/json\nHost: localhost:5984\n```\n\n----------------------------------------\n\nTITLE: Show Function Providing Multiple Formats in JavaScript\nDESCRIPTION: This JavaScript code defines a show function that provides multiple formats (JSON, HTML, XML, and custom text-JSON) for a document. It uses the `provides` and `registerType` functions to handle different content types. The function takes a document (doc) and a request object (req) as input and returns an object defining the format of response.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/ddocs/ddocs.rst#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n\"function(doc, req){\n    provides('json', function(){\n        return {'json': doc}\n    });\n    provides('html', function(){\n        return '<pre>' + toJSON(doc) + '</pre>'\n    })\n    provides('xml', function(){\n        return {\n            'headers': {'Content-Type': 'application/xml'},\n            'body' : ''.concat(\n                '<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?>\\n',\n                '<doc>',\n                (function(){\n                    escape = function(s){\n                        return s.replace(/&quot;/g, '\"')\n                                .replace(/&gt;/g, '>')\n                                .replace(/&lt;/g, '<')\n                                .replace(/&amp;/g, '&');\n                    };\n                    var content = '';\n                    for(var key in doc){\n                        if(!doc.hasOwnProperty(key)) continue;\n                        var value = escape(toJSON(doc[key]));\n                        var key = escape(key);\n                        content += ''.concat(\n                            '<' + key + '>',\n                            value\n                            '</' + key + '>'\n                        )\n                    }\n                    return content;\n                })(),\n                '</doc>'\n            )\n        }\n    })\n    registerType('text-json', 'text/json')\n    provides('text-json', function(){\n        return toJSON(doc);\n    })\n}\"\n```\n\n----------------------------------------\n\nTITLE: Configuring CouchDB Content Security Policy\nDESCRIPTION: Sets new CSP settings for attachments and show/list functions. This replaces the old [csp] settings with more granular options.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/whatsnew/3.2.rst#2025-04-21_snippet_4\n\nLANGUAGE: erlang\nCODE:\n```\n[csp]\nutils_enable = ...\nutils_header_value = ...\nattachments_enable = ...\nattachments_header_value = ...\nshowlist_enable = ...\nshowlist_header_value = ...\n```\n\n----------------------------------------\n\nTITLE: Visualizing Replication Scenario\nDESCRIPTION: This text block visualizes a scenario where data is replicated between a desktop and a laptop, with independent edits on each device leading to conflicting revisions. The diagram illustrates the flow of data during push and pull replication processes.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/replication/conflicts.rst#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n      DESKTOP                          LAPTOP\n    +---------+\n    | /db/bob |\n    |   v1    |                                     INITIAL\n    |         |                                     CREATION\n    +---------+\n\n    +---------+                      +---------+\n    | /db/bob |  ----------------->  | /db/bob |     PUSH\n    |   v1    |                      |   v1    |\n    +---------+                      +---------+\n\n    +---------+                      +---------+  INDEPENDENT\n    | /db/bob |                      | /db/bob |     LOCAL\n    |   v2a   |                      |   v2b   |     EDITS\n    +---------+                      +---------+\n\n    +---------+                      +---------+\n    | /db/bob |  ----------------->  | /db/bob |     PUSH\n    |   v2a   |                      |   v2a   |\n    +---------+                      |   v2b   |\n                                     +---------+\n\n    +---------+                      +---------+\n    | /db/bob |  <-----------------  | /db/bob |     PULL\n    |   v2a   |                      |   v2a   |\n    |   v2b   |                      |   v2b   |\n    +---------+                      +---------+\n```\n\n----------------------------------------\n\nTITLE: Setting Background vs Interactive IO Ratio in CouchDB\nDESCRIPTION: Defines the fraction of time that a background IO request will be selected over an interactive IO request when both queues are non-empty. This balances background and interactive operations.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/config/ioq.rst#2025-04-21_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[ioq]\nratio = 0.01\n```\n\n----------------------------------------\n\nTITLE: Utility Functions for FoundationDB Skip List\nDESCRIPTION: Includes various utility functions for logging, statistics, random number generation, hashing, and key manipulation used in the skip list implementation.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/rfcs/012-fdb-reduce.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst log = (...args) => {\n    if (!SHOULD_LOG) {\n        return;\n    }\n    console.log(...args);\n}\n\n// keep a basic stats of which levels were used for a query\nlet stats;\nconst resetStats = () => {\n    stats = {\n        \"0\": [],\n        \"1\": [],\n        \"2\": [],\n        \"3\": [],\n        \"4\": [],\n        \"5\": [],\n        \"6\": [],\n    };\n}\n\n// An initial simple set of kvs to insert and query to verify the algoritym\nconst kvs = [\n    [[2017,3,1], 9],\n    [[2017,4,1], 7], \n    [[2019,3,1], 4], // out of order check\n    [[2017,4,15], 6],\n    [[2018,4,1], 3],  \n    [[2017,5,1], 9],\n    [[2018,3,1], 6],\n    [[2018,4,1], 4], // duplicate check\n    [[2018,5,1], 7],\n    [[2019,4,1], 6],\n    [[2019,5,1], 7]\n  ];\n\n// UTILS\n\nconst getRandom = (min, max) => {\n    min = Math.ceil(min);\n    max = Math.floor(max);\n    return Math.floor(Math.random() * (max - min)) + min; //The maximum is exclusive and the minimum is inclusive\n  }\n\nconst getRandomKey = (min, max) => {\n    return [getRandom(min, max), getRandom(1, 12), getRandom(1, 30)];\n}\n\n// Very rough hash algorithm to convert any string to an integer\nfunction hashCode(s) {\n    for(var i = 0, h = 0; i < s.length; i++)\n        h = Math.imul(31, h) + s.charCodeAt(i) | 0;\n    return h;\n}\n\n// calculation to determine if key should be added to a level\nconst hashCalc = (key, level, pow) => {\n    const keyHash = hashCode(JSON.stringify(key));\n    const out = (keyHash & ((1 << (level * pow)) - 1));\n    if (out !== 0) {\n        return false;\n    }\n\n    return true;\n}\n\n// Basic rereduce function\n// _sum but pretend its more complex\nconst rereduce = (values) => {\n    return values.reduce((acc, val) => {\n        return acc + val;\n    }, 0);\n};\n\n// Takes all key/values and collates to group level and runs rereduce\nconst collateRereduce = (acc, groupLevel) => {\n    const acc1 = acc.reduce((acc, kv) => {\n        const key = getGroupLevelKey(kv.key, groupLevel);\n\n        if (!acc[key]) {\n            acc[key] = {\n                key,\n                values: []\n            };\n        }\n\n        acc[key].values.push(kv.value);\n        return acc;\n    }, {});\n\n    return Object.values(acc1).reduce((acc, kv) => {\n        const values = kv.values;\n        const key = kv.key;\n        const result = rereduce(values);\n\n        acc.push({\n            key,\n            value: result\n        });\n\n        return acc;\n    }, []);\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Range Parameter Requirement for Resharding\nDESCRIPTION: Controls whether the range parameter is required when creating new resharding jobs.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/config/resharding.rst#2025-04-21_snippet_8\n\nLANGUAGE: ini\nCODE:\n```\n[reshard]\nrequire_range_param = false\n```\n\n----------------------------------------\n\nTITLE: HTTP Response from CouchDB Config Reload\nDESCRIPTION: Successful HTTP response from the configuration reload endpoint, including standard CouchDB headers and a JSON confirmation payload.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/server/configuration.rst#2025-04-21_snippet_6\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200 OK\nCache-Control: must-revalidate\nContent-Length: 12\nContent-Type: application/json\nDate: Tues, 21 Jan 2020 11:09:35\nServer: CouchDB/3.0.0 (Erlang OTP)\n\n{\"ok\":true}\n```\n\n----------------------------------------\n\nTITLE: Running WeatherReport Basic Command in Bash\nDESCRIPTION: Demonstrates the basic usage of the weatherreport command-line tool, specifying the path to the CouchDB configuration directory.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/cluster/troubleshooting.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ weatherreport --etc /path/to/etc\n[warning] Cluster member node3@127.0.0.1 is not connected to this node. Please check whether it is down.\n```\n\n----------------------------------------\n\nTITLE: Configuring CouchDB for Secure Nouveau Connection\nDESCRIPTION: Configuration settings for CouchDB to securely connect to a Nouveau server using mutual TLS authentication with client certificates.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/install/nouveau.rst#2025-04-21_snippet_3\n\nLANGUAGE: ini\nCODE:\n```\n[nouveau]\nurl = https://hostname:port\nssl_key_file = path to keyfile\nssl_cert_file = path to certfile\nssl_cacert_file = path to cacertfile\nssl_password = password\n```\n\n----------------------------------------\n\nTITLE: Configuring IO Queue Concurrency in CouchDB\nDESCRIPTION: Sets the maximum number of concurrent in-flight IO requests that the queueing system will submit. This setting controls the parallelism of IO operations.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/config/ioq.rst#2025-04-21_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[ioq]\nconcurrency = 10\n```\n\n----------------------------------------\n\nTITLE: Configuring Request Limits in CouchDB's default.ini\nDESCRIPTION: Configuration section for specifying maximum page size limits for different CouchDB endpoints in the default.ini file. These settings control the maximum number of documents that can be returned in a single response for paginated requests.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/rfcs/014-pagination.md#2025-04-21_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[request_limits]\n_all_docs = 5000\n_all_docs/queries = 5000\n_all_dbs = 5000\n_dbs_info = 5000\n_view = 2500\n_view/queries = 2500\n_find = 2500\n```\n\n----------------------------------------\n\nTITLE: Default Database Security Object in CouchDB 3.0\nDESCRIPTION: The default security object for newly created databases in CouchDB 3.0, which restricts access to admin users only.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/whatsnew/3.0.rst#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"members\" : { \"roles\" : [ \"_admin\" ] },\n   \"admins\" : { \"roles\" : [ \"_admin\" ] }\n}\n```\n\n----------------------------------------\n\nTITLE: Range and Level Calculation for Skip List Traversal\nDESCRIPTION: Determines the optimal level and range for skip list traversal based on the current position and target range. It attempts to scan at the highest possible level while ensuring correct results for group level queries.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/rfcs/012-fdb-reduce.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconst getNextRangeAndLevel = async (tn, groupLevel, level, startkey, endkey) => {\n    let groupEndkey = await getGroupLevelEndKey(tn, groupLevel, 0, startkey.key);\n    log('groupendkey', groupEndkey, 'start', startkey, 'end', endkey, keyGreater(endkey, groupEndkey));\n    if (keyGreater(endkey, groupEndkey)) {\n        groupEndkey = endkey;\n    }\n\n    // at end of this specific grouplevel, so have to do final scan at level 0\n    if (keysEqual(startkey, groupEndkey)) {\n        return [0, startkey, startkey];\n    }\n\n    const levelRanges = [{\n        level: 0,\n        start: startkey,\n        end: groupEndkey\n    }];\n    for (let i = 0; i < MAX_LEVELS; i++) {\n        log('next start', startkey, 'i', i);\n        // look 1 level above\n        let nearestLevelKey = await getKeyOrNearest(tn, startkey.key, i + 1, endkey.key);\n        log('nearest', nearestLevelKey, \"level\", i + 1, \"start\", startkey, \"grouplevelequal\", groupLevelEqual(startkey, nearestLevelKey, groupLevel));\n\n        if (keysEqual(nearestLevelKey, startkey)) {\n            const groupLevelEndKey = await getGroupLevelEndKey(tn, groupLevel, i + 1, nearestLevelKey.key);\n            log('CALCUP1', 'nearest', nearestLevelKey, 'after', groupLevelEndKey, 'level', i);\n            if (groupLevelEndKey !== null) {\n                if (keyGreater(endkey, groupLevelEndKey)) {\n                    log('grouplevel great than endkey', endkey, groupLevelEndKey);\n                    // exceeded the range at this level we can't go further\n                    break;\n                }\n                // end of grouplevel for set level have to use previous levels for read\n                if (keysEqual(nearestLevelKey, groupLevelEndKey)) {\n                    break;\n                }\n\n                levelRanges.push({\n                    level: i + 1,\n                    start: nearestLevelKey,\n                    end: groupLevelEndKey\n                });\n                continue;\n            }\n        } else if (nearestLevelKey !== null && groupLevelEqual(startkey, nearestLevelKey, groupLevel)) {\n            log('querying to nearest level up', startkey, nearestLevelKey);\n            return [i, startkey, nearestLevelKey];\n        } \n\n        break;\n    }\n\n    \n    log('gone to far', JSON.stringify(levelRanges, ' ', null));\n    const out = levelRanges.pop();\n    return [out.level, out.start, out.end]\n};\n```\n\n----------------------------------------\n\nTITLE: Querying CouchDB View Using cURL\nDESCRIPTION: Console command showing how to query a view to retrieve its results using cURL.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/ddocs/views/intro.rst#2025-04-21_snippet_3\n\nLANGUAGE: console\nCODE:\n```\ncurl -X GET http://admin:password@127.0.0.1:5984/db/_design/my_ddoc/_view/my_filter\n```\n\n----------------------------------------\n\nTITLE: Removing Shard Files in CouchDB Using Bash\nDESCRIPTION: This command removes shard and secondary index files from the source node to complete the removal of a shard replica. It cleans up the dedicated directories for shards and ensures that all related files are deleted, allowing for a fresh configuration of the cluster.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/cluster/sharding.rst#2025-04-21_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n$ rm {couch-dir}/data/shards/{range}/{db}.{datecode}.couch\n$ rm -r {couch-dir}/data/.shards/{range}/{db}.{datecode}*\n```\n\n----------------------------------------\n\nTITLE: Pushing Feature Branch to Remote for CouchDB Pull Request\nDESCRIPTION: Command to push a topic branch to a contributor's forked repository. This is necessary before opening a pull request to contribute changes to the CouchDB project.\nSOURCE: https://github.com/apache/couchdb/blob/main/CONTRIBUTING.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngit push origin <topic-branch-name>\n```\n\n----------------------------------------\n\nTITLE: Implementing Replicator Scheduling Algorithm in Erlang for CouchDB\nDESCRIPTION: Core function of the replicator scheduler that executes the job scheduling algorithm. It counts running and pending jobs, stops excess jobs, starts pending jobs when capacity is available, rotates jobs according to scheduling policy, and updates statistics.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/couch_replicator/README.md#2025-04-21_snippet_0\n\nLANGUAGE: erlang\nCODE:\n```\nRunning = running_job_count(),\nPending = pending_job_count(),\nstop_excess_jobs(State, Running),\nstart_pending_jobs(State, Running, Pending),\nrotate_jobs(State, Running, Pending),\nupdate_running_jobs_stats(State#state.stats_pid)\n```\n\n----------------------------------------\n\nTITLE: Verifying Erlang Version and Crypto Support in CouchDB\nDESCRIPTION: Commands to check if Erlang is running with the correct version and has crypto (SSL) support enabled, which is required for CouchDB to function properly.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/install/troubleshooting.rst#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n## what version of erlang are you running? Ensure it is supported\nerl -noshell -eval 'io:put_chars(erlang:system_info(otp_release)).' -s erlang halt\n## are the erlang crypto (SSL) libraries working?\nerl -noshell -eval 'case application:load(crypto) of ok -> io:put_chars(\"yay_crypto\\n\") ; _ -> exit(no_crypto) end.' -s init stop\n```\n\n----------------------------------------\n\nTITLE: Configuring Log4j for Clouseau Search Service\nDESCRIPTION: Log4j configuration file for the Clouseau search service defining logging settings and output format.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/install/search.rst#2025-04-21_snippet_1\n\nLANGUAGE: properties\nCODE:\n```\nlog4j.rootLogger=debug, CONSOLE\nlog4j.appender.CONSOLE=org.apache.log4j.ConsoleAppender\nlog4j.appender.CONSOLE.layout=org.apache.log4j.PatternLayout\nlog4j.appender.CONSOLE.layout.ConversionPattern=%d{ISO8601} %c [%p] %m%n\n```\n\n----------------------------------------\n\nTITLE: Proxy Authentication Response\nDESCRIPTION: HTTP response showing successful proxy authentication with user context and authentication info\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/server/authn.rst#2025-04-21_snippet_6\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200 OK\nCache-Control: must-revalidate\nContent-Length: 190\nContent-Type: application/json\nDate: Fri, 14 Jun 2013 10:16:03 GMT\nServer: CouchDB (Erlang/OTP)\n\n{\n    \"info\": {\n        \"authenticated\": \"proxy\",\n        \"authentication_db\": \"_users\",\n        \"authentication_handlers\": [\n            \"cookie\",\n            \"proxy\",\n            \"default\"\n        ]\n    },\n    \"ok\": true,\n    \"userCtx\": {\n        \"name\": \"foo\",\n        \"roles\": [\n            \"users\",\n            \"blogger\"\n        ]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Running CouchDB Tests\nDESCRIPTION: Commands to run various test suites in CouchDB, including all tests, Erlang unit tests, Mango tests, Elixir tests, and Weatherreport tests.\nSOURCE: https://github.com/apache/couchdb/blob/main/README-DEV.rst#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nmake check\n```\n\nLANGUAGE: bash\nCODE:\n```\nmake eunit\nmake mango-test\nmake elixir\nmake weatherreport-test\n```\n\n----------------------------------------\n\nTITLE: Generating Unauthorized Error Response in CouchDB\nDESCRIPTION: This snippet demonstrates the JSON structure for an unauthorized error response in CouchDB. It includes the error type and a reason explaining the authentication failure.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/replication/protocol.rst#2025-04-21_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"error\": \"unauthorized\",\n    \"reason\": \"Name or password is incorrect\"\n}\n```\n\n----------------------------------------\n\nTITLE: PUT Configuration Key Request - CouchDB HTTP\nDESCRIPTION: HTTP request to update a configuration value. Requires the new value in JSON format in the request body.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/server/configuration.rst#2025-04-21_snippet_3\n\nLANGUAGE: http\nCODE:\n```\nPUT /_node/nonode@nohost/_config/log/level HTTP/1.1\nAccept: application/json\nContent-Length: 7\nContent-Type: application/json\nHost: localhost:5984\n\n\"info\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Maintenance Mode in CouchDB\nDESCRIPTION: Sets the maintenance mode for a CouchDB node, affecting its response to clustered requests and the /_up endpoint behavior.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/config/couchdb.rst#2025-04-21_snippet_5\n\nLANGUAGE: ini\nCODE:\n```\n[couchdb]\nmaintenance_mode = false\n```\n\n----------------------------------------\n\nTITLE: Example Send output\nDESCRIPTION: An example of the output produced by the Send function example.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/query-server/erlang.rst#2025-04-21_snippet_6\n\nLANGUAGE: text\nCODE:\n```\nHello, Couch!\n```\n\n----------------------------------------\n\nTITLE: CouchDB Search Result Highlighting Examples\nDESCRIPTION: Examples of using search term highlighting with custom tags and size parameters.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/ddocs/search.rst#2025-04-21_snippet_27\n\nLANGUAGE: http\nCODE:\n```\nGET /movies/_design/searches/_search/movies?q=movie_name:Azazel&highlight_fields=[\"movie_name\"]&highlight_pre_tag=\"**\"&highlight_post_tag=\"**\"&highlights_size=30&highlights_number=2 HTTP/1.1\nAuthorization: ...\n```\n\nLANGUAGE: sh\nCODE:\n```\ncurl \"https://$HOST:5984/movies/_design/searches/_search/movies?q=movie_name:Azazel&highlight_fields=\\[\\\"movie_name\\\"\\]&highlight_pre_tag=\\\"**\\\"&highlight_post_tag=\\\"**\\\"&highlights_size=30&highlights_number=2\n```\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"highlights\": {\n        \"movie_name\": [\n            \" on the Azazel Orient Express\",\n            \" Azazel manuals, you\"\n        ]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Map Function to Query Server\nDESCRIPTION: Sends a map function to the Query Server for evaluation and later use in view processing. The function is parsed, compiled, and stored.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/query-server/protocol.rst#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n[\"add_fun\", \"function(doc) { if(doc.score > 50) emit(null, {'player_name': doc.name}); }\"]\n```\n\n----------------------------------------\n\nTITLE: Configuring Source Shard Deletion After Resharding\nDESCRIPTION: Controls whether the source shard should be deleted after successful resharding completion.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/config/resharding.rst#2025-04-21_snippet_4\n\nLANGUAGE: ini\nCODE:\n```\n[reshard]\ndelete_source = true\n```\n\n----------------------------------------\n\nTITLE: Configuring CSP Header Value in CouchDB\nDESCRIPTION: Sets the Content Security Policy (CSP) header value for CouchDB. This configuration is marked as deprecated in the documentation.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/config/misc.rst#2025-04-21_snippet_6\n\nLANGUAGE: ini\nCODE:\n```\n[csp]\nheader_value = default-src 'self'; img-src *; font-src *;\n```\n\n----------------------------------------\n\nTITLE: Configuring Event Log Size Limit for Resharding\nDESCRIPTION: Sets the maximum size limit for the resharding job event log.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/config/resharding.rst#2025-04-21_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[reshard]\nmax_history = 20\n```\n\n----------------------------------------\n\nTITLE: Skip List Level Distribution Algorithm for Reduce Index\nDESCRIPTION: Algorithm to distribute keys across different levels of the skip list based on a hash calculation. It uses a configurable maximum number of levels and a fan-out power to determine the distribution density at each level.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/rfcs/012-fdb-reduce.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst MAX_LEVELS = 6;\nconst LEVEL_FAN_POW = 4; // 2^X per level or (1 / 2^X) less than previous level\n\nconst hashCalc = (key, level) => {\n    const keyHash = hashCode(JSON.stringify(key));\n    const out = (keyHash & ((1 << (level * LEVEL_FAN_POW)) - 1));\n    if (out !== 0) {\n        return false;\n    }\n\n    return true;\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling SSL Support in CouchDB Configuration\nDESCRIPTION: Shows the simplified configuration for enabling SSL support in CouchDB's .ini file.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/whatsnew/2.3.rst#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n[ssl]\nenable = true\n```\n\n----------------------------------------\n\nTITLE: Configuring Single Node Mode in CouchDB INI\nDESCRIPTION: When set to true, CouchDB will automatically create system databases on startup if they don't exist. This is useful for single-node deployments.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/whatsnew/3.0.rst#2025-04-21_snippet_3\n\nLANGUAGE: ini\nCODE:\n```\n[couchdb]\nsingle_node = true\n```\n\n----------------------------------------\n\nTITLE: Configuring Syslog Host for CouchDB Logging\nDESCRIPTION: Specifies the syslog host to send logs to when using the 'syslog' writer. This setting is mandatory for syslog to work.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/config/logging.rst#2025-04-21_snippet_6\n\nLANGUAGE: ini\nCODE:\n```\n[log]\nsyslog_host = localhost\n```\n\n----------------------------------------\n\nTITLE: Erlang Map/Reduce Functions\nDESCRIPTION: Example of native Erlang query server map/reduce functions for counting documents by revision number.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/config/query-servers.rst#2025-04-21_snippet_2\n\nLANGUAGE: erlang\nCODE:\n```\n%% Map Function\nfun({Doc}) ->\n    <<K,_/binary>> = proplists:get_value(<<\"_rev\">>, Doc, null),\n    V = proplists:get_value(<<\"_id\">>, Doc, null),\n    Emit(<<K>>, V)\nend.\n\n%% Reduce Function\nfun(Keys, Values, ReReduce) -> length(Values) end.\n```\n\n----------------------------------------\n\nTITLE: Error Handling for Invalid Selector - JSON\nDESCRIPTION: The snippet shows the error message when a selector object lacks a valid selection expression during a request. It underscores the necessity of using correct selection criteria in JSON objects when querying changes.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/database/changes.rst#2025-04-21_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"error\": \"bad request\",\n  \"reason\": \"Selector error: expected a JSON object\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring CouchDB HTTP Settings\nDESCRIPTION: Migrates HTTP configuration options from [httpd] to [chttpd] section. This updates the location of various HTTP-related settings.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/whatsnew/3.2.rst#2025-04-21_snippet_2\n\nLANGUAGE: erlang\nCODE:\n```\n[chttpd]\nallow_jsonp = ...\nchanges_timeout = ...\nconfig_whitelist = ...\nenable_cors = ...\nsecure_rewrites = ...\nx_forwarded_host = ...\nx_forwarded_proto = ...\nx_forwarded_ssl = ...\nenable_xframe_options = ...\nmax_http_request_size = ...\n```\n\n----------------------------------------\n\nTITLE: Setting up CouchDB Database and Nouveau Index\nDESCRIPTION: This shell script demonstrates how to create a CouchDB database, define a Nouveau index, and populate it with sample data. It also includes a command to continuously query the index.\nSOURCE: https://github.com/apache/couchdb/blob/main/nouveau/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n#!/bin/sh\n\nURL=\"http://foo:bar@127.0.0.1:15984/foo\"\n\ncurl -X DELETE \"$URL\"\ncurl -X PUT \"$URL?n=3&q=16\"\n\ncurl -X PUT \"$URL/_design/foo\" -d '{\"nouveau\":{\"bar\":{\"default_analyzer\":\"standard\", \"field_analyzers\":{\"foo\":\"english\"}, \"index\":\"function(doc) { index(\\\"string\\\", \\\"foo\\\", \\\"bar\\\"); }\"}}'\n\n# curl \"$URL/_index\" -Hcontent-type:application/json -d '{\"type\":\"nouveau\", \"index\": {\"fields\": [{\"name\": \"bar\", \"type\":\"number\"}]}}'\n\nfor I in {1..5}; do\n    DOCID=$RANDOM\n    DOCID=$[ $DOCID % 100000 ]\n    BAR=$RANDOM\n    BAR=$[ $BAR % 100000 ]\n    curl -X PUT \"$URL/doc$DOCID\" -d \"{\\\"bar\\\": $BAR}\"\ndone\n\nwhile true; do\n    curl 'foo:bar@localhost:15984/foo/_design/foo/_nouveau/bar?q=*:*'\ndone\n```\n\n----------------------------------------\n\nTITLE: Setting Scanner Shard Limit\nDESCRIPTION: Configures the maximum number of shards to process per database during scanning.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/config/quickjs.rst#2025-04-21_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[couch_quickjs_scanner_plugin]\nmax_shards = 4\n```\n\n----------------------------------------\n\nTITLE: Configuring Node Types in Erlang Application Environment\nDESCRIPTION: Example configuration in va.args file that sets node types by disabling the API frontend functionality and enabling replication functionality. This demonstrates the Erlang application environment configuration approach using the fabric node_types property.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/rfcs/013-node-types.md#2025-04-21_snippet_0\n\nLANGUAGE: erlang\nCODE:\n```\n-fabric node_types '[{api_frontend, false}, {replication, true}]'\n```\n\n----------------------------------------\n\nTITLE: Setting Scanner Batch Size Limit\nDESCRIPTION: Defines the maximum memory usage allowed for a document batch.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/config/quickjs.rst#2025-04-21_snippet_6\n\nLANGUAGE: ini\nCODE:\n```\n[couch_quickjs_scanner_plugin]\nmax_batch_size = 16777216\n```\n\n----------------------------------------\n\nTITLE: Configuring CouchDB Proxy Authentication Handler\nDESCRIPTION: Updates the CouchDB configuration to use the new chttpd_auth module for proxy authentication, replacing the deprecated couch_httpd_auth handler.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/whatsnew/2.2.rst#2025-04-21_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n{chttpd_auth, proxy_authentication_handler}\n```\n\n----------------------------------------\n\nTITLE: Defining FoundationDB Key Structure for Document Index\nDESCRIPTION: Specifies the structure of keys in the dedicated subspace for document indexing. The key format includes document ID, value format, revision position and hash.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/rfcs/005-all-docs-index.md#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n(?BY_ID, DocID) = (ValueFormat, RevPosition, RevHash)\n```\n\n----------------------------------------\n\nTITLE: Dot Notation Selector\nDESCRIPTION: Abbreviated selector syntax using dot notation for nested fields.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/ddocs/mango.rst#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"imdb.rating\": 8\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Unauthorized PUT Request in CouchDB\nDESCRIPTION: This snippet demonstrates an error response when a PUT request to create a target database fails due to insufficient privileges. The server returns a 500 Internal Server Error with a JSON payload indicating the \"unauthorized\" error and the reason.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/replication/protocol.rst#2025-04-21_snippet_3\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 500 Internal Server Error\nCache-Control: must-revalidate\nContent-Length: 108\nContent-Type: application/json\nDate: Fri, 09 May 2014 13:50:32 GMT\nServer: CouchDB (Erlang OTP)\n\n{\n    \"error\": \"unauthorized\",\n    \"reason\": \"unauthorized to access or create database http://localhost:5984/target\"\n}\n```\n\n----------------------------------------\n\nTITLE: Modified Bookmarks Structure on PC After Changes\nDESCRIPTION: This snippet illustrates the bookmarks structure after modifications on a PC. It shows different changes compared to the laptop version, including deletion of entries and addition of new bookmarks.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/best-practices/documents.rst#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n[\n  {\"name\":\"News\", \"url\":\"http://www.cnn.com/\"},\n  {\"name\":\"Tech\", \"bookmarks\": [\n    {\"name\":\"Register\", \"url\":\"http://www.theregister.co.uk/\"},\n    {\"name\":\"CouchDB\", \"url\":\"http://couchdb.apache.org/\"},\n    {\"name\":\"CNET\", \"url\":\"http://news.cnet.com/\"}\n  ]}\n]\n```\n\n----------------------------------------\n\nTITLE: Modified Bookmarks Structure on Laptop After Changes\nDESCRIPTION: This snippet shows how the bookmarks structure might look after modifications on a laptop. It includes changes such as updating URLs, renaming entries, and adding new bookmarks.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/best-practices/documents.rst#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n[\n  {\"name\":\"Weather\", \"url\":\"http://www.bbc.co.uk/weather\"},\n  {\"name\":\"News\", \"url\":\"http://www.cnn.com/\"},\n  {\"name\":\"Tech\", \"bookmarks\": [\n    {\"name\":\"The Register\", \"url\":\"http://www.theregister.co.uk/\"},\n    {\"name\":\"Slashdot\", \"url\":\"http://www.slashdot.new/\"},\n    {\"name\":\"CouchDB\", \"url\":\"http://couchdb.apache.org/\"}\n  ]}\n]\n```\n\n----------------------------------------\n\nTITLE: Successful Authentication Response in CouchDB (JavaScript)\nDESCRIPTION: This JSON response indicates a successful authentication in CouchDB. It confirms that the login was successful, provides the authenticated username, and shows an empty array of roles for the user.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/intro/security.rst#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n{\"ok\":true,\"name\":\"jan\",\"roles\":[]}\n```\n\n----------------------------------------\n\nTITLE: Setting Attachment Streaming Buffer in CouchDB Config\nDESCRIPTION: Configures the buffer size for streaming attachments. Higher values may improve read performance but can increase response time for parallel writes.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/config/couchdb.rst#2025-04-21_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[couchdb]\nattachment_stream_buffer_size = 4096\n```\n\n----------------------------------------\n\nTITLE: Generating Method Not Allowed Error Response in CouchDB\nDESCRIPTION: This snippet shows the JSON structure for a method not allowed error response in CouchDB. It includes the error type and a reason explaining which HTTP methods are allowed.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/replication/protocol.rst#2025-04-21_snippet_32\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"error\": \"method_not_allowed\",\n    \"reason\": \"Only GET, PUT, DELETE allowed\"\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Maximum Open Databases in CouchDB\nDESCRIPTION: Limits the number of databases that can be open simultaneously. CouchDB will close idle databases as needed.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/config/couchdb.rst#2025-04-21_snippet_6\n\nLANGUAGE: ini\nCODE:\n```\n[couchdb]\nmax_dbs_open = 100\n```\n\n----------------------------------------\n\nTITLE: HTTP Response Headers with Default Content Type\nDESCRIPTION: Example of CouchDB response headers when no specific Accept header is provided. Note that the content type defaults to text/plain even though the response contains JSON.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/basics.rst#2025-04-21_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200 OK\nServer: CouchDB (Erlang/OTP)\nDate: Thu, 13 Jan 2011 13:39:34 GMT\nContent-Type: text/plain;charset=utf-8\nContent-Length: 227\nCache-Control: must-revalidate\n```\n\n----------------------------------------\n\nTITLE: Batch Document Insertion in Skip List with Transactions\nDESCRIPTION: Iteratively inserts batches of random key-value pairs into a database using transactions. Each batch is processed within a single transaction and timing information is logged.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/rfcs/012-fdb-reduce.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n    for (let i = 0; i <= 30000; i+= docsPerTx) {\n        const kvs = [];\n        for (let k = 0; k <= docsPerTx; k++) {\n            const key = getRandomKey(2015, 2020);\n            const value = getRandom(1, 20);\n            rawKeys.push({key, value});\n            kvs.push([key, value]);\n        }\n        console.time('tx');\n        await db.doTransaction(async tn => {\n            for ([key, value] of kvs) {\n                await insert(tn, key, value);\n            }\n        });\n        console.timeEnd('tx');\n        log('inserted ${i} keys');\n    }\n    console.timeEnd('total insert');\n}\n```\n\n----------------------------------------\n\nTITLE: Unattended Uninstall of CouchDB Using Product GUID\nDESCRIPTION: Command to silently uninstall CouchDB when the installer file is not available, using the product's GUID for identification. Useful for automated system maintenance.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/install/windows.rst#2025-04-21_snippet_3\n\nLANGUAGE: batch\nCODE:\n```\nmsiexec /x {4CD776E0-FADF-4831-AF56-E80E39F34CFC} /quiet /norestart\n```\n\n----------------------------------------\n\nTITLE: Changing Channel Concurrency Across Cluster in Erlang\nDESCRIPTION: This snippet shows how to change the concurrency of a specific Smoosh channel (ratio_dbs) on all live nodes in the cluster using rpc:multicall in Erlang. It sets the 'concurrency' option to 2 for the ratio_dbs channel.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/smoosh/README.md#2025-04-21_snippet_3\n\nLANGUAGE: erlang\nCODE:\n```\nrpc:multicall(config, set, [\"smoosh.ratio_dbs\", \"concurrency\", \"2\"]).\n```\n\n----------------------------------------\n\nTITLE: Checking Smoosh Status in Erlang\nDESCRIPTION: This snippet shows how to check the status of Smoosh using the smoosh:status() function in Erlang. It prints the state of each channel, including running and enqueued jobs, and their priorities.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/smoosh/README.md#2025-04-21_snippet_4\n\nLANGUAGE: erlang\nCODE:\n```\nsmoosh:status()\n```\n\n----------------------------------------\n\nTITLE: Configuring QuickJS Scanner Design Doc Limit\nDESCRIPTION: Sets the maximum number of design documents to process per database in the scanner plugin.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/config/quickjs.rst#2025-04-21_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[couch_quickjs_scanner_plugin]\nmax_ddocs = 100\n```\n\n----------------------------------------\n\nTITLE: Configuring JavaScript Query Server Environment\nDESCRIPTION: Example environment variable setup for JavaScript and CoffeeScript query servers in CouchDB with memory limit configuration.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/config/query-servers.rst#2025-04-21_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\nCOUCHDB_QUERY_SERVER_JAVASCRIPT=\"/opt/couchdb/bin/couchjs /opt/couchdb/share/server/main.js\"\nCOUCHDB_QUERY_SERVER_COFFEESCRIPT=\"/opt/couchdb/bin/couchjs /opt/couchdb/share/server/main-coffee.js\"\n```\n\n----------------------------------------\n\nTITLE: CouchDB Index Selection Reason Codes Table\nDESCRIPTION: A comprehensive table detailing the various reason codes used in CouchDB's index selection process, including which index types they apply to and their descriptions.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/database/find.rst#2025-04-21_snippet_13\n\nLANGUAGE: markdown\nCODE:\n```\n+--------------------------------+------------+------------------------------------------+\n| Reason Code                    | Index Type | Description                              |\n+================================+============+==========================================+\n| ``alphabetically_comes_after`` | json       | There is another suitable index whose    |\n|                                |            | name comes before that of this index.    |\n+--------------------------------+------------+------------------------------------------+\n| ``empty_selector``             | text       | ``\"text\"`` indexes do not support        |\n|                                |            | queries with empty selectors.            |\n+--------------------------------+------------+------------------------------------------+\n| ``excluded_by_user``           | any        | ``use_index`` was used to manually       |\n|                                |            | specify the index.                       |\n+--------------------------------+------------+------------------------------------------+\n| ``field_mismatch``             | any        | Fields in ``\"selector\"`` of the query do |\n|                                |            | not match with the fields available in   |\n|                                |            | the index.                               |\n+--------------------------------+------------+------------------------------------------+\n| ``is_partial``                 | json, text | Partial indexes can be selected only     |\n|                                |            | manually.                                |\n+--------------------------------+------------+------------------------------------------+\n| ``less_overlap``               | json       | There is a better match of fields        |\n|                                |            | available within the indexes for the     |\n|                                |            | query.                                   |\n+--------------------------------+------------+------------------------------------------+\n| ``needs_text_search``          | json       | The use of the ``$text`` operator        |\n|                                |            | requires a ``\"text\"`` index.             |\n+--------------------------------+------------+------------------------------------------+\n| ``scope_mismatch``             | json       | The scope of the query and the index is  |\n|                                |            | not the same.                            |\n+--------------------------------+------------+------------------------------------------+\n| ``sort_order_mismatch``        | json,      | Fields in ``\"sort\"`` of the query do not |\n|                                | special    | match with the fields available in the   |\n|                                |            | index.                                   |\n+--------------------------------+------------+------------------------------------------+\n| ``too_many_fields``            | json       | The index has more fields than the       |\n|                                |            | chosen one.                              |\n+--------------------------------+------------+------------------------------------------+\n| ``unfavored_type``             | any        | The type of the index is not preferred.  |\n+--------------------------------+------------+------------------------------------------+\n```\n\n----------------------------------------\n\nTITLE: Configuring CouchDB Authentication Settings\nDESCRIPTION: Migrates authentication configuration options from [couch_httpd_auth] to [chttpd_auth] section. This updates the location of various auth-related settings.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/whatsnew/3.2.rst#2025-04-21_snippet_1\n\nLANGUAGE: erlang\nCODE:\n```\n[chttpd_auth]\nauthentication_redirect = ...\ntimeout = ...\nauth_cache_size = ...\nallow_persistent_cookies = ...\niterations = ...\nmin_iterations = ...\nmax_iterations = ...\npassword_scheme = ...\nproxy_use_secret = ...\npublic_fields = ...\nsecret = ...\nusers_db_public = ...\nx_auth_roles = ...\nx_auth_token = ...\nx_auth_username = ...\ncookie_domain = ...\nsame_site = ...\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies on Debian-based Systems\nDESCRIPTION: Command to install the necessary dependencies for building Apache CouchDB from source on Debian-based systems. This includes build tools, Erlang, and libraries for ICU and SpiderMonkey.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/install/unix.rst#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get --no-install-recommends -y install \\\n    build-essential pkg-config erlang \\\n    libicu-dev libmozjs185-dev\n```\n\n----------------------------------------\n\nTITLE: Specifying Application Name for Syslog in CouchDB\nDESCRIPTION: Sets the application name to be used with the 'syslog' writer for CouchDB logging.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/config/logging.rst#2025-04-21_snippet_8\n\nLANGUAGE: ini\nCODE:\n```\n[log]\nsyslog_appid = couchdb\n```\n\n----------------------------------------\n\nTITLE: Setting CouchDB Peruser Database Q Value\nDESCRIPTION: Configures a default Q value for databases created by the couch_peruser feature, allowing it to differ from the cluster's Q value.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/whatsnew/2.2.rst#2025-04-21_snippet_3\n\nLANGUAGE: ini\nCODE:\n```\n[couch_peruser]\nq = value\n```\n\n----------------------------------------\n\nTITLE: Setting CouchDB Node Maintenance Mode\nDESCRIPTION: cURL command to enable maintenance mode on a CouchDB node via configuration API.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/cluster/sharding.rst#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ curl -X PUT -H \"Content-type: application/json\" \\\n    $COUCH_URL:5984/_node/{node-name}/_config/couchdb/maintenance_mode \\\n    -d \"\\\"true\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Setting Replicator Update Docs Parameter\nDESCRIPTION: Configuration option to make the replicator continue updating documents with transient replication states, maintaining backwards compatibility at a performance cost.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/whatsnew/2.1.rst#2025-04-21_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[replicator]\nupdate_docs = true\n```\n\n----------------------------------------\n\nTITLE: Skip List Insertion Algorithm Implementation\nDESCRIPTION: Implements the multi-level skip list insertion algorithm. At level 0, it inserts or updates existing values. For higher levels, it determines whether to insert at the level based on hash calculation and recalculates values for affected keys.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/rfcs/012-fdb-reduce.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst insert = async (tn, key, value) => {\n    let currentVal = value; // if this k/v has been stored before we need to update this value at level 0 to be used through the other levels\n    for(let level = 0; level <= MAX_LEVELS; level++) {\n        if (level === 0) {\n            const existing = await getVal(tn, key, level);\n            if (existing) {\n                currentVal = rereduce([existing, currentVal]);\n            }\n            await insertAtLevel(tn, key, currentVal, 0);\n            continue;\n        }\n        const previous = await getPrevious(tn, key, level);\n        log('Planning to insert at ', level, 'key', key, 'previous is', previous);\n        if (hashCalc(key, level, LEVEL_FAN_POW)) {\n            const lowerLevel = level - 1;\n            // update previous node\n            const newPrevRange = await getRange(tn, previous.key, key, lowerLevel);\n            log('prevRange', newPrevRange, 'prevKey', previous, 'key', key);\n            const prevValues = newPrevRange.map(kv => kv.value);\n            const newPrevValue = rereduce(prevValues)\n            if (newPrevValue !== previous.value) {\n                await insertAtLevel(tn, previous.key, newPrevValue, level);\n            }\n\n            // calculate new nodes values\n            const next = await getNext(tn, key, level);\n            const newRange = await getRange(tn, key, next.key, lowerLevel);\n            const newValues = newRange.map(kv => kv.value);\n            const newValue = rereduce(newValues);\n            log('inserting at level', level, 'key', key, 'after', next, 'range', newRange);\n            await insertAtLevel(tn, key, newValue, level);\n        } else {\n            const newValue = rereduce([previous.value, value]);\n            log('rereduce at', level, 'key', previous.key, 'new value', newValue, 'prev value', previous.value);\n            await insertAtLevel(tn, previous.key, newValue, level);\n        }\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Standard Analyzer Test Result in CouchDB Nouveau Search (JavaScript)\nDESCRIPTION: Example result of testing the standard analyzer in CouchDB Nouveau search. It shows the tokenized output for the input text.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/ddocs/nouveau.rst#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"tokens\": [\n        \"ablanks\",\n        \"renovations.com\"\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Caddy 2 Load Balancing Configuration\nDESCRIPTION: Caddy 2 configuration for load balancing across multiple CouchDB cluster nodes with health checks.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/best-practices/reverse-proxies.rst#2025-04-21_snippet_8\n\nLANGUAGE: text\nCODE:\n```\ndomain.com {\n\n    reverse_proxy http://localhost:15984 http://localhost:25984 http://localhost:35984 {\n    lb_policy round_robin\n    lb_try_interval 500ms\n\n    health_interval 5s\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Sending a string chunk in response from Erlang function\nDESCRIPTION: The Send function sends a single string chunk in response. This example shows how to send multiple string chunks to build a complete response. It demonstrates simple string concatenation.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/query-server/erlang.rst#2025-04-21_snippet_5\n\nLANGUAGE: erlang\nCODE:\n```\nfun(Head, {Req}) ->\n    Send(\"Hello,\"),\n    Send(\" \"),\n    Send(\"Couch\"),\n    \"!\"\nend.\n```\n\n----------------------------------------\n\nTITLE: Setting Revision Limit in CouchDB\nDESCRIPTION: HTTP PUT request to set the maximum number of document revisions that will be tracked by CouchDB, even after compaction has occurred.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/database/misc.rst#2025-04-21_snippet_10\n\nLANGUAGE: http\nCODE:\n```\nPUT /db/_revs_limit HTTP/1.1\nAccept: application/json\nContent-Length: 5\nContent-Type: application/json\nHost: localhost:5984\n\n1000\n```\n\n----------------------------------------\n\nTITLE: Running Mango Interface Tests\nDESCRIPTION: Commands demonstrating how to run Mango interface tests with specific options and how to keep test databases for investigation.\nSOURCE: https://github.com/apache/couchdb/blob/main/README-DEV.rst#2025-04-21_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nmake mango-test \\\n  MANGO_TEST_OPTS=\"--pretty-assert --verbose 03-operator-test\"\n```\n\nLANGUAGE: bash\nCODE:\n```\nMANGO_TESTS_KEEP_DBS=please \\\n  make mango-test MANGO_TEST_OPTS='03-operator-test'\n```\n\n----------------------------------------\n\nTITLE: Generating Not Found Error Response in CouchDB\nDESCRIPTION: This snippet demonstrates the JSON structure for a not found error response in CouchDB. It includes the error type and a reason explaining that the requested resource doesn't exist.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/replication/protocol.rst#2025-04-21_snippet_31\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"error\": \"not_found\",\n    \"reason\": \"database \\\"target\\\" does not exists\"\n}\n```\n\n----------------------------------------\n\nTITLE: Document Copy Request/Response Example\nDESCRIPTION: Example of copying a document using the COPY method, showing both the request and successful response.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/document/common.rst#2025-04-21_snippet_7\n\nLANGUAGE: text\nCODE:\n```\nCOPY /recipes/SpaghettiWithMeatballs HTTP/1.1\nAccept: application/json\nDestination: SpaghettiWithMeatballs_Italian\nHost: localhost:5984\n```\n\n----------------------------------------\n\nTITLE: VM Arguments Configuration for TLS Distribution\nDESCRIPTION: VM arguments settings in vm.args file to enable TLS distribution with options for mixed TLS/TCP node connections.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/cluster/tls_erlang_distribution.rst#2025-04-21_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n-proto_dist couch\n-couch_dist no_tls \\\"clouseau@127.0.0.1\\\"\n-ssl_dist_optfile </absolute_path/to/couch_dist.conf>\n```\n\nLANGUAGE: text\nCODE:\n```\n-couch_dist no_tls false\n```\n\nLANGUAGE: text\nCODE:\n```\n-couch_dist no_tls true\n```\n\nLANGUAGE: text\nCODE:\n```\n# Specify node1 and node2 to use TCP, others use TLS\n\n-couch_dist no_tls '\"node1@127.0.0.1\"'\n-couch_dist no_tls \\\"node2@127.0.0.1\\\"\n```\n\nLANGUAGE: text\nCODE:\n```\n# Any nodes end with \"@127.0.0.1\" will use TCP, others use TLS\n\n-couch_dist no_tls \\\"*@127.0.0.1\\\"\n```\n\n----------------------------------------\n\nTITLE: Defining State Record Structure in Erlang for CouchDB Resharding\nDESCRIPTION: This code snippet shows the definition of a #state{} record used to store the global resharding state. It is used by the mem3_reshard manager and can be translated to/from JSON for persistence.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/mem3/README_reshard.md#2025-04-21_snippet_1\n\nLANGUAGE: erlang\nCODE:\n```\n#state{}\n```\n\n----------------------------------------\n\nTITLE: Setting CouchDB Port Configuration\nDESCRIPTION: Shows how to configure the listening port for CouchDB's HTTP server, including using a specific port or allowing any free port.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/config/http.rst#2025-04-21_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[chttpd]\nport = 5984\n```\n\nLANGUAGE: ini\nCODE:\n```\n[chttpd]\nport = 0\n```\n\n----------------------------------------\n\nTITLE: Setting Default JavaScript Engine in CouchDB\nDESCRIPTION: Configuration setting to specify the default JavaScript engine used by CouchDB. Available options are 'spidermonkey' and 'quickjs', with spidermonkey being the default setting. Introduced in version 3.4.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/config/couchdb.rst#2025-04-21_snippet_16\n\nLANGUAGE: ini\nCODE:\n```\n[couchdb]\njs_engine = spidermonkey\n```\n\n----------------------------------------\n\nTITLE: Finishing CouchDB Cluster Setup via HTTP Request\nDESCRIPTION: JSON payload for finalizing the CouchDB cluster setup through the /_cluster_setup endpoint.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/setup/README.md#2025-04-21_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"action\": \"finish_cluster\"\n}\n```\n\n----------------------------------------\n\nTITLE: Client Disconnection Check Configuration\nDESCRIPTION: Settings to control how often CouchDB checks for client disconnections during streaming requests.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/config/http.rst#2025-04-21_snippet_6\n\nLANGUAGE: ini\nCODE:\n```\n[chttpd]\ndisconnect_check_msec = 30000\n```\n\n----------------------------------------\n\nTITLE: PUT Request with Invalid Database Name in CouchDB\nDESCRIPTION: This snippet shows a PUT request with an invalid database name that doesn't follow CouchDB naming rules. Names must begin with a lowercase letter and contain only allowed characters.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/database/common.rst#2025-04-21_snippet_7\n\nLANGUAGE: http\nCODE:\n```\nPUT /_db HTTP/1.1\nAccept: application/json\nHost: localhost:5984\n```\n\n----------------------------------------\n\nTITLE: POST Search Request with HTTP\nDESCRIPTION: Example of sending a search query using HTTP POST method.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/ddocs/search.rst#2025-04-21_snippet_17\n\nLANGUAGE: http\nCODE:\n```\nPOST /db/_design/ddoc/_search/searchname HTTP/1.1\nContent-Type: application/json\n```\n\n----------------------------------------\n\nTITLE: Setting Valid Proxy Protocols in CouchDB\nDESCRIPTION: Defines the allowed protocols for replication proxies.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/config/replicator.rst#2025-04-21_snippet_17\n\nLANGUAGE: ini\nCODE:\n```\n[replicator]\nvalid_proxy_protocols = http,https,socks5\n```\n\n----------------------------------------\n\nTITLE: Creating CouchDB User on Unix Systems\nDESCRIPTION: Command to create a dedicated system user for running CouchDB, with appropriate shell and home directory settings.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/install/unix.rst#2025-04-21_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nadduser --system \\\n        --shell /bin/bash \\\n        --group --gecos \\\n        \"CouchDB Administrator\" couchdb\n```\n\n----------------------------------------\n\nTITLE: Creating Authentication Token with OpenSSL\nDESCRIPTION: Example of creating a token using OpenSSL with SHA256 HMAC for proxy authentication\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/server/authn.rst#2025-04-21_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\necho -n \"foo\" | openssl dgst -sha256 -hmac \"the_secret\"\n# (stdin)= 3f0786e96b20b0102b77f1a49c041be6977cfb3bf78c41a12adc121cd9b4e68a\n```\n\n----------------------------------------\n\nTITLE: Getting or Creating Index Process\nDESCRIPTION: Retrieves an existing index process or spawns a new one using the index manager, with careful process management to avoid blocking\nSOURCE: https://github.com/apache/couchdb/blob/main/src/dreyfus/README.md#2025-04-21_snippet_2\n\nLANGUAGE: Erlang\nCODE:\n```\ndreyfus_index_manager:get_index(DbName, Index)\n```\n\n----------------------------------------\n\nTITLE: RST Documentation Structure for CouchDB API\nDESCRIPTION: RST format toctree structure defining the documentation hierarchy for CouchDB API reference, including basic concepts, server operations, database management, document handling, design documents, and partitioned databases.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/index.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n    :maxdepth: 2\n\n    basics\n    server/index\n    database/index\n    document/index\n    ddoc/index\n    partitioned-dbs\n    local\n```\n\n----------------------------------------\n\nTITLE: State Transition Diagram for CouchDB 4.x Replicator\nDESCRIPTION: This ASCII diagram illustrates the state transitions for replication jobs in the new CouchDB 4.x design. It shows how jobs move between pending, running, crashing, completed, and failed states based on different events and conditions.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/rfcs/016-fdb-replicator.md#2025-04-21_snippet_2\n\nLANGUAGE: ascii\nCODE:\n```\n_replicator doc       +-------+\nPOST /_replicate ---->+pending|\n                      +-------+\n                          ^\n                          |\n                          |\n                          v\n                      +---+---+      +--------+\n            +---------+running+<---->|crashing|\n            |         +---+---+      +--------+\n            |             |\n            |             |\n            v             v\n        +------+     +---------+\n        |failed|     |completed|\n        +------+     +---------+\n```\n\n----------------------------------------\n\nTITLE: Installing XCode Command Line Tools on Mac OS X\nDESCRIPTION: Command to install the Command Line Tools for XCode on Mac OS X, which are required for building software from source.\nSOURCE: https://github.com/apache/couchdb/blob/main/INSTALL.Unix.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nxcode-select --install\n```\n\n----------------------------------------\n\nTITLE: Keyword Analyzer Test Result in CouchDB Nouveau Search (JavaScript)\nDESCRIPTION: Example result of testing the keyword analyzer in CouchDB Nouveau search. It shows the token output for the input text.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/ddocs/nouveau.rst#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"tokens\": [\n        \"ablanks@renovations.com\"\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: CouchDB Lockout Mode Configuration\nDESCRIPTION: Configuration setting for the lockout mode which can be set to off, warn, or enforce.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/config/auth.rst#2025-04-21_snippet_10\n\nLANGUAGE: ini\nCODE:\n```\n[chttpd_auth_lockout]\nmode = enforce\n```\n\n----------------------------------------\n\nTITLE: Setting up Java and Maven for Clouseau\nDESCRIPTION: Commands for installing and configuring Java 7 and Maven 3.8 using asdf version manager\nSOURCE: https://github.com/apache/couchdb/blob/main/README-DEV.rst#2025-04-21_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\nasdf install java zulu-7.56.0.11\nasdf plugin add maven\nasdf install maven 3.8.8\nexport CLOUSEAU_JAVA_HOME=$(asdf where java zulu-7.56.0.11)\nexport CLOUSEAU_M2_HOME=$(asdf where maven 3.8.8)\n```\n\n----------------------------------------\n\nTITLE: Extended Revision Tree Visualization\nDESCRIPTION: This code block extends the revision tree visualization, demonstrating how each branch can further extend its history with new revisions. It shows the resulting conflicting revisions as leaf nodes of the tree.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/replication/conflicts.rst#2025-04-21_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n      ,--> r2a -> r3a -> r4a\n    r1 --> r2b -> r3b\n      `--> r2c -> r3c\n```\n\n----------------------------------------\n\nTITLE: Adding CommonJS Library to Query Server\nDESCRIPTION: Adds a CommonJS library to the Query Server state for use in map functions. Libraries should be stateless and have no side effects.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/query-server/protocol.rst#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n[\"add_lib\", {\"utils\": \"exports.MAGIC = 42;\"}]\n```\n\n----------------------------------------\n\nTITLE: Generating Forbidden Error Response in CouchDB\nDESCRIPTION: This snippet shows the JSON structure for a forbidden error response in CouchDB. It includes the error type and a reason explaining the permission issue.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/replication/protocol.rst#2025-04-21_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"error\": \"forbidden\",\n    \"reason\": \"You may only update your own user document.\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Retry Interval for Resharding\nDESCRIPTION: Sets the wait time in seconds between subsequent retry attempts for resharding operations.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/config/resharding.rst#2025-04-21_snippet_3\n\nLANGUAGE: ini\nCODE:\n```\n[reshard]\nretry_interval_sec = 10\n```\n\n----------------------------------------\n\nTITLE: Configuring Scanner Execution Timing\nDESCRIPTION: Sets when the scanner plugin should execute after being enabled, defaulting to node restart.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/config/quickjs.rst#2025-04-21_snippet_7\n\nLANGUAGE: ini\nCODE:\n```\n[couch_quickjs_scanner_plugin]\nafter = restart\n```\n\n----------------------------------------\n\nTITLE: Implementing Message Formatting for Weatherreport Check in Erlang\nDESCRIPTION: Defines the format/1 function which formats the messages returned by check/0. It handles two message types: high memory usage and process usage information.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/weatherreport/how_to_add_a_check.md#2025-04-21_snippet_4\n\nLANGUAGE: erlang\nCODE:\n```\n-spec format(term()) -> {io:format(), [term()]}.\nformat({high_memory, Percent}) ->\n    {\"Memory usage is HIGH: ~s% of available RAM\", [Percent]};\nformat({process_usage, Percent, Real}) ->\n    {\"Process is using ~s% of available RAM, totalling ~s KB of real memory.\", [Percent, Real]}.\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies on macOS with Homebrew\nDESCRIPTION: Command to install the necessary dependencies for building Apache CouchDB from source on macOS using Homebrew. This includes build tools, Erlang, ICU, and SpiderMonkey.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/install/unix.rst#2025-04-21_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nbrew install autoconf autoconf-archive automake libtool \\\n    erlang icu4c spidermonkey pkg-config\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Shard Count in CouchDB Cluster\nDESCRIPTION: Sets the default number of shards (q) for newly created databases. The default value of 2 splits databases into 2 partitions.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/config/cluster.rst#2025-04-21_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[cluster]\nq = 2\n```\n\n----------------------------------------\n\nTITLE: Handling Bulk Creation/Updates in JavaScript\nDESCRIPTION: This snippet illustrates the new response structure for bulk creation or update operations in CouchDB, which now includes document IDs and revision numbers where applicable, as well as error information for any conflicts encountered during the operation.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/whatsnew/0.9.rst#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n[\n    {\"id\": \"0\", \"rev\": \"3682408536\"},\n    {\"id\": \"1\", \"rev\": \"3206753266\"},\n    {\"id\": \"2\", \"error\": \"conflict\", \"reason\": \"Document update conflict.\"}\n]\n```\n\n----------------------------------------\n\nTITLE: Setting LD_LIBRARY_PATH for CouchDB as couchdb User\nDESCRIPTION: Command to set the LD_LIBRARY_PATH environment variable when running CouchDB as the couchdb user, ensuring proper library path configuration with sudo.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/install/troubleshooting.rst#2025-04-21_snippet_5\n\nLANGUAGE: text\nCODE:\n```\necho LD_LIBRARY_PATH=/usr/local/lib:/usr/local/spidermonkey/lib couchdb | sudo -u couchdb sh\n```\n\n----------------------------------------\n\nTITLE: Setting Purge Checkpoint Warning Duration in CouchDB\nDESCRIPTION: Configures the allowed duration (in seconds) when an index is not updated for local purge checkpoint document. The default is 24 hours (86400 seconds). This option was introduced in CouchDB 3.0.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/config/misc.rst#2025-04-21_snippet_9\n\nLANGUAGE: ini\nCODE:\n```\n[purge]\nindex_lag_warn_seconds = 86400\n```\n\n----------------------------------------\n\nTITLE: HTTP Request for CouchDB Config Reload\nDESCRIPTION: HTTP POST request to the CouchDB node configuration reload endpoint. Used to flush in-memory configuration changes to disk.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/server/configuration.rst#2025-04-21_snippet_5\n\nLANGUAGE: http\nCODE:\n```\nPOST /_node/nonode@nohost/_config/_reload HTTP/1.1\nHost: localhost:5984\n```\n\n----------------------------------------\n\nTITLE: Configuring SameSite Attribute for Auth Cookie in CouchDB INI\nDESCRIPTION: Sets the SameSite attribute for the CouchDB authentication cookie. This may need to be set to 'strict' for compatibility with future Chrome versions, or 'None' if CORS is enabled.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/whatsnew/3.0.rst#2025-04-21_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[couch_httpd_auth]\nsame_site = strict\n```\n\n----------------------------------------\n\nTITLE: Setting Up CouchDB Repository on RedHat 9+\nDESCRIPTION: Commands to set up the Apache CouchDB package repository on RedHat version 9 or newer. This includes configuring the CouchDB repository and enabling EPEL for the SpiderMonkey dependency.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/install/unix.rst#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsudo yum install -y yum-utils\nsudo yum-config-manager --add-repo https://couchdb.apache.org/repo/couchdb.repo\n# Enable EPEL for the SpiderMonkey dependency\nsudo dnf config-manager --set-enabled crb\nsudo dnf install epel-release epel-next-release\n```\n\n----------------------------------------\n\nTITLE: Generic Database Request Format in CouchDB\nDESCRIPTION: Demonstrates the generic format for database requests where {db} represents any database name.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/database/index.rst#2025-04-21_snippet_1\n\nLANGUAGE: none\nCODE:\n```\nGET /{db}\n```\n\n----------------------------------------\n\nTITLE: Enqueuing All Databases and Views for Compaction in Erlang\nDESCRIPTION: This snippet demonstrates how to manually enqueue all databases and views for compaction using the smoosh:enqueue_all_dbs() and smoosh:enqueue_all_views() functions in Erlang. These functions are typically used for troubleshooting disk space issues.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/smoosh/README.md#2025-04-21_snippet_5\n\nLANGUAGE: erlang\nCODE:\n```\nsmoosh:enqueue_all_dbs(), smoosh:enqueue_all_views()\n```\n\n----------------------------------------\n\nTITLE: Collation Test Script\nDESCRIPTION: Ruby script to demonstrate CouchDB's collation sequence for ASCII characters\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/ddocs/views/collation.rst#2025-04-21_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'rubygems'\nrequire 'restclient'\nrequire 'json'\n\nDB=\"http://adm:pass@127.0.0.1:5984/collator\"\n\nRestClient.delete DB rescue nil\nRestClient.put \"#{DB}\",\"\"\n\n(32..126).each do |c|\n    RestClient.put \"#{DB}/#{c.to_s(16)}\", {\"x\"=>c.chr}.to_json\nend\n```\n\n----------------------------------------\n\nTITLE: Internal Purge Trees Structure\nDESCRIPTION: Defines the structure of two internal purge trees used to track historical purges in the database for replication between nodes and secondary indexes.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/cluster/purging.rst#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\npurge_tree: UUID -> {PurgeSeq, DocId, Revs}\\npurge_seq_tree: PurgeSeq -> {UUID, DocId, Revs}\n```\n\n----------------------------------------\n\nTITLE: Implementing Validity Check for Weatherreport in Erlang\nDESCRIPTION: Defines the valid/0 function which checks if the local cluster node can be connected to, a prerequisite for this particular check.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/weatherreport/how_to_add_a_check.md#2025-04-21_snippet_2\n\nLANGUAGE: erlang\nCODE:\n```\n-spec valid() -> boolean().\nvalid() ->\n    weatherreport_node:can_connect().\n```\n\n----------------------------------------\n\nTITLE: Configuring Zone Attribute for Node Placement\nDESCRIPTION: Example of zone attribute configuration in node document for controlling database placement across cluster nodes.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/cluster/databases.rst#2025-04-21_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n\"zone\": \"metro-dc-a\"\n```\n\n----------------------------------------\n\nTITLE: Setting Worker Batch Size in CouchDB\nDESCRIPTION: Defines the batch size for replication workers, affecting checkpoint frequency and RAM usage.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/config/replicator.rst#2025-04-21_snippet_5\n\nLANGUAGE: ini\nCODE:\n```\n[replicator]\nworker_batch_size = 500\n```\n\n----------------------------------------\n\nTITLE: Response from List Function in CouchDB\nDESCRIPTION: HTTP response from a list function execution, returning a comma-separated list of view result keys (in this case, ingredients).\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/ddoc/render.rst#2025-04-21_snippet_7\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200 OK\nContent-Type: text/plain; charset=utf-8\nDate: Wed, 21 Aug 2013 12:49:15 GMT\nEtag: \"D52L2M1TKQYDD1Y8MEYJR8C84\"\nServer: CouchDB (Erlang/OTP)\nTransfer-Encoding: chunked\nVary: Accept\n\nmeatballs, spaghetti, tomato sauce\n```\n\n----------------------------------------\n\nTITLE: Setting Scanner Batch Item Limit\nDESCRIPTION: Configures the maximum number of documents to gather in a batch before processing through both JavaScript engines.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/config/quickjs.rst#2025-04-21_snippet_5\n\nLANGUAGE: ini\nCODE:\n```\n[couch_quickjs_scanner_plugin]\nmax_batch_items = 100\n```\n\n----------------------------------------\n\nTITLE: ReStructuredText Documentation Structure for CouchDB Installation\nDESCRIPTION: ReStructuredText markup defining the structure of the CouchDB installation documentation, including license header and table of contents tree.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/install/index.rst#2025-04-21_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n.. use this file except in compliance with the License. You may obtain a copy of\n.. the License at\n..\n..   http://www.apache.org/licenses/LICENSE-2.0\n..\n.. Unless required by applicable law or agreed to in writing, software\n.. distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n.. WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n.. License for the specific language governing permissions and limitations under\n.. the License.\n\n.. _install:\n\n============\nInstallation\n============\n\n.. toctree::\n    :maxdepth: 2\n\n    unix\n    windows\n    mac\n    freebsd\n    docker\n    snap\n    kubernetes\n    search\n    nouveau\n    upgrading\n    troubleshooting\n```\n\n----------------------------------------\n\nTITLE: Configuring Source Shard Close Timeout\nDESCRIPTION: Sets the timeout duration in seconds to wait for source shard to close before operations.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/config/resharding.rst#2025-04-21_snippet_6\n\nLANGUAGE: ini\nCODE:\n```\n[reshard]\nsource_close_timeout_sec = 600\n```\n\n----------------------------------------\n\nTITLE: Setting Scanner Repeat Behavior\nDESCRIPTION: Configures when the scanner plugin should repeat its execution, defaulting to node restart.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/config/quickjs.rst#2025-04-21_snippet_8\n\nLANGUAGE: ini\nCODE:\n```\n[couch_quickjs_scanner_plugin]\nrepeat = restart\n```\n\n----------------------------------------\n\nTITLE: Callback Module Data Provider Implementation in Erlang\nDESCRIPTION: Example of a callback module data provider that dynamically constructs data. Used for cases where data needs to be generated at runtime.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/couch_epi/README.md#2025-04-21_snippet_2\n\nLANGUAGE: erlang\nCODE:\n```\n-export([data/0]).\ndata() ->\n    config:get(\"dreyfus\").\n```\n\n----------------------------------------\n\nTITLE: Overriding Default JavaScript Query Server in CouchDB\nDESCRIPTION: Demonstrates how to override the default JavaScript query server in CouchDB, allowing customization of options like stack size.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/whatsnew/2.3.rst#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport COUCHDB_QUERY_SERVER_JAVASCRIPT=\"/path/to/couchjs /path/to/main.js -S <STACKSIZE>\"\ncouchdb\n```\n\n----------------------------------------\n\nTITLE: Starting CouchDB Service on FreeBSD\nDESCRIPTION: Command to start the CouchDB service using FreeBSD's service management system.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/install/freebsd.rst#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nservice couchdb3 start\n```\n\n----------------------------------------\n\nTITLE: CouchDB Replication Log Notifications\nDESCRIPTION: This text log snippet records replication process notifications from CouchDB. It includes the replication ID, worker processes, connection count, and socket options. Observing these logs helps in monitoring and debugging replication activities.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/replication/replicator.rst#2025-04-21_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n[notice] 2017-04-05T17:16:19.646716Z node1@127.0.0.1 <0.29432.0> -------- Replication \"a81a78e822837e66df423d54279c15fe+continuous+create_target\" is using:\n    4 worker processes\n    a worker batch size of 500\n    20 HTTP connections\n    a connection timeout of 30000 milliseconds\n    10 retries per request\n    socket options are: [{keepalive,true},{nodelay,false}]\n[notice] 2017-04-05T17:16:19.646759Z node1@127.0.0.1 <0.29432.0> -------- Document \"my_rep\" triggered replication \"a81a78e822837e66df423d54279c15fe+continuous+create_target\"\n```\n\n----------------------------------------\n\nTITLE: Expected Output from Erlang Dependency Tests\nDESCRIPTION: Example of the expected output when testing CouchDB dependencies in the Erlang shell. This helps to validate that the tests are passing correctly.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/install/troubleshooting.rst#2025-04-21_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nErlang/OTP 17 [erts-6.2] [source] [64-bit] [smp:2:2] [async-threads:10] [kernel-poll:false]\n\nEshell V6.2  (abort with ^G)\n1> crypto:md5_init().\n<<1,35,69,103,137,171,205,239,254,220,186,152,118,84,50,\n  16,0,0,0,0,0,0,0,0,0,0,0,0,0,...>>\n2> snappy:compress(\"gogogogogogogogogogogogogogo\").\n{ok,<<28,4,103,111,102,2,0>>}\n3> jiffy:decode(jiffy:encode(<<\"[1,2,3,4,5]\">>)).\n<<\"[1,2,3,4,5]\">>\n4> q().\n```\n\n----------------------------------------\n\nTITLE: UTC ID UUID Generation Example in CouchDB\nDESCRIPTION: Example output of UTC-based UUID generation with custom suffix appended.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/config/misc.rst#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"uuids\": [\n        \"04dd32bd5eabcc@mycouch\",\n        \"04dd32bd5eabee@mycouch\",\n        \"04dd32bd5eac05@mycouch\",\n        \"04dd32bd5eac28@mycouch\",\n        \"04dd32bd5eac43@mycouch\",\n        \"04dd32bd5eac58@mycouch\",\n        \"04dd32bd5eac6e@mycouch\",\n        \"04dd32bd5eac84@mycouch\",\n        \"04dd32bd5eac98@mycouch\",\n        \"04dd32bd5eacad@mycouch\"\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Auto-Upgrading Password Hash\nDESCRIPTION: This snippet shows how to disable the automatic upgrading of password hashes during authentication. Setting `upgrade_hash_on_auth` to `false` prevents the upgrade.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/whatsnew/3.4.rst#2025-04-21_snippet_2\n\nLANGUAGE: None\nCODE:\n```\n\t\t[chttpd_auth] upgrade_hash_on_auth`` config setting to\n\t\t``false``.\n```\n\n----------------------------------------\n\nTITLE: Listing and Viewing Snap Information\nDESCRIPTION: Commands to view all installed snap packages and to get detailed information about the CouchDB snap package, including available channels and versions.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/install/snap.rst#2025-04-21_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\n$ snap list\n$ snap info couchdb\n```\n\n----------------------------------------\n\nTITLE: Starting CouchDB Console Output\nDESCRIPTION: The console output displayed when Apache CouchDB starts up, illustrating the system's 'relax' philosophy.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/intro/why.rst#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nApache CouchDB has started. Time to relax.\n```\n\n----------------------------------------\n\nTITLE: Failed Replication Log Request\nDESCRIPTION: HTTP GET request for a non-existent replication log showing 404 response.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/replication/protocol.rst#2025-04-21_snippet_11\n\nLANGUAGE: http\nCODE:\n```\nGET /source/_local/b6cef528f67aa1a8a014dd1144b10e09 HTTP/1.1\nAccept: application/json\nHost: localhost:5984\nUser-Agent: CouchDB\n```\n\n----------------------------------------\n\nTITLE: Enabling Nouveau in CouchDB Configuration\nDESCRIPTION: Configuration snippet for enabling the Nouveau full-text search service in CouchDB's configuration files.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/install/nouveau.rst#2025-04-21_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[nouveau]\nenable = true\n```\n\n----------------------------------------\n\nTITLE: Result of Testing Keyword Analyzer\nDESCRIPTION: This JavaScript object shows the expected result from testing the keyword analyzer with the text \"ablanks@renovations.com\". The `tokens` array contains the original text as a single token, as the keyword analyzer treats the entire input as a single term.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/ddocs/search.rst#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"tokens\": [\n        \"ablanks@renovations.com\"\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Running Code Analysis\nDESCRIPTION: Commands for running dialyzer static code analysis on CouchDB, with options for analyzing specific apps\nSOURCE: https://github.com/apache/couchdb/blob/main/README-DEV.rst#2025-04-21_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\nmake dialyze\n\nmake dialyze apps=couch,couch_epi\n```\n\n----------------------------------------\n\nTITLE: Checking purged_infos_limit with GET request in CouchDB\nDESCRIPTION: Example HTTP request for retrieving the current purged_infos_limit setting from a CouchDB database. This setting determines the maximum number of historical purges that can be stored.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/database/misc.rst#2025-04-21_snippet_4\n\nLANGUAGE: http\nCODE:\n```\nGET /db/_purged_infos_limit HTTP/1.1\nAccept: application/json\nHost: localhost:5984\n```\n\n----------------------------------------\n\nTITLE: Generic Guard Clause Example\nDESCRIPTION: This example of a generic guard clause checks for the existence of a data field in a CouchDB document before attempting to index it, ensuring that indexing operations do not cause errors due to missing data.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/ddocs/search.rst#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nif (typeof(doc.min_length) !== 'undefined') {\n    // The field exists, and does have a type, so we can proceed to index using it.\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Storing JSON Arrays in FoundationDB\nDESCRIPTION: Example demonstrating how array elements are stored as separate key-value pairs with integer indices\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/rfcs/004-document-storage.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"states\": [\"MA\", \"OH\", \"TX\", \"NM\", \"PA\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Merging Changes Locally with Git\nDESCRIPTION: Steps to merge feature branches into main locally using Git commands. This workflow is useful when GitHub's web interface is not sufficient.\nSOURCE: https://github.com/apache/couchdb/blob/main/CONTRIBUTING.md#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout main # or the main branch configured on github\ngit pull # get latest changes\ngit checkout feature-branch # replace name with your branch\ngit rebase main\ngit checkout main\ngit merge feature-branch # replace name with your branch\ngit push\n```\n\n----------------------------------------\n\nTITLE: Subfield and Dot Notation Selector\nDESCRIPTION: Demonstrates how to select documents using nested field notation and escaping special characters\nSOURCE: https://github.com/apache/couchdb/blob/main/src/mango/README.md#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\"location\": {\"city\": \"Omaha\"}}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\"location.city\": \"Omaha\"}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\"location\\\\.city\": \"Omaha\"}\n```\n\n----------------------------------------\n\nTITLE: Configuring Scanner Step Size\nDESCRIPTION: Sets the maximum step size for document processing, determining the sampling interval of documents.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/config/quickjs.rst#2025-04-21_snippet_4\n\nLANGUAGE: ini\nCODE:\n```\n[couch_quickjs_scanner_plugin]\nmax_step = 1000\n```\n\n----------------------------------------\n\nTITLE: Mapping couch_jobs States to Replicator States in CouchDB 4.x\nDESCRIPTION: This code snippet provides a mapping between couch_jobs states and replicator states in the new CouchDB 4.x design. It shows how the different state definitions in couch_jobs correspond to the replicator states.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/rfcs/016-fdb-replicator.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n | Replicator States| `couch_jobs` States\n | ---              | :--\n | pending          | pending\n | running          | running\n | crashing         | pending\n | completed        | finished\n | failed           | finished\n```\n\n----------------------------------------\n\nTITLE: Defining Background Index Building Behavior in Erlang\nDESCRIPTION: Defines the callback interface for CouchDB 4's background index building behavior. Includes two required callbacks: build_indices/2 for triggering asynchronous index updates, and cleanup_indices/2 for cleaning up stale indexing data.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/rfcs/015-background-index-building.md#2025-04-21_snippet_0\n\nLANGUAGE: erlang\nCODE:\n```\n-callback build_indices(Db :: map(), DDocs :: list(#doc{})) ->\n    [{ok, JobId::binary()} | {error, any()}].\n\n-callback cleanup_indices(Db :: map(), DDocs :: list(#doc{})) ->\n    [ok | {error, any()}].\n```\n\n----------------------------------------\n\nTITLE: Configuring JavaScript Engine\nDESCRIPTION: This snippet demonstrates how to configure the JavaScript engine used by CouchDB. It allows switching between SpiderMonkey and QuickJS.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/whatsnew/3.4.rst#2025-04-21_snippet_0\n\nLANGUAGE: None\nCODE:\n```\n\t\t./configure --dev --js-engine=quickjs\n```\n\n----------------------------------------\n\nTITLE: URL Rewrite Command Example - CouchDB Protocol\nDESCRIPTION: Example of a URL rewrite command with request details and server response showing path/query modifications or direct response.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/query-server/protocol.rst#2025-04-21_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n[\n    \"ddoc\",\n    \"_design/id\",\n    [\"rewrites\"],\n    [\n        {\n            \"method\": \"POST\",\n            \"requested_path\": [\n                \"test\",\n                \"_design\",\n                \"1139\",\n                \"_update\",\n                \"nothing\"\n            ],\n            \"path\": [\n                \"test\",\n                \"_design\",\n                \"1139\",\n                \"_update\",\n                \"nothing\"\n            ],\n            \"raw_path\": \"/test/_design/1139/_update/nothing\",\n            \"query\": {},\n            \"headers\": {\n                \"Accept\": \"*/*\",\n                \"Accept-Encoding\": \"identity, gzip, deflate, compress\",\n                \"Content-Length\": \"0\",\n                \"Host\": \"localhost:5984\"\n            },\n            \"body\": \"\",\n            \"peer\": \"127.0.0.1\",\n            \"cookie\": {},\n            \"userCtx\": {\n                \"db\": \"test\",\n                \"name\": null,\n                \"roles\": [\n                    \"_admin\"\n                ]\n            },\n            \"secObj\": {}\n        }\n    ]\n]\n```\n\n----------------------------------------\n\nTITLE: Invalid Purge Document Warning Log\nDESCRIPTION: Warning message format displayed when an invalid purge document is detected in the database.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/cluster/purging.rst#2025-04-21_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n\"Invalid purge doc '<<\"_design/bar\">>' on database\\n<<\"shards/00000000-1fffffff/testdb12.1491979089\">>\\nwith purge_seq '50'\"\n```\n\n----------------------------------------\n\nTITLE: Configuring File Log Write Buffer Size in CouchDB\nDESCRIPTION: Sets the size of the file log write buffer in bytes for delayed log writes when using the 'file' writer.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/config/logging.rst#2025-04-21_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[log]\nwrite_buffer = 0\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies on macOS using Homebrew\nDESCRIPTION: Commands to install required and optional dependencies for CouchDB development on macOS using Homebrew.\nSOURCE: https://github.com/apache/couchdb/blob/main/README-DEV.rst#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nbrew install help2man gnupg md5sha1sum node python\n```\n\nLANGUAGE: bash\nCODE:\n```\nsudo easy_install pip\n```\n\nLANGUAGE: bash\nCODE:\n```\nsudo pip install sphinx docutils pygments sphinx_rtd_theme\n```\n\n----------------------------------------\n\nTITLE: Configuring TLS Distribution Settings in couch_dist.conf\nDESCRIPTION: Configuration file defining TLS settings for both server and client nodes, including certificate paths and verification settings.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/cluster/tls_erlang_distribution.rst#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n[{server,\n  [{cacertfile, \"</absolute_path/to/ca-cert.pem>\"}, \n   {certfile,   \"</absolute_path/to/erlserver.pem>\"}, \n   {secure_renegotiate, true}, \n   {verify, verify_peer}, \n   {fail_if_no_peer_cert, true}]}, \n {client,\n  [{cacertfile, \"</absolute_path/to/ca-cert.pem>\"}, \n   {keyfile,    \"</absolute_path/to/key.pem>\"}, \n   {certfile,   \"</absolute_path/to/cert.pem>\"}, \n   {secure_renegotiate, true}, \n   {verify, verify_peer}]}].\n```\n\n----------------------------------------\n\nTITLE: Installing CouchDB Snap Package\nDESCRIPTION: Command to install the CouchDB snap package using the snap command line tool. This installs the default version from the snap repository.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/install/snap.rst#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ sudo snap install couchdb\n```\n\n----------------------------------------\n\nTITLE: Set Reshard State JSON Request\nDESCRIPTION: Example JSON request body for the PUT /_reshard/state endpoint, used to start or stop global rebalancing.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/rfcs/002-shard-splitting.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"state\": \"stopped\",\n    \"reason\": \"Manual rebalancing\"\n}\n```\n\n----------------------------------------\n\nTITLE: CouchDB Port Already in Use Error\nDESCRIPTION: Error message that appears when the default CouchDB port (5984) is already in use by another process. The solution is to edit the configuration file to use a different port.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/install/troubleshooting.rst#2025-04-21_snippet_6\n\nLANGUAGE: text\nCODE:\n```\nFailure to start Mochiweb: eaddrinuse\n```\n\n----------------------------------------\n\nTITLE: Updating Local Repository with Upstream Changes for CouchDB Contribution\nDESCRIPTION: Commands to synchronize a local repository with the latest changes from the upstream main branch. This ensures contributors are working with the most recent codebase before creating new features or fixes.\nSOURCE: https://github.com/apache/couchdb/blob/main/CONTRIBUTING.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout main\ngit pull upstream main\n```\n\n----------------------------------------\n\nTITLE: Configuring VM Arguments for CouchDB Distribution\nDESCRIPTION: VM arguments configuration for enabling the custom couch distribution protocol and specifying TLS/TCP nodes\nSOURCE: https://github.com/apache/couchdb/blob/main/src/couch_dist/README.md#2025-04-21_snippet_0\n\nLANGUAGE: config\nCODE:\n```\n-proto_dist couch\n-couch_dist no_tls '\"clouseau@127.0.0.1\"'\n-ssl_dist_optfile </absolute_path/to/couch_dist.conf>\n```\n\n----------------------------------------\n\nTITLE: Starting Erlang with CouchDB Libraries\nDESCRIPTION: Command to start Erlang with the CouchDB libraries in its path, which is useful for testing if the CouchDB Erlang environment is correctly configured.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/install/troubleshooting.rst#2025-04-21_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nerl -env ERL_LIBS $ERL_LIBS:/path/to/couchdb/lib -couch_ini -s crypto\n```\n\n----------------------------------------\n\nTITLE: Ensuring Full Commit via HTTP POST (Deprecated)\nDESCRIPTION: This request uses a deprecated endpoint that was previously used to ensure all changes were committed to disk. Since CouchDB 3.0, delayed commits are no longer supported, but the endpoint is maintained for compatibility with older replicators.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/database/compact.rst#2025-04-21_snippet_4\n\nLANGUAGE: http\nCODE:\n```\nPOST /db/_ensure_full_commit HTTP/1.1\nAccept: application/json\nContent-Type: application/json\nHost: localhost:5984\n```\n\n----------------------------------------\n\nTITLE: Enabling Disk Monitoring in CouchDB\nDESCRIPTION: Controls whether the disk monitoring subsystem is active. Default setting is false.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/config/disk-monitor.rst#2025-04-21_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[disk_monitor]\nenable = false\n```\n\n----------------------------------------\n\nTITLE: Generating ExUnit Tests from JSON Spec\nDESCRIPTION: Elixir code to generate test cases from a JSON specification file. It demonstrates how to create dynamic tests based on structured data.\nSOURCE: https://github.com/apache/couchdb/blob/main/test/elixir/README.md#2025-04-21_snippet_2\n\nLANGUAGE: elixir\nCODE:\n```\ndefmodule GenerateTestsFromSpec do\n  use ExUnit.Case\n  require Record\n  Record.defrecordp :user_ctx, Record.extract(:user_ctx, from_lib: \"couch/include/couch_db.hrl\")\n  Record.defrecordp :httpd, Record.extract(:httpd, from_lib: \"couch/include/couch_db.hrl\")\n\n  {:ok, spec_bin} = File.read(\"roles.json\")\n  spec = :jiffy.decode(spec_bin, [:return_maps])\n  Enum.each spec, fn {path, path_spec} ->\n    roles = path_spec[\"roles\"]\n    @roles roles\n    @path_parts String.split(path, \"/\")\n    test \"Access with `#{inspect(roles)}` roles\" do\n      req = httpd(path_parts: @path_parts, user_ctx: user_ctx(roles: @roles))\n      :chttpd_auth_request.authorize_request(req)\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Local Purge Checkpoint Document Example\nDESCRIPTION: Example of a local checkpoint purge document that tracks the last purge_seq processed by an index or replication job.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/cluster/purging.rst#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \"_id\": \"_local/purge-mrview-86cacdfbaf6968d4ebbc324dd3723fe7\",\\n  \"type\": \"mrview\",\\n  \"purge_seq\": 10,\\n  \"updated_on\": 1540541874,\\n  \"ddoc_id\": \"_design/foo\",\\n  \"signature\": \"5d10247925f826ae3e00966ec24b7bf6\"\\n}\n```\n\n----------------------------------------\n\nTITLE: SpiderMonkey 1.8.5: String.substring() Function Usage\nDESCRIPTION: Demonstrates the use of String.substring() function in SpiderMonkey 1.8.5, which is not present in later versions. Later versions use the prototype method instead.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/best-practices/jsdevel.rst#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nString.substring(\"abcd\", 1, 2)\n```\n\n----------------------------------------\n\nTITLE: Testing CouchDB Single Node Auto Setup\nDESCRIPTION: Command to run CouchDB with single node auto-configuration enabled for testing purposes.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/setup/README.md#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ndev/run --no-join -n 1 --admin a:b --config-overrides single_node=true\n```\n\n----------------------------------------\n\nTITLE: Defining Table of Contents Structure in reStructuredText for Apache CouchDB Documentation\nDESCRIPTION: Defines the top-level structure for the Apache CouchDB documentation using reStructuredText toctree directives. The document is organized into four main sections: User Guides, Administration Guides, Reference Guides, and Other content. Each section uses the toctree directive with options for caption, depth, and numbering.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/index.rst#2025-04-21_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. toctree::\n    :caption: User Guides\n    :maxdepth: 3\n    :numbered:\n\n    intro/index\n    replication/index\n    ddocs/index\n    best-practices/index\n\n.. toctree::\n    :caption: Administration Guides\n    :maxdepth: 3\n    :numbered:\n\n    install/index\n    setup/index\n    config/index\n    cluster/index\n    maintenance/index\n    fauxton/index\n    experimental\n\n.. toctree::\n    :caption: Reference Guides\n    :maxdepth: 3\n    :numbered:\n\n    api/index\n    json-structure\n    query-server/index\n    partitioned-dbs/index\n\n.. toctree::\n    :caption: Other\n    :numbered:\n\n    whatsnew/index\n    cve/index\n    License <about>\n    contributing\n```\n\n----------------------------------------\n\nTITLE: Explicit Equality Operator\nDESCRIPTION: Query using explicit $eq operator instead of implicit equality.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/ddocs/mango.rst#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"director\": {\n        \"$eq\": \"Lars von Trier\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Content Negotiation in CouchDB Rewrite Function\nDESCRIPTION: JavaScript function that handles different content types (JSON vs HTML) in request processing. Shows how to implement content negotiation based on Accept headers.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/ddoc/rewrites.rst#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction(req2) {\n  var path = req2.path.slice(4),\n    h = headers,\n    wantsJson = (h.Accept || \"\").indexOf(\"application/json\") > -1,\n    reply = {};\n  if (!wantsJson) {\n    // Here we should prepare reply object\n    // for plain HTML pages\n  } else {\n    // Pass through JSON requests\n    reply.path = \"../../../\"+path.join(\"/\");\n  }\n  return reply;\n}\n```\n\n----------------------------------------\n\nTITLE: Skip List Operations for FoundationDB\nDESCRIPTION: Implements core skip list operations including creation and insertion of key-value pairs into the FoundationDB skip list structure.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/rfcs/012-fdb-reduce.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n// SKIP LIST OPERATIONS\n\n//setup skip list and insert the initial kvs\nconst create = async () => {\n    await db.doTransaction(async tn => {\n        for(let level = 0; level <= MAX_LEVELS; level++) {\n            await insertAtLevel(tn, '0', 0, level);\n        }\n    });\n\n    log('setup done');\n    for ([key, val] of kvs) {\n        await db.doTransaction(async tn => {\n            await insert(tn, key, val);\n        });\n    }\n};\n\n// inserts a larger amount of keys, 1000 keys per transaction\nconst rawKeys = []\nconst createLots = async () => {\n    const docsPerTx = 3000;\n    console.time('total insert');\n```\n\n----------------------------------------\n\nTITLE: Running Elixir Integration Tests\nDESCRIPTION: Commands for running the Elixir-based integration tests, including the standard suite and the additional Dreyfus search tests.\nSOURCE: https://github.com/apache/couchdb/blob/main/README-DEV.rst#2025-04-21_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nmake elixir\n```\n\nLANGUAGE: bash\nCODE:\n```\nmake elixir-search\n```\n\n----------------------------------------\n\nTITLE: Configuring PBKDF2 Iterations in CouchDB INI File\nDESCRIPTION: Sets the number of PBKDF2 iterations for password hashing to 10000 in the CouchDB configuration file. This improves security but may impact performance for older CouchDB versions.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/whatsnew/2.2.rst#2025-04-21_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[couch_httpd_auth]\niterations = 10000\n```\n\n----------------------------------------\n\nTITLE: Creating Feature Branch for CouchDB Contribution\nDESCRIPTION: Command to create a new topic branch for developing a feature, change, or fix. This isolates changes from the main development branch until they're ready to be reviewed and merged.\nSOURCE: https://github.com/apache/couchdb/blob/main/CONTRIBUTING.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout -b <topic-branch-name>\n```\n\n----------------------------------------\n\nTITLE: Specifying Log File Path in CouchDB Configuration\nDESCRIPTION: Sets the file path for CouchDB log output when using the 'file' writer. The path should be readable and writable by the CouchDB service user.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/config/logging.rst#2025-04-21_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[log]\nfile = /var/log/couchdb/couch.log\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies on FreeBSD\nDESCRIPTION: Commands to install required and optional dependencies for CouchDB development on FreeBSD systems.\nSOURCE: https://github.com/apache/couchdb/blob/main/README-DEV.rst#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npkg install help2man gnupg py27-sphinx node\npip install nose requests hypothesis\n```\n\n----------------------------------------\n\nTITLE: FoundationDB Operations for Skip List\nDESCRIPTION: Implements various FoundationDB operations used in the skip list, including clearing ranges, getting and setting values, and performing range queries.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/rfcs/012-fdb-reduce.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// FDB OPERATIONS\n\n// clear full range\nconst clear = async () => {\n    await db.doTransaction(async tn => {\n        tn.clearRangeStartsWith([]);\n    });\n}\n\n// get value for key at level\nconst getVal = async (tn, key, level) => {\n    return  await tn.get([level, key]);\n}\n\n// add kv to level\nconst insertAtLevel = async (tn, key, value, level) => {\n    log('inserting', level, key, ':', value);\n    return await tn.set([level, key], value);\n};\n\n// get all kvs within start/end, exclusive of end key\nconst getRange = async (tn, start, end, level) => {\n    const kvs = await tn.getRangeAll([level, start], [level, end]);\n\n    return kvs.map(([[_level, key], value]) => {\n        return {\n            key,\n            value\n        };\n    });\n};\n\n// get all kvs within start/end, inclusive of end\nconst getRangeInclusive = async (tn, start, end, level) => {\n    const kvs = await tn.getRangeAll(\n        ks.firstGreaterOrEqual([level, start]), \n        ks.firstGreaterThan([level, end])\n        );\n\n    return kvs.map(([[_level, key], value]) => {\n        return {\n            key,\n            value\n        };\n    });\n}\n\n// return kv in common format\nconst getKV = (item) => {\n    const [key, value] = item.value;\n    return {\n        key: key[1],\n        value: value\n    };\n}\n\n// Get key after supplied key\nconst getNext = async (tn, key, level) => {\n    const iter = await tn.snapshot().getRange(\n        ks.firstGreaterThan([level, key]),\n        [level, END],\n        {limit: 1}\n    )\n\n    const item = await iter.next();\n    if (item.done) {\n        return {\n            key: END,\n            value: 0\n        };\n    }\n\n    const kv = getKV(item);\n    tn.addReadConflictKey([level, kv.key]);\n    return kv;\n};\n\n// Get key after supplied key but doesn't look further than endkey\nconst getKeyAfter = async (tn, key, level, endkey) => {\n    const _endkey = endkey ? endkey : END;\n    const iter = await tn.getRange(\n        ks.firstGreaterThan([level, key]),\n        ks.firstGreaterThan([level, _endkey]),\n        {limit: 1}\n    )\n    \n    const item = await iter.next();\n    if (item.done) {\n        return null;\n    }\n\n    return getKV(item);\n};\n\n// get kv before supplied key\nconst getPrevious = async (tn, key, level) => {\n    const iter = await tn.snapshot().getRange(\n        ks.lastLessThan([level, key]),\n        ks.firstGreaterOrEqual([level, key]),\n        {limit: 1}\n    )\n\n    const item = await iter.next();\n    const kv = getKV(item);\n    tn.addReadConflictKey([level, kv.key]);\n    return kv;\n};\n\n// Get key at level or first one after key\nconst getKeyOrNearest = async (tn, key, level, endkey) => {\n    const _endkey = endkey ? endkey : END;\n    const iter = await tn.getRange(\n        ks.firstGreaterOrEqual([level, key]),\n        ks.firstGreaterThan([level, _endkey]),\n        {limit: 1}\n    )\n    \n    const item = await iter.next();\n    if (item.done) {\n        return null;\n    }\n\n    return getKV(item);\n};\n\n// Gets the final key in the set group level\nconst getGroupLevelEndKey = async (tn, groupLevel, level, startkey) => {\n    const groupLevelKey = getGroupLevelKey(startkey, groupLevel);\n    const end = groupLevelKey === null ? END : [...groupLevelKey, END];\n    const iter = await tn.getRange(\n        ks.firstGreaterThan([level, groupLevelKey]),\n        ks.firstGreaterOrEqual([level, end]),\n        {reverse: true, limit: 1}\n    )\n    \n    //TODO: add a conflict key\n    const item = await iter.next();\n    if (item.done) {\n        return null;\n    }\n\n    return getKV(item);\n};\n\n// Returns key for level or the first one before it\nconst getKeyOrFirstBefore = async (tn, key, level) => {\n    const iter = await tn.getRange(\n        ks.lastLessThan([level, key]),\n        ks.firstGreaterThan([level, key]),\n        {limit: 1, reverse: true}\n    )\n    \n    //TODO: add a conflict key\n    const item = await iter.next();\n    if (item.done) {\n        return null;\n    }\n\n    return getKV(item);\n};\n```\n\n----------------------------------------\n\nTITLE: Running the Nouveau Java Server\nDESCRIPTION: Command to start the Nouveau server by running the Java JAR file with a configuration file.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/install/nouveau.rst#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\njava -jar /path/to/nouveau.jar server /path/to/nouveau.yaml\n```\n\n----------------------------------------\n\nTITLE: CouchDB Replication Process Flowchart (Text)\nDESCRIPTION: ASCII art flowchart representing the CouchDB replication process. It outlines steps such as locating changed documents, fetching and processing them, handling attachments, and updating the target database.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/replication/protocol.rst#2025-04-21_snippet_19\n\nLANGUAGE: text\nCODE:\n```\n+ - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - +\n' Locate Changed Documents:                                                       '\n'                                                                                 '\n'               +-------------------------------------+                           '\n'               |      Any Differences Found?         |                           '\n'               +-------------------------------------+                           '\n'                                                   |                             '\n'                                                   |                             '\n'                                                   |                             '\n+ - - - - - - - - - - - - - - - - - - - - - - - - - | - - - - - - - - - - - - - - +\n                                                    |\n+ - - - - - - - - - - - - - - - - - - - - - - - - - | - - - - - - - - - - - - - - +\n' Replicate Changes:                                |                             '\n'                                                   v                             '\n'               +-------------------------------------+                           '\n'   +---------> |     Fetch Next Changed Document     | <---------------------+   '\n'   |           +-------------------------------------+                       |   '\n'   |           |          GET /source/docid          |                       |   '\n'   |           +-------------------------------------+                       |   '\n'   |             |                                                           |   '\n'   |             |                                                           |   '\n'   |             |                                          201 Created      |   '\n'   |             | 200 OK                                   401 Unauthorized |   '\n'   |             |                                          403 Forbidden    |   '\n'   |             |                                                           |   '\n'   |             v                                                           |   '\n'   |           +-------------------------------------+                       |   '\n'   |   +------ |  Document Has Changed Attachments?  |                       |   '\n'   |   |       +-------------------------------------+                       |   '\n'   |   |         |                                                           |   '\n'   |   |         |                                                           |   '\n'   |   |         | Yes                                                       |   '\n'   |   |         |                                                           |   '\n'   |   |         v                                                           |   '\n'   |   |       +------------------------+   Yes    +---------------------------+ '\n'   |   | No    |  Are They Big Enough?  | -------> | Update Document on Target | '\n'   |   |       +------------------------+          +---------------------------+ '\n'   |   |         |                                 |     PUT /target/docid     | '\n'   |   |         |                                 +---------------------------+ '\n'   |   |         |                                                               '\n'   |   |         | No                                                            '\n'   |   |         |                                                               '\n'   |   |         v                                                               '\n'   |   |       +-------------------------------------+                           '\n'   |   +-----> |     Put Document Into the Stack     |                           '\n'   |           +-------------------------------------+                           '\n'   |             |                                                               '\n'   |             |                                                               '\n'   |             v                                                               '\n'   |     No    +-------------------------------------+                           '\n'   +---------- |           Stack is Full?            |                           '\n'   |           +-------------------------------------+                           '\n'   |             |                                                               '\n'   |             | Yes                                                           '\n'   |             |                                                               '\n'   |             v                                                               '\n'   |           +-------------------------------------+                           '\n'   |           | Upload Stack of Documents to Target |                           '\n'   |           +-------------------------------------+                           '\n'   |           |       POST /target/_bulk_docs       |                           '\n'   |           +-------------------------------------+                           '\n'   |             |                                                               '\n'   |             | 201 Created                                                   '\n'   |             v                                                               '\n'   |           +-------------------------------------+                           '\n'   |           |          Ensure in Commit           |                           '\n'   |           +-------------------------------------+                           '\n'   |           |  POST /target/_ensure_full_commit   |                           '\n'   |           +-------------------------------------+                           '\n'   |             |                                                               '\n'   |             | 201 Created                                                   '\n'   |             v                                                               '\n'   |           +-------------------------------------+                           '\n'   |           |    Record Replication Checkpoint    |                           '\n'   |           +-------------------------------------+                           '\n'   |           |  PUT /source/_local/replication-id  |                           '\n'   |           |  PUT /target/_local/replication-id  |                           '\n'   |           +-------------------------------------+                           '\n'   |             |                                                               '\n'   |             | 201 Created                                                   '\n'   |             v                                                               '\n'   |     No    +-------------------------------------+                           '\n'   +---------- | All Documents from Batch Processed? |                           '\n```\n\n----------------------------------------\n\nTITLE: Disabling SELinux Command\nDESCRIPTION: Command to temporarily disable SELinux enforcement, which can help resolve access issues when SELinux is blocking CouchDB from accessing needed resources.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/install/troubleshooting.rst#2025-04-21_snippet_9\n\nLANGUAGE: text\nCODE:\n```\nsetenforce 0\n```\n\n----------------------------------------\n\nTITLE: Installing Command Line Tools on macOS\nDESCRIPTION: Command to install the Command Line Tools on macOS, which are required for building software from source. This installs the necessary build tools without requiring the full Xcode IDE.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/install/unix.rst#2025-04-21_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nxcode-select --install\n```\n\n----------------------------------------\n\nTITLE: Building CouchDB Release\nDESCRIPTION: Command to build a CouchDB release after configuration. This compiles the code and packages it for installation.\nSOURCE: https://github.com/apache/couchdb/blob/main/INSTALL.Unix.md#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nmake release\n```\n\n----------------------------------------\n\nTITLE: Testing Generator Function Syntax in JavaScript\nDESCRIPTION: This snippet attempts to create a generator function with a 'yield' identifier, which should throw a SyntaxError but doesn't.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/couch_quickjs/quickjs/test262_errors.txt#2025-04-21_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction* yield() { 'use strict'; (yield 3) + (yield 4); }\n```\n\n----------------------------------------\n\nTITLE: Running WeatherReport with Debug Level Logging in Bash\nDESCRIPTION: Shows how to run WeatherReport with a more verbose logging level (debug) to get detailed information about the diagnostic process.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/cluster/troubleshooting.rst#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ weatherreport --etc /path/to/etc --level debug\n[debug] Not connected to the local cluster node, trying to connect. alive:false connect_failed:undefined\n[debug] Starting distributed Erlang.\n[debug] Connected to local cluster node 'node1@127.0.0.1'.\n[debug] Local RPC: mem3:nodes([]) [5000]\n[debug] Local RPC: os:getpid([]) [5000]\n[debug] Running shell command: ps -o pmem,rss -p 73905\n[debug] Shell command output:\n%MEM    RSS\n0.3  25116\n\n[debug] Local RPC: erlang:nodes([]) [5000]\n[debug] Local RPC: mem3:nodes([]) [5000]\n[warning] Cluster member node3@127.0.0.1 is not connected to this node. Please check whether it is down.\n[info] Process is using 0.3% of available RAM, totalling 25116 KB of real memory.\n```\n\n----------------------------------------\n\nTITLE: Changing Database Channels Configuration in Erlang\nDESCRIPTION: This snippet demonstrates how to change the set of database channels for Smoosh using the config:set function in Erlang. It sets the 'db_channels' option to a comma-separated list of channel names.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/smoosh/README.md#2025-04-21_snippet_0\n\nLANGUAGE: erlang\nCODE:\n```\nconfig:set(\"smoosh\", \"db_channels\", \"small_dbs,medium_dbs,large_dbs\").\n```\n\n----------------------------------------\n\nTITLE: OS Process Error - SpiderMonkey Installation Issue\nDESCRIPTION: Error message that appears when the SpiderMonkey JavaScript VM installation is incorrect, causing CouchDB to fail when executing JavaScript functions.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/install/troubleshooting.rst#2025-04-21_snippet_7\n\nLANGUAGE: text\nCODE:\n```\nâ€¦ OS Process Error â€¦ {os_process_error,{exit_status,127}}\n```\n\n----------------------------------------\n\nTITLE: Initializing FoundationDB Skip List in JavaScript\nDESCRIPTION: Sets up the FoundationDB environment, defines constants, and initializes the database connection with specific encodings.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/rfcs/012-fdb-reduce.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst assert = require('assert');\nconst util = require('util');\nconst fdb = require('foundationdb');\nconst ks = require('foundationdb').keySelector;\n\n// CONSTANTS\nconst SHOULD_LOG = false;\nconst PREFIX = 'skiplist';\nconst MAX_LEVELS = 6;\nconst LEVEL_FAN_POW = 1; // 2^X per level or (1 / 2^X) less than previous level\nconst END = 0xFF;\n\nfdb.setAPIVersion(600); // Must be called before database is opened\nconst db = fdb.openSync()\n  .at(PREFIX) // database prefix for all operations\n  .withKeyEncoding(fdb.encoders.tuple)\n  .withValueEncoding(fdb.encoders.json); // automatically encode & decode values using JSON\n```\n\n----------------------------------------\n\nTITLE: Including SASL Information in CouchDB Logs\nDESCRIPTION: Enables the inclusion of SASL (Simple Authentication and Security Layer) information in CouchDB logs.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/config/logging.rst#2025-04-21_snippet_5\n\nLANGUAGE: ini\nCODE:\n```\n[log]\ninclude_sasl = true\n```\n\n----------------------------------------\n\nTITLE: Resetting CouchDB Instances for Testing\nDESCRIPTION: Commands to reset CouchDB instances between test runs by removing development libraries and logs.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/setup/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nrm -rf dev/lib/ dev/logs/\ndev/run --no-join -n 2 --admin a:b\n```\n\n----------------------------------------\n\nTITLE: Setting Syslog Port for CouchDB Logging\nDESCRIPTION: Configures the syslog port to connect to when sending logs using the 'syslog' writer.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/config/logging.rst#2025-04-21_snippet_7\n\nLANGUAGE: ini\nCODE:\n```\n[log]\nsyslog_port = 514\n```\n\n----------------------------------------\n\nTITLE: Uniformly Decaying Job Priorities in Erlang\nDESCRIPTION: This code snippet shows how to uniformly decay the priorities of all pending and running jobs in the system. This process helps prevent job starvation by periodically boosting the priority of all jobs.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/rfcs/017-fair-share-scheduling.md#2025-04-21_snippet_1\n\nLANGUAGE: erlang\nCODE:\n```\nDecayCoeff = get_uniform_decay_coefficient(0.75),\nJob#job.priority = Job#job.priority * DecayCoeff\n```\n\n----------------------------------------\n\nTITLE: Example of Hex-Encoded Username for Database Name\nDESCRIPTION: This example illustrates how a specific username 'bob' is transformed into a hex-encoded database name.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/couch_peruser/README.md#2025-04-21_snippet_1\n\nLANGUAGE: erlang\nCODE:\n```\nuserdb-626f62\n```\n\n----------------------------------------\n\nTITLE: Configuring CORS for a Specific Virtual Host\nDESCRIPTION: Example of configuring CORS options for a specific virtual host (example.com). This allows different CORS settings for different domains pointing to the same CouchDB instance.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/config/http.rst#2025-04-21_snippet_20\n\nLANGUAGE: ini\nCODE:\n```\n[cors:example.com]\ncredentials = false\n; List of origins separated by a comma\norigins = *\n; List of accepted headers separated by a comma\nheaders = X-CouchDB-Header\n; List of accepted methods\nmethods = HEAD, GET\n```\n\n----------------------------------------\n\nTITLE: CouchDB Configuration Commands\nDESCRIPTION: Commands for configuring CouchDB source code build, including options for Clouseau integration and disabling Fauxton or documentation builds.\nSOURCE: https://github.com/apache/couchdb/blob/main/README-DEV.rst#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n./configure\n```\n\nLANGUAGE: bash\nCODE:\n```\n./configure --with-clouseau\n```\n\n----------------------------------------\n\nTITLE: Testing CouchDB Cluster Setup Module\nDESCRIPTION: Instructions for cloning, configuring, and running CouchDB for testing the cluster setup module.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/setup/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://git-wip-us.apache.org/repos/asf/couchdb.git\ncd couchdb\ngit checkout setup\n./configure\nmake\ndev/run --no-join -n 2 --admin a:b\n```\n\n----------------------------------------\n\nTITLE: Response from /_cluster_setup Status Check\nDESCRIPTION: Response showing the current cluster setup state.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/server/common.rst#2025-04-21_snippet_7\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200 OK\nX-CouchDB-Body-Time: 0\nX-Couch-Request-ID: 5c058bdd37\nServer: CouchDB/2.1.0-7f17678 (Erlang OTP/17)\nDate: Sun, 30 Jul 2017 06:33:18 GMT\nContent-Type: application/json\nContent-Length: 29\nCache-Control: must-revalidate\n\n{\"state\":\"cluster_enabled\"}\n```\n\n----------------------------------------\n\nTITLE: Setting Scanner Document Limit\nDESCRIPTION: Defines the maximum number of documents to be processed per database and sent to design doc functions.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/config/quickjs.rst#2025-04-21_snippet_3\n\nLANGUAGE: ini\nCODE:\n```\n[couch_quickjs_scanner_plugin]\nmax_docs = 1000\n```\n\n----------------------------------------\n\nTITLE: CouchDB Maximum Tracked Objects Configuration\nDESCRIPTION: Configuration setting for the maximum number of username+IP pairs to track for lockout purposes.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/config/auth.rst#2025-04-21_snippet_12\n\nLANGUAGE: ini\nCODE:\n```\n[chttpd_auth_lockout]\nmax_objects = 10000\n```\n\n----------------------------------------\n\nTITLE: Client Disconnection Check Jitter Configuration\nDESCRIPTION: Configuration for random jitter in client disconnect checking to prevent concurrent client stampede.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/config/http.rst#2025-04-21_snippet_7\n\nLANGUAGE: ini\nCODE:\n```\n[chttpd]\ndisconnect_check_jitter_msec = 15000\n```\n\n----------------------------------------\n\nTITLE: Setting LD_LIBRARY_PATH for CouchDB as Normal User\nDESCRIPTION: Command to set the LD_LIBRARY_PATH environment variable when running CouchDB as a normal user, ensuring that CouchDB can find its dependent libraries.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/install/troubleshooting.rst#2025-04-21_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nLD_LIBRARY_PATH=/usr/local/lib:/usr/local/spidermonkey/lib couchdb\n```\n\n----------------------------------------\n\nTITLE: Utilizing xxHash 128-bit Hash API in Erlang\nDESCRIPTION: This Erlang function `exxhash:xxhash128(Binary)` implements the basic 128-bit hash API of the xxHash algorithm for fast, non-cryptographic hashing. Dependencies include the vendored `xxHash` code hosted initially at 'https://cyan4973.github.io/xxHash/'. The snippet is designed to process binary inputs and generate a corresponding 128-bit hash output. The implementation is constrained to use the two source files `c_src/xxhash.h` and `c_src/xxhash.c` from the original xxHash library.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/exxhash/README.md#2025-04-21_snippet_0\n\nLANGUAGE: erlang\nCODE:\n```\nexxhash:xxhash128(Binary)\n```\n\n----------------------------------------\n\nTITLE: Skip List Traversal Algorithm Implementation\nDESCRIPTION: Main traversal algorithm for the skip list that efficiently scans through data at various levels. It collates and reduces results as it traverses, optimizing for performance by using higher levels when possible.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/rfcs/012-fdb-reduce.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nconst traverse = async (tn, level, prevLevel, current, endkey, groupLevel, acc) => {\n    if (level < 0) {\n        throw new Error(\"gone to low\");\n    }\n    const [rangeLevel, rangeStart, rangeEnd] = await getNextRangeAndLevel(tn, groupLevel, level, current, endkey);\n    log('traversing, level', rangeLevel, 'start', rangeStart, 'end', rangeEnd);\n\n    // simple stats to keep track of which levels are used the most\n    stats[rangeLevel].push([rangeStart.key, rangeEnd.key]);\n    const results = await getRangeInclusive(tn, rangeStart.key, rangeEnd.key, rangeLevel);\n    log('RESULTS', results, 'start', rangeStart.key, 'end', rangeEnd.key);\n    // test with rangeEnd always next startkey\n    let nextStartKey = results[results.length - 1];\n    let keyAfterStart = await getKeyAfter(tn, nextStartKey.key, rangeLevel, endkey.key);\n    log('checking', nextStartKey, keyAfterStart, groupLevelEqual(nextStartKey, keyAfterStart, groupLevel));\n\n    const useableResults = results.slice(0, results.length -1);\n    acc = [...acc, ...useableResults];\n    if (rangeLevel === 0 && !groupLevelEqual(nextStartKey, keyAfterStart, groupLevel)) {\n        acc.push(nextStartKey);\n        log('collating and reducing', acc);\n        const reducedResults = collateRereduce(acc, groupLevel);\n        acc = reducedResults;\n        nextStartKey = await getKeyAfter(tn, nextStartKey.key, rangeLevel, endkey.key);\n        //should stream results for a common group at this point\n    }\n\n    // Reached the end of the query, return results\n    if ((keysEqual(rangeEnd, endkey) || nextStartKey === null) && rangeLevel === 0) {\n        return acc;\n    }\n\n    log('moving next traversal', rangeLevel, 'newStart', nextStartKey, acc);\n    return traverse(tn, 0, rangeLevel, nextStartKey, endkey, groupLevel, acc);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring and Building CouchDB on Windows\nDESCRIPTION: Commands to configure and build CouchDB using PowerShell and make. The first command bypasses execution policy restrictions to run the configuration script, while the second command builds CouchDB and runs eunit and javascript tests.\nSOURCE: https://github.com/apache/couchdb/blob/main/INSTALL.Windows.md#2025-04-21_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\npowershell -ExecutionPolicy Bypass .\\configure.ps1\n```\n\nLANGUAGE: powershell\nCODE:\n```\nmake -f Makefile.win check\n```\n\n----------------------------------------\n\nTITLE: Building CouchDB Release Packages\nDESCRIPTION: Commands for building CouchDB distribution tarball and standalone Erlang release\nSOURCE: https://github.com/apache/couchdb/blob/main/README-DEV.rst#2025-04-21_snippet_16\n\nLANGUAGE: shell\nCODE:\n```\nmake dist\n\nmake release\n```\n\n----------------------------------------\n\nTITLE: CouchDB Success Response\nDESCRIPTION: Standard success response format when operations complete successfully.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/intro/api.rst#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n{\"ok\":true}\n```\n\n----------------------------------------\n\nTITLE: Specifying View Index Directory in CouchDB\nDESCRIPTION: Sets the location for CouchDB view index files. This directory should be writable and readable by the CouchDB service user.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/config/couchdb.rst#2025-04-21_snippet_13\n\nLANGUAGE: ini\nCODE:\n```\n[couchdb]\nview_index_dir = /var/lib/couchdb\n```\n\n----------------------------------------\n\nTITLE: Setting Endpoint Protocol Logging in CouchDB\nDESCRIPTION: Controls logging of insecure HTTP protocol usage in replications.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/config/replicator.rst#2025-04-21_snippet_15\n\nLANGUAGE: ini\nCODE:\n```\n[replicator]\nvalid_endpoint_protocols_log = true\n```\n\n----------------------------------------\n\nTITLE: Implementing Description Function for Weatherreport Check in Erlang\nDESCRIPTION: Defines the description/0 function which returns a concise description of the check for inclusion in command line output.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/weatherreport/how_to_add_a_check.md#2025-04-21_snippet_1\n\nLANGUAGE: erlang\nCODE:\n```\n-spec description() -> string().\ndescription() ->\n    \"Measure memory usage\".\n```\n\n----------------------------------------\n\nTITLE: Configuring Parallel pread in CouchDB\nDESCRIPTION: Configuration option to enable or disable parallel pread calls in CouchDB. This feature improves concurrent read performance without blocking writes.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/whatsnew/3.5.rst#2025-04-21_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[couchdb]\nuse_cfile = false\n```\n\n----------------------------------------\n\nTITLE: Getting Revision Limit in CouchDB\nDESCRIPTION: HTTP GET request to retrieve the current revision limit setting for a database. This limit determines how many historical revisions are stored per document.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/database/misc.rst#2025-04-21_snippet_9\n\nLANGUAGE: http\nCODE:\n```\nGET /db/_revs_limit HTTP/1.1\nAccept: application/json\nHost: localhost:5984\n```\n\n----------------------------------------\n\nTITLE: Running Specific WeatherReport Diagnostic Check in Bash\nDESCRIPTION: Demonstrates how to run a single specific diagnostic check (nodes_connected) using WeatherReport.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/cluster/troubleshooting.rst#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ weatherreport --etc /path/to/etc nodes_connected\n[warning] Cluster member node3@127.0.0.1 is not connected to this node. Please check whether it is down.\n```\n\n----------------------------------------\n\nTITLE: Setting Shard Map Update Timeout\nDESCRIPTION: Configures the timeout duration in seconds for shard map update operations.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/config/resharding.rst#2025-04-21_snippet_5\n\nLANGUAGE: ini\nCODE:\n```\n[reshard]\nupdate_shard_map_timeout_sec = 60\n```\n\n----------------------------------------\n\nTITLE: Defining Table of Contents in reStructuredText for CouchDB Best Practices\nDESCRIPTION: This RST code snippet defines the table of contents for the CouchDB Best Practices guide. It specifies the maximum depth of the table and lists the topics covered in the guide.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/best-practices/index.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n    :maxdepth: 2\n\n    documents\n    forms\n    iso-date\n    jsdevel\n    views\n    reverse-proxies\n```\n\n----------------------------------------\n\nTITLE: Configuring CouchDB Node Name in vm.args\nDESCRIPTION: Example of setting the CouchDB node name in the vm.args configuration file. This is important when upgrading from 2.x to 2.1.1 to ensure database access.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/whatsnew/2.1.rst#2025-04-21_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n-name couchdb@localhost\n```\n\n----------------------------------------\n\nTITLE: Configuring Per-User Database Sharding\nDESCRIPTION: Configuration setting for specifying the sharding value for per-user databases.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/config/couch-peruser.rst#2025-04-21_snippet_3\n\nLANGUAGE: ini\nCODE:\n```\n[couch_peruser]\nq = 1\n```\n\n----------------------------------------\n\nTITLE: Displaying WeatherReport Help Information in Bash\nDESCRIPTION: Shows how to access the help information for the weatherreport command, which lists available options and their descriptions.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/cluster/troubleshooting.rst#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ weatherreport --help\nUsage: weatherreport [-c <path>] [-d <level>] [-e] [-h] [-l] [check_name ...]\n\n  -c, --etc                 Path to the CouchDB configuration directory\n  -d, --level               Minimum message severity level (default: notice)\n  -l, --list                Describe available diagnostic tasks\n  -e, --expert              Perform more detailed diagnostics\n  -h, --help                Display help/usage\n  check_name                A specific check to run\n```\n\n----------------------------------------\n\nTITLE: Setting QuickJS Memory Limit\nDESCRIPTION: Configuration to set the memory limit for QuickJS engine in bytes. If undefined, defaults to 64MB.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/config/quickjs.rst#2025-04-21_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[quickjs]\nmemory_limit_bytes = 67108864\n```\n\n----------------------------------------\n\nTITLE: Installing GNU Make on FreeBSD\nDESCRIPTION: Command to install GNU Make on FreeBSD. FreeBSD requires GNU Make (gmake) instead of the system's make command for building Apache CouchDB from source.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/install/unix.rst#2025-04-21_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\npkg install gmake\n```\n\n----------------------------------------\n\nTITLE: UTC Random UUID Generation Example in CouchDB\nDESCRIPTION: Example output of UTC-based random UUID generation with microsecond precision timestamps.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/config/misc.rst#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"uuids\": [\n        \"04dd32b3af699659b6db9486a9c58c62\",\n        \"04dd32b3af69bb1c2ac7ebfee0a50d88\",\n        \"04dd32b3af69d8591b99a8e86a76e0fb\",\n        \"04dd32b3af69f4a18a76efd89867f4f4\",\n        \"04dd32b3af6a1f7925001274bbfde952\",\n        \"04dd32b3af6a3fe8ea9b120ed906a57f\",\n        \"04dd32b3af6a5b5c518809d3d4b76654\",\n        \"04dd32b3af6a78f6ab32f1e928593c73\",\n        \"04dd32b3af6a99916c665d6bbf857475\",\n        \"04dd32b3af6ab558dd3f2c0afacb7d66\"\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying WeatherReport Help Information in Bash\nDESCRIPTION: Shows the output of running WeatherReport with the --help option, listing all available command-line options and their descriptions.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/weatherreport/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nweatherreport --help\nUsage: weatherreport [-c <path>] [-d <level>] [-e] [-h] [-l] [check_name ...]\n\n  -c, --etc\t\tPath to the CouchDB configuration directory\n  -d, --level\t\tMinimum message severity level (default: notice)\n  -l, --list\t\tDescribe available diagnostic tasks\n  -e, --expert\t\tPerform more detailed diagnostics\n  -h, --help\t\tDisplay help/usage\n  check_name\t\tA specific check to run\n```\n\n----------------------------------------\n\nTITLE: Implementing Data Providers in Erlang for couch_epi\nDESCRIPTION: Example of registering configuration data providers for a service using the couch_epi_plugin behaviour. Shows different methods of data provision including file-based, static module, and callback module approaches.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/couch_epi/README.md#2025-04-21_snippet_0\n\nLANGUAGE: erlang\nCODE:\n```\ndata_providers() ->\n    [\n        {{couch_stats, descriptions},\n            {priv_file, \"stats_descriptions.cfg\"}, [{interval, 5000}]},\n        {{couch_stats, descriptions},\n            {file, \"/tmp/extra_stats.cfg\"}, [{interval, 5000}]},\n        {{couch_stats, descriptions}, {static_module, my_stats}},\n        {{couch_stats, descriptions}, {callback_module, my_stats}}\n    ].\n```\n\n----------------------------------------\n\nTITLE: SpiderMonkey 1.8.5: Invalid JavaScript Before Function Definition\nDESCRIPTION: Shows how SpiderMonkey 1.8.5 allows invalid syntax before a function definition, while later versions throw a compilation error. This affects view definitions in CouchDB.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/best-practices/jsdevel.rst#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n\"views\": {\n            \"v1\": {\n                 \"map\": \"foo : function(doc){emit(doc._id, 1);}\"\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Running CouchDB from Built Release\nDESCRIPTION: Commands to navigate to the built release directory and run CouchDB, part of the troubleshooting process to test a fresh build.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/install/troubleshooting.rst#2025-04-21_snippet_12\n\nLANGUAGE: text\nCODE:\n```\ncd rel/couchdb\nbin/couchdb\n```\n\n----------------------------------------\n\nTITLE: Setting CouchDB Configuration File Permissions\nDESCRIPTION: Command to set the correct permissions on CouchDB configuration files, making them readable but not writable by unauthorized users.\nSOURCE: https://github.com/apache/couchdb/blob/main/INSTALL.Unix.md#2025-04-21_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nchmod 0644 /opt/couchdb/etc/*\n```\n\n----------------------------------------\n\nTITLE: CouchDB Configuration File Format Example\nDESCRIPTION: Example of CouchDB configuration file syntax showing section definition, parameter specification, and commenting.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/config/intro.rst#2025-04-21_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n; This is a comment\n[section]\nparam = value ; inline comments are allowed\n```\n\n----------------------------------------\n\nTITLE: Configuring UUID Generation Rate Limit in CouchDB\nDESCRIPTION: Adds the max_count option to the [uuids] configuration section to rate-limit the number of UUIDs that can be requested from the /_uuids API endpoint in a single request. This addresses CVE-2014-2668.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/whatsnew/1.6.rst#2025-04-21_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[uuids]\nmax_count = 1000\n```\n\n----------------------------------------\n\nTITLE: Configuring Document State Updates in CouchDB\nDESCRIPTION: Controls whether the replicator updates replication documents with error and triggered states, similar to pre-2.1 behavior.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/config/replicator.rst#2025-04-21_snippet_4\n\nLANGUAGE: ini\nCODE:\n```\n[replicator]\nupdate_docs = false\n```\n\n----------------------------------------\n\nTITLE: Defining Mango Index Structure in JSON\nDESCRIPTION: Basic structure for defining a Mango index with field specifications and optional partial filter selector.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/rfcs/006-mango-fdb.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"view-name\",\n  \"index\": {\n    \"fields\": [\"fieldA\", \"fieldB\"]\n  },\n  \"partial_filter_selector\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding CouchDB Initialization Files\nDESCRIPTION: This snippet details how to override the `-args_file`, `-config`, and `-couch_ini` parameters using the `COUCHDB_INI_FILES` environment variable on UNIX-based systems. This feature enhances configuration flexibility.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/whatsnew/3.0.rst#2025-04-21_snippet_7\n\nLANGUAGE: N/A\nCODE:\n```\n* :ghissue:`2293`, :ghissue:`1095`: The ``-args_file``, ``-config`` and ``-couch_ini``\n  parameters may now be overridden via the ``COUCHDB_INI_FILES`` environment variable\n  on UNIX-based systems.\n\n```\n\n----------------------------------------\n\nTITLE: Random UUID Generation Example in CouchDB\nDESCRIPTION: Example output of random UUID generation algorithm showing 128-bit random values.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/config/misc.rst#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"uuids\": [\n        \"5fcbbf2cb171b1d5c3bc6df3d4affb32\",\n        \"9115e0942372a87a977f1caf30b2ac29\",\n        \"3840b51b0b81b46cab99384d5cd106e3\",\n        \"b848dbdeb422164babf2705ac18173e1\",\n        \"b7a8566af7e0fc02404bb676b47c3bf7\",\n        \"a006879afdcae324d70e925c420c860d\",\n        \"5f7716ee487cc4083545d4ca02cd45d4\",\n        \"35fdd1c8346c22ccc43cc45cd632e6d6\",\n        \"97bbdb4a1c7166682dc026e1ac97a64c\",\n        \"eb242b506a6ae330bda6969bb2677079\"\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Running Ken Tests in CouchDB\nDESCRIPTION: Command to run isolated Ken tests using rebar within the CouchDB project. This command should be executed from the root directory of the CouchDB repository.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/ken/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nrebar eunit apps=ken verbose=1\n```\n\n----------------------------------------\n\nTITLE: Running Elixir Test Suite for CouchDB\nDESCRIPTION: Commands to run the Elixir test suite for CouchDB. It includes installing dependencies and running tests with mix.\nSOURCE: https://github.com/apache/couchdb/blob/main/test/elixir/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmix deps.get\nmix test --trace\n```\n\n----------------------------------------\n\nTITLE: JWT Authentication Request\nDESCRIPTION: HTTP request example for JWT authentication using Bearer token\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/server/authn.rst#2025-04-21_snippet_8\n\nLANGUAGE: http\nCODE:\n```\nGET /_session HTTP/1.1\nHost: localhost:5984\nAccept: application/json\nContent-Type: application/json; charset=utf-8\nAuthorization: Bearer <JWT token>\n```\n\n----------------------------------------\n\nTITLE: Setting Node Parameter Requirement for Resharding\nDESCRIPTION: Controls whether the node parameter is required when creating new resharding jobs.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/config/resharding.rst#2025-04-21_snippet_7\n\nLANGUAGE: ini\nCODE:\n```\n[reshard]\nrequire_node_param = false\n```\n\n----------------------------------------\n\nTITLE: Initiating Index Update\nDESCRIPTION: Checks and triggers index updates by comparing current sequence with minimum required sequence, invoking the index updater\nSOURCE: https://github.com/apache/couchdb/blob/main/src/dreyfus/README.md#2025-04-21_snippet_3\n\nLANGUAGE: Erlang\nCODE:\n```\ndreyfus_index:await(Pid, MinSeq)\n```\n\n----------------------------------------\n\nTITLE: CouchDB Range Facet Query Examples\nDESCRIPTION: Examples of using range facets to get counts of documents falling within specified numeric ranges.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/ddocs/search.rst#2025-04-21_snippet_25\n\nLANGUAGE: text\nCODE:\n```\n?q=*:*&ranges={\"price\":{\"cheap\":\"[0 TO 100]\",\"expensive\":\"{100 TO Infinity}\"}}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"total_rows\":100000,\n    \"bookmark\":\"g...\",\n    \"rows\":[...],\n    \"ranges\": {\n        \"price\": {\n            \"expensive\": 278682,\n            \"cheap\": 257023\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: FreeBSD rc.conf Service Configuration\nDESCRIPTION: Configuration options for CouchDB service in rc.conf, including service enablement, user settings, and runtime parameters.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/install/freebsd.rst#2025-04-21_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\ncouchdb3_enable=\"NO\"\ncouchdb3_user=\"couchdb\"\ncouchdb3_erl_flags=\"-couch_ini /usr/local/libexec/couchdb3/etc/default.ini /usr/local/etc/couchdb3/local.ini\"\ncouchdb3_chdir=\"/var/db/couchdb3\"\n```\n\n----------------------------------------\n\nTITLE: Caddy 2 Authentication Configuration\nDESCRIPTION: Caddy 2 configuration with basic authentication for CouchDB access through a subdirectory.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/best-practices/reverse-proxies.rst#2025-04-21_snippet_9\n\nLANGUAGE: text\nCODE:\n```\ndomain.com {\n\n    basicauth /couchdb/* {\n        couch_username couchdb_hashed_password_base64\n    }\n\n    reverse_proxy /couchdb/* localhost:5984\n\n}\n```\n\n----------------------------------------\n\nTITLE: Purge Checkpoint Warning Log\nDESCRIPTION: Warning message format displayed when a purge checkpoint hasn't been updated within the configured time limit.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/cluster/purging.rst#2025-04-21_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nPurge checkpoint '_local/purge-mrview-9152d15c12011288629bcffba7693fd4'\\nnot updated in 86400 seconds in\\n<<\"shards/00000000-1fffffff/testdb12.1491979089\">>\n```\n\n----------------------------------------\n\nTITLE: Listing Available WeatherReport Diagnostic Checks in Bash\nDESCRIPTION: Demonstrates the use of the --list option to display all available diagnostic checks that WeatherReport can perform on a CouchDB installation.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/weatherreport/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nweatherreport --list\nAvailable diagnostic checks:\n\n  custodian            Shard safety/liveness checks\n  disk                 Data directory permissions and atime\n  internal_replication Check the number of pending internal replication jobs\n  ioq                  Check the total number of active IOQ requests\n  mem3_sync            Check there is a registered mem3_sync process\n  membership           Cluster membership validity\n  memory_use           Measure memory usage\n  message_queues       Check for processes with large mailboxes\n  node_stats           Check useful erlang statistics for diagnostics\n  nodes_connected      Cluster node liveness\n  process_calls        Check for large numbers of processes with the same current/initial call\n  process_memory       Check for processes with high memory usage\n  safe_to_rebuild      Check whether the node can safely be taken out of service\n  search               Check the local search node is responsive\n  tcp_queues           Measure the length of tcp queues in the kernel\n```\n\n----------------------------------------\n\nTITLE: OpenTracing HTTP Header Format\nDESCRIPTION: Example of the 'b3' HTTP header format used for propagating tracing context in OpenTracing. It includes TraceId, SpanId, SamplingState, and ParentSpanId.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/rfcs/011-opentracing.md#2025-04-21_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nb3 : {TraceId}-{SpanId}-{SamplingState}-{ParentSpanId}\n```\n\n----------------------------------------\n\nTITLE: Cloning CouchDB Repository\nDESCRIPTION: Commands for cloning the forked CouchDB repository and navigating to the documentation directory.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/contributing.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ git clone https://github.com/username/couchdb.git\n$ cd couchdb/src/docs\n$ subl .\n```\n\n----------------------------------------\n\nTITLE: Creating a Mango Query with Regular Expression in CouchDB\nDESCRIPTION: Example of creating a Mango query using a regular expression selector. This query attempts to match documents where a field 'afieldname' begins with the letter 'A'. Note that this query triggers a warning as it cannot use an index efficiently.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/ddocs/mango.rst#2025-04-21_snippet_19\n\nLANGUAGE: http\nCODE:\n```\nPOST /movies/_find HTTP/1.1\nAccept: application/json\nContent-Type: application/json\nContent-Length: 112\nHost: localhost:5984\n\n{\n    \"selector\": {\n        \"afieldname\": {\"$regex\": \"^A\"}\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding Query Server Environment Variables\nDESCRIPTION: This snippet describes the ability to override the `COUCHDB_QUERY_SERVER_JAVASCRIPT` and `COUCHDB_QUERY_SERVER_COFFEESCRIPT` environment variables. This enables customization of the query server environment without modifying core startup scripts.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/whatsnew/3.0.rst#2025-04-21_snippet_6\n\nLANGUAGE: N/A\nCODE:\n```\n* :ghissue:`2393`, :ghissue:`2143`: It is now possible to override the query server\n  environment variables ``COUCHDB_QUERY_SERVER_JAVASCRIPT`` and\n  ``COUCHDB_QUERY_SERVER_COFFEESCRIPT`` without overwriting the\n  ``couchdb``/``couchdb.cmd`` startup scripts.\n\n```\n\n----------------------------------------\n\nTITLE: Enabling LRU Cache Updates on Read in CouchDB INI File\nDESCRIPTION: Configures CouchDB to update the least recently used (LRU) cache of databases on read operations, restoring the previous behavior prior to 2.2.0.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/whatsnew/2.2.rst#2025-04-21_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[couchdb]\nupdate_lru_on_read = true\n```\n\n----------------------------------------\n\nTITLE: Remote Shell Connection Commands\nDESCRIPTION: Commands for connecting to remote shell using either TCP or TLS connection methods.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/cluster/tls_erlang_distribution.rst#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ ./remsh\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ ./remsh -t </absolute_path/to/couch_dist.conf>\n```\n\n----------------------------------------\n\nTITLE: Undefined Function Call in weatherreport_check_ioq.erl\nDESCRIPTION: This code snippet shows a warning within `weatherreport_check_ioq.erl` at line 95, column 1. It indicates that the function `weatherreport_check_ioq:check_legacy_int/1` calls the undefined function `ioq:get_disk_queues/0`. This implies a dependency issue where `weatherreport_check_ioq` relies on `ioq` but cannot find the specified function.\nSOURCE: https://github.com/apache/couchdb/blob/main/test/fixtures/allowed-xref.txt#2025-04-21_snippet_1\n\nLANGUAGE: erlang\nCODE:\n```\n\"src/weatherreport_check_ioq.erl:{95,1}: Warning: weatherreport_check_ioq:check_legacy_int/1 calls undefined function ioq:get_disk_queues/0 (Xref)\"\n```\n\n----------------------------------------\n\nTITLE: Calculating Sequence Numbers for Indexing\nDESCRIPTION: Function to calculate the last sequence number and minimum sequence for index updates, determining whether an index needs to be refreshed based on database changes\nSOURCE: https://github.com/apache/couchdb/blob/main/src/dreyfus/README.md#2025-04-21_snippet_0\n\nLANGUAGE: Erlang\nCODE:\n```\n{_LastSeq, MinSeq} = calculate_seqs(Db, Stale)\n```\n\n----------------------------------------\n\nTITLE: Configuring JWT Auth Roles Claim in Erlang\nDESCRIPTION: Sets the JWT auth roles claim name in the CouchDB configuration. This allows customizing which JWT claim is used to specify user roles.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/whatsnew/3.2.rst#2025-04-21_snippet_0\n\nLANGUAGE: erlang\nCODE:\n```\n[jwt_auth]\nroles_claim_name = custom_roles_claim\n```\n\n----------------------------------------\n\nTITLE: Successful Security Update Response in CouchDB (JavaScript)\nDESCRIPTION: This JSON response indicates that the security update for the database was successful. It's a simple confirmation from CouchDB after modifying the _security document.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/intro/security.rst#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n{\"ok\":true}\n```\n\n----------------------------------------\n\nTITLE: Listing Available WeatherReport Diagnostic Checks in Bash\nDESCRIPTION: Demonstrates how to list all available diagnostic checks that WeatherReport can perform using the --list option.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/cluster/troubleshooting.rst#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ weatherreport --list\nAvailable diagnostic checks:\n\n  custodian            Shard safety/liveness checks\n  disk                 Data directory permissions and atime\n  internal_replication Check the number of pending internal replication jobs\n  ioq                  Check the total number of active IOQ requests\n  mem3_sync            Check there is a registered mem3_sync process\n  membership           Cluster membership validity\n  memory_use           Measure memory usage\n  message_queues       Check for processes with large mailboxes\n  node_stats           Check useful erlang statistics for diagnostics\n  nodes_connected      Cluster node liveness\n  process_calls        Check for large numbers of processes with the same current/initial call\n  process_memory       Check for processes with high memory usage\n  safe_to_rebuild      Check whether the node can safely be taken out of service\n  search               Check the local search node is responsive\n  tcp_queues           Measure the length of tcp queues in the kernel\n```\n\n----------------------------------------\n\nTITLE: Running Mango Tests with Custom Clouseau Directory\nDESCRIPTION: Command for running mango tests with a specified Clouseau directory\nSOURCE: https://github.com/apache/couchdb/blob/main/README-DEV.rst#2025-04-21_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\nmake mango-test CLOUSEAU_DIR=$HOME/git/clouseau.wip\n```\n\n----------------------------------------\n\nTITLE: Using EUNIT_OPTS for Erlang Tests\nDESCRIPTION: Example of using the EUNIT_OPTS variable to pass specific options to the rebar eunit command for Erlang tests.\nSOURCE: https://github.com/apache/couchdb/blob/main/README-DEV.rst#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nmake eunit EUNIT_OPTS=\"apps=couch,chttpd\"\n```\n\n----------------------------------------\n\nTITLE: Response to Database Compaction Request\nDESCRIPTION: The server response confirms that the database compaction request has been accepted. It returns a 202 Accepted status with a JSON object indicating successful operation initiation.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/database/compact.rst#2025-04-21_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 202 Accepted\nCache-Control: must-revalidate\nContent-Length: 12\nContent-Type: application/json\nDate: Mon, 12 Aug 2013 09:27:43 GMT\nServer: CouchDB (Erlang/OTP)\n\n{\n    \"ok\": true\n}\n```\n\n----------------------------------------\n\nTITLE: CouchDB Shard File Structure Example\nDESCRIPTION: Shows the typical directory structure for CouchDB database shard files in a q=8 configuration.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/cluster/sharding.rst#2025-04-21_snippet_5\n\nLANGUAGE: text\nCODE:\n```\ndata/shards/00000000-1fffffff/abc.1529362187.couch\ndata/shards/20000000-3fffffff/abc.1529362187.couch\ndata/shards/40000000-5fffffff/abc.1529362187.couch\ndata/shards/60000000-7fffffff/abc.1529362187.couch\ndata/shards/80000000-9fffffff/abc.1529362187.couch\ndata/shards/a0000000-bfffffff/abc.1529362187.couch\ndata/shards/c0000000-dfffffff/abc.1529362187.couch\ndata/shards/e0000000-ffffffff/abc.1529362187.couch\n```\n\n----------------------------------------\n\nTITLE: Defining Key-Value Structure for Winning Edit Branch\nDESCRIPTION: Specification of the key-value format for the winning edit branch, which includes revision format, sequence, branch count and parent revisions.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/rfcs/001-fdb-revision-metadata-model.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n(\"revisions\", DocID, NotDeleted, RevPosition, RevHash) = (RevFormat, Sequence, BranchCount, [ParentRev, GrandparentRev, â€¦])\n```\n\n----------------------------------------\n\nTITLE: ReStructuredText Configuration Index\nDESCRIPTION: ReStructuredText markup defining the configuration documentation structure and table of contents for CouchDB configuration topics. Includes Apache 2.0 license header and toctree directive listing all configuration sections.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/config/index.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n.. use this file except in compliance with the License. You may obtain a copy of\n.. the License at\n..\n..   http://www.apache.org/licenses/LICENSE-2.0\n..\n.. Unless required by applicable law or agreed to in writing, software\n.. distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n.. WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n.. License for the specific language governing permissions and limitations under\n.. the License.\n\n.. _config:\n\n=============\nConfiguration\n=============\n\n.. toctree::\n    :maxdepth: 2\n\n    intro\n    couchdb\n    cluster\n    couch-peruser\n    disk-monitor\n    scanner\n    quickjs\n    http\n    auth\n    compaction\n    indexbuilds\n    ioq\n    logging\n    replicator\n    query-servers\n    misc\n    resharding\n```\n\n----------------------------------------\n\nTITLE: Installing CouchDB using FreeBSD Package Manager\nDESCRIPTION: Command to install CouchDB 3.x using the pkg package manager on FreeBSD.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/install/freebsd.rst#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npkg install couchdb3\n```\n\n----------------------------------------\n\nTITLE: Generating Bad Request Error Response in CouchDB\nDESCRIPTION: This snippet shows the JSON structure for a bad request error response in CouchDB. It includes the error type and a human-readable reason for the error.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/replication/protocol.rst#2025-04-21_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"error\": \"bad_request\",\n    \"reason\": \"invalid json\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Key-Value Structure for Other Edit Branches\nDESCRIPTION: Specification of the key-value format for non-winning edit branches, omitting sequence and branch count information.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/rfcs/001-fdb-revision-metadata-model.md#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n(\"revisions\", DocID, NotDeleted, RevPosition, RevHash) = (RevFormat, [ParentRev, GrandparentRev, â€¦])\n```\n\n----------------------------------------\n\nTITLE: Running WeatherReport Basic Diagnostic in Bash\nDESCRIPTION: Demonstrates the basic usage of the WeatherReport script to diagnose CouchDB issues, specifying the path to the CouchDB configuration directory.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/weatherreport/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ ./weatherreport --etc /path/to/etc\n[warning] Cluster member node3@127.0.0.1 is not connected to this node. Please check whether it is down.\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies on Gentoo-based Systems\nDESCRIPTION: Command to install required and optional dependencies for CouchDB development on Gentoo-based systems.\nSOURCE: https://github.com/apache/couchdb/blob/main/README-DEV.rst#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo emerge gnupg coreutils pkgconfig help2man sphinx python\nsudo pip install hypothesis requests nose\n```\n\n----------------------------------------\n\nTITLE: Updating Branch with Latest Upstream Changes\nDESCRIPTION: Command for rebasing a feature branch on the latest upstream main branch. This helps avoid merge conflicts by incorporating recent changes from the main branch into the feature branch.\nSOURCE: https://github.com/apache/couchdb/blob/main/CONTRIBUTING.md#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ngit pull --rebase upstream main\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies on CentOS 7 and RHEL 7\nDESCRIPTION: Command to install required and optional dependencies for CouchDB development on CentOS 7 and RHEL 7 systems.\nSOURCE: https://github.com/apache/couchdb/blob/main/README-DEV.rst#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsudo yum install help2man python-sphinx python-docutils \\\n    python-pygments gnupg nodejs npm\n```\n\n----------------------------------------\n\nTITLE: Implementing Weatherreport Check Module in Erlang\nDESCRIPTION: Defines the structure of a weatherreport check module, including required exports and function implementations. This snippet shows the module declaration, behavior specification, and function exports.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/weatherreport/how_to_add_a_check.md#2025-04-21_snippet_0\n\nLANGUAGE: erlang\nCODE:\n```\n-module(weatherreport_check_memory_use).\n-behaviour(weatherreport_check).\n\n-export([description/0,\n         valid/0,\n         check/0,\n         format/1]).\n```\n\n----------------------------------------\n\nTITLE: ReStructuredText Document Structure for CouchDB Views Guide\nDESCRIPTION: Document structure for CouchDB Views guide using ReStructuredText format, including license header and table of contents.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/ddocs/views/index.rst#2025-04-21_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n.. use this file except in compliance with the License. You may obtain a copy of\n.. the License at\n..\n..   http://www.apache.org/licenses/LICENSE-2.0\n..\n.. Unless required by applicable law or agreed to in writing, software\n.. distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n.. WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n.. License for the specific language governing permissions and limitations under\n.. the License.\n\n.. _views:\n\n==============\nGuide to Views\n==============\n\nViews are the primary tool used for querying and reporting on CouchDB documents.\nThere you'll learn how they work and how to use them to build effective\napplications with CouchDB.\n\n.. toctree::\n\n    intro\n    collation\n    joins\n    nosql\n    pagination\n```\n\n----------------------------------------\n\nTITLE: Empty Response for Matching Revisions in CouchDB Replication (HTTP)\nDESCRIPTION: HTTP response indicating that all requested revisions match the current state of the documents on the target database. The response body is an empty JSON object.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/replication/protocol.rst#2025-04-21_snippet_17\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200 OK\nCache-Control: must-revalidate\nContent-Length: 2\nContent-Type: application/json\nDate: Fri, 25 Oct 2013 14:45:00 GMT\nServer: CouchDB (Erlang/OTP)\n\n{}\n```\n\n----------------------------------------\n\nTITLE: Configuring Syslog Facility for CouchDB Logging\nDESCRIPTION: Specifies the syslog facility to use with the 'syslog' writer for CouchDB logging.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/config/logging.rst#2025-04-21_snippet_9\n\nLANGUAGE: ini\nCODE:\n```\n[log]\nsyslog_facility = local2\n```\n\n----------------------------------------\n\nTITLE: TLS Distribution Configuration File\nDESCRIPTION: Configuration file specifying TLS security options for both server and client sides, including certificate paths and verification settings\nSOURCE: https://github.com/apache/couchdb/blob/main/src/couch_dist/README.md#2025-04-21_snippet_1\n\nLANGUAGE: config\nCODE:\n```\n[\n  {server, [\n    {cacertfile, \"</absolute_path/to/ca-cert.pem>\"}, \n    {certfile,   \"</absolute_path/to/erlserver.pem>\"}, \n    {secure_renegotiate, true}, \n    {verify, verify_peer}, \n    {fail_if_no_peer_cert, true}\n  ]},\n  {client, [\n    {cacertfile, \"</absolute_path/to/ca-cert.pem>\"}, \n    {certfile,   \"</absolute_path/to/cert.pem>\"}, \n    {keyfile,    \"</absolute_path/to/key.pem>\"}, \n    {secure_renegotiate, true}, \n    {verify, verify_peer}\n  ]}\n].\n```\n\n----------------------------------------\n\nTITLE: Problematic Reduce Function without Return\nDESCRIPTION: JavaScript reduce function that will cause errors because it doesn't return a value, leading to an undefined return value that cannot be encoded as JSON.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/install/troubleshooting.rst#2025-04-21_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nfunction(key, values) {\n  sum(values);\n}\n```\n\n----------------------------------------\n\nTITLE: Silent Install of CouchDB without Service with Admin Credentials\nDESCRIPTION: Command to perform a silent installation of CouchDB without running as a service, but with an admin user and password. Uses the msiexec utility with /quiet flag to suppress UI.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/install/windows.rst#2025-04-21_snippet_0\n\nLANGUAGE: batch\nCODE:\n```\nmsiexec /i apache-couchdb-3.0.0.msi /quiet ADMINUSER=admin ADMINPASSWORD=hunter2 /norestart\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies on Debian-based Systems\nDESCRIPTION: Command to install required and optional dependencies for CouchDB development on Debian-based systems including Ubuntu.\nSOURCE: https://github.com/apache/couchdb/blob/main/README-DEV.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get install help2man python-sphinx gnupg nodejs npm \\\n     python3 python3-venv\n```\n\n----------------------------------------\n\nTITLE: Installing CouchDB from FreeBSD Ports\nDESCRIPTION: Commands to install CouchDB 3.x from the FreeBSD ports collection.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/install/freebsd.rst#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncd /usr/ports/databases/couchdb3\nmake install clean\n```\n\n----------------------------------------\n\nTITLE: Configuring Attachment Storage in CouchDB\nDESCRIPTION: Configuration for attachment compression level and compressible MIME types.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/config/misc.rst#2025-04-21_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[attachments]\ncompression_level = 8\ncompressible_types = text/*, application/javascript, application/json, application/xml\n```\n\n----------------------------------------\n\nTITLE: Key Utility Functions for FoundationDB Skip List\nDESCRIPTION: Implements various key manipulation and comparison functions used in the skip list operations, including binary conversion, equality checks, and group level operations.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/rfcs/012-fdb-reduce.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// KEY UTIL FUNCTIONS\n\n// convert key to binary\nconst keyToBinary = (one) => {\n    let keyOne = one.key ? one.key : one;\n\n    if (!Array.isArray(keyOne)) {\n        keyOne = [keyOne];\n    }\n\n\n    return Buffer.from(keyOne);\n}\n\n// check keys are equal\nconst keysEqual = (one, two) => {\n    if (one === null || two === null) {\n        return false;\n    }\n\n    const binOne = keyToBinary(one);\n    const binTwo = keyToBinary(two);\n\n    return binOne.compare(binTwo) === 0;\n}\n\n// Are keys equal at set group level\nconst groupLevelEqual = (one, two, groupLevel) => {\n    if (one === null || two === null) {\n        return false\n    }\n    const levelOne = getGroupLevelKey(one.key, groupLevel);\n    const levelTwo = getGroupLevelKey(two.key, groupLevel);\n\n    return keysEqual(levelOne, levelTwo);\n};\n\n// is key two greater than key one?\nconst keyGreater = (one, two) => {\n    if (!one || !two) {\n        return false;\n    }\n\n    const binOne = keyToBinary(one);\n    const binTwo = keyToBinary(two);\n\n    // key two comes after\n    return binOne.compare(binTwo) === -1;\n}\n\n// convert key to group level. e.g Key = [2019,2,5] and group_level = 2\n// returns [2019, 2]\nconst getGroupLevelKey = (key, groupLevel) => {\n    if (groupLevel === 0) {\n        return null\n    }\n\n    if (!Array.isArray(key)) {\n        return key;\n    }\n\n    if (key.length <= groupLevel) {\n        return key;\n    }\n\n    return key.slice(0, groupLevel);\n};\n```\n\n----------------------------------------\n\nTITLE: Updating Authentication Handler Configuration in CouchDB\nDESCRIPTION: Updates the httpd/authentication_handlers configuration to use the new proxy_authentication_handler name instead of the deprecated proxy_authentification_handler.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/whatsnew/1.6.rst#2025-04-21_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[httpd]\nauthentication_handlers = {couch_httpd_auth, proxy_authentication_handler}\n```\n\n----------------------------------------\n\nTITLE: Disabling UUIDs Handler Configuration in CouchDB\nDESCRIPTION: Configuration snippet to disable the _uuids handler in CouchDB's local.ini file as a workaround for CVE-2014-2668. This prevents the vulnerability by completely disabling the affected endpoint.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/cve/2014-2668.rst#2025-04-21_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[httpd_global_handlers]\n_uuids =\n```\n\n----------------------------------------\n\nTITLE: Certificate Generation Commands\nDESCRIPTION: Bash commands for generating CA certificates, node certificates, and combining them into the required format using elixir-certs\nSOURCE: https://github.com/apache/couchdb/blob/main/src/couch_dist/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd src/couch_dist/certs\n\n# Generate CA certificate and key\n./certs self-signed \\\n  --out-cert ca-cert.pem --out-key ca-key.pem \\\n  --template root-ca \\\n  --subject \"/CN=CouchDB Root CA\"\n\n# Generate node certificate and key\n./certs create-cert \\\n  --issuer-cert ca-cert.pem --issuer-key ca-key.pem \\\n  --out-cert cert.pem --out-key key.pem \\\n  --template server \\\n  --subject \"/CN=127.0.0.1\"\n\n# Generate `erlserver.pem`\ncat key.pem cert.pem >erlserver.pem\n\n# Parse certificate to verify:\n# Certificate needs to match the node's hostname\n./parse_cert.escript cert.pem\n[\"127.0.0.1\"]\n```\n\n----------------------------------------\n\nTITLE: Debug Printing Function for Skip List Verification\nDESCRIPTION: Prints all keys at each level of the skip list and verifies that the sum of values at each level equals the sum at level 0. This function is used for debugging and verification purposes.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/rfcs/012-fdb-reduce.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst print = async () => {\n    let total = 0;\n    await db.doTransaction(async tn => {\n        for(let level = 0; level <= MAX_LEVELS; level++) {\n            let levelTotal = 0;\n            const levelResults = await tn.getRangeAll([level, \"0\"], [level, END]);\n            const keys = levelResults.map(([[_, key], val]) => {\n                const a = {};\n                a[key] = val;\n                if (level === 0) {\n                    total += val;\n                }\n\n                levelTotal += val;\n                return a;\n            });\n\n            log(`Level ${level}`, keys);\n            assert.equal(levelTotal, total, `Level ${level} - level total ${levelTotal} values not equal to level 0 ${total}`);\n        }\n    });\n\n    return {\n        total\n    };\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring CouchDB to use internal MD5 hash function (Erlang)\nDESCRIPTION: Enables the use of the internal Erlang MD5 hash function when not available in the external environment, using the --enable-md5 configure flag.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/whatsnew/2.2.rst#2025-04-21_snippet_7\n\nLANGUAGE: erlang\nCODE:\n```\n./configure --enable-md5\n```\n\n----------------------------------------\n\nTITLE: Enabling UDP Syslog Reception in RSyslog Configuration\nDESCRIPTION: Configuration snippet to enable UDP syslog reception in RSyslog by loading the 'imudp' module and setting up UDP input on port 514.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/config/logging.rst#2025-04-21_snippet_10\n\nLANGUAGE: ini\nCODE:\n```\n# provides UDP syslog reception\nmodule(load=\"imudp\")\ninput(type=\"imudp\" port=\"514\")\n```\n\n----------------------------------------\n\nTITLE: Setting Smoosh Channel Configuration in CouchDB\nDESCRIPTION: This snippet shows how to set a new value for a specific configuration option of a Smoosh channel in CouchDB using the CouchDB shell.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/smoosh/operator_guide.md#2025-04-21_snippet_4\n\nLANGUAGE: erlang\nCODE:\n```\n(couchdb@db1.foo.bar)2> rpc:multicall(config, set, [\"smoosh.ratio_dbs\", \"concurrency\", \"1\"]).\n{[ok,ok,ok],[]}\n```\n\n----------------------------------------\n\nTITLE: Cloning and Branching for CouchDB Committers\nDESCRIPTION: Commands for Apache CouchDB committers to clone the repository and create a branch for development. Includes options for using either GitHub or Apache's GitBox depending on preference.\nSOURCE: https://github.com/apache/couchdb/blob/main/CONTRIBUTING.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/apache/couchdb\n# or git clone https://gitbox.apache.org/repos/asf/couchdb.git\ncd couchdb\ngit checkout -b <topic-branch-name>\n```\n\n----------------------------------------\n\nTITLE: Git Commit and Push Commands\nDESCRIPTION: Git commands for committing changes to documentation and pushing to a fork.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/contributing.rst#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ > git commit -am 'document number encoding'\n[main a84b2cf] document number encoding\n1 file changed, 199 insertions(+)\n\n$ git push origin main\n```\n\n----------------------------------------\n\nTITLE: Removing CouchDB Snap Installation\nDESCRIPTION: Commands to remove the CouchDB snap installation. The first command keeps a backup for potential restoration, while the second purges all data including backups.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/install/snap.rst#2025-04-21_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\n$ sudo snap remove couchdb\n$ sudo snap remove couchdb --purge\n```\n\n----------------------------------------\n\nTITLE: Development Configuration Commands\nDESCRIPTION: Commands for running CouchDB in development mode with TLS enabled and checking node connection information\nSOURCE: https://github.com/apache/couchdb/blob/main/src/couch_dist/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n./configure --dev --spidermonkey-version 91 && make && ./dev/run -t\n./configure --dev --spidermonkey-version 91 && make && ./dev/run --enable-tls\n\n./dev/remsh-tls\n```\n\n----------------------------------------\n\nTITLE: Configuring xxHash Checksum Writing in CouchDB\nDESCRIPTION: Enables or disables writing xxHash checksums for couch_file blocks. Affects data integrity verification and version compatibility.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/config/couchdb.rst#2025-04-21_snippet_14\n\nLANGUAGE: ini\nCODE:\n```\n[couchdb]\nwrite_xxhash_checksums = false\n```\n\n----------------------------------------\n\nTITLE: Systemd Configuration for Increasing CouchDB File Limits\nDESCRIPTION: Systemd configuration to increase the limit on the number of open files for CouchDB, which is necessary when hitting system_limit errors related to file handles.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/install/troubleshooting.rst#2025-04-21_snippet_14\n\nLANGUAGE: ini\nCODE:\n```\n[Service]\nLimitNOFILE=65536\n```\n\n----------------------------------------\n\nTITLE: Git Repository State Example\nDESCRIPTION: Demonstrates the state of Git repositories across desktop and laptop with SHA1 hashes\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/replication/conflicts.rst#2025-04-21_snippet_15\n\nLANGUAGE: text\nCODE:\n```\n---------- desktop ----------           ---------- laptop ----------\nmain: AAAAAAAA                        main: AAAAAAAA\nremotes/laptop/main: AAAAAAAA         remotes/desktop/main: AAAAAAAA\n```\n\n----------------------------------------\n\nTITLE: Accessing Fauxton Visual Guide\nDESCRIPTION: URL to the Fauxton Visual Guide documentation resource.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/fauxton/install.rst#2025-04-21_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nhttp://couchdb.apache.org/fauxton-visual-guide\n```\n\n----------------------------------------\n\nTITLE: Setting Fauxton Docroot via Environment Variable\nDESCRIPTION: This snippet shows how to specify the path to the Fauxton installation using the `COUCHDB_FAUXTON_DOCROOT` environment variable. This allows users to customize the location from which Fauxton is served.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/whatsnew/3.0.rst#2025-04-21_snippet_5\n\nLANGUAGE: N/A\nCODE:\n```\n\n* :ghissue:`2034`, :ghissue:`2416`: The path to the Fauxton installation can now be\n  specified via the ``COUCHDB_FAUXTON_DOCROOT`` environment variable.\n\n```\n\n----------------------------------------\n\nTITLE: Setting CouchDB Directory Permissions\nDESCRIPTION: Command to set the correct permissions on CouchDB directories, allowing the couchdb user and group to read, write, and execute, while restricting access to others.\nSOURCE: https://github.com/apache/couchdb/blob/main/INSTALL.Unix.md#2025-04-21_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nfind /opt/couchdb -type d -exec chmod 0770 {} \\;\n```\n\n----------------------------------------\n\nTITLE: Installing CouchDB on RedHat 9+\nDESCRIPTION: Commands to install Apache CouchDB on RedHat version 9 or newer after the repository has been set up. This includes installing the required mozjs78 dependency before installing CouchDB.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/install/unix.rst#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nsudo yum install -y mozjs78\nsudo yum install -y couchdb\n```\n\n----------------------------------------\n\nTITLE: Configuring Worker Processes in CouchDB\nDESCRIPTION: Sets the number of worker processes for replication, affecting network throughput and IO operations.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/config/replicator.rst#2025-04-21_snippet_6\n\nLANGUAGE: ini\nCODE:\n```\n[replicator]\nworker_processes = 4\n```\n\n----------------------------------------\n\nTITLE: Test Directory Structure Implementation\nDESCRIPTION: Shows the proposed directory structure changes for implementing ExUnit testing framework alongside existing eunit tests\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/rfcs/009-exunit.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n<app>/test/*.erl -> <app>/test/eunit/*.erl\n<app>/test/exunit/\ntest/elixir/lib\nmix.exs\n```\n\n----------------------------------------\n\nTITLE: Running CouchDB Single Node Auto Setup Tests\nDESCRIPTION: Command to execute tests for CouchDB single node auto setup configuration.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/setup/README.md#2025-04-21_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nsrc/setup/test/t-single_node.sh\n```\n\n----------------------------------------\n\nTITLE: Running Specific Erlang Tests\nDESCRIPTION: Commands demonstrating how to run specific Erlang tests by specifying apps, suites, individual tests, or skipping certain dependencies.\nSOURCE: https://github.com/apache/couchdb/blob/main/README-DEV.rst#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n# Run tests only for couch and chttpd apps\nmake eunit apps=couch,chttpd\n\n# Run only tests from couch_btree_tests suite\nmake eunit apps=couch suites=couch_btree\n\n# Run only only specific tests\nmake eunit tests=btree_open_test,reductions_test\n\n# Ignore tests for specified apps\nmake eunit skip_deps=couch_log,couch_epi\n```\n\n----------------------------------------\n\nTITLE: Enabling CouchDB Cluster via HTTP Request\nDESCRIPTION: JSON payload for enabling a CouchDB cluster through the /_cluster_setup endpoint.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/setup/README.md#2025-04-21_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"action\":\"enable_cluster\",\n  \"username\":\"username\",\n  \"password\":\"password\",\n  \"bind_address\":\"0.0.0.0\",\n  \"port\": 5984\n}\n```\n\n----------------------------------------\n\nTITLE: Get Reshard Job State JSON Response\nDESCRIPTION: Example JSON response for the GET /_reshard/jobs/$jobid/state endpoint, showing the current state and reason for a specific resharding job.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/rfcs/002-shard-splitting.md#2025-04-21_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"reason\": \"Shard splitting disabled\",\n    \"state\": \"stopped\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies on RedHat-based Systems\nDESCRIPTION: Command to install the necessary dependencies for building CouchDB on RedHat-based systems (Fedora, CentOS, RHEL) using yum. This includes build tools, Erlang components, SpiderMonkey, ICU, and Python.\nSOURCE: https://github.com/apache/couchdb/blob/main/INSTALL.Unix.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo yum install autoconf autoconf-archive automake \\\n    erlang-asn1 erlang-erts erlang-eunit erlang-xmerl \\\n    libmozjs-60-dev libicu-devel libtool perl-Test-Harness \\\n    python3\n```\n\n----------------------------------------\n\nTITLE: Using cURL with URLs containing special characters\nDESCRIPTION: Example of how to quote URLs that contain special characters like question marks when using cURL to query CouchDB.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/intro/curl.rst#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nshell> curl 'http://couchdb:5984/_uuids?count=5'\n```\n\n----------------------------------------\n\nTITLE: Changing Channel Concurrency in Erlang\nDESCRIPTION: This snippet demonstrates how to change the concurrency of a specific Smoosh channel (ratio_dbs) using the config:set function in Erlang. It sets the 'concurrency' option to 2 for the ratio_dbs channel.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/smoosh/README.md#2025-04-21_snippet_2\n\nLANGUAGE: erlang\nCODE:\n```\nconfig:set(\"smoosh.ratio_dbs\", \"concurrency\", \"2\").\n```\n\n----------------------------------------\n\nTITLE: Example Log output\nDESCRIPTION: An example of the log output produced by the Log function.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/query-server/erlang.rst#2025-04-21_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n[Sun, 04 Nov 2012 11:33:58 GMT] [info] [<0.9144.2>] Hello from 8d300b86622d67953d102165dbe99467 doc!\n```\n\n----------------------------------------\n\nTITLE: Configuring CouchDB httpd_global_handlers for CVE-2012-5641 Mitigation\nDESCRIPTION: Configuration snippet for CouchDB's local.ini file to mitigate the CVE-2012-5641 vulnerability by excluding file-based web serving components. This modification prevents access to favicon.ico and _utils handlers by redirecting them to a Forbidden response.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/cve/2012-5641.rst#2025-04-21_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[httpd_global_handlers]\nfavicon.ico = {couch_httpd_misc_handlers, handle_welcome_req, <<\"Forbidden\">>}\n_utils = {couch_httpd_misc_handlers, handle_welcome_req, <<\"Forbidden\">>}\n```\n\n----------------------------------------\n\nTITLE: Defining RFC 2119 Keyword Interpretation in Markdown\nDESCRIPTION: This snippet defines how key words like 'MUST', 'SHOULD', and 'MAY' should be interpreted in the RFC, referencing RFC 2119 for their definitions.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/rfcs/template.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nThe key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n\"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\",  \"MAY\", and \"OPTIONAL\" in this\ndocument are to be interpreted as described in\n[RFC 2119](https://www.rfc-editor.org/rfc/rfc2119.txt).\n```\n\n----------------------------------------\n\nTITLE: Example of Pagination Response Fields\nDESCRIPTION: JSON snippet demonstrating the additional pagination-related fields that will be added to CouchDB responses. These fields provide opaque bookmark tokens that clients can use to navigate through result pages.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/rfcs/014-pagination.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n  \"first\": \"12345678945621321689\",\n  \"previous\": \"983uiwfjkdsdf\",\n  \"next\": \"12343tyekf3\"\n```\n\n----------------------------------------\n\nTITLE: Configuring URI File Location in CouchDB\nDESCRIPTION: Specifies the file containing the full URI for accessing the CouchDB instance, used for port discovery.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/config/couchdb.rst#2025-04-21_snippet_9\n\nLANGUAGE: ini\nCODE:\n```\n[couchdb]\nuri_file = /var/run/couchdb/couchdb.uri\n```\n\n----------------------------------------\n\nTITLE: Deleting Replicator Database\nDESCRIPTION: cURL command to remove an additional replicator database.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/replication/replicator.rst#2025-04-21_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n$ curl -X DELETE http://adm:pass@localhost:5984/another%2F_replicator/\n{\"ok\":true}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Document Without Conflict Information\nDESCRIPTION: This JavaScript code snippet demonstrates a basic GET request to retrieve a document from CouchDB. The response includes the document's ID, revision, and data, but does not provide any information about potential conflicts.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/replication/conflicts.rst#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n    {\n        \"_id\":\"test\",\n        \"_rev\":\"2-b91bb807b4685080c6a651115ff558f5\",\n        \"hello\":\"bar\"\n    }\n```\n\n----------------------------------------\n\nTITLE: Accessing Fauxton in CouchDB via URL\nDESCRIPTION: The URL path to access the bundled Fauxton interface when CouchDB is running on the default port.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/fauxton/install.rst#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nhttp://127.0.0.1:5984/_utils/\n```\n\n----------------------------------------\n\nTITLE: Git Multiple Peer Branch Example\nDESCRIPTION: Shows Git branch structure with multiple remote peers and their states\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/replication/conflicts.rst#2025-04-21_snippet_16\n\nLANGUAGE: text\nCODE:\n```\nmain: AAAAAAAA\nremotes/foo/main: BBBBBBBB\nremotes/bar/main: CCCCCCCC\nremotes/baz/main: AAAAAAAA\n```\n\n----------------------------------------\n\nTITLE: Copying CouchDB Release to Installation Directory\nDESCRIPTION: Command to copy the built CouchDB release to the installation directory, making it available for the CouchDB user.\nSOURCE: https://github.com/apache/couchdb/blob/main/INSTALL.Unix.md#2025-04-21_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ncp -R /path/to/couchdb/rel/couchdb /opt/couchdb\n```\n\n----------------------------------------\n\nTITLE: Installing Remaining Dependencies on FreeBSD\nDESCRIPTION: Command to install the remaining dependencies for building CouchDB on FreeBSD using the pkg package manager.\nSOURCE: https://github.com/apache/couchdb/blob/main/INSTALL.Unix.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npkg install openssl icu git bash autoconf \\\n    www/node npm libtool spidermonkey60 \\\n    erlang lang/python\n```\n\n----------------------------------------\n\nTITLE: Setting Access-Control-Max-Age Header for CORS\nDESCRIPTION: Configuration to set the Access-Control-Max-Age header value in seconds, which helps reduce repeated OPTIONS requests by caching the preflight response.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/config/http.rst#2025-04-21_snippet_19\n\nLANGUAGE: ini\nCODE:\n```\n[cors]\nmax_age = 3600\n```\n\n----------------------------------------\n\nTITLE: Building CouchDB Documentation with Python and Sphinx\nDESCRIPTION: A shell script for setting up a Python virtual environment, installing required dependencies, and building the CouchDB documentation using Sphinx. The script includes commands for both building the HTML documentation and performing syntax checks.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/README.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ python3 -m venv .venv\n$ source .venv/bin/activate\n$ pip3 install -r requirements.txt\n$ make html # builds the docs\n$ make check # syntax checks the docs\n```\n\n----------------------------------------\n\nTITLE: CouchDB Quick Build Configuration\nDESCRIPTION: Command to configure CouchDB from source during troubleshooting, part of the step-by-step process to diagnose installation issues.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/install/troubleshooting.rst#2025-04-21_snippet_10\n\nLANGUAGE: text\nCODE:\n```\n./configure\n```\n\n----------------------------------------\n\nTITLE: Setting Content-Type header with cURL for CouchDB\nDESCRIPTION: Example of setting the Content-Type header to application/json when making requests to CouchDB's API.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/intro/curl.rst#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nshell> curl -H 'Content-Type: application/json' http://127.0.0.1:5984/_uuids\n```\n\n----------------------------------------\n\nTITLE: Running WeatherReport with Debug Logging in Bash\nDESCRIPTION: Illustrates running WeatherReport with a more verbose debug logging level, showing detailed information about the diagnostic process and its findings.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/weatherreport/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ ./weatherreport --etc /path/to/etc -d debug\n[debug] Not connected to the local cluster node, trying to connect. alive:false connect_failed:undefined\n[debug] Starting distributed Erlang.\n[debug] Connected to local cluster node 'node1@127.0.0.1'.\n[debug] Local RPC: mem3:nodes([]) [5000]\n[debug] Local RPC: os:getpid([]) [5000]\n[debug] Running shell command: ps -o pmem,rss -p 73905\n[debug] Shell command output:\n%MEM    RSS\n 0.3  25116\n\n\n[debug] Local RPC: erlang:nodes([]) [5000]\n[debug] Local RPC: mem3:nodes([]) [5000]\n[warning] Cluster member node3@127.0.0.1 is not connected to this node. Please check whether it is down.\n[info] Process is using 0.3% of available RAM, totalling 25116 KB of real memory.\n```\n\n----------------------------------------\n\nTITLE: Setting Valid IBrowse Options in CouchDB\nDESCRIPTION: Defines the list of allowed IBrowse options that can be configured in the replicator.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/config/replicator.rst#2025-04-21_snippet_13\n\nLANGUAGE: ini\nCODE:\n```\n[replicator]\nvalid_ibrowse_options = prefer_ipv6\n```\n\n----------------------------------------\n\nTITLE: Installing erlang-reltool on RedHat-based Systems\nDESCRIPTION: Command to install the erlang-reltool package on RedHat-based systems. This package is required for building a CouchDB release but pulls in several X11 dependencies that may not be needed for running CouchDB.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/install/unix.rst#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nsudo yum install erlang-reltool\n```\n\n----------------------------------------\n\nTITLE: Using Hub CLI for PR Checkout\nDESCRIPTION: Using the Hub command line tool to easily check out pull requests from forked repositories without manual upstream configuration.\nSOURCE: https://github.com/apache/couchdb/blob/main/CONTRIBUTING.md#2025-04-21_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nhub checkout link-to-pull-request\n```\n\n----------------------------------------\n\nTITLE: SpiderMonkey Version Comparison: Constant Values in Nested Scopes\nDESCRIPTION: Demonstrates how constant values defined in nested scopes behave differently in SpiderMonkey 1.8.5 compared to later versions, affecting variable accessibility.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/best-practices/jsdevel.rst#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nf = function(doc){if(doc.x === 'x') { const value='inside_if'}; print(value)};\nf({'x':'y'})\n```\n\n----------------------------------------\n\nTITLE: RST Documentation Structure for CouchDB Server API\nDESCRIPTION: ReStructuredText format documentation outlining the CouchDB server interface API including license header, title section, and module descriptions.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/server/index.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n.. use this file except in compliance with the License. You may obtain a copy of\n.. the License at\n..\n..   http://www.apache.org/licenses/LICENSE-2.0\n..\n.. Unless required by applicable law or agreed to in writing, software\n.. distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n.. WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n.. License for the specific language governing permissions and limitations under\n.. the License.\n\n.. _api/server:\n\n======\nServer\n======\n\nThe CouchDB server interface provides the basic interface to a\nCouchDB server for obtaining CouchDB information and getting and setting\nconfiguration information.\n\n.. toctree::\n    common\n    authn\n    configuration\n```\n\n----------------------------------------\n\nTITLE: Advanced Date Parsing Map Function using Substring\nDESCRIPTION: A map function that manually parses an ISO date string using substring operations to extract individual date components. Emits a detailed array of widget and datetime components as keys.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/best-practices/iso-date.rst#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfunction (doc) {\n  var datetime = doc._id;\n  var year = parseInt(datetime.substr(0, 4));\n  var month = parseInt(datetime.substr(5, 2), 10);\n  var day = parseInt(datetime.substr(8, 2), 10);\n  var hour = parseInt(datetime.substr(11, 2), 10);\n  var minute = parseInt(datetime.substr(14, 2), 10);\n  emit([doc.widget, year, month, day, hour, minute], 1);\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying CouchDB Installation\nDESCRIPTION: URL to verify the CouchDB installation through the web interface. This runs checks to ensure all components are working correctly.\nSOURCE: https://github.com/apache/couchdb/blob/main/INSTALL.Unix.md#2025-04-21_snippet_15\n\nLANGUAGE: http\nCODE:\n```\nhttp://localhost:5984/_utils/#/verifyinstall\n```\n\n----------------------------------------\n\nTITLE: Document Subspace Key Structure\nDESCRIPTION: Example showing the key structure used for storing document metadata and values in FoundationDB\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/rfcs/004-document-storage.md#2025-04-21_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n{DbName, ?DOCUMENTS, DocID, NotDeleted, RevPos, RevHash} = RevisionMetadata\n{DbName, ?DOCUMENTS, DocID, NotDeleted, RevPos, RevHash, \"foo\"} = (value for doc.foo)\n```\n\n----------------------------------------\n\nTITLE: Configure CouchDB with Specific Options on Fedora 36\nDESCRIPTION: Command to configure CouchDB build on Fedora 36 with specific options to skip documentation building (due to incompatibility with the sphinx-build package) and specify the SpiderMonkey version to use.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/install/unix.rst#2025-04-21_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n./configure --disable-docs --spidermonkey-version 91\n```\n\n----------------------------------------\n\nTITLE: Configuring runit for CouchDB Daemonization\nDESCRIPTION: Series of commands to set up runit for running CouchDB as a daemon, including directory creation and script setup.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/install/unix.rst#2025-04-21_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get install runit\n```\n\nLANGUAGE: bash\nCODE:\n```\nsudo mkdir /var/log/couchdb\nsudo chown couchdb:couchdb /var/log/couchdb\n```\n\nLANGUAGE: bash\nCODE:\n```\nsudo mkdir /etc/sv/couchdb\nsudo mkdir /etc/sv/couchdb/log\n```\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/sh\nexec svlogd -tt /var/log/couchdb\n```\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/sh\nexport HOME=/home/couchdb\nexec 2>&1\nexec chpst -u couchdb /home/couchdb/bin/couchdb\n```\n\nLANGUAGE: bash\nCODE:\n```\nsudo chmod u+x /etc/sv/couchdb/log/run\nsudo chmod u+x /etc/sv/couchdb/run\n```\n\nLANGUAGE: bash\nCODE:\n```\nsudo ln -s /etc/sv/couchdb/ /etc/service/couchdb\n```\n\nLANGUAGE: bash\nCODE:\n```\nsudo sv status couchdb\nsudo sv stop couchdb\nsudo sv start couchdb\n```\n\n----------------------------------------\n\nTITLE: Two-Field Mango Selector\nDESCRIPTION: Selector that matches documents with specific values in two different fields.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/ddocs/mango.rst#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"name\": \"Paul\",\n    \"location\": \"Boston\"\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Futon UI in CouchDB Configuration\nDESCRIPTION: This configuration snippet for CouchDB's local.ini file disables the Futon user interface completely as a workaround for the CVE-2012-5650 vulnerability. It replaces the _utils handler with a Forbidden response.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/cve/2012-5650.rst#2025-04-21_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[httpd_global_handlers]\n_utils = {couch_httpd_misc_handlers, handle_welcome_req, <<\"Forbidden\">>}\n```\n\n----------------------------------------\n\nTITLE: Emulating _all_docs JSON response with List Function in CouchDB (Deprecated)\nDESCRIPTION: This JavaScript code snippet demonstrates how to emulate the `_all_docs` JSON response using a CouchDB list function. It initializes the response with a JSON content type, iterates through view rows, and builds a JSON response containing the rows. This approach is suitable for small datasets but can be inefficient for large views due to building the entire response in memory before sending.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/query-server/protocol.rst#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n\"function(head, req){\n        start({'headers': {'Content-Type': 'application/json'}});\n        var resp = head;\n        var rows = [];\n        while(row=getRow()){\n            rows.push(row);\n        }\n        resp.rows = rows;\n        return toJSON(resp);\n    }\"\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies on FreeBSD\nDESCRIPTION: Command to install GNU Make on FreeBSD, which is required for building CouchDB.\nSOURCE: https://github.com/apache/couchdb/blob/main/INSTALL.Unix.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npkg install gmake\n```\n\n----------------------------------------\n\nTITLE: Configuring Mixed TLS/TCP Node Setup\nDESCRIPTION: Commands for running CouchDB with mixed TLS and TCP nodes in development mode\nSOURCE: https://github.com/apache/couchdb/blob/main/src/couch_dist/README.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n./configure --dev --spidermonkey-version 91 && make && ./dev/run -t --no-tls node2@127.0.0.1\n./configure --dev --spidermonkey-version 91 && make && ./dev/run -t --no-tls node2,node3\n\n./dev/remsh-tls\n```\n\n----------------------------------------\n\nTITLE: Unattended Uninstall of CouchDB with Custom Directory\nDESCRIPTION: Command to silently uninstall CouchDB from a custom installation directory. Specifies APPLICATIONFOLDER parameter to target a non-default location and includes admin credentials.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/install/windows.rst#2025-04-21_snippet_2\n\nLANGUAGE: batch\nCODE:\n```\nmsiexec /x apache-couchdb-3.0.0.msi INSTALLSERVICE=1 APPLICATIONFOLDER=\"D:\\CouchDB\" ADMINUSER=admin ADMINPASSWORD=hunter2 /quiet /norestart\n```\n\n----------------------------------------\n\nTITLE: Defining Cluster Management Section in reStructuredText\nDESCRIPTION: This snippet defines the Cluster Management section of the CouchDB documentation using reStructuredText syntax. It includes a section title, a brief explanation of CouchDB's operational modes, and a table of contents for subsections.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/cluster/index.rst#2025-04-21_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. _cluster:\n\n==================\nCluster Management\n==================\n\nAs of CouchDB 2.0.0, CouchDB can be run in two different modes of operation:\n    * Standalone: In this mode, CouchDB's clustering is unavailable.\n      CouchDB's HTTP-based replication with other CouchDB installations remains available.\n    * Cluster: A cluster of CouchDB installations internally replicate\n      with each other via optimized network connections.\n      This is intended to be used with servers that are in the same data center.\n      This allows for database sharding to improve performance.\n\nThis section details the theory behind CouchDB clusters, and provides specific\noperational instructions on node, database and shard management.\n\n.. toctree::\n    :maxdepth: 2\n\n    theory\n    nodes\n    databases\n    sharding\n    purging\n    tls_erlang_distribution\n    troubleshooting\n```\n\n----------------------------------------\n\nTITLE: Configuring IO Class Bypasses in CouchDB\nDESCRIPTION: Specifies which IO classes bypass the queueing system. This configuration activates bypasses for interactive IO classes, while background IO goes through the queueing system. It helps optimize performance for different types of operations.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/config/ioq.rst#2025-04-21_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[ioq.bypass]\nos_process = true\nread = true\nwrite = true\nview_update = true\nshard_sync = false\ncompaction = false\nreshard = false\n```\n\n----------------------------------------\n\nTITLE: Git Branch Structure Example\nDESCRIPTION: Shows the structure of Git branches and remote tracking branches in a distributed setup\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/replication/conflicts.rst#2025-04-21_snippet_14\n\nLANGUAGE: text\nCODE:\n```\nmain               -- my local branch\nremotes/foo/main   -- branch on peer 'foo'\nremotes/bar/main   -- branch on peer 'bar'\n```\n\n----------------------------------------\n\nTITLE: Defining FDB Subspace for Replication IDs in Erlang\nDESCRIPTION: This code snippet shows the structure of the FDB subspace used to track replication ID collisions. It maps replication IDs to job IDs to handle multiple replication jobs with the same replication_id.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/rfcs/016-fdb-replicator.md#2025-04-21_snippet_3\n\nLANGUAGE: erlang\nCODE:\n```\n(..., LayerPrefix, ?REPLICATION_IDS, replication_id) -> job_id\n```\n\n----------------------------------------\n\nTITLE: Running CouchDB with Clouseau\nDESCRIPTION: Commands for running CouchDB development server with Clouseau integration and optional cookie configuration\nSOURCE: https://github.com/apache/couchdb/blob/main/README-DEV.rst#2025-04-21_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\ndev/run --with-clouseau\n\ndev/run --with-clouseau --erlang-cookie=brumbrum\n\ndev/run --with-clouseau --clouseau-dir $HOME/git/clouseau.wip\n```\n\n----------------------------------------\n\nTITLE: Spidermonkey JSON Number Handling\nDESCRIPTION: JavaScript console example showing how Spidermonkey handles JSON number parsing and stringification.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/contributing.rst#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ js -h 2>&1 | head -n 1\nJavaScript-C 1.8.5 2011-03-31\n$ js\njs> JSON.stringify(JSON.parse(\"1.01234567890123456789012345678901234567890\"))\n\"1.0123456789012346\"\njs> var f = JSON.stringify(JSON.parse(\"1.01234567890123456789012345678901234567890\"))\njs> JSON.stringify(JSON.parse(f))\n\"1.0123456789012346\"\n```\n\n----------------------------------------\n\nTITLE: Including License Text with ReStructuredText\nDESCRIPTION: A ReStructuredText directive that includes the contents of the LICENSE file, specifically targeting lines 1-202. The language is set to 'none' to avoid syntax highlighting.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/about.rst#2025-04-21_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. literalinclude:: ../LICENSE\n    :language: none\n    :lines: 1-202\n```\n\n----------------------------------------\n\nTITLE: Defining Split States Macro in Erlang for CouchDB Resharding\nDESCRIPTION: This code snippet defines the SPLIT_STATES macro, which lists the linear progression of states during the shard splitting process. It is used by the mem3_reshard_job module to determine the next state in the splitting process.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/mem3/README_reshard.md#2025-04-21_snippet_2\n\nLANGUAGE: erlang\nCODE:\n```\nSPLIT_STATES\n```\n\n----------------------------------------\n\nTITLE: Undefined Function Warning in ioq.erl\nDESCRIPTION: This code snippet represents a warning indicating that the function `ioq:get_disk_queues/0` is undefined within the `ioq.erl` file. This suggests the function may be missing or incorrectly defined, potentially causing runtime errors if called.\nSOURCE: https://github.com/apache/couchdb/blob/main/test/fixtures/allowed-xref.txt#2025-04-21_snippet_0\n\nLANGUAGE: erlang\nCODE:\n```\n\"src/ioq.erl: Warning: ioq:get_disk_queues/0 is undefined function (Xref)\"\n```\n\n----------------------------------------\n\nTITLE: Defining an Interactive Map Index in CouchDB Design Document (JSON)\nDESCRIPTION: Example of a design document with 'interactive: true' option, which configures the index to be updated in the same transaction when a document is added to the database, primarily to support Mango indexes.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/rfcs/008-map-indexes.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"_id\": \"_design/design-doc-id\",\n  \"_rev\": \"1-8d361a23b4cb8e213f0868ea3d2742c2\",\n  \"views\": {\n    \"map-view\": {\n      \"map\": \"function (doc) {\\n  emit(doc._id, 1);\\n}\"\n    }\n  },\n  \"language\": \"javascript\",\n  \"options\": [{ \"interactive\": true }]\n}\n```\n\n----------------------------------------\n\nTITLE: Job Queue Framework API Implementation\nDESCRIPTION: Implementation details of core job queue operations including add, remove, accept, update, finish, and resubmit. Each operation maintains job state in FDB tables and handles job locks, activity tracking, and queue management.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/rfcs/007-background-jobs.md#2025-04-21_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nadd/4,5:\n   * Add the new job to the main jobs table.\n   * If a job with the same JobId exists, resubmit the job.\n   * Update \"pending\" watch for the type with a new versionstamp and bump its counter.\n   * JobLock is set to null.\n\nremove/3:\n   * Job is removed from the main jobs table.\n   * Job processor during the next update/2,3 call will get a halt error and know to stop running the job.\n\naccept/1,2:\n   * Generate a unique JobLock UUID.\n   * Attempt to dequeue the item from the pending queue, then assign it the JobLock in the jobs table.\n   * Create an entry in the \"activity\" subspace.\n   * If there are no pending jobs, get a watch for the \"pending\" queue and wait until it fires, then try again.\n\nupdate/2,3:\n   * If job is missing from the main jobs table return halt.\n   * Check if JobLock matches, otherwise return halt.\n   * Delete old \"activity\" sequence entry.\n   * Maybe update JobData.\n   * Create a new \"activity\" sequence entry and in main job table.\n   * Update \"watches\" sequence for that job type.\n\nfinish/2,3:\n   * If job is missing from the main jobs table return halt.\n   * Check if JobLock matches, otherwise returns halt.\n   * Delete old \"activity\" sequence entry.\n   * If Resubmit field is true, re-enqueue the job, and set Resubmit to false.\n   * Set job table's JobLock to null\n\nresubmit/2,3:\n   * Set the Resubmit field to true.\n   * The job will be re-enqueued when finish/2,3 is called.\n```\n\n----------------------------------------\n\nTITLE: SpiderMonkey Version Comparison: parseInt() with Zero-Prefixed Input\nDESCRIPTION: Illustrates how parseInt() behaves differently with zero-prefixed input in SpiderMonkey 1.8.5 versus later versions, affecting number parsing especially for dates.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/best-practices/jsdevel.rst#2025-04-21_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nparseInt(\"08\")\nparseInt(\"09\")\nparseInt(\"010\")\nparseInt(\"08\", 10)\n```\n\n----------------------------------------\n\nTITLE: Requesting an Update Function Without a Document in CouchDB\nDESCRIPTION: HTTP POST request to execute an update function without specifying a document, attempting to add a new ingredient.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/ddoc/render.rst#2025-04-21_snippet_11\n\nLANGUAGE: http\nCODE:\n```\nPOST /recipes/_design/recipe/_update/ingredients HTTP/1.1\nAccept: application/json\nContent-Length: 10\nContent-Type: application/json\nHost: localhost:5984\n\n\"something\"\n```\n\n----------------------------------------\n\nTITLE: SpiderMonkey 1.8.5: E4X (ECMAScript for XML) Example\nDESCRIPTION: Shows the use of E4X, a feature supported in SpiderMonkey 1.8.5 but not in later versions. This demonstrates another compatibility issue between SpiderMonkey versions.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/best-practices/jsdevel.rst#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar xml = <root><x></x></root>\nxml.(x)\n```\n\n----------------------------------------\n\nTITLE: Using strace to Debug CouchDB\nDESCRIPTION: Command to run CouchDB with strace to capture system calls for debugging, which can help identify issues at the OS level.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/install/troubleshooting.rst#2025-04-21_snippet_13\n\nLANGUAGE: text\nCODE:\n```\nstrace bin/couchdb 2> strace.out\n```\n\n----------------------------------------\n\nTITLE: Testing Arrow Function Syntax in For Loop\nDESCRIPTION: This snippet tests the use of an arrow function in a for loop statement head, expecting a syntax error but not receiving one.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/couch_quickjs/quickjs/test262_errors.txt#2025-04-21_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nfor (let f = () => {}, i = 0; i < 1; i++) {}\n```\n\n----------------------------------------\n\nTITLE: Specifying Python Test Dependencies for CouchDB\nDESCRIPTION: Defines the exact versions of nose2, requests, and hypothesis libraries required for CouchDB's Python tests. These versions are chosen based on compatibility with CentOS 8, which is currently the minimum supported version.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/mango/requirements.txt#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n# nose2 0.13.0, requests, hypothesis version are driven\n# by the minimum version for python on centos 8 currently\nnose2==0.13.0\nrequests==2.27.1\nhypothesis==6.31.6\n```\n\n----------------------------------------\n\nTITLE: Create Reshard Job JSON Response\nDESCRIPTION: Example JSON response for the POST /_reshard/jobs endpoint, showing the created job IDs and their associated information.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/rfcs/002-shard-splitting.md#2025-04-21_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n[\n    {\n        \"id\": \"001-d457a4ea82877a26abbcbcc0e01c4b0070027e72b5bf0c4ff9c89eec2da9e790\",\n        \"node\": \"node1@127.0.0.1\",\n        \"ok\": true,\n        \"shard\": \"shards/80000000-bfffffff/db1.1549986514\"\n    },\n    {\n        \"id\": \"001-7c1d20d2f7ef89f6416448379696a2cc98420e3e7855fdb21537d394dbc9b35f\",\n        \"node\": \"node1@127.0.0.1\",\n        \"ok\": true,\n        \"shard\": \"shards/c0000000-ffffffff/db1.1549986514\"\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Visualizing Job State Transitions in CouchDB Background Jobs\nDESCRIPTION: ASCII diagram showing the state transition flow between PENDING, RUNNING, and FINISHED states for background jobs. Jobs can transition between states in various ways, including the ability to resubmit finished jobs back to pending.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/rfcs/007-background-jobs.md#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n         +------------>+\n         |             |\n         |             v\n -->[PENDING]     [RUNNING]--->[FINISHED]\n         ^             |           |\n         |             v           |\n         +-------------+<----------+\n```\n\n----------------------------------------\n\nTITLE: Accessing CouchDB Plugin Documentation\nDESCRIPTION: File path for the README containing details about the experimental plugin feature in CouchDB 1.5.0.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/whatsnew/1.5.rst#2025-04-21_snippet_1\n\nLANGUAGE: reStructuredText\nCODE:\n```\n``src/couch_plugin/README.md``\n```\n\n----------------------------------------\n\nTITLE: Creating Text File in Bash\nDESCRIPTION: Creates a sample text file using cat command\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/document/attachments.rst#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nshell> cat file.txt\nMy hovercraft is full of eels!\n```\n\n----------------------------------------\n\nTITLE: Pushing Changes as a CouchDB Committer\nDESCRIPTION: Command for CouchDB committers to push their topic branch to the Apache repository. This differs from the contributor workflow as committers have direct push access to the official repository.\nSOURCE: https://github.com/apache/couchdb/blob/main/CONTRIBUTING.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ngit push origin <topic-branch-name>\n```\n\n----------------------------------------\n\nTITLE: Accessing Fauxton UI in CouchDB 1.5.0\nDESCRIPTION: Instructions for accessing the new experimental Fauxton administration UI in CouchDB 1.5.0.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/whatsnew/1.5.rst#2025-04-21_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n``/_utils/fauxton/``\n```\n\n----------------------------------------\n\nTITLE: Create Reshard Job JSON Requests\nDESCRIPTION: Example JSON request bodies for the POST /_reshard/jobs endpoint, demonstrating different ways to create resharding jobs for specific shards, ranges, or databases.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/rfcs/002-shard-splitting.md#2025-04-21_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"type\": \"split\",\n    \"shard\": \"shards/80000000-bfffffff/db1.1549492084\"\n    \"node\": \"node1@127.0.0.1\"\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n     \"type\": \"split\",\n     \"db\" : \"db1\",\n     \"range\" : \"80000000-bfffffff\"\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n     \"type\": \"split\",\n     \"db\" : \"db1\",\n     \"range\" : \"80000000-bfffffff\",\n     \"node\": \"node1@127.0.0.1\"\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n     \"type\": \"split\",\n     \"db\" : \"db1\",\n     \"node\": \"node1@127.0.0.1\"\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling revision stemming optimization in CouchDB (Erlang)\nDESCRIPTION: Sets the 'stem_interactive_updates' option to false in the CouchDB configuration to disable the optimized revision stemming algorithm if necessary.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/whatsnew/2.2.rst#2025-04-21_snippet_8\n\nLANGUAGE: erlang\nCODE:\n```\n[couchdb]\nstem_interactive_updates = false\n```\n\n----------------------------------------\n\nTITLE: Initializing listfun response with headers in Erlang\nDESCRIPTION: The Start function initializes a list function response and allows defining the response code and headers. This example shows how to set a 302 redirect and the Location header to redirect to the CouchDB website. It takes a proplist of :ref:`response object<response_object>`.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/query-server/erlang.rst#2025-04-21_snippet_7\n\nLANGUAGE: erlang\nCODE:\n```\nfun(Head, {Req}) ->\n    Start({[{<<\"code\">>, 302},\n            {<<\"headers\">>, {[\n                {<<\"Location\">>, <<\"http://couchdb.apache.org\">>}]\n            }}\n        ]}),\n    \"Relax!\"\nend.\n```\n\n----------------------------------------\n\nTITLE: Response from Show Function With a Document in CouchDB\nDESCRIPTION: HTTP response when executing a show function with a document, returning the document's description field as specified in the function implementation.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/ddoc/render.rst#2025-04-21_snippet_4\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200 OK\nContent-Length: 88\nContent-Type: text/html; charset=utf-8\nDate: Wed, 21 Aug 2013 12:38:08 GMT\nEtag: \"8IEBO8103EI98HDZL5Z4I1T0C\"\nServer: CouchDB (Erlang/OTP)\nVary: Accept\n\nAn Italian-American dish that usually consists of spaghetti, tomato sauce and meatballs.\n```\n\n----------------------------------------\n\nTITLE: SpiderMonkey 1.8.5: toLocaleFormat() Function Usage\nDESCRIPTION: Demonstrates the use of the toLocaleFormat() function, which is available in SpiderMonkey 1.8.5 but not in later versions. This highlights a Date formatting compatibility issue.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/best-practices/jsdevel.rst#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nd = new Date(\"Dec 1, 2015 3:22:46 PM\")\nd.toLocaleFormat(\"%Y-%m-%d\")\n```\n\n----------------------------------------\n\nTITLE: Testing Block-Scoped Functions in JavaScript\nDESCRIPTION: This snippet tests the behavior of block-scoped functions, expecting a specific function definition but receiving a different one.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/couch_quickjs/quickjs/test262_errors.txt#2025-04-21_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nSameValue(Â«function x() {2}Â», Â«function x() {1}Â»)\n```\n\n----------------------------------------\n\nTITLE: Implementing State Restart Logic in Erlang for CouchDB Resharding\nDESCRIPTION: This code snippet shows the STATE_RESTART macro used in the mem3_reshard_job module. It implements the recovery logic when a job resumes from a previously checkpointed state, allowing the job to reset and resume its work.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/mem3/README_reshard.md#2025-04-21_snippet_3\n\nLANGUAGE: erlang\nCODE:\n```\n?STATE_RESTART\n```\n\n----------------------------------------\n\nTITLE: SpiderMonkey Version Comparison: String match(undefined)\nDESCRIPTION: Shows how the behavior of String.match(undefined) differs between SpiderMonkey 1.8.5 and later versions, returning null in 1.8.5 and [''] in later versions.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/best-practices/jsdevel.rst#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n\"abc\".match(undefined)\n```\n\n----------------------------------------\n\nTITLE: Windows-specific cURL command formatting\nDESCRIPTION: Examples showing how to format cURL commands specifically for Windows, using doubled double-quotes or escape characters.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/intro/curl.rst#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nshell> curl -X PUT 'http://adm:pass@127.0.0.1:5984/demo/doc' -d '{\"motto\": \"I love gnomes\"}'\n```\n\nLANGUAGE: bash\nCODE:\n```\nshell> curl -X PUT \"http://adm:pass@127.0.0.1:5984/demo/doc\" -d \"{\"\"motto\"\": \"\"I love gnomes\"\"}\"\n```\n\n----------------------------------------\n\nTITLE: Set Reshard Job State JSON Request\nDESCRIPTION: Example JSON request body for the PUT /_reshard/jobs/$jobid/state endpoint, used to stop or resume a specific resharding job.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/rfcs/002-shard-splitting.md#2025-04-21_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n     \"state\": \"stopped\",\n     \"reason\": \"Pause this job for now\"\n}\n```\n\n----------------------------------------\n\nTITLE: OS Process Error - SELinux Blocking Access\nDESCRIPTION: Error message that appears when SELinux is blocking CouchDB's access to certain areas of the file system. This requires reconfiguring or disabling SELinux.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/install/troubleshooting.rst#2025-04-21_snippet_8\n\nLANGUAGE: text\nCODE:\n```\nâ€¦ OS Process Error â€¦ {os_process_error,{exit_status,139}}\n```\n\n----------------------------------------\n\nTITLE: Running Benchmark Script for Performance Comparison\nDESCRIPTION: Command for running the benchmark script that compares the NIF implementation with the original Erlang implementation. It spawns workers that generate random strings and perform encode/decode operations in a loop.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/b64url/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nERL_LIBS=_build/default/lib/b64url/ ./test/benchmark.escript 4 10 100 30\n```\n\n----------------------------------------\n\nTITLE: EJSON Number Encoding Example\nDESCRIPTION: Erlang code demonstrating EJSON encoding and decoding of floating-point numbers.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/contributing.rst#2025-04-21_snippet_2\n\nLANGUAGE: erlang\nCODE:\n```\nejson:encode(ejson:decode(<<\"1.1\">>)).\n<<\"1.1000000000000000888\">>\n```\n\n----------------------------------------\n\nTITLE: Compiling Mem3 with Rebar in Erlang\nDESCRIPTION: This command demonstrates how to compile the mem3 application using rebar, with the ERL_LIBS environment variable set to locate the necessary CouchDB header files.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/mem3/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nERL_LIBS=\"/usr/local/src/couchdb/apps\" ./rebar compile\n```\n\n----------------------------------------\n\nTITLE: Running CouchDB Cluster Setup Tests\nDESCRIPTION: Command to run the cluster setup tests after setting up CouchDB instances.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/setup/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsrc/setup/test/t.sh\n```\n\n----------------------------------------\n\nTITLE: Mitigating Configuration Access in CouchDB default.ini\nDESCRIPTION: Code snippet showing how to remove the _config route from default.ini to mitigate the CVE-2018-11769 vulnerability in CouchDB 1.x and pre-2.2.0 2.x versions.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/cve/2018-11769.rst#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n[httpd_global_handlers]\n;_config = {couch_httpd_misc_handlers, handle_config_req}\n```\n\n----------------------------------------\n\nTITLE: Java Command for Starting Clouseau Service\nDESCRIPTION: Command line instruction for launching the Clouseau search service with specific JVM settings and memory configuration.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/install/search.rst#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\njava -server \\\n     -Xmx2G \\\n     -Dsun.net.inetaddr.ttl=30 \\\n     -Dsun.net.inetaddr.negative.ttl=30 \\\n     -Dlog4j.configuration=file:/path/to/log4j.properties \\\n     -XX:OnOutOfMemoryError=\"kill -9 %p\" \\\n     -XX:+UseConcMarkSweepGC \\\n     -XX:+CMSParallelRemarkEnabled \\\n     com.cloudant.clouseau.Main \\\n     /path/to/clouseau.ini\n```\n\n----------------------------------------\n\nTITLE: SpiderMonkey 1.8.5: For-Each Loop Example\nDESCRIPTION: Demonstrates the use of the 'for each' loop syntax supported in SpiderMonkey 1.8.5 but not in later versions. This highlights a compatibility issue between different SpiderMonkey versions.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/best-practices/jsdevel.rst#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nfor each (var x in [1,2]) {print(x)}\n```\n\n----------------------------------------\n\nTITLE: Specifying Python Package Dependencies for CouchDB Documentation\nDESCRIPTION: This snippet defines the exact versions of Python packages required to build the CouchDB documentation. It includes Sphinx for documentation generation, a ReadTheDocs theme, HTTP domain support, jQuery integration, and a copy button feature.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/requirements.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nSphinx==8.1.3\nsphinx-rtd-theme==3.0.2\nsphinxcontrib-httpdomain==1.8.1\nsphinxcontrib-jquery==4.1\nsphinx-copybutton==0.5.2\n```\n\n----------------------------------------\n\nTITLE: FoundationDB Data Model Structure for Changes Feed\nDESCRIPTION: Defines the key-value structure for the changes subspace in FoundationDB. The key consists of a changes prefix and Sequence, while the value contains SeqFormat, DocID, RevPosition, RevHash, BranchCount, and NotDeleted flags.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/rfcs/003-fdb-seq-index.md#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n(\"changes\", Sequence) = (SeqFormat, DocID, RevPosition, RevHash, BranchCount, NotDeleted)\n```\n\n----------------------------------------\n\nTITLE: ReStructuredText Document Section Headers\nDESCRIPTION: Section headers for a technical document about CouchDB's eventual consistency, including the license header and main content sections.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/intro/consistency.rst#2025-04-21_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n====================\nEventual Consistency\n====================\n\nWorking with the Grain\n======================\n\nThe CAP Theorem\n===============\n\nLocal Consistency\n=================\n\nThe Key to Your Data\n--------------------\n\nNo Locking\n----------\n```\n\n----------------------------------------\n\nTITLE: Jenkins Configuration Commands\nDESCRIPTION: Configuration parameters and settings for Jenkins jobs including pull request handling and platform matrix builds. Contains URLs, credentials setup, and build triggers.\nSOURCE: https://github.com/apache/couchdb/blob/main/build-aux/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* Job name: PullRequests (jobs shouldn't have spaces in them, because\\n  the job name is used for workspace path naming.)\\n* Display Name: \"Pull Requests\"\\n* Description: \"This job builds all GitHub pull requests against\\n  apache/couchdb.\"\\n* Branch sources: Github\\n  * Credentials: a GitHub API key from wohali. These credentials are\\n    stored in the top-level Jenkins CouchDB folder on the server.\\n    The API token credentials are `user:email` and `repo:status`.\\n  * URL https://github.com/apache/couchdb\\n  * Behaviors\\n    * Discover branches: Exclude branches that are also filed as PRs\\n    * Discover PRs from origin: Merging the PR with the current target\\n      branch revision\\n    * Discover PRs from works: Merging the PR with the current target\\n      branch revision, trust Nobody [2]\\n    * Advanced clone behaviours:\\n      * Fetch tags\\n      * Clear \"Shallow clone\" [1]\\n    * Clean before checkout [1]\\n    * Prune stale remote-tracking branches\\n  * Property strategy: All branches get the same properties\\n* Build Configuration\\n  * Mode: by Jenkinsfile\\n  * Script path: `build-aux/Jenkinsfile.pr`\\n* Scan Repository Triggers\\n  * Periodically if not other wise run\\n  * Interval: 1 day (do not set this too high, GitHub has an API token\\n  throttle that can cause issues!)\\n* Orphaned Item Strategy\\n  * Discard old items\\n  * Days to keep old items: <blank>\\n  * Max # of old items to keep: 10\\n* Everything else set as defaults.\n```\n\n----------------------------------------\n\nTITLE: Setting up Clouseau with ASDF Java Environment\nDESCRIPTION: Commands for setting up a compatible Java environment for Clouseau using the ASDF tool to manage multiple Java versions.\nSOURCE: https://github.com/apache/couchdb/blob/main/README-DEV.rst#2025-04-21_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nasdf plugin add java\n```\n\nLANGUAGE: bash\nCODE:\n```\nasdf install java zulu-jre-8.74.0.17\n```\n\nLANGUAGE: bash\nCODE:\n```\nexport CLOUSEAU_JAVA_HOME=$(asdf where java zulu-jre-8.74.0.17)\n```\n\n----------------------------------------\n\nTITLE: Installing Node.js for Fauxton on Fedora 36\nDESCRIPTION: Commands to install Node.js v12.22.12 on Fedora 36 for building the Fauxton web interface. The system's Node.js v16 is not compatible with Fauxton, so this downloads and installs an older version.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/install/unix.rst#2025-04-21_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nwget https://nodejs.org/download/release/v12.22.12/node-v12.22.12-linux-x64.tar.gz\nmkdir -p /usr/local/lib/nodejs\ntar -xvf node-v12.22.12-linux-x64.tar.gz -C /usr/local/lib/nodejs\nexport PATH=/usr/local/lib/nodejs/node-v12.22.12-linux-x64/bin:$PATH\n```\n\n----------------------------------------\n\nTITLE: CouchDB List Function - Streaming JSON Response\nDESCRIPTION: This JavaScript code demonstrates a streaming list function in CouchDB, which avoids building the entire JSON response in memory. It sends the response in chunks using the `send` function, improving performance for large datasets. This function manually constructs the JSON structure by sending string fragments and serializing each row individually.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/query-server/protocol.rst#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n\"function(head, req){\n        start({'headers': {'Content-Type': 'application/json'}});\n        send('{');\n        send('\"total_rows\":' + toJSON(head.total_rows) + ',');\n        send('\"offset\":' + toJSON(head.offset) + ',');\n        send('\"rows\":[');\n        if (row=getRow()){\n            send(toJSON(row));\n        }\n        while(row=getRow()){\n            send(',' + toJSON(row));\n        }\n        send(']');\n        return '}';\n    }\"\n```\n\n----------------------------------------\n\nTITLE: Removing a Smoosh Channel in CouchDB\nDESCRIPTION: This snippet illustrates the process of removing a Smoosh channel in CouchDB, including removing it from the active set and deleting its configuration.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/smoosh/operator_guide.md#2025-04-21_snippet_2\n\nLANGUAGE: erlang\nCODE:\n```\n# Remove it from the active set\n(couchdb@db1.foo.bar)5> rpc:multicall(config, get, [\"smoosh\", \"db_channels\"]).\n{[\"ratio_dbs,big_dbs\", \"ratio_dbs,big_dbs\", \"ratio_dbs,big_dbs\"],[]}\n(couchdb@db1.foo.bar)6> rpc:multicall(config, set, [\"smoosh\", \"db_channels\", \"ratio_dbs\"]).\n{[ok,ok,ok],[]}\n\n# Delete the config -- you need to do each value\n(couchdb@db1.foo.bar)3> rpc:multicall(config, delete, [\"smoosh.big_dbs\", \"concurrency\"]).\n{[ok,ok,ok],[]}\n(couchdb@db1.foo.bar)3> rpc:multicall(config, delete, [\"smoosh.big_dbs\", \"min_size\"]).\n{[ok,ok,ok],[]}\n```\n\n----------------------------------------\n\nTITLE: CouchDB View Query Examples\nDESCRIPTION: Example curl commands demonstrating how to query the view with different group levels to aggregate results by date and widget values.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/best-practices/iso-date.rst#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET \"http://adm:pass@localhost:5984/transactions/_design/widget_count/_view/toss?group_level=1\"\n\n{\"rows\":[\n{\"key\":[20],\"value\":10},\n{\"key\":[21],\"value\":20}\n]}\n\ncurl -X GET \"http://adm:pass@localhost:5984/transactions/_design/widget_count/_view/toss?group_level=2\"\n\n{\"rows\":[\n{\"key\":[20,widget],\"value\":10},\n{\"key\":[21,widget],\"value\":10},\n{\"key\":[21,thing],\"value\":10}\n]}\n```\n\n----------------------------------------\n\nTITLE: Creating a Replica Database in CouchDB\nDESCRIPTION: This cURL command creates a new replica database in CouchDB. It sends a PUT request to the CouchDB instance with authentication, specifying the target database name. The command needs to be executed before using it for replication to succeed.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/intro/api.rst#2025-04-21_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X PUT http://admin:password@127.0.0.1:5984/albums-replica\n```\n\n----------------------------------------\n\nTITLE: Verifying CouchDB Cluster Membership via API\nDESCRIPTION: This snippet demonstrates how to verify that all cluster nodes are connected using the `_membership` API endpoint. It displays the `all_nodes` and `cluster_nodes` lists, which should match if the cluster is properly configured.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/setup/cluster.rst#2025-04-21_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\ncurl http://admin:password@<setup-coordination-node>:5984/_membership\n```\n\nLANGUAGE: bash\nCODE:\n```\n{\n        \"all_nodes\": [\n            \"couchdb@couch1.test.com\",\n            \"couchdb@couch2.test.com\",\n            \"couchdb@couch3.test.com\",\n        ],\n        \"cluster_nodes\": [\n            \"couchdb@couch1.test.com\",\n            \"couchdb@couch2.test.com\",\n            \"couchdb@couch3.test.com\",\n        ]\n    }\n```\n\n----------------------------------------\n\nTITLE: Static Module Data Provider Implementation in Erlang\nDESCRIPTION: Example of a static module data provider that returns hardcoded configuration data. Changes are detected through the module's vsn attribute.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/couch_epi/README.md#2025-04-21_snippet_1\n\nLANGUAGE: erlang\nCODE:\n```\n-export([data/0]).\n\ndata() ->\n    [\n        {[complex, key, 2], [\n            {type, counter},\n            {desc, bar}\n        ]},\n        {[complex, key, 1], [\n            {type, counter},\n            {desc, updated_foo}\n        ]}\n    ].\n```\n\n----------------------------------------\n\nTITLE: Setting Purged Info Limit in CouchDB\nDESCRIPTION: HTTP PUT request to set the soft limit for stored purges in a CouchDB database. The limit controls how many purges can be synchronized between database replicas.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/database/misc.rst#2025-04-21_snippet_6\n\nLANGUAGE: http\nCODE:\n```\nPUT /db/_purged_infos_limit HTTP/1.1\nAccept: application/json\nContent-Length: 4\nContent-Type: application/json\nHost: localhost:5984\n\n1500\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Basic Auth in CouchDB\nDESCRIPTION: Example of using Basic Authentication with CouchDB. The request includes an Authorization header with base64 encoded credentials. The response includes a welcome message and version information.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/server/authn.rst#2025-04-21_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nGET / HTTP/1.1\nAccept: application/json\nAuthorization: Basic cm9vdDpyZWxheA==\nHost: localhost:5984\n```\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200 OK\nCache-Control: must-revalidate\nContent-Length: 177\nContent-Type: application/json\nDate: Mon, 03 Dec 2012 00:44:47 GMT\nServer: CouchDB (Erlang/OTP)\n\n{\n    \"couchdb\":\"Welcome\",\n    \"uuid\":\"0a959b9b8227188afc2ac26ccdf345a6\",\n    \"version\":\"1.3.0\",\n    \"vendor\": {\n        \"version\":\"1.3.0\",\n        \"name\":\"The Apache Software Foundation\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Document with Multiple Attachments (JSON)\nDESCRIPTION: Example JSON document structure for creating a document with multiple base64-encoded attachments inline.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/api/document/common.rst#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"_id\":\"multiple_attachments\",\n  \"_attachments\":\n  {\n    \"foo.txt\":\n    {\n      \"content_type\":\"text\\/plain\",\n      \"data\": \"VGhpcyBpcyBhIGJhc2U2NCBlbmNvZGVkIHRleHQ=\"\n    },\n\n   \"bar.txt\":\n    {\n      \"content_type\":\"text\\/plain\", \n      \"data\": \"VGhpcyBpcyBhIGJhc2U2NCBlbmNvZGVkIHRleHQ=\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: SpiderMonkey Version Comparison: toISOString() on Invalid Date\nDESCRIPTION: Illustrates how toISOString() behaves differently on invalid Date objects between SpiderMonkey 1.8.5 and later versions, with 1.8.5 returning a string and later versions throwing an error.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/best-practices/jsdevel.rst#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n(new Date(undefined)).toISOString()\n```\n\n----------------------------------------\n\nTITLE: Configuring User Authentication Settings in CouchDB\nDESCRIPTION: Various configuration options for CouchDB's authentication mechanisms, including forcing user authentication, persistent cookies, and cache settings.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/config/auth.rst#2025-04-21_snippet_3\n\nLANGUAGE: ini\nCODE:\n```\n[chttpd]\nrequire_valid_user = false\nrequire_valid_user_except_for_up = false\n\n[chttpd_auth]\nallow_persistent_cookies = true\ncookie_domain = example.com\nsame_site = strict\nauth_cache_size = 50\nauthentication_redirect = /_utils/session.html\nhash_algorithms = sha256, sha\niterations = 10000\n```\n\n----------------------------------------\n\nTITLE: Testing Function Constructor in JavaScript\nDESCRIPTION: This snippet tests the equality of the Function constructor with an anonymous function, which unexpectedly fails.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/couch_quickjs/quickjs/test262_errors.txt#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nSameValue(Â«function Function() {\n    [native code]\n}Â», Â«function () {\n    [native code]\n}Â»)\n```\n\n----------------------------------------\n\nTITLE: JWT Authentication Response Payload in CouchDB\nDESCRIPTION: JSON response structure for a successful JWT authentication showing user context, roles, and authentication details.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/config/auth.rst#2025-04-21_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"ok\": true,\n    \"userCtx\": {\n        \"name\": \"1234567890\",\n        \"roles\": [\n            \"accounting-role\",\n            \"view-role\"\n        ]\n    },\n    \"info\": {\n    \"authentication_handlers\": [\n        \"jwt\",\n        \"proxy\",\n        \"cookie\",\n        \"default\"\n    ],\n    \"authenticated\": \"jwt\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Object.entries Method in JavaScript\nDESCRIPTION: This snippet tests the Object.entries method on a RegExp object, expecting a specific order of entries which differs from the actual result.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/couch_quickjs/quickjs/test262_errors.txt#2025-04-21_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n[[\"0\", \"a\"], [\"groups\", undefined], [\"index\", 0], [\"input\", \"abc\"]]\n```\n\n----------------------------------------\n\nTITLE: Basic Nouveau YAML Configuration\nDESCRIPTION: Sample YAML configuration for Nouveau server with settings for index management, commit intervals, and directory location.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/install/nouveau.rst#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nmaxIndexesOpen: 100\ncommitIntervalSeconds: 30\nidleSeconds: 60\nrootDir: target/indexes\n```\n\n----------------------------------------\n\nTITLE: Configuring and Building CouchDB on Unix\nDESCRIPTION: Commands to configure and build CouchDB from source. Includes options for customizing the installation and specifying compiler flags.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/install/unix.rst#2025-04-21_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\n./configure\n```\n\nLANGUAGE: bash\nCODE:\n```\nmake release\n```\n\nLANGUAGE: bash\nCODE:\n```\nmake release ERL_CFLAGS=\"-I/usr/local/include/js -I/usr/local/lib/erlang/usr/include\"\n```\n\n----------------------------------------\n\nTITLE: Querying CouchDB with Counts Facet\nDESCRIPTION: Examples of using the counts facet syntax to get aggregated counts of document types in search results.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/ddocs/search.rst#2025-04-21_snippet_23\n\nLANGUAGE: text\nCODE:\n```\n?q=*:*&counts=[\"type\"]\n```\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"total_rows\":100000,\n    \"bookmark\":\"g...\",\n    \"rows\":[...],\n    \"counts\":{\n        \"type\":{\n            \"sofa\": 10,\n            \"chair\": 100,\n            \"lamp\": 97\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring CouchDB Peruser Database Prefix\nDESCRIPTION: Sets a custom prefix for databases created by the couch_peruser feature in CouchDB.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/whatsnew/2.2.rst#2025-04-21_snippet_4\n\nLANGUAGE: ini\nCODE:\n```\n[couch_peruser]\ndatabase_prefix = custom_prefix\n```\n\n----------------------------------------\n\nTITLE: Setting CouchDB Credentials for Elixir Tests\nDESCRIPTION: Environment variables to override default CouchDB credentials and URL for running Elixir tests.\nSOURCE: https://github.com/apache/couchdb/blob/main/test/elixir/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ EX_USERNAME=myusername EX_PASSWORD=password EX_COUCH_URL=http://my-couchdb.com mix test\n```\n\n----------------------------------------\n\nTITLE: Building CouchDB Release\nDESCRIPTION: Command to build a CouchDB release from source, useful when troubleshooting installation issues by building a fresh copy.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/install/troubleshooting.rst#2025-04-21_snippet_11\n\nLANGUAGE: text\nCODE:\n```\nmake release\n```\n\n----------------------------------------\n\nTITLE: JWT Roles Claim Example\nDESCRIPTION: Example JWT token payload showing CouchDB roles claim structure.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/config/auth.rst#2025-04-21_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"_couchdb.roles\": [\n        \"accounting-role\",\n        \"view-role\"\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Starting CouchDB Server\nDESCRIPTION: Command to start the CouchDB server as the dedicated couchdb user using sudo.\nSOURCE: https://github.com/apache/couchdb/blob/main/src/docs/src/install/unix.rst#2025-04-21_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\nsudo -i -u couchdb /home/couchdb/bin/couchdb\n```"
  }
]