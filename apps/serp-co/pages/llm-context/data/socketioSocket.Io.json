[
  {
    "owner": "socketio",
    "repo": "socket.io",
    "content": "TITLE: Basic Socket.IO Event Handling\nDESCRIPTION: Demonstrates basic Socket.IO event handling including connection events, emitting to specific sockets, and broadcasting to all connected sockets.\nSOURCE: https://github.com/socketio/socket.io/blob/main/packages/socket.io/Readme.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nio.on('connection', socket => {\n  socket.emit('request', /* … */); // emit an event to the socket\n  io.emit('broadcast', /* … */); // emit an event to all connected sockets\n  socket.on('reply', () => { /* … */ }); // listen to the event\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Socket.IO with Node.js Cluster and Redis\nDESCRIPTION: Example showing a combined approach using both Node.js cluster and Redis. This setup enables scaling within a single machine via Node.js cluster and across multiple machines via Redis pub/sub.\nSOURCE: https://github.com/socketio/socket.io/blob/main/packages/socket.io-cluster-engine/README.md#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport cluster from \"node:cluster\";\nimport process from \"node:process\";\nimport { availableParallelism } from \"node:os\";\nimport { createClient } from \"redis\";\nimport { setupPrimaryWithRedis, NodeClusterEngine } from \"@socket.io/cluster-engine\";\nimport { createServer } from \"node:http\";\nimport { Server } from \"socket.io\";\n\nif (cluster.isPrimary) {\n  console.log(`Primary ${process.pid} is running`);\n\n  const numCPUs = availableParallelism();\n\n  // fork workers\n  for (let i = 0; i < numCPUs; i++) {\n    cluster.fork();\n  }\n\n  const pubClient = createClient();\n  const subClient = pubClient.duplicate();\n\n  await Promise.all([\n    pubClient.connect(),\n    subClient.connect(),\n  ]);\n\n  // setup connection between and within the clusters\n  setupPrimaryWithRedis(pubClient, subClient);\n\n  // needed for packets containing Buffer objects (you can ignore it if you only send plaintext objects)\n  cluster.setupPrimary({\n    serialization: \"advanced\",\n  });\n\n  cluster.on(\"exit\", (worker, code, signal) => {\n    console.log(`worker ${worker.process.pid} died`);\n  });\n} else {\n  const httpServer = createServer((req, res) => {\n    res.writeHead(404).end();\n  });\n\n  const engine = new NodeClusterEngine();\n\n  engine.attach(httpServer, {\n    path: \"/socket.io/\"\n  });\n\n  const io = new Server();\n\n  io.bind(engine);\n\n  // workers will share the same port\n  httpServer.listen(3000);\n\n  console.log(`Worker ${process.pid} started`);\n}\n```\n\n----------------------------------------\n\nTITLE: Using Promise-based Acknowledgements in Socket.IO\nDESCRIPTION: Demonstrates the Promise-based acknowledgement syntax in Socket.IO. Shows examples with and without timeouts for handling server acknowledgements in an async/await pattern.\nSOURCE: https://github.com/socketio/socket.io/blob/main/packages/socket.io-client/CHANGELOG.md#2025-04-11_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// without timeout\nconst response = await socket.emitWithAck(\"hello\", \"world\");\n\n// with a specific timeout\ntry {\n  const response = await socket.timeout(1000).emitWithAck(\"hello\", \"world\");\n} catch (err) {\n  // the server did not acknowledge the event in the given delay\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Socket.IO with Redis Engine\nDESCRIPTION: Example showing how to set up Socket.IO with Redis as the pub/sub mechanism. This allows for distributing Socket.IO across multiple servers or containers using Redis for communication.\nSOURCE: https://github.com/socketio/socket.io/blob/main/packages/socket.io-cluster-engine/README.md#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createServer } from \"node:http\";\nimport { createClient } from \"redis\";\nimport { RedisEngine } from \"@socket.io/cluster-engine\";\nimport { Server } from \"socket.io\";\n\nconst httpServer = createServer((req, res) => {\n  res.writeHead(404).end();\n});\n\nconst pubClient = createClient();\nconst subClient = pubClient.duplicate();\n\nawait Promise.all([\n  pubClient.connect(),\n  subClient.connect(),\n]);\n\nconst engine = new RedisEngine(pubClient, subClient);\n\nengine.attach(httpServer, {\n  path: \"/socket.io/\"\n});\n\nconst io = new Server();\n\nio.bind(engine);\n\nhttpServer.listen(3000);\n```\n\n----------------------------------------\n\nTITLE: Express Integration with Socket.IO\nDESCRIPTION: Shows how to integrate Socket.IO with an Express.js application server.\nSOURCE: https://github.com/socketio/socket.io/blob/main/packages/socket.io/Readme.md#2025-04-11_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst app = require('express')();\nconst server = require('http').createServer(app);\nconst io = require('socket.io')(server);\nio.on('connection', () => { /* … */ });\nserver.listen(3000);\n```\n\n----------------------------------------\n\nTITLE: Implementing JWT Authentication Middleware in Socket.IO Server\nDESCRIPTION: Server-side middleware that intercepts Socket.IO handshake requests and authenticates them using Passport-JWT strategy. Only applies authentication during the initial handshake.\nSOURCE: https://github.com/socketio/socket.io/blob/main/examples/passport-jwt-example/README.md#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nio.engine.use((req, res, next) => {\n  const isHandshake = req._query.sid === undefined;\n  if (isHandshake) {\n    passport.authenticate(\"jwt\", { session: false })(req, res, next);\n  } else {\n    next();\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Sending Event Data in Socket.IO (JSON)\nDESCRIPTION: Demonstrates the structure of a Socket.IO packet for sending event data, including the packet type, namespace, and data payload.\nSOURCE: https://github.com/socketio/socket.io/blob/main/docs/socket.io-protocol/v5-current.md#2025-04-11_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{ \"type\": EVENT, \"namespace\": \"/\", \"data\": [\"foo\"] }\n```\n\n----------------------------------------\n\nTITLE: Standalone Socket.IO Server\nDESCRIPTION: Shows how to create a standalone Socket.IO server instance.\nSOURCE: https://github.com/socketio/socket.io/blob/main/packages/socket.io/Readme.md#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst io = require('socket.io')();\nio.on('connection', client => { ... });\nio.listen(3000);\n```\n\n----------------------------------------\n\nTITLE: Implementing Socket.IO with Node.js Cluster\nDESCRIPTION: Example showing how to set up Socket.IO with the Node.js built-in cluster module. This code demonstrates creating worker processes across available CPUs and configuring them to share the Socket.IO load.\nSOURCE: https://github.com/socketio/socket.io/blob/main/packages/socket.io-cluster-engine/README.md#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport cluster from \"node:cluster\";\nimport process from \"node:process\";\nimport { availableParallelism } from \"node:os\";\nimport { setupPrimary, NodeClusterEngine } from \"@socket.io/cluster-engine\";\nimport { createServer } from \"node:http\";\nimport { Server } from \"socket.io\";\n\nif (cluster.isPrimary) {\n  console.log(`Primary ${process.pid} is running`);\n\n  const numCPUs = availableParallelism();\n\n  // fork workers\n  for (let i = 0; i < numCPUs; i++) {\n    cluster.fork();\n  }\n\n  // setup connection within the cluster\n  setupPrimary();\n\n  // needed for packets containing Buffer objects (you can ignore it if you only send plaintext objects)\n  cluster.setupPrimary({\n    serialization: \"advanced\",\n  });\n\n  cluster.on(\"exit\", (worker, code, signal) => {\n    console.log(`worker ${worker.process.pid} died`);\n  });\n} else {\n  const httpServer = createServer((req, res) => {\n    res.writeHead(404).end();\n  });\n\n  const engine = new NodeClusterEngine();\n\n  engine.attach(httpServer, {\n    path: \"/socket.io/\"\n  });\n\n  const io = new Server();\n\n  io.bind(engine);\n\n  // workers will share the same port\n  httpServer.listen(3000);\n\n  console.log(`Worker ${process.pid} started`);\n}\n```\n\n----------------------------------------\n\nTITLE: Basic HTTP Server Integration\nDESCRIPTION: Example of attaching Socket.IO to a plain Node.js HTTP server listening on port 3000.\nSOURCE: https://github.com/socketio/socket.io/blob/main/packages/socket.io/Readme.md#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst server = require('http').createServer();\nconst io = require('socket.io')(server);\nio.on('connection', client => {\n  client.on('event', data => { /* … */ });\n  client.on('disconnect', () => { /* … */ });\n});\nserver.listen(3000);\n```\n\n----------------------------------------\n\nTITLE: Declaring and Handling Server-side Namespace in Socket.IO\nDESCRIPTION: This code demonstrates how to declare a namespace on the server side and handle connections to it. Namespaces provide a way to multiplex connections over the same underlying WebSocket.\nSOURCE: https://github.com/socketio/socket.io/blob/main/docs/socket.io-protocol/v5-current.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// declare the namespace\nconst namespace = io.of(\"/admin\");\n// handle the connection to the namespace\nnamespace.on(\"connection\", (socket) => {\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Socket.IO with Passport Authentication Middleware\nDESCRIPTION: This code snippet demonstrates how to set up the Socket.IO server to work with Passport authentication. It creates a middleware function that only applies to the handshake request, checks for user authentication, and rejects unauthorized connection attempts with a 401 response.\nSOURCE: https://github.com/socketio/socket.io/blob/main/examples/passport-example/README.md#2025-04-11_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nfunction onlyForHandshake(middleware) {\n  return (req, res, next) => {\n    const isHandshake = req._query.sid === undefined;\n    if (isHandshake) {\n      middleware(req, res, next);\n    } else {\n      next();\n    }\n  };\n}\n\nio.engine.use(onlyForHandshake(sessionMiddleware));\nio.engine.use(onlyForHandshake(passport.session()));\nio.engine.use(\n  onlyForHandshake((req, res, next) => {\n    if (req.user) {\n      next();\n    } else {\n      res.writeHead(401);\n      res.end();\n    }\n  }),\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Namespacing in Socket.IO\nDESCRIPTION: Example of Socket.IO namespace implementation showing both server-side namespace creation and client-side connection to different namespaces.\nSOURCE: https://github.com/socketio/socket.io/blob/main/docs/socket.io-protocol/v3.md#2025-04-11_snippet_0\n\nLANGUAGE: js\nCODE:\n```\n// server-side\nconst nsp = io.of(\"/admin\");\nnsp.on(\"connect\", socket => {});\n\n// client-side\nconst socket1 = io(); // default namespace\nconst socket2 = io(\"/admin\");\nsocket2.on(\"connect\", () => {});\n```\n\n----------------------------------------\n\nTITLE: Koa Integration with Socket.IO\nDESCRIPTION: Demonstrates how to integrate Socket.IO with a Koa.js application server.\nSOURCE: https://github.com/socketio/socket.io/blob/main/packages/socket.io/Readme.md#2025-04-11_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst app = require('koa')();\nconst server = require('http').createServer(app.callback());\nconst io = require('socket.io')(server);\nio.on('connection', () => { /* … */ });\nserver.listen(3000);\n```\n\n----------------------------------------\n\nTITLE: ES Module Socket.IO Server\nDESCRIPTION: Demonstrates Socket.IO server initialization using ES module syntax.\nSOURCE: https://github.com/socketio/socket.io/blob/main/packages/socket.io/Readme.md#2025-04-11_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Server } from \"socket.io\";\nconst io = new Server(server);\nio.listen(3000);\n```\n\n----------------------------------------\n\nTITLE: Setting up Socket.IO WebTransport Example in Shell\nDESCRIPTION: This code snippet outlines the steps to set up and run a Socket.IO WebTransport example. It includes generating a self-signed certificate, installing dependencies, starting the server, and opening a Chrome browser.\nSOURCE: https://github.com/socketio/socket.io/blob/main/examples/webtransport/README.md#2025-04-11_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# generate a self-signed certificate\n$ ./generate_cert.sh\n\n# install dependencies\n$ npm i\n\n# start the server\n$ node index.js\n\n# open a Chrome browser\n$ ./open_chrome.sh\n```\n\n----------------------------------------\n\nTITLE: Implementing Socket.IO Acknowledgements\nDESCRIPTION: Demonstrates how to implement acknowledgment callbacks in Socket.IO communications between client and server.\nSOURCE: https://github.com/socketio/socket.io/blob/main/docs/socket.io-protocol/v4.md#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// on one side\nsocket.emit(\"hello\", 1, () => { console.log(\"received\"); });\n// on the other side\nsocket.on(\"hello\", (a, cb) => { cb(); });\n```\n\n----------------------------------------\n\nTITLE: Attaching Engine.IO to an HTTP Server\nDESCRIPTION: Demonstrates how to attach an Engine.IO server to an existing HTTP server, allowing it to intercept requests and handle WebSocket connections while providing event-based message handling.\nSOURCE: https://github.com/socketio/socket.io/blob/main/packages/engine.io/README.md#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst engine = require('engine.io');\nconst http = require('http').createServer().listen(3000);\nconst server = engine.attach(http);\n\nserver.on('connection', socket => {\n  socket.on('message', data => { });\n  socket.on('close', () => { });\n});\n```\n\n----------------------------------------\n\nTITLE: Broadcasting with Multiple Acknowledgements in Socket.IO\nDESCRIPTION: Example demonstrating how to broadcast an event with a timeout and handle multiple acknowledgements. The callback receives potential errors and responses.\nSOURCE: https://github.com/socketio/socket.io/blob/main/packages/socket.io/CHANGELOG.md#2025-04-11_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nio.timeout(1000).emit(\"some-event\", (err, responses) => {\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Starting the Socket.IO Chat Application with Docker Compose\nDESCRIPTION: Command to start the Socket.IO chat application using Docker Compose in detached mode. This launches four Socket.IO nodes behind an HAProxy load balancer with Redis for cross-node communication.\nSOURCE: https://github.com/socketio/socket.io/blob/main/examples/cluster-haproxy/README.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ docker-compose up -d\n```\n\n----------------------------------------\n\nTITLE: Checking Connection State Recovery Status in Socket.IO\nDESCRIPTION: Code example showing how to check if a Socket.IO connection has successfully recovered after a temporary disconnection. Uses the recovered property to determine the recovery status.\nSOURCE: https://github.com/socketio/socket.io/blob/main/packages/socket.io-client/CHANGELOG.md#2025-04-11_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nsocket.on(\"connect\", () => {\n  console.log(socket.recovered); // whether the recovery was successful\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Dynamic Namespaces with Regular Expressions in JavaScript\nDESCRIPTION: Shows how to define dynamic namespaces using regular expressions, allowing flexible namespace patterns without explicit creation of each namespace.\nSOURCE: https://github.com/socketio/socket.io/blob/main/packages/socket.io/CHANGELOG.md#2025-04-11_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nio.of(/^\\/dynamic-\\d+$/).on('connect', (socket) => {\n  // socket.nsp.name = '/dynamic-101'\n});\n\n// client-side\nconst client = require('socket.io-client')('/dynamic-101');\n```\n\n----------------------------------------\n\nTITLE: Connecting to Multiple Namespaces in Socket.IO Client\nDESCRIPTION: This example shows how to connect to both the main namespace and a custom namespace from a client. Multiple namespaces can share the same underlying WebSocket connection.\nSOURCE: https://github.com/socketio/socket.io/blob/main/docs/socket.io-protocol/v5-current.md#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// reach the main namespace\nconst socket1 = io();\n// reach the \"/admin\" namespace (with the same underlying WebSocket connection)\nconst socket2 = io(\"/admin\");\n// handle the connection to the namespace\nsocket2.on(\"connect\", () => {\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Sending and Receiving Binary Data with Engine.IO\nDESCRIPTION: Example of configuring Engine.IO for binary data transfer in the browser, including setting the binaryType and handling binary messages.\nSOURCE: https://github.com/socketio/socket.io/blob/main/packages/engine.io-client/README.md#2025-04-11_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"/path/to/engine.io.js\"></script>\n<script>\n  const socket = eio('ws://localhost/');\n  socket.binaryType = 'blob';\n  socket.on('open', () => {\n    socket.send(new Int8Array(5));\n    socket.on('message', (blob) => {});\n    socket.on('close', () => {});\n  });\n</script>\n```\n\n----------------------------------------\n\nTITLE: Implementing WebTransport Server in Socket.IO\nDESCRIPTION: Shows how to set up a Socket.IO server with WebTransport support using HTTPS and HTTP/3 servers. Requires certificate files and @fails-components/webtransport package.\nSOURCE: https://github.com/socketio/socket.io/blob/main/packages/socket.io/CHANGELOG.md#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { readFileSync } from \"fs\";\nimport { createServer } from \"https\";\nimport { Server } from \"socket.io\";\nimport { Http3Server } from \"@fails-components/webtransport\";\n\nconst cert = readFileSync(\"/path/to/my/cert.pem\");\nconst key = readFileSync(\"/path/to/my/key.pem\");\n\nconst httpsServer = createServer({\n  key,\n  cert\n});\n\nhttpsServer.listen(3000);\n\nconst io = new Server(httpsServer, {\n  transports: [\"polling\", \"websocket\", \"webtransport\"]\n});\n\nconst h3Server = new Http3Server({\n  port: 3000,\n  host: \"0.0.0.0\",\n  secret: \"changeit\",\n  cert,\n  privKey: key,\n});\n\n(async () => {\n  const stream = await h3Server.sessionStream(\"/socket.io/\");\n  const sessionReader = stream.getReader();\n\n  while (true) {\n    const { done, value } = await sessionReader.read();\n    if (done) {\n      break;\n    }\n    io.engine.onWebTransportSession(value);\n  }\n})();\n\nh3Server.startServer();\n```\n\n----------------------------------------\n\nTITLE: Installing and Starting Socket.IO Chat Demo\nDESCRIPTION: Commands to install dependencies and start the Socket.IO chat demo server. After running these commands, the chat application will be accessible at http://localhost:3000.\nSOURCE: https://github.com/socketio/socket.io/blob/main/examples/chat/README.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm i\n$ npm start\n```\n\n----------------------------------------\n\nTITLE: Updating Socket.join() Usage in JavaScript\nDESCRIPTION: Example showing the change in Socket.join() syntax from callback-based to synchronous/Promise-based operation. In version 3.0, the callback argument is no longer supported.\nSOURCE: https://github.com/socketio/socket.io/blob/main/packages/socket.io/CHANGELOG.md#2025-04-11_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// Before:\nsocket.join(\"room1\", () => {\n io.to(\"room1\").emit(\"hello\");\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// After:\nsocket.join(\"room1\");\nio.to(\"room1\").emit(\"hello\");\n// or await socket.join(\"room1\"); for custom adapters\n```\n\n----------------------------------------\n\nTITLE: Encoding Socket.IO Event Data\nDESCRIPTION: Shows how a Socket.IO event packet is encoded for transmission, with a compact representation of the packet type and data.\nSOURCE: https://github.com/socketio/socket.io/blob/main/docs/socket.io-protocol/v5-current.md#2025-04-11_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\n2[\"foo\"]\n```\n\n----------------------------------------\n\nTITLE: Enabling Debug Output for Socket.IO Client in JavaScript\nDESCRIPTION: This code snippet demonstrates how to enable debug output for the Socket.IO client in the browser. It sets the localStorage.debug property to '*' to show all client debug output.\nSOURCE: https://github.com/socketio/socket.io/blob/main/packages/socket.io-client/README.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nlocalStorage.debug = '*';\n```\n\n----------------------------------------\n\nTITLE: Importing Socket.IO Client as ES Module\nDESCRIPTION: This snippet shows how to import the Socket.IO client as an ES module using the new ESM bundle provided in version 4.3.0. It demonstrates creating a socket connection and emitting an event.\nSOURCE: https://github.com/socketio/socket.io/blob/main/packages/socket.io-client/CHANGELOG.md#2025-04-11_snippet_12\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"module\">\n  import { io } from \"https://cdn.socket.io/4.3.0/socket.io.esm.min.js\";\n\n  const socket = io();\n\n  socket.emit(\"hello\", \"world\");\n</script>\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Adapter in JavaScript\nDESCRIPTION: Example of implementing a custom adapter by extending the ClusterAdapterWithHeartbeat class. It shows how to set up pub/sub channels and implement required methods for publishing messages.\nSOURCE: https://github.com/socketio/socket.io/blob/main/packages/socket.io-adapter/CHANGELOG.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyAdapter extends ClusterAdapterWithHeartbeat {\n  constructor(nsp, pubSub, opts) {\n    super(nsp, opts);\n    this.pubSub = pubSub;\n    pubSub.subscribe(\"main-channel\", (message) => this.onMessage(message));\n    pubSub.subscribe(\"specific-channel#\" + this.uid, (response) => this.onResponse(response));\n  }\n\n  doPublish(message) {\n    return this.pubSub.publish(\"main-channel\", message);\n  }\n\n  doPublishResponse(requesterUid, response) {\n    return this.pubSub.publish(\"specific-channel#\" + requesterUid, response);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Socket.IO Namespace Connection\nDESCRIPTION: Example showing how to create and connect to Socket.IO namespaces on both server and client sides.\nSOURCE: https://github.com/socketio/socket.io/blob/main/docs/socket.io-protocol/v4.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// server-side\nconst nsp = io.of(\"/admin\");\nnsp.on(\"connect\", socket => {});\n\n// client-side\nconst socket1 = io(); // default namespace\nconst socket2 = io(\"/admin\");\nsocket2.on(\"connect\", () => {});\n```\n\n----------------------------------------\n\nTITLE: Implementing Catch-all Outgoing Packet Listener in Socket.IO\nDESCRIPTION: Example showing how to implement a catch-all listener for outgoing packets using onAnyOutgoing() method. The listener receives the event name and arguments.\nSOURCE: https://github.com/socketio/socket.io/blob/main/packages/socket.io/CHANGELOG.md#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nsocket.onAnyOutgoing((event, ...args) => {\n  console.log(event);\n});\n```\n\n----------------------------------------\n\nTITLE: Setting up Socket.IO Cluster with Redis\nDESCRIPTION: Commands to start the Redis server and run the server and client scripts for a Socket.IO cluster demonstration. The setup uses Docker Compose to run Redis and includes commands to start both the server and client components.\nSOURCE: https://github.com/socketio/socket.io/blob/main/examples/cluster-engine-redis/README.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# start the redis server\n$ docker compose up -d\n\n# run the server\n$ node server.js\n\n# run the client\n$ node client.js\n```\n\n----------------------------------------\n\nTITLE: HTTP Handshake in Socket.IO Session\nDESCRIPTION: Demonstrates the initial HTTP handshake in a Socket.IO session, including the request and response with Engine.IO handshake data.\nSOURCE: https://github.com/socketio/socket.io/blob/main/docs/socket.io-protocol/v5-current.md#2025-04-11_snippet_15\n\nLANGUAGE: http\nCODE:\n```\nGET /socket.io/?EIO=4&transport=polling&t=N8hyd6w\n< HTTP/1.1 200 OK\n< Content-Type: text/plain; charset=UTF-8\n0{\"sid\":\"lv_VI97HAXpY6yYWAAAC\",\"upgrades\":[\"websocket\"],\"pingInterval\":25000,\"pingTimeout\":5000,\"maxPayload\":1000000}\n```\n\n----------------------------------------\n\nTITLE: Setting Binary Flag for Improved Performance in JavaScript\nDESCRIPTION: Example of using the binary flag to skip recursive scanning of objects for binary data, which can improve performance when emitting plain objects.\nSOURCE: https://github.com/socketio/socket.io/blob/main/packages/socket.io/CHANGELOG.md#2025-04-11_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n// by default, the object is recursively scanned to check whether it contains some binary data\n// in the following example, the check is skipped in order to improve performance\nsocket.binary(false).emit('plain-object', object);\n\n// it also works at the namespace level\nio.binary(false).emit('plain-object', object);\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Transport Implementations in Socket.io Client\nDESCRIPTION: This snippet demonstrates how to use custom transport implementations in Socket.io client by providing an array of transport implementations to the 'transports' option when establishing a connection.\nSOURCE: https://github.com/socketio/socket.io/blob/main/packages/socket.io-client/CHANGELOG.md#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { io } from \"socket.io-client\";\nimport { XHR, WebSocket } from \"engine.io-client\";\n\nconst socket = io({\n  transports: [XHR, WebSocket]\n});\n```\n\n----------------------------------------\n\nTITLE: Using Engine.IO Client with Custom Headers in Node.js\nDESCRIPTION: Shows how to add custom headers to Engine.IO client connections in Node.js, which can be useful for authentication or session management.\nSOURCE: https://github.com/socketio/socket.io/blob/main/packages/engine.io-client/README.md#2025-04-11_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst opts = {\n  extraHeaders: {\n    'X-Custom-Header-For-My-Project': 'my-secret-access-token',\n    'Cookie': 'user_session=NI2JlCKF90aE0sJZD9ZzujtdsUqNYSBYxzlTsvdSUe35ZzdtVRGqYFr0kdGxbfc5gUOkR9RGp20GVKza; path=/; expires=Tue, 07-Apr-2015 18:18:08 GMT; secure; HttpOnly'\n  }\n};\n\nconst { Socket } = require('engine.io-client');\nconst socket = new Socket('ws://localhost', opts);\nsocket.on('open', () => {\n  socket.on('message', (data) => {});\n  socket.on('close', () => {});\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Engine.IO Server on a Port\nDESCRIPTION: Creates an Engine.IO server instance that listens on a specified port, allowing the server to accept connections and send both UTF-8 strings and binary data to clients.\nSOURCE: https://github.com/socketio/socket.io/blob/main/packages/engine.io/README.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst engine = require('engine.io');\nconst server = engine.listen(80);\n\nserver.on('connection', socket => {\n  socket.send('utf 8 string');\n  socket.send(Buffer.from([0, 1, 2, 3, 4, 5])); // binary data\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Timeout Feature in Socket.IO Client\nDESCRIPTION: This code demonstrates how to use the new timeout feature added in version 4.4.0. It allows setting a timeout for emitted events and handling cases where the server does not acknowledge within the specified time.\nSOURCE: https://github.com/socketio/socket.io/blob/main/packages/socket.io-client/CHANGELOG.md#2025-04-11_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nsocket.timeout(5000).emit(\"my-event\", (err) => {\n  if (err) {\n    // the server did not acknowledge the event in the given delay\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Heartbeat Diagram - Engine.IO Protocol\nDESCRIPTION: Illustrates the heartbeat mechanism between client and server after handshake completion, showing ping and pong packet exchange used to verify connection liveness.\nSOURCE: https://github.com/socketio/socket.io/blob/main/docs/engine.io-protocol/v4-current.md#2025-04-11_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\nCLIENT                                                 SERVER\n\n  │                   *** Handshake ***                  │\n  │                                                      │\n  │  ◄─────────────────────────────────────────────────  │\n  │                           2                          │  (ping packet)\n  │  ─────────────────────────────────────────────────►  │\n  │                           3                          │  (pong packet)\n```\n\n----------------------------------------\n\nTITLE: Implementing Acknowledgements in Socket.IO\nDESCRIPTION: This code demonstrates how to use acknowledgements in Socket.IO, which allow the sender to receive confirmation and additional data from the receiver when a message is processed.\nSOURCE: https://github.com/socketio/socket.io/blob/main/docs/socket.io-protocol/v5-current.md#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// on one side\nsocket.emit(\"hello\", \"foo\", (arg) => {\n  console.log(\"received\", arg);\n});\n\n// on the other side\nsocket.on(\"hello\", (arg, ack) => {\n  ack(\"bar\");\n});\n```\n\n----------------------------------------\n\nTITLE: Attaching Engine.IO to HTTP Server with Custom WebSocket Engine\nDESCRIPTION: Demonstrates attaching an Engine.IO server to an existing HTTP server with a custom WebSocket engine implementation, allowing for alternative WebSocket backends.\nSOURCE: https://github.com/socketio/socket.io/blob/main/packages/engine.io/README.md#2025-04-11_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst engine = require('engine.io');\nconst httpServer = require('http').createServer().listen(3000);\nconst server = engine.attach(httpServer, {\n  wsEngine: require('eiows').Server // requires having eiows as dependency\n});\n\nserver.on('connection', /* ... */);\n```\n\n----------------------------------------\n\nTITLE: Installing Socket.IO Cluster Engine via NPM\nDESCRIPTION: Command to install the @socket.io/cluster-engine package using npm, which is required to enable cluster support for Socket.IO.\nSOURCE: https://github.com/socketio/socket.io/blob/main/packages/socket.io-cluster-engine/README.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @socket.io/cluster-engine\n```\n\n----------------------------------------\n\nTITLE: Basic Parser Usage Example in JavaScript\nDESCRIPTION: Demonstrates basic usage of engine.io-parser to encode and decode packets with binary data using Buffer.\nSOURCE: https://github.com/socketio/socket.io/blob/main/packages/engine.io-parser/Readme.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst parser = require(\"engine.io-parser\");\nconst data = Buffer.from([ 1, 2, 3, 4 ]);\n\nparser.encodePacket({ type: \"message\", data }, encoded => {\n  const decodedData = parser.decodePacket(encoded); // decodedData === data\n});\n```\n\n----------------------------------------\n\nTITLE: Sending Binary Event Data in Socket.IO (JSON)\nDESCRIPTION: Shows the structure of a Socket.IO packet for sending binary event data, including the binary event type, namespace, and a mix of string and binary data.\nSOURCE: https://github.com/socketio/socket.io/blob/main/docs/socket.io-protocol/v5-current.md#2025-04-11_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{ \"type\": BINARY_EVENT, \"namespace\": \"/\", \"data\": [\"baz\", <Buffer <01 02 03 04>> ] }\n```\n\n----------------------------------------\n\nTITLE: Stopping a Specific Node in the Socket.IO Cluster\nDESCRIPTION: Command to stop a specific Socket.IO node for testing failover capabilities. When a node is stopped, clients should automatically reconnect to another available node in the cluster.\nSOURCE: https://github.com/socketio/socket.io/blob/main/examples/cluster-haproxy/README.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ docker-compose stop server-george\n```\n\n----------------------------------------\n\nTITLE: Creating a Standalone Engine.IO Server with Configuration Options\nDESCRIPTION: Creates an Engine.IO server that listens on a specified port with custom ping timeout and interval configurations for connection maintenance.\nSOURCE: https://github.com/socketio/socket.io/blob/main/packages/engine.io/README.md#2025-04-11_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst engine = require('engine.io');\nconst server = engine.listen(3000, {\n  pingTimeout: 2000,\n  pingInterval: 10000\n});\n\nserver.on('connection', /* ... */);\n```\n\n----------------------------------------\n\nTITLE: Configuring Vite for Socket.IO Debugging with Conditional Import\nDESCRIPTION: Vite configuration to enable debug logs in Socket.IO by using conditional imports. Sets up the development condition to load the build that includes debug packages.\nSOURCE: https://github.com/socketio/socket.io/blob/main/packages/socket.io-client/CHANGELOG.md#2025-04-11_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { defineConfig } from 'vite'\nimport react from '@vitejs/plugin-react'\n\nexport default defineConfig({\n  plugins: [react()],\n  server: {\n    port: 4000\n  },\n  resolve: {\n    conditions: [\"development\"]\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Using allowRequest Option for Origin Validation in JavaScript\nDESCRIPTION: Demonstrates how to use the allowRequest option for validating connection requests based on request headers, as an alternative to the removed 'origins' option.\nSOURCE: https://github.com/socketio/socket.io/blob/main/packages/socket.io/CHANGELOG.md#2025-04-11_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nnew Server(3000, {\n  allowRequest: (req, callback) => {\n    callback(null, req.headers.referer.startsWith(\"https://example.com\"));\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Fastify Integration with Socket.IO\nDESCRIPTION: Shows how to integrate Socket.IO with a Fastify application using the fastify-socket.io plugin.\nSOURCE: https://github.com/socketio/socket.io/blob/main/packages/socket.io/Readme.md#2025-04-11_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst app = require('fastify')();\napp.register(require('fastify-socket.io'));\napp.ready().then(() => {\n    app.io.on('connection', () => { /* … */ });\n})\napp.listen(3000);\n```\n\n----------------------------------------\n\nTITLE: Starting Docker Containers for Chat Application\nDESCRIPTION: Command to start the Socket.IO nodes, Nginx proxy, and Redis backend using Docker Compose.\nSOURCE: https://github.com/socketio/socket.io/blob/main/examples/cluster-nginx/README.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ docker-compose up -d\n```\n\n----------------------------------------\n\nTITLE: Running the Socket.io Connection State Recovery Example in Shell\nDESCRIPTION: A shell script showing how to run the Socket.io connection state recovery example. It guides users through choosing the module syntax, installing dependencies, and starting the server.\nSOURCE: https://github.com/socketio/socket.io/blob/main/examples/connection-state-recovery-example/README.md#2025-04-11_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# choose your module syntax (either ES modules or CommonJS)\n$ cd esm/\n\n# install the dependencies\n$ npm i\n\n# start the server\n$ node index.js\n```\n\n----------------------------------------\n\nTITLE: Using Engine.IO Client Standalone in Browser\nDESCRIPTION: Demonstrates how to use the Engine.IO client in a standalone browser implementation by including the engine.io.js file and initializing a socket connection.\nSOURCE: https://github.com/socketio/socket.io/blob/main/packages/engine.io-client/README.md#2025-04-11_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"/path/to/engine.io.js\"></script>\n<script>\n  // eio = Socket\n  const socket = eio('ws://localhost');\n  socket.on('open', () => {\n    socket.on('message', (data) => {});\n    socket.on('close', () => {});\n  });\n</script>\n```\n\n----------------------------------------\n\nTITLE: Encoding Socket.IO Binary Event Data\nDESCRIPTION: Illustrates how a Socket.IO binary event packet is encoded, using placeholders for binary data and separating the binary content.\nSOURCE: https://github.com/socketio/socket.io/blob/main/docs/socket.io-protocol/v5-current.md#2025-04-11_snippet_8\n\nLANGUAGE: plaintext\nCODE:\n```\n51-[\"baz\",{\"_placeholder\":true,\"num\":0}]\n\n+ <Buffer <01 02 03 04>>\n```\n\n----------------------------------------\n\nTITLE: Testing Low-level Transports in Socket.IO\nDESCRIPTION: Demonstrates how to enable testing of all transport options when the first transport fails by setting tryAllTransports to true. Useful when HTTP long-polling is disabled or CORS fails.\nSOURCE: https://github.com/socketio/socket.io/blob/main/packages/engine.io-client/CHANGELOG.md#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Socket } from \"engine.io-client\";\n\nconst socket = new Socket({\n  tryAllTransports: true\n});\n```\n\n----------------------------------------\n\nTITLE: Using Binary Flag in Socket.IO Emit\nDESCRIPTION: Example of using the 'binary' flag when emitting events in Socket.IO client to skip binary data checks for performance optimization.\nSOURCE: https://github.com/socketio/socket.io/blob/main/packages/socket.io-client/CHANGELOG.md#2025-04-11_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\n// by default, the object is recursively scanned to check whether it contains some binary data\n// in the following example, the check is skipped in order to improve performance\nsocket.binary(false).emit('plain-object', object);\n```\n\n----------------------------------------\n\nTITLE: WebSocket Packet Format - Engine.IO Protocol\nDESCRIPTION: Defines the format for packets in WebSocket transport, showing the simple structure of packet type followed by optional data in a single WebSocket frame.\nSOURCE: https://github.com/socketio/socket.io/blob/main/docs/engine.io-protocol/v4-current.md#2025-04-11_snippet_10\n\nLANGUAGE: plaintext\nCODE:\n```\n<packet type>[<data>]\n```\n\n----------------------------------------\n\nTITLE: Encoding Socket.IO Event with Multiple Binary Attachments\nDESCRIPTION: Shows the encoded format of a Socket.IO event with multiple binary attachments, using placeholders and separate binary buffers.\nSOURCE: https://github.com/socketio/socket.io/blob/main/docs/socket.io-protocol/v5-current.md#2025-04-11_snippet_10\n\nLANGUAGE: plaintext\nCODE:\n```\n52-/admin,[\"baz\",{\"_placeholder\":true,\"num\":0},{\"_placeholder\":true,\"num\":1}]\n\n+ <Buffer <01 02>>\n+ <Buffer <03 04>>\n```\n\n----------------------------------------\n\nTITLE: Configuring WebTransport Server in Node.js\nDESCRIPTION: Example showing how to set up a WebTransport server using Engine.IO with HTTPS and HTTP/3 support. Includes certificate configuration and session handling.\nSOURCE: https://github.com/socketio/socket.io/blob/main/packages/engine.io/CHANGELOG.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { readFileSync } from \"fs\";\nimport { createServer } from \"https\";\nimport { Server } from \"engine.io\";\nimport { Http3Server } from \"@fails-components/webtransport\";\n\n// WARNING: the total length of the validity period MUST NOT exceed two weeks (https://w3c.github.io/webtransport/#custom-certificate-requirements)\nconst cert = readFileSync(\"/path/to/my/cert.pem\");\nconst key = readFileSync(\"/path/to/my/key.pem\");\n\nconst httpsServer = createServer({\n  key,\n  cert\n});\n\nhttpsServer.listen(3000);\n\nconst engine = new Server({\n  transports: [\"polling\", \"websocket\", \"webtransport\"] // WebTransport is not enabled by default\n});\n\nengine.attach(httpsServer);\n\nconst h3Server = new Http3Server({\n  port: 3000,\n  host: \"0.0.0.0\",\n  secret: \"changeit\",\n  cert,\n  privKey: key,\n});\n\n(async () => {\n  const stream = await h3Server.sessionStream(\"/engine.io/\");\n  const sessionReader = stream.getReader();\n\n  while (true) {\n    const { done, value } = await sessionReader.read();\n    if (done) {\n      break;\n    }\n    engine.onWebTransportSession(value);\n  }\n})();\n\nh3Server.startServer();\n```\n\n----------------------------------------\n\nTITLE: JSON Structure for CONNECT Packet with Authentication in Socket.IO\nDESCRIPTION: Example of a CONNECT packet with additional authentication parameters in the namespace field, used for secure connections to Socket.IO namespaces.\nSOURCE: https://github.com/socketio/socket.io/blob/main/docs/socket.io-protocol/v3.md#2025-04-11_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": 0,\n  \"nsp\": \"/admin?token=1234&uid=abcd\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Engine.IO Client with NPM\nDESCRIPTION: Shows how to install the Engine.IO client package using npm for use with browserify.\nSOURCE: https://github.com/socketio/socket.io/blob/main/packages/engine.io-client/README.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install engine.io-client\n```\n\n----------------------------------------\n\nTITLE: Disabling Trailing Slash in Socket.IO Connection URL\nDESCRIPTION: Example of using the addTrailingSlash option to disable the default trailing slash in Socket.IO connection URLs. This affects the request URL format used for connections.\nSOURCE: https://github.com/socketio/socket.io/blob/main/packages/socket.io-client/CHANGELOG.md#2025-04-11_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { io } from \"socket.io-client\";\n\nconst socket = io(\"https://example.com\", {\n  addTrailingSlash: false\n});\n```\n\n----------------------------------------\n\nTITLE: Encoding and Decoding a Packet in JavaScript using socket.io-parser\nDESCRIPTION: This snippet demonstrates how to use the socket.io-parser to encode a packet and then decode it. It shows the creation of an encoder and decoder, encoding a packet, and handling the decoded result.\nSOURCE: https://github.com/socketio/socket.io/blob/main/packages/socket.io-parser/Readme.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar parser = require('socket.io-parser');\nvar encoder = new parser.Encoder();\nvar packet = {\n  type: parser.EVENT,\n  data: 'test-packet',\n  id: 13\n};\nencoder.encode(packet, function(encodedPackets) {\n  var decoder = new parser.Decoder();\n  decoder.on('decoded', function(decodedPacket) {\n    // decodedPacket.type == parser.EVENT\n    // decodedPacket.data == 'test-packet'\n    // decodedPacket.id == 13\n  });\n\n  for (var i = 0; i < encodedPackets.length; i++) {\n    decoder.add(encodedPackets[i]);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: JSON Structure for ACK Packet Type in Socket.IO\nDESCRIPTION: Example of an ACK packet type (code 3) for Socket.IO protocol, used to acknowledge receipt of a packet with an acknowledgement ID.\nSOURCE: https://github.com/socketio/socket.io/blob/main/docs/socket.io-protocol/v3.md#2025-04-11_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": 3,\n  \"nsp\": \"/admin\",\n  \"data\": [],\n  \"id\": 456\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Engine.IO Client in Browser\nDESCRIPTION: Client-side implementation of Engine.IO that creates a WebSocket connection to the server and sets up event handlers for connection opening, messages, and connection closing.\nSOURCE: https://github.com/socketio/socket.io/blob/main/packages/engine.io/README.md#2025-04-11_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"/path/to/engine.io.js\"></script>\n<script>\n  const socket = new eio.Socket('ws://localhost/');\n  socket.on('open', () => {\n    socket.on('message', data => {});\n    socket.on('close', () => {});\n  });\n</script>\n```\n\n----------------------------------------\n\nTITLE: Running Socket.IO Cluster Example with Node.js\nDESCRIPTION: Commands to run the Socket.IO server and client in a cluster setup. The server script creates multiple Socket.IO servers, one per core, all listening on port 3000. The client script connects to these servers.\nSOURCE: https://github.com/socketio/socket.io/blob/main/examples/cluster-engine-node-cluster/README.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# run the server\n$ node server.js\n\n# run the client\n$ node client.js\n```\n\n----------------------------------------\n\nTITLE: JSON Structure for EVENT Packet Type in Socket.IO\nDESCRIPTION: Example of an EVENT packet type (code 2) for Socket.IO protocol, showing the JSON structure for transmitting data without binary content.\nSOURCE: https://github.com/socketio/socket.io/blob/main/docs/socket.io-protocol/v3.md#2025-04-11_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": 2,\n  \"nsp\": \"/\",\n  \"data\": [\"hello\", 1]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Retry Mechanism in Socket.IO\nDESCRIPTION: Examples of configuring the retry mechanism in Socket.IO, including setting maximum retry attempts and acknowledgement timeouts. Shows different ways to use the retry functionality with events.\nSOURCE: https://github.com/socketio/socket.io/blob/main/packages/socket.io-client/CHANGELOG.md#2025-04-11_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst socket = io({\n  retries: 3,\n  ackTimeout: 10000\n});\n\n// implicit ack\nsocket.emit(\"my-event\");\n\n// explicit ack\nsocket.emit(\"my-event\", (err, val) => { /* ... */ });\n\n// custom timeout (in that case the ackTimeout is optional)\nsocket.timeout(5000).emit(\"my-event\", (err, val) => { /* ... */ });\n```\n\n----------------------------------------\n\nTITLE: Handling Connect Error Events in Socket.IO\nDESCRIPTION: Example of updating error event handling in Socket.IO client from version 2 to version 3. The 'error' event was renamed to 'connect_error'.\nSOURCE: https://github.com/socketio/socket.io/blob/main/packages/socket.io-client/CHANGELOG.md#2025-04-11_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\n// before\nsocket.on(\"error\", () => {});\n\n// after\nsocket.on(\"connect_error\", () => {});\n```\n\n----------------------------------------\n\nTITLE: Socket.IO Client-to-Server Messages\nDESCRIPTION: Example of multiple client-side emit events being sent to the server.\nSOURCE: https://github.com/socketio/socket.io/blob/main/docs/socket.io-protocol/v4.md#2025-04-11_snippet_6\n\nLANGUAGE: plaintext\nCODE:\n```\nPOST /socket.io/?EIO=3&transport=polling&t=N8hzxke&sid=lv_VI97HAXpY6yYWAAAC\n> Content-Type: text/plain; charset=UTF-8\n11:42[\"hello\"]11:42[\"world\"]\n< HTTP/1.1 200 OK\n< Content-Type: text/plain; charset=UTF-8\nok\n```\n\n----------------------------------------\n\nTITLE: Accessing Manager Events in Socket.IO v3\nDESCRIPTION: Example of how to access Manager events in Socket.IO client version 3, as they are no longer forwarded by the Socket instance.\nSOURCE: https://github.com/socketio/socket.io/blob/main/packages/socket.io-client/CHANGELOG.md#2025-04-11_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nsocket.io.on(\"reconnect\", () => {\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Sending Event Data with Custom Namespace (JSON)\nDESCRIPTION: Illustrates a Socket.IO packet structure for sending event data to a custom namespace, including the packet type, custom namespace, and data payload.\nSOURCE: https://github.com/socketio/socket.io/blob/main/docs/socket.io-protocol/v5-current.md#2025-04-11_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{ \"type\": EVENT, \"namespace\": \"/admin\", \"data\": [\"bar\"] }\n```\n\n----------------------------------------\n\nTITLE: Manually Handling Engine.IO HTTP/WebSocket Requests\nDESCRIPTION: Shows how to manually handle HTTP and WebSocket upgrade requests with an Engine.IO server, providing fine-grained control over the connection process.\nSOURCE: https://github.com/socketio/socket.io/blob/main/packages/engine.io/README.md#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst engine = require('engine.io');\nconst server = new engine.Server();\n\nserver.on('connection', socket => {\n  socket.send('hi');\n});\n\n// …\nhttpServer.on('upgrade', (req, socket, head) => {\n  server.handleUpgrade(req, socket, head);\n});\n\nhttpServer.on('request', (req, res) => {\n  server.handleRequest(req, res);\n});\n```\n\n----------------------------------------\n\nTITLE: Browser Usage with Transport Options\nDESCRIPTION: Examples showing how to configure transport options in browsers, with notes on what will and won't work due to browser WebSocket limitations.\nSOURCE: https://github.com/socketio/socket.io/blob/main/packages/engine.io-client/README.md#2025-04-11_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n// WILL NOT WORK in the browser\nconst socket = new Socket('http://localhost', {\n  extraHeaders: {\n    'X-Custom-Header-For-My-Project': 'will not be sent'\n  }\n});\n// WILL NOT WORK\nconst socket = new Socket('http://localhost', {\n  transports: ['websocket'], // polling is disabled\n  transportOptions: {\n    polling: {\n      extraHeaders: {\n        'X-Custom-Header-For-My-Project': 'will not be sent'\n      }\n    }\n  }\n});\n// WILL WORK\nconst socket = new Socket('http://localhost', {\n  transports: ['polling', 'websocket'],\n  transportOptions: {\n    polling: {\n      extraHeaders: {\n        'X-Custom-Header-For-My-Project': 'will be used'\n      }\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Illustrating HTTP POST Request for Sending Data\nDESCRIPTION: Diagram showing the communication flow when a client sends data to the server via HTTP long-polling, including the POST request with query parameters and the server's 200 response with 'ok' in the body.\nSOURCE: https://github.com/socketio/socket.io/blob/main/docs/engine.io-protocol/v4-current.md#2025-04-11_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nCLIENT                                                 SERVER\n\n  │                                                      │\n  │   POST /engine.io/?EIO=4&transport=polling&sid=...   │\n  │ ───────────────────────────────────────────────────► │\n  │ ◄──────────────────────────────────────────────────┘ │\n  │                        HTTP 200                      │\n  │                                                      │\n```\n\n----------------------------------------\n\nTITLE: Implementing Event Acknowledgement in Socket.IO\nDESCRIPTION: Example of Socket.IO event acknowledgement where one side emits an event with a callback function and the other side receives and acknowledges it.\nSOURCE: https://github.com/socketio/socket.io/blob/main/docs/socket.io-protocol/v3.md#2025-04-11_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n// on one side\nsocket.emit(\"hello\", 1, () => { console.log(\"received\"); });\n// on the other side\nsocket.on(\"hello\", (a, cb) => { cb(); });\n```\n\n----------------------------------------\n\nTITLE: Using Catch-all Listeners for Outgoing Packets in Socket.IO\nDESCRIPTION: Demonstrates how to use the onAnyOutgoing method to set up a catch-all listener for all outgoing packets in Socket.IO, similar to the onAny method for incoming events.\nSOURCE: https://github.com/socketio/socket.io/blob/main/packages/socket.io-client/CHANGELOG.md#2025-04-11_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nsocket.onAnyOutgoing((event, ...args) => {\n  console.log(event);\n});\n```\n\n----------------------------------------\n\nTITLE: WebSocket Packet Example - Engine.IO Protocol\nDESCRIPTION: Example of a message packet in WebSocket transport, showing the packet type followed by UTF-8 encoded payload.\nSOURCE: https://github.com/socketio/socket.io/blob/main/docs/engine.io-protocol/v4-current.md#2025-04-11_snippet_11\n\nLANGUAGE: plaintext\nCODE:\n```\n4hello\n\nwith:\n\n4      => message packet type\nhello  => message payload (UTF-8 encoded)\n```\n\n----------------------------------------\n\nTITLE: Handling Disconnect Events with Additional Details in Socket.IO\nDESCRIPTION: Example of capturing and handling disconnect events with additional error details in Socket.IO. Shows how to access error information when a transport error occurs during HTTP long-polling.\nSOURCE: https://github.com/socketio/socket.io/blob/main/packages/socket.io-client/CHANGELOG.md#2025-04-11_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nsocket.on(\"disconnect\", (reason, details) => {\n  console.log(reason); // \"transport error\"\n\n  // in that case, details is an error object\n  console.log(details.message); \"xhr post error\"\n  console.log(details.description); // 413 (the HTTP status of the response)\n\n  // details.context refers to the XMLHttpRequest object\n  console.log(details.context.status); // 413\n  console.log(details.context.responseText); // \"\"\n});\n```\n\n----------------------------------------\n\nTITLE: Using Emitter as an instance in JavaScript\nDESCRIPTION: Example of creating and using an Emitter instance to emit events.\nSOURCE: https://github.com/socketio/socket.io/blob/main/packages/socket.io-component-emitter/Readme.md#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Emitter } from '@socket.io/component-emitter';\n\nvar emitter = new Emitter;\nemitter.emit('something');\n```\n\n----------------------------------------\n\nTITLE: Encoding Socket.IO Disconnection\nDESCRIPTION: Illustrates the encoded format of a Socket.IO disconnection packet for the main namespace.\nSOURCE: https://github.com/socketio/socket.io/blob/main/docs/socket.io-protocol/v5-current.md#2025-04-11_snippet_14\n\nLANGUAGE: plaintext\nCODE:\n```\n1\n```\n\n----------------------------------------\n\nTITLE: Creating an Engine.IO Server with Multiple Initialization Methods\nDESCRIPTION: Shows different ways to instantiate an Engine.IO server and attach it to an HTTP server, demonstrating equivalent approaches with and without custom options.\nSOURCE: https://github.com/socketio/socket.io/blob/main/packages/engine.io/README.md#2025-04-11_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst httpServer; // previously created with `http.createServer();` from node.js api.\n\n// create a server first, and then attach\nconst eioServer = require('engine.io').Server();\neioServer.attach(httpServer);\n\n// or call the module as a function to get `Server`\nconst eioServer = require('engine.io')();\neioServer.attach(httpServer);\n\n// immediately attach\nconst eioServer = require('engine.io')(httpServer);\n\n// with custom options\nconst eioServer = require('engine.io')(httpServer, {\n  maxHttpBufferSize: 1e3\n});\n```\n\n----------------------------------------\n\nTITLE: Socket.IO Server-to-Client Message\nDESCRIPTION: Example of a server emitting an event to the client with payload data.\nSOURCE: https://github.com/socketio/socket.io/blob/main/docs/socket.io-protocol/v4.md#2025-04-11_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\nGET /socket.io/?EIO=3&transport=polling&t=N8hyd7H&sid=lv_VI97HAXpY6yYWAAAC\n< HTTP/1.1 200 OK\n< Content-Type: text/plain; charset=UTF-8\n16:42[\"hey\",\"Jude\"]\n```\n\n----------------------------------------\n\nTITLE: Using Emitter as a mixin in JavaScript\nDESCRIPTION: Example of using Emitter as a mixin to add event emitting capabilities to a plain object.\nSOURCE: https://github.com/socketio/socket.io/blob/main/packages/socket.io-component-emitter/Readme.md#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Emitter } from '@socket.io/component-emitter';\n\nvar user = { name: 'tobi' };\nEmitter(user);\n\nuser.emit('im a user');\n```\n\n----------------------------------------\n\nTITLE: Using Engine.IO Client in Node.js with SSL Certificates\nDESCRIPTION: Demonstrates how to configure Engine.IO client in Node.js with SSL certificates for secure WebSocket connections.\nSOURCE: https://github.com/socketio/socket.io/blob/main/packages/engine.io-client/README.md#2025-04-11_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst opts = {\n  key: fs.readFileSync('test/fixtures/client.key'),\n  cert: fs.readFileSync('test/fixtures/client.crt'),\n  ca: fs.readFileSync('test/fixtures/ca.crt')\n};\n\nconst { Socket } = require('engine.io-client');\nconst socket = new Socket('ws://localhost', opts);\nsocket.on('open', () => {\n  socket.on('message', (data) => {});\n  socket.on('close', () => {});\n});\n```\n\n----------------------------------------\n\nTITLE: Socket.IO Initial Handshake Request\nDESCRIPTION: Example of an initial handshake request and response showing the Engine.IO open packet format with session establishment and upgrade options.\nSOURCE: https://github.com/socketio/socket.io/blob/main/docs/socket.io-protocol/v4.md#2025-04-11_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nGET /socket.io/?EIO=3&transport=polling&t=N8hyd6w\n< HTTP/1.1 200 OK\n< Content-Type: text/plain; charset=UTF-8\n96:0{\"sid\":\"lv_VI97HAXpY6yYWAAAC\",\"upgrades\":[\"websocket\"],\"pingInterval\":25000,\"pingTimeout\":5000}2:40\n```\n\n----------------------------------------\n\nTITLE: Configuring Cookies in Engine.io 4.x\nDESCRIPTION: Demonstrates the new cookie configuration syntax in Engine.io 4.0, which provides more structured options and supports additional cookie attributes.\nSOURCE: https://github.com/socketio/socket.io/blob/main/packages/engine.io/CHANGELOG.md#2025-04-11_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nnew Server({\n  cookie: {\n    name: \"test\",\n    httpOnly: false,\n    path: \"/custom\"\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Replacing 'origins' Option with CORS Configuration in JavaScript\nDESCRIPTION: Shows how to migrate from the removed 'origins' option to the new CORS configuration option when creating a Socket.IO server.\nSOURCE: https://github.com/socketio/socket.io/blob/main/packages/socket.io/CHANGELOG.md#2025-04-11_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// Before:\nnew Server(3000, {\n  origins: [\"https://example.com\"]\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// After:\nnew Server(3000, {\n  cors: {\n    origin: \"https://example.com\",\n    methods: [\"GET\", \"POST\"],\n    allowedHeaders: [\"content-type\"]\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Socket.IO Acknowledgement Packet (JSON)\nDESCRIPTION: Illustrates the structure of a Socket.IO acknowledgement packet, including the event type, namespace, data payload, and acknowledgement ID.\nSOURCE: https://github.com/socketio/socket.io/blob/main/docs/socket.io-protocol/v5-current.md#2025-04-11_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{ \"type\": EVENT, \"namespace\": \"/\", \"data\": [\"foo\"], \"id\": 12 }\n```\n\n----------------------------------------\n\nTITLE: Legacy WebSocket Engine Configuration (Pre-v5.0.0)\nDESCRIPTION: The previous syntax for configuring a custom WebSocket engine in Engine.io before v5.0.0, which used a string reference instead of requiring the module directly.\nSOURCE: https://github.com/socketio/socket.io/blob/main/packages/engine.io/CHANGELOG.md#2025-04-11_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst eioServer = require(\"engine.io\")(httpServer, {\n  wsEngine: \"eiows\"\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Socket.IO Client with JWT Authentication\nDESCRIPTION: Creates a Socket.IO client instance with JWT token included in the connection headers for authentication purposes.\nSOURCE: https://github.com/socketio/socket.io/blob/main/examples/passport-jwt-example/README.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst socket = io({\n  extraHeaders: {\n    authorization: `bearer token`\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: HTTP Long-Polling Packet Format - Engine.IO Protocol\nDESCRIPTION: Defines the format for concatenated packets in HTTP long-polling transport, showing how multiple packets are separated by the record separator character and how binary data is base64-encoded.\nSOURCE: https://github.com/socketio/socket.io/blob/main/docs/engine.io-protocol/v4-current.md#2025-04-11_snippet_7\n\nLANGUAGE: plaintext\nCODE:\n```\n<packet type>[<data>]<separator><packet type>[<data>]<separator><packet type>[<data>][...]\n```\n\n----------------------------------------\n\nTITLE: Changes to Default Namespace Connection Behavior in JavaScript\nDESCRIPTION: Example showing how the implicit connection to the default namespace has been removed in Socket.IO 3.0, affecting event handling on the server side.\nSOURCE: https://github.com/socketio/socket.io/blob/main/packages/socket.io/CHANGELOG.md#2025-04-11_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// client-side\nconst socket = io(\"/admin\");\n\n// server-side\nio.on(\"connection\", socket => {\n  // not triggered anymore\n})\n\nio.use((socket, next) => {\n  // not triggered anymore\n});\n\nio.of(\"/admin\").use((socket, next) => {\n  // triggered\n});\n```\n\n----------------------------------------\n\nTITLE: Browserify Integration Example with Binary Data\nDESCRIPTION: Shows how to use engine.io-parser in a browser environment with browserify, handling both binary and text data in packets.\nSOURCE: https://github.com/socketio/socket.io/blob/main/packages/engine.io-parser/Readme.md#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst parser = require(\"engine.io-parser\");\n\nconst testBuffer = new Int8Array(10);\nfor (let i = 0; i < testBuffer.length; i++) testBuffer[i] = i;\n\nconst packets = [{ type: \"message\", data: testBuffer.buffer }, { type: \"message\", data: \"hello\" }];\n\nparser.encodePayload(packets, encoded => {\n  parser.decodePayload(encoded,\n    (packet, index, total) => {\n      const isLast = index + 1 == total;\n      if (!isLast) {\n        const buffer = new Int8Array(packet.data); // testBuffer\n      } else {\n        const message = packet.data; // \"hello\"\n      }\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: WebSocket Upgrade Flow - Engine.IO Protocol\nDESCRIPTION: Demonstrates the protocol flow for upgrading from HTTP long-polling to WebSocket transport, including the probe sequence with ping/pong packets and final upgrade packet.\nSOURCE: https://github.com/socketio/socket.io/blob/main/docs/engine.io-protocol/v4-current.md#2025-04-11_snippet_6\n\nLANGUAGE: plaintext\nCODE:\n```\nCLIENT                                                 SERVER\n\n  │                                                      │\n  │   GET /engine.io/?EIO=4&transport=websocket&sid=...  │\n  │ ───────────────────────────────────────────────────► │\n  │  ◄─────────────────────────────────────────────────┘ │\n  │            HTTP 101 (WebSocket handshake)            │\n  │                                                      │\n  │            -----  WebSocket frames -----             │\n  │  ─────────────────────────────────────────────────►  │\n  │                         2probe                       │ (ping packet)\n  │  ◄─────────────────────────────────────────────────  │\n  │                         3probe                       │ (pong packet)\n  │  ─────────────────────────────────────────────────►  │\n  │                         5                            │ (upgrade packet)\n  │                                                      │\n```\n\n----------------------------------------\n\nTITLE: JSONP Format in Socket.IO Engine Polling Transport\nDESCRIPTION: Example of the JSONP packet format used in the polling transport. Shows how the server responds with valid JavaScript to process encoded payload data.\nSOURCE: https://github.com/socketio/socket.io/blob/main/docs/engine.io-protocol/v3.md#2025-04-11_snippet_10\n\nLANGUAGE: text\nCODE:\n```\n`___eio[` <j> `](\"` <encoded payload> `\");`\n```\n\nLANGUAGE: text\nCODE:\n```\n___eio[4](\"packet data\");\n```\n\n----------------------------------------\n\nTITLE: Enabling Transport Fallback Testing in Socket.io Client\nDESCRIPTION: This code shows how to enable the 'tryAllTransports' option, which allows testing alternative transports if the first transport fails. This is useful when HTTP long-polling is disabled on the server or when WebSocket connections need to be tested first.\nSOURCE: https://github.com/socketio/socket.io/blob/main/packages/socket.io-client/CHANGELOG.md#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { io } from \"socket.io-client\";\n\nconst socket = io({\n  tryAllTransports: true\n});\n```\n\n----------------------------------------\n\nTITLE: Using Engine.IO Client in Node.js\nDESCRIPTION: Example of using Engine.IO client in a Node.js environment after adding it to package.json.\nSOURCE: https://github.com/socketio/socket.io/blob/main/packages/engine.io-client/README.md#2025-04-11_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst { Socket } = require('engine.io-client');\nconst socket = new Socket('ws://localhost');\nsocket.on('open', () => {\n  socket.on('message', (data) => {});\n  socket.on('close', () => {});\n});\n```\n\n----------------------------------------\n\nTITLE: Decoding Binary Packets (JavaScript)\nDESCRIPTION: This code snippet properly decodes binary packets. It's part of a bug fix in version 4.0.0-alpha.0.\nSOURCE: https://github.com/socketio/socket.io/blob/main/packages/engine.io-parser/CHANGELOG.md#2025-04-11_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// Code not provided in the given content\n```\n\n----------------------------------------\n\nTITLE: Configuring Engine.IO Server URL Path\nDESCRIPTION: Example showing how to configure the trailing slash behavior in Engine.IO server URL paths using the addTrailingSlash option.\nSOURCE: https://github.com/socketio/socket.io/blob/main/packages/engine.io/CHANGELOG.md#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Server } from \"engine.io\";\n\nconst server = new Server();\n\nserver.attach(httpServer, {\n  addTrailingSlash: false\n});\n```\n\n----------------------------------------\n\nTITLE: Encoding and Decoding a Packet with Binary Data in JavaScript using socket.io-parser\nDESCRIPTION: This snippet illustrates how to use socket.io-parser to encode and decode a packet containing binary data. It demonstrates handling of Buffer and Blob objects within the packet data.\nSOURCE: https://github.com/socketio/socket.io/blob/main/packages/socket.io-parser/Readme.md#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar parser = require('socket.io-parser');\nvar encoder = new parser.Encoder();\nvar packet = {\n  type: parser.BINARY_EVENT,\n  data: {i: new Buffer(1234), j: new Blob([new ArrayBuffer(2)])},\n  id: 15\n};\nencoder.encode(packet, function(encodedPackets) {\n  var decoder = new parser.Decoder();\n  decoder.on('decoded', function(decodedPacket) {\n    // decodedPacket.type == parser.BINARY_EVENT\n    // Buffer.isBuffer(decodedPacket.data.i) == true\n    // Buffer.isBuffer(decodedPacket.data.j) == true\n    // decodedPacket.id == 15\n  });\n\n  for (var i = 0; i < encodedPackets.length; i++) {\n    decoder.add(encodedPackets[i]);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Removing Packet Type for Binary Packets (JavaScript)\nDESCRIPTION: This code snippet removes the packet type when encoding binary packets. It's part of a feature addition in version 4.0.0-alpha.0.\nSOURCE: https://github.com/socketio/socket.io/blob/main/packages/engine.io-parser/CHANGELOG.md#2025-04-11_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n// Code not provided in the given content\n```\n\n----------------------------------------\n\nTITLE: Encoding Socket.IO Acknowledgement\nDESCRIPTION: Demonstrates how a Socket.IO acknowledgement packet is encoded, including the packet type, data, and acknowledgement ID.\nSOURCE: https://github.com/socketio/socket.io/blob/main/docs/socket.io-protocol/v5-current.md#2025-04-11_snippet_12\n\nLANGUAGE: plaintext\nCODE:\n```\n212[\"foo\"]\n```\n\n----------------------------------------\n\nTITLE: Encoding Socket.IO Event Data with Custom Namespace\nDESCRIPTION: Demonstrates the encoded format of a Socket.IO event packet sent to a custom namespace, including the namespace in the encoded string.\nSOURCE: https://github.com/socketio/socket.io/blob/main/docs/socket.io-protocol/v5-current.md#2025-04-11_snippet_6\n\nLANGUAGE: plaintext\nCODE:\n```\n2/admin,[\"bar\"]\n```\n\n----------------------------------------\n\nTITLE: Using Buffer.allocUnsafe Instead of new Buffer (JavaScript)\nDESCRIPTION: This code snippet refactors the code to use Buffer.allocUnsafe instead of new Buffer. It's part of a refactoring in version 2.2.0.\nSOURCE: https://github.com/socketio/socket.io/blob/main/packages/engine.io-parser/CHANGELOG.md#2025-04-11_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n// Code not provided in the given content\n```\n\n----------------------------------------\n\nTITLE: Using a Custom WebSocket Engine with Engine.io\nDESCRIPTION: Example showing the updated syntax for specifying a custom WebSocket engine in Engine.io v5.0.0 and above, using the wsEngine option.\nSOURCE: https://github.com/socketio/socket.io/blob/main/packages/engine.io/CHANGELOG.md#2025-04-11_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst eioServer = require(\"engine.io\")(httpServer, {\n  wsEngine: require(\"eiows\").Server\n});\n```\n\n----------------------------------------\n\nTITLE: JSON Structure for EVENT Packet with Acknowledgement in Socket.IO\nDESCRIPTION: Example of an EVENT packet with an acknowledgment ID, used when requiring confirmation of delivery in Socket.IO protocol.\nSOURCE: https://github.com/socketio/socket.io/blob/main/docs/socket.io-protocol/v3.md#2025-04-11_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": 2,\n  \"nsp\": \"/admin\",\n  \"data\": [\"project:delete\", 123],\n  \"id\": 456\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Socket.io Server for Protocol Test Compliance\nDESCRIPTION: Reference implementation of a Socket.io server configuration that passes all protocol compliance tests. The setup includes custom ping intervals, timeout settings, CORS configuration, and event handlers for both the default namespace and a custom namespace.\nSOURCE: https://github.com/socketio/socket.io/blob/main/docs/socket.io-protocol/v5-current.md#2025-04-11_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Server } from \"socket.io\";\n\nconst io = new Server(3000, {\n  pingInterval: 300,\n  pingTimeout: 200,\n  maxPayload: 1000000,\n  connectTimeout: 1000,\n  cors: {\n    origin: \"*\"\n  }\n});\n\nio.on(\"connection\", (socket) => {\n  socket.emit(\"auth\", socket.handshake.auth);\n\n  socket.on(\"message\", (...args) => {\n    socket.emit.apply(socket, [\"message-back\", ...args]);\n  });\n\n  socket.on(\"message-with-ack\", (...args) => {\n    const ack = args.pop();\n    ack(...args);\n  })\n});\n\nio.of(\"/custom\").on(\"connection\", (socket) => {\n  socket.emit(\"auth\", socket.handshake.auth);\n});\n```\n\n----------------------------------------\n\nTITLE: Socket.IO Namespace Connection Request\nDESCRIPTION: Shows the HTTP request and response for a Socket.IO namespace connection request, including the Engine.IO and Socket.IO packet types.\nSOURCE: https://github.com/socketio/socket.io/blob/main/docs/socket.io-protocol/v5-current.md#2025-04-11_snippet_16\n\nLANGUAGE: http\nCODE:\n```\nPOST /socket.io/?EIO=4&transport=polling&t=N8hyd7H&sid=lv_VI97HAXpY6yYWAAAC\n< HTTP/1.1 200 OK\n< Content-Type: text/plain; charset=UTF-8\n40\n```\n\n----------------------------------------\n\nTITLE: Running Angular Development Server\nDESCRIPTION: Command to start the Angular development server. The server will run on localhost:4200 and automatically reload when source files are changed.\nSOURCE: https://github.com/socketio/socket.io/blob/main/examples/basic-crud-application/angular-client/README.md#2025-04-11_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nng serve\n```\n\n----------------------------------------\n\nTITLE: Socket.IO Packet Format Examples\nDESCRIPTION: Various examples of Socket.IO packet formats including connect, event, and binary data transmissions.\nSOURCE: https://github.com/socketio/socket.io/blob/main/docs/socket.io-protocol/v4.md#2025-04-11_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": 0,\n  \"nsp\": \"/admin\"\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": 0,\n  \"nsp\": \"/admin?token=1234&uid=abcd\"\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": 1,\n  \"nsp\": \"/admin\"\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": 2,\n  \"nsp\": \"/\",\n  \"data\": [\"hello\", 1]\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": 2,\n  \"nsp\": \"/admin\",\n  \"data\": [\"project:delete\", 123],\n  \"id\": 456\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": 3,\n  \"nsp\": \"/admin\",\n  \"data\": [],\n  \"id\": 456\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": 4,\n  \"nsp\": \"/admin\",\n  \"data\": \"Not authorized\"\n}\n```\n\n----------------------------------------\n\nTITLE: Socket.IO Event Emission Over HTTP\nDESCRIPTION: Illustrates how a Socket.IO event is emitted from the server to the client over HTTP polling, including the Engine.IO and Socket.IO packet encoding.\nSOURCE: https://github.com/socketio/socket.io/blob/main/docs/socket.io-protocol/v5-current.md#2025-04-11_snippet_17\n\nLANGUAGE: http\nCODE:\n```\nGET /socket.io/?EIO=4&transport=polling&t=N8hyd7H&sid=lv_VI97HAXpY6yYWAAAC\n< HTTP/1.1 200 OK\n< Content-Type: text/plain; charset=UTF-8\n42[\"hey\",\"Jude\"]\n```\n\n----------------------------------------\n\nTITLE: Building Angular Project\nDESCRIPTION: Command to build the Angular project. The built files will be stored in the 'dist/' directory.\nSOURCE: https://github.com/socketio/socket.io/blob/main/examples/basic-crud-application/angular-client/README.md#2025-04-11_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nng build\n```\n\n----------------------------------------\n\nTITLE: Using Emitter as a prototype mixin in JavaScript\nDESCRIPTION: Example of using Emitter to extend a prototype with event emitting capabilities.\nSOURCE: https://github.com/socketio/socket.io/blob/main/packages/socket.io-component-emitter/Readme.md#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Emitter } from '@socket.io/component-emitter';\n\nEmitter(User.prototype);\n```\n\n----------------------------------------\n\nTITLE: Socket.IO Multiple Events Over HTTP\nDESCRIPTION: Demonstrates how multiple Socket.IO events are sent from the client to the server in a single HTTP request, including event separation.\nSOURCE: https://github.com/socketio/socket.io/blob/main/docs/socket.io-protocol/v5-current.md#2025-04-11_snippet_18\n\nLANGUAGE: http\nCODE:\n```\nPOST /socket.io/?EIO=4&transport=polling&t=N8hzxke&sid=lv_VI97HAXpY6yYWAAAC\n> Content-Type: text/plain; charset=UTF-8\n42[\"hello\"]\\x1e42[\"world\"]\n< HTTP/1.1 200 OK\n< Content-Type: text/plain; charset=UTF-8\nok\n```\n\n----------------------------------------\n\nTITLE: Installing dependencies for Vue.js project\nDESCRIPTION: Command to install all required dependencies for the Vue.js project using Yarn package manager.\nSOURCE: https://github.com/socketio/socket.io/blob/main/examples/basic-crud-application/vue-client/README.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn install\n```\n\n----------------------------------------\n\nTITLE: Using _emitReserved in Socket.IO Emitter v4.0.0\nDESCRIPTION: Example showing the new syntax for emitting reserved events in version 4.0.0, where emitReserved() was renamed to _emitReserved() to enable proper mangling.\nSOURCE: https://github.com/socketio/socket.io/blob/main/packages/socket.io-component-emitter/History.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Emitter } from \"@socket.io/component-emitter\";\n\nclass MyEmitter extends Emitter {\n  foo() {\n    this._emitReserved(\"input\");\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: WebSocket Upgrade Request\nDESCRIPTION: Example of upgrading from HTTP polling to WebSocket transport. The client initiates a WebSocket connection using the same session ID established during polling, and the server responds with a protocol switch.\nSOURCE: https://github.com/socketio/socket.io/blob/main/docs/engine.io-protocol/v3.md#2025-04-11_snippet_3\n\nLANGUAGE: HTTP\nCODE:\n```\nGET /engine.io/?EIO=3&transport=websocket&sid=lv_VI97HAXpY6yYWAAAC\n< HTTP/1.1 101 Switching Protocols\n```\n\n----------------------------------------\n\nTITLE: Building Vue.js project for production\nDESCRIPTION: Command to compile and minify the Vue.js application for production deployment.\nSOURCE: https://github.com/socketio/socket.io/blob/main/examples/basic-crud-application/vue-client/README.md#2025-04-11_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn build\n```\n\n----------------------------------------\n\nTITLE: Example Open Packet JSON Payload\nDESCRIPTION: Sample JSON payload of an 'open' packet sent by the server during handshake, containing session ID, available transport upgrades, timing parameters, and maximum payload size.\nSOURCE: https://github.com/socketio/socket.io/blob/main/docs/engine.io-protocol/v4-current.md#2025-04-11_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"sid\": \"lv_VI97HAXpY6yYWAAAC\",\n  \"upgrades\": [\"websocket\"],\n  \"pingInterval\": 25000,\n  \"pingTimeout\": 20000,\n  \"maxPayload\": 1000000\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Engine.IO Server with Express Middleware\nDESCRIPTION: Examples demonstrating how to use Express middleware with Engine.IO server, including session handling and security middleware.\nSOURCE: https://github.com/socketio/socket.io/blob/main/packages/engine.io/CHANGELOG.md#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nengine.use((req, res, next) => {\n  // do something\n\n  next();\n});\n\n// with express-session\nimport session from \"express-session\";\n\nengine.use(session({\n  secret: \"keyboard cat\",\n  resave: false,\n  saveUninitialized: true,\n  cookie: { secure: true }\n}));\n\n// with helmet\nimport helmet from \"helmet\";\n\nengine.use(helmet());\n```\n\n----------------------------------------\n\nTITLE: Building Angular Application\nDESCRIPTION: Command to build the Angular application, with optional production flag for optimization\nSOURCE: https://github.com/socketio/socket.io/blob/main/examples/angular-todomvc/README.md#2025-04-11_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nng build\n```\n\n----------------------------------------\n\nTITLE: Using CORS options in Engine.io 4.x\nDESCRIPTION: Example of migrating from the deprecated handlePreflightRequest option to the new cors configuration object in Engine.io 4.0.\nSOURCE: https://github.com/socketio/socket.io/blob/main/packages/engine.io/CHANGELOG.md#2025-04-11_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nnew Server({\n  cors: {\n    origin: \"https://example.com\",\n    methods: [\"GET\"],\n    allowedHeaders: [\"Authorization\"],\n    credentials: true\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Socket.IO WebSocket Frames\nDESCRIPTION: Detailed example of WebSocket frame communication including probe requests, events, namespace access, and binary data handling.\nSOURCE: https://github.com/socketio/socket.io/blob/main/docs/socket.io-protocol/v4.md#2025-04-11_snippet_8\n\nLANGUAGE: plaintext\nCODE:\n```\n< 2probe                                        => Engine.IO probe request\n> 3probe                                        => Engine.IO probe response\n> 5                                             => Engine.IO \"upgrade\" packet type\n> 42[\"hello\"]\n> 42[\"world\"]\n> 40/admin,                                     => request access to the admin namespace (Socket.IO \"CONNECT\" packet)\n< 40/admin,                                     => grant access to the admin namespace\n> 42/admin,1[\"tellme\"]                          => Socket.IO \"EVENT\" packet with acknowledgement\n< 461-/admin,1[{\"_placeholder\":true,\"num\":0}]   => Socket.IO \"BINARY_ACK\" packet with a placeholder\n< <binary>                                      => the binary attachment (sent in the following frame)\n... after a while without message\n> 2                                             => Engine.IO \"ping\" packet type\n< 3                                             => Engine.IO \"pong\" packet type\n> 1                                             => Engine.IO \"close\" packet type\n```\n\n----------------------------------------\n\nTITLE: Scaling Socket.IO Server Instances with Docker Compose\nDESCRIPTION: Command to scale the Socket.IO server to multiple instances using Docker Compose. This example scales to 7 server instances while running in detached mode.\nSOURCE: https://github.com/socketio/socket.io/blob/main/examples/cluster-traefik/README.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ docker-compose up -d --scale=server=7\n```\n\n----------------------------------------\n\nTITLE: Starting Postgres Adapter Example with Docker and Node.js\nDESCRIPTION: A bash script showing the commands to start a Postgres server using Docker Compose, run a Socket.io cluster, and connect a client. This sequence demonstrates the basic setup for using the @socket.io/postgres-adapter.\nSOURCE: https://github.com/socketio/socket.io/blob/main/examples/postgres-adapter-example/README.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# start the postgres server\n$ docker compose up -d\n\n# run the cluster\n$ node cluster.js\n\n# run the client\n$ node client.js\n```\n\n----------------------------------------\n\nTITLE: Using Engine.IO with Browserify\nDESCRIPTION: Demonstrates how to use Engine.IO client in a CommonJS module with browserify bundling. This example shows requiring the module and setting up basic event handlers.\nSOURCE: https://github.com/socketio/socket.io/blob/main/packages/engine.io-client/README.md#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst { Socket } = require('engine.io-client');\nconst socket = new Socket('ws://localhost');\nsocket.on('open', () => {\n  socket.on('message', (data) => {});\n  socket.on('close', () => {});\n});\n```\n\n----------------------------------------\n\nTITLE: Starting Docker Compose for Socket.IO Chat Application\nDESCRIPTION: Command to start the Docker Compose setup for the Socket.IO chat demo. This will launch the necessary containers in detached mode.\nSOURCE: https://github.com/socketio/socket.io/blob/main/examples/cluster-traefik/README.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ docker-compose up -d\n```\n\n----------------------------------------\n\nTITLE: WebSocket Frames Exchange after Upgrade\nDESCRIPTION: Example of communication over WebSocket after a successful upgrade from HTTP polling. Shows probe requests/responses, upgrade confirmation, message exchanges, ping/pong for connection health monitoring, and connection closure.\nSOURCE: https://github.com/socketio/socket.io/blob/main/docs/engine.io-protocol/v3.md#2025-04-11_snippet_4\n\nLANGUAGE: WebSocket\nCODE:\n```\n< 2probe    => probe request\n> 3probe    => probe response\n> 5         => \"upgrade\" packet type\n> 4hello    => message (not concatenated)\n> 4world\n> 2         => \"ping\" packet type\n< 3         => \"pong\" packet type\n> 1         => \"close\" packet type\n```\n\n----------------------------------------\n\nTITLE: Using Local Flag for Room-Specific Broadcasts in JavaScript\nDESCRIPTION: Demonstrates the local flag feature that allows emitting events only to sockets in a specific room on the same server instance, useful in multi-server setups.\nSOURCE: https://github.com/socketio/socket.io/blob/main/packages/socket.io/CHANGELOG.md#2025-04-11_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nsocket.local.to('room101').emit(/* */);\n```\n\n----------------------------------------\n\nTITLE: Starting Docker Containers for Socket.IO Chat\nDESCRIPTION: Command to start the Docker Compose setup which launches four Socket.IO nodes and the supporting infrastructure including Redis and HTTPD proxy.\nSOURCE: https://github.com/socketio/socket.io/blob/main/examples/cluster-httpd/README.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ docker-compose up -d\n```\n\n----------------------------------------\n\nTITLE: Illustrating WebSocket-Only Handshake\nDESCRIPTION: Diagram showing the handshake process for a WebSocket-only session, where the client connects directly with a WebSocket request and the server responds with a HTTP 101 status to establish the WebSocket connection.\nSOURCE: https://github.com/socketio/socket.io/blob/main/docs/engine.io-protocol/v4-current.md#2025-04-11_snippet_3\n\nLANGUAGE: http\nCODE:\n```\nCLIENT                                                    SERVER\n\n  │                                                          │\n  │        GET /engine.io/?EIO=4&transport=websocket         │\n  │ ───────────────────────────────────────────────────────► │\n  │ ◄──────────────────────────────────────────────────────┘ │\n  │                        HTTP 101                          │\n  │                                                          │\n```\n\n----------------------------------------\n\nTITLE: Running the Angular Frontend for Socket.IO CRUD Application\nDESCRIPTION: Commands to set up and start the Angular client for the Socket.IO CRUD application. This involves navigating to the client directory, installing dependencies, and starting the development server.\nSOURCE: https://github.com/socketio/socket.io/blob/main/examples/basic-crud-application/README.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd angular-client\nnpm install\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Linking and Running Socket.io Project via npm\nDESCRIPTION: Commands to link the Socket.io library from a parent directory and start the application. The first command creates a symbolic link to the Socket.io package located two directories up, and the second command runs the main application file.\nSOURCE: https://github.com/socketio/socket.io/blob/main/packages/engine.io/examples/esm-import/README.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm link ../..\n$ node index.js\n```\n\n----------------------------------------\n\nTITLE: Socket.IO Installation Commands\nDESCRIPTION: Shows how to install Socket.IO using npm or yarn package managers.\nSOURCE: https://github.com/socketio/socket.io/blob/main/packages/socket.io/Readme.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n// with npm\nnpm install socket.io\n\n// with yarn\nyarn add socket.io\n```\n\n----------------------------------------\n\nTITLE: Installing and Running Socket.IO Example\nDESCRIPTION: Commands for installing dependencies and starting both server and client components of a Socket.IO application. Requires Node.js version 12.17.0 or higher.\nSOURCE: https://github.com/socketio/socket.io/blob/main/examples/es-modules/README.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# install the dependencies\n$ npm ci\n\n# start the server\n$ node server.js\n\n# start the client\n$ node client.js\n```\n\n----------------------------------------\n\nTITLE: Starting Metro Bundler for React Native\nDESCRIPTION: Commands to start the Metro bundler using either npm or yarn package managers.\nSOURCE: https://github.com/socketio/socket.io/blob/main/examples/ReactNativeExample/README.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# using npm\nnpm start\n\n# OR using Yarn\nyarn start\n```\n\n----------------------------------------\n\nTITLE: Import Syntax Change for Socket.IO Emitter v3.0.0\nDESCRIPTION: Breaking change example showing the transition from default export to named export syntax for importing the Emitter component.\nSOURCE: https://github.com/socketio/socket.io/blob/main/packages/socket.io-component-emitter/History.md#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// before\nimport Emitter from \"@socket.io/component-emitter\"\n\n// after\nimport { Emitter } from \"@socket.io/component-emitter\"\n```\n\n----------------------------------------\n\nTITLE: HTTP Polling: Open Packet Request/Response\nDESCRIPTION: Example of the initial request and response when establishing an Engine.IO connection via HTTP polling. The server responds with an 'open' packet containing session information including the session ID, available upgrades, ping interval, and timeout values.\nSOURCE: https://github.com/socketio/socket.io/blob/main/docs/engine.io-protocol/v3.md#2025-04-11_snippet_0\n\nLANGUAGE: HTTP\nCODE:\n```\nGET /engine.io/?EIO=3&transport=polling&t=N8hyd6w\n< HTTP/1.1 200 OK\n< Content-Type: text/plain; charset=UTF-8\n96:0{\"sid\":\"lv_VI97HAXpY6yYWAAAC\",\"upgrades\":[\"websocket\"],\"pingInterval\":25000,\"pingTimeout\":5000}\n```\n\n----------------------------------------\n\nTITLE: Building Production-Ready React App with Yarn\nDESCRIPTION: Compiles and bundles the React app for production deployment, optimizing performance and generating minified files in the 'build' folder.\nSOURCE: https://github.com/socketio/socket.io/blob/main/examples/create-react-app-example/README.md#2025-04-11_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n### `yarn build`\n```\n\n----------------------------------------\n\nTITLE: Socket.IO WebSocket Upgrade\nDESCRIPTION: Example of WebSocket upgrade process and subsequent WebSocket frame communication including probe requests, events, and binary data handling.\nSOURCE: https://github.com/socketio/socket.io/blob/main/docs/socket.io-protocol/v4.md#2025-04-11_snippet_7\n\nLANGUAGE: plaintext\nCODE:\n```\nGET /socket.io/?EIO=3&transport=websocket&sid=lv_VI97HAXpY6yYWAAAC\n< HTTP/1.1 101 Switching Protocols\n```\n\n----------------------------------------\n\nTITLE: HTTP Polling: Server-to-Client Message\nDESCRIPTION: Example of a server sending a message to the client via HTTP polling. The server sends a 'message' packet type (4) with the content 'hey', demonstrating how messages are encoded in the protocol.\nSOURCE: https://github.com/socketio/socket.io/blob/main/docs/engine.io-protocol/v3.md#2025-04-11_snippet_1\n\nLANGUAGE: HTTP\nCODE:\n```\nGET /engine.io/?EIO=3&transport=polling&t=N8hyd7H&sid=lv_VI97HAXpY6yYWAAAC\n< HTTP/1.1 200 OK\n< Content-Type: text/plain; charset=UTF-8\n4:4hey\n```\n\n----------------------------------------\n\nTITLE: Building Nuxt 3 Application for Production\nDESCRIPTION: Commands to build the Nuxt 3 application for production deployment using different package managers. These commands compile and optimize the project for a production environment.\nSOURCE: https://github.com/socketio/socket.io/blob/main/examples/nuxt-example/README.md#2025-04-11_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# npm\nnpm run build\n\n# pnpm\npnpm run build\n\n# yarn\nyarn build\n\n# bun\nbun run build\n```\n\n----------------------------------------\n\nTITLE: JSON Structure for DISCONNECT Packet Type in Socket.IO\nDESCRIPTION: Example of a DISCONNECT packet type (code 1) for Socket.IO protocol, showing the JSON structure when disconnecting from a namespace.\nSOURCE: https://github.com/socketio/socket.io/blob/main/docs/socket.io-protocol/v3.md#2025-04-11_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": 1,\n  \"nsp\": \"/admin\"\n}\n```\n\n----------------------------------------\n\nTITLE: Illustrating Handshake with HTTP Long-Polling\nDESCRIPTION: Diagram showing the handshake process using HTTP long-polling, where the client initiates the connection with a GET request and the server responds with a 200 status and an 'open' packet.\nSOURCE: https://github.com/socketio/socket.io/blob/main/docs/engine.io-protocol/v4-current.md#2025-04-11_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nCLIENT                                                    SERVER\n\n  │                                                          │\n  │        GET /engine.io/?EIO=4&transport=polling           │\n  │ ───────────────────────────────────────────────────────► │\n  │ ◄──────────────────────────────────────────────────────┘ │\n  │                        HTTP 200                          │\n  │                                                          │\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Engine.IO Development\nDESCRIPTION: Commands for navigating to the Engine.IO directory and installing the necessary dependencies for development.\nSOURCE: https://github.com/socketio/socket.io/blob/main/packages/engine.io/README.md#2025-04-11_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ncd engine.io\nnpm install\n```\n\n----------------------------------------\n\nTITLE: WebSocket-Only Session Establishment\nDESCRIPTION: Example of establishing an Engine.IO connection using WebSocket transport directly without HTTP polling. Shows the handshake, message exchanges, ping/pong for connection health monitoring, and connection closure.\nSOURCE: https://github.com/socketio/socket.io/blob/main/docs/engine.io-protocol/v3.md#2025-04-11_snippet_5\n\nLANGUAGE: HTTP\nCODE:\n```\nGET /engine.io/?EIO=3&transport=websocket\n< HTTP/1.1 101 Switching Protocols\n```\n\nLANGUAGE: WebSocket\nCODE:\n```\n< 0{\"sid\":\"lv_VI97HAXpY6yYWAAAC\",\"pingInterval\":25000,\"pingTimeout\":5000} => handshake\n< 4hey\n> 4hello    => message (not concatenated)\n> 4world\n< 2         => \"ping\" packet type\n> 3         => \"pong\" packet type\n> 1         => \"close\" packet type\n```\n\n----------------------------------------\n\nTITLE: JSON Structure for CONNECT Packet Type in Socket.IO\nDESCRIPTION: Example of a CONNECT packet type (code 0) for Socket.IO protocol, showing the JSON structure when connecting to a namespace.\nSOURCE: https://github.com/socketio/socket.io/blob/main/docs/socket.io-protocol/v3.md#2025-04-11_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": 0,\n  \"nsp\": \"/admin\"\n}\n```\n\n----------------------------------------\n\nTITLE: HTML Sponsor Links and Images\nDESCRIPTION: HTML code showing a grid of sponsor links with their avatars from OpenCollective. Each sponsor has their own link and avatar image loaded from the OpenCollective API.\nSOURCE: https://github.com/socketio/socket.io/blob/main/packages/socket.io/Readme.md#2025-04-11_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<a href=\"https://opencollective.com/socketio/sponsor/0/website\" target=\"_blank\"><img src=\"https://opencollective.com/socketio/sponsor/0/avatar.svg\"></a>\n```\n\n----------------------------------------\n\nTITLE: Illustrating HTTP GET Request for Receiving Data\nDESCRIPTION: Diagram showing the communication flow when a client receives data from the server via HTTP long-polling, including the GET request with query parameters and the server's delayed 200 response containing buffered packets.\nSOURCE: https://github.com/socketio/socket.io/blob/main/docs/engine.io-protocol/v4-current.md#2025-04-11_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nCLIENT                                                SERVER\n\n  │   GET /engine.io/?EIO=4&transport=polling&sid=...   │\n  │ ──────────────────────────────────────────────────► │\n  │                                                   . │\n  │                                                   . │\n  │                                                   . │\n  │                                                   . │\n  │ ◄─────────────────────────────────────────────────┘ │\n  │                       HTTP 200                      │\n```\n\n----------------------------------------\n\nTITLE: Socket.IO Disconnection Packet (JSON)\nDESCRIPTION: Shows the structure of a Socket.IO disconnection packet for the main namespace, including the packet type and namespace.\nSOURCE: https://github.com/socketio/socket.io/blob/main/docs/socket.io-protocol/v5-current.md#2025-04-11_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{ \"type\": DISCONNECT, \"namespace\": \"/\" }\n```\n\n----------------------------------------\n\nTITLE: Getting Help with Angular CLI\nDESCRIPTION: Command to access help information for the Angular CLI directly from the command line.\nSOURCE: https://github.com/socketio/socket.io/blob/main/examples/basic-crud-application/angular-client/README.md#2025-04-11_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nng help\n```\n\n----------------------------------------\n\nTITLE: Configuring WebSocket Engine in Engine.IO in JavaScript\nDESCRIPTION: Example showing how to configure the WebSocket engine in Engine.IO, specifically setting it to use 'uws' instead of the default 'ws' implementation.\nSOURCE: https://github.com/socketio/socket.io/blob/main/packages/socket.io/CHANGELOG.md#2025-04-11_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nvar engine = require('engine.io');\nvar server = engine.listen(3000, {\n  wsEngine: 'uws'\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Engine.io Server with TypeScript\nDESCRIPTION: Example showing how to correctly instantiate the Engine.io server with the updated import syntax after migration to TypeScript in v6.0.0.\nSOURCE: https://github.com/socketio/socket.io/blob/main/packages/engine.io/CHANGELOG.md#2025-04-11_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst { Server } = require(\"engine.io\");\nconst eioServer = new Server(httpServer);\n```\n\n----------------------------------------\n\nTITLE: Displaying Compatibility Table in Markdown\nDESCRIPTION: This snippet shows a markdown table that outlines the compatibility between adapter versions and Socket.IO server versions. It's useful for users to quickly determine which adapter version to use with their Socket.IO server.\nSOURCE: https://github.com/socketio/socket.io/blob/main/packages/socket.io-adapter/Readme.md#2025-04-11_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Adapter version | Socket.IO server version |\n|-----------------| ------------------------ |\n| 1.x.x           | 1.x.x / 2.x.x            |\n| 2.x.x           | 3.x.x                    |\n```\n\n----------------------------------------\n\nTITLE: Configuring Socket with Disabled Trailing Slash in Engine.IO Client\nDESCRIPTION: Demonstrates how to disable the default trailing slash behavior in Engine.IO client by setting the addTrailingSlash option to false. This changes the request URL format from '/engine.io/' to '/engine.io'.\nSOURCE: https://github.com/socketio/socket.io/blob/main/packages/engine.io-client/CHANGELOG.md#2025-04-11_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Socket } from \"engine.io-client\";\n\nconst socket = new Socket(\"https://example.com\", {\n  addTrailingSlash: false\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing Angular CLI Help\nDESCRIPTION: Command to access Angular CLI help documentation\nSOURCE: https://github.com/socketio/socket.io/blob/main/examples/angular-todomvc/README.md#2025-04-11_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nng help\n```\n\n----------------------------------------\n\nTITLE: Payload Encoding Examples in Socket.IO Engine\nDESCRIPTION: Examples of how Socket.IO encodes payloads in different scenarios, including string-only payloads and mixed string/binary data with and without XHR2 support.\nSOURCE: https://github.com/socketio/socket.io/blob/main/docs/engine.io-protocol/v3.md#2025-04-11_snippet_6\n\nLANGUAGE: text\nCODE:\n```\n<length1>:<packet1>[<length2>:<packet2>[...]]\n```\n\nLANGUAGE: text\nCODE:\n```\n<length of base64 representation of the data + 1 (for packet type)>:b<packet1 type><packet1 data in b64>[...]\n```\n\nLANGUAGE: text\nCODE:\n```\n<0 for string data, 1 for binary data><Any number of numbers between 0 and 9><The number 255><packet1 (first type, then data)>[...]\n```\n\n----------------------------------------\n\nTITLE: Installing and Building Socket.IO with Webpack\nDESCRIPTION: Commands for installing dependencies and building the Socket.IO package using WebPack for browser environments. The build process is configured in the package.json file.\nSOURCE: https://github.com/socketio/socket.io/blob/main/examples/webpack-build/README.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm i\n$ npm run build\n```\n\n----------------------------------------\n\nTITLE: Configuring Web Crawler Access with robots.txt\nDESCRIPTION: This robots.txt configuration allows all web crawlers to access all parts of the website. It specifies a wildcard user agent (*) with no disallowed paths, effectively permitting complete crawler access.\nSOURCE: https://github.com/socketio/socket.io/blob/main/examples/create-react-app-example/public/robots.txt#2025-04-11_snippet_0\n\nLANGUAGE: robotstxt\nCODE:\n```\nUser-agent: *\nDisallow:\n```\n\n----------------------------------------\n\nTITLE: Sending Multiple Binary Attachments in Socket.IO (JSON)\nDESCRIPTION: Demonstrates a Socket.IO packet structure for sending multiple binary attachments in a single event, including custom namespace and multiple binary buffers.\nSOURCE: https://github.com/socketio/socket.io/blob/main/docs/socket.io-protocol/v5-current.md#2025-04-11_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{ \"type\": BINARY_EVENT, \"namespace\": \"/admin\", \"data\": [\"baz\", <Buffer <01 02>>, <Buffer <03 04>> ] }\n```\n\n----------------------------------------\n\nTITLE: Initializing Custom Transport Implementation in Socket.IO\nDESCRIPTION: Demonstrates how to initialize a Socket with custom transport implementations using engine.io-client. The transports option accepts an array of transport implementations like XHR and WebSocket.\nSOURCE: https://github.com/socketio/socket.io/blob/main/packages/engine.io-client/CHANGELOG.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Socket, XHR, WebSocket } from \"engine.io-client\";\n\nconst socket = new Socket({\n  transports: [XHR, WebSocket]\n});\n```\n\n----------------------------------------\n\nTITLE: WebSocket Upgrade in Socket.IO\nDESCRIPTION: Shows the WebSocket upgrade process in a Socket.IO session, including the HTTP upgrade request and the subsequent WebSocket frames for various operations.\nSOURCE: https://github.com/socketio/socket.io/blob/main/docs/socket.io-protocol/v5-current.md#2025-04-11_snippet_19\n\nLANGUAGE: http\nCODE:\n```\nGET /socket.io/?EIO=4&transport=websocket&sid=lv_VI97HAXpY6yYWAAAC\n< HTTP/1.1 101 Switching Protocols\n\n< 2probe\n> 3probe\n> 5\n> 42[\"hello\"]\n> 42[\"world\"]\n> 40/admin,\n< 40/admin,{\"sid\":\"-G5j-67EZFp-q59rADQM\"}\n> 42/admin,1[\"tellme\"]\n< 461-/admin,1[{\"_placeholder\":true,\"num\":0}]\n< <binary>\n> 2\n< 3\n> 1\n```\n\n----------------------------------------\n\nTITLE: Binary Data Encoding with XHR2 Support in Socket.IO Engine\nDESCRIPTION: Demonstrates how Socket.IO Engine encodes mixed string and binary data when both client and transport support binary. Shows the buffer representation with headers, separators, and content.\nSOURCE: https://github.com/socketio/socket.io/blob/main/docs/engine.io-protocol/v3.md#2025-04-11_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"type\": \"message\",\n    \"data\": \"€\"\n  },\n  {\n    \"type\": \"message\",\n    \"data\": buffer <01 02 03 04>\n  }\n]\n```\n\nLANGUAGE: text\nCODE:\n```\nbuffer <00 04 ff 34 e2 82 ac 01 04 ff 01 02 03 04>\n\nwith:\n\n00              => string header\n04              => string length in bytes\nff              => separator\n34              => \"message\" packet type (\"4\")\ne2 82 ac        => \"€\"\n01              => binary header\n04              => buffer length in bytes\nff              => separator\n01 02 03 04     => buffer content\n```\n\n----------------------------------------\n\nTITLE: Installing and Running the Express-Session with Socket.IO Example\nDESCRIPTION: Commands to install dependencies and start the example application that demonstrates session sharing between Express and Socket.IO. The application runs on port 3000 by default, but can use a custom port specified via the PORT environment variable.\nSOURCE: https://github.com/socketio/socket.io/blob/main/examples/express-session-example/README.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install\n$ npm start\n```\n\n----------------------------------------\n\nTITLE: Binary Data Encoding without XHR2 Support in Socket.IO Engine\nDESCRIPTION: Shows how Socket.IO Engine encodes mixed string and binary data when either client or transport does not support binary. Binary data is encoded as base64 strings with special indicators.\nSOURCE: https://github.com/socketio/socket.io/blob/main/docs/engine.io-protocol/v3.md#2025-04-11_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"type\": \"message\",\n    \"data\": \"€\"\n  },\n  {\n    \"type\": \"message\",\n    \"data\": buffer <01 02 03 04>\n  }\n]\n```\n\nLANGUAGE: text\nCODE:\n```\n2:4€10:b4AQIDBA==\n\nwith\n\n2           => number of characters of the 1st packet\n:           => separator\n4           => \"message\" packet type\n€\n10          => number of characters of the 2nd packet\n:           => separator\nb           => indicates a base64 packet\n4           => \"message\" packet type\nAQIDBA==    => buffer content encoded in base64\n```\n\n----------------------------------------\n\nTITLE: Engine.IO Server Configuration - JavaScript\nDESCRIPTION: Sample JavaScript server configuration that complies with the Engine.IO protocol test suite, setting up a server with appropriate ping intervals, timeout values, and payload limits.\nSOURCE: https://github.com/socketio/socket.io/blob/main/docs/engine.io-protocol/v4-current.md#2025-04-11_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nimport { listen } from \"engine.io\";\n\nconst server = listen(3000, {\n  pingInterval: 300,\n  pingTimeout: 200,\n  maxPayload: 1e6,\n  cors: {\n    origin: \"*\"\n  }\n});\n\nserver.on(\"connection\", socket => {\n  socket.on(\"data\", (...args) => {\n    socket.send(...args);\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Markdown Version History Table\nDESCRIPTION: A markdown table listing Socket.IO versions and their release dates, organized chronologically from newest to oldest versions.\nSOURCE: https://github.com/socketio/socket.io/blob/main/packages/socket.io/CHANGELOG.md#2025-04-11_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Version                                                                                          | Release date   |\n|--------------------------------------------------------------------------------------------------|----------------|\n| [4.8.1](#481-2024-10-25)                                                                         | October 2024   |\n| [4.8.0](#480-2024-09-21)                                                                         | September 2024 |\n```\n\n----------------------------------------\n\nTITLE: Server Configuration for Socket.IO Engine Test Suite\nDESCRIPTION: Reference configuration for a JavaScript Socket.IO Engine server to pass all compliance tests. Includes settings for ping intervals, timeouts, CORS, and event handling for data exchange.\nSOURCE: https://github.com/socketio/socket.io/blob/main/docs/engine.io-protocol/v3.md#2025-04-11_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nimport { listen } from \"engine.io\";\n\nconst server = listen(3000, {\n  pingInterval: 300,\n  pingTimeout: 200,\n  allowEIO3: true,\n  maxPayload: 1e6,\n  cors: {\n    origin: \"*\"\n  }\n});\n\nserver.on(\"connection\", socket => {\n  socket.on(\"data\", (...args) => {\n    socket.send(...args);\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Starting Socket.IO Server\nDESCRIPTION: Command to start the Socket.IO server for handling real-time communications\nSOURCE: https://github.com/socketio/socket.io/blob/main/examples/angular-todomvc/README.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run start:server\n```\n\n----------------------------------------\n\nTITLE: Implementing Protocol Version 4 (JavaScript)\nDESCRIPTION: This code snippet implements version 4 of the protocol. It's part of a feature addition in version 4.0.0-alpha.1.\nSOURCE: https://github.com/socketio/socket.io/blob/main/packages/engine.io-parser/CHANGELOG.md#2025-04-11_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n// Code not provided in the given content\n```\n\n----------------------------------------\n\nTITLE: Starting Socket.IO Server with Yarn\nDESCRIPTION: Initiates the Socket.IO server, enabling real-time communication capabilities for the application.\nSOURCE: https://github.com/socketio/socket.io/blob/main/examples/create-react-app-example/README.md#2025-04-11_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n### `yarn start-server`\n```\n\n----------------------------------------\n\nTITLE: Using Terser-Compatible Representation of Separator (JavaScript)\nDESCRIPTION: This code snippet uses a terser-compatible representation of the separator. It's part of a bug fix in version 4.0.1.\nSOURCE: https://github.com/socketio/socket.io/blob/main/packages/engine.io-parser/CHANGELOG.md#2025-04-11_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// Code not provided in the given content\n```\n\n----------------------------------------\n\nTITLE: Installing NestJS Dependencies with npm\nDESCRIPTION: Command to install all required dependencies for a NestJS project using npm package manager.\nSOURCE: https://github.com/socketio/socket.io/blob/main/examples/nestjs-example/README.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install\n```\n\n----------------------------------------\n\nTITLE: Restoring Upgrade Mechanism (JavaScript)\nDESCRIPTION: This code snippet restores the upgrade mechanism. It's part of a feature addition in version 4.0.0.\nSOURCE: https://github.com/socketio/socket.io/blob/main/packages/engine.io-parser/CHANGELOG.md#2025-04-11_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// Code not provided in the given content\n```\n\n----------------------------------------\n\nTITLE: Starting Nuxt 3 Development Server\nDESCRIPTION: Commands to start the Nuxt 3 development server on http://localhost:3000 using different package managers. These commands initiate the local development environment for the project.\nSOURCE: https://github.com/socketio/socket.io/blob/main/examples/nuxt-example/README.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# npm\nnpm run dev\n\n# pnpm\npnpm run dev\n\n# yarn\nyarn dev\n\n# bun\nbun run dev\n```\n\n----------------------------------------\n\nTITLE: Respecting Offset and Length of TypedArray Objects (JavaScript)\nDESCRIPTION: This code snippet fixes an issue with respecting the offset and length of TypedArray objects. It's part of a bug fix in version 4.0.3.\nSOURCE: https://github.com/socketio/socket.io/blob/main/packages/engine.io-parser/CHANGELOG.md#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// Code not provided in the given content\n```\n\n----------------------------------------\n\nTITLE: Launching React Native Android App\nDESCRIPTION: Commands to start the React Native application on Android platform using either npm or yarn.\nSOURCE: https://github.com/socketio/socket.io/blob/main/examples/ReactNativeExample/README.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# using npm\nnpm run android\n\n# OR using Yarn\nyarn android\n```\n\n----------------------------------------\n\nTITLE: Including Socket.IO Client in HTML\nDESCRIPTION: Example of how to include the Socket.IO client script in an HTML page. This single script tag is all that's needed as Socket.IO bundles Engine.io, eliminating the need to separately include Engine.io's client.\nSOURCE: https://github.com/socketio/socket.io/blob/main/packages/engine.io/README.md#2025-04-11_snippet_11\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"/socket.io/socket.io.js\">\n```\n\n----------------------------------------\n\nTITLE: Running the Socket.IO Server Implementation\nDESCRIPTION: Commands to set up and start the server component of the Socket.IO CRUD application. This involves navigating to the server directory, installing dependencies, and launching the server.\nSOURCE: https://github.com/socketio/socket.io/blob/main/examples/basic-crud-application/README.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd server\nnpm install\nnpm start\n```\n\n----------------------------------------\n\nTITLE: HTTP Polling: Client-to-Server Messages\nDESCRIPTION: Example of a client sending multiple messages to the server via HTTP polling. The client sends two 'message' packets ('hello' and 'world') concatenated in a single POST request, and the server acknowledges receipt.\nSOURCE: https://github.com/socketio/socket.io/blob/main/docs/engine.io-protocol/v3.md#2025-04-11_snippet_2\n\nLANGUAGE: HTTP\nCODE:\n```\nPOST /engine.io/?EIO=3&transport=polling&t=N8hzxke&sid=lv_VI97HAXpY6yYWAAAC\n> Content-Type: text/plain; charset=UTF-8\n6:4hello6:4world\n< HTTP/1.1 200 OK\n< Content-Type: text/plain; charset=UTF-8\nok\n```\n\n----------------------------------------\n\nTITLE: Stopping Individual Socket.IO Node\nDESCRIPTION: Command to stop a specific Socket.IO node to demonstrate failover capabilities where clients automatically reconnect to other available nodes.\nSOURCE: https://github.com/socketio/socket.io/blob/main/examples/cluster-httpd/README.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ docker-compose stop server-george\n```\n\n----------------------------------------\n\nTITLE: Installing and Running Frontend Application with npm\nDESCRIPTION: Commands to install dependencies and start the frontend development server for the Socket.IO private messaging application.\nSOURCE: https://github.com/socketio/socket.io/blob/main/examples/private-messaging/README.md#2025-04-11_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install\nnpm run serve\n```\n\n----------------------------------------\n\nTITLE: Starting Angular Development Server\nDESCRIPTION: Command to start the Angular development server which serves the application at http://localhost:4200 with auto-reload functionality\nSOURCE: https://github.com/socketio/socket.io/blob/main/examples/angular-todomvc/README.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nng serve\n```\n\n----------------------------------------\n\nTITLE: Installing and Starting the Socket.IO Collaborative Whiteboard\nDESCRIPTION: Command to install dependencies and start the collaborative whiteboard application. It uses npm to install dependencies and launch the server, which will be accessible via a web browser at localhost:3000 or a custom port.\nSOURCE: https://github.com/socketio/socket.io/blob/main/examples/whiteboard/README.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm ci && npm start\n```\n\n----------------------------------------\n\nTITLE: Launching React Native iOS App\nDESCRIPTION: Commands to start the React Native application on iOS platform using either npm or yarn.\nSOURCE: https://github.com/socketio/socket.io/blob/main/examples/ReactNativeExample/README.md#2025-04-11_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# using npm\nnpm run ios\n\n# OR using Yarn\nyarn ios\n```\n\n----------------------------------------\n\nTITLE: Installing and Running Backend Server with npm\nDESCRIPTION: Commands to navigate to the server directory, install server dependencies, and start the Socket.IO backend server.\nSOURCE: https://github.com/socketio/socket.io/blob/main/examples/private-messaging/README.md#2025-04-11_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncd server\nnpm install\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Previewing Nuxt 3 Production Build Locally\nDESCRIPTION: Commands to locally preview the production build of the Nuxt 3 application using different package managers. These commands allow testing of the production-ready application on a local machine before deployment.\nSOURCE: https://github.com/socketio/socket.io/blob/main/examples/nuxt-example/README.md#2025-04-11_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# npm\nnpm run preview\n\n# pnpm\npnpm run preview\n\n# yarn\nyarn preview\n\n# bun\nbun run preview\n```\n\n----------------------------------------\n\nTITLE: Installing and Running NW.js Client\nDESCRIPTION: Commands for installing dependencies and starting the NW.js client application.\nSOURCE: https://github.com/socketio/socket.io/blob/main/examples/nwjs-example/README.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# install the dependencies\n$ npm i\n\n# start the app\n$ nw .\n```\n\n----------------------------------------\n\nTITLE: Running Tests in NestJS Applications\nDESCRIPTION: Commands for executing different types of tests in a NestJS application, including unit tests, end-to-end tests, and generating test coverage reports.\nSOURCE: https://github.com/socketio/socket.io/blob/main/examples/nestjs-example/README.md#2025-04-11_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:cov\n```\n\n----------------------------------------\n\nTITLE: Setting up Socket.IO Server\nDESCRIPTION: Commands for navigating to server directory, installing server dependencies, and starting the Socket.IO server.\nSOURCE: https://github.com/socketio/socket.io/blob/main/examples/nwjs-example/README.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ cd server\n\n# install the dependencies\n$ npm i\n\n# start the server\n$ npm start\n```\n\n----------------------------------------\n\nTITLE: Generating Angular Components and Services\nDESCRIPTION: Command to generate new Angular components, directives, pipes, services, classes, guards, interfaces, enums, or modules using the Angular CLI.\nSOURCE: https://github.com/socketio/socket.io/blob/main/examples/basic-crud-application/angular-client/README.md#2025-04-11_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nng generate component component-name\n```\n\n----------------------------------------\n\nTITLE: Installing and Running Socket.IO Custom Parsers\nDESCRIPTION: Commands to install dependencies and start the project for testing Socket.IO custom parsers. This snippet demonstrates how to set up and run the parser comparison tool.\nSOURCE: https://github.com/socketio/socket.io/blob/main/examples/custom-parsers/README.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm i && npm start\n```\n\n----------------------------------------\n\nTITLE: Running Angular End-to-End Tests\nDESCRIPTION: Command to run end-to-end tests for the Angular project. Requires a package that implements end-to-end testing capabilities to be added first.\nSOURCE: https://github.com/socketio/socket.io/blob/main/examples/basic-crud-application/angular-client/README.md#2025-04-11_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nng e2e\n```\n\n----------------------------------------\n\nTITLE: Running React Development Server with Yarn\nDESCRIPTION: Starts the React app in development mode, enabling live reloading and displaying lint errors in the console. The app becomes accessible at http://localhost:3000.\nSOURCE: https://github.com/socketio/socket.io/blob/main/examples/create-react-app-example/README.md#2025-04-11_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### `yarn start`\n```\n\n----------------------------------------\n\nTITLE: Running Tests with Yarn in Watch Mode\nDESCRIPTION: Launches the test runner in interactive watch mode, allowing for continuous testing during development.\nSOURCE: https://github.com/socketio/socket.io/blob/main/examples/create-react-app-example/README.md#2025-04-11_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n### `yarn test`\n```\n\n----------------------------------------\n\nTITLE: Setting up and running a Socket.IO server with WebPack\nDESCRIPTION: Commands for installing dependencies, building the WebPack bundle, and starting the Socket.IO server. This process prepares a WebPack-bundled Socket.IO server for deployment.\nSOURCE: https://github.com/socketio/socket.io/blob/main/examples/webpack-build-server/README.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm i\n$ npm run build\n$ npm start\n```\n\n----------------------------------------\n\nTITLE: Ejecting from Create React App Configuration\nDESCRIPTION: Removes the single build dependency and copies all configuration files and transitive dependencies into the project for full control. This is a one-way operation and should be used cautiously.\nSOURCE: https://github.com/socketio/socket.io/blob/main/examples/create-react-app-example/README.md#2025-04-11_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n### `yarn eject`\n```\n\n----------------------------------------\n\nTITLE: Stopping Individual Socket.IO Node\nDESCRIPTION: Command to stop a specific Socket.IO node to test failover and client reconnection functionality.\nSOURCE: https://github.com/socketio/socket.io/blob/main/examples/cluster-nginx/README.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ docker-compose stop server-george\n```\n\n----------------------------------------\n\nTITLE: Generating Angular Components\nDESCRIPTION: Angular CLI command for scaffolding new components and other Angular artifacts\nSOURCE: https://github.com/socketio/socket.io/blob/main/examples/angular-todomvc/README.md#2025-04-11_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nng generate component component-name\n```\n\n----------------------------------------\n\nTITLE: Scaling Client Containers\nDESCRIPTION: Commands to scale up the number of client containers for testing and view their logs.\nSOURCE: https://github.com/socketio/socket.io/blob/main/examples/cluster-nginx/README.md#2025-04-11_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ docker-compose up -d --scale=client=10 client\n# and then\n$ docker-compose logs client\n```\n\n----------------------------------------\n\nTITLE: Running Unit Tests\nDESCRIPTION: Command to execute unit tests using Karma test runner\nSOURCE: https://github.com/socketio/socket.io/blob/main/examples/angular-todomvc/README.md#2025-04-11_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nng test\n```\n\n----------------------------------------\n\nTITLE: Configuring Transport Tree-shaking in Socket.IO\nDESCRIPTION: Shows how to implement transport tree-shaking to exclude code related to unused transports from the final bundle. Uses SocketWithoutUpgrade class with specific transport options.\nSOURCE: https://github.com/socketio/socket.io/blob/main/packages/engine.io-client/CHANGELOG.md#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { SocketWithoutUpgrade, WebSocket } from \"engine.io-client\";\n\nconst socket = new SocketWithoutUpgrade({\n  transports: [WebSocket]\n});\n```\n\n----------------------------------------\n\nTITLE: JSON Payload Encoding in Socket.IO Engine\nDESCRIPTION: Example of encoding JSON messages without binary data in Socket.IO Engine protocol. Shows how two message packets are encoded into a combined payload string.\nSOURCE: https://github.com/socketio/socket.io/blob/main/docs/engine.io-protocol/v3.md#2025-04-11_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"type\": \"message\",\n    \"data\": \"hello\"\n  },\n  {\n    \"type\": \"message\",\n    \"data\": \"€\"\n  }\n]\n```\n\nLANGUAGE: text\nCODE:\n```\n6:4hello2:4€\n```\n\n----------------------------------------\n\nTITLE: Enabling Debug Mode for Engine.IO Applications in Node.js\nDESCRIPTION: Shows how to enable the debug output for all Engine.IO scopes using the DEBUG environment variable when running a Node.js application.\nSOURCE: https://github.com/socketio/socket.io/blob/main/packages/engine.io/README.md#2025-04-11_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nDEBUG=engine* node myapp\n```\n\n----------------------------------------\n\nTITLE: Running Browser Tests with Zuul for Socket.IO Client\nDESCRIPTION: Command to run browser tests for the Socket.IO client locally using Zuul on port 8080. This executes the test suite defined in test/index.js through a local server for development testing.\nSOURCE: https://github.com/socketio/socket.io/blob/main/packages/engine.io-client/README.md#2025-04-11_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n./node_modules/.bin/zuul --local 8080 -- test/index.js\n```\n\n----------------------------------------\n\nTITLE: Cloning the Socket.IO Client Repository\nDESCRIPTION: Git command to clone the Socket.IO client repository from GitHub. This is the first step for contributing to the project or working with the source code.\nSOURCE: https://github.com/socketio/socket.io/blob/main/packages/engine.io-client/README.md#2025-04-11_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ngit clone git://github.com/socketio/engine.io-client.git\n```\n\n----------------------------------------\n\nTITLE: Installing Socket.IO Client Dependencies\nDESCRIPTION: Commands to navigate to the cloned repository directory and install all required dependencies using npm. This prepares the development environment for testing or contributing.\nSOURCE: https://github.com/socketio/socket.io/blob/main/packages/engine.io-client/README.md#2025-04-11_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\ncd engine.io-client\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Running NestJS Applications in Various Modes\nDESCRIPTION: Commands for running a NestJS application in development, watch mode, and production environments using npm scripts.\nSOURCE: https://github.com/socketio/socket.io/blob/main/examples/nestjs-example/README.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prod\n```\n\n----------------------------------------\n\nTITLE: Repository Clone and Setup\nDESCRIPTION: Commands to clone and set up the engine.io-parser repository for development.\nSOURCE: https://github.com/socketio/socket.io/blob/main/packages/engine.io-parser/Readme.md#2025-04-11_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ngit clone git://github.com/socketio/engine.io-parser.git\ncd engine.io-parser\nnpm ci\n```\n\n----------------------------------------\n\nTITLE: Cloning the Engine.IO Repository for Development\nDESCRIPTION: Command for cloning the Engine.IO repository from GitHub to contribute patches, run tests, or benchmarks.\nSOURCE: https://github.com/socketio/socket.io/blob/main/packages/engine.io/README.md#2025-04-11_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ngit clone git://github.com/LearnBoost/engine.io.git\n```\n\n----------------------------------------\n\nTITLE: JSON Structure for ERROR Packet Type in Socket.IO\nDESCRIPTION: Example of an ERROR packet type (code 4) for Socket.IO protocol, used when a connection to a namespace is refused with an optional error message.\nSOURCE: https://github.com/socketio/socket.io/blob/main/docs/socket.io-protocol/v3.md#2025-04-11_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": 4,\n  \"nsp\": \"/admin\",\n  \"data\": \"Not authorized\"\n}\n```\n\n----------------------------------------\n\nTITLE: Building App Bundle with Browserify\nDESCRIPTION: Shows the command to build an application bundle using browserify, which packages the app code along with its dependencies.\nSOURCE: https://github.com/socketio/socket.io/blob/main/packages/engine.io-client/README.md#2025-04-11_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ browserify app.js > bundle.js\n```\n\n----------------------------------------\n\nTITLE: Browserify Build Command\nDESCRIPTION: Command to build the application bundle using browserify.\nSOURCE: https://github.com/socketio/socket.io/blob/main/packages/engine.io-parser/Readme.md#2025-04-11_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nbrowserify app.js > bundle.js\n```\n\n----------------------------------------\n\nTITLE: Running Engine.IO Tests\nDESCRIPTION: Command for running the server tests for Engine.IO, which rely on the engine.io-client package.\nSOURCE: https://github.com/socketio/socket.io/blob/main/packages/engine.io/README.md#2025-04-11_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nnpm test\n```\n\n----------------------------------------\n\nTITLE: HTML Bundle Integration\nDESCRIPTION: Shows how to include the browserified bundle in an HTML page.\nSOURCE: https://github.com/socketio/socket.io/blob/main/packages/engine.io-parser/Readme.md#2025-04-11_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"/path/to/bundle.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Socket.IO Message Format Details\nDESCRIPTION: Breakdown of the Socket.IO message format components including character count, separators, and packet types.\nSOURCE: https://github.com/socketio/socket.io/blob/main/docs/socket.io-protocol/v4.md#2025-04-11_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\n96          => number of characters (not bytes) of the first message\n:           => separator\n0           => Engine.IO \"open\" packet type\n{\"sid\":...  => the Engine.IO handshake data\n2           => number of characters of the 2nd message\n:           => separator\n4           => Engine.IO \"message\" packet type\n0           => Socket.IO \"CONNECT\" packet type\n```\n\n----------------------------------------\n\nTITLE: Including Browserify Bundle in HTML\nDESCRIPTION: Shows how to include the browserify-generated bundle in an HTML page.\nSOURCE: https://github.com/socketio/socket.io/blob/main/packages/engine.io-client/README.md#2025-04-11_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"/path/to/bundle.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Compiling TypeScript for All Workspaces\nDESCRIPTION: Command to compile TypeScript code for all workspaces in the Socket.IO monorepo.\nSOURCE: https://github.com/socketio/socket.io/blob/main/CONTRIBUTING.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run compile -ws --if-present\n```\n\n----------------------------------------\n\nTITLE: Running Vue.js development server with hot-reload\nDESCRIPTION: Command to start the development server with hot-reload functionality for local development.\nSOURCE: https://github.com/socketio/socket.io/blob/main/examples/basic-crud-application/vue-client/README.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn serve\n```\n\n----------------------------------------\n\nTITLE: Applying Code Formatting to a Specific Workspace\nDESCRIPTION: Command to apply code formatting using Prettier to a specific workspace (socket.io in this example).\nSOURCE: https://github.com/socketio/socket.io/blob/main/CONTRIBUTING.md#2025-04-11_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm run format:fix --workspace=socket.io\n```\n\n----------------------------------------\n\nTITLE: Compiling TypeScript for a Specific Workspace\nDESCRIPTION: Command to compile TypeScript code for a specific workspace (socket.io in this example).\nSOURCE: https://github.com/socketio/socket.io/blob/main/CONTRIBUTING.md#2025-04-11_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run compile --workspace=socket.io\n```\n\n----------------------------------------\n\nTITLE: Running Tests for All Workspaces\nDESCRIPTION: Command to run test suites for all workspaces in the Socket.IO monorepo.\nSOURCE: https://github.com/socketio/socket.io/blob/main/CONTRIBUTING.md#2025-04-11_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpm test -ws\n```\n\n----------------------------------------\n\nTITLE: Applying Code Formatting to All Workspaces\nDESCRIPTION: Command to apply code formatting using Prettier to all workspaces in the Socket.IO monorepo.\nSOURCE: https://github.com/socketio/socket.io/blob/main/CONTRIBUTING.md#2025-04-11_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm run format:fix -ws\n```\n\n----------------------------------------\n\nTITLE: Running End-to-End Tests\nDESCRIPTION: Command to execute end-to-end tests using Protractor testing framework\nSOURCE: https://github.com/socketio/socket.io/blob/main/examples/angular-todomvc/README.md#2025-04-11_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nng e2e\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Socket.IO Development\nDESCRIPTION: Command to install all dependencies for the Socket.IO monorepo project using npm ci.\nSOURCE: https://github.com/socketio/socket.io/blob/main/CONTRIBUTING.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm ci\n```\n\n----------------------------------------\n\nTITLE: Running Tests for a Specific Workspace\nDESCRIPTION: Command to run test suites for a specific workspace (socket.io in this example).\nSOURCE: https://github.com/socketio/socket.io/blob/main/CONTRIBUTING.md#2025-04-11_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpm test --workspace=socket.io\n```\n\n----------------------------------------\n\nTITLE: Package Installation Command\nDESCRIPTION: NPM command to install the engine.io-parser package.\nSOURCE: https://github.com/socketio/socket.io/blob/main/packages/engine.io-parser/Readme.md#2025-04-11_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm install engine.io-parser\n```\n\n----------------------------------------\n\nTITLE: Generating Changelog for Engine.IO Client\nDESCRIPTION: Commands to install the conventional-changelog-cli tool and generate a changelog for the engine.io-client package.\nSOURCE: https://github.com/socketio/socket.io/blob/main/CONTRIBUTING.md#2025-04-11_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nnpm i -g conventional-changelog-cli\ncd packages/engine.io-client\nconventional-changelog -p angular --tag-prefix \"engine.io-client@\" --commit-path .\n```\n\n----------------------------------------\n\nTITLE: Starting Socket.io TODO Project with Docker and npm\nDESCRIPTION: Commands to set up and run the Socket.io TODO project. It involves starting Docker containers, installing dependencies, and launching the application.\nSOURCE: https://github.com/socketio/socket.io/blob/main/examples/basic-crud-application/server-postgres-cluster/README.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ docker-compose up -d\n$ npm install\n$ npm start\n```\n\n----------------------------------------\n\nTITLE: Release History Markdown Table\nDESCRIPTION: A markdown table displaying Socket.IO client version history with release dates and bundle sizes.\nSOURCE: https://github.com/socketio/socket.io/blob/main/packages/socket.io-client/CHANGELOG.md#2025-04-11_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Version | Release date | Bundle size (UMD min+gzip) |\n|-------------------------------------------------------------------------------------------------------------|----------------|----------------------------|\n| [4.8.1](#481-2024-10-25) | October 2024 | `14.4 KB` |\n```\n\n----------------------------------------\n\nTITLE: Markdown Release Notes\nDESCRIPTION: Detailed release notes for Socket.IO versions, including bug fixes, dependency updates, and feature changes written in markdown format.\nSOURCE: https://github.com/socketio/socket.io/blob/main/packages/socket.io/CHANGELOG.md#2025-04-11_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## [4.8.1](https://github.com/socketio/socket.io/compare/socket.io@4.8.0...socket.io@4.8.1) (2024-10-25)\n\nDue to a change in the bundler configuration, the production bundle (`socket.io.min.js`) did not support sending and receiving binary data in version `4.8.0`. This is now fixed.\n\n### Dependencies\n\n- [`engine.io@~6.6.0`](https://github.com/socketio/engine.io/releases/tag/6.5.2) (no change)\n- [`ws@~8.17.1`](https://github.com/websockets/ws/releases/tag/8.17.1) (no change)\n```\n\n----------------------------------------\n\nTITLE: Git Commit Reference\nDESCRIPTION: Reference to a specific Git commit fixing bundle mangling issue.\nSOURCE: https://github.com/socketio/socket.io/blob/main/packages/socket.io-client/CHANGELOG.md#2025-04-11_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n* **bundle:** do not mangle the \"_placeholder\" attribute ([ca9e994](https://github.com/socketio/socket.io/commit/ca9e994815aa2e31e0342e37ccdc2e9e8c5fd13c))\n```\n\n----------------------------------------\n\nTITLE: Running Angular Unit Tests\nDESCRIPTION: Command to execute unit tests for the Angular project using Karma test runner.\nSOURCE: https://github.com/socketio/socket.io/blob/main/examples/basic-crud-application/angular-client/README.md#2025-04-11_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nng test\n```\n\n----------------------------------------\n\nTITLE: Installing @socket.io/component-emitter via npm\nDESCRIPTION: Command to install the @socket.io/component-emitter package using npm.\nSOURCE: https://github.com/socketio/socket.io/blob/main/packages/socket.io-component-emitter/Readme.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm i @socket.io/component-emitter\n```\n\n----------------------------------------\n\nTITLE: Linting and fixing code in Vue.js project\nDESCRIPTION: Command to run the linter and automatically fix code style issues in the project.\nSOURCE: https://github.com/socketio/socket.io/blob/main/examples/basic-crud-application/vue-client/README.md#2025-04-11_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nyarn lint\n```\n\n----------------------------------------\n\nTITLE: Referencing Git Commit in Markdown\nDESCRIPTION: This snippet shows how to reference a specific Git commit in a Markdown changelog entry. It includes the commit hash and a brief description of the change.\nSOURCE: https://github.com/socketio/socket.io/blob/main/packages/socket.io-parser/CHANGELOG.md#2025-04-11_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* move binary detection back to the parser ([285e7cd](https://github.com/socketio/socket.io-parser/commit/285e7cd0d837adfc911c999e7294788681226ae1))\n```\n\n----------------------------------------\n\nTITLE: Starting the Next.js Development Server\nDESCRIPTION: Commands to start the Next.js development server using various package managers. The server can be started with npm, yarn, pnpm, or bun, depending on your preference.\nSOURCE: https://github.com/socketio/socket.io/blob/main/examples/nextjs-pages-router/README.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n# or\nyarn dev\n# or\npnpm dev\n# or\nbun dev\n```\n\n----------------------------------------\n\nTITLE: Documenting Version Comparison in Markdown\nDESCRIPTION: This snippet demonstrates how to document a version comparison in a Markdown changelog. It uses a link to compare two versions on GitHub.\nSOURCE: https://github.com/socketio/socket.io/blob/main/packages/socket.io-parser/CHANGELOG.md#2025-04-11_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## [4.0.1-rc1](https://github.com/socketio/socket.io-parser/compare/4.0.0...4.0.1-rc1) (2020-10-12)\n```\n\n----------------------------------------\n\nTITLE: Running Next.js Development Server\nDESCRIPTION: Commands to start the Next.js development server using various package managers including npm, yarn, pnpm, and bun.\nSOURCE: https://github.com/socketio/socket.io/blob/main/examples/nextjs-app-router/README.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n# or\nyarn dev\n# or\npnpm dev\n# or\nbun dev\n```\n\n----------------------------------------\n\nTITLE: Formatting Breaking Changes in Markdown\nDESCRIPTION: This snippet shows how to format and highlight breaking changes in a Markdown changelog. It uses a dedicated section with uppercase text for emphasis.\nSOURCE: https://github.com/socketio/socket.io/blob/main/packages/socket.io-parser/CHANGELOG.md#2025-04-11_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n### BREAKING CHANGES\n\n* the encode method is now synchronous ([28d4f03](https://github.com/socketio/socket.io-parser/commit/28d4f0309bdd9e306b78d1946d3e1760941d6544))\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Nuxt 3 Project\nDESCRIPTION: Commands for installing project dependencies using different package managers (npm, pnpm, yarn, bun). These commands should be run in the project root directory to set up the necessary packages.\nSOURCE: https://github.com/socketio/socket.io/blob/main/examples/nuxt-example/README.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# npm\nnpm install\n\n# pnpm\npnpm install\n\n# yarn\nyarn install\n\n# bun\nbun install\n```\n\n----------------------------------------\n\nTITLE: Decoding Empty Buffer in Base64 Encoding (JavaScript)\nDESCRIPTION: This code snippet fixes an issue with properly encoding an empty buffer in base64 encoding. It's part of a bug fix in version 5.0.5.\nSOURCE: https://github.com/socketio/socket.io/blob/main/packages/engine.io-parser/CHANGELOG.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Code not provided in the given content\n```\n\n----------------------------------------\n\nTITLE: Setting up Socket.IO Server\nDESCRIPTION: Commands to navigate to server directory, install dependencies, and start the Socket.IO server.\nSOURCE: https://github.com/socketio/socket.io/blob/main/examples/ReactNativeExample/README.md#2025-04-11_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncd server\n\nnpm install\n\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Adding File Extension for ESM Import (JavaScript)\nDESCRIPTION: This code snippet adds a missing file extension for ESM import. It's part of a bug fix in version 5.0.4.\nSOURCE: https://github.com/socketio/socket.io/blob/main/packages/engine.io-parser/CHANGELOG.md#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Code not provided in the given content\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Socket.IO Latency Tool\nDESCRIPTION: Command to install the required npm dependencies before running the application.\nSOURCE: https://github.com/socketio/socket.io/blob/main/packages/engine.io/examples/latency/README.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install\n```\n\n----------------------------------------\n\nTITLE: Updating RawData Type (TypeScript)\nDESCRIPTION: This code snippet updates the type of RawData. It's part of a bug fix in version 5.0.4 related to TypeScript typings.\nSOURCE: https://github.com/socketio/socket.io/blob/main/packages/engine.io-parser/CHANGELOG.md#2025-04-11_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// Code not provided in the given content\n```\n\n----------------------------------------\n\nTITLE: Running the Socket.IO Latency Test Server\nDESCRIPTION: Command to start the Node.js server for the latency testing application. After execution, the server can be accessed via a web browser.\nSOURCE: https://github.com/socketio/socket.io/blob/main/packages/engine.io/examples/latency/README.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ node index\n```\n\n----------------------------------------\n\nTITLE: Tracking Buffer Initial Length (JavaScript)\nDESCRIPTION: This code snippet keeps track of the buffer's initial length. It's part of a bug fix in version 4.0.0.\nSOURCE: https://github.com/socketio/socket.io/blob/main/packages/engine.io-parser/CHANGELOG.md#2025-04-11_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// Code not provided in the given content\n```\n\n----------------------------------------\n\nTITLE: HTTP Long-Polling Binary Packet Example - Engine.IO Protocol\nDESCRIPTION: Example of a packet containing both text and binary data in HTTP long-polling transport, showing how binary data is base64-encoded and prefixed with 'b'.\nSOURCE: https://github.com/socketio/socket.io/blob/main/docs/engine.io-protocol/v4-current.md#2025-04-11_snippet_9\n\nLANGUAGE: plaintext\nCODE:\n```\n4hello\\x1ebAQIDBA==\n\nwith:\n\n4         => message packet type\nhello     => message payload\n\\x1e      => separator\nb         => binary prefix\nAQIDBA==  => buffer <01 02 03 04> encoded as base64\n```\n\n----------------------------------------\n\nTITLE: Breaking Change Reference to Buffer.allocUnsafe in Node.js\nDESCRIPTION: Reference to the Buffer.allocUnsafe method documentation which was added in Node.js v5.10.0, explaining why Socket.io no longer supports Node.js 4.\nSOURCE: https://github.com/socketio/socket.io/blob/main/packages/engine.io-parser/CHANGELOG.md#2025-04-11_snippet_11\n\nLANGUAGE: markdown\nCODE:\n```\nhttps://nodejs.org/docs/latest/api/buffer.html#buffer_class_method_buffer_allocunsafe_size\n```\n\n----------------------------------------\n\nTITLE: HTTP Long-Polling Packet Example - Engine.IO Protocol\nDESCRIPTION: Example of concatenated packets in HTTP long-polling transport, showing text messages and a ping packet separated by record separators.\nSOURCE: https://github.com/socketio/socket.io/blob/main/docs/engine.io-protocol/v4-current.md#2025-04-11_snippet_8\n\nLANGUAGE: plaintext\nCODE:\n```\n4hello\\x1e2\\x1e4world\n\nwith:\n\n4      => message packet type\nhello  => message payload\n\\x1e   => separator\n2      => ping packet type\n\\x1e   => separator\n4      => message packet type\nworld  => message payload\n```\n\n----------------------------------------\n\nTITLE: Socket.IO Parser v2/Protocol v3 Performance Metrics\nDESCRIPTION: Benchmark results showing operations per second for the Socket.IO parser v2/protocol v3 implementation across various encoding and decoding operations in both string and binary formats.\nSOURCE: https://github.com/socketio/socket.io/blob/main/packages/engine.io-parser/benchmarks/results.md#2025-04-11_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nencode packet as string x 228,038 ops/sec ±9.28% (40 runs sampled)\nencode packet as binary x 163,392 ops/sec ±8.72% (67 runs sampled)\nencode payload as string x 73,457 ops/sec ±14.83% (56 runs sampled)\nencode payload as binary x 71,400 ops/sec ±3.63% (75 runs sampled)\ndecode packet from string x 22,712,325 ops/sec ±3.14% (90 runs sampled)\ndecode packet from binary x 4,849,781 ops/sec ±1.27% (87 runs sampled)\ndecode payload from string x 82,514 ops/sec ±49.93% (22 runs sampled)\ndecode payload from binary x 149,206 ops/sec ±25.90% (76 runs sampled)\n```\n\n----------------------------------------\n\nTITLE: Current Socket.IO Parser Performance Metrics\nDESCRIPTION: Benchmark results showing operations per second for the current Socket.IO parser implementation across various encoding and decoding operations in both string and binary formats.\nSOURCE: https://github.com/socketio/socket.io/blob/main/packages/engine.io-parser/benchmarks/results.md#2025-04-11_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nencode packet as string x 175,944 ops/sec ±5.64% (25 runs sampled)\nencode packet as binary x 176,945 ops/sec ±16.60% (51 runs sampled)\nencode payload as string x 47,836 ops/sec ±9.84% (34 runs sampled)\nencode payload as binary x 123,987 ops/sec ±22.03% (53 runs sampled)\ndecode packet from string x 27,680,068 ops/sec ±0.92% (89 runs sampled)\ndecode packet from binary x 7,747,089 ops/sec ±1.65% (83 runs sampled)\ndecode payload from string x 198,908 ops/sec ±27.95% (23 runs sampled)\ndecode payload from binary x 179,574 ops/sec ±41.32% (23 runs sampled)\n```\n\n----------------------------------------\n\nTITLE: Markdown Table of Socket.IO Package Changelogs\nDESCRIPTION: A markdown table listing all Socket.IO-related packages and their corresponding changelog file locations within the monorepo structure.\nSOURCE: https://github.com/socketio/socket.io/blob/main/CHANGELOG.md#2025-04-11_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Package                        | Changelog                                               |\n|--------------------------------|---------------------------------------------------------|\n| `engine.io`                    | [link](packages/engine.io/CHANGELOG.md)                 |\n| `engine.io-client`             | [link](packages/engine.io-client/CHANGELOG.md)          |\n| `engine.io-parser`             | [link](packages/engine.io-parser/CHANGELOG.md)          |\n| `socket.io`                    | [link](packages/socket.io/CHANGELOG.md)                 |\n| `socket.io-adapter`            | [link](packages/socket.io-adapter/CHANGELOG.md)         |\n| `socket.io-client`             | [link](packages/socket.io-client/CHANGELOG.md)          |\n| `@socket.io/cluster-engine`    | [link](packages/socket.io-cluster-engine/CHANGELOG.md)  |\n| `@socket.io/component-emitter` | [link](packages/socket.io-component-emitter/History.md) |\n| `socket.io-parser`             | [link](packages/socket.io-parser/CHANGELOG.md)          |\n```\n\n----------------------------------------\n\nTITLE: Benchmarking JSON Parsing Operations in JavaScript\nDESCRIPTION: This code snippet presents the results of performance benchmarks for various JSON parsing operations. It includes tests for parsing small and large JSON data, as well as JSON containing small and large binary content. The results are measured in operations per second (ops/sec) with associated error margins and sample sizes.\nSOURCE: https://github.com/socketio/socket.io/blob/main/packages/socket.io-parser/bench/results.md#2025-04-11_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nsmall json parse                x 67,893 ops/sec ±4.30% (76 runs sampled)\nbig json parse                  x  1,507 ops/sec ±1.72% (82 runs sampled)\njson with small binary parse    x 62,367 ops/sec ±6.03% (74 runs sampled)\njson with big binary parse      x    572 ops/sec ±1.25% (86 runs sampled)\n```\n\n----------------------------------------\n\nTITLE: Socket.IO Client Directory Structure\nDESCRIPTION: File and directory structure for a basic Socket.IO client implementation, showing the organization of bundled files, source code, tests, and configuration files.\nSOURCE: https://github.com/socketio/socket.io/blob/main/examples/basic-websocket-client/README.md#2025-04-11_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n├── bundle\n│   └── socket.io.min.js\n├── src\n│   └── index.js\n├── test\n│   └── index.js\n├── check-bundle-size.js\n├── package.json\n├── README.md\n└── rollup.config.js\n```\n\n----------------------------------------\n\nTITLE: HTML Backer Links and Images\nDESCRIPTION: HTML code displaying a grid of backer links with their avatars from OpenCollective. Each backer has their own link and avatar image loaded from the OpenCollective API.\nSOURCE: https://github.com/socketio/socket.io/blob/main/packages/socket.io/Readme.md#2025-04-11_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<a href=\"https://opencollective.com/socketio/backer/0/website\" target=\"_blank\"><img src=\"https://opencollective.com/socketio/backer/0/avatar.svg\"></a>\n```"
  }
]