[
  {
    "owner": "oneapi-src",
    "repo": "level-zero",
    "content": "TITLE: Building Level Zero on Linux with CMake\nDESCRIPTION: This snippet shows how to build and install the Level Zero project on Linux using CMake. It creates a build directory, configures the build with Release mode, builds the package and install targets.\nSOURCE: https://github.com/oneapi-src/level-zero/blob/master/README.md#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nmkdir build\ncd build\ncmake .. -D CMAKE_BUILD_TYPE=Release\ncmake --build . --target package\ncmake --build . --target install\n```\n\n----------------------------------------\n\nTITLE: Setting Minimum CMake Version\nDESCRIPTION: Sets the minimum required CMake version for the project.  This ensures that the CMake version used is at least 3.12.0, and will generate a FATAL_ERROR if it is not. The C++ standard is also set to 14, requiring it to be enabled and extensions disabled.\nSOURCE: https://github.com/oneapi-src/level-zero/blob/master/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.12.0 FATAL_ERROR)\nset(CMAKE_CXX_STANDARD 14)\nset(CMAKE_CXX_STANDARD_REQUIRED ON)\nset(CMAKE_CXX_EXTENSIONS OFF)\n```\n\n----------------------------------------\n\nTITLE: Adding Subdirectories\nDESCRIPTION: This block adds several subdirectories to the build. The `loader` and `layers` directories are only added if `BUILD_STATIC` is not enabled, indicating a shared library build. The `lib`, `drivers`, and `utils` directories are always added.\nSOURCE: https://github.com/oneapi-src/level-zero/blob/master/source/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(lib)\nif (NOT BUILD_STATIC)\n    add_subdirectory(loader)\n    add_subdirectory(layers)\nendif()\nadd_subdirectory(drivers)\nadd_subdirectory(utils)\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories for Compilation\nDESCRIPTION: This snippet sets the include directories for the Level Zero project. It adds the `include` directory and the `source/wrapper/include` directory to the list of include paths, ensuring that the compiler can find the necessary header files.\nSOURCE: https://github.com/oneapi-src/level-zero/blob/master/CMakeLists.txt#_snippet_15\n\nLANGUAGE: cmake\nCODE:\n```\ninclude_directories(${CMAKE_CURRENT_SOURCE_DIR}/include)\ninclude_directories(${CMAKE_CURRENT_SOURCE_DIR}/source/wrapper/include)\n\n\ninclude_directories(\"${CMAKE_CURRENT_SOURCE_DIR}\")\n```\n\n----------------------------------------\n\nTITLE: Setting Target Sources in CMake\nDESCRIPTION: This CMake code snippet sets the target sources for the specified target loader name. It includes the core API and DDI implementations for ze, zet, and zes interfaces, tracing functionality, and the ze_lib.h header file. The sources are added as private, meaning they are only visible to the target itself.\nSOURCE: https://github.com/oneapi-src/level-zero/blob/master/source/lib/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_sources(${TARGET_LOADER_NAME}\n    PRIVATE\n        ${CMAKE_CURRENT_SOURCE_DIR}/ze_libapi.cpp\n        ${CMAKE_CURRENT_SOURCE_DIR}/ze_libddi.cpp\n        ${CMAKE_CURRENT_SOURCE_DIR}/zet_libapi.cpp\n        ${CMAKE_CURRENT_SOURCE_DIR}/zet_libddi.cpp\n        ${CMAKE_CURRENT_SOURCE_DIR}/zes_libapi.cpp\n        ${CMAKE_CURRENT_SOURCE_DIR}/zes_libddi.cpp\n        ${CMAKE_CURRENT_SOURCE_DIR}/zel_tracing_libapi.cpp\n        ${CMAKE_CURRENT_SOURCE_DIR}/zel_tracing_libddi.cpp\n        ${CMAKE_CURRENT_SOURCE_DIR}/ze_lib.h\n        ${CMAKE_CURRENT_SOURCE_DIR}/ze_lib.cpp\n        ${CMAKE_CURRENT_SOURCE_DIR}/ze_tracing_register_cb_libapi.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Creating and Configuring the ze_null Library\nDESCRIPTION: This snippet defines a shared library named ze_null, specifies its source files, sets its version and SOVERSION properties, and defines public include directories for the target. It also conditionally installs the library to the appropriate directories.\nSOURCE: https://github.com/oneapi-src/level-zero/blob/master/source/drivers/null/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(TARGET_NAME ze_null)\n\nadd_library(${TARGET_NAME}\n    SHARED\n        ${CMAKE_CURRENT_SOURCE_DIR}/ze_null.h\n        ${CMAKE_CURRENT_SOURCE_DIR}/ze_null.cpp\n        ${CMAKE_CURRENT_SOURCE_DIR}/ze_nullddi.cpp\n        ${CMAKE_CURRENT_SOURCE_DIR}/zet_nullddi.cpp\n        ${CMAKE_CURRENT_SOURCE_DIR}/zes_nullddi.cpp\n)\n\nset_target_properties(${TARGET_NAME} PROPERTIES\n    VERSION \"${PROJECT_VERSION_MAJOR}.${PROJECT_VERSION_MINOR}.${PROJECT_VERSION_PATCH}\"\n    SOVERSION \"${PROJECT_VERSION_MAJOR}\"\n)\n\ntarget_include_directories(${TARGET_NAME}\n    PUBLIC\n        ${CMAKE_CURRENT_SOURCE_DIR}\n)\n\nif(INSTALL_NULL_DRIVER)\n    install(TARGETS ze_null\n        ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR} COMPONENT level-zero-devel\n        RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR} COMPONENT level-zero\n        LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR} COMPONENT level-zero\n        NAMELINK_COMPONENT level-zero-devel\n    )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Subdirectories for Source, Samples, and Tests\nDESCRIPTION: This code adds the `source`, `samples`, and `test` directories as subdirectories to the build process.  The `test` subdirectory is only added if `BUILD_L0_LOADER_TESTS` is enabled and the compiler is not MSVC or is MSVC and `BUILD_STATIC` is not enabled. These directories contain the core source code, example applications, and unit tests for the Level Zero project, respectively.\nSOURCE: https://github.com/oneapi-src/level-zero/blob/master/CMakeLists.txt#_snippet_16\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(source)\nadd_subdirectory(samples)\n\nif(BUILD_L0_LOADER_TESTS AND (NOT MSVC OR (MSVC AND NOT BUILD_STATIC)))\n    include(CTest)\n    add_subdirectory(test)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Installing Level Zero Loader\nDESCRIPTION: This command installs the `ze_loader` target to the specified destination directories. It installs the archive, runtime, and library components to their respective directories using the defined component strings.\nSOURCE: https://github.com/oneapi-src/level-zero/blob/master/source/CMakeLists.txt#_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(TARGETS ze_loader\n    ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR} COMPONENT ${SDK_COMPONENT_STRING}\n    RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR} COMPONENT ${LIB_COMPONENT_STRING}\n    LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR} COMPONENT ${LIB_COMPONENT_STRING}\n    NAMELINK_COMPONENT ${SDK_COMPONENT_STRING}\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Library Target in CMake\nDESCRIPTION: This snippet defines a shared library target named '${TARGET_NAME}' (ze_validation_layer) and specifies the source files that make up the library. It also includes the generated resource file.\nSOURCE: https://github.com/oneapi-src/level-zero/blob/master/source/layers/validation/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(${TARGET_NAME}\n    SHARED\n        ${CMAKE_CURRENT_SOURCE_DIR}/ze_validation_layer.h\n        ${CMAKE_CURRENT_SOURCE_DIR}/ze_validation_layer.cpp\n        ${CMAKE_CURRENT_SOURCE_DIR}/ze_valddi.cpp\n        ${CMAKE_CURRENT_SOURCE_DIR}/zet_valddi.cpp\n        ${CMAKE_CURRENT_SOURCE_DIR}/zes_valddi.cpp\n        ${CMAKE_CURRENT_BINARY_DIR}/ZeValidationLayerVersion.rc\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Integrity Checks for MSVC\nDESCRIPTION: This block sets the LINK_FLAGS property for the ze_loader target when using MSVC and if L0_DLL_INTEGRITY_CHECKS is enabled. The /INTEGRITYCHECK flag enables DLL integrity checks in Windows.\nSOURCE: https://github.com/oneapi-src/level-zero/blob/master/source/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nif(MSVC AND L0_DLL_INTEGRITY_CHECKS)\n    set_target_properties(ze_loader PROPERTIES LINK_FLAGS \"${CMAKE_CXX_LINKER_WRAPPER_FLAG}/INTEGRITYCHECK\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Project Version\nDESCRIPTION: Defines the project name and version number according to semantic versioning. It initializes the project with the name 'level-zero' and the version '1.22.0'.\nSOURCE: https://github.com/oneapi-src/level-zero/blob/master/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nproject(level-zero VERSION 1.22.0)\n```\n\n----------------------------------------\n\nTITLE: Link Libraries to Target in CMake\nDESCRIPTION: Links the Level Zero loader library and CMake dynamic link libraries to the 'zello_world' target.  This ensures that the executable has access to the necessary Level Zero functions and other system libraries at runtime.\nSOURCE: https://github.com/oneapi-src/level-zero/blob/master/samples/zello_world/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(${TARGET_NAME} PRIVATE\n    ${TARGET_LOADER_NAME}\n    ${CMAKE_DL_LIBS}\n)\n```\n\n----------------------------------------\n\nTITLE: Create Test Executable with Dependencies in CMake\nDESCRIPTION: This CMake snippet creates an executable named 'tests', specifying source files ('loader_api.cpp', 'loader_validation_layer.cpp'), include directories, and linked libraries (GTest, Level Zero loader).\nSOURCE: https://github.com/oneapi-src/level-zero/blob/master/test/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(\n  tests\n  loader_api.cpp\n  loader_validation_layer.cpp\n)\ntarget_include_directories(tests PRIVATE ${CMAKE_SOURCE_DIR}/include)\ntarget_link_libraries(\n  tests\n  GTest::gtest_main\n  ${TARGET_LOADER_NAME}\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Output Directories\nDESCRIPTION: Sets the output directories for runtime executables, libraries, and archives.  This directs CMake to place build outputs in the specified directories within the build directory.\nSOURCE: https://github.com/oneapi-src/level-zero/blob/master/CMakeLists.txt#_snippet_9\n\nLANGUAGE: CMake\nCODE:\n```\nset(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)\nset(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)\nset(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)\n```\n\n----------------------------------------\n\nTITLE: Define Source Files and Create Static Library (CMake)\nDESCRIPTION: This snippet defines the source files for the level_zero_utils library (logging.h and logging.cpp) and creates a static library using the add_library command. The STATIC keyword specifies that a static library should be built.\nSOURCE: https://github.com/oneapi-src/level-zero/blob/master/source/utils/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(logging_files logging.h logging.cpp)\nadd_library(level_zero_utils STATIC ${logging_files})\n```\n\n----------------------------------------\n\nTITLE: Installing Level Zero API Headers\nDESCRIPTION: This code block installs the Level Zero API header files to the specified destination. It uses `file(GLOB)` to find all header files in the `include` directory and then uses `install(FILES)` to copy these headers to the `./include/level_zero` directory. The component is set to SDK or level-zero-devel depending on whether BUILD_INSTALLER is set.\nSOURCE: https://github.com/oneapi-src/level-zero/blob/master/CMakeLists.txt#_snippet_18\n\nLANGUAGE: cmake\nCODE:\n```\nfile(GLOB LEVEL_ZERO_API_HEADERS \"${CMAKE_CURRENT_SOURCE_DIR}/include/*.h\")\n\nset(SDK_COMPONENT_STRING \"level-zero-devel\")\n\nif(BUILD_INSTALLER)\n    set(SDK_COMPONENT_STRING \"SDK\")\nendif()\n\ninstall(FILES ${LEVEL_ZERO_API_HEADERS}\n    DESTINATION ./include/level_zero\n    COMPONENT ${SDK_COMPONENT_STRING}\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories in CMake\nDESCRIPTION: This snippet sets the include directories for the target '${TARGET_NAME}'. These directories are used by the compiler to find header files during compilation.\nSOURCE: https://github.com/oneapi-src/level-zero/blob/master/source/layers/validation/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_include_directories(${TARGET_NAME}\n    PUBLIC\n        ${CMAKE_CURRENT_SOURCE_DIR}\n        ${CMAKE_CURRENT_SOURCE_DIR}/common\n        ${CMAKE_CURRENT_SOURCE_DIR}/handle_lifetime_tracking\n        ${CMAKE_CURRENT_SOURCE_DIR}/checkers/parameter_validation\n        ${CMAKE_CURRENT_SOURCE_DIR}/checkers/template\n        ${CMAKE_CURRENT_SOURCE_DIR}/../../utils\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Target Name in CMake\nDESCRIPTION: This snippet sets the target name for the Level Zero validation layer to 'ze_validation_layer'. This name is used to refer to the library throughout the CMake configuration.\nSOURCE: https://github.com/oneapi-src/level-zero/blob/master/source/layers/validation/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(TARGET_NAME ze_validation_layer)\n```\n\n----------------------------------------\n\nTITLE: Linking Libraries for Level Zero Loader\nDESCRIPTION: This command links the `${TARGET_LOADER_NAME}` target with the necessary libraries. It links against `CMAKE_DL_LIBS` (dynamic linking libraries) and `level_zero_utils` privately.\nSOURCE: https://github.com/oneapi-src/level-zero/blob/master/source/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_link_libraries(${TARGET_LOADER_NAME} PRIVATE ${CMAKE_DL_LIBS} level_zero_utils)\n```\n\n----------------------------------------\n\nTITLE: Finding spdlog\nDESCRIPTION: Finds the spdlog library. If SYSTEM_SPDLOG is enabled, it attempts to find a system-installed spdlog.  If found, a message is displayed; otherwise, a FATAL_ERROR is generated. If SYSTEM_SPDLOG is not enabled, it includes the spdlog headers from the third-party directory.\nSOURCE: https://github.com/oneapi-src/level-zero/blob/master/CMakeLists.txt#_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nif(SYSTEM_SPDLOG)\n\tfind_package(spdlog CONFIG)\n\tif(spdlog_FOUND)\n\t\tmessage(STATUS \"System spdlog found.\")\n\telse()\n\t\tmessage(FATAL_ERROR \"SYSTEM_SPDLOG specified but spdlog wasn't found.\")\n\tendif()\nelse()\n    include_directories(\"${CMAKE_CURRENT_SOURCE_DIR}/third_party/spdlog_headers\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Platform-Specific Source Selection in CMake\nDESCRIPTION: This CMake snippet uses a conditional statement to include platform-specific source files for Windows and Linux. If the WIN32 macro is defined, the windows/lib_init.cpp file is added as a private source to the target. Otherwise, the linux/lib_init.cpp file is added.\nSOURCE: https://github.com/oneapi-src/level-zero/blob/master/source/lib/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nif(WIN32)\n    target_sources(${TARGET_LOADER_NAME}\n        PRIVATE\n            ${CMAKE_CURRENT_SOURCE_DIR}/windows/lib_init.cpp\n    )\nelse()\n    target_sources(${TARGET_LOADER_NAME}\n        PRIVATE\n            ${CMAKE_CURRENT_SOURCE_DIR}/linux/lib_init.cpp\n    )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Define Target Library\nDESCRIPTION: Defines the ze_tracing_layer shared library, specifying source files and header files required for building the library. Includes files such as ze_tracing_layer.h, ze_tracing_layer.cpp, and ZeTracingLayerVersion.rc.\nSOURCE: https://github.com/oneapi-src/level-zero/blob/master/source/layers/tracing/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(${TARGET_NAME}\n    SHARED\n        ${CMAKE_CURRENT_SOURCE_DIR}/ze_tracing_layer.h\n        ${CMAKE_CURRENT_SOURCE_DIR}/tracing.h\n        ${CMAKE_CURRENT_SOURCE_DIR}/tracing_imp.h\n        ${CMAKE_CURRENT_SOURCE_DIR}/ze_tracing_layer.cpp\n        ${CMAKE_CURRENT_SOURCE_DIR}/ze_trcddi.cpp\n        ${CMAKE_CURRENT_SOURCE_DIR}/tracing_imp.cpp\n        ${CMAKE_CURRENT_SOURCE_DIR}/ze_tracing.cpp\n        ${CMAKE_CURRENT_SOURCE_DIR}/ze_tracing_cb_structs.h\n        ${CMAKE_CURRENT_SOURCE_DIR}/ze_tracing_register_cb.cpp\n        ${CMAKE_CURRENT_BINARY_DIR}/ZeTracingLayerVersion.rc\n)\n```\n\n----------------------------------------\n\nTITLE: Finding Git and Retrieving SHA\nDESCRIPTION: Finds Git and retrieves the current commit SHA.  If Git is found, it executes a command to retrieve the SHA of the HEAD commit and stores it in the VERSION_SHA variable. If Git is not found, it sets VERSION_SHA to a default message. The loader definition is created to pass in the value.\nSOURCE: https://github.com/oneapi-src/level-zero/blob/master/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nfind_package(Git)\nif(Git_FOUND)\n\tif(MSVC)\n\t\texecute_process(\n\t\t\tCOMMAND CMD /c ${GIT_EXECUTABLE} rev-parse HEAD\n\t\t\tOUTPUT_VARIABLE VERSION_SHA\n\t\t\tOUTPUT_STRIP_TRAILING_WHITESPACE\n\t\t\tWORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}\n\t\t)\n\telse()\n\texecute_process(\n\t\tCOMMAND ${GIT_EXECUTABLE} rev-parse HEAD\n\t\tOUTPUT_VARIABLE VERSION_SHA\n\t\tOUTPUT_STRIP_TRAILING_WHITESPACE\n\t\tWORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}\n\t)\n\tendif()\nelse()\n\tset(VERSION_SHA \" - No git SHA found, compiled outside git folder.\")\nendif()\nadd_definitions(-DLOADER_VERSION_SHA=\"${VERSION_SHA}\")\n```\n\n----------------------------------------\n\nTITLE: Adding Validation Subdirectory in CMake\nDESCRIPTION: This snippet uses the `add_subdirectory` command in CMake to include the 'validation' subdirectory in the build process.  This allows CMake to find and process the CMakeLists.txt file within the 'validation' directory, incorporating its build targets into the main project.\nSOURCE: https://github.com/oneapi-src/level-zero/blob/master/source/layers/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(validation)\n```\n\n----------------------------------------\n\nTITLE: Setting Project Version Variables\nDESCRIPTION: Updates relevant variables to include the project version patch.  This sets PROJECT_VERSION, CMAKE_PROJECT_VERSION_PATCH, and CMAKE_PROJECT_VERSION based on PROJECT_VERSION_MAJOR, PROJECT_VERSION_MINOR, and PROJECT_VERSION_PATCH. It also defines preprocessor definitions for these version components.\nSOURCE: https://github.com/oneapi-src/level-zero/blob/master/CMakeLists.txt#_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\n# Update other relevant variables to include the patch\nset(PROJECT_VERSION \"${PROJECT_VERSION_MAJOR}.${PROJECT_VERSION_MINOR}.${PROJECT_VERSION_PATCH}\")\nset(CMAKE_PROJECT_VERSION_PATCH \"${PROJECT_VERSION_PATCH}\")\nset(CMAKE_PROJECT_VERSION \"${PROJECT_VERSION}\")\nadd_definitions(-DLOADER_VERSION_MAJOR=${PROJECT_VERSION_MAJOR})\nadd_definitions(-DLOADER_VERSION_MINOR=${PROJECT_VERSION_MINOR})\nadd_definitions(-DLOADER_VERSION_PATCH=${PROJECT_VERSION_PATCH})\n```\n\n----------------------------------------\n\nTITLE: Building Level Zero Loader Library\nDESCRIPTION: This block conditionally builds the Level Zero loader as either a static or shared library based on the `BUILD_STATIC` variable. It defines the target name, library type (STATIC or SHARED), and includes the version resource file in the build. A compiler definition `DYNAMIC_LOAD_LOADER` is set to \"1\" when building a static library.\nSOURCE: https://github.com/oneapi-src/level-zero/blob/master/source/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(GNUInstallDirs)\nif (BUILD_STATIC)\n    message(STATUS \"Building loader as static library\")\n    add_library(${TARGET_LOADER_NAME}\n        STATIC\n        \"\"\n        ${CMAKE_CURRENT_BINARY_DIR}/ZeLoaderVersion.rc\n    )\n    add_definitions(-DDYNAMIC_LOAD_LOADER=\"1\")\nelse()\n    message(STATUS \"Building loader as dynamic library\")\n    add_library(${TARGET_LOADER_NAME}\n        SHARED\n        \"\"\n        ${CMAKE_CURRENT_BINARY_DIR}/ZeLoaderVersion.rc\n    )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Tracing Subdirectory in CMake\nDESCRIPTION: This snippet uses the `add_subdirectory` command in CMake to include the 'tracing' subdirectory in the build process. This ensures that the CMakeLists.txt file within the 'tracing' directory is processed, allowing its build targets to be integrated into the main project.\nSOURCE: https://github.com/oneapi-src/level-zero/blob/master/source/layers/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(tracing)\n```\n\n----------------------------------------\n\nTITLE: CXX Compiler Support\nDESCRIPTION: Checks C++ compiler support for C++14 and sets compiler flags. It checks if the compiler supports C++14 and sets the appropriate flag.  It also sets permissive flags for UNIX and non-UNIX systems and adds warnings for non-IntelLLVM compilers.\nSOURCE: https://github.com/oneapi-src/level-zero/blob/master/CMakeLists.txt#_snippet_11\n\nLANGUAGE: CMake\nCODE:\n```\n#CXX compiler support\nif(NOT MSVC)\n    include(CheckCXXCompilerFlag)\n    CHECK_CXX_COMPILER_FLAG(\"-std=c++14\" COMPILER_SUPPORTS_CXX14)\n    if(COMPILER_SUPPORTS_CXX14)\n        set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -std=c++14\")\n    else()\n        message(STATUS \"The compiler ${CMAKE_CXX_COMPILER} has no C++14 support.  Please use a different C++ compiler.\")\n    endif()\n    if (UNIX)\n        set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -fpermissive -fPIC\")\n    else()\n        set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -fpermissive\")\n    endif()\n    if(NOT CMAKE_CXX_COMPILER_ID STREQUAL IntelLLVM)\n        set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -Wall -Wnon-virtual-dtor\")\n    endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Address Sanitizer Support\nDESCRIPTION: Enables the Address Sanitizer (ASan) for memory error detection. If USE_ASAN is enabled and the compiler is not MSVC, it sets compiler and linker flags to enable ASan.  If MSVC is used, a warning message is displayed because ASan is not supported on Windows.\nSOURCE: https://github.com/oneapi-src/level-zero/blob/master/CMakeLists.txt#_snippet_13\n\nLANGUAGE: CMake\nCODE:\n```\nif(USE_ASAN)\n    if(NOT MSVC)\n        # -fno-omit-frame-pointer is included for nicer stack traces in error messages\n        set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -fsanitize=address -fno-omit-frame-pointer\")\n        set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -fsanitize=address -fno-omit-frame-pointer\")\n        set(CMAKE_EXE_LINKER_FLAGS \"${CMAKE_EXE_LINKER_FLAGS} -fsanitize=address\")\n        set(CMAKE_SHARED_LINKER_FLAGS \"${CMAKE_SHARED_LINKER_FLAGS} -fsanitize=address\")\n    else()\n        message(WARNING \"Address Sanitizer is not supported on Windows\")\n    endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Add Level Zero Missing API Test with Environment Variables in CMake\nDESCRIPTION: This CMake snippet defines a test case named 'tests_missing_api' that executes the 'tests' executable with a specific gtest filter to target a Level Zero test when zeInitDrivers API is unsupported. It sets environment variables to enable loader debug tracing and a null driver for testing purposes.\nSOURCE: https://github.com/oneapi-src/level-zero/blob/master/test/CMakeLists.txt#_snippet_12\n\nLANGUAGE: CMake\nCODE:\n```\nadd_test(NAME tests_missing_api COMMAND tests --gtest_filter=*GivenZeInitDriversUnsupportedOnTheDriverWhenCallingZeInitDriversThenUninitializedReturned*)\nset_property(TEST tests_missing_api PROPERTY ENVIRONMENT \"ZE_ENABLE_LOADER_DEBUG_TRACE=1;ZE_ENABLE_NULL_DRIVER=1\")\n```\n\n----------------------------------------\n\nTITLE: Enable Position Independent Code (CMake)\nDESCRIPTION: This snippet sets the POSITION_INDEPENDENT_CODE property to ON for the level_zero_utils library. This ensures that the generated code is position-independent, which is required for shared libraries and is generally good practice.\nSOURCE: https://github.com/oneapi-src/level-zero/blob/master/source/utils/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset_property(TARGET level_zero_utils PROPERTY POSITION_INDEPENDENT_CODE ON)\n```\n\n----------------------------------------\n\nTITLE: MSVC Specific Settings\nDESCRIPTION: Configures MSVC-specific settings, including custom command binary directory, Control Flow Guard, dynamic base support, link time code generation, and Spectre mitigation. The custom command path is set for MSVC. Control Flow Guard and /DYNAMICBASE are enabled. /GL flag added. Spectre mitigation is enabled if the compiler is not Clang or IntelLLVM.\nSOURCE: https://github.com/oneapi-src/level-zero/blob/master/CMakeLists.txt#_snippet_10\n\nLANGUAGE: CMake\nCODE:\n```\n#Define a path for custom commands to work around MSVC\nset(CUSTOM_COMMAND_BINARY_DIR ${CMAKE_RUNTIME_OUTPUT_DIRECTORY})\nif(MSVC)\n    #MSVC implicitly adds $<CONFIG> to the output path\n    set(CUSTOM_COMMAND_BINARY_DIR ${CUSTOM_COMMAND_BINARY_DIR}/$<CONFIG>)\n    #enabling Control Flow Guard\n    set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} /guard:cf\")\n    set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} /guard:cf\")\n    set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} /DYNAMICBASE\")\n    set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} /DYNAMICBASE\")\n    set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} /GL\")\n    set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} /GL\")\n    set(CMAKE_SHARED_LINKER_FLAGS \"${CMAKE_SHARED_LINKER_FLAGS} ${CMAKE_CXX_LINKER_WRAPPER_FLAG}/DYNAMICBASE\")\n    set(CMAKE_SHARED_LINKER_FLAGS \"${CMAKE_SHARED_LINKER_FLAGS} ${CMAKE_CXX_LINKER_WRAPPER_FLAG}/guard:cf\")\n    set(CMAKE_SHARED_LINKER_FLAGS \"${CMAKE_SHARED_LINKER_FLAGS} ${CMAKE_CXX_LINKER_WRAPPER_FLAG}/LTCG /INCREMENTAL:NO\")\n    # enable Spectre Mitigation, not supported by clang-cl\n    if((NOT CMAKE_CXX_COMPILER_ID STREQUAL Clang) AND (NOT CMAKE_CXX_COMPILER_ID STREQUAL IntelLLVM))\n        set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} /Qspectre\")\n    endif()\n    if((NOT CMAKE_C_COMPILER_ID STREQUAL Clang) AND NOT (CMAKE_C_COMPILER_ID STREQUAL IntelLLVM))\n        set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} /Qspectre\")\n    endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Add Level Zero Multi Call Failure Test with Environment Variables in CMake\nDESCRIPTION: This CMake snippet defines a test case named 'tests_multi_call_failure' that executes the 'tests' executable with a specific gtest filter to target a Level Zero test that handles multiple calls to zeInitDrivers, expecting success when types are supported after initial failures. It sets environment variables to enable loader debug tracing and a null driver for testing purposes.\nSOURCE: https://github.com/oneapi-src/level-zero/blob/master/test/CMakeLists.txt#_snippet_13\n\nLANGUAGE: CMake\nCODE:\n```\nadd_test(NAME tests_multi_call_failure COMMAND tests --gtest_filter=*GivenLevelZeroLoaderPresentWhenCallingZeInitDriversWithTypesUnsupportedWithFailureThenSupportedTypesThenSuccessReturned*)\nset_property(TEST tests_multi_call_failure PROPERTY ENVIRONMENT \"ZE_ENABLE_LOADER_DEBUG_TRACE=1;ZE_ENABLE_NULL_DRIVER=1\")\n```\n\n----------------------------------------\n\nTITLE: Setting CPack Generator based on OS\nDESCRIPTION: This section configures the CPack generator based on the operating system. It checks for the existence of specific files (e.g., `/etc/debian_version`, `/etc/redhat-release`, `/etc/SUSE-brand`) to determine the OS and sets the appropriate CPack generator (DEB, RPM, WIX, or ZIP). If BUILD_INSTALLER is true, it will set up the WIX generator. Sets the CPACK generator to ZIP if no other match is found.\nSOURCE: https://github.com/oneapi-src/level-zero/blob/master/CMakeLists.txt#_snippet_20\n\nLANGUAGE: cmake\nCODE:\n```\n# If generators list was not define build native package for current distro\nif(NOT DEFINED CPACK_GENERATOR)\n\tif(EXISTS \"/etc/debian_version\")\n\t\tset(CPACK_GENERATOR \"DEB\")\n\telseif(EXISTS \"/etc/redhat-release\")\n\t\tset(CPACK_GENERATOR \"RPM\")\n\telseif(EXISTS \"/etc/SUSE-brand\" OR EXISTS \"/etc/SUSE-release\" OR sles_distro)\n\t\tset(CPACK_GENERATOR \"RPM\")\n    elseif(BUILD_INSTALLER)\n        set(CPACK_GENERATOR \"WIX\")\n        set(CPACK_PACKAGE_NAME \"oneAPI Level Zero\")\n        set(CPACK_PACKAGE_FILE_NAME \"oneAPI_Level_Zero-${PROJECT_VERSION}-win64\")\n        set(CPACK_WIX_ROOT_FEATURE_TITLE \"oneAPI Level Zero\")\n        set(CPACK_WIX_PROGRAM_MENU_FOLDER \"oneAPI Level Zero\")\n\n        set(CMAKE_INSTALL_PREFIX \"LevelZeroSDK/${PROJECT_VERSION}/\")\n        # Add the script to the install directory\n        install(FILES \"${CMAKE_CURRENT_SOURCE_DIR}/scripts/level_zero_sdk_setup.ps1\"\n            DESTINATION ./scripts\n            COMPONENT ${SDK_COMPONENT_STRING}\n        )\n\n        set(CPACK_WIX_PATCH_FILE \"${CMAKE_CURRENT_SOURCE_DIR}/scripts/wix_env_installation.wxs\")\n\n        # sharing GUIDs between product and upgrade codes such that side by side installation is allowed.\n        set(CPACK_WIX_PRODUCT_GUID ${GENERATED_PRODUCT_GUID})\n        set(CPACK_WIX_UPGRADE_GUID ${GENERATED_PRODUCT_GUID})\n        set(CPACK_WIX_UI_DIALOG \"${CMAKE_CURRENT_SOURCE_DIR}/icons/oneapi-icon-left-aligned.png\")\n        set(CPACK_WIX_UI_BANNER \"${CMAKE_CURRENT_SOURCE_DIR}/icons/oneapi-icon-right-aligned.png\")\n        get_cmake_property(CPACK_COMPONENTS_ALL COMPONENTS)\n        list(REMOVE_ITEM CPACK_COMPONENTS_ALL \"Loader\")\n        set(CPACK_RESOURCE_FILE_LICENSE \"${CMAKE_CURRENT_SOURCE_DIR}/LICENSES/MIT.txt\")\n\telse()\n\t\tset(CPACK_GENERATOR \"ZIP\")\n\tendif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Level Zero Test\nDESCRIPTION: Adds a test case using the 'add_test' command in CMake. This command defines a test named 'tests_multi_driver_sort' that executes the 'tests' executable with a specific gtest filter. It also sets up the environment using 'set_property' to enable loader debug trace and specify alternative drivers.\nSOURCE: https://github.com/oneapi-src/level-zero/blob/master/test/CMakeLists.txt#_snippet_17\n\nLANGUAGE: CMake\nCODE:\n```\nadd_test(NAME tests_multi_driver_sort COMMAND tests --gtest_filter=*GivenLevelZeroLoaderPresentWithMultipleDriversWhenCallingZeInitDriversThenExpectSuccessForZeInit)\nif (MSVC)\n  set_property(TEST tests_multi_driver_sort PROPERTY ENVIRONMENT \"ZE_ENABLE_LOADER_DEBUG_TRACE=1;ZE_ENABLE_ALT_DRIVERS=${CMAKE_BINARY_DIR}/bin/$<CONFIG>/ze_null_test1.dll,${CMAKE_BINARY_DIR}/bin/$<CONFIG>/ze_null_test2.dll\")\nelse()\n  set_property(TEST tests_multi_driver_sort PROPERTY ENVIRONMENT \"ZE_ENABLE_LOADER_DEBUG_TRACE=1;ZE_ENABLE_ALT_DRIVERS=${CMAKE_BINARY_DIR}/lib/libze_null_test1.so,${CMAKE_BINARY_DIR}/lib/libze_null_test2.so\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: CPack Settings for RPM Packages\nDESCRIPTION: This code block configures CPack for generating RPM packages. It sets various options such as compression type, package architecture, description, group, license, release number, URL, and component installation. It also defines the package names and file names for the Level Zero and Level Zero -devel packages.\nSOURCE: https://github.com/oneapi-src/level-zero/blob/master/CMakeLists.txt#_snippet_23\n\nLANGUAGE: cmake\nCODE:\n```\nif(CPACK_GENERATOR MATCHES \"RPM\")\n\tset(CPACK_RPM_COMPRESSION_TYPE \"xz\")\n\tstring(FIND \"${CMAKE_CXX_COMPILER}\" \"aarch64\" compiler_arch_check)\n\tif((NOT ${compiler_arch_check} MATCHES \"-1\") OR (${CMAKE_SYSTEM_PROCESSOR} STREQUAL \"aarch64\"))\n\t\tset(CPACK_RPM_PACKAGE_ARCHITECTURE \"aarch64\")\n\telseif(${CMAKE_SYSTEM_PROCESSOR} STREQUAL \"x86_64\")\n\t\tset(CPACK_RPM_PACKAGE_ARCHITECTURE \"x86_64\")\n\tendif()\n\tset(CPACK_RPM_PACKAGE_AUTOREQ OFF)\n\tset(CPACK_RPM_PACKAGE_DESCRIPTION \"oneAPI Level Zero\")\n\tset(CPACK_RPM_PACKAGE_GROUP \"System Environment/Libraries\")\n\tset(CPACK_RPM_PACKAGE_LICENSE \"MIT\")\n\tset(CPACK_RPM_PACKAGE_RELEASE 1)\n\tset(CPACK_RPM_PACKAGE_RELEASE_DIST ON)\n\tset(CPACK_RPM_PACKAGE_URL \"https://github.com/oneapi-src/level-zero\")\n\tset(CPACK_RPM_COMPONENT_INSTALL ON)\n\tset(CPACK_RPM_LEVEL-ZERO_PACKAGE_NAME \"${PROJECT_NAME}\")\n\tset(CPACK_RPM_LEVEL-ZERO-DEVEL_PACKAGE_NAME \"${PROJECT_NAME}-devel\")\n\tset(CPACK_RPM_LEVEL-ZERO_FILE_NAME \"${PROJECT_NAME}-${PROJECT_VERSION}-${os_name}${os_version}.${CPACK_RPM_PACKAGE_ARCHITECTURE}.rpm\")\n\tset(CPACK_RPM_LEVEL-ZERO-DEVEL_FILE_NAME \"${PROJECT_NAME}-devel-${PROJECT_VERSION}-${os_name}${os_version}.${CPACK_RPM_PACKAGE_ARCHITECTURE}.rpm\")\n\tset(CPACK_RPM_LEVEL-ZERO-DEVEL_PACKAGE_REQUIRES \"level-zero = ${PROJECT_VERSION}\")\n\n\n\tset(CPACK_RPM_EXCLUDE_FROM_AUTO_FILELIST_ADDITION\n\t  /etc/ld.so.conf.d\n\t  /usr/local\n\t  /usr/local/lib64\n\t  /usr/local/bin\n\t  /usr/local/include\n\t)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Set Target Properties\nDESCRIPTION: Sets the version and SOVERSION properties for the ze_tracing_layer library. The VERSION property is set to PROJECT_VERSION_MAJOR.PROJECT_VERSION_MINOR.PROJECT_VERSION_PATCH, and the SOVERSION property is set to PROJECT_VERSION_MAJOR. These properties are used for managing library versions and compatibility.\nSOURCE: https://github.com/oneapi-src/level-zero/blob/master/source/layers/tracing/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nset_target_properties(${TARGET_NAME} PROPERTIES\n    VERSION \"${PROJECT_VERSION_MAJOR}.${PROJECT_VERSION_MINOR}.${PROJECT_VERSION_PATCH}\"\n    SOVERSION  \"${PROJECT_VERSION_MAJOR}\"\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Compiler Definitions for Level Zero\nDESCRIPTION: These commands add compiler definitions for the Level Zero project. The definitions include the loader version and the validation layer supported version, both based on the project's major version.\nSOURCE: https://github.com/oneapi-src/level-zero/blob/master/source/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_definitions(-DL0_LOADER_VERSION=\"${PROJECT_VERSION_MAJOR}\")\nadd_definitions(-DL0_VALIDATION_LAYER_SUPPORTED_VERSION=\"${PROJECT_VERSION_MAJOR}\")\n```\n\n----------------------------------------\n\nTITLE: CPack Settings for DEB Packages\nDESCRIPTION: This code block configures CPack for generating DEB packages. It sets the package architecture based on the system processor, specifies the package homepage, enables shared library dependencies, and defines the package names and file names for the Level Zero and Level Zero -devel packages. It also sets the dependency for the -devel package.\nSOURCE: https://github.com/oneapi-src/level-zero/blob/master/CMakeLists.txt#_snippet_24\n\nLANGUAGE: cmake\nCODE:\n```\nif(CPACK_GENERATOR MATCHES \"DEB\")\n\tstring(FIND \"${CMAKE_CXX_COMPILER}\" \"aarch64\" compiler_arch_check)\n\tif((NOT ${compiler_arch_check} MATCHES \"-1\") OR (${CMAKE_SYSTEM_PROCESSOR} STREQUAL \"aarch64\"))\n\t\tSET(CPACK_DEBIAN_PACKAGE_ARCHITECTURE arm64)\n\telseif(${CMAKE_SYSTEM_PROCESSOR} STREQUAL \"x86_64\")\n\t\tSET(CPACK_DEBIAN_PACKAGE_ARCHITECTURE amd64)\n\tendif()\n\tset(CPACK_DEBIAN_PACKAGE_HOMEPAGE \"https://github.com/oneapi-src/level-zero\")\n\tset(CPACK_DEBIAN_PACKAGE_SHLIBDEPS ON)\n\tset(CPACK_DEBIAN_LEVEL-ZERO_PACKAGE_NAME \"${PROJECT_NAME}\")\n\tset(CPACK_DEBIAN_LEVEL-ZERO-DEVEL_PACKAGE_NAME \"${PROJECT_NAME}-devel\")\n    set(CPACK_DEBIAN_LEVEL-ZERO_FILE_NAME \"${PROJECT_NAME}_${PROJECT_VERSION}+${os_name}${os_version}_${CPACK_DEBIAN_PACKAGE_ARCHITECTURE}.deb\")\n    set(CPACK_DEBIAN_LEVEL-ZERO-DEVEL_FILE_NAME \"${PROJECT_NAME}-devel_${PROJECT_VERSION}+${os_name}${os_version}_${CPACK_DEBIAN_PACKAGE_ARCHITECTURE}.deb\")\n    set(CPACK_DEBIAN_LEVEL-ZERO-DEVEL_PACKAGE_DEPENDS \"level-zero(=${PROJECT_VERSION})\")\n    set(CPACK_DEB_COMPONENT_INSTALL ON)\n    set(CPACK_ARCHIVE_COMPONENT_INSTALL ON)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Linking Libraries in CMake\nDESCRIPTION: This snippet links the target '${TARGET_NAME}' with the 'level_zero_utils' library. This ensures that the validation layer has access to the utilities it requires.\nSOURCE: https://github.com/oneapi-src/level-zero/blob/master/source/layers/validation/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_link_libraries(${TARGET_NAME} PRIVATE level_zero_utils)\n```\n\n----------------------------------------\n\nTITLE: Installing Target in CMake\nDESCRIPTION: This snippet specifies the installation rules for the target 'ze_validation_layer'. It defines where the archive, runtime, and library files should be installed, as well as the component to which they belong.\nSOURCE: https://github.com/oneapi-src/level-zero/blob/master/source/layers/validation/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(TARGETS ze_validation_layer\n    ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR} COMPONENT ${SDK_COMPONENT_STRING}\n    RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR} COMPONENT ${LIB_COMPONENT_STRING}\n    LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR} COMPONENT ${LIB_COMPONENT_STRING}\n    NAMELINK_COMPONENT ${SDK_COMPONENT_STRING}\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Target Sources for Ze Loader with CMake\nDESCRIPTION: This CMake snippet configures the source files for the ${TARGET_LOADER_NAME} target, adding both header and source files to be compiled. These files include core loader components, dynamic dispatch interface (DDI) implementations and tracing functionalities. The PRIVATE keyword specifies that these sources are only used for compiling the target and are not exposed to other targets.\nSOURCE: https://github.com/oneapi-src/level-zero/blob/master/source/loader/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_sources(${TARGET_LOADER_NAME}\n    PRIVATE\n        ${CMAKE_CURRENT_SOURCE_DIR}/ze_object.h\n        ${CMAKE_CURRENT_SOURCE_DIR}/ze_loader_internal.h\n        ${CMAKE_CURRENT_SOURCE_DIR}/ze_loader.cpp\n        ${CMAKE_CURRENT_SOURCE_DIR}/ze_loader_api.cpp\n        ${CMAKE_CURRENT_SOURCE_DIR}/ze_ldrddi.h\n        ${CMAKE_CURRENT_SOURCE_DIR}/ze_ldrddi.cpp\n        ${CMAKE_CURRENT_SOURCE_DIR}/zet_ldrddi.h\n        ${CMAKE_CURRENT_SOURCE_DIR}/zet_ldrddi.cpp\n        ${CMAKE_CURRENT_SOURCE_DIR}/zes_ldrddi.h\n        ${CMAKE_CURRENT_SOURCE_DIR}/zes_ldrddi.cpp\n        ${CMAKE_CURRENT_SOURCE_DIR}/zel_tracing_ldrddi.cpp\n        ${CMAKE_CURRENT_SOURCE_DIR}/driver_discovery.h\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Target Properties for Versioning\nDESCRIPTION: This command sets the VERSION and SOVERSION properties for the `${TARGET_LOADER_NAME}` target. These properties define the version number and shared object version of the library.\nSOURCE: https://github.com/oneapi-src/level-zero/blob/master/source/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nset_target_properties(${TARGET_LOADER_NAME} PROPERTIES\n    VERSION \"${PROJECT_VERSION_MAJOR}.${PROJECT_VERSION_MINOR}.${PROJECT_VERSION_PATCH}\"\n    SOVERSION \"${PROJECT_VERSION_MAJOR}\"\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Third-Party Source Directory\nDESCRIPTION: Defines the directory where third-party source code is located. This variable simplifies referencing third-party libraries used in the project.\nSOURCE: https://github.com/oneapi-src/level-zero/blob/master/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(THIRD_PARTY_SOURCE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/third_party)\n```\n\n----------------------------------------\n\nTITLE: Add Platform-Specific Sources\nDESCRIPTION: Adds platform-specific source files for Windows and Linux.  It conditionally includes `windows/tracing_init.cpp` for Windows builds and `linux/tracing_init.cpp` for Linux builds. This allows for platform-dependent initialization logic within the tracing layer.\nSOURCE: https://github.com/oneapi-src/level-zero/blob/master/source/layers/tracing/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nif(WIN32)\n    target_sources(${TARGET_NAME}\n        PRIVATE\n            ${CMAKE_CURRENT_SOURCE_DIR}/windows/tracing_init.cpp\n    )\nelse()\n    target_sources(${TARGET_NAME}\n        PRIVATE\n            ${CMAKE_CURRENT_SOURCE_DIR}/linux/tracing_init.cpp\n    )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting general CPack Package Information\nDESCRIPTION: Sets various CPack options, including whether the package is relocatable, a brief description, the vendor, the installation directory, and contact information.\nSOURCE: https://github.com/oneapi-src/level-zero/blob/master/CMakeLists.txt#_snippet_22\n\nLANGUAGE: cmake\nCODE:\n```\nset(CPACK_PACKAGE_RELOCATABLE FALSE)\nset(CPACK_PACKAGE_DESCRIPTION_SUMMARY \"oneAPI Level Zero\")\nset(CPACK_PACKAGE_VENDOR \"Intel\")\n\nset(CPACK_PACKAGE_INSTALL_DIRECTORY ${CMAKE_INSTALL_PREFIX})\nset(CPACK_PACKAGE_CONTACT \"Intel Corporation\")\n\nset(CPACK_PACKAGE_VERSION_MAJOR \"${PROJECT_VERSION_MAJOR}\")\nset(CPACK_PACKAGE_VERSION_MINOR \"${PROJECT_VERSION_MINOR}\")\nset(CPACK_PACKAGE_VERSION_PATCH \"${PROJECT_VERSION_PATCH}\")\n```\n\n----------------------------------------\n\nTITLE: Set Include Directories\nDESCRIPTION: Sets the include directories for the ze_tracing_layer library. It adds the current source directory to the include path, allowing the library to find its header files during compilation.\nSOURCE: https://github.com/oneapi-src/level-zero/blob/master/source/layers/tracing/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_include_directories(${TARGET_NAME}\n    PUBLIC\n        ${CMAKE_CURRENT_SOURCE_DIR}\n)\n```\n\n----------------------------------------\n\nTITLE: Gathering OS Release Information\nDESCRIPTION: This section retrieves operating system release information using `get_os_release_info`. It then extracts the OS name and modifies it to only include the first character.  It also sets the `sles_distro` variable if the OS type is 'sles'.\nSOURCE: https://github.com/oneapi-src/level-zero/blob/master/CMakeLists.txt#_snippet_17\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(\"os_release_info.cmake\")\nget_os_release_info(os_name os_version os_codename)\nstring(APPEND os_type \"${os_name}\")\nstring(COMPARE EQUAL \"${os_type}\" \"sles\" sles_distro)\n#Pick only first character of os_name\nstring(SUBSTRING \"${os_name}\" 0 1 os_name)\n```\n\n----------------------------------------\n\nTITLE: Set Include Directories for Library (CMake)\nDESCRIPTION: This snippet sets the include directories for the level_zero_utils library.  It adds the current source directory to the include paths, allowing the library to find its own headers.\nSOURCE: https://github.com/oneapi-src/level-zero/blob/master/source/utils/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_include_directories(level_zero_utils PUBLIC ${CMAKE_CURRENT_SOURCE_DIR})\n```\n\n----------------------------------------\n\nTITLE: Add Level Zero Init GPU All Test with Environment Variables in CMake\nDESCRIPTION: This CMake snippet defines a test case named 'tests_init_gpu_all' that executes the 'tests' executable with a specific gtest filter to target a Level Zero initialization test for GPU and All device types. It also sets environment variables to enable loader debug tracing and a null driver for testing purposes.\nSOURCE: https://github.com/oneapi-src/level-zero/blob/master/test/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nadd_test(NAME tests_init_gpu_all COMMAND tests --gtest_filter=*GivenLevelZeroLoaderPresentWhenCallingZeInitDriversWithGPUTypeThenExpectPassWithGPUorAllOnly*)\nset_property(TEST tests_init_gpu_all PROPERTY ENVIRONMENT \"ZE_ENABLE_LOADER_DEBUG_TRACE=1;ZE_ENABLE_NULL_DRIVER=1\")\n```\n\n----------------------------------------\n\nTITLE: Set Compile Options for MSVC in CMake\nDESCRIPTION: This snippet configures compiler options for MSVC to force the test binary to use the dynamic runtime libraries. It checks if the compiler is MSVC and sets the '/MD' or '/MDd' flag based on the configuration (Debug or Release).\nSOURCE: https://github.com/oneapi-src/level-zero/blob/master/test/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nif(MSVC)\n  target_compile_options(tests PRIVATE \"/MD$<$<CONFIG:Debug>:d>\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Add Level Zero Both Init GPU Test with Environment Variables in CMake\nDESCRIPTION: This CMake snippet defines a test case named 'tests_both_init_gpu' that executes the 'tests' executable with a specific gtest filter to target a Level Zero initialization test that calls zeInitDrivers and zeInit, expecting both calls to succeed with GPU device types. It also sets environment variables to enable loader debug tracing and a null driver for testing purposes.\nSOURCE: https://github.com/oneapi-src/level-zero/blob/master/test/CMakeLists.txt#_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\nadd_test(NAME tests_both_init_gpu COMMAND tests --gtest_filter=*GivenLevelZeroLoaderPresentWhenCallingZeInitDriversThenzeInitThenBothCallsSucceedWithGPUTypes*)\nset_property(TEST tests_both_init_gpu PROPERTY ENVIRONMENT \"ZE_ENABLE_LOADER_DEBUG_TRACE=1;ZE_ENABLE_NULL_DRIVER=1\")\n```\n\n----------------------------------------\n\nTITLE: MSVC Version Check\nDESCRIPTION: Checks if the compiler is MSVC and if its version is less than 1900.  If it is, a FATAL_ERROR is generated, requiring a newer version of Visual Studio.\nSOURCE: https://github.com/oneapi-src/level-zero/blob/master/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nif(MSVC AND (MSVC_VERSION LESS 1900))\n    message(FATAL_ERROR \"Visual Studio Compiler Version >= 1900 Required to build.\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Add Level Zero Init NPU All Test with Environment Variables in CMake\nDESCRIPTION: This CMake snippet defines a test case named 'tests_init_npu_all' that executes the 'tests' executable with a specific gtest filter to target a Level Zero initialization test for NPU and All device types. It also sets environment variables to enable loader debug tracing and a null driver for testing purposes.\nSOURCE: https://github.com/oneapi-src/level-zero/blob/master/test/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nadd_test(NAME tests_init_npu_all COMMAND tests --gtest_filter=*GivenLevelZeroLoaderPresentWhenCallingZeInitDriversWithNPUTypeThenExpectPassWithNPUorAllOnly*)\nset_property(TEST tests_init_npu_all PROPERTY ENVIRONMENT \"ZE_ENABLE_LOADER_DEBUG_TRACE=1;ZE_ENABLE_NULL_DRIVER=1\")\n```\n\n----------------------------------------\n\nTITLE: Add Level Zero Both GPU Test with Environment Variables in CMake\nDESCRIPTION: This CMake snippet defines a test case named 'tests_both_gpu' that executes the 'tests' executable with a specific gtest filter to target a Level Zero initialization test that calls zeInit and zeInitDrivers, expecting both calls to succeed with GPU device types. It also sets environment variables to enable loader debug tracing and a null driver for testing purposes.\nSOURCE: https://github.com/oneapi-src/level-zero/blob/master/test/CMakeLists.txt#_snippet_10\n\nLANGUAGE: CMake\nCODE:\n```\nadd_test(NAME tests_both_gpu COMMAND tests --gtest_filter=*GivenLevelZeroLoaderPresentWhenCallingzeInitThenZeInitDriversThenBothCallsSucceedWithGPUTypes*)\nset_property(TEST tests_both_gpu PROPERTY ENVIRONMENT \"ZE_ENABLE_LOADER_DEBUG_TRACE=1;ZE_ENABLE_NULL_DRIVER=1\")\n```\n\n----------------------------------------\n\nTITLE: Add Subdirectory to CMake Project\nDESCRIPTION: This CMake command adds the specified subdirectory ('zello_world') to the build process. It instructs CMake to process the CMakeLists.txt file located within the 'zello_world' directory and include its targets in the overall project build.  This command is essential for organizing large projects into smaller, manageable modules.\nSOURCE: https://github.com/oneapi-src/level-zero/blob/master/samples/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(zello_world)\n```\n\n----------------------------------------\n\nTITLE: Add Level Zero API Test with Environment Variables in CMake\nDESCRIPTION: This CMake snippet defines a test case named 'tests_api' that executes the 'tests' executable with a specific gtest filter to target a particular API test. It also sets environment variables to enable loader debug tracing and a null driver for testing purposes.\nSOURCE: https://github.com/oneapi-src/level-zero/blob/master/test/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nadd_test(NAME tests_api COMMAND tests --gtest_filter=*GivenLevelZeroLoaderPresentWhenCallingzeGetLoaderVersionsAPIThenValidVersionIsReturned*)\nset_property(TEST tests_api PROPERTY ENVIRONMENT \"ZE_ENABLE_LOADER_DEBUG_TRACE=1;ZE_ENABLE_NULL_DRIVER=1\")\n```\n\n----------------------------------------\n\nTITLE: Generating Loader Files: Cloning the spec repo\nDESCRIPTION: This command clones the Level Zero specification repository. This is the first step in generating the Level Zero Loader and Layer files from scripts.\nSOURCE: https://github.com/oneapi-src/level-zero/blob/master/CONTRIBUTING.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/oneapi-src/level-zero-spec.git level-zero-spec\n```\n\n----------------------------------------\n\nTITLE: Setting Compiler Flags based on CMake Version and Compiler\nDESCRIPTION: This code block sets compiler flags based on the CMake version and the compiler being used. It adds `-Werror` for older CMake versions (less than 3.24) unless using MSVC. For newer CMake versions, it sets `CMAKE_COMPILE_WARNING_AS_ERROR` to `ON` to treat warnings as errors during compilation.\nSOURCE: https://github.com/oneapi-src/level-zero/blob/master/CMakeLists.txt#_snippet_14\n\nLANGUAGE: cmake\nCODE:\n```\nif(CMAKE_SOURCE_DIR STREQUAL CMAKE_CURRENT_SOURCE_DIR)\n  if(CMAKE_VERSION VERSION_LESS 3.24)\n    if(NOT MSVC)\n      set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -Werror\")\n    endif()\n  else()\n    set(CMAKE_COMPILE_WARNING_AS_ERROR ON)\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Generating Loader Files: Execute json2src script\nDESCRIPTION: This command executes the `json2src.py` script in the Level Zero repository. The script takes the generated JSON file from the specification repository as input and generates the source code for the Level Zero loader and layers.\nSOURCE: https://github.com/oneapi-src/level-zero/blob/master/CONTRIBUTING.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n./level-zero/scripts/json2src.py --ver 1.12 --api-json level-zero-spec/scripts/input.json .\n```\n\n----------------------------------------\n\nTITLE: Adding Subdirectories with CMake\nDESCRIPTION: This CMake command includes the 'basic_leak' subdirectory into the current CMake project. It allows CMake to find and process the CMakeLists.txt file located within the 'basic_leak' subdirectory. This is crucial for incorporating the source code and build configurations defined in that subdirectory into the overall project.\nSOURCE: https://github.com/oneapi-src/level-zero/blob/master/source/layers/validation/checkers/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(basic_leak)\n```\n\n----------------------------------------\n\nTITLE: Adding Target Include Directories in CMake\nDESCRIPTION: This CMake command adds include directories to the specified target `${TARGET_NAME}`. It includes the `${THIRD_PARTY_SOURCE_DIR}` directory, allowing the target to find header files located there.\nSOURCE: https://github.com/oneapi-src/level-zero/blob/master/source/layers/validation/checkers/events_checker/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_include_directories(${TARGET_NAME} \n    PRIVATE\n        ${THIRD_PARTY_SOURCE_DIR}\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Compiler Flags for GCC in CMake\nDESCRIPTION: This snippet sets compiler flags for GCC to enable hidden visibility. These flags are used to hide symbols from the dynamic linker, which can improve performance and reduce the risk of symbol conflicts.\nSOURCE: https://github.com/oneapi-src/level-zero/blob/master/source/layers/validation/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nif(UNIX)\n    set(GCC_COVERAGE_COMPILE_FLAGS \"-fvisibility=hidden -fvisibility-inlines-hidden\")\n    set(CMAKE_CXX_FLAGS  \"${CMAKE_CXX_FLAGS} ${GCC_COVERAGE_COMPILE_FLAGS}\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Subdirectories with CMake\nDESCRIPTION: This CMake command includes the 'parameter_validation' subdirectory into the current CMake project. It allows CMake to find and process the CMakeLists.txt file located within the 'parameter_validation' subdirectory. This is crucial for incorporating the source code and build configurations defined in that subdirectory into the overall project.\nSOURCE: https://github.com/oneapi-src/level-zero/blob/master/source/layers/validation/checkers/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(parameter_validation)\n```\n\n----------------------------------------\n\nTITLE: Appending Environment Variables in CMake\nDESCRIPTION: Appends environment variables to a test property in CMake.  The 'set_property' command with the 'APPEND' option modifies the 'ENVIRONMENT' property of the test 'tests_multi_driver_missing_initDrivers_sort_after_error'. It sets 'ZE_ENABLE_LOADER_DEBUG_TRACE' and 'ZE_ENABLE_ALT_DRIVERS' to enable debugging and alternative drivers for Level Zero.\nSOURCE: https://github.com/oneapi-src/level-zero/blob/master/test/CMakeLists.txt#_snippet_16\n\nLANGUAGE: CMake\nCODE:\n```\nadd_test(NAME tests_multi_driver_missing_initDrivers_sort_after_error COMMAND tests --gtest_filter=*GivenLevelZeroLoaderPresentWithMultipleDriversMissingInitDriversWhenCallingZeInitDriversThenExpectSuccessForZeInitWithDriverGetAfterInitDrivers)\nif (MSVC)\n  set_property(TEST tests_multi_driver_missing_initDrivers_sort_after_error APPEND PROPERTY ENVIRONMENT \"ZE_ENABLE_LOADER_DEBUG_TRACE=1;ZE_ENABLE_ALT_DRIVERS=${CMAKE_BINARY_DIR}/bin/$<CONFIG>/ze_null_test1.dll,${CMAKE_BINARY_DIR}/bin/$<CONFIG>/ze_null_test2.dll\")\nelse()\n  set_property(TEST tests_multi_driver_missing_initDrivers_sort_after_error APPEND PROPERTY ENVIRONMENT \"ZE_ENABLE_LOADER_DEBUG_TRACE=1;ZE_ENABLE_ALT_DRIVERS=${CMAKE_BINARY_DIR}/lib/libze_null_test1.so,${CMAKE_BINARY_DIR}/lib/libze_null_test2.so\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Fetching googletest\nDESCRIPTION: Fetches and configures googletest for testing. This snippet uses FetchContent to download and make googletest available if BUILD_L0_LOADER_TESTS is enabled and either MSVC is not the compiler or MSVC is the compiler but BUILD_STATIC is not enabled.  It also includes a workaround for Windows to prevent overriding compiler/linker settings.\nSOURCE: https://github.com/oneapi-src/level-zero/blob/master/CMakeLists.txt#_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nif(BUILD_L0_LOADER_TESTS AND (NOT MSVC OR (MSVC AND NOT BUILD_STATIC)))\n    FetchContent_Declare(\n        googletest\n        GIT_REPOSITORY https://github.com/google/googletest.git\n        GIT_TAG        v1.14.0\n    )\n    add_library(GTest::GTest INTERFACE IMPORTED)\n    target_link_libraries(GTest::GTest INTERFACE gtest_main)\n\n\t# For Windows: Prevent overriding the parent project's compiler/linker settings\n    if(MSVC)\n        set(gtest_force_shared_crt ON CACHE BOOL \"\" FORCE)\n    endif()\n\n\tFetchContent_MakeAvailable(googletest)\n\n\tenable_testing()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Appending Environment Variables in CMake\nDESCRIPTION: Appends environment variables to a test property in CMake. The 'set_property' command, with the 'APPEND' option modifies the 'ENVIRONMENT' property of a test named 'tests_multi_driver_driverget_sort'. It configures the test to use alternative drivers and enables debug tracing, based on the host OS (MSVC or other).\nSOURCE: https://github.com/oneapi-src/level-zero/blob/master/test/CMakeLists.txt#_snippet_18\n\nLANGUAGE: CMake\nCODE:\n```\nadd_test(NAME tests_multi_driver_driverget_sort COMMAND tests --gtest_filter=*GivenLevelZeroLoaderPresentWithMultipleDriversWhenCallingZeInitThenZeInitDriversThenExpectSuccessForZeInitWithDriverGetAfterInitDrivers)\nif (MSVC)\n  set_property(TEST tests_multi_driver_driverget_sort APPEND PROPERTY ENVIRONMENT \"ZE_ENABLE_LOADER_DEBUG_TRACE=1;ZE_ENABLE_ALT_DRIVERS=${CMAKE_BINARY_DIR}/bin/$<CONFIG>/ze_null_test1.dll,${CMAKE_BINARY_DIR}/bin/$<CONFIG>/ze_null_test2.dll\")\nelse()\n  set_property(TEST tests_multi_driver_driverget_sort APPEND PROPERTY ENVIRONMENT \"ZE_ENABLE_LOADER_DEBUG_TRACE=1;ZE_ENABLE_ALT_DRIVERS=${CMAKE_BINARY_DIR}/lib/libze_null_test1.so,${CMAKE_BINARY_DIR}/lib/libze_null_test2.so\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Including Directories for Level Zero\nDESCRIPTION: This command adds the include directory for the current source directory to the include paths, making the header files in that directory available for compilation.\nSOURCE: https://github.com/oneapi-src/level-zero/blob/master/source/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\ninclude_directories(${CMAKE_CURRENT_SOURCE_DIR}/inc)\n```\n\n----------------------------------------\n\nTITLE: MSVC Runtime Library Handling\nDESCRIPTION: Handles MSVC runtime library selection. It replaces /MDd with /MTd or vice versa, depending on the value of MSVC_BUILD_L0_DYNAMIC_VCRUNTIME. It also ensures that /MD or /MDd is set if dynamic runtime is selected.\nSOURCE: https://github.com/oneapi-src/level-zero/blob/master/CMakeLists.txt#_snippet_12\n\nLANGUAGE: CMake\nCODE:\n```\n#MSVC compile flags\nif(MSVC)\n    IF (NOT MSVC_BUILD_L0_DYNAMIC_VCRUNTIME)\n        string(REPLACE \"/MDd\" \"/MTd\" CMAKE_CXX_FLAGS_DEBUG \"${CMAKE_CXX_FLAGS_DEBUG}\")\n        string(REPLACE \"/MD\" \"/MT\" CMAKE_CXX_FLAGS_RELEASE \"${CMAKE_CXX_FLAGS_RELEASE}\")\n    ELSE()\n        string(REPLACE \"/MTd\" \"/MDd\" CMAKE_CXX_FLAGS_DEBUG \"${CMAKE_CXX_FLAGS_DEBUG}\")\n        string(REPLACE \"/MT\" \"/MD\" CMAKE_CXX_FLAGS_RELEASE \"${CMAKE_CXX_FLAGS_RELEASE}\")\n        if(NOT (CMAKE_CXX_FLAGS_RELEASE MATCHES \"/MD\"))\n            set(CMAKE_CXX_FLAGS_RELEASE \"${CMAKE_CXX_FLAGS_RELEASE} /MD\")\n        endif()\n        if(NOT (CMAKE_CXX_FLAGS_DEBUG MATCHES \"/MDd\"))\n            set(CMAKE_CXX_FLAGS_DEBUG \"${CMAKE_CXX_FLAGS_DEBUG} /MDd\")\n        endif()\n    ENDIF()\n\n    if(NOT CMAKE_CXX_COMPILER_ID STREQUAL IntelLLVM)\n        # treat warnings as errors\n        set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} /WX /W3\")\n    endif()\n\n    # enable multi-process compilation, not supported by clang-cl\n    if((NOT CMAKE_CXX_COMPILER_ID STREQUAL Clang) AND (NOT CMAKE_CXX_COMPILER_ID STREQUAL IntelLLVM))\n        set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} /MP\")\n    endif()\n\n    # enable exceptions handling\n    set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} /EHsc\")\n\n    # enable creation of PDB files for Release Builds\n    set(CMAKE_CXX_FLAGS_RELEASE \"${CMAKE_CXX_FLAGS_RELEASE} /Zi\")\n    set(CMAKE_SHARED_LINKER_FLAGS_RELEASE \"${CMAKE_SHARED_LINKER_FLAGS_RELEASE} ${CMAKE_CXX_LINKER_WRAPPER_FLAG}/DEBUG ${CMAKE_CXX_LINKER_WRAPPER_FLAG}/OPT:REF ${CMAKE_CXX_LINKER_WRAPPER_FLAG}/OPT:ICF\")\n\n    # enable CET shadow stack\n    set(CMAKE_SHARED_LINKER_FLAGS \"${CMAKE_SHARED_LINKER_FLAGS} ${CMAKE_CXX_LINKER_WRAPPER_FLAG}/CETCOMPAT\")\n\n    #Use of sccache with MSVC requires workaround of replacing /Zi with /Z7\n    #https://github.com/mozilla/sccache\n    if(USE_Z7) #sccache\n      string(REPLACE \"/Zi\" \"/Z7\" CMAKE_CXX_FLAGS_DEBUG \"${CMAKE_CXX_FLAGS_DEBUG}\")\n      string(REPLACE \"/Zi\" \"/Z7\" CMAKE_C_FLAGS_DEBUG \"${CMAKE_C_FLAGS_DEBUG}\")\n      string(REPLACE \"/Zi\" \"/Z7\" CMAKE_CXX_FLAGS_RELEASE \"${CMAKE_CXX_FLAGS_RELEASE}\")\n      string(REPLACE \"/Zi\" \"/Z7\" CMAKE_C_FLAGS_RELEASE \"${CMAKE_C_FLAGS_RELEASE}\")\n      string(REPLACE \"/Zi\" \"/Z7\" CMAKE_CXX_FLAGS_RELWITHDEBINFO \"${CMAKE_CXX_FLAGS_RELWITHDEBINFO}\")\n      string(REPLACE \"/Zi\" \"/Z7\" CMAKE_C_FLAGS_RELWITHDEBINFO \"${CMAKE_C_FLAGS_RELWITHDEBINFO}\")\n    endif()\n\nendif()\n```\n\n----------------------------------------\n\nTITLE: Platform-Specific Source Configuration with CMake\nDESCRIPTION: This CMake snippet conditionally includes platform-specific source files for Windows and Linux based on the WIN32 variable. It adds source files for driver discovery and loader initialization that are tailored to each operating system.\nSOURCE: https://github.com/oneapi-src/level-zero/blob/master/source/loader/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nif(WIN32)\n    target_sources(${TARGET_LOADER_NAME}\n        PRIVATE\n            ${CMAKE_CURRENT_SOURCE_DIR}/windows/driver_discovery_win.cpp\n            ${CMAKE_CURRENT_SOURCE_DIR}/windows/loader_init.cpp\n    )\nelse()\n    target_sources(${TARGET_LOADER_NAME}\n        PRIVATE\n            ${CMAKE_CURRENT_SOURCE_DIR}/linux/driver_discovery_lin.cpp\n            ${CMAKE_CURRENT_SOURCE_DIR}/linux/loader_init.cpp\n    )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Appending Environment Variables in CMake\nDESCRIPTION: Appends environment variables to a test property in CMake. The 'set_property' command with 'APPEND' option to modify the 'ENVIRONMENT' property of the 'tests_multi_driver_zesdriverget_sort' test. It enables loader debugging and uses alternative drivers by setting 'ZE_ENABLE_LOADER_DEBUG_TRACE' and 'ZE_ENABLE_ALT_DRIVERS' based on whether it's MSVC or not.\nSOURCE: https://github.com/oneapi-src/level-zero/blob/master/test/CMakeLists.txt#_snippet_19\n\nLANGUAGE: CMake\nCODE:\n```\nadd_test(NAME tests_multi_driver_zesdriverget_sort COMMAND tests --gtest_filter=*GivenLevelZeroLoaderPresentWithMultipleDriversWhenCallingZesInitThenExpectSuccessForZesDriverGet)\nif (MSVC)\n  set_property(TEST tests_multi_driver_zesdriverget_sort APPEND PROPERTY ENVIRONMENT \"ZE_ENABLE_LOADER_DEBUG_TRACE=1;ZE_ENABLE_ALT_DRIVERS=${CMAKE_BINARY_DIR}/bin/$<CONFIG>/ze_null_test1.dll,${CMAKE_BINARY_DIR}/bin/$<CONFIG>/ze_null_test2.dll\")\nelse()\n  set_property(TEST tests_multi_driver_zesdriverget_sort APPEND PROPERTY ENVIRONMENT \"ZE_ENABLE_LOADER_DEBUG_TRACE=1;ZE_ENABLE_ALT_DRIVERS=${CMAKE_BINARY_DIR}/lib/libze_null_test1.so,${CMAKE_BINARY_DIR}/lib/libze_null_test2.so\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Handle Lifetime Sources to Target - CMake\nDESCRIPTION: This CMake code snippet adds the specified header and source files related to handle lifetime management to the target. The files include implementations for ze, zes, and zet handle lifetimes, ensuring proper resource management within the Level Zero API. This setup configures the compilation process to include these files when building the target.\nSOURCE: https://github.com/oneapi-src/level-zero/blob/master/source/layers/validation/handle_lifetime_tracking/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_sources(${TARGET_NAME}\n    PRIVATE\n    ${CMAKE_CURRENT_LIST_DIR}/handle_lifetime.h\n    ${CMAKE_CURRENT_LIST_DIR}/ze_handle_lifetime.cpp\n    ${CMAKE_CURRENT_LIST_DIR}/ze_handle_lifetime.h\n    ${CMAKE_CURRENT_LIST_DIR}/zes_handle_lifetime.cpp\n    ${CMAKE_CURRENT_LIST_DIR}/zes_handle_lifetime.h\n    ${CMAKE_CURRENT_LIST_DIR}/zet_handle_lifetime.cpp\n    ${CMAKE_CURRENT_LIST_DIR}/zet_handle_lifetime.h\n)\n```\n\n----------------------------------------\n\nTITLE: Appending Environment Variables in CMake\nDESCRIPTION: Appends environment variables to a test in CMake using 'set_property' with the 'APPEND' option, modifying the test's environment. This configures the 'tests_multi_driver_zeandzesdriverget_sort' test by enabling loader debug trace and specifying alternative drivers using the 'ZE_ENABLE_ALT_DRIVERS' environment variable, differentiated for MSVC and non-MSVC environments.\nSOURCE: https://github.com/oneapi-src/level-zero/blob/master/test/CMakeLists.txt#_snippet_20\n\nLANGUAGE: CMake\nCODE:\n```\nadd_test(NAME tests_multi_driver_zeandzesdriverget_sort COMMAND tests --gtest_filter=*GivenLevelZeroLoaderPresentWithMultipleDriversWhenCallingZesInitThenZeInitDriversExpectSuccessForZesDriverGetAndZeInitDrivers)\nif (MSVC)\n  set_property(TEST tests_multi_driver_zeandzesdriverget_sort APPEND PROPERTY ENVIRONMENT \"ZE_ENABLE_LOADER_DEBUG_TRACE=1;ZE_ENABLE_ALT_DRIVERS=${CMAKE_BINARY_DIR}/bin/$<CONFIG>/ze_null_test1.dll,${CMAKE_BINARY_DIR}/bin/$<CONFIG>/ze_null_test2.dll\")\nelse()\n  set_property(TEST tests_multi_driver_zeandzesdriverget_sort APPEND PROPERTY ENVIRONMENT \"ZE_ENABLE_LOADER_DEBUG_TRACE=1;ZE_ENABLE_ALT_DRIVERS=${CMAKE_BINARY_DIR}/lib/libze_null_test1.so,${CMAKE_BINARY_DIR}/lib/libze_null_test2.so\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Test Environment Variable in CMake\nDESCRIPTION: Adds a test using 'add_test' and sets the 'ZE_ENABLE_LOADER_DEBUG_TRACE' and 'ZE_ENABLE_NULL_DRIVER' environment variables for the test using 'set_property'. This test checks loader teardown functionality by enabling debug tracing and the null driver.\nSOURCE: https://github.com/oneapi-src/level-zero/blob/master/test/CMakeLists.txt#_snippet_21\n\nLANGUAGE: CMake\nCODE:\n```\nadd_test(NAME tests_loader_teardown_check COMMAND tests --gtest_filter=*GivenLoaderNotInDestructionStateWhenCallingzelCheckIsLoaderInTearDownThenFalseIsReturned)\nset_property(TEST tests_loader_teardown_check PROPERTY ENVIRONMENT \"ZE_ENABLE_LOADER_DEBUG_TRACE=1;ZE_ENABLE_NULL_DRIVER=1\")\n```\n\n----------------------------------------\n\nTITLE: Link spdlog Library (CMake)\nDESCRIPTION: This snippet conditionally links the level_zero_utils library to the spdlog library. If SYSTEM_SPDLOG is defined, it links to the system's spdlog. Otherwise, it includes the headers from a third-party directory, which assumes spdlog is being built from source or is provided separately.\nSOURCE: https://github.com/oneapi-src/level-zero/blob/master/source/utils/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nif(SYSTEM_SPDLOG)\n       target_link_libraries(level_zero_utils PUBLIC spdlog::spdlog)\nelse()\n       target_include_directories(level_zero_utils PUBLIC $<BUILD_INTERFACE:${PROJECT_SOURCE_DIR}/third_party/spdlog_headers>)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Target Properties in CMake\nDESCRIPTION: This snippet sets the VERSION and SOVERSION properties for the target '${TARGET_NAME}'. The VERSION property specifies the full version number, while the SOVERSION property specifies the major version number.\nSOURCE: https://github.com/oneapi-src/level-zero/blob/master/source/layers/validation/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nset_target_properties(${TARGET_NAME} PROPERTIES\n    VERSION \"${PROJECT_VERSION_MAJOR}.${PROJECT_VERSION_MINOR}.${PROJECT_VERSION_PATCH}\"\n    SOVERSION  \"${PROJECT_VERSION_MAJOR}\"\n)\n```\n\n----------------------------------------\n\nTITLE: Writing Version to File\nDESCRIPTION: Writes the project version to a file named VERSION in the build directory.  This file can be used by other parts of the build process or by the application at runtime.\nSOURCE: https://github.com/oneapi-src/level-zero/blob/master/CMakeLists.txt#_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\nfile(WRITE \"${CMAKE_BINARY_DIR}/VERSION\" \"${PROJECT_VERSION}\")\n```\n\n----------------------------------------\n\nTITLE: Setting Component Strings in CMake\nDESCRIPTION: This snippet sets the component strings for the SDK and library. These strings are used during installation to group files into logical components.\nSOURCE: https://github.com/oneapi-src/level-zero/blob/master/source/layers/validation/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nset(SDK_COMPONENT_STRING \"level-zero-devel\")\nset(LIB_COMPONENT_STRING \"level-zero\")\n\nif(BUILD_INSTALLER)\n    set(SDK_COMPONENT_STRING \"SDK\")\n    set(LIB_COMPONENT_STRING \"Loader\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Install Target\nDESCRIPTION: Configures the installation of the ze_tracing_layer library.  It specifies the destination directories for archives, runtime libraries, and shared libraries, and also configures components for the SDK and Loader.\nSOURCE: https://github.com/oneapi-src/level-zero/blob/master/source/layers/tracing/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(TARGETS ze_tracing_layer\n    ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR} COMPONENT ${SDK_COMPONENT_STRING}\n    RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR} COMPONENT ${LIB_COMPONENT_STRING}\n    LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR} COMPONENT ${LIB_COMPONENT_STRING}\n    NAMELINK_COMPONENT ${SDK_COMPONENT_STRING}\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Target Sources using CMake\nDESCRIPTION: The target_sources command in CMake is used to specify the source files that should be compiled and linked into a target. In this case, it adds 'zel_basic_leak_checker.h' and 'zel_basic_leak_checker.cpp' to the sources for the target defined by ${TARGET_NAME}. These files are located in the current list directory.\nSOURCE: https://github.com/oneapi-src/level-zero/blob/master/source/layers/validation/checkers/basic_leak/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_sources(${TARGET_NAME}\n    PRIVATE\n        ${CMAKE_CURRENT_LIST_DIR}/zel_basic_leak_checker.h\n        ${CMAKE_CURRENT_LIST_DIR}/zel_basic_leak_checker.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Subdirectories in CMake\nDESCRIPTION: This snippet adds the 'handle_lifetime_tracking' and 'checkers' subdirectories to the build. This allows the CMake configuration to recursively process the CMakeLists.txt files in those subdirectories.\nSOURCE: https://github.com/oneapi-src/level-zero/blob/master/source/layers/validation/CMakeLists.txt#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(handle_lifetime_tracking)\nadd_subdirectory(checkers)\n```\n\n----------------------------------------\n\nTITLE: Add Level Zero Both Init All Test with Environment Variables in CMake\nDESCRIPTION: This CMake snippet defines a test case named 'tests_both_init_all' that executes the 'tests' executable with a specific gtest filter to target a Level Zero initialization test that calls zeInitDrivers and zeInit, expecting both calls to succeed with All device types. It also sets environment variables to enable loader debug tracing and a null driver for testing purposes.\nSOURCE: https://github.com/oneapi-src/level-zero/blob/master/test/CMakeLists.txt#_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nadd_test(NAME tests_both_init_all COMMAND tests --gtest_filter=*GivenLevelZeroLoaderPresentWhenCallingZeInitDriversThenzeInitThenBothCallsSucceedWithAllTypes*)\nset_property(TEST tests_both_init_all PROPERTY ENVIRONMENT \"ZE_ENABLE_LOADER_DEBUG_TRACE=1;ZE_ENABLE_NULL_DRIVER=1\")\n```\n\n----------------------------------------\n\nTITLE: Adding Target Sources in CMake\nDESCRIPTION: This CMake code snippet adds the specified header and source files (`zel_template_checker.h` and `zel_template_checker.cpp`) to the target named `${TARGET_NAME}`. The `PRIVATE` scope ensures these files are only used for building the specified target and aren't propagated to dependent targets.\nSOURCE: https://github.com/oneapi-src/level-zero/blob/master/source/layers/validation/checkers/template/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_sources(${TARGET_NAME} \n    PRIVATE\n        ${CMAKE_CURRENT_LIST_DIR}/zel_template_checker.h\n        ${CMAKE_CURRENT_LIST_DIR}/zel_template_checker.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Zello World Legacy Tracing Test in CMake\nDESCRIPTION: Configures the 'test_zello_world_legacy_tracing' test using 'add_test'. It specifies the zello_world executable and enables legacy initialization, a null driver, and the tracing layer. It then sets the 'ZE_ENABLE_LOADER_DEBUG_TRACE' environment variable for the test using 'set_property'.\nSOURCE: https://github.com/oneapi-src/level-zero/blob/master/test/CMakeLists.txt#_snippet_25\n\nLANGUAGE: CMake\nCODE:\n```\nadd_test(NAME test_zello_world_legacy_tracing COMMAND zello_world --enable_legacy_init --enable_null_driver --enable_tracing_layer)\nset_property(TEST test_zello_world_legacy_tracing PROPERTY ENVIRONMENT \"ZE_ENABLE_LOADER_DEBUG_TRACE=1\")\n```\n\n----------------------------------------\n\nTITLE: CPack Settings for MSVC\nDESCRIPTION: This code block sets CPack specific settings when using MSVC. It disables setting the destination directory and sets the packaging install prefix to an empty string.\nSOURCE: https://github.com/oneapi-src/level-zero/blob/master/CMakeLists.txt#_snippet_21\n\nLANGUAGE: cmake\nCODE:\n```\nif(MSVC)\n\tset(CPACK_SET_DESTDIR FALSE)\n\tset(CPACK_PACKAGING_INSTALL_PREFIX \"\")\nelse()\n\tset(CPACK_SET_DESTDIR TRUE)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Zello World Legacy All Tracing Test in CMake\nDESCRIPTION: Configures the 'test_zello_world_legacy_all_tracing' test using 'add_test'. It specifies the zello_world executable and enables legacy initialization, a null driver, loader intercepts, validation and tracing layers.  The environment variable 'ZE_ENABLE_LOADER_DEBUG_TRACE' is set using 'set_property' to enable loader debug tracing.\nSOURCE: https://github.com/oneapi-src/level-zero/blob/master/test/CMakeLists.txt#_snippet_27\n\nLANGUAGE: CMake\nCODE:\n```\nadd_test(NAME test_zello_world_legacy_all_tracing COMMAND zello_world --enable_legacy_init --enable_null_driver --force_loader_intercepts --enable_validation_layer --enable_tracing_layer)\nset_property(TEST test_zello_world_legacy_all_tracing PROPERTY ENVIRONMENT \"ZE_ENABLE_LOADER_DEBUG_TRACE=1\")\n```\n\n----------------------------------------\n\nTITLE: Generating Loader Files: Generate JSON and Headers\nDESCRIPTION: This command runs the `run.py` script to generate the specification JSON file and headers from the specification files. The script uses python3.\nSOURCE: https://github.com/oneapi-src/level-zero/blob/master/CONTRIBUTING.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncd level-zero-spec/scripts\npython3 ./run.py --debug '--!html' '--!rst' '--!build' --ver 1.12\n```\n\n----------------------------------------\n\nTITLE: Configuring Zello World Legacy All Tracing Dynamic Test in CMake\nDESCRIPTION: Configures the 'test_zello_world_legacy_all_tracing_dynamic' test using 'add_test'. It specifies the zello_world executable and enables legacy initialization, a null driver, loader intercepts, validation and runtime tracing layers. The environment variable 'ZE_ENABLE_LOADER_DEBUG_TRACE' is set using 'set_property' to enable loader debug tracing.\nSOURCE: https://github.com/oneapi-src/level-zero/blob/master/test/CMakeLists.txt#_snippet_28\n\nLANGUAGE: CMake\nCODE:\n```\nadd_test(NAME test_zello_world_legacy_all_tracing_dynamic COMMAND zello_world --enable_legacy_init --enable_null_driver --force_loader_intercepts --enable_validation_layer --enable_tracing_layer_runtime)\nset_property(TEST test_zello_world_legacy_all_tracing_dynamic PROPERTY ENVIRONMENT \"ZE_ENABLE_LOADER_DEBUG_TRACE=1\")\n```\n\n----------------------------------------\n\nTITLE: Setting Test Environment Variable in CMake\nDESCRIPTION: Adds a test and sets an environment variable using CMake commands. The 'add_test' command creates a test named 'tests_sigle_driver_stdout'. The 'set_property' command sets the environment variable 'ZE_ENABLE_NULL_DRIVER' to 1 for this test, enabling the null driver.\nSOURCE: https://github.com/oneapi-src/level-zero/blob/master/test/CMakeLists.txt#_snippet_30\n\nLANGUAGE: CMake\nCODE:\n```\nadd_test(NAME tests_sigle_driver_stdout COMMAND tests --gtest_filter=*GivenZeInitDriverWhenCalledThenNoOutputIsPrintedToStdout)\nset_property(TEST tests_sigle_driver_stdout PROPERTY ENVIRONMENT \"ZE_ENABLE_NULL_DRIVER=1\")\n```\n\n----------------------------------------\n\nTITLE: Generating Loader Files: Checkout spec version\nDESCRIPTION: This command checks out a specific version of the Level Zero specification. The version needs to match the version you want to generate the loader files for.\nSOURCE: https://github.com/oneapi-src/level-zero/blob/master/CONTRIBUTING.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncd level-zero-spec\ngit checkout v1.12.15\n```\n\n----------------------------------------\n\nTITLE: Conditionally Adding Level Zero Event Deadlock Tests\nDESCRIPTION: Conditionally adds several Level Zero event deadlock tests if the target platform is not MSVC (Windows). It uses the `add_test` command to define each test and the `set_property` command to set environment variables. These variables configure the tests with debug tracing, a null driver, validation layer, and an event checker.\nSOURCE: https://github.com/oneapi-src/level-zero/blob/master/test/CMakeLists.txt#_snippet_31\n\nLANGUAGE: CMake\nCODE:\n```\nif(NOT MSVC)\n    add_test(NAME tests_event_deadlock COMMAND tests --gtest_filter=*GivenLevelZeroLoaderPresentWhenCallingzeCommandListAppendMemoryCopyWithCircularDependencyOnEventsThenValidationLayerPrintsWarningOfDeadlock*)\n    set_property(TEST tests_event_deadlock PROPERTY ENVIRONMENT \"ZE_ENABLE_LOADER_DEBUG_TRACE=1;ZE_ENABLE_NULL_DRIVER=1;ZE_ENABLE_VALIDATION_LAYER=1;ZEL_ENABLE_EVENTS_CHECKER=1\")\n    add_test(NAME tests_event_deadlock_reset COMMAND tests --gtest_filter=*GivenLevelZeroLoaderPresentWhenCallingzeCommandListAppendMemoryCopyWithCircularDependencyOnEventsAndExplicitCallzeEventHostSignalThenValidationLayerPrintsWarningOfIllegalUsage*)\n    set_property(TEST tests_event_deadlock_reset PROPERTY ENVIRONMENT \"ZE_ENABLE_LOADER_DEBUG_TRACE=1;ZE_ENABLE_NULL_DRIVER=1;ZE_ENABLE_VALIDATION_LAYER=1;ZEL_ENABLE_EVENTS_CHECKER=1\")\n    add_test(NAME tests_event_reset_reuse COMMAND tests --gtest_filter=*GivenLevelZeroLoaderPresentWhenCallingzeEventHostResetWithAlreadySignaledEventThenUsingEventAgainThenValidationLayerDoesNotPrintsWarningOfIllegalUsage*)\n    set_property(TEST tests_event_reset_reuse PROPERTY ENVIRONMENT \"ZE_ENABLE_LOADER_DEBUG_TRACE=1;ZE_ENABLE_NULL_DRIVER=1;ZE_ENABLE_VALIDATION_LAYER=1;ZEL_ENABLE_EVENTS_CHECKER=1\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Generating and Storing Product GUID\nDESCRIPTION: This code generates a product GUID using a Python script if a `PRODUCT_GUID.txt` file doesn't exist or if the version in the file doesn't match the current project version. It executes the script, writes the generated GUID to the file, and stores the GUID in the GENERATED_PRODUCT_GUID variable.  If the file exists and the versions match, it reads the GUID from the file.\nSOURCE: https://github.com/oneapi-src/level-zero/blob/master/CMakeLists.txt#_snippet_19\n\nLANGUAGE: cmake\nCODE:\n```\nset(PRODUCT_GUID_FILE \"${CMAKE_CURRENT_SOURCE_DIR}/PRODUCT_GUID.txt\")\nif(EXISTS \"${PRODUCT_GUID_FILE}\")\n    file(STRINGS \"${PRODUCT_GUID_FILE}\" SAVED_PRODUCT_GUID)\n    list(GET SAVED_PRODUCT_GUID 0 SAVED_PRODUCT_GUID_VERSION)\n    message(STATUS \"Saved Product GUID: ${SAVED_PRODUCT_GUID_VERSION}\")\n    message(STATUS \"project version: ${PROJECT_VERSION}\")\n    if(NOT SAVED_PRODUCT_GUID_VERSION STREQUAL \"${PROJECT_VERSION}\")\n\n    execute_process(\n        COMMAND python ${CMAKE_CURRENT_SOURCE_DIR}/scripts/generate_wix_guid.py\n        OUTPUT_VARIABLE GENERATED_PRODUCT_GUID\n        OUTPUT_STRIP_TRAILING_WHITESPACE\n    )\n    file(WRITE \"${PRODUCT_GUID_FILE}\" \"${PROJECT_VERSION}\\n${GENERATED_PRODUCT_GUID}\")\n    message(STATUS \"Generated Product GUID: ${GENERATED_PRODUCT_GUID} for version ${PROJECT_VERSION}\")\n    else()\n    string(REPLACE \"\\n\" \";\" GUID_CONTENTS \"${SAVED_PRODUCT_GUID}\")\n    list(GET GUID_CONTENTS 1 GENERATED_PRODUCT_GUID)\n    endif()\nelse()\n    execute_process(\n    COMMAND python ${CMAKE_CURRENT_SOURCE_DIR}/scripts/generate_wix_guid.py\n    OUTPUT_VARIABLE GENERATED_PRODUCT_GUID\n    OUTPUT_STRIP_TRAILING_WHITESPACE\n    )\n    file(WRITE \"${PRODUCT_GUID_FILE}\" \"${PROJECT_VERSION}\\n${GENERATED_PRODUCT_GUID}\")\nendif()\nmessage(STATUS \"Using Product GUID: ${GENERATED_PRODUCT_GUID} for version ${PROJECT_VERSION}\")\n```\n\n----------------------------------------\n\nTITLE: Sample Output: Basic Leak Checker\nDESCRIPTION: This code snippet demonstrates the output of the basic leak checker in the validation layer.  It shows the number of Create and Destroy calls for different handle types, highlighting potential memory leaks if there's a mismatch.  It helps identify missing Destroy calls for created objects.\nSOURCE: https://github.com/oneapi-src/level-zero/blob/master/source/layers/validation/README.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n----------------------------------------------------------------------\n                       zeContextCreate = 1     \\--->        zeContextDestroy = 1\n                  zeCommandQueueCreate = 1     \\--->   zeCommandQueueDestroy = 1\n                        zeModuleCreate = 1     \\--->         zeModuleDestroy = 1\n                        zeKernelCreate = 1     \\--->         zeKernelDestroy = 1\n                     zeEventPoolCreate = 1     \\--->      zeEventPoolDestroy = 1\n          zeCommandListCreateImmediate = 1     |\n                   zeCommandListCreate = 1     \\--->    zeCommandListDestroy = 1  ---> LEAK = 1\n                         zeEventCreate = 2     \\--->          zeEventDestroy = 2\n                         zeFenceCreate = 1     \\--->          zeFenceDestroy = 1\n                         zeImageCreate = 0     \\--->          zeImageDestroy = 0\n                       zeSamplerCreate = 0     \\--->        zeSamplerDestroy = 0\n                      zeMemAllocDevice = 0     |\n                        zeMemAllocHost = 1     |\n                      zeMemAllocShared = 0     \\--->               zeMemFree = 1\n```\n\n----------------------------------------\n\nTITLE: Configuring Zello World Legacy Test in CMake\nDESCRIPTION: Configures the 'test_zello_world_legacy' test using 'add_test'. It specifies the zello_world executable and enables legacy initialization, a null driver, loader intercepts, validation and tracing layers, and runtime tracing.  The environment variable 'ZE_ENABLE_LOADER_DEBUG_TRACE' is set using 'set_property' to enable loader debug tracing.\nSOURCE: https://github.com/oneapi-src/level-zero/blob/master/test/CMakeLists.txt#_snippet_22\n\nLANGUAGE: CMake\nCODE:\n```\nadd_test(NAME test_zello_world_legacy COMMAND zello_world --enable_legacy_init --enable_null_driver --force_loader_intercepts --enable_validation_layer --enable_tracing_layer --enable_tracing_layer_runtime)\nset_property(TEST test_zello_world_legacy PROPERTY ENVIRONMENT \"ZE_ENABLE_LOADER_DEBUG_TRACE=1\")\n```\n\n----------------------------------------\n\nTITLE: Generating Loader Files: Copy Headers to Loader repo\nDESCRIPTION: This command copies the generated header files from the specification repository to the Level Zero loader repository. This is necessary to update the header files used by the loader.\nSOURCE: https://github.com/oneapi-src/level-zero/blob/master/CONTRIBUTING.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ncp level-zero-spec/include/* level-zero/include/\n```\n\n----------------------------------------\n\nTITLE: Generating Validation Checker Template in Python\nDESCRIPTION: This command generates a skeleton for a new validation checker using the provided Python script. It creates a new directory with necessary files for the checker in the specified location.\nSOURCE: https://github.com/oneapi-src/level-zero/blob/master/source/layers/validation/CONTRIBUTING.md#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\npython3 ./scripts/generate_checker.py <CheckerName> <Level Zero Loader Root Directory Path>.\n```\n\n----------------------------------------\n\nTITLE: Level Zero Tracing Example 2 in C\nDESCRIPTION: This example demonstrates Level Zero API tracing using the zelTracerCommandListAppendLaunchKernelRegisterCallback function. It creates a tracer, registers prologue and epilogue callbacks for zeCommandListAppendLaunchKernel, enables the tracer, executes the kernel launch, disables the tracer, and destroys it.\nSOURCE: https://github.com/oneapi-src/level-zero/blob/master/source/layers/tracing/README.md#_snippet_3\n\nLANGUAGE: C\nCODE:\n```\nvoid TracingExample2( ... )\n{\n    my_tracer_data_t tracer_data = {};\n    zel_tracer_desc_t tracer_desc;\n    tracer_desc.stype = ZEL_STRUCTURE_TYPE_TRACER_DESC;\n    tracer_desc.pUserData = &tracer_data;\n    zel_tracer_handle_t hTracer;\n    zelTracerCreate(hDevice, &tracer_desc, &hTracer);\n\n    zelTracerCommandListAppendLaunchKernelRegisterCallback(hTracer, ZEL_REGISTER_PROLOGUE, OnEnterCommandListAppendLaunchKernel);\n    zelTracerCommandListAppendLaunchKernelRegisterCallback(hTracer, ZEL_REGISTER_EPILOGUE, OnExitCommandListAppendLaunchKernel);\n\n    zelTracerSetEnabled(hTracer, true);\n\n    zeCommandListAppendLaunchKernel(hCommandList, hFunction, &launchArgs, nullptr, 0, nullptr);\n\n    zelTracerSetEnabled(hTracer, false);\n    zelTracerDestroy(hTracer);\n}\n```\n\n----------------------------------------\n\nTITLE: Add Executable Target in CMake\nDESCRIPTION: Adds an executable target named 'zello_world' using the source file 'zello_world.cpp' located in the current source directory.  This defines the executable that will be built.\nSOURCE: https://github.com/oneapi-src/level-zero/blob/master/samples/zello_world/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(${TARGET_NAME}\n    ${CMAKE_CURRENT_SOURCE_DIR}/zello_world.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Level Zero Tracing Example 1 in C\nDESCRIPTION: This example demonstrates Level Zero API tracing using the deprecated zelTracerSetPrologues/zelTracerSetEpilogues functions. It creates a tracer, sets prologue and epilogue callbacks for zeCommandListAppendLaunchKernel, enables the tracer, executes the kernel launch, disables the tracer, and destroys it.\nSOURCE: https://github.com/oneapi-src/level-zero/blob/master/source/layers/tracing/README.md#_snippet_2\n\nLANGUAGE: C\nCODE:\n```\nvoid TracingExample1( ... )\n{\n    my_tracer_data_t tracer_data = {};\n    zel_tracer_desc_t tracer_desc;\n    tracer_desc.stype = ZEL_STRUCTURE_TYPE_TRACER_DESC;\n    tracer_desc.pUserData = &tracer_data;\n    zel_tracer_handle_t hTracer;\n    zelTracerCreate(hDevice, &tracer_desc, &hTracer);\n\n    // Set all callbacks\n    zel_core_callbacks_t prologCbs = {};\n    zel_core_callbacks_t epilogCbs = {};\n    prologCbs.CommandList.pfnAppendLaunchKernelCb = OnEnterCommandListAppendLaunchKernel;\n    epilogCbs.CommandList.pfnAppendLaunchKernelCb = OnExitCommandListAppendLaunchKernel;\n\n    zelTracerSetPrologues(hTracer, &prologCbs);\n    zelTracerSetEpilogues(hTracer, &epilogCbs);\n\n    zelTracerSetEnabled(hTracer, true);\n\n    zeCommandListAppendLaunchKernel(hCommandList, hFunction, &launchArgs, nullptr, 0, nullptr);\n\n    zelTracerSetEnabled(hTracer, false);\n    zelTracerDestroy(hTracer);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Zello World Legacy Dynamic Tracing Test in CMake\nDESCRIPTION: Configures the 'test_zello_world_legacy_dynamic_tracing' test using 'add_test'. It specifies the zello_world executable and enables legacy initialization, a null driver, and the runtime tracing layer.  The environment variable 'ZE_ENABLE_LOADER_DEBUG_TRACE' is set using 'set_property' to enable loader debug tracing.\nSOURCE: https://github.com/oneapi-src/level-zero/blob/master/test/CMakeLists.txt#_snippet_26\n\nLANGUAGE: CMake\nCODE:\n```\nadd_test(NAME test_zello_world_legacy_dynamic_tracing COMMAND zello_world --enable_legacy_init --enable_null_driver --enable_tracing_layer_runtime)\nset_property(TEST test_zello_world_legacy_dynamic_tracing PROPERTY ENVIRONMENT \"ZE_ENABLE_LOADER_DEBUG_TRACE=1\")\n```\n\n----------------------------------------\n\nTITLE: Prologue Callback for CommandListAppendLaunchKernel in C\nDESCRIPTION: This function serves as the prologue callback for the zeCommandListAppendLaunchKernel API function. It allocates memory for instance-specific data, stores the start time using the clock() function, and associates this data with the tracer instance.\nSOURCE: https://github.com/oneapi-src/level-zero/blob/master/source/layers/tracing/README.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid OnEnterCommandListAppendLaunchKernel(\n    ze_command_list_append_launch_kernel_params_t* params,\n    ze_result_t result,\n    void* pTracerUserData,\n    void** ppTracerInstanceUserData )\n{\n    my_instance_data_t* instance_data = malloc( sizeof(my_instance_data_t) );\n    *ppTracerInstanceUserData = instance_data;\n\n    instance_data->start = clock();\n}\n```\n\n----------------------------------------\n\nTITLE: Signing commits: Add Signed-off-by line\nDESCRIPTION: This command shows the format for the sign-off line that should be included in every git commit message. It certifies that the contributor has the right to submit the patch as an open-source contribution.\nSOURCE: https://github.com/oneapi-src/level-zero/blob/master/CONTRIBUTING.md#_snippet_5\n\nLANGUAGE: text\nCODE:\n```\nSigned-off-by: Kris Smith <kris.smith@email.com>\n```\n\n----------------------------------------\n\nTITLE: Linking Threads Library on UNIX\nDESCRIPTION: This block configures and links the Threads library when building on UNIX systems. It prefers PThreads and links the `${TARGET_LOADER_NAME}` target with `Threads::Threads` privately.\nSOURCE: https://github.com/oneapi-src/level-zero/blob/master/source/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nif (UNIX)\n    set(CMAKE_THREAD_PREFER_PTHREAD TRUE)\n    set(THREADS_PREFER_PTHREAD_FLAG TRUE)\n    find_package(Threads REQUIRED)\n    target_link_libraries (${TARGET_LOADER_NAME} PRIVATE Threads::Threads)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Signing commits: Signing automatically\nDESCRIPTION: This command shows how to automatically sign off a commit. This requires setting up the user.name and user.email git configs.\nSOURCE: https://github.com/oneapi-src/level-zero/blob/master/CONTRIBUTING.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ngit commit -s\n```\n\n----------------------------------------\n\nTITLE: Configuring Resource File in CMake\nDESCRIPTION: This snippet configures a resource file (ZeValidationLayerVersion.rc.in) to generate the ZeValidationLayerVersion.rc file in the binary directory. This is commonly used on Windows to embed version information into the DLL.\nSOURCE: https://github.com/oneapi-src/level-zero/blob/master/source/layers/validation/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nconfigure_file(\n    ${CMAKE_CURRENT_SOURCE_DIR}/ZeValidationLayerVersion.rc.in\n    ${CMAKE_CURRENT_BINARY_DIR}/ZeValidationLayerVersion.rc\n    @ONLY)\n```\n\n----------------------------------------\n\nTITLE: Configuring Zello World Legacy Validation Test in CMake\nDESCRIPTION: Configures the 'test_zello_world_legacy_validation_layer' test using 'add_test'.  It specifies the zello_world executable and enables legacy initialization, a null driver and validation layer.  The environment variable 'ZE_ENABLE_LOADER_DEBUG_TRACE' is set using 'set_property' to enable loader debug tracing.\nSOURCE: https://github.com/oneapi-src/level-zero/blob/master/test/CMakeLists.txt#_snippet_24\n\nLANGUAGE: CMake\nCODE:\n```\nadd_test(NAME test_zello_world_legacy_validation_layer COMMAND zello_world --enable_legacy_init --enable_null_driver --enable_validation_layer)\nset_property(TEST test_zello_world_legacy_validation_layer PROPERTY ENVIRONMENT \"ZE_ENABLE_LOADER_DEBUG_TRACE=1\")\n```\n\n----------------------------------------\n\nTITLE: Developer Certificate of Origin\nDESCRIPTION: This block contains the Developer Certificate of Origin (DCO) version 1.1. By signing off a commit, the developer certifies that they agree to the terms of this certificate.\nSOURCE: https://github.com/oneapi-src/level-zero/blob/master/CONTRIBUTING.md#_snippet_7\n\nLANGUAGE: text\nCODE:\n```\nDeveloper Certificate of Origin\nVersion 1.1\n\nCopyright (C) 2004, 2006 The Linux Foundation and its contributors.\n660 York Street, Suite 102,\nSan Francisco, CA 94110 USA\n\nEveryone is permitted to copy and distribute verbatim copies of this\nlicense document, but changing it is not allowed.\n\nDeveloper's Certificate of Origin 1.1\n\nBy making a contribution to this project, I certify that:\n\n(a) The contribution was created in whole or in part by me and I\n    have the right to submit it under the open source license\n    indicated in the file; or\n\n(b) The contribution is based upon previous work that, to the best\n    of my knowledge, is covered under an appropriate open source\n    license and I have the right under that license to submit that\n    work with modifications, whether created in whole or in part\n    by me, under the same open source license (unless I am\n    permitted to submit under a different license), as indicated\n    in the file; or\n\n(c) The contribution was provided directly to me by some other\n    person who certified (a), (b) or (c) and I have not modified\n    it.\n\n(d) I understand and agree that this project and the contribution\n    are public and that a record of the contribution (including all\n    personal information I submit with it, including my sign-off) is\n    maintained indefinitely and may be redistributed consistent with\n    this project or the open source license(s) involved.\n```\n\n----------------------------------------\n\nTITLE: Configure MSVC Debugger in CMake\nDESCRIPTION: Configures the Microsoft Visual C++ (MSVC) debugger settings for the 'zello_world' target.  It sets the debugger command arguments to an empty string and the working directory to the output directory.\nSOURCE: https://github.com/oneapi-src/level-zero/blob/master/samples/zello_world/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nif(MSVC)\n    set_target_properties(${TARGET_NAME}\n        PROPERTIES\n            VS_DEBUGGER_COMMAND_ARGUMENTS \"\"\n            VS_DEBUGGER_WORKING_DIRECTORY \"$(OutDir)\"\n    )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Developer Certificate of Origin\nDESCRIPTION: This is the Developer Certificate of Origin version 1.1.\nIt outlines the terms and conditions under which a contribution is made to the project, ensuring that the contributor has the right to submit the code under the open-source license.\nSOURCE: https://github.com/oneapi-src/level-zero/blob/master/source/layers/validation/CONTRIBUTING.md#_snippet_2\n\nLANGUAGE: Text\nCODE:\n```\nDeveloper Certificate of Origin\nVersion 1.1\n\nCopyright (C) 2004, 2006 The Linux Foundation and its contributors.\n660 York Street, Suite 102,\nSan Francisco, CA 94110 USA\n\nEveryone is permitted to copy and distribute verbatim copies of this\nlicense document, but changing it is not allowed.\n\nDeveloper's Certificate of Origin 1.1\n\nBy making a contribution to this project, I certify that:\n\n(a) The contribution was created in whole or in part by me and I\n    have the right to submit it under the open source license\n    indicated in the file; or\n\n(b) The contribution is based upon previous work that, to the best\n    of my knowledge, is covered under an appropriate open source\n    license and I have the right under that license to submit that\n    work with modifications, whether created in whole or in part\n    by me, under the same open source license (unless I am\n    permitted to submit under a different license), as indicated\n    in the file; or\n\n(c) The contribution was provided directly to me by some other\n    person who certified (a), (b) or (c) and I have not modified\n    it.\n\n(d) I understand and agree that this project and the contribution\n    are public and that a record of the contribution (including all\n    personal information I submit with it, including my sign-off) is\n    maintained indefinitely and may be redistributed consistent with\n    this project or the open source license(s) involved.\n```\n\n----------------------------------------\n\nTITLE: Adding a Subdirectory in CMake\nDESCRIPTION: The `add_subdirectory` command adds a subdirectory to the build.  The first argument specifies the source directory, relative to the current source directory.  In this case the 'null' subdirectory is added to the build.\nSOURCE: https://github.com/oneapi-src/level-zero/blob/master/source/drivers/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(null)\n```\n\n----------------------------------------\n\nTITLE: Including CPack Module\nDESCRIPTION: This includes the standard CPack module to make the specified packaging settings available. This command must be included after all CPack configuration options are set.\nSOURCE: https://github.com/oneapi-src/level-zero/blob/master/CMakeLists.txt#_snippet_25\n\nLANGUAGE: cmake\nCODE:\n```\nINCLUDE(CPack)\n```\n\n----------------------------------------\n\nTITLE: Configuring Zello World Legacy Intercept Test in CMake\nDESCRIPTION: Configures the 'test_zello_world_legacy_intercept' test using 'add_test'. It specifies the zello_world executable and enables legacy initialization, a null driver and loader intercepts. The environment variable 'ZE_ENABLE_LOADER_DEBUG_TRACE' is set using 'set_property' to enable loader debug tracing.\nSOURCE: https://github.com/oneapi-src/level-zero/blob/master/test/CMakeLists.txt#_snippet_23\n\nLANGUAGE: CMake\nCODE:\n```\nadd_test(NAME test_zello_world_legacy_intercept COMMAND zello_world --enable_legacy_init --enable_null_driver --force_loader_intercepts)\nset_property(TEST test_zello_world_legacy_intercept PROPERTY ENVIRONMENT \"ZE_ENABLE_LOADER_DEBUG_TRACE=1\")\n```\n\n----------------------------------------\n\nTITLE: Configuring and Installing Pkg-Config Files\nDESCRIPTION: This block configures and installs pkg-config files (`libze_loader.pc` and `level-zero.pc`) if `BUILD_INSTALLER` is not enabled. It calculates relative paths and then configures and installs the files to the `pkgconfig` directory.\nSOURCE: https://github.com/oneapi-src/level-zero/blob/master/source/CMakeLists.txt#_snippet_12\n\nLANGUAGE: cmake\nCODE:\n```\nif(NOT BUILD_INSTALLER)\nfile(RELATIVE_PATH pkgconfig_prefix \"${CMAKE_INSTALL_FULL_LIBDIR}/pkgconfig\" \"${CMAKE_INSTALL_PREFIX}\")\nfile(RELATIVE_PATH pkgconfig_include_dir \"${CMAKE_INSTALL_PREFIX}\" \"${CMAKE_INSTALL_FULL_INCLUDEDIR}\")\nfile(RELATIVE_PATH pkgconfig_lib_dir \"${CMAKE_INSTALL_PREFIX}\" \"${CMAKE_INSTALL_FULL_LIBDIR}\")\n\nconfigure_file(${CMAKE_CURRENT_SOURCE_DIR}/libze_loader.pc.in ${CMAKE_CURRENT_BINARY_DIR}/libze_loader.pc @ONLY)\nconfigure_file(${CMAKE_CURRENT_SOURCE_DIR}/level-zero.pc.in ${CMAKE_CURRENT_BINARY_DIR}/level-zero.pc @ONLY)\n\ninstall(FILES \"${CMAKE_CURRENT_BINARY_DIR}/libze_loader.pc\"\n              \"${CMAKE_CURRENT_BINARY_DIR}/level-zero.pc\"\n        DESTINATION \"${CMAKE_INSTALL_FULL_LIBDIR}/pkgconfig\" COMPONENT ${SDK_COMPONENT_STRING})\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Subdirectories with CMake\nDESCRIPTION: This CMake command includes the 'events_checker' subdirectory into the current CMake project. It allows CMake to find and process the CMakeLists.txt file located within the 'events_checker' subdirectory. This is crucial for incorporating the source code and build configurations defined in that subdirectory into the overall project.\nSOURCE: https://github.com/oneapi-src/level-zero/blob/master/source/layers/validation/checkers/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(events_checker)\n```\n\n----------------------------------------\n\nTITLE: Adding Subdirectories with CMake\nDESCRIPTION: This CMake command includes the 'template' subdirectory into the current CMake project. It allows CMake to find and process the CMakeLists.txt file located within the 'template' subdirectory. This is crucial for incorporating the source code and build configurations defined in that subdirectory into the overall project.\nSOURCE: https://github.com/oneapi-src/level-zero/blob/master/source/layers/validation/checkers/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(template)\n```\n\n----------------------------------------\n\nTITLE: Creating and Configuring Test Libraries\nDESCRIPTION: This snippet creates two shared libraries, ze_null_test1 and ze_null_test2, if BUILD_L0_LOADER_TESTS is enabled. It configures their properties, include directories, and compile definitions to use distinct ZEL_NULL_DRIVER_ID values. It also installs them conditionally if INSTALL_NULL_DRIVER is enabled.\nSOURCE: https://github.com/oneapi-src/level-zero/blob/master/source/drivers/null/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nif (BUILD_L0_LOADER_TESTS)\nadd_library(ze_null_test1 SHARED\n    ${CMAKE_CURRENT_SOURCE_DIR}/ze_null.h\n    ${CMAKE_CURRENT_SOURCE_DIR}/ze_null.cpp\n    ${CMAKE_CURRENT_SOURCE_DIR}/ze_nullddi.cpp\n    ${CMAKE_CURRENT_SOURCE_DIR}/zet_nullddi.cpp\n    ${CMAKE_CURRENT_SOURCE_DIR}/zes_nullddi.cpp\n)\n\nadd_library(ze_null_test2 SHARED\n    ${CMAKE_CURRENT_SOURCE_DIR}/ze_null.h\n    ${CMAKE_CURRENT_SOURCE_DIR}/ze_null.cpp\n    ${CMAKE_CURRENT_SOURCE_DIR}/ze_nullddi.cpp\n    ${CMAKE_CURRENT_SOURCE_DIR}/zet_nullddi.cpp\n    ${CMAKE_CURRENT_SOURCE_DIR}/zes_nullddi.cpp\n)\n\nset_target_properties(ze_null_test1 PROPERTIES\n    VERSION \"${PROJECT_VERSION_MAJOR}.${PROJECT_VERSION_MINOR}.${PROJECT_VERSION_PATCH}\"\n    SOVERSION \"${PROJECT_VERSION_MAJOR}\"\n)\n\nset_target_properties(ze_null_test2 PROPERTIES\n    VERSION \"${PROJECT_VERSION_MAJOR}.${PROJECT_VERSION_MINOR}.${PROJECT_VERSION_PATCH}\"\n    SOVERSION \"${PROJECT_VERSION_MAJOR}\"\n)\n\ntarget_include_directories(ze_null_test1\n    PUBLIC\n        ${CMAKE_CURRENT_SOURCE_DIR}\n)\n\ntarget_include_directories(ze_null_test2\n    PUBLIC\n        ${CMAKE_CURRENT_SOURCE_DIR}\n)\n\ntarget_compile_definitions(ze_null_test1 PUBLIC ZEL_NULL_DRIVER_ID=1)\ntarget_compile_definitions(ze_null_test2 PUBLIC ZEL_NULL_DRIVER_ID=2)\ntarget_compile_definitions(ze_null PUBLIC ZEL_NULL_DRIVER_ID=1)\n\nif(INSTALL_NULL_DRIVER)\n    install(TARGETS ze_null_test1\n        ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR} COMPONENT level-zero-devel\n        RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR} COMPONENT level-zero\n        LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR} COMPONENT level-zero\n        NAMELINK_COMPONENT level-zero-devel\n    )\n    install(TARGETS ze_null_test2\n        ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR} COMPONENT level-zero-devel\n        RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR} COMPONENT level-zero\n        LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR} COMPONENT level-zero\n        NAMELINK_COMPONENT level-zero-devel\n    )\nendif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Signing Off Commits in Git\nDESCRIPTION: This command signs off a Git commit, indicating that the contributor certifies they have the right to submit the patch as an open-source contribution. It automatically adds a 'Signed-off-by' line to the commit message.\nSOURCE: https://github.com/oneapi-src/level-zero/blob/master/source/layers/validation/CONTRIBUTING.md#_snippet_1\n\nLANGUAGE: Git\nCODE:\n```\ngit commit -s\n```\n\n----------------------------------------\n\nTITLE: Setting Installation Components Strings\nDESCRIPTION: This block sets the SDK and library component strings for installation. It sets default values and then overrides them if `BUILD_INSTALLER` is enabled.\nSOURCE: https://github.com/oneapi-src/level-zero/blob/master/source/CMakeLists.txt#_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\nset(SDK_COMPONENT_STRING \"level-zero-devel\")\nset(LIB_COMPONENT_STRING \"level-zero\")\n\nif(BUILD_INSTALLER)\n    set(SDK_COMPONENT_STRING \"SDK\")\n    set(LIB_COMPONENT_STRING \"Loader\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Epilogue Callback for CommandListAppendLaunchKernel in C\nDESCRIPTION: This function serves as the epilogue callback for the zeCommandListAppendLaunchKernel API function. It calculates the execution time of the kernel launch using the clock() function, retrieves tracer and instance data, prints the execution time, and frees the allocated instance data.\nSOURCE: https://github.com/oneapi-src/level-zero/blob/master/source/layers/tracing/README.md#_snippet_1\n\nLANGUAGE: C\nCODE:\n```\nvoid OnExitCommandListAppendLaunchKernel(\n    ze_command_list_append_launch_kernel_params_t* params,\n    ze_result_t result,\n    void* pTracerUserData,\n    void** ppTracerInstanceUserData )\n{\n    clock_t end = clock();\n\n    my_tracer_data_t* tracer_data = (my_tracer_data_t*)pTracerUserData;\n    my_instance_data_t* instance_data = *(my_instance_data_t**)ppTracerInstanceUserData;\n\n    float time = 1000.f * ( end - instance_data->start ) / CLOCKS_PER_SEC;\n    printf(\"zeCommandListAppendLaunchKernel #%d takes %.4f msn\", tracer_data->instance++, time);\n\n    free(instance_data);\n}\n```\n\n----------------------------------------\n\nTITLE: Appending Environment Variables in CMake\nDESCRIPTION: Configures a multi-driver test named 'tests_multi_driver_stdout' using CMake's 'add_test' and 'set_property' commands. It appends environment variables to enable alternative drivers, differentiating between MSVC and non-MSVC environments to use the correct library paths.\nSOURCE: https://github.com/oneapi-src/level-zero/blob/master/test/CMakeLists.txt#_snippet_29\n\nLANGUAGE: CMake\nCODE:\n```\nadd_test(NAME tests_multi_driver_stdout COMMAND tests --gtest_filter=*GivenZeInitDriverWhenCalledThenNoOutputIsPrintedToStdout)\nif (MSVC)\n  set_property(TEST tests_multi_driver_stdout APPEND PROPERTY ENVIRONMENT \"ZE_ENABLE_ALT_DRIVERS=${CMAKE_BINARY_DIR}/bin/$<CONFIG>/ze_null_test1.dll,${CMAKE_BINARY_DIR}/bin/$<CONFIG>/ze_null_test2.dll\")\nelse()\n  set_property(TEST tests_multi_driver_stdout APPEND PROPERTY ENVIRONMENT \"ZE_ENABLE_ALT_DRIVERS=${CMAKE_BINARY_DIR}/lib/libze_null_test1.so,${CMAKE_BINARY_DIR}/lib/libze_null_test2.so\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Level Zero Test\nDESCRIPTION: Adds a test case using the 'add_test' command in CMake. This command defines a test named 'tests_multi_driver_missing_initDrivers' that executes the 'tests' executable with a specific gtest filter. It also sets up the environment using 'set_property' to enable loader debug trace and specify alternative drivers.\nSOURCE: https://github.com/oneapi-src/level-zero/blob/master/test/CMakeLists.txt#_snippet_14\n\nLANGUAGE: CMake\nCODE:\n```\nadd_test(NAME tests_multi_driver_missing_initDrivers COMMAND tests --gtest_filter=*GivenLevelZeroLoaderPresentWithMultipleDriversMissingInitDriversWhenCallingZeInitDriversThenExpectSuccessForZeInit)\nif (MSVC)\n  set_property(TEST tests_multi_driver_missing_initDrivers PROPERTY ENVIRONMENT \"ZE_ENABLE_LOADER_DEBUG_TRACE=1;ZE_ENABLE_ALT_DRIVERS=${CMAKE_BINARY_DIR}/bin/$<CONFIG>/ze_null_test1.dll,${CMAKE_BINARY_DIR}/bin/$<CONFIG>/ze_null_test2.dll\")\nelse()\n  set_property(TEST tests_multi_driver_missing_initDrivers PROPERTY ENVIRONMENT \"ZE_ENABLE_LOADER_DEBUG_TRACE=1;ZE_ENABLE_ALT_DRIVERS=${CMAKE_BINARY_DIR}/lib/libze_null_test1.so,${CMAKE_BINARY_DIR}/lib/libze_null_test2.so\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Level Zero Test\nDESCRIPTION: Adds a test case using the 'add_test' command in CMake. This command defines a test named 'tests_multi_driver_one_driver_missing_initDrivers' that executes the 'tests' executable with a specific gtest filter. It also sets up the environment using 'set_property' to enable loader debug trace and specify alternative drivers.\nSOURCE: https://github.com/oneapi-src/level-zero/blob/master/test/CMakeLists.txt#_snippet_15\n\nLANGUAGE: CMake\nCODE:\n```\nadd_test(NAME tests_multi_driver_one_driver_missing_initDrivers COMMAND tests --gtest_filter=*GivenLevelZeroLoaderPresentWithMultipleDriversMissingInitDriversInOneDriverWhenCallingZeInitDriversThenExpectSuccessForZeInitDrivers)\nif (MSVC)\n  set_property(TEST tests_multi_driver_one_driver_missing_initDrivers PROPERTY ENVIRONMENT \"ZE_ENABLE_LOADER_DEBUG_TRACE=1;ZE_ENABLE_ALT_DRIVERS=${CMAKE_BINARY_DIR}/bin/$<CONFIG>/ze_null_test1.dll,${CMAKE_BINARY_DIR}/bin/$<CONFIG>/ze_null_test2.dll\")\nelse()\n  set_property(TEST tests_multi_driver_one_driver_missing_initDrivers PROPERTY ENVIRONMENT \"ZE_ENABLE_LOADER_DEBUG_TRACE=1;ZE_ENABLE_ALT_DRIVERS=${CMAKE_BINARY_DIR}/lib/libze_null_test1.so,${CMAKE_BINARY_DIR}/lib/libze_null_test2.so\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Add Level Zero Both Succeed Test with Environment Variables in CMake\nDESCRIPTION: This CMake snippet defines a test case named 'tests_both_succeed' that executes the 'tests' executable with a specific gtest filter to target a Level Zero initialization test that calls zeInit and zeInitDrivers, expecting both calls to succeed with All device types. It also sets environment variables to enable loader debug tracing and a null driver for testing purposes.\nSOURCE: https://github.com/oneapi-src/level-zero/blob/master/test/CMakeLists.txt#_snippet_9\n\nLANGUAGE: CMake\nCODE:\n```\nadd_test(NAME tests_both_succeed COMMAND tests --gtest_filter=*GivenLevelZeroLoaderPresentWhenCallingzeInitThenZeInitDriversThenBothCallsSucceedWithAllTypes*)\nset_property(TEST tests_both_succeed PROPERTY ENVIRONMENT \"ZE_ENABLE_LOADER_DEBUG_TRACE=1;ZE_ENABLE_NULL_DRIVER=1\")\n```\n\n----------------------------------------\n\nTITLE: Add Level Zero Both NPU Test with Environment Variables in CMake\nDESCRIPTION: This CMake snippet defines a test case named 'tests_both_npu' that executes the 'tests' executable with a specific gtest filter to target a Level Zero initialization test that calls zeInit and zeInitDrivers, expecting both calls to succeed with NPU device types. It also sets environment variables to enable loader debug tracing and a null driver for testing purposes.\nSOURCE: https://github.com/oneapi-src/level-zero/blob/master/test/CMakeLists.txt#_snippet_11\n\nLANGUAGE: CMake\nCODE:\n```\nadd_test(NAME tests_both_npu COMMAND tests --gtest_filter=*GivenLevelZeroLoaderPresentWhenCallingzeInitThenZeInitDriversThenBothCallsSucceedWithNPUTypes*)\nset_property(TEST tests_both_npu PROPERTY ENVIRONMENT \"ZE_ENABLE_LOADER_DEBUG_TRACE=1;ZE_ENABLE_NULL_DRIVER=1\")\n```\n\n----------------------------------------\n\nTITLE: Add Level Zero Both Init NPU Test with Environment Variables in CMake\nDESCRIPTION: This CMake snippet defines a test case named 'tests_both_init_npu' that executes the 'tests' executable with a specific gtest filter to target a Level Zero initialization test that calls zeInitDrivers and zeInit, expecting both calls to succeed with NPU device types. It also sets environment variables to enable loader debug tracing and a null driver for testing purposes.\nSOURCE: https://github.com/oneapi-src/level-zero/blob/master/test/CMakeLists.txt#_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\nadd_test(NAME tests_both_init_npu COMMAND tests --gtest_filter=*GivenLevelZeroLoaderPresentWhenCallingZeInitDriversThenzeInitThenBothCallsSucceedWithNPUTypes*)\nset_property(TEST tests_both_init_npu PROPERTY ENVIRONMENT \"ZE_ENABLE_LOADER_DEBUG_TRACE=1;ZE_ENABLE_NULL_DRIVER=1\")\n```\n\n----------------------------------------\n\nTITLE: Add Level Zero Init Any Test with Environment Variables in CMake\nDESCRIPTION: This CMake snippet defines a test case named 'tests_any' that executes the 'tests' executable with a specific gtest filter to target a Level Zero initialization test for Any device type. It also sets environment variables to enable loader debug tracing and a null driver for testing purposes.\nSOURCE: https://github.com/oneapi-src/level-zero/blob/master/test/CMakeLists.txt#_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nadd_test(NAME tests_any COMMAND tests --gtest_filter=*GivenLevelZeroLoaderPresentWhenCallingZeInitDriversWithAnyTypeWithNullDriverAcceptingAllThenExpectatLeast1Driver*)\nset_property(TEST tests_any PROPERTY ENVIRONMENT \"ZE_ENABLE_LOADER_DEBUG_TRACE=1;ZE_ENABLE_NULL_DRIVER=1\")\n```\n\n----------------------------------------\n\nTITLE: Setting Target Sources in CMake\nDESCRIPTION: This snippet demonstrates how to use the `target_sources` command in CMake to add a list of source files to a specified target. The source files include header files and C++ files related to parameter validation. The `PRIVATE` keyword indicates that these sources are only used within the target and not exposed to other targets that link against it.\nSOURCE: https://github.com/oneapi-src/level-zero/blob/master/source/layers/validation/checkers/parameter_validation/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_sources(${TARGET_NAME} \n    PRIVATE\n        ${CMAKE_CURRENT_LIST_DIR}/param_validation.h\n        ${CMAKE_CURRENT_LIST_DIR}/ze_parameter_validation.cpp\n        ${CMAKE_CURRENT_LIST_DIR}/ze_parameter_validation.h\n        ${CMAKE_CURRENT_LIST_DIR}/zes_parameter_validation.cpp\n        ${CMAKE_CURRENT_LIST_DIR}/zes_parameter_validation.h\n        ${CMAKE_CURRENT_LIST_DIR}/zet_parameter_validation.cpp    \n        ${CMAKE_CURRENT_LIST_DIR}/zet_parameter_validation.h\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Compiler Flags for Code Coverage (UNIX)\nDESCRIPTION: This snippet sets compiler flags for code coverage on UNIX-based systems, specifically disabling strict aliasing and setting visibility options to hidden. This ensures correct code coverage results are generated.\nSOURCE: https://github.com/oneapi-src/level-zero/blob/master/source/drivers/null/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nif(UNIX)\n    set(GCC_COVERAGE_COMPILE_FLAGS \"-fvisibility=hidden -fvisibility-inlines-hidden -fno-strict-aliasing\")\n    set(CMAKE_CXX_FLAGS  \"${CMAKE_CXX_FLAGS} ${GCC_COVERAGE_COMPILE_FLAGS}\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Target Sources in CMake\nDESCRIPTION: This CMake command adds source files to the specified target `${TARGET_NAME}`. It includes header files (`zel_events_checker.h`) and source files (`zel_events_checker.cpp`, `graphcycles.cc`) located in specific directories.\nSOURCE: https://github.com/oneapi-src/level-zero/blob/master/source/layers/validation/checkers/events_checker/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_sources(${TARGET_NAME} \n    PRIVATE\n        ${CMAKE_CURRENT_LIST_DIR}/zel_events_checker.h\n        ${CMAKE_CURRENT_LIST_DIR}/zel_events_checker.cpp\n\n        ${THIRD_PARTY_SOURCE_DIR}/xla/graphcycles.cc\n)\n```\n\n----------------------------------------\n\nTITLE: Include Directories with CMake\nDESCRIPTION: This CMake command adds the 'include' directory within the current source directory to the list of directories that the compiler searches for include files. This makes the headers in the specified directory available for inclusion in the project's source files. The `CMAKE_CURRENT_SOURCE_DIR` variable represents the path to the current source directory.\nSOURCE: https://github.com/oneapi-src/level-zero/blob/master/samples/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ninclude_directories(${CMAKE_CURRENT_SOURCE_DIR}/include)\n```\n\n----------------------------------------\n\nTITLE: Define Target Name in CMake\nDESCRIPTION: Sets the target name for the executable to 'zello_world'. This variable is used throughout the CMake configuration to refer to the target.\nSOURCE: https://github.com/oneapi-src/level-zero/blob/master/samples/zello_world/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(TARGET_NAME zello_world)\n```\n\n----------------------------------------\n\nTITLE: Set Compiler Flags for UNIX\nDESCRIPTION: Sets compiler flags for UNIX systems to hide symbols, improving code coverage and reducing the size of the exported symbol table.  This uses the `-fvisibility=hidden` and `-fvisibility-inlines-hidden` flags with GCC.\nSOURCE: https://github.com/oneapi-src/level-zero/blob/master/source/layers/tracing/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nif(UNIX)\n    set(GCC_COVERAGE_COMPILE_FLAGS \"-fvisibility=hidden -fvisibility-inlines-hidden\")\n    set(CMAKE_CXX_FLAGS  \"${CMAKE_CXX_FLAGS} ${GCC_COVERAGE_COMPILE_FLAGS}\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Linker Flags for MSVC in CMake\nDESCRIPTION: This snippet sets linker flags for MSVC to enable integrity checks. This helps to protect against malicious modifications of the DLL.\nSOURCE: https://github.com/oneapi-src/level-zero/blob/master/source/layers/validation/CMakeLists.txt#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nif(MSVC AND L0_DLL_INTEGRITY_CHECKS)\n    set_target_properties(ze_validation_layer PROPERTIES LINK_FLAGS \"${CMAKE_CXX_LINKER_WRAPPER_FLAG}/INTEGRITYCHECK\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Linking cfgmgr32.lib on Windows\nDESCRIPTION: This block links the `${TARGET_LOADER_NAME}` target with the `cfgmgr32.lib` library when building on Windows. This library is used for configuration manager functions.\nSOURCE: https://github.com/oneapi-src/level-zero/blob/master/source/CMakeLists.txt#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nif(WIN32)\n    target_link_libraries (${TARGET_LOADER_NAME} PRIVATE cfgmgr32.lib)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Version Resource File\nDESCRIPTION: This command configures a resource file (`ZeLoaderVersion.rc.in`) using CMake's `configure_file` command. This file is likely used to embed version information into the compiled library. The `@ONLY` option ensures that only variables explicitly defined in the input file are substituted.\nSOURCE: https://github.com/oneapi-src/level-zero/blob/master/source/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nconfigure_file(\n    ${CMAKE_CURRENT_SOURCE_DIR}/ZeLoaderVersion.rc.in\n    ${CMAKE_CURRENT_BINARY_DIR}/ZeLoaderVersion.rc\n    @ONLY)\n```"
  }
]