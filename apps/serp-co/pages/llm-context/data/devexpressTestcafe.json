[
  {
    "owner": "devexpress",
    "repo": "testcafe",
    "content": "TITLE: Example Test Case in TestCafe\nDESCRIPTION: This JavaScript snippet provides a basic example of a TestCafe test. It defines a fixture, specifies the test page URL, and then creates a test that types text into an input field, clicks a button, and asserts that the expected text appears. The test interacts with elements on the specified web page and validates the outcome.\nSOURCE: https://github.com/devexpress/testcafe/blob/master/README.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Selector } from 'testcafe'; // first import testcafe selectors\n\nfixture `Getting Started`// declare the fixture\n    .page `https://devexpress.github.io/testcafe/example`;  // specify the start page\n\n\n//then create a test and place your code within it\ntest('My first test', async t => {\n    await t\n        .typeText('#developer-name', 'John Smith')\n        .click('#submit-button')\n\n        // Use the assertion to check if actual header text equals expected text\n        .expect(Selector('#article-header').innerText).eql('Thank you, John Smith!');\n});\n```\n\n----------------------------------------\n\nTITLE: Example TestCafe .testcaferc.json Configuration (JSON5)\nDESCRIPTION: Provides a comprehensive example of a `.testcaferc.json` configuration file using JSON5 syntax. It demonstrates setting various TestCafe options like target browsers, source test files, reporter configuration, screenshot and video paths, timeouts, and hostname. This file should be placed in the project's root directory.\nSOURCE: https://github.com/devexpress/testcafe/blob/master/CHANGELOG.md#_snippet_91\n\nLANGUAGE: json5\nCODE:\n```\n{\n    \"browsers\": \"chrome\",\n    \"src\": [\"/home/user/auth-tests/fixture-1.js\", \"/home/user/mobile-tests/\"],\n    \"reporter\": {\n        \"name\": \"xunit\",\n        \"output\": \"reports/report.xml\"\n    },\n    \"screenshotPath\": \"/home/user/tests/screenshots/\",\n    \"takeScreenshotsOnFails\": true,\n    \"videoPath\": \"/home/user/tests/videos/\",\n    \"pageLoadTimeout\": 1000,\n    \"hostname\": \"host.mycorp.com\"\n    // and more\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Cookies in TestCafe Tests (TypeScript)\nDESCRIPTION: Provides a complete TestCafe test example demonstrating cookie management using `t.setCookies`, `t.getCookies`, and `t.deleteCookies`. The test sets cookies for different paths, verifies their existence and properties using assertions (`t.expect`), deletes cookies based on specific criteria (domain and path), and verifies the deletion. This showcases the cookie management API introduced in v1.19.0.\nSOURCE: https://github.com/devexpress/testcafe/blob/master/CHANGELOG.md#_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nfixture('[API] Delete Cookies')\n   .page('https://devexpress.github.io/testcafe/example/');\n\ntest('Should delete all the cookies with the specified url', async t => {\n   // Set a cookie for the examples page.\n   await t.setCookies({ name: 'apiCookie1', value: 'value1' });\n\n   // Set a cookie for the 'thank you' page.\n   await t.setCookies({\n       name:  'apiCookie2',\n       value: 'value2',\n   }, 'https://devexpress.github.io/testcafe/example/thank-you.html');\n\n   // Check the cookies.\n   let cookies = await t.getCookies();\n\n   await t\n       .expect(cookies.length).eql(2)\n       .expect(cookies[0]).contains({ name: 'apiCookie1', path: '/testcafe/example/' })\n       .expect(cookies[1]).contains({ name: 'apiCookie2', path: '/testcafe/example/thank-you.html' });\n\n    // Delete cookies from the 'thank you' page.\n    await t.deleteCookies({ domain: 'devexpress.github.io', path: '/testcafe/example/thank-you.html' });\n\n    // Check the cookies.\n    cookies = await t.getCookies();\n\n    await t\n        .expect(cookies.length).eql(1)\n        .expect(cookies[0]).contains({ name: 'apiCookie1', path: '/testcafe/example/' });\n});\n```\n\n----------------------------------------\n\nTITLE: Chaining Selectors in TestCafe\nDESCRIPTION: This code snippet demonstrates how to chain selectors in TestCafe to locate DOM elements based on hierarchy and filtering. It finds all `ul` elements, then the `label` elements within them, and then the parent `div` with the class `someClass` for each label.\nSOURCE: https://github.com/devexpress/testcafe/blob/master/CHANGELOG.md#_snippet_183\n\nLANGUAGE: javascript\nCODE:\n```\nSelector('ul').find('label').parent('div.someClass')\n```\n\n----------------------------------------\n\nTITLE: Using TestCafe Snapshot API Shorthands for Properties (JavaScript)\nDESCRIPTION: Demonstrates the concise syntax using TestCafe's snapshot API shorthands to directly access DOM element properties (like `nodeType`) from a selector promise (e.g., `await selector.nodeType`). This works for both simple selectors and selectors with parameters.\nSOURCE: https://github.com/devexpress/testcafe/blob/master/CHANGELOG.md#_snippet_197\n\nLANGUAGE: javascript\nCODE:\n```\nconst nodeType = await selector.nodeType;\n\n// or\n\nconst nodeType = await selector('someParam').nodeType;\n```\n\n----------------------------------------\n\nTITLE: Implementing Authentication User Roles in TestCafe\nDESCRIPTION: Demonstrates how to create user roles for different account types in TestCafe. This helper file defines three roles: a regular user, a Facebook user, and an admin user, each with their own login sequences.\nSOURCE: https://github.com/devexpress/testcafe/blob/master/CHANGELOG.md#_snippet_158\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Role } from 'testcafe';\n\nexport var regularAccUser = Role('http://example.com/login', async t => {\n    await t\n        .typeText('#login', 'TestUser')\n        .typeText('#password', 'testpass')\n        .click('#sign-in');\n});\n\nexport var facebookAccUser = Role('http://example.com/login', async t => {\n    await t\n        .click('#sign-in-with-facebook')\n        .typeText('#email', 'testuser@mycompany.com')\n        .typeText('#pass', 'testpass')\n        .click('#submit');\n});\n\nexport var admin = Role('http://example.com/login', async t => {\n    await t\n        .typeText('#login', 'Admin')\n        .typeText('#password', 'adminpass')\n        .click('#sign-in');\n});\n```\n\n----------------------------------------\n\nTITLE: Enabling Test Concurrency\nDESCRIPTION: These shell and javascript snippets show how to enable concurrent test execution in TestCafe. The command-line example uses the '-c' flag to specify the number of concurrent instances. The API example utilizes the '.concurrency()' method, configuring the runner to use multiple instances of each browser.\nSOURCE: https://github.com/devexpress/testcafe/blob/master/CHANGELOG.md#_snippet_140\n\nLANGUAGE: shell\nCODE:\n```\ntestcafe -c 3 chrome tests/test.js\n```\n\n----------------------------------------\n\nTITLE: Using test controller outside test code with Page Model pattern in TestCafe\nDESCRIPTION: Provides an example of how to access the test controller 't' within a page model class. This allows implementing reusable page actions, such as login, without explicitly passing 't' as a parameter by importing it directly into the page model module.\nSOURCE: https://github.com/devexpress/testcafe/blob/master/CHANGELOG.md#_snippet_169\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Selector, t } from 'testcafe';\n\nexport default class Page {\n    constructor () {\n        this.loginInput    = Selector('#login');\n        this.passwordInput = Selector('#password');\n        this.signInButton  = Selector('#sign-in-button');\n    }\n    async login () {\n        await t\n            .typeText(this.loginInput, 'MyLogin')\n            .typeText(this.passwordInput, 'Pa$$word')\n            .click(this.signInButton);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Fixture Hooks in TestCafe\nDESCRIPTION: Shows how to define fixture hooks that execute before and after all tests in a fixture. These hooks are useful for server-side setup and teardown operations that affect all tests.\nSOURCE: https://github.com/devexpress/testcafe/blob/master/CHANGELOG.md#_snippet_165\n\nLANGUAGE: javascript\nCODE:\n```\nfixture `My fixture`\n    .page `http://example.com`\n    .before( async ctx => {\n        /* fixture initialization code */\n    })\n    .after( async ctx => {\n        /* fixture finalization code */\n    });\n```\n\n----------------------------------------\n\nTITLE: Using TestCafe Shorthand Methods for Dictionary Properties (JavaScript)\nDESCRIPTION: Shows the use of dedicated shorthand methods (`getStyleProperty`, `getAttribute`, `getBoundingClientRectProperty`) for cleaner access to values within dictionary-like snapshot properties (style, attributes, boundingClientRect).\nSOURCE: https://github.com/devexpress/testcafe/blob/master/CHANGELOG.md#_snippet_199\n\nLANGUAGE: javascript\nCODE:\n```\nconst width = await selector.getStyleProperty('width');\nconst id    = await selector.getAttribute('id');\nconst left  = await selector.getBoundingClientRectProperty('left');\n```\n\n----------------------------------------\n\nTITLE: Using Initialization and Finalization Hooks in TestCafe Tests (JavaScript)\nDESCRIPTION: This snippet demonstrates the use of test.before and test.after hooks to execute setup and teardown code in TestCafe tests. The before method runs code before the test, and after runs code after test completion. Dependencies: testcafe module. Hooks receive the test controller (t) for side effect operations, such as resource management or test context configuration.\nSOURCE: https://github.com/devexpress/testcafe/blob/master/CHANGELOG.md#_snippet_176\n\nLANGUAGE: JavaScript\nCODE:\n```\ntest\n    .before( async t => {\n        /* test initialization code */\n    })\n    ('My Test', async t => {\n        /* test code */\n    })\n    .after( async t => {\n        /* test finalization code */\n    });\n```\n\n----------------------------------------\n\nTITLE: Debugging TestCafe Tests on the Client Side\nDESCRIPTION: Demonstrates how to use the t.debug() method to pause test execution and inspect the page state using browser developer tools. The debugging interface allows step-by-step execution of test actions.\nSOURCE: https://github.com/devexpress/testcafe/blob/master/CHANGELOG.md#_snippet_161\n\nLANGUAGE: javascript\nCODE:\n```\nfixture `My fixture`\n    .page `https://devexpress.github.io/testcafe/example`;\n\ntest('My test', async t => {\n    await t\n        .debug()\n        .setNativeDialogHandler(() => true)\n        .click('#populate')\n        .click('#submit-button');\n});\n```\n\n----------------------------------------\n\nTITLE: Enabling Full-Page Screenshots via TestCafe Runner API (JavaScript)\nDESCRIPTION: Illustrates configuring the TestCafe test runner programmatically to take full-page screenshots by default. This is achieved by passing an options object with `fullPage: true` to the `runner.screenshots` method. Requires TestCafe v1.6.0 or later.\nSOURCE: https://github.com/devexpress/testcafe/blob/master/CHANGELOG.md#_snippet_55\n\nLANGUAGE: javascript\nCODE:\n```\nrunner.screenshots({\n    fullPage: true\n});\n```\n\n----------------------------------------\n\nTITLE: Enabling Full-Page Screenshots via TestCafe CLI (Shell)\nDESCRIPTION: Demonstrates enabling the full-page screenshot feature globally for a test run using the TestCafe command-line interface. The `-s` (or `--screenshots`) flag is used with the `fullPage=true` option to ensure all screenshots capture the entire page content. Requires TestCafe v1.6.0 or later.\nSOURCE: https://github.com/devexpress/testcafe/blob/master/CHANGELOG.md#_snippet_54\n\nLANGUAGE: shell\nCODE:\n```\ntestcafe chrome test.js -s fullPage=true\n```\n\n----------------------------------------\n\nTITLE: Opening a child window using t.openWindow\nDESCRIPTION: This JavaScript code demonstrates how to open a child window using the t.openWindow method in TestCafe. It imports Selector and ClientFunction from 'testcafe', defines a fixture and a test, opens a new window using t.openWindow, and then verifies the URL of the new window using t.eval and t.expect. This example illustrates how to interact with and validate content within a newly opened window.\nSOURCE: https://github.com/devexpress/testcafe/blob/master/CHANGELOG.md#_snippet_46\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Selector, ClientFunction } from 'testcafe';\n\nfixture `Test page`\n    .page('https://devexpress.github.io/testcafe/example/');\n\ntest('Open a new window', async t => {\n    await t.openWindow('http://example.com');\n\n    const url = await t.eval(() => document.documentURI);\n\n    await t.expect(url).eql('http://example.com');\n});\n```\n\n----------------------------------------\n\nTITLE: Setting TypeScript Config Path via Runner API\nDESCRIPTION: This snippet illustrates how to set the TypeScript configuration path using the `runner.tsConfigPath` method in the TestCafe API.  This method takes the path to the TypeScript configuration file as an argument, and the runner will use this config file for TypeScript compilation during the test run. The config file path is \"path/to/config.json\".\nSOURCE: https://github.com/devexpress/testcafe/blob/master/CHANGELOG.md#_snippet_38\n\nLANGUAGE: javascript\nCODE:\n```\nrunner.tsConfigPath('path/to/config.json');\n```\n\n----------------------------------------\n\nTITLE: Switching between windows using t.switchToWindow\nDESCRIPTION: This JavaScript code demonstrates how to switch between open windows using the t.switchToWindow method in TestCafe. It defines a fixture and a test, opens two pop-up windows, switches to the initial window and then to a specific window based on its URL host, and verifies the URL of each window using t.eval and t.expect. This example showcases how to manage and interact with multiple windows during a test.\nSOURCE: https://github.com/devexpress/testcafe/blob/master/CHANGELOG.md#_snippet_47\n\nLANGUAGE: JavaScript\nCODE:\n```\nfixture `Example page`\n    .page('https://example.com');\n\ntest('Switch to a specific window', async t => {\n    const initialWindow = await t.getCurrentWindow();\n    const popUp1        = await t.openWindow('https://devexpress.com');\n    const popUp2        = await t.openWindow('https://github.com');\n\n    await t.switchToWindow(initialWindow);\n\n    const url = t.eval(() => document.documentURI);\n\n    await t.expect(url).eql('https://example.com/');\n\n    await t\n        .switchToWindow(w => w.url.host === 'github.com')\n        .expect(url).eql('https://github.com');\n});\n```\n\n----------------------------------------\n\nTITLE: Sharing variables between fixture hooks and test code in TestCafe\nDESCRIPTION: Demonstrates how to share values and objects between fixture hooks (before and after) and test functions using the fixture context object 'ctx' and accessing it in test code via 't.fixtureCtx'. Includes assigning to 'ctx' in hooks and reading/modifying it within tests.\nSOURCE: https://github.com/devexpress/testcafe/blob/master/CHANGELOG.md#_snippet_166\n\nLANGUAGE: JavaScript\nCODE:\n```\nfixture `Fixture1`\n    .before(async ctx  => {\n        ctx.someProp = 123;\n    })\n    .after(async ctx  => {\n        console.log(ctx.newProp); // > abc\n    });\n\ntest('Test1', async t => {\n    console.log(t.fixtureCtx.someProp); // > 123\n});\n\ntest('Test2', async t => {\n    t.fixtureCtx.newProp = 'abc';\n});\n```\n\n----------------------------------------\n\nTITLE: Specifying Metadata for TestCafe Tests (JavaScript)\nDESCRIPTION: Illustrates how to attach metadata to a TestCafe test using the chainable `.meta()` method before defining the test details. Metadata can be specified using single key-value calls or an object, allowing for custom data points in test reports.\nSOURCE: https://github.com/devexpress/testcafe/blob/master/CHANGELOG.md#_snippet_115\n\nLANGUAGE: JavaScript\nCODE:\n```\ntest\n    .meta('testID', 't-0005')\n    .meta({ severity: 'critical', testedAPIVersion: '1.0' })\n    ('MyTest', async t => { /* ... */});\n```\n\n----------------------------------------\n\nTITLE: Stopping TestCafe Run on First Fail via API (JavaScript)\nDESCRIPTION: Demonstrates how to enable the 'stop on first fail' behavior programmatically using the TestCafe Runner API. The `stopOnFirstFail` option is set to `true` in the configuration object passed to the `runner.run()` method. This causes the test execution to terminate as soon as any test fails. Available since TestCafe v0.23.0.\nSOURCE: https://github.com/devexpress/testcafe/blob/master/CHANGELOG.md#_snippet_103\n\nLANGUAGE: js\nCODE:\n```\nrunner.run({ stopOnFirstFail: true })\n```\n\n----------------------------------------\n\nTITLE: Filtering TestCafe Tests/Fixtures via API Metadata (JavaScript)\nDESCRIPTION: Illustrates filtering tests programmatically using the TestCafe Runner API's `filter` method. The provided callback function receives test and fixture metadata (`testMeta`, `fixtureMeta`) and returns `true` only for tests where `testMeta.mobile` is 'true' and `fixtureMeta.env` is 'staging'. This allows for complex conditional logic. Introduced in TestCafe v0.23.1.\nSOURCE: https://github.com/devexpress/testcafe/blob/master/CHANGELOG.md#_snippet_99\n\nLANGUAGE: js\nCODE:\n```\nrunner.filter((testName, fixtureName, fixturePath, testMeta, fixtureMeta) => {\n    return testMeta.mobile === 'true' &&\n        fixtureMeta.env === 'staging';\n});\n```\n\n----------------------------------------\n\nTITLE: Performing API Request and Assertion in TestCafe (JavaScript)\nDESCRIPTION: Demonstrates using the TestCafe `t.request` action to send an HTTP GET request to a specified URL and retrieve the response body. It then uses `t.expect` to assert that the response body contains the expected string 'Hello World'. This showcases the API testing capabilities introduced in TestCafe v1.20.0.\nSOURCE: https://github.com/devexpress/testcafe/blob/master/CHANGELOG.md#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconst responseBody = await t.request(`http://localhost:3000/helloworld`).body;\n\nt.expect(responseBody).contains('Hello World') // true\n```\n\n----------------------------------------\n\nTITLE: Taking Screenshot of a Specific Element (JavaScript)\nDESCRIPTION: Provides an example of using the `t.takeElementScreenshot` action to capture a screenshot of a particular page element identified by a Selector. The action takes the target element selector and the desired file path for the screenshot as arguments.\nSOURCE: https://github.com/devexpress/testcafe/blob/master/CHANGELOG.md#_snippet_117\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Selector } from 'testcafe';\n\nfixture `My fixture`\n    .page `http://devexpress.github.io/testcafe/example/`;\n\ntest('Take a screenshot of a fieldset', async t => {\n    await t\n        .click('#reusing-js-code')\n        .click('#continuous-integration-embedding')\n        .takeElementScreenshot(Selector('fieldset').nth(1), 'my-fixture/important-features.png');\n});\n```\n\n----------------------------------------\n\nTITLE: Closing windows using t.closeWindow\nDESCRIPTION: This JavaScript code demonstrates how to close windows using the t.closeWindow method in TestCafe. It defines two tests: one that closes the current window and another that closes a specific window. It opens a new window using t.openWindow, closes it using t.closeWindow (either without arguments or with a window descriptor), and then verifies the URL of the remaining window using t.eval and t.expect.\nSOURCE: https://github.com/devexpress/testcafe/blob/master/CHANGELOG.md#_snippet_48\n\nLANGUAGE: JavaScript\nCODE:\n```\nfixture `Example page`\n    .page('http://www.example.com');\n\ntest('Close the current window', async t => {\n    const window1 = await t.openWindow('http://devexpress.com');\n\n    await t.closeWindow();\n\n    const url = await t.eval(() => document.documentURI);\n\n    await t.expect(url).eql('http://www.example.com/');\n});\n\ntest('Close a specific window', async t => {\n    const window1 = await t.openWindow('http://devexpress.com');\n\n    await t.closeWindow(window1);\n});\n```\n\n----------------------------------------\n\nTITLE: Running TestCafe with Internet Proxy via API in JavaScript\nDESCRIPTION: Explains how to programmatically set a proxy (with optional authentication) for TestCafe runs using runner.useProxy. Assumes usage in a TestCafe runner script. Input includes proxy credentials and address string. Output is all network traffic routed via the proxy during test execution.\nSOURCE: https://github.com/devexpress/testcafe/blob/master/CHANGELOG.md#_snippet_152\n\nLANGUAGE: JavaScript\nCODE:\n```\nrunner.useProxy('username:password@proxy.mycorp.com');\n```\n\n----------------------------------------\n\nTITLE: Automating user actions in multiple windows\nDESCRIPTION: This JavaScript code demonstrates how TestCafe can automate user actions in multiple windows. It imports the Selector from 'testcafe', defines a fixture and a test, and uses the click and typeText methods to interact with elements within a pop-up window. It shows how TestCafe automatically switches to a newly opened window to continue test actions.\nSOURCE: https://github.com/devexpress/testcafe/blob/master/CHANGELOG.md#_snippet_45\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Selector } from 'testcafe';\n\nfixture `Login page`\n    .page('https://login.wrike.com/login/');\n\nconst googleButton = Selector('div.login-panel-footer__login-with > button');\n\ntest('Login via Google', async t => {\n    await t\n        .click(googleButton)\n        .typeText('input[type=email]', 'This text will be entered inside the pop-up');\n});\n```\n\n----------------------------------------\n\nTITLE: Disabling Page Caching Globally with Runner API - JavaScript\nDESCRIPTION: Applies the 'disablePageCaching' option at the root of the runner.run method's options object, preventing cache usage during the entire test session. Requires an instantiated runner from TestCafe's API. Useful for test environments sensitive to authentication issues triggered by cache behavior.\nSOURCE: https://github.com/devexpress/testcafe/blob/master/CHANGELOG.md#_snippet_69\n\nLANGUAGE: js\nCODE:\n```\nrunner.run({ disablePageCaching: true });\n```\n\n----------------------------------------\n\nTITLE: Disabling Page Caching Via Configuration File - JSON\nDESCRIPTION: Specifies the 'disablePageCaching' property in the TestCafe configuration JSON for global effect. Should be placed at the root level in the configuration file. Requires TestCafe version supporting this property. All tests will execute with caching disabled, mitigating login/session problems.\nSOURCE: https://github.com/devexpress/testcafe/blob/master/CHANGELOG.md#_snippet_70\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"disablePageCaching\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling TestCafe Syntax Validation via API (JavaScript)\nDESCRIPTION: Shows how to disable TestCafe's test syntax validation programmatically using the Runner API. The `disableTestSyntaxValidation` option is set to `true` within the `runner.run()` method's configuration object. This permits running dynamically generated or imported tests without explicit `fixture` or `test` calls in the source file. Introduced in TestCafe v0.23.1.\nSOURCE: https://github.com/devexpress/testcafe/blob/master/CHANGELOG.md#_snippet_101\n\nLANGUAGE: js\nCODE:\n```\nrunner.run({ disableTestSyntaxValidation: true })\n```\n\n----------------------------------------\n\nTITLE: Accessing Shadow DOM Elements with Selector API\nDESCRIPTION: This TestCafe test case demonstrates how to access and interact with elements within a Shadow DOM using the `selector.shadowRoot()` method. It first locates a shadow host element, then accesses its shadow root, and finally selects a paragraph within the shadow tree to assert its text content.\nSOURCE: https://github.com/devexpress/testcafe/blob/master/CHANGELOG.md#_snippet_44\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Selector } from 'testcafe'\n\nfixture `Target Shadow DOM elements`\n    .page('https://devexpress.github.io/testcafe/example')\n\ntest('Get text within shadow tree', async t => {\n    const shadowRoot = Selector('div').withAttribute('id', 'shadow-host').shadowRoot();\n    const paragraph  = shadowRoot.child('p');\n\n    await t.expect(paragraph.textContent).eql('This paragraph is in the shadow tree');\n});\n```\n\n----------------------------------------\n\nTITLE: Disabling TestCafe Syntax Validation via CLI (Shell)\nDESCRIPTION: Demonstrates running TestCafe tests in Safari while disabling the default syntax validation using the `--disable-test-syntax-validation` flag. This allows running tests from files that don't explicitly contain `fixture` or `test` directives, useful for dynamically loaded or generated tests. Available since TestCafe v0.23.1.\nSOURCE: https://github.com/devexpress/testcafe/blob/master/CHANGELOG.md#_snippet_100\n\nLANGUAGE: sh\nCODE:\n```\ntestcafe safari test.js --disable-test-syntax-validation\n```\n\n----------------------------------------\n\nTITLE: Overriding Fixture Default Page on a Per-Test Basis in TestCafe (JavaScript)\nDESCRIPTION: This snippet shows how to override the default fixture's page URL for individual tests by chaining .page to the test declaration in TestCafe. The first test uses the fixture's page, while the second starts at a custom page. Dependencies: testcafe module. Parameters include the URL string for the page method. Only works for compatible TestCafe versions supporting per-test page assignment.\nSOURCE: https://github.com/devexpress/testcafe/blob/master/CHANGELOG.md#_snippet_175\n\nLANGUAGE: JavaScript\nCODE:\n```\nfixture `MyFixture`\n    .page `http://devexpress.github.io/testcafe/example`;\n\ntest('Test1', async t => {\n    // Starts at http://devexpress.github.io/testcafe/example\n});\n\ntest\n    .page `http://devexpress.github.io/testcafe/blog/`\n    ('Test2', async t => {\n        // Starts at http://devexpress.github.io/testcafe/blog/\n    });\n```\n\n----------------------------------------\n\nTITLE: Disabling Screenshots using Runner API - JavaScript\nDESCRIPTION: Utilizes the JavaScript TestCafe runner’s run method with the 'disableScreenshots' option set to true to turn off screenshot functionality for the entire test run. Requires a valid runner object. No screenshots are taken regardless of t.takeScreenshot calls or test failures.\nSOURCE: https://github.com/devexpress/testcafe/blob/master/CHANGELOG.md#_snippet_64\n\nLANGUAGE: js\nCODE:\n```\nrunner.run({ disableScreenshots: true });\n```\n\n----------------------------------------\n\nTITLE: Sharing Variables Between Hooks and Test Code with t.ctx in TestCafe (JavaScript)\nDESCRIPTION: This code shows how to share state between fixture hooks, test hooks, and test code by using the t.ctx property in TestCafe. The example sets a property in a beforeEach hook, accesses it in the test, and confirms its persistence in the after hook. Dependencies: testcafe module. The shared context allows for flexible inter-test variable management without polluting global scope.\nSOURCE: https://github.com/devexpress/testcafe/blob/master/CHANGELOG.md#_snippet_177\n\nLANGUAGE: JavaScript\nCODE:\n```\nfixture `Fixture1`\n    .beforeEach(async t  => {\n        t.ctx.someProp = 123;\n    });\n\ntest\n    ('Test1', async t => {\n        console.log(t.ctx.someProp); // > 123\n    })\n    .after(async t => {\n        console.log(t.ctx.someProp); // > 123\n    });\n```\n\n----------------------------------------\n\nTITLE: Filtering Selector's Matched Set by Attribute in TestCafe JavaScript\nDESCRIPTION: Presents the withAttribute method to filter DOM elements possessing a specific attribute with a given value, then selects the nth matching instance. Requires the 'testcafe' Selector API. Inputs are attribute name and value; output is a Selector for the targeted element, constrained by attribute filtering.\nSOURCE: https://github.com/devexpress/testcafe/blob/master/CHANGELOG.md#_snippet_155\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst el = Selector('div').withAttribute('attributeName', 'value').nth(2);\n```\n\n----------------------------------------\n\nTITLE: Taking a Screenshot in TestCafe Test - JavaScript\nDESCRIPTION: Defines a basic TestCafe fixture and test which navigates to a specified URL and captures a screenshot using t.takeScreenshot(). No screenshot path needs to be set in the runner or config file - defaults will be used if unspecified. Dependencies include TestCafe installed in the environment. The test expects no input and outputs a screenshot image.\nSOURCE: https://github.com/devexpress/testcafe/blob/master/CHANGELOG.md#_snippet_61\n\nLANGUAGE: js\nCODE:\n```\nfixture `My fixture`\n    .page `https://example.com`;\n\ntest('Take a screenshot', async t => {\n    await t.takeScreenshot();\n});\n```\n\n----------------------------------------\n\nTITLE: Disabling Screenshots in Configuration File - JSON\nDESCRIPTION: Demonstrates how to disable all screenshot functionality via the configuration file 'disableScreenshots' key. Place this boolean flag at the root of the configuration JSON. Valid for environments using TestCafe v1.6.0 or above. Prevents screenshots from being created during any test run.\nSOURCE: https://github.com/devexpress/testcafe/blob/master/CHANGELOG.md#_snippet_65\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"disableScreenshots\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Using User Roles in TestCafe Tests\nDESCRIPTION: Shows how to use predefined user roles in test scenarios that require multiple user accounts. The test switches between a regular user and admin to verify different UI elements and permissions.\nSOURCE: https://github.com/devexpress/testcafe/blob/master/CHANGELOG.md#_snippet_159\n\nLANGUAGE: javascript\nCODE:\n```\nimport { regularAccUser, admin } from './helper';\nimport { Selector } from 'testcafe';\n\nconst entry        = Selector('#entry');\nconst removeButton = Selector('#remove-entry');\n\nfixture `My Fixture`\n    .page `http://example.com`;\n\ntest('test that involves two users', async t => {\n    await t\n        .useRole(regularAccUser)\n        .expect(entry.exists).ok()\n        .expect(removeButton.visible).notOk()\n        .useRole(admin)\n        .expect(removeButton.visible).ok()\n        .click(removeButton)\n        .expect(entry.exists).notOk()\n});\n```\n\n----------------------------------------\n\nTITLE: Conditionally Running Assertions Based on Browser Name in TestCafe (JavaScript)\nDESCRIPTION: Demonstrates using the `t.browser.name` property within a TestCafe test to check if the current browser is 'Chrome'. If it's not Chrome, it asserts that a specific element indicating 'Browser not supported' is visible. This requires TestCafe v1.7.0 or later.\nSOURCE: https://github.com/devexpress/testcafe/blob/master/CHANGELOG.md#_snippet_51\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Selector } from 'testcafe';\n\nfixture `My fixture`\n    .page `https://example.com`;\n\ntest('My test', async t => {\n    if (t.browser.name !== 'Chrome')\n        await t.expect(Selector('div').withText('Browser not supported').visible).ok();\n});\n```\n\n----------------------------------------\n\nTITLE: Selecting React Components Using testcafe-react-selectors in JavaScript\nDESCRIPTION: Illustrates how to use the testcafe-react-selectors plugin to select React components by name and access nested elements. Requires installing the 'testcafe-react-selectors' package. Input is the component name (optionally using CSS-like selectors), and output is a Selector instance targeting React components in the page's DOM tree.\nSOURCE: https://github.com/devexpress/testcafe/blob/master/CHANGELOG.md#_snippet_146\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport ReactSelector from 'testcafe-react-selector';\n\nconst TodoList         = ReactSelector('TodoApp TodoList');\nconst itemsCountStatus = ReactSelector('TodoApp div');\nconst itemsCount       = ReactSelector('TodoApp div span');\n```\n\n----------------------------------------\n\nTITLE: Running TestCafe tests in Firefox with user profile using JavaScript\nDESCRIPTION: This JavaScript snippet configures and runs TestCafe tests using Firefox with the user profile option ':userProfile'. It uses the TestCafe runner API to specify the test source and browser before running the tests.\nSOURCE: https://github.com/devexpress/testcafe/blob/master/CHANGELOG.md#_snippet_127\n\nLANGUAGE: JavaScript\nCODE:\n```\nrunner\n    .src('tests/fixture1.js')\n    .browsers('firefox:userProfile')\n    .run();\n```\n\n----------------------------------------\n\nTITLE: Running TestCafe in Firefox with a user profile using Shell command\nDESCRIPTION: This shell command runs TestCafe tests using Firefox with the ':userProfile' browser option, which opens Firefox with the user's default profile to preserve settings and extensions. It requires TestCafe installation and targets 'tests/test.js'.\nSOURCE: https://github.com/devexpress/testcafe/blob/master/CHANGELOG.md#_snippet_126\n\nLANGUAGE: Shell\nCODE:\n```\ntestcafe firefox:userProfile tests/test.js\n```\n\n----------------------------------------\n\nTITLE: Using Client Functions as Assertion Values in TestCafe (JavaScript)\nDESCRIPTION: This snippet illustrates passing a ClientFunction as the actual value to expect in a TestCafe assertion, leveraging the Smart Assertion Query Mechanism to obtain up-to-date client-side values. The example retrieves window.location as a string and asserts its value. Dependencies: testcafe module. Useful for custom, dynamic browser state assertions.\nSOURCE: https://github.com/devexpress/testcafe/blob/master/CHANGELOG.md#_snippet_182\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { ClientFunction } from 'testcafe';\n\nconst windowLocation = ClientFunction(() => window.location.toString());\n\nfixture `My Fixture`\n    .page `http://www.example.com`;\n\ntest('My Test', async t => {\n    await t.expect(windowLocation()).eql('http://www.example.com');\n});\n```\n\n----------------------------------------\n\nTITLE: Filtering TestCafe Tests via CLI Metadata (Shell)\nDESCRIPTION: Demonstrates running TestCafe tests in Chrome, filtering them based on metadata using the `--test-meta` command-line flag. It specifies that only tests with `device=mobile` AND `env=production` metadata should be executed. This requires TestCafe v0.23.1 or later.\nSOURCE: https://github.com/devexpress/testcafe/blob/master/CHANGELOG.md#_snippet_97\n\nLANGUAGE: sh\nCODE:\n```\ntestcafe chrome my-tests --test-meta device=mobile,env=production\n```\n\n----------------------------------------\n\nTITLE: Executing TestCafe test runner with headless Firefox in JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to configure and run a TestCafe test runner programmatically with the Firefox headless browser. It requires the TestCafe runner API and specifies the test source file and browser. The .run() method returns a promise resolved with the count of failed tests.\nSOURCE: https://github.com/devexpress/testcafe/blob/master/CHANGELOG.md#_snippet_121\n\nLANGUAGE: JavaScript\nCODE:\n```\nrunner\n    .src('tests/sample-fixture.js')\n    .browsers('firefox:headless')\n    .run()\n    .then(failedCount => {\n        // ...\n    });\n```\n\n----------------------------------------\n\nTITLE: Skipping and Running Specific Tests and Fixtures in TestCafe (JavaScript)\nDESCRIPTION: These examples illustrate the use of fixture.skip, test.skip, fixture.only, and test.only to control which tests and fixtures run. All tests in a skipped fixture are omitted, while the only method ensures only designated tests run. Dependencies: testcafe module. This approach is useful for focusing on or ignoring tests during suites, and is limited to compatible TestCafe versions supporting these APIs.\nSOURCE: https://github.com/devexpress/testcafe/blob/master/CHANGELOG.md#_snippet_174\n\nLANGUAGE: JavaScript\nCODE:\n```\nfixture.skip `Fixture1`; // All tests in this fixture will be skipped\n\ntest('Fixture1Test1', () => {});\ntest('Fixture1Test2', () => {});\n\nfixture `Fixture2`;\n\ntest('Fixture2Test1', () => {});\ntest.skip('Fixture2Test2', () => {}); // This test will be skipped\ntest('Fixture2Test3', () => {});\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nfixture.only `Fixture1`;\ntest('Fixture1Test1', () => {});\ntest('Fixture1Test2', () => {});\n\nfixture `Fixture2`;\ntest('Fixture2Test1', () => {});\ntest.only('Fixture2Test2', () => {});\ntest('Fixture2Test3', () => {});\n\n// Only tests in Fixture1 and the Fixture2Test2 test will run\n```\n\n----------------------------------------\n\nTITLE: Defining a Relative Role URL with TestCafe in JavaScript\nDESCRIPTION: This snippet demonstrates how to define a TestCafe Role object with a relative URL as the login page. It requires setting the baseUrl configuration or CLI option to properly resolve relative paths. The Role constructor accepts a URL string and an asynchronous callback to perform login actions. It helps model authenticated user scenarios in tests by reusing login logic.\nSOURCE: https://github.com/devexpress/testcafe/blob/master/CHANGELOG.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Role } from 'testcafe';\n\nconst userOne = Role('./login', async t => {\n    /* log-in actions go here */\n});\n```\n\n----------------------------------------\n\nTITLE: Running TestCafe in Chrome Headless Mode via Shell\nDESCRIPTION: This command-line example shows how to execute TestCafe tests in Google Chrome's headless mode using the :headless postfix. It requires that TestCafe is installed globally or locally, and assumes the existence of a test file ('tests/sample-fixture.js'). The core parameter is the 'chrome:headless' browser alias. The command outputs test results in the terminal; headless mode does not display a UI shell. Limitations include requiring Chrome version 59+ and appropriate permissions to run headless.\nSOURCE: https://github.com/devexpress/testcafe/blob/master/CHANGELOG.md#_snippet_143\n\nLANGUAGE: Shell\nCODE:\n```\ntestcafe \"chrome:headless\" tests/sample-fixture.js\n```\n\n----------------------------------------\n\nTITLE: Filtering Elements by Visibility with TestCafe\nDESCRIPTION: This JavaScript code snippet demonstrates how to filter elements based on their visibility using TestCafe's `filterVisible` and `filterHidden` methods. It imports the `Selector` from TestCafe, defines a fixture and a test case, and uses selectors to find hidden and visible input elements. The test then asserts the number of hidden and visible elements.\nSOURCE: https://github.com/devexpress/testcafe/blob/master/CHANGELOG.md#_snippet_118\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Selector } from 'testcafe';\n\nfixture `My fixture`\n    .page `http://devexpress.github.io/testcafe/example/`;\n\ntest('Filter visible and hidden elements', async t => {\n    const inputs        = Selector('input');\n    const hiddenInput   = inputs.filterHidden();\n    const visibleInputs = inputs.filterVisible();\n\n    await t\n        .expect(hiddenInput.count).eql(1)\n        .expect(visibleInputs.count).eql(11);\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Execution Timeout via JSON\nDESCRIPTION: This JSON snippet represents a configuration file example for setting timeouts within a TestCafe project. It utilizes `runExecutionTimeout` and `testExecutionTimeout` properties.  The values are in milliseconds. Dependencies: A TestCafe configuration file.\nSOURCE: https://github.com/devexpress/testcafe/blob/master/CHANGELOG.md#_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"runExecutionTimeout\": 180000,\n    \"testExecutionTimeout\": 180000\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Base URL in TestCafe (JSON)\nDESCRIPTION: Shows how to define a global `baseUrl` property within a TestCafe configuration file (likely `.testcaferc.json`). This allows subsequent test and fixture page URLs to be specified relative to this base URL, simplifying test setup as introduced in v1.20.0.\nSOURCE: https://github.com/devexpress/testcafe/blob/master/CHANGELOG.md#_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n    \"baseUrl\": \"https://devexpress.github.io/testcafe\"\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Methods to TestCafe Selectors\nDESCRIPTION: Demonstrates how to extend selectors with custom methods that execute on the client side. This example adds a getCellText method to a table selector for easier access to cell content.\nSOURCE: https://github.com/devexpress/testcafe/blob/master/CHANGELOG.md#_snippet_163\n\nLANGUAGE: javascript\nCODE:\n```\nconst myTable = Selector('.my-table').addCustomMethods({\n    getCellText: (table, rowIndex, columnIndex) =>\n        table.rows[rowIndex].cells[columnIndex].innerText\n});\n\nawait t.expect(myTable.getCellText(1, 1)).contains('hey!');\n```\n\n----------------------------------------\n\nTITLE: Using Browser Engine Info in TestCafe `beforeEach` Hook (JavaScript)\nDESCRIPTION: Shows how to use the `t.browser.engine.name` property inside a fixture's `beforeEach` hook to apply conditional logic before each test runs. In this example, if the browser engine is not 'Blink', the hook returns early, potentially skipping setup steps specific to Blink-based browsers. Requires TestCafe v1.7.0 or later.\nSOURCE: https://github.com/devexpress/testcafe/blob/master/CHANGELOG.md#_snippet_52\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Selector } from 'testcafe';\n\nfixture `My fixture`\n    .page `https://example.com`\n    .beforeEach(async t => {\n        if (t.browser.engine.name === 'Blink')\n            return;\n        // ...\n    });\n```\n\n----------------------------------------\n\nTITLE: Running Tests with Electron\nDESCRIPTION: These examples show how to launch TestCafe tests against an Electron application via the command line and the programmatic API. It uses the 'electron' browser name followed by the application path, including the application's executable file or application directory.\nSOURCE: https://github.com/devexpress/testcafe/blob/master/CHANGELOG.md#_snippet_138\n\nLANGUAGE: shell\nCODE:\n```\ntestcafe \"electron:/home/user/electron-app\" \"path/to/test/file.js\"\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript Config Path in TestCafe Config File\nDESCRIPTION: This JSON snippet shows how to configure the TypeScript configuration path directly within a TestCafe configuration file.  The `tsConfigPath` property specifies the path to the TypeScript configuration file. TestCafe will utilize this config file when compiling TypeScript tests. The config file path is \"path/to/config.json\".\nSOURCE: https://github.com/devexpress/testcafe/blob/master/CHANGELOG.md#_snippet_39\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"tsConfigPath\": \"path/to/config.json\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Fixture Page Relative to Base URL in TestCafe (JavaScript)\nDESCRIPTION: Illustrates how to define a fixture's starting page URL relative to a pre-configured `baseUrl`. The `.page` directive uses './example', which resolves to the full URL 'https://devexpress.github.io/testcafe/example' when a `baseUrl` (like the one set in the JSON example) is defined.\nSOURCE: https://github.com/devexpress/testcafe/blob/master/CHANGELOG.md#_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nfixture`Test structure`\n    .page`./example`; // starts at https://devexpress.github.io/testcafe/example\n```\n\n----------------------------------------\n\nTITLE: Enabling debug mode on test failure using Shell command\nDESCRIPTION: This shell command runs TestCafe tests in Chrome and enables automatic debug mode activation when a test fails by passing the '--debug-on-fail' flag. This pauses test execution for inspection and troubleshooting.\nSOURCE: https://github.com/devexpress/testcafe/blob/master/CHANGELOG.md#_snippet_124\n\nLANGUAGE: Shell\nCODE:\n```\ntestcafe chrome tests/fixture.js --debug-on-fail\n```\n\n----------------------------------------\n\nTITLE: Accessing Warnings in Custom TestCafe Reporter (JavaScript)\nDESCRIPTION: Illustrates how to access warnings generated during a test run within the `reportTestDone` method of a custom TestCafe reporter. The `testRunInfo` object passed to the method now contains a `warnings` array, which can be iterated over to report or log these warnings.\nSOURCE: https://github.com/devexpress/testcafe/blob/master/CHANGELOG.md#_snippet_94\n\nLANGUAGE: javascript\nCODE:\n```\nasync reportTestDone (name, testRunInfo, meta) {\n    const warnings    = testRunInfo.warnings;\n    const hasWarnings = !!warnings.length;\n\n    if(hasWarnings) {\n        this.newline()\n            .write('Warnings:');\n\n        warnings.forEach(warning => {\n            this.newline()\n                .write(warning);\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Compiler Options in TestCafe Config File\nDESCRIPTION: This JSON snippet demonstrates how to configure TypeScript compiler options within a TestCafe configuration file using the `compilerOptions` property.  This property takes an object containing compiler-specific configurations.  In this example, the `experimentalDecorators` option is set to `true` for the TypeScript compiler.\nSOURCE: https://github.com/devexpress/testcafe/blob/master/CHANGELOG.md#_snippet_42\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"compilerOptions\": {\n        \"typescript\": {\n            \"experimentalDecorators\": true\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Node Index and Predicate Dependencies in TestCafe Selectors (JavaScript)\nDESCRIPTION: These snippets demonstrate advanced TestCafe selector predicate usage, including accessing a node's index and original selector node, and providing external dependencies using the dependencies parameter. They enable flexible DOM querying logic based on node position and context. Dependencies: testcafe module and optionally ClientFunction utility. Inputs are predicate functions and dependency objects.\nSOURCE: https://github.com/devexpress/testcafe/blob/master/CHANGELOG.md#_snippet_179\n\nLANGUAGE: JavaScript\nCODE:\n```\nSelector('ul').find((node, idx, originNode) => {\n    // node === the <ul>'s descendant node\n    // idx === index of the current <ul>'s descendant node\n    // originNode === the <ul> element\n});\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst isNodeOk = ClientFunction(node => { /*...*/ });\nconst flag = getFlag();\n\nSelector('ul').child(node => {\n    return isNodeOk(node) && flag;\n}, { isNodeOk, flag });\n```\n\n----------------------------------------\n\nTITLE: Accessing Test Counts in Custom TestCafe Reporter (JavaScript)\nDESCRIPTION: Shows how to use the `result` object provided to the `reportTaskDone` method in a custom TestCafe reporter. This object contains counts of passed (`result.passedCount`), failed (`result.failedCount`), and skipped (`result.skippedCount`) tests for the entire task, allowing for summary reporting.\nSOURCE: https://github.com/devexpress/testcafe/blob/master/CHANGELOG.md#_snippet_95\n\nLANGUAGE: javascript\nCODE:\n```\nasync reportTaskDone (endTime, passed, warnings, result) {\n    this.write(`Testing finished!`)\n        .newline()\n        .write(`Passed: ${result.passedCount}`)\n        .newline()\n        .write(`Failed: ${result.failedCount}`)\n        .newline();\n        .write(`Skipped: ${result.skippedCount}`)\n        .newline();\n}\n```\n\n----------------------------------------\n\nTITLE: Setting test execution speed from code in TestCafe\nDESCRIPTION: Illustrates how to configure the overall test execution speed dynamically during a test run using 't.setTestSpeed()'. This setting influences subsequent actions and can be changed at any point within the test, overriding the default or fixture-wide speed.\nSOURCE: https://github.com/devexpress/testcafe/blob/master/CHANGELOG.md#_snippet_168\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Selector } from 'testcafe';\n\nfixture `Test Speed`\n    .page `http://devexpress.github.io/testcafe/example/`;\n\nconst nameInput = Selector('#developer-name');\n\n\n test(`Test Speed`, async t => {\n    await t\n        .typeText(nameInput, 'Peter')\n        .setTestSpeed(0.1)\n        .typeText(nameInput, ' Parker');\n});\n```\n\n----------------------------------------\n\nTITLE: Taking a Single Full-Page Screenshot in TestCafe Test (JavaScript)\nDESCRIPTION: Demonstrates how to capture a single full-page screenshot within a TestCafe test using the `t.takeScreenshot` action. The `fullPage: true` option is passed directly to the action to override any global settings and capture the entire page content for this specific instance. Requires TestCafe v1.6.0 or later.\nSOURCE: https://github.com/devexpress/testcafe/blob/master/CHANGELOG.md#_snippet_57\n\nLANGUAGE: javascript\nCODE:\n```\nt.takeScreenshot({\n    fullPage: true\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Test Execution Timeout via CLI in TestCafe\nDESCRIPTION: This snippet demonstrates how to set the test execution timeout and the run execution timeout using the TestCafe command-line interface.  The `test-execution-timeout` and `run-execution-timeout` options are set, providing the duration in milliseconds (180000ms = 3 minutes).  Dependencies: TestCafe CLI.\nSOURCE: https://github.com/devexpress/testcafe/blob/master/CHANGELOG.md#_snippet_15\n\nLANGUAGE: sh\nCODE:\n```\ntestcafe chrome my-tests --test-execution-timeout 180000\ntestcafe chrome my-tests --run-execution-timeout 180000\n```\n\n----------------------------------------\n\nTITLE: Specifying Compiler Options via Command Line\nDESCRIPTION: This command demonstrates how to specify TypeScript compiler options directly via the `--compiler-options` command-line flag in TestCafe.  This eliminates the need for a separate configuration file.  In this example, the `experimentalDecorators` option is set to `true` for the TypeScript compiler.\nSOURCE: https://github.com/devexpress/testcafe/blob/master/CHANGELOG.md#_snippet_40\n\nLANGUAGE: shell\nCODE:\n```\ntestcafe chrome my-tests --compiler-options typescript.experimentalDecorators=true\n```\n\n----------------------------------------\n\nTITLE: Running TestCafe with Default Screenshot Directory - Shell\nDESCRIPTION: Demonstrates running TestCafe with screenshots saved in the default directory. No additional screenshot parameters are required. Screenshots are triggered via actions in the test code. Requires 'chrome' browser and a test file as input. Outputs screenshots to './screenshots' if no path is specified.\nSOURCE: https://github.com/devexpress/testcafe/blob/master/CHANGELOG.md#_snippet_60\n\nLANGUAGE: sh\nCODE:\n```\ntestcafe chrome test.js\n```\n\n----------------------------------------\n\nTITLE: Setting Test Timeouts with TestCafe\nDESCRIPTION: This code demonstrates how to set timeouts for a TestCafe test using the `test.timeouts` method. It shows setting the pageLoadTimeout to 2000ms. The test navigates to 'http://devexpress.github.io/testcafe/example'.\nSOURCE: https://github.com/devexpress/testcafe/blob/master/CHANGELOG.md#_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nfixture`Setting Timeouts`\n    .page`http://devexpress.github.io/testcafe/example`;\n\ntest\n    .timeouts({\n        pageLoadTimeout: 2000\n    })\n    ('My test', async t => {\n        //test actions\n    })\n\n```\n\n----------------------------------------\n\nTITLE: Enabling ECMAScript Module Support with TestCafe\nDESCRIPTION: This code snippet details the command-line flag to enable ECMAScript module support (`--experimental-esm`) when running TestCafe, along with project requirements such as setting the 'type' key in package.json to 'module' or using '.mjs' file extensions for test files. It underscores the dependency on Node.js version 16 or higher.\nSOURCE: https://github.com/devexpress/testcafe/blob/master/CHANGELOG.md#_snippet_10\n\nLANGUAGE: Shell Script\nCODE:\n```\ntestcafe chrome test.js --experimental-esm\n```\n\n----------------------------------------\n\nTITLE: Running TestCafe with ESM Module Support\nDESCRIPTION: This shell command demonstrates how to run TestCafe tests with ESM module support enabled using the `--esm` flag.  This command is relevant for TestCafe version 2.5.0 and higher. It allows the user to import modules that do not support CommonJS, assuming `test.js` is the test file and chrome is the browser.\nSOURCE: https://github.com/devexpress/testcafe/blob/master/CHANGELOG.md#_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\ntestcafe chrome test.js --esm\n```\n\n----------------------------------------\n\nTITLE: Configuring Screenshot Path Patterns in TestCafe Using JavaScript API\nDESCRIPTION: This snippet configures the TestCafe test runner to take screenshots with a dynamic path pattern. It shows how to specify a base screenshot path, enable taking screenshots on test failures, and define a path pattern with placeholders like '${TEST_INDEX}', '${OS}', '${BROWSER}', and '${FILE_INDEX}'. These placeholders get replaced with actual values during test execution, enabling organized and descriptive screenshot storage. This snippet uses the runner.screenshots method from the JavaScript API and requires TestCafe runner initialization.\nSOURCE: https://github.com/devexpress/testcafe/blob/master/CHANGELOG.md#_snippet_110\n\nLANGUAGE: javascript\nCODE:\n```\nrunner.screenshots({\n    path: 'reports/screenshots/',\n    takeOnFails: true,\n    pathPattern: '${TEST_INDEX}/${OS}/${BROWSER}-v${BROWSER_VERSION}/${FILE_INDEX}.png'\n});\n```\n\n----------------------------------------\n\nTITLE: Inserting text with one keystroke using t.typeText with 'paste' option in TestCafe\nDESCRIPTION: Demonstrates using the 'paste' option in 't.typeText' to insert text in a single keystroke, simulating a paste operation. This can be useful for quickly inserting large strings or special characters.\nSOURCE: https://github.com/devexpress/testcafe/blob/master/CHANGELOG.md#_snippet_170\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Selector } from 'testcafe';\n\nfixture `My fixture`\n    .page `http://devexpress.github.io/testcafe/example/`;\n\nconst nameInput = Selector('#developer-name');\n\n test(`My test`, async t => {\n    await t\n        .typeText(nameInput, 'Peter')\n        .typeText(nameInput, ' Parker', { paste: true });\n});\n```\n\n----------------------------------------\n\nTITLE: Dispatching DOM Events in TestCafe\nDESCRIPTION: This JavaScript snippet demonstrates the use of the `t.dispatchEvent` method to trigger DOM events, specifically `touchstart`.  It's used for actions not directly supported by TestCafe. It requires the target element and event name as arguments. Dependencies: TestCafe and a browser with event constructors.\nSOURCE: https://github.com/devexpress/testcafe/blob/master/CHANGELOG.md#_snippet_19\n\nLANGUAGE: js\nCODE:\n```\nawait t.dispatchEvent('#button', 'touchstart',  { eventConstructor: 'TouchEvent' });\n```\n\n----------------------------------------\n\nTITLE: Using prevSibling and nextSibling DOM search methods in TestCafe Selectors\nDESCRIPTION: Introduces the 'prevSibling' and 'nextSibling' methods for selectors, enabling traversal among sibling elements before or after the current selector in the DOM tree. Useful for complex element relationships in page DOMs.\nSOURCE: https://github.com/devexpress/testcafe/blob/master/CHANGELOG.md#_snippet_171\n\nLANGUAGE: JavaScript\nCODE:\n```\nSelector('li .active').prevSibling(2);\nSelector('li').nextSibling('.checked');\n```\n\n----------------------------------------\n\nTITLE: Configuring TestCafe Proxy Bypass (JavaScript)\nDESCRIPTION: Illustrates how to configure proxy settings programmatically using the TestCafe runner API. The `useProxy` method is called with the proxy address and an array of strings listing the resources for which the proxy should be bypassed.\nSOURCE: https://github.com/devexpress/testcafe/blob/master/CHANGELOG.md#_snippet_113\n\nLANGUAGE: JavaScript\nCODE:\n```\nrunner.useProxy('172.0.10.10:8080', ['localhost:8080', 'internal-resource.corp.mycompany.com']);\n```\n\n----------------------------------------\n\nTITLE: Configuring Request Timeouts with JavaScript API\nDESCRIPTION: JavaScript code that demonstrates how to set page and AJAX request timeouts using the TestCafe JavaScript API in the runner.run method.\nSOURCE: https://github.com/devexpress/testcafe/blob/master/CHANGELOG.md#_snippet_30\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst createTestCafe = require('testcafe');\n\nconst testcafe = await createTestCafe('localhost', 1337, 1338);\n\ntry {\n    const runner = testcafe.createRunner();\n\n    const failed = await runner.run({\n        pageRequestTimeout: 8000,\n        ajaxRequestTimeout: 40000\n    });\n\n    console.log('Tests failed: ' + failed);\n}\nfinally {\n    await testcafe.close();\n}\n```\n\n----------------------------------------\n\nTITLE: Setting page load timeout per test using TestCafe test API in JavaScript\nDESCRIPTION: This JavaScript snippet defines a TestCafe test fixture and test case where the page load timeout is customized to 0 for a single test using the 'setPageLoadTimeout' method. The test then navigates to the specified URL requiring this custom timeout.\nSOURCE: https://github.com/devexpress/testcafe/blob/master/CHANGELOG.md#_snippet_130\n\nLANGUAGE: JavaScript\nCODE:\n```\nfixture `Page load timeout`\n    .page `http://devexpress.github.io/testcafe/example/`;\n\ntest(`Page load timeout`, async t => {\n    await t\n        .setPageLoadTimeout(0)\n        .navigateTo('http://devexpress.github.io/testcafe/');\n});\n```\n\n----------------------------------------\n\nTITLE: Using TestCafe t.maximizeWindow Action (JavaScript)\nDESCRIPTION: Example TestCafe test demonstrating the `t.maximizeWindow()` action. This action is called on the test controller (`t`) to maximize the browser window during test execution, often used before checking layout-dependent element visibility.\nSOURCE: https://github.com/devexpress/testcafe/blob/master/CHANGELOG.md#_snippet_203\n\nLANGUAGE: javascript\nCODE:\n```\nimport { expect } from 'chai';\nimport { Selector } from 'testcafe';\n\nconst menu = Selector('#side-menu');\n\nfixture `My fixture`\n    .page `http://www.example.com/`;\n\ntest('Side menu is displayed in full screen', async t => {\n    await t.maximizeWindow();\n\n    expect(await menu.visible).to.be.ok;\n});\n```\n\n----------------------------------------\n\nTITLE: Specifying Metadata for TestCafe Fixtures (JavaScript)\nDESCRIPTION: Demonstrates how to attach metadata to a TestCafe fixture using the chainable `.meta()` method. Metadata can be added as single key-value pairs or as an object, and is accessible by custom reporters for enhanced test reporting.\nSOURCE: https://github.com/devexpress/testcafe/blob/master/CHANGELOG.md#_snippet_114\n\nLANGUAGE: JavaScript\nCODE:\n```\nfixture `My Fixture`\n    .meta('fixtureID', 'f-0001')\n    .meta({ author: 'John', creationDate: '05/03/2018' });\n```\n\n----------------------------------------\n\nTITLE: Writing TestCafe Tests in CoffeeScript - CoffeeScript\nDESCRIPTION: This snippet demonstrates how to write TestCafe tests directly in CoffeeScript without manual compilation or configuration. It imports the Selector from TestCafe, defines a test fixture, creates a selector for the developer name input, and runs asynchronous text entry and assertion steps. Dependencies: TestCafe and CoffeeScript support. The test requires a browser environment and operates on a public demo page. Input includes typed strings in the input, and output is an assertion that checks the value of the input.\nSOURCE: https://github.com/devexpress/testcafe/blob/master/CHANGELOG.md#_snippet_104\n\nLANGUAGE: CoffeeScript\nCODE:\n```\nimport { Selector } from 'testcafe'\n\nfixture 'CoffeeScript Example'\n    .page 'https://devexpress.github.io/testcafe/example/'\n\nnameInput = Selector '#developer-name'\n\ntest 'Test', (t) =>\n    await t\n        .typeText(nameInput, 'Peter')\n        .typeText(nameInput, 'Paker', { replace: true })\n        .typeText(nameInput, 'r', { caretPos: 2 })\n        .expect(nameInput.value).eql 'Parker';\n```\n\n----------------------------------------\n\nTITLE: Asynchronous Request Hook Methods in TestCafe\nDESCRIPTION: This code illustrates how to define a custom HTTP request hook with asynchronous onRequest and onResponse methods in TestCafe. Using async functions allows performing asynchronous operations such as file system access, network requests, or spawning processes within the hooks. Dependencies include node's 'fs' and 'child_process' modules, and the TestCafe API.\nSOURCE: https://github.com/devexpress/testcafe/blob/master/CHANGELOG.md#_snippet_86\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { RequestHook } from 'testcafe';\n\nclass MyRequestHook extends RequestHook {\n    constructor (requestFilterRules, responseEventConfigureOpts) {\n        super(requestFilterRules, responseEventConfigureOpts);\n        // ...\n    }\n\n    async onRequest (event) {\n        // Asynchronous operation, e.g., reading a file or network request\n    }\n\n    async onResponse (event) {\n        // Asynchronous response processing\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Writing Test Reports to File via TestCafe Runner API (JavaScript)\nDESCRIPTION: Demonstrates the simplified API introduced in TestCafe v1.0.0 for specifying a report output file directly. Instead of creating a write stream, you can pass the desired reporter name (e.g., 'json') and the output file path (e.g., 'reports/report.json') directly to the `runner.reporter()` method.\nSOURCE: https://github.com/devexpress/testcafe/blob/master/CHANGELOG.md#_snippet_96\n\nLANGUAGE: javascript\nCODE:\n```\nrunner.reporter('json', 'reports/report.json');\n```\n\n----------------------------------------\n\nTITLE: Injecting Client Scripts TestCafe Test API\nDESCRIPTION: Injects specified client-side JavaScript files into pages visited during a specific test using the TestCafe Test API. This method scopes the script injection narrowly to the current test.\nSOURCE: https://github.com/devexpress/testcafe/blob/master/CHANGELOG.md#_snippet_75\n\nLANGUAGE: JavaScript\nCODE:\n```\ntest\n    ('My test', async t => { /* ... */ })\n    .clientScripts('mockDate.js', 'scripts/react-helpers.js');\n```\n\n----------------------------------------\n\nTITLE: Using t.report Method in TestCafe\nDESCRIPTION: This code snippet demonstrates the usage of the `t.report()` method in TestCafe, which allows passing custom data to the reporter. The code passes a string, an object, and an array as arguments to the `t.report` function.  The reporter, such as the `spec` reporter, will display this data after test completion.\nSOURCE: https://github.com/devexpress/testcafe/blob/master/CHANGELOG.md#_snippet_7\n\nLANGUAGE: js\nCODE:\n```\nawait\n    t.report( \n        'text', \n        {'key': 'value'},\n        ['arrayItem1', 'arrayItem2']\n    );\n```\n\n----------------------------------------\n\nTITLE: Asserting Regular Expression Matches in TestCafe (JavaScript)\nDESCRIPTION: These code examples use the match and notMatch assertion methods to verify string compliance with a regular expression in TestCafe. The match method checks that a string matches a regular expression, while notMatch ensures it does not. Dependencies: testcafe module. Inputs are strings and RegExp patterns; outputs are assertion pass/fail. Supports string, regexp arguments and custom assertion messages.\nSOURCE: https://github.com/devexpress/testcafe/blob/master/CHANGELOG.md#_snippet_178\n\nLANGUAGE: JavaScript\nCODE:\n```\nawait t.expect('foobar').match(/^f/, 'this assertion passes');\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nawait t.expect('foobar').notMatch(/^b/, 'this assertion passes');\n```\n\n----------------------------------------\n\nTITLE: Injecting Client Scripts TestCafe CLI\nDESCRIPTION: Injects specified client-side JavaScript files into tested pages using the TestCafe command line interface. This allows adding helper functions, mocking APIs, or importing modules globally for tests.\nSOURCE: https://github.com/devexpress/testcafe/blob/master/CHANGELOG.md#_snippet_71\n\nLANGUAGE: Shell\nCODE:\n```\ntestcafe chrome test.js --client-scripts mockDate.js,assets/react-helpers.js\n```\n\n----------------------------------------\n\nTITLE: Running TestCafe tests with multiple reporters programmatically in JavaScript\nDESCRIPTION: This JavaScript example shows how to use the TestCafe runner API to run tests with two reporters: 'spec' (which outputs results to the console) and 'json' (which writes to a file stream). It requires the 'fs' module to create a writable file stream for the JSON report and handles closing the stream after test completion.\nSOURCE: https://github.com/devexpress/testcafe/blob/master/CHANGELOG.md#_snippet_123\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst stream = fs.createWriteStream('report.json');\n\nrunner\n    .src('tests/sample-fixture.js')\n    .browsers('chrome')\n    .reporter('spec')\n    .reporter('json', stream)\n    .run()\n    .then(failedCount => {\n        stream.end();\n    });\n```\n\n----------------------------------------\n\nTITLE: Setting Browser Initialization Timeout with JavaScript API\nDESCRIPTION: JavaScript code snippet showing how to set the browser initialization timeout using the TestCafe runner.run method.\nSOURCE: https://github.com/devexpress/testcafe/blob/master/CHANGELOG.md#_snippet_33\n\nLANGUAGE: JavaScript\nCODE:\n```\nrunner.run({ \"browserInitTimeout\": 180000 })\n```\n\n----------------------------------------\n\nTITLE: Enabling Debugging Mode in TestCafe via API Option in JavaScript\nDESCRIPTION: Shows how to enable debugging mode programmatically using the debugMode: true option in runner.run within a TestCafe automation script. Requires using the TestCafe runner API. Input is an options object, and output is a paused session for debugging before test actions.\nSOURCE: https://github.com/devexpress/testcafe/blob/master/CHANGELOG.md#_snippet_154\n\nLANGUAGE: JavaScript\nCODE:\n```\nrunner.run({ debugMode: true });\n```\n\n----------------------------------------\n\nTITLE: Filtering by Negative Index in TestCafe Selectors (JavaScript)\nDESCRIPTION: This example illustrates how to select elements at a negative index in a TestCafe selector, effectively counting from the end of the matched set. The selector.child(-1) method fetches the last child element with the given class. Dependencies: testcafe module. Negative indices are interpreted in reverse from the last element.\nSOURCE: https://github.com/devexpress/testcafe/blob/master/CHANGELOG.md#_snippet_180\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst lastChild = Selector('.someClass').child(-1);\n```\n\n----------------------------------------\n\nTITLE: Running TestCafe with Official Docker Image Using Shell Commands\nDESCRIPTION: Illustrates the process of acquiring and running TestCafe in a Docker container with Firefox pre-installed. Requires Docker installed on the system. First pulls the official image, then mounts a directory and runs tests using a shell command. Inputs are directory paths and shell commands; output is test execution in containerized browser environments.\nSOURCE: https://github.com/devexpress/testcafe/blob/master/CHANGELOG.md#_snippet_150\n\nLANGUAGE: Shell\nCODE:\n```\ndocker pull testcafe/testcafe\ndocker run -v //user/tests:/tests -it testcafe/testcafe firefox tests/**/*.js\n```\n\n----------------------------------------\n\nTITLE: Enabling Test Page Retry with JavaScript API\nDESCRIPTION: JavaScript code that demonstrates how to enable test page retry functionality when creating a TestCafe instance.\nSOURCE: https://github.com/devexpress/testcafe/blob/master/CHANGELOG.md#_snippet_35\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst createTestCafe = require('testcafe');\n\nconst testcafe = await createTestCafe('localhost', 1337, 1338, retryTestPages)\n```\n\n----------------------------------------\n\nTITLE: Getting Snapshot of nth element in TestCafe\nDESCRIPTION: This snippet shows how to get a snapshot of a specific (nth) element matched by a TestCafe selector using the `nth` filter. It selects the fifth element (index 4) from the set and obtains a snapshot of its current state.\nSOURCE: https://github.com/devexpress/testcafe/blob/master/CHANGELOG.md#_snippet_187\n\nLANGUAGE: javascript\nCODE:\n```\n// Returns snapshot for the fourth element in the set\nconst snapshot = await Selector('ul').find('label').parent('div.someClass').nth(4)();\n```\n\n----------------------------------------\n\nTITLE: Controlling TestCafe Execution Speed via CLI (Shell)\nDESCRIPTION: Shows how to adjust the test execution speed using the `--speed` flag in the TestCafe command-line interface. The speed factor ranges from `1` (fastest, default) down to `0.01` (slowest).\nSOURCE: https://github.com/devexpress/testcafe/blob/master/CHANGELOG.md#_snippet_201\n\nLANGUAGE: sh\nCODE:\n```\ntestcafe chrome my-tests --speed 0.1\n```\n\n----------------------------------------\n\nTITLE: Getting Snapshot of first matching element in TestCafe\nDESCRIPTION: This code snippet illustrates how to get a snapshot of the first element matched by a TestCafe selector. It retrieves a snapshot of the first element that matches the chained selector, representing its state at a specific point in time.\nSOURCE: https://github.com/devexpress/testcafe/blob/master/CHANGELOG.md#_snippet_185\n\nLANGUAGE: javascript\nCODE:\n```\n// Returns snapshot for the first element in the set\nconst snapshot = await Selector('ul').find('label').parent('div.someClass')();\n```\n\n----------------------------------------\n\nTITLE: Initializing RequestLogger with Async Predicate in JavaScript\nDESCRIPTION: Example of how to initialize a RequestLogger with an asynchronous predicate function that filters requests based on the result of an async function.\nSOURCE: https://github.com/devexpress/testcafe/blob/master/CHANGELOG.md#_snippet_27\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst logger = RequestLogger(async request => {\n    return await myAsyncFunction();\n});\n```\n\n----------------------------------------\n\nTITLE: Disabling Concurrency on a Per-Fixture Basis Using TestCafe in JavaScript\nDESCRIPTION: This snippet illustrates how to disable concurrent test execution for an individual fixture using the fixture method disableConcurrency. This method overrides the global concurrency setting, which is useful when tests must run sequentially to avoid order-dependent issues. The fixture specifies the page URL and disables concurrency by appending `.disableConcurrency` in the chain.\nSOURCE: https://github.com/devexpress/testcafe/blob/master/CHANGELOG.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nfixture`Fixture.disableConcurrency`\n    .page`https://devexpress.github.io/testcafe/example/`\n    .disableConcurrency;\n```\n\n----------------------------------------\n\nTITLE: Running TestCafe with Proxy Bypass (Shell)\nDESCRIPTION: Demonstrates how to execute TestCafe tests from the command line, specifying a proxy server and providing a comma-separated list of hostnames or IP addresses that should bypass the proxy. This uses the `--proxy` and `--proxy-bypass` command-line flags.\nSOURCE: https://github.com/devexpress/testcafe/blob/master/CHANGELOG.md#_snippet_112\n\nLANGUAGE: Shell\nCODE:\n```\ntestcafe chrome my-tests/**/*.js --proxy proxy.corp.mycompany.com --proxy-bypass localhost:8080,internal-resource.corp.mycompany.com\n```\n\n----------------------------------------\n\nTITLE: Scrolling Element Into View with TestCafe\nDESCRIPTION: This code shows how to use `t.scrollIntoView` action to scroll an element into the visible area in TestCafe. It imports Selector, defines a fixture and test, and scrolls the element identified by the '#target' selector into view. The page is navigated to 'http://www.example.com/'.\nSOURCE: https://github.com/devexpress/testcafe/blob/master/CHANGELOG.md#_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\n import { Selector } from 'testcafe';\n\n fixture `Scroll Actions`\n     .page `http://www.example.com/`;\n\n test('Scroll element into view', async t => {\n     const target = Selector('#target')\n\n     await t\n         .scrollIntoView(target)\n });\n \n```\n\n----------------------------------------\n\nTITLE: Running TestCafe with Internet Proxy Support via Shell Command\nDESCRIPTION: Shows how to utilize a proxy server for Internet access during TestCafe runs via the --proxy CLI option. Requires TestCafe installed globally. Inputs are browser name(s), proxy server address (with optional port), and test path. Ensures outbound HTTP traffic is routed through the specified proxy.\nSOURCE: https://github.com/devexpress/testcafe/blob/master/CHANGELOG.md#_snippet_151\n\nLANGUAGE: Shell\nCODE:\n```\ntestcafe chrome my-tests/**/*.js --proxy 172.0.10.10:8080\n```\n\n----------------------------------------\n\nTITLE: Disabling Page Caching Globally using TestCafe CLI - Shell\nDESCRIPTION: Demonstrates run of TestCafe with the --disable-page-caching option to turn off caching for all tests and fixtures. This is especially helpful when authentication or login pages rely on cache control. Takes browser and test file(s) as input. Requires TestCafe version supporting this CLI flag.\nSOURCE: https://github.com/devexpress/testcafe/blob/master/CHANGELOG.md#_snippet_68\n\nLANGUAGE: sh\nCODE:\n```\ntestcafe chrome my-tests --disable-page-caching\n```\n\n----------------------------------------\n\nTITLE: Run TestCafe tests\nDESCRIPTION: Runs the TestCafe tests using the 'test' script defined in the 'package.json' file. This command executes the test suite and reports the results.\nSOURCE: https://github.com/devexpress/testcafe/blob/master/examples/using-assertions/README.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\nnpm test\n```\n\n----------------------------------------\n\nTITLE: Configuring Request Timeouts in JSON Configuration\nDESCRIPTION: JSON configuration example that sets page request timeout to 8 seconds and AJAX request timeout to 40 seconds in TestCafe.\nSOURCE: https://github.com/devexpress/testcafe/blob/master/CHANGELOG.md#_snippet_29\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"pageRequestTimeout\": 8000,\n    \"ajaxRequestTimeout\": 40000\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing reportTestStart in TestCafe Custom Reporter (JavaScript)\nDESCRIPTION: This JavaScript code snippet demonstrates how to override the optional `reportTestStart` method within a custom TestCafe reporter. The method fires when a test begins and receives the test `name` and `meta` object as arguments. This example shows logging the start of a test along with its severity from the metadata. Implementing this method allows for custom actions at the start of each test, useful for integration with third-party reporting frameworks like Allure.\nSOURCE: https://github.com/devexpress/testcafe/blob/master/CHANGELOG.md#_snippet_84\n\nLANGUAGE: javascript\nCODE:\n```\nasync reportTestStart (name, meta) {\n    this.write(`Starting test: ${name} (${meta.severity})`)\n        .newline();\n}\n```\n\n----------------------------------------\n\nTITLE: Selecting Vue Components Using testcafe-vue-selectors in JavaScript\nDESCRIPTION: Demonstrates usage of the testcafe-vue-selectors plugin to select root and nested Vue.js components in TestCafe tests. Requires installation of the 'testcafe-vue-selectors' package. Selectors can be empty for root or specify component names for targeting, returning Selector instances for Vue components.\nSOURCE: https://github.com/devexpress/testcafe/blob/master/CHANGELOG.md#_snippet_148\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport VueSelector from 'testcafe-vue-selectors';\n\nconst rootVue   = VueSelector();\nconst todoInput = VueSelector('todo-input');\nconst todoItem  = VueSelector('todo-list todo-item');\n```\n\n----------------------------------------\n\nTITLE: Getting property of first matching element in TestCafe\nDESCRIPTION: This code shows how to retrieve a property, such as 'id', from the first element in a set matched by a TestCafe selector chain.  The selector finds the first element in the DOM matching the specified criteria, and its 'id' attribute is extracted.\nSOURCE: https://github.com/devexpress/testcafe/blob/master/CHANGELOG.md#_snippet_184\n\nLANGUAGE: javascript\nCODE:\n```\n// Returns id of the first element in the set\nconst id = await Selector('ul').find('label').parent('div.someClass').id;\n```\n\n----------------------------------------\n\nTITLE: Configuring Request Timeouts in CLI\nDESCRIPTION: Shell command that demonstrates how to set AJAX and page request timeouts using the TestCafe command line interface.\nSOURCE: https://github.com/devexpress/testcafe/blob/master/CHANGELOG.md#_snippet_28\n\nLANGUAGE: Shell\nCODE:\n```\ntestcafe chrome my-tests --ajax-request-timeout 40000 --page-request-timeout 8000\n```\n\n----------------------------------------\n\nTITLE: Scrolling Webpage by Pixels with TestCafe\nDESCRIPTION: This code demonstrates how to scroll the webpage by a specified number of pixels using the `t.scrollBy` action in TestCafe. The example scrolls the webpage 500px to the right and 200px up.  The page is navigated to 'http://example.com'.\nSOURCE: https://github.com/devexpress/testcafe/blob/master/CHANGELOG.md#_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\n fixture`Scroll Action`\n     .page('http://example.com');\n\n test('Scroll the webpage', async t => {\n     await t\n         .scrollBy(500, -200)\n });\n \n```\n\n----------------------------------------\n\nTITLE: Using TestCafe hasClass Shorthand Method (JavaScript)\nDESCRIPTION: Demonstrates the `hasClass` shorthand method provided by TestCafe Selectors. This allows for a simple and direct way to check if a selected element has a specific CSS class (e.g., 'foo').\nSOURCE: https://github.com/devexpress/testcafe/blob/master/CHANGELOG.md#_snippet_200\n\nLANGUAGE: javascript\nCODE:\n```\nif (await selector.hasClass('foo')) {\n    //...\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Browser Initialization Timeout in JSON Configuration\nDESCRIPTION: JSON configuration example that sets the browser initialization timeout to 3 minutes (180000 ms) in TestCafe.\nSOURCE: https://github.com/devexpress/testcafe/blob/master/CHANGELOG.md#_snippet_32\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"browserInitTimeout\": 180000\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying TypeScript Config Path via Command Line\nDESCRIPTION: This command demonstrates how to specify the path to a TypeScript configuration file using the `--ts-config-path` command-line flag in TestCafe. It runs tests in Chrome and uses the specified configuration file for TypeScript compilation. The config file path is \"path/to/config.json\".\nSOURCE: https://github.com/devexpress/testcafe/blob/master/CHANGELOG.md#_snippet_37\n\nLANGUAGE: shell\nCODE:\n```\ntestcafe chrome my-tests --ts-config-path path/to/config.json\n```\n\n----------------------------------------\n\nTITLE: Responding to Geolocation Requests with t.setNativeDialogHandler in TestCafe JavaScript\nDESCRIPTION: This snippet demonstrates usage of TestCafe's t.setNativeDialogHandler method to simulate responses to geolocation permission requests during a test. Returning an object with coordinates triggers success callbacks, while returning an Error instance blocks the request. The snippet shows switching between allowing and blocking geolocation and invoking UI actions to demonstrate geolocation handling in test workflows. Key dependencies include asynchronous test functions and event handling.\nSOURCE: https://github.com/devexpress/testcafe/blob/master/CHANGELOG.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Test\n test('Switch from \"allow\" to \"block\"', async t => {\n  await t\n    .setNativeDialogHandler((type) => {\n        if (type === 'geolocation')\n            return { timestamp: 12356, accuracy: 20, coords: {latitude: '34.15321262322903', longitude: '-118.25543996370723'} }; // Passes this data to geolocation requests\n        return null;\n    })\n    .click('#buttonGeo')\n    .setNativeDialogHandler((type) => {\n        if (type !== 'geolocation')\n            return null;\n    \n        const err = new Error('Some error');\n    \n        err.code = 1;\n    \n        return err; // Blocks geolocation requests\n    })\n    .click('#buttonGeo');\n});\n```\n\n----------------------------------------\n\nTITLE: Specifying Negative Offset Cursor Positions in TestCafe Actions (JavaScript)\nDESCRIPTION: This code demonstrates how to click a target element at a relative position offset from its bottom-right corner using negative offsetX and offsetY values in TestCafe. This is helpful for precision UI testing scenarios. Dependencies: testcafe module. Parameters are element selector and offset values; negative offsets are measured from the bottom-right edge.\nSOURCE: https://github.com/devexpress/testcafe/blob/master/CHANGELOG.md#_snippet_181\n\nLANGUAGE: JavaScript\nCODE:\n```\nawait t.click('#element', { offsetX: -10, offsetY: -30 });\n```\n\n----------------------------------------\n\nTITLE: Chaining Selectors with withText in TestCafe JavaScript\nDESCRIPTION: Demonstrates the new behavior of chaining the withText method in TestCafe, where each call now compounds the search criteria to require the element's text to contain all specified substrings, rather than overriding previous calls. Requires the 'testcafe' module and at least v0.14.0 for correct behavior. This approach is limited to string matching and works with Selector queries for page elements.\nSOURCE: https://github.com/devexpress/testcafe/blob/master/CHANGELOG.md#_snippet_145\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst el = Selector('div').withText('This is').withText('my element');\n```\n\n----------------------------------------\n\nTITLE: Accessing Dictionary Snapshot Properties (Pre-Shorthand Method)\nDESCRIPTION: Illustrates accessing dictionary-like properties (e.g., `style`) using shorthand properties before dedicated shorthand methods. This required awaiting the property access and using bracket notation, often needing parentheses for clarity.\nSOURCE: https://github.com/devexpress/testcafe/blob/master/CHANGELOG.md#_snippet_198\n\nLANGUAGE: javascript\nCODE:\n```\nconst width = (await selector.style)['width'];\n```\n\n----------------------------------------\n\nTITLE: Accessing Snapshot Properties (Pre-Shorthand Method 1)\nDESCRIPTION: Illustrates the older method of accessing a DOM element's property (e.g., `nodeType`) from a TestCafe Selector's snapshot before snapshot API shorthands were introduced. This required first awaiting the selector to get the snapshot object and then accessing the property.\nSOURCE: https://github.com/devexpress/testcafe/blob/master/CHANGELOG.md#_snippet_195\n\nLANGUAGE: javascript\nCODE:\n```\nconst snapshot = await selector();\nconst nodeType = snapshot.nodeType;\n```\n\n----------------------------------------\n\nTITLE: Configuring individual test action speed in TestCafe\nDESCRIPTION: Shows how to specify the 'speed' option for individual test actions using 't' API, allowing control over the speed of specific interactions such as typing. The override rules specify that test action speed settings take precedence over the overall test speed if both are set.\nSOURCE: https://github.com/devexpress/testcafe/blob/master/CHANGELOG.md#_snippet_167\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Selector } from 'testcafe';\n\nconst nameInput = Selector('#developer-name');\n\nfixture `My Fixture`\n    .page `http://devexpress.github.io/testcafe/example/`\n\n\n test('My Test', async t => {\n    await t\n        .typeText(nameInput, 'Peter')\n        .typeText(nameInput, ' Parker', { speed: 0.1 });\n});\n```\n\n----------------------------------------\n\nTITLE: Using preserveUrl Option with TestCafe User Roles in JavaScript\nDESCRIPTION: Shows how to use the preserveUrl option when creating a TestCafe Role, ensuring the browser returns to the redirected URL upon subsequent role activations. Depends on the testcafe Role API. Inputs include a URL, async authentication routine, and option object; output is a Role instance configured for URL preservation.\nSOURCE: https://github.com/devexpress/testcafe/blob/master/CHANGELOG.md#_snippet_157\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst regularUser = Role(url, async t => {\n    /* authentication code */\n}, { preserveUrl: true })\n```\n\n----------------------------------------\n\nTITLE: Finding Elements by Exact Text with TestCafe\nDESCRIPTION: This JavaScript code snippet showcases how to find elements by exact text matching using TestCafe's `withExactText` method. It imports the `Selector` from TestCafe, defines a fixture and a test case, and utilizes selectors to find labels with specific text. The test then asserts that elements with the exact text and containing text exist.\nSOURCE: https://github.com/devexpress/testcafe/blob/master/CHANGELOG.md#_snippet_119\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Selector } from 'testcafe';\n\nfixture `My fixture`\n    .page `http://devexpress.github.io/testcafe/example/`;\n\ntest('Search by exact text', async t => {\n    const labels       = Selector('label');\n    const winLabel     = labels.withExactText('Windows');\n    const reusingLabel = labels.withText('JavaScript');\n\n    await t\n        .expect(winLabel.exists).ok()\n        .expect(reusingLabel.exists).ok();\n});\n```\n\n----------------------------------------\n\nTITLE: Selector calls allowed outside test context in TestCafe\nDESCRIPTION: This snippet demonstrates that unawaited parametrized selector calls are now allowed outside the test context. This is useful when building page models outside of test execution.\nSOURCE: https://github.com/devexpress/testcafe/blob/master/CHANGELOG.md#_snippet_189\n\nLANGUAGE: javascript\nCODE:\n```\nconst selector = Selector(arg => /* selector code */);\nconst selector2 = selector('someArg').find('span'); // <-- doesn't throw anymore\n```\n\n----------------------------------------\n\nTITLE: Install npm dependencies\nDESCRIPTION: Installs the necessary npm packages defined in the 'package.json' file for the TestCafe assertion examples. This command ensures that all project dependencies are available before running the tests.\nSOURCE: https://github.com/devexpress/testcafe/blob/master/examples/using-assertions/README.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Properties to Selector Element State in TestCafe (JavaScript)\nDESCRIPTION: This code demonstrates how to extend the state of DOM elements selected with TestCafe Selectors by using the addCust.htmlOMProperties method. It imports the Selector API from testcafe, creates a selector for the 'label' element, adds a custom property for innerHTML extraction, and uses an assertion to verify the content. Dependencies: testcafe module. The example expects the presence of a particular HTML string inside the label and shows how to inject runtime properties for testing. Only works with compatible element structures.\nSOURCE: https://github.com/devexpress/testcafe/blob/master/CHANGELOG.md#_snippet_173\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Selector } from 'testcafe'\n\nfixture `My fixture`\n    .page `https://devexpress.github.io/testcafe/example/`;\n\ntest('Check Label HTML', async t => {\n    const label = Selector('label').addCust.htmlOMProperties({\n        innerHTML: el => el.innerHTML\n    });\n\n    await t.expect(label.innerHTML).contains('input type=\"checkbox\" name=\"remote\"');\n});\n```\n\n----------------------------------------\n\nTITLE: Selector property access throws outside test context in TestCafe\nDESCRIPTION: This snippet demonstrates that while unawaited parametrized selector calls are allowed outside the test context, accessing element properties still throws an error.  The selector attempts to get the `id` outside of a test context and throws an error.\nSOURCE: https://github.com/devexpress/testcafe/blob/master/CHANGELOG.md#_snippet_190\n\nLANGUAGE: javascript\nCODE:\n```\nconst selector = Selector(arg => /* selector code */);\n\nasync getId() {\n  return await selector('someArg').id; // throws\n}\n\ngetId();\n```\n\n----------------------------------------\n\nTITLE: Navigate to assertions example directory\nDESCRIPTION: Navigates to the 'examples/using-assertions' directory after cloning the repository. This directory contains the example tests related to TestCafe assertions.\nSOURCE: https://github.com/devexpress/testcafe/blob/master/examples/using-assertions/README.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\ncd examples/using-assertions\n```\n\n----------------------------------------\n\nTITLE: Specifying Test Files with Glob Patterns in runner.src - JavaScript\nDESCRIPTION: This snippet shows how to use glob patterns in the TestCafe runner.src method to include or exclude test files from a directory structure. It accepts an array of glob strings, enabling conditional inclusion and exclusion. Requirements: Node.js and TestCafe's runner API. Key parameters are the paths using glob syntax. The result is a runner instance referencing all matching test files, simplifying large-scale test management.\nSOURCE: https://github.com/devexpress/testcafe/blob/master/CHANGELOG.md#_snippet_107\n\nLANGUAGE: JavaScript\nCODE:\n```\nrunner.src(['/home/user/tests/**/*.js', '!/home/user/tests/foo.js']);\n```\n\n----------------------------------------\n\nTITLE: Clone TestCafe repository\nDESCRIPTION: Clones the TestCafe repository from GitHub to the local machine.  This is the first step to get the example code. The URL is provided as https://github.com/DevExpress/testcafe.git.\nSOURCE: https://github.com/devexpress/testcafe/blob/master/examples/using-assertions/README.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ngit clone https://github.com/DevExpress/testcafe.git\n```\n\n----------------------------------------\n\nTITLE: Enabling Video Recording via TestCafe Runner API (JavaScript)\nDESCRIPTION: Illustrates enabling video recording programmatically using the `runner.video()` method in the TestCafe programming interface. This configures the test runner instance (`runner`) to save video recordings to the specified path. Requires TestCafe v1.0.0+, the FFmpeg library, and a TestCafe runner instance.\nSOURCE: https://github.com/devexpress/testcafe/blob/master/CHANGELOG.md#_snippet_89\n\nLANGUAGE: javascript\nCODE:\n```\nrunner.video('artifacts/videos/');\n```\n\n----------------------------------------\n\nTITLE: Scrolling Element to a position with TestCafe\nDESCRIPTION: This code demonstrates how to use the `t.scroll` action in TestCafe to scroll an element to a specific position (bottomRight). It imports the `Selector` and defines a test to perform the scroll.  The page is navigated to 'http://example.com' and uses '#container' as a selector.\nSOURCE: https://github.com/devexpress/testcafe/blob/master/CHANGELOG.md#_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\n import { Selector } from 'testcafe';\n\n fixture`Scroll Action`\n     .page('http://example.com');\n\n test('Scroll the container', async t => {\n     const container = Selector('#container');\n\n     await t\n         .scroll(container, 'bottomRight')\n });\n \n```\n\n----------------------------------------\n\nTITLE: Runner Screenshots Configuration with Optional Path - JavaScript\nDESCRIPTION: Shows how to invoke runner.screenshots in the JavaScript API, including only the 'takeOnFails' option and omitting the 'path', which is now optional. Expects a runner object instantiated from TestCafe's API. Takes screenshots only when tests fail, and saves them to the default location unless a path is specified.\nSOURCE: https://github.com/devexpress/testcafe/blob/master/CHANGELOG.md#_snippet_62\n\nLANGUAGE: js\nCODE:\n```\nrunner.screenshots({\n    takeOnFails: true\n});\n```\n\n----------------------------------------\n\nTITLE: Importing Selector from TestCafe in JavaScript\nDESCRIPTION: This snippet demonstrates how to import the Selector utility from the 'testcafe' module using JavaScript import syntax. Selector is essential for identifying and interacting with DOM elements in TestCafe tests. The only dependency is the 'testcafe' npm package, which should be installed in your project. The input is the module path, and the output is the imported Selector function. No parameters are required for the import statement.\nSOURCE: https://github.com/devexpress/testcafe/blob/master/CHANGELOG.md#_snippet_142\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Selector } from 'testcafe';\n```\n\n----------------------------------------\n\nTITLE: Using 'npx create-testcafe' CLI Command to Initialize a TestCafe Project\nDESCRIPTION: This snippet explains how to run the create-testcafe CLI command to scaffold a new TestCafe project or add TestCafe to an existing Node.js application. It includes the command execution and a visual example of the setup wizard interface.\nSOURCE: https://github.com/devexpress/testcafe/blob/master/CHANGELOG.md#_snippet_9\n\nLANGUAGE: Shell Script\nCODE:\n```\nnpx create-testcafe\n```\n\n----------------------------------------\n\nTITLE: Accessing React State and Props with testcafe-react-selectors in JavaScript\nDESCRIPTION: Shows how to use TestCafe test code to expect component props and state using ReactSelector's getReact().props and getReact().state methods. Requires the 'testcafe-react-selector' plugin, a valid TestCafe fixture and test. Inputs are Selector expressions for the component, and assertions check for expected values in props and state. Outputs are assertion results, typically reported by TestCafe.\nSOURCE: https://github.com/devexpress/testcafe/blob/master/CHANGELOG.md#_snippet_147\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport ReactSelector from 'testcafe-react-selector';\n\nfixture `TODO list test`\n    .page('http://localhost:1337');\n\ntest('Check list item', async t => {\n    const el = ReactSelector('TodoList');\n\n    await t.expect(el.getReact().props.priority).eql('High');\n    await t.expect(el.getReact().state.isActive).eql(false);\n});\n```\n\n----------------------------------------\n\nTITLE: Checking Attribute Presence on DOM Nodes with hasAttribute in TestCafe JavaScript\nDESCRIPTION: Demonstrates using the hasAttribute method on a Selector's DOM node state to assert the presence of a specific attribute, like 'disabled'. Requires TestCafe's assertion API. Ensures the selected element has the specified attribute set; outputs assertion success or failure.\nSOURCE: https://github.com/devexpress/testcafe/blob/master/CHANGELOG.md#_snippet_156\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst el = Selector('div.button');\n\nt.expect(el.hasAttribute('disabled')).ok();\n```\n\n----------------------------------------\n\nTITLE: Accessing Fixture and Test Data in TestCafe Hooks in JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to access fixture and test metadata within fixture and test hooks using TestCafe. It shows usage of the fixture-level hooks (.before, .beforeEach) with asynchronous functions that receive context and information objects. Fixture hooks allow retrieval of fixture name, metadata, and path from the 'info' argument, while test hooks enable access to fixture and test data via the TestController instance 't'. The example assumes the TestCafe testing framework environment and requires prior knowledge about TestCafe's fixture and test lifecycle hooks. Expected inputs are the context objects passed by TestCafe, and there are no explicit outputs but allows users to programmatically interact with metadata during test execution.\nSOURCE: https://github.com/devexpress/testcafe/blob/master/CHANGELOG.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nfixture `Example Fixture`\n    .page `http://example.com`\n    .meta({ fixtureMeta: 'v' })\n    .before( async (ctx, info) => {\n        const fixtureName = info.name; /* Example Fixture */\n        const fixtureMeta = info.meta; /* { fixtureMeta: 'v' } */\n        const fixturePath = info.path /* /Users/dan/testcafe/fixture.js */\n    });\n    .beforeEach( async t => {\n        const fixtureName = t.fixture.name; /* Example Fixture */\n        const fixtureMeta = t.fixture.meta; /* { fixtureMeta: 'v' } */\n        const fixturePath = t.fixture.path /* /Users/dan/testcafe/fixture.js */\n        const testName = t.test.name; /* MyTest */\n        const testMeta = t.test.meta; /* { 'key': 'value' } */\n})\n```\n\n----------------------------------------\n\nTITLE: Electron Application Configuration\nDESCRIPTION: This JSON snippet is an example configuration file (.testcafe-electron-rc) used with the testcafe-browser-provider-electron plugin to configure an electron application. It specifies the URL or path to the Electron application's main window.\nSOURCE: https://github.com/devexpress/testcafe/blob/master/CHANGELOG.md#_snippet_136\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"mainWindowUrl\": \"./index.html\"\n}\n```\n\n----------------------------------------\n\nTITLE: Getting property of nth element in TestCafe\nDESCRIPTION: This snippet demonstrates how to access a property ('id') of a specific element within a set of elements matched by a TestCafe selector, using the `nth` filter.  It selects the third element (index 2) and retrieves its ID.\nSOURCE: https://github.com/devexpress/testcafe/blob/master/CHANGELOG.md#_snippet_186\n\nLANGUAGE: javascript\nCODE:\n```\n// Returns id of the third element in the set\nconst id = await Selector('ul').find('label').parent('div.someClass').nth(2).id;\n```\n\n----------------------------------------\n\nTITLE: Enabling Test Page Retry in CLI\nDESCRIPTION: Shell command showing how to enable the retry-test-pages feature that allows TestCafe to retry loading test pages that fail to load on the first attempt.\nSOURCE: https://github.com/devexpress/testcafe/blob/master/CHANGELOG.md#_snippet_34\n\nLANGUAGE: Shell\nCODE:\n```\ntestcafe chrome test.js --retry-test-pages\n```\n\n----------------------------------------\n\nTITLE: Removing Native Dialog Handlers in TestCafe\nDESCRIPTION: Shows how to remove a previously set native dialog handler by passing null to the setNativeDialogHandler method. This allows the test to revert to default dialog behavior.\nSOURCE: https://github.com/devexpress/testcafe/blob/master/CHANGELOG.md#_snippet_164\n\nLANGUAGE: javascript\nCODE:\n```\nfixture `My fixture`\n    .page `https://devexpress.github.io/testcafe/example`;\n\ntest('My test', async t => {\n    await t\n        .setNativeDialogHandler(() => true)\n        .click('#populate')\n        .setNativeDialogHandler(null)\n        .click('#submit-button');\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving Vue Component State, Props, and Computed Properties with testcafe-vue-selectors\nDESCRIPTION: Shows how to use VueSelector's getVue() method in TestCafe to access a Vue component's props, state, and computed fields within an end-to-end test. Requires 'testcafe-vue-selector' and a running TestCafe fixture. Inputs include a VueSelector for the component; outputs are assertions on component internals. Limitations include needing components to expose these properties.\nSOURCE: https://github.com/devexpress/testcafe/blob/master/CHANGELOG.md#_snippet_149\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport VueSelector from 'testcafe-vue-selector';\n\nfixture `TODO list test`\n    .page('http://localhost:1337');\n\ntest('Check list item', async t => {\n    const todoItem = VueSelector('todo-item');\n\n    await t\n        .expect(todoItem.getVue().props.priority).eql('High')\n        .expect(todoItem.getVue().state.isActive).eql(false)\n        .expect(todoItem.getVue().computed.text).eql('Item 1');\n});\n```\n\n----------------------------------------\n\nTITLE: Performing drag-and-drop to a specific point on an element using TestCafe in JavaScript\nDESCRIPTION: This JavaScript code demonstrates the 'dragToElement' TestCafe action that drags a source element and drops it at a specified offset coordinate inside a destination element. It includes options for source and destination offsets and modifier keys such as 'shift'. Requires the TestCafe Selector API.\nSOURCE: https://github.com/devexpress/testcafe/blob/master/CHANGELOG.md#_snippet_134\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Selector } from 'testcafe';\n\nconst fileIcon      = Selector('.file-icon');\nconst directoryPane = Selector('.directory');\n\nfixture `My Fixture`\n    .page `https://example.com/`;\n\ntest('My Test', async t => {\n    await t\n        .dragToElement(fileIcon, directoryPane, {\n            offsetX: 10,\n            offsetY: 10,\n            destinationOffsetX: 100,\n            destinationOffsetY: 50,\n            modifiers: {\n                shift: true\n            }\n        });\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Browser Initialization Timeout in CLI\nDESCRIPTION: Shell command showing how to configure browser initialization timeout using the TestCafe command line interface.\nSOURCE: https://github.com/devexpress/testcafe/blob/master/CHANGELOG.md#_snippet_31\n\nLANGUAGE: Shell\nCODE:\n```\ntestcafe chrome my-tests --browser-init-timeout 180000\n```\n\n----------------------------------------\n\nTITLE: Setting page load timeout to zero using Shell command\nDESCRIPTION: This shell command runs TestCafe tests disabling the wait for the 'window.load' event by setting the page load timeout to 0 via the '--page-load-timeout' flag. It requires TestCafe installed and targets 'test.js' in Chrome.\nSOURCE: https://github.com/devexpress/testcafe/blob/master/CHANGELOG.md#_snippet_128\n\nLANGUAGE: Shell\nCODE:\n```\ntestcafe chrome test.js --page-load-timeout 0\n```\n\n----------------------------------------\n\nTITLE: Testing Local Webpages in TestCafe\nDESCRIPTION: Shows how to run tests against local HTML files using file:// URLs or relative paths. Examples demonstrate both setting the initial page and navigating to local pages during test execution.\nSOURCE: https://github.com/devexpress/testcafe/blob/master/CHANGELOG.md#_snippet_162\n\nLANGUAGE: javascript\nCODE:\n```\nfixture `MyFixture`\n    .page `file:///user/my-website/index.html`;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfixture `MyFixture`\n    .page `../my-project/index.html`;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nfixture `My fixture`\n    .page `http://www.example.com/`;\n\ntest('Navigate to local pages', async t => {\n    await t\n        .navigateTo('file:///user/my-website/index.html')\n        .navigateTo('../my-project/index.html');\n});\n```\n\n----------------------------------------\n\nTITLE: Complex Selector Chain with Filters in TestCafe\nDESCRIPTION: This code showcases a complex TestCafe selector chain with a combination of filters and hierarchical methods.  It demonstrates selecting parent elements, filtering by index and text, and then finding child elements.\nSOURCE: https://github.com/devexpress/testcafe/blob/master/CHANGELOG.md#_snippet_188\n\nLANGUAGE: javascript\nCODE:\n```\nSelector('.container').parent(1).nth(0).find('.content').withText('yo!').child('span');\n```\n\n----------------------------------------\n\nTITLE: Enabling Test Concurrency - API\nDESCRIPTION: This JavaScript example demonstrates how to enable concurrent test execution using the TestCafe API. The '.concurrency()' method is used to specify the number of browser instances to run concurrently.\nSOURCE: https://github.com/devexpress/testcafe/blob/master/CHANGELOG.md#_snippet_141\n\nLANGUAGE: js\nCODE:\n```\nvar testRunPromise = runner\n    .src('tests/test.js')\n    .browsers('chrome')\n    .concurrency(3)\n    .run();\n```\n\n----------------------------------------\n\nTITLE: Enabling Video Recording via TestCafe CLI (Shell)\nDESCRIPTION: Shows how to enable video recording for TestCafe test runs using the `--video` command-line flag. This command runs tests specified in `test.js` using Chrome and saves video recordings of each test to the `artifacts/videos/` directory. Requires TestCafe v1.0.0+ and the FFmpeg library to be installed.\nSOURCE: https://github.com/devexpress/testcafe/blob/master/CHANGELOG.md#_snippet_88\n\nLANGUAGE: shell\nCODE:\n```\ntestcafe chrome test.js --video artifacts/videos/\n```\n\n----------------------------------------\n\nTITLE: Disabling Screenshots using TestCafe CLI - Shell\nDESCRIPTION: Illustrates use of the --disable-screenshots CLI flag to prevent TestCafe from capturing screenshots regardless of test failures or screenshot actions in test code. Requires TestCafe v1.6.0+. Takes browser name and test file as required arguments. No screenshots are produced during the run.\nSOURCE: https://github.com/devexpress/testcafe/blob/master/CHANGELOG.md#_snippet_63\n\nLANGUAGE: sh\nCODE:\n```\ntestcafe chrome my-tests --disable-screenshots\n```\n\n----------------------------------------\n\nTITLE: Running TestCafe tests using gulp\nDESCRIPTION: These commands run different sets of tests for TestCafe, including server-side, functional (local), and client-side (local) tests. These tests are crucial for verifying code changes before submitting a pull request.\nSOURCE: https://github.com/devexpress/testcafe/blob/master/CONTRIBUTING.md#_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\ngulp test-server\n```\n\nLANGUAGE: sh\nCODE:\n```\ngulp test-functional-local\n```\n\nLANGUAGE: sh\nCODE:\n```\ngulp test-client-local\n```\n\n----------------------------------------\n\nTITLE: Enabling Live Mode via TestCafe API (JavaScript)\nDESCRIPTION: Demonstrates how to use TestCafe's live mode programmatically. It involves creating a TestCafe factory instance, then using `testcafe.createLiveModeRunner()` to get a live runner instance, configuring it (source files, browsers), and starting it with `run()`. The TestCafe instance should be closed when done.\nSOURCE: https://github.com/devexpress/testcafe/blob/master/CHANGELOG.md#_snippet_93\n\nLANGUAGE: javascript\nCODE:\n```\nconst createTestCafe = require('testcafe');\nlet testcafe         = null;\n\ncreateTestCafe('localhost', 1337, 1338)\n    .then(tc => {\n        testcafe         = tc;\n        const liveRunner = testcafe.createLiveModeRunner();\n        return liveRunner\n            .src('tests/test.js')\n            .browsers('chrome')\n            .run();\n    })\n    .then(() => {\n        return testcafe.close();\n    });\n```\n\n----------------------------------------\n\nTITLE: Launching TestCafe tests in Edge on Linux\nDESCRIPTION: Example command to launch TestCafe tests in Microsoft Edge browser on a Linux system. Assumes Edge is installed and available in the system's PATH.\nSOURCE: https://github.com/devexpress/testcafe/blob/master/CHANGELOG.md#_snippet_26\n\nLANGUAGE: shell\nCODE:\n```\ntestcafe edge tests/test.js\n```\n\n----------------------------------------\n\nTITLE: Generating Browser-Specific Screenshot Paths in TestCafe (JavaScript)\nDESCRIPTION: Example of using `t.browser.name` to dynamically construct a unique file path when taking an element screenshot with `t.takeElementScreenshot`. This method prevents screenshots taken in different browsers (e.g., Chrome, Firefox) from overwriting each other by saving them into separate subdirectories named after the browser. Requires TestCafe v1.7.0 or later.\nSOURCE: https://github.com/devexpress/testcafe/blob/master/CHANGELOG.md#_snippet_53\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Selector } from 'testcafe';\n\nfixture `My fixture`\n    .page `https://example.com`;\n\ntest('My test', async t => {\n    const loginButton = Selector('div').withText('Login');\n\n    await t.takeElementScreenshot(loginButton, `auth/${t.browser.name}/login-button.png`);\n});\n```\n\n----------------------------------------\n\nTITLE: Enabling Live Mode via TestCafe CLI (Shell)\nDESCRIPTION: Shows how to activate TestCafe's live mode from the command line using the `-L` (or `--live`) flag. This keeps the TestCafe process and browsers open, automatically rerunning tests in `tests/test.js` on Chrome whenever changes are detected in the test files.\nSOURCE: https://github.com/devexpress/testcafe/blob/master/CHANGELOG.md#_snippet_92\n\nLANGUAGE: shell\nCODE:\n```\ntestcafe chrome tests/test.js -L\n```\n\n----------------------------------------\n\nTITLE: Installing TestCafe Electron Provider\nDESCRIPTION: This snippet demonstrates the installation of the testcafe-browser-provider-electron plugin via npm, allowing TestCafe to test Electron applications. It involves installing the plugin and the Electron module and configuring the plugin with the application's main window URL.\nSOURCE: https://github.com/devexpress/testcafe/blob/master/CHANGELOG.md#_snippet_135\n\nLANGUAGE: shell\nCODE:\n```\nnpm install testcafe-browser-provider-electron\n```\n\n----------------------------------------\n\nTITLE: Running TestCafe tests in headless Firefox using Shell\nDESCRIPTION: This shell command runs TestCafe tests in Firefox's headless mode, allowing automated browser testing without opening a visible browser window. It requires TestCafe to be installed and targets the specified test file 'tests/sample-fixture.js'.\nSOURCE: https://github.com/devexpress/testcafe/blob/master/CHANGELOG.md#_snippet_120\n\nLANGUAGE: Shell\nCODE:\n```\ntestcafe firefox:headless tests/sample-fixture.js\n```\n\n----------------------------------------\n\nTITLE: Disabling Page Caching for a Single Test in TestCafe - JavaScript\nDESCRIPTION: Shows application of the .disablePageCaching method to an individual TestCafe test. Used to avoid login/caching issues only within a particular test block. Requires TestCafe with user role and authentication support. Main parameters: test name and test body (async callback).\nSOURCE: https://github.com/devexpress/testcafe/blob/master/CHANGELOG.md#_snippet_67\n\nLANGUAGE: js\nCODE:\n```\ntest\n    .disablePageCaching\n    ('My test', async t => { /* ... */ });\n```\n\n----------------------------------------\n\nTITLE: Enabling Debugging Mode in TestCafe via Shell Command\nDESCRIPTION: Demonstrates activation of TestCafe's debugging mode that pauses tests before first action or assertion using the --debug-mode flag. Requires TestCafe installed globally and command-line execution. Inputs are browser, test path, and debug flag. Output is an interactive paused browser session for debugging.\nSOURCE: https://github.com/devexpress/testcafe/blob/master/CHANGELOG.md#_snippet_153\n\nLANGUAGE: Shell\nCODE:\n```\ntestcafe chrome my-tests/**/*.js --debug-mode\n```\n\n----------------------------------------\n\nTITLE: Specifying TypeScript Config Path via Compiler Options\nDESCRIPTION: This command shows how to specify the path to a TypeScript configuration file within the `--compiler-options` flag. It allows using an external JSON file for compiler settings.  The config file path is \"path/to/config.json\".\nSOURCE: https://github.com/devexpress/testcafe/blob/master/CHANGELOG.md#_snippet_43\n\nLANGUAGE: shell\nCODE:\n```\ntestcafe chrome my-tests --compiler-options typescript.configPath='path/to/config.json'\n```\n\n----------------------------------------\n\nTITLE: Enabling HTTPS Serving in TestCafe Using Node.js Options with JavaScript\nDESCRIPTION: This snippet demonstrates enabling HTTPS serving in TestCafe via the programming API by passing HTTPS server options to the createTestCafe method. It uses a self-signed certificate's key and cert as options to create a secure server on specified ports. The runner is configured to launch Chrome with the '--allow-insecure-localhost' flag to allow self-signed certificates in the browser. Dependencies include the 'testcafe' package and the 'openssl-self-signed-certificate' module. The snippet shows asynchronous initialization of TestCafe, runner creation, specifying test source, browser launch with security flags, and execution triggering. It enables testing pages that require a secure origin (HTTPS).\nSOURCE: https://github.com/devexpress/testcafe/blob/master/CHANGELOG.md#_snippet_108\n\nLANGUAGE: javascript\nCODE:\n```\n'use strict';\n\nconst createTestCafe        = require('testcafe');\nconst selfSignedCertificate = require('openssl-self-signed-certificate');\nlet runner                  = null;\n\nconst sslOptions = {\n    key:  selfSignedCertificate.key,\n    cert: selfSignedCertificate.cert\n};\n\ncreateTestCafe('localhost', 1337, 1338, sslOptions)\n    .then(testcafe => {\n        runner = testcafe.createRunner();\n    })\n    .then(() => {\n        return runner\n            .src('test.js')\n\n            // Browsers restrict self-signed certificate usage unless you\n            // explicitly set a flag specific to each browser.\n            // For Chrome, this is '--allow-insecure-localhost'.\n            .browsers('chrome --allow-insecure-localhost')\n            .run();\n    });\n```\n\n----------------------------------------\n\nTITLE: Running TestCafe with Chrome Device Emulation via Shell\nDESCRIPTION: This shell snippet shows how to run TestCafe tests emulating a mobile device (iPhone 6) via Chrome's device emulator. It requires TestCafe installation and a valid test script path. The main parameter is the 'chrome:emulation:device=iphone 6' browser alias, which tells TestCafe to launch Chrome with device emulation. The output will be test results for the specified emulated environment. Device names must be from the supported Chrome devtools device list.\nSOURCE: https://github.com/devexpress/testcafe/blob/master/CHANGELOG.md#_snippet_144\n\nLANGUAGE: Shell\nCODE:\n```\ntestcafe \"chrome:emulation:device=iphone 6\" tests/sample-fixture.js\n```\n\n----------------------------------------\n\nTITLE: Specifying TypeScript Config Path TestCafe API\nDESCRIPTION: Sets the explicit path to a `tsconfig.json` file for TestCafe to apply custom TypeScript compiler options programmatically using the Node.js API.\nSOURCE: https://github.com/devexpress/testcafe/blob/master/CHANGELOG.md#_snippet_81\n\nLANGUAGE: JavaScript\nCODE:\n```\nrunner.tsConfigPath('/Users/s.johnson/testcafe/tsconfig.json');\n```\n\n----------------------------------------\n\nTITLE: Retrieving browser console messages via TestCafe API in JavaScript\nDESCRIPTION: This JavaScript object example shows the structure returned by the 't.getBrowserConsoleMessages()' method in TestCafe, which captures and groups console messages of types error, warn, log, and info posted by the tested application. Only explicit console messages are included, excluding browser system messages.\nSOURCE: https://github.com/devexpress/testcafe/blob/master/CHANGELOG.md#_snippet_131\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n    error: [\"Cannot access the 'db' database. Wrong credentials.\", '...'], // error messages\n    warn: ['The setTimeout property is deprecated', '...'],                // warning messages\n    log: ['[09:12:08] Logged in', '[09:25:43] Changes saved', '...'],      // log messages\n    info: ['The application was updated since your last visit.', '...']    // info messages\n}\n```\n\n----------------------------------------\n\nTITLE: Controlling TestCafe Execution Speed via API (JavaScript)\nDESCRIPTION: Illustrates setting the test execution speed programmatically using the `speed` option within the TestCafe Runner API's `run()` method. The value is a factor between `1` (fastest) and `0.01` (slowest).\nSOURCE: https://github.com/devexpress/testcafe/blob/master/CHANGELOG.md#_snippet_202\n\nLANGUAGE: javascript\nCODE:\n```\nawait runner.run({\n    speed: 0.1\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Quarantine Mode in TestCafe\nDESCRIPTION: This JavaScript code shows how to configure quarantine mode to specify the attempt limit and success threshold. The testcafe command in the example will run the tests in the specified directory and use Chrome. The example sets the attempt limit to 5 and success threshold to 2. Dependencies: TestCafe.\nSOURCE: https://github.com/devexpress/testcafe/blob/master/CHANGELOG.md#_snippet_20\n\nLANGUAGE: js\nCODE:\n```\ntestcafe chrome ./tests/ -q attemptLimit=5, successThreshold=2\n```\n\n----------------------------------------\n\nTITLE: Setting Multiple Test Timeouts with TestCafe\nDESCRIPTION: This example illustrates how to set multiple timeout options including `pageLoadTimeout`, `pageRequestTimeout`, and `ajaxRequestTimeout` using the `test.timeouts` method in TestCafe. The values are set in milliseconds.  The test navigates to 'http://devexpress.github.io/testcafe/example'.\nSOURCE: https://github.com/devexpress/testcafe/blob/master/CHANGELOG.md#_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\nfixture`Setting Timeouts`\n    .page`http://devexpress.github.io/testcafe/example`;\n\ntest\n    .timeouts({\n        pageLoadTimeout:    2000,\n        pageRequestTimeout: 60000,\n        ajaxRequestTimeout: 60000\n    })\n    ('My test', async t => {\n        //test actions\n    })\n\n```\n\n----------------------------------------\n\nTITLE: Running TestCafe Tests\nDESCRIPTION: This shell command executes TestCafe tests in a specified browser. The command takes the browser name (e.g., 'chrome') and a file path (e.g., 'test1.js') as arguments.  The testcafe command opens the browser and starts executing the tests defined within the provided JavaScript file.\nSOURCE: https://github.com/devexpress/testcafe/blob/master/README.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\ntestcafe chrome test1.js\n```\n\n----------------------------------------\n\nTITLE: Stopping TestCafe Run on First Fail via CLI (Shell)\nDESCRIPTION: Illustrates how to configure TestCafe to stop the entire test run immediately after the first test failure using the `--sf` (or `--stop-on-first-fail`) command-line flag. This example runs tests in Chrome and halts execution upon the initial failure. This feature was added in TestCafe v0.23.0.\nSOURCE: https://github.com/devexpress/testcafe/blob/master/CHANGELOG.md#_snippet_102\n\nLANGUAGE: sh\nCODE:\n```\ntestcafe chrome my-tests --sf\n```\n\n----------------------------------------\n\nTITLE: Running Tests in Edge using TestCafe CLI - Shell Script\nDESCRIPTION: This shell script demonstrates how to execute tests with TestCafe targeting the new Chromium-based Microsoft Edge browser using the 'edge' alias. It assumes that TestCafe is installed and available in the system PATH. The key parameter is the browser alias ('edge'), followed by the test file path ('test.js'). The script outputs the execution results to the console. No additional configuration is needed as long as the new Edge is installed.\nSOURCE: https://github.com/devexpress/testcafe/blob/master/CHANGELOG.md#_snippet_49\n\nLANGUAGE: sh\nCODE:\n```\ntestcafe edge test.js\n```\n\n----------------------------------------\n\nTITLE: Injecting Client Scripts TestCafe API\nDESCRIPTION: Configures the TestCafe runner to inject specified client-side JavaScript files into tested pages programmatically using the Node.js API. The method takes one or more file paths as arguments.\nSOURCE: https://github.com/devexpress/testcafe/blob/master/CHANGELOG.md#_snippet_72\n\nLANGUAGE: JavaScript\nCODE:\n```\nrunner.clientScripts('mockDate.js', 'scripts/react-helpers.js');\n```\n\n----------------------------------------\n\nTITLE: TypeScript ClientFunction Type Definitions Enhancement\nDESCRIPTION: This snippet demonstrates the updated TypeScript definitions for the ClientFunction API in TestCafe, enabling static type checking of the function's return value. It helps catch method misuse (e.g., calling string methods on a number) during compilation. Dependencies include the TestCafe testing framework and TypeScript tooling.\nSOURCE: https://github.com/devexpress/testcafe/blob/master/CHANGELOG.md#_snippet_85\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst getFoo = ClientFunction(() =&gt; 42);\nconst foo    = await getFoo();\nfoo.match(/foo/);\n```\n\n----------------------------------------\n\nTITLE: Checking React PropTypes errors with TestCafe afterEach hook in JavaScript\nDESCRIPTION: This JavaScript code exports a default async function that uses 't.getBrowserConsoleMessages' to capture error console messages and asserts that there are none, enabling automatic PropTypes validation checks after each test.\nSOURCE: https://github.com/devexpress/testcafe/blob/master/CHANGELOG.md#_snippet_132\n\nLANGUAGE: JavaScript\nCODE:\n```\n// check-prop-types.js\nimport { t } from 'testcafe';\n\nexport default async function () {\n    const { error } = await t.getBrowserConsoleMessages();\n\n    await t.expect(error[0]).notOk();\n}\n```\n\n----------------------------------------\n\nTITLE: Injecting Client Script by Path TestCafe Fixture API\nDESCRIPTION: Injects the content of a local JavaScript file into tested pages using the TestCafe Fixture API with the object syntax and `path` property.\nSOURCE: https://github.com/devexpress/testcafe/blob/master/CHANGELOG.md#_snippet_77\n\nLANGUAGE: JavaScript\nCODE:\n```\nfixture `My fixture`\n    .clientScripts({ path: 'assets/jquery.js' });\n```\n\n----------------------------------------\n\nTITLE: Using JavaScript Config Files in TestCafe\nDESCRIPTION: This snippet shows the basic structure of a JavaScript configuration file for TestCafe. The `module.exports` is used to export configuration parameters. The example sets `skipJsErrors` to true and `hostname` to \"localhost\". It allows using JavaScript variables and functions. Dependencies: TestCafe.\nSOURCE: https://github.com/devexpress/testcafe/blob/master/CHANGELOG.md#_snippet_17\n\nLANGUAGE: js\nCODE:\n```\nmodule.exports = {\n    skipJsErrors: true,\n    hostname: \"localhost\",\n    // other settings\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Asynchronous Reporter Methods in TestCafe (JavaScript)\nDESCRIPTION: Demonstrates how to declare asynchronous methods (`reportTaskStart`, `reportFixtureStart`, `reportTestDone`, `reportTaskDone`) within a custom TestCafe reporter plugin using the `async` keyword. This allows for asynchronous operations like file I/O or network requests within the reporter. This is required for TestCafe v1.0.0+ custom reporters performing asynchronous tasks.\nSOURCE: https://github.com/devexpress/testcafe/blob/master/CHANGELOG.md#_snippet_87\n\nLANGUAGE: javascript\nCODE:\n```\nasync reportTaskStart (startTime, userAgents, testCount) {\n    // ...\n},\n\nasync reportFixtureStart (name, path, meta) {\n    // ...\n},\n\nasync reportTestDone (name, testRunInfo, meta) {\n    // ...\n},\n\nasync reportTaskDone (endTime, passed, warnings, result) {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Installing TestCafe via NPM\nDESCRIPTION: This shell command installs TestCafe globally using npm.  The `-g` flag ensures that TestCafe is installed globally, making it accessible from the command line.  Node.js version 16 or higher is a prerequisite.\nSOURCE: https://github.com/devexpress/testcafe/blob/master/README.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install -g testcafe\n```\n\n----------------------------------------\n\nTITLE: Injecting Page-Specific Client Scripts TestCafe Fixture API\nDESCRIPTION: Injects a client-side JavaScript file into a specific page pattern within a fixture using the TestCafe Fixture API. This is useful for applying scripts only on certain URLs.\nSOURCE: https://github.com/devexpress/testcafe/blob/master/CHANGELOG.md#_snippet_76\n\nLANGUAGE: JavaScript\nCODE:\n```\nfixture `My fixture`\n    .clientScripts({\n        page: 'https://myapp.com/page/',\n        path: 'scripts/vue-helpers.js'\n    });\n```\n\n----------------------------------------\n\nTITLE: Checking Node.js and npm versions in shell\nDESCRIPTION: This snippet executes shell commands to verify the installed versions of Node.js and npm. It's a prerequisite check to ensure the environment is properly configured for TestCafe development.\nSOURCE: https://github.com/devexpress/testcafe/blob/master/CONTRIBUTING.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnode -v; npm -v\n```\n\n----------------------------------------\n\nTITLE: Injecting Client Script Code TestCafe Fixture API\nDESCRIPTION: Injects a string of JavaScript code directly into tested pages using the TestCafe Fixture API with the object syntax and `content` property. This is useful for short code snippets or quick overrides.\nSOURCE: https://github.com/devexpress/testcafe/blob/master/CHANGELOG.md#_snippet_79\n\nLANGUAGE: JavaScript\nCODE:\n```\nfixture `My fixture`\n    .clientScripts({ content: 'Geolocation.prototype.getCurrentPosition = () => new Position(0, 0);' });\n```\n\n----------------------------------------\n\nTITLE: Setting Compiler Options via Runner API\nDESCRIPTION: This snippet shows how to configure TypeScript compiler options using the `runner.compilerOptions` method in the TestCafe API. This method accepts an object containing compiler-specific options. In this example, the `experimentalDecorators` option is set to `true` for the TypeScript compiler.\nSOURCE: https://github.com/devexpress/testcafe/blob/master/CHANGELOG.md#_snippet_41\n\nLANGUAGE: javascript\nCODE:\n```\nrunner.compilerOptions({\n    typescript: {\n        experimentalDecorators: true\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Building TestCafe project using gulp\nDESCRIPTION: This command builds the TestCafe project using Gulp, a task runner. This step is necessary to compile the source code into distributable artifacts.\nSOURCE: https://github.com/devexpress/testcafe/blob/master/CONTRIBUTING.md#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nnpx gulp build\n```\n\n----------------------------------------\n\nTITLE: Customizing TypeScript Compiler Options tsconfig.json\nDESCRIPTION: Configures custom TypeScript compiler options within a `tsconfig.json` file to control how TestCafe compiles test files. Options like `jsx`, `jsxFactory`, `paths`, and `alwaysStrict` can be specified.\nSOURCE: https://github.com/devexpress/testcafe/blob/master/CHANGELOG.md#_snippet_83\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"compilerOptions\": {\n        \"jsx\": \"react\",\n        \"jsxFactory\": \"myFactory\",\n        \"paths\": {\n            \"jquery\": [ \"node_modules/jquery/dist/jquery\" ]\n        },\n        \"alwaysStrict\": true\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Screenshot Options via TestCafe CLI - Shell\nDESCRIPTION: Illustrates how to launch TestCafe from the command line with new compound screenshot options, specifying where and when screenshots are taken as well as naming patterns. Requires TestCafe v1.6.0 or later. Accepts option=value pairs under the -s/--screenshots flag. Arguments include 'takeOnFails' for conditional screenshots and 'pathPattern' for naming convention. Test file and browser name required as inputs.\nSOURCE: https://github.com/devexpress/testcafe/blob/master/CHANGELOG.md#_snippet_58\n\nLANGUAGE: sh\nCODE:\n```\ntestcafe chrome test.js -s takeOnFails=true,pathPattern=${DATE}_${TIME}/${FILE_INDEX}.png\n```\n\n----------------------------------------\n\nTITLE: Cloning TestCafe Repository - Bash\nDESCRIPTION: This snippet provides the command to clone the TestCafe repository from GitHub.  It uses the `git clone` command to download the repository and its contents to the user's local machine.  The command downloads the repository specified by the provided URL. The user must have Git installed and a connection to the internet to execute this command. The output is the repository's contents downloaded locally.\nSOURCE: https://github.com/devexpress/testcafe/blob/master/examples/running-tests-in-chrome-using-bitbucket-pipelines-ci/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/DevExpress/testcafe.git\n```\n\n----------------------------------------\n\nTITLE: Enabling HTTPS Serving in TestCafe via Command Line with Shell\nDESCRIPTION: This snippet shows how to enable HTTPS serving for tests run with the TestCafe CLI by passing SSL options via the '--ssl' flag. The flag accepts key-value pairs for HTTPS server options, such as specifying a PFX certificate file path and whether to reject unauthorized certificates. This allows testing of secure origins that require HTTPS, leveraging Node.js HTTPS server options for configuration. It assumes the user has valid certificate files and appropriate access.\nSOURCE: https://github.com/devexpress/testcafe/blob/master/CHANGELOG.md#_snippet_109\n\nLANGUAGE: sh\nCODE:\n```\ntestcafe --ssl pfx=path/to/file.pfx;rejectUnauthorized=true;...\n```\n\n----------------------------------------\n\nTITLE: Configuring Screenshot Path Patterns in TestCafe via Command Line with Shell\nDESCRIPTION: This snippet shows how to specify a dynamic screenshot path pattern when running tests with TestCafe via the command line. Using the '-s' flag, it sets the screenshot destination directory and a path pattern that uses placeholders such as '${DATE}', '${TIME}', '${TEST_INDEX}', '${USERAGENT}', and '${FILE_INDEX}'. These placeholders are replaced with runtime values to save screenshots in a structured and meaningful directory layout. This facilitates organized storage of screenshots when tests are run from the CLI.\nSOURCE: https://github.com/devexpress/testcafe/blob/master/CHANGELOG.md#_snippet_111\n\nLANGUAGE: sh\nCODE:\n```\ntestcafe all test.js -s path=screenshots,pathPattern=${DATE}_${TIME}/test-${TEST_INDEX}/${USERAGENT}/${FILE_INDEX}.png\n```\n\n----------------------------------------\n\nTITLE: Setting SkipUncaughtErrors Option in TestCafe Runner - JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to configure the TestCafe runner to skip tests on uncaught exceptions and unhandled promise rejections by setting skipUncaughtErrors: true as a parameter to runner.run(). Dependencies: TestCafe's programming interface and a configured runner instance. Input is an options object; output is runner execution with altered error handling behavior. This is intended for use in programmatically controlled test environments.\nSOURCE: https://github.com/devexpress/testcafe/blob/master/CHANGELOG.md#_snippet_106\n\nLANGUAGE: JavaScript\nCODE:\n```\nrunner.run({skipUncaughtErrors:true})\n```\n\n----------------------------------------\n\nTITLE: HTML Button with Conditional JavaScript Error\nDESCRIPTION: This HTML creates a button that, when clicked, executes inline JavaScript.  The JavaScript checks if the global variable `window.firstButtonClicked` exists and is truthy. If it is, an error is thrown, simulating a scenario where file uploads are prevented after a button is already clicked. This relies on a global variable to track state.\nSOURCE: https://github.com/devexpress/testcafe/blob/master/test/functional/fixtures/api/raw/upload/test-data/test3.txt#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<input type=\"button\" value=\"Click me\" id=\"button2\" onclick=\"if (window.firstButtonClicked) throw new Error('Files uploaded')\">\n```\n\n----------------------------------------\n\nTITLE: Injecting Client Script by Module TestCafe Fixture API\nDESCRIPTION: Injects the content of a Node.js module found via Node.js resolution mechanisms into tested pages using the TestCafe Fixture API with the object syntax and `module` property. The browser must be able to execute the module.\nSOURCE: https://github.com/devexpress/testcafe/blob/master/CHANGELOG.md#_snippet_78\n\nLANGUAGE: JavaScript\nCODE:\n```\nfixture `My fixture`\n    .clientScripts({ module: 'async' });\n```\n\n----------------------------------------\n\nTITLE: Running Tests with Electron - API\nDESCRIPTION: This JavaScript code provides an example of using the TestCafe API to configure and run tests against an Electron application. It specifies the test file location and Electron browser provider, and uses the '.run()' method to execute the tests.\nSOURCE: https://github.com/devexpress/testcafe/blob/master/CHANGELOG.md#_snippet_139\n\nLANGUAGE: js\nCODE:\n```\ntestCafe\n    .createRunner()\n    .src('path/to/test/file.js')\n    .browsers('electron:/home/user/electron-app')\n    .run();\n```\n\n----------------------------------------\n\nTITLE: Cloning TestCafe Repository Using Git Shell Command\nDESCRIPTION: This shell command clones the official TestCafe GitHub repository to the user's local machine. It requires Git to be installed and internet access to GitHub. The command downloads all repository files, enabling users to access example configurations and test setups for continuous integration with Travis CI and Sauce Labs.\nSOURCE: https://github.com/devexpress/testcafe/blob/master/examples/running-tests-using-travis-and-saucelabs/README.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/DevExpress/testcafe.git\n```\n\n----------------------------------------\n\nTITLE: Injecting Client Scripts TestCafe Configuration File\nDESCRIPTION: Specifies client-side JavaScript files to be injected into tested pages via the TestCafe configuration file (e.g., .testcaferc.json). The `clientScripts` property accepts an array of file paths.\nSOURCE: https://github.com/devexpress/testcafe/blob/master/CHANGELOG.md#_snippet_73\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"clientScripts\": [\"mockDate.js\", \"scripts/react-helpers.js\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Embedding TestCafe Badge in Readme\nDESCRIPTION: This code snippet demonstrates how to embed the TestCafe badge into your repository's README file. It includes an anchor tag linking to the TestCafe GitHub repository and an image tag displaying the badge.  The badge visually indicates that the project uses TestCafe for testing.\nSOURCE: https://github.com/devexpress/testcafe/blob/master/README.md#_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<a href=\"https://github.com/DevExpress/testcafe\">\n    <img alt=\"Tested with TestCafe\" src=\"https://img.shields.io/badge/tested%20with-TestCafe-2fa4cf.svg\">\n</a>\n```\n\n----------------------------------------\n\nTITLE: Filtering TestCafe Fixtures via CLI Metadata (Shell)\nDESCRIPTION: Shows how to run TestCafe tests in Chrome, filtering entire fixtures based on metadata using the `--fixture-meta` command-line flag. It selects fixtures where `subsystem=payments` AND `type=regression`. This functionality is available from TestCafe v0.23.1.\nSOURCE: https://github.com/devexpress/testcafe/blob/master/CHANGELOG.md#_snippet_98\n\nLANGUAGE: sh\nCODE:\n```\ntestcafe chrome my-tests --fixture-meta subsystem=payments,type=regression\n```\n\n----------------------------------------\n\nTITLE: Starting TestCafe Browsers with Arguments via CLI (Shell)\nDESCRIPTION: Demonstrates the command-line syntax for launching TestCafe tests while passing specific arguments to browsers. The example runs tests in Chrome started in fullscreen mode (`--start-fullscreen`) and Firefox. The browser alias and its arguments must be enclosed in quotation marks.\nSOURCE: https://github.com/devexpress/testcafe/blob/master/CHANGELOG.md#_snippet_194\n\nLANGUAGE: sh\nCODE:\n```\ntestcafe \"chrome --start-fullscreen\",firefox tests/test.js\n```\n\n----------------------------------------\n\nTITLE: Initializing Testcafe Test Environment in JavaScript\nDESCRIPTION: This snippet initializes a Testcafe testing environment, setting up test fixtures and defining test cases. It relies on the Testcafe library, enabling automated browser testing with specified configurations, inputs, and expected outputs.\nSOURCE: https://github.com/devexpress/testcafe/blob/master/test/functional/fixtures/regression/gh-963/test-data/file1.txt#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport {\n  Selector\n} from 'testcafe';\n\nfixture `My Test Fixture`\n  .page `http://localhost:3000`;\n\ntest `Sample Test`\n  .tag`async`\n  .tag`ui`\n  .tag`branding`\n  ('Test description', async t => {\n    await t\n      .click(Selector('#submit-button'))\n      .expect(Selector('#result').innerText).eql('Success');\n  });\n```\n\n----------------------------------------\n\nTITLE: Using TestCafe Smart Assertions with Selectors (JavaScript)\nDESCRIPTION: A TestCafe test demonstrating the smart assertion query mechanism. It clicks a button selected by `Selector('#btn')` and then uses `expect(btn.textContent).contains('Loading...')`. TestCafe automatically retries this assertion until it passes or the timeout (default 3000ms) expires, handling asynchronous updates.\nSOURCE: https://github.com/devexpress/testcafe/blob/master/CHANGELOG.md#_snippet_193\n\nLANGUAGE: javascript\nCODE:\n```\ntest('Button click', async t => {\n    const btn = Selector('#btn');\n\n    await t\n        .click(btn)\n        // Regular assertion will fail immediately, but TestCafe retries to run DOM state\n        // assertions many times until this assertion pass successfully within the timeout.\n        // The default timeout is 3000 ms.\n        .expect(btn.textContent).contains('Loading...');\n});\n```\n\n----------------------------------------\n\nTITLE: Running TestCafe tests with multiple reporters via Shell command\nDESCRIPTION: This shell command runs all TestCafe tests defined in 'tests/sample-fixture.js' and outputs test reports to the console in 'spec' format as well as saves detailed results to a JSON file named 'report.json'. It demonstrates specifying multiple reporters simultaneously.\nSOURCE: https://github.com/devexpress/testcafe/blob/master/CHANGELOG.md#_snippet_122\n\nLANGUAGE: Shell\nCODE:\n```\ntestcafe all tests/sample-fixture.js -r spec,json:report.json\n```\n\n----------------------------------------\n\nTITLE: Selecting Element in TestCafe\nDESCRIPTION: This JavaScript snippet demonstrates how to select an element using TestCafe's selector API. It searches for an input element within a label that contains the text \"MacOS\" within a specific CSS column. This selector can be used to perform actions on the selected element during a test.\nSOURCE: https://github.com/devexpress/testcafe/blob/master/README.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst macOSInput = Selector('.column').find('label').withText('MacOS').child('input');\n```\n\n----------------------------------------\n\nTITLE: Example HTML for Demonstrating TestCafe Assertions\nDESCRIPTION: Basic HTML markup containing a div element with the id 'btn' and an associated script. The script adds an event listener that changes the div's innerText to 'Loading...' after a 100ms delay, simulating asynchronous behavior for testing assertions.\nSOURCE: https://github.com/devexpress/testcafe/blob/master/CHANGELOG.md#_snippet_192\n\nLANGUAGE: html\nCODE:\n```\n<div id=\"btn\"></div>\n<script>\nvar btn = document.getElementById('btn');\n\nbtn.addEventListener(function() {\n    window.setTimeout(function() {\n        btn.innerText = 'Loading...';\n    }, 100);\n});\n</script>\n```\n\n----------------------------------------\n\nTITLE: Configuring onBeforeWrite Hook in TestCafe\nDESCRIPTION: This JavaScript code defines an `onBeforeWrite` hook to modify the output of a TestCafe reporter. The hook adds the test duration in milliseconds to each test entry in the report. It requires TestCafe and assumes a compatible reporter such as `spec` or `list` is used.  The `onBeforeWrite` hook is triggered before the reporter writes to the output.\nSOURCE: https://github.com/devexpress/testcafe/blob/master/CHANGELOG.md#_snippet_6\n\nLANGUAGE: js\nCODE:\n```\n//.testcaferc.js or .testcaferc.cjs\nfunction onBeforeWriteHook(writeInfo) { // This function will fire every time the reporter calls the \"write\" method.\n    if (writeInfo.initiator === 'reportTestDone') { // The \"initiator\" property contains the name of the reporter event that triggered the hook.\n         const {\n            name,\n            testRunInfo,\n            meta\n        } = writeInfo.data || {}; // If you attached this hook to a compatible reporter (such as \"spec\" or \"list\"), the hook can process data related to the event.\n        const testDuration = testRunInfo.durationMs; // Save the duration of the test.\n        writeInfo.formattedText = writeInfo.formattedText + ' (' + testDuration + 'ms)'; // Add test duration to the reporter output.\n    };\n}\n\n\nmodule.exports = { // Attach the hook\n    hooks: {\n        reporter: {\n            onBeforeWrite: {\n                'spec': onBeforeWriteHook, // This hook will fire when you use the default \"spec\" reporter.\n            },\n        },\n    },\n};\n```\n\n----------------------------------------\n\nTITLE: Sample TestCafe test using React PropTypes check in JavaScript\nDESCRIPTION: This JavaScript example defines a TestCafe fixture and test which types text into a form control, clicks buttons, and invokes an afterEach hook to run PropTypes console error checks. It imports a selector and the PropTypes check function to integrate runtime prop validation reporting.\nSOURCE: https://github.com/devexpress/testcafe/blob/master/CHANGELOG.md#_snippet_133\n\nLANGUAGE: JavaScript\nCODE:\n```\n// test.js\nimport { Selector } from 'testcafe';\nimport checkPropTypes from './check-prop-types';\n\nfixture `react example`\n    .page `http://localhost:8080/`  // https://github.com/mzabriskie/react-example\n    .afterEach(() => checkPropTypes());\n\ntest('test', async t => {\n    await t\n        .typeText(Selector('.form-control'), 'devexpress')\n        .click(Selector('button').withText('Go'))\n        .click(Selector('h4').withText('Organizations'));\n});\n```\n\n----------------------------------------\n\nTITLE: TestCafe Screenshots Configuration Object - JSON\nDESCRIPTION: Shows the standardized way to set screenshot options in the TestCafe configuration file by using a nested 'screenshots' object. Compatible with TestCafe v1.6.0 and newer for best effect, but old properties remain supported for backward compatibility. Main properties are 'path' (string: storage path), 'takeOnFails' (boolean), and 'pathPattern' (string: naming pattern). Input must be valid JSON. Omitting any of the keys reverts behavior to defaults.\nSOURCE: https://github.com/devexpress/testcafe/blob/master/CHANGELOG.md#_snippet_59\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"screenshots\": {\n        \"path\": \"artifacts/screenshots\",\n        \"takeOnFails\": true,\n        \"pathPattern\": \"${DATE}_${TIME}/${FILE_INDEX}.png\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Deprecated t.select replacement in TestCafe\nDESCRIPTION: This code illustrates how to replace the deprecated `t.select` method with `Selector` in TestCafe.  The old and new methods are compared, showing the equivalent functionality using the new `Selector` API.\nSOURCE: https://github.com/devexpress/testcafe/blob/master/CHANGELOG.md#_snippet_191\n\nLANGUAGE: javascript\nCODE:\n```\nconst id = await t.select('.someClass').id;\n\n// can be replaced with\n\nconst id = await Selector('.someClass').id;\n```\n\n----------------------------------------\n\nTITLE: Running TestCafe tests with debugOnFail option programmatically in JavaScript\nDESCRIPTION: This JavaScript code snippet shows how to run TestCafe tests with the 'debugOnFail' option enabled through the runner API, pausing test execution on failures to allow debugging interactions with the tested page.\nSOURCE: https://github.com/devexpress/testcafe/blob/master/CHANGELOG.md#_snippet_125\n\nLANGUAGE: JavaScript\nCODE:\n```\nrunner.run({ debugOnFail: true });\n```\n\n----------------------------------------\n\nTITLE: Configuring Full-Page Screenshots in TestCafe Configuration File (JSON)\nDESCRIPTION: Shows how to enable the full-page screenshot feature globally by setting the `fullPage` property to `true` within the `screenshots` object in a TestCafe configuration file (e.g., `.testcaferc.json`). Requires TestCafe v1.6.0 or later.\nSOURCE: https://github.com/devexpress/testcafe/blob/master/CHANGELOG.md#_snippet_56\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"screenshots\": {\n        \"fullPage\": true\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Injecting Client Scripts TestCafe Fixture API\nDESCRIPTION: Injects specified client-side JavaScript files into pages visited by a particular fixture using the TestCafe Fixture API. This method scopes the script injection to the current fixture.\nSOURCE: https://github.com/devexpress/testcafe/blob/master/CHANGELOG.md#_snippet_74\n\nLANGUAGE: JavaScript\nCODE:\n```\nfixture `My fixture`\n    .page `http://example.com`\n    .clientScripts('mockDate.js', 'scripts/react-helpers.js');\n```\n\n----------------------------------------\n\nTITLE: Running TestCafe tests with pageLoadTimeout option programmatically in JavaScript\nDESCRIPTION: This JavaScript example demonstrates setting the 'pageLoadTimeout' option to 0 through the TestCafe runner API to skip waiting for the 'window.load' event before test execution begins.\nSOURCE: https://github.com/devexpress/testcafe/blob/master/CHANGELOG.md#_snippet_129\n\nLANGUAGE: JavaScript\nCODE:\n```\nrunner.run({\n    pageLoadTimeout: 0\n});\n```\n\n----------------------------------------\n\nTITLE: Disabling Page Caching for Fixture in TestCafe - JavaScript\nDESCRIPTION: Exemplifies use of the .disablePageCaching method chained to a TestCafe fixture declaration. Prevents browser caching within all tests of the specified fixture. Dependency: TestCafe version that supports .disablePageCaching. Key parameter: fixture name. Affects test execution performance, especially on authentication pages.\nSOURCE: https://github.com/devexpress/testcafe/blob/master/CHANGELOG.md#_snippet_66\n\nLANGUAGE: js\nCODE:\n```\nfixture\n    .disablePageCaching `My fixture`\n    .page `https://example.com`;\n```\n\n----------------------------------------\n\nTITLE: Fetching and rebasing upstream changes with git\nDESCRIPTION: These commands fetch the latest changes from the upstream repository and rebase your branch onto the master branch.  This is important to keep your branch up-to-date before submitting a pull request.\nSOURCE: https://github.com/devexpress/testcafe/blob/master/CONTRIBUTING.md#_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\ngit checkout master\n```\n\nLANGUAGE: sh\nCODE:\n```\ngit fetch upstream\n```\n\nLANGUAGE: sh\nCODE:\n```\ngit merge upstream/master\n```\n\n----------------------------------------\n\nTITLE: Installing and Using BrowserStack with TestCafe\nDESCRIPTION: Instructions for installing and configuring the BrowserStack browser provider plugin for TestCafe. Requires setting environment variables for authentication and allows running tests on BrowserStack virtual machines.\nSOURCE: https://github.com/devexpress/testcafe/blob/master/CHANGELOG.md#_snippet_160\n\nLANGUAGE: shell\nCODE:\n```\nnpm install testcafe-browser-provider-browserstack\n```\n\nLANGUAGE: shell\nCODE:\n```\ntestcafe \"browserstack:Chrome@53.0:Windows 10\" \"path/to/test/file.js\"\n```\n\n----------------------------------------\n\nTITLE: Linking TestCafe locally using npm\nDESCRIPTION: This command creates a symbolic link that allows you to use the locally built TestCafe version in your test projects. The first command links TestCafe globally, and the second links it specifically to your test project.\nSOURCE: https://github.com/devexpress/testcafe/blob/master/CONTRIBUTING.md#_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nnpm link\n```\n\nLANGUAGE: sh\nCODE:\n```\nnpm link testcafe\n```\n\n----------------------------------------\n\nTITLE: Specifying TypeScript Config Path TestCafe Configuration File\nDESCRIPTION: Defines the explicit path to a `tsconfig.json` file for TestCafe to apply custom TypeScript compiler options via the TestCafe configuration file (e.g., .testcaferc.json).\nSOURCE: https://github.com/devexpress/testcafe/blob/master/CHANGELOG.md#_snippet_82\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"tsConfigPath\": \"/Users/s.johnson/testcafe/tsconfig.json\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Video Path in TestCafe .testcaferc.json (JSON)\nDESCRIPTION: Example of setting the video recording output path using the `videoPath` property within a TestCafe configuration file (`.testcaferc.json`). When TestCafe runs, it will automatically save videos to this directory if recording is enabled. Requires TestCafe v1.0.0+ and the FFmpeg library.\nSOURCE: https://github.com/devexpress/testcafe/blob/master/CHANGELOG.md#_snippet_90\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"videoPath\": \"artifacts/videos/\"\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing userVariables in TestCafe Tests\nDESCRIPTION: This JavaScript snippet shows how to use custom user variables defined in the configuration file. It imports the `userVariables` object from the `testcafe` module and uses a variable, 'url', to set the page under test. Dependencies: TestCafe and a configuration file with `userVariables` defined.\nSOURCE: https://github.com/devexpress/testcafe/blob/master/CHANGELOG.md#_snippet_18\n\nLANGUAGE: js\nCODE:\n```\nimport { userVariables } from 'testcafe';\n\nfixture `Test user variables`\n    .page(userVariables.url);\n\ntest('Type text', async t => {\n    await t\n        .typeText('#developer-name', 'John Smith')\n        .click('#submit-button');\n});\n```\n\n----------------------------------------\n\nTITLE: Cleaning TestCafe build artifacts using gulp\nDESCRIPTION: This command removes the `/lib` directory, which contains build artifacts. It's useful for ensuring a clean build environment.\nSOURCE: https://github.com/devexpress/testcafe/blob/master/CONTRIBUTING.md#_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\ngulp clean\n```\n\n----------------------------------------\n\nTITLE: Enabling Test Page Retry in JSON Configuration\nDESCRIPTION: JSON configuration example that enables the retry test pages feature in TestCafe configuration file.\nSOURCE: https://github.com/devexpress/testcafe/blob/master/CHANGELOG.md#_snippet_36\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"retryTestPages\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying TypeScript Config Path TestCafe CLI\nDESCRIPTION: Provides the explicit path to a `tsconfig.json` file for TestCafe to apply custom TypeScript compiler options via the command line interface.\nSOURCE: https://github.com/devexpress/testcafe/blob/master/CHANGELOG.md#_snippet_80\n\nLANGUAGE: Shell\nCODE:\n```\ntestcafe chrome my-tests --ts-config-path /Users/s.johnson/testcafe/tsconfig.json\n```\n\n----------------------------------------\n\nTITLE: Packaging TestCafe using npm\nDESCRIPTION: This command creates a .tgz package of the TestCafe framework. It is an alternative way to install the locally built TestCafe version.\nSOURCE: https://github.com/devexpress/testcafe/blob/master/CONTRIBUTING.md#_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nnpm pack\n```\n\n----------------------------------------\n\nTITLE: HTML Input Button Definition\nDESCRIPTION: Defines a standard HTML input element configured as a button. It includes a unique ID for selection and a value attribute for the button's text label. The onclick attribute embeds a JavaScript snippet to be executed when the button is pressed.\nSOURCE: https://github.com/devexpress/testcafe/blob/master/test/functional/fixtures/api/raw/upload/test-data/test.txt#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<input type=\"button\" value=\"Click me\" id=\"button\" onclick=\"throw new Error('File uploaded')\">\n```\n\n----------------------------------------\n\nTITLE: Checking Native Automation Status of Browser with TestCafe in JavaScript\nDESCRIPTION: This snippet shows how to determine if TestCafe controls the browser using native automation by accessing the t.browser.nativeAutomation property, which returns a boolean. The test expects nativeAutomation to be true to proceed, which is important for conditional test logic depending on automation mode. It requires importing Selector and structuring a fixture and test using async/await.\nSOURCE: https://github.com/devexpress/testcafe/blob/master/CHANGELOG.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Selector } from 'testcafe';\n\nfixture`TestController.browser`\n    .page`https://example.com`;\n\ntest('Native automation check', async t => {\n    await t.expect(t.browser.nativeAutomation).ok();\n    //the test continues only if you use native automation\n});\n```\n\n----------------------------------------\n\nTITLE: Defining an HTML Button with an onclick Event\nDESCRIPTION: This HTML snippet defines a button element with the ID 'button1' and text 'Click me'. It includes an inline 'onclick' event handler which executes JavaScript code to set the global variable 'window.firstButtonClicked' to 'true' upon being clicked. This can be used to signal that the button has been interacted with.\nSOURCE: https://github.com/devexpress/testcafe/blob/master/test/functional/fixtures/api/raw/upload/test-data/test2.txt#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<input type=\"button\" value=\"Click me\" id=\"button1\" onclick=\"window.firstButtonClicked = true\">\n```\n\n----------------------------------------\n\nTITLE: Running Tests in Edge using TestCafe Runner API - JavaScript\nDESCRIPTION: This JavaScript snippet uses the TestCafe Runner API to programmatically define test sources and set the target browser to the new Microsoft Edge ('edge' alias). The runner is configured with the test file 'test.js' and browser option 'edge', and then the run() method is called as an async operation. This snippet requires TestCafe installed as a dependency and is suitable for advanced scenarios or integration into build pipelines.\nSOURCE: https://github.com/devexpress/testcafe/blob/master/CHANGELOG.md#_snippet_50\n\nLANGUAGE: js\nCODE:\n```\nawait runner\n    .src('test.js')\n    .browsers('edge')\n    .run();\n```\n\n----------------------------------------\n\nTITLE: Accessing TestCafe Framework Version in JavaScript Tests and Custom Reporters\nDESCRIPTION: This snippet explains how to programmatically obtain the TestCafe framework's version number within test code and custom reporters. It involves importing the `version` export from TestCafe to log the version during test execution. Additionally, when implementing custom reporters, the framework version can be accessed as the first argument of the init function for logging or display purposes. This helps in test diagnostics and reporting accuracy.\nSOURCE: https://github.com/devexpress/testcafe/blob/master/CHANGELOG.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { version } from 'testcafe';\nconsole.log(`TestCafe version: ${version}`);\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\ninit (version) {\n   this\n      .write(`Using TestCafe ${version}`)\n      .newline()\n}\n```\n\n----------------------------------------\n\nTITLE: Executing TestCafe with Skip Uncaught Errors Flag - Shell\nDESCRIPTION: This shell command shows how to run TestCafe from the command line with the --skipUncaughtErrors flag enabled, which allows tests to continue execution even when uncaught server errors or unhandled promise rejections occur. Prerequisites: TestCafe installed and test files/filesystem present. Key parameter: --skipUncaughtErrors. Input is a shell command with browser and test path. Output is the continuation or completion of test execution under the specified error handling policy.\nSOURCE: https://github.com/devexpress/testcafe/blob/master/CHANGELOG.md#_snippet_105\n\nLANGUAGE: Shell\nCODE:\n```\ntestcafe chrome tests/fixture.js --skipUncaughtErrors\n```\n\n----------------------------------------\n\nTITLE: Removing deprecated TestCafe API members and methods\nDESCRIPTION: Details the removal of deprecated TestCafe members, encouraging modern usage patterns: replacing 't.select' with 'Selector', and using 'selector.nth()' and 'selector.withText()' instead of options like 'index' and 'text'. This consolidates selector creation and filtering practices.\nSOURCE: https://github.com/devexpress/testcafe/blob/master/CHANGELOG.md#_snippet_172\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst id = await t.select('.someClass').id;\n// replaces with\nconst id = await Selector('.someClass').id;\n```\n\n----------------------------------------\n\nTITLE: Asserting Regular Promises in TestCafe (JavaScript)\nDESCRIPTION: Shows how to use the `t.expect` assertion method with a regular promise, which is now deprecated without specific handling. The `allowUnawaitedPromise: true` option is used within the assertion options object to permit asserting the promise's resolution without an explicit `await` on the promise itself before passing it to `t.expect`.\nSOURCE: https://github.com/devexpress/testcafe/blob/master/CHANGELOG.md#_snippet_116\n\nLANGUAGE: JavaScript\nCODE:\n```\nawait t.expect(doSomethingAsync()).ok('check that a promise is returned', { allowUnawaitedPromise: true });\n```\n\n----------------------------------------\n\nTITLE: Accessing Snapshot Properties (Pre-Shorthand Method 2)\nDESCRIPTION: Shows an alternative older method for accessing a snapshot property in a single line using parentheses around the awaited selector call before accessing the property (e.g., `.nodeType`).\nSOURCE: https://github.com/devexpress/testcafe/blob/master/CHANGELOG.md#_snippet_196\n\nLANGUAGE: javascript\nCODE:\n```\nconst nodeType = (await selector()).nodeType;\n```\n\n----------------------------------------\n\nTITLE: Throwing JavaScript Error on HTML Button Click\nDESCRIPTION: This JavaScript snippet is executed inline within the HTML button's onclick attribute. It creates a new JavaScript Error object with a specific message and immediately throws it. This action is typically used for error handling or, in this context, possibly for simulating an error condition for testing purposes.\nSOURCE: https://github.com/devexpress/testcafe/blob/master/test/functional/fixtures/api/raw/upload/test-data/test.txt#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nthrow new Error('File uploaded')\n```\n\n----------------------------------------\n\nTITLE: Executing TestCafe Example Tests (Shell)\nDESCRIPTION: Runs the preconfigured test script defined in the project's 'package.json' file using the 'npm test' command. Assumes the setup steps (cloning, cd, npm install) have been completed successfully.\nSOURCE: https://github.com/devexpress/testcafe/blob/master/examples/basic/README.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpm test\n```\n\n----------------------------------------\n\nTITLE: Setting Up the TestCafe Example Project (Shell)\nDESCRIPTION: Clones the TestCafe Git repository, navigates into the 'examples/basic' directory, and installs the necessary Node.js project dependencies using npm. Requires Git and Node.js/npm to be installed.\nSOURCE: https://github.com/devexpress/testcafe/blob/master/examples/basic/README.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/DevExpress/testcafe.git\ncd examples/basic\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Installing Electron Module\nDESCRIPTION: This code snippet provides the shell command to install the electron module, a dependency for the testcafe-browser-provider-electron plugin.\nSOURCE: https://github.com/devexpress/testcafe/blob/master/CHANGELOG.md#_snippet_137\n\nLANGUAGE: shell\nCODE:\n```\nnpm install electron@latest\n```\n\n----------------------------------------\n\nTITLE: Installing TestCafe from package using npm\nDESCRIPTION: This command installs the TestCafe package globally. Replace `path/to/package` with the actual path to the .tgz package created by `npm pack`.\nSOURCE: https://github.com/devexpress/testcafe/blob/master/CONTRIBUTING.md#_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nnpm install -g path/to/package\n```\n\n----------------------------------------\n\nTITLE: Installing TestCafe dependencies using npm\nDESCRIPTION: This command installs all necessary dependencies required to build and run TestCafe from source. It needs to be executed in the root directory of the cloned TestCafe repository.\nSOURCE: https://github.com/devexpress/testcafe/blob/master/CONTRIBUTING.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpm install\n```"
  }
]