[
  {
    "owner": "cknow",
    "repo": "laravel-money",
    "content": "TITLE: Using Advanced Operations with Money Class\nDESCRIPTION: Showcases various monetary operations such as addition, subtraction, multiplication, division, modulus, and comparison methods. Requires dependency on the Cknow\\Money\\Money class. Inputs are multiple Money instances or scalar values, outputs are results of calculations or boolean comparisons.\nSOURCE: https://github.com/cknow/laravel-money/blob/main/README.md#_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nMoney::USD(500)->add(Money::USD(500)); // $10.00\nMoney::USD(500)->add(Money::USD(500), Money::USD(500)); // $15.00\nMoney::USD(500)->subtract(Money::USD(400)); // $1.00\nMoney::USD(500)->subtract(Money::USD(200), Money::USD(100)); // $2.00\nMoney::USD(500)->multiply(2); // $10.00\nMoney::USD(1000)->divide(2); // $5.00\nMoney::USD(830)->mod(Money::USD(300)); // $2.30 -> Money::USD(230)\nMoney::USD(-500)->absolute(); // $5.00\nMoney::USD(500)->negative(); // $-5.00\nMoney::USD(30)->ratioOf(Money::USD(2)); // 15\nMoney::USD(500)->isSameCurrency(Money::USD(100)); // true\nMoney::USD(500)->equals(Money::USD(500)); // true\nMoney::USD(500)->greaterThan(Money::USD(100)); // true\nMoney::USD(500)->greaterThanOrEqual(Money::USD(500)); // true\nMoney::USD(500)->lessThan(Money::USD(1000)); // true\nMoney::USD(500)->lessThanOrEqual(Money::USD(500)); // true\nMoney::USD(500)->isZero(); // false\nMoney::USD(500)->isPositive(); // true\nMoney::USD(500)->isNegative(); // false\nMoney::USD(500)->getMoney(); // Instance of \\Money\\Money\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Money Class for Currency Operations\nDESCRIPTION: Demonstrates how to instantiate Money objects with specific currencies and amounts, and perform basic operations like display and formatting. Dependencies include the Cknow\\Money\\Money class. Inputs are amounts and currency codes, and outputs are formatted monetary values.\nSOURCE: https://github.com/cknow/laravel-money/blob/main/README.md#_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\necho Money::USD(500); // $5.00\necho Money::USD(500, true); // $500.00 force decimals\n```\n\n----------------------------------------\n\nTITLE: Using Formatters for Money Representation\nDESCRIPTION: Details how to format Money objects into string representations using default, currency-specific, decimal, Bitcoin, and international formats. Dependencies include the Money class and PHP's NumberFormatter. Inputs are Money instances and formatting options, outputs are formatted string representations.\nSOURCE: https://github.com/cknow/laravel-money/blob/main/README.md#_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\nMoney::USD(500)->format(); // $5.00\nMoney::USD(199)->format(null, null, \\NumberFormatter::DECIMAL); // 1,99\nMoney::XBT(41000000)->formatByBitcoin(); // ɹ¥830.41\nMoney::USD(500)->formatByCurrencySymbol(); // $5.00\nMoney::USD(500)->formatByCurrencySymbol(true); // 5.00$\nMoney::USD(500)->formatByDecimal(); // 5.00\nMoney::USD(500)->formatByIntl(); // $5.00\nMoney::USD(199)->formatByIntl(null, null, \\NumberFormatter::DECIMAL); // 1,99\nMoney::USD(500)->formatByIntlLocalizedDecimal(); // $5.00\nMoney::USD(199)->formatByIntlLocalizedDecimal(null, null, \\NumberFormatter::DECIMAL) // 1.99\n```\n\n----------------------------------------\n\nTITLE: Parsing Strings into Money Objects\nDESCRIPTION: Illustrates parsing string representations of money, including currency symbols and Bitcoin notation, into Money instances. Functions depend on the Money class and string input. Inputs are strings, outputs are Money objects with the appropriate amount and currency.\nSOURCE: https://github.com/cknow/laravel-money/blob/main/README.md#_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\nMoney::parse('$1.00'); // Money::USD(100)\nMoney::parseByBitcoin(\"\\xC9\\x830.41\"); // Money::XBT(41000000)\nMoney::parseByDecimal('1.00', 'USD'); // Money::USD(100)\nMoney::parseByIntl('$1.00'); // Money::USD(100)\nMoney::parseByIntlLocalizedDecimal('1.00', 'USD'); // Money::USD(100)\n```\n\n----------------------------------------\n\nTITLE: Configuring Laravel Money via Published Configuration File\nDESCRIPTION: Provides the default configuration array for the package including locale, default currency, formatter, and supported currencies. Dependencies include standard Laravel config functions. Inputs are configuration settings, and outputs are the configuration array used internally by the package.\nSOURCE: https://github.com/cknow/laravel-money/blob/main/README.md#_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nreturn [\n    'locale' => config('app.locale', 'en_US'),\n    'defaultCurrency' => config('app.currency', 'USD'),\n    'defaultFormatter' => null,\n    'currencies' => [\n        'iso' => ['RUB', 'USD', 'EUR'],\n        'bitcoin' => ['XBT'],\n        'custom' => [\n            'MY1' => 2,\n            'MY2' => 3\n        ]\n    ]\n];\n```\n\n----------------------------------------\n\nTITLE: Creating and Using a Custom Money Formatter\nDESCRIPTION: Provides an example of implementing a custom formatter class adhering to the MoneyFormatter interface, which formats Money objects into strings. Demonstrates how to assign a custom formatter to format Money objects uniquely within the application.\nSOURCE: https://github.com/cknow/laravel-money/blob/main/README.md#_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\nclass MyFormatter implements \\Money\\MoneyFormatter\n{\n    /**\n     * Formats a Money object as string.\n     */\n    public function format(\\Money\\Money $money): string\n    {\n        return 'My Formatter';\n    }\n}\n\nMoney::USD(500)->formatByFormatter(new MyFormatter()); // My Formatter\n```"
  }
]