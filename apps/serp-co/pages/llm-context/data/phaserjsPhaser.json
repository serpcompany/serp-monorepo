[
  {
    "owner": "phaserjs",
    "repo": "phaser",
    "content": "TITLE: Initializing Phaser 3 with Facebook Instant Games\nDESCRIPTION: This HTML snippet demonstrates how to include the Facebook SDK and Phaser with the Facebook Instant Games plugin. It shows the proper initialization sequence, waiting for FBInstant.initializeAsync() before creating the Phaser game instance.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/plugins/fbinstant/readme.md#2025-04-16_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html>\n    <head>\n        <title>Phaser 3 Facebook Instant Games</title>\n        <meta charset=\"utf-8\">\n        <script src=\"https://connect.facebook.net/en_US/fbinstant.6.2.js\"></script>\n        <script src=\"lib/phaser-facebook-instant-games.js\"></script>\n    </head>\n    <body>\n\n    FBInstant.initializeAsync().then(function() {\n\n        var config = {\n            type: Phaser.AUTO,\n            width: window.innerWidth,\n            height: window.innerHeight,\n            scene: ...\n        };\n\n        new Phaser.Game(config);\n\n    });\n\n    </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Creating Particle Emitter in Phaser 3.60.0\nDESCRIPTION: New simplified way to create a particle emitter directly, without using ParticleEmitterManager. Creates a red flare emitter at coordinates 100x300.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.60/ParticleEmitter.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst emitter = this.add.particles(100, 300, 'flares', {\n    frame: 'red',\n    angle: { min: -30, max: 30 },\n    speed: 150\n});\n```\n\n----------------------------------------\n\nTITLE: Loading and Using Custom Fonts in Phaser 3.87\nDESCRIPTION: Demonstrates how to load TTF/OTF fonts using the new FontFile loader and apply them to Text Game Objects. The example shows loading two fonts in the preload function and using them in the create function.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.87/CHANGELOG-v3.87.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\npreload ()\n{\n    this.load.font('Caroni', 'assets/fonts/ttf/caroni.otf', 'opentype');\n    this.load.font('troika', 'assets/fonts/ttf/troika.otf', 'opentype');\n}\n\ncreate ()\n{\n    this.add.text(32, 32, 'The face of the moon was in shadow.', { fontFamily: 'troika', fontSize: 80, color: '#ff0000' });\n    this.add.text(150, 350, 'Waves flung themselves at the blue evening.', { fontFamily: 'Caroni', fontSize: 64, color: '#5656ee' });\n}\n```\n\n----------------------------------------\n\nTITLE: Setting an Interactive Game Object with Pixel Perfect Detection\nDESCRIPTION: Example of how to make a sprite interactive with pixel perfect hit detection, which checks the actual pixel data of the texture when determining input interactions.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.10/CHANGELOG-v3.10.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nthis.add.sprite(x, y, key).setInteractive(this.input.makePixelPerfect())\n```\n\n----------------------------------------\n\nTITLE: Basic Usage Example of Camera3D Plugin in Phaser 3\nDESCRIPTION: This comprehensive example demonstrates how to use the Camera3D plugin in a Phaser 3 game. It includes the game configuration, preloading the plugin and assets, creating a 3D camera with sprites, and updating the camera transformation in each frame.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/plugins/camera3d/readme.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar config = {\n    type: Phaser.AUTO,\n    width: 800,\n    height: 600,\n    scene: {\n        preload: preload,\n        create: create,\n        update: update\n    }\n};\n\nvar camera;\nvar transform;\n\nvar game = new Phaser.Game(config);\n\nfunction preload ()\n{\n    this.load.scenePlugin('Camera3DPlugin', 'plugins/camera3d.min.js', 'Camera3DPlugin', 'cameras3d');\n\n    this.load.image('particle', 'assets/sprites/mushroom2.png');\n}\n\nfunction create ()\n{\n    camera = this.cameras3d.add(85).setZ(300).setPixelScale(128);\n\n    var sprites = camera.createRect({ x: 4, y: 4, z: 16 }, { x: 48, y: 48, z: 32 }, 'particle');\n\n    //  Our rotation matrix\n    transform = new Phaser.Math.Matrix4().rotateX(-0.01).rotateY(-0.02).rotateZ(0.01);\n}\n\nfunction update ()\n{\n    camera.transformChildren(transform);\n}\n```\n\n----------------------------------------\n\nTITLE: Loading and Adding Video in Phaser 3\nDESCRIPTION: Demonstrates how to preload a video file and add it as a Video Game Object in a Phaser 3 game. The video is loaded in the preload function and then added to the game in the create function.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.20/CHANGELOG-v3.20.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\npreload () {\n  this.load.video('pixar', 'nemo.mp4');\n}\n\ncreate () {\n  this.add.video(400, 300, 'pixar');\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ESM Imports with Phaser 3.60\nDESCRIPTION: Demonstrates how to use the new ESM support in Phaser 3.60 by importing specific modules and creating a basic game setup. Shows the modern ES Module import syntax and basic scene configuration with game initialization.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.60/ESMSupport.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { AUTO, Scene, Game } from './phaser.esm.js';\n\nclass Test extends Scene\n{\n    constructor ()\n    {\n        super();\n    }\n\n    create ()\n    {\n        this.add.text(10, 10, 'Welcome to Phaser ESM');\n    }\n}\n\nconst config = {\n    type: AUTO,\n    width: 800,\n    height: 600,\n    parent: 'phaser-example',\n    scene: [ Test ]\n};\n\nconst game = new Game(config);\n```\n\n----------------------------------------\n\nTITLE: Installing Phaser Game CLI\nDESCRIPTION: Commands to create new Phaser game projects using various package managers including npm, yarn, pnpm and bun.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm create @phaserjs/game@latest\nnpx @phaserjs/create-game@latest\nyarn create @phaserjs/game\npnpm create @phaserjs/game@latest\nbun create @phaserjs/game@latest\n```\n\n----------------------------------------\n\nTITLE: Using Direct Control with Arcade Physics Bodies\nDESCRIPTION: Enabling direct control mode for Arcade Physics bodies to calculate velocity based on position changes, useful for tweens, pointer following, or path following while maintaining collision detection.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.70/CHANGELOG-v3.70.md#2025-04-16_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Enable direct control on a physics body\nsprite.body.setDirectControl(true);\n\n// Now you can directly modify position and collisions will still work\nsprite.x = pointerX;\nsprite.y = pointerY;\n```\n\n----------------------------------------\n\nTITLE: Creating a Complex Timeline with Multiple Events in Phaser 3.60\nDESCRIPTION: Demonstrates a more complex Timeline implementation with multiple sequenced events including sprite creation, tweening, sound playback, and property setting at different time points.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.60/Timeline.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst timeline = this.add.timeline([\n    {\n        at: 1000,\n        run: () => { this.logo = this.add.sprite(400, 300, 'logo'); },\n        sound: 'TitleMusic'\n    },\n    {\n        at: 2500,\n        tween: {\n            targets: this.logo,\n            y: 600,\n            yoyo: true\n        },\n        sound: 'Explode'\n    },\n    {\n        at: 8000,\n        event: 'HURRY_PLAYER',\n        target: this.background,\n        set: {\n            tint: 0xff0000\n        }\n    }\n]);\n\ntimeline.play();\n```\n\n----------------------------------------\n\nTITLE: Using Collision Categories in Arcade Physics\nDESCRIPTION: Creating and assigning physics collision categories to control which objects can collide with each other. Up to 32 unique categories can be defined per world.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.70/CHANGELOG-v3.70.md#2025-04-16_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Create collision categories\nconst CATEGORY_PLAYER = this.physics.world.nextCategory();\nconst CATEGORY_ENEMY = this.physics.world.nextCategory();\nconst CATEGORY_BULLET = this.physics.world.nextCategory();\nconst CATEGORY_WALL = this.physics.world.nextCategory();\n\n// Assign categories\nplayer.setCollisionCategory(CATEGORY_PLAYER);\nenemies.setCollisionCategory(CATEGORY_ENEMY);\nbullets.setCollisionCategory(CATEGORY_BULLET);\nwalls.setCollisionCategory(CATEGORY_WALL);\n\n// Configure what each category collides with\nplayer.setCollidesWith([CATEGORY_ENEMY, CATEGORY_WALL]);\nenemies.setCollidesWith([CATEGORY_PLAYER, CATEGORY_BULLET, CATEGORY_WALL]);\nbullets.setCollidesWith([CATEGORY_ENEMY, CATEGORY_WALL]);\n\n// Reset to default collision (collides with everything)\nsprite.resetCollision();\n```\n\n----------------------------------------\n\nTITLE: Including Phaser via CDN\nDESCRIPTION: HTML script tags to include Phaser from jsDelivr and Cloudflare CDNs, with both full and minified versions available.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/README.md#2025-04-16_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"//cdn.jsdelivr.net/npm/phaser@3.88.2/dist/phaser.js\"></script>\n<script src=\"//cdn.jsdelivr.net/npm/phaser@3.88.2/dist/phaser.min.js\"></script>\n```\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/phaser/3.88.2/phaser.js\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/phaser/3.88.2/phaser.min.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Drawing Rounded Rectangles in Graphics Objects\nDESCRIPTION: New methods for drawing filled and stroked rounded rectangles in Graphics objects. The corner radius can be specified as a single number or an object for different radii per corner.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.11/CHANGELOG-v3.11.md#2025-04-16_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nGraphics.fillRoundedRect(x, y, width, height, radius);\nGraphics.strokeRoundedRect(x, y, width, height, radius);\n```\n\n----------------------------------------\n\nTITLE: Input Event Processing Flow\nDESCRIPTION: The core input event processing flow in PhaserJS v3.85. Handles event propagation, cancellation, and state management for interactive game objects.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.85/CHANGELOG-v3.85.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n1) Iterate over objects for inspection\n2) If object has input handler, dispatch Game Object specific event\n3) Check event result - break if cancelled or Input Plugin inactive\n4) If object still input enabled, emit Scene level events\n5) Check results again for cancellation/inactive state\n6) If passes final checks, emit Input Plugin event\n```\n\n----------------------------------------\n\nTITLE: Initializing Spatial Sound in Phaser 3\nDESCRIPTION: Example showing how to create and position a spatial sound in a Phaser game. Demonstrates setting listener position and configuring a sound with 3D positioning and player sprite following.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.60/SpatialSound.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nthis.music = this.sound.add('theme');\n\nthis.sound.setListenerPosition(400, 300);\n\nthis.music.play({\n    loop: true,\n    source: {\n        x: 400,\n        y: 300,\n        refDistance: 50,\n        follow: this.playerSprite\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Creating an Animation in Phaser 3 JavaScript\nDESCRIPTION: Creates a new animation or returns an existing one if the key is already in use.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.16/CHANGELOG-v3.16.md#2025-04-16_snippet_16\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst animation = AnimationManager.create(config);\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Timeline in Phaser 3.60\nDESCRIPTION: Demonstrates how to create a basic Timeline instance using the Game Object Factory. The Timeline always starts paused and must be explicitly played.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.60/Timeline.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst timeline = this.add.timeline();\n```\n\n----------------------------------------\n\nTITLE: Configuring Tween Property with Start-From-To Values in Phaser 3\nDESCRIPTION: Demonstrates setting 'start', 'from', and 'to' values for a tween property. This sets an immediate value, then after delays, it starts tweening from another value to the final value.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.19/CHANGELOG-v3.19.md#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nalpha: { start: 0, from: 0.5, to: 1 }\n```\n\n----------------------------------------\n\nTITLE: Chaining Sprite Animations in Phaser 3\nDESCRIPTION: Demonstrates how to sequence multiple sprite animations to play in order using the new nextAnimsQueue property of the Animation component.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.24/CHANGELOG-v3.24.md#2025-04-16_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nthis.mole.anims.play('digging').anims.chain('lifting').anims.chain('looking').anims.chain('lowering');\n```\n\n----------------------------------------\n\nTITLE: Using Staggered Tween Delay in Phaser 3\nDESCRIPTION: Demonstrates how to create a staggered tween delay effect using the new StaggerBuilder function. This allows for elements to animate with progressive timing offsets based on their position in a collection.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.19/CHANGELOG-v3.19.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ndelay: this.tweens.stagger(500)\n```\n\n----------------------------------------\n\nTITLE: Adding Glow Effect to a Sprite in Phaser\nDESCRIPTION: Demonstrates how to add a pre-rendering glow effect to a sprite. This example creates a player sprite and adds a 32-pixel red glow around it using the preFX API.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.60/FX.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst player = this.add.sprite(x, y, texture);\n\nplayer.preFX.addGlow(0xff0000, 32);\n```\n\n----------------------------------------\n\nTITLE: Setting Scale Manager Snap Configuration\nDESCRIPTION: Example of configuring the Scale Manager snap values in the game config to enforce dimension constraints. Useful for pixel-art games or maintaining specific aspect ratios.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.80/CHANGELOG-v3.80.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  snap: {\n    width: 16,\n    height: 16\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating DOM Elements in Phaser 3\nDESCRIPTION: Demonstrates creation of a DOM Element game object with custom styling and text content. The example shows how to position, size, and style a div element within the Phaser game context.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.17/CHANGELOG-v3.17.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nthis.add.dom(x, y, 'div', 'background-color: lime; width: 220px; height: 100px; font: 48px Arial', 'Phaser');\n```\n\n----------------------------------------\n\nTITLE: Loading and Creating Shaders in Phaser 3\nDESCRIPTION: Demonstrates how to load a GLSL shader file in preload and create a shader game object. The shader is loaded using the GLSL File Loader and then instantiated as a game object with specific dimensions.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.17/CHANGELOG-v3.17.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction preload () {\n    this.load.glsl('fire', 'shaders/fire.glsl.js');\n}\n \nfunction create () {\n    this.add.shader('fire', 400, 300, 512, 512);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Animation Events in Phaser 3\nDESCRIPTION: Demonstrates how to use the new animation events in Phaser 3, replacing the previous callback system. This allows for more specific control over animations for individual game objects.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.4/CHANGELOG-v3.4.md#2025-04-16_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nsprite.on('animationstart', function() {\n    // Code to run when animation starts\n});\n```\n\n----------------------------------------\n\nTITLE: Testing WebGL Context Loss and Restore in Phaser\nDESCRIPTION: Demonstrates how to simulate WebGL context loss and restoration using the WEBGL_lose_context extension. The code forces context loss after 1 second and restores it after another second, useful for testing context restoration handling.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.80/WebGLContextRestore.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst webGLLoseContextExtension = game.renderer.getExtension('WEBGL_lose_context');\n\nsetTimeout(function () {\n    webGLLoseContextExtension.loseContext();\n    setTimeout(function () {\n        webGLLoseContextExtension.restoreContext();\n    }, 1000)\n}, 1000);\n```\n\n----------------------------------------\n\nTITLE: Adding Matter.js Attractor to Game Object\nDESCRIPTION: Demonstrates how to add an attractor to a Matter.js game object using the new attractors property. The attractor function calculates attraction force based on position differences between two bodies.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.85/MatterAttractor.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n    this.matter.add.image(x, y, 'key', null, {\n        attractors: [\n            (bodyA, bodyB) => ({\n                x: (bodyA.position.x - bodyB.position.x) * 0.000001,\n                y: (bodyA.position.y - bodyB.position.y) * 0.000001\n            })\n        ]\n    });\n```\n\n----------------------------------------\n\nTITLE: Setting Particle Sort Order in Phaser\nDESCRIPTION: Shows how to control the rendering order of particles in Phaser v3.60. This example creates a particle emitter and configures it to sort particles based on their y-coordinate in ascending order before rendering.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.60/ParticleEmitter.md#2025-04-16_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nconst emitter = this.add.particles(100, 300, 'blocks', {\n    frame: 'redmonster',\n    lifespan: 5000,\n    angle: { min: -30, max: 30 },\n    speed: 150,\n    frequency: 200\n});\n\nemitter.setSortProperty('y', true);\n```\n\n----------------------------------------\n\nTITLE: Adding Death Zones to Particles in Phaser\nDESCRIPTION: Shows how to add a death zone to a particle emitter in Phaser v3.60. The code creates a circular area where particles will be destroyed when they enter it.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.60/ParticleEmitter.md#2025-04-16_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nconst circle = new Phaser.Geom.Circle(0, 0, 160);\n\nconst emitter = this.add.particles(400, 300, 'metal');\n\nemitter.addDeathZone({ type: 'onEnter', source: circle });\n```\n\n----------------------------------------\n\nTITLE: Listening for Pointer Down Outside Event in Phaser.js Scene\nDESCRIPTION: This code illustrates how to listen for the 'pointerdownoutside' event in a Phaser.js scene, which is triggered when the mouse or a pointer is pressed down while outside of the game canvas.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.16/CHANGELOG-v3.16.md#2025-04-16_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\nthis.input.on('pointerdownoutside')\n```\n\n----------------------------------------\n\nTITLE: Enhanced Animation Control for Particle Emitters in Phaser.js\nDESCRIPTION: The 'anims' property in ParticleEmitter configuration now accepts a 'Phaser.Types.Animations.PlayAnimationConfig' object, providing more control over particle animations.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.70/CHANGELOG-v3.70.md#2025-04-16_snippet_14\n\nLANGUAGE: JavaScript\nCODE:\n```\nnew ParticleEmitter({\n  anims: {\n    // PlayAnimationConfig object\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Using Key Events in Phaser 3.16\nDESCRIPTION: Demonstrates how to use the new event emitter functionality of the Key class. This allows direct listening for 'down' and 'up' events on individual keys.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.16/CHANGELOG-v3.16.md#2025-04-16_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst spaceKey = this.input.keyboard.addKey('SPACE');\n\nspaceKey.on('down', () => {\n  console.log('Space key pressed');\n});\n\nspaceKey.on('up', () => {\n  console.log('Space key released');\n});\n```\n\n----------------------------------------\n\nTITLE: Vector2 Operations in Phaser 3\nDESCRIPTION: New methods for Vector2 manipulation including setting angle and length, normalization, limitation, reflection, mirroring, and rotation.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.23/CHANGELOG-v3.23.md#2025-04-16_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nvector.fuzzyEquals(otherVector);\nvector.setAngle(angle);\nvector.setLength(length);\nvector.normalizeLeftHand();\nvector.limit(max);\nvector.reflect(normal);\nvector.mirror(axis);\nvector.rotate(angle);\n```\n\n----------------------------------------\n\nTITLE: Creating Sprites from Tilemap with Extended Properties\nDESCRIPTION: Method call to create sprites from tilemap tiles, copying tile properties including rotation, flip states, alpha, visibility and tint to the created sprites.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.80/CHANGELOG-v3.80.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nTilemap.createFromTiles(fromTile, toTile, spriteConfig)\n```\n\n----------------------------------------\n\nTITLE: Using Nine Slice with Texture Packer Data\nDESCRIPTION: Creating Nine Slice Game Objects that automatically use the scale9 data exported from Texture Packer v7.1.0+, eliminating the need to manually specify border sizes.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.70/CHANGELOG-v3.70.md#2025-04-16_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Create a NineSlice using Texture Packer's scale9 data\nconst panel = this.add.nineslice(x, y, 'atlas', 'panel');\n\n// Create with explicit size\nconst panel = this.add.nineslice(x, y, 'atlas', 'panel', 300, 200);\n\n// Override the Texture Packer scale9 data\nconst panel = this.add.nineslice(x, y, 'atlas', 'panel', 300, 200);\npanel.setSlices(10, 10, 10, 10, true); // true skips the scale9 data\n```\n\n----------------------------------------\n\nTITLE: Configuring Tween Property with From-To Values in Phaser 3\nDESCRIPTION: Demonstrates setting both 'from' and 'to' values for a tween property. This sets the initial value after delays expire and then tweens to the final value.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.19/CHANGELOG-v3.19.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nalpha: { from: 0, to: 1 }\n```\n\n----------------------------------------\n\nTITLE: Listening for Game Mouse Events\nDESCRIPTION: Shows how to listen for the new mouseout and mouseover events dispatched by the Game object when the mouse leaves or enters the game canvas.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.10/CHANGELOG-v3.10.md#2025-04-16_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nthis.sys.game.events.on('mouseover')\n```\n\n----------------------------------------\n\nTITLE: Adding a New Pointer in Phaser 3\nDESCRIPTION: Method for adding additional active pointers to the Input Manager, allowing for multi-touch support in games. This can be called from the Input Manager or Plugin.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.10/CHANGELOG-v3.10.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nthis.input.addPointer()\n```\n\n----------------------------------------\n\nTITLE: Animated Particles with Single Animation\nDESCRIPTION: Configuration for particles that play a single animation named 'prism' on emission.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.60/ParticleEmitter.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst emitter = this.add.particles(400, 300, 'gems', {\n    anim: 'prism'\n    ...\n});\n```\n\n----------------------------------------\n\nTITLE: Using New Animation Control Methods in Phaser 3\nDESCRIPTION: Showcases new methods for controlling animations in Phaser 3, including stopping animations after a delay, on repeat, or on a specific frame.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.4/CHANGELOG-v3.4.md#2025-04-16_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nAnimation.stopAfterDelay(1000); // Stop after 1 second\nAnimation.stopOnRepeat();\nAnimation.stopOnFrame(frameObject);\n```\n\n----------------------------------------\n\nTITLE: Creating a Point Light using the Scene Creator in Phaser\nDESCRIPTION: Creates a Point Light Game Object using the Scene's make creator method with a configuration object. This approach allows setting position coordinates, color, radius, intensity, and attenuation through a single object parameter.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.50/CHANGELOG-v3.50.md#2025-04-16_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nthis.make.pointlight({ x, y, color, radius, intensity, attenuation });\n```\n\n----------------------------------------\n\nTITLE: Configuring Arcade Physics Settings\nDESCRIPTION: Example of configuring Arcade Physics with new fixed time-step and damping features. Shows how to set FPS, time scale, and use damping for smooth deceleration.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.10/CHANGELOG-v3.10.md#2025-04-16_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nconst config = {\n  physics: {\n    default: 'arcade',\n    arcade: {\n      fps: 240, // Higher fps for more accurate simulation\n      useTree: false, // Disable RTree for dense worlds\n      timeScale: 1 // Default time scale\n    }\n  }\n};\n\n// Configure body damping\nbody.useDamping = true; // Enable smooth deceleration\n```\n\n----------------------------------------\n\nTITLE: Setting Tilemap Render Order in Phaser.js\nDESCRIPTION: Demonstrates the four new render order options for Tilemaps in Phaser.js. These options control the z-order of tiles during rendering, allowing for different drawing patterns.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.12/CHANGELOG-v3.12.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// Render order options:\n0 = right-down\n1 = left-down\n2 = right-up\n3 = left-up\n```\n\n----------------------------------------\n\nTITLE: Using setTintFill Method in Phaser 3\nDESCRIPTION: Shows how to use the new setTintFill method on Game Objects with the Tint component. This method allows for replacing pixel colors with tint colors, enabling effects like flashing a sprite white when hit.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.11/CHANGELOG-v3.11.md#2025-04-16_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nsprite.setTintFill(0xFFFFFF); // Set white tint fill\n```\n\n----------------------------------------\n\nTITLE: Retrieving Viewport with ScaleManager in Phaser\nDESCRIPTION: New method added to the ScaleManager that returns a Rectangle geometry object matching the visible screen area or a specific Camera instance.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.60/ScaleManager.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* `ScaleManager.getViewPort` is a new method that will return a Rectangle geometry object that matches the visible area of the screen, or the given Camera instance (thanks @rexrainbow)\n```\n\n----------------------------------------\n\nTITLE: Playing an Animation with Custom Configuration in Phaser\nDESCRIPTION: Shows how to play an animation using the new PlayAnimationConfig object, which allows overriding default animation settings such as duration, delay, and yoyo.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.50/CHANGELOG-v3.50.md#2025-04-16_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\nsprite.play({\n    key: 'walk',\n    frameRate: 20,\n    duration: 2000,\n    delay: 500,\n    repeat: 2,\n    yoyo: true\n});\n```\n\n----------------------------------------\n\nTITLE: Particle Interpolation Configuration\nDESCRIPTION: Example of creating a particle emitter with interpolated movement between multiple points using catmull rom interpolation.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.60/ParticleEmitter.md#2025-04-16_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst emitter = this.add.particles(0, 0, 'texture', {\n    x: { values: [ 50, 500, 200, 800 ], interpolation: 'catmull' }\n    ...\n});\n```\n\n----------------------------------------\n\nTITLE: Particle Emitter Event Handlers\nDESCRIPTION: Example of setting up event handlers for the five new particle emitter events: start, explode, deathzone, stop, and complete.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.60/ParticleEmitter.md#2025-04-16_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconst emitter = this.add.particles(0, 0, 'flares');\n\nemitter.on('start', (emitter) => {\n    //  emission started\n});\n\nemitter.on('explode', (emitter, particle) => {\n    //  emitter 'explode' called\n});\n\nemitter.on('deathzone', (emitter, particle, deathzone) => {\n    //  emitter 'death zone' called\n});\n\nemitter.on('stop', (emitter) => {\n    //  emission has stopped\n});\n\nemitter.on('complete', (emitter) => {\n    //  all particles fully dead\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing Gamepad in Phaser Scene\nDESCRIPTION: Illustrates how to access gamepad instances in a Phaser scene using the new Gamepad Plugin system.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.10/CHANGELOG-v3.10.md#2025-04-16_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nthis.input.gamepad.pad1\n```\n\n----------------------------------------\n\nTITLE: Listening for Pointer Up Outside Event in Phaser.js Scene\nDESCRIPTION: This snippet demonstrates how to listen for the 'pointerupoutside' event in a Phaser.js scene, which is triggered when the mouse or a pointer is released while outside of the game canvas.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.16/CHANGELOG-v3.16.md#2025-04-16_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\nthis.input.on('pointerupoutside')\n```\n\n----------------------------------------\n\nTITLE: Scene Management with Data Passing\nDESCRIPTION: Updated scene management methods now include an optional 'data' argument that is passed to the target Scene and emitted in its corresponding event.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.11/CHANGELOG-v3.11.md#2025-04-16_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\nScenePlugin.pause(key, data);\nScenePlugin.resume(key, data);\nScenePlugin.sleep(key, data);\nScenePlugin.wake(key, data);\nScenePlugin.setActive(key, active, data);\n```\n\n----------------------------------------\n\nTITLE: Creating Complex Matter.js Bodies with PhysicsEditor\nDESCRIPTION: Demonstrates how to use PhysicsEditor-exported shapes to create complex Matter.js physics bodies in Phaser.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.10/CHANGELOG-v3.10.md#2025-04-16_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nthis.matter.add.sprite(x, y, texture, frame, { shape: shapes.banana })\n```\n\n----------------------------------------\n\nTITLE: Adding Multiple Emit Zones to Particles in Phaser\nDESCRIPTION: Demonstrates how to add an emit zone to a particle emitter in Phaser v3.60. The code creates a circular edge zone that will emit particles along its perimeter with a quantity of 64 particles.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.60/ParticleEmitter.md#2025-04-16_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nconst circle = new Phaser.Geom.Circle(0, 0, 160);\n\nconst emitter = this.add.particles(400, 300, 'metal');\n\nemitter.addEmitZone({ type: 'edge', source: circle, quantity: 64 });\n```\n\n----------------------------------------\n\nTITLE: Rotating Group Members Around a Point in JavaScript\nDESCRIPTION: Shows how to rotate all members of a Group around a specified point by a given angle. This method is useful for creating circular formations or orbiting effects.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.21/CHANGELOG-v3.21.md#2025-04-16_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nGroup.rotateAround(point, angle)\n```\n\n----------------------------------------\n\nTITLE: Randomly Positioning Game Objects in Phaser 3\nDESCRIPTION: Shows the usage of the new setRandomPosition method available on all Game Objects in Phaser 3, allowing for random positioning within a defined area or the game size.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.8/CHANGELOG-v3.8.md#2025-04-16_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nsetRandomPosition\n```\n\n----------------------------------------\n\nTITLE: Setting Audio Properties for WebAudioSound in JavaScript\nDESCRIPTION: New chainable methods for WebAudioSound to control mute, volume, seek, and loop state of individual sound instances. These methods provide a more convenient way to manipulate audio properties.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.4/CHANGELOG-v3.4.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nWebAudioSound.setMute()\n  .setVolume()\n  .setSeek()\n  .setLoop();\n```\n\n----------------------------------------\n\nTITLE: Configuring DOM Element Support in Phaser 3\nDESCRIPTION: Shows the game configuration object setup required to enable DOM Element support in Phaser 3. This creates a container div positioned over the game canvas.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.17/CHANGELOG-v3.17.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ndom {\n  createContainer: true\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Touch Cancel Events with Pointer Properties\nDESCRIPTION: Uses the wasCanceled property to detect when a touch input was canceled, which helps handle cases like iOS UI gestures or overlay ads in platforms like Facebook Instant Games.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.15/CHANGELOG-v3.15.md#2025-04-16_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Check if a pointer was canceled during input handling\nthis.input.on('pointerup', (pointer) => {\n    if (pointer.wasCanceled) {\n        // The touch was canceled (like by an iOS system gesture)\n        console.log('Touch was canceled');\n    } else {\n        // Normal touch release\n        console.log('Touch ended normally');\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Listening for Keyboard Input in Phaser 3\nDESCRIPTION: Demonstrates how to listen for keyboard input events in Phaser 3, specifically for the numeric keypad zero key.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.8/CHANGELOG-v3.8.md#2025-04-16_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nthis.input.keyboard.on('keydown_NUMPAD_ZERO')\n```\n\n----------------------------------------\n\nTITLE: Conditional Timeline Events in Phaser.js\nDESCRIPTION: TimelineEvents now support an optional 'if' callback that determines whether the event should be processed or skipped, allowing for conditional events within a Timeline.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.70/CHANGELOG-v3.70.md#2025-04-16_snippet_18\n\nLANGUAGE: JavaScript\nCODE:\n```\nnew TimelineEvent({\n  if: function() {\n    // Return true to process the event, false to skip\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Staggered Tween with Range Values in Phaser 3\nDESCRIPTION: Shows how to define a staggered tween with a range of values that are spread across all targets, creating a variable delay pattern.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.19/CHANGELOG-v3.19.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ndelay: this.tweens.stagger([ 500, 1000 ])\n```\n\n----------------------------------------\n\nTITLE: Using Body.setEnable for Toggling Physics Bodies\nDESCRIPTION: A chainable method that allows enabling or disabling an Arcade Physics Body, useful for temporarily removing objects from physics calculations.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.15/CHANGELOG-v3.15.md#2025-04-16_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Enable a physics body\nsprite.body.setEnable(true);\n\n// Disable a physics body\nsprite.body.setEnable(false);\n\n// Can be chained with other body methods\nsprite.body.setEnable(true).setVelocity(100, 0);\n```\n\n----------------------------------------\n\nTITLE: Applying Texture Crop in Phaser 3\nDESCRIPTION: Demonstrates how to use the new setCrop method from the TextureCrop component to crop a portion of a sprite's texture. This is useful for creating effects like progress bars or partially revealing textures.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.11/CHANGELOG-v3.11.md#2025-04-16_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nsprite.setCrop(0, 0, 50, 50); // Crop to 50x50 rectangle starting at (0,0)\n```\n\n----------------------------------------\n\nTITLE: Setting Multiple Input Properties with Configuration Object\nDESCRIPTION: Example of configuring multiple input properties at once using a configuration object, making an object both draggable and pixel perfect.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.10/CHANGELOG-v3.10.md#2025-04-16_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nsetInteractive({ draggable: true, pixelPerfect: true })\n```\n\n----------------------------------------\n\nTITLE: Render Texture Drawing Implementation\nDESCRIPTION: Example of the new flexible draw method in Render Texture that accepts various types of game objects and textures.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.12/CHANGELOG-v3.12.md#2025-04-16_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nrenderTexture.draw(sprite);\nrenderTexture.draw(graphics);\nrenderTexture.draw(container);\nrenderTexture.draw(scene.children);\nrenderTexture.drawFrame('textureKey', 'frameKey');\n```\n\n----------------------------------------\n\nTITLE: Setting WebGL Batch Size in Phaser 3 Game Config\nDESCRIPTION: Demonstrates how to set the WebGL batch size in the Phaser 3 game configuration. This allows developers to optimize rendering performance by adjusting the number of sprites batched before a flush occurs.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.11/CHANGELOG-v3.11.md#2025-04-16_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst config = {\n  // other config options...\n  batchSize: 2000 // Set WebGL batch size\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing Random Tween Property in JavaScript\nDESCRIPTION: Demonstrates how to set a random value for a tween property using the new syntax in Phaser 3.60.0. It allows specifying a range for both float and integer values.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.60/TweenManager.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nalpha: 'random(0.25, 0.75)'\n```\n\nLANGUAGE: javascript\nCODE:\n```\nx: 'int(300, 600)'\n```\n\n----------------------------------------\n\nTITLE: Creating a Timeline with Configuration in Phaser 3.60\nDESCRIPTION: Shows how to create a Timeline with a configuration object that schedules a sprite creation at a specific time (1000ms). The timeline needs to be played to start execution.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.60/Timeline.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst timeline = this.add.timeline({\n    at: 1000,\n    run: () => {\n        this.add.sprite(400, 300, 'logo');\n    }\n});\n\ntimeline.play();\n```\n\n----------------------------------------\n\nTITLE: Using BitmapText Alignment Methods in Phaser.js\nDESCRIPTION: BitmapText now supports three alignment types (left, center, right) that can be set via constructor or chainable methods. Alignment works by calculating the longest line of text and offsetting other lines accordingly.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.11/CHANGELOG-v3.11.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// Creating aligned BitmapText via constructor\nconst centeredText = this.add.bitmapText(x, y, 'font', 'Multi-line\\nText', size, 'center');\n\n// Or using chainable methods\nconst text = this.add.bitmapText(x, y, 'font', 'Multi-line\\nText', size);\ntext.setCenterAlign();  // Center align text\ntext.setLeftAlign();    // Left align text (default)\ntext.setRightAlign();   // Right align text\n```\n\n----------------------------------------\n\nTITLE: Setting Slide Factor for Physics Bodies\nDESCRIPTION: Configuring how much velocity is retained by a body after collision using the slideFactor property. Values range from 0 (no velocity retention) to 1 (full velocity retention).\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.70/CHANGELOG-v3.70.md#2025-04-16_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Set slide factor to zero (body won't retain velocity after being pushed)\nsprite.body.setSlideFactor(0);\n\n// Set slide factor to 0.5 (body retains half of imparted velocity)\nsprite.body.setSlideFactor(0.5);\n\n// Default is 1 (full velocity retention)\nsprite.body.setSlideFactor(1);\n```\n\n----------------------------------------\n\nTITLE: Using Matter.Components.Sleep Methods for Body Sleep Management in Phaser.js\nDESCRIPTION: New methods available on Matter Game Objects that allow controlling sleep states of physics bodies when Engine sleeping is enabled. These methods provide a way to explicitly put bodies to sleep or wake them up.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.22/CHANGELOG-v3.22.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Put a Matter body to sleep\nMatter.Components.Sleep.setToSleep(body);\n\n// Wake up a Matter body from sleep\nMatter.Components.Sleep.setAwake(body);\n```\n\n----------------------------------------\n\nTITLE: Setting an Interactive Game Object with Hand Cursor\nDESCRIPTION: Using the configuration object to make a game object interactive and show a hand cursor when hovering over it.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.10/CHANGELOG-v3.10.md#2025-04-16_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nsetInteractive({ useHandCursor: true })\n```\n\n----------------------------------------\n\nTITLE: Single-Step Physics Simulation in Phaser.js\nDESCRIPTION: The 'Physics.Arcade.World.singleStep' method advances the Arcade Physics World simulation by exactly one step. This allows for more precise control over physics simulations.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.70/CHANGELOG-v3.70.md#2025-04-16_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nPhysics.Arcade.World.singleStep()\n```\n\n----------------------------------------\n\nTITLE: Restarting Current Scene in Phaser 3\nDESCRIPTION: New method to restart the current scene. This provides a clearer way to reset the current scene compared to calling start without arguments.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.4/CHANGELOG-v3.4.md#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nScenePlugin.restart();\n```\n\n----------------------------------------\n\nTITLE: Creating a Point Light using the Scene Factory in Phaser\nDESCRIPTION: Creates a Point Light Game Object using the Scene's add factory method. Parameters include position coordinates, color, radius, intensity, and attenuation which controls how quickly the light falls off from its center.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.50/CHANGELOG-v3.50.md#2025-04-16_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nthis.add.pointlight(x, y, color, radius, intensity, attenuation);\n```\n\n----------------------------------------\n\nTITLE: Using setRenderOrder Method in Phaser.js Tilemaps\nDESCRIPTION: Explains how to use the new setRenderOrder method for Tilemap, DynamicTilemapLayer, and StaticTilemapLayer in Phaser.js. This method allows dynamic changing of the tile rendering order.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.12/CHANGELOG-v3.12.md#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// Example usage (pseudo-code):\ntilemap.setRenderOrder('right-down');\ndynamicTilemapLayer.setRenderOrder(2); // right-up\nstaticTilemapLayer.setRenderOrder('left-up');\n```\n\n----------------------------------------\n\nTITLE: Animating a Wipe Effect with Tweens in Phaser\nDESCRIPTION: Shows how to add a wipe effect to a container and animate it using Phaser's tween system. The code creates a wipe effect and then tweens its progress property from 0 to 1 to play the animation.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.60/FX.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst fx = container.postFX.addWipe();\n\nthis.tweens.add({\n    targets: fx,\n    progress: 1\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Maximum Width for BitmapText in JavaScript\nDESCRIPTION: Demonstrates how to set a maximum width for BitmapText objects, enabling word-wrapping functionality. This method allows specifying a pixel width limit for text rendering.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.21/CHANGELOG-v3.21.md#2025-04-16_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nBitmapText.setMaxWidth(maxWidth)\n```\n\n----------------------------------------\n\nTITLE: Render Texture and Snapshot Features\nDESCRIPTION: New methods for capturing and manipulating render textures, including snapshot functionality for both WebGL and Canvas renderers.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.19/CHANGELOG-v3.19.md#2025-04-16_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nRenderTexture.snapshot()\nRenderTexture.snapshotArea()\nRenderTexture.snapshotPixel()\nWebGLRenderer.snapshotFramebuffer()\nCanvasRenderer.snapshotCanvas()\n```\n\n----------------------------------------\n\nTITLE: Setting XHR Credentials in Phaser 3 Loader\nDESCRIPTION: Configuration for controlling cross-origin requests with credentials in the Phaser loader. Can be set globally or per file.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.23/CHANGELOG-v3.23.md#2025-04-16_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Global config\nconst config = {\n  loaderWithCredentials: true\n};\n\n// Per file config\nthis.load.image('key', 'url', {\n  withCredentials: true\n});\n```\n\n----------------------------------------\n\nTITLE: Randomizing Tilemap Layer with Weighted Indexes in Phaser 3\nDESCRIPTION: The 'weightedRandomize' method for TilemapLayer now has 'weightedIndexes' as the first non-optional parameter, used for randomizing tiles with weighted probabilities.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.52/CHANGELOG-v3.52.md#2025-04-16_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\ntilemapLayer.weightedRandomize(weightedIndexes, tileX, tileY, width, height)\n```\n\n----------------------------------------\n\nTITLE: Drawing Pie Slice in Phaser 3 Graphics Object\nDESCRIPTION: New method to easily draw a Pacman or slice of pie shape in a Graphics object. This simplifies the process of creating circular sector shapes in Phaser 3.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.4/CHANGELOG-v3.4.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nGraphics.slice(x, y, radius, startAngle, endAngle, anticlockwise, fillColor);\n```\n\n----------------------------------------\n\nTITLE: Fixed Step Physics in Phaser 3\nDESCRIPTION: Configuration for synchronizing physics FPS with rendering FPS to reduce movement glitches in Arcade physics, especially for objects moving at constant speed.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.23/CHANGELOG-v3.23.md#2025-04-16_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nthis.physics.world.fixedStep = true;\n```\n\n----------------------------------------\n\nTITLE: New Matter Physics Methods\nDESCRIPTION: New methods available to Matter Physics Game Objects in Phaser 3.60.0. These methods provide timestep-independent ways to manipulate physics bodies' velocities and speeds.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.60/MatterPhysics.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ngetVelocity() // Returns the current linear velocity of the Body as a Vec2\ngetAngularVelocity() // Returns the current rotation velocity of the Body\nsetAngularSpeed() // Sets the current rotational speed of the body. Direction is maintained\ngetAngularSpeed() // Returns the current rotational speed of the body\n```\n\n----------------------------------------\n\nTITLE: Creating a Local Animation on a Sprite in Phaser\nDESCRIPTION: Demonstrates how to create a local animation directly on a Sprite using the new AnimationState.create method. This animation is specific to the Sprite and doesn't enter the global Animation Manager.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.50/CHANGELOG-v3.50.md#2025-04-16_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\nsprite.anims.create({\n    key: 'walk',\n    frames: sprite.anims.generateFrameNumbers('player', { start: 0, end: 9 }),\n    frameRate: 10,\n    repeat: -1\n});\n```\n\n----------------------------------------\n\nTITLE: Using Line.GetEasedPoints Method in Phaser 3\nDESCRIPTION: Method for generating an array of points along a line with spacing determined by an ease function. Takes a Line, quantity of points, and an ease function as parameters.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.23/CHANGELOG-v3.23.md#2025-04-16_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nLine.GetEasedPoints(line, quantity, easeFunction)\n```\n\n----------------------------------------\n\nTITLE: Disabling FX System in Game Config\nDESCRIPTION: Configuring the game to disable Pre or Post FX systems to save on memory and reduce shader compilation time. These settings must be defined at startup and cannot be changed later.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.70/CHANGELOG-v3.70.md#2025-04-16_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Disable Pre FX in game config\nconst config = {\n    // other config options...\n    disablePreFX: true\n};\n\n// Disable Post FX in game config\nconst config = {\n    // other config options...\n    disablePostFX: true\n};\n\n// Disable both Pre and Post FX\nconst config = {\n    // other config options...\n    disablePreFX: true,\n    disablePostFX: true\n};\n```\n\n----------------------------------------\n\nTITLE: Matter Physics API Methods and Properties\nDESCRIPTION: Documentation of new methods and properties added to the Matter Physics system in Phaser, including collision detection, body manipulation, physics calculations, and data parsing capabilities. These additions enhance the functionality and flexibility of Matter Physics integration in Phaser games.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.22/CHANGELOG-v3.22.md#2025-04-16_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Collision Detection and Handling\nMatterPhysics.overlap(target, bodies, processCallback, overlapCallback);\nMatterPhysics.setCollisionCategory(bodies, category);\nMatterPhysics.setCollisionGroup(bodies, group);\nMatterPhysics.setCollidesWith(bodies, mask);\n\n// Body Properties and Methods\nMatter.Body.centerOfMass;\nMatter.Body.centerOffset;\nBody.setCentre(center);\nBody.scale;\n\n// Physics Calculations\nMatterPhysics.setVelocity(body, x, y);\nMatterPhysics.setAngularVelocity(body, velocity);\nMatterPhysics.applyForce(body, force);\nMatterPhysics.applyForceFromPosition(body, position, force, angle);\n\n// Body Creation and Parsing\nMatterPhysics.fromSVG(pathData);\nMatterPhysics.fromPhysicsEditor(config);\nMatter.Factory.fromJSON(jsonData);\n```\n\n----------------------------------------\n\nTITLE: Accessing Post Pipeline Data in JavaScript\nDESCRIPTION: Demonstrates how to access the new postPipelineData property on Game Objects that support post pipelines. This property is used for storing post pipeline specific data.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.60/WebGLRenderer.md#2025-04-16_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\ngameObject.postPipelineData\n```\n\n----------------------------------------\n\nTITLE: Updating Event Listener for Tile Collision in Phaser 3\nDESCRIPTION: Shows the change in how to listen for tile collision events, which now must be handled through the physics world rather than game objects directly.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.16/CHANGELOG-v3.16.md#2025-04-16_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Old way - removed\ngameObject.on('collide');\n\n// New way\nthis.physics.world.on('tilecollide')\n```\n\n----------------------------------------\n\nTITLE: Getting Pixel Color from CanvasTexture in Phaser 3\nDESCRIPTION: This method retrieves the color of a specific pixel from the CanvasTexture and stores it in a returned Color object in Phaser 3.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.13/CHANGELOG-v3.13.md#2025-04-16_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nCanvasTexture.getPixel(x, y);\n```\n\n----------------------------------------\n\nTITLE: Resetting Keyboard Key States with KeyboardPlugin.resetKeys\nDESCRIPTION: Resets the state of any Key object created by a Scene's Keyboard Plugin, useful for clearing key states when changing scenes or after input processing.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.15/CHANGELOG-v3.15.md#2025-04-16_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Reset all keys in the current scene\nthis.input.keyboard.resetKeys();\n\n// This is now called automatically when a scene is stopped\n```\n\n----------------------------------------\n\nTITLE: Creating and Managing a Layer in Phaser.js\nDESCRIPTION: Demonstrates how to create a Layer Game Object and add sprites to it. The Layer acts as a Display List, allowing group management of Game Objects.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.50/CHANGELOG-v3.50.md#2025-04-16_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst spaceman = this.add.sprite(150, 300, 'spaceman');\nconst bunny = this.add.sprite(400, 300, 'bunny');\nconst elephant = this.add.sprite(650, 300, 'elephant');\n\nconst layer = this.add.layer();\n\nlayer.add([ spaceman, bunny, elephant ]);\n```\n\n----------------------------------------\n\nTITLE: Accessing Global Plugin in Phaser 3\nDESCRIPTION: Demonstrates how to access a global plugin using the PluginManager in Phaser 3. Global plugins are shared across multiple scenes.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.8/CHANGELOG-v3.8.md#2025-04-16_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nPluginManager.get\n```\n\n----------------------------------------\n\nTITLE: Retrieving Animations from Texture in Phaser 3.60.0\nDESCRIPTION: New method 'getAnimsFromTexture' in AnimationManager returns all global Animations that have at least one frame using the given Texture. This excludes animations created directly on local Sprites.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.60/Animation.md#2025-04-16_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nAnimationManager.getAnimsFromTexture(texture)\n```\n\n----------------------------------------\n\nTITLE: Updating WebGL Video Texture in JavaScript\nDESCRIPTION: Illustrates how to update an existing WebGL texture based on a Video element using the new updateVideoTexture method. This is useful for rendering video content in WebGL.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.20/CHANGELOG-v3.20.md#2025-04-16_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nWebGLRenderer.updateVideoTexture(existingTexture, videoElement);\n```\n\n----------------------------------------\n\nTITLE: Custom Culling Function for DynamicTilemapLayer in Phaser.js\nDESCRIPTION: DynamicTilemapLayer now allows setting a custom culling callback function, enabling custom culling logic beyond the default implementation provided by TilemapComponents.CullTiles.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.11/CHANGELOG-v3.11.md#2025-04-16_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// Create a tilemap layer\nconst layer = map.createDynamicLayer('LayerName', tileset);\n\n// Set a custom culling function\nlayer.cullCallback = function(layerData, camera, outputArray) {\n  // Custom culling logic here\n  // Must populate outputArray with the tiles to render\n};\n```\n\n----------------------------------------\n\nTITLE: Tweening Particle Emitter Properties Example\nDESCRIPTION: Demonstrates the new ability to directly tween particle emitter properties in Phaser 3.60, which wasn't possible in previous versions.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.60/ParticleEmitter.md#2025-04-16_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nthis.tweens.add({\n    targets: emitter,\n    particleX: 400\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing Scene Status in Phaser 3.60.0\nDESCRIPTION: New methods added to retrieve the current status of a Scene. These methods are available in both the Systems and ScenePlugin classes.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.60/Scene.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nPhaser.Scenes.Systems.getStatus\n```\n\nLANGUAGE: javascript\nCODE:\n```\nPhaser.Scenes.ScenePlugin.getStatus\n```\n\n----------------------------------------\n\nTITLE: Using Scene Plugin Run Method\nDESCRIPTION: Demonstrates how to use the new ScenePlugin.run method that runs a scene without changing the state of the current scene.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.10/CHANGELOG-v3.10.md#2025-04-16_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nthis.sys.game.events.on('mouseout')\n```\n\n----------------------------------------\n\nTITLE: Setting FPS Limit in Phaser Game Configuration\nDESCRIPTION: Example showing how to enforce a specific frame rate (30 FPS) in a Phaser game by setting the fps.limit value in the game configuration. This prevents the game from running more than the specified number of times per second.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.60/Timestep.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfps: { limit: 30 }\n```\n\n----------------------------------------\n\nTITLE: WebGLPipeline Uniform Setting Methods in Phaser.js\nDESCRIPTION: New methods for setting uniform values in WebGLPipeline shaders. These methods directly set uniform values without redundant WebGL operations, improving rendering performance by bypassing shader binding and location lookup steps.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.50/CHANGELOG-v3.50.md#2025-04-16_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nWebGLPipeline.set1f\nWebGLPipeline.set2f\nWebGLPipeline.set3f\nWebGLPipeline.set4f\nWebGLPipeline.set1fv\nWebGLPipeline.set2fv\nWebGLPipeline.set3fv\nWebGLPipeline.set4fv\nWebGLPipeline.set1iv\nWebGLPipeline.set2iv\nWebGLPipeline.set3iv\nWebGLPipeline.set4iv\nWebGLPipeline.set1i\nWebGLPipeline.set2i\nWebGLPipeline.set3i\nWebGLPipeline.set4i\nWebGLPipeline.setMatrix2fv\nWebGLPipeline.setMatrix3fv\nWebGLPipeline.setMatrix4fv\n```\n\n----------------------------------------\n\nTITLE: Particle Emitter with Relative Coordinates\nDESCRIPTION: Example showing how particle coordinates are relative to the emitter position when defined in the configuration.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.60/ParticleEmitter.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst emitter = this.add.particles(100, 300, 'flares', {\n    x: 100,\n    y: 100,\n    frame: 'red',\n    angle: { min: -30, max: 30 },\n    speed: 150\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Animations from Aseprite Data in Phaser\nDESCRIPTION: Shows how to use the new AnimationManager.createFromAseprite method to create animations directly from Aseprite editor data in Phaser.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.50/CHANGELOG-v3.50.md#2025-04-16_snippet_13\n\nLANGUAGE: JavaScript\nCODE:\n```\nthis.anims.createFromAseprite('player', asepritePNGFile, asepriteJSONFile);\n```\n\n----------------------------------------\n\nTITLE: Explaining Nine Slice Game Object Structure in ASCII Diagram\nDESCRIPTION: ASCII diagram showing the layout structure of a Nine Slice Game Object. The diagram illustrates the 9 regions labeled 1-9, with letters A-D marking the edges. This structure allows for corners to remain unscaled while other regions stretch appropriately.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.60/NineSliceGameObject.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n    A                          B\n  +---+----------------------+---+\nC | 1 |          2           | 3 |\n  +---+----------------------+---+\n  |   |                      |   |\n  | 4 |          5           | 6 |\n  |   |                      |   |\n  +---+----------------------+---+\nD | 7 |          8           | 9 |\n  +---+----------------------+---+\n```\n\n----------------------------------------\n\nTITLE: Keyboard Event Handling in Phaser 3.16\nDESCRIPTION: Demonstrates the new keyboard event handling system with local and global event propagation control.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.16/CHANGELOG-v3.16.md#2025-04-16_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Direct key event listening\nyourKey.on('up', handler);\n\n// Event propagation control\nkeyHandler(event) {\n    // Stop event in current scene\n    event.stopImmediatePropagation();\n    // Stop event across all scenes\n    event.stopPropagation();\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Camera Zoom Limits\nDESCRIPTION: New properties for configuring minimum and maximum camera zoom values for camera controls.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.53/CHANGELOG-v3.53.md#2025-04-16_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// For FixedKeyControl\ncameraControl.minZoom = 0.1;  // Default is 0.001\ncameraControl.maxZoom = 5;    // Default is 1000\n\n// For SmoothedKeyControl\nsmoothControl.minZoom = 0.1;  // Default is 0.001\nsmoothControl.maxZoom = 5;    // Default is 1000\n```\n\n----------------------------------------\n\nTITLE: DataManager Value Manipulation in Phaser 3\nDESCRIPTION: Methods for incrementing values and toggling boolean values in the DataManager. Values are initialized to 0 or false if they don't exist.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.23/CHANGELOG-v3.23.md#2025-04-16_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Increase a value (starts from 0 if key doesn't exist)\ndataManager.inc(key);\n\n// Toggle a boolean value (starts from false if key doesn't exist)\ndataManager.toggle(key);\n```\n\n----------------------------------------\n\nTITLE: Creating Animations from Aseprite Data on Sprite in Phaser 3.60.0\nDESCRIPTION: New method 'createFromAseprite' in AnimationState allows creating animations from exported Aseprite data directly on a Sprite, instead of in the global Animation Manager.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.60/Animation.md#2025-04-16_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nAnimations.AnimationState.createFromAseprite(asepriteData, sprite)\n```\n\n----------------------------------------\n\nTITLE: Creating Auto-Sized TileSprite Using Frame Dimensions\nDESCRIPTION: Creates a TileSprite with zero width or height to automatically use the dimensions of the texture frame as the size of the TileSprite.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.15/CHANGELOG-v3.15.md#2025-04-16_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Create a TileSprite that uses the texture frame's dimensions\nconst tileSprite = this.add.tileSprite(400, 300, 0, 0, 'myTexture');\n// The width and height will be set to the dimensions of the 'myTexture' frame\n```\n\n----------------------------------------\n\nTITLE: Setting a Custom Cursor for a Game Object (Help Icon)\nDESCRIPTION: Example of setting a help cursor style directly on a game object's input property.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.10/CHANGELOG-v3.10.md#2025-04-16_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nbutton.input.cursor = 'help'\n```\n\n----------------------------------------\n\nTITLE: Setting a Custom Cursor for a Game Object (Hand Pointer)\nDESCRIPTION: Example of setting a hand pointer cursor style directly on a button's input property.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.10/CHANGELOG-v3.10.md#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nbutton.input.cursor = 'pointer'\n```\n\n----------------------------------------\n\nTITLE: Configuring Tween Property with Start-To Values in Phaser 3\nDESCRIPTION: Shows how to set both 'start' and 'to' values for a tween property. The 'start' value is applied immediately when the tween becomes active, then tweens to the final value.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.19/CHANGELOG-v3.19.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nalpha: { start: 0, to: 1 }\n```\n\n----------------------------------------\n\nTITLE: Particle Emitter with Stop After Configuration\nDESCRIPTION: Configuration for an emitter that stops after emitting a specific number of particles.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.60/ParticleEmitter.md#2025-04-16_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst emitter = this.add.particles(0, 0, 'texture', {\n    x: { start: 400, end: 0 },\n    y: { start: 300, end: 0 },\n    lifespan: 3000,\n    frequency: 250,\n    stopAfter: 6,\n    quantity: 1\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Color from HSV Values in Phaser 3\nDESCRIPTION: This method sets the color values based on the given HSV (Hue, Saturation, Value) values in Phaser 3's Color object.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.13/CHANGELOG-v3.13.md#2025-04-16_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nColor.setFromHSV(h, s, v);\n```\n\n----------------------------------------\n\nTITLE: Controlling Letter Spacing in Phaser.js Text Objects\nDESCRIPTION: The new method 'Text.setLetterSpacing' and property 'Text.letterSpacing' allow setting the spacing between each character in a Text Game Object. This feature can be computationally expensive for long strings.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.70/CHANGELOG-v3.70.md#2025-04-16_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\nText.setLetterSpacing()\nText.letterSpacing\n```\n\n----------------------------------------\n\nTITLE: Setting Right-to-Left Text Rendering in Phaser.js\nDESCRIPTION: The new method 'Text.setRTL' allows setting a Text Game Object to render from right-to-left instead of the default left-to-right. This is useful for languages that are written right-to-left.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.70/CHANGELOG-v3.70.md#2025-04-16_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nText.setRTL()\n```\n\n----------------------------------------\n\nTITLE: Updating Transform.getWorldPoint in JavaScript\nDESCRIPTION: New method added to Transform to return the World point as a Vector2 of a Game Object, factoring in parents if applicable.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.88/CHANGELOG-v3.88.md#2025-04-16_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nTransform.getWorldPoint\n```\n\n----------------------------------------\n\nTITLE: Tilemap Layer Multi-tileset Usage\nDESCRIPTION: Example showing how to create tilemap layers with multiple tilesets. Supports both static and dynamic layers by passing an array of Tileset objects or strings to the creation methods.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.14/CHANGELOG-v3.14.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Create static layer with multiple tilesets\nmap.createStaticLayer(layerIndex, [tileset1, tileset2]);\n\n// Create dynamic layer with tileset names\nmap.createDynamicLayer(layerIndex, ['tileset1Name', 'tileset2Name']);\n```\n\n----------------------------------------\n\nTITLE: Setting Boolean Uniform in WebGL Shader in JavaScript\nDESCRIPTION: Demonstrates the new method for setting a boolean uniform on a WebGL shader. This adds flexibility in shader manipulation.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.60/WebGLRenderer.md#2025-04-16_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nWebGLShader.setBoolean()\n```\n\n----------------------------------------\n\nTITLE: Defining Wrap Bounds for Matter Physics Bodies in Phaser 3.85.0\nDESCRIPTION: Creates a wrapBounds object that defines the boundaries within which a Matter physics body will wrap. The object specifies minimum and maximum coordinates for both x and y axes.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.85/MatterWrapBounds.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst wrapBounds = {\n    min: {\n        x: 0,\n        y: 0\n    },\n    max: {\n        x: 800,\n        y: 600\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Sorting Input-Enabled Drop Zones in Phaser 3\nDESCRIPTION: The 'sortDropZones' method in the InputPlugin is used for sorting input-enabled drop zones based on their display depth.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.52/CHANGELOG-v3.52.md#2025-04-16_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\ninputPlugin.sortDropZones()\n```\n\n----------------------------------------\n\nTITLE: Setting Animation Time Scale\nDESCRIPTION: Shows the animation time scale persistence behavior which now maintains the set value across animation changes rather than resetting to 1.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.12/CHANGELOG-v3.12.md#2025-04-16_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nsetTimeScale\n```\n\n----------------------------------------\n\nTITLE: Keyboard Input Checking with Cooldown\nDESCRIPTION: A new method to check if a key is being pressed with an optional duration parameter to control input frequency.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.11/CHANGELOG-v3.11.md#2025-04-16_snippet_15\n\nLANGUAGE: JavaScript\nCODE:\n```\nKeyboardPlugin.checkDown(key, duration);\n```\n\n----------------------------------------\n\nTITLE: Setting Matter Physics Update Rate in JavaScript\nDESCRIPTION: New methods to set the update rate for Matter Physics engine to 60Hz or 30Hz. These methods provide an easy way to control the physics simulation frequency.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.4/CHANGELOG-v3.4.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nMatter.Physics.set60Hz();\nMatter.Physics.set30Hz();\n```\n\n----------------------------------------\n\nTITLE: WebGLPipeline Hook Methods in Phaser.js\nDESCRIPTION: List of available hook methods that can be overridden in custom WebGLPipeline subclasses. These hooks are called at various points in the rendering pipeline lifecycle, allowing for custom behavior at specific stages.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.50/CHANGELOG-v3.50.md#2025-04-16_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nWebGLPipeline.onBoot\nWebGLPipeline.onResize\nWebGLPipeline.onDraw\nWebGLPipeline.onActive\nWebGLPipeline.onBind\nWebGLPipeline.onRebind\nWebGLPipeline.onBatch\nWebGLPipeline.onPreBatch\nWebGLPipeline.onPostBatch\nWebGLPipeline.onPreRender\nWebGLPipeline.onRender\nWebGLPipeline.onPostRender\nWebGLPipeline.onBeforeFlush\nWebGLPipeline.onAfterFlush\n```\n\n----------------------------------------\n\nTITLE: Setting Drop Zone for Zone Game Object in Phaser\nDESCRIPTION: Updated method with optional hitArea parameter, which will create a hit area based on the Zone's size if not provided.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.60/Input.md#2025-04-16_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nGameObjects.Zone.setDropZone(hitArea)\n```\n\n----------------------------------------\n\nTITLE: Playing or Reversing an Animation in Phaser 3 JavaScript\nDESCRIPTION: Plays or reverses an animation using either a string key or an Animation instance.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.16/CHANGELOG-v3.16.md#2025-04-16_snippet_17\n\nLANGUAGE: JavaScript\nCODE:\n```\nAnimation.play(key);\nAnimation.playReverse(key);\n```\n\n----------------------------------------\n\nTITLE: Creating a Preloader Scene for Facebook Instant Games in Phaser 3\nDESCRIPTION: This JavaScript class defines a Preloader scene that integrates with the Facebook Instant Games loader. It shows how to hook the Facebook preloader with the Phaser Loader and handle the game start event.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/plugins/fbinstant/readme.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nclass Preloader extends Phaser.Scene {\n\n    constructor ()\n    {\n        super('Preloader');\n    }\n\n    preload ()\n    {\n        this.facebook.showLoadProgress(this);\n        this.facebook.once('startgame', this.startGame, this);\n\n        //  Now load all of your assets\n    }\n\n    startGame ()\n    {\n        this.scene.start('MainMenu');\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Physics Bodies in Arcade Physics Group\nDESCRIPTION: Creates an Arcade Physics Group with all member bodies initially disabled using the enable property in the group configuration.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.15/CHANGELOG-v3.15.md#2025-04-16_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Create a physics group with all bodies disabled\nconst group = this.physics.add.group({\n    enable: false,\n    // Other group properties...\n});\n```\n\n----------------------------------------\n\nTITLE: Creating WebGL Texture from Canvas in JavaScript\nDESCRIPTION: Shows how to create a WebGL texture from a Canvas element using the new createCanvasTexture method in the WebGLRenderer. This is useful for dynamically generated textures.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.20/CHANGELOG-v3.20.md#2025-04-16_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nWebGLRenderer.createCanvasTexture(canvasElement);\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Bounds for Arcade Physics Body in JavaScript\nDESCRIPTION: Demonstrates how to set custom bounds for an Arcade Physics Body using the new setBoundsRectangle method. This allows for collision detection against a specific rectangle rather than the default world bounds.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.20/CHANGELOG-v3.20.md#2025-04-16_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nArcadePhysics.Body.setBoundsRectangle(customBounds);\n```\n\n----------------------------------------\n\nTITLE: Checking Mouse Button Release in Phaser 3.18.0\nDESCRIPTION: New methods added to the Pointer class for determining which mouse button was released. These can be used in pointerup event handlers to identify the specific button involved.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.18/CHANGELOG-v3.18.md#2025-04-16_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nPointer.leftButtonReleased()\nPointer.rightButtonReleased()\nPointer.middleButtonReleased()\nPointer.backButtonReleased()\nPointer.forwardButtonReleased()\n```\n\n----------------------------------------\n\nTITLE: Keyboard Key Addition with Spacing\nDESCRIPTION: Demonstrates the improvement to the keyboard.addKeys method which now trims input, allowing spaces between character definitions.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.12/CHANGELOG-v3.12.md#2025-04-16_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nkeyboard.addKeys(\"W, A, S, D\")\n```\n\n----------------------------------------\n\nTITLE: Matter Physics Debug Configuration\nDESCRIPTION: Configuration options for Matter Physics debug rendering, including wireframes, convex hulls, and internal edges visualization settings.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.14/CHANGELOG-v3.14.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nthis.matter.world.debugConfig = {\n  bodyDebugFillColor: 0xff00ff,\n  debugWireframes: true,\n  debugShowInternalEdges: false,\n  debugShowConvexHulls: false,\n  debugConvexHullColor: 0xff00ff,\n  debugShowSleeping: true\n};\n```\n\n----------------------------------------\n\nTITLE: Getting Path Points with Step Rate in JavaScript\nDESCRIPTION: The 'getPoints' method of Curves.Path now has an optional 'stepRate' parameter to set the distance between points on the curve.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.70/CHANGELOG-v3.70.md#2025-04-16_snippet_24\n\nLANGUAGE: JavaScript\nCODE:\n```\npath.getPoints(stepRate)\n```\n\n----------------------------------------\n\nTITLE: Accessing Mouse Wheel Data in Phaser 3.18.0\nDESCRIPTION: New properties added to the Pointer class for handling mouse wheel events. These properties store the scroll amounts for horizontal, vertical, and z-axis movements.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.18/CHANGELOG-v3.18.md#2025-04-16_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nPointer.deltaX\nPointer.deltaY\nPointer.deltaZ\n```\n\n----------------------------------------\n\nTITLE: Drawing to CanvasTexture in Phaser 3\nDESCRIPTION: This method draws the given Image or Canvas element to the CanvasTexture, then updates the internal ImageData buffer and arrays in Phaser 3.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.13/CHANGELOG-v3.13.md#2025-04-16_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nCanvasTexture.draw(source);\n```\n\n----------------------------------------\n\nTITLE: Adding Game Objects to Camera Render List in Phaser 3\nDESCRIPTION: The 'addToRenderList' method adds a Game Object to the Camera's current render list, which is used for tracking rendered objects in each frame.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.52/CHANGELOG-v3.52.md#2025-04-16_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\ncamera.addToRenderList(gameObject)\n```\n\n----------------------------------------\n\nTITLE: Setting Camera Render to Texture in Phaser 3\nDESCRIPTION: This code demonstrates how to set a camera to render to a texture instead of the main canvas in Phaser 3. It allows for special effects and post-processing on the camera's output.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.13/CHANGELOG-v3.13.md#2025-04-16_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nCamera.setRenderToTexture();\n```\n\n----------------------------------------\n\nTITLE: Improving Game Object cleanup in JavaScript\nDESCRIPTION: Game Objects now properly remove themselves from the Scene's 'shutdown' event handler when destroyed, preventing memory leaks caused by a build-up of handlers over time.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.13/CHANGELOG-v3.13.md#2025-04-16_snippet_14\n\nLANGUAGE: JavaScript\nCODE:\n```\nGameObject.destroy\n```\n\n----------------------------------------\n\nTITLE: Fixing custom cursor reset on Game Object destruction in JavaScript\nDESCRIPTION: This fix ensures that when a Game Object with a custom cursor set is destroyed during an input event, the cursor is correctly reset to its default state.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.13/CHANGELOG-v3.13.md#2025-04-16_snippet_19\n\nLANGUAGE: JavaScript\nCODE:\n```\nGameObject.destroy\n```\n\n----------------------------------------\n\nTITLE: Configuring Word Wrap Character for BitmapText in JavaScript\nDESCRIPTION: Shows how to set the character code that triggers line-wrapping in BitmapText objects. By default, it uses the space character (code 32).\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.21/CHANGELOG-v3.21.md#2025-04-16_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nBitmapText.wordWrapCharCode = 32\n```\n\n----------------------------------------\n\nTITLE: Setting Interactive Drop Zone\nDESCRIPTION: Shows how to use the new dropZone parameter when setting an object as interactive, allowing it to receive dragged objects.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.2/CHANGELOG-v3.2.md#2025-04-16_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\ngameObject.setInteractive({ dropZone: true });\n```\n\n----------------------------------------\n\nTITLE: Creating a Matter Game Object with Wrap Boundaries in Phaser 3.85.0\nDESCRIPTION: Demonstrates how to create a Matter physics game object (in this case, an image) with wrap boundaries. The wrapBounds property is passed in the configuration object to enable the wrap behavior.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.85/MatterWrapBounds.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst gameObject = this.matter.add.image(x, y, 'key', null, {\n    wrapBounds: wrapBoundary \n});\n```\n\n----------------------------------------\n\nTITLE: Setting Scroll Factor on Group Children in JavaScript\nDESCRIPTION: Demonstrates how to set the scroll factor on all children of a Group using the Group configuration object. This affects how objects move relative to the camera.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.21/CHANGELOG-v3.21.md#2025-04-16_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nnew Group(scene, children, { setScrollFactor: { x: 1, y: 1 } })\n```\n\n----------------------------------------\n\nTITLE: Graphics.strokeRoundedRect with Negative Radius\nDESCRIPTION: Graphics method now supports negative corner radius values for drawing concave corners on rounded rectangles. Also includes fixes for radius clamping when the value exceeds half the smaller side length.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.60/GraphicsGameObject.md#2025-04-16_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\ngraphics.strokeRoundedRect(x, y, width, height, radius)\n```\n\n----------------------------------------\n\nTITLE: Updating Tilemap Layer Creation\nDESCRIPTION: Migration guide showing how to update from legacy DynamicTilemapLayer and StaticTilemapLayer creation to the new unified TilemapLayer API\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.50/CHANGELOG-v3.50.md#2025-04-16_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\n// Old way - remove these:\nmap.createDynamicLayer();\nmap.createStaticLayer();\n\n// New way - use this instead:\nmap.createLayer();\n```\n\n----------------------------------------\n\nTITLE: Changing BitmapText Font in Phaser.js\nDESCRIPTION: BitmapText objects can now change their font during runtime using the new setFont method, allowing dynamic font switching without recreating the text object.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.11/CHANGELOG-v3.11.md#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// Create a BitmapText with initial font\nconst text = this.add.bitmapText(x, y, 'font1', 'Hello World', size);\n\n// Later, change to a different font\ntext.setFont('font2');\n```\n\n----------------------------------------\n\nTITLE: Animated Particles with Random Animations\nDESCRIPTION: Configuration for particles that randomly select from an array of animations on emission.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.60/ParticleEmitter.md#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst emitter = this.add.particles(400, 300, 'gems', {\n    anim: [ 'prism', 'square', 'ruby', 'square' ]\n    ...\n});\n```\n\n----------------------------------------\n\nTITLE: Removing Keyboard Key with Capture in Phaser\nDESCRIPTION: Updated method to remove a keyboard key, with an optional parameter to remove capture events.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.60/Input.md#2025-04-16_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nKeyboardPlugin.removeKey(key, removeCapture)\n```\n\n----------------------------------------\n\nTITLE: Creating Animation Mixes in Phaser\nDESCRIPTION: Demonstrates how to create mixes between two animations using the new AnimationManager.addMix method. This allows for customized smoothing between different types of animations.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.50/CHANGELOG-v3.50.md#2025-04-16_snippet_12\n\nLANGUAGE: JavaScript\nCODE:\n```\nthis.anims.addMix('idle', 'walk', 200);\nthis.anims.addMix('walk', 'run', 100);\n```\n\n----------------------------------------\n\nTITLE: Controlling Animation Frame Display Before Delay in Phaser 3.60.0\nDESCRIPTION: New boolean property 'showBeforeDelay' for animations controls whether the first frame should be set immediately or after the delay has expired when there's a delay before playback starts.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.60/Animation.md#2025-04-16_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nAnimation.showBeforeDelay = true\n```\n\n----------------------------------------\n\nTITLE: Chaining Layer Methods in JavaScript\nDESCRIPTION: The 'add', 'remove', and 'removeAll' methods of the Layer Game Object are now chainable, with 'remove' and 'removeAll' having an optional 'destroyChild' parameter.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.70/CHANGELOG-v3.70.md#2025-04-16_snippet_22\n\nLANGUAGE: JavaScript\nCODE:\n```\nlayer.add(gameObject).remove(gameObject, destroyChild).removeAll(destroyChild)\n```\n\n----------------------------------------\n\nTITLE: Mouse Manager Configuration Properties\nDESCRIPTION: New configuration properties for controlling preventDefault behavior on different mouse events. These replace the previous inputMouseCapture config option with more granular control.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.50/CHANGELOG-v3.50.md#2025-04-16_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  input: {\n    mouse: {\n      preventDefaultDown: true,\n      preventDefaultUp: true,\n      preventDefaultMove: true,\n      preventDefaultWheel: true\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a Scene with Data in Phaser 3 JavaScript\nDESCRIPTION: Adds a new scene to the Scene Manager with an optional data object.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.16/CHANGELOG-v3.16.md#2025-04-16_snippet_15\n\nLANGUAGE: JavaScript\nCODE:\n```\nScenePlugin.add(key, sceneConfig, autoStart, data);\n```\n\n----------------------------------------\n\nTITLE: Listening for Gamepad Button Events in JavaScript\nDESCRIPTION: Demonstrates different ways to listen for gamepad button events in the updated system.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.10/CHANGELOG-v3.10.md#2025-04-16_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nthis.input.gamepad.on('down')\n```\n\nLANGUAGE: javascript\nCODE:\n```\ngamepadReference.on('down')\n```\n\n----------------------------------------\n\nTITLE: Configuring DynamicTilemapLayer Culling in Phaser.js\nDESCRIPTION: DynamicTilemapLayer now provides properties to control tile culling behavior, including skipping culling entirely or adding padding to prevent clipping during scrolling.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.11/CHANGELOG-v3.11.md#2025-04-16_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// Create a tilemap layer\nconst layer = map.createDynamicLayer('LayerName', tileset);\n\n// Disable culling entirely\nlayer.setSkipCull(true);\n\n// Or add culling padding to prevent edge clipping during scrolling\nlayer.setCullPadding(2, 2); // Add 2 tiles of padding in both directions\n```\n\n----------------------------------------\n\nTITLE: Pointer Position Tracking and Interpolation\nDESCRIPTION: New properties and methods for tracking pointer positions and performing smooth interpolation between positions.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.11/CHANGELOG-v3.11.md#2025-04-16_snippet_14\n\nLANGUAGE: JavaScript\nCODE:\n```\nlet prevPosition = Pointer.prevPosition;\nlet interpolatedPositions = Pointer.getInterpolatedPosition(steps);\n```\n\n----------------------------------------\n\nTITLE: Creating Rectangle Shape in Phaser 3\nDESCRIPTION: Demonstrates how to create a basic rectangle shape game object in Phaser 3. The rectangle is positioned at coordinates (400, 300) with dimensions 500x120 pixels and filled with a green color.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.13/CHANGELOG-v3.13.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nthis.add.rectangle(400, 300, 500, 120, 0x00ff00);\n```\n\n----------------------------------------\n\nTITLE: Improving Text.setStyle method in JavaScript\nDESCRIPTION: The Text.setStyle method now only changes the properties provided in the style configuration object, leaving previously changed properties intact. This fixes an issue where the Text would disappear if the 'resolution' property wasn't provided.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.13/CHANGELOG-v3.13.md#2025-04-16_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\nText.setStyle\n```\n\n----------------------------------------\n\nTITLE: Enhancing Math.FromPercent Function in JavaScript\nDESCRIPTION: Improves the Math.FromPercent function to allow any value for the 'min' parameter, enabling correct percentage generation between 'min' and 'max'.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.53/CHANGELOG-v3.53.md#2025-04-16_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Updated Math.FromPercent function\nMath.FromPercent = function(percent, min, max) {\n    return (max - min) * percent + min;\n};\n```\n\n----------------------------------------\n\nTITLE: Getting Texture Frame Bounds\nDESCRIPTION: Method to retrieve the bounds encompassing all frames of a texture source, useful for calculating spritesheet boundaries within texture atlases.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.80/CHANGELOG-v3.80.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nTexture.getFrameBounds()\n```\n\n----------------------------------------\n\nTITLE: Updating DynamicTexture and RenderTexture in JavaScript\nDESCRIPTION: Added new boolean property 'forceEven' to constructor, setSize and resize methods to improve rendering quality.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.88/CHANGELOG-v3.88.md#2025-04-16_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nDynamicTexture\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nRenderTexture\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Key Captures in Phaser 3.16\nDESCRIPTION: Shows how to set up default key captures in the Game Config. This allows you to specify keys to be captured globally when the game starts.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.16/CHANGELOG-v3.16.md#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst config = {\n  // ...\n  input: {\n    keyboard: {\n      captures: [32, 37, 38, 39, 40] // Space and arrow keys\n    }\n  }\n  // ...\n};\n```\n\n----------------------------------------\n\nTITLE: Using Lighting with DynamicTilemapLayer in Phaser.js\nDESCRIPTION: DynamicTilemapLayer now supports the Lights2D Pipeline, allowing normal maps for the tileset to be illuminated with the Lights shader. There are limits on the number of tiles that can be rendered with lighting enabled.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.11/CHANGELOG-v3.11.md#2025-04-16_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n// Create a light source\nconst light = this.lights.addLight(x, y, radius, color, intensity);\n\n// Create a tilemap with lighting enabled\nconst map = this.make.tilemap({ key: 'map' });\nconst tileset = map.addTilesetImage('tiles', 'tiles', 16, 16, 1, 2, null, null, 0, 1);\n// The second texture is the normal map for lighting\n\n// Create the layer - it will automatically use the lighting pipeline\nconst layer = map.createDynamicLayer('LayerName', tileset);\n```\n\n----------------------------------------\n\nTITLE: Rectangle Creation from Coordinates in Phaser 3\nDESCRIPTION: Creates the smallest Rectangle containing two coordinate pairs, useful for creating selection areas.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.23/CHANGELOG-v3.23.md#2025-04-16_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nRectangle.FromXY(x1, y1, x2, y2)\n```\n\n----------------------------------------\n\nTITLE: Geometry and Shape Types\nDESCRIPTION: New constant definitions and type properties for various geometry objects to enable quick type comparisons.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.19/CHANGELOG-v3.19.md#2025-04-16_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nGEOM_CONST\nCircle.type\nEllipse.type\nLine.type\nPoint.type\nPolygon.type\nRectangle.type\nTriangle.type\n```\n\n----------------------------------------\n\nTITLE: Creating WebGL Shader Program in JavaScript\nDESCRIPTION: Shows the new WebGLShader method for destroying and re-creating the shader program based on stored or provided vertex and fragment shader source.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.60/WebGLRenderer.md#2025-04-16_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nWebGLShader.createProgram()\n```\n\n----------------------------------------\n\nTITLE: Resetting Pipeline in JavaScript\nDESCRIPTION: Demonstrates the updated Pipeline.resetPipeline method, which now only takes a single 'resetData' argument. This change affects how pipeline data is reset.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.60/WebGLRenderer.md#2025-04-16_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nPipeline.resetPipeline(resetData)\n```\n\n----------------------------------------\n\nTITLE: Fixing Camera background rendering in WebGL\nDESCRIPTION: This fix corrects the offset of Camera backgrounds for mini-Cameras positioned inside another Camera, ensuring proper placement of background fills in WebGL rendering.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.13/CHANGELOG-v3.13.md#2025-04-16_snippet_16\n\nLANGUAGE: JavaScript\nCODE:\n```\nCamera.renderBackground\n```\n\n----------------------------------------\n\nTITLE: Setting Font in TextStyle with Update Control in JavaScript\nDESCRIPTION: Uses the setFont method of TextStyle with an optional parameter to control text updating.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.16/CHANGELOG-v3.16.md#2025-04-16_snippet_13\n\nLANGUAGE: JavaScript\nCODE:\n```\nTextStyle.setFont(font, updateText);\n```\n\n----------------------------------------\n\nTITLE: Listening for Game Out Event in Phaser.js Scene\nDESCRIPTION: This snippet shows how to listen for the 'gameout' event in a Phaser.js scene, which is triggered when the mouse or a pointer leaves the game canvas.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.16/CHANGELOG-v3.16.md#2025-04-16_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\nthis.input.on('gameout')\n```\n\n----------------------------------------\n\nTITLE: Removing Matter.js Attractor from Game Object\nDESCRIPTION: Shows how to remove attractors from a Matter.js game object by setting the attractors property to an empty array.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.85/MatterAttractor.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ngameObject.body.attractors = [];\n```\n\n----------------------------------------\n\nTITLE: Improving WebGL Renderer scissor handling in JavaScript\nDESCRIPTION: The WebGL Renderer now always enables the SCISSOR_TEST, allowing Game Objects that use scissoring (such as custom objects or Bitmap Text) to render correctly.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.13/CHANGELOG-v3.13.md#2025-04-16_snippet_17\n\nLANGUAGE: JavaScript\nCODE:\n```\nWebGLRenderer.enableScissor\n```\n\n----------------------------------------\n\nTITLE: Setting Shape Display Size\nDESCRIPTION: New chainable method for setting the display width and height of a Shape object.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.53/CHANGELOG-v3.53.md#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// Set display size of a shape with chaining\nshape.setDisplaySize(width, height);\n```\n\n----------------------------------------\n\nTITLE: Updating CanvasTexture in Phaser 3\nDESCRIPTION: This method refreshes the ImageData and ArrayBuffer based on the texture contents in Phaser 3's CanvasTexture class.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.13/CHANGELOG-v3.13.md#2025-04-16_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nCanvasTexture.update();\n```\n\n----------------------------------------\n\nTITLE: Quadratic Bezier Path Creation\nDESCRIPTION: Demonstrates the new quadratic bezier curve functionality added to the Path system.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.2/CHANGELOG-v3.2.md#2025-04-16_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\npath.quadraticBezierTo(x, y, controlX, controlY);\n```\n\n----------------------------------------\n\nTITLE: Creating Bitmap Mask using Game Object Factory\nDESCRIPTION: New method to create a Bitmap Mask using the Game Object Factory within a Scene, providing a more convenient creation syntax.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.60/Masks.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nthis.add.bitmapMask()\n```\n\n----------------------------------------\n\nTITLE: Camera Rotation Effect in Phaser 3\nDESCRIPTION: Camera effect for rotating a camera to a specific angle over a duration.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.23/CHANGELOG-v3.23.md#2025-04-16_snippet_12\n\nLANGUAGE: JavaScript\nCODE:\n```\ncamera.rotateTo(angle, duration);\n```\n\n----------------------------------------\n\nTITLE: Polygon Creation from String Coordinates\nDESCRIPTION: Creating polygon shapes using space-separated string coordinates instead of arrays. Works with both basic Polygon and Polygon Shape objects.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.14/CHANGELOG-v3.14.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Create polygon from string coordinates\npolygon.setTo('40 0 40 20 100 20 100 80 40 80 40 100 0 50');\n```\n\n----------------------------------------\n\nTITLE: Fixing TileSprite frame changing in JavaScript\nDESCRIPTION: The setFrame method for TileSprite now correctly changes the frame instead of just altering the frame size, ensuring proper frame updates for tile sprites.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.13/CHANGELOG-v3.13.md#2025-04-16_snippet_21\n\nLANGUAGE: JavaScript\nCODE:\n```\nTileSprite.setFrame\n```\n\n----------------------------------------\n\nTITLE: Resuming WebAudio Context in Phaser\nDESCRIPTION: Updated method to handle interrupted AudioContext state, particularly for iOS when leaving the page. It now checks for the 'interrupted' state and resumes the context.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.54/CHANGELOG-v3.54.md#2025-04-16_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nWebAudioSoundManager.onFocus()\n```\n\n----------------------------------------\n\nTITLE: Setting Line Spacing for Text in Phaser 3\nDESCRIPTION: This method allows setting the line spacing value of a Text object in a chainable call in Phaser 3.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.13/CHANGELOG-v3.13.md#2025-04-16_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\nText.setLineSpacing(value);\n```\n\n----------------------------------------\n\nTITLE: Deprecated WebGLPipeline Uniform Methods in Phaser.js\nDESCRIPTION: List of deprecated uniform setting methods that have been removed from WebGLPipeline. Code using these methods should be updated to use the new methods that provide more efficient uniform handling.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.50/CHANGELOG-v3.50.md#2025-04-16_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nWebGLPipeline.setFloat1 // replaced by set1f\nWebGLPipeline.setFloat2 // replaced by set2f\nWebGLPipeline.setFloat3 // replaced by set3f\nWebGLPipeline.setFloat4 // replaced by set4f\nWebGLPipeline.setFloat1v // replaced by set1fv\nWebGLPipeline.setFloat2v // replaced by set2fv\nWebGLPipeline.setFloat3v // replaced by set3fv\nWebGLPipeline.setFloat4v // replaced by set4fv\nWebGLPipeline.setInt1 // replaced by set1i\nWebGLPipeline.setInt2 // replaced by set2i\nWebGLPipeline.setInt3 // replaced by set3i\nWebGLPipeline.setInt4 // replaced by set4i\nWebGLPipeline.setMatrix1 // replaced by setMatrix2fv\nWebGLPipeline.setMatrix2 // replaced by setMatrix3fv\nWebGLPipeline.setMatrix3 // replaced by setMatrix4fv\n```\n\n----------------------------------------\n\nTITLE: Setting Scale Manager Runtime Snap Values\nDESCRIPTION: Method call to set snap values for the game size after the game has started, allowing dynamic adjustment of dimension constraints.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.80/CHANGELOG-v3.80.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nScaleManager.setSnap(width, height)\n```\n\n----------------------------------------\n\nTITLE: Getting Tween Value for Specific Property in JavaScript\nDESCRIPTION: Shows how to get the value of a specific property in a Tween using the updated getValue method. This allows accessing values of multiple tweened properties.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.20/CHANGELOG-v3.20.md#2025-04-16_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst value = Tween.getValue(propertyIndex);\n```\n\n----------------------------------------\n\nTITLE: Getting Tint Property in JavaScript\nDESCRIPTION: The 'tint' property can now be used as both a getter and setter, returning the equivalent of the 'tintTopLeft' value when read.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.70/CHANGELOG-v3.70.md#2025-04-16_snippet_21\n\nLANGUAGE: JavaScript\nCODE:\n```\ngameObject.tint\n```\n\n----------------------------------------\n\nTITLE: Updating CanvasRenderer for IE9 Compatibility\nDESCRIPTION: The CanvasRenderer has been updated to ignore frames with zero dimensions, fixing an issue in Internet Explorer 9.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.60/Build.md#2025-04-16_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\n// CanvasRenderer update\nif (width === 0 || height === 0) {\n  // Skip rendering for zero-dimension frames\n  return;\n}\n```\n\n----------------------------------------\n\nTITLE: Stopping a Scene with Data in Phaser 3\nDESCRIPTION: Illustrates how to stop a scene and pass data to its shutdown method using the updated stop methods in SceneManager and ScenePlugin.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.20/CHANGELOG-v3.20.md#2025-04-16_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nSceneManager.stop(sceneKey, data);\n// or\nScenePlugin.stop(data);\n```\n\n----------------------------------------\n\nTITLE: Generating TypeScript Definitions for Phaser\nDESCRIPTION: Command to generate TypeScript definition files for Phaser. This replaces the file in the root 'types' folder based on the current source code.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/scripts/tsgen/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run tsgen\n```\n\n----------------------------------------\n\nTITLE: Resetting Pointers in Phaser Input Plugin\nDESCRIPTION: New method to reset all Pointer instances in the Input Manager. Useful for restoring input state after interference from third-party components.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.60/Input.md#2025-04-16_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nInputPlugin.resetPointers\n```\n\n----------------------------------------\n\nTITLE: Loading a Video in Phaser 3.60.0 Compared to Previous Versions\nDESCRIPTION: Demonstrates how the video loading syntax has been simplified in Phaser 3.60.0. The number of parameters has been reduced from five to three, eliminating the 'loadeddata' and boolean parameters that were previously required.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.60/VideoGameObject.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n//  Previously you had to do this. Note the 5 paramters:\nthis.load.video('wormhole', 'wormhole.mp4', 'loadeddata', false, true);\n\n//  Now, you just specify the key, URL and the 'noAudio' boolean:\nthis.load.video('wormhole', 'wormhole.mp4', true);\n```\n\n----------------------------------------\n\nTITLE: Path Tangent Calculation in Phaser 3\nDESCRIPTION: Method for getting a unit vector tangent at a relative position on a path curve.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.23/CHANGELOG-v3.23.md#2025-04-16_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\npath.getTangent(t);\n```\n\n----------------------------------------\n\nTITLE: Accessing Plane Origin in JavaScript\nDESCRIPTION: New read-only properties added to the Plane Game Object to return its origin, which is always 0.5.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.70/CHANGELOG-v3.70.md#2025-04-16_snippet_20\n\nLANGUAGE: JavaScript\nCODE:\n```\nPlane.originX\nPlane.originY\n```\n\n----------------------------------------\n\nTITLE: Setting Random Color in Phaser 3\nDESCRIPTION: This method sets the color to a random hue based on the given minimum and maximum values in Phaser 3's Color object.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.13/CHANGELOG-v3.13.md#2025-04-16_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nColor.random(min, max);\n```\n\n----------------------------------------\n\nTITLE: Loading External Plugin in Phaser 3\nDESCRIPTION: Shows how to preload an external plugin using the Phaser 3 loader. This allows loading plugins hosted externally or dynamically at runtime.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.8/CHANGELOG-v3.8.md#2025-04-16_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nload.plugin\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nload.scenePlugin\n```\n\n----------------------------------------\n\nTITLE: Generating Vertices for Mesh in Phaser 3\nDESCRIPTION: The 'GenerateVerts' function for Mesh now returns an object with the property 'vertices' instead of 'verts', matching the expected input for the 'addVertices' method.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.52/CHANGELOG-v3.52.md#2025-04-16_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nlet { vertices } = GenerateVerts()\n```\n\n----------------------------------------\n\nTITLE: Setting a Default Cursor for the Game\nDESCRIPTION: Method to set the default cursor style for the entire game, accepting any valid CSS cursor string or URL to a cursor image file.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.10/CHANGELOG-v3.10.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nthis.input.setDefaultCursor()\n```\n\n----------------------------------------\n\nTITLE: Random Angle Generation in Phaser 3\nDESCRIPTION: Functions for generating random angles in radians or degrees within specified ranges.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.23/CHANGELOG-v3.23.md#2025-04-16_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Random angle in radians between -pi and pi\nMath.Angle.Random();\n\n// Random angle in degrees between -180 and 180\nMath.Angle.RandomDegrees();\n```\n\n----------------------------------------\n\nTITLE: Creating Keys with Capture in Phaser 3.16\nDESCRIPTION: Illustrates how to create keys with the new enableCapture option. This automatically adds a key capture when creating a new key.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.16/CHANGELOG-v3.16.md#2025-04-16_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// Add a single key with capture enabled\nconst spaceKey = this.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.SPACE, true);\n\n// Add multiple keys with capture enabled\nconst keys = this.input.keyboard.addKeys('W,A,S,D', true);\n```\n\n----------------------------------------\n\nTITLE: Accessing Tiled Layer IDs in Phaser.js\nDESCRIPTION: New properties 'Tilemaps.ObjectLayer.id' and 'Tilemaps.LayerData.id' return the ID of the Object Layer or Data Layer respectively, as specified within Tiled. This allows access to unique layer IDs even when map layer names are not unique.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.70/CHANGELOG-v3.70.md#2025-04-16_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\nTilemaps.ObjectLayer.id\nTilemaps.LayerData.id\n```\n\n----------------------------------------\n\nTITLE: Using Data Manager Features\nDESCRIPTION: Demonstrates the new Data Manager features including direct value access, batch setting of values, and array-based operations.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.10/CHANGELOG-v3.10.md#2025-04-16_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\n// Setting multiple values at once\ndata.set({\n  name: 'Red Gem Stone',\n  level: 2,\n  owner: 'Link',\n  gold: 50\n});\n\n// Accessing values directly\nconsole.log(data.values.gold);\n\n// Getting multiple values\nconst [name, level] = data.get(['name', 'level']);\n\n// Removing multiple values\ndata.remove(['name', 'level']);\n```\n\n----------------------------------------\n\nTITLE: Fill-based Tinting for Tilemaps in Phaser.js\nDESCRIPTION: New method 'TilemapLayer.setTintFill' applies a fill-based tint to tiles in a given area. The 'Tile.tintFill' property controls whether the tile tint is additive or fill-based.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.70/CHANGELOG-v3.70.md#2025-04-16_snippet_15\n\nLANGUAGE: JavaScript\nCODE:\n```\nTilemapLayer.setTintFill()\nTile.tintFill\n```\n\n----------------------------------------\n\nTITLE: Animated Particles with Quantity Cycling\nDESCRIPTION: Configuration for particles that cycle through animations with specific quantities per animation.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.60/ParticleEmitter.md#2025-04-16_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst emitter = this.add.particles(400, 300, 'gems', {\n    anim: { anims: [ 'prism', 'ruby' ], cycle: true, quantity: 10 }\n    ...\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing WebGL Extensions Method in Phaser.js\nDESCRIPTION: New method that queries the GL context for supported extensions and sets them as class properties. Called during initialization and context restoration.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.85.2/CHANGELOG-v3.85.2.md#2025-04-16_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nWebGLRenderer.setExtensions\n```\n\n----------------------------------------\n\nTITLE: Updating GLSL Fragment Shader Color Order\nDESCRIPTION: Modified fragment shaders (Single.frag, Light.frag, Multi.frag) now read color values as outTint.bgr instead of outTint.rgb to maintain RGB order in the Tint component while simplifying the shader code by removing the 3-way check on outTintEffect.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.50/CHANGELOG-v3.50.md#2025-04-16_snippet_17\n\nLANGUAGE: GLSL\nCODE:\n```\noutTint.bgr\n```\n\n----------------------------------------\n\nTITLE: Text Property Update API Changes\nDESCRIPTION: Changes to Text Game Object property access, introducing private _text property and getter/setter for text property that interfaces with setText method.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.12/CHANGELOG-v3.12.md#2025-04-16_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Old way\ntext.setText('new text');\n\n// New way - both work now\ntext.setText('new text');\ntext.text = 'new text';\n```\n\n----------------------------------------\n\nTITLE: Object Loading in Atlas - JavaScript\nDESCRIPTION: Example showing how to pass an object to Loader.atlas, similar to loading images\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.2.1/CHANGELOG-v3.2.1.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nLoader.atlas(objectConfig)\n```\n\n----------------------------------------\n\nTITLE: Matter.Body Collision Callback Type Definition\nDESCRIPTION: Type definition for collision event callback functions that can be registered with Matter.Body objects. The callback receives a Matter.Pair object containing information about the colliding bodies.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.85/MatterCollisionEvents.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(pair: Matter.Pair) => void\n```\n\n----------------------------------------\n\nTITLE: Using Blob URLs in Phaser 3 Loader\nDESCRIPTION: Support for loading Audio and Video objects from Blob URLs in the Phaser loader.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.23/CHANGELOG-v3.23.md#2025-04-16_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Load audio from a Blob URL\nthis.load.audio('key', blobUrl);\n\n// Load video from a Blob URL\nthis.load.video('key', blobUrl);\n```\n\n----------------------------------------\n\nTITLE: Game Object Pipeline Component Methods in Phaser.js\nDESCRIPTION: New properties and methods available on Game Objects with the Pipeline Component in Phaser 3.50. These additions support Post Pipelines and provide more control over pipeline management for individual Game Objects.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.50/CHANGELOG-v3.50.md#2025-04-16_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Properties\nGameObject.hasPostPipeline\nGameObject.postPipelines\nGameObject.pipelineData\n\n// Methods\nGameObject.setPipeline(pipeline, pipelineData, copyData)\nGameObject.setPostPipeline(pipelines, pipelineData, copyData)\nGameObject.setPipelineData(key, value)\nGameObject.getPostPipeline(pipeline)\nGameObject.resetPipeline(resetPostPipeline, resetData)\nGameObject.resetPostPipeline(resetData)\nGameObject.removePostPipeline(pipeline)\n```\n\n----------------------------------------\n\nTITLE: Enhancing RenderTarget.resize Method in JavaScript\nDESCRIPTION: Improves the RenderTarget.resize method to floor scaled width and height values and ensure they're not less than or equal to 0, preventing 'Framebuffer status: Incomplete Attachment' errors.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.53/CHANGELOG-v3.53.md#2025-04-16_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Updated RenderTarget.resize method\nRenderTarget.prototype.resize = function (width, height) {\n    width = Math.max(1, Math.floor(width));\n    height = Math.max(1, Math.floor(height));\n    // Rest of the implementation\n};\n```\n\n----------------------------------------\n\nTITLE: Building Spine 4.1 Plugin for Phaser\nDESCRIPTION: npm script to build a new version of the Spine 4.1 plugin for Phaser, creating a distribution-ready version.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/plugins/spine4.1/README.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm run plugin.spine4.dist\n```\n\n----------------------------------------\n\nTITLE: Shader and Texture Management Features\nDESCRIPTION: New methods and properties added for shader rendering to textures and texture management functionality. Includes capabilities for WebGL texture handling and framebuffer management.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.19/CHANGELOG-v3.19.md#2025-04-16_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nShader.setRenderToTexture()\nShader.setSampler2DBuffer()\nShader.renderToTexture\nShader.framebuffer\nShader.glTexture\nShader.texture\nTextureManager.addGLTexture()\nTextureSource.isGLTexture\n```\n\n----------------------------------------\n\nTITLE: SetFrame Method Usage - JavaScript\nDESCRIPTION: Example of using SetFrame method with optional updateSize and updateOrigin parameters\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.2.1/CHANGELOG-v3.2.1.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nsetFrame(frame, updateSize = true, updateOrigin = true)\n```\n\n----------------------------------------\n\nTITLE: Transform Matrix Quad Dimensions Fix in Phaser.js\nDESCRIPTION: Updated method that rounds only x/y coordinates while preserving exact quad dimensions to prevent texture size inconsistencies when using camera roundPixels option.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.85.2/CHANGELOG-v3.85.2.md#2025-04-16_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nTransformMatrix.setQuad\n```\n\n----------------------------------------\n\nTITLE: Setting Up HTML Texture Loading\nDESCRIPTION: Example of loading HTML content into textures using the new file type loader\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.12/CHANGELOG-v3.12.md#2025-04-16_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nload.html('key', 'path/to/file.html')\n```\n\n----------------------------------------\n\nTITLE: Setting Word Wrap Properties for Text in Phaser 3\nDESCRIPTION: Shows how to use the new TextStyle properties for controlling word wrapping in text objects, including setting maximum width and custom wrapping functions.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.24/CHANGELOG-v3.24.md#2025-04-16_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nTextStyle.wordWrapWidth = 300;\nTextStyle.wordWrapCallback = customWrapFunction;\nTextStyle.wordWrapCallbackScope = this;\nTextStyle.wordWrapUseAdvanced = true;\n```\n\n----------------------------------------\n\nTITLE: Updating BlitterWebGLRenderer Function Call in JavaScript\nDESCRIPTION: Fixes an outdated function call in BlitterWebGLRenderer, replacing 'setRenderDepth' with 'addToRenderList'.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.53/CHANGELOG-v3.53.md#2025-04-16_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Old code\n// BlitterWebGLRenderer.setRenderDepth();\n\n// New code\nBlitterWebGLRenderer.addToRenderList();\n```\n\n----------------------------------------\n\nTITLE: Updating Actions.PlayAnimation Arguments in JavaScript\nDESCRIPTION: Modifies the Actions.PlayAnimation function to match the new animation system introduced in Phaser 3.50, accepting either a string key or a play animation configuration object.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.53/CHANGELOG-v3.53.md#2025-04-16_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Updated Actions.PlayAnimation function\nActions.PlayAnimation = function (items, key, ignoreIfPlaying) {\n    for (var i = 0; i < items.length; i++) {\n        var item = items[i];\n        if (item.anims && item.anims.play) {\n            item.anims.play(key, ignoreIfPlaying);\n        }\n    }\n    return items;\n};\n```\n\n----------------------------------------\n\nTITLE: New Scene Manager Property in Phaser 3.60.0\nDESCRIPTION: A new property added to the SceneManager that provides a reference to a system Scene for use by plugins and managers.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.60/Scene.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nSceneManager.systemScene\n```\n\n----------------------------------------\n\nTITLE: Checking If Rectangle Objects Have Same Dimensions\nDESCRIPTION: Uses Rectangle.SameDimensions to determine if two Rectangle objects (or objects with width and height properties) have identical dimensions under strict equality.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.15/CHANGELOG-v3.15.md#2025-04-16_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Check if two rectangles have the same width and height\nconst rect1 = new Phaser.Geom.Rectangle(0, 0, 100, 50);\nconst rect2 = new Phaser.Geom.Rectangle(20, 30, 100, 50);\n\nif (Phaser.Geom.Rectangle.SameDimensions(rect1, rect2)) {\n    // This will be true as both have width=100 and height=50\n    console.log('Rectangles have the same dimensions');\n}\n```\n\n----------------------------------------\n\nTITLE: Using GameObject's Display List Management Methods\nDESCRIPTION: New methods for managing game objects in display and update lists, useful for custom display list management.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.53/CHANGELOG-v3.53.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Add a game object to a display list\ngameObject.addToDisplayList(displayList);\n\n// Add a game object to the update list\ngameObject.addToUpdateList();\n\n// Remove a game object from its current display list\ngameObject.removeFromDisplayList();\n\n// Remove a game object from the update list\ngameObject.removeFromUpdateList();\n```\n\n----------------------------------------\n\nTITLE: Using Erase Blend Mode in RenderTexture.endDraw\nDESCRIPTION: New optional boolean parameter added to RenderTexture.endDraw method to enable erasing of filled pixels in drawn objects using the ERASE blend mode.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.55/CHANGELOG-v3.55.md#2025-04-16_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nrenderTexture.endDraw(true); // Enable erase blend mode\n```\n\n----------------------------------------\n\nTITLE: Updating Tween Data in JavaScript\nDESCRIPTION: The Tween.updateTweenData method now checks if the Tween target still exists before updating its properties. This prevents errors when trying to update properties of deleted objects.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.1.2/CHANGELOG-v3.1.2.md#2025-04-16_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nTween.updateTweenData will now check to see if the Tween target still exists before trying to update its properties.\n```\n\n----------------------------------------\n\nTITLE: Enhancing Matter.js body rendering in JavaScript\nDESCRIPTION: This improvement allows Matter.js to skip bodies with hidden debug graphics, fixing an issue where setting a body's debug render.visible property to false would prevent rendering of subsequent debug bodies.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.13/CHANGELOG-v3.13.md#2025-04-16_snippet_12\n\nLANGUAGE: JavaScript\nCODE:\n```\nMatter.js\n```\n\n----------------------------------------\n\nTITLE: Updating GameObject.destroy Method Parameters - JavaScript\nDESCRIPTION: The GameObject.destroy method now includes a new 'fromScene' parameter that is automatically set by Phaser to indicate whether the destruction was triggered by user code or a scene change.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.55.1/CHANGELOG-v3.55.1.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nGameObject.destroy(fromScene)\n```\n\n----------------------------------------\n\nTITLE: Batch Setting Elements in Phaser.js Map Structure\nDESCRIPTION: New method 'Structs.Map.setAll' allows setting multiple elements into a Map structure using an array. This method is chainable.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.70/CHANGELOG-v3.70.md#2025-04-16_snippet_17\n\nLANGUAGE: JavaScript\nCODE:\n```\nStructs.Map.setAll(elements)\n```\n\n----------------------------------------\n\nTITLE: Example Usage of New Scene Resize Event\nDESCRIPTION: Demonstrates how to handle the new resize event emitted to Scenes when Game.resize is called. The event provides new canvas width and height values.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.2/CHANGELOG-v3.2.md#2025-04-16_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nscene.events.on('resize', (width, height) => {\n    // Handle resize with new canvas dimensions\n});\n```\n\n----------------------------------------\n\nTITLE: Renamed ScaleManager Property to Avoid EventEmitter Conflicts\nDESCRIPTION: The ScaleManager.listeners property has been renamed to domlisteners to prevent conflicts with the EventEmitter listeners object.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.60/ScaleManager.md#2025-04-16_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n* `ScaleManager.listeners` has been renamed to `domlisteners` to avoid conflicting with the EventEmitter listeners object. Fix #6260 (thanks @x-wk)\n```\n\n----------------------------------------\n\nTITLE: Loading Normal Maps for Atlas JSON in Phaser 3\nDESCRIPTION: This snippet demonstrates how to load normal maps for Atlas JSON in both hash and array formats using the Texture Manager.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.7.1/CHANGELOG-v3.7.1.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nload.image({ key: 'shinyRobot', url: 'rob.png', normalMap: 'rob_n.png' });\n```\n\n----------------------------------------\n\nTITLE: New Event Constants in PhaserJS\nDESCRIPTION: New event constants for handling Game Object addition and removal from scenes. These events are emitted when objects are added to or removed from the scene display list or containers.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.50/CHANGELOG-v3.50.md#2025-04-16_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nGameObjects.Events.ADDED_TO_SCENE\nGameObjects.Events.REMOVED_FROM_SCENE\nScenes.Events.ADDED_TO_SCENE\nScenes.Events.REMOVED_FROM_SCENE\n```\n\n----------------------------------------\n\nTITLE: Clearing Camera Render to Texture in Phaser 3\nDESCRIPTION: This method stops a camera from rendering to a texture and frees up associated resources in Phaser 3.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.13/CHANGELOG-v3.13.md#2025-04-16_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nCamera.clearRenderToTexture();\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript for Phaser\nDESCRIPTION: TypeScript configuration settings required for using Phaser with TypeScript, including library references and type definitions.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/README.md#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n\"lib\": [\"es6\", \"dom\", \"dom.iterable\", \"scripthost\"],\n\"typeRoots\": [\"./node_modules/phaser/types\"],\n\"types\": [\"Phaser\"]\n```\n\n----------------------------------------\n\nTITLE: Clearing Particle Emitter Zones in Phaser.js\nDESCRIPTION: New methods 'ParticleEmitter.clearDeathZones' and 'ParticleEmitter.clearEmitZones' allow clearing all previously created Death Zones or Emission Zones from a Particle Emitter.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.70/CHANGELOG-v3.70.md#2025-04-16_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\nParticleEmitter.clearDeathZones()\nParticleEmitter.clearEmitZones()\n```\n\n----------------------------------------\n\nTITLE: Loading Camera3D Plugin as External Plugin in Phaser 3\nDESCRIPTION: This snippet demonstrates how to preload the Camera3D plugin as an external plugin in Phaser 3. It uses the 'load.scenePlugin' method to load the plugin file and assign it to the 'cameras3d' namespace.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/plugins/camera3d/readme.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction preload ()\n{\n    this.load.scenePlugin('Camera3DPlugin', 'plugins/camera3d.min.js', 'Camera3DPlugin', 'cameras3d');\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Phaser via NPM\nDESCRIPTION: Command to install Phaser package using npm package manager.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install phaser\n```\n\n----------------------------------------\n\nTITLE: Listening for Game Over Event in Phaser.js Scene\nDESCRIPTION: This code demonstrates how to listen for the 'gameover' event in a Phaser.js scene, which is triggered when the mouse or a pointer moves over the game canvas.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.16/CHANGELOG-v3.16.md#2025-04-16_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nthis.input.on('gameover')\n```\n\n----------------------------------------\n\nTITLE: Setting a Custom Image Cursor for a Game Object\nDESCRIPTION: Example of setting a custom image-based cursor with a fallback pointer style on a game object's input property.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.10/CHANGELOG-v3.10.md#2025-04-16_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nbutton.input.cursor = 'url(assets/cursors/sword.cur), pointer'\n```\n\n----------------------------------------\n\nTITLE: WebGLPipeline Event Constants in Phaser.js\nDESCRIPTION: Event constants defined in the WebGL.Pipelines.Events namespace for WebGLPipeline instances. These events are emitted at various stages of the pipeline lifecycle and can be listened to by external code.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.50/CHANGELOG-v3.50.md#2025-04-16_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nWebGL.Pipelines.Events.AFTER_FLUSH\nWebGL.Pipelines.Events.BEFORE_FLUSH\nWebGL.Pipelines.Events.BIND\nWebGL.Pipelines.Events.BOOT\nWebGL.Pipelines.Events.DESTROY\nWebGL.Pipelines.Events.REBIND\nWebGL.Pipelines.Events.RESIZE\n```\n\n----------------------------------------\n\nTITLE: Setting maxLights in Game Config for Light2D Shader\nDESCRIPTION: Allows setting the maximum number of lights the Light2D shader can render in a single pass through the game configuration. The default value is 10, with a warning that more lights can impact performance.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.15/CHANGELOG-v3.15.md#2025-04-16_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n// In your game config\nconst config = {\n    // Other config options...\n    maxLights: 15, // Override default of 10 lights\n    // Rest of your config...\n};\n\nconst game = new Phaser.Game(config);\n```\n\n----------------------------------------\n\nTITLE: Forcing Blend Mode in WebGL Renderer in JavaScript\nDESCRIPTION: Sets a specific blend mode in the WebGL renderer with an option to force the change.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.16/CHANGELOG-v3.16.md#2025-04-16_snippet_14\n\nLANGUAGE: JavaScript\nCODE:\n```\nWebGLRenderer.setBlendMode(blendMode, force);\n```\n\n----------------------------------------\n\nTITLE: Building Spine 4 Plugin for Phaser 3.60.0\nDESCRIPTION: NPM scripts for building and developing the Spine 4 Plugin for Phaser 3.60.0. These commands allow for building distribution files, entering watch mode for development, and building Spine 4 runtimes.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.60/Spine4.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run plugin.spine4.1.full.dist\nnpm run plugin.spine4.1.dist\nnpm run plugin.spine4.1.watch\nnpm run plugin.spine4.1.runtimes\n```\n\n----------------------------------------\n\nTITLE: Adding Polyfill for requestVideoFrameCallback API\nDESCRIPTION: A polyfill has been added for the 'requestVideoFrameCallback' API to ensure compatibility across browsers, as the Video Game Object now relies on this API.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.60/Build.md#2025-04-16_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Polyfill for requestVideoFrameCallback\nif (!('requestVideoFrameCallback' in HTMLVideoElement.prototype)) {\n  // Polyfill implementation\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Binary Files with Data Type in Phaser 3\nDESCRIPTION: This example shows how to load binary files with a specified data type using the Loader's binary method.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.7.1/CHANGELOG-v3.7.1.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nload.binary('mod', 'music.mod', Uint8Array)\n```\n\n----------------------------------------\n\nTITLE: Setting a Custom Cursor via Configuration Object\nDESCRIPTION: Example of setting a custom cursor style using the configuration object parameter of setInteractive.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.10/CHANGELOG-v3.10.md#2025-04-16_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nsetInteractive({ cursor: CSSString })\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Plugins with Data\nDESCRIPTION: Demonstrates how to add a plugin with initial data configuration\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.12/CHANGELOG-v3.12.md#2025-04-16_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\n{ key: 'BankPlugin', plugin: BankPluginV3, start: true, data: { gold: 5000 } }\n```\n\n----------------------------------------\n\nTITLE: Setting an Interactive Game Object with Pixel Perfect Detection (Shorthand)\nDESCRIPTION: Simplified method of enabling pixel perfect hit detection using the configuration object parameter of setInteractive.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.10/CHANGELOG-v3.10.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nsetInteractive({ pixelPerfect: true })\n```\n\n----------------------------------------\n\nTITLE: Configuring Round Pixels in Game Config\nDESCRIPTION: Setting the roundPixels property to true in the game configuration to enable pixel-perfect rendering. This is now the default behavior but can be explicitly disabled.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.70/CHANGELOG-v3.70.md#2025-04-16_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Enable pixel-perfect rendering (now default)\nconst config = {\n    // other config options...\n    roundPixels: true  // This is now true by default\n};\n\n// Disable pixel-perfect rendering\nconst config = {\n    // other config options...\n    roundPixels: false\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Mouse Target in Phaser 3\nDESCRIPTION: Demonstrates how to set the mouse target in Phaser 3 using either a string or an HTMLElement. This allows for more flexible mouse input configuration.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.20/CHANGELOG-v3.20.md#2025-04-16_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nMouseManager.target = 'game-canvas';\n// or\nMouseManager.target = document.getElementById('game-canvas');\n```\n\n----------------------------------------\n\nTITLE: Manually Stepping Matter Physics Simulation in JavaScript\nDESCRIPTION: New method to manually advance the Matter Physics simulation by one iteration. This allows for precise control over the physics update frequency when used with autoUpdate set to false.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.4/CHANGELOG-v3.4.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nMatter.Physics.step(delta, correction);\n```\n\n----------------------------------------\n\nTITLE: WebGL Pipeline Manager API Changes\nDESCRIPTION: Migration guide showing the replacement methods for accessing and managing WebGL pipelines in Phaser 3.50 using the new Pipeline Manager.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.50/CHANGELOG-v3.50.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Old API\nWebGLRenderer.currentPipeline\nWebGLRenderer.previousPipeline\nWebGLRenderer.hasPipeline()\nWebGLRenderer.getPipeline()\nWebGLRenderer.removePipeline()\nWebGLRenderer.addPipeline()\nWebGLRenderer.setPipeline()\nWebGLRenderer.rebindPipeline()\nWebGLRenderer.clearPipeline()\n\n// New API\nPipelineManager.current\nPipelineManager.previous\nPipelineManager.has()\nPipelineManager.get()\nPipelineManager.remove()\nPipelineManager.add()\nPipelineManager.set()\nPipelineManager.rebind()\nPipelineManager.clear()\n```\n\n----------------------------------------\n\nTITLE: Camera Render to Texture Configuration in Phaser 3\nDESCRIPTION: Methods for controlling camera rendering to textures and to the game canvas. Allows toggling whether a camera renders to both its texture and the game canvas.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.23/CHANGELOG-v3.23.md#2025-04-16_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Set render to texture with option to render to game\ncamera.setRenderToTexture(textureKey, renderToGame);\n\n// Toggle rendering to game at runtime\ncamera.renderToGame = false;\n```\n\n----------------------------------------\n\nTITLE: Updating Utils.Array.GetFirst in JavaScript\nDESCRIPTION: Enhanced functionality to search from the end of the array when setting startIndex to -1.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.88/CHANGELOG-v3.88.md#2025-04-16_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nUtils.Array.GetFirst\n```\n\n----------------------------------------\n\nTITLE: Building Spine Runtimes\nDESCRIPTION: Command to build the updated Spine runtimes and place them in the correct location within the Phaser.js plugin structure.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/plugins/spine/README.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm run plugin.spine.runtimes\n```\n\n----------------------------------------\n\nTITLE: Legacy Particle Emitter Creation (Pre-3.60.0)\nDESCRIPTION: Previous method of creating particle emitters using ParticleEmitterManager, shown for comparison with the new method.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.60/ParticleEmitter.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst manager = this.add.particles('flares');\n\nconst emitter = manager.createEmitter({\n    x: 100,\n    y: 300,\n    frame: 'red',\n    angle: { min: -30, max: 30 },\n    speed: 150\n});\n```\n\n----------------------------------------\n\nTITLE: Calculating Median in JavaScript using Phaser.Math.Median\nDESCRIPTION: New function to calculate the median of given values. It sorts the values and returns the middle value, or the average of two middle values for an even number of inputs.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.54/CHANGELOG-v3.54.md#2025-04-16_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nPhaser.Math.Median(values)\n```\n\n----------------------------------------\n\nTITLE: Adding isNumberTween Property to Tween in JavaScript\nDESCRIPTION: New boolean property added to Tween to indicate if it's a NumberTween or not.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.88/CHANGELOG-v3.88.md#2025-04-16_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nTween.isNumberTween\n```\n\n----------------------------------------\n\nTITLE: Explaining Three Slice Game Object Structure in ASCII Diagram\nDESCRIPTION: ASCII diagram showing the layout structure of a Three Slice Game Object. The diagram illustrates the 3 regions labeled 1-3, with letters A-C marking the edges. This structure allows for horizontal-only stretching.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.60/NineSliceGameObject.md#2025-04-16_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n    A                          B\n  +---+----------------------+---+\n  |   |                      |   |\nC | 1 |          2           | 3 |\n  |   |                      |   |\n  +---+----------------------+---+\n```\n\n----------------------------------------\n\nTITLE: Configuring domPointerEvents in Phaser 3 Game Config\nDESCRIPTION: New config property added to set the pointerEvents CSS attribute on the DOM Element container when initializing a Phaser game.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.55/CHANGELOG-v3.55.md#2025-04-16_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst config = {\n  dom: {\n    pointerEvents: 'auto'\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Tile Sprite Scale Setting\nDESCRIPTION: Example of the new chainable setTileScale method for Tile Sprites.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.12/CHANGELOG-v3.12.md#2025-04-16_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\ntileSprite.setTileScale(2, 2);\n```\n\n----------------------------------------\n\nTITLE: Importing MatterRunner in World.js\nDESCRIPTION: Addition of import statement for MatterRunner from the core Runner module to handle physics simulation timing.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.85/MatterWorldUpdate.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { MatterRunner } from './lib/core/Runner';\n```\n\n----------------------------------------\n\nTITLE: Testing Phaser TypeScript Definitions\nDESCRIPTION: Command to test the generated TypeScript definitions by compiling a test project. Compilation errors will be output to 'output.txt'.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/scripts/tsgen/README.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run test-ts\n```\n\n----------------------------------------\n\nTITLE: TileSprite Texture Scaling\nDESCRIPTION: New properties to control the scale of the texture within a TileSprite, affecting the repeating texture scaling independently of the TileSprite's own scale.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.11/CHANGELOG-v3.11.md#2025-04-16_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\nTileSprite.tileScaleX = 2;\nTileSprite.tileScaleY = 2;\n```\n\n----------------------------------------\n\nTITLE: Clearing a Specific Region in CanvasTexture in JavaScript\nDESCRIPTION: Clears a defined region of a CanvasTexture using optional x, y, width, and height parameters.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.16/CHANGELOG-v3.16.md#2025-04-16_snippet_18\n\nLANGUAGE: JavaScript\nCODE:\n```\nCanvasTexture.clear(x, y, width, height);\n```\n\n----------------------------------------\n\nTITLE: Correcting Zone hit area coordinates in JavaScript\nDESCRIPTION: The Zone.setRectangleDropZone method now uses the correct x and y coordinates for the hit area, fixing an offset issue introduced in a previous update.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.13/CHANGELOG-v3.13.md#2025-04-16_snippet_22\n\nLANGUAGE: JavaScript\nCODE:\n```\nZone.setRectangleDropZone\n```\n\n----------------------------------------\n\nTITLE: Accessing WebGLRenderer Texture State in Phaser 3\nDESCRIPTION: New boolean property added to WebGLRenderer that tracks if all multi-textures are in a clean 'default' state, helping to avoid unnecessary GL texture binds and activations during Scene restart or destruction.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.51/CHANGELOG-v3.51.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n`WebGLRenderer.isTextureClean` is a new boolean property that tracks of all of the multi-textures are in a clean 'default' state, to avoid lots of gl texture binds and activations during a Scene restart or destruction process.\n```\n\n----------------------------------------\n\nTITLE: Adding Keys to Keyboard Manager in JavaScript\nDESCRIPTION: Demonstrates new methods for adding keys to the Keyboard Manager, including support for string input and key codes.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.10/CHANGELOG-v3.10.md#2025-04-16_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nkeyboard.addKeys('W,S,A,D')\n```\n\nLANGUAGE: javascript\nCODE:\n```\nkeyboard.addKey('A')\n```\n\nLANGUAGE: javascript\nCODE:\n```\nkeyboard.addKey('SPACE')\n```\n\nLANGUAGE: javascript\nCODE:\n```\nkeyboard.addKey(keyCode)\n```\n\n----------------------------------------\n\nTITLE: Enhancing WebGL Renderer texture handling in JavaScript\nDESCRIPTION: The WebGL Renderer now correctly deletes and re-creates canvas-backed textures instead of attempting to resize them, fixing issues with texture management.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.13/CHANGELOG-v3.13.md#2025-04-16_snippet_15\n\nLANGUAGE: JavaScript\nCODE:\n```\nWebGLRenderer.resizeTexture\n```\n\n----------------------------------------\n\nTITLE: Configuring Jest Module Name Mapping for Phaser Project\nDESCRIPTION: This configuration sets up Jest's moduleNameMapper to handle various import paths and file types in the Phaser project. It maps specific package paths and handles CSS and TypeScript file imports.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/scripts/tsgen/test/output.txt#2025-04-16_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = {\n    moduleNameMapper: {\n        '^@phaserjs/([^/]*)(.*)$': '<rootDir>/../$1/src$2',\n        '^phaser(.*)$': '<rootDir>/src$1',\n        '\\\\.(css|less)$': '<rootDir>/tests/__mocks__/styleMock.js'\n    },\n    preset: 'ts-jest',\n    testEnvironment: 'jsdom',\n    transformIgnorePatterns: []\n};\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Circle FX Background Alpha\nDESCRIPTION: Setting the background alpha value for the Circle FX to control the transparency of the background color.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.70/CHANGELOG-v3.70.md#2025-04-16_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Apply Circle FX with background alpha\nconst sprite = this.add.sprite(400, 300, 'image');\nconst fx = sprite.preFX.addCircle(0x000000, 0.5, 0.5, 0.7);\n\n// Set background alpha\nfx.backgroundAlpha = 0.5;\n```\n\n----------------------------------------\n\nTITLE: Enhanced Canvas Position Detection in ScaleManager\nDESCRIPTION: Update to getParentBounds method to detect changes in canvas x/y position, triggering a refresh of internal cached values when the canvas position changes even if dimensions remain the same.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.60/ScaleManager.md#2025-04-16_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n* `ScaleManager.getParentBounds` will now also check to see if the canvas bounds have changed x or y position, and if so return `true`, causing the Scale Manager to refresh all of its internal cached values. This fixes an issue where the canvas may have changed position on the page, but not its width or height, so a refresh wasn't triggered. Fix #5884 (thanks @jameswilddev)\n```\n\n----------------------------------------\n\nTITLE: Accessing Plugin Key in Phaser Scene\nDESCRIPTION: New property to access the key of the plugin within Scene Systems. This string-based property is set by the PluginManager.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.54/CHANGELOG-v3.54.md#2025-04-16_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nScenePlugin.pluginKey\n```\n\n----------------------------------------\n\nTITLE: Rectangle Intersection Calculation\nDESCRIPTION: A new static method to calculate the intersection area between two Rectangle objects.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.11/CHANGELOG-v3.11.md#2025-04-16_snippet_13\n\nLANGUAGE: JavaScript\nCODE:\n```\nlet intersection = Rectangle.Intersection(rect1, rect2);\n```\n\n----------------------------------------\n\nTITLE: Custom Headers in XHR Requests in Phaser 3\nDESCRIPTION: Configuration for sending custom headers with XHR requests in the Phaser loader.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.23/CHANGELOG-v3.23.md#2025-04-16_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\nthis.load.image('key', 'url', {\n  headers: {\n    'Authorization': 'Bearer token',\n    'Custom-Header': 'value'\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Fixing Tween management in JavaScript\nDESCRIPTION: This fix ensures that paused Tweens that were never started are properly moved to the Tween Manager's destroy list when stopped, preventing them from being stuck in the _pending array.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.13/CHANGELOG-v3.13.md#2025-04-16_snippet_13\n\nLANGUAGE: JavaScript\nCODE:\n```\nTween.stop\n```\n\n----------------------------------------\n\nTITLE: Game Object DESTROY Event Parameters - JavaScript\nDESCRIPTION: Updated DESTROY event to include a second boolean parameter 'fromScene' that indicates the source of the destruction (true if from scene change, false if from user code).\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.55.1/CHANGELOG-v3.55.1.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ngameObject.on('destroy', function(gameObject, fromScene) {\n  // Handle destroy event\n})\n```\n\n----------------------------------------\n\nTITLE: Accessing Facebook Instant Games Plugin in Phaser 3 Scene\nDESCRIPTION: This JavaScript snippet shows how to access the Facebook Instant Games plugin within a Phaser 3 scene. It demonstrates retrieving the player's name from the plugin.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/plugins/fbinstant/readme.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nthis.add.text(0, 0).setText(this.facebook.playerName);\n```\n\n----------------------------------------\n\nTITLE: Documenting Bug Fix for Web Audio Panning in Phaser 3.50.1\nDESCRIPTION: This snippet describes a bug fix for the Web Audio Panning feature in Phaser 3.50.1. It addresses an issue where the feature was breaking WebAudio functionality on Safari browsers for both OSX and iOS. The fix involves creating the stereo panner node only if it's supported by the browser.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.50.1/CHANGELOG-v3.50.1.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Version 3.50.1 - Subaru - 21st December 2020\n\n* The new Web Audio Panning feature breaks WebAudio on Safari (OSX and iOS). The stereo panner node is now only created if supported. Fix #5460 (thanks @d4rkforce)\n```\n\n----------------------------------------\n\nTITLE: Removing Keys from Keyboard Manager in JavaScript\nDESCRIPTION: Shows the updated method for removing keys from the Keyboard Manager, supporting various input types.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.10/CHANGELOG-v3.10.md#2025-04-16_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nkeyboard.removeKey('A')\n```\n\nLANGUAGE: javascript\nCODE:\n```\nkeyboard.removeKey('SPACE')\n```\n\nLANGUAGE: javascript\nCODE:\n```\nkeyboard.removeKey(keyCode)\n```\n\n----------------------------------------\n\nTITLE: Stopping Particle Emitters\nDESCRIPTION: A new chainable method to stop a particle emitter, equivalent to setting 'on' to false but allowing for method chaining.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.11/CHANGELOG-v3.11.md#2025-04-16_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\nParticleEmitter.stop();\n```\n\n----------------------------------------\n\nTITLE: Updating Matter.Components.Sleep Methods in JavaScript\nDESCRIPTION: Modifies setToSleep and setAwake methods in Matter.Components.Sleep to return 'this', aligning with the documentation.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.53/CHANGELOG-v3.53.md#2025-04-16_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Updated Matter.Components.Sleep methods\nMatter.Components.Sleep = {\n    setToSleep: function () {\n        // Implementation\n        return this;\n    },\n    setAwake: function () {\n        // Implementation\n        return this;\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Setting pointerEvents on DOMElement in Phaser 3\nDESCRIPTION: New property added to GameObjects.DOMElement to set the pointerEvents CSS attribute. This allows control over how the DOM element handles pointer events.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.55/CHANGELOG-v3.55.md#2025-04-16_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nGameObjects.DOMElement.pointerEvents = 'auto';\n```\n\n----------------------------------------\n\nTITLE: Updating TransformMatrix.setTransform in JavaScript\nDESCRIPTION: Method updated to use old way of passing matrix values for Canvas 2D, fixing errors in legacy browsers.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.88/CHANGELOG-v3.88.md#2025-04-16_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nTransformMatrix.setTransform\n```\n\n----------------------------------------\n\nTITLE: Building Spine Plugin\nDESCRIPTION: Command to build the Spine plugin distribution after updating the runtimes, creating the final plugin output.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/plugins/spine/README.md#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpm run plugin.spine.dist\n```\n\n----------------------------------------\n\nTITLE: Scale Mode Configuration Fix in Phaser\nDESCRIPTION: Fixed issue where setting scale.mode in the Game Config would be ignored. Now accepts either scale.mode or scaleMode properties.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.60/ScaleManager.md#2025-04-16_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n* Setting `scale.mode` in the Game Config would be ignored. It now accepts either this, or `scaleMode` directly. Fix #5970 (thanks @samme)\n```\n\n----------------------------------------\n\nTITLE: Sound Management Methods in Phaser 3\nDESCRIPTION: New methods for managing sounds in HTML and Web Audio Sound Managers including retrieving, removing, and stopping sounds by key.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.23/CHANGELOG-v3.23.md#2025-04-16_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Get first sound matching a key\nsoundManager.get(key);\n\n// Get all sounds matching a key\nsoundManager.getAll(key);\n\n// Remove all sounds\nsoundManager.removeAll();\n\n// Stop sounds by key\nsoundManager.stopByKey(key);\n```\n\n----------------------------------------\n\nTITLE: Configuring Webpack for Bundled Camera3D Plugin in Phaser 3\nDESCRIPTION: This snippet shows the change required in the Webpack configuration to include the Camera3D plugin as a bundled plugin in Phaser 3. It changes the 'PLUGIN_CAMERA3D' flag to true.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/plugins/camera3d/readme.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n\"typeof PLUGIN_CAMERA3D\": JSON.stringify(true)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Image Layer Names from Tilemap in JavaScript\nDESCRIPTION: Illustrates how to get a list of all valid image layer names loaded in a Tilemap. This method is useful for working with Tiled map data.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.21/CHANGELOG-v3.21.md#2025-04-16_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nTilemap.getImageLayerNames()\n```\n\n----------------------------------------\n\nTITLE: WebGL Pipeline Manager Constants Usage\nDESCRIPTION: Constants for referencing different pipeline types in Phaser 3.50, replacing string-based pipeline references.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.50/CHANGELOG-v3.50.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nPhaser.Renderer.WebGL.Pipelines.BITMAPMASK_PIPELINE\nPhaser.Renderer.WebGL.Pipelines.LIGHT_PIPELINE\nPhaser.Renderer.WebGL.Pipelines.SINGLE_PIPELINE\nPhaser.Renderer.WebGL.Pipelines.MULTI_PIPELINE\nPhaser.Renderer.WebGL.Pipelines.ROPE_PIPELINE\nPhaser.Renderer.WebGL.Pipelines.POINTLIGHT_PIPELINE\nPhaser.Renderer.WebGL.Pipelines.POSTFX_PIPELINE\nPhaser.Renderer.WebGL.Pipelines.UTILITY_PIPELINE\n```\n\n----------------------------------------\n\nTITLE: Cloning Spine Runtimes Repository\nDESCRIPTION: Instructions for checking out the Esoteric Spine Runtimes repository to the correct location in the Phaser.js project structure.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/plugins/spine/README.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n1. Checkout the Esoteric Spine Runtimes repo to the `spine-runtimes` folder: https://github.com/EsotericSoftware/spine-runtimes/ and make sure this is in the `plugins/spine` folder, not the `plugins/spine/src` folder.\n```\n\n----------------------------------------\n\nTITLE: Updating Webpack Configuration for Phaser 3\nDESCRIPTION: Phaser 3 has been updated to use webpack 5, with all related packages being updated. Configuration objects now have full TypeScript definitions.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.60/Build.md#2025-04-16_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n// No specific code provided, but implies updates to webpack.config.js and package.json\n```\n\n----------------------------------------\n\nTITLE: Adding Key Captures in Phaser 3.16\nDESCRIPTION: Demonstrates how to add key captures using the new KeyboardPlugin.addCapture method. This method prevents default browser behavior for specified keys.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.16/CHANGELOG-v3.16.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nKeyboardPlugin.addCapture(32); // Capture Space Bar\nKeyboardPlugin.addCapture([37, 38, 39, 40]); // Capture arrow keys\nKeyboardPlugin.addCapture(\"W,A,S,D\"); // Capture WASD keys\n```\n\n----------------------------------------\n\nTITLE: Enhancing Camera system management in JavaScript\nDESCRIPTION: The Camera's setScene method now correctly updates the custom viewport counter, fixing issues with mini-cams inside larger cameras not clipping their contents properly. It also handles moving Cameras between Scenes more accurately.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.13/CHANGELOG-v3.13.md#2025-04-16_snippet_18\n\nLANGUAGE: JavaScript\nCODE:\n```\nCamera.setScene\n```\n\n----------------------------------------\n\nTITLE: Retrieving Post Pipelines in Phaser 3\nDESCRIPTION: The 'getPostPipeline' method now returns an array of pipelines if multiple instances are set on a Game Object, or a single pipeline if only one is set.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.52/CHANGELOG-v3.52.md#2025-04-16_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\ngameObject.getPostPipeline(pipelineInstance)\n```\n\n----------------------------------------\n\nTITLE: Setting Flip Y for Texture Source in JavaScript\nDESCRIPTION: Demonstrates how to set the flipY property for a TextureSource, which controls whether the UNPACK_FLIP_Y_WEBGL flag is set when uploading a WebGL texture.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.20/CHANGELOG-v3.20.md#2025-04-16_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nTextureSource.setFlipY(true);\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Spine TypeScript\nDESCRIPTION: npm command to install dependencies for the Spine TypeScript project within the spine-runtimes/spine-ts folder.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/plugins/spine4.1/README.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm i\n```\n\n----------------------------------------\n\nTITLE: Fixing Paths in Phaser Core Entry Point\nDESCRIPTION: Several paths have been fixed in the 'phaser-core.js' entry point to ensure correct file references.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.60/Build.md#2025-04-16_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n// phaser-core.js\n// Path fixes implemented here\n```\n\n----------------------------------------\n\nTITLE: Setting WebGL Pipeline for Camera in Phaser 3\nDESCRIPTION: This method allows changing the WebGL pipeline (shader) used when the camera is rendering to a texture in Phaser 3.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.13/CHANGELOG-v3.13.md#2025-04-16_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nCamera.setPipeline();\n```\n\n----------------------------------------\n\nTITLE: Modifying Physics World Debug Graphic Stroke Width in JavaScript\nDESCRIPTION: Sets the stroke width of debug-drawn physics bodies in the Phaser physics world.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.16/CHANGELOG-v3.16.md#2025-04-16_snippet_12\n\nLANGUAGE: JavaScript\nCODE:\n```\nthis.physics.world.debugGraphic.defaultStrokeWidth = 2;\n```\n\n----------------------------------------\n\nTITLE: Adding Source Map Module\nDESCRIPTION: Command to install the source-map module, which is required for building the Spine runtimes with proper debugging support.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/plugins/spine/README.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm i --save-dev source-map\n```\n\n----------------------------------------\n\nTITLE: Adding OffscreenCanvas Type Definitions\nDESCRIPTION: Command to install the TypeScript type definitions for OffscreenCanvas, which is a dependency for the Spine runtimes.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/plugins/spine/README.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm i --save-dev @types/offscreencanvas\n```\n\n----------------------------------------\n\nTITLE: Cloning Spine Runtimes Repository for Phaser\nDESCRIPTION: Command to clone the Esoteric Spine Runtimes repository into the spine-runtimes folder within the plugins/spine4.1 directory.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/plugins/spine4.1/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/EsotericSoftware/spine-runtimes/ spine-runtimes\n```\n\n----------------------------------------\n\nTITLE: WebGL Debugging Methods in Phaser 3.60.0\nDESCRIPTION: New WebGLRenderer methods for debugging WebGL content using Spector.js. These methods allow capturing frames, monitoring FPS, logging commands, and controlling the capture process for WebGL inspection.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.60/Spector.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nWebGLRenderer.captureFrame()      // Captures current WebGL frame\nWebGLRenderer.captureNextFrame()   // Captures next WebGL frame\nWebGLRenderer.getFps()            // Returns current FPS\nWebGLRenderer.log(value)         // Adds filterable command to list\nWebGLRenderer.startCapture()     // Starts WebGL capture\nWebGLRenderer.stopCapture()      // Stops capture and returns JSON result\n```\n\n----------------------------------------\n\nTITLE: Legacy Input Queue Configuration\nDESCRIPTION: Shows how to enable the legacy input queue system in game configuration for backwards compatibility.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.16/CHANGELOG-v3.16.md#2025-04-16_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst config = {\n    input: {\n        queue: true // Enable legacy event queue system\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Physics Body Pushable State\nDESCRIPTION: New method to configure whether a physics body can be physically pushed by another body. Part of the new pushable mechanics in Arcade Physics that allows for more nuanced collision behaviors.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.50/CHANGELOG-v3.50.md#2025-04-16_snippet_18\n\nLANGUAGE: JavaScript\nCODE:\n```\nBody.setPushable(true)\n```\n\n----------------------------------------\n\nTITLE: Checking Out Spine 4.1 Branch\nDESCRIPTION: Git command to switch to the 4.1 branch of the Spine runtimes repository.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/plugins/spine4.1/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout 4.1\n```\n\n----------------------------------------\n\nTITLE: Configuring Webpack for Facebook Instant Games Plugin in Phaser 3\nDESCRIPTION: This snippet shows how to enable the Facebook Instant Games Plugin when building Phaser using Webpack. It uses the DefinePlugin to set the PLUGIN_FBINSTANT flag to true.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/plugins/fbinstant/readme.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n\"typeof PLUGIN_FBINSTANT\": JSON.stringify(true)\n```\n\n----------------------------------------\n\nTITLE: Fixing KeyCode Typo in JavaScript\nDESCRIPTION: A typo in the KeyCode 'FORWAD_SLASH' has been corrected to 'FORWARD_SLASH'. This ensures proper key mapping for the forward slash character.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.1.2/CHANGELOG-v3.1.2.md#2025-04-16_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nThe KeyCode `FORWAD_SLASH` had a typo and has been changed to `FORWARD_SLASH`.\n```\n\n----------------------------------------\n\nTITLE: Using Group.destroy with removeFromScene Parameter\nDESCRIPTION: Enhanced Group.destroy method with new optional parameter to remove all children from the scene.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.53/CHANGELOG-v3.53.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// Destroy group and remove all children from scene\ngroup.destroy(true);\n```\n\n----------------------------------------\n\nTITLE: Building the TypeScript Definitions Generator in Phaser\nDESCRIPTION: Command to build the 'tsgen' TypeScript definition generator tool that parses Phaser source code to generate TypeScript definition files.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/scripts/tsgen/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build-tsgen\n```\n\n----------------------------------------\n\nTITLE: Input and Event Handling Updates\nDESCRIPTION: New methods and properties for handling input events, pointer locking, and debug visualization of hit areas.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.19/CHANGELOG-v3.19.md#2025-04-16_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nGame.CONTEXT_LOST_EVENT\nGame.CONTEXT_RESTORED_EVENT\nInputPlugin.enableDebug()\nInputPlugin.removeDebug()\nPointer.updateWorldPoint()\nPointer.locked\n```\n\n----------------------------------------\n\nTITLE: Loading SVG with Custom Dimensions\nDESCRIPTION: Shows how to load SVG files with specific dimensions or scale factors\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.12/CHANGELOG-v3.12.md#2025-04-16_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nthis.load.svg('morty', 'file.svg', { width: 300, height: 600 })\nthis.load.svg('morty', 'file.svg', { scale: 4 })\n```\n\n----------------------------------------\n\nTITLE: Removing All Items from ProcessQueue in JavaScript\nDESCRIPTION: Shows how to remove all active entries from a ProcessQueue using the new removeAll method. This is useful for clearing queues in various game systems.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.20/CHANGELOG-v3.20.md#2025-04-16_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nProcessQueue.removeAll();\n```\n\n----------------------------------------\n\nTITLE: NPM Installation Command\nDESCRIPTION: Command to install project dependencies\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.9/CHANGELOG-v3.9.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: TransformMatrix Operations\nDESCRIPTION: New methods for TransformMatrix including copying values from another matrix and multiplying with an offset.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.11/CHANGELOG-v3.11.md#2025-04-16_snippet_12\n\nLANGUAGE: JavaScript\nCODE:\n```\nTransformMatrix.copyFrom(sourceMatrix);\nTransformMatrix.multiplyWithOffset(matrix, offsetX, offsetY);\n```\n\n----------------------------------------\n\nTITLE: Installing Spine Runtimes Dependencies\nDESCRIPTION: Command to install the required npm dependencies in the Spine runtimes folder.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/plugins/spine/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm i\n```\n\n----------------------------------------\n\nTITLE: Particle Hold Configuration\nDESCRIPTION: Example of configuring particles to be held in place after their lifespan for a specified duration.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.60/ParticleEmitter.md#2025-04-16_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst emitter = this.add.particles(0, 0, 'texture', {\n    lifespan: 2000,\n    scale: { start: 0, end: 1 },\n    hold: 1000\n    ...\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Post Pipeline in JavaScript\nDESCRIPTION: Shows the new method that should be called by any Game Object supporting Post Pipelines. This method is part of the new PostPipeline component.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.60/WebGLRenderer.md#2025-04-16_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nPostPipeline.initPostPipeline()\n```\n\n----------------------------------------\n\nTITLE: Improved Pipeline Removal from Game Objects in Phaser 3\nDESCRIPTION: Enhancement to the removePostPipeline method allowing removal of all instances of a pipeline class from a Game Object when called with a class reference.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.51/CHANGELOG-v3.51.md#2025-04-16_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n`GameObject.removePostPipeline` would previously only remove a single pipeline instance. Calling the method with a class will now clear all instances of the pipeline class from the Game Object (thanks @rexrainbow)\n```\n\n----------------------------------------\n\nTITLE: Setting Gamepad Axis Threshold in JavaScript\nDESCRIPTION: Shows how to set the axis threshold for all axes on a gamepad using the new method.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.10/CHANGELOG-v3.10.md#2025-04-16_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nGamepad.setAxisThreshold(value)\n```\n\n----------------------------------------\n\nTITLE: Importing Phaser in Web Workers\nDESCRIPTION: New feature allowing Phaser to run within Web Workers using the classic import method.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.53/CHANGELOG-v3.53.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimportScripts('phaser.js')\n```\n\n----------------------------------------\n\nTITLE: Comparing Performance Metrics of matter-js v0.20.0 Examples\nDESCRIPTION: This code snippet shows a comparison of performance metrics for 44 examples between matter-js v0.20.0 and the previous v0.19.0 release. It includes similarity, overlap, and filesize changes, as well as a visual representation of changes in individual examples.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.85/MatterJS.md#2025-04-16_snippet_0\n\nLANGUAGE: ocaml\nCODE:\n```\nOutput sample comparison estimates of 44 examples against previous release matter-js@0.19.0:  \n\nSimilarity     99.80%    Overlap    -1.92%   Filesize   +3.38%  81.58 KB  \n\nairFriction · · avalanche ● · ballPool ● · bridge ● · car ● · catapult ● · \nchains ● · circleStack · · cloth ● · collisionFiltering ● · compositeManipulation ● · \ncompound · · compoundStack ● · concave ● · constraints ● · doublePendulum · · \nevents ● · friction · · gravity ● · gyro ● · manipulation ● ◆ \nmixed ● · newtonsCradle · · pyramid ● · ragdoll ● · raycasting ● · \nremove ● ◆ restitution · · rounded ● · sensors · · sleeping ● ◆ \nslingshot ● · softBody ● · sprites ● · stack · · staticFriction ● · \nstats ● · stress ● · stress2 ● · stress3 ● · stress4 ● · \ntimescale ● · views ● · wreckingBall ● ·   \n\nwhere for the sample  · no change detected  ● extrinsics changed  ◆ intrinsics changed\n```\n\n----------------------------------------\n\nTITLE: Adding Missing Parameter to ScenePlugin in JavaScript\nDESCRIPTION: The missing 'data' parameter has been added to the ScenePlugin. This resolves an issue where data couldn't be properly passed to scene plugins.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.1.2/CHANGELOG-v3.1.2.md#2025-04-16_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nAdded missing data parameter to ScenePlugin.\n```\n\n----------------------------------------\n\nTITLE: Running Help Command\nDESCRIPTION: NPM command to display available scripts in the project\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.9/CHANGELOG-v3.9.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run help\n```\n\n----------------------------------------\n\nTITLE: Fixing TileSprite.setTileScale method in JavaScript\nDESCRIPTION: This fix corrects the TileSprite.setTileScale method, which was incorrectly setting the tile position instead of the scale. The properties now work directly as intended.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.13/CHANGELOG-v3.13.md#2025-04-16_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\nTileSprite.setTileScale\n```\n\n----------------------------------------\n\nTITLE: Scene Restart Example - JavaScript\nDESCRIPTION: Example showing how to restart a Scene by calling scene.start() with no arguments\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.2.1/CHANGELOG-v3.2.1.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nscene.start()\n```\n\n----------------------------------------\n\nTITLE: Setting Default Path Divisions in JavaScript\nDESCRIPTION: New property added to Curves.Path to hold the default number of divisions for splitting the Path.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.70/CHANGELOG-v3.70.md#2025-04-16_snippet_23\n\nLANGUAGE: JavaScript\nCODE:\n```\nCurves.Path.defaultDivisions\n```\n\n----------------------------------------\n\nTITLE: Setting preserveDrawingBuffer in Game Config\nDESCRIPTION: Configuration option to control whether WebGL buffers are automatically cleared each frame.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.53/CHANGELOG-v3.53.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// In your game config\n{\n  // ...\n  preserveDrawingBuffer: true,\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Building Spine 4.1 Runtimes for Phaser\nDESCRIPTION: npm script to build the new Spine 4.1 runtimes and place them in the plugins/spine4.1/src/runtimes folder of the Phaser project.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/plugins/spine4.1/README.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm run plugin.spine4.runtimes\n```\n\n----------------------------------------\n\nTITLE: Modifying Require Statements for Closure Compiler Compatibility\nDESCRIPTION: The way Phaser uses 'require' statements has been modified to fix an issue with Google's closure-compiler when variables are re-assigned to new values.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.60/Build.md#2025-04-16_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Example of modified require statement\nvar SomeModule = require('path/to/module');\n```\n\n----------------------------------------\n\nTITLE: Phaser 3 Version 3.24.1 Bug Fixes\nDESCRIPTION: Two major fixes were implemented: 1) Reverting changes to Static Tilemap Layer parent transform that caused rendering issues with zoomed cameras, and 2) Fixing TypeScript compilation error in Math.RotateTo function related to Vector2Like type usage.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.24.1/CHANGELOG-v3.24.1.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nMath.RotateTo(Vector2Like)\n```\n\n----------------------------------------\n\nTITLE: Correcting RenderTexture resizing in WebGL\nDESCRIPTION: The RenderTexture.resize method now correctly resizes the texture when using WebGL, fixing issues with texture dimensions not updating properly.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.13/CHANGELOG-v3.13.md#2025-04-16_snippet_20\n\nLANGUAGE: JavaScript\nCODE:\n```\nRenderTexture.resize\n```\n\n----------------------------------------\n\nTITLE: Fixing IsometricWorldToTileXY Function in JavaScript\nDESCRIPTION: Corrects the IsometricWorldToTileXY function to return the tile from the expected location without incorrect offset.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.53/CHANGELOG-v3.53.md#2025-04-16_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Updated IsometricWorldToTileXY function\nfunction IsometricWorldToTileXY(worldX, worldY, tileWidth, tileHeight, originX, originY) {\n    // Implementation details omitted for brevity\n    return { x: tileX, y: tileY };\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Color Interpolation for Particles in Phaser\nDESCRIPTION: Demonstrates how to create particles that change color over their lifetime using the new color interpolation feature in Phaser v3.60. The example creates a flame effect using color transitions from yellow to dark red.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.60/ParticleEmitter.md#2025-04-16_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nconst flame = this.add.particles(150, 550, 'flares',\n{\n    frame: 'white',\n    color: [ 0xfacc22, 0xf89800, 0xf83600, 0x9f0404 ],\n    colorEase: 'quad.out',\n    lifespan: 2400,\n    angle: { min: -100, max: -80 },\n    scale: { start: 0.70, end: 0, ease: 'sine.out' },\n    speed: 100,\n    advance: 2000,\n    blendMode: 'ADD'\n});\n```\n\n----------------------------------------\n\nTITLE: EmitterOp Migration Examples\nDESCRIPTION: Shows the migration path from Phaser 3.55 to 3.60 for handling EmitterOp properties and methods, including value changes, property access, and emit/update operations.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.60/ParticleEmitter.md#2025-04-16_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\n//  Phaser 3.55\nemitter.x.onChange(value)\n//  Phaser 3.60\nemitter.particleX = value\n\n//  Phaser 3.55\nlet x = emitter.x.propertyValue\n//  Phaser 3.60\nlet x = emitter.particleX\n\n//  Phaser 3.55\nemitter.x.onEmit()\nemitter.x.onUpdate()\n//  Phaser 3.60\nemitter.ops.x.onEmit()\nemitter.ops.x.onUpdate()\n```\n\n----------------------------------------\n\nTITLE: Defining Shader Name in WebGL Pipeline\nDESCRIPTION: This code snippet shows how to define a shader name in a WebGL Pipeline configuration. By adding the #define SHADER_NAME directive at the start of the shader, it will be recognized as the WebGLShader name during the setShadersFromConfig process.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.60/FX.md#2025-04-16_snippet_3\n\nLANGUAGE: GLSL\nCODE:\n```\n#define SHADER_NAME\n```\n\n----------------------------------------\n\nTITLE: Enhanced Texture Setting for Game Objects in Phaser.js\nDESCRIPTION: The 'GameObject.setTexture' method now has optional parameters 'updateSize' and 'updateOrigin' to control whether the size and origin of the Game Object should be updated when setting the texture.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.70/CHANGELOG-v3.70.md#2025-04-16_snippet_12\n\nLANGUAGE: JavaScript\nCODE:\n```\nGameObject.setTexture(texture, frame, updateSize, updateOrigin)\n```\n\n----------------------------------------\n\nTITLE: Setting Line Geometry from Objects in Phaser.js\nDESCRIPTION: New method 'Geom.Line.setFromObjects' sets a Line's start and end points to match those of two given objects, which can be Game Objects or Vector2-like objects.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.70/CHANGELOG-v3.70.md#2025-04-16_snippet_19\n\nLANGUAGE: JavaScript\nCODE:\n```\nGeom.Line.setFromObjects(object1, object2)\n```\n\n----------------------------------------\n\nTITLE: Accessing ColorMatrix Constants in Phaser 3.60.0\nDESCRIPTION: New constants added to the ColorMatrix class for various color operations. These constants can be used to apply pre-defined color effects.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.60/Colors.md#2025-04-16_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nColorMatrix.BLACK_WHITE\nColorMatrix.NEGATIVE\nColorMatrix.DESATURATE_LUMINANCE\nColorMatrix.SEPIA\nColorMatrix.LSD\nColorMatrix.BROWN\nColorMatrix.VINTAGE\nColorMatrix.KODACHROME\nColorMatrix.TECHNICOLOR\nColorMatrix.POLAROID\nColorMatrix.SHIFT_BGR\n```\n\n----------------------------------------\n\nTITLE: Random Frame Selection for Animations in Phaser.js\nDESCRIPTION: New property 'randomFrame' in Animation Config and Play Animation Config allows selecting a random frame when animation playback starts, providing more variety in sprite animations.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.70/CHANGELOG-v3.70.md#2025-04-16_snippet_13\n\nLANGUAGE: JavaScript\nCODE:\n```\nAnimation.randomFrame\nAnimationState.randomFrame\n```\n\n----------------------------------------\n\nTITLE: Applying Camera-wide Tilt Shift Effect in Phaser\nDESCRIPTION: Demonstrates how to apply a tilt shift effect to everything rendered by a camera. This approach is more efficient than applying the same effect to individual game objects.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.60/FX.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nthis.cameras.main.postFX.addTiltShift();\n```\n\n----------------------------------------\n\nTITLE: Configuring Input Smooth Factor in Phaser.js\nDESCRIPTION: This snippet shows how to set the smoothing factor for all pointers in the game configuration. The smooth factor allows for automatic smoothing of pointer positions as they move.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.16/CHANGELOG-v3.16.md#2025-04-16_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\ninput: { smoothFactor: value }\n```\n\n----------------------------------------\n\nTITLE: Graphics.fillRoundedRect with Negative Radius\nDESCRIPTION: Graphics method for filling rounded rectangles with support for negative corner radius values to create concave corners. Includes internal radius clamping for proper rendering.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.60/GraphicsGameObject.md#2025-04-16_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\ngraphics.fillRoundedRect(x, y, width, height, radius)\n```\n\n----------------------------------------\n\nTITLE: Removing Wrap Boundaries from a Matter Game Object in Phaser 3.85.0\nDESCRIPTION: Shows how to disable the wrapping behavior for a Matter physics game object by setting its wrapBounds property to null.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.85/MatterWrapBounds.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ngameObject.body.wrapBounds = null;\n```\n\n----------------------------------------\n\nTITLE: Render Target Resize Check in Phaser.js\nDESCRIPTION: The 'RenderTarget.willResize' method returns true if the Render Target will be resized based on given width and height values.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.70/CHANGELOG-v3.70.md#2025-04-16_snippet_16\n\nLANGUAGE: JavaScript\nCODE:\n```\nRenderTarget.willResize(width, height)\n```\n\n----------------------------------------\n\nTITLE: Checking Scene Input Capability in Phaser\nDESCRIPTION: New internal method to determine if a Scene can receive Input events, allowing input handling during init and preload phases.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.60/Input.md#2025-04-16_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nScenes.Systems.canInput\n```\n\n----------------------------------------\n\nTITLE: Animated Particles with Cycling Animations\nDESCRIPTION: Configuration for particles that cycle through animations in sequence.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.60/ParticleEmitter.md#2025-04-16_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst emitter = this.add.particles(400, 300, 'gems', {\n    anim: { anims: [ 'prism', 'square', 'ruby', 'square' ], cycle: true }\n    ...\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Typed Array Polyfills for IE9 Compatibility\nDESCRIPTION: Two missing Typed Array polyfills have been added to ensure compatibility with Internet Explorer 9.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.60/Build.md#2025-04-16_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\n// IE9 Typed Array Polyfills\n// Polyfill implementations for missing Typed Arrays\n```\n\n----------------------------------------\n\nTITLE: Time Buffer Property Configuration\nDESCRIPTION: Addition of timeBuffer property to runner configuration for managing elapsed time between updates in physics simulations.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.85/MatterWorldUpdate.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  runner: {\n    timeBuffer: 0\n    // ... other properties\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Removing All Keyboard Keys with Capture in Phaser\nDESCRIPTION: Updated method to remove all keyboard keys, with an optional parameter to remove capture events for all keys.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.60/Input.md#2025-04-16_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nKeyboardPlugin.removeAllKeys(removeCapture)\n```\n\n----------------------------------------\n\nTITLE: Creating Bitmap Mask with Parameters\nDESCRIPTION: Creating a Bitmap Mask with the new optional constructor parameters for position and texture configuration.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.60/Masks.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ncreateBitmapMask(x, y, texture, frame)\n```\n\n----------------------------------------\n\nTITLE: Particle Emitter Duration Configuration\nDESCRIPTION: Example of setting up a particle emitter with a specific duration for flow mode.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.60/ParticleEmitter.md#2025-04-16_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst emitter = this.add.particles(0, 0, 'texture', {\n    speed: 24,\n    lifespan: 1500,\n    duration: 500\n});\n```\n\n----------------------------------------\n\nTITLE: Resetting Individual Pointer in Phaser\nDESCRIPTION: New method to reset a single Pointer instance to its initial settings.\nSOURCE: https://github.com/phaserjs/phaser/blob/master/changelog/3.60/Input.md#2025-04-16_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nPointer.reset\n```"
  }
]