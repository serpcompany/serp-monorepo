[
  {
    "owner": "dasiths",
    "repo": "portsandadapterspatterndemo",
    "content": "TITLE: Initializing ASP.NET Core Web Application Host in C#\nDESCRIPTION: Configures and launches the ASP.NET Core web application using the minimal API hosting model. It registers controllers, application services like `GetOrderRequestProcessor` and `GetProductRequestProcessor`, the Entity Framework Core `DemoDbContext`, seeds initial data using `DemoDbContext.SeedData`, and sets up the HTTP request processing pipeline including HTTPS redirection, static files, routing, and authorization.\nSOURCE: https://github.com/dasiths/portsandadapterspatterndemo/blob/master/README.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing System.Reflection;\nusing PortsAndAdaptersPatternDemo.Data;\nusing PortsAndAdaptersPatternDemo.RequestProcessing.Features.GetOrder;\nusing PortsAndAdaptersPatternDemo.RequestProcessing.Features.GetProduct;\n\nvar builder = WebApplication.CreateBuilder(args);\n\n// Add services to the container.\nbuilder.Services.AddControllers();\nbuilder.Services.AddTransient<GetOrderRequestProcessor>();\nbuilder.Services.AddTransient<GetProductRequestProcessor>();\nbuilder.Services.AddDbContext<DemoDbContext>();\n\nDemoDbContext.SeedData();\n\nvar app = builder.Build();\n\n// Configure the HTTP request pipeline.\nif (!app.Environment.IsDevelopment())\n{\n    app.UseExceptionHandler(\"/Error\");\n    app.UseHsts();\n}\n\napp.UseHttpsRedirection();\napp.UseStaticFiles();\napp.UseRouting();\napp.UseAuthorization();\napp.MapControllers();\napp.Run();\n```\n\n----------------------------------------\n\nTITLE: Defining API Endpoint for Retrieving Orders in C#\nDESCRIPTION: Implements an ASP.NET Core API controller (`OrderController`) with a GET endpoint `api/Order/{orderId}` to retrieve specific order details. It utilizes constructor dependency injection to obtain an instance of `GetOrderRequestProcessor` and delegates the task of fetching and processing the order data to its `HandleAsync` method, returning the result as an HTTP 200 OK response.\nSOURCE: https://github.com/dasiths/portsandadapterspatterndemo/blob/master/README.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n[ApiController]\n[Route(\"api/[controller]\")]\npublic class OrderController : ControllerBase\n{\n    private readonly GetOrderRequestProcessor _getOrderRequestProcessor;\n\n    public OrderController(GetOrderRequestProcessor getOrderRequestProcessor)\n    {\n        _getOrderRequestProcessor = getOrderRequestProcessor;\n    }\n\n    [HttpGet(\"{orderId}\")]\n    public async Task<IActionResult> GetOrder(int orderId)\n    {\n        var result = await _getOrderRequestProcessor.HandleAsync(new GetOrderRequest { OrderId = orderId });\n        return Ok(result);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing GetOrder Request Processor Logic in C#\nDESCRIPTION: Implements the `GetOrderRequestProcessor` class, which encapsulates the business logic for fetching a specific order. It takes a `DemoDbContext` dependency via constructor injection. The `HandleAsync` method queries the `Orders` DbSet, includes related `Products`, filters by the requested `OrderId`, projects the result into an `OrderDto`, and returns it wrapped in a `GetOrderResponse` object. It leverages asynchronous operations with `FirstOrDefaultAsync`.\nSOURCE: https://github.com/dasiths/portsandadapterspatterndemo/blob/master/README.md#_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nusing Microsoft.EntityFrameworkCore;\nusing PortsAndAdaptersPatternDemo.Data;\nusing PortsAndAdaptersPatternDemo.Dtos;\n\nnamespace PortsAndAdaptersPatternDemo.RequestProcessing.Features.GetOrder\n{\n    public class GetOrderRequestProcessor\n    {\n        private readonly DemoDbContext _demoDbContext;\n\n        public GetOrderRequestProcessor(DemoDbContext demoDbContext)\n        {\n            _demoDbContext = demoDbContext;\n        }\n\n        public async Task<GetOrderResponse> HandleAsync(GetOrderRequest request, CancellationToken cancellationToken)\n        {\n            var result = await _demoDbContext.Orders.Include(o => o.Products).Where(o => o.OrderId == request.OrderId).Select(o =>\n                new OrderDto()\n                {\n                    Customer = o.Customer,\n                    OrderId = o.OrderId,\n                    Products = o.Products.Select(p => new ProductDto()\n                    {\n                        ProductId = p.ProductId,\n                        Name = p.Name\n                    }).ToList()\n                }).FirstOrDefaultAsync(cancellationToken);\n\n            return new GetOrderResponse()\n            {\n                Result = result\n            };\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring EF Core DbContext with In-Memory Database and Seeding in C#\nDESCRIPTION: Defines the `DemoDbContext` class inheriting from `DbContext` for Entity Framework Core. It configures the context to use an in-memory database named \"DemoDb\" via `OnConfiguring`. It also defines a many-to-many relationship between `Order` and `Product` entities in `OnModelCreating`. A static `SeedData` method is provided to initialize the in-memory database with sample orders and products for development and testing purposes.\nSOURCE: https://github.com/dasiths/portsandadapterspatterndemo/blob/master/README.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nusing Microsoft.EntityFrameworkCore;\n\nnamespace PortsAndAdaptersPatternDemo.Data\n{\n    public class DemoDbContext : DbContext\n    {\n        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n        {\n            optionsBuilder.UseInMemoryDatabase(databaseName: \"DemoDb\");\n        }\n\n        protected override void OnModelCreating(ModelBuilder modelBuilder)\n        {\n            modelBuilder.Entity<Order>()\n                .HasMany(e => e.Products)\n                .WithMany(e => e.Orders);\n        }\n\n        public static void SeedData() // only required for dev and testing\n        {\n            using var context = new DemoDbContext();\n            context.Database.EnsureCreated();\n\n            var products = Enumerable.Range(1, 10).Select(i => new Product()\n            {\n                Name = $\"Product {i}\",\n                ProductId = i\n            });\n\n            context.Products.AddRangeAsync(products);\n            context.SaveChanges();\n\n            var rnd = new Random();\n\n            var orders = Enumerable.Range(1, 10).Select(i => new Order()\n            {\n                OrderId = i,\n                Customer = $\"Customer {i}\",\n                Products = context.Products.OrderBy(_ => rnd.Next()).Take(5).ToList()\n            });\n\n            context.Orders.AddRangeAsync(orders);\n            context.SaveChanges();\n        }\n\n        public DbSet<Product> Products { get; set; }\n        public DbSet<Order> Orders { get; set; }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Order Data Transfer Object (DTO) in C#\nDESCRIPTION: Defines the `OrderDto` class, a simple data structure used for transferring order information between different layers of the application, typically between the request processing layer and the API layer or external clients. It contains properties for `OrderId`, `Customer`, and a list of associated `Product` objects. Note: In a typical DTO scenario, the `Products` list would likely contain `ProductDto` objects rather than domain `Product` entities.\nSOURCE: https://github.com/dasiths/portsandadapterspatterndemo/blob/master/README.md#_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\npublic class OrderDto\n{\n    public int OrderId { get; set; }\n    public string Customer { get; set; }\n    public List<Product> Products { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Order Entity Model in C#\nDESCRIPTION: Defines the `Order` entity class representing an order in the database domain model. It includes an integer primary key `OrderId` marked with the `[Key]` attribute (though the using statement for `System.ComponentModel.DataAnnotations` is missing in the snippet), a string property `Customer`, and a navigation property `Products` representing a collection of related `Product` entities.\nSOURCE: https://github.com/dasiths/portsandadapterspatterndemo/blob/master/README.md#_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Order\n{\n    [Key]\n    public int OrderId { get; set; }\n    public string Customer { get; set; }\n    public List<Product> Products { get; set; }\n}\n```"
  }
]