[
  {
    "owner": "chungoid",
    "repo": "mcprecon",
    "content": "TITLE: System Architecture Diagram in ASCII\nDESCRIPTION: ASCII diagram showing the complete system architecture including external services, core components, tool runners, and data stores. Illustrates the flow of data and relationships between different components.\nSOURCE: https://github.com/chungoid/mcprecon/blob/master/README.md#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n+--------------------------+      +-----------------------------+      +---------------------------------+\n| User / External          |      | External Services           |      | Data Stores (Operator Controlled) |\n|--------------------------|      |-----------------------------|      |---------------------------------|\n| [UI/CLI/Script] -------->| API  | [Reasoner (Smithery AI)]    |<---->| [RabbitMQ (Exchanges/Queues)]   |\n|                          |      | [Faraday Dashboard] <------ | ---->| [PostgreSQL (Relational)]       |\n|                          |      | [Serpico Reports] <-------- | ---->| [Neo4j (Graph)]                 |\n+--------------------------+      +-----------------------------+      | [MinIO/S3 (Artifacts)]          |\n                                          ^                              +---------------------------------+\n                                          |                                     ^\n                                          |    +----------------------------------+ |\n                                          +----| MCP Core Services                | |\n                                               | (Operator Controlled)            | |\n                                               |----------------------------------| |\n                                               | [mcp-api-gateway (FastAPI)] -----+ |\n                                               | [mcp-scheduler (Celery)] ---------+ |\n                                               | [mcp-normalizer] -----------------+ |  +-----> Tool Job Queues\n```\n\n----------------------------------------\n\nTITLE: Local Development Setup Commands\nDESCRIPTION: Series of bash commands for setting up the MCP platform locally using Docker Compose, including repository cloning, environment configuration, and service management.\nSOURCE: https://github.com/chungoid/mcprecon/blob/master/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/chungoid/mcprecon\ncd mcprecon\n```\n\nLANGUAGE: bash\nCODE:\n```\ncp .env.example .env\nnano .env # Or your preferred editor\n```\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose up --build -d\n```\n\n----------------------------------------\n\nTITLE: Deploying McPrecon with Helm in Kubernetes\nDESCRIPTION: This snippet shows how to deploy McPrecon using Helm in a Kubernetes cluster. It includes the command to install the Helm chart with custom values and namespace creation.\nSOURCE: https://github.com/chungoid/mcprecon/blob/master/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nhelm install mcp-release . -f my-values.yaml --namespace <your-namespace> --create-namespace\n```\n\n----------------------------------------\n\nTITLE: Python Dependencies List for FastAPI Application\nDESCRIPTION: A requirements.txt file that lists dependencies needed for a Python application. It includes FastAPI for API creation, Uvicorn as the ASGI server, Pydantic for data validation, Pika for RabbitMQ integration, python-dotenv for environment configuration, and httpx for future HTTP client capabilities.\nSOURCE: https://github.com/chungoid/mcprecon/blob/master/api-gateway/requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nfastapi\nuvicorn[standard]\npydantic\npika\npython-dotenv\nhttpx # For potential future communication with Reasoner\n```\n\n----------------------------------------\n\nTITLE: Specifying Python Package Dependencies for mcprecon\nDESCRIPTION: This snippet lists the required Python packages and their minimum versions for the mcprecon project. It includes Pika for message queuing, python-dotenv for environment variable management, psycopg2-binary for PostgreSQL database interaction, python-libnmap for parsing Nmap XML output, and minio for accessing BloodHound zip files from MinIO storage.\nSOURCE: https://github.com/chungoid/mcprecon/blob/master/normalizer/requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\npika>=1.3.0\npython-dotenv>=0.19.0\npsycopg2-binary>=2.9.0\npython-libnmap>=0.7.3 # For parsing Nmap XML output\nminio>=7.1.0 # For accessing BloodHound zip files from MinIO storage\n# pandas might be added later if needed for other loaders\n```\n\n----------------------------------------\n\nTITLE: Specifying Python Package Dependencies for McPrecon\nDESCRIPTION: This snippet defines the required Python packages and their minimum versions for the McPrecon project. It includes Neo4j driver (v5.15.0+), PostgreSQL adapter (v2.9.5+), RabbitMQ client (v1.3.0+), and python-dotenv for environment variable management (v0.19.0+).\nSOURCE: https://github.com/chungoid/mcprecon/blob/master/graph-sync/requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nneo4j>=5.15.0\npsycopg2-binary>=2.9.5\npika>=1.3.0\npython-dotenv>=0.19.0\n```\n\n----------------------------------------\n\nTITLE: Specifying Python Package Dependencies for Celery and PostgreSQL\nDESCRIPTION: This code snippet lists the required Python packages for a project using Celery with RabbitMQ as the message broker and PostgreSQL as the result backend. It includes Celery with librabbitmq support, psycopg2 for PostgreSQL interaction, and python-dotenv for environment variable management.\nSOURCE: https://github.com/chungoid/mcprecon/blob/master/scheduler/requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\ncelery[librabbitmq]>=5.0 # Specify librabbitmq for RabbitMQ broker\npsycopg2-binary # For PostgreSQL result backend\npython-dotenv\n# pika might be needed later for direct publishing, but Celery handles broker comms for tasks\n```\n\n----------------------------------------\n\nTITLE: Specifying Python Package Dependencies for mcprecon\nDESCRIPTION: This snippet defines the required Python packages and their minimum versions for the mcprecon project. It includes pika, in-toto, and python-dotenv as active dependencies, with comments about potential future requirements for cryptography and minio/boto3.\nSOURCE: https://github.com/chungoid/mcprecon/blob/master/audit-daemon/requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\npika>=1.3.0\nin-toto>=2.0.0 # Use a recent version of in-toto\npython-dotenv>=0.19.0\n# cryptography will be needed later for signing\n# minio or boto3 will be needed later for artifact storage\n```\n\n----------------------------------------\n\nTITLE: Specifying Python Dependencies for Aquatone Tool\nDESCRIPTION: This requirements.txt file lists the necessary Python packages and their minimum versions for the Aquatone tool. It includes Pika for RabbitMQ interactions, python-dotenv for environment variable management, and boto3 for MinIO/S3 object storage operations.\nSOURCE: https://github.com/chungoid/mcprecon/blob/master/tool-runners/aquatone/requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\npika>=1.3.0\npython-dotenv>=0.19.0\nboto3>=1.28.0 # For MinIO/S3 interaction\n```\n\n----------------------------------------\n\nTITLE: Defining Python Package Dependencies\nDESCRIPTION: Specifies required Python packages with minimum version constraints. Includes Pika for AMQP/RabbitMQ support, python-dotenv for environment variable management, and MinIO for object storage.\nSOURCE: https://github.com/chungoid/mcprecon/blob/master/tool-runners/bloodhound/requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\npika>=1.3.0\npython-dotenv>=0.19.0\nminio>=7.1.0 # To upload results\n```\n\n----------------------------------------\n\nTITLE: Specifying Python Dependencies for Gobuster Tool Runner\nDESCRIPTION: Lists the required Python packages and their minimum versions for the Gobuster tool runner. Includes pika for message queue integration and python-dotenv for environment variable handling.\nSOURCE: https://github.com/chungoid/mcprecon/blob/master/tool-runners/gobuster/requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\npika>=1.3.0\npython-dotenv>=0.19.0\n```\n\n----------------------------------------\n\nTITLE: Defining Python Package Dependencies for HTTPX Tool Runner\nDESCRIPTION: Lists required Python packages for the HTTPX tool runner with their minimum versions. Includes pika for RabbitMQ client functionality and python-dotenv for loading environment variables from .env files.\nSOURCE: https://github.com/chungoid/mcprecon/blob/master/tool-runners/httpx/requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\npika>=1.3.0\npython-dotenv>=0.19.0\n```\n\n----------------------------------------\n\nTITLE: Specifying Python Package Dependencies\nDESCRIPTION: A requirements.txt file that lists the necessary Python packages along with their minimum version constraints. It includes pika for RabbitMQ client functionality and python-dotenv for loading environment variables from .env files.\nSOURCE: https://github.com/chungoid/mcprecon/blob/master/tool-runners/masscan/requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\npika>=1.3.0\npython-dotenv>=0.19.0\n```\n\n----------------------------------------\n\nTITLE: Defining Python Package Dependencies for Naabu Tool Runner\nDESCRIPTION: Specifies the required Python packages and their minimum versions needed for the Naabu tool runner to function. Includes pika for RabbitMQ messaging and python-dotenv for environment variable management.\nSOURCE: https://github.com/chungoid/mcprecon/blob/master/tool-runners/naabu/requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\npika>=1.3.0\npython-dotenv>=0.19.0\n```\n\n----------------------------------------\n\nTITLE: Defining Python Package Dependencies\nDESCRIPTION: Specifies required Python packages pika and python-dotenv with their minimum version requirements. This is typically used in a requirements.txt file for Python project dependency management.\nSOURCE: https://github.com/chungoid/mcprecon/blob/master/tool-runners/nmap/requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\npika>=1.3.0\npython-dotenv>=0.19.0\n```\n\n----------------------------------------\n\nTITLE: Generating Post-Installation Notes Template for MCP Helm Chart\nDESCRIPTION: A Go template that generates post-installation notes showing how to access the API Gateway and other services like RabbitMQ, Neo4j, and MinIO. It handles different service types (LoadBalancer, NodePort, ClusterIP) and provides kubectl commands for monitoring.\nSOURCE: https://github.com/chungoid/mcprecon/blob/master/charts/mcp/templates/NOTES.txt#2025-04-23_snippet_0\n\nLANGUAGE: go-template\nCODE:\n```\n{{- /*\nNOTES.txt provides information to the user after a successful Helm install.\n*/}}\n{{- define \"mcp.notes\" -}}\n\nMission-Control Platform (MCP) has been installed.\n\nRelease Name: {{ .Release.Name }}\nNamespace:    {{ .Release.Namespace }}\n\nAccessing the API Gateway:\n{{- if .Values.services.apiGateway.enabled }}\n  {{- if eq .Values.services.apiGateway.service.type \"LoadBalancer\" }}\n    {{- $svc := index .Values \"services\" \"apiGateway\" \"service\" }}\n    NOTE: It may take a few minutes for the LoadBalancer IP to be available.\n          You can watch the status using:\n          kubectl get svc --namespace {{ .Release.Namespace }} {{ .Release.Name }}-api-gateway -w\n\n    API Gateway URL: http://{{ index $svc.ports 0 }}:{{ .Values.services.apiGateway.service.port }}\n    API Docs: http://{{ index $svc.ports 0 }}:{{ .Values.services.apiGateway.service.port }}/docs\n\n  {{- else if eq .Values.services.apiGateway.service.type \"NodePort\" }}\n    {{- $nodePort := index .Values \"services\" \"apiGateway\" \"service\" \"ports\" 0 \"nodePort\" }}\n    NOTE: Get the IP/hostname of one of your Kubernetes nodes:\n          kubectl get nodes -o wide\n\n    API Gateway URL: http://<node-ip>:{{ $nodePort }}\n    API Docs: http://<node-ip>:{{ $nodePort }}/docs\n\n  {{- else }}\n    NOTE: The API Gateway service is using ClusterIP.\n          To access it locally, use kubectl port-forward:\n          kubectl port-forward --namespace {{ .Release.Namespace }} svc/{{ .Release.Name }}-api-gateway {{ .Values.services.apiGateway.service.port }}:{{ .Values.services.apiGateway.service.port }}\n\n    API Gateway URL (after port-forward): http://localhost:{{ .Values.services.apiGateway.service.port }}\n    API Docs (after port-forward): http://localhost:{{ .Values.services.apiGateway.service.port }}/docs\n  {{- end }}\n{{- else }}\n  API Gateway is disabled.\n{{- end }}\n\nOther Services:\n*   RabbitMQ Management UI: If enabled and exposed (e.g., via NodePort/LoadBalancer on its own service or port-forward), access at port {{ .Values.config.rabbitmq.management.port }}.\n*   Neo4j Browser: If enabled and exposed, access at port {{ .Values.config.neo4j.httpPort }}.\n*   MinIO Console: If enabled and exposed, access at port 9001 (default).\n\nCheck Pod Status:\n  kubectl get pods --namespace {{ .Release.Namespace }} -l app.kubernetes.io/instance={{ .Release.Name }}\n\nView Logs:\n  kubectl logs --namespace {{ .Release.Namespace }} -f <pod-name>\n\nRemember to check the main README.md for detailed usage instructions.\n\n{{- end -}}\n{{- /* Render the notes template */}}\n{{- include \"mcp.notes\" . }}\n```\n\n----------------------------------------\n\nTITLE: Implementing Main Loop for Minecraft Server Reconnection in Python\nDESCRIPTION: The main loop of the script that continuously attempts to maintain a connection to the Minecraft server. It handles reconnection attempts and command execution, with error handling and logging.\nSOURCE: https://github.com/chungoid/mcprecon/blob/master/docs/setup.md#2025-04-23_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nwhile True:\n    mcr = connect()\n    if mcr:\n        while True:\n            if not send_command(mcr, \"list\"):\n                logging.info(\"Connection lost. Attempting to reconnect...\")\n                mcr.disconnect()\n                break\n            time.sleep(5)\n    else:\n        logging.info(\"Failed to connect. Retrying in 10 seconds...\")\n        time.sleep(10)\n```\n\n----------------------------------------\n\nTITLE: Creating Minecraft Server Command Execution Function in Python\nDESCRIPTION: Implements a function to send commands to the Minecraft server. It attempts to send the command and handles potential exceptions, logging the results.\nSOURCE: https://github.com/chungoid/mcprecon/blob/master/docs/setup.md#2025-04-23_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\ndef send_command(mcr, command):\n    try:\n        response = mcr.command(command)\n        logging.info(f\"Command sent: {command}\")\n        logging.info(f\"Response: {response}\")\n    except Exception as e:\n        logging.error(f\"Failed to send command: {e}\")\n        return False\n    return True\n```\n\n----------------------------------------\n\nTITLE: Implementing Minecraft Server Connection Function in Python\nDESCRIPTION: Defines a function to establish a connection to the Minecraft server using the mcrcon library. It handles connection errors and logs the outcome of the connection attempt.\nSOURCE: https://github.com/chungoid/mcprecon/blob/master/docs/setup.md#2025-04-23_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\ndef connect():\n    try:\n        mcr = MCRcon(ip, password, port)\n        mcr.connect()\n        logging.info(\"Connected to the server.\")\n        return mcr\n    except Exception as e:\n        logging.error(f\"Failed to connect: {e}\")\n        return None\n```\n\n----------------------------------------\n\nTITLE: Defining Minecraft Server Connection Parameters in Python\nDESCRIPTION: Specifies the connection parameters for the Minecraft server, including the IP address, RCON port, and password. These variables are used to establish the connection.\nSOURCE: https://github.com/chungoid/mcprecon/blob/master/docs/setup.md#2025-04-23_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nip = 'localhost'\nport = 25575\npassword = 'mypassword'\n```\n\n----------------------------------------\n\nTITLE: Configuring Logging for Minecraft Reconnection Script in Python\nDESCRIPTION: Sets up logging configuration for the script, including the log file path, format, and logging level. This allows for tracking of connection attempts and errors.\nSOURCE: https://github.com/chungoid/mcprecon/blob/master/docs/setup.md#2025-04-23_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nlogging.basicConfig(filename='reconnect.log', level=logging.INFO,\n                    format='%(asctime)s - %(levelname)s - %(message)s')\n```\n\n----------------------------------------\n\nTITLE: Importing Required Libraries for Minecraft Server Reconnection in Python\nDESCRIPTION: This snippet imports the necessary libraries for the script, including mcrcon for Minecraft remote console connection, time for delay operations, and logging for error tracking.\nSOURCE: https://github.com/chungoid/mcprecon/blob/master/docs/setup.md#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom mcrcon import MCRcon\nimport time\nimport logging\n```\n\n----------------------------------------\n\nTITLE: Defining String Encoding in MCPrecon Protocol\nDESCRIPTION: Explains how strings are encoded in the MCPrecon protocol with length prefixes, including specifics about variable-length and fixed-length strings.\nSOURCE: https://github.com/chungoid/mcprecon/blob/master/tool-runners/responder/requirements.txt#2025-04-23_snippet_2\n\nLANGUAGE: Protocol\nCODE:\n```\nString format:\n2-bytes (uint16) length prefix, followed by the string data\nFixed-length strings are padded with 0x00 bytes\n```\n\n----------------------------------------\n\nTITLE: Defining Special 2-Byte Header for Encoded Data\nDESCRIPTION: Details a special 2-byte header used for encoded data in the MCPrecon protocol, with information about the encoding format and characteristics.\nSOURCE: https://github.com/chungoid/mcprecon/blob/master/tool-runners/responder/requirements.txt#2025-04-23_snippet_1\n\nLANGUAGE: Protocol\nCODE:\n```\nIn situations where data is encoded either UTF-8, 7-bit ASCII or other encodings, the payload is prefixed with a 2-byte header:\n\nByte 1: 0x01 = base64\n       0x02 = UTF-8\n       0x03 = 7-bit ASCII\n\nByte 2: Specifies the handling of the data.\n```\n\n----------------------------------------\n\nTITLE: Defining MCPrecon Base Packet Structure\nDESCRIPTION: Describes the base packet structure for all MCPrecon protocol messages, including header requirements, packet ID, payload length, and the main fields that make up a packet.\nSOURCE: https://github.com/chungoid/mcprecon/blob/master/tool-runners/responder/requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: Protocol\nCODE:\n```\nBase Packet Structure:\n\n8  (char)    - Protocol Version\n24 (char)    - Packet ID\n4  (uint32)  - Payload Size\nN  (char)    - Payload\n```\n\n----------------------------------------\n\nTITLE: Uninstalling McPrecon Helm Release\nDESCRIPTION: This snippet demonstrates how to uninstall the McPrecon Helm release from a Kubernetes cluster, removing all associated resources.\nSOURCE: https://github.com/chungoid/mcprecon/blob/master/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nhelm uninstall mcp-release -n <your-namespace>\n```\n\n----------------------------------------\n\nTITLE: Building McPrecon from Source\nDESCRIPTION: Commands for cloning the repository and building McPrecon from source code. This is an alternative to installation via Cargo when users want to work directly with the source.\nSOURCE: https://github.com/chungoid/mcprecon/blob/master/tool-runners/scapy/requirements.txt#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/chungoid/mcprecon.git\ncd mcprecon\ncargo build --release\n```\n\n----------------------------------------\n\nTITLE: Using McPrecon Command Line Tool\nDESCRIPTION: Example command showing how to use McPrecon to test a connection to a Minecraft server. It demonstrates the basic usage pattern with a specific server address and port.\nSOURCE: https://github.com/chungoid/mcprecon/blob/master/tool-runners/scapy/requirements.txt#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmcprecon play.hypixel.net:25565\n```\n\n----------------------------------------\n\nTITLE: Installing McPrecon using Cargo\nDESCRIPTION: Command for installing the McPrecon tool using Cargo, Rust's package manager. This allows users to quickly install the tool from the command line.\nSOURCE: https://github.com/chungoid/mcprecon/blob/master/tool-runners/scapy/requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncargo install mcprecon\n```\n\n----------------------------------------\n\nTITLE: Listing Python Dependencies for MCPrecon\nDESCRIPTION: A simple list of Python package dependencies required for the MCPrecon project. It includes pytest for running tests and the requests library for making API calls.\nSOURCE: https://github.com/chungoid/mcprecon/blob/master/api-gateway/requirements-dev.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\npytest\nrequests # For API testing\n```\n\n----------------------------------------\n\nTITLE: Specifying PyTest as Testing Framework\nDESCRIPTION: This single-line configuration indicates that pytest is being used as the testing framework for the project. It serves as a marker for pytest to recognize the directory as containing test files.\nSOURCE: https://github.com/chungoid/mcprecon/blob/master/audit-daemon/requirements-dev.txt#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\npytest\n```\n\n----------------------------------------\n\nTITLE: Pytest Configuration File\nDESCRIPTION: Simple pytest marker indicating the project uses pytest for testing.\nSOURCE: https://github.com/chungoid/mcprecon/blob/master/graph-sync/requirements-dev.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\npytest\n```\n\n----------------------------------------\n\nTITLE: Tmux Minecraft Server Reconnection Script\nDESCRIPTION: A bash script that uses tmux to manage a Minecraft server session. It creates a new session if one doesn't exist, or attaches to an existing session, providing persistent server management.\nSOURCE: https://github.com/chungoid/mcprecon/blob/master/tool-runners/hydra/requirements.txt#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/bash\nif ! tmux has-session -t minecraft 2>/dev/null; then\n  tmux new-session -d -s minecraft 'cd /path/to/server && while true; do java -Xms1G -Xmx2G -jar server.jar nogui; sleep 5; done'\nfi\ntmux attach-session -t minecraft\n```\n\n----------------------------------------\n\nTITLE: Creating a Systemd Service for Minecraft Server\nDESCRIPTION: A systemd service configuration file that manages a Minecraft server with automatic restarts. It specifies the server's working directory, the command to run, and restart behavior.\nSOURCE: https://github.com/chungoid/mcprecon/blob/master/tool-runners/hydra/requirements.txt#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n[Unit]\nDescription=Minecraft Server\nAfter=network.target\n\n[Service]\nWorkingDirectory=/path/to/server\nExecStart=/usr/bin/java -Xms1G -Xmx2G -jar server.jar nogui\nRestart=always\nRestartSec=5\n\n[Install]\nWantedBy=multi-user.target\n```\n\n----------------------------------------\n\nTITLE: Minecraft Server Screen Session Command\nDESCRIPTION: Command to start a GNU Screen session named 'minecraft' that runs the reconnection script, allowing for detached server management.\nSOURCE: https://github.com/chungoid/mcprecon/blob/master/tool-runners/hydra/requirements.txt#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nscreen -S minecraft ./start_server.sh\n```\n\n----------------------------------------\n\nTITLE: Minecraft Server Reconnection Script using GNU Screen\nDESCRIPTION: A bash script to start a Minecraft server in a GNU Screen session that automatically restarts the server when it crashes. The script runs in a loop to ensure the server restarts after termination.\nSOURCE: https://github.com/chungoid/mcprecon/blob/master/tool-runners/hydra/requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/bash\nwhile true; do\n  cd /path/to/server\n  java -Xms1G -Xmx2G -jar server.jar nogui\n  echo \"Server closed. Restarting in 5 seconds...\"\n  sleep 5\ndone\n```"
  }
]