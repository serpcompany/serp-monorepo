[
  {
    "owner": "facepunch",
    "repo": "facepunch.steamworks",
    "content": "TITLE: Initialize Steam Client C#\nDESCRIPTION: This snippet demonstrates how to initialize the Steam client using the SteamClient.Init method. It catches any exceptions that may occur during initialization.\nSOURCE: https://github.com/facepunch/facepunch.steamworks/blob/master/README.md#_snippet_22\n\nLANGUAGE: csharp\nCODE:\n```\nusing Steamworks;\n\n// ...\n\ntry \n{\n    SteamClient.Init( 4000 );\n}\ncatch ( System.Exception e )\n{\n    // Couldn't init for some reason (steam is closed etc)\n}\n```\n\n----------------------------------------\n\nTITLE: Get Steam User Info C#\nDESCRIPTION: This snippet shows how to retrieve the current user's Steam ID and name using the SteamClient class.\nSOURCE: https://github.com/facepunch/facepunch.steamworks/blob/master/README.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nSteamClient.SteamId // Your SteamId\nSteamClient.Name // Your Name\n```\n\n----------------------------------------\n\nTITLE: Iterate Friends List C#\nDESCRIPTION: This snippet iterates through the user's friends list, printing their ID, name, online status, and Steam level to the console. It also demonstrates how to send a message to a friend.\nSOURCE: https://github.com/facepunch/facepunch.steamworks/blob/master/README.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nforeach ( var friend in SteamFriends.GetFriends() )\n{\n    Console.WriteLine( $\"{friend.Id}: {friend.Name}\" );\n    Console.WriteLine( $\"{friend.IsOnline} / {friend.SteamLevel}\" );\n    \n    friend.SendMessage( \"Hello Friend\" );\n}\n```\n\n----------------------------------------\n\nTITLE: Initialize Steam Server C#\nDESCRIPTION: This snippet shows how to initialize a Steam server using the SteamServer.Init method. It creates a SteamServerInit object with the necessary server configuration and catches any exceptions that may occur during initialization. It requires the Steamworks namespace.\nSOURCE: https://github.com/facepunch/facepunch.steamworks/blob/master/README.md#_snippet_24\n\nLANGUAGE: csharp\nCODE:\n```\nvar serverInit = new SteamServerInit( \"gmod\", \"Garry Mode\" )\n{\n    GamePort = 28015,\n    Secure = true,\n    QueryPort = 28016\n};\n\ntry\n{\n    Steamworks.SteamServer.Init( 4000, serverInit );\n}\ncatch ( System.Exception )\n{\n    // Couldn't init for some reason (dll errors, blocked ports)\n}\n```\n\n----------------------------------------\n\nTITLE: Auth Session Ticket C#\nDESCRIPTION: This code snippet demonstrates the process of authenticating a client using Steam auth session tickets. It shows how the client sends the ticket to the server, the server validates the ticket, and handles the authentication response.\nSOURCE: https://github.com/facepunch/facepunch.steamworks/blob/master/README.md#_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\n// Client sends ticket data to server somehow\nvar ticket = SteamUser.GetAuthSessionTicket();\n\n// server listens to event\nSteamServer.OnValidateAuthTicketResponse += ( steamid, ownerid, rsponse ) =>\n{\n    if ( rsponse == AuthResponse.OK )\n        TellUserTheyCanBeOnServer( steamid );\n    else\n        KickUser( steamid );\n};\n\n// server gets ticket data from client, calls this function.. which either returns\n// false straight away, or will issue a TicketResponse.\nif ( !SteamServer.BeginAuthSession( ticketData, clientSteamId ) )\n{\n    KickUser( clientSteamId );\n}\n\n//\n// Client is leaving, cancels their ticket OnValidateAuth is called on the server again\n// this time with AuthResponse.AuthTicketCanceled\n//\nticket.Cancel();\n```\n\n----------------------------------------\n\nTITLE: Get App Info C#\nDESCRIPTION: This snippet retrieves information about the current application, such as the game language and installation directory. It also demonstrates how to asynchronously get file details.\nSOURCE: https://github.com/facepunch/facepunch.steamworks/blob/master/README.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nConsole.WriteLine( SteamApps.GameLanguage ); // Print the current game language\nvar installDir = SteamApps.AppInstallDir( 4000 ); // Get the path to the Garry's Mod install folder\n\nvar fileinfo = await SteamApps.GetFileDetailsAsync( \"hl2.exe\" ); // async get file details\nDoSomething( fileinfo.SizeInBytes, fileinfo.Sha1 );\n```\n\n----------------------------------------\n\nTITLE: Shutdown Steam Client C#\nDESCRIPTION: This snippet demonstrates how to shut down the Steam client using the SteamClient.Shutdown method.\nSOURCE: https://github.com/facepunch/facepunch.steamworks/blob/master/README.md#_snippet_23\n\nLANGUAGE: csharp\nCODE:\n```\nSteamClient.Shutdown();\n```\n\n----------------------------------------\n\nTITLE: List Achievements C#\nDESCRIPTION: This snippet iterates through the available achievements and prints their name and state to the console.\nSOURCE: https://github.com/facepunch/facepunch.steamworks/blob/master/README.md#_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nforeach ( var a in SteamUserStats.Achievements )\n{\n    Console.WriteLine( $\"{a.Name} ({a.State})\" );\n}\n```\n\n----------------------------------------\n\nTITLE: Get User Avatar C#\nDESCRIPTION: This snippet retrieves the large avatar image for a given Steam ID. It asynchronously fetches the image data and converts it into a texture.\nSOURCE: https://github.com/facepunch/facepunch.steamworks/blob/master/README.md#_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nvar image = await SteamFriends.GetLargeAvatarAsync( steamid );\nif ( !image.HasValue ) return DefaultImage;\n\nreturn MakeTextureFromRGBA( image.Value.Data, image.Value.Width, image.Value.Height );\n```\n\n----------------------------------------\n\nTITLE: Write Steam Cloud File C#\nDESCRIPTION: This snippet demonstrates how to write a file to Steam Cloud storage.\nSOURCE: https://github.com/facepunch/facepunch.steamworks/blob/master/README.md#_snippet_16\n\nLANGUAGE: csharp\nCODE:\n```\nSteamRemoteStorage.FileWrite( \"file.txt\", fileContents );\n```\n\n----------------------------------------\n\nTITLE: Read Steam Cloud File C#\nDESCRIPTION: This snippet demonstrates how to read a file from Steam Cloud storage.\nSOURCE: https://github.com/facepunch/facepunch.steamworks/blob/master/README.md#_snippet_17\n\nLANGUAGE: csharp\nCODE:\n```\nvar fileContents = SteamRemoteStorage.FileRead( \"file.txt\" );\n```\n\n----------------------------------------\n\nTITLE: Get Inventory Items C#\nDESCRIPTION: This snippet retrieves a list of the user's items from the Steam Inventory. It disposes of the result after use and iterates through the items, printing their ID, quantity, and definition name.\nSOURCE: https://github.com/facepunch/facepunch.steamworks/blob/master/README.md#_snippet_21\n\nLANGUAGE: csharp\nCODE:\n```\nvar result = await SteamInventory.GetItems();\n\n// result is disposable, good manners to dispose after use\nusing ( result )\n{\n    var items = result?.GetItems( bWithProperties );\n\n    foreach ( InventoryItem item in items )\n    {\n        Console.WriteLine( $\"{item.Id} / {item.Quantity} / {item.Def.Name} \" );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Publish New Workshop Item C#\nDESCRIPTION: This snippet shows how to publish a new workshop item. It creates a new community file, sets its title, description, content path, and tags, and then submits it asynchronously.\nSOURCE: https://github.com/facepunch/facepunch.steamworks/blob/master/README.md#_snippet_15\n\nLANGUAGE: csharp\nCODE:\n```\nvar result = await Ugc.Editor.NewCommunityFile\n                      .WithTitle( \"My New FIle\" )\n                      .WithDescription( \"This is a description\" )\n                      .WithContent( \"c:/folder/addon/location\" )\n                      .WithTag( \"awesome\" )\n                      .WithTag( \"small\" )\n                      .SubmitAsync( iProgressBar );\n```\n\n----------------------------------------\n\nTITLE: Query Internet Servers C#\nDESCRIPTION: This snippet queries a list of internet servers, filters them by map name, and prints their address and name to the console.  It uses a ServerList.Internet object within a using statement for proper resource disposal.\nSOURCE: https://github.com/facepunch/facepunch.steamworks/blob/master/README.md#_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nusing ( var list = new ServerList.Internet() )\n{\n    list.AddFilter( \"map\", \"de_dust\" );\n    await list.RunQueryAsync();\n\n    foreach ( var server in list.Responsive )\n    {\n        Console.WriteLine( $\"{server.Address} {server.Name}\" );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Steam Utils Access C#\nDESCRIPTION: This snippet demonstrates accessing various utility functions provided by the SteamUtils class, such as retrieving the time since the app/computer has been active, the IP country, battery power status, app ID, and overlay status.\nSOURCE: https://github.com/facepunch/facepunch.steamworks/blob/master/README.md#_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\nSteamUtils.SecondsSinceAppActive;\nSteamUtils.SecondsSinceComputerActive;\nSteamUtils.IpCountry;\nSteamUtils.UsingBatteryPower;\nSteamUtils.CurrentBatteryPower;\nSteamUtils.AppId;\nSteamUtils.IsOverlayEnabled;\nSteamUtils.IsSteamRunningInVR;\nSteamUtils.IsSteamInBigPictureMode;\n```\n\n----------------------------------------\n\nTITLE: Get Workshop Item Info C#\nDESCRIPTION: This snippet retrieves information about a specific workshop item using its ID, such as its title, installation status, download status, subscription status, and description.\nSOURCE: https://github.com/facepunch/facepunch.steamworks/blob/master/README.md#_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\nvar itemInfo = await Ugc.Item.Get( 1720164672 );\n\nConsole.WriteLine( $\"Title: {itemInfo?.Title}\" );\nConsole.WriteLine( $\"IsInstalled: {itemInfo?.IsInstalled}\" );\nConsole.WriteLine( $\"IsDownloading: {itemInfo?.IsDownloading}\" );\nConsole.WriteLine( $\"IsDownloadPending: {itemInfo?.IsDownloadPending}\" );\nConsole.WriteLine( $\"IsSubscribed: {itemInfo?.IsSubscribed}\" );\nConsole.WriteLine( $\"NeedsUpdate: {itemInfo?.NeedsUpdate}\" );\nConsole.WriteLine( $\"Description: {itemInfo?.Description}\" );\n```\n\n----------------------------------------\n\nTITLE: Unlock Achievement C#\nDESCRIPTION: This snippet demonstrates how to unlock an achievement by creating an Achievement object and calling the Trigger method.\nSOURCE: https://github.com/facepunch/facepunch.steamworks/blob/master/README.md#_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nvar ach = new Achievement( \"GM_PLAYED_WITH_GARRY\" );\nach.Trigger();\n```\n\n----------------------------------------\n\nTITLE: Voice Recording C#\nDESCRIPTION: This snippet shows how to record voice data using the SteamUser API. It sets the VoiceRecord property based on a key press and reads the voice data into a stream.\nSOURCE: https://github.com/facepunch/facepunch.steamworks/blob/master/README.md#_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\nSteamUser.VoiceRecord = KeyDown( \"V\" );\n\nif ( SteamUser.HasVoiceData )\n{\n    var bytesrwritten = SteamUser.ReadVoiceData( stream );\n    // Send Stream Data To Server or Something\n}\n```\n\n----------------------------------------\n\nTITLE: Get Inventory Item Definitions C#\nDESCRIPTION: This snippet retrieves and prints the names of all item definitions in the Steam Inventory.\nSOURCE: https://github.com/facepunch/facepunch.steamworks/blob/master/README.md#_snippet_19\n\nLANGUAGE: csharp\nCODE:\n```\nforeach ( InventoryDef def in SteamInventory.Definitions )\n{\n    Console.WriteLine( $\"{def.Name}\" );\n}\n```\n\n----------------------------------------\n\nTITLE: Download Workshop Item C#\nDESCRIPTION: This snippet demonstrates how to download a workshop item using its ID.\nSOURCE: https://github.com/facepunch/facepunch.steamworks/blob/master/README.md#_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\nSteamUGC.Download( 1717844711 );\n```\n\n----------------------------------------\n\nTITLE: Query Workshop Items C#\nDESCRIPTION: This snippet demonstrates querying a list of workshop items based on tags and retrieving a specific page of results.  It iterates through the entries and prints their titles.\nSOURCE: https://github.com/facepunch/facepunch.steamworks/blob/master/README.md#_snippet_12\n\nLANGUAGE: csharp\nCODE:\n```\nvar q = Ugc.Query.All\n                    .WithTag( \"Fun\" )\n                    .WithTag( \"Movie\" )\n                    .MatchAllTags();\n\nvar result = await q.GetPageAsync( 1 );\n\nConsole.WriteLine( $\"ResultCount: {result?.ResultCount}\" );\nConsole.WriteLine( $\"TotalCount: {result?.TotalCount}\" );\n\nforeach ( Ugc.Item entry in result.Value.Entries )\n{\n    Console.WriteLine( $\"{entry.Title}\" );\n}\n```\n\n----------------------------------------\n\nTITLE: List Steam Cloud Files C#\nDESCRIPTION: This snippet lists all files stored in Steam Cloud storage, printing their name, size, and last modified time.\nSOURCE: https://github.com/facepunch/facepunch.steamworks/blob/master/README.md#_snippet_18\n\nLANGUAGE: csharp\nCODE:\n```\nforeach ( var file in SteamRemoteStorage.Files )\n{\n    Console.WriteLine( $\"{file} ({SteamRemoteStorage.FileSize(file)} {SteamRemoteStorage.FileTime( file )})\" );\n}\n```\n\n----------------------------------------\n\nTITLE: Query Friends Workshop Items C#\nDESCRIPTION: This snippet demonstrates querying a list of workshop items created by the user's friends.\nSOURCE: https://github.com/facepunch/facepunch.steamworks/blob/master/README.md#_snippet_13\n\nLANGUAGE: csharp\nCODE:\n```\nvar q = Ugc.UserQuery.All\n                        .CreatedByFriends();\n```\n\n----------------------------------------\n\nTITLE: Query User Workshop Items C#\nDESCRIPTION: This snippet demonstrates querying a list of workshop items created by the current user.\nSOURCE: https://github.com/facepunch/facepunch.steamworks/blob/master/README.md#_snippet_14\n\nLANGUAGE: csharp\nCODE:\n```\nvar q = Ugc.UserQuery.All\n                        .FromSelf();\n```\n\n----------------------------------------\n\nTITLE: Get Inventory Item Prices C#\nDESCRIPTION: This snippet retrieves and prints the names and local prices of items that are for sale in the Steam Inventory shop.\nSOURCE: https://github.com/facepunch/facepunch.steamworks/blob/master/README.md#_snippet_20\n\nLANGUAGE: csharp\nCODE:\n```\nvar defs = await SteamInventory.GetDefinitionsWithPricesAsync();\n\nforeach ( var def in defs )\n{\n    Console.WriteLine( $\"{def.Name} [{def.LocalPriceFormatted}]\" );\n}\n```"
  }
]