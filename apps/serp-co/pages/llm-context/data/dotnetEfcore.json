[
  {
    "owner": "dotnet",
    "repo": "efcore",
    "content": "TITLE: Basic CRUD Operations with Entity Framework Core\nDESCRIPTION: A code example demonstrating basic Create, Read, Update, and Delete (CRUD) operations using Entity Framework Core, including inserting data, querying with LINQ, updating records, and deleting entities.\nSOURCE: https://github.com/dotnet/efcore/blob/main/README.md#2025-04-16_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nusing var db = new BloggingContext();\n\n// Inserting data into the database\ndb.Add(new Blog { Url = \"http://blogs.msdn.com/adonet\" });\ndb.SaveChanges();\n\n// Querying\nvar blog = db.Blogs\n    .OrderBy(b => b.BlogId)\n    .First();\n\n// Updating\nblog.Url = \"https://devblogs.microsoft.com/dotnet\";\nblog.Posts.Add(\n    new Post\n    {\n        Title = \"Hello World\",\n        Content = \"I wrote an app using EF Core!\"\n    });\ndb.SaveChanges();\n\n// Deleting\ndb.Remove(blog);\ndb.SaveChanges();\n```\n\n----------------------------------------\n\nTITLE: Implementing Parameterized LINQ Queries in EF Core for SQL Injection Protection\nDESCRIPTION: This example demonstrates how EF Core protects against SQL injection by automatically parameterizing values in LINQ queries. The method retrieves customers with a specified last name, and EF Core converts this to a parameterized SQL query rather than directly embedding the value.\nSOURCE: https://github.com/dotnet/efcore/blob/main/docs/security.md#2025-04-16_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic IEnumerable<Customer> FindCustomers(string lastName)\n{\n    using (var context = new CustomerContext())\n    {\n        var customers = context.Customers\n            .Where(c => c.LastName == lastName)\n            .ToList();\n    }\n}\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT [c].[CustomerId], [c].[Name]\nFROM [Customer] AS [c]\nWHERE [c].[LastName] = @p0\n```\n\n----------------------------------------\n\nTITLE: Creating Basic DbContext and Entity Model in C#\nDESCRIPTION: Demonstrates how to create a basic database context class inheriting from DbContext and define a simple Customer entity. Shows the fundamental structure for EF Core implementation.\nSOURCE: https://github.com/dotnet/efcore/blob/main/src/EFCore/PACKAGE.md#2025-04-16_snippet_0\n\nLANGUAGE: c#\nCODE:\n```\nusing Microsoft.EntityFrameworkCore;\n\npublic class MyDbContext : DbContext\n{\n    public DbSet<Customer> Customers { get; set; }\n}\n\npublic class Customer\n{\n    public int Id { get; set; }\n    public string Name { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring SQL Server Provider in EF Core DbContext\nDESCRIPTION: Shows how to configure a DbContext to use SQL Server by overriding OnConfiguring method and calling UseSqlServer with a connection string. This enables connection to either local SQL Server or Azure SQL databases.\nSOURCE: https://github.com/dotnet/efcore/blob/main/src/EFCore.SqlServer/PACKAGE.md#2025-04-16_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nprotected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n{\n    optionsBuilder.UseSqlServer(\"Server=(localdb)\\\\mssqllocaldb;Database=MyDatabase;Trusted_Connection=True;\");\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring SQLite Database Provider in EF Core\nDESCRIPTION: Demonstrates how to configure a DbContext to use SQLite as the database provider by implementing the OnConfiguring method. The connection string specifies the database file location using the Data Source parameter.\nSOURCE: https://github.com/dotnet/efcore/blob/main/src/EFCore.Sqlite/PACKAGE.md#2025-04-16_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nprotected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n{\n    optionsBuilder.UseSqlite(\"Data Source=database.db\");\n}\n```\n\n----------------------------------------\n\nTITLE: Installing EF Core Providers Using .NET CLI\nDESCRIPTION: Command examples for installing Entity Framework Core database providers for SQL Server, SQLite, and Cosmos DB using the .NET CLI.\nSOURCE: https://github.com/dotnet/efcore/blob/main/README.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Microsoft.EntityFrameworkCore.SqlServer\ndotnet add package Microsoft.EntityFrameworkCore.Sqlite\ndotnet add package Microsoft.EntityFrameworkCore.Cosmos\n```\n\n----------------------------------------\n\nTITLE: Configuring SQL Server Provider in EF Core\nDESCRIPTION: Demonstrates how to configure a DbContext to use SQL Server provider with a connection string and define the database model.\nSOURCE: https://github.com/dotnet/efcore/blob/main/src/EFCore/PACKAGE.md#2025-04-16_snippet_2\n\nLANGUAGE: c#\nCODE:\n```\nusing Microsoft.EntityFrameworkCore;\n\npublic class MyDbContext : DbContext\n{\n    protected override void OnConfiguring(DbContextOptionsBuilder options)\n        => options.UseSqlServer(@\"Data Source=(localdb)\\MSSQLLocalDB;Initial Catalog=MyDatabase\");\n\n    public DbSet<Customer> Customers { get; set; }\n}\n\npublic class Customer\n{\n    public int Id { get; set; }\n    public string Name { get; set; }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Customer Records with Parameterized Values in EF Core\nDESCRIPTION: This snippet demonstrates how to safely create a customer record in the database using Entity Framework Core. The method takes potentially untrusted user input (first and last names) and handles them securely through EF Core's parameterization system when generating SQL.\nSOURCE: https://github.com/dotnet/efcore/blob/main/docs/security.md#2025-04-16_snippet_1\n\nLANGUAGE: cs\nCODE:\n```\npublic Customer CreateCustomer(string firstName, string lastName)\n{\n    using (var context = new CustomerContext())\n    {\n        var customer = new Customer \n        {\n            FirstName = firstName,\n            LastName = lastName\n        };\n\n        context.Customers.Add(customer);\n        context.SaveChanges();\n\n        return customer;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Database Operations with EF Core\nDESCRIPTION: Shows common database operations using EF Core context, including adding new records and retrieving data using LINQ queries.\nSOURCE: https://github.com/dotnet/efcore/blob/main/src/EFCore/PACKAGE.md#2025-04-16_snippet_1\n\nLANGUAGE: c#\nCODE:\n```\nusing var context = new MyDbContext();\n\n// Add a new customer\ncontext.Customers.Add(new Customer { Name = \"John Doe\" });\ncontext.SaveChanges();\n\n// Retrieve all customers\nvar customers = context.Customers.ToList();\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Cosmos DB Provider in EF Core DbContext\nDESCRIPTION: Example showing how to configure a DbContext to use Azure Cosmos DB by implementing the OnConfiguring method and calling UseCosmos with the necessary connection parameters. Required parameters include the endpoint URL, authentication key, and database name.\nSOURCE: https://github.com/dotnet/efcore/blob/main/src/EFCore.Cosmos/PACKAGE.md#2025-04-16_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nprotected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n    => optionsBuilder.UseCosmos(\n        \"https://localhost:8081\",\n        \"C2y6yDjf5/R+ob0N8A7Cgv30VRDJIWEHLM+4QDU5DE2nQ9nDuVTqobD4b8mGGyPMbIZnqyMsEcaGQy67XIw/Jw==\",\n        databaseName: \"OrdersDB\");\n```\n\n----------------------------------------\n\nTITLE: Basic Database Query Using Microsoft.Data.Sqlite\nDESCRIPTION: Example of using Microsoft.Data.Sqlite to connect to a SQLite database, execute a query, and read the results. Demonstrates core ADO.NET abstractions including connection, command, and data reader objects.\nSOURCE: https://github.com/dotnet/efcore/blob/main/src/Microsoft.Data.Sqlite/PACKAGE.md#2025-04-16_snippet_1\n\nLANGUAGE: cs\nCODE:\n```\nusing var connection = new SqliteConnection(\"Data Source=Blogs.db\");\nconnection.Open();\n\nusing var command = connection.CreateCommand();\ncommand.CommandText = \"SELECT Url FROM Blogs\";\n\nusing var reader = command.ExecuteReader();\nwhile (reader.Read())\n{\n    var url = reader.GetString(0);\n}\n```\n\n----------------------------------------\n\nTITLE: Basic ADO.NET Operations with Microsoft.Data.Sqlite\nDESCRIPTION: Example showing basic ADO.NET operations using Microsoft.Data.Sqlite, including establishing a connection to a SQLite database, creating a command, executing a query, and reading results.\nSOURCE: https://github.com/dotnet/efcore/blob/main/README.md#2025-04-16_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nusing var connection = new SqliteConnection(\"Data Source=Blogs.db\");\nconnection.Open();\n\nusing var command = connection.CreateCommand();\ncommand.CommandText = \"SELECT Url FROM Blogs\";\n\nusing var reader = command.ExecuteReader();\nwhile (reader.Read())\n{\n    var url = reader.GetString(0);\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Raw SQL Commands with Parameterization in EF Core\nDESCRIPTION: This example demonstrates how to safely execute raw SQL commands by explicitly parameterizing user input. The code drops down to ADO.NET to update customer ownership records, using SqlParameter objects to prevent SQL injection attacks.\nSOURCE: https://github.com/dotnet/efcore/blob/main/docs/security.md#2025-04-16_snippet_3\n\nLANGUAGE: cs\nCODE:\n```\npublic void MoveClients(string oldOwner, string newOwner)\n{\n    using (var context = new OrdersContext())\n    {\n        var connection = context.Database.AsRelational().Connection.DbConnection;\n        var cmd = connection.CreateCommand();\n        cmd.CommandText = \"UPDATE [dbo].[Customer] SET [Owner] = @p0 WHERE [Owner] = @p1\";\n        cmd.Parameters.Add(new SqlParameter(\"p0\", newOwner));\n        cmd.Parameters.Add(new SqlParameter(\"p1\", oldOwner));\n        connection.Open();\n        cmd.ExecuteNonQuery();\n        connection.Close();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Lazy-Loading Proxies in Entity Framework Core\nDESCRIPTION: Configures a DbContext to use lazy-loading proxies by calling UseLazyLoadingProxies() in the OnConfiguring method. This enables lazy-loading of related entities when they are accessed.\nSOURCE: https://github.com/dotnet/efcore/blob/main/src/EFCore.Proxies/PACKAGE.md#2025-04-16_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nprotected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n    => optionsBuilder.UseLazyLoadingProxies();\n```\n\n----------------------------------------\n\nTITLE: Configuring Change-Tracking Proxies in Entity Framework Core\nDESCRIPTION: Configures a DbContext to use change-tracking proxies by calling UseChangeTrackingProxies() in the OnConfiguring method. This enables automatic change detection in entity properties.\nSOURCE: https://github.com/dotnet/efcore/blob/main/src/EFCore.Proxies/PACKAGE.md#2025-04-16_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nprotected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n    => optionsBuilder.UseChangeTrackingProxies();\n```\n\n----------------------------------------\n\nTITLE: Configuring Both Lazy-Loading and Change-Tracking Proxies in Entity Framework Core\nDESCRIPTION: Configures a DbContext to use both lazy-loading and change-tracking proxies by calling both methods in the OnConfiguring method. This combines automatic loading of related entities with automatic change detection.\nSOURCE: https://github.com/dotnet/efcore/blob/main/src/EFCore.Proxies/PACKAGE.md#2025-04-16_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nprotected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n    => optionsBuilder\n        .UseLazyLoadingProxies()\n        .UseChangeTrackingProxies();\n```\n\n----------------------------------------\n\nTITLE: Configuring InMemory Database Provider in EF Core\nDESCRIPTION: Shows how to configure a DbContext to use the in-memory database provider by overriding the OnConfiguring method and calling UseInMemoryDatabase with a database name parameter.\nSOURCE: https://github.com/dotnet/efcore/blob/main/src/EFCore.InMemory/PACKAGE.md#2025-04-16_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nprotected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n{\n    optionsBuilder.UseInMemoryDatabase(\"MyDatabase\");\n}\n```\n\n----------------------------------------\n\nTITLE: Installing dotnet-ef CLI Tool for Entity Framework Core\nDESCRIPTION: This command installs the dotnet-ef tool globally using the .NET CLI. The tool provides cross-platform command-line functionality for Entity Framework Core tasks.\nSOURCE: https://github.com/dotnet/efcore/blob/main/src/dotnet-ef/PACKAGE.md#2025-04-16_snippet_0\n\nLANGUAGE: dotnetcli\nCODE:\n```\ndotnet tool install --global dotnet-ef\n```\n\n----------------------------------------\n\nTITLE: Installing Entity Framework Core Tools in PowerShell\nDESCRIPTION: This command installs the Microsoft.EntityFrameworkCore.Tools package in the Visual Studio Package Manager Console. This package provides PowerShell tooling for Entity Framework Core development tasks.\nSOURCE: https://github.com/dotnet/efcore/blob/main/src/EFCore.Tools/PACKAGE.md#2025-04-16_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nInstall-Package Microsoft.EntityFrameworkCore.Tools\n```\n\n----------------------------------------\n\nTITLE: Configuring SQL Server with NetTopologySuite in EF Core\nDESCRIPTION: This code snippet demonstrates how to configure a DbContext to use SQL Server with NetTopologySuite for spatial data support. It shows the usage of UseNetTopologySuite method within the UseSqlServer configuration.\nSOURCE: https://github.com/dotnet/efcore/blob/main/src/EFCore.SqlServer.NTS/PACKAGE.md#2025-04-16_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nprotected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n    => options.UseSqlServer(\n        \"Server=localhost;Database=MyDatabase;Trusted_Connection=True;\",\n        b => b.UseNetTopologySuite());\n```\n\n----------------------------------------\n\nTITLE: Configuring SQLite with NetTopologySuite in Entity Framework Core\nDESCRIPTION: This code snippet demonstrates how to configure a DbContext to use SQLite with NetTopologySuite for spatial data support. It shows the usage of the UseNetTopologySuite method within the UseSqlite configuration.\nSOURCE: https://github.com/dotnet/efcore/blob/main/src/EFCore.Sqlite.NTS/PACKAGE.md#2025-04-16_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nprotected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n    => options.UseSqlite(\"Data Source=spatialdata.dat\", b => b.UseNetTopologySuite());\n```\n\n----------------------------------------\n\nTITLE: Configuring HierarchyId in EF Core SQL Server Provider\nDESCRIPTION: This snippet demonstrates how to configure a DbContext to use the HierarchyId type with SQL Server. It shows the proper method to call UseHierarchyId() within the UseSqlServer configuration to enable hierarchical data support.\nSOURCE: https://github.com/dotnet/efcore/blob/main/src/EFCore.SqlServer.HierarchyId/PACKAGE.md#2025-04-16_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nprotected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n    => options.UseSqlServer(\n        \"Server=localhost;Database=MyDatabase;Trusted_Connection=True;\",\n        b => b.HierarchyId());\n```\n\n----------------------------------------\n\nTITLE: Initializing SQLite native binaries with SQLitePCL.raw in C#\nDESCRIPTION: This code snippet demonstrates how to initialize SQLite native binaries when using the Microsoft.Data.Sqlite.Core package. After installing a SQLite binary package, this initialization is required before using the SQLite functionality.\nSOURCE: https://github.com/dotnet/efcore/blob/main/src/Microsoft.Data.Sqlite.Core/Package.md#2025-04-16_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nSQLitePCL.Batteries_V2.Init();\n```\n\n----------------------------------------\n\nTITLE: Initializing SQLite Batteries for Microsoft.EntityFrameworkCore.Sqlite.Core\nDESCRIPTION: This code initializes the SQLite native binary when using the Core package. This initialization step is required before calling UseSqlite() since the Core package doesn't automatically include a SQLite native binary.\nSOURCE: https://github.com/dotnet/efcore/blob/main/src/EFCore.Sqlite.Core/PACKAGE.md#2025-04-16_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nSQLitePCL.Batteries_V2.Init();\n```\n\n----------------------------------------\n\nTITLE: Parameterized SQL Insert Generated by EF Core\nDESCRIPTION: This SQL snippet shows how EF Core automatically generates parameterized SQL queries from the C# code, protecting against SQL injection by using parameters (@p0, @p1) instead of directly embedding values in the query string.\nSOURCE: https://github.com/dotnet/efcore/blob/main/docs/security.md#2025-04-16_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nINSERT INTO [Customer] ([FirstName], [LastName])\nOUTPUT INSERTED.[CustomerId]\nVALUES (@p0, @p1)\n```\n\n----------------------------------------\n\nTITLE: Installing Microsoft.EntityFrameworkCore.Design Package in XML\nDESCRIPTION: This XML snippet demonstrates how to include the Microsoft.EntityFrameworkCore.Design package in a project file. It sets PrivateAssets to \"all\" to prevent the tooling assembly from being included in the published app, and specifies which assets to include.\nSOURCE: https://github.com/dotnet/efcore/blob/main/src/EFCore.Design/PACKAGE.md#2025-04-16_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<PackageReference Include=\"Microsoft.EntityFrameworkCore.Design\" Version=\"8.0.2\">\n    <PrivateAssets>all</PrivateAssets>\n    <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>\n</PackageReference>\n```\n\n----------------------------------------\n\nTITLE: Installing Microsoft.Data.Sqlite Using .NET CLI\nDESCRIPTION: Command for installing the Microsoft.Data.Sqlite package using the .NET CLI, which is a lightweight ADO.NET provider for SQLite.\nSOURCE: https://github.com/dotnet/efcore/blob/main/README.md#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package Microsoft.Data.Sqlite\n```\n\n----------------------------------------\n\nTITLE: Installing Microsoft.Data.Sqlite Package with dotnet CLI\nDESCRIPTION: Command to install the Microsoft.Data.Sqlite package using the dotnet CLI. The package can be installed with an optional version parameter to specify preview versions.\nSOURCE: https://github.com/dotnet/efcore/blob/main/src/Microsoft.Data.Sqlite/PACKAGE.md#2025-04-16_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ndotnet add package Microsoft.Data.Sqlite\n```\n\n----------------------------------------\n\nTITLE: Installing Daily Build of EF Core Command-Line Tool\nDESCRIPTION: This shell command installs the latest daily build version of the dotnet-ef command-line tool globally. It specifies the version as 10.0.0-* to get the latest pre-release version.\nSOURCE: https://github.com/dotnet/efcore/blob/main/docs/DailyBuilds.md#2025-04-16_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ndotnet tool install -g dotnet-ef --version 10.0.0-* --add-source https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet10/nuget/v3/index.json\n```\n\n----------------------------------------\n\nTITLE: Installing Daily Build of EF Core Templates\nDESCRIPTION: This shell command installs the latest daily build version of the Microsoft.EntityFrameworkCore.Templates package. This is useful for experimenting with new features or testing bug fixes in the templates.\nSOURCE: https://github.com/dotnet/efcore/blob/main/docs/DailyBuilds.md#2025-04-16_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ndotnet new install Microsoft.EntityFrameworkCore.Templates::10.0.0-* --add-source https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet10/nuget/v3/index.json\n```\n\n----------------------------------------\n\nTITLE: Configuring Project References for EF Core Daily Builds\nDESCRIPTION: This XML snippet shows how to reference EF Core daily build packages in a project file. It uses wildcards to always pull the latest daily build version.\nSOURCE: https://github.com/dotnet/efcore/blob/main/docs/DailyBuilds.md#2025-04-16_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<ItemGroup>\n    <PackageReference Include=\"Microsoft.EntityFrameworkCore.Tools\" Version=\"10.0.0-*\" />\n    <PackageReference Include=\"Microsoft.EntityFrameworkCore.Design\" Version=\"10.0.0-*\" />\n    <PackageReference Include=\"Microsoft.EntityFrameworkCore.SqlServer\" Version=\"10.0.0-*\" />\n    <PackageReference Include=\"Microsoft.EntityFrameworkCore.SqlServer.NetTopologySuite\" Version=\"10.0.0-*\" />\n  </ItemGroup>\n```\n\n----------------------------------------\n\nTITLE: Configuring EF Core Optimization in XML Project File\nDESCRIPTION: This XML snippet demonstrates how to enable EF Core context optimization for release builds in the project file. It sets the EFOptimizeContext property to true when the build configuration is set to Release.\nSOURCE: https://github.com/dotnet/efcore/blob/main/src/EFCore.Tasks/PACKAGE.md#2025-04-16_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<EFOptimizeContext Condition=\"'$(Configuration)'=='Release'\">true</EFOptimizeContext>\n```\n\n----------------------------------------\n\nTITLE: Specifying EF Core Startup Project in XML Project File\nDESCRIPTION: This XML snippet shows how to specify a different startup project for EF Core in the project file. It sets the EFStartupProject property to the relative path of the startup project file.\nSOURCE: https://github.com/dotnet/efcore/blob/main/src/EFCore.Tasks/PACKAGE.md#2025-04-16_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<EFStartupProject>..\\Startup\\Startup.csproj</EFStartupProject>\n```\n\n----------------------------------------\n\nTITLE: Installing EF Core Templates Package using dotnet CLI\nDESCRIPTION: Command to install the Microsoft.EntityFrameworkCore.Templates package from NuGet using the dotnet CLI.\nSOURCE: https://github.com/dotnet/efcore/blob/main/src/EFCore.Templates/PACKAGE.md#2025-04-16_snippet_0\n\nLANGUAGE: dotnetcli\nCODE:\n```\ndotnet new install Microsoft.EntityFrameworkCore.Templates\n```\n\n----------------------------------------\n\nTITLE: Adding EF Core Templates to Your Project\nDESCRIPTION: Command to add Entity Framework Core templates to your existing project using the dotnet CLI.\nSOURCE: https://github.com/dotnet/efcore/blob/main/src/EFCore.Templates/PACKAGE.md#2025-04-16_snippet_1\n\nLANGUAGE: dotnetcli\nCODE:\n```\ndotnet new ef-templates\n```\n\n----------------------------------------\n\nTITLE: Configuring NuGet Package Sources for EF Core Daily Builds\nDESCRIPTION: This XML configuration sets up the necessary package sources for accessing EF Core daily builds. It includes the dotnet10 source for daily builds and the standard nuget.org source.\nSOURCE: https://github.com/dotnet/efcore/blob/main/docs/DailyBuilds.md#2025-04-16_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<configuration>\n    <packageSources>\n        <add key=\"dotnet10\" value=\"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet10/nuget/v3/index.json\" />\n        <add key=\"nuget.org\" value=\"https://api.nuget.org/v3/index.json\" />\n    </packageSources>\n</configuration>\n```\n\n----------------------------------------\n\nTITLE: Configuring NuGet Package Sources with Disabled Sources Cleared\nDESCRIPTION: This XML configuration clears any disabled package sources and sets up the necessary sources for EF Core daily builds. This can help resolve issues with missing packages.\nSOURCE: https://github.com/dotnet/efcore/blob/main/docs/DailyBuilds.md#2025-04-16_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<configuration>\n    <disabledPackageSources>\n        <clear />\n    </disabledPackageSources>\n    <packageSources>\n        <add key=\"dotnet10\" value=\"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet10/nuget/v3/index.json\" />\n        <add key=\"nuget.org\" value=\"https://api.nuget.org/v3/index.json\" />\n    </packageSources>\n</configuration>\n```\n\n----------------------------------------\n\nTITLE: Configuring NuGet Package Sources with Complete Reset\nDESCRIPTION: This XML configuration provides a clean slate for NuGet configuration by clearing both disabled package sources and previously configured package sources before adding the necessary sources for EF Core daily builds.\nSOURCE: https://github.com/dotnet/efcore/blob/main/docs/DailyBuilds.md#2025-04-16_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<configuration>\n    <disabledPackageSources>\n        <clear />\n    </disabledPackageSources>\n    <packageSources>\n        <clear />\n        <add key=\"dotnet10\" value=\"https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet10/nuget/v3/index.json\" />\n        <add key=\"nuget.org\" value=\"https://api.nuget.org/v3/index.json\" />\n    </packageSources>\n</configuration>\n```\n\n----------------------------------------\n\nTITLE: Cloning EF Core Main Repository\nDESCRIPTION: Git command to clone the main EF Core repository from GitHub for local development.\nSOURCE: https://github.com/dotnet/efcore/blob/main/docs/getting-and-building-the-code.md#2025-04-16_snippet_0\n\nLANGUAGE: console\nCODE:\n```\ngit clone https://github.com/dotnet/efcore.git\n```\n\n----------------------------------------\n\nTITLE: Cloning Personal EF Core Fork\nDESCRIPTION: Git command to clone a personal fork of the EF Core repository using a GitHub username.\nSOURCE: https://github.com/dotnet/efcore/blob/main/docs/getting-and-building-the-code.md#2025-04-16_snippet_1\n\nLANGUAGE: console\nCODE:\n```\ngit clone https://github.com/myusername/efcore.git\n```\n\n----------------------------------------\n\nTITLE: Building Local NuGet Packages with Custom Build ID\nDESCRIPTION: Command to build EF Core NuGet packages with a specific build number to avoid caching issues.\nSOURCE: https://github.com/dotnet/efcore/blob/main/docs/getting-and-building-the-code.md#2025-04-16_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nbuild /p:OfficialBuildId=20231212.6 -pack\n```\n\n----------------------------------------\n\nTITLE: NuGet Configuration for Local Packages\nDESCRIPTION: XML configuration for NuGet.Config file to include local package source alongside nuget.org.\nSOURCE: https://github.com/dotnet/efcore/blob/main/docs/getting-and-building-the-code.md#2025-04-16_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<configuration>\n  <packageSources>\n    <add key=\"nuget.org\" value=\"https://api.nuget.org/v3/index.json\" protocolVersion=\"3\" />\n    <add key=\"Local\" value=\"C:\\local\\code\\efcore\\artifacts\\packages\\Debug\\Shipping\" />\n  </packageSources>\n</configuration>\n```\n\n----------------------------------------\n\nTITLE: Starting Visual Studio with EF Core Solution\nDESCRIPTION: Command to configure local environment and open the EF Core solution in Visual Studio.\nSOURCE: https://github.com/dotnet/efcore/blob/main/docs/getting-and-building-the-code.md#2025-04-16_snippet_4\n\nLANGUAGE: console\nCODE:\n```\nstartvs.cmd EFCore.sln\n```\n\n----------------------------------------\n\nTITLE: Package References in .NET\nDESCRIPTION: NuGet package names referenced in the documentation for Entity Framework Core and its abstractions package.\nSOURCE: https://github.com/dotnet/efcore/blob/main/src/EFCore.Abstractions/PACKAGE.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nMicrosoft.EntityFrameworkCore.Abstractions\\nMicrosoft.EntityFrameworkCore\n```\n\n----------------------------------------\n\nTITLE: Implementing 1ES Pipeline Template with Multiple Outputs\nDESCRIPTION: Example of using Arcade's 1ES pipeline templates to reduce security scan overhead by centralizing artifact publishing. This demonstrates proper configuration of jobs.yml template with templateContext outputs parameter.\nSOURCE: https://github.com/dotnet/efcore/blob/main/eng/common/template-guidance.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# azure-pipelines.yml\nextends:\n  template: azure-pipelines/MicroBuild.1ES.Official.yml@MicroBuildTemplate\n  parameters:\n    stages:\n    - stage: build\n      jobs:\n      - template: /eng/common/templates-official/jobs/jobs.yml@self\n        parameters:\n          # 1ES makes use of outputs to reduce security task injection overhead\n          templateContext:\n            outputs:\n            - output: pipelineArtifact\n              displayName: 'Publish logs from source'\n              continueOnError: true\n              condition: always()\n              targetPath: $(Build.ArtifactStagingDirectory)/artifacts/log\n              artifactName: Logs\n          jobs:\n          - job: Windows\n            steps:\n            - script: echo \"friendly neighborhood\" > artifacts/marvel/spiderman.txt\n          # copy build outputs to artifact staging directory for publishing\n          - task: CopyFiles@2\n              displayName: Gather build output\n              inputs:\n                SourceFolder: '$(Build.SourcesDirectory)/artifacts/marvel'\n                Contents: '**'\n                TargetFolder: '$(Build.ArtifactStagingDirectory)/artifacts/marvel'\n```"
  }
]