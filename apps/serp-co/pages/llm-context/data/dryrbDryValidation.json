[
  {
    "owner": "dry-rb",
    "repo": "dry-validation",
    "content": "TITLE: Creating a User Validation Contract in Ruby using dry-validation\nDESCRIPTION: Demonstrates how to create a validation contract for a new user that validates email format and age requirements. The contract defines a schema with required fields and type checks, then adds custom validation rules for email format and minimum age restrictions.\nSOURCE: https://github.com/dry-rb/dry-validation/blob/main/docsite/source/index.html.md#2025-04-12_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nclass NewUserContract < Dry::Validation::Contract\n  params do\n    required(:email).filled(:string)\n    required(:age).value(:integer)\n  end\n\n  rule(:email) do\n    unless /\\A[\\w+\\-.]+@[a-z\\d\\-]+(\\.[a-z\\d\\-]+)*\\.[a-z]+\\z/i.match?(value)\n      key.failure('has invalid format')\n    end\n  end\n\n  rule(:age) do\n    key.failure('must be greater than 18') if value <= 18\n  end\nend\n\ncontract = NewUserContract.new\n\ncontract.call(email: 'jane@doe.org', age: '17')\n# #<Dry::Validation::Result{:email=>\"jane@doe.org\", :age=>17} errors={:age=>[\"must be greater than 18\"]}>\n```\n\n----------------------------------------\n\nTITLE: Implementing Phone Number Array Validation in Ruby using dry-validation\nDESCRIPTION: Example contract that validates an email string and an optional array of phone numbers. Each phone number must start with '00-' prefix. Shows handling of nil values, invalid types, and custom validation rules.\nSOURCE: https://github.com/dry-rb/dry-validation/blob/main/docsite/source/rules.html.md#2025-04-12_snippet_19\n\nLANGUAGE: ruby\nCODE:\n```\nclass NewUserContract < Dry::Validation::Contract\n  params do\n    required(:email).value(:string)\n    optional(:phone_numbers).array(:string)\n  end\n\n  rule(:phone_numbers).each do\n    key.failure('is not valid') unless value.start_with?('00-')\n  end\nend\n\ncontract = NewUserContract.new\n\ncontract.call(email: 'jane@doe.org', phone_numbers: nil).errors.to_h\n# => {:phone_numbers=>[\"must be an array\"]}\n\ncontract.call(email: 'jane@doe.org', phone_numbers: ['00-123-456-789', nil]).errors.to_h\n# => {:phone_numbers=>{1=>[\"must be a string\"]}}\n\ncontract.call(email: 'jane@doe.org', phone_numbers: ['00-123-456-789', '987-654-321']).errors.to_h\n# => {:phone_numbers=>{1=>[\"is not valid\"]}}\n```\n\n----------------------------------------\n\nTITLE: Defining a Global Email Format Validation Macro in Ruby\nDESCRIPTION: This snippet demonstrates how to define a global macro for validating email format using Dry::Validation.register_macro. The macro checks if a value matches an email regex pattern and adds a failure message if it doesn't.\nSOURCE: https://github.com/dry-rb/dry-validation/blob/main/docsite/source/macros.html.md#2025-04-12_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nDry::Validation.register_macro(:email_format) do\n  unless /\\A[\\w+\\-.]+@[a-z\\d\\-]+(\\.[a-z\\d\\-]+)*\\.[a-z]+\\z/i.match?(value)\n    key.failure('not a valid email format')\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Schema without Coercion in Ruby\nDESCRIPTION: Demonstrates how to define a basic validation schema without data coercion using the schema method. The schema validates email as string and age as integer.\nSOURCE: https://github.com/dry-rb/dry-validation/blob/main/docsite/source/schemas.html.md#2025-04-12_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nclass NewUserContract < Dry::Validation::Contract\n  schema do\n    required(:email).value(:string)\n    required(:age).value(:integer)\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Defining External Dependencies in a dry-validation Contract\nDESCRIPTION: Shows how to define a contract with an external address validation dependency using the option method provided by dry-initializer. The contract validates that an address is valid by using the injected address validator service.\nSOURCE: https://github.com/dry-rb/dry-validation/blob/main/docsite/source/external-dependencies.html.md#2025-04-12_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nclass NewUserContract < Dry::Validation::Contract\n  option :address_validator\n\n  params do\n    required(:address).filled(:string)\n  end\n\n  rule(:address) do\n    key.failure(\"invalid address\") unless address_validator.valid?(values[:address])\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Pattern Matching with Monads in dry-validation\nDESCRIPTION: Demonstrates using the monads extension with dry-validation for cleaner pattern matching syntax. Includes a complete example of a CreatePerson service class using Success/Failure monads.\nSOURCE: https://github.com/dry-rb/dry-validation/blob/main/docsite/source/pattern-matching.html.md#2025-04-12_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'dry/validation'\nrequire 'dry/monads'\n\nDry::Validation.load_extensions(:monads)\n\nclass CreatePerson\n  include Dry::Monads[:result]\n\n  class Contract < Dry::Validation::Contract\n    params do\n      required(:first_name).filled(:string)\n      required(:last_name).filled(:string)\n    end\n  end\n\n  attr_reader :repo\n\n  def initialize(repo)\n    @repo = repo\n  end\n\n  def call(input)\n    case contract.(input).to_monad\n    in Success(first_name:, last_name:)\n      Success(repo.create(first_name, last_name))\n    in Failure(result)\n      Failure(result.errors.to_h)\n    end\n  end\n\n  def contract\n    @contract ||= Contract.new\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Defining a Rule with Multiple Key Dependencies (Ruby)\nDESCRIPTION: Demonstrates how to define a rule that depends on multiple input keys. This example validates that an end_date comes after a start_date.\nSOURCE: https://github.com/dry-rb/dry-validation/blob/main/docsite/source/rules.html.md#2025-04-12_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nclass EventContract < Dry::Validation::Contract\n  params do\n    required(:start_date).value(:date)\n    required(:end_date).value(:date)\n  end\n\n  rule(:end_date, :start_date) do\n    key.failure('must be after start date') if values[:end_date] < values[:start_date]\n  end\nend\n\ncontract = EventContract.new\n\ncontract.call(start_date: Date.today, end_date: Date.today - 1).errors.to_h\n# => {:end_date=>[\"must be after start date\"]}\n```\n\n----------------------------------------\n\nTITLE: Re-using Multiple Schemas in Ruby\nDESCRIPTION: Demonstrates how to combine and reuse multiple existing schemas when defining a new contract.\nSOURCE: https://github.com/dry-rb/dry-validation/blob/main/docsite/source/schemas.html.md#2025-04-12_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\nrequire \"dry/validation\"\n\nAddressSchema = Dry::Schema.Params do\n  required(:country).value(:string)\n  required(:zipcode).value(:string)\n  required(:street).value(:string)\nend\n\nContactSchema = Dry::Schema.Params do\n  required(:email).value(:string) \n  required(:mobile).value(:string)\nend\n\nclass NewUserContract < Dry::Validation::Contract\n  params(AddressSchema, ContactSchema) do\n    required(:name).value(:string)\n    required(:age).value(:integer) \n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Using Message Identifiers with Localization in dry-validation Ruby Contract\nDESCRIPTION: Example showing how to use message identifiers with localization instead of hardcoded strings. The rule references the message by its identifier (:invalid) which is then looked up in the configured messages file.\nSOURCE: https://github.com/dry-rb/dry-validation/blob/main/docsite/source/messages.html.md#2025-04-12_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nclass NewUserContract < Dry::Validation::Contract\n  params do\n    required(:age).value(:integer)\n  end\n\n  rule(:age) do\n    key.failure(:invalid) if values[:age] < 18\n  end\nend\n\ncontract = NewUserContract.new\n\ncontract.call(age: 17).errors.to_h\n# => {:age=>[\"must be greater than 18\"]}\n```\n\n----------------------------------------\n\nTITLE: Configuring a Validation Macro with i18n Integration in Ruby\nDESCRIPTION: This snippet shows how to configure a validation macro to use i18n for error messages. It configures the messages backend to use i18n and sets the key failure with a symbol that corresponds to the i18n translation key.\nSOURCE: https://github.com/dry-rb/dry-validation/blob/main/docsite/source/macros.html.md#2025-04-12_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nclass ApplicationContract < Dry::Validation::Contract\n  config.messages.backend = :i18n\n\n  register_macro(:email_format) do\n    unless /\\A[\\w+\\-.]+@[a-z\\d\\-]+(\\.[a-z\\d\\-]+)*\\.[a-z]+\\z/i.match?(value)\n      key.failure(:email_format)\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Instantiating a Contract with External Dependencies\nDESCRIPTION: Demonstrates how to instantiate a dry-validation contract while injecting the required external dependencies. This example shows passing an address validator service to the contract's constructor.\nSOURCE: https://github.com/dry-rb/dry-validation/blob/main/docsite/source/external-dependencies.html.md#2025-04-12_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nnew_user_contract = NewUserContract.new(address_validator: your_address_validator)\n\nnew_user_contract.call(address: \"Some Street 15/412\")\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Rule in a dry-validation Contract (Ruby)\nDESCRIPTION: Shows how to define a contract with a schema and a rule that validates whether a start date is in the future. The rule will only be executed if the schema validation passes.\nSOURCE: https://github.com/dry-rb/dry-validation/blob/main/docsite/source/rules.html.md#2025-04-12_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nclass EventContract < Dry::Validation::Contract\n  params do\n    required(:start_date).value(:date)\n  end\n\n  rule(:start_date) do\n    key.failure('must be in the future') if value <= Date.today\n  end\nend\n\ncontract = EventContract.new\n```\n\n----------------------------------------\n\nTITLE: Using Predicates as Macros in dry-validation Contract in Ruby\nDESCRIPTION: This example shows how to use the Predicates as macros extension in a Contract. It defines an AgeContract that validates if the age is greater than or equal to 18 using the gteq? predicate as a macro.\nSOURCE: https://github.com/dry-rb/dry-validation/blob/main/docsite/source/extensions.html.md#2025-04-12_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nclass AgeContract < ApplicationContract\n  schema do\n    required(:age).filled(:integer)\n  end\n\n  rule(:age).validate(gteq?: 18)\nend\n\nAgeContract.new.(age: 17).errors.first.text\n# => 'must be greater than or equal to 18'\n```\n\n----------------------------------------\n\nTITLE: Defining Params Schema with Coercion in Ruby\nDESCRIPTION: Shows how to define a schema with params-specific coercion for HTTP parameters validation.\nSOURCE: https://github.com/dry-rb/dry-validation/blob/main/docsite/source/schemas.html.md#2025-04-12_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nclass NewUserContract < Dry::Validation::Contract\n  params do\n    required(:email).value(:string)\n    required(:age).value(:integer)\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Setting Key Failures in Rules (Ruby)\nDESCRIPTION: Demonstrates different ways to set failure messages that are associated with specific keys in the input data.\nSOURCE: https://github.com/dry-rb/dry-validation/blob/main/docsite/source/rules.html.md#2025-04-12_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\nrule(:start_date) do\n  key.failure('oops')\n  # ^ is the equivalent of\n  key(:start_date).failure('oops')\nend\n```\n\n----------------------------------------\n\nTITLE: Using Custom Types in Schema Definition\nDESCRIPTION: Shows how to define and use custom types within a schema for specialized data coercion.\nSOURCE: https://github.com/dry-rb/dry-validation/blob/main/docsite/source/schemas.html.md#2025-04-12_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\nmodule Types\n  include Dry::Types()\n\n  StrippedString = Types::String.constructor(&:strip)\nend\n\nclass NewUserContract < Dry::Validation::Contract\n  params do\n    required(:email).value(Types::StrippedString)\n    required(:age).value(:integer)\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Checking for Other Rule Errors (Ruby)\nDESCRIPTION: Shows how to check for errors in other rules by passing an explicit key to rule_error?, allowing rules to depend on each other's validation results.\nSOURCE: https://github.com/dry-rb/dry-validation/blob/main/docsite/source/rules.html.md#2025-04-12_snippet_14\n\nLANGUAGE: ruby\nCODE:\n```\nclass PersonContract < Dry::Validation::Contract\n  schema do\n    required(:email).filled(:string)\n    required(:name).filled(:string)\n  end\n\n  rule(:name) do\n    key.failure('name rule error')\n  end\n\n  rule(:email) do\n    key.failure('email rule error') if rule_error?(:name)\n  end\nend\n\nPersonContract.new.call(email: 'bar', name: 'foo').errors.to_h\n# {name: ['name rule error'], email: ['email rule error']}\n```\n\n----------------------------------------\n\nTITLE: Using Key Paths in Rule Definitions (Ruby)\nDESCRIPTION: Shows different ways to specify key dependencies in rules using hash syntax, dot notation, and nested keys.\nSOURCE: https://github.com/dry-rb/dry-validation/blob/main/docsite/source/rules.html.md#2025-04-12_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nrule(address: :city) do ...\nrule(\"address.city\") do ...\nrule(address: [:city, :street]) do ...\n```\n\n----------------------------------------\n\nTITLE: Defining a Contract Class Email Format Validation Macro in Ruby\nDESCRIPTION: This example shows how to define a class-specific macro for email validation that is only available to a specific contract class and its descendants. It uses register_macro within a contract class definition.\nSOURCE: https://github.com/dry-rb/dry-validation/blob/main/docsite/source/macros.html.md#2025-04-12_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nclass ApplicationContract < Dry::Validation::Contract\n  register_macro(:email_format) do\n    unless /\\A[\\w+\\-.]+@[a-z\\d\\-]+(\\.[a-z\\d\\-]+)*\\.[a-z]+\\z/i.match?(value)\n      key.failure('not a valid email format')\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing a Parameterized Validation Macro with Options in Ruby\nDESCRIPTION: This code demonstrates creating a parameterized macro called min_size that accepts arguments. It accesses the arguments through the macro parameter to dynamically create a validation that checks if an array has at least a specified number of elements.\nSOURCE: https://github.com/dry-rb/dry-validation/blob/main/docsite/source/macros.html.md#2025-04-12_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\nclass ApplicationContract < Dry::Validation::Contract\n  register_macro(:min_size) do |macro:|\n    min = macro.args[0]\n    key.failure(\"must have at least #{min} elements\") unless value.size >= min\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Basic Pattern Matching with dry-validation Contract\nDESCRIPTION: Demonstrates basic pattern matching on a PersonContract that validates first and last name fields. Shows how to match successful and failed validation results using Ruby's pattern matching syntax.\nSOURCE: https://github.com/dry-rb/dry-validation/blob/main/docsite/source/pattern-matching.html.md#2025-04-12_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nclass PersonContract < Dry::Validation::Contract\n  params do\n    required(:first_name).filled(:string)\n    required(:last_name).filled(:string)\n  end\nend\n\ncontract = PersonContract.new\n\ncase contract.('first_name' => 'John', 'last_name' => 'Doe')\nin { first_name:, last_name: } => result if result.success?\n  puts \"Hello #{first_name} #{last_name}\"\nin _ => result\n  puts \"Invalid input: #{result.errors.to_h}\"\nend\n```\n\n----------------------------------------\n\nTITLE: Using Monads Extension with dry-validation Contract in Ruby\nDESCRIPTION: This example demonstrates how to use the Monads extension with a dry-validation Contract. It shows how to create a contract, validate input, and use the monad API for handling the result.\nSOURCE: https://github.com/dry-rb/dry-validation/blob/main/docsite/source/extensions.html.md#2025-04-12_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nclass MyContract < Dry::Validation::Contract\n  params do\n    required(:name).filled(:string)\n  end\nend\n\nmy_contract = MyContract.new\n\nmy_contract.(name: \"\")\n  .to_monad\n  .fmap { |r| puts \"passed: #{r.to_h.inspect}\" }\n  .or   { |r| puts \"failed: #{r.errors.to_h.inspect}\" }\n```\n\n----------------------------------------\n\nTITLE: Setting Base Failures in Rules (Ruby)\nDESCRIPTION: Demonstrates how to add failures that are not associated with specific keys but with the whole input. This example sets a base failure when events are created on weekends.\nSOURCE: https://github.com/dry-rb/dry-validation/blob/main/docsite/source/rules.html.md#2025-04-12_snippet_7\n\nLANGUAGE: ruby\nCODE:\n```\nclass EventContract < Dry::Validation::Contract\n  option :today, default: Date.method(:today)\n\n  params do\n    required(:start_date).value(:date)\n    required(:end_date).value(:date)\n  end\n\n  rule do\n    if today.saturday? || today.sunday?\n      base.failure('creating events is allowed only on weekdays')\n    end\n  end\nend\n\ncontract = EventContract.new\n```\n\n----------------------------------------\n\nTITLE: Using Rules Context to Share Data Between Rules (Ruby)\nDESCRIPTION: Shows how to use the rules context to share data between rules or return data in validation results, such as data fetched from a database.\nSOURCE: https://github.com/dry-rb/dry-validation/blob/main/docsite/source/rules.html.md#2025-04-12_snippet_16\n\nLANGUAGE: ruby\nCODE:\n```\nclass UpdateUserContract < Dry::Validation::Contract\n  option :user_repo, optional: true\n\n  params do\n    required(:user_id).filled(:string)\n  end\n\n  rule(:user_id) do |context:|\n    context[:user] ||= user_repo.find(value)\n    key.failure(:not_found) unless context[:user]\n  end\nend\n\ncontract = UpdateUserContract.new(user_repo: UserRepo.new)\ncontract.call(user_id: 42).context.each.to_h\n# => {user: #<User id: 42>}\n```\n\n----------------------------------------\n\nTITLE: Inheriting Contract Configuration in Ruby\nDESCRIPTION: Demonstrates how Contract configuration is inherited when classes extend a base contract class. The child class inherits all configuration values from the parent.\nSOURCE: https://github.com/dry-rb/dry-validation/blob/main/docsite/source/configuration.html.md#2025-04-12_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nclass UserContract < ApplicationContract\nend\n\nUserContract.config.messages.default_locale\n# :pl\n```\n\n----------------------------------------\n\nTITLE: Using a Parameterized Validation Macro in a Contract Rule in Ruby\nDESCRIPTION: This snippet demonstrates how to use a parameterized macro in a validation rule. It applies the min_size macro to the phone_numbers field with a parameter of 1, ensuring the array has at least one element.\nSOURCE: https://github.com/dry-rb/dry-validation/blob/main/docsite/source/macros.html.md#2025-04-12_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\nclass NewUserContract < ApplicationContract\n  params do\n    required(:phone_numbers).value(:array)\n  end\n\n  rule(:phone_numbers).validate(min_size: 1)\nend\n```\n\n----------------------------------------\n\nTITLE: Using a Validation Macro in a Contract Rule in Ruby\nDESCRIPTION: This snippet shows how to apply a previously defined macro to a validation rule using the Rule#validate method. It uses the email_format macro on the email field in a NewUserContract.\nSOURCE: https://github.com/dry-rb/dry-validation/blob/main/docsite/source/macros.html.md#2025-04-12_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nclass NewUserContract < ApplicationContract\n  params do\n    required(:email).filled(:string)\n  end\n\n  rule(:email).validate(:email_format)\nend\n```\n\n----------------------------------------\n\nTITLE: Passing Initial Context to Contracts (Ruby)\nDESCRIPTION: Demonstrates how to pass an initial context as the second argument to the contract call, avoiding the need to fetch data in the rules.\nSOURCE: https://github.com/dry-rb/dry-validation/blob/main/docsite/source/rules.html.md#2025-04-12_snippet_17\n\nLANGUAGE: ruby\nCODE:\n```\nuser = UserRepo.new.find(42)\ncontract = UpdateUserContract.new\ncontract.call({user_id: 42}, user: user).context.each.to_h\n# => {user: #<User id: 42>}\n```\n\n----------------------------------------\n\nTITLE: Using Basic Schema Contract in Ruby\nDESCRIPTION: Shows how to use the basic schema contract to validate input data and handle validation results and errors.\nSOURCE: https://github.com/dry-rb/dry-validation/blob/main/docsite/source/schemas.html.md#2025-04-12_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\ncontract = NewUserContract.new\n\nresult = contract.call(unexpected: :reality, age: 21)\n# => #<Dry::Validation::Result{:age=>21} errors={:email=>[\"is missing\"]}>\n\nresult.to_h\n# => {:age=>21}\n\nresult.errors.to_h\n# => {:email=>[\"is missing\"]}\n```\n\n----------------------------------------\n\nTITLE: Setting Explicit Message Strings in dry-validation Ruby Contract\nDESCRIPTION: Example of creating a validation contract that sets an explicit message string for age validation. The rule checks if age is less than 18 and adds a failure message to the key if the condition is met.\nSOURCE: https://github.com/dry-rb/dry-validation/blob/main/docsite/source/messages.html.md#2025-04-12_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nclass NewUserContract < Dry::Validation::Contract\n  params do\n    required(:age).value(:integer)\n  end\n\n  rule(:age) do\n    key.failure('must be greater than 18') if values[:age] < 18\n  end\nend\n\ncontract = NewUserContract.new\n\ncontract.call(age: 17).errors.to_h\n# => {:age=>[\"must be greater than 18\"]}\n```\n\n----------------------------------------\n\nTITLE: Reading Rule Values in Different Formats (Ruby)\nDESCRIPTION: Shows how to use the value method to access the value under rule's default key, supporting simple keys, nested keys, and multiple values.\nSOURCE: https://github.com/dry-rb/dry-validation/blob/main/docsite/source/rules.html.md#2025-04-12_snippet_9\n\nLANGUAGE: ruby\nCODE:\n```\nrule(:start_date) do\n  value\n  # returns values[:start_date]\nend\n\nrule(date: :start) do\n  value\n  # returns values[:date][:start]\nend\n\nrule(dates: [:start, :stop]) do\n  value\n  # returns an array: [values[:dates][:start], values[:dates][:stop]]\nend\n```\n\n----------------------------------------\n\nTITLE: Accessing and Setting Contract Configuration in Ruby\nDESCRIPTION: Shows how to access the config object in a dry-validation Contract class and set configuration values. This example demonstrates setting the default locale for validation messages.\nSOURCE: https://github.com/dry-rb/dry-validation/blob/main/docsite/source/configuration.html.md#2025-04-12_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nclass ApplicationContract < Dry::Validation::Contract\n  config.messages.default_locale = :pl\nend\n```\n\n----------------------------------------\n\nTITLE: Custom YAML Configuration Example for Validation Messages\nDESCRIPTION: Shows a YAML file structure for custom validation messages. This example defines messages under a custom namespace 'my_app' with 'errors' as a sub-namespace.\nSOURCE: https://github.com/dry-rb/dry-validation/blob/main/docsite/source/configuration.html.md#2025-04-12_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n# config/errors.yml\nen:\n  my_app:\n    errors:\n      taken: 'is already taken'\n```\n\n----------------------------------------\n\nTITLE: Adding Meta-data to Messages in dry-validation Ruby Contract\nDESCRIPTION: Example demonstrating how to add additional meta-data to validation failure messages using a hash with a :text key. This approach allows including arbitrary data like error codes alongside the message text.\nSOURCE: https://github.com/dry-rb/dry-validation/blob/main/docsite/source/messages.html.md#2025-04-12_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nclass NewUserContract < Dry::Validation::Contract\n  params do\n    required(:age).value(:integer)\n  end\n\n  rule(:age) do\n    key.failure(text: 'must be greater than 18', code: 123) if values[:age] < 18\n  end\nend\n\ncontract = NewUserContract.new\n\ncontract.call(age: 17).errors.to_h\n# => {:age=>[{:text=>\"must be greater than 18\", :code=>123}]}\n```\n\n----------------------------------------\n\nTITLE: Complex Contact Array Validation with Index Access in Ruby\nDESCRIPTION: Contract that validates an array of contact hashes with name, email and phone fields. Demonstrates using the index parameter to generate specific error locations and custom email validation.\nSOURCE: https://github.com/dry-rb/dry-validation/blob/main/docsite/source/rules.html.md#2025-04-12_snippet_20\n\nLANGUAGE: ruby\nCODE:\n```\nclass PropsContract < Dry::Validation::Contract\n  params do\n    required(:contacts).value(:array, min_size?: 1).each do\n      hash do\n        required(:name).filled(:string)\n        required(:email).filled(:string)\n        required(:phone).filled(:string)\n      end\n    end\n  end\n\n  rule(:contacts).each do |index:|\n    key([:contacts, :email, index]).failure('email not valid') unless value[:email].include?('@')\n  end\nend\n\ncontract = PropsContract.new\n\ncontract.call(\n  contacts: [\n    { name: 'Jane', email: 'jane@doe.org', phone: '123' },\n    { name: 'John', email: 'oops', phone: '123' }\n  ]\n).errors.to_h\n# => {:contacts=>{:email=>{1=>[\"email not valid\"]}}}\n```\n\n----------------------------------------\n\nTITLE: Checking for Value Presence in Rules (Ruby)\nDESCRIPTION: Demonstrates using the key? method to check if a value is present before validating it, useful for rules that depend on optional keys.\nSOURCE: https://github.com/dry-rb/dry-validation/blob/main/docsite/source/rules.html.md#2025-04-12_snippet_10\n\nLANGUAGE: ruby\nCODE:\n```\nclass NewUserContract < Dry::Validation::Contract\n  params do\n    required(:email).value(:string)\n    optional(:login).value(:string)\n    optional(:password).value(:string)\n  end\n\n  rule(:password) do\n    key.failure('password is required') if key? && values[:login] && value.length < 12\n  end\nend\n\ncontract = NewUserContract.new\n\ncontract.call(email: 'jane@doe.org', login: 'jane', password: \"\").errors.to_h\n# => {:password=>[\"password is required\"]}\n```\n\n----------------------------------------\n\nTITLE: Configuring i18n Translation for Validation Macros in YAML\nDESCRIPTION: This YAML configuration demonstrates how to set up internationalization for validation macro error messages. It defines an error message for the email_format macro under the dry_validation.errors namespace.\nSOURCE: https://github.com/dry-rb/dry-validation/blob/main/docsite/source/macros.html.md#2025-04-12_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nen:\n  dry_validation:\n    errors:\n      email_format: \"not a valid email format\"\n```\n\n----------------------------------------\n\nTITLE: Pattern Matching with Context Values in dry-validation\nDESCRIPTION: Shows how to use pattern matching with a contract that includes context values. The AddressContract example demonstrates matching against both the validation output and context hash as a 2-value tuple.\nSOURCE: https://github.com/dry-rb/dry-validation/blob/main/docsite/source/pattern-matching.html.md#2025-04-12_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nclass AddressContract < Dry::Validation::Contract\n  option :address_repo\n\n  params do\n    required(:address).filled(:string)\n  end\n\n  rule(:address) do |context:|\n    address = address_repo.find(value)\n    context[:address] = address if address\n  end\nend\n\ncontract = AddressContract.new(address_repo: AddressRepo.new)\n\ncase contract.('name' => 'John Doe', 'address' => 'Pedro Moreno 10, Ciudad de México')\nin [{ name: }, { address: }] => result if result.success?\n  # adding person to existing address\nin { name:, address: } => result if result.success?\n  # adding person to new address\nelse\n  # showing errors\nend\n```\n\n----------------------------------------\n\nTITLE: Enabling Hints Extension for dry-validation in Ruby\nDESCRIPTION: This snippet shows how to enable the Hints extension for dry-validation. This extension is implemented in dry-schema and enables hints in Contracts.\nSOURCE: https://github.com/dry-rb/dry-validation/blob/main/docsite/source/extensions.html.md#2025-04-12_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'dry/validation'\n\nDry::Validation.load_extensions(:hints)\n```\n\n----------------------------------------\n\nTITLE: Enabling Predicates as Macros Extension for dry-validation in Ruby\nDESCRIPTION: This snippet demonstrates how to enable the Predicates as macros extension and import predicates as macros in a base Contract class. It allows using dry-logic predicates as validation rule macros.\nSOURCE: https://github.com/dry-rb/dry-validation/blob/main/docsite/source/extensions.html.md#2025-04-12_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'dry/validation'\n\nDry::Validation.load_extensions(:predicates_as_macros)\n\nclass ApplicationContract < Dry::Validation::Contract\n  import_predicates_as_macros\nend\n```\n\n----------------------------------------\n\nTITLE: Enabling Monads Extension for dry-validation in Ruby\nDESCRIPTION: This snippet shows how to enable the Monads extension for dry-validation, which makes Dry::Validation::Result objects compatible with dry-monads.\nSOURCE: https://github.com/dry-rb/dry-validation/blob/main/docsite/source/extensions.html.md#2025-04-12_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'dry/validation'\n\nDry::Validation.load_extensions(:monads)\n```\n\n----------------------------------------\n\nTITLE: Configuring Translated Key Names in YAML for dry-validation\nDESCRIPTION: YAML configuration for defining human-readable names for validation keys. This example maps the 'name' key to 'First name' for use with the :full option in error messages.\nSOURCE: https://github.com/dry-rb/dry-validation/blob/main/docsite/source/messages.html.md#2025-04-12_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nen:\n  dry_validation:\n    rules:\n      name: \"First name\"\n```\n\n----------------------------------------\n\nTITLE: Checking for Schema Errors in Rules (Ruby)\nDESCRIPTION: Shows how to use schema_error? to check if the schema has an error for a given key, allowing rules to add additional errors based on schema validation results.\nSOURCE: https://github.com/dry-rb/dry-validation/blob/main/docsite/source/rules.html.md#2025-04-12_snippet_12\n\nLANGUAGE: ruby\nCODE:\n```\nclass PersonContract < Dry::Validation::Contract\n  schema do\n    required(:email).filled(:string)\n    required(:name).filled(:string)\n  end\n\n  rule(:name) do\n    key.failure('first introduce a valid email') if schema_error?(:email)\n  end\nend\n\nPersonContract.new.(email: nil, name: 'foo').errors.to_h\n# { email: ['must be a string'], name: ['first introduce a valid email'] }\n```\n\n----------------------------------------\n\nTITLE: Using key? with Explicit Key Names (Ruby)\nDESCRIPTION: Shows how to use the key? method with explicit key names for rules that have multiple keys, checking whether kilometers or miles are provided.\nSOURCE: https://github.com/dry-rb/dry-validation/blob/main/docsite/source/rules.html.md#2025-04-12_snippet_11\n\nLANGUAGE: ruby\nCODE:\n```\nclass DistanceContract < Dry::Validation::Contract\n  schema do\n    optional(:kilometers).value(:integer)\n    optional(:miles).value(:integer)\n  end\n\n  rule(:kilometers, :miles) do\n    if key?(:kilometers) && key?(:miles)\n      base.failure(\"must only contain one of: kilometers, miles\")\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Contract with Custom Messages and Namespace\nDESCRIPTION: Shows how to configure a Contract class to use a custom top-level namespace and load messages from a custom file path. This enables using organization-specific error messages.\nSOURCE: https://github.com/dry-rb/dry-validation/blob/main/docsite/source/configuration.html.md#2025-04-12_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nclass ApplicationContract < Dry::Validation::Contract\n  config.messages.top_namespace = 'my_app'\n  config.messages.load_paths << 'config/errors.yml'\nend\n```\n\n----------------------------------------\n\nTITLE: Setting Default Context on Contract Initialization (Ruby)\nDESCRIPTION: Shows how to provide a default context when initializing a contract, allowing the context to be available for all validation calls.\nSOURCE: https://github.com/dry-rb/dry-validation/blob/main/docsite/source/rules.html.md#2025-04-12_snippet_18\n\nLANGUAGE: ruby\nCODE:\n```\nuser = UserRepo.new.find(42)\ncontract = UpdateUserContract.new(default_context: {user: user})\ncontract.call(user_id: 42).context.each.to_h\n```\n\n----------------------------------------\n\nTITLE: Using the :full Option with Translated Keys in dry-validation Ruby Contract\nDESCRIPTION: Example demonstrating the use of the 'full' option to include translated key names in error messages. This approach produces more user-friendly error messages by including the human-readable field name.\nSOURCE: https://github.com/dry-rb/dry-validation/blob/main/docsite/source/messages.html.md#2025-04-12_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\nclass NewUserContract < Dry::Validation::Contract\n  params do\n    required(:name).filled(:string)\n  end\nend\n\ncontract = NewUserContract.new\n\ncontract.call(name: \"\").errors(full: true).to_h\n# => {:name=>[\"First name must be filled\"]}\n```\n\n----------------------------------------\n\nTITLE: Defining JSON Schema with Coercion in Ruby\nDESCRIPTION: Shows how to define a schema specifically for JSON data validation with appropriate coercion rules.\nSOURCE: https://github.com/dry-rb/dry-validation/blob/main/docsite/source/schemas.html.md#2025-04-12_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nclass NewUserContract < Dry::Validation::Contract\n  json do\n    required(:email).value(:string)\n    required(:age).value(:integer)\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Using Params Schema Contract in Ruby\nDESCRIPTION: Demonstrates how params schema handles coercion of string values to integers during validation.\nSOURCE: https://github.com/dry-rb/dry-validation/blob/main/docsite/source/schemas.html.md#2025-04-12_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nresult = contract.call('email' => 'jane@doe.org', 'age' => '21')\n# => #<Dry::Validation::Result{:email=>\"jane@doe.org\", :age=>21} errors={}>\n\nresult.to_h\n# => {:email=>\"jane@doe.org\", :age=>21}\n```\n\n----------------------------------------\n\nTITLE: Applying a Contract with Base Failures (Ruby)\nDESCRIPTION: Shows how base failures are represented in the errors hash with a nil key, and demonstrates an alternative API for finding base errors.\nSOURCE: https://github.com/dry-rb/dry-validation/blob/main/docsite/source/rules.html.md#2025-04-12_snippet_8\n\nLANGUAGE: ruby\nCODE:\n```\ncontract.call(start_date: Date.today+1, end_date: Date.today+2).errors.to_h\n# => {nil=>[\"creating events is allowed only on weekdays\"]}\n\ncontract.call(start_date: Date.today+1, end_date: Date.today+2).errors.filter(:base?).map(&:to_s)\n# => [\"creating events is allowed only on weekdays\"]\n```\n\n----------------------------------------\n\nTITLE: Setting Key Failures with Custom Keys (Ruby)\nDESCRIPTION: Shows how to set failure messages that are associated with keys that differ from the ones specified in the rule definition.\nSOURCE: https://github.com/dry-rb/dry-validation/blob/main/docsite/source/rules.html.md#2025-04-12_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\nrule(:start_date) do\n  key(:event_errors).failure('oops')\nend\n```\n\n----------------------------------------\n\nTITLE: Applying a Contract with Valid Schema but Failed Rule (Ruby)\nDESCRIPTION: Shows how rules are executed when schema validation passes. When providing a date that's in the past, the rule error is returned.\nSOURCE: https://github.com/dry-rb/dry-validation/blob/main/docsite/source/rules.html.md#2025-04-12_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\ncontract.call(start_date: Date.today - 1).errors.to_h\n# => {:start_date=>[\"must be in the future\"]}\n```\n\n----------------------------------------\n\nTITLE: Applying a Contract with Invalid Input (Ruby)\nDESCRIPTION: Demonstrates how rules won't be executed if schema validation fails. When providing a non-date value to the start_date field, only schema errors are returned.\nSOURCE: https://github.com/dry-rb/dry-validation/blob/main/docsite/source/rules.html.md#2025-04-12_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\ncontract.call(start_date: 'oops').errors.to_h\n# => {:start_date=>[\"must be a date\"]}\n```\n\n----------------------------------------\n\nTITLE: Configuring Localized Messages in YAML for dry-validation\nDESCRIPTION: YAML configuration example for defining localized validation messages. This setup defines an 'invalid' message for the age rule that will be used when referencing the message by its identifier.\nSOURCE: https://github.com/dry-rb/dry-validation/blob/main/docsite/source/messages.html.md#2025-04-12_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nen:\n  dry_validation:\n    errors:\n      rules:\n        age:\n          invalid: 'must be greater than 18'\n```\n\n----------------------------------------\n\nTITLE: Defining a Contract with Rule Validation in Ruby\nDESCRIPTION: Example of creating a new user contract with a custom rule that validates login uniqueness by communicating with a database. The rule demonstrates how to add custom metadata to validation failures.\nSOURCE: https://github.com/dry-rb/dry-validation/blob/main/CHANGELOG.md#2025-04-12_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nclass NewUserContract < Dry::Validation::Contract\n  params do\n    required(:login).filled(:string)\n  end\n\n  rule(:login) do\n    key.failure(text: 'is taken', code: 123) unless db.unique?(values[:login])\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Rule Value Access\nDESCRIPTION: Shows how to access values in validation rules using various path specifications.\nSOURCE: https://github.com/dry-rb/dry-validation/blob/main/CHANGELOG.md#2025-04-12_snippet_2\n\nLANGUAGE: Ruby\nCODE:\n```\nrule(:foo) { value }\n```\n\n----------------------------------------\n\nTITLE: Checking for Current Rule Errors (Ruby)\nDESCRIPTION: Demonstrates how to use rule_error? to check if the current rule already had an error, allowing conditional error message addition.\nSOURCE: https://github.com/dry-rb/dry-validation/blob/main/docsite/source/rules.html.md#2025-04-12_snippet_13\n\nLANGUAGE: ruby\nCODE:\n```\nclass FooContract < Dry::Validation::Contract\n  schema do\n    required(:foo).filled(:string)\n  end\n\n  rule(:foo) do\n    key.failure('failure added')\n    key.failure('failure added after checking') if rule_error?\n  end\nend\n\nFooContract.new.(foo: 'foo').errors.to_h\n# { foo: ['failure added', 'failure added after checking'] }\n```\n\n----------------------------------------\n\nTITLE: Pattern Matching on Rule Values\nDESCRIPTION: Demonstrates pattern matching capability on result values introduced in version 1.4.1.\nSOURCE: https://github.com/dry-rb/dry-validation/blob/main/CHANGELOG.md#2025-04-12_snippet_1\n\nLANGUAGE: Ruby\nCODE:\n```\nvalues#[]\n```\n\n----------------------------------------\n\nTITLE: Rule Helper Example for Accessing Array Index\nDESCRIPTION: Shows how to access the current value's index in a rule block using the each method with an index parameter.\nSOURCE: https://github.com/dry-rb/dry-validation/blob/main/CHANGELOG.md#2025-04-12_snippet_0\n\nLANGUAGE: Ruby\nCODE:\n```\nrule(:foo).each do |index:|\n  # index available here\nend\n```\n\n----------------------------------------\n\nTITLE: Checking for Base Rule Errors (Ruby)\nDESCRIPTION: Demonstrates how to use base_rule_error? to check if any base rule errors have occurred, allowing conditional base error additions.\nSOURCE: https://github.com/dry-rb/dry-validation/blob/main/docsite/source/rules.html.md#2025-04-12_snippet_15\n\nLANGUAGE: ruby\nCODE:\n```\nclass EventContract < Dry::Validation::Contract\n  option :today, default: Date.method(:today)\n\n  params do\n    required(:start_date).value(:date)\n    required(:end_date).value(:date)\n  end\n\n  rule do\n    if today.saturday? || today.sunday?\n      base.failure('creating events is allowed only on weekdays')\n    end\n  end\n\n  rule do \n    base.failure('base failure added after checking') if base_rule_error?\n  end\nend\n\ncontract = EventContract.new\ncontract.call(start_date: Date.today+1, end_date: Date.today+2).errors.to_h\n# => {nil=>[\"creating events is allowed only on weekdays\", \"base failure added after checking\"]}\n```\n\n----------------------------------------\n\nTITLE: Using Contract Shortcut in Ruby\nDESCRIPTION: Example showing the shortcut method for quickly defining and instantiating a contract in one step, added in version 1.0.0.rc3.\nSOURCE: https://github.com/dry-rb/dry-validation/blob/main/CHANGELOG.md#2025-04-12_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nDry::Validation.Contract\n```\n\n----------------------------------------\n\nTITLE: Schema Definition Example - Ruby\nDESCRIPTION: Example of defining a schema using the new DSL syntax introduced in dry-validation\nSOURCE: https://github.com/dry-rb/dry-validation/blob/main/CHANGELOG.md#2025-04-12_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\nDry::Validation.Schema do\n  key(:location).schema do\n    # schema definition\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Schema Inheritance Example - Ruby\nDESCRIPTION: Example showing how to inherit rules from another schema using the new inheritance syntax\nSOURCE: https://github.com/dry-rb/dry-validation/blob/main/CHANGELOG.md#2025-04-12_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\nDry::Validation.Schema(Other) do\n  # additional rules\nend\n```\n\n----------------------------------------\n\nTITLE: Value Comparison Rule - Ruby\nDESCRIPTION: Example of using the new value comparison syntax in high-level rules\nSOURCE: https://github.com/dry-rb/dry-validation/blob/main/CHANGELOG.md#2025-04-12_snippet_7\n\nLANGUAGE: ruby\nCODE:\n```\nvalue(:foo).eql?(value(:bar))\n```\n\n----------------------------------------\n\nTITLE: Type Constrained Key Definition - Ruby\nDESCRIPTION: Example showing how to define a key with a constrained dry type\nSOURCE: https://github.com/dry-rb/dry-validation/blob/main/CHANGELOG.md#2025-04-12_snippet_8\n\nLANGUAGE: ruby\nCODE:\n```\nkey(:age, Types::Age)\n```"
  }
]