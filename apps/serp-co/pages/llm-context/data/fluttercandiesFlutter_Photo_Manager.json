[
  {
    "owner": "fluttercandies",
    "repo": "flutter_photo_manager",
    "content": "TITLE: Dart: Save Image from Uint8List\nDESCRIPTION: Saves an image to the photo library from a `Uint8List` using `PhotoManager.editor.saveImage()`. This creates a new asset in the gallery.\nSOURCE: https://github.com/fluttercandies/flutter_photo_manager/blob/main/README.md#_snippet_12\n\nLANGUAGE: dart\nCODE:\n```\nfinal Uint8List rawData = yourRawData;\n\n// Save an image to an entity from `Uint8List`.\nfinal AssetEntity? entity = await PhotoManager.editor.saveImage(\n  rawData,\n  title: 'write_your_own_title.jpg', // Affects EXIF reading.\n);\n```\n\n----------------------------------------\n\nTITLE: Dart: Get Asset Path List\nDESCRIPTION: Retrieves a list of asset paths (albums/folders) using `PhotoManager.getAssetPathList()`. The method returns a `List<AssetPathEntity>`. This example demonstrates getting all available asset paths.\nSOURCE: https://github.com/fluttercandies/flutter_photo_manager/blob/main/README.md#_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nfinal List<AssetPathEntity> paths = await PhotoManager.getAssetPathList();\n```\n\n----------------------------------------\n\nTITLE: Getting AssetPathEntity List in Dart\nDESCRIPTION: This Dart code retrieves a list of all photo albums (AssetPathEntity) using the `PhotoManager.getAssetPathList()` method. The result is a list of `AssetPathEntity` objects that can be used to access individual assets within each album.\nSOURCE: https://github.com/fluttercandies/flutter_photo_manager/blob/main/README-ZH.md#_snippet_8\n\nLANGUAGE: Dart\nCODE:\n```\nfinal List<AssetPathEntity> paths = await PhotoManager.getAssetPathList();\n```\n\n----------------------------------------\n\nTITLE: Dart: Get Assets from AssetPathEntity (Paged)\nDESCRIPTION: Retrieves a list of assets (images/videos) from an `AssetPathEntity` using pagination with `getAssetListPaged()`.  This example retrieves 80 assets starting from page 0.\nSOURCE: https://github.com/fluttercandies/flutter_photo_manager/blob/main/README.md#_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nfinal List<AssetEntity> entities = await path.getAssetListPaged(page: 0, size: 80);\n```\n\n----------------------------------------\n\nTITLE: Dart: Get Assets from AssetPathEntity (Range)\nDESCRIPTION: Retrieves a list of assets (images/videos) from an `AssetPathEntity` using a range with `getAssetListRange()`. This example retrieves assets from index 0 to 80.\nSOURCE: https://github.com/fluttercandies/flutter_photo_manager/blob/main/README.md#_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nfinal List<AssetEntity> entities = await path.getAssetListRange(start: 0, end: 80);\n```\n\n----------------------------------------\n\nTITLE: Fetching Assets with Pagination\nDESCRIPTION: This code snippet shows how to retrieve a list of assets using pagination. It uses the `getAssetListPaged` method on an `AssetPathEntity` object to fetch assets in a specific page and size. The `page` parameter specifies the page number (starting from 0), and the `size` parameter specifies the number of assets to retrieve per page.\nSOURCE: https://github.com/fluttercandies/flutter_photo_manager/blob/main/README-ZH.md#_snippet_10\n\nLANGUAGE: dart\nCODE:\n```\nfinal List<AssetEntity> entities = await path.getAssetListPaged(page: 0, size: 80);\n```\n\n----------------------------------------\n\nTITLE: Dart: Get Assets from PhotoManager (Paged)\nDESCRIPTION: Retrieves a list of assets (images/videos) directly from `PhotoManager` using pagination with `PhotoManager.getAssetListPaged()`.  This example retrieves 80 assets starting from page 0.\nSOURCE: https://github.com/fluttercandies/flutter_photo_manager/blob/main/README.md#_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\nfinal List<AssetEntity> entities = await PhotoManager.getAssetListPaged(page: 0, pageCount: 80);\n```\n\n----------------------------------------\n\nTITLE: Requesting Photo Library Permissions in Dart\nDESCRIPTION: This Dart code requests photo library permissions using `PhotoManager.requestPermissionExtend()`. The code checks the returned `PermissionState` to determine if permission has been granted, is limited, or has been denied, and handles each case accordingly.\nSOURCE: https://github.com/fluttercandies/flutter_photo_manager/blob/main/README-ZH.md#_snippet_6\n\nLANGUAGE: Dart\nCODE:\n```\nfinal PermissionState ps = await PhotoManager.requestPermissionExtend();\nif (ps.isAuth) {\n  // 已获取到权限\n} else if (ps.hasAccess) {\n  // 已获取到权限（哪怕只是有限的访问权限）。\n  // iOS Android 目前都已经有了部分权限的概念。\n} else {\n  // 权限受限制（iOS）或者被拒绝，使用 `==` 能够更准确的判断是受限还是拒绝。\n  // 你可以使用 `PhotoManager.openSetting()` 打开系统设置页面进行进一步的逻辑定制。\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Assets with Range Index\nDESCRIPTION: This code snippet demonstrates how to retrieve a list of assets using a range index. It uses the `getAssetListRange` method on an `AssetPathEntity` object to fetch assets within a specified range.  The `start` parameter defines the starting index (inclusive), and the `end` parameter defines the ending index (inclusive). Both parameters are zero-based.\nSOURCE: https://github.com/fluttercandies/flutter_photo_manager/blob/main/README-ZH.md#_snippet_11\n\nLANGUAGE: dart\nCODE:\n```\nfinal List<AssetEntity> entities = await path.getAssetListRange(start: 0, end: 80);\n```\n\n----------------------------------------\n\nTITLE: Dart: Save Video from File\nDESCRIPTION: Saves a video to the photo library from a `File` using `PhotoManager.editor.saveVideo()`. This creates a new video asset in the gallery.\nSOURCE: https://github.com/fluttercandies/flutter_photo_manager/blob/main/README.md#_snippet_14\n\nLANGUAGE: dart\nCODE:\n```\n// Save a video entity from `File`.\nfinal File videoFile = File('path/to/your/video.mp4');\nfinal AssetEntity? videoEntity = await PhotoManager.editor.saveVideo(\n  videoFile, // You can check whether the file is exist for better test coverage.\n  title: 'write_your_own_title.mp4',\n);\n```\n\n----------------------------------------\n\nTITLE: Fetching Assets with PhotoManager (Range)\nDESCRIPTION: This code snippet fetches assets using `PhotoManager.getAssetListRange()`, specifying a `start` and `end` index. The `start` parameter indicates the starting index (inclusive), and `end` indicates the ending index (inclusive). Both indices are zero-based.\nSOURCE: https://github.com/fluttercandies/flutter_photo_manager/blob/main/README-ZH.md#_snippet_14\n\nLANGUAGE: dart\nCODE:\n```\nfinal List<AssetEntity> entities = await PhotoManager.getAssetListRange(start: 0, end: 80);\n```\n\n----------------------------------------\n\nTITLE: Saving Image from Raw Data\nDESCRIPTION: This code demonstrates how to save an image from raw data (Uint8List) to the device's gallery using `PhotoManager.editor.saveImage`. It requires the raw image data and a title for the image, which might affect EXIF information. The result is an `AssetEntity` representing the saved image, which can be null if the save operation fails.\nSOURCE: https://github.com/fluttercandies/flutter_photo_manager/blob/main/README-ZH.md#_snippet_16\n\nLANGUAGE: dart\nCODE:\n```\nfinal Uint8List rawData = yourRawData;\n\n// 将 `Uint8List` 保存为一张图片。\nfinal AssetEntity? entity = await PhotoManager.editor.saveImage(\n  rawData,\n  title: 'write_your_own_title.jpg', // 可能影响 EXIF 信息的读取\n);\n```\n\n----------------------------------------\n\nTITLE: Saving Video from File\nDESCRIPTION: This code snippet saves a video file to the device's gallery using `PhotoManager.editor.saveVideo`.  It requires a `File` object representing the video file and a title.  It is recommended to check for file existence before attempting to save.  The resulting `AssetEntity` will be null if saving fails.\nSOURCE: https://github.com/fluttercandies/flutter_photo_manager/blob/main/README-ZH.md#_snippet_18\n\nLANGUAGE: dart\nCODE:\n```\nfinal File videoFile = File('path/to/your/video.mp4');\nfinal AssetEntity? videoEntity = await PhotoManager.editor.saveVideo(\n  videoFile, // 可以检查文件是否存在以获得更好的测试覆盖率。\n  title: 'write_your_own_title.mp4',\n);\n```\n\n----------------------------------------\n\nTITLE: Adding Photo Manager Dependency via pub\nDESCRIPTION: This command adds the Photo Manager plugin as a dependency to your Flutter project using the `flutter pub add` command. This is the recommended approach for including the plugin.\nSOURCE: https://github.com/fluttercandies/flutter_photo_manager/blob/main/README-ZH.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nflutter pub add photo_manager\n```\n\n----------------------------------------\n\nTITLE: iOS Info.plist: Photo Library Usage Description\nDESCRIPTION: Defines the NSPhotoLibraryUsageDescription key-value in the ios/Runner/Info.plist file.  This is required for requesting permission to access the photo library on iOS.  The string value explains to the user why the app needs access to their photos.\nSOURCE: https://github.com/fluttercandies/flutter_photo_manager/blob/main/README.md#_snippet_0\n\nLANGUAGE: plist\nCODE:\n```\n<key>NSPhotoLibraryUsageDescription</key>\n<string>In order to access your photo library</string>\n```\n\n----------------------------------------\n\nTITLE: Registering and Unregistering Change Callbacks\nDESCRIPTION: This code shows how to register and unregister callbacks for asset changes using `PhotoManager.addChangeCallback` and `PhotoManager.removeChangeCallback`. It also shows how to start and stop listening for changes using `PhotoManager.startChangeNotify` and `PhotoManager.stopChangeNotify`.  Ensure you import 'package:flutter/services.dart'.\nSOURCE: https://github.com/fluttercandies/flutter_photo_manager/blob/main/README-ZH.md#_snippet_25\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter/services.dart';\n\nvoid changeNotify(MethodCall call) {\n  // 你的自定义回调。\n}\n\n/// 注册你的回调方法。\nPhotoManager.addChangeCallback(changeNotify);\n\n/// 启用事件通知订阅。\nPhotoManager.startChangeNotify();\n\n/// 移除你的回调方法。\nPhotoManager.removeChangeCallback(changeNotify);\n\n/// 取消事件通知订阅。\nPhotoManager.stopChangeNotify();\n```\n\n----------------------------------------\n\nTITLE: Creating FilterOptionGroup\nDESCRIPTION: This code creates a `FilterOptionGroup` to filter assets. It demonstrates how to set constraints on image size, video duration, and creation time.  It shows how to specify the order in which assets should be sorted.\nSOURCE: https://github.com/fluttercandies/flutter_photo_manager/blob/main/README-ZH.md#_snippet_26\n\nLANGUAGE: dart\nCODE:\n```\nfinal FilterOptionGroup filterOption = FilterOptionGroup(\n  imageOption: FilterOption(\n    sizeConstraint: SizeConstraint(\n      maxWidth: 10000,\n      maxHeight: 10000,\n      minWidth: 100,\n      minHeight: 100,\n      ignoreSize: false,\n    ),\n  ),\n  videoOption: FilterOption(\n    durationConstraint: DurationConstraint(\n      min: Duration(seconds: 1),\n      max: Duration(seconds: 30),\n      allowNullable: false,\n    ),\n  ),\n  createTimeCondition: DateTimeCondition(\n    min: DateTime(2020, 1, 1),\n    max: DateTime(2020, 12, 31),\n  ),\n  orders: [\n    OrderOption(\n      type: OrderOptionType.createDate,\n      asc: false,\n    ),\n  ],\n  /// 其他选项\n);\n```\n\n----------------------------------------\n\nTITLE: Obtaining Video from Live Photos - Dart\nDESCRIPTION: This snippet demonstrates how to obtain the video file associated with a 'Live Photo' asset. It uses methods like `getMediaUrl`, `file`, `fileWithSubtype`, `originFile`, and `originFileWithSubtype` to retrieve different types of files. It also illustrates how to convert the video file from MOV to MP4 using the `loadFile` method with specific `darwinFileType` options. Requires the `photo_manager` package.\nSOURCE: https://github.com/fluttercandies/flutter_photo_manager/blob/main/README.md#_snippet_18\n\nLANGUAGE: dart\nCODE:\n```\nfinal AssetEntity entity = livePhotoEntity;\n\n// To play Live Photo's video.\nfinal String? mediaUrl = await entity.getMediaUrl();\n\n// Get files for normal displays like thumbnails.\nfinal File? imageFile = await entity.file;\nfinal File? videoFile = await entity.fileWithSubtype;\n\n// Get files for the raw displays like detail preview.\nfinal File? originImageFile = await entity.originFile;\nfinal File? originVideoFile = await entity.originFileWithSubtype;\n\n// Additionally, you can convert Live Photo's (on iOS) video file\n// from `mov` to `mp4` using:\nfinal File? convertedFile = await entity.loadFile(\n  isOriginal: true,\n  withSubtye: true,\n  darwinFileType: PMDarwinAVFileType.mp4,\n);\n\n```\n\n----------------------------------------\n\nTITLE: Preloading Thumbnails in Flutter\nDESCRIPTION: This code snippet demonstrates how to preload thumbnails using `PhotoCachingManager.requestCacheAssets` in Flutter. It allows pre-caching of asset thumbnails for faster display, particularly useful in app preview scenarios. It also includes a method to stop the preloading process using `PhotoCachingManager().cancelCacheRequest`.\nSOURCE: https://github.com/fluttercandies/flutter_photo_manager/blob/main/README-ZH.md#_snippet_33\n\nLANGUAGE: dart\nCODE:\n```\nPhotoCachingManager().requestCacheAssets(assets: assets, option: option);\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Filter with SQL - Dart\nDESCRIPTION: This snippet illustrates how to create a custom filter using SQL-like syntax through the `CustomFilter.sql` method. It constructs a filter condition based on the width and height of the assets, and specifies the ordering based on the creation date using `OrderByItem`. Requires importing the `photo_manager` package.\nSOURCE: https://github.com/fluttercandies/flutter_photo_manager/blob/main/README.md#_snippet_21\n\nLANGUAGE: dart\nCODE:\n```\nCustomFilter createFilter() {\n  return CustomFilter.sql(\n    where: '${CustomColumns.base.width} > 100 AND ${CustomColumns.base.height} > 200',\n    orderBy: [OrderByItem.desc(CustomColumns.base.createDate)],\n  );\n}\n\n```\n\n----------------------------------------\n\nTITLE: Fetching Asset by ID\nDESCRIPTION: This code snippet demonstrates how to retrieve an `AssetEntity` using its unique ID. The `AssetEntity.fromId(id)` method is used to fetch the asset based on the provided ID.  The ID corresponds to the `_id` field in Android's MediaStore or the `localIdentifier` field in iOS/macOS's PHAsset.\nSOURCE: https://github.com/fluttercandies/flutter_photo_manager/blob/main/README-ZH.md#_snippet_15\n\nLANGUAGE: dart\nCODE:\n```\nfinal AssetEntity? asset = await AssetEntity.fromId(id);\n```\n\n----------------------------------------\n\nTITLE: Cache File Deletion on iOS with Dart\nDESCRIPTION: This Dart snippet demonstrates how to handle an AssetEntity's file and delete the cached file on iOS after usage. It first obtains the file from the entity, handles the file using a custom method, and then deletes the file synchronously if the platform is iOS. This is useful for managing disk space, especially on iOS where the original files are not directly accessible.\nSOURCE: https://github.com/fluttercandies/flutter_photo_manager/blob/main/README.md#_snippet_23\n\nLANGUAGE: Dart\nCODE:\n```\nimport 'dart:io';\n\nFuture<void> useEntity(AssetEntity entity) async {\n  File? file;\n  try {\n    file = await entity.file;\n    await handleFile(file!); // Custom method to handle the obtained file.\n  } finally {\n    if (Platform.isIOS) {\n      file?.deleteSync(); // Delete it once the process has done.\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Delete Entities with Dart\nDESCRIPTION: This Dart snippet shows how to delete assets completely from the device using PhotoManager.editor.deleteWithIds. It returns a list of deleted IDs or an empty list if the deletion fails. It's crucial to use this with caution due to the irreversible nature of the operation.\nSOURCE: https://github.com/fluttercandies/flutter_photo_manager/blob/main/README.md#_snippet_28\n\nLANGUAGE: Dart\nCODE:\n```\n// Deleted IDs will returned, if it fails, the result will be an empty list.\nfinal List<String> result = await PhotoManager.editor.deleteWithIds(\n  <String>[entity.id],\n);\n```\n\n----------------------------------------\n\nTITLE: Removing Assets from Album in Flutter\nDESCRIPTION: This code demonstrates how to remove a single asset or a batch of assets from a specific album using the `flutter_photo_manager` plugin. It requires an accessible `AssetPathEntity` and the `AssetEntity` you want to remove. The asset will only be removed from the album, not deleted from the device.\nSOURCE: https://github.com/fluttercandies/flutter_photo_manager/blob/main/README.md#_snippet_35\n\nLANGUAGE: dart\nCODE:\n```\n// Make sure your path entity is accessible.\nfinal AssetPathEntity pathEntity = accessiblePath;\nfinal AssetEntity entity = yourEntity;\nfinal List<AssetEntity> entities = <AssetEntity>[yourEntity, anotherEntity];\n// Remove single asset from the album.\n// It'll call the list method as the implementation.\nawait PhotoManager.editor.darwin.removeInAlbum(\n  yourEntity,\n  accessiblePath,\n);\n// Remove assets from the album in batches.\nawait PhotoManager.editor.darwin.removeAssetsInAlbum(\n  entities,\n  accessiblePath,\n);\n```\n\n----------------------------------------\n\nTITLE: Remove Non-Existent Assets on Android with Dart\nDESCRIPTION: This Dart snippet shows how to remove all non-existent asset records from the Android MediaStore using PhotoManager.editor.android.removeAllNoExistsAsset. This operation is resource-intensive and should be awaited. It addresses abnormal behaviors caused by external file operations.\nSOURCE: https://github.com/fluttercandies/flutter_photo_manager/blob/main/README.md#_snippet_31\n\nLANGUAGE: Dart\nCODE:\n```\nawait PhotoManager.editor.android.removeAllNoExistsAsset();\n```\n\n----------------------------------------\n\nTITLE: Defining PMDarwinPathFilter for iOS/macOS\nDESCRIPTION: This code snippet demonstrates how to define a `PMDarwinPathFilter` to filter asset paths on iOS and macOS based on the asset collection type and subtype.  It shows how to configure the `pathTypeList` and `pathSubTypeList` with the desired types and subtypes. These lists correspond to the native iOS/macOS PHAssetCollectionType and PHAssetCollectionSubtype enums, respectively.  It is important to configure the lists to match your desired filters, otherwise no assets may be returned.\nSOURCE: https://github.com/fluttercandies/flutter_photo_manager/blob/main/README-ZH.md#_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\nfinal List<PMDarwinAssetCollectionType> pathTypeList = []; // 配置为你需要的类型\nfinal List<PMDarwinAssetCollectionSubtype> pathSubTypeList = []; // 配置为你需要的子类型\nfinal darwinPathFilterOption = PMDarwinPathFilter(\n      type: pathTypeList,\n      subType: pathSubTypeList,\n    );\nPMPathFilter pathFilter = PMPathFilter();\n```\n\n----------------------------------------\n\nTITLE: Dart: PMDarwinPathFilter usage\nDESCRIPTION: Demonstrates how to use the `PMDarwinPathFilter` to filter asset paths on iOS and macOS, based on the `PHAssetCollectionType` and `PHAssetCollectionSubtype`.\nSOURCE: https://github.com/fluttercandies/flutter_photo_manager/blob/main/README.md#_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nfinal List<PMDarwinAssetCollectionType> pathTypeList = []; // use your need type\nfinal List<PMDarwinAssetCollectionSubtype> pathSubTypeList = []; // use your need type\nfinal darwinPathFilterOption = PMDarwinPathFilter(\n      type: pathTypeList,\n      subType: pathSubTypeList,\n    );\nPMPathFilter pathFilter = PMPathFilter();\n```\n\n----------------------------------------\n\nTITLE: Create Folder on iOS/macOS with Dart\nDESCRIPTION: This Dart snippet shows how to create a folder on iOS or macOS using PhotoManager.editor.darwin.createFolder. The parent parameter specifies the parent folder, which can be null for the root path or another accessible folder.\nSOURCE: https://github.com/fluttercandies/flutter_photo_manager/blob/main/README.md#_snippet_33\n\nLANGUAGE: Dart\nCODE:\n```\nPhotoManager.editor.darwin.createFolder(\n  name,\n  parent: parent, // The value should be null, the root path or other accessible folders.\n);\n```\n\n----------------------------------------\n\nTITLE: Creating an Album (iOS/macOS Only) in Flutter\nDESCRIPTION: This code snippet demonstrates how to create an album using `PhotoManager.editor.darwin.createAlbum` on iOS or macOS. The parent parameter should be null for the root directory or another accessible folder.\nSOURCE: https://github.com/fluttercandies/flutter_photo_manager/blob/main/README-ZH.md#_snippet_40\n\nLANGUAGE: dart\nCODE:\n```\nPhotoManager.editor.darwin.createAlbum(\n  name,\n  parent: parent, // 应为 null、根目录或者其他可访问的文件夹\n);\n```\n\n----------------------------------------\n\nTITLE: Moving Assets to Another Album (Android Only) in Flutter\nDESCRIPTION: This code snippet demonstrates how to move an asset to another album using `PhotoManager.editor.android.moveAssetToAnother`. This is an Android-specific feature and it highlights the limitations on Android 30+ due to system restrictions. The specified `AssetPathEntity` must be accessible to the app.\nSOURCE: https://github.com/fluttercandies/flutter_photo_manager/blob/main/README-ZH.md#_snippet_36\n\nLANGUAGE: dart\nCODE:\n```\n// 确保 accessiblePath 对于当前 app 而言可以访问。\nfinal AssetPathEntity pathEntity = accessiblePath;\nfinal AssetEntity entity = yourEntity;\nawait PhotoManager.editor.android.moveAssetToAnother(\n  entity: entity,\n  target: pathEntity,\n);\n```\n\n----------------------------------------\n\nTITLE: Deleting AssetPathEntity in Flutter\nDESCRIPTION: This code snippet shows how to delete an `AssetPathEntity` using the `flutter_photo_manager` plugin. It's important to note that smart albums cannot be deleted using this method. This operation will attempt to delete the album itself, not just assets within it.\nSOURCE: https://github.com/fluttercandies/flutter_photo_manager/blob/main/README.md#_snippet_36\n\nLANGUAGE: dart\nCODE:\n```\nPhotoManager.editor.darwin.deletePath();\n```\n\n----------------------------------------\n\nTITLE: Moving Assets to Trash (Android Only) in Flutter\nDESCRIPTION: This code snippet shows how to move assets to the trash using `PhotoManager.editor.android.moveToTrash`.  This function is only supported on Android API 30+ and will throw an exception on lower API levels.\nSOURCE: https://github.com/fluttercandies/flutter_photo_manager/blob/main/README-ZH.md#_snippet_37\n\nLANGUAGE: dart\nCODE:\n```\nawait PhotoManager.editor.android.moveToTrash(list);\n```\n\n----------------------------------------\n\nTITLE: Getting Asset Count\nDESCRIPTION: This code snippet retrieves the total number of assets available using the `PhotoManager.getAssetCount()` method.  It's often used prior to fetching assets in batches via paging or range-based methods.  No dependencies are needed, just an instantiation of `PhotoManager`.\nSOURCE: https://github.com/fluttercandies/flutter_photo_manager/blob/main/README-ZH.md#_snippet_12\n\nLANGUAGE: dart\nCODE:\n```\nfinal int count = await PhotoManager.getAssetCount();\n```\n\n----------------------------------------\n\nTITLE: Move Entities to Trash on Android with Dart\nDESCRIPTION: This Dart snippet demonstrates how to move a list of entities to the trash on Android using PhotoManager.editor.android.moveToTrash. This method is only supported on Android 11 and above. It will throw an exception if called on older Android versions.\nSOURCE: https://github.com/fluttercandies/flutter_photo_manager/blob/main/README.md#_snippet_32\n\nLANGUAGE: Dart\nCODE:\n```\nawait PhotoManager.editor.android.moveToTrash(list);\n```\n\n----------------------------------------\n\nTITLE: Deleting an AssetPathEntity (iOS/macOS Only) in Flutter\nDESCRIPTION: This code snippet shows how to delete an `AssetPathEntity` using `PhotoManager.editor.darwin.deletePath`. Note that smart albums cannot be deleted.\nSOURCE: https://github.com/fluttercandies/flutter_photo_manager/blob/main/README-ZH.md#_snippet_42\n\nLANGUAGE: dart\nCODE:\n```\nPhotoManager.editor.darwin.deletePath();\n```\n\n----------------------------------------\n\nTITLE: Filtering Live Photos using CustomSqlFilter\nDESCRIPTION: This code snippet demonstrates how to filter Live Photos using a custom SQL filter. The `CustomFilter.sql` method is used to define a SQL query to filter assets. The query checks the `mediaType` and `mediaSubtypes` columns to identify Live Photos. Requires 'package:photo_manager: ^3.0.0'.\nSOURCE: https://github.com/fluttercandies/flutter_photo_manager/blob/main/README-ZH.md#_snippet_23\n\nLANGUAGE: dart\nCODE:\n```\nfinal List<AssetPathEntity> paths = await PhotoManager.getAssetPathList(\n  type: RequestType.image,\n  filterOption: CustomFilter.sql(\n  where: '${CustomColumns.base.mediaType} = 1'\n      ' AND '\n      '${CustomColumns.darwin.mediaSubtypes} & (1 << 3) = (1 << 3)',\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Filtering Live Photos\nDESCRIPTION: This code snippet demonstrates how to filter for only live photos when fetching asset paths using `PhotoManager.getAssetPathList`. It sets the `onlyLivePhotos` property in `FilterOptionGroup` to `true`. This only works for images.\nSOURCE: https://github.com/fluttercandies/flutter_photo_manager/blob/main/README-ZH.md#_snippet_22\n\nLANGUAGE: dart\nCODE:\n```\nfinal List<AssetPathEntity> paths = await PhotoManager.getAssetPathList(\n  type: RequestType.image,\n  filterOption: FilterOptionGroup(onlyLivePhotos: true),\n);\n```\n\n----------------------------------------\n\nTITLE: Dart: Get Assets from PhotoManager (Range)\nDESCRIPTION: Retrieves a list of assets (images/videos) directly from `PhotoManager` using a range with `PhotoManager.getAssetListRange()`. This example retrieves assets from index 0 to 80.\nSOURCE: https://github.com/fluttercandies/flutter_photo_manager/blob/main/README.md#_snippet_10\n\nLANGUAGE: dart\nCODE:\n```\nfinal List<AssetEntity> entities = await PhotoManager.getAssetListRange(start: 0, end: 80);\n```\n\n----------------------------------------\n\nTITLE: Adding NSPhotoLibraryUsageDescription to Info.plist\nDESCRIPTION: This property list snippet shows how to add the `NSPhotoLibraryUsageDescription` key to the `Info.plist` file in an iOS project. This provides a description of why the app needs access to the photo library, which is required by iOS for user privacy.\nSOURCE: https://github.com/fluttercandies/flutter_photo_manager/blob/main/README-ZH.md#_snippet_4\n\nLANGUAGE: plist\nCODE:\n```\n<key>NSPhotoLibraryUsageDescription</key>\n<string>In order to access your photo library</string>\n```\n\n----------------------------------------\n\nTITLE: Ignoring Permission Check in Photo Manager (Dart)\nDESCRIPTION: This Dart code disables permission checks within the Photo Manager plugin by setting `PhotoManager.setIgnorePermissionCheck(true)`. This is suitable for background tasks where permission checks might not be appropriate, but ensure your application already has permission.\nSOURCE: https://github.com/fluttercandies/flutter_photo_manager/blob/main/README-ZH.md#_snippet_7\n\nLANGUAGE: Dart\nCODE:\n```\nPhotoManager.setIgnorePermissionCheck(true);\n```\n\n----------------------------------------\n\nTITLE: iOS Info.plist: Photo Library Add Usage Description\nDESCRIPTION: Defines the NSPhotoLibraryAddUsageDescription key-value in the ios/Runner/Info.plist file. This is required for requesting write-access to the photo library on iOS 11 and above.  The string value explains to the user why the app needs permission to add photos.\nSOURCE: https://github.com/fluttercandies/flutter_photo_manager/blob/main/README.md#_snippet_1\n\nLANGUAGE: plist\nCODE:\n```\n<key>NSPhotoLibraryAddUsageDescription</key>\n<string>In order to access your photo library</string>\n```\n\n----------------------------------------\n\nTITLE: Fetching Assets with PhotoManager (Paged)\nDESCRIPTION: This code shows how to retrieve assets using `PhotoManager.getAssetListPaged()`. It takes `page` (starting from 0) and `pageCount` as parameters to define the desired subset of assets.  This is useful for implementing infinite scrolling or loading assets in batches.\nSOURCE: https://github.com/fluttercandies/flutter_photo_manager/blob/main/README-ZH.md#_snippet_13\n\nLANGUAGE: dart\nCODE:\n```\nfinal List<AssetEntity> entities = await PhotoManager.getAssetListPaged(page: 0, pageCount: 80);\n```\n\n----------------------------------------\n\nTITLE: Resolving Glide Version Conflicts in Android Gradle\nDESCRIPTION: This code snippet shows how to resolve Glide version conflicts in the `android/build.gradle` file. It uses a resolution strategy to force a specific version of Glide (4.14.2) if a conflict is detected. This ensures that the correct Glide version is used in the project.\nSOURCE: https://github.com/fluttercandies/flutter_photo_manager/blob/main/README-ZH.md#_snippet_30\n\nLANGUAGE: gradle\nCODE:\n```\nrootProject.allprojects {\n    subprojects {\n        project.configurations.all {\n            resolutionStrategy.eachDependency { details ->\n                if (details.requested.group == 'com.github.bumptech.glide'\n                        && details.requested.name.contains('glide')) {\n                    details.useVersion '4.14.2'\n                }\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Dart: Save Image from Path\nDESCRIPTION: Saves an image to the photo library from an existing file path using `PhotoManager.editor.saveImageWithPath()`. This effectively copies the image into the gallery.\nSOURCE: https://github.com/fluttercandies/flutter_photo_manager/blob/main/README.md#_snippet_13\n\nLANGUAGE: dart\nCODE:\n```\n// Save an existed image to an entity from it's path.\nfinal AssetEntity? imageEntityWithPath = await PhotoManager.editor.saveImageWithPath(\n  path, // Use the absolute path of your source file, it's more like a copy method.\n  title: 'same_as_above.jpg',\n);\n```\n\n----------------------------------------\n\nTITLE: Copy Asset to Path with Dart\nDESCRIPTION: This Dart snippet demonstrates how to copy an asset to another path using PhotoManager.editor.copyAssetToPath. The method behaves differently on Android and iOS, creating a copy or a shortcut, respectively.  The target path must be accessible for the operation to succeed.\nSOURCE: https://github.com/fluttercandies/flutter_photo_manager/blob/main/README.md#_snippet_29\n\nLANGUAGE: Dart\nCODE:\n```\n// Make sure your path entity is accessible.\nfinal AssetPathEntity anotherPathEntity = anotherAccessiblePath;\nfinal AssetEntity entity = yourEntity;\nfinal AssetEntity? newEntity = await PhotoManager.editor.copyAssetToPath(\n  asset: entity,\n  pathEntity: anotherPathEntity,\n); // The result could be null when the path is not accessible.\n```\n\n----------------------------------------\n\nTITLE: Configuring requestLegacyExternalStorage in AndroidManifest.xml\nDESCRIPTION: This XML snippet configures `requestLegacyExternalStorage` to `true` in the `AndroidManifest.xml` file for Android apps targeting API level 29 (Android 10). This allows the app to continue accessing media files using the traditional file paths, but it is not recommended for apps intended for Google Play Store publication.\nSOURCE: https://github.com/fluttercandies/flutter_photo_manager/blob/main/README-ZH.md#_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    package=\"com.fluttercandies.photo_manager_example\">\n\n    <application\n        android:label=\"photo_manager_example\"\n        android:icon=\"@mipmap/ic_launcher\"\n        android:requestLegacyExternalStorage=\"true\">\n    </application>\n</manifest>\n```\n\n----------------------------------------\n\nTITLE: Filtering Assets with FilterOptionGroup - Dart\nDESCRIPTION: This snippet demonstrates how to filter assets using the `FilterOptionGroup`. It configures options for image and video filtering based on size, duration, and creation time. The `orders` list specifies the sorting order for the filtered assets. This requires importing `photo_manager` and understanding its filtering capabilities.\nSOURCE: https://github.com/fluttercandies/flutter_photo_manager/blob/main/README.md#_snippet_20\n\nLANGUAGE: dart\nCODE:\n```\nfinal FilterOptionGroup filterOption = FilterOptionGroup(\n  imageOption: FilterOption(\n    sizeConstraint: SizeConstraint(\n      maxWidth: 10000,\n      maxHeight: 10000,\n      minWidth: 100,\n      minHeight: 100,\n      ignoreSize: false,\n    ),\n  ),\n  videoOption: FilterOption(\n    durationConstraint: DurationConstraint(\n      min: Duration(seconds: 1),\n      max: Duration(seconds: 30),\n      allowNullable: false,\n    ),\n  ),\n  createTimeCondition: DateTimeCondition(\n    min: DateTime(2020, 1, 1),\n    max: DateTime(2020, 12, 31),\n  ),\n  orders: [\n    OrderOption(\n      type: OrderOptionType.createDate,\n      asc: false,\n    ),\n  ],\n  /// other options\n);\n\n```\n\n----------------------------------------\n\nTITLE: Filtering only videos with containsLivePhotos in Dart\nDESCRIPTION: This snippet shows how to filter only videos and exclude live photos when using `PhotoManager.getAssetPathList` after upgrading from flutter_photo_manager 1.x to 2.0.  The `containsLivePhotos` property within `FilterOptionGroup` must be explicitly set to `false`.\nSOURCE: https://github.com/fluttercandies/flutter_photo_manager/blob/main/MIGRATION_GUIDE.md#_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nfinal List<AssetPathEntity> paths = PhotoManager.getAssetPathList(type: RequestType.video);\n```\n\nLANGUAGE: dart\nCODE:\n```\nfinal List<AssetPathEntity> paths = PhotoManager.getAssetPathList(\n  type: RequestType.video,\n  filterOption: FilterOptionGroup(containsLivePhotos: false),\n);\n\n```\n\n----------------------------------------\n\nTITLE: Dart: Get Asset Count\nDESCRIPTION: Retrieves the total number of assets using `PhotoManager.getAssetCount()`. The method returns an integer that represents the number of all available assets.\nSOURCE: https://github.com/fluttercandies/flutter_photo_manager/blob/main/README.md#_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\nfinal int count = await PhotoManager.getAssetCount();\n```\n\n----------------------------------------\n\nTITLE: Creating CustomFilter\nDESCRIPTION: This code snippet creates a `CustomFilter` using SQL syntax. It filters assets based on width and height conditions and sorts them by creation date in descending order. Requires 'package:photo_manager: ^2.6.0'.\nSOURCE: https://github.com/fluttercandies/flutter_photo_manager/blob/main/README-ZH.md#_snippet_27\n\nLANGUAGE: dart\nCODE:\n```\nCustomFilter createFilter() {\n  return CustomFilter.sql(\n    where: '${CustomColumns.base.width} > 100 AND ${CustomColumns.base.height} > 200',\n    orderBy: [OrderByItem.desc(CustomColumns.base.createDate)],\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Filter with AdvancedCustomFilter - Dart\nDESCRIPTION: This snippet demonstrates the creation of a custom filter using the `AdvancedCustomFilter` class, which provides a builder pattern.  It constructs a `WhereConditionGroup` with `ColumnWhereCondition` instances for width and height.  It then adds these conditions and ordering criteria to the filter, enabling more complex filtering logic. Requires importing the `photo_manager` package.\nSOURCE: https://github.com/fluttercandies/flutter_photo_manager/blob/main/README.md#_snippet_22\n\nLANGUAGE: dart\nCODE:\n```\nCustomFilter createFilter() {\n  final group = WhereConditionGroup()\n      .and(\n        ColumnWhereCondition(\n          column: CustomColumns.base.width,\n          value: '100',\n          operator: '>',\n        ),\n      )\n      .or(\n        ColumnWhereCondition(\n          column: CustomColumns.base.height,\n          value: '200',\n          operator: '>',\n        ),\n      );\n  final filter = AdvancedCustomFilter()\n      .addWhereCondition(group)\n      .addOrderBy(column: CustomColumns.base.createDate, isAsc: false);\n  return filter;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Displaying AssetEntity with AssetEntityImage\nDESCRIPTION: This code snippet demonstrates how to display an `AssetEntity` using the `AssetEntityImage` widget from the `photo_manager_image_provider` package. The `isOriginal` parameter determines whether to display the original image or a thumbnail. `thumbnailSize` and `thumbnailFormat` control the size and format of the thumbnail respectively.\nSOURCE: https://github.com/fluttercandies/flutter_photo_manager/blob/main/README-ZH.md#_snippet_20\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:photo_manager_image_provider/photo_manager_image_provider.dart';\n\nfinal Widget image = AssetEntityImage(\n  yourAssetEntity,\n  isOriginal: false,\n  thumbnailSize: const ThumbnailSize.square(200),\n  thumbnailFormat: ThumbnailFormat.jpeg,\n);\n```\n\n----------------------------------------\n\nTITLE: Copying Assets to Another Path in Flutter\nDESCRIPTION: This code snippet shows how to copy an asset to another `AssetPathEntity` using `PhotoManager.editor.copyAssetToPath`. The behavior of 'copy' differs between Android and iOS, with Android creating a copy of the source asset and iOS creating a shortcut. It highlights limitations on Android 30+ due to system restrictions.\nSOURCE: https://github.com/fluttercandies/flutter_photo_manager/blob/main/README-ZH.md#_snippet_35\n\nLANGUAGE: dart\nCODE:\n```\n// 确保 anotherPathEntity 对于当前 app 而言可以访问。\nfinal AssetPathEntity anotherPathEntity = anotherAccessiblePath;\nfinal AssetEntity entity = yourEntity;\nfinal AssetEntity? newEntity = await PhotoManager.editor.copyAssetToPath(\n  asset: entity,\n  pathEntity: anotherPathEntity,\n); // 如果 anotherPathEntity 无法访问，结果会返回 null。\n```\n\n----------------------------------------\n\nTITLE: Updating saveLivePhoto filename to title in Dart\nDESCRIPTION: This snippet demonstrates how to update the `filename` parameter in the `saveLivePhoto` function to `title` when migrating from flutter_photo_manager version 3.x to 3.4. This change provides more precise API usage by aligning the parameter name with its intended purpose.\nSOURCE: https://github.com/fluttercandies/flutter_photo_manager/blob/main/MIGRATION_GUIDE.md#_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nfinal entity = await PhotoManager.editor.saveLivePhoto(\n  imageFile: imageFile,\n  videoFile: videoFile,\n  filename: 'live_0',\n);\n\n```\n\nLANGUAGE: dart\nCODE:\n```\nfinal entity = await PhotoManager.editor.saveLivePhoto(\n  imageFile: imageFile,\n  videoFile: videoFile,\n  title: 'live_0',\n);\n\n```\n\n----------------------------------------\n\nTITLE: Accessing Live Photo Video\nDESCRIPTION: This code shows how to access the video component of a Live Photo asset.  It demonstrates how to get the media URL, image file, video file (with subtype), origin image file, origin video file (with subtype), and how to convert the video to mp4 format.\nSOURCE: https://github.com/fluttercandies/flutter_photo_manager/blob/main/README-ZH.md#_snippet_24\n\nLANGUAGE: dart\nCODE:\n```\nfinal AssetEntity entity = livePhotoEntity;\n\n// 播放实况照片的视频\nfinal String? mediaUrl = await entity.getMediaUrl();\n\n// 获取缩略图和视频\nfinal File? imageFile = await entity.file;\nfinal File? videoFile = await entity.fileWithSubtype;\n\n// 获取原图和原视频\nfinal File? originImageFile = await entity.originFile;\nfinal File? originVideoFile = await entity.originFileWithSubtype;\n\n// 将实况照片的视频从 mov 转换为 mp4\nfinal File? convertedFile = await entity.loadFile(\n  isOriginal: true,\n  withSubtye: true,\n  darwinFileType: PMDarwinAVFileType.mp4,\n);\n```\n\n----------------------------------------\n\nTITLE: Dart: Get Asset from ID\nDESCRIPTION: Retrieves an `AssetEntity` from its ID using `AssetEntity.fromId(id)`.  The method returns a nullable `AssetEntity?` since the asset might be unavailable or deleted.\nSOURCE: https://github.com/fluttercandies/flutter_photo_manager/blob/main/README.md#_snippet_11\n\nLANGUAGE: dart\nCODE:\n```\nfinal AssetEntity? asset = await AssetEntity.fromId(id);\n```\n\n----------------------------------------\n\nTITLE: Importing AssetEntityImageProvider after 2.x to 3.0 in Dart\nDESCRIPTION: This code snippet illustrates how to import `AssetEntityImage` and `AssetEntityImageProvider` after they were removed from the main package in version 3.0.  Developers must now use the `photo_manager_image_provider` package to access these classes.\nSOURCE: https://github.com/fluttercandies/flutter_photo_manager/blob/main/MIGRATION_GUIDE.md#_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:photo_manager_image_provider/photo_manager_image_provider.dart';\n```\n\n----------------------------------------\n\nTITLE: Deleting Assets in Flutter\nDESCRIPTION: This code snippet illustrates how to delete assets completely from the gallery using `PhotoManager.editor.deleteWithIds`. The method returns a list of IDs of deleted assets, or an empty list if the operation fails.  It emphasizes the irreversible nature of the operation and the need for caution.\nSOURCE: https://github.com/fluttercandies/flutter_photo_manager/blob/main/README-ZH.md#_snippet_34\n\nLANGUAGE: dart\nCODE:\n```\n// 调用方法会返回被删除的资源，如果全部失败会返回空列表。\nfinal List<String> result = await PhotoManager.editor.deleteWithIds(\n  <String>[entity.id],\n);\n```\n\n----------------------------------------\n\nTITLE: Registering for Change Notifications - Dart\nDESCRIPTION: This snippet explains how to register and unregister callbacks for asset changes using `PhotoManager.addChangeCallback` and `PhotoManager.removeChangeCallback`. It also shows how to start and stop the change notification service using `PhotoManager.startChangeNotify` and `PhotoManager.stopChangeNotify`. The `changeNotify` function is a placeholder for a custom callback to handle change events. Requires the `flutter/services.dart` package.\nSOURCE: https://github.com/fluttercandies/flutter_photo_manager/blob/main/README.md#_snippet_19\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:flutter/services.dart';\n\nvoid changeNotify(MethodCall call) {\n  // Your custom callback.\n}\n\n/// Register your callback.\nPhotoManager.addChangeCallback(changeNotify);\n\n/// Enable change notify.\nPhotoManager.startChangeNotify();\n\n/// Remove your callback.\nPhotoManager.removeChangeCallback(changeNotify);\n\n/// Disable change notify.\nPhotoManager.stopChangeNotify();\n\n```\n\n----------------------------------------\n\nTITLE: Accessing assetCount asynchronously in Dart\nDESCRIPTION: This snippet shows how to access the asset count asynchronously after upgrading from flutter_photo_manager 2.x to 2.2. The synchronous `assetCount` property has been deprecated in favor of the asynchronous `assetCountAsync` getter to improve performance.\nSOURCE: https://github.com/fluttercandies/flutter_photo_manager/blob/main/MIGRATION_GUIDE.md#_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nint get count => path.assetCount;\n```\n\nLANGUAGE: dart\nCODE:\n```\nint count = await path.assetCountAsync;\n```\n\n----------------------------------------\n\nTITLE: Glide Dependency Resolution in Gradle\nDESCRIPTION: This Gradle snippet shows how to force a specific version of the Glide library in an Android project, addressing potential conflicts with other dependencies. It configures the resolution strategy for all subprojects to use version '4.15.1' of Glide if a dependency on Glide is requested. This ensures consistency and avoids compatibility issues with Glide.\nSOURCE: https://github.com/fluttercandies/flutter_photo_manager/blob/main/README.md#_snippet_24\n\nLANGUAGE: Gradle\nCODE:\n```\nrootProject.allprojects {\n    subprojects {\n        project.configurations.all {\n            resolutionStrategy.eachDependency { details ->\n                if (details.requested.group == 'com.github.bumptech.glide'\n                        && details.requested.name.contains('glide')) {\n                    details.useVersion '4.15.1'\n                }\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Create Album on iOS/macOS with Dart\nDESCRIPTION: This Dart snippet shows how to create an album on iOS or macOS using PhotoManager.editor.darwin.createAlbum. The parent parameter specifies the parent folder, which can be null for the root path or another accessible folder.\nSOURCE: https://github.com/fluttercandies/flutter_photo_manager/blob/main/README.md#_snippet_34\n\nLANGUAGE: Dart\nCODE:\n```\nPhotoManager.editor.darwin.createAlbum(\n  name,\n  parent: parent, // The value should be null, the root path or other accessible folders.\n);\n```\n\n----------------------------------------\n\nTITLE: iOS Info.plist: Prevent Limited Photos Access Alert\nDESCRIPTION: Suppresses the automatic prompting from the system when each time you access the media after the app has restarted, by setting the `Prevent limited photos access alert` key to `YES` in your app's `Info.plist`.\nSOURCE: https://github.com/fluttercandies/flutter_photo_manager/blob/main/README.md#_snippet_3\n\nLANGUAGE: plist\nCODE:\n```\n<key>PHPhotoLibraryPreventAutomaticLimitedAccessAlert</key>\n<true/>\n```\n\n----------------------------------------\n\nTITLE: Preload Thumbnails with Dart\nDESCRIPTION: This Dart snippet demonstrates how to preload thumbnails for a list of assets using PhotoCachingManager. It calls requestCacheAssets to cache thumbnails based on the specified option and provides a way to cancel the request. This can improve performance by loading thumbnails in advance, making them display faster when needed.\nSOURCE: https://github.com/fluttercandies/flutter_photo_manager/blob/main/README.md#_snippet_27\n\nLANGUAGE: Dart\nCODE:\n```\nPhotoCachingManager().requestCacheAssets(assets: assets, option: option);\n```\n\n----------------------------------------\n\nTITLE: Dart (iOS): Save Live Photo\nDESCRIPTION: Saves a live photo to the photo library on iOS from image and video `File` objects using `PhotoManager.editor.darwin.saveLivePhoto()`. This method is only valid for iOS and requires both image and video files representing the same live photo.\nSOURCE: https://github.com/fluttercandies/flutter_photo_manager/blob/main/README.md#_snippet_15\n\nLANGUAGE: dart\nCODE:\n```\n// [iOS only] Save a live photo from image and video `File`.\n// This only works when both image and video file were part of same live photo.\nfinal File imageFile = File('path/to/your/live_photo.heic');\nfinal File videoFile = File('path/to/your/live_video.mp4');\nfinal AssetEntity? entity = await PhotoManager.editor.darwin.saveLivePhoto(\n  imageFile: imageFile,\n  videoFile: videoFile,\n  title: 'write_your_own_title.heic',\n);\n```\n\n----------------------------------------\n\nTITLE: Updating DateTimeCond usage in Dart\nDESCRIPTION: This snippet demonstrates how to update the usage of `DateTimeCond` when migrating from flutter_photo_manager version 0.5 to 0.6. The order option should be added to FilterOptionGroup.\nSOURCE: https://github.com/fluttercandies/flutter_photo_manager/blob/main/MIGRATION_GUIDE.md#_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\nfinal dtCond = DateTimeCond(\n  min: startDt,\n  max: endDt,\n  asc: asc,\n)..dateTimeCond = dtCond;\n```\n\nLANGUAGE: dart\nCODE:\n```\nfinal dtCond = DateTimeCond(\n  min: startDt,\n  max: endDt,\n);\n\nfinal orderOption = OrderOption(\n  type: OrderOptionType.createDate,\n  asc: asc,\n);\n\nfinal filterOptionGroup = FilterOptionGroup()..addOrderOption(orderOption);\n```\n\n----------------------------------------\n\nTITLE: Using named parameters for getAssetListPaged in Dart\nDESCRIPTION: This snippet demonstrates the change to using named parameters when calling `getAssetListPaged` after migrating from flutter_photo_manager 1.x to 2.0. The `page` and `size` parameters are now required to be named.\nSOURCE: https://github.com/fluttercandies/flutter_photo_manager/blob/main/MIGRATION_GUIDE.md#_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nAssetPathEntity.getAssetListPaged(0, 50);\n```\n\nLANGUAGE: dart\nCODE:\n```\nAssetPathEntity.getAssetListPaged(page: 0, size: 50);\n```\n\n----------------------------------------\n\nTITLE: Importing Photo Manager Package in Dart\nDESCRIPTION: This Dart code imports the Photo Manager package into your Dart file, allowing you to use its classes and functions for managing media assets.\nSOURCE: https://github.com/fluttercandies/flutter_photo_manager/blob/main/README-ZH.md#_snippet_2\n\nLANGUAGE: Dart\nCODE:\n```\nimport 'package:photo_manager/photo_manager.dart';\n```\n\n----------------------------------------\n\nTITLE: Favoriting assets with new entity return in Dart\nDESCRIPTION: This snippet demonstrates how to favorite an asset using `PhotoManager.editor.darwin.favoriteAsset` after upgrading from flutter_photo_manager 1.x to 2.0.  The function now returns a new `AssetEntity` if successful.\nSOURCE: https://github.com/fluttercandies/flutter_photo_manager/blob/main/MIGRATION_GUIDE.md#_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\nfinal bool isSucceed = await PhotoManager.editor.darwin.favoriteAsset(\n  entity: entity,\n  favorite: true,\n);\n\n```\n\nLANGUAGE: dart\nCODE:\n```\n/// If succeed, a new entity will be returned.\nfinal AssetEntity? newEntity = await PhotoManager.editor.darwin.favoriteAsset(\n  entity: entity,\n  favorite: true,\n);\n\n```\n\n----------------------------------------\n\nTITLE: Displaying AssetEntity with AssetEntityImageProvider\nDESCRIPTION: This code snippet shows how to display an asset using `AssetEntityImageProvider` within a standard `Image` widget. `AssetEntityImageProvider` allows for more control over the image loading process.  The `isOriginal`, `thumbnailSize`, and `thumbnailFormat` parameters have the same meaning as with the `AssetEntityImage` widget.\nSOURCE: https://github.com/fluttercandies/flutter_photo_manager/blob/main/README-ZH.md#_snippet_21\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:photo_manager_image_provider/photo_manager_image_provider.dart';\n\nfinal Widget imageFromProvider = Image(\n  image: AssetEntityImageProvider(\n    yourAssetEntity,\n    isOriginal: false,\n    thumbnailSize: const ThumbnailSize.square(200),\n    thumbnailFormat: ThumbnailFormat.jpeg,\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Checking local availability of files in Dart\nDESCRIPTION: This snippet shows how to check if a file is locally available using `isLocallyAvailable()` after upgrading from flutter_photo_manager 1.x to 2.0.  The function now takes an optional `isOrigin` parameter to specify whether to check the original file's availability.\nSOURCE: https://github.com/fluttercandies/flutter_photo_manager/blob/main/MIGRATION_GUIDE.md#_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nfinal bool isLocallyAvailable = await entity.isLocallyAvailable;\n```\n\nLANGUAGE: dart\nCODE:\n```\n// .file is locally available.\nfinal bool isFileLocallyAvailable = await entity.isLocallyAvailable();\n\n// .originFile is locally available.\nfinal bool isOriginFileLocallyAvailable = await entity.isLocallyAvailable(\n  isOrigin: true,\n);\n\n```\n\n----------------------------------------\n\nTITLE: Android 14 Permissions in XML\nDESCRIPTION: This XML snippet demonstrates how to add the READ_MEDIA_VISUAL_USER_SELECTED permission to the Android manifest for Android 14 (API level 34). This permission is necessary when using the limited access feature in Android 14, allowing the application to access only the photos and videos selected by the user.\nSOURCE: https://github.com/fluttercandies/flutter_photo_manager/blob/main/README.md#_snippet_25\n\nLANGUAGE: XML\nCODE:\n```\n<manifest>\n    <uses-permission android:name=\"android.permission.READ_MEDIA_VISUAL_USER_SELECTED\" />  <!-- If you want to use the limited access feature. -->\n</manifest>\n```\n\n----------------------------------------\n\nTITLE: Updating saveImage title to filename in Dart\nDESCRIPTION: This snippet illustrates the change from using `title` to `filename` in the `saveImage` function when upgrading from flutter_photo_manager version 3.x to 3.3. This modification clarifies the purpose of the parameter for developers.\nSOURCE: https://github.com/fluttercandies/flutter_photo_manager/blob/main/MIGRATION_GUIDE.md#_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nfinal entity = await PhotoManager.editor.saveImage(bytes, title: 'new.jpg');\n```\n\nLANGUAGE: dart\nCODE:\n```\nfinal entity = await PhotoManager.editor.saveImage(bytes, filename: 'new.jpg');\n```\n\n----------------------------------------\n\nTITLE: Removing Assets from an Album (iOS/macOS Only) in Flutter\nDESCRIPTION: This code snippet illustrates how to remove assets from a specific album using `PhotoManager.editor.darwin.removeInAlbum` and `PhotoManager.editor.darwin.removeAssetsInAlbum`. This does not delete the assets from the device, only removes them from the album. The specified path must be accessible.\nSOURCE: https://github.com/fluttercandies/flutter_photo_manager/blob/main/README-ZH.md#_snippet_41\n\nLANGUAGE: dart\nCODE:\n```\n// 确保你的路径能够访问。\nfinal AssetPathEntity pathEntity = accessiblePath;\nfinal AssetEntity entity = yourEntity;\nfinal List<AssetEntity> entities = <AssetEntity>[yourEntity, anotherEntity];\n// 移除相簿的单个图片\n// 这将调用列表移除的方法作为实现。\nawait PhotoManager.editor.darwin.removeInAlbum(\n  yourEntity,\n  accessiblePath,\n);\n// 批量从相册中移除资源。\nawait PhotoManager.editor.darwin.removeAssetsInAlbum(\n  entities,\n  accessiblePath,\n);\n```\n\n----------------------------------------\n\nTITLE: Adding Photo Manager Dependency to pubspec.yaml\nDESCRIPTION: This code snippet shows how to manually add the Photo Manager plugin to your project's `pubspec.yaml` file. Replace `$latest_version` with the actual version number. This registers the plugin as a dependency.\nSOURCE: https://github.com/fluttercandies/flutter_photo_manager/blob/main/README-ZH.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ndependencies:\n  photo_manager: $latest_version\n```\n\n----------------------------------------\n\nTITLE: Saving Image from Path\nDESCRIPTION: This code snippet shows how to save an existing image to the gallery using its path using `PhotoManager.editor.saveImageWithPath`. The `path` parameter should be the absolute path to the image file. This method is similar to copying the file to the gallery.  The resulting `AssetEntity` might be null if the operation fails.\nSOURCE: https://github.com/fluttercandies/flutter_photo_manager/blob/main/README-ZH.md#_snippet_17\n\nLANGUAGE: dart\nCODE:\n```\nfinal AssetEntity? imageEntityWithPath = await PhotoManager.editor.saveImageWithPath(\n  path, // 使用源文件的绝对路径来保存，与复制类似。\n  title: 'same_as_above.jpg',\n);\n```\n\n----------------------------------------\n\nTITLE: Move Asset on Android with Dart\nDESCRIPTION: This Dart snippet demonstrates how to move an asset to another album on Android using PhotoManager.editor.android.moveAssetToAnother. The target path must be accessible. This feature is blocked on Android 30+ due to system limitations.\nSOURCE: https://github.com/fluttercandies/flutter_photo_manager/blob/main/README.md#_snippet_30\n\nLANGUAGE: Dart\nCODE:\n```\n// Make sure your path entity is accessible.\nfinal AssetPathEntity pathEntity = accessiblePath;\nfinal AssetEntity entity = yourEntity;\nawait PhotoManager.editor.android.moveAssetToAnother(\n  entity: entity,\n  target: pathEntity,\n);\n```\n\n----------------------------------------\n\nTITLE: Adding READ_MEDIA_VISUAL_USER_SELECTED Permission in Android Manifest\nDESCRIPTION: This XML snippet demonstrates how to add the `READ_MEDIA_VISUAL_USER_SELECTED` permission to the Android manifest file. This permission is required when targeting Android 14 (API level 34) to provide optional media access functionality.\nSOURCE: https://github.com/fluttercandies/flutter_photo_manager/blob/main/README-ZH.md#_snippet_31\n\nLANGUAGE: xml\nCODE:\n```\n<manifest>\n   <uses-permission android:name=\"android.permission.READ_MEDIA_VISUAL_USER_SELECTED\" /> <!-- 如果需要提供可选的资源的功能 -->\n</manifest>\n```\n\n----------------------------------------\n\nTITLE: Creating an Advanced Custom Filter in Flutter\nDESCRIPTION: This code snippet demonstrates how to create an advanced custom filter using the `AdvancedCustomFilter` class. It uses `WhereConditionGroup` and `ColumnWhereCondition` to define filter criteria based on width and height. It also adds an order by condition based on the create date. The filter is returned as a `CustomFilter` object.\nSOURCE: https://github.com/fluttercandies/flutter_photo_manager/blob/main/README-ZH.md#_snippet_28\n\nLANGUAGE: dart\nCODE:\n```\nCustomFilter createFilter() {\n  final group = WhereConditionGroup()\n      .and(\n        ColumnWhereCondition(\n          column: CustomColumns.base.width,\n          value: '100',\n          operator: '>',\n        ),\n      )\n      .or(\n        ColumnWhereCondition(\n          column: CustomColumns.base.height,\n          value: '200',\n          operator: '>',\n        ),\n      );\n  final filter = AdvancedCustomFilter()\n      .addWhereCondition(group)\n      .addOrderBy(column: CustomColumns.base.createDate, isAsc: false);\n  return filter;\n}\n```\n\n----------------------------------------\n\nTITLE: Saving Live Photo (iOS Only)\nDESCRIPTION: This code demonstrates how to save a Live Photo on iOS by providing both the image and video files to the `PhotoManager.editor.darwin.saveLivePhoto` method. The image and video files must correspond to the same Live Photo. This method is only applicable on iOS. An AssetEntity? is returned.\nSOURCE: https://github.com/fluttercandies/flutter_photo_manager/blob/main/README-ZH.md#_snippet_19\n\nLANGUAGE: dart\nCODE:\n```\nfinal File imageFile = File('path/to/your/livephoto.heic');\nfinal File videoFile = File('path/to/your/livevideo.mp4');\nfinal AssetEntity? entity = await PhotoManager.editor.darwin.saveLivePhoto(\n  imageFile: imageFile,\n  videoFile: videoFile,\n  title: 'write_your_own_title.heic',\n);\n```\n\n----------------------------------------\n\nTITLE: Filtering for Live Photos - Dart\nDESCRIPTION: This snippet shows how to filter assets to retrieve only 'Live Photos' using both the `FilterOptionGroup` and `CustomSqlFilter`. The first example uses `FilterOptionGroup` with `onlyLivePhotos: true`. The second example employs a `CustomSqlFilter` with a specific SQL `where` clause to identify live photos based on media type and subtypes. Requires the `photo_manager` package.\nSOURCE: https://github.com/fluttercandies/flutter_photo_manager/blob/main/README.md#_snippet_17\n\nLANGUAGE: dart\nCODE:\n```\nfinal List<AssetPathEntity> paths = await PhotoManager.getAssetPathList(\n  type: RequestType.image,\n  filterOption: FilterOptionGroup(onlyLivePhotos: true),\n);\n\n```\n\nLANGUAGE: dart\nCODE:\n```\nfinal List<AssetPathEntity> paths = await PhotoManager.getAssetPathList(\n  type: RequestType.image,\n  filterOption: CustomFilter.sql(\n  where: '${CustomColumns.base.mediaType} = 1'\n      ' AND '\n      '${CustomColumns.darwin.mediaSubtypes} & (1 << 3) = (1 << 3)',\n  ),\n);\n\n```\n\n----------------------------------------\n\nTITLE: Android 13 Permissions in XML\nDESCRIPTION: This XML snippet demonstrates how to add the READ_MEDIA_IMAGES, READ_MEDIA_VIDEO, and READ_MEDIA_AUDIO permissions to the Android manifest for Android 13 (API level 33).  These permissions are required to read images, videos, and audio files, respectively, even if the targetSdkVersion and compileSdkVersion are not set to 33.\nSOURCE: https://github.com/fluttercandies/flutter_photo_manager/blob/main/README.md#_snippet_26\n\nLANGUAGE: XML\nCODE:\n```\n<manifest>\n    <uses-permission android:name=\"android.permission.READ_MEDIA_IMAGES\" /> <!-- If you want to read images or videos-->\n    <uses-permission android:name=\"android.permission.READ_MEDIA_VIDEO\" /> <!-- If you want to read videos or images-->\n    <uses-permission android:name=\"android.permission.READ_MEDIA_AUDIO\" /> <!-- If you want to read audio-->\n</manifest>\n```\n\n----------------------------------------\n\nTITLE: Removing Non-existent Assets (Android Only) in Flutter\nDESCRIPTION: This code snippet shows how to remove all non-existent asset entries using `PhotoManager.editor.android.removeAllNoExistsAsset`. This function deletes album entries where the corresponding files no longer exist locally, often caused by external file managers.  It is resource-intensive and warns against repeated calls.\nSOURCE: https://github.com/fluttercandies/flutter_photo_manager/blob/main/README-ZH.md#_snippet_38\n\nLANGUAGE: dart\nCODE:\n```\nawait PhotoManager.editor.android.removeAllNoExistsAsset();\n```\n\n----------------------------------------\n\nTITLE: Displaying Assets with AssetEntityImage/Provider - Dart\nDESCRIPTION: This snippet demonstrates how to display assets using the `AssetEntityImage` widget and the `AssetEntityImageProvider` from the `photo_manager_image_provider` package. It shows how to specify thumbnail size and format for optimized performance. Ensure that `photo_manager_image_provider` is imported and `yourAssetEntity` is defined.\nSOURCE: https://github.com/fluttercandies/flutter_photo_manager/blob/main/README.md#_snippet_16\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:photo_manager_image_provider/photo_manager_image_provider.dart';\n\nfinal Widget image = AssetEntityImage(\n  yourAssetEntity,\n  isOriginal: false, // Defaults to `true`.\n  thumbnailSize: const ThumbnailSize.square(200), // Preferred value.\n  thumbnailFormat: ThumbnailFormat.jpeg, // Defaults to `jpeg`.\n);\n\nfinal Widget imageFromProvider = Image(\n  image: AssetEntityImageProvider(\n    yourAssetEntity,\n    isOriginal: false,\n    thumbnailSize: const ThumbnailSize.square(200),\n    thumbnailFormat: ThumbnailFormat.jpeg,\n  ),\n);\n\n```\n\n----------------------------------------\n\nTITLE: Adding Media Permissions in Android Manifest for Android 13\nDESCRIPTION: This XML snippet shows how to add the necessary `READ_MEDIA_IMAGES`, `READ_MEDIA_VIDEO`, and `READ_MEDIA_AUDIO` permissions to the Android manifest file when targeting Android 13 (API level 33). These permissions are required to read images, videos, and audio files, respectively.\nSOURCE: https://github.com/fluttercandies/flutter_photo_manager/blob/main/README-ZH.md#_snippet_32\n\nLANGUAGE: xml\nCODE:\n```\n<manifest>\n    <uses-permission android:name=\"android.permission.READ_MEDIA_IMAGES\" /> <!-- 如果需要读取图片或视频 -->\n    <uses-permission android:name=\"android.permission.READ_MEDIA_VIDEO\" /> <!-- 如果需要读取视频或图片 -->\n    <uses-permission android:name=\"android.permission.READ_MEDIA_AUDIO\" /> <!-- 如果需要读取音频 -->\n</manifest>\n```\n\n----------------------------------------\n\nTITLE: Adding PHPhotoLibraryPreventAutomaticLimitedAccessAlert to Info.plist\nDESCRIPTION: This property list snippet shows how to prevent limited photos access alerts on iOS. Setting `PHPhotoLibraryPreventAutomaticLimitedAccessAlert` to YES in `Info.plist` prevents the system from automatically prompting the user for limited photo library access each time the app starts.\nSOURCE: https://github.com/fluttercandies/flutter_photo_manager/blob/main/README-ZH.md#_snippet_5\n\nLANGUAGE: plist\nCODE:\n```\n<key>PHPhotoLibraryPreventAutomaticLimitedAccessAlert</key>\n<true/>\n```\n\n----------------------------------------\n\nTITLE: Accessing Darwin album types after 3.0.x in Dart\nDESCRIPTION: This example demonstrates how to access Darwin album types after the 3.0.x update of the flutter_photo_manager package.  It uses the `albumTypeEx` property to retrieve the type and subtype information, replacing the deprecated `darwinType` and `darwinSubtype` properties.\nSOURCE: https://github.com/fluttercandies/flutter_photo_manager/blob/main/MIGRATION_GUIDE.md#_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nfinal path = await AssetPathEntity.fromId('');\nfinal PMDarwinAssetCollectionType? darwinType = path.darwinType;\nfinal PMDarwinAssetCollectionSubtype? darwinSubtype = path.darwinSubtype;\n\n```\n\nLANGUAGE: dart\nCODE:\n```\nfinal path = await AssetPathEntity.fromId('');\nfinal PMDarwinAssetCollectionType? darwinType = path.albumTypeEx?.darwin?.type;\nfinal PMDarwinAssetCollectionSubtype? darwinSubtype = path.albumTypeEx?.darwin?.subtype;\n\n```\n\n----------------------------------------\n\nTITLE: Dart: Requesting Photo Library Permission\nDESCRIPTION: Requests permission to access the photo library using `PhotoManager.requestPermissionExtend()`.  The code checks the permission state and handles different scenarios (granted, access, limited, rejected). It then provides an example to set ignore permissions.\nSOURCE: https://github.com/fluttercandies/flutter_photo_manager/blob/main/README.md#_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nfinal PermissionState ps = await PhotoManager.requestPermissionExtend(); // the method can use optional param `permission`.\nif (ps.isAuth) {\n  // Granted\n  // You can to get assets here.\n} else if (ps.hasAccess) {\n  // Access will continue, but the amount visible depends on the user's selection.\n} else {\n  // Limited(iOS) or Rejected, use `==` for more precise judgements.\n  // You can call `PhotoManager.openSetting()` to open settings for further steps.\n}\n\n```\n\nLANGUAGE: dart\nCODE:\n```\nPhotoManager.setIgnorePermissionCheck(true);\n```\n\n----------------------------------------\n\nTITLE: Deleting Cached Files on iOS in Flutter\nDESCRIPTION: This code snippet illustrates how to delete cached files on iOS after using an `AssetEntity`. It imports the `dart:io` library and checks if the platform is iOS. If it is, the code attempts to delete the file synchronously within a `finally` block to ensure the file is deleted even if an exception occurs during the file handling process.\nSOURCE: https://github.com/fluttercandies/flutter_photo_manager/blob/main/README-ZH.md#_snippet_29\n\nLANGUAGE: dart\nCODE:\n```\nimport 'dart:io';\n\nFuture<void> useEntity(AssetEntity entity) async {\n  File? file;\n  try {\n    file = await entity.file;\n    await handleFile(file!); // 处理获取的文件\n  } finally {\n    if (Platform.isIOS) {\n      file?.deleteSync(); // 处理完成后删除\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Folder (iOS/macOS Only) in Flutter\nDESCRIPTION: This code snippet demonstrates how to create a folder using `PhotoManager.editor.darwin.createFolder` on iOS or macOS.  The parent parameter should be null for the root directory or another accessible folder.\nSOURCE: https://github.com/fluttercandies/flutter_photo_manager/blob/main/README-ZH.md#_snippet_39\n\nLANGUAGE: dart\nCODE:\n```\nPhotoManager.editor.darwin.createFolder(\n  name,\n  parent: parent, // 应为 null、根目录或者其他可访问的文件夹\n);\n```"
  }
]