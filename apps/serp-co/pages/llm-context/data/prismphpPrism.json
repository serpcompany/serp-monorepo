[
  {
    "owner": "prism-php",
    "repo": "prism",
    "content": "TITLE: Initializing and Using a Weather Tool with Prism PHP\nDESCRIPTION: Demonstrates how to create a weather tool and use it with Prism PHP to enable an AI assistant to check weather conditions. The code shows the complete flow from tool definition to response handling.\nSOURCE: https://github.com/prism-php/prism/blob/main/docs/core-concepts/tools-function-calling.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Prism\\Prism\\Prism;\nuse Prism\\Prism\\Enums\\Provider;\nuse Prism\\Prism\\Facades\\Tool;\n\n$weatherTool = Tool::as('weather')\n    ->for('Get current weather conditions')\n    ->withStringParameter('city', 'The city to get weather for')\n    ->using(function (string $city): string {\n        // Your weather API logic here\n        return \"The weather in {$city} is sunny and 72°F.\";\n    });\n\n$response = Prism::text()\n    ->using(Provider::Anthropic, 'claude-3-5-sonnet-latest')\n    ->withMaxSteps(2)\n    ->withPrompt('What is the weather like in Paris?')\n    ->withTools([$weatherTool])\n    ->asText();\n```\n\n----------------------------------------\n\nTITLE: Adding Documents to Messages Using Prism PHP\nDESCRIPTION: Example showing various methods for adding documents to messages in Prism PHP, including from base64, file paths, text strings, URLs, and OpenAI file IDs. This demonstrates the flexibility of the Document value object when communicating with AI providers.\nSOURCE: https://github.com/prism-php/prism/blob/main/docs/input-modalities/documents.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Prism\\Enums\\Provider;\nuse Prism\\Prism\\Prism;\nuse Prism\\Prism\\ValueObjects\\Messages\\UserMessage;\nuse Prism\\Prism\\ValueObjects\\Messages\\Support\\Document;\nuse Prism\\Prism\\ValueObjects\\Messages\\Support\\OpenAIFile;\n\nPrism::text()\n    ->using(Provider::Anthropic, 'claude-3-5-sonnet-20241022')\n    ->withMessages([\n        // From base64\n        new UserMessage('Here is the document from base64', [\n            Document::fromBase64(base64_encode(file_get_contents('tests/Fixtures/test-pdf.pdf')), 'application/pdf'),\n        ]),\n        // Or from a path\n        new UserMessage('Here is the document from a local path', [\n            Document::fromPath('tests/Fixtures/test-pdf.pdf'),\n        ]),\n        // Or from a text string\n        new UserMessage('Here is the document from a text string (e.g. from your database)', [\n            Document::fromText('Hello world!'),\n        ]),\n        // Or from an URL\n        new UserMessage('Here is the document from a url (make sure this is publically accessable)', [\n            Document::fromUrl('https://example.com/test-pdf.pdf'),\n        ]),\n        // Or from a file_id\n        new UserMessage('Here is the document from file_id', [\n            new OpenAIFile('file-lsfgSXyV2xEb8gw8fYjXU6'),\n        ]),\n    ])\n    ->asText();\n```\n\n----------------------------------------\n\nTITLE: Testing Tool Integration in Prism PHP\nDESCRIPTION: Complete example of testing tool integration, including tool calls, results, and response assertions. Shows how to verify weather tool functionality and response processing.\nSOURCE: https://github.com/prism-php/prism/blob/main/docs/core-concepts/testing.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Prism\\Prism\\Prism;\nuse Prism\\Prism\\Enums\\Provider;\nuse Prism\\Prism\\Text\\Response as TextResponse;\nuse Prism\\Prism\\Tool;\nuse Prism\\Prism\\ValueObjects\\Usage;\nuse Prism\\Prism\\ValueObjects\\ResponseMeta;\nuse Prism\\Prism\\ValueObjects\\ToolCall;\n\nit('can use weather tool', function () {\n    // Define the expected tool call and response sequence\n    $responses = [\n        // First response: AI decides to use the weather tool\n        new TextResponse(\n            text: '', // Empty text since the AI is using a tool\n            steps: collect([]),\n            responseMessages: collect([]),\n            toolCalls: [\n                new ToolCall(\n                    id: 'call_123',\n                    name: 'weather',\n                    arguments: ['city' => 'Paris']\n                )\n            ],\n            toolResults: [],\n            usage: new Usage(15, 25),\n            finishReason: FinishReason::ToolCalls,\n            meta: new Meta('fake-1', 'fake-model'),\n            messages: collect([]),\n            additionalContent: []\n        ),\n        // Second response: AI uses the tool result to form a response\n        new TextResponse(\n            text: 'Based on current conditions, the weather in Paris is sunny with a temperature of 72°F.',\n            steps: collect([]),\n            responseMessages: collect([]),\n            toolCalls: [],\n            toolResults: [],\n            usage: new Usage(20, 30),\n            finishReason: FinishReason::Stop,\n            meta: new Meta('fake-2', 'fake-model'),\n            messages: collect([]),\n            additionalContent: []\n        ),\n    ];\n\n    // Set up the fake\n    $fake = Prism::fake($responses);\n\n    // Create the weather tool\n    $weatherTool = Tool::as('weather')\n        ->for('Get weather information')\n        ->withStringParameter('city', 'City name')\n        ->using(fn (string $city) => \"The weather in {$city} is sunny with a temperature of 72°F\");\n\n    // Run the actual test\n    $response = Prism::text()\n        ->using(Provider::Anthropic, 'claude-3-5-sonnet-latest')\n        ->withPrompt('What\\'s the weather in Paris?')\n        ->withTools([$weatherTool])\n        ->asText();\n\n    // Assert the correct number of API calls were made\n    $fake->assertCallCount(2);\n\n    // Assert tool calls were made correctly\n    expect($response->steps[0]->toolCalls)->toHaveCount(1);\n    expect($response->steps[0]->toolCalls[0]->name)->toBe('weather');\n    expect($response->steps[0]->toolCalls[0]->arguments())->toBe(['city' => 'Paris']);\n\n    // Assert tool results were processed\n    expect($response->toolResults)->toHaveCount(1);\n    expect($response->toolResults[0]->result)\n        ->toBe('The weather in Paris is sunny with a temperature of 72°F');\n\n    // Assert final response\n    expect($response->text)\n        ->toBe('Based on current conditions, the weather in Paris is sunny with a temperature of 72°F.');\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Tool Response Results in Prism PHP\nDESCRIPTION: Demonstrates how to inspect and process tool usage results in Prism PHP responses. The code shows how to access the final answer, tool call details, and step-by-step information.\nSOURCE: https://github.com/prism-php/prism/blob/main/docs/core-concepts/tools-function-calling.md#2025-04-21_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nuse Prism\\Prism\\Prism;\nuse Prism\\Prism\\Enums\\Provider;\n\n$response = Prism::text()\n    ->using(Provider::Anthropic, 'claude-3-5-sonnet-latest')\n    ->withMaxSteps(2)\n    ->withPrompt('What is the weather like in Paris?')\n    ->withTools([$weatherTool])\n    ->asText();\n\n// Get the final answer\necho $response->text;\n\n// ->text is empty for tool calls\n\n// Inspect tool usage\n\nif ($response->toolResults) {\n    foreach ($response->toolResults as $toolResult) {\n        echo \"Tool: \" . $toolResult->toolName . \"\\n\";\n        echo \"Result: \" . $toolResult->result . \"\\n\";\n    }\n}\n\n\nforeach ($response->steps as $step) {\n    if ($step->toolCalls) {\n        foreach ($step->toolCalls as $toolCall) {\n            echo \"Tool: \" . $toolCall->name . \"\\n\";\n            echo \"Arguments: \" . json_encode($toolCall->arguments()) . \"\\n\";\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Complex Search Tool Class in Prism PHP\nDESCRIPTION: Demonstrates how to create a dedicated class for a more sophisticated search tool in Prism PHP. This approach allows for better organization and reusability of complex tool logic.\nSOURCE: https://github.com/prism-php/prism/blob/main/docs/core-concepts/tools-function-calling.md#2025-04-21_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Tools;\n\nuse Prism\\Prism\\Tool;\nuse Illuminate\\Support\\Facades\\Http;\n\nclass SearchTool extends Tool\n{\n    public function __construct()\n    {\n        $this\n            ->as('search')\n            ->for('useful when you need to search for current events')\n            ->withStringParameter('query', 'Detailed search query. Best to search one topic at a time.')\n            ->using($this);\n    }\n\n    public function __invoke(string $query): string\n    {\n        $response = Http::get('https://serpapi.com/search', [\n            'engine' => 'google',\n            'q' => $query,\n            'google_domain' => 'google.com',\n            'gl' => 'us',\n            'hl' => 'en',\n            'api_key' => config('services.serpapi.api_key'),\n        ]);\n\n        $results = collect($response->json('organic_results'));\n\n        $results->map(function ($result) {\n            return [\n                'title' => $result['title'],\n                'link' => $result['link'],\n                'snippet' => $result['snippet'],\n            ];\n        })->take(4);\n\n        return view('prompts.search-tool-results', [\n            'results' => $results,\n        ])->render();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Structured Output in Prism PHP\nDESCRIPTION: Shows how to test structured output generation with schema validation. Demonstrates creating object schemas and validating structured responses.\nSOURCE: https://github.com/prism-php/prism/blob/main/docs/core-concepts/testing.md#2025-04-21_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Prism\\Prism\\Prism;\nuse Prism\\Prism\\Structured\\Response as StructuredResponse;\nuse Prism\\Prism\\ValueObjects\\Usage;\nuse Prism\\Prism\\ValueObjects\\ResponseMeta;\nuse Prism\\Prism\\Schema\\ObjectSchema;\nuse Prism\\Prism\\Schema\\StringSchema;\n\nit('can generate structured response', function () {\n    $schema = new ObjectSchema(\n        name: 'user',\n        description: 'A user object, because we love organizing things!',\n        properties: [\n            new StringSchema('name', 'The user\\'s name (hopefully not \"test test\")'),\n            new StringSchema('bio', 'A brief bio (no novels, please)'),\n        ],\n        requiredFields: ['name', 'bio']\n    );\n\n    $fakeResponse = new StructuredResponse(\n        steps: collect([]),\n        responseMessages: collect([]),\n        text: json_encode([\n            'name' => 'Alice Tester',\n            'bio' => 'Professional bug hunter and code wrangler'\n        ]),\n        structured: [\n            'name' => 'Alice Tester',\n            'bio' => 'Professional bug hunter and code wrangler'\n        ],\n        finishReason: FinishReason::Stop,\n        usage: new Usage(10, 20),\n        meta: new Meta('fake-1', 'fake-model'),\n        additionalContent: []\n    );\n\n    $fake = Prism::fake([$fakeResponse]);\n\n    $response = Prism::structured()\n        ->using('anthropic', 'claude-3-sonnet')\n        ->withPrompt('Generate a user profile')\n        ->withSchema($schema)\n        ->asStructured();\n\n    // Assertions\n    expect($response->structured)->toBeArray();\n    expect($response->structured['name'])->toBe('Alice Tester');\n    expect($response->structured['bio'])->toBe('Professional bug hunter and code wrangler');\n});\n```\n\n----------------------------------------\n\nTITLE: PrismFake Assertions Usage in PHP\nDESCRIPTION: Shows various assertion methods available in PrismFake for testing purposes. Includes examples of asserting prompts, call counts, request properties, and provider configurations.\nSOURCE: https://github.com/prism-php/prism/blob/main/docs/core-concepts/testing.md#2025-04-21_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n// Assert specific prompt was sent\n$fake->assertPrompt('Who are you?');\n\n// Assert number of calls made\n$fake->assertCallCount(2);\n\n// Assert detailed request properties\n$fake->assertRequest(function ($requests) {\n    expect($requests[0]->provider())->toBe('anthropic');\n    expect($requests[0]->model())->toBe('claude-3-sonnet');\n});\n\n// Assert provider configuration\n$fake->assertProviderConfig(['api_key' => 'sk-1234']);\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Search Tool in Prism PHP\nDESCRIPTION: Illustrates how to create a simple search tool using Prism PHP's fluent API. The tool takes a search query parameter and returns search results as a string.\nSOURCE: https://github.com/prism-php/prism/blob/main/docs/core-concepts/tools-function-calling.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Prism\\Prism\\Facades\\Tool;\n\n$searchTool = Tool::as('search')\n    ->for('Search for current information')\n    ->withStringParameter('query', 'The search query')\n    ->using(function (string $query): string {\n        // Your search implementation\n        return \"Search results for: {$query}\";\n    });\n```\n\n----------------------------------------\n\nTITLE: Testing Multiple Responses with Tool Calls in Prism PHP\nDESCRIPTION: Shows how to test conversations or scenarios requiring multiple responses, including tool calls. Demonstrates handling of tool calls and completion responses.\nSOURCE: https://github.com/prism-php/prism/blob/main/docs/core-concepts/testing.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Prism\\Prism\\Text\\Response as TextResponse;\nuse Prism\\Prism\\ValueObjects\\Usage;\nuse Prism\\Prism\\ValueObjects\\ResponseMeta;\nuse Prism\\Prism\\ValueObjects\\ToolCall;\n\nit('can handle tool calls', function () {\n    $responses = [\n        new TextResponse(\n            text: '',\n            steps: collect([]),\n            responseMessages: collect([]),\n            toolCalls: [\n                new ToolCall(\n                    id: 'call_1',\n                    name: 'search',\n                    arguments: ['query' => 'Latest news']\n                )\n            ],\n            toolResults: [],\n            usage: new Usage(15, 25),\n            finishReason: FinishReason::ToolCalls,\n            meta: new Meta('fake-1', 'fake-model'),\n            messages: collect([]),\n            additionalContent: []\n        ),\n        new TextResponse(\n            text: 'Here are the latest news...',\n            steps: collect([]),\n            responseMessages: collect([]),\n            toolCalls: [],\n            toolResults: [],\n            usage: new Usage(20, 30),\n            finishReason: FinishReason::Stop,\n            meta: new Meta('fake-2', 'fake-model'),\n            messages: collect([]),\n            additionalContent: []\n        ),\n    ];\n\n    $fake = Prism::fake($responses);\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Strict Structured Output Schemas for OpenAI in PHP\nDESCRIPTION: This snippet shows how to set up strict structured output schemas when using OpenAI with Prism. It uses the 'withProviderMeta' method to specify OpenAI as the provider and enables strict schema mode.\nSOURCE: https://github.com/prism-php/prism/blob/main/docs/providers/openai.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$response = Prism::structured()\n    ->withProviderMeta(Provider::OpenAI, [ // [!code focus]\n        'schema' => [ // [!code focus]\n            'strict' => true // [!code focus]\n        ] // [!code focus]\n    ]) // [!code focus]\n```\n\n----------------------------------------\n\nTITLE: Implementing Strict Tool Schemas with OpenAI in PHP\nDESCRIPTION: This code demonstrates how to create a tool with strict schema for OpenAI's function calling with Structured Outputs. It sets up a 'search' tool with a string parameter and specifies the OpenAI provider with strict mode enabled.\nSOURCE: https://github.com/prism-php/prism/blob/main/docs/providers/openai.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nTool::as('search') // [!code focus]\n    ->for('Searching the web')\n    ->withStringParameter('query', 'the detailed search query')\n    ->using(fn (): string => '[Search results]')\n    ->withProviderMeta(Provider::OpenAI, [ // [!code focus]\n      'strict' => true, // [!code focus]\n    ]); // [!code focus]\n```\n\n----------------------------------------\n\nTITLE: Configuring Tool Choice Options in Prism PHP\nDESCRIPTION: Shows how to control how the AI uses tools with the withToolChoice method in Prism PHP. Options include letting the AI decide, forcing tool usage, or specifying a particular tool.\nSOURCE: https://github.com/prism-php/prism/blob/main/docs/core-concepts/tools-function-calling.md#2025-04-21_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nuse Prism\\Prism\\Prism;\nuse Prism\\Prism\\Enums\\Provider;\nuse Prism\\Prism\\Enums\\ToolChoice;\n\n$prism = Prism::text()\n    ->using(Provider::Anthropic, 'claude-3-5-sonnet-latest')\n    ->withMaxSteps(2)\n    ->withPrompt('How is the weather in Paris?')\n    ->withTools([$weatherTool])\n    // Let the AI decide whether to use tools\n    ->withToolChoice(ToolChoice::Auto)\n    // Force the AI to use a tool\n    ->withToolChoice(ToolChoice::Any)\n    // Force the AI to use a specific tool\n    ->withToolChoice('weather');\n```\n\n----------------------------------------\n\nTITLE: Using ResponseBuilder for Rich Response Testing in Prism PHP\nDESCRIPTION: Demonstrates use of ResponseBuilder for testing complex responses with steps, messages, and tool calls. Shows how to construct detailed response objects with multiple steps.\nSOURCE: https://github.com/prism-php/prism/blob/main/docs/core-concepts/testing.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Prism\\Prism\\Text\\ResponseBuilder;\nuse Prism\\Prism\\Text\\Step;\nuse Prism\\Prism\\ValueObjects\\Usage;\nuse Prism\\Prism\\ValueObjects\\ResponseMeta;\nuse Prism\\Prism\\ValueObjects\\ToolCall;\n\nPrism::fake([\n    (new ResponseBuilder)\n        ->addStep(new Step(\n            text: \"Step 1 response text\",\n            finishReason: FinishReason::Stop,\n            toolCalls: [/** tool calls */],\n            toolResults: [/** tool results */],\n            usage: new Usage(1000, 750),\n            meta: new Meta(id: 123, model: 'test-model'),\n            messages: [\n                new UserMessage('Test message 1', [\n                    new Document(\n                        document: '', \n                        mimeType: 'text/plain', \n                        dataFormat: 'text', \n                        documentTitle: 'Test document', \n                        documentContext: 'Test context'\n                    ),\n                ]),\n                new AssistantMessage('Test message 2')\n            ],\n            systemPrompts: [\n                new SystemMessage('Test system')\n            ],\n            additionalContent: ['test' => 'additional']\n        ))\n        ->addStep(new Step(\n            text: \"Step 2 response text\",\n            finishReason: FinishReason::Stop,\n            toolCalls: [/** tool calls */],\n            toolResults: [/** tool results */],\n            usage: new Usage(1000, 750),\n            meta: new Meta(id: 123, model: 'test-model'),\n            messages: [/** Second step messages */],\n            systemPrompts: [/** Second step system prompts */],\n            additionalContent: [/** Second step additional data */]\n        ))\n        ->toResponse()\n]);\n```\n\n----------------------------------------\n\nTITLE: Defining Object Parameters for Prism PHP Tools\nDESCRIPTION: Demonstrates how to define object parameters for tools in Prism PHP. Object parameters handle complex data structures with multiple fields and types.\nSOURCE: https://github.com/prism-php/prism/blob/main/docs/core-concepts/tools-function-calling.md#2025-04-21_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nuse Prism\\Prism\\Facades\\Tool;\nuse Prism\\Prism\\Schema\\StringSchema;\nuse Prism\\Prism\\Schema\\NumberSchema;\n\n$tool = Tool::as('update_user')\n    ->for('Update a user profile')\n    ->withObjectParameter(\n        'user',\n        'The user profile data',\n        [\n            new StringSchema('name', 'User\\'s full name'),\n            new NumberSchema('age', 'User\\'s age'),\n            new StringSchema('email', 'User\\'s email address')\n        ],\n        requiredFields: ['name', 'email']\n    )\n    ->using(function (array $user): string {\n        return \"Updated user profile for: {$user['name']}\";\n    });\n```\n\n----------------------------------------\n\nTITLE: Using Schema-Based Parameters for Prism PHP Tools\nDESCRIPTION: Shows how to use Prism's schema system for defining complex, nested data structures in tool parameters. This approach is ideal for sophisticated data models.\nSOURCE: https://github.com/prism-php/prism/blob/main/docs/core-concepts/tools-function-calling.md#2025-04-21_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nuse Prism\\Prism\\Facades\\Tool;\nuse Prism\\Prism\\Schema\\ObjectSchema;\nuse Prism\\Prism\\Schema\\StringSchema;\nuse Prism\\Prism\\Schema\\NumberSchema;\n\n$tool = Tool::as('create_user')\n    ->for('Create a new user profile')\n    ->withParameter(new ObjectSchema(\n        name: 'user',\n        description: 'The user profile data',\n        properties: [\n            new StringSchema('name', 'User\\'s full name'),\n            new NumberSchema('age', 'User\\'s age'),\n            new StringSchema('email', 'User\\'s email address')\n        ],\n        requiredFields: ['name', 'email']\n    ))\n    ->using(function (array $user): string {\n        return \"Created user profile for: {$user['name']}\";\n    });\n```\n\n----------------------------------------\n\nTITLE: Using Custom Provider with Prism Facade\nDESCRIPTION: Example usage of the custom provider through the Prism facade, demonstrating text generation with a specific model.\nSOURCE: https://github.com/prism-php/prism/blob/main/docs/advanced/custom-providers.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Prism\\Prism\\Facades\\Prism;\n\n$response = Prism::text()\n    ->using('my-custom-provider', 'model-name')\n    ->withPrompt('Hello, custom AI!')\n    ->generate();\n```\n\n----------------------------------------\n\nTITLE: Basic Text Response Testing in Prism PHP\nDESCRIPTION: Demonstrates how to set up basic response faking for text generation. Shows creation of a fake TextResponse object and making assertions on the response.\nSOURCE: https://github.com/prism-php/prism/blob/main/docs/core-concepts/testing.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Prism\\Prism\\Prism;\nuse Prism\\Prism\\Enums\\Provider;\nuse Prism\\Prism\\ValueObjects\\Usage;\nuse Prism\\Prism\\ValueObjects\\ResponseMeta;\nuse Prism\\Prism\\Enums\\FinishReason;\nuse Prism\\Prism\\Text\\Response as TextResponse;\n\nit('can generate text', function () {\n    // Create a fake text response\n    $fakeResponse = new TextResponse(\n        text: 'Hello, I am Claude!',\n        steps: collect([]),\n        responseMessages: collect([]),\n        toolCalls: [],\n        toolResults: [],\n        usage: new Usage(10, 20),\n        finishReason: FinishReason::Stop,\n        meta: new Meta('fake-1', 'fake-model'),\n        messages: collect([]),\n        additionalContent: []\n    );\n\n    // Set up the fake\n    $fake = Prism::fake([$fakeResponse]);\n\n    // Run your code\n    $response = Prism::text()\n        ->using(Provider::Anthropic, 'claude-3-5-sonnet-latest')\n        ->withPrompt('Who are you?')\n        ->asText();\n\n    // Make assertions\n    expect($response->text)->toBe('Hello, I am Claude!');\n});\n```\n\n----------------------------------------\n\nTITLE: Defining String Parameters for Prism PHP Tools\nDESCRIPTION: Shows how to define string parameters for tools in Prism PHP. String parameters are ideal for handling text inputs like search queries.\nSOURCE: https://github.com/prism-php/prism/blob/main/docs/core-concepts/tools-function-calling.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Prism\\Prism\\Facades\\Tool;\n\n$tool = Tool::as('search')\n    ->for('Search for information')\n    ->withStringParameter('query', 'The search query')\n    ->using(function (string $query): string {\n        return \"Search results for: {$query}\";\n    });\n```\n\n----------------------------------------\n\nTITLE: Implementing Citations with Anthropic\nDESCRIPTION: Example of enabling and using citations with custom document chunks and metadata\nSOURCE: https://github.com/prism-php/prism/blob/main/docs/providers/anthropic.md#2025-04-21_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nuse Prism\\Enums\\Provider;\nuse Prism\\Prism\\Prism;\nuse Prism\\Prism\\ValueObjects\\Messages\\UserMessage;\nuse Prism\\Prism\\ValueObjects\\Messages\\Support\\Document;\n\n$response = Prism::text()\n    ->using(Provider::Anthropic, 'claude-3-5-sonnet-20241022')\n    ->withMessages([\n        new UserMessage(\n            content: \"Is the grass green and the sky blue?\",\n            additionalContent: [\n                Document::fromChunks(\n                    chunks: [\"The grass is green.\", \"Flamingos are pink.\", \"The sky is blue.\"],\n                    title: 'The colours of nature',\n                    context: 'The go-to textbook on the colours found in nature!'\n                )\n            ]\n        )\n    ])\n    ->withProviderMeta(Provider::Anthropic, ['citations' => true])\n    ->asText();\n```\n\n----------------------------------------\n\nTITLE: Testing Embedding Generation with Prism PHP\nDESCRIPTION: Demonstrates how to test embedding generation using Prism PHP library with fake responses. Creates a test case that verifies embedding generation with OpenAI provider and validates the response structure and dimensions.\nSOURCE: https://github.com/prism-php/prism/blob/main/docs/core-concepts/testing.md#2025-04-21_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse Prism\\Prism\\Prism;\nuse Prism\\Prism\\Enums\\Provider;\nuse Prism\\Prism\\ValueObjects\\Embedding;\nuse Prism\\Prism\\ValueObjects\\EmbeddingsUsage;\nuse Prism\\Prism\\Embeddings\\Response as EmbeddingsResponse;\n\nit('can generate embeddings', function () {\n    $fakeResponse = new EmbeddingsResponse(\n        embeddings: [new Embedding(array_fill(0, 1536, 0.1))],\n        usage: new EmbeddingsUsage(\n            tokens: 10,\n        )\n    );\n\n    Prism::fake([$fakeResponse]);\n\n    $response = Prism::embeddings()\n        ->using(Provider::OpenAI, 'text-embedding-3-small')\n        ->fromInput('Test content for embedding generation.')\n        ->generate();\n\n    expect($response->embeddings)->toHaveCount(1)\n        ->and($response->embeddings[0]->embedding)\n        ->toBeArray()\n        ->toHaveCount(1536);\n});\n```\n\n----------------------------------------\n\nTITLE: Processing Citations with Footnotes\nDESCRIPTION: Example of processing citation chunks and creating footnotes from the response\nSOURCE: https://github.com/prism-php/prism/blob/main/docs/providers/anthropic.md#2025-04-21_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nuse Prism\\Prism\\Providers\\Anthropic\\ValueObjects\\MessagePartWithCitations;\nuse Prism\\Prism\\Providers\\Anthropic\\ValueObjects\\Citation;\n\n$messageChunks = $response->additionalContent['messagePartsWithCitations'];\n\n$text = '';\n$footnotes = [];\n\n$footnoteId = 1;\n\n/** @var MessagePartWithCitations $messageChunk  */\nforeach ($messageChunks as $messageChunk) {\n    $text .= $messageChunk->text;\n    \n    /** @var Citation $citation */\n    foreach ($messageChunk->citations as $citation) {\n        $footnotes[] = [\n            'id' => $footnoteId,\n            'document_title' => $citation->documentTitle,\n            'reference_start' => $citation->startIndex,\n            'reference_end' => $citation->endIndex\n        ];\n    \n        $text .= '<sup><a href=\"#footnote-'.$footnoteId.'\">'.$footnoteId.'</a></sup>';\n    \n        $footnoteId++;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Number Parameters for Prism PHP Tools\nDESCRIPTION: Demonstrates how to define number parameters for tools in Prism PHP. Number parameters handle integer or floating-point values for calculations or numeric inputs.\nSOURCE: https://github.com/prism-php/prism/blob/main/docs/core-concepts/tools-function-calling.md#2025-04-21_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Prism\\Prism\\Facades\\Tool;\n\n$tool = Tool::as('calculate')\n    ->for('Perform calculations')\n    ->withNumberParameter('value', 'The number to process')\n    ->using(function (float $value): string {\n        return \"Calculated result: {$value * 2}\";\n    });\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Content Documents\nDESCRIPTION: Example of using custom content documents for citations with custom chunking strategy\nSOURCE: https://github.com/prism-php/prism/blob/main/docs/providers/anthropic.md#2025-04-21_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse Prism\\Enums\\Provider;\nuse Prism\\Prism\\Prism;\nuse Prism\\Prism\\ValueObjects\\Messages\\UserMessage;\nuse Prism\\Prism\\ValueObjects\\Messages\\Support\\Document;\n\nPrism::text()\n    ->using(Provider::Anthropic, 'claude-3-5-sonnet-20241022')\n    ->withMessages([\n        new UserMessage(\n            content: \"Is the grass green and the sky blue?\",\n            additionalContent: [\n                Document::fromChunks([\"The grass is green.\", \"Flamingos are pink.\", \"The sky is blue.\"])\n            ]\n        )\n    ])\n    ->asText();\n```\n\n----------------------------------------\n\nTITLE: Defining Enum Parameters for Prism PHP Tools\nDESCRIPTION: Shows how to define enum parameters for tools in Prism PHP. Enum parameters restrict values to a specific set of options, like statuses or categories.\nSOURCE: https://github.com/prism-php/prism/blob/main/docs/core-concepts/tools-function-calling.md#2025-04-21_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nuse Prism\\Prism\\Facades\\Tool;\n\n$tool = Tool::as('set_status')\n    ->for('Set the status')\n    ->withEnumParameter(\n        'status',\n        'The new status',\n        ['draft', 'published', 'archived']\n    )\n    ->using(function (string $status): string {\n        return \"Status set to: {$status}\";\n    });\n```\n\n----------------------------------------\n\nTITLE: Defining Array Parameters for Prism PHP Tools\nDESCRIPTION: Demonstrates how to define array parameters for tools in Prism PHP. Array parameters handle lists of items, such as tags or multiple values.\nSOURCE: https://github.com/prism-php/prism/blob/main/docs/core-concepts/tools-function-calling.md#2025-04-21_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse Prism\\Prism\\Facades\\Tool;\n\n$tool = Tool::as('process_tags')\n    ->for('Process a list of tags')\n    ->withArrayParameter(\n        'tags',\n        'List of tags to process',\n        new StringSchema('tag', 'A single tag')\n    )\n    ->using(function (array $tags): string {\n        return \"Processing tags: \" . implode(', ', $tags);\n    });\n```\n\n----------------------------------------\n\nTITLE: Defining Boolean Parameters for Prism PHP Tools\nDESCRIPTION: Shows how to define boolean parameters for tools in Prism PHP. Boolean parameters are used for true/false flags like feature toggles.\nSOURCE: https://github.com/prism-php/prism/blob/main/docs/core-concepts/tools-function-calling.md#2025-04-21_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse Prism\\Prism\\Facades\\Tool;\n\n$tool = Tool::as('feature_toggle')\n    ->for('Toggle a feature')\n    ->withBooleanParameter('enabled', 'Whether to enable the feature')\n    ->using(function (bool $enabled): string {\n        return \"Feature is now \" . ($enabled ? 'enabled' : 'disabled');\n    });\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenAI Integration in PHP\nDESCRIPTION: This snippet shows the configuration array for setting up OpenAI integration in a PHP application. It includes the API URL, API key, and organization settings, which are typically retrieved from environment variables.\nSOURCE: https://github.com/prism-php/prism/blob/main/docs/providers/openai.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n'openai' => [\n    'url' => env('OPENAI_URL', 'https://api.openai.com/v1'),\n    'api_key' => env('OPENAI_API_KEY', ''),\n    'organization' => env('OPENAI_ORGANIZATION', null),\n]\n```\n\n----------------------------------------\n\nTITLE: Accessing Thinking Block from Response\nDESCRIPTION: Examples of accessing the thinking block from both Response and Step objects\nSOURCE: https://github.com/prism-php/prism/blob/main/docs/providers/anthropic.md#2025-04-21_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse Prism\\Enums\\Provider;\nuse Prism\\Prism\\Prism;\n\nPrism::text()\n    ->using('anthropic', 'claude-3-7-sonnet-latest')\n    ->withPrompt('What is the meaning of life, the universe and everything in popular fiction?')\n    ->withProviderMeta(Provider::Anthropic, ['thinking' => ['enabled' => true]]) \n    ->asText();\n\n$response->additionalContent['thinking'];\n```\n\n----------------------------------------\n\nTITLE: Implementing Prompt Caching with Anthropic\nDESCRIPTION: Example showing how to enable prompt caching for system messages, user messages, and tools using withProviderMeta method\nSOURCE: https://github.com/prism-php/prism/blob/main/docs/providers/anthropic.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Prism\\Enums\\Provider;\nuse Prism\\Prism\\Prism;\nuse Prism\\Prism\\Tool;\nuse Prism\\Prism\\ValueObjects\\Messages\\UserMessage;\nuse Prism\\Prism\\ValueObjects\\Messages\\SystemMessage;\n\nPrism::text()\n    ->using(Provider::Anthropic, 'claude-3-5-sonnet-20241022')\n    ->withMessages([\n        (new SystemMessage('I am a long re-usable system message.'))\n            ->withProviderMeta(Provider::Anthropic, ['cacheType' => 'ephemeral']),\n\n        (new UserMessage('I am a long re-usable user message.'))\n            ->withProviderMeta(Provider::Anthropic, ['cacheType' => 'ephemeral'])\n    ])\n    ->withTools([\n        Tool::as('cache me')\n            ->withProviderMeta(Provider::Anthropic, ['cacheType' => 'ephemeral'])\n    ])\n    ->asText();\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Provider in Service Provider\nDESCRIPTION: Service provider implementation showing how to register a custom provider with the Prism manager, including API key configuration.\nSOURCE: https://github.com/prism-php/prism/blob/main/docs/advanced/custom-providers.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Providers;\n\nuse App\\Prism\\Providers\\MyCustomProvider;\nuse Illuminate\\Support\\ServiceProvider;\n\nclass AppServiceProvider extends ServiceProvider\n{\n    public function boot(): void\n    {\n        $this->app['prism-manager']->extend('my-custom-provider', function ($app, $config) {\n            return new MyCustomProvider(\n                apiKey: $config['api_key'] ?? '',\n            );\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Anthropic Settings in PHP\nDESCRIPTION: Configuration array for Anthropic integration including API key, version, thinking budget and beta features settings\nSOURCE: https://github.com/prism-php/prism/blob/main/docs/providers/anthropic.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n'anthropic' => [\n    'api_key' => env('ANTHROPIC_API_KEY', ''),\n    'version' => env('ANTHROPIC_API_VERSION', '2023-06-01'),\n    'default_thinking_budget' => env('ANTHROPIC_DEFAULT_THINKING_BUDGET', 1024),\n    // Include beta strings as a comma separated list.\n    'anthropic_beta' => env('ANTHROPIC_BETA', null),\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Provider in Prism Config\nDESCRIPTION: Configuration array setup for the custom provider, including API key environment variable definition.\nSOURCE: https://github.com/prism-php/prism/blob/main/docs/advanced/custom-providers.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    'providers' => [\n        // ... other providers ...\n        'my-custom-provider' => [\n            'api_key' => env('MY_CUSTOM_PROVIDER_API_KEY'),\n        ],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Configuring Max Steps for Tool Usage in Prism PHP\nDESCRIPTION: Shows how to configure the maximum number of steps for tool usage in Prism PHP. Tools require at least 2 steps to function properly - one for the initial prompt and at least one for tool calls.\nSOURCE: https://github.com/prism-php/prism/blob/main/docs/core-concepts/tools-function-calling.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Prism\\Prism\\Prism;\nuse Prism\\Prism\\Enums\\Provider;\n\nPrism::text()\n    ->using(Provider::Anthropic, 'claude-3-5-sonnet-latest')\n    // Increase max steps to at least 2\n    ->withMaxSteps(2)\n    ->withPrompt('What is the weather like in Paris?')\n    ->withTools([$weatherTool])\n    ->asText();\n```\n\n----------------------------------------\n\nTITLE: Enabling Extended Thinking Mode\nDESCRIPTION: Example of enabling extended thinking mode for text and structured outputs with default budget\nSOURCE: https://github.com/prism-php/prism/blob/main/docs/providers/anthropic.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Prism\\Enums\\Provider;\nuse Prism\\Prism\\Prism;\n\nPrism::text()\n    ->using('anthropic', 'claude-3-7-sonnet-latest')\n    ->withPrompt('What is the meaning of life, the universe and everything in popular fiction?')\n    // enable thinking\n    ->withProviderMeta(Provider::Anthropic, ['thinking' => ['enabled' => true]]) \n    ->asText();\n```\n\n----------------------------------------\n\nTITLE: Using AnthropicCacheType Enum for Cache Configuration\nDESCRIPTION: Alternative approach to configure caching using the AnthropicCacheType enum\nSOURCE: https://github.com/prism-php/prism/blob/main/docs/providers/anthropic.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Prism\\Enums\\Provider;\nuse Prism\\Prism\\Providers\\Anthropic\\Enums\\AnthropicCacheType;\nuse Prism\\Prism\\ValueObjects\\Messages\\UserMessage;\nuse Prism\\Prism\\ValueObjects\\Messages\\Support\\Document;\n\n(new UserMessage('I am a long re-usable user message'))->withProviderMeta(Provider::Anthropic, ['cacheType' => AnthropicCacheType::ephemeral])\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Thinking Budget\nDESCRIPTION: Setting a custom thinking budget when using extended thinking mode\nSOURCE: https://github.com/prism-php/prism/blob/main/docs/providers/anthropic.md#2025-04-21_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Prism\\Enums\\Provider;\nuse Prism\\Prism\\Prism;\n\nPrism::text()\n    ->using('anthropic', 'claude-3-7-sonnet-latest')\n    ->withPrompt('What is the meaning of life, the universe and everything in popular fiction?')\n    // Enable thinking and set a budget\n    ->withProviderMeta(Provider::Anthropic, [\n        'thinking' => [\n            'enabled' => true, \n            'budgetTokens' => 2048\n        ]\n    ]);\n```\n\n----------------------------------------\n\nTITLE: Setting Timeout for Ollama Requests in PHP\nDESCRIPTION: This code demonstrates how to extend the client's timeout when making requests to Ollama. It uses the withClientOptions() method to set a custom timeout value.\nSOURCE: https://github.com/prism-php/prism/blob/main/docs/providers/ollama.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nPrism::text() // [!code focus]\n  ->using(Provider::Ollama, 'gemma3:1b')\n  ->withPrompt('Who are you?')\n  ->withClientOptions(['timeout' => 60]) // [!code focus]\n```\n\n----------------------------------------\n\nTITLE: Configuring Ollama URL in PHP\nDESCRIPTION: This snippet shows how to configure the Ollama URL in a PHP configuration file. It uses the env() function to set a default URL if not provided in the environment.\nSOURCE: https://github.com/prism-php/prism/blob/main/docs/providers/ollama.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n'ollama' => [\n    'url' => env('OLLAMA_URL', 'http://localhost:11434/v1'),\n],\n```\n\n----------------------------------------\n\nTITLE: Installing Prism via Composer\nDESCRIPTION: Command to install the Prism PHP package using Composer package manager. Recommended to specify a version constraint to prevent breaking changes.\nSOURCE: https://github.com/prism-php/prism/blob/main/docs/getting-started/installation.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require prism-php/prism\n```\n\n----------------------------------------\n\nTITLE: Publishing Prism Configuration\nDESCRIPTION: Laravel artisan command to publish Prism's configuration file to the application's config directory, creating config/prism.php for customization.\nSOURCE: https://github.com/prism-php/prism/blob/main/docs/getting-started/installation.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan vendor:publish --tag=prism-config\n```\n\n----------------------------------------\n\nTITLE: Using Callouts in Markdown Documentation\nDESCRIPTION: Examples of different callout types in Markdown for highlighting important information, tips, warnings, and cautions in documentation.\nSOURCE: https://github.com/prism-php/prism/blob/main/docs/documentation-style-guide.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n> [!NOTE]\n> Highlights information that users should take into account, even when skimming.\n> [!TIP]\n> Optional information to help a user be more successful.\n> [!IMPORTANT]\n> Crucial information necessary for users to succeed.\n> [!WARNING]\n> Critical content demanding immediate user attention due to potential risks.\n> [!CAUTION]\n> Negative potential consequences of an action.\n```\n\n----------------------------------------\n\nTITLE: Running Prism Documentation in Development Mode\nDESCRIPTION: Command to start the Vitepress development server for the Prism documentation.\nSOURCE: https://github.com/prism-php/prism/blob/main/docs/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm run docs:dev\n```\n\n----------------------------------------\n\nTITLE: Improving Documentation Tone Examples\nDESCRIPTION: Demonstrates the transformation of formal, jargon-heavy language into more approachable and user-friendly documentation content.\nSOURCE: https://github.com/prism-php/prism/blob/main/docs/documentation-style-guide.md#2025-04-21_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n❌ \"This documentation delineates the methodologies for implementing the authentication system.\"\n✅ \"In this guide, you'll learn how to add authentication to your app. We'll cover everything from basic login forms to OAuth providers.\"\n\n❌ \"The utilization of queues facilitates the handling of resource-intensive operations.\"\n✅ \"Queues let you handle time-consuming tasks in the background, keeping your app fast and your users happy.\"\n\n❌ \"Exception handling must be implemented to prevent application failure.\"\n✅ \"Let's make your app more robust by catching and handling potential errors gracefully.\"\n```\n\n----------------------------------------\n\nTITLE: Building Prism Documentation for Production\nDESCRIPTION: Command to build the Vitepress documentation for production deployment to Netlify.\nSOURCE: https://github.com/prism-php/prism/blob/main/docs/README.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm run docs:build\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Clear Writing in Technical Documentation\nDESCRIPTION: Examples of poor and improved writing styles for technical documentation, emphasizing clarity and directness.\nSOURCE: https://github.com/prism-php/prism/blob/main/docs/documentation-style-guide.md#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n❌ \"The configuration file must be published prior to utilization.\"\n✅ \"First, let's publish your config file so you can customize these options.\"\n\n❌ \"It is recommended that validation be implemented using the provided methods.\"\n✅ \"Validate your inputs using the validate() method.\"\n\n❌ \"The feature enables asynchronous processing capabilities.\"\n✅ \"This powerful feature lets you process jobs in the background, keeping your app snappy and responsive.\"\n```\n\n----------------------------------------\n\nTITLE: Querying Users with Eloquent in PHP\nDESCRIPTION: Demonstrates basic and advanced Eloquent queries for retrieving active users, including filtering by subscription status.\nSOURCE: https://github.com/prism-php/prism/blob/main/docs/documentation-style-guide.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// Basic Example\n$users = User::where('active', true)\n    ->orderBy('name')\n    ->get();\n// With Additional Constraints\n$users = User::where('active', true)\n    ->whereHas('subscriptions', function ($query) {\n        $query->where('status', 'active');\n    })\n    ->orderBy('name')\n    ->get();\n```\n\n----------------------------------------\n\nTITLE: Importing ExceptionSupport Component in Vue\nDESCRIPTION: A Vue script setup block that imports the ExceptionSupport component from the components directory, which is likely used to display provider-specific exception support information.\nSOURCE: https://github.com/prism-php/prism/blob/main/docs/advanced/error-handling.md#2025-04-21_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport ExceptionSupport from '../components/ExceptionSupport.vue'\n</script>\n```\n\n----------------------------------------\n\nTITLE: Implementing Provider Interface in PHP\nDESCRIPTION: Core interface definition that all custom providers must implement, containing methods for text, structured, and embeddings processing.\nSOURCE: https://github.com/prism-php/prism/blob/main/docs/advanced/custom-providers.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Prism\\Prism\\Embeddings\\Request as EmbeddingsRequest;\nuse Prism\\Prism\\Embeddings\\Response as EmbeddingsResponse;\nuse Prism\\Prism\\Structured\\Request as StructuredRequest;\nuse Prism\\Prism\\Structured\\Response as StructuredResponse;\nuse Prism\\Prism\\Text\\Request as TextRequest;\nuse Prism\\Prism\\Text\\Response as TextResponse;\n\ninterface Provider\n{\n    public function text(TextRequest $request): TextResponse;\n\n    public function structured(StructuredRequest $request): StructuredResponse;\n\n    public function embeddings(EmbeddingsRequest $request): EmbeddingsResponse;\n}\n```"
  }
]